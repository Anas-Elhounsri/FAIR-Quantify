{
  "application_domain": [
    {
      "confidence": 51.07,
      "result": {
        "type": "String",
        "value": "Natural Language Processing"
      },
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9582536539458839,
      "result": {
        "type": "String",
        "value": "Semantic web"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "References",
        "parent_header": [
          "Mainzelliste"
        ],
        "type": "Text_excerpt",
        "value": "Mainzelliste is used in various medical joint research projects, including:\n\n- German Mukoviszidose Register ([Data protection concept](http://muko.info/fileadmin/redaktion/datei_gruppen/muko_institut/2015_06_24_Datenschutzkonzept_Mukoviszidose-Register_2.0.pdf))\n- European chILD-EU register ([Ethics/Data Safety](http://www.klinikum.uni-muenchen.de/Child-EU/en/register/ethics_data_safety/index.html))\n- [German Cancer Consortium](https://ccp-it.dktk.dkfz.de/)\n- Cluster for Individualized Immune Intervention (Ci3) ([Meeting abstract on IT concept](http://www.egms.de/static/de/meetings/gmds2014/14gmds106.shtml))\n- Studies conducted by the [LASER group](http://www.la-ser.com/)\n\nAnother important use case is pseudonymization in central biobanks, for example:\n\n- [Comprehensive Biomaterial Bank Marburg](http://www.cbbmr.de/informationen-allgemein/allgemeines.html)\n- [Hannover Unified Biobank](http://www.pg-ss.imi.uni-erlangen.de/SiteCollectionDocuments/Hannover_HUB_IT_Kersting.pdf)\n\nThe Mainzelliste API has been implemented in the following projects and software products:\n\n- [OSSE \u2013 Open Source Registry System for Rare Diseases in the EU](http://osse-register.de)\n- [OpenClinica](https://openclinica.com/) (see [presentation on integrating Mainzelliste and other software](https://community.openclinica.com/sites/fileuploads/akaza/cms-community/Tomas%20Skripcak%20-%20Lessons%20learned.pdf))\n- [secuTrial](http://secutrial.com) (see [modules description](http://www.secutrial.com/module/))\n- [Semantic Clinical Registry System for Rare Diseases](http://aksw.org/Projects/SCRS.html)\n- [MOSAIC](https://mosaic-greifswald.de/) (Mainzelliste interface used by \"Trusted-Third-Party-Dispatcher\", see [Bialke et al. A workflow-driven approach to integrate generic software modules in a Trusted Third Party. Journal of Translational Medicine 2015, 13:176](http://www.translational-medicine.com/content/13/1/176)\n- [Electronic data capture system by Fraunhofer FOKUS](https://cdn3.scrivito.com/fokus/57a537e2ec27cb7b/0a3a0655dcc079f58890e39dbdca4781/E-HEALTH_Standards_PB_03-2015_v03.pdf)\n- [Centraxx](http://www.kairos.de/centraxx/)\n- German National Cohort (uses a subset of the API) ([Data protection concept](http://nationale-kohorte.de/wp-content/uploads/2015/07/Treuhandstellenkonzept.pdf))\n- German Center for Cardiovascular Disease (DZHK) ([Data protection concept](https://dzhk.de/fileadmin/user_upload/Datenschutzkonzept_des_DZHK.pdf))\n\nWe have compiled this list from the results of public search engines. If you use the Mainzelliste or its API, we would be glad to include your project in this list. Please don't hestitate to [contact us](mailto:info@mainzelliste.de).\n\n"
      },
      "source": "https://raw.githubusercontent.com/medicalinformatics/MainzellisteSEL/srl/README",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/medicalinformatics/MainzellisteSEL"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contributing",
        "parent_header": [
          "Mainzelliste"
        ],
        "type": "Text_excerpt",
        "value": "We would love to include your useful changes to the Mainzelliste code in a future official release. See the related [Wiki page](https://bitbucket.org/medicalinformatics/mainzelliste/wiki/Contributing) for further information on contributing code.\n\n"
      },
      "source": "https://raw.githubusercontent.com/medicalinformatics/MainzellisteSEL/srl/README",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-09-25T09:00:26Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-04T22:17:37Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Extended Mainzelliste - Mainzelliste SecureEpiLinker (MainSEL) "
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.991140966567829,
      "result": {
        "original_header": "Disclaimer",
        "type": "Text_excerpt",
        "value": "This repository is a fork of the official Mainzelliste project, embodying the features described in the paper \u201cMainzelliste SecureEpiLinker (MainSEL): Privacy-Preserving Record Linkage using Secure Multi-Party Computation\u201d. \nIt is intended that these new features will eventually be integrated back into the official Mainzelliste software.: https://bitbucket.org/medicalinformatics/mainzelliste/src \n"
      },
      "source": "https://raw.githubusercontent.com/medicalinformatics/MainzellisteSEL/srl/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9476579095605789,
      "result": {
        "original_header": "Mainzelliste",
        "type": "Text_excerpt",
        "value": "Mainzelliste is a web-based first-level pseudonymization service. It allows for the creation of personal identifiers (PID) from identifying attributes (IDAT), and thanks to the record linkage functionality, this is even possible with poor quality identifying data. The functions are available through a RESTful web interface. \nIn order to receive up-to-date information on the project, you can register to be on our [mailing list](https://lists.uni-mainz.de/sympa/subscribe/mainzelliste). \nThe following article describes the underlying concepts of Mainzelliste and the motivation for its development. Please cite it when referring to Mainzelliste in publications: \n"
      },
      "source": "https://raw.githubusercontent.com/medicalinformatics/MainzellisteSEL/srl/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9631558838907985,
      "result": {
        "original_header": "1.7.0",
        "type": "Text_excerpt",
        "value": "This release introduces support for externally generated IDs. This feature introduces an incompatible API change; therefore the API version is bumped to 3.0. However, old API versions are still supported by means of the `mainzellisteApiVersion` header, i.e. this software release is fully backwards compatible.  \nNew features: \n- Support for externally generated IDs. See the [Wiki page on this topic](https://bitbucket.org/medicalinformatics/mainzelliste/wiki/External-IDs) for further information on how to use this feature.\n- The admin form for editing patient data now shows duplicates and potential duplicates of the patient. \n- Trying to edit a field that is not listed as editable in the `editPatient` token lead to HTTP status code 400 (Bad Request) instead of the more suitable 401 (Unauthorized).\n- Edit requests sometimes lead to an error message saying that date fields are missing even when the date was not be edited at all.\n- Some API methods returned inappropriate status codes for certain error conditions. \n- All writing API methods are now synchronized to prevent race conditions.\n \n"
      },
      "source": "https://raw.githubusercontent.com/medicalinformatics/MainzellisteSEL/srl/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8646428363831777,
      "result": {
        "original_header": "1.6.2",
        "type": "Text_excerpt",
        "value": "Adds `<attachClasses>` configuration parameter to Maven WAR Plugin in order to make classes accessible as a library. \n \n"
      },
      "source": "https://raw.githubusercontent.com/medicalinformatics/MainzellisteSEL/srl/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9939297606704669,
      "result": {
        "original_header": "1.6.1",
        "type": "Text_excerpt",
        "value": "This is a bugfix release for restoring compatibility with Java 7. Version 1.6.0 does not compile with Java versions <8 due to an unimplemented interface method, which has a default implementation in Java 8. \n"
      },
      "source": "https://raw.githubusercontent.com/medicalinformatics/MainzellisteSEL/srl/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9215944910828054,
      "result": {
        "original_header": "1.6.0",
        "type": "Text_excerpt",
        "value": "This release further enhances the mechanism to choose the UI language and includes some important fixes, notably the contribution of changes to prevent memory leaks contributed by Daniel Volk. Again, upgrading is possible from all previous releases by replacing the binary.   \n \n"
      },
      "source": "https://raw.githubusercontent.com/medicalinformatics/MainzellisteSEL/srl/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9130649559308541,
      "result": {
        "original_header": "New features:",
        "type": "Text_excerpt",
        "value": "- The language of the user forms can be set in the configuration file (e.g. `language = en`). This setting overrides all other means of setting the language.\n- The default language is now always English (it used to be the server's system language).\n- If the language is induced from the `Accept-Language` header, all languages listed therein are tried, respecting the preference order. Previously, if for example Albanian (or any other language for which no localization file is included) and German were listed in the header in this order, Mainzelliste did not consider the second choice (German) but used the server language.\n- When a cross origin (CORS) request issues an origin domain not listed as acceptable source, Mainzelliste now cancels the request. Previously, it processed the request nevertheless and relied on the web browser blocking the response. \n- Trailing whitespace is now trimmed from configuration parameters, as this was a common source of errors.\n- When printing the result of an ID request, the page order is omitted for a better print layout.\n- The logo can now also be read from a relative path within the .war file or from the directory `META-INF/resources` within a .jar file on the class path (contributed by Daniel Volk, see pull request #32).\n  \n \n"
      },
      "source": "https://raw.githubusercontent.com/medicalinformatics/MainzellisteSEL/srl/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.953245872542638,
      "result": {
        "original_header": "1.5.0",
        "type": "Text_excerpt",
        "value": "This release introduces a couple of new features and bug fixes, the addition of language selection via URL parameter being the only (backward compatible) change to the public API (now version 2.2). We recommend an upgrade to all users, which is possible from any earlier release without any steps necessary other than replacing the binary. The update is fully backwards compatible to all Mainzelliste versions down to 1.0, except for use cases with the requirement that future dates can be entered (these are now rejected by date validation). \n####New features: \n- A new field transformation, `StringTrimmer`, can be used to delete leading and trailing whitespace from a `PlainTextField`.\n- The language of user forms can be set by providing the language code as URL parameter `language` (currently `de` and `en` are supported). If provided, this parameter overrides the choice of preferred languages in the `Accept-Language` header.\n- Date validation rejects dates in the future.\n- Application name and version are provided in responses and callback requests as HTTP header `Server` and `User-Agent`, respectively, in the format `Mainzelliste/x.y.z`.\n- The implementation of the callback request ensures the use of state-of-the-art transport layer security (TLS) (contributed by Matthias Lemmer, see pull request #26).\n- When configuration parameter `callback.allowSelfsigned` is set to `true`, self-signed certificates on the target host are accepted when making callback requests (contributed by Matthias Lemmer, see pull request #26). \n- The host name provided by the `Origin` header was checked against the configured list of hosts (configuration parameter `servers.allowedOrigins`) even if equal to the host of the Mainzelliste instance itself, i.e. treating a same-origin request like a cross-origin request (reported by Benjamin Gathmann).\n- Requests with an invalid token (i.e. non-existent or of wrong type) lead to status code 400 (Bad Request), now 401 (Unauthorized) is returned.\n- Fixed internationalization of title in result page shown after a patient has been created (patientCreated.jsp). \n- Changed data type annotation for `Patient#fieldsString` and `Patient#inputFieldsString` to `@Lob` for portable mapping of unbounded character strings to appropriate database types.\n- Internal improvements in class `Persistor`.\n \n"
      },
      "source": "https://raw.githubusercontent.com/medicalinformatics/MainzellisteSEL/srl/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9385548386137399,
      "result": {
        "original_header": "1.4.3",
        "type": "Text_excerpt",
        "value": "This is a backward compatible maintenance release and we recommend an upgrade to all users. Also, we strongly recommend to incorporate the changes in the configuration template into actual configuration files (see comments below).\n \n"
      },
      "source": "https://raw.githubusercontent.com/medicalinformatics/MainzellisteSEL/srl/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9207684180451582,
      "result": {
        "original_header": "Changes in matching configuration:",
        "type": "Text_excerpt",
        "value": "- Fixes a typo in the proposed matching configuration. In existing configuration files based on the template (`mainzelliste.conf.default`), the value for `matcher.epilink.geburtsmonat.frequency` should be changed from `0.833` to `0.0833`. This change has to be made manually because the actually used configuration file resides outside of the distributed package. The location of the configuration file is defined in the context descriptor by parameter `de.pseudonymisierung.mainzelliste.ConfigurationFile` (see installation manual for details).\n- Also, the proposed weight threshold for matches (`matcher.epilink.threshold_match`) has been raised from `0.9` to `0.95`. We also recommend to adopt this change in existing configuration files. \nThese changes prevent that a definitive match occurs for two records that differ in one component (day, month, year) of the date of birth, all other fields being equal (reported by Matthias Lemmer). \n####Bug fixes:\n- When creating an `addPatient` token, ID types were not checked when using data item `idTypes` (API version 2.x syntax) with declared API version missing or < 2.0.\n- The configuration parameter for cross origin resource sharing and its explanation were missing in the configuration template.\n \n"
      },
      "source": "https://raw.githubusercontent.com/medicalinformatics/MainzellisteSEL/srl/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.937141319891427,
      "result": {
        "original_header": "1.4.1",
        "type": "Text_excerpt",
        "value": "This is a bug fix release and we recommend an upgrade to all users. Upgrading is possible from every earlier release, and there are no steps necessary apart from replacing the binary. \n- When a patient had been edited, the updated data was not considered for record linkage until after restarting the application (reported by Benjamin Gathmann).\n- POST /sessions/{sid}/tokens returned an invalid token object (reported by Matthias Lemmer).\n- Confirming an unsure case failed due to missing api version in request URL (fixed by Benjamin Gathmann, see pull request #22).\n- Date validation accepted some illegal dates when data was not entered through the select lists in the HTML form (fixed by Benjamin Gathmann, see pull request #24).\n- Some Instances of EntityManager were not closed on errors, leading to a memory leak. \n- Removed references to deleted Javascript files (contributed by Benjamin Gathmann, see pull request #20).\n- The version number is now read from pom.xml, i.e. this is the only place in the source code where the version number is set.\n- All HTML forms have been converted to HTML 5 and validated using the W3C markup validation service (https://validator.w3.org/).\n- Logging of Jersey class WebComponent has been limited to SEVERE to avoid excessive warning messages in use cases where POST /patients is used with an empty request body (see http://stackoverflow.com/questions/2011895/how-to-fix-jersey-post-request-parameters-warning).\n- Field#build can now be called with null as initialization object, returning an empty field.\n- Created tokens are logged entirely only in log level DEBUG. \n"
      },
      "source": "https://raw.githubusercontent.com/medicalinformatics/MainzellisteSEL/srl/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9469947400824076,
      "result": {
        "original_header": "1.4.0",
        "type": "Text_excerpt",
        "value": "This release implements API version 2.1, including the new features presented therein. For detailed information, we refer to the comprehensive API document (currently only available in German), which can be downloaded from the [project web site](http://www.mainzelliste.de). All preceding API versions are still supported. \nAs this release contains various bug fixes, we recommend an upgrade to all users, regardless of whether they plan to use the new features or not. Upgrading is possible from every earlier release, and there are no steps necessary apart from replacing the binary. As noted above, the update is fully backwards compatible to all Mainzelliste versions including 1.0. \n#### New features: \n- The user forms have been internationalized and are now available in English and German. Contributions for other languages are welcome: just send us the `MessageBundle_xx.properties` file for your language. The language is selected according to the `Accept-Language` header sent by the browser, with English being the default language if the requested language is not supported. The English translation was kindly provided by the project \u201cEuropean Management Platform for Childhood Interstitial Lung Diseases\u201d (chILD-EU).\n- Contact information and logo do not show \u201cUniversit\u00e4tsmedizin Mainz\u201d anymore but can be configured to identify the operator of the Mainzelliste instance in the user forms (see configuration parameters `operator.contact` and `operator.logo`).\n- Patient data can be edited by means of an `editPatient` token and a PUT request.\n- Sessions and tokens can be explicitly deleted by means of a DELETE request.\n- POST requests can be used to perform other HTTP methods (notably PUT and DELETE). This technique, frequently called \u201cmethod override\u201d, allows for the use of additional methods other than GET and POST from HTML forms.\n- Cross origin resource sharing (CORS) for simple GET requests. This makes it possible, for instance, to retrieve patient data via an AJAX request from a server in a different domain than the server that serves the web page. This requires configuration of the permissible hosts (see configuration parameter `servers.allowedOrigins`).\n- For use cases including the redirect functionality, the result page that appears after creating a patient can be disabled (see configuration parameter `result.show`).\n- In addition to specific IP addresses, IPv4 address ranges can be included in the list of addresses from which another server can get access (see configuration parameter `servers.{n}.allowedRemoteAdresses`)\n- For all successful requests to add a patient (POST /patients), the timestamp is logged in the database (for future use cases).\n- When making requests via the HTML interface, error messages are formatted as web pages.\n- The result page that is shown after a patient has been added now lists all requested pseudonyms according to parameter `idTypes` in the token (contributed by Matthias Lemmer). \n- The error message issued upon entering an ID of an unknown type stated the ID value instead of the ID type.\n- The JSON output of requests to sessions and tokens did not match the API documentation.\n- Token objects were not garbage collected, leading to memory problems in use cases where sessions exist for a long time and contain high numbers of tokens.\n- Submitting the form to add a patient from Internet Explorer returned JSON data in some cases, causing an error message due to unrecognized content.\n- The reserved word `value` appeared as a name in an SQL statement, which led to a database error when using Firebird.\n- Various methods turned out to be not thread-safe, causing errors in use cases where concurrent requests occur. \n- All Java classes now have complete Javadoc comments.\n- The source code has been cleaned up; in particular unused code, obsolete comments and test methods have been removed.\n- The filter name in the deployment descriptor (web.xml) has been changed from \u201cMainzer ID-Framework\u201d to \u201cMainzelliste\u201d.\n- The error message upon a failed callback request (while adding a patient) has been made more concrete so that the specific reason, such as a mismatch between the declared and actually used API version, can be detected more easily (contributed by Matthias Lemmer).\n \n"
      },
      "source": "https://raw.githubusercontent.com/medicalinformatics/MainzellisteSEL/srl/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9161029762716437,
      "result": {
        "original_header": "Bugfix:",
        "type": "Text_excerpt",
        "value": "- Creation of database schema failed with ReportingSQLException (reported by Matthias Lemmer).\n \n"
      },
      "source": "https://raw.githubusercontent.com/medicalinformatics/MainzellisteSEL/srl/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9754414492880139,
      "result": {
        "original_header": "1.3.0",
        "type": "Text_excerpt",
        "value": "As of release 1.3.0, a comprehensive API document exists. It is available as a PDF document from the project web page (see above). Software version 1.3 supports the former (1.0) as well as the current (2.0) API version.\n \n"
      },
      "source": "https://raw.githubusercontent.com/medicalinformatics/MainzellisteSEL/srl/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9678604020950364,
      "result": {
        "original_header": "New features and API changes:",
        "type": "Text_excerpt",
        "value": "- IDs and IDAT of existing patients can be read by means of a `readPatients` token and a GET request.\n- The id of the `createPatient` token can be injected into the redirect URL by using a designated template parameter.\n- When creating an `addPatient` token, specific ID types that should be created can be specified as an array in the token parameter `idTypes`. This replaces the former syntax (providing a single ID type).\n- The callback request transmits all IDs according to the types defined in the `addPatient` token.\n- The same holds for the response to POST /patients when requesting a JSON result (`Accept: application/json`). \n"
      },
      "source": "https://raw.githubusercontent.com/medicalinformatics/MainzellisteSEL/srl/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8852440804036675,
      "result": {
        "original_header": "Contributions",
        "type": "Text_excerpt",
        "value": "As an open source project, Mainzelliste profits from contributions from the research community. We would like to thank the following colleagues for their code contributions: \n"
      },
      "source": "https://raw.githubusercontent.com/medicalinformatics/MainzellisteSEL/srl/README",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/medicalinformatics/MainzellisteSEL/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/medicalinformatics/MainzellisteSEL/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "medicalinformatics/MainzellisteSEL"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/medicalinformatics/MainzellisteSEL/srl/README",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Bug fixes:",
        "parent_header": [
          "Mainzelliste",
          "Release notes",
          "1.1"
        ],
        "type": "Text_excerpt",
        "value": "- When a text field was set to `null` via a PUT request in JSON format, the string `\"null\"` was saved in the database and returned upon reading the field. To fix this, `null` values are now converted to empty strings.\n- Setting an empty value for field of type `IntegerField` failed with an exception.\n- Fixed memory leaks caused by the Java preferences system and improper shutdown of resources (contributed by Daniel Volk, see pull request #36).\n- Fixed logging during token creation and dependency errors in some IDEs (contributed by Daniel Volk, see pull request\n  #34).  \n"
      },
      "source": "https://raw.githubusercontent.com/medicalinformatics/MainzellisteSEL/srl/README",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Bug fixes and improvements:",
        "parent_header": [
          "Mainzelliste",
          "Release notes",
          "1.3.1"
        ],
        "type": "Text_excerpt",
        "value": "- GET request to /patients with invalid `readPatients` token caused a NullPointerException.\n- Creation of `readPatients` tokens has been accelerated by optimizing the database query and using an index.\n- Corrections in the template configuration file:\n    - A trailing space in `callback.allowedFormat` has been removed.\n    - Token type `readPatient` has been corrected to `readPatients`.\n"
      },
      "source": "https://raw.githubusercontent.com/medicalinformatics/MainzellisteSEL/srl/README",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9998369915252482,
      "result": {
        "original_header": "Disclaimer",
        "type": "Text_excerpt",
        "value": "The SecureEpilinker sMPC Node C++ source code is available at https://github.com/medicalinformatics/SecureEpilinker\n \n"
      },
      "source": "https://raw.githubusercontent.com/medicalinformatics/MainzellisteSEL/srl/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8591656142596147,
      "result": {
        "original_header": "Mainzelliste",
        "type": "Text_excerpt",
        "value": "> Lablans M, Borg A, \u00dcckert F. A RESTful interface to pseudonymization services in modern web applications. BMC Medical Informatics and Decision Making 2015, 15:2. <http://www.biomedcentral.com/1472-6947/15/2>. \nJava developers should have a look at [Mainzelliste.Client](https://bitbucket.org/medinfo_mainz/mainzelliste.client), a library that handles the HTTP calls necessary for using Mainzelliste in a client application.\n \n"
      },
      "source": "https://raw.githubusercontent.com/medicalinformatics/MainzellisteSEL/srl/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9983496212091799,
      "result": {
        "original_header": "1.6.2",
        "type": "Text_excerpt",
        "value": "Adds `<attachClasses>` configuration parameter to Maven WAR Plugin in order to make classes accessible as a library. \n \n"
      },
      "source": "https://raw.githubusercontent.com/medicalinformatics/MainzellisteSEL/srl/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8047026806926011,
      "result": {
        "original_header": "1.6.1",
        "type": "Text_excerpt",
        "value": "This is a bugfix release for restoring compatibility with Java 7. Version 1.6.0 does not compile with Java versions <8 due to an unimplemented interface method, which has a default implementation in Java 8. \n"
      },
      "source": "https://raw.githubusercontent.com/medicalinformatics/MainzellisteSEL/srl/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9776024308272415,
      "result": {
        "original_header": "1.6.0",
        "type": "Text_excerpt",
        "value": "This release further enhances the mechanism to choose the UI language and includes some important fixes, notably the contribution of changes to prevent memory leaks contributed by Daniel Volk. Again, upgrading is possible from all previous releases by replacing the binary.   \n \n"
      },
      "source": "https://raw.githubusercontent.com/medicalinformatics/MainzellisteSEL/srl/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999197005232814,
      "result": {
        "original_header": "1.5.0",
        "type": "Text_excerpt",
        "value": "This release introduces a couple of new features and bug fixes, the addition of language selection via URL parameter being the only (backward compatible) change to the public API (now version 2.2). We recommend an upgrade to all users, which is possible from any earlier release without any steps necessary other than replacing the binary. The update is fully backwards compatible to all Mainzelliste versions down to 1.0, except for use cases with the requirement that future dates can be entered (these are now rejected by date validation). \n"
      },
      "source": "https://raw.githubusercontent.com/medicalinformatics/MainzellisteSEL/srl/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999995581508027,
      "result": {
        "original_header": "1.4.3",
        "type": "Text_excerpt",
        "value": "This is a backward compatible maintenance release and we recommend an upgrade to all users. Also, we strongly recommend to incorporate the changes in the configuration template into actual configuration files (see comments below).\n \n"
      },
      "source": "https://raw.githubusercontent.com/medicalinformatics/MainzellisteSEL/srl/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9948537393375175,
      "result": {
        "original_header": "Changes in matching configuration:",
        "type": "Text_excerpt",
        "value": "####Bug fixes:\n- When creating an `addPatient` token, ID types were not checked when using data item `idTypes` (API version 2.x syntax) with declared API version missing or < 2.0.\n- The configuration parameter for cross origin resource sharing and its explanation were missing in the configuration template.\n \n"
      },
      "source": "https://raw.githubusercontent.com/medicalinformatics/MainzellisteSEL/srl/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9536764163710421,
      "result": {
        "original_header": "1.4.1",
        "type": "Text_excerpt",
        "value": "This is a bug fix release and we recommend an upgrade to all users. Upgrading is possible from every earlier release, and there are no steps necessary apart from replacing the binary. \n- Removed references to deleted Javascript files (contributed by Benjamin Gathmann, see pull request #20).\n- The version number is now read from pom.xml, i.e. this is the only place in the source code where the version number is set.\n- All HTML forms have been converted to HTML 5 and validated using the W3C markup validation service (https://validator.w3.org/).\n- Logging of Jersey class WebComponent has been limited to SEVERE to avoid excessive warning messages in use cases where POST /patients is used with an empty request body (see http://stackoverflow.com/questions/2011895/how-to-fix-jersey-post-request-parameters-warning).\n- Field#build can now be called with null as initialization object, returning an empty field.\n- Created tokens are logged entirely only in log level DEBUG. \n"
      },
      "source": "https://raw.githubusercontent.com/medicalinformatics/MainzellisteSEL/srl/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9994361188180418,
      "result": {
        "original_header": "1.4.0",
        "type": "Text_excerpt",
        "value": "As this release contains various bug fixes, we recommend an upgrade to all users, regardless of whether they plan to use the new features or not. Upgrading is possible from every earlier release, and there are no steps necessary apart from replacing the binary. As noted above, the update is fully backwards compatible to all Mainzelliste versions including 1.0. \n"
      },
      "source": "https://raw.githubusercontent.com/medicalinformatics/MainzellisteSEL/srl/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9956312789892148,
      "result": {
        "original_header": "1.3.0",
        "type": "Text_excerpt",
        "value": "As of release 1.3.0, a comprehensive API document exists. It is available as a PDF document from the project web page (see above). Software version 1.3 supports the former (1.0) as well as the current (2.0) API version.\n \n"
      },
      "source": "https://raw.githubusercontent.com/medicalinformatics/MainzellisteSEL/srl/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9990365676257734,
      "result": {
        "original_header": "1.1",
        "type": "Text_excerpt",
        "value": "#### Bug fixes:\n- Wrong characters in template configuration file (reported by Maximilian Ataian).\n- Wrong default path for configuration file.\n- A bug in IDGeneratorMemory caused a database error due to a duplicate primary key.\n \n"
      },
      "source": "https://raw.githubusercontent.com/medicalinformatics/MainzellisteSEL/srl/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.834250503732454,
      "result": {
        "original_header": "1.0",
        "type": "Text_excerpt",
        "value": "- Initial release\n \n"
      },
      "source": "https://raw.githubusercontent.com/medicalinformatics/MainzellisteSEL/srl/README",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/medicalinformatics/MainzellisteSEL/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Mainzelliste is a pseudonymization service originally created by the department for medical informatics\nat the University Medical Center Mainz. It provides the following features:\n\t- A centralized repository for identifying data (IDAT) of patients, i.e. data such\n\t  as name, date of birth etc.\n\t- Record Linkage procedures to determine if a patient is already present in the database.\n\t- Generation of non-speaking pseudonmys for use in medical research networks.\n\t- Session and token handling for distributed and web-based applications.\n\t- A restful HTTP interface.\n\t\nFor detailed information, we refer to the included documentation.\n\nCopyright (C) 2013-2015 Martin Lablans, Andreas Borg, Frank \u00dcckert\n\nThis program is free software; you can redistribute it and/or modify it under the \nterms of the GNU Affero General Public License as published by the Free Software \nFoundation; either version 3 of the License, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY \nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A \nPARTICULAR PURPOSE. See the GNU General Public License for more details.\n\nA copy of the GNU Affero General Public License is included in this package in \nlicenses/agpl-3.0.txt.\n\nAdditional permission under GNU GPL version 3 section 7\n\nIf you modify this Program, or any covered work, by linking or combining it with \nJersey (https://jersey.java.net) (or a modified version of that library), \ncontaining parts covered by the terms of the General Public License, version 2.0, \nthe licensors of this Program grant you additional permission to convey the resulting work.\n\n\nThis program uses the following third-party libraries under the listed licenses, which are\nincluded in folder \"licences\" under the listed file names:\n\n\t- Apache Commons Codec, Collections, DBCP, Lang, Logging, Pool\n\t    (http://commons.apache.org/), \n\t  Apache HttpComponents (http://hc.apache.org/),\n\t  Apache Log4j (http://logging.apache.org/log4j/),\n\t  Apache OpenJPA 2.2 (http://openjpa.apache.org/): Apache Licence 2.0, apache-2.0.txt\n\t- Serp (http://serp.sourceforge.net/): BSD License, bsd-serp.txt\n\nFurthermore, the following files incorporate code by other authors:\n\t- PIDGenerator.java: Java port of the PID generation code by Klaus Pommerening,\n\t  published at http://www.staff.uni-mainz.de/pommeren/PID/ [7.5.2013].\n\t  Used with permission of the author.\n\t  \nIn order to run this program, a JAX-RS implementation (e.g. Jersey, https://jersey.java.net/) \nand a JDBC driver for the selected database are needed. These are not included for license reasons.\n"
      },
      "source": "https://raw.githubusercontent.com/medicalinformatics/MainzellisteSEL/srl/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MainzellisteSEL"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "medicalinformatics"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Java",
        "size": 534529,
        "type": "Programming_language",
        "value": "Java"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CSS",
        "size": 1277,
        "type": "Programming_language",
        "value": "CSS"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/medicalinformatics/MainzellisteSEL/srl/README"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/medicalinformatics/MainzellisteSEL/srl/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 13:11:49",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ]
}