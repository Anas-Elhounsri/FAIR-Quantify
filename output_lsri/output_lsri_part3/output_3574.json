{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/NWPU-903PR/LPI-CNNCP"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-11-15T05:40:21Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-11-17T08:24:18Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9213955435824241,
      "result": {
        "original_header": "LPI-CNNCP",
        "type": "Text_excerpt",
        "value": "\nLPI-CNNCP designs a copy-padding trick to turn the protein/RNA sequences with variable-length into the fixed-length sequences, letting them meet the input requirements of CNN model. Then, the high-order one-hot encoding way is used to transform the protein/RNA sequences into image-like inputs of non-independent for capturing the dependencies among amino acids (or nucleotides). In the end, these encoded protein/RNA sequences are feed into a convolutional neural network to predict the lncRNA-protein interactions. \n"
      },
      "source": "https://raw.githubusercontent.com/NWPU-903PR/LPI-CNNCP/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9257977267101116,
      "result": {
        "original_header": "Content",
        "type": "Text_excerpt",
        "value": "./data.zip: the training, testing and independent testing dataset with sequence, pair name and label. \n"
      },
      "source": "https://raw.githubusercontent.com/NWPU-903PR/LPI-CNNCP/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/NWPU-903PR/LPI-CNNCP/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/NWPU-903PR/LPI-CNNCP/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "NWPU-903PR/LPI-CNNCP"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "LPI-CNNCP"
      },
      "source": "https://raw.githubusercontent.com/NWPU-903PR/LPI-CNNCP/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Users's Guide",
        "parent_header": [
          "LPI-CNNCP"
        ],
        "type": "Text_excerpt",
        "value": "Users need to process experimental data as required for training or testing data files.\n\n(1) If the sequence length of all experiment data is within a fixed length range, it can be processed in the following format for convenient operation.\n\nSample pair naming format:\n\nlabel+'$'+protein_tag+'$'+lncRNA_tag+'$'+protein_sequence+'#'+lncRNA_sequence.\n\nExample\uff1a\n1$3UZK-3$3UZK-A$MAHKKGLGSTRNG#GGUCAAGAUGGUA\n\n(2) If the sequence length of the experiment data exceeds the fixed length range, it can be processed in the following format.\n\nSample pair naming format:\n\nlabel+'$'+protein_tag+'$'+lncRNA_tag+'_(subsequence index)'+'$'+protein_subsequence+'#'+lncRNA_subsequence\n\nExample\uff1a\n1$2B63-B$2B63-R_1$MSDLANSEKYYDEDPYGFEDESAPITAE#CAGCACUGAUUGCGGUCGAGGUAGCUUGAUG\n"
      },
      "source": "https://raw.githubusercontent.com/NWPU-903PR/LPI-CNNCP/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8154064458692983,
      "result": {
        "original_header": "Content",
        "type": "Text_excerpt",
        "value": "./LPI_CNNCP.py: the python code, it can be ran to reproduce our results. \n./data.zip: the training, testing and independent testing dataset with sequence, pair name and label. \n"
      },
      "source": "https://raw.githubusercontent.com/NWPU-903PR/LPI-CNNCP/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/NWPU-903PR/LPI-CNNCP/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "LPI-CNNCP"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "NWPU-903PR"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 73132,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/NWPU-903PR/LPI-CNNCP/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "System Requirements",
        "parent_header": [
          "LPI-CNNCP"
        ],
        "type": "Text_excerpt",
        "value": "The LPI-CNNCP is supported on Linux operating system python 3, Keras version=2.2.4 and its backend is TensorFlow Sklearn, scikit-learn version=0.21.3, numpy version=1.17.4\n"
      },
      "source": "https://raw.githubusercontent.com/NWPU-903PR/LPI-CNNCP/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Execute Step",
        "parent_header": [
          "LPI-CNNCP"
        ],
        "type": "Text_excerpt",
        "value": "1. Configure the hyperparameters(e.g. the filter number, filter size, pooling size, the neuron number of fully connected layer, strides and Dropout) and process data files as required.\n\n2. Run LPI-CNNCP by configuring the corresponding parameters in function Run_LPI_CNNCP_model in the LPI-CNNCP.py program file as needed.\n\n(1) predict a new lncRNA-protein pair\n\nConfiguring Run_LPI_CNNCP_model(Y_crop_LPI=False, N_crop_LPI=False, Independent=True), then run LPI-CNNCP,the final predicted probability values are written into text formats(independent_predict.txt).\n\n(2) Evaluation model prediction performance\n\n1)perform 10 fold cross validation(without cut):\n\nConfiguring Run_LPI_CNNCP_model(Y_crop_LPI=True, N_crop_LPI=False, Independent=False), then run LPI-CNNCP, the final evaluation metrics will be output.\n\n2)perform 10 fold cross validation(with cut):\n\nConfiguring Run_LPI_CNNCP_model(Y_crop_LPI=False, N_crop_LPI=True, Independent=False), then run LPI-CNNCP, the final evaluation metrics will be output.\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/NWPU-903PR/LPI-CNNCP/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 13:15:57",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ]
}