{
  "application_domain": [
    {
      "confidence": 26.03,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citing",
        "parent_header": [
          "3D Semantic Segmentation of Protein Structures"
        ],
        "type": "Text_excerpt",
        "value": "This work was published in Oxford Bioinformatics in 2019 [(Link)](https://academic.oup.com/bioinformatics/article/36/6/1740/5551337).\nPlease reference using the following citation.\n\n```\n@article{10.1093/bioinformatics/btz650,\n    author = {Eguchi, Raphael R and Huang, Po-Ssu},\n    title = \"{Multi-scale structural analysis of proteins by deep semantic segmentation}\",\n    journal = {Bioinformatics},\n    volume = {36},\n    number = {6},\n    pages = {1740-1749},\n    year = {2019},\n    month = {08},\n    issn = {1367-4803},\n    doi = {10.1093/bioinformatics/btz650},\n    url = {https://doi.org/10.1093/bioinformatics/btz650},\n    eprint = {https://academic.oup.com/bioinformatics/article-pdf/36/6/1740/32915157/btz650.pdf},\n}\n```\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/egurapha/prot_domain_segmentor/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Eguchi, Raphael R and Huang, Po-Ssu",
        "doi": "10.1093/bioinformatics/btz650",
        "format": "bibtex",
        "title": "{Multi-scale structural analysis of proteins by deep semantic segmentation}",
        "type": "Text_excerpt",
        "url": "https://doi.org/10.1093/bioinformatics/btz650",
        "value": "@article{10.1093/bioinformatics/btz650,\n    eprint = {https://academic.oup.com/bioinformatics/article-pdf/36/6/1740/32915157/btz650.pdf},\n    url = {https://doi.org/10.1093/bioinformatics/btz650},\n    doi = {10.1093/bioinformatics/btz650},\n    issn = {1367-4803},\n    month = {08},\n    year = {2019},\n    pages = {1740-1749},\n    number = {6},\n    volume = {36},\n    journal = {Bioinformatics},\n    title = {{Multi-scale structural analysis of proteins by deep semantic segmentation}},\n    author = {Eguchi, Raphael R and Huang, Po-Ssu},\n}"
      },
      "source": "https://raw.githubusercontent.com/egurapha/prot_domain_segmentor/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/egurapha/prot_domain_segmentor"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-04-09T16:47:03Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-30T20:28:08Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Semantic Segmentor for Protein Structures."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.8507722007361347,
      "result": {
        "original_header": "Author: Raphael R. Eguchi",
        "type": "Text_excerpt",
        "value": "A CNN for performing semantic segmantation of multi-domain protein structures written in PyTorch. Requires Biopython, Pytorch, Numpy, Scipy.\nA step-by-step tutorial can be found [here](http://www.proteindesign.org/segmentor-tutorial.html).  \nThe model treats each residue in a protein analogously to a pixel in an image:\n<p align=\"center\">\n<img src=\"img/concept.png\" width=\"90%\">\n</p>\n  \n  \nAn example segmentation output for a discontinuous protein domain, visualized in PyMOL:\n<p align=\"center\">\n<img src=\"img/example.png\" width=\"60%\">\n</p> \n"
      },
      "source": "https://raw.githubusercontent.com/egurapha/prot_domain_segmentor/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/egurapha/prot_domain_segmentor/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/egurapha/prot_domain_segmentor/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "egurapha/prot_domain_segmentor"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "3D Semantic Segmentation of Protein Structures"
      },
      "source": "https://raw.githubusercontent.com/egurapha/prot_domain_segmentor/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/egurapha/prot_domain_segmentor/master/setup.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/egurapha/prot_domain_segmentor/master/img/concept.png"
      },
      "source": "https://raw.githubusercontent.com/egurapha/prot_domain_segmentor/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/egurapha/prot_domain_segmentor/master/img/example.png"
      },
      "source": "https://raw.githubusercontent.com/egurapha/prot_domain_segmentor/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.982104714044824,
      "result": {
        "original_header": "Domain Parsing",
        "type": "Text_excerpt",
        "value": "The domain parsing variant of the model can be run using the DomainParser class or using the run_parser.py script using the same commands described above. For the DomainParser class, the predict() and predictClass() functions return domain probabilities and domain assignments respectively.\n```python\nimport sys\nsys.path.insert(0, '/path/to/classes/DomainParser.py') # add to import path to your script.\nfrom DomainParser import *\n\nparser = DomainParser() # Initialize model.\nclasses, res_nums = parser.predictClass('/path/to/pdb')  # Get Parser Predictions.\nprobs, res_nums = parser.predict('/path/to/pdb')  # Get Probability Matrix.\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/egurapha/prot_domain_segmentor/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8191393786410024,
      "result": {
        "original_header": "Author: Raphael R. Eguchi",
        "type": "Text_excerpt",
        "value": "The model treats each residue in a protein analogously to a pixel in an image:\n<p align=\"center\">\n<img src=\"img/concept.png\" width=\"90%\">\n</p>\n  \n  \nAn example segmentation output for a discontinuous protein domain, visualized in PyMOL:\n<p align=\"center\">\n<img src=\"img/example.png\" width=\"60%\">\n</p> \n\nUsage as a Class:\n```python\nimport sys\nsys.path.insert(0, '/path/to/classes/DomainSegmentor.py') # add to import path to your script.\nfrom DomainSegmentor import *\n\nsegmentor = DomainSegmentor() # Initialize model.\nclasses, res_nums = segmentor.predictClass('/path/to/pdb')  # Get Class Predictions.\nprobs, res_nums = segmentor.predict('/path/to/pdb')  # Get Probability Matrix.\n```\nThe predict function returns a matrix of probabilities and a vector of residue numbers indicating the residue number of each column. The predictClass function returns a list class predictions and corresponding vector of residue numbers. See DomainSegmentor.py for more details.\n \nUsage as a PyMOL/Python Script:\nBASH2* \n"
      },
      "source": "https://raw.githubusercontent.com/egurapha/prot_domain_segmentor/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8156248231465555,
      "result": {
        "original_header": "Domain Parsing",
        "type": "Text_excerpt",
        "value": "The domain parsing variant of the model can be run using the DomainParser class or using the run_parser.py script using the same commands described above. For the DomainParser class, the predict() and predictClass() functions return domain probabilities and domain assignments respectively.\n```python\nimport sys\nsys.path.insert(0, '/path/to/classes/DomainParser.py') # add to import path to your script.\nfrom DomainParser import *\n\nparser = DomainParser() # Initialize model.\nclasses, res_nums = parser.predictClass('/path/to/pdb')  # Get Parser Predictions.\nprobs, res_nums = parser.predict('/path/to/pdb')  # Get Probability Matrix.\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/egurapha/prot_domain_segmentor/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/egurapha/prot_domain_segmentor/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "prot_domain_segmentor"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "egurapha"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 31672,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 202,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/egurapha/prot_domain_segmentor/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 18:28:10",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 11
      },
      "technique": "GitHub_API"
    }
  ]
}