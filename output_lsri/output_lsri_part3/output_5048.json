{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Prepare reference",
        "parent_header": [
          "mountainClimber",
          "Tutorial with test dataset",
          "4. RSEM"
        ],
        "type": "Text_excerpt",
        "value": "RSEM requires transcriptome alignments rather than genome alignments. So, we first create a reference using a combination of annotation file and de novo TUs from mountainClimberTU:\n```\nrsem-prepare-reference -p 8 --gtf tus_merged.annot.gencode.v25lift37.annotation.gtf --star hg19.fa rsem_ref\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/gxiaolab/mountainClimber/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/gxiaolab/mountainClimber"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-03-17T16:20:09Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-03T00:34:46Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9111876070746905,
      "result": {
        "original_header": "mountainClimber",
        "type": "Text_excerpt",
        "value": "\n**Citation: Cass AA and Xiao X. (2019). mountainClimber identifies alternative transcription start and polyadenylation sites in RNA-Seq. Cell Systems** \n\nmountainClimber is a tool built for identifying alternative transcription start sites (ATS) and alternative polyadenylation sites (APA) from RNA-Seq by finding significant change points in read coverage. It is made up of three main steps which can be used in isolation:\n1. mountainClimberTU: Call transcription units (TUs) de novo from RNA-Seq in each individual sample.\n2. mountainClimberCP: Identify change points throughout the entire TU of each individual sample. The premise of this approach is to identify significant change points in the the cumulative read sum (CRS) distribution as a function of position. It identifies the following change point types: DistalTSS, TandemTSS, DistalPolyA, TandemAPA, Junction, Exon, and Intron.\n3. mountainClimberRU: Calculate the relative usage of each TSS and poly(A) site in each TU. \n"
      },
      "source": "https://raw.githubusercontent.com/gxiaolab/mountainClimber/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9708388320801318,
      "result": {
        "original_header": "mountainClimber Overview",
        "type": "Text_excerpt",
        "value": "In this overview, we describe the usage of each of the three steps. Below, we provide a tutorial illustrating usage of the pipeline on the test dataset provided. The test data includes bedgraphs and exon junction bed files from MAQC RNA-Seq (chromosome 1) as well as sample output. \n"
      },
      "source": "https://raw.githubusercontent.com/gxiaolab/mountainClimber/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8667811125630597,
      "result": {
        "original_header": "mountainClimberTU",
        "type": "Text_excerpt",
        "value": "Call transcription units (TUs) de novo from RNA-Seq. In general, we recommend including introns when calling TUs by explicitly incorporating split reads with argument --junc. However, this is optional. To retrieve junction reads from your bam files, use get_junction_counts.py (described below).\n```\nusage: mountainClimberTU.py [-h] [-b] [-j] [-g] [-c] -s {1,-1,0} [-w] [-p]\n                            [-n] [-o]\n\noptional arguments:\n  -h, --help            show this help message and exit\n\nInput:\n  -b , --bedgraph       Bedgraph file. Can be .gz compressed. (default: None)\n  -j , --junc           Junction .bedgraph or .bed file. If file suffix is\n                        .bed, will convert to bedgraph. (default: None)\n  -g , --genome         Input chromosome sizes. (default: None)\n\nParameters:\n  -c , --minjxncount    Minimum junction read count. (default: 2)\n  -s {1,-1,0}, --strand {1,-1,0}\n                        Strand of bedgraph file. (default: None)\n  -w , --window_size    Window size. (default: 1000)\n  -p , --min_percent    Minimum percentage of the window covered. (default:\n                        1.0)\n  -n , --min_reads      Minimum number of reads per window. (default: 10)\n\nOutput:\n  -o , --output         Output bed filename. (default: None)\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/gxiaolab/mountainClimber/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8622312818909396,
      "result": {
        "original_header": "mountainClimberCP",
        "type": "Text_excerpt",
        "value": "Identify change points throughout each TU using the cumulative read sum (CRS) in each sample.\n```\nusage: mountainClimberCP.py [-h] [-i] [-m] [-g] [-j] [-x] [-a] [-d] [-w] [-t]\n                            [-l] [-e] [-s] [-f] [-u] [-n] [-z] [-o] [-p] [-v]\n\noptional arguments:\n  -h, --help            show this help message and exit\n\nInput:\n  -i , --input_bg       Bedgraph: non-strand-specific or plus strand.\n                        (default: None)\n  -m , --input_bg_minus\n                        Bedgraph, minus strand (strand-specific only).\n                        (default: None)\n  -g , --input_regions\n                        Bed file of transcription units. (default: None)\n  -j , --junc           Bed file of junction read counts. (default: None)\n  -x , --genome         Genome fasta file. (default: None)\n\nParameters:\n  -a , --peak_thresh    Normalized threshold (float between [0., 1.]). Only\n                        the peaks with amplitude higher than the threshold\n                        will be detected. -1.0 indicates optimizing between\n                        [0.01, 0.05, 0.1] for each TU. (default: -1.0)\n  -d , --peak_min_dist\n                        Minimum distance between each detected peak. The peak\n                        with the highest amplitude is preferred to satisfy\n                        this constraint. -1 indicates optimizing between [10,\n                        50] for each TU. (default: -1)\n  -w , --winsize        Window size for de-noising and increasing precision.\n                        -1 indicates optimizing between [50, max(100,\n                        gene_length / 100) * 2]. (default: -1)\n  -t , --test_thresh    Maximum p-value threshold for KS test and t-test.\n                        (default: 0.001)\n  -l , --min_length     Minimum gene length for running mountain climber.\n                        (default: 1000)\n  -e , --min_expn       Minimum expression level (average # reads per bp)\n                        (default: 10)\n  -s , --min_expn_distal\n                        Minimum distal expression level (average # reads per\n                        bp). (default: 1)\n  -f , --fcthresh       Minimum fold change. (default: 1.5)\n  -u , --juncdist       Minimum distance to exon-intron junction. (default:\n                        10)\n  -n , --minjxncount    Minimum junction read count. (default: 2)\n  -z , --max_end_ru     Maximum end relative usage = coverage of end / max\n                        segment coverage. (default: 0.01)\n\nOutput:\n  -o , --output         Output prefix. Bed file of change points has name\n                        field = CPlabel:gene:TUstart:TUend:inferred_strand:win\n                        size:segment_coverage:average_exon_coverage. Score =\n                        log2(fold change). (default: None)\n  -p, --plot            Plot the cumulative read sum (CRS), the distance from\n                        CRS to line y=ax, and the coverage with predicted\n                        change points. (default: False)\n  -v, --verbose         Print progress. (default: False)\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/gxiaolab/mountainClimber/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9786566292142821,
      "result": {
        "original_header": "diff_cluster",
        "type": "Text_excerpt",
        "value": "Cluster change points first across replicates within each condition, and then across conditions.\n```\nusage: diff_cluster.py [-h] [-i [[...]]] [-c [[...]]] [-n [[...]]] [-e] [-f]\n                       [-d] [-m] [-l] [-s] [-o] [-v]\n\noptional arguments:\n  -h, --help            show this help message and exit\n\nInput:\n  -i [ [ ...]], --input [ [ ...]]\n                        List of space-delimited change point files. (default:\n                        None)\n  -c [ [ ...]], --conditions [ [ ...]]\n                        List of space-delimited condition labels for each\n                        --input file. (default: None)\n\nParameters:\n  -n [ [ ...]], --minpts [ [ ...]]\n                        List of space-delimited DBSCAN minPts values. These\n                        indicate the minimum # points for DBSCAN to consider a\n                        core point. The minimum of this list will be used to\n                        cluster across conditions. (default: None)\n  -e , --eps            Maximum distance between 2 points in a neighborhood.\n                        -1.0 indicates using the minimum optimal window size\n                        from mountain climber. (default: -1.0)\n  -f , --min_fc         Minimum fold change for change points. (default: -1.0)\n  -d , --min_conditions\n                        Minimum number of conditions for a gene to be\n                        clustered across conditions. (default: 1)\n  -m , --min_expn       Minimum expression in exons for a gene to be\n                        clustered. (default: 0)\n  -l, --lm_flag         Input are results from diff_cluster. (default: False)\n  -s, --ss_flag         Flag: RNA-Seq is strand-specific. (default: False)\n\noutput:\n  -o , --output         Output prefix. Output files include\n                        _cluster_totals.txt, _segments.bed, _cp.bed, and one\n                        _cp.bed file for each condition. _cp.bed name field =\n                        label_prioritized;condition_labels:gene:TUstart:TUend:\n                        chrom:strand:dbscan_epsilon:min_clustered_change_point\n                        :max_clustered_change_point:cluster_standard_deviation\n                        :total_clusters. _segments.bed name field = label_prio\n                        ritized_cp1;condition_labels_cp1|label_prioritized_cp2\n                        ;condition_labels_cp2:gene:TUstart:TUend:chrom:strand:\n                        dbscan_epsilon. (default: None)\n  -v, --verbose         Print progress details. (default: False)\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/gxiaolab/mountainClimber/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9070996673137609,
      "result": {
        "original_header": "diff_segmentReadCounts",
        "type": "Text_excerpt",
        "value": "Calculate the average reads/bp for each segment after clustering.\n```\nusage: diff_segmentReadCounts.py [-h] [-i] [-p [[...]]] [-m [[...]]]\n                                 [-c [[...]]] [-o]\n\nCalculate the average reads/bp for each segment after clustering.\n\noptional arguments:\n  -h, --help            show this help message and exit\n\nInput:\n  -i , --segments       _segments.bed output from clusterCPs (default: None)\n  -p [ [ ...]], --bgplus [ [ ...]]\n                        List of space-delimited bedgraphs: non-strand-specific\n                        or plus strand. (default: None)\n  -m [ [ ...]], --bgminus [ [ ...]]\n                        List of space-delimited bedgraphs: minus strand.\n                        (default: None)\n  -c [ [ ...]], --conditions [ [ ...]]\n                        List of space-delimited condition labels for each\n                        --bgplus file (default: None)\n\nOutput:\n  -o , --output         Output prefix. Outputs one _readCounts.bed file per\n                        sample. (default: None)\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/gxiaolab/mountainClimber/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8429254122458938,
      "result": {
        "original_header": "diff_ru",
        "type": "Text_excerpt",
        "value": "Calculate the relative usage of each 5' and 3' segment\n```\nusage: diff_ru.py [-h] [-i [[...]]] [-s] [-c] [-l] [-n] [-o] [-v]\n\nCalculate the relative usage of each 5' and 3' segment\n\noptional arguments:\n  -h, --help            show this help message and exit\n\nInput:\n  -i [ [ ...]], --input [ [ ...]]\n                        List of space-delimited output files from\n                        diff_segmentReadCounts for a single condition.\n                        (default: None)\n  -s , --segments       Condition-specific _segments.bed output file from\n                        diff_cluster. (default: None)\n  -c , --condition      Condition label (default: None)\n  -l , --input_cp       Condition-specific _cluster.bed output file from\n                        diff_cluster. (default: None)\n\nParameters:\n  -n , --min_segments   Minimum number of segments required in the TU to\n                        calculate relative end usage (default: 3)\n\nOutput:\n  -o , --output         Output prefix. Outputs one _cp.bed and _segments.bed\n                        file for each condition. _cp.bed name field = CPlabel:\n                        gene:TUstart:TUend:chrom:strand:coverage_mean:coverage\n                        _variance:total_samples:CPindex. _segments.bed name\n                        field = CPlabel_cp1|CPlabel_cp2:gene:TUstart:TUend:chr\n                        om:strand:coverage_mean:coverage_variance:total_sample\n                        s:CPindex. (default: None)\n  -v, --verbose         Print progress. (default: False)\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/gxiaolab/mountainClimber/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9613077600872728,
      "result": {
        "original_header": "diff_test",
        "type": "Text_excerpt",
        "value": "Test for differential ATS and APA sites between two conditions.\n```\nusage: diff_test.py [-h] [-i [[...]]] [-r [[...]]] [-ci [[...]]] [-cr [[...]]]\n                    [-d] [-p] [-t] [-m] [-o] [-k] [-v]\n\noptional arguments:\n  -h, --help            show this help message and exit\n\nInput:\n  -i [ [ ...]], --input [ [ ...]]\n                        List of space-delimited output files from\n                        diff_segmentReadCounts for two conditions. (default:\n                        None)\n  -r [ [ ...]], --ru_segments [ [ ...]]\n                        List of space-delimited _ru_segments output files from\n                        diff_ru, one for each condition (default: None)\n  -ci [ [ ...]], --conditions_input [ [ ...]]\n                        List of space-delimited condition labels for each\n                        --input file. (default: None)\n  -cr [ [ ...]], --conditions_ru_segments [ [ ...]]\n                        List of space-delimited condition labels for each\n                        --ru_segments file. (default: None)\n\nParameters:\n  -d , --min_dstlCov    Minimum average reads per bp in distal segment across\n                        samples in at least 1 condition (default: 5.0)\n  -p , --min_prxlCov    Minimum average reads per bp in proximal segment\n                        across samples in all conditions (default: 0.0)\n  -t , --pmax           Maximum p-value. (default: 0.05)\n  -m , --dtop_abs_dif_min\n                        Minimum relative usage (RU) difference. (default:\n                        0.05)\n\nOutput:\n  -o , --output         Output prefix. 3 output files: (1) bed file of all\n                        tested change points _cp_allTested.bed, (2) bed file\n                        of differential change points _cp_diff.bed, (3)\n                        summary of total differential change points\n                        _test_totals.txt. Bed name field = CPlabel;\n                        test_type;CPindex;gene:TUstart:TUend:proxim\n                        al_segment:distal_segment:RU_difference:RU_conditionA:\n                        RU_conditionB:BH_pvalue (default: None)\n  -k, --keep            Keep intermediate output files. (default: False)\n  -v, --verbose         Print progress. (default: False)\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/gxiaolab/mountainClimber/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/gxiaolab/mountainClimber/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/gxiaolab/mountainClimber/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "gxiaolab/mountainClimber"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "mountainClimber"
      },
      "source": "https://raw.githubusercontent.com/gxiaolab/mountainClimber/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "http://raw.githubusercontent.com/gxiaolab/mountainClimber/master/./readme/fig1.png"
      },
      "source": "https://raw.githubusercontent.com/gxiaolab/mountainClimber/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "http://raw.githubusercontent.com/gxiaolab/mountainClimber/master/./readme/pipeline.png"
      },
      "source": "https://raw.githubusercontent.com/gxiaolab/mountainClimber/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Prepare reference",
        "parent_header": [
          "mountainClimber",
          "Tutorial with test dataset",
          "4. RSEM"
        ],
        "type": "Text_excerpt",
        "value": "RSEM requires transcriptome alignments rather than genome alignments. So, we first create a reference using a combination of annotation file and de novo TUs from mountainClimberTU:\n```\nrsem-prepare-reference -p 8 --gtf tus_merged.annot.gencode.v25lift37.annotation.gtf --star hg19.fa rsem_ref\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/gxiaolab/mountainClimber/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9994309243963858,
      "result": {
        "original_header": "mountainClimberTU",
        "type": "Text_excerpt",
        "value": "Call transcription units (TUs) de novo from RNA-Seq. In general, we recommend including introns when calling TUs by explicitly incorporating split reads with argument --junc. However, this is optional. To retrieve junction reads from your bam files, use get_junction_counts.py (described below).\n```\nusage: mountainClimberTU.py [-h] [-b] [-j] [-g] [-c] -s {1,-1,0} [-w] [-p]\n                            [-n] [-o]\n\noptional arguments:\n  -h, --help            show this help message and exit\n\nInput:\n  -b , --bedgraph       Bedgraph file. Can be .gz compressed. (default: None)\n  -j , --junc           Junction .bedgraph or .bed file. If file suffix is\n                        .bed, will convert to bedgraph. (default: None)\n  -g , --genome         Input chromosome sizes. (default: None)\n\nParameters:\n  -c , --minjxncount    Minimum junction read count. (default: 2)\n  -s {1,-1,0}, --strand {1,-1,0}\n                        Strand of bedgraph file. (default: None)\n  -w , --window_size    Window size. (default: 1000)\n  -p , --min_percent    Minimum percentage of the window covered. (default:\n                        1.0)\n  -n , --min_reads      Minimum number of reads per window. (default: 10)\n\nOutput:\n  -o , --output         Output bed filename. (default: None)\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/gxiaolab/mountainClimber/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.883607722236573,
      "result": {
        "original_header": "mountainClimberTU",
        "type": "Text_excerpt",
        "value": "Call transcription units (TUs) de novo from RNA-Seq. In general, we recommend including introns when calling TUs by explicitly incorporating split reads with argument --junc. However, this is optional. To retrieve junction reads from your bam files, use get_junction_counts.py (described below).\n```\nusage: mountainClimberTU.py [-h] [-b] [-j] [-g] [-c] -s {1,-1,0} [-w] [-p]\n                            [-n] [-o]\n\noptional arguments:\n  -h, --help            show this help message and exit\n\nInput:\n  -b , --bedgraph       Bedgraph file. Can be .gz compressed. (default: None)\n  -j , --junc           Junction .bedgraph or .bed file. If file suffix is\n                        .bed, will convert to bedgraph. (default: None)\n  -g , --genome         Input chromosome sizes. (default: None)\n\nParameters:\n  -c , --minjxncount    Minimum junction read count. (default: 2)\n  -s {1,-1,0}, --strand {1,-1,0}\n                        Strand of bedgraph file. (default: None)\n  -w , --window_size    Window size. (default: 1000)\n  -p , --min_percent    Minimum percentage of the window covered. (default:\n                        1.0)\n  -n , --min_reads      Minimum number of reads per window. (default: 10)\n\nOutput:\n  -o , --output         Output bed filename. (default: None)\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/gxiaolab/mountainClimber/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8105878452398163,
      "result": {
        "original_header": "diff_ru",
        "type": "Text_excerpt",
        "value": "Calculate the relative usage of each 5' and 3' segment\n```\nusage: diff_ru.py [-h] [-i [[...]]] [-s] [-c] [-l] [-n] [-o] [-v]\n\nCalculate the relative usage of each 5' and 3' segment\n\noptional arguments:\n  -h, --help            show this help message and exit\n\nInput:\n  -i [ [ ...]], --input [ [ ...]]\n                        List of space-delimited output files from\n                        diff_segmentReadCounts for a single condition.\n                        (default: None)\n  -s , --segments       Condition-specific _segments.bed output file from\n                        diff_cluster. (default: None)\n  -c , --condition      Condition label (default: None)\n  -l , --input_cp       Condition-specific _cluster.bed output file from\n                        diff_cluster. (default: None)\n\nParameters:\n  -n , --min_segments   Minimum number of segments required in the TU to\n                        calculate relative end usage (default: 3)\n\nOutput:\n  -o , --output         Output prefix. Outputs one _cp.bed and _segments.bed\n                        file for each condition. _cp.bed name field = CPlabel:\n                        gene:TUstart:TUend:chrom:strand:coverage_mean:coverage\n                        _variance:total_samples:CPindex. _segments.bed name\n                        field = CPlabel_cp1|CPlabel_cp2:gene:TUstart:TUend:chr\n                        om:strand:coverage_mean:coverage_variance:total_sample\n                        s:CPindex. (default: None)\n  -v, --verbose         Print progress. (default: False)\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/gxiaolab/mountainClimber/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/gxiaolab/mountainClimber/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Apache License 2.0",
        "spdx_id": "Apache-2.0",
        "type": "License",
        "url": "https://api.github.com/licenses/apache-2.0",
        "value": "https://api.github.com/licenses/apache-2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
      },
      "source": "https://raw.githubusercontent.com/gxiaolab/mountainClimber/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "mountainClimber"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "gxiaolab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 202225,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 4054,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 1240,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gxiaolab/mountainClimber/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "parent_header": [
          "mountainClimber"
        ],
        "type": "Text_excerpt",
        "value": "Dependencies include (version used for development indicated in parentheses):\n- python (v2.7.2)\n- scipy (v0.15.1)\n- numpy (v1.10.4)\n- peakutils (v1.0.3)\n- sklearn (v0.18.1)\n- pysam (v0.9.0)\n- pybedtools (v0.6.2)\n- bisect\n- itertools\n\n"
      },
      "source": "https://raw.githubusercontent.com/gxiaolab/mountainClimber/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 18:36:13",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 16
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "mountainClimberRU",
        "parent_header": [
          "mountainClimber",
          "Tutorial with test dataset",
          "6. mountainClimberRU or differential ATS &amp; APA"
        ],
        "type": "Text_excerpt",
        "value": "Calculate the relative usage of each TSS and poly(A) site in each TU. Run this separately for each condition.\n```\nusage: mountainClimberRU.py [-h] [-i] [-n] [-o OUTPUT] [-v]\n\noptional arguments:\n  -h, --help            show this help message and exit\n\ninput:\n  -i , --input          Bed file of change points. (default: None)\n\nParameters:\n  -n , --min_segments   Minimum number of segments required in the TU to\n                        calculate relative end usage. (default: 3)\n\noutput:\n  -o OUTPUT, --output OUTPUT\n                        Output bed filename. Bed name field = CPlabel:gene:TUs\n                        tart:TUend:inferred_strand:chromosome:segmentCoverage:\n                        CPindex (default: None)\n  -v, --verbose         Print progress (default: False)\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/gxiaolab/mountainClimber/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Differential ATS and APA",
        "parent_header": [
          "mountainClimber",
          "Tutorial with test dataset",
          "6. mountainClimberRU or differential ATS &amp; APA"
        ],
        "type": "Text_excerpt",
        "value": "While mountainClimber was built for analyzing one single sample, we additionally provide the scripts we built for identifying differential ATS and APA across two conditions given the output of mountainClimberCP. However, if you are analyzing a large number of samples, it may be preferred to run each step separately and parallelized over all samples. Each step is described below.\n\n"
      },
      "source": "https://raw.githubusercontent.com/gxiaolab/mountainClimber/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Tutorial with test dataset",
        "parent_header": [
          "mountainClimber"
        ],
        "type": "Text_excerpt",
        "value": "Because RNA-Seq reads are aligned to the genome, and we include introns when calling change points, we recommend carefully dealing with multi-mapped reads. Below we describe our recommended alignment pipeline, which involves genome alignment and RSEM. We include examples for both hisat2 and STAR.\n\n![pipeline image](./readme/pipeline.png)\n\n"
      },
      "source": "https://raw.githubusercontent.com/gxiaolab/mountainClimber/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Genome alignment",
        "parent_header": [
          "mountainClimber",
          "Tutorial with test dataset"
        ],
        "type": "Text_excerpt",
        "value": "Align to the genome allowing 100 or 200 multi-mapped reads. Because mountainClimberTU calls entire transcription units including introns, and introns contain repetitive sequences, it is recommended to allow a generous number of multi-mapped reads followed by RSEM later to assign the most probable mapping location. For example, use -k 100 or 200 for hisat2 and --outFilterMultimapNmax 100 or 200 with STAR.\n\nhisat2:\n```\nhisat2 --dta-cufflinks --no-softclip --no-mixed --no-discordant -k 100\n```\nSTAR: with ENCODE parameters\n```\nSTAR --outSAMunmapped Within --outFilterType BySJout --outSAMattributes NH HI AS NM MD --outFilterMultimapNmax 200 --outFilterMismatchNmax 999 --outFilterMismatchNoverLmax 0.04 --alignIntronMin 20 --alignIntronMax 1000000 --alignMatesGapMax 1000000 --alignSJoverhangMin 8 --alignSJDBoverhangMin 1 --sjdbScore 1 --runThreadN 8 --genomeLoad NoSharedMemory --outSAMtype BAM Unsorted --outSAMheaderHD @HD VN:1.4 SO:unsorted\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/gxiaolab/mountainClimber/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Get junction reads",
        "parent_header": [
          "mountainClimber",
          "Tutorial with test dataset",
          "2. Create mountainClimber input files"
        ],
        "type": "Text_excerpt",
        "value": "Identify split reads from a bam file and report the total counts per intron.\n```\nusage: get_junction_counts.py [-h] -i  -s  [-e] [-m] [-a] -o\n\noptional arguments:\n  -h, --help          show this help message and exit\n\nInput:\n  -i , --input_bam    Bam file (default: None)\n  -s , --strand       Strandedness. Options: fr-firststrand, fr-secondstrand,\n                      fr-unstrand, single (default: fr-firststrand)\n\nParameters:\n  -e , --overhang     Minimum number of base pairs in each exon (default: 8)\n  -m , --min_intron   Minimum intron length (default: 30)\n  -a , --max_intron   Maximum intron length (default: 500000)\n\nOutput:\n  -o , --output       Output filename (default: None)\n```\n\nExample usage:\n```\npython get_junction_counts.py -i SRR950078.bam -s fr-unstrand -o ./junctions/SRR950078_jxn.bed\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/gxiaolab/mountainClimber/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Generate bedgraphs",
        "parent_header": [
          "mountainClimber",
          "Tutorial with test dataset",
          "2. Create mountainClimber input files"
        ],
        "type": "Text_excerpt",
        "value": "Create bedgraphs using bedtools for input to mountainClimberTU. For example:\n```\nbedtools genomecov -trackline -bg -split -ibam SRR950078.bam -g hg19.chr1.genome > ./bedgraph/SRR950078.bedgraph\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/gxiaolab/mountainClimber/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3. mountainClimberTU",
        "parent_header": [
          "mountainClimber",
          "Tutorial with test dataset"
        ],
        "type": "Text_excerpt",
        "value": "Example usage:\n```\npython mountainClimberTU.py -b ./bedgraph/SRR950078.bedgraph -j ./junctions/SRR950078_jxn.bed -s 0 -g hg19.chr1.genome -o mountainClimberTU/SRR950078_tu.bed\n```\n\nAnnotate transcription units and add them to .gtf file\n```\nusage: merge_tus.py [-h] -i [[...]] -g  -s  -o\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i [ [ ...]], --infiles [ [ ...]]\n                        Input TU bed files from mountainClimberTU output,\n                        space-delimited (default: None)\n  -g , --refgtf         Reference gtf file (default: None)\n  -s , --ss             Strand specific [y, n] (default: None)\n  -o , --output         Output prefix (default: None)\n```\n\nExample usage:\n```\npython merge_tus.py -i ./mountainClimberTU/*_tu.bed -s n -g gencode.v25lift37.annotation.chr1.gtf -o tus_merged\n```\n"
      },
      "source": "https://raw.githubusercontent.com/gxiaolab/mountainClimber/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Transcriptome alignment",
        "parent_header": [
          "mountainClimber",
          "Tutorial with test dataset",
          "4. RSEM"
        ],
        "type": "Text_excerpt",
        "value": "Next, re-align the reads but this time to the transcriptome. Because RSEM cannot handle indels, we force hisat2 to ignore them (STAR avoids indels by default). Again, we allow at least 100 alignments per read so that RSEM will decide their best alignment as opposed to the aligner.\n\nhisat2:\n```\nhisat2 --mp 6,4 --no-softclip --no-unal --no-mixed --no-discordant --no-spliced-alignment --end-to-end --rdg 100000,100000 --rfg 100000,100000 -k 100\n```\nSTAR:\n```\nSTAR --genomeDir ref --outFilterType BySJout --outSAMattributes NH HI AS NM MD --outFilterMultimapNmax 200 --outFilterMismatchNmax 999 --outFilterMismatchNoverLmax 0.04 --alignIntronMin 20 --alignIntronMax 1000000 --alignMatesGapMax 1000000 --alignSJoverhangMin 8 --alignSJDBoverhangMin 1 --sjdbScore 1 --runThreadN 8 --genomeLoad NoSharedMemory --outSAMtype BAM Unsorted --quantMode TranscriptomeSAM --outSAMheaderHD @HD VN:1.4 SO:unsorted\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/gxiaolab/mountainClimber/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Calculate expression",
        "parent_header": [
          "mountainClimber",
          "Tutorial with test dataset",
          "4. RSEM"
        ],
        "type": "Text_excerpt",
        "value": "Next, run rsem-calculate expression to assign multi-mapped read locations. For example:\n```\nrsem-calculate-expression -p 8 --paired-end --append-names --seed 0 --estimate-rspd --sampling-for-bam --output-genome-bam --alignments SRR950078.toTranscriptome.out.bam rsem_ref SRR950078_rsem\n```\n\nFinally, we retain only the alignments with maximum posterior probability for each read, designated by \"ZW:f:1\" and generate a bedgraph for transcriptome alignments using bedtools, as described above.\n\n"
      },
      "source": "https://raw.githubusercontent.com/gxiaolab/mountainClimber/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "5. mountainClimberCP",
        "parent_header": [
          "mountainClimber",
          "Tutorial with test dataset"
        ],
        "type": "Text_excerpt",
        "value": "Call change points in each sample. Example usage:\n```\npython mountainClimberCP.py -i ./bedgraph/SRR950078.bedgraph -g tus_merged.annot.gencode.v25lift37.annotation.singleGenes.bed -j ./junctions/SRR950078_jxn.bed -o mountainClimberCP/SRR950078.bed -x hg19.chr1.fa\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/gxiaolab/mountainClimber/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "6. mountainClimberRU or differential ATS &amp; APA",
        "parent_header": [
          "mountainClimber",
          "Tutorial with test dataset"
        ],
        "type": "Text_excerpt",
        "value": "After mountainClimberCP, use mountainClimberRU to calculate relative usage for a single sample, or use the provided scripts to analyze differential ATS & APA.\n\n#### mountainClimberRU\nCalculate the relative usage of each TSS and poly(A) site in each TU.\n```\npython mountainClimberRU.py -i mountainClimberCP/SRR950078.bed -o mountainClimberRU/SRR950078.bed\n```\n\n#### Differential ATS and APA\nCall differential ATS and APA. Example usage:\n\nFirst, cluster change points:\n```\npython diff_cluster.py -i ./mountainClimberCP/*bed -c uhr brain uhr brain uhr brain uhr brain uhr brain -n 4 4 4 4 4 4 4 4 4 4 -o diff/diff\n```\n\nSecond, calculate the average read counts per bp in each segment in each sample:\n```\npython diff_segmentReadCounts.py -i ./diff/diff_segments.bed -p ./bedgraph/SRR950078.bedgraph -c uhr -o ./diff/diff\n```\n\nThird, calculate the relative usage of each segment in each condition:\n```\npython diff_ru.py -i ./diff/*uhr*read* -s diff/diff_segments.bed -c uhr -l diff/diff_cp_uhr.bed -o diff/diff\npython diff_ru.py -i ./landMarker/*brain*read* -s diff/diff_segments.bed -c brain -l diff/diff_cp_brain.bed -o diff/diff\n```\n\nFinally, test for differential ATS and APA\n```\npython diff_test.py -i ./diff/*Counts.bed -r ./diff/diff_ru_segments_brain.bed ./diff/diff_ru_segments_uhr.bed -ci uhr brain uhr brain uhr brain uhr brain uhr brain -cr brain uhr -o ./diff/diff_maqc_d5_m0.05 -d 5 -m 0.05\n```\n"
      },
      "source": "https://raw.githubusercontent.com/gxiaolab/mountainClimber/master/README.md",
      "technique": "header_analysis"
    }
  ]
}