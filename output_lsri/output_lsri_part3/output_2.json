{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How to Cite",
        "parent_header": [
          "TFPCA-Tutorial"
        ],
        "type": "Text_excerpt",
        "value": "If you use these resources, please cite *all three* of the following:\n1. The original TF-PCA methods paper: Bernat, E.M., Williams, W.J., Gehring, W.J., 2005. Decomposing ERP time\u2013frequency\nenergy using PCA. Clin. Neurophysiol. 116, 1314\u20131334.\n2. This github repository: https://github.com/NDCLab/tfpca-tutorial\n3. The companion tutorial article: Buzzell, G.A., Niu, Y., Aviyente, S., Bernat, E.M., _under review_. A Practical Introduction to Time-Frequency Principal Components Analysis (TF-PCA) of EEG Data.\n\n"
      },
      "source": "https://raw.githubusercontent.com/NDCLab/tfpca-tutorial/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/NDCLab/tfpca-tutorial"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact Us",
        "parent_header": [
          "TFPCA-Tutorial"
        ],
        "type": "Text_excerpt",
        "value": "For further information, questions, or feedback, please contact:\n\nGeorge A. Buzzell, Ph.D - gbuzzell@fiu.edu\n\nNeural Dynamics of Control Laboratory; Department of Psychology and the Center for Children and Families (CCF); Florida International University, Miami, Florida\n\nYanbin Niu, MA  - yniu@fiu.edu\n\nNeural Dynamics of Control Laboratory; Department of Psychology and the Center for Children and Families (CCF); Florida International University, Miami, Florida\n\nEdward Bernat, Ph.D. - ebernat@umd.edu\n\nDepartment of Psychology, University of Maryland, College Park\n"
      },
      "source": "https://raw.githubusercontent.com/NDCLab/tfpca-tutorial/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contributing to TFPCA-Tutorial\n\n## Overview\n\nThis TFPCA-Tutorial repository serves as a companion to a tutorial paper introducing researchers to the time-frequency principal components analysis (TF-PCA) technique for EEG data. The tutorial is designed to help researchers run TF-PCA analyses using the psychophysiology toolbox (PTB). Moreover, this tutorial can serve as a jumping off point for more advanced analyses leveraging Cohen's class reduced interference distribution (RID) and/or TF-PCA on one's own data. The tutorial consists of template scripts to demonstrate how to:\n\n1) Convert one's data into the format required by the psychophysiology toolbox (PTB);\n2) Use the PTB to compute TF representations of both average (phase-locked) and total (phase and non-phase-locked) power via Cohen's class RID; \n3) Compute TF-PCA on average power and then copy pc weights over to total power by using the PTB; \n4) Export variables for statistical analyses and conduct basic plotting.\n\n\n## Directory Structure\n\n```yml\nTFPCA-Tutorial\n\u251c\u2500\u2500 psychophysiology_toolbox-1.0.0\n\u251c\u2500\u2500 tftb\n\u251c\u2500\u2500 eeglab2021.0\n\u251c\u2500\u2500 eeglab_data\n\u251c\u2500\u2500 ptb_data\n\u251c\u2500\u2500 analysis_template\n|    \u251c\u2500\u2500startup.m\n|    \u251c\u2500\u2500erp_core_35_locs.ced\n|    \u251c\u2500\u2500data_cache\n|    \u251c\u2500\u2500output_data\n|    \u251c\u2500\u2500output_plots\n|    \u251c\u2500\u2500exported_data\n|    \u251c\u2500\u2500ptb_scripts\n|    |    \u251c\u2500\u2500run_Flanker_resp_ISFA_base_averages.m\n|    |    \u251c\u2500\u2500Flanker_resp_ISFA_base_loaddata.m\n|    |    \u251c\u2500\u2500Flanker_resp_ISFA_base_loadvars.m\n|    |    \u251c\u2500\u2500run_Flanker_resp_AVGS_AMPL_theta_pcatfd.m\n|    |    \u251c\u2500\u2500Flanker_resp_AVGS_AMPL_theta_DatasetDef.m\n|    |    \u251c\u2500\u2500Flanker_resp_comparisons.m\n|    |    \u251c\u2500\u2500Flanker_resp_ISFA_AMPL_theta_pcatfd.m\n|    |    \u251c\u2500\u2500Flanker_resp_ISFA_AMPL_theta_DatasetDef.m\n|    |    \u251c\u2500\u2500Flanker_resp_comparisons.m\n|    |    \u251c\u2500\u2500cp_avg_power_pcs.m\n|    \u251c\u2500\u2500scripts\n|    |    \u251c\u2500\u2500template_eeg2ptb_erplab.m\n|    |    \u251c\u2500\u2500template_ptb_cache_out.m\n|    |    \u251c\u2500\u2500template_ptb_pc_out.m\n|    |    \u251c\u2500\u2500template_dbpower.m\n|    |    \u251c\u2500\u2500template_plots.m\n\u251c\u2500\u2500 new_analysis_template\n```\nFor a detailed description of the structure, please refer to [README.md](https://github.com/NDCLab/tfpca-tutorial/blob/main/README.md).\n\n\n## Git Workflow\n\nGit workflow for both internal and external lab members is outlined on the [NDCLab contributing wiki page](https://github.com/NDCLab/tfpca-tutorial/issues). \n\n\n## Issues & Future work\n\nPlease feel free to submit a problem/suggestion [here](https://github.com/NDCLab/tfpca-tutorial/issues), if you believe a new issue / function needs to be added.\n\nCurrently, the TFPCA-Tutorial relies on MATLAB-based programming, and thus, requires that users have a valid MATLAB license to run the tutorial. Assuming a valid MATLAB license and install, the tutorial contains all additional toolboxes and scripts needed to run the analyses described. Note that while the TFPCA-Tutorial currently relies on MATLAB, we plan to update the tutorial to remove the MATLAB requirement, either through an Octave or Python port of the code. Additionally, we have plans to update the tutorial to accept BIDS data and run within a fully containerized environment (Docker/Singularity). If you are interested in contributing to future developments for the TFPCA tutorial please contact us.\n\n"
      },
      "source": "https://raw.githubusercontent.com/NDCLab/tfpca-tutorial/main/CONTRIBUTING.md",
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-07-09T17:24:10Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-06-30T18:44:43Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "analysis | TF-PCA analyses with the psychophysiology toolbox (ptb)"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Directory Structure &amp; Scripts Descriptions",
        "parent_header": [
          "TFPCA-Tutorial"
        ],
        "type": "Text_excerpt",
        "value": "Below, we provide an overview of the contents of the TFPCA-Tutorial repository. Please note that PTB expects a particular directory structure, which is reflected in the directory structure of this repository. In other words, any changes in the directory structure of this repository may lead to errors. Of course, advanced users can modfiy the directory structure as needed, but it is not reccomended that beginners attempt to alter the directory structure.\n<p align=\"center\">\n  <img src=\"/.github/_assets/directory_structure.png\" />\n</p>\n\n\n|\u2014\u2014`psychophysiology_toolbox-1.0.0`\n\nPsychophysiology Tool Box (PTB) is a scripting-based Matlab toolbox developed by Edward Bernat and colleagues. PTB allows one to compute ERPs and TF representations (using Cohen's Class RID and RID-Rihaczek) and to decompose TF-PCA solutions on these data (http://www.ccnlab.umd.edu/Psychophysiology_Toolbox/). The PTB expects that data is formated in a particular manner and that a particular directory structure is used. Additionally, PTB expects that the user interacts with the toolbox by editing a series of scripts that must then be run from the appropriate working directory.\n\n\n|\u2014\u2014`tftb`\n\nThe Time-Frequency Toolbox (TFTB) is a collection of about 100 scripts for GNU Octave and Matlab developed for the analysis of non-stationary signals using time-frequency distributions (http://tftb.nongnu.org). A subset of these scripts are called by PTB, and thus, are needed to run the tutorial.\n\n\n|\u2014\u2014`eeglab2021.0`\n\nEEGLAB is an interactive Matlab toolbox for processing continuous and event-related EEG, MEG and other electrophysiological data (https://sccn.ucsd.edu/eeglab).\nNote, to work with the example data (ERP CORE ERN), the erplab plugin (https://erpinfo.org/erplab) has been included. A copy of the EEGLAB toolbox (and the erplab plugin) are not neccesary to use the PTB, but are neccesary to run the provided example scripts for converting one's data into the format needed for PTB, as well as for the example scripts for plotting data after experting it from PTB.\n\n\n|\u2014\u2014`eeglab_data`\n\nThis folder is populated with a slightly modified version of the ERP CORE ERN. These data are used in the TFPCA tutorial.\n\nThe ERP CORE (https://doi.org/10.18115/D5JW4R) is a freely available online resource consisting of optimized paradigms, experiment control scripts, example data from 40 neurotypical adults, data processing pipelines and analysis scripts, and a broad set of results for 7 widely used ERP components: N170, mismatch negativity (MMN), N2pc, N400, P3, lateralized readiness potential (LRP), and error-related negativity (ERN). Only the ERN data are used for this tutorial.\n\nPlease note that the ERP CORE data available online (https://doi.org/10.18115/D5JW4R) were modified slightly to optimize for subsequent TF decompositions. The modified version of these data are included in the eeglab_data folder. The following steps have been taken to modify the data (in sequence):\n1) Downloaded all 40 participants\u2019 ERP CORE ERN data after processing step #4 (artifact-removed), which can be found here: (https://osf.io/ryk5u/);\n2) Downloaded script #5 (https://osf.io/4whf6/);\n3) Edited script #5 on lines 52 & 53 - changing the segmentation delimiters from [-600.0  400.0] to [-1000.0  2000.0] (See `Script5_Elist_Bin_Epoch.m`).\n4) Ran the edited script #5 on the data downloaded in step #1 above.\n5) Ran script #6 (which can be downloaded at https://osf.io/f3m7s/) on the data outputs from step #5 above. Note that script #6 was not edited following downloading from https://osf.io/f3m7s/. This script performs a final artifact rejection step that must be re-run since we modifed the epochs produced by the step #5 script (see `Script6_Artifact_Rejection.m`).\n\nThe steps listed above need not be completed by the user, as the modified data produced by these steps is already populated in the 'eeglab_data' folder. The modified data use the following naming convention: `xx_ERN_shifted_ds_reref_ucbip_hpfilt_ica_corr_cbip_elist_bins_epoch_interp_ar.set`.\n\n\n|\u2014\u2014`ptb_data`\n\nThis folder is populated with the ERP CORE ERN data that has already been converted to the format required by PTB. Therefore, the user does not need to convert the data found in the `eeglab_data` folder. However, the user is nonetheless provided with the data in the `eeglab_data` folder, and the script used to convert this data into the PTB format (`template_eeg2ptb_erplab.m` found in the `scripts` folder) in order to illustrate how to convert data from the EEGLAB/ERPLAB format into the PTB format.\n\n\n|\u2014\u2014`analysis_template`\n\nThis folder contains all scripts, files, and data that the user will interact with to run the tutorial. Additionally, this folder is pre-populated with the outputs resulting from running the included scripts. As described below, the `analysis_template` folder contains subfolders for example PTB scripts (`ptb_scripts`), example scripts for converting data to the PTB format, as well as for exporting and plotting the data outside of PTB (`scripts`), and several subfolders for various outputs created by running the tutorial scripts (`data_cache`, `output_data`, `output_plots`, `exported_data`). This folder also contains the `startup.m` script and the `erp_core_35_locs.ced` file.\n\n\n|\u2014\u2014\u2014\u2014\u2014\u2014`startup.m`\n\nThis setup script adds all needed MATLAB paths (eeglab, ptb toolbox, tftb toolbox and other template scripts and output paths) and should be run first to set up the environment for the TFPCA-Tutorial.\n\n\n|\u2014\u2014\u2014\u2014\u2014\u2014`erp_core_35_locs.ced`\n\nThis file contains the electrode locations file for the ERP CORE ERN example data included with the tutorial. \n\n\n|\u2014\u2014\u2014\u2014\u2014\u2014`ptb_scripts`\n\nThis folder contains the PTB template scripts that can be edited and then executed in order to compute ERPs, TF representations, and decompose TF-PCA solutions.\n\n\n|\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014`run_Flanker_resp_ISFA_base_averages.m`\n\n|\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014`Flanker_resp_ISFA_base_loaddata.m`\n\n|\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014`Flanker_resp_ISFA_base_loadvars.m`\n\nTogether, these three scripts will produce an averaged ERP dataset. `run_Flanker_resp_ISFA_base_averages` is the run script that is executed by the user, whereas `Flanker_resp_ISFA_base_loaddata` and `Flanker_resp_ISFA_base_loadvars` are scripts that act as parameter files are called by the `run_Flanker_resp_ISFA_base_averages` run script to load necessary parameters. Specifically, `Flanker_resp_ISFA_base_loaddata` designates basic information about where to find and how to process individual-subject data/files (file list and locations, time-domain baseline period, etc). `Flanker_resp_ISFA_base_loadvars` sets up several additional parameters, including \"catcodes\" (category codes; i.e. the conditions of interest), parameters for subsampling), electrode location files (.ced), output plot parameters (i.e. which electrode to plot) etc.. Furthermore, `run_Flanker_resp_ISFA_base_loaddata` calls `load_Flanker_resp_EEG_subnames.m` to loop over the data folder (`../ptb_data`) in order to get the list of each subject/data to be included in the analysis (each subject's data/file name will be used as the name for this subject). In most cases, `load_Flanker_resp_EEG_subnames.m` does not need to be edited as long as the data folder (`../ptb_data`) only includes subject files in the `.mat` PTB format.\n\nIn sum, `run_Flanker_resp_ISFA_base_averages` is the run script that is executed to produce an averaged ERP dataset, which is stored in 'data_cache'. Before running `Flanker_resp_ISFA_base_averages`, parameters should be edited in `Flanker_resp_ISFA_base_loaddata` and `Flanker_resp_ISFA_base_loadvars`.\n\nMain outputs:\n* data_cache: \n    * `Flanker_resp_ISFA_base_averages_128.mat` - Averaged ERP dataset;\n    * `Flanker_resp_ISFA_base_averages_subsampling.mat` - Subsampling dataset.\n* output_plots :\n    *  `Flanker_resp_ISFA_base_averages-win-rs128-StandardComps-plot_components` - grand averages and components of interest;\n    *  `Flanker_resp_ISFA_base_averages-win-rs128-StandardComps-plot_topo` - mean and peak topographic maps of grand averages and components of interest;\n    *  `Flanker_resp_ISFA_base_averages-win-rs128-StandardComps-plots_Merge_basic` - a merged plot for two plots above. \n\n\n|\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014`run_Flanker_resp_AVGS_AMPL_theta_pcatfd.m`\n\n|\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014`Flanker_resp_AVGS_AMPL_theta_DatasetDef.m`\n\n|\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014`Flanker_resp_comparisons.m`\n\t\t         \nTogether, these three scripts compute \"average power\" (phase-locked power) TF representations and decompose TF-PCA solutions for these TF representations. `run_Flanker_resp_AVGS_AMPL_theta_pcatfd` is the run script that is executed by the user, whereas`Flanker_resp_AVGS_AMPL_theta_DatasetDef` and 'Flanker_resp_comparisons' are scripts that act as parameter files called by the `run_Flanker_resp_AVGS_AMPL_theta_pcatfd` run script to load necessary parameters. Specifically, `Flanker_resp_AVGS_AMPL_theta_DatasetDef` sets up various parameters, including the electrode_locations file to use, the TF transformation method to use, and the dataset name that will be used in all related outputs to 'data_cache', 'output_data', and 'output_plots'. Furthermore, `Flanker_resp_AVGS_AMPL_theta_DatasetDef` calls an additional script to perform filtering of the data (`preproc_filter`). `Flanker_resp_comparisons` defines the parameters associated with plotting and statistical comparisons between condtiions (catcodes).\n\nIn sum, `run_Flanker_resp_AVGS_AMPL_theta_pcatfd` is the run script executed by the user in order to compute average (phase-locked) power and decompose TF-PCA solutions. Before running `Flanker_resp_AVGS_AMPL_theta_pcatfd`, parameters should be edited in `Flanker_resp_AVGS_AMPL_theta_DatasetDef`, `preproc_filter`, and `Flanker_resp_comparisons`.\n\nMain outputs: \n* data_cache : \n    * `Flanker_resp_AVGS_AMPL_theta_32_t32f32.mat` - the average power;\n* output_data :\t\n    * `Flanker_resp_AVGS_AMPL_theta-pcatfd-rs32-t32s-16e16-f32s7e19-fqA1-DMXacov-ROTvmx-fac1-PCs.mat` - pc weights (based on the average power).\n* output_plots :\n    * `Flanker_resp_AVGS_AMPL_theta-pcatfd-rs32-t32s-16e16-f32s7e19-fqA1-DMXacov-ROTvmx-fac1-plot_components.eps` - time-domain grand averages across all conditions, time-frequency domain grand averages across all conditions (the average power) and pc weights (based on the average power);\n    * `Flanker_resp_AVGS_AMPL_theta-pcatfd-rs32-t32s-16e16-f32s7e19-fqA1-DMXacov-ROTvmx-fac1-plot_scree.eps` - scree plot of variance being explained;\n    * `Flanker_resp_AVGS_AMPL_theta-pcatfd-rs32-t32s-16e16-f32s7e19-fqA1-DMXacov-ROTvmx-fac1-plot_topo.eps` - topographical plots of mean pc weights, peak pc weights (based on the average power);\n    * `Flanker_resp_AVGS_AMPL_theta-pcatfd-rs32-t32s-16e16-f32s7e19-fqA1-DMXacov-ROTvmx-fac1-plots_Merge_long-resp_comparisons.eps` - is the main plot that integrates all the plots genereated. Besides three plots described above, it further plots : 1) time-domain comparison(s), TF domain difference(s) and, pc-weighted TF difference(s) between conditions; 2) topographical plots of mean and peak pc-weighted TF difference(s) between conditions; 3) statistical significance of mean and peak pc-weighted TF difference(s) between conditions.\n\n\n|\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014`Flanker_resp_ISFA_AMPL_theta_pcatfd.m`\n\n|\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014`Flanker_resp_ISFA_AMPL_theta_DatasetDef.m`\n\n|\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014`Flanker_resp_comparisons.m`\n\nTogether, these three scripts compute \"total power\" (phase-locked and non-phase-locked power) TF representations and decompose TF-PCA solutions for these TF representations. `run_Flanker_resp_ISFA_AMPL_theta_pcatfd` is the run script that is executed by the user, whereas`Flanker_resp_ISFA_AMPL_theta_DatasetDef` and `Flanker_resp_comparisons` are scripts that act as parameter files called by the `run_Flanker_resp_ISFA_AMPL_theta_pcatfd` run script to load necessary parameters. Specifically, `Flanker_resp_ISFA_AMPL_theta_DatasetDef` sets up various parameters, including information about how to find and process individual-subject data,  parameters for subsampling, the electrode locations file to use, and the dataset name that will be used in all related outputs to `data_cache`, `output_data`, and `output_plots`. Furthermore, `Flanker_resp_ISFA_AMPL_theta_DatasetDef` calls an additional script to perform filtering of the data (`preproc_filter`). `Flanker_resp_comparisons` defines the parameters associated with plotting and statistical comparisons between condtiions (catcodes).\n\nIn sum, `run_Flanker_resp_ISFA_AMPL_theta_pcatfd` is the run script executed by the user in order to compute total (phase-locked and non-phase-locked) power and decompose TF-PCA solutions. Before running `Flanker_resp_ISFA_AMPL_theta_pcatfd`, parameters should be edited in `Flanker_resp_ISFA_AMPL_theta_DatasetDef`, `preproc_filter`, and `Flanker_resp_comparisons`.\n\nMain output: \n* data_cache : \n    * `Flanker_resp_ISFA_AMPL_theta__32_t32f32.mat` - the total power;\n* output_data :\n    * `Flanker_resp_ISFA_AMPL_theta_-pcatfd-rs32-t32s-16e16-f32s7e19-fqA1-DMXacov-ROTvmx-fac1-PCs.mat` - pc weights (based on the total power).\n* output_plots :\n    * `Flanker_resp_ISFA_AMPL_theta-pcatfd-rs32-t32s-16e16-f32s7e19-fqA1-DMXacov-ROTvmx-fac1-plot_components.eps` - time-domain grand averages across all conditions, time-frequency domain grand averages across all conditions (the total power) and pc weights (based on the total power);\n    * `Flanker_resp_ISFA_AMPL_theta-pcatfd-rs32-t32s-16e16-f32s7e19-fqA1-DMXacov-ROTvmx-fac1-plot_scree.eps` - scree plot of variance being explained;\n    * `Flanker_resp_ISFA_AMPL_theta-pcatfd-rs32-t32s-16e16-f32s7e19-fqA1-DMXacov-ROTvmx-fac1-plot_topo.eps` - topographical plots of mean pc weights, peak pc weights (based on the total power);\n    * `Flanker_resp_ISFA_AMPL_theta-pcatfd-rs32-t32s-16e16-f32s7e19-fqA1-DMXacov-ROTvmx-fac1-plots_Merge_long-resp_comparisons.eps` - is the main plot that integrates all the plots genereated. Besides three plots described above, it further plots : 1) time-domain comparison(s), TF domain difference(s) and, pc-weighted TF difference(s) between conditions; 2) topographical plots of mean and peak pc-weighted TF difference(s) between conditions; 3) statistical significance of mean and peak pc-weighted TF difference(s) between conditions.\n    \n\n|\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014`cp_avg_power_pcs.m`\n\nAs described in the companion paper and tutorial walk-through, it is often useful to copy the PC weights derived from applying TF-PCA to an average (phase-locked) power TF representation and then apply these weights to a TF representation of total (phase-locked and non-phase-locked) power. PTB does not currently have built-in functionality to facilitate copying of PC weights derived from one TF representation to another. However, this can be achieved realtively easily by first running the `run_Flanker_resp_AVGS_AMPL_theta_pcatfd` script, and then running the `run_Flanker_resp_ISFA_AMPL_theta_pcatfd` script. Next, within the `output_data` folder, a copy of the `Flanker_resp_AVGS_AMPL_theta-pcatfd-rs32-t32s-16e16-f32s7e19-fqA1-DMXacov-ROTvmx-fac1-PCs.mat` file needs to be made and subsequently renamed with the same name of the file generated from running the `run_Flanker_resp_ISFA_AMPL_theta_pcatfd` run script: `Flanker_resp_ISFA_AMPL_theta_-pcatfd-rs32-t32s-16e16-f32s7e19-fqA1-DMXacov-ROTvmx-fac1-PCs.mat`. There cannot be two files with the same name, within the same folder, and thus, the origional `Flanker_resp_ISFA_AMPL_theta_-pcatfd-rs32-t32s-16e16-f32s7e19-fqA1-DMXacov-ROTvmx-fac1-PCs.mat` file must be deleted (i.e. it is being replaced by the PC weights generated by the `run_Flanker_resp_AVGS_AMPL_theta_pcatfd` run script). Additionally, the `Flanker_resp_ISFA_AMPL_theta_-pcatfd-rs32-t32s-16e16-f32s7e19-fqA1-DMXacov-ROTvmx-fac1.log` must also be deleted, and corresponding files in `output_plots` must also be deleted. At this point, one can re-run the `run_Flanker_resp_ISFA_AMPL_theta_pcatfd` run script and the copied PC weights will be used for the generated outputs in `output_data` and `output_plots`.\n\nWhile the manual series of steps described above to copy/rename/delete files will work, this approach is tedious, and most importantly, error-prone. Thus, the user can instead use the `cp_avg_power_pcs.m` template script to perform these manual steps automatically. After running `cp_avg_power_pcs.m`, `Flanker_resp_ISFA_AMPL_theta_pcatfd` can be run again to generate outputs to `output_data` and `output_plots` using the copied PC weights.\n\n\n|\u2014\u2014\u2014\u2014\u2014\u2014`data_cache`\n\n|\u2014\u2014\u2014\u2014\u2014\u2014`output_data`\n\n|\u2014\u2014\u2014\u2014\u2014\u2014`output_plots`\n\nThese three folders are populated by the outputs generated by the run scripts located in `ptb_scripts` (and described above). Specifically, `data_cache` stores computed ERP and TF data prior to any region-of-interest (ROI) analysis or PC-weighting. `output_data` stores computed PC weights for any extracted TF-PCA solutions, as well as PC-weighted TF representations, and, if caculated, ROI analyses are also stored here. `output_plots` stores various plots (waveforms, topographic (topo) maps, statistical topo maps, etc.) generated while running the scripts located in `ptb_scripts`. Note that the plots generated by PTB by default and stored in 'ptb_scripts' should not be used for publication, and we recommend that users utilize the plotting scripts found in the `scripts` folder in order to generate publication-ready plots.\n\n\n|\u2014\u2014\u2014\u2014\u2014\u2014`scripts`\n\nThis folder contains non-PTB scripts, including template scripts for converting EEGLAB/ERPLAB formatted data to the PTB (`.mat`) format, template scripts for converting the data produced by PTB into a format that is easier to manipulate for plots and extraction of values for statistical analyses, and template scripts for plotting data outside of PTB. This folder also contains the `cp_avg_power_pcs.m` for copying PC weights within PTB, as described above.\n\n\n|\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014`template_eeg2ptb_erplab.m`\n\nThis template script converts EEGLAB/ERPLAB formatted data to the PTB (`.mat`) format and stores it in `../ptb_scripts`\n\n\n|\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014`template_ptb_cache_out.m`\n\nThis template script includes example code to convert either average (phase-locked) power or total (phase-locked and non-phase-locked) power data (located in ../data_cache) from the PTB format to a format that is easier to plot/analyze outside of PTB. By defualt, this template scripts is set up to export the converted data to a file called `AvgPower_resp_TFD.mat` (for the exported average power data) and `TotalPower_resp_TFD.mat` (for the exported total power data) to a folder titled, `../exported_data`.\n\n\n|\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014`template_ptb_pc_out.m`\n\nThis template script includes code to use the PC weights generated by PTB to weight the reformatted TF representations produced by the `template_ptb_cache_out.m` script (stored in `../exported_data`) and produce PC-weighted TF representations for average (phase-locked) and total (phase-locked and non-phase-locked) power, which are saved as `Theta_AvgPower_resp_TFD_pcWeighted.mat` and `Theta_TotalPower_resp_TFD_pcWeighted.mat`, respectively. These PC-weighted TF surfaces are generated in a format that is easy to plot and analyze outside of the PTB and are saved in the in the `../exported_data` folder.\n\n\n|\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014`template_dbpower.m`\n\nThis template script conducts dB power conversion to the average power and the total power respectively. The generated data (`AvgPower_resp_TFD_baseRemoved.mat` for the average power with dB power conversion and `TotalPower_resp_TFD_baseRemoved.mat` for the total power with dB power conversion) was stored in `../exported_data`.\n\n\n|\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014`template_plots.m`\n\nThis template script plots the results from `template_ptb_cache_out.m`, `emplate_ptb_pc_out.m` and `template_dbpower.m`.  Specifically, it plots the total power  with dB power conversion, pc-weighted total power, topographical plots of pc-weighted total power, and the pc weight itself.\n\n\n|\u2014\u2014\u2014\u2014\u2014\u2014`exported_data`\n\nThis folder is populated with data exported from PTB and stored in a format that is easy to plot/analyze outside of PTB. The data located here is generated by running the aforementioned scripts located in the `scripts` folder.\n\n\n|\u2014\u2014`new_analysis_template`\n\nThis folder is a copy of the `analysis-template` folder, but with all output files in the `data_cache`, `output_data`, `output_plots`, and `exported_data` folders removed. The `new_analysis_template` should be used when following along with the tutorial and running the scripts without needing to delete the example outputs.\n\n"
      },
      "source": "https://raw.githubusercontent.com/NDCLab/tfpca-tutorial/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9673396777299696,
      "result": {
        "original_header": "Overview",
        "type": "Text_excerpt",
        "value": "The TFPCA-Tutorial serves as a companion to a tutorial paper introducing researchers to the time-frequency principal components analysis (TF-PCA) technique for EEG data. The tutorial is designed to help researchers run TF-PCA analyses using the psychophysiology toolbox (ptb). Moreover, this tutorial can serve as a jumping off point for more advanced analyses leveraging Cohen's class reduced interference distribution (RID) and/or TF-PCA on one's own data. The tutorial consists of template scripts to demonstrate how to:\n1) Convert one's data into the format required by the psychophysiology toolbox (ptb);\n2) Use the ptb to compute TF representations of both average (phase-locked) and total (phase and non-phase-locked) power via Cohen's class RID; \n3) Compute tf-pca on average power and then copy pc weights over to total power by using the ptb; \n4) Export variables for statistical analyses and conduct basic plotting. \nCurrently, the TFPCA-Tutorial relies on MATLAB-based programming, and thus, requires that users have a valid MATLAB license to run the tutorial. Assuming a valid MATLAB license and install, the tutorial contains all additional toolboxes and scripts needed to run the analyses described (For tftb toolbox, please email Edward Bernat (ebernat@umd.edu) with a name and an email address per the agreement with UMICH). Note that while the TFPCA-Tutorial currently relies on MATLAB, we plan to update the tutorial to remove the MATLAB requirement, either through an Octave or Python port of the code. Additionally, we have plans to update the tutorial to accept BIDS data and run within a fully containerized environment (Docker/Singularity). If you are interested in contributing to future developments for the TFPCA tutorial please contact us. \n"
      },
      "source": "https://raw.githubusercontent.com/NDCLab/tfpca-tutorial/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9703866581793049,
      "result": {
        "original_header": "Glossary",
        "type": "Text_excerpt",
        "value": "<b>Cohen's class reduced interference distribution (RID)</b> - A time-frequency transformation method yielding improved time-frequency resolution without requiring a priori parameterization for a restricted frequency band.  \n<b>Time-frequency Principle Components Analysis (TF-PCA)</b> - A data reduction technique that allows for isolating distinct phenomena within the TF representation. TF-PCA involves application of principal component analysis (PCA) to the time-frequency representation after first converting each TF-representation into a long vector by conactenating frequency bins across time. \n<b>Average power</b> - A TF representation computed from time domain data that has already been averaged across trials of interest. Thus, average power contains primarily phase-locked power data.  \n<b>Total power</b> - A TF representation that is computed for each trial, and then averaged across trials only after TF decomposition. Thus, total power contains both phase-locked and non-phase-locked power data. \n<b>PTB Format</b> - Data and index variables are stored together in a structured variable: cnt (continuous), erp (epoched), components (derived measures from erp variable).  The PTB toolbox operates as a flat-file database (a 'univariate' data setup).  A main 2-d data matrix (trials by waveforms) is indexed by vectors the same length as trials. Further details of this structure are available in the documentation directories (psychophysiology_toolbox-1.0.0/documentation/data_import/README_dataset-structure.txt) \n"
      },
      "source": "https://raw.githubusercontent.com/NDCLab/tfpca-tutorial/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/NDCLab/tfpca-tutorial/tree/main/eeglab2021.0/plugins/ICLabel/matconvnet/doc/site/docs"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/NDCLab/tfpca-tutorial/tree/main/psychophysiology_toolbox-1.0.0/bundled_external_software/epsmerge_binaries/epsmerge-2.2.2/docs"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/NDCLab/tfpca-tutorial/tree/main/psychophysiology_toolbox-1.0.0/bundled_external_software/epsmerge_binaries/epsmerge-2.2.0/docs"
      },
      "technique": "file_exploration"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/NDCLab/tfpca-tutorial/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/NDCLab/tfpca-tutorial/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "NDCLab/tfpca-tutorial"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "TFPCA-Tutorial"
      },
      "source": "https://raw.githubusercontent.com/NDCLab/tfpca-tutorial/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/NDCLab/tfpca-tutorial/main/eeglab2021.0/plugins/ICLabel/matconvnet/matlab/src/config/mex_CUDA_maci64.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/NDCLab/tfpca-tutorial/main/eeglab2021.0/plugins/ICLabel/matconvnet/matlab/src/config/mex_CUDA_glnxa64.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/NDCLab/tfpca-tutorial/main/eeglab2021.0/plugins/ICLabel/matconvnet/utils/import-fcn.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/NDCLab/tfpca-tutorial/main/eeglab2021.0/plugins/ICLabel/matconvnet/utils/import-googlenet.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/NDCLab/tfpca-tutorial/main/eeglab2021.0/plugins/ICLabel/matconvnet/utils/import-ref-models.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/NDCLab/tfpca-tutorial/main/eeglab2021.0/plugins/ICLabel/matconvnet/utils/import-resnet.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/NDCLab/tfpca-tutorial/main/eeglab2021.0/plugins/ICLabel/matconvnet/utils/get-file.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/NDCLab/tfpca-tutorial/main/eeglab2021.0/plugins/ICLabel/matconvnet/utils/preprocess-imagenet.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/NDCLab/tfpca-tutorial/main/eeglab2021.0/plugins/ICLabel/matconvnet/utils/import-fast-rcnn.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/NDCLab/tfpca-tutorial/main/eeglab2021.0/plugins/ICLabel/matconvnet/utils/proto/get-protos.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/NDCLab/tfpca-tutorial/main//.github/_assets/tfpca400.jpg"
      },
      "source": "https://raw.githubusercontent.com/NDCLab/tfpca-tutorial/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/NDCLab/tfpca-tutorial/main//.github/_assets/directory_structure.png"
      },
      "source": "https://raw.githubusercontent.com/NDCLab/tfpca-tutorial/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Requirements\n\nYou will need a sufficiently recent MATLAB version (R2015b or newer) and a compiler with C++11 support (Visual Studio 2015, GCC 4.8, Xcode 7.3.1 or higher). For GPU computation, you will need at least CUDA 7.5  and, optionally, CuDNN v4 or newer. Depending on the specific  MATLAB version, further constraints may apply, some of which are discussed below and in the [FAQ](faq).\n\n# Installing and compiling the library\n\nIn order to install the library, follows these steps:\n\n1.  Download and unpack the library source code into a directory of\n    your choice. Call the path to this directory `<MatConvNet>`.\n2.  [Compile](#compiling) the library.\n3.  Start MATLAB and type:\n\n        > run <MatConvNet>/matlab/vl_setupnn\n\n    in order to add MatConvNet to MATLAB's search path.\n\nAt this point the library is ready to use. You can test it by using\nthe command (using MATLAB R2015b or later):\n\n    > vl_testnn\n\nTo test GPU support (if you have [compiled it](#gpu)) use instead:\n\n    > vl_testnn('gpu', true)\n\nNote that the second tests runs slower than the CPU version; do not\nworry, this is an artifact of the test procedure.\n\n<a name='compiling'></a>\n## Compiling\n\nMatConvNet compiles under Linux, Mac, and Windows. This page discusses\ncompiling MatConvNet using the MATLAB function\n[`vl_compilenn`](mfiles/vl_compilenn). While this is the easiest\nmethod,\n[the command line or an IDE can be used as well](install-alt.md).\n\n<a name='cpu'></a>\n### Compiling for CPU\n\nIf this is the first time you compile MatConvNet, consider trying\nfirst the CPU version. In order to do this, use the\n[`vl_compilenn`](mfiles/vl_compilenn) command supplied with the\nlibrary:\n\n1.  Make sure that MATLAB is\n    [configured to use your compiler](http://www.mathworks.com/help/matlab/matlab_external/changing-default-compiler.html).\n    In particular, before running `vl_compilenn` do not forget to setup\n    `mex` (doing so nce is sufficient) as follows:\n\n    ```\n    mex -setup\n    mex -setup C++\n    ```\n\n    The prerequisites are as follows:\n\n    * For **macOS**, make sure you have Xcode installed. A copy can be obtained for\n      free from the Mac App Store. If `mex -setup` returns errors, see\n      [troubleshooting](faq#macos).\n\n    * For **Linux**, make sure you have GCC 4.8 and LibJPEG are installed. To\n      install LibJPEG in and Ubuntu/Debian-like distributions use:\n      ```\n      sudo apt-get install build-essential libjpeg-turbo8-dev\n      ```\n      For Fedora/Centos/RedHat-like distributions use instead:\n      ```\n      sudo yum install gcc gcc-c++ libjpeg-turbo-devel\n      ```\n      Older versions of GCC (e.g. 4.7) are not compatible with the C++ code in MatConvNet.\n\n    * For **Windows**, make sure you have Visual Studio 2015 or greater installed.\n\n2.  Open MATLAB and issue the commands:\n\n        > cd <MatConvNet>\n        > addpath matlab\n        > vl_compilenn\n\nAt this point MatConvNet should start compiling. If all goes well, you\nare ready to use the library. If not, you can try debugging the\nproblem by running the compilation script again in verbose mode:\n\n    > vl_compilenn('verbose', 1)\n\nIncrease the verbosity level to 2 to get even more information.\n\n> **Remark:** The 'vl_imreadjpeg' tool uses an external image library\n> to load images. In macOS and Windows, the default is to use the\n> system libraries (Quartz and GDI+ respectively), so this dependency\n> is immaterial. In Linux, this tool requires the LibJPEG\n> library and the corresponding development files to be installed in\n> the system. If needed, the `ImageLibraryCompileFlags` and\n> `ImageLibraryLinkFlags` options can be used to adjust the\n> compiler and linker flags to match a specific library installation.\n> It is also possible to use the `EnableImreadJpeg` option of `vl_compilenn` to\n> turn off this feature.\n\n<a name='gpu'></a>\n### Compiling the GPU support\n\nTo use the GPU-accelerated version of the library, you will need a\nNVIDA GPU card with compute capability 2.0 or greater and a copy of\nthe NVIDIA CUDA toolkit. Officially, MATLAB supports the following\nCUDA versions:\n\n| MATLAB    | CUDA toolkit      |\n|-----------|-------------------|\n| R2017a    | 8.0               |\n| R2016b    | 7.5               |\n| R2016a    | 7.5               |\n| R2015b    | 7.0               |\n\nYou can also use the `gpuDevice` MATLAB command to find out MATLAB's\nversion of the CUDA toolkit. Nevertheless, it is also possible and\noften useful to use a more recent version of CUDA than the one\nofficially supported by MATLAB; this is [explained later](#nvcc).\n\n> **macOS**. CUDA is typically one or two step behind the latest\n> Xcode. For example, CUDA 8.0 requires Xcode 7.3.1 instead of more\n> recent versions.\n>\n> Using an older version of Xcode is explained [here](faq#macos).\n>\n> It can be helpful to consult the\n> [CUDA Installation Guide for Mac](http://docs.nvidia.com/cuda/pdf/CUDA_Installation_Guide_Mac.pdf).\n\nAssuming that there is only a single copy of the CUDA toolkit\ninstalled in your system and that it matches MATLAB's version, compile\nthe library with:\n\n    > vl_compilenn('enableGpu', true)\n\nIf you have multiple versions of the CUDA toolkit, or if the script\ncannot find the toolkit for any reason, specify the path to the CUDA\ntoolkit explicitly. For example, on macOS this may look like:\n\n    > vl_compilenn('enableGpu', true, 'cudaRoot', '/Developer/NVIDIA/CUDA-8.0')\n\nOnce more, you can use the `verbose` option to obtain more information\nif needed.\n\n<a name='nvcc'></a>\n### Using an unsupported CUDA toolkit version\n\nMatConvNet can be compiled to use a more recent version of the CUDA\ntoolkit than the one officially supported by MATLAB. While this may\ncause unforeseen issues (although none is known so far), it is\nnecessary to use [recent libraries such as cuDNN](#cudnn).\n\nCompiling with a newer version of CUDA requires using the\n`cudaMethod,nvcc` option. For example, on macOS this may look like:\n\n    > vl_compilenn('enableGpu', true, ...\n                   'cudaRoot', '/Developer/NVIDIA/CUDA-8.0', ...\n                   'cudaMethod', 'nvcc')\n\nNote that at this point MatConvNet MEX files are linked *against the\nspecified CUDA libraries* instead of the one distributed with\nMATLAB. Hence, in order to use MatConvNet it is now necessary to allow\nMATLAB accessing these libraries. On Linux one way to do so\nis to start MATLAB from the command line (terminal) specifying the\n`LD_LIBRARY_PATH` option. For instance, on Linux this may look like:\n\n    $ LD_LIBRARY_PATH=/Developer/NVIDIA/CUDA-8.0/lib64 matlab\n\nOn Windows, chances are that the CUDA libraries are already visible to\nMATLAB so that nothing else needs to be done.\n\nOn macOS, this step should not be necessary as the library paths are\nhardcoded during compilation.\n\n<a name='cudnn'></a>\n### Compiling the cuDNN support\n\nMatConvNet supports the NVIDIA <a\nhref='https://developer.nvidia.com/cuDNN'>cuDNN library</a> for deep\nlearning (and in particular their fast convolution code). In order to\nuse it, obtain the\n[cuDNN](http://devblogs.nvidia.com/parallelforall/accelerate-machine-learning-cudnn-deep-neural-network-library)\nlibrary from NVIDIA (cuDNN v2 to v4 should work; however, later\nversion are *strongly recommended* as earlier version had a few\nbugs). Make sure that the CUDA toolkit matches the one in cuDNN\n(e.g. 6.5). This often means that the CUDA toolkit will *not* match\nthe one used internally by MATLAB, such that the\n[compilation method](#nvcc) discussed above must be used.\n\nUnpack the cuDNN library binaries and header files in a place\n`<Cudnn>` of you choice. In the rest of this example, it will be\nassumed that this cuDNN RC4 has been unpacked in `local/cudnn-rc4` in\nthe `<MatConvNet>` root directory,\n(i.e. `<Cudnn>`=`<MatConvNet>/local/cudnn-rc4`). For example, the\ndirectory structure on macOS should look like:\n\n     COPYING\n     Makefile\n     Makefile.mex\n     ...\n     examples/\n     local/\n       cudnn-rc4/\n         include/\n           cudnn.h\n         lib/\n           libcudnn.7.5.dylib\n           libcudnn.dylib\n         ...\n\nUse `vl_compilenn` with the `cudnnEnable,true` option to compile the\nlibrary; do not forget to use `cudaMethod,nvcc` as, at it is likely,\nthe CUDA toolkit version is newer than MATLAB's CUDA toolkit. For\nexample, on macOS this may look like:\n\n    > vl_compilenn('enableGpu', true, ...\n                   'cudaRoot', '/Developer/NVIDIA/CUDA-7.5', ...\n                   'cudaMethod', 'nvcc', ...\n                   'enableCudnn', true, ...\n                   'cudnnRoot', 'local/cudnn-rc4') ;\n\nMatConvNet is now compiled with cuDNN support. When starting MATLAB,\nhowever, do not forget to point it to the paths of both the CUDA and\ncuDNN libraries. On a Linux terminal, this may look like:\n\n    $ cd <MatConvNet>\n    $ LD_LIBRARY_PATH=/Developer/NVIDIA/CUDA-7.5/lib64:local matlab\n\nOn Windows, copy the cuDNN DLL file `<Cudnn>/cudnn*dll` (or from\nwherever you unpacked cuDNN) into the `<MatConvNet>/matlab/mex`\ndirectory.\n\nOn macOS, this step should not be necessary as the library paths are\nhardcoded during compilation.\n\n## Further examples\n\nTo compile all the features in MatConvNet on macOS and MATLAB 2014b,\nCUDA toolkit 6.5 and cuDNN Release Candidate 2, use:\n\n    > vl_compilenn('enableGpu', true, 'cudaMethod', 'nvcc', ...\n                   'cudaRoot', '/Developer/NVIDIA/CUDA-6.5', ...\n                   'enableCudnn', true, 'cudnnRoot', 'local/cudnn-rc2') ;\n\nThe equivalent command on Ubuntu Linux would look like:\n\n    > vl_compilenn('enableGpu', true, 'cudaMethod', 'nvcc', ...\n                   'cudaRoot', '/opt/local/cuda-6.5', ...\n                   'enableCudnn', true, 'cudnnRoot', 'local/cudnn-rc2') ;\n\nUsing MATLAB 2015b, CUDA 7.5, and cuDNN R4:\n\n    > vl_compilenn('enableGpu', true, ...\n                   'cudaMethod', 'nvcc', ...\n                   'cudaRoot', '/opt/local/cuda-7.5', ...\n                   'enableCudnn', true, ...\n                   'cudnnRoot', 'local/cudnn-rc4') ;\n"
      },
      "source": "https://raw.githubusercontent.com/NDCLab/tfpca-tutorial/main/eeglab2021.0/plugins/ICLabel/matconvnet/doc/site/docs/install.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Alternative installation methods\n\nThe basic prerequisites are the same [discussed before](install). In\nparticular, all methods require MATLAB to be\n[correctly configured with a suitable compiler](http://www.mathworks.com/help/matlab/matlab_external/changing-default-compiler.html)\n(usually Xcode for Mac and GCC for Linux).\n\n## Using the command line\n\nIf you develop MatConvNet on Mac OS X or Linus, it may be preferable\nto compile the library using the command line and the supplied\n`Makefile`.\n\n### Compiling a basic version of the library\n\nIn order to compile a basic (CPU-only) version of the library use:\n\n    > make ARCH=<your arch> MATLABROOT=<path to MATLAB>\n\nFor example:\n\n    > make ARCH=maci64 MATLABROOT=/Applications/MATLAB_R2014a.app\n\nshould work for a Mac with MATLAB R2014 installed in its default\nlocation. The other supported architecture is `glnxa64` (for Linux).\n\n> **Remark:** On the Mac, `vl_imreadjpeg` tool will use the native Mac OS X graphics\n> library Core Graphics. On Linux, it uses instead LibJPEG.\n> The tool can be disabled by defining `ENABLE_IMREADJPEG=` as an empty\n> symbol. The options `IMAGELIB` option can be used to change the\n> image library used (e.g. to use LibJPEG on the Mac) and the\n> options `IMAGELIB_CFLAGS` and `IMAGELIB_LDFLAGS` to specify\n> custom compiler and linker options.\n\n### Using verbose and debugging modes\n\nIn order to compile in verbose mode, use the `VERB=yes` option. For example:\n\n    > make ARCH=maci64 MATLABROOT=/Applications/MATLAB_R2014a.app VERB=yes\n\nIn order to compile turning on debugging symbols and off optimizations\n(useful to attach a debugger to MATLAB and debug MatConvNet), use the\n`DEBUG=yes` option. For example:\n\n    > make ARCH=maci64 MATLABROOT=/Applications/MATLAB_R2014a.app DEBUG=yes\n\n### Compiling the GPU support\n\nThe default method to compile the GPU support requires a CUDA toolkit\nversion that matches MATLAB's internal one. Compiling may look like:\n\n    > make ARCH=<your arch> MATLABROOT=<path to MATLAB> \\\n           ENABLE_GPU=yes CUDAROOT=<path to CUDA>\n\nFor example:\n\n    > make ARCH=maci64 MATLABROOT=/Applications/MATLAB_R2014b.app \\\n           ENABLE_GPU=yes CUDAROOT=/Developer/NVIDIA/CUDA-5.5\n\nshould work on a Mac with MATLAB R2014b.\n\n### Using an unsupported CUDA toolkit version\n\nUse the `CUDAMETHOD=nvcc` option and the `CUDAROOT` option. For\nexample:\n\n    > make ARCH=maci64 MATLABROOT=/Applications/MATLAB_R2014b.app \\\n           ENABLE_GPU=yes CUDAROOT=/Developer/NVIDIA/CUDA-6.5 CUDAMETHOD=nvcc\n\nDo not forget that it is now necessary to run MATLAB pointing it to\nthe proper CUDA toolkit libraries.\n\n### Compiling the CuDNN support\n\nUse the `ENABLE_CUDNN=yes` option and the `CUDNNROOT` option. From the\ncommand line prompt, this may look like:\n\n    > make ARCH=maci64 MATLABROOT=/Applications/MATLAB_R2014b.app \\\n           ENABLE_GPU=yes CUDAROOT=/Developer/NVIDIA/CUDA-6.5 CUDAMETHOD=nvcc \\\n           ENABLE_CUDNN=yes CUDNNROOT=local/\n\n\n### Further examples\n\nCompiling all the features in MatConvNet in Mac OS X with MATLAB\nR2014b, CUDA 6.5 and CuDNN Candidate Release 2:\n\n    > make ARCH=maci64 MATLABROOT=/Applications/MATLAB_R2014b.app \\\n           ENABLE_GPU=yes CUDAROOT=/Developer/NVIDIA/CUDA-6.5 CUDAMETHOD=nvcc \\\n           ENABLE_CUDNN=yes CUDNNROOT=local/\n           ENABLE_IMREADJPEG=yes \\\n           LIBJPEG_INCLUDE=/opt/local/include \\\n           LIBJPEG_LIB=/opt/local/lib\n"
      },
      "source": "https://raw.githubusercontent.com/NDCLab/tfpca-tutorial/main/eeglab2021.0/plugins/ICLabel/matconvnet/doc/site/docs/install-alt.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 0.8881099755227212,
      "result": {
        "original_header": "TFPCA-Tutorial",
        "type": "Text_excerpt",
        "value": "<p align=\"center\">\n  <img src=\"/.github/_assets/tfpca400.jpg\" />\n</p>\n \n"
      },
      "source": "https://raw.githubusercontent.com/NDCLab/tfpca-tutorial/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9998062005710937,
      "result": {
        "original_header": "Overview",
        "type": "Text_excerpt",
        "value": "Additionally, the TFPCA-Tutorial includes:\n1) Example data (ERP CORE ERN) that was used with template scripts (https://osf.io/q6gwp/);\n2) A copy of the psychophysiology toolbox 1.0.0 (http://www.ccnlab.umd.edu/Psychophysiology_Toolbox/);\n3) A copy of eeglab2021.0 (https://sccn.ucsd.edu/eeglab/downloadtoolbox.php). \nCurrently, the TFPCA-Tutorial relies on MATLAB-based programming, and thus, requires that users have a valid MATLAB license to run the tutorial. Assuming a valid MATLAB license and install, the tutorial contains all additional toolboxes and scripts needed to run the analyses described (For tftb toolbox, please email Edward Bernat (ebernat@umd.edu) with a name and an email address per the agreement with UMICH). Note that while the TFPCA-Tutorial currently relies on MATLAB, we plan to update the tutorial to remove the MATLAB requirement, either through an Octave or Python port of the code. Additionally, we have plans to update the tutorial to accept BIDS data and run within a fully containerized environment (Docker/Singularity). If you are interested in contributing to future developments for the TFPCA tutorial please contact us. \n"
      },
      "source": "https://raw.githubusercontent.com/NDCLab/tfpca-tutorial/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/NDCLab/tfpca-tutorial/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "GNU Affero General Public License v3.0",
        "spdx_id": "AGPL-3.0",
        "type": "License",
        "url": "https://api.github.com/licenses/agpl-3.0",
        "value": "https://api.github.com/licenses/agpl-3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "                    GNU AFFERO GENERAL PUBLIC LICENSE\n                       Version 3, 19 November 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU Affero General Public License is a free, copyleft license for\nsoftware and other kinds of works, specifically designed to ensure\ncooperation with the community in the case of network server software.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nour General Public Licenses are intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  Developers that use our General Public Licenses protect your rights\nwith two steps: (1) assert copyright on the software, and (2) offer\nyou this License which gives you legal permission to copy, distribute\nand/or modify the software.\n\n  A secondary benefit of defending all users' freedom is that\nimprovements made in alternate versions of the program, if they\nreceive widespread use, become available for other developers to\nincorporate.  Many developers of free software are heartened and\nencouraged by the resulting cooperation.  However, in the case of\nsoftware used on network servers, this result may fail to come about.\nThe GNU General Public License permits making a modified version and\nletting the public access it on a server without ever releasing its\nsource code to the public.\n\n  The GNU Affero General Public License is designed specifically to\nensure that, in such cases, the modified source code becomes available\nto the community.  It requires the operator of a network server to\nprovide the source code of the modified version running there to the\nusers of that server.  Therefore, public use of a modified version, on\na publicly accessible server, gives the public access to the source\ncode of the modified version.\n\n  An older license, called the Affero General Public License and\npublished by Affero, was designed to accomplish similar goals.  This is\na different license, not a version of the Affero GPL, but Affero has\nreleased a new version of the Affero GPL which permits relicensing under\nthis license.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU Affero General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Remote Network Interaction; Use with the GNU General Public License.\n\n  Notwithstanding any other provision of this License, if you modify the\nProgram, your modified version must prominently offer all users\ninteracting with it remotely through a computer network (if your version\nsupports such interaction) an opportunity to receive the Corresponding\nSource of your version by providing access to the Corresponding Source\nfrom a network server at no charge, through some standard or customary\nmeans of facilitating copying of software.  This Corresponding Source\nshall include the Corresponding Source for any work covered by version 3\nof the GNU General Public License that is incorporated pursuant to the\nfollowing paragraph.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the work with which it is combined will remain governed by version\n3 of the GNU General Public License.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU Affero General Public License from time to time.  Such new versions\nwill be similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU Affero General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU Affero General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU Affero General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published\n    by the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If your software can interact with users remotely through a computer\nnetwork, you should also make sure that it provides a way for users to\nget its source.  For example, if your program is a web application, its\ninterface could display a \"Source\" link that leads users to an archive\nof the code.  There are many ways you could offer source, and different\nsolutions will be better for different programs; see section 13 for the\nspecific requirements.\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU AGPL, see\n<https://www.gnu.org/licenses/>.\n"
      },
      "source": "https://raw.githubusercontent.com/NDCLab/tfpca-tutorial/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "tfpca-tutorial"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "NDCLab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "MATLAB",
        "size": 18663192,
        "type": "Programming_language",
        "value": "MATLAB"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Cuda",
        "size": 570681,
        "type": "Programming_language",
        "value": "Cuda"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 563533,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 172779,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "TeX",
        "size": 148723,
        "type": "Programming_language",
        "value": "TeX"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Fortran",
        "size": 112549,
        "type": "Programming_language",
        "value": "Fortran"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 95392,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 94065,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Csound Document",
        "size": 90548,
        "type": "Programming_language",
        "value": "Csound Document"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "M",
        "size": 88410,
        "type": "Programming_language",
        "value": "M"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Roff",
        "size": 62765,
        "type": "Programming_language",
        "value": "Roff"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Smarty",
        "size": 40836,
        "type": "Programming_language",
        "value": "Smarty"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Mathematica",
        "size": 33068,
        "type": "Programming_language",
        "value": "Mathematica"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 31087,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Rich Text Format",
        "size": 28811,
        "type": "Programming_language",
        "value": "Rich Text Format"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 24967,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "PHP",
        "size": 24858,
        "type": "Programming_language",
        "value": "PHP"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 18611,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CSS",
        "size": 11276,
        "type": "Programming_language",
        "value": "CSS"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "AGS Script",
        "size": 7599,
        "type": "Programming_language",
        "value": "AGS Script"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Scala",
        "size": 3945,
        "type": "Programming_language",
        "value": "Scala"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "PLSQL",
        "size": 1269,
        "type": "Programming_language",
        "value": "PLSQL"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "JavaScript",
        "size": 664,
        "type": "Programming_language",
        "value": "JavaScript"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Batchfile",
        "size": 152,
        "type": "Programming_language",
        "value": "Batchfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Objective-C",
        "size": 33,
        "type": "Programming_language",
        "value": "Objective-C"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/NDCLab/tfpca-tutorial/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-05 23:11:23",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 20
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick Start",
        "parent_header": [
          "TFPCA-Tutorial"
        ],
        "type": "Text_excerpt",
        "value": "Before running the PTB, there are several steps to set everything up.\n1) Have perl installed. Perl is generally installed with Linux and Mac OS. Type `perl -v` on a command line to determine the version of Perl installed. For Windows, perl is needed to be downloaded and installed (https://www.perl.org/get.html);\n2) Have a valid MATLAB (The MathWorks, Natick, MA) license and have MATLAB installed;\n3) Git clone this repository (or download directly);\n4) Navigate to the `analysis_template` folder and run `startup.m`.\n\nYou should see messages indicating that the necessary toolboxes have been found :\n\n```\nPsychophysiology Toolbox veryfying and adding paths ... \n\nVerifying core toolbox paths ... \n\nFOUND: psychophys_components_path:      /.../tfpca-tutorial/psychophysiology_toolbox-1.0.0/components\nFOUND: psychophys_dataproc_path:        /.../tfpca-tutorial/psychophysiology_toolbox-1.0.0/data_processing\nFOUND: psychophys_dataimport_path:      /.../tfpca-tutorial/psychophysiology_toolbox-1.0.0/data_import\nFOUND: psychophys_general_path:         /.../tfpca-tutorial/psychophysiology_toolbox-1.0.0/general\nFOUND: psychophys_gui_path:             /.../tfpca-tutorial/psychophysiology_toolbox-1.0.0/gui\n\nVerifying directories for scripts, cache, and output ... \n\nFOUND: dir_data_cache:                  ./data_cache\nFOUND: dir_output_plots:                ./output_plots\nFOUND: dir_output_data:                 ./output_data\nFOUND: dir_scripts:                     ./scripts\n\nVerifying paths for external bundled scripts ... \n\nFOUND: eeglab_path:                     /.../tfpca-tutorial/psychophysiology_toolbox-1.0.0/bundled_external_software/eeglab\nFOUND: epsmerge_path:                   /.../tfpca-tutorial/psychophysiology_toolbox-1.0.0/bundled_external_software/epsmerge\nFOUND: PCA_Toolbox_path:                /.../tfpca-tutorial/psychophysiology_toolbox-1.0.0/bundled_external_software/PCA_Toolbox\n\nLooking for supported time-frequency toolboxes ... \n\nFOUND: DiscreteTFD Toolbox (GPL) - dtfd_toolbox_path:           /.../tfpca-tutorial/psychophysiology_toolbox-1.0.0/bundled_external_software/dtfd\nFOUND: Rihaczek RID (GPL) - rid_rihaczek_toolbox_path:           /\u2026/tfpca-tutorial/psychophysiology_toolbox-1.0.0/bundled_external_software/rid_rihaczek_PC\nFOUND: Time-Frequency Toolbox (Q.S.) - tftb_toolbox_path:        /.../tfpca-tutorial/psychophysiology_toolbox-1.0.0/../tftb\nFOUND: Matlab Wavelet Toolbox (Mathworks Inc.)\n\nPsychophysiology Toolbox completed verifying and adding paths.\n```\n\nTfpca-tutorial tests were performed using Matlab R2021a and macOS Big Sur (11.4). However, the tutorial should likely work with most other environemnts, on both Windows and Linux/Unix, but have not been explicity tested and may require minor modifications. If you run into issues with set-up and running of the tutorial, please post an issue.\n\n"
      },
      "source": "https://raw.githubusercontent.com/NDCLab/tfpca-tutorial/main/README.md",
      "technique": "header_analysis"
    }
  ]
}