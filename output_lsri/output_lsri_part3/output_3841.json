{
  "application_domain": [
    {
      "confidence": 0.8875888516958458,
      "result": {
        "type": "String",
        "value": "Semantic web"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "References",
        "parent_header": [
          "&#9004; ScaffoldGraph  &#9004;"
        ],
        "type": "Text_excerpt",
        "value": "* Bemis, G. W. and Murcko, M. A. (1996). The properties of known drugs. 1. molecular frameworks. Journal of Medicinal Chemistry, 39(15), 2887\u20132893.\n* Matlock, M., Zaretzki, J., Swamidass, J. S. (2013). Scaffold network generator: a tool for mining molecular structures. Bioinformatics, 29(20), 2655-2656\n* Schuffenhauer, A., Ertl, P., Roggo, S., Wetzel, S., Koch, M. A., and Waldmann, H. (2007). The scaffold tree visualization of the scaffold universe by hierarchical scaffold classification. Journal of Chemical Information and Modeling, 47(1), 47\u201358. PMID: 17238248.\n* Varin, T., Schuffenhauer, A., Ertl, P., and Renner, S. (2011). Mining for bioactive scaffolds with scaffold networks: Improved compound set enrichment from primary screening data. Journal of Chemical Information and Modeling, 51(7), 1528\u20131538.\n* Varin, T., Gubler, H., Parker, C., Zhang, J., Raman, P., Ertl, P. and Schuffenhauer, A. (2010) Compound Set Enrichment: A Novel Approach to Analysis of Primary HTS Data. Journal of Chemical Information and Modeling, 50(12), 2067-2078.\n* Wetzel, S., Klein, K., Renner, S., Rennerauh, D., Oprea, T. I., Mutzel, P., and Waldmann, H. (2009). Interactive exploration of chemical space with scaffold hunter. Nat Chem Biol, 1875(8), 581\u2013583.\n* Wilkens, J., Janes, J. and Su, A. (2005). HierS:\u2009 Hierarchical Scaffold Clustering Using Topological Chemical Graphs. Journal of Medicinal Chemistry, 48(9), 3182-3193.\n\n---------------------------------------------------------------------------------\n"
      },
      "source": "https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "&#9004; ScaffoldGraph  &#9004;"
        ],
        "type": "Text_excerpt",
        "value": "If you use this software in your own work please cite our [paper](https://academic.oup.com/bioinformatics/advance-article/doi/10.1093/bioinformatics/btaa219/5814205),\nand the respective papers of the methods used.\n\n```\n@article{10.1093/bioinformatics/btaa219,\n    author = {Scott, Oliver B and Chan, A W Edith},\n    title = \"{ScaffoldGraph: an open-source library for the generation and analysis of molecular scaffold networks and scaffold trees}\",\n    journal = {Bioinformatics},\n    year = {2020},\n    month = {03},\n    issn = {1367-4803},\n    doi = {10.1093/bioinformatics/btaa219},\n    url = {https://doi.org/10.1093/bioinformatics/btaa219},\n    note = {btaa219}\n    eprint = {https://academic.oup.com/bioinformatics/advance-article-pdf/doi/10.1093/bioinformatics/btaa219/32984904/btaa219.pdf},\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_of_conduct": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at oliver.scott.17@ucl.ac.uk. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
      },
      "source": "https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/CODE_OF_CONDUCT.md",
      "technique": "file_exploration"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/UCLCheminformatics/ScaffoldGraph"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "## Contributing\n\nContributions to ScaffoldGraph will most likely fall into the following categories:\n\n1. Implementing a new Feature:\n    * New Features that fit into the scope of this package will be accepted. If you are unsure about the \n      idea/design/implementation, feel free to post an issue.\n2. Fixing a Bug:\n    * Bug fixes are welcomed, please send a Pull Request each time a bug is encountered. When sending a Pull\n      Request please provide a clear description of the encountered bug. If unsure feel free to post an issue\n\nPlease send Pull Requests to: \nhttp://github.com/UCLCheminformatics/scaffoldgraph\n\n### Testing\n\nScaffoldGraphs testing is located under `test/`. Run all tests using:\n\n```\n$ python setup.py test\n```\n\nor run an individual test: `pytest --no-cov tests/core`\n\nWhen contributing new features please include appropriate test files\n\n### Continuous Integration\n\nScaffoldGraph uses Travis CI for continuous integration\n"
      },
      "source": "https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/CONTRIBUTING.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Contributing",
        "parent_header": [
          "&#9004; ScaffoldGraph  &#9004;"
        ],
        "type": "Text_excerpt",
        "value": "Contributions to ScaffoldGraph will most likely fall into the following categories:\n\n1. Implementing a new Feature:\n    * New Features that fit into the scope of this package will be accepted. If you are unsure about the \n      idea/design/implementation, feel free to post an issue.\n2. Fixing a Bug:\n    * Bug fixes are welcomed, please send a Pull Request each time a bug is encountered. When sending a Pull\n      Request please provide a clear description of the encountered bug. If unsure feel free to post an issue\n\nPlease send Pull Requests to: \nhttp://github.com/UCLCheminformatics/ScaffoldGraph\n"
      },
      "source": "https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Testing",
        "parent_header": [
          "&#9004; ScaffoldGraph  &#9004;",
          "Contributing"
        ],
        "type": "Text_excerpt",
        "value": "ScaffoldGraphs testing is located under `test/`. Run all tests using:\n\n```\n$ python setup.py test\n```\n\nor run an individual test: `pytest --no-cov tests/core`\n\nWhen contributing new features please include appropriate test files\n"
      },
      "source": "https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Continuous Integration",
        "parent_header": [
          "&#9004; ScaffoldGraph  &#9004;",
          "Contributing"
        ],
        "type": "Text_excerpt",
        "value": "ScaffoldGraph uses Travis CI for continuous integration\n\n--------------------------------------------------------------------------------\n"
      },
      "source": "https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-12-10T20:46:09Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-30T21:25:50Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ScaffoldGraph is an open-source cheminformatics library, built using RDKit and NetworkX, for the generation and analysis of scaffold networks and scaffold trees."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.998665055447694,
      "result": {
        "original_header": "&#9004; ScaffoldGraph  &#9004;",
        "type": "Text_excerpt",
        "value": "**ScaffoldGraph** is an open-source cheminformatics library, built using [RDKit](https://www.rdkit.org/) and\n[NetworkX](https://networkx.github.io/), for the generation and analysis of scaffold networks and scaffold trees. \n"
      },
      "source": "https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9844022947469824,
      "result": {
        "original_header": "Features",
        "type": "Text_excerpt",
        "value": "* **Scaffold Network generation** (Varin, 2011)\n    * Explore scaffold-space through the iterative removal of available rings, generating all possible sub-scaffolds\n      for a set of input molecules. The output is a directed acyclic graph of molecular scaffolds\n* **HierS Network Generation** (Wilkens, 2005)\n    * Explore scaffold-space through the iterative removal of available rings, generating all possible sub-scaffolds \n      without dissecting fused ring-systems\n* **Scaffold Tree generation** (Schuffenhauer, 2007)\n    * Explore scaffold-space through the iterative removal of the least-characteristic ring from a molecular scaffold.\n      The output is a tree of molecular scaffolds\n* **Murcko Fragment generation** (Bemis, 1996)\n    * Generate a set of murcko fragments for a molecule through the iterative removal of available rings.\n* **Compound Set Enrichment** (Varin, 2010, 2011)\n    * Identify active chemical series from primary screening data\n \n"
      },
      "source": "https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9185169678689706,
      "result": {
        "original_header": "Comparison to existing software",
        "type": "Text_excerpt",
        "value": "`**` Tests performed on an Intel Core i7-6700 @ 3.4 GHz with 32GB of RAM, without parallel processing. I could not find \nthe code for STG and do not intend to search for it, SNG report that both itself and SH are both faster in the\nbenchmark test. \n`****` Graphical interface has an upper limit of 2,000 scaffolds \n"
      },
      "source": "https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/UCLCheminformatics/ScaffoldGraph/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/examples/cytoscape_vis.ipynb"
      },
      "source": "https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/examples/cytoscape_vis.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/examples/scaffold_graphs.ipynb"
      },
      "source": "https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/examples/scaffold_graphs.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/examples/basic_functions.ipynb"
      },
      "source": "https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/examples/basic_functions.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 37
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/UCLCheminformatics/ScaffoldGraph/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "UCLCheminformatics/ScaffoldGraph"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "&#9004; ScaffoldGraph  &#9004;"
      },
      "source": "https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/ci/install.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://doi.org/10.1093/bioinformatics/btaa219"
      },
      "source": "https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/img/scaffoldgraph.jpg"
      },
      "source": "https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "&#9004; ScaffoldGraph  &#9004;"
        ],
        "type": "Text_excerpt",
        "value": "- ScaffoldGraph currently supports Python 3.6 and above.\n"
      },
      "source": "https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Install with conda (recommended)",
        "parent_header": [
          "&#9004; ScaffoldGraph  &#9004;",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "```\nconda config --add channels conda-forge\nconda install -c uclcheminformatics scaffoldgraph\n```"
      },
      "source": "https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Install with pip",
        "parent_header": [
          "&#9004; ScaffoldGraph  &#9004;",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "```\n# Basic installation.\npip install scaffoldgraph\n\n# Install with ipycytoscape.\npip install scaffoldgraph[vis]\n\n# Install with rdkit-pypi (Linux, MacOS).\npip install scaffoldgraph[rdkit]\n\n# Install with all optional packages. \npip install scaffoldgraph[rdkit, vis]\n```\n__Warning__: rdkit cannot be installed with pip, so must be installed through [other means]('https://www.rdkit.org/docs/Install.html')\n\n__Update (17/06/21)__: rdkit can now be installed through the [rdkit-pypi](https://pypi.org/project/rdkit-pypi/) wheels for\nLinux and MacOS, and can be installed alongside ScaffoldGraph optionally (see above instructions).  \n\n__Update (16/11/21)__: Jupyter lab users may also need to follow the extra installation instructions \n[here](https://github.com/cytoscape/ipycytoscape#for-jupyterlab-1x-or-2x) / [here](https://ipycytoscape.readthedocs.io/en/latest/installing.html) \nwhen using the ipycytoscape visualisation utility.\n\n\n--------------------------------------------------------------------------------\n"
      },
      "source": "https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9981618041532297,
      "result": {
        "original_header": "&#9004; ScaffoldGraph  &#9004;",
        "type": "Text_excerpt",
        "value": "<p align=\"center\">\n    <img width=\"80%\", src=\"https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/img/scaffoldgraph.jpg\" />\n</p> \n"
      },
      "source": "https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/UCLCheminformatics/ScaffoldGraph/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "cheminformatics, chemistry, computational-chemistry, fragments, hiers, molecules, murcko, networkx, rdkit, scaffold-networks, scaffold-trees, scaffolds"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2019 OliverBScott\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
      },
      "source": "https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ScaffoldGraph"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "UCLCheminformatics"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 321966,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 614,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://ipycytoscape.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "OliverBScott",
          "type": "User"
        },
        "date_created": "2021-06-17T10:56:40Z",
        "date_published": "2021-06-17T11:02:30Z",
        "description": "* Installation updates (install optional requirements with pip)\r\n* from_dataframe can read from existing rdkit Mols in specified smiles column\r\n",
        "html_url": "https://github.com/UCLCheminformatics/ScaffoldGraph/releases/tag/1.1.2",
        "name": "ScaffoldGraph-1.1.2",
        "release_id": 44787322,
        "tag": "1.1.2",
        "tarball_url": "https://api.github.com/repos/UCLCheminformatics/ScaffoldGraph/tarball/1.1.2",
        "type": "Release",
        "url": "https://api.github.com/repos/UCLCheminformatics/ScaffoldGraph/releases/44787322",
        "value": "https://api.github.com/repos/UCLCheminformatics/ScaffoldGraph/releases/44787322",
        "zipball_url": "https://api.github.com/repos/UCLCheminformatics/ScaffoldGraph/zipball/1.1.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "OliverBScott",
          "type": "User"
        },
        "date_created": "2021-02-15T12:11:01Z",
        "date_published": "2021-02-15T12:12:55Z",
        "description": "### Bug-fixes\r\n* Static files not included in installation",
        "html_url": "https://github.com/UCLCheminformatics/ScaffoldGraph/releases/tag/1.1.1",
        "name": "ScaffoldGraph-1.1.1",
        "release_id": 38057334,
        "tag": "1.1.1",
        "tarball_url": "https://api.github.com/repos/UCLCheminformatics/ScaffoldGraph/tarball/1.1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/UCLCheminformatics/ScaffoldGraph/releases/38057334",
        "value": "https://api.github.com/repos/UCLCheminformatics/ScaffoldGraph/releases/38057334",
        "zipball_url": "https://api.github.com/repos/UCLCheminformatics/ScaffoldGraph/zipball/1.1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "OliverBScott",
          "type": "User"
        },
        "date_created": "2021-02-01T13:10:11Z",
        "date_published": "2021-02-01T13:17:32Z",
        "description": "**New Features:**\r\n* Cytoscape Visualizer (requires ipycytoscape)\r\n* Further visualization utilities\r\n* Basic diversity picker function\r\n\r\n**Other:**\r\n* CI updates\r\n* Minor bug fixes\r\n* Limit to Python >= 3.6",
        "html_url": "https://github.com/UCLCheminformatics/ScaffoldGraph/releases/tag/1.1.0",
        "name": "ScaffoldGraph-1.1.0",
        "release_id": 37176467,
        "tag": "1.1.0",
        "tarball_url": "https://api.github.com/repos/UCLCheminformatics/ScaffoldGraph/tarball/1.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/UCLCheminformatics/ScaffoldGraph/releases/37176467",
        "value": "https://api.github.com/repos/UCLCheminformatics/ScaffoldGraph/releases/37176467",
        "zipball_url": "https://api.github.com/repos/UCLCheminformatics/ScaffoldGraph/zipball/1.1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "OliverBScott",
          "type": "User"
        },
        "date_created": "2020-11-18T12:35:42Z",
        "date_published": "2020-11-18T12:38:02Z",
        "description": "* Minor bug-fixes\r\n* Make compatible with the most recent release of RDKit `2020.09.01`",
        "html_url": "https://github.com/UCLCheminformatics/ScaffoldGraph/releases/tag/1.0.4",
        "name": "ScaffoldGraph-1.0.4",
        "release_id": 34114263,
        "tag": "1.0.4",
        "tarball_url": "https://api.github.com/repos/UCLCheminformatics/ScaffoldGraph/tarball/1.0.4",
        "type": "Release",
        "url": "https://api.github.com/repos/UCLCheminformatics/ScaffoldGraph/releases/34114263",
        "value": "https://api.github.com/repos/UCLCheminformatics/ScaffoldGraph/releases/34114263",
        "zipball_url": "https://api.github.com/repos/UCLCheminformatics/ScaffoldGraph/zipball/1.0.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "OliverBScott",
          "type": "User"
        },
        "date_created": "2020-09-15T12:22:25Z",
        "date_published": "2020-09-24T09:55:02Z",
        "description": "- Bug fixes\r\n- New features\r\n- Improved documentation\r\n- Improved tests",
        "html_url": "https://github.com/UCLCheminformatics/ScaffoldGraph/releases/tag/1.0.3",
        "name": "ScaffoldGraph-1.0.3",
        "release_id": 31751444,
        "tag": "1.0.3",
        "tarball_url": "https://api.github.com/repos/UCLCheminformatics/ScaffoldGraph/tarball/1.0.3",
        "type": "Release",
        "url": "https://api.github.com/repos/UCLCheminformatics/ScaffoldGraph/releases/31751444",
        "value": "https://api.github.com/repos/UCLCheminformatics/ScaffoldGraph/releases/31751444",
        "zipball_url": "https://api.github.com/repos/UCLCheminformatics/ScaffoldGraph/zipball/1.0.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "OliverBScott",
          "type": "User"
        },
        "date_created": "2020-05-15T14:14:43Z",
        "date_published": "2020-05-15T14:21:38Z",
        "description": "Bug Fixes:\r\n- Fixed SMILES CLI issue #2 \r\n- Fixed Pandas DataFrame supplier \r\n\r\nNew Features:\r\n- multiple new functions for improved useability https://github.com/UCLCheminformatics/ScaffoldGraph/commit/e41458112ce7b88b8551f68c86f3429cea184db2\r\n- tqdm progress bar now works in Jupyter https://github.com/UCLCheminformatics/ScaffoldGraph/commit/3b57fbed573497ec5ed05212d416e702777a404f",
        "html_url": "https://github.com/UCLCheminformatics/ScaffoldGraph/releases/tag/v1.0.2",
        "name": "Bug fixes and new features",
        "release_id": 26560127,
        "tag": "v1.0.2",
        "tarball_url": "https://api.github.com/repos/UCLCheminformatics/ScaffoldGraph/tarball/v1.0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/UCLCheminformatics/ScaffoldGraph/releases/26560127",
        "value": "https://api.github.com/repos/UCLCheminformatics/ScaffoldGraph/releases/26560127",
        "zipball_url": "https://api.github.com/repos/UCLCheminformatics/ScaffoldGraph/zipball/v1.0.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "OliverBScott",
          "type": "User"
        },
        "date_created": "2020-03-20T12:38:06Z",
        "date_published": "2020-03-20T13:20:23Z",
        "description": "Minor bug fixes for v1.0.0",
        "html_url": "https://github.com/UCLCheminformatics/ScaffoldGraph/releases/tag/v1.0.1",
        "name": "Minor bug fixes for v1.0.0",
        "release_id": 24709382,
        "tag": "v1.0.1",
        "tarball_url": "https://api.github.com/repos/UCLCheminformatics/ScaffoldGraph/tarball/v1.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/UCLCheminformatics/ScaffoldGraph/releases/24709382",
        "value": "https://api.github.com/repos/UCLCheminformatics/ScaffoldGraph/releases/24709382",
        "zipball_url": "https://api.github.com/repos/UCLCheminformatics/ScaffoldGraph/zipball/v1.0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "OliverBScott",
          "type": "User"
        },
        "date_created": "2019-12-16T14:14:10Z",
        "date_published": "2019-12-16T14:17:37Z",
        "description": "The initial release of ScaffoldGraph.",
        "html_url": "https://github.com/UCLCheminformatics/ScaffoldGraph/releases/tag/v1.0.0",
        "name": "Initial Release",
        "release_id": 22257034,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/UCLCheminformatics/ScaffoldGraph/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/UCLCheminformatics/ScaffoldGraph/releases/22257034",
        "value": "https://api.github.com/repos/UCLCheminformatics/ScaffoldGraph/releases/22257034",
        "zipball_url": "https://api.github.com/repos/UCLCheminformatics/ScaffoldGraph/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-06 14:15:26",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 164
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "CLI usage",
        "parent_header": [
          "&#9004; ScaffoldGraph  &#9004;",
          "Quick Start"
        ],
        "type": "Text_excerpt",
        "value": "The ScaffoldGraph CLI is almost analogous to SNG consisting of a two step process (Generate --> Aggregate).\n\nScaffoldGraph can be invoked from the command-line using the following command:\n\n```console\n$ scaffoldgraph <command> <input-file> <options>\n```\nWhere \"command\" is one of: tree, network, hiers, aggregate or select. \n\n- #### Generating Scaffold Networks/Trees\n    \n    The first step of the process is to generate an intermediate scaffold graph. The generation commands\n    are: network, hiers and tree\n    \n    For example, if a user would like to generate a network from two files:\n    \n    ```console\n    $ ls\n    file_1.sdf  file_2.sdf\n    ```\n    \n    They would first use the commands:\n    \n    ```console\n    $ scaffoldgraph network file_1.sdf file_1.tmp\n    $ scaffoldgraph network file_2.sdf file_2.tmp\n    ```\n    \n    Further options:\n    \n    ```\n    --max-rings, -m : ignore molecules with # rings > N (default: 10)\n    --flatten-isotopes -i : remove specific isotopes\n    --keep-largest-fragment -f : only process the largest disconnected fragment\n    --discharge-and-deradicalize -d : remove charges and radicals from scaffolds \n    ```\n    \n- #### Aggregating Scaffold Graphs\n\n    The second step of the process is aggregating the temporary files into a combined graph representation.\n    \n    ```console\n    $ scaffoldgraph aggregate file_1.tmp file_2.tmp file.tsv\n    ```\n    \n    The final network is now available in 'file.tsv'. Output formats are explained below.\n    \n    Further options:\n    \n    ```\n    --map-mols, -m  <file>   : generate a file mapping molecule IDs to scaffold IDs \n    --map-annotations <file> : generate a file mapping scaffold IDs to annotations\n    --sdf                    : write the output as an SDF file\n    ```\n    \n\n- #### Selecting Subsets\n\n    ScaffoldGraph allows a user to select a subset of a scaffold network or tree using a molecule-based query,\n    i.e. selecting only scaffolds for molecules of interest.\n     \n    This command can only be performed on an aggregated graph (Not SDF).\n    \n    ```console\n    $ scaffoldgraph select <graph input-file> <input molecules> <output-file> <options>\n    ```\n    \n    Options:\n    \n    ```\n    <graph input-file>   : A TSV graph constructed using the aggregate command\n    <input molecules>    : Input query file (SDF, SMILES)\n    <output-file>        : Write results to specified file\n    --sdf                : Write the output as an SDF file\n    ```\n\n- #### Input Formats\n\n    ScaffoldGraphs CLI utility supports input files in the SMILES and SDF formats. Other file formats can be converted\n    using [OpenBabel](http://openbabel.org/wiki/Main_Page).\n\n    - ##### Smiles Format:\n    \n    ScaffoldGraph expects a delimited file where the first column defines a SMILES string, followed by a molecule\n    identifier. If an identifier is not specified the program will use a hash of the molecule as an identifier.\n        \n    Example SMILES file:\n        \n    ```csv\n    CCN1CCc2c(C1)sc(NC(=O)Nc3ccc(Cl)cc3)c2C#N   CHEMBL4116520\n    CC(N1CC(C1)Oc2ccc(Cl)cc2)C3=Nc4c(cnn4C5CCOCC5)C(=O)N3   CHEMBL3990718\n    CN(C\\C=C\\c1ccc(cc1)C(F)(F)F)Cc2coc3ccccc23  CHEMBL4116665\n    N=C1N(C(=Nc2ccccc12)c3ccccc3)c4ccc5OCOc5c4  CHEMBL4116261\n    ...\n    ```\n    \n    - ##### SDF Format:\n    \n    ScaffoldGraph expects an [SDF](https://en.wikipedia.org/wiki/Chemical_table_file) file, where the molecule\n    identifier is specified in the title line. If the title line is blank, then a hash of the molecule\n    will be used as an identifier.\n       \n    Note: selecting subsets of a graph will not be possible if a name is not supplied \n        \n- #### Output Formats\n\n    - ##### TSV Format (default)\n    \n    The generate commands (network, hiers, tree) produce an intermediate tsv containing 4 columns:\n        \n    1) Number of rings (hierarchy)\n    2) Scaffold SMILES\n    3) Sub-scaffold SMILES\n    4) Molecule ID(s) (top-level scaffolds (Murcko))\n\n    The aggregate command produces a tsv containing 4 columns\n        \n    1) Scaffold ID\n    2) Number of rings (hierarchy)\n    3) Scaffold SMILES\n    4) Sub-scaffold IDs\n    \n    - ##### SDF Format\n    \n    An SDF file can be produced by the aggregate and select commands. This SDF is \n    formatted according to the SDF specification with added property fields:\n        \n    1) TITLE field = scaffold ID\n    2) SUBSCAFFOLDS field = list of sub-scaffold IDs\n    3) HIERARCHY field = number of rings\n    4) SMILES field = scaffold canonical SMILES   \n  \n  \n--------------------------------------------------------------------------------\n\n### Library usage\n\nScaffoldGraph makes it simple to construct a graph using the library API.\nThe resultant graphs follow the same API as a NetworkX DiGraph.\n\nSome [example](https://github.com/UCLCheminformatics/ScaffoldGraph/tree/master/examples) \nnotebooks can be found in the 'examples' directory.\n\n```python\nimport scaffoldgraph as sg\n\n# construct a scaffold network from an SDF file\nnetwork = sg.ScaffoldNetwork.from_sdf('my_sdf_file.sdf')\n\n# construct a scaffold tree from a SMILES file\ntree = sg.ScaffoldTree.from_smiles('my_smiles_file.smi')\n\n# construct a scaffold tree from a pandas dataframe\nimport pandas as pd\ndf = pd.read_csv('activity_data.csv')\nnetwork = sg.ScaffoldTree.from_dataframe(\n    df, smiles_column='Smiles', name_column='MolID',\n    data_columns=['pIC50', 'MolWt'], progress=True,\n)\n```\n\n\n--------------------------------------------------------------------------------\n\n\n## Advanced Usage\n\n- **Multi-processing**\n    \n    It is simple to construct a graph from multiple input source in parallel,\n    using the concurrent.futures module and the sg.utils.aggregate function.\n    \n  ```python\n  from concurrent.futures import ProcessPoolExecutor\n  from functools import partial\n  import scaffoldgraph as sg\n  import os\n      \n  directory = './data'\n  sdf_files = [f for f in os.listdir(directory) if f.endswith('.sdf')]\n      \n  func = partial(sg.ScaffoldNetwork.from_sdf, ring_cutoff=10)\n        \n  graphs = []\n  with ProcessPoolExecutor(max_workers=4) as executor:\n      futures = executor.map(func, sdf_files)\n      for future in futures:\n          graphs.append(future)\n        \n  network = sg.utils.aggregate(graphs)\n  ```\n    \n- **Creating custom scaffold prioritisation rules**\n\n    If required a user can define their own rules for prioritizing scaffolds during scaffold tree construction.\n    Rules can be defined by subclassing one of four rule classes:\n    \n    BaseScaffoldFilterRule, ScaffoldFilterRule, ScaffoldMinFilterRule or ScaffoldMaxFilterRule\n    \n    When subclassing a name property must be defined and either a condition, get_property or filter function.\n    Examples are shown below:\n    \n  ```python\n  import scaffoldgraph as sg\n  from scaffoldgraph.prioritization import *\n    \n  \"\"\"\n  Scaffold filter rule (must implement name and condition)\n  The filter will retain all scaffolds which return a True condition\n  \"\"\"\n  \n  class CustomRule01(ScaffoldFilterRule):\n      \"\"\"Do not remove rings with >= 12 atoms if there are smaller rings to remove\"\"\"\n  \n      def condition(self, child, parent):\n          removed_ring = child.rings[parent.removed_ring_idx]\n          return removed_ring.size < 12\n            \n      @property\n      def name(self):\n          return 'custom rule 01'\n          \n  \"\"\"\n  Scaffold min/max filter rule (must implement name and get_property)\n  The filter will retain all scaffolds with the min/max property value\n  \"\"\"\n    \n  class CustomRule02(ScaffoldMinFilterRule):\n      \"\"\"Smaller rings are removed first\"\"\"\n    \n      def get_property(self, child, parent):\n          return child.rings[parent.removed_ring_idx].size\n            \n      @property\n      def name(self):\n          return 'custom rule 02'\n        \n      \n  \"\"\"\n  Scaffold base filter rule (must implement name and filter)\n  The filter method must return a list of filtered parent scaffolds\n  This rule is used when a more complex rule is required, this example\n  defines a tiebreaker rule. Only one scaffold must be left at the end\n  of all filter rules in a rule set\n  \"\"\"\n    \n  class CustomRule03(BaseScaffoldFilterRule):\n      \"\"\"Tie-breaker rule (alphabetical)\"\"\"\n    \n      def filter(self, child, parents):\n          return [sorted(parents, key=lambda p: p.smiles)[0]]\n    \n      @property\n      def name(self):\n          return 'custom rule 03'  \n  ```\n    \n   Custom rules can subsequently be added to a rule set and supplied to the scaffold tree constructor:\n    \n   ```python\n  ruleset = ScaffoldRuleSet(name='custom rules')\n  ruleset.add_rule(CustomRule01())\n  ruleset.add_rule(CustomRule02())\n  ruleset.add_rule(CustomRule03())\n    \n  graph = sg.ScaffoldTree.from_sdf('my_sdf_file.sdf', prioritization_rules=ruleset)\n  ```\n\n--------------------------------------------------------------------------------\n\n## Contributing\n\nContributions to ScaffoldGraph will most likely fall into the following categories:\n\n1. Implementing a new Feature:\n    * New Features that fit into the scope of this package will be accepted. If you are unsure about the \n      idea/design/implementation, feel free to post an issue.\n2. Fixing a Bug:\n    * Bug fixes are welcomed, please send a Pull Request each time a bug is encountered. When sending a Pull\n      Request please provide a clear description of the encountered bug. If unsure feel free to post an issue\n\nPlease send Pull Requests to: \nhttp://github.com/UCLCheminformatics/ScaffoldGraph\n\n### Testing\n\nScaffoldGraphs testing is located under `test/`. Run all tests using:\n\n```\n$ python setup.py test\n```\n\nor run an individual test: `pytest --no-cov tests/core`\n\nWhen contributing new features please include appropriate test files\n\n### Continuous Integration\n\nScaffoldGraph uses Travis CI for continuous integration\n\n--------------------------------------------------------------------------------\n\n## References\n\n* Bemis, G. W. and Murcko, M. A. (1996). The properties of known drugs. 1. molecular frameworks. Journal of Medicinal Chemistry, 39(15), 2887\u20132893.\n* Matlock, M., Zaretzki, J., Swamidass, J. S. (2013). Scaffold network generator: a tool for mining molecular structures. Bioinformatics, 29(20), 2655-2656\n* Schuffenhauer, A., Ertl, P., Roggo, S., Wetzel, S., Koch, M. A., and Waldmann, H. (2007). The scaffold tree visualization of the scaffold universe by hierarchical scaffold classification. Journal of Chemical Information and Modeling, 47(1), 47\u201358. PMID: 17238248.\n* Varin, T., Schuffenhauer, A., Ertl, P., and Renner, S. (2011). Mining for bioactive scaffolds with scaffold networks: Improved compound set enrichment from primary screening data. Journal of Chemical Information and Modeling, 51(7), 1528\u20131538.\n* Varin, T., Gubler, H., Parker, C., Zhang, J., Raman, P., Ertl, P. and Schuffenhauer, A. (2010) Compound Set Enrichment: A Novel Approach to Analysis of Primary HTS Data. Journal of Chemical Information and Modeling, 50(12), 2067-2078.\n* Wetzel, S., Klein, K., Renner, S., Rennerauh, D., Oprea, T. I., Mutzel, P., and Waldmann, H. (2009). Interactive exploration of chemical space with scaffold hunter. Nat Chem Biol, 1875(8), 581\u2013583.\n* Wilkens, J., Janes, J. and Su, A. (2005). HierS:\u2009 Hierarchical Scaffold Clustering Using Topological Chemical Graphs. Journal of Medicinal Chemistry, 48(9), 3182-3193.\n\n---------------------------------------------------------------------------------\n\n## Citation\n\nIf you use this software in your own work please cite our [paper](https://academic.oup.com/bioinformatics/advance-article/doi/10.1093/bioinformatics/btaa219/5814205),\nand the respective papers of the methods used.\n\n```\n@article{10.1093/bioinformatics/btaa219,\n    author = {Scott, Oliver B and Chan, A W Edith},\n    title = \"{ScaffoldGraph: an open-source library for the generation and analysis of molecular scaffold networks and scaffold trees}\",\n    journal = {Bioinformatics},\n    year = {2020},\n    month = {03},\n    issn = {1367-4803},\n    doi = {10.1093/bioinformatics/btaa219},\n    url = {https://doi.org/10.1093/bioinformatics/btaa219},\n    note = {btaa219}\n    eprint = {https://academic.oup.com/bioinformatics/advance-article-pdf/doi/10.1093/bioinformatics/btaa219/32984904/btaa219.pdf},\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Generating Scaffold Networks/Trees",
        "parent_header": [
          "&#9004; ScaffoldGraph  &#9004;",
          "Quick Start",
          "CLI usage"
        ],
        "type": "Text_excerpt",
        "value": "[![Conda](https://anaconda.org/uclcheminformatics/scaffoldgraph/badges/installer/conda.svg)](https://anaconda.org/UCLCheminformatics/scaffoldgraph)\n[![Anaconda](https://anaconda.org/uclcheminformatics/scaffoldgraph/badges/version.svg)](https://anaconda.org/UCLCheminformatics/scaffoldgraph)\n[![Release](https://img.shields.io/pypi/v/scaffoldgraph.svg?style=flat-square)](https://github.com/UCLCheminformatics/ScaffoldGraph/releases)\n[![Build Status](https://travis-ci.org/UCLCheminformatics/ScaffoldGraph.svg?branch=master)](https://travis-ci.org/UCLCheminformatics/ScaffoldGraph)\n[![Contributing](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/uclcheminformatics/scaffoldgraph#contributing)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://github.com/UCLCheminformatics/ScaffoldGraph/blob/master/LICENSE)\n[![DOI](https://img.shields.io/badge/DOI-10.1093%2Fbioinformatics%2Fbtaa219-blue)](https://doi.org/10.1093/bioinformatics/btaa219)\n\n# &#9004; ScaffoldGraph  &#9004;\n\n**ScaffoldGraph** is an open-source cheminformatics library, built using [RDKit](https://www.rdkit.org/) and\n[NetworkX](https://networkx.github.io/), for the generation and analysis of scaffold networks and scaffold trees.\n\n<p align=\"center\">\n    <img width=\"80%\", src=\"https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/img/scaffoldgraph.jpg\" />\n</p>\n\n[Features](https://github.com/UCLCheminformatics/ScaffoldGraph#features) | \n[Installation](https://github.com/UCLCheminformatics/ScaffoldGraph#installation) |\n[Quick-start](https://github.com/UCLCheminformatics/ScaffoldGraph#quick-start) |\n[Examples](https://github.com/UCLCheminformatics/ScaffoldGraph/tree/master/examples) |\n[Contributing](https://github.com/UCLCheminformatics/ScaffoldGraph#contributing) |\n[References](https://github.com/UCLCheminformatics/ScaffoldGraph#references) |\n[Citation](https://github.com/UCLCheminformatics/ScaffoldGraph#citation)\n\n## Features\n\n* **Scaffold Network generation** (Varin, 2011)\n    * Explore scaffold-space through the iterative removal of available rings, generating all possible sub-scaffolds\n      for a set of input molecules. The output is a directed acyclic graph of molecular scaffolds\n* **HierS Network Generation** (Wilkens, 2005)\n    * Explore scaffold-space through the iterative removal of available rings, generating all possible sub-scaffolds \n      without dissecting fused ring-systems\n* **Scaffold Tree generation** (Schuffenhauer, 2007)\n    * Explore scaffold-space through the iterative removal of the least-characteristic ring from a molecular scaffold.\n      The output is a tree of molecular scaffolds\n* **Murcko Fragment generation** (Bemis, 1996)\n    * Generate a set of murcko fragments for a molecule through the iterative removal of available rings.\n* **Compound Set Enrichment** (Varin, 2010, 2011)\n    * Identify active chemical series from primary screening data\n\n### Comparison to existing software\n\n* Scaffold Network Generator (SNG) (Matlock 2013)\n* Scaffold Hunter (SH) (Wetzel, 2009)\n* Scaffold Tree Generator (STG) (SH CLI predecessor)\n\n|                                      | SG          | SNG         | SH            | STG         |\n|--------------------------------------|-------------|-------------|---------------|-------------|\n| Computes Scaffold Networks           | X           | X           | -             | -           |\n| Computes HierS Networks              | X           | -           | -             | -           |\n| Computes Scaffold Trees              | X           | X           | X             | X           |\n| Command Line Interface               | X           | X           | -             | X           |\n| Graphical Interface                  | - `*`       | -           | X             | -           |\n| Accessible Library                   | X           | -           | -             | -           |\n| Results can be computed in parallel  | X           | X           | -             | -           |\n| Benchmark for 150,000 molecules `**` | 15m 25s     | 27m 6s      | -             | -           |\n| Limit on input molecules             | N/A `***`   | 10,000,000  | 200,000 `****`| 10,000,000  |\n\n`*` While ScaffoldGraph has no explicit GUI, it contains functions for interactive scaffoldgraph visualization.\n\n`**` Tests performed on an Intel Core i7-6700 @ 3.4 GHz with 32GB of RAM, without parallel processing. I could not find \nthe code for STG and do not intend to search for it, SNG report that both itself and SH are both faster in the\nbenchmark test.\n\n`***` Limited by available memory\n\n`****` Graphical interface has an upper limit of 2,000 scaffolds\n\n--------------------------------------------------------------------------------\n\n## Installation\n\n- ScaffoldGraph currently supports Python 3.6 and above.\n\n### Install with conda (recommended)\n```\nconda config --add channels conda-forge\nconda install -c uclcheminformatics scaffoldgraph\n```\n### Install with pip\n```\n# Basic installation.\npip install scaffoldgraph\n\n# Install with ipycytoscape.\npip install scaffoldgraph[vis]\n\n# Install with rdkit-pypi (Linux, MacOS).\npip install scaffoldgraph[rdkit]\n\n# Install with all optional packages. \npip install scaffoldgraph[rdkit, vis]\n```\n__Warning__: rdkit cannot be installed with pip, so must be installed through [other means]('https://www.rdkit.org/docs/Install.html')\n\n__Update (17/06/21)__: rdkit can now be installed through the [rdkit-pypi](https://pypi.org/project/rdkit-pypi/) wheels for\nLinux and MacOS, and can be installed alongside ScaffoldGraph optionally (see above instructions).  \n\n__Update (16/11/21)__: Jupyter lab users may also need to follow the extra installation instructions \n[here](https://github.com/cytoscape/ipycytoscape#for-jupyterlab-1x-or-2x) / [here](https://ipycytoscape.readthedocs.io/en/latest/installing.html) \nwhen using the ipycytoscape visualisation utility.\n\n\n--------------------------------------------------------------------------------\n\n## Quick Start\n\n### CLI usage\n\nThe ScaffoldGraph CLI is almost analogous to SNG consisting of a two step process (Generate --> Aggregate).\n\nScaffoldGraph can be invoked from the command-line using the following command:\n\n```console\n$ scaffoldgraph <command> <input-file> <options>\n```\nWhere \"command\" is one of: tree, network, hiers, aggregate or select. \n\n- #### Generating Scaffold Networks/Trees\n    \n    The first step of the process is to generate an intermediate scaffold graph. The generation commands\n    are: network, hiers and tree\n    \n    For example, if a user would like to generate a network from two files:\n    \n    ```console\n    $ ls\n    file_1.sdf  file_2.sdf\n    ```\n    \n    They would first use the commands:\n    \n    ```console\n    $ scaffoldgraph network file_1.sdf file_1.tmp\n    $ scaffoldgraph network file_2.sdf file_2.tmp\n    ```\n    \n    Further options:\n    \n    ```\n    --max-rings, -m : ignore molecules with # rings > N (default: 10)\n    --flatten-isotopes -i : remove specific isotopes\n    --keep-largest-fragment -f : only process the largest disconnected fragment\n    --discharge-and-deradicalize -d : remove charges and radicals from scaffolds \n    ```\n    \n- #### Aggregating Scaffold Graphs\n\n    The second step of the process is aggregating the temporary files into a combined graph representation.\n    \n    ```console\n    $ scaffoldgraph aggregate file_1.tmp file_2.tmp file.tsv\n    ```\n    \n    The final network is now available in 'file.tsv'. Output formats are explained below.\n    \n    Further options:\n    \n    ```\n    --map-mols, -m  <file>   : generate a file mapping molecule IDs to scaffold IDs \n    --map-annotations <file> : generate a file mapping scaffold IDs to annotations\n    --sdf                    : write the output as an SDF file\n    ```\n    \n\n- #### Selecting Subsets\n\n    ScaffoldGraph allows a user to select a subset of a scaffold network or tree using a molecule-based query,\n    i.e. selecting only scaffolds for molecules of interest.\n     \n    This command can only be performed on an aggregated graph (Not SDF).\n    \n    ```console\n    $ scaffoldgraph select <graph input-file> <input molecules> <output-file> <options>\n    ```\n    \n    Options:\n    \n    ```\n    <graph input-file>   : A TSV graph constructed using the aggregate command\n    <input molecules>    : Input query file (SDF, SMILES)\n    <output-file>        : Write results to specified file\n    --sdf                : Write the output as an SDF file\n    ```\n\n- #### Input Formats\n\n    ScaffoldGraphs CLI utility supports input files in the SMILES and SDF formats. Other file formats can be converted\n    using [OpenBabel](http://openbabel.org/wiki/Main_Page).\n\n    - ##### Smiles Format:\n    \n    ScaffoldGraph expects a delimited file where the first column defines a SMILES string, followed by a molecule\n    identifier. If an identifier is not specified the program will use a hash of the molecule as an identifier.\n        \n    Example SMILES file:\n        \n    ```csv\n    CCN1CCc2c(C1)sc(NC(=O)Nc3ccc(Cl)cc3)c2C#N   CHEMBL4116520\n    CC(N1CC(C1)Oc2ccc(Cl)cc2)C3=Nc4c(cnn4C5CCOCC5)C(=O)N3   CHEMBL3990718\n    CN(C\\C=C\\c1ccc(cc1)C(F)(F)F)Cc2coc3ccccc23  CHEMBL4116665\n    N=C1N(C(=Nc2ccccc12)c3ccccc3)c4ccc5OCOc5c4  CHEMBL4116261\n    ...\n    ```\n    \n    - ##### SDF Format:\n    \n    ScaffoldGraph expects an [SDF](https://en.wikipedia.org/wiki/Chemical_table_file) file, where the molecule\n    identifier is specified in the title line. If the title line is blank, then a hash of the molecule\n    will be used as an identifier.\n       \n    Note: selecting subsets of a graph will not be possible if a name is not supplied \n        \n- #### Output Formats\n\n    - ##### TSV Format (default)\n    \n    The generate commands (network, hiers, tree) produce an intermediate tsv containing 4 columns:\n        \n    1) Number of rings (hierarchy)\n    2) Scaffold SMILES\n    3) Sub-scaffold SMILES\n    4) Molecule ID(s) (top-level scaffolds (Murcko))\n\n    The aggregate command produces a tsv containing 4 columns\n        \n    1) Scaffold ID\n    2) Number of rings (hierarchy)\n    3) Scaffold SMILES\n    4) Sub-scaffold IDs\n    \n    - ##### SDF Format\n    \n    An SDF file can be produced by the aggregate and select commands. This SDF is \n    formatted according to the SDF specification with added property fields:\n        \n    1) TITLE field = scaffold ID\n    2) SUBSCAFFOLDS field = list of sub-scaffold IDs\n    3) HIERARCHY field = number of rings\n    4) SMILES field = scaffold canonical SMILES   \n  \n  \n--------------------------------------------------------------------------------\n\n### Library usage\n\nScaffoldGraph makes it simple to construct a graph using the library API.\nThe resultant graphs follow the same API as a NetworkX DiGraph.\n\nSome [example](https://github.com/UCLCheminformatics/ScaffoldGraph/tree/master/examples) \nnotebooks can be found in the 'examples' directory.\n\n```python\nimport scaffoldgraph as sg\n\n# construct a scaffold network from an SDF file\nnetwork = sg.ScaffoldNetwork.from_sdf('my_sdf_file.sdf')\n\n# construct a scaffold tree from a SMILES file\ntree = sg.ScaffoldTree.from_smiles('my_smiles_file.smi')\n\n# construct a scaffold tree from a pandas dataframe\nimport pandas as pd\ndf = pd.read_csv('activity_data.csv')\nnetwork = sg.ScaffoldTree.from_dataframe(\n    df, smiles_column='Smiles', name_column='MolID',\n    data_columns=['pIC50', 'MolWt'], progress=True,\n)\n```\n\n\n--------------------------------------------------------------------------------\n\n\n## Advanced Usage\n\n- **Multi-processing**\n    \n    It is simple to construct a graph from multiple input source in parallel,\n    using the concurrent.futures module and the sg.utils.aggregate function.\n    \n  ```python\n  from concurrent.futures import ProcessPoolExecutor\n  from functools import partial\n  import scaffoldgraph as sg\n  import os\n      \n  directory = './data'\n  sdf_files = [f for f in os.listdir(directory) if f.endswith('.sdf')]\n      \n  func = partial(sg.ScaffoldNetwork.from_sdf, ring_cutoff=10)\n        \n  graphs = []\n  with ProcessPoolExecutor(max_workers=4) as executor:\n      futures = executor.map(func, sdf_files)\n      for future in futures:\n          graphs.append(future)\n        \n  network = sg.utils.aggregate(graphs)\n  ```\n    \n- **Creating custom scaffold prioritisation rules**\n\n    If required a user can define their own rules for prioritizing scaffolds during scaffold tree construction.\n    Rules can be defined by subclassing one of four rule classes:\n    \n    BaseScaffoldFilterRule, ScaffoldFilterRule, ScaffoldMinFilterRule or ScaffoldMaxFilterRule\n    \n    When subclassing a name property must be defined and either a condition, get_property or filter function.\n    Examples are shown below:\n    \n  ```python\n  import scaffoldgraph as sg\n  from scaffoldgraph.prioritization import *\n    \n  \"\"\"\n  Scaffold filter rule (must implement name and condition)\n  The filter will retain all scaffolds which return a True condition\n  \"\"\"\n  \n  class CustomRule01(ScaffoldFilterRule):\n      \"\"\"Do not remove rings with >= 12 atoms if there are smaller rings to remove\"\"\"\n  \n      def condition(self, child, parent):\n          removed_ring = child.rings[parent.removed_ring_idx]\n          return removed_ring.size < 12\n            \n      @property\n      def name(self):\n          return 'custom rule 01'\n          \n  \"\"\"\n  Scaffold min/max filter rule (must implement name and get_property)\n  The filter will retain all scaffolds with the min/max property value\n  \"\"\"\n    \n  class CustomRule02(ScaffoldMinFilterRule):\n      \"\"\"Smaller rings are removed first\"\"\"\n    \n      def get_property(self, child, parent):\n          return child.rings[parent.removed_ring_idx].size\n            \n      @property\n      def name(self):\n          return 'custom rule 02'\n        \n      \n  \"\"\"\n  Scaffold base filter rule (must implement name and filter)\n  The filter method must return a list of filtered parent scaffolds\n  This rule is used when a more complex rule is required, this example\n  defines a tiebreaker rule. Only one scaffold must be left at the end\n  of all filter rules in a rule set\n  \"\"\"\n    \n  class CustomRule03(BaseScaffoldFilterRule):\n      \"\"\"Tie-breaker rule (alphabetical)\"\"\"\n    \n      def filter(self, child, parents):\n          return [sorted(parents, key=lambda p: p.smiles)[0]]\n    \n      @property\n      def name(self):\n          return 'custom rule 03'  \n  ```\n    \n   Custom rules can subsequently be added to a rule set and supplied to the scaffold tree constructor:\n    \n   ```python\n  ruleset = ScaffoldRuleSet(name='custom rules')\n  ruleset.add_rule(CustomRule01())\n  ruleset.add_rule(CustomRule02())\n  ruleset.add_rule(CustomRule03())\n    \n  graph = sg.ScaffoldTree.from_sdf('my_sdf_file.sdf', prioritization_rules=ruleset)\n  ```\n\n--------------------------------------------------------------------------------\n\n## Contributing\n\nContributions to ScaffoldGraph will most likely fall into the following categories:\n\n1. Implementing a new Feature:\n    * New Features that fit into the scope of this package will be accepted. If you are unsure about the \n      idea/design/implementation, feel free to post an issue.\n2. Fixing a Bug:\n    * Bug fixes are welcomed, please send a Pull Request each time a bug is encountered. When sending a Pull\n      Request please provide a clear description of the encountered bug. If unsure feel free to post an issue\n\nPlease send Pull Requests to: \nhttp://github.com/UCLCheminformatics/ScaffoldGraph\n\n### Testing\n\nScaffoldGraphs testing is located under `test/`. Run all tests using:\n\n```\n$ python setup.py test\n```\n\nor run an individual test: `pytest --no-cov tests/core`\n\nWhen contributing new features please include appropriate test files\n\n### Continuous Integration\n\nScaffoldGraph uses Travis CI for continuous integration\n\n--------------------------------------------------------------------------------\n\n## References\n\n* Bemis, G. W. and Murcko, M. A. (1996). The properties of known drugs. 1. molecular frameworks. Journal of Medicinal Chemistry, 39(15), 2887\u20132893.\n* Matlock, M., Zaretzki, J., Swamidass, J. S. (2013). Scaffold network generator: a tool for mining molecular structures. Bioinformatics, 29(20), 2655-2656\n* Schuffenhauer, A., Ertl, P., Roggo, S., Wetzel, S., Koch, M. A., and Waldmann, H. (2007). The scaffold tree visualization of the scaffold universe by hierarchical scaffold classification. Journal of Chemical Information and Modeling, 47(1), 47\u201358. PMID: 17238248.\n* Varin, T., Schuffenhauer, A., Ertl, P., and Renner, S. (2011). Mining for bioactive scaffolds with scaffold networks: Improved compound set enrichment from primary screening data. Journal of Chemical Information and Modeling, 51(7), 1528\u20131538.\n* Varin, T., Gubler, H., Parker, C., Zhang, J., Raman, P., Ertl, P. and Schuffenhauer, A. (2010) Compound Set Enrichment: A Novel Approach to Analysis of Primary HTS Data. Journal of Chemical Information and Modeling, 50(12), 2067-2078.\n* Wetzel, S., Klein, K., Renner, S., Rennerauh, D., Oprea, T. I., Mutzel, P., and Waldmann, H. (2009). Interactive exploration of chemical space with scaffold hunter. Nat Chem Biol, 1875(8), 581\u2013583.\n* Wilkens, J., Janes, J. and Su, A. (2005). HierS:\u2009 Hierarchical Scaffold Clustering Using Topological Chemical Graphs. Journal of Medicinal Chemistry, 48(9), 3182-3193.\n\n---------------------------------------------------------------------------------\n\n## Citation\n\nIf you use this software in your own work please cite our [paper](https://academic.oup.com/bioinformatics/advance-article/doi/10.1093/bioinformatics/btaa219/5814205),\nand the respective papers of the methods used.\n\n```\n@article{10.1093/bioinformatics/btaa219,\n    author = {Scott, Oliver B and Chan, A W Edith},\n    title = \"{ScaffoldGraph: an open-source library for the generation and analysis of molecular scaffold networks and scaffold trees}\",\n    journal = {Bioinformatics},\n    year = {2020},\n    month = {03},\n    issn = {1367-4803},\n    doi = {10.1093/bioinformatics/btaa219},\n    url = {https://doi.org/10.1093/bioinformatics/btaa219},\n    note = {btaa219}\n    eprint = {https://academic.oup.com/bioinformatics/advance-article-pdf/doi/10.1093/bioinformatics/btaa219/32984904/btaa219.pdf},\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Aggregating Scaffold Graphs",
        "parent_header": [
          "&#9004; ScaffoldGraph  &#9004;",
          "Quick Start",
          "CLI usage"
        ],
        "type": "Text_excerpt",
        "value": "[![Conda](https://anaconda.org/uclcheminformatics/scaffoldgraph/badges/installer/conda.svg)](https://anaconda.org/UCLCheminformatics/scaffoldgraph)\n[![Anaconda](https://anaconda.org/uclcheminformatics/scaffoldgraph/badges/version.svg)](https://anaconda.org/UCLCheminformatics/scaffoldgraph)\n[![Release](https://img.shields.io/pypi/v/scaffoldgraph.svg?style=flat-square)](https://github.com/UCLCheminformatics/ScaffoldGraph/releases)\n[![Build Status](https://travis-ci.org/UCLCheminformatics/ScaffoldGraph.svg?branch=master)](https://travis-ci.org/UCLCheminformatics/ScaffoldGraph)\n[![Contributing](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/uclcheminformatics/scaffoldgraph#contributing)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://github.com/UCLCheminformatics/ScaffoldGraph/blob/master/LICENSE)\n[![DOI](https://img.shields.io/badge/DOI-10.1093%2Fbioinformatics%2Fbtaa219-blue)](https://doi.org/10.1093/bioinformatics/btaa219)\n\n# &#9004; ScaffoldGraph  &#9004;\n\n**ScaffoldGraph** is an open-source cheminformatics library, built using [RDKit](https://www.rdkit.org/) and\n[NetworkX](https://networkx.github.io/), for the generation and analysis of scaffold networks and scaffold trees.\n\n<p align=\"center\">\n    <img width=\"80%\", src=\"https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/img/scaffoldgraph.jpg\" />\n</p>\n\n[Features](https://github.com/UCLCheminformatics/ScaffoldGraph#features) | \n[Installation](https://github.com/UCLCheminformatics/ScaffoldGraph#installation) |\n[Quick-start](https://github.com/UCLCheminformatics/ScaffoldGraph#quick-start) |\n[Examples](https://github.com/UCLCheminformatics/ScaffoldGraph/tree/master/examples) |\n[Contributing](https://github.com/UCLCheminformatics/ScaffoldGraph#contributing) |\n[References](https://github.com/UCLCheminformatics/ScaffoldGraph#references) |\n[Citation](https://github.com/UCLCheminformatics/ScaffoldGraph#citation)\n\n## Features\n\n* **Scaffold Network generation** (Varin, 2011)\n    * Explore scaffold-space through the iterative removal of available rings, generating all possible sub-scaffolds\n      for a set of input molecules. The output is a directed acyclic graph of molecular scaffolds\n* **HierS Network Generation** (Wilkens, 2005)\n    * Explore scaffold-space through the iterative removal of available rings, generating all possible sub-scaffolds \n      without dissecting fused ring-systems\n* **Scaffold Tree generation** (Schuffenhauer, 2007)\n    * Explore scaffold-space through the iterative removal of the least-characteristic ring from a molecular scaffold.\n      The output is a tree of molecular scaffolds\n* **Murcko Fragment generation** (Bemis, 1996)\n    * Generate a set of murcko fragments for a molecule through the iterative removal of available rings.\n* **Compound Set Enrichment** (Varin, 2010, 2011)\n    * Identify active chemical series from primary screening data\n\n### Comparison to existing software\n\n* Scaffold Network Generator (SNG) (Matlock 2013)\n* Scaffold Hunter (SH) (Wetzel, 2009)\n* Scaffold Tree Generator (STG) (SH CLI predecessor)\n\n|                                      | SG          | SNG         | SH            | STG         |\n|--------------------------------------|-------------|-------------|---------------|-------------|\n| Computes Scaffold Networks           | X           | X           | -             | -           |\n| Computes HierS Networks              | X           | -           | -             | -           |\n| Computes Scaffold Trees              | X           | X           | X             | X           |\n| Command Line Interface               | X           | X           | -             | X           |\n| Graphical Interface                  | - `*`       | -           | X             | -           |\n| Accessible Library                   | X           | -           | -             | -           |\n| Results can be computed in parallel  | X           | X           | -             | -           |\n| Benchmark for 150,000 molecules `**` | 15m 25s     | 27m 6s      | -             | -           |\n| Limit on input molecules             | N/A `***`   | 10,000,000  | 200,000 `****`| 10,000,000  |\n\n`*` While ScaffoldGraph has no explicit GUI, it contains functions for interactive scaffoldgraph visualization.\n\n`**` Tests performed on an Intel Core i7-6700 @ 3.4 GHz with 32GB of RAM, without parallel processing. I could not find \nthe code for STG and do not intend to search for it, SNG report that both itself and SH are both faster in the\nbenchmark test.\n\n`***` Limited by available memory\n\n`****` Graphical interface has an upper limit of 2,000 scaffolds\n\n--------------------------------------------------------------------------------\n\n## Installation\n\n- ScaffoldGraph currently supports Python 3.6 and above.\n\n### Install with conda (recommended)\n```\nconda config --add channels conda-forge\nconda install -c uclcheminformatics scaffoldgraph\n```\n### Install with pip\n```\n# Basic installation.\npip install scaffoldgraph\n\n# Install with ipycytoscape.\npip install scaffoldgraph[vis]\n\n# Install with rdkit-pypi (Linux, MacOS).\npip install scaffoldgraph[rdkit]\n\n# Install with all optional packages. \npip install scaffoldgraph[rdkit, vis]\n```\n__Warning__: rdkit cannot be installed with pip, so must be installed through [other means]('https://www.rdkit.org/docs/Install.html')\n\n__Update (17/06/21)__: rdkit can now be installed through the [rdkit-pypi](https://pypi.org/project/rdkit-pypi/) wheels for\nLinux and MacOS, and can be installed alongside ScaffoldGraph optionally (see above instructions).  \n\n__Update (16/11/21)__: Jupyter lab users may also need to follow the extra installation instructions \n[here](https://github.com/cytoscape/ipycytoscape#for-jupyterlab-1x-or-2x) / [here](https://ipycytoscape.readthedocs.io/en/latest/installing.html) \nwhen using the ipycytoscape visualisation utility.\n\n\n--------------------------------------------------------------------------------\n\n## Quick Start\n\n### CLI usage\n\nThe ScaffoldGraph CLI is almost analogous to SNG consisting of a two step process (Generate --> Aggregate).\n\nScaffoldGraph can be invoked from the command-line using the following command:\n\n```console\n$ scaffoldgraph <command> <input-file> <options>\n```\nWhere \"command\" is one of: tree, network, hiers, aggregate or select. \n\n- #### Generating Scaffold Networks/Trees\n    \n    The first step of the process is to generate an intermediate scaffold graph. The generation commands\n    are: network, hiers and tree\n    \n    For example, if a user would like to generate a network from two files:\n    \n    ```console\n    $ ls\n    file_1.sdf  file_2.sdf\n    ```\n    \n    They would first use the commands:\n    \n    ```console\n    $ scaffoldgraph network file_1.sdf file_1.tmp\n    $ scaffoldgraph network file_2.sdf file_2.tmp\n    ```\n    \n    Further options:\n    \n    ```\n    --max-rings, -m : ignore molecules with # rings > N (default: 10)\n    --flatten-isotopes -i : remove specific isotopes\n    --keep-largest-fragment -f : only process the largest disconnected fragment\n    --discharge-and-deradicalize -d : remove charges and radicals from scaffolds \n    ```\n    \n- #### Aggregating Scaffold Graphs\n\n    The second step of the process is aggregating the temporary files into a combined graph representation.\n    \n    ```console\n    $ scaffoldgraph aggregate file_1.tmp file_2.tmp file.tsv\n    ```\n    \n    The final network is now available in 'file.tsv'. Output formats are explained below.\n    \n    Further options:\n    \n    ```\n    --map-mols, -m  <file>   : generate a file mapping molecule IDs to scaffold IDs \n    --map-annotations <file> : generate a file mapping scaffold IDs to annotations\n    --sdf                    : write the output as an SDF file\n    ```\n    \n\n- #### Selecting Subsets\n\n    ScaffoldGraph allows a user to select a subset of a scaffold network or tree using a molecule-based query,\n    i.e. selecting only scaffolds for molecules of interest.\n     \n    This command can only be performed on an aggregated graph (Not SDF).\n    \n    ```console\n    $ scaffoldgraph select <graph input-file> <input molecules> <output-file> <options>\n    ```\n    \n    Options:\n    \n    ```\n    <graph input-file>   : A TSV graph constructed using the aggregate command\n    <input molecules>    : Input query file (SDF, SMILES)\n    <output-file>        : Write results to specified file\n    --sdf                : Write the output as an SDF file\n    ```\n\n- #### Input Formats\n\n    ScaffoldGraphs CLI utility supports input files in the SMILES and SDF formats. Other file formats can be converted\n    using [OpenBabel](http://openbabel.org/wiki/Main_Page).\n\n    - ##### Smiles Format:\n    \n    ScaffoldGraph expects a delimited file where the first column defines a SMILES string, followed by a molecule\n    identifier. If an identifier is not specified the program will use a hash of the molecule as an identifier.\n        \n    Example SMILES file:\n        \n    ```csv\n    CCN1CCc2c(C1)sc(NC(=O)Nc3ccc(Cl)cc3)c2C#N   CHEMBL4116520\n    CC(N1CC(C1)Oc2ccc(Cl)cc2)C3=Nc4c(cnn4C5CCOCC5)C(=O)N3   CHEMBL3990718\n    CN(C\\C=C\\c1ccc(cc1)C(F)(F)F)Cc2coc3ccccc23  CHEMBL4116665\n    N=C1N(C(=Nc2ccccc12)c3ccccc3)c4ccc5OCOc5c4  CHEMBL4116261\n    ...\n    ```\n    \n    - ##### SDF Format:\n    \n    ScaffoldGraph expects an [SDF](https://en.wikipedia.org/wiki/Chemical_table_file) file, where the molecule\n    identifier is specified in the title line. If the title line is blank, then a hash of the molecule\n    will be used as an identifier.\n       \n    Note: selecting subsets of a graph will not be possible if a name is not supplied \n        \n- #### Output Formats\n\n    - ##### TSV Format (default)\n    \n    The generate commands (network, hiers, tree) produce an intermediate tsv containing 4 columns:\n        \n    1) Number of rings (hierarchy)\n    2) Scaffold SMILES\n    3) Sub-scaffold SMILES\n    4) Molecule ID(s) (top-level scaffolds (Murcko))\n\n    The aggregate command produces a tsv containing 4 columns\n        \n    1) Scaffold ID\n    2) Number of rings (hierarchy)\n    3) Scaffold SMILES\n    4) Sub-scaffold IDs\n    \n    - ##### SDF Format\n    \n    An SDF file can be produced by the aggregate and select commands. This SDF is \n    formatted according to the SDF specification with added property fields:\n        \n    1) TITLE field = scaffold ID\n    2) SUBSCAFFOLDS field = list of sub-scaffold IDs\n    3) HIERARCHY field = number of rings\n    4) SMILES field = scaffold canonical SMILES   \n  \n  \n--------------------------------------------------------------------------------\n\n### Library usage\n\nScaffoldGraph makes it simple to construct a graph using the library API.\nThe resultant graphs follow the same API as a NetworkX DiGraph.\n\nSome [example](https://github.com/UCLCheminformatics/ScaffoldGraph/tree/master/examples) \nnotebooks can be found in the 'examples' directory.\n\n```python\nimport scaffoldgraph as sg\n\n# construct a scaffold network from an SDF file\nnetwork = sg.ScaffoldNetwork.from_sdf('my_sdf_file.sdf')\n\n# construct a scaffold tree from a SMILES file\ntree = sg.ScaffoldTree.from_smiles('my_smiles_file.smi')\n\n# construct a scaffold tree from a pandas dataframe\nimport pandas as pd\ndf = pd.read_csv('activity_data.csv')\nnetwork = sg.ScaffoldTree.from_dataframe(\n    df, smiles_column='Smiles', name_column='MolID',\n    data_columns=['pIC50', 'MolWt'], progress=True,\n)\n```\n\n\n--------------------------------------------------------------------------------\n\n\n## Advanced Usage\n\n- **Multi-processing**\n    \n    It is simple to construct a graph from multiple input source in parallel,\n    using the concurrent.futures module and the sg.utils.aggregate function.\n    \n  ```python\n  from concurrent.futures import ProcessPoolExecutor\n  from functools import partial\n  import scaffoldgraph as sg\n  import os\n      \n  directory = './data'\n  sdf_files = [f for f in os.listdir(directory) if f.endswith('.sdf')]\n      \n  func = partial(sg.ScaffoldNetwork.from_sdf, ring_cutoff=10)\n        \n  graphs = []\n  with ProcessPoolExecutor(max_workers=4) as executor:\n      futures = executor.map(func, sdf_files)\n      for future in futures:\n          graphs.append(future)\n        \n  network = sg.utils.aggregate(graphs)\n  ```\n    \n- **Creating custom scaffold prioritisation rules**\n\n    If required a user can define their own rules for prioritizing scaffolds during scaffold tree construction.\n    Rules can be defined by subclassing one of four rule classes:\n    \n    BaseScaffoldFilterRule, ScaffoldFilterRule, ScaffoldMinFilterRule or ScaffoldMaxFilterRule\n    \n    When subclassing a name property must be defined and either a condition, get_property or filter function.\n    Examples are shown below:\n    \n  ```python\n  import scaffoldgraph as sg\n  from scaffoldgraph.prioritization import *\n    \n  \"\"\"\n  Scaffold filter rule (must implement name and condition)\n  The filter will retain all scaffolds which return a True condition\n  \"\"\"\n  \n  class CustomRule01(ScaffoldFilterRule):\n      \"\"\"Do not remove rings with >= 12 atoms if there are smaller rings to remove\"\"\"\n  \n      def condition(self, child, parent):\n          removed_ring = child.rings[parent.removed_ring_idx]\n          return removed_ring.size < 12\n            \n      @property\n      def name(self):\n          return 'custom rule 01'\n          \n  \"\"\"\n  Scaffold min/max filter rule (must implement name and get_property)\n  The filter will retain all scaffolds with the min/max property value\n  \"\"\"\n    \n  class CustomRule02(ScaffoldMinFilterRule):\n      \"\"\"Smaller rings are removed first\"\"\"\n    \n      def get_property(self, child, parent):\n          return child.rings[parent.removed_ring_idx].size\n            \n      @property\n      def name(self):\n          return 'custom rule 02'\n        \n      \n  \"\"\"\n  Scaffold base filter rule (must implement name and filter)\n  The filter method must return a list of filtered parent scaffolds\n  This rule is used when a more complex rule is required, this example\n  defines a tiebreaker rule. Only one scaffold must be left at the end\n  of all filter rules in a rule set\n  \"\"\"\n    \n  class CustomRule03(BaseScaffoldFilterRule):\n      \"\"\"Tie-breaker rule (alphabetical)\"\"\"\n    \n      def filter(self, child, parents):\n          return [sorted(parents, key=lambda p: p.smiles)[0]]\n    \n      @property\n      def name(self):\n          return 'custom rule 03'  \n  ```\n    \n   Custom rules can subsequently be added to a rule set and supplied to the scaffold tree constructor:\n    \n   ```python\n  ruleset = ScaffoldRuleSet(name='custom rules')\n  ruleset.add_rule(CustomRule01())\n  ruleset.add_rule(CustomRule02())\n  ruleset.add_rule(CustomRule03())\n    \n  graph = sg.ScaffoldTree.from_sdf('my_sdf_file.sdf', prioritization_rules=ruleset)\n  ```\n\n--------------------------------------------------------------------------------\n\n## Contributing\n\nContributions to ScaffoldGraph will most likely fall into the following categories:\n\n1. Implementing a new Feature:\n    * New Features that fit into the scope of this package will be accepted. If you are unsure about the \n      idea/design/implementation, feel free to post an issue.\n2. Fixing a Bug:\n    * Bug fixes are welcomed, please send a Pull Request each time a bug is encountered. When sending a Pull\n      Request please provide a clear description of the encountered bug. If unsure feel free to post an issue\n\nPlease send Pull Requests to: \nhttp://github.com/UCLCheminformatics/ScaffoldGraph\n\n### Testing\n\nScaffoldGraphs testing is located under `test/`. Run all tests using:\n\n```\n$ python setup.py test\n```\n\nor run an individual test: `pytest --no-cov tests/core`\n\nWhen contributing new features please include appropriate test files\n\n### Continuous Integration\n\nScaffoldGraph uses Travis CI for continuous integration\n\n--------------------------------------------------------------------------------\n\n## References\n\n* Bemis, G. W. and Murcko, M. A. (1996). The properties of known drugs. 1. molecular frameworks. Journal of Medicinal Chemistry, 39(15), 2887\u20132893.\n* Matlock, M., Zaretzki, J., Swamidass, J. S. (2013). Scaffold network generator: a tool for mining molecular structures. Bioinformatics, 29(20), 2655-2656\n* Schuffenhauer, A., Ertl, P., Roggo, S., Wetzel, S., Koch, M. A., and Waldmann, H. (2007). The scaffold tree visualization of the scaffold universe by hierarchical scaffold classification. Journal of Chemical Information and Modeling, 47(1), 47\u201358. PMID: 17238248.\n* Varin, T., Schuffenhauer, A., Ertl, P., and Renner, S. (2011). Mining for bioactive scaffolds with scaffold networks: Improved compound set enrichment from primary screening data. Journal of Chemical Information and Modeling, 51(7), 1528\u20131538.\n* Varin, T., Gubler, H., Parker, C., Zhang, J., Raman, P., Ertl, P. and Schuffenhauer, A. (2010) Compound Set Enrichment: A Novel Approach to Analysis of Primary HTS Data. Journal of Chemical Information and Modeling, 50(12), 2067-2078.\n* Wetzel, S., Klein, K., Renner, S., Rennerauh, D., Oprea, T. I., Mutzel, P., and Waldmann, H. (2009). Interactive exploration of chemical space with scaffold hunter. Nat Chem Biol, 1875(8), 581\u2013583.\n* Wilkens, J., Janes, J. and Su, A. (2005). HierS:\u2009 Hierarchical Scaffold Clustering Using Topological Chemical Graphs. Journal of Medicinal Chemistry, 48(9), 3182-3193.\n\n---------------------------------------------------------------------------------\n\n## Citation\n\nIf you use this software in your own work please cite our [paper](https://academic.oup.com/bioinformatics/advance-article/doi/10.1093/bioinformatics/btaa219/5814205),\nand the respective papers of the methods used.\n\n```\n@article{10.1093/bioinformatics/btaa219,\n    author = {Scott, Oliver B and Chan, A W Edith},\n    title = \"{ScaffoldGraph: an open-source library for the generation and analysis of molecular scaffold networks and scaffold trees}\",\n    journal = {Bioinformatics},\n    year = {2020},\n    month = {03},\n    issn = {1367-4803},\n    doi = {10.1093/bioinformatics/btaa219},\n    url = {https://doi.org/10.1093/bioinformatics/btaa219},\n    note = {btaa219}\n    eprint = {https://academic.oup.com/bioinformatics/advance-article-pdf/doi/10.1093/bioinformatics/btaa219/32984904/btaa219.pdf},\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Selecting Subsets",
        "parent_header": [
          "&#9004; ScaffoldGraph  &#9004;",
          "Quick Start",
          "CLI usage"
        ],
        "type": "Text_excerpt",
        "value": "[![Conda](https://anaconda.org/uclcheminformatics/scaffoldgraph/badges/installer/conda.svg)](https://anaconda.org/UCLCheminformatics/scaffoldgraph)\n[![Anaconda](https://anaconda.org/uclcheminformatics/scaffoldgraph/badges/version.svg)](https://anaconda.org/UCLCheminformatics/scaffoldgraph)\n[![Release](https://img.shields.io/pypi/v/scaffoldgraph.svg?style=flat-square)](https://github.com/UCLCheminformatics/ScaffoldGraph/releases)\n[![Build Status](https://travis-ci.org/UCLCheminformatics/ScaffoldGraph.svg?branch=master)](https://travis-ci.org/UCLCheminformatics/ScaffoldGraph)\n[![Contributing](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/uclcheminformatics/scaffoldgraph#contributing)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://github.com/UCLCheminformatics/ScaffoldGraph/blob/master/LICENSE)\n[![DOI](https://img.shields.io/badge/DOI-10.1093%2Fbioinformatics%2Fbtaa219-blue)](https://doi.org/10.1093/bioinformatics/btaa219)\n\n# &#9004; ScaffoldGraph  &#9004;\n\n**ScaffoldGraph** is an open-source cheminformatics library, built using [RDKit](https://www.rdkit.org/) and\n[NetworkX](https://networkx.github.io/), for the generation and analysis of scaffold networks and scaffold trees.\n\n<p align=\"center\">\n    <img width=\"80%\", src=\"https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/img/scaffoldgraph.jpg\" />\n</p>\n\n[Features](https://github.com/UCLCheminformatics/ScaffoldGraph#features) | \n[Installation](https://github.com/UCLCheminformatics/ScaffoldGraph#installation) |\n[Quick-start](https://github.com/UCLCheminformatics/ScaffoldGraph#quick-start) |\n[Examples](https://github.com/UCLCheminformatics/ScaffoldGraph/tree/master/examples) |\n[Contributing](https://github.com/UCLCheminformatics/ScaffoldGraph#contributing) |\n[References](https://github.com/UCLCheminformatics/ScaffoldGraph#references) |\n[Citation](https://github.com/UCLCheminformatics/ScaffoldGraph#citation)\n\n## Features\n\n* **Scaffold Network generation** (Varin, 2011)\n    * Explore scaffold-space through the iterative removal of available rings, generating all possible sub-scaffolds\n      for a set of input molecules. The output is a directed acyclic graph of molecular scaffolds\n* **HierS Network Generation** (Wilkens, 2005)\n    * Explore scaffold-space through the iterative removal of available rings, generating all possible sub-scaffolds \n      without dissecting fused ring-systems\n* **Scaffold Tree generation** (Schuffenhauer, 2007)\n    * Explore scaffold-space through the iterative removal of the least-characteristic ring from a molecular scaffold.\n      The output is a tree of molecular scaffolds\n* **Murcko Fragment generation** (Bemis, 1996)\n    * Generate a set of murcko fragments for a molecule through the iterative removal of available rings.\n* **Compound Set Enrichment** (Varin, 2010, 2011)\n    * Identify active chemical series from primary screening data\n\n### Comparison to existing software\n\n* Scaffold Network Generator (SNG) (Matlock 2013)\n* Scaffold Hunter (SH) (Wetzel, 2009)\n* Scaffold Tree Generator (STG) (SH CLI predecessor)\n\n|                                      | SG          | SNG         | SH            | STG         |\n|--------------------------------------|-------------|-------------|---------------|-------------|\n| Computes Scaffold Networks           | X           | X           | -             | -           |\n| Computes HierS Networks              | X           | -           | -             | -           |\n| Computes Scaffold Trees              | X           | X           | X             | X           |\n| Command Line Interface               | X           | X           | -             | X           |\n| Graphical Interface                  | - `*`       | -           | X             | -           |\n| Accessible Library                   | X           | -           | -             | -           |\n| Results can be computed in parallel  | X           | X           | -             | -           |\n| Benchmark for 150,000 molecules `**` | 15m 25s     | 27m 6s      | -             | -           |\n| Limit on input molecules             | N/A `***`   | 10,000,000  | 200,000 `****`| 10,000,000  |\n\n`*` While ScaffoldGraph has no explicit GUI, it contains functions for interactive scaffoldgraph visualization.\n\n`**` Tests performed on an Intel Core i7-6700 @ 3.4 GHz with 32GB of RAM, without parallel processing. I could not find \nthe code for STG and do not intend to search for it, SNG report that both itself and SH are both faster in the\nbenchmark test.\n\n`***` Limited by available memory\n\n`****` Graphical interface has an upper limit of 2,000 scaffolds\n\n--------------------------------------------------------------------------------\n\n## Installation\n\n- ScaffoldGraph currently supports Python 3.6 and above.\n\n### Install with conda (recommended)\n```\nconda config --add channels conda-forge\nconda install -c uclcheminformatics scaffoldgraph\n```\n### Install with pip\n```\n# Basic installation.\npip install scaffoldgraph\n\n# Install with ipycytoscape.\npip install scaffoldgraph[vis]\n\n# Install with rdkit-pypi (Linux, MacOS).\npip install scaffoldgraph[rdkit]\n\n# Install with all optional packages. \npip install scaffoldgraph[rdkit, vis]\n```\n__Warning__: rdkit cannot be installed with pip, so must be installed through [other means]('https://www.rdkit.org/docs/Install.html')\n\n__Update (17/06/21)__: rdkit can now be installed through the [rdkit-pypi](https://pypi.org/project/rdkit-pypi/) wheels for\nLinux and MacOS, and can be installed alongside ScaffoldGraph optionally (see above instructions).  \n\n__Update (16/11/21)__: Jupyter lab users may also need to follow the extra installation instructions \n[here](https://github.com/cytoscape/ipycytoscape#for-jupyterlab-1x-or-2x) / [here](https://ipycytoscape.readthedocs.io/en/latest/installing.html) \nwhen using the ipycytoscape visualisation utility.\n\n\n--------------------------------------------------------------------------------\n\n## Quick Start\n\n### CLI usage\n\nThe ScaffoldGraph CLI is almost analogous to SNG consisting of a two step process (Generate --> Aggregate).\n\nScaffoldGraph can be invoked from the command-line using the following command:\n\n```console\n$ scaffoldgraph <command> <input-file> <options>\n```\nWhere \"command\" is one of: tree, network, hiers, aggregate or select. \n\n- #### Generating Scaffold Networks/Trees\n    \n    The first step of the process is to generate an intermediate scaffold graph. The generation commands\n    are: network, hiers and tree\n    \n    For example, if a user would like to generate a network from two files:\n    \n    ```console\n    $ ls\n    file_1.sdf  file_2.sdf\n    ```\n    \n    They would first use the commands:\n    \n    ```console\n    $ scaffoldgraph network file_1.sdf file_1.tmp\n    $ scaffoldgraph network file_2.sdf file_2.tmp\n    ```\n    \n    Further options:\n    \n    ```\n    --max-rings, -m : ignore molecules with # rings > N (default: 10)\n    --flatten-isotopes -i : remove specific isotopes\n    --keep-largest-fragment -f : only process the largest disconnected fragment\n    --discharge-and-deradicalize -d : remove charges and radicals from scaffolds \n    ```\n    \n- #### Aggregating Scaffold Graphs\n\n    The second step of the process is aggregating the temporary files into a combined graph representation.\n    \n    ```console\n    $ scaffoldgraph aggregate file_1.tmp file_2.tmp file.tsv\n    ```\n    \n    The final network is now available in 'file.tsv'. Output formats are explained below.\n    \n    Further options:\n    \n    ```\n    --map-mols, -m  <file>   : generate a file mapping molecule IDs to scaffold IDs \n    --map-annotations <file> : generate a file mapping scaffold IDs to annotations\n    --sdf                    : write the output as an SDF file\n    ```\n    \n\n- #### Selecting Subsets\n\n    ScaffoldGraph allows a user to select a subset of a scaffold network or tree using a molecule-based query,\n    i.e. selecting only scaffolds for molecules of interest.\n     \n    This command can only be performed on an aggregated graph (Not SDF).\n    \n    ```console\n    $ scaffoldgraph select <graph input-file> <input molecules> <output-file> <options>\n    ```\n    \n    Options:\n    \n    ```\n    <graph input-file>   : A TSV graph constructed using the aggregate command\n    <input molecules>    : Input query file (SDF, SMILES)\n    <output-file>        : Write results to specified file\n    --sdf                : Write the output as an SDF file\n    ```\n\n- #### Input Formats\n\n    ScaffoldGraphs CLI utility supports input files in the SMILES and SDF formats. Other file formats can be converted\n    using [OpenBabel](http://openbabel.org/wiki/Main_Page).\n\n    - ##### Smiles Format:\n    \n    ScaffoldGraph expects a delimited file where the first column defines a SMILES string, followed by a molecule\n    identifier. If an identifier is not specified the program will use a hash of the molecule as an identifier.\n        \n    Example SMILES file:\n        \n    ```csv\n    CCN1CCc2c(C1)sc(NC(=O)Nc3ccc(Cl)cc3)c2C#N   CHEMBL4116520\n    CC(N1CC(C1)Oc2ccc(Cl)cc2)C3=Nc4c(cnn4C5CCOCC5)C(=O)N3   CHEMBL3990718\n    CN(C\\C=C\\c1ccc(cc1)C(F)(F)F)Cc2coc3ccccc23  CHEMBL4116665\n    N=C1N(C(=Nc2ccccc12)c3ccccc3)c4ccc5OCOc5c4  CHEMBL4116261\n    ...\n    ```\n    \n    - ##### SDF Format:\n    \n    ScaffoldGraph expects an [SDF](https://en.wikipedia.org/wiki/Chemical_table_file) file, where the molecule\n    identifier is specified in the title line. If the title line is blank, then a hash of the molecule\n    will be used as an identifier.\n       \n    Note: selecting subsets of a graph will not be possible if a name is not supplied \n        \n- #### Output Formats\n\n    - ##### TSV Format (default)\n    \n    The generate commands (network, hiers, tree) produce an intermediate tsv containing 4 columns:\n        \n    1) Number of rings (hierarchy)\n    2) Scaffold SMILES\n    3) Sub-scaffold SMILES\n    4) Molecule ID(s) (top-level scaffolds (Murcko))\n\n    The aggregate command produces a tsv containing 4 columns\n        \n    1) Scaffold ID\n    2) Number of rings (hierarchy)\n    3) Scaffold SMILES\n    4) Sub-scaffold IDs\n    \n    - ##### SDF Format\n    \n    An SDF file can be produced by the aggregate and select commands. This SDF is \n    formatted according to the SDF specification with added property fields:\n        \n    1) TITLE field = scaffold ID\n    2) SUBSCAFFOLDS field = list of sub-scaffold IDs\n    3) HIERARCHY field = number of rings\n    4) SMILES field = scaffold canonical SMILES   \n  \n  \n--------------------------------------------------------------------------------\n\n### Library usage\n\nScaffoldGraph makes it simple to construct a graph using the library API.\nThe resultant graphs follow the same API as a NetworkX DiGraph.\n\nSome [example](https://github.com/UCLCheminformatics/ScaffoldGraph/tree/master/examples) \nnotebooks can be found in the 'examples' directory.\n\n```python\nimport scaffoldgraph as sg\n\n# construct a scaffold network from an SDF file\nnetwork = sg.ScaffoldNetwork.from_sdf('my_sdf_file.sdf')\n\n# construct a scaffold tree from a SMILES file\ntree = sg.ScaffoldTree.from_smiles('my_smiles_file.smi')\n\n# construct a scaffold tree from a pandas dataframe\nimport pandas as pd\ndf = pd.read_csv('activity_data.csv')\nnetwork = sg.ScaffoldTree.from_dataframe(\n    df, smiles_column='Smiles', name_column='MolID',\n    data_columns=['pIC50', 'MolWt'], progress=True,\n)\n```\n\n\n--------------------------------------------------------------------------------\n\n\n## Advanced Usage\n\n- **Multi-processing**\n    \n    It is simple to construct a graph from multiple input source in parallel,\n    using the concurrent.futures module and the sg.utils.aggregate function.\n    \n  ```python\n  from concurrent.futures import ProcessPoolExecutor\n  from functools import partial\n  import scaffoldgraph as sg\n  import os\n      \n  directory = './data'\n  sdf_files = [f for f in os.listdir(directory) if f.endswith('.sdf')]\n      \n  func = partial(sg.ScaffoldNetwork.from_sdf, ring_cutoff=10)\n        \n  graphs = []\n  with ProcessPoolExecutor(max_workers=4) as executor:\n      futures = executor.map(func, sdf_files)\n      for future in futures:\n          graphs.append(future)\n        \n  network = sg.utils.aggregate(graphs)\n  ```\n    \n- **Creating custom scaffold prioritisation rules**\n\n    If required a user can define their own rules for prioritizing scaffolds during scaffold tree construction.\n    Rules can be defined by subclassing one of four rule classes:\n    \n    BaseScaffoldFilterRule, ScaffoldFilterRule, ScaffoldMinFilterRule or ScaffoldMaxFilterRule\n    \n    When subclassing a name property must be defined and either a condition, get_property or filter function.\n    Examples are shown below:\n    \n  ```python\n  import scaffoldgraph as sg\n  from scaffoldgraph.prioritization import *\n    \n  \"\"\"\n  Scaffold filter rule (must implement name and condition)\n  The filter will retain all scaffolds which return a True condition\n  \"\"\"\n  \n  class CustomRule01(ScaffoldFilterRule):\n      \"\"\"Do not remove rings with >= 12 atoms if there are smaller rings to remove\"\"\"\n  \n      def condition(self, child, parent):\n          removed_ring = child.rings[parent.removed_ring_idx]\n          return removed_ring.size < 12\n            \n      @property\n      def name(self):\n          return 'custom rule 01'\n          \n  \"\"\"\n  Scaffold min/max filter rule (must implement name and get_property)\n  The filter will retain all scaffolds with the min/max property value\n  \"\"\"\n    \n  class CustomRule02(ScaffoldMinFilterRule):\n      \"\"\"Smaller rings are removed first\"\"\"\n    \n      def get_property(self, child, parent):\n          return child.rings[parent.removed_ring_idx].size\n            \n      @property\n      def name(self):\n          return 'custom rule 02'\n        \n      \n  \"\"\"\n  Scaffold base filter rule (must implement name and filter)\n  The filter method must return a list of filtered parent scaffolds\n  This rule is used when a more complex rule is required, this example\n  defines a tiebreaker rule. Only one scaffold must be left at the end\n  of all filter rules in a rule set\n  \"\"\"\n    \n  class CustomRule03(BaseScaffoldFilterRule):\n      \"\"\"Tie-breaker rule (alphabetical)\"\"\"\n    \n      def filter(self, child, parents):\n          return [sorted(parents, key=lambda p: p.smiles)[0]]\n    \n      @property\n      def name(self):\n          return 'custom rule 03'  \n  ```\n    \n   Custom rules can subsequently be added to a rule set and supplied to the scaffold tree constructor:\n    \n   ```python\n  ruleset = ScaffoldRuleSet(name='custom rules')\n  ruleset.add_rule(CustomRule01())\n  ruleset.add_rule(CustomRule02())\n  ruleset.add_rule(CustomRule03())\n    \n  graph = sg.ScaffoldTree.from_sdf('my_sdf_file.sdf', prioritization_rules=ruleset)\n  ```\n\n--------------------------------------------------------------------------------\n\n## Contributing\n\nContributions to ScaffoldGraph will most likely fall into the following categories:\n\n1. Implementing a new Feature:\n    * New Features that fit into the scope of this package will be accepted. If you are unsure about the \n      idea/design/implementation, feel free to post an issue.\n2. Fixing a Bug:\n    * Bug fixes are welcomed, please send a Pull Request each time a bug is encountered. When sending a Pull\n      Request please provide a clear description of the encountered bug. If unsure feel free to post an issue\n\nPlease send Pull Requests to: \nhttp://github.com/UCLCheminformatics/ScaffoldGraph\n\n### Testing\n\nScaffoldGraphs testing is located under `test/`. Run all tests using:\n\n```\n$ python setup.py test\n```\n\nor run an individual test: `pytest --no-cov tests/core`\n\nWhen contributing new features please include appropriate test files\n\n### Continuous Integration\n\nScaffoldGraph uses Travis CI for continuous integration\n\n--------------------------------------------------------------------------------\n\n## References\n\n* Bemis, G. W. and Murcko, M. A. (1996). The properties of known drugs. 1. molecular frameworks. Journal of Medicinal Chemistry, 39(15), 2887\u20132893.\n* Matlock, M., Zaretzki, J., Swamidass, J. S. (2013). Scaffold network generator: a tool for mining molecular structures. Bioinformatics, 29(20), 2655-2656\n* Schuffenhauer, A., Ertl, P., Roggo, S., Wetzel, S., Koch, M. A., and Waldmann, H. (2007). The scaffold tree visualization of the scaffold universe by hierarchical scaffold classification. Journal of Chemical Information and Modeling, 47(1), 47\u201358. PMID: 17238248.\n* Varin, T., Schuffenhauer, A., Ertl, P., and Renner, S. (2011). Mining for bioactive scaffolds with scaffold networks: Improved compound set enrichment from primary screening data. Journal of Chemical Information and Modeling, 51(7), 1528\u20131538.\n* Varin, T., Gubler, H., Parker, C., Zhang, J., Raman, P., Ertl, P. and Schuffenhauer, A. (2010) Compound Set Enrichment: A Novel Approach to Analysis of Primary HTS Data. Journal of Chemical Information and Modeling, 50(12), 2067-2078.\n* Wetzel, S., Klein, K., Renner, S., Rennerauh, D., Oprea, T. I., Mutzel, P., and Waldmann, H. (2009). Interactive exploration of chemical space with scaffold hunter. Nat Chem Biol, 1875(8), 581\u2013583.\n* Wilkens, J., Janes, J. and Su, A. (2005). HierS:\u2009 Hierarchical Scaffold Clustering Using Topological Chemical Graphs. Journal of Medicinal Chemistry, 48(9), 3182-3193.\n\n---------------------------------------------------------------------------------\n\n## Citation\n\nIf you use this software in your own work please cite our [paper](https://academic.oup.com/bioinformatics/advance-article/doi/10.1093/bioinformatics/btaa219/5814205),\nand the respective papers of the methods used.\n\n```\n@article{10.1093/bioinformatics/btaa219,\n    author = {Scott, Oliver B and Chan, A W Edith},\n    title = \"{ScaffoldGraph: an open-source library for the generation and analysis of molecular scaffold networks and scaffold trees}\",\n    journal = {Bioinformatics},\n    year = {2020},\n    month = {03},\n    issn = {1367-4803},\n    doi = {10.1093/bioinformatics/btaa219},\n    url = {https://doi.org/10.1093/bioinformatics/btaa219},\n    note = {btaa219}\n    eprint = {https://academic.oup.com/bioinformatics/advance-article-pdf/doi/10.1093/bioinformatics/btaa219/32984904/btaa219.pdf},\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Input Formats",
        "parent_header": [
          "&#9004; ScaffoldGraph  &#9004;",
          "Quick Start",
          "CLI usage"
        ],
        "type": "Text_excerpt",
        "value": "[![Conda](https://anaconda.org/uclcheminformatics/scaffoldgraph/badges/installer/conda.svg)](https://anaconda.org/UCLCheminformatics/scaffoldgraph)\n[![Anaconda](https://anaconda.org/uclcheminformatics/scaffoldgraph/badges/version.svg)](https://anaconda.org/UCLCheminformatics/scaffoldgraph)\n[![Release](https://img.shields.io/pypi/v/scaffoldgraph.svg?style=flat-square)](https://github.com/UCLCheminformatics/ScaffoldGraph/releases)\n[![Build Status](https://travis-ci.org/UCLCheminformatics/ScaffoldGraph.svg?branch=master)](https://travis-ci.org/UCLCheminformatics/ScaffoldGraph)\n[![Contributing](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/uclcheminformatics/scaffoldgraph#contributing)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://github.com/UCLCheminformatics/ScaffoldGraph/blob/master/LICENSE)\n[![DOI](https://img.shields.io/badge/DOI-10.1093%2Fbioinformatics%2Fbtaa219-blue)](https://doi.org/10.1093/bioinformatics/btaa219)\n\n# &#9004; ScaffoldGraph  &#9004;\n\n**ScaffoldGraph** is an open-source cheminformatics library, built using [RDKit](https://www.rdkit.org/) and\n[NetworkX](https://networkx.github.io/), for the generation and analysis of scaffold networks and scaffold trees.\n\n<p align=\"center\">\n    <img width=\"80%\", src=\"https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/img/scaffoldgraph.jpg\" />\n</p>\n\n[Features](https://github.com/UCLCheminformatics/ScaffoldGraph#features) | \n[Installation](https://github.com/UCLCheminformatics/ScaffoldGraph#installation) |\n[Quick-start](https://github.com/UCLCheminformatics/ScaffoldGraph#quick-start) |\n[Examples](https://github.com/UCLCheminformatics/ScaffoldGraph/tree/master/examples) |\n[Contributing](https://github.com/UCLCheminformatics/ScaffoldGraph#contributing) |\n[References](https://github.com/UCLCheminformatics/ScaffoldGraph#references) |\n[Citation](https://github.com/UCLCheminformatics/ScaffoldGraph#citation)\n\n## Features\n\n* **Scaffold Network generation** (Varin, 2011)\n    * Explore scaffold-space through the iterative removal of available rings, generating all possible sub-scaffolds\n      for a set of input molecules. The output is a directed acyclic graph of molecular scaffolds\n* **HierS Network Generation** (Wilkens, 2005)\n    * Explore scaffold-space through the iterative removal of available rings, generating all possible sub-scaffolds \n      without dissecting fused ring-systems\n* **Scaffold Tree generation** (Schuffenhauer, 2007)\n    * Explore scaffold-space through the iterative removal of the least-characteristic ring from a molecular scaffold.\n      The output is a tree of molecular scaffolds\n* **Murcko Fragment generation** (Bemis, 1996)\n    * Generate a set of murcko fragments for a molecule through the iterative removal of available rings.\n* **Compound Set Enrichment** (Varin, 2010, 2011)\n    * Identify active chemical series from primary screening data\n\n### Comparison to existing software\n\n* Scaffold Network Generator (SNG) (Matlock 2013)\n* Scaffold Hunter (SH) (Wetzel, 2009)\n* Scaffold Tree Generator (STG) (SH CLI predecessor)\n\n|                                      | SG          | SNG         | SH            | STG         |\n|--------------------------------------|-------------|-------------|---------------|-------------|\n| Computes Scaffold Networks           | X           | X           | -             | -           |\n| Computes HierS Networks              | X           | -           | -             | -           |\n| Computes Scaffold Trees              | X           | X           | X             | X           |\n| Command Line Interface               | X           | X           | -             | X           |\n| Graphical Interface                  | - `*`       | -           | X             | -           |\n| Accessible Library                   | X           | -           | -             | -           |\n| Results can be computed in parallel  | X           | X           | -             | -           |\n| Benchmark for 150,000 molecules `**` | 15m 25s     | 27m 6s      | -             | -           |\n| Limit on input molecules             | N/A `***`   | 10,000,000  | 200,000 `****`| 10,000,000  |\n\n`*` While ScaffoldGraph has no explicit GUI, it contains functions for interactive scaffoldgraph visualization.\n\n`**` Tests performed on an Intel Core i7-6700 @ 3.4 GHz with 32GB of RAM, without parallel processing. I could not find \nthe code for STG and do not intend to search for it, SNG report that both itself and SH are both faster in the\nbenchmark test.\n\n`***` Limited by available memory\n\n`****` Graphical interface has an upper limit of 2,000 scaffolds\n\n--------------------------------------------------------------------------------\n\n## Installation\n\n- ScaffoldGraph currently supports Python 3.6 and above.\n\n### Install with conda (recommended)\n```\nconda config --add channels conda-forge\nconda install -c uclcheminformatics scaffoldgraph\n```\n### Install with pip\n```\n# Basic installation.\npip install scaffoldgraph\n\n# Install with ipycytoscape.\npip install scaffoldgraph[vis]\n\n# Install with rdkit-pypi (Linux, MacOS).\npip install scaffoldgraph[rdkit]\n\n# Install with all optional packages. \npip install scaffoldgraph[rdkit, vis]\n```\n__Warning__: rdkit cannot be installed with pip, so must be installed through [other means]('https://www.rdkit.org/docs/Install.html')\n\n__Update (17/06/21)__: rdkit can now be installed through the [rdkit-pypi](https://pypi.org/project/rdkit-pypi/) wheels for\nLinux and MacOS, and can be installed alongside ScaffoldGraph optionally (see above instructions).  \n\n__Update (16/11/21)__: Jupyter lab users may also need to follow the extra installation instructions \n[here](https://github.com/cytoscape/ipycytoscape#for-jupyterlab-1x-or-2x) / [here](https://ipycytoscape.readthedocs.io/en/latest/installing.html) \nwhen using the ipycytoscape visualisation utility.\n\n\n--------------------------------------------------------------------------------\n\n## Quick Start\n\n### CLI usage\n\nThe ScaffoldGraph CLI is almost analogous to SNG consisting of a two step process (Generate --> Aggregate).\n\nScaffoldGraph can be invoked from the command-line using the following command:\n\n```console\n$ scaffoldgraph <command> <input-file> <options>\n```\nWhere \"command\" is one of: tree, network, hiers, aggregate or select. \n\n- #### Generating Scaffold Networks/Trees\n    \n    The first step of the process is to generate an intermediate scaffold graph. The generation commands\n    are: network, hiers and tree\n    \n    For example, if a user would like to generate a network from two files:\n    \n    ```console\n    $ ls\n    file_1.sdf  file_2.sdf\n    ```\n    \n    They would first use the commands:\n    \n    ```console\n    $ scaffoldgraph network file_1.sdf file_1.tmp\n    $ scaffoldgraph network file_2.sdf file_2.tmp\n    ```\n    \n    Further options:\n    \n    ```\n    --max-rings, -m : ignore molecules with # rings > N (default: 10)\n    --flatten-isotopes -i : remove specific isotopes\n    --keep-largest-fragment -f : only process the largest disconnected fragment\n    --discharge-and-deradicalize -d : remove charges and radicals from scaffolds \n    ```\n    \n- #### Aggregating Scaffold Graphs\n\n    The second step of the process is aggregating the temporary files into a combined graph representation.\n    \n    ```console\n    $ scaffoldgraph aggregate file_1.tmp file_2.tmp file.tsv\n    ```\n    \n    The final network is now available in 'file.tsv'. Output formats are explained below.\n    \n    Further options:\n    \n    ```\n    --map-mols, -m  <file>   : generate a file mapping molecule IDs to scaffold IDs \n    --map-annotations <file> : generate a file mapping scaffold IDs to annotations\n    --sdf                    : write the output as an SDF file\n    ```\n    \n\n- #### Selecting Subsets\n\n    ScaffoldGraph allows a user to select a subset of a scaffold network or tree using a molecule-based query,\n    i.e. selecting only scaffolds for molecules of interest.\n     \n    This command can only be performed on an aggregated graph (Not SDF).\n    \n    ```console\n    $ scaffoldgraph select <graph input-file> <input molecules> <output-file> <options>\n    ```\n    \n    Options:\n    \n    ```\n    <graph input-file>   : A TSV graph constructed using the aggregate command\n    <input molecules>    : Input query file (SDF, SMILES)\n    <output-file>        : Write results to specified file\n    --sdf                : Write the output as an SDF file\n    ```\n\n- #### Input Formats\n\n    ScaffoldGraphs CLI utility supports input files in the SMILES and SDF formats. Other file formats can be converted\n    using [OpenBabel](http://openbabel.org/wiki/Main_Page).\n\n    - ##### Smiles Format:\n    \n    ScaffoldGraph expects a delimited file where the first column defines a SMILES string, followed by a molecule\n    identifier. If an identifier is not specified the program will use a hash of the molecule as an identifier.\n        \n    Example SMILES file:\n        \n    ```csv\n    CCN1CCc2c(C1)sc(NC(=O)Nc3ccc(Cl)cc3)c2C#N   CHEMBL4116520\n    CC(N1CC(C1)Oc2ccc(Cl)cc2)C3=Nc4c(cnn4C5CCOCC5)C(=O)N3   CHEMBL3990718\n    CN(C\\C=C\\c1ccc(cc1)C(F)(F)F)Cc2coc3ccccc23  CHEMBL4116665\n    N=C1N(C(=Nc2ccccc12)c3ccccc3)c4ccc5OCOc5c4  CHEMBL4116261\n    ...\n    ```\n    \n    - ##### SDF Format:\n    \n    ScaffoldGraph expects an [SDF](https://en.wikipedia.org/wiki/Chemical_table_file) file, where the molecule\n    identifier is specified in the title line. If the title line is blank, then a hash of the molecule\n    will be used as an identifier.\n       \n    Note: selecting subsets of a graph will not be possible if a name is not supplied \n        \n- #### Output Formats\n\n    - ##### TSV Format (default)\n    \n    The generate commands (network, hiers, tree) produce an intermediate tsv containing 4 columns:\n        \n    1) Number of rings (hierarchy)\n    2) Scaffold SMILES\n    3) Sub-scaffold SMILES\n    4) Molecule ID(s) (top-level scaffolds (Murcko))\n\n    The aggregate command produces a tsv containing 4 columns\n        \n    1) Scaffold ID\n    2) Number of rings (hierarchy)\n    3) Scaffold SMILES\n    4) Sub-scaffold IDs\n    \n    - ##### SDF Format\n    \n    An SDF file can be produced by the aggregate and select commands. This SDF is \n    formatted according to the SDF specification with added property fields:\n        \n    1) TITLE field = scaffold ID\n    2) SUBSCAFFOLDS field = list of sub-scaffold IDs\n    3) HIERARCHY field = number of rings\n    4) SMILES field = scaffold canonical SMILES   \n  \n  \n--------------------------------------------------------------------------------\n\n### Library usage\n\nScaffoldGraph makes it simple to construct a graph using the library API.\nThe resultant graphs follow the same API as a NetworkX DiGraph.\n\nSome [example](https://github.com/UCLCheminformatics/ScaffoldGraph/tree/master/examples) \nnotebooks can be found in the 'examples' directory.\n\n```python\nimport scaffoldgraph as sg\n\n# construct a scaffold network from an SDF file\nnetwork = sg.ScaffoldNetwork.from_sdf('my_sdf_file.sdf')\n\n# construct a scaffold tree from a SMILES file\ntree = sg.ScaffoldTree.from_smiles('my_smiles_file.smi')\n\n# construct a scaffold tree from a pandas dataframe\nimport pandas as pd\ndf = pd.read_csv('activity_data.csv')\nnetwork = sg.ScaffoldTree.from_dataframe(\n    df, smiles_column='Smiles', name_column='MolID',\n    data_columns=['pIC50', 'MolWt'], progress=True,\n)\n```\n\n\n--------------------------------------------------------------------------------\n\n\n## Advanced Usage\n\n- **Multi-processing**\n    \n    It is simple to construct a graph from multiple input source in parallel,\n    using the concurrent.futures module and the sg.utils.aggregate function.\n    \n  ```python\n  from concurrent.futures import ProcessPoolExecutor\n  from functools import partial\n  import scaffoldgraph as sg\n  import os\n      \n  directory = './data'\n  sdf_files = [f for f in os.listdir(directory) if f.endswith('.sdf')]\n      \n  func = partial(sg.ScaffoldNetwork.from_sdf, ring_cutoff=10)\n        \n  graphs = []\n  with ProcessPoolExecutor(max_workers=4) as executor:\n      futures = executor.map(func, sdf_files)\n      for future in futures:\n          graphs.append(future)\n        \n  network = sg.utils.aggregate(graphs)\n  ```\n    \n- **Creating custom scaffold prioritisation rules**\n\n    If required a user can define their own rules for prioritizing scaffolds during scaffold tree construction.\n    Rules can be defined by subclassing one of four rule classes:\n    \n    BaseScaffoldFilterRule, ScaffoldFilterRule, ScaffoldMinFilterRule or ScaffoldMaxFilterRule\n    \n    When subclassing a name property must be defined and either a condition, get_property or filter function.\n    Examples are shown below:\n    \n  ```python\n  import scaffoldgraph as sg\n  from scaffoldgraph.prioritization import *\n    \n  \"\"\"\n  Scaffold filter rule (must implement name and condition)\n  The filter will retain all scaffolds which return a True condition\n  \"\"\"\n  \n  class CustomRule01(ScaffoldFilterRule):\n      \"\"\"Do not remove rings with >= 12 atoms if there are smaller rings to remove\"\"\"\n  \n      def condition(self, child, parent):\n          removed_ring = child.rings[parent.removed_ring_idx]\n          return removed_ring.size < 12\n            \n      @property\n      def name(self):\n          return 'custom rule 01'\n          \n  \"\"\"\n  Scaffold min/max filter rule (must implement name and get_property)\n  The filter will retain all scaffolds with the min/max property value\n  \"\"\"\n    \n  class CustomRule02(ScaffoldMinFilterRule):\n      \"\"\"Smaller rings are removed first\"\"\"\n    \n      def get_property(self, child, parent):\n          return child.rings[parent.removed_ring_idx].size\n            \n      @property\n      def name(self):\n          return 'custom rule 02'\n        \n      \n  \"\"\"\n  Scaffold base filter rule (must implement name and filter)\n  The filter method must return a list of filtered parent scaffolds\n  This rule is used when a more complex rule is required, this example\n  defines a tiebreaker rule. Only one scaffold must be left at the end\n  of all filter rules in a rule set\n  \"\"\"\n    \n  class CustomRule03(BaseScaffoldFilterRule):\n      \"\"\"Tie-breaker rule (alphabetical)\"\"\"\n    \n      def filter(self, child, parents):\n          return [sorted(parents, key=lambda p: p.smiles)[0]]\n    \n      @property\n      def name(self):\n          return 'custom rule 03'  \n  ```\n    \n   Custom rules can subsequently be added to a rule set and supplied to the scaffold tree constructor:\n    \n   ```python\n  ruleset = ScaffoldRuleSet(name='custom rules')\n  ruleset.add_rule(CustomRule01())\n  ruleset.add_rule(CustomRule02())\n  ruleset.add_rule(CustomRule03())\n    \n  graph = sg.ScaffoldTree.from_sdf('my_sdf_file.sdf', prioritization_rules=ruleset)\n  ```\n\n--------------------------------------------------------------------------------\n\n## Contributing\n\nContributions to ScaffoldGraph will most likely fall into the following categories:\n\n1. Implementing a new Feature:\n    * New Features that fit into the scope of this package will be accepted. If you are unsure about the \n      idea/design/implementation, feel free to post an issue.\n2. Fixing a Bug:\n    * Bug fixes are welcomed, please send a Pull Request each time a bug is encountered. When sending a Pull\n      Request please provide a clear description of the encountered bug. If unsure feel free to post an issue\n\nPlease send Pull Requests to: \nhttp://github.com/UCLCheminformatics/ScaffoldGraph\n\n### Testing\n\nScaffoldGraphs testing is located under `test/`. Run all tests using:\n\n```\n$ python setup.py test\n```\n\nor run an individual test: `pytest --no-cov tests/core`\n\nWhen contributing new features please include appropriate test files\n\n### Continuous Integration\n\nScaffoldGraph uses Travis CI for continuous integration\n\n--------------------------------------------------------------------------------\n\n## References\n\n* Bemis, G. W. and Murcko, M. A. (1996). The properties of known drugs. 1. molecular frameworks. Journal of Medicinal Chemistry, 39(15), 2887\u20132893.\n* Matlock, M., Zaretzki, J., Swamidass, J. S. (2013). Scaffold network generator: a tool for mining molecular structures. Bioinformatics, 29(20), 2655-2656\n* Schuffenhauer, A., Ertl, P., Roggo, S., Wetzel, S., Koch, M. A., and Waldmann, H. (2007). The scaffold tree visualization of the scaffold universe by hierarchical scaffold classification. Journal of Chemical Information and Modeling, 47(1), 47\u201358. PMID: 17238248.\n* Varin, T., Schuffenhauer, A., Ertl, P., and Renner, S. (2011). Mining for bioactive scaffolds with scaffold networks: Improved compound set enrichment from primary screening data. Journal of Chemical Information and Modeling, 51(7), 1528\u20131538.\n* Varin, T., Gubler, H., Parker, C., Zhang, J., Raman, P., Ertl, P. and Schuffenhauer, A. (2010) Compound Set Enrichment: A Novel Approach to Analysis of Primary HTS Data. Journal of Chemical Information and Modeling, 50(12), 2067-2078.\n* Wetzel, S., Klein, K., Renner, S., Rennerauh, D., Oprea, T. I., Mutzel, P., and Waldmann, H. (2009). Interactive exploration of chemical space with scaffold hunter. Nat Chem Biol, 1875(8), 581\u2013583.\n* Wilkens, J., Janes, J. and Su, A. (2005). HierS:\u2009 Hierarchical Scaffold Clustering Using Topological Chemical Graphs. Journal of Medicinal Chemistry, 48(9), 3182-3193.\n\n---------------------------------------------------------------------------------\n\n## Citation\n\nIf you use this software in your own work please cite our [paper](https://academic.oup.com/bioinformatics/advance-article/doi/10.1093/bioinformatics/btaa219/5814205),\nand the respective papers of the methods used.\n\n```\n@article{10.1093/bioinformatics/btaa219,\n    author = {Scott, Oliver B and Chan, A W Edith},\n    title = \"{ScaffoldGraph: an open-source library for the generation and analysis of molecular scaffold networks and scaffold trees}\",\n    journal = {Bioinformatics},\n    year = {2020},\n    month = {03},\n    issn = {1367-4803},\n    doi = {10.1093/bioinformatics/btaa219},\n    url = {https://doi.org/10.1093/bioinformatics/btaa219},\n    note = {btaa219}\n    eprint = {https://academic.oup.com/bioinformatics/advance-article-pdf/doi/10.1093/bioinformatics/btaa219/32984904/btaa219.pdf},\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Smiles Format:",
        "parent_header": [
          "&#9004; ScaffoldGraph  &#9004;",
          "Quick Start",
          "CLI usage",
          "Input Formats"
        ],
        "type": "Text_excerpt",
        "value": "[![Conda](https://anaconda.org/uclcheminformatics/scaffoldgraph/badges/installer/conda.svg)](https://anaconda.org/UCLCheminformatics/scaffoldgraph)\n[![Anaconda](https://anaconda.org/uclcheminformatics/scaffoldgraph/badges/version.svg)](https://anaconda.org/UCLCheminformatics/scaffoldgraph)\n[![Release](https://img.shields.io/pypi/v/scaffoldgraph.svg?style=flat-square)](https://github.com/UCLCheminformatics/ScaffoldGraph/releases)\n[![Build Status](https://travis-ci.org/UCLCheminformatics/ScaffoldGraph.svg?branch=master)](https://travis-ci.org/UCLCheminformatics/ScaffoldGraph)\n[![Contributing](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/uclcheminformatics/scaffoldgraph#contributing)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://github.com/UCLCheminformatics/ScaffoldGraph/blob/master/LICENSE)\n[![DOI](https://img.shields.io/badge/DOI-10.1093%2Fbioinformatics%2Fbtaa219-blue)](https://doi.org/10.1093/bioinformatics/btaa219)\n\n# &#9004; ScaffoldGraph  &#9004;\n\n**ScaffoldGraph** is an open-source cheminformatics library, built using [RDKit](https://www.rdkit.org/) and\n[NetworkX](https://networkx.github.io/), for the generation and analysis of scaffold networks and scaffold trees.\n\n<p align=\"center\">\n    <img width=\"80%\", src=\"https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/img/scaffoldgraph.jpg\" />\n</p>\n\n[Features](https://github.com/UCLCheminformatics/ScaffoldGraph#features) | \n[Installation](https://github.com/UCLCheminformatics/ScaffoldGraph#installation) |\n[Quick-start](https://github.com/UCLCheminformatics/ScaffoldGraph#quick-start) |\n[Examples](https://github.com/UCLCheminformatics/ScaffoldGraph/tree/master/examples) |\n[Contributing](https://github.com/UCLCheminformatics/ScaffoldGraph#contributing) |\n[References](https://github.com/UCLCheminformatics/ScaffoldGraph#references) |\n[Citation](https://github.com/UCLCheminformatics/ScaffoldGraph#citation)\n\n## Features\n\n* **Scaffold Network generation** (Varin, 2011)\n    * Explore scaffold-space through the iterative removal of available rings, generating all possible sub-scaffolds\n      for a set of input molecules. The output is a directed acyclic graph of molecular scaffolds\n* **HierS Network Generation** (Wilkens, 2005)\n    * Explore scaffold-space through the iterative removal of available rings, generating all possible sub-scaffolds \n      without dissecting fused ring-systems\n* **Scaffold Tree generation** (Schuffenhauer, 2007)\n    * Explore scaffold-space through the iterative removal of the least-characteristic ring from a molecular scaffold.\n      The output is a tree of molecular scaffolds\n* **Murcko Fragment generation** (Bemis, 1996)\n    * Generate a set of murcko fragments for a molecule through the iterative removal of available rings.\n* **Compound Set Enrichment** (Varin, 2010, 2011)\n    * Identify active chemical series from primary screening data\n\n### Comparison to existing software\n\n* Scaffold Network Generator (SNG) (Matlock 2013)\n* Scaffold Hunter (SH) (Wetzel, 2009)\n* Scaffold Tree Generator (STG) (SH CLI predecessor)\n\n|                                      | SG          | SNG         | SH            | STG         |\n|--------------------------------------|-------------|-------------|---------------|-------------|\n| Computes Scaffold Networks           | X           | X           | -             | -           |\n| Computes HierS Networks              | X           | -           | -             | -           |\n| Computes Scaffold Trees              | X           | X           | X             | X           |\n| Command Line Interface               | X           | X           | -             | X           |\n| Graphical Interface                  | - `*`       | -           | X             | -           |\n| Accessible Library                   | X           | -           | -             | -           |\n| Results can be computed in parallel  | X           | X           | -             | -           |\n| Benchmark for 150,000 molecules `**` | 15m 25s     | 27m 6s      | -             | -           |\n| Limit on input molecules             | N/A `***`   | 10,000,000  | 200,000 `****`| 10,000,000  |\n\n`*` While ScaffoldGraph has no explicit GUI, it contains functions for interactive scaffoldgraph visualization.\n\n`**` Tests performed on an Intel Core i7-6700 @ 3.4 GHz with 32GB of RAM, without parallel processing. I could not find \nthe code for STG and do not intend to search for it, SNG report that both itself and SH are both faster in the\nbenchmark test.\n\n`***` Limited by available memory\n\n`****` Graphical interface has an upper limit of 2,000 scaffolds\n\n--------------------------------------------------------------------------------\n\n## Installation\n\n- ScaffoldGraph currently supports Python 3.6 and above.\n\n### Install with conda (recommended)\n```\nconda config --add channels conda-forge\nconda install -c uclcheminformatics scaffoldgraph\n```\n### Install with pip\n```\n# Basic installation.\npip install scaffoldgraph\n\n# Install with ipycytoscape.\npip install scaffoldgraph[vis]\n\n# Install with rdkit-pypi (Linux, MacOS).\npip install scaffoldgraph[rdkit]\n\n# Install with all optional packages. \npip install scaffoldgraph[rdkit, vis]\n```\n__Warning__: rdkit cannot be installed with pip, so must be installed through [other means]('https://www.rdkit.org/docs/Install.html')\n\n__Update (17/06/21)__: rdkit can now be installed through the [rdkit-pypi](https://pypi.org/project/rdkit-pypi/) wheels for\nLinux and MacOS, and can be installed alongside ScaffoldGraph optionally (see above instructions).  \n\n__Update (16/11/21)__: Jupyter lab users may also need to follow the extra installation instructions \n[here](https://github.com/cytoscape/ipycytoscape#for-jupyterlab-1x-or-2x) / [here](https://ipycytoscape.readthedocs.io/en/latest/installing.html) \nwhen using the ipycytoscape visualisation utility.\n\n\n--------------------------------------------------------------------------------\n\n## Quick Start\n\n### CLI usage\n\nThe ScaffoldGraph CLI is almost analogous to SNG consisting of a two step process (Generate --> Aggregate).\n\nScaffoldGraph can be invoked from the command-line using the following command:\n\n```console\n$ scaffoldgraph <command> <input-file> <options>\n```\nWhere \"command\" is one of: tree, network, hiers, aggregate or select. \n\n- #### Generating Scaffold Networks/Trees\n    \n    The first step of the process is to generate an intermediate scaffold graph. The generation commands\n    are: network, hiers and tree\n    \n    For example, if a user would like to generate a network from two files:\n    \n    ```console\n    $ ls\n    file_1.sdf  file_2.sdf\n    ```\n    \n    They would first use the commands:\n    \n    ```console\n    $ scaffoldgraph network file_1.sdf file_1.tmp\n    $ scaffoldgraph network file_2.sdf file_2.tmp\n    ```\n    \n    Further options:\n    \n    ```\n    --max-rings, -m : ignore molecules with # rings > N (default: 10)\n    --flatten-isotopes -i : remove specific isotopes\n    --keep-largest-fragment -f : only process the largest disconnected fragment\n    --discharge-and-deradicalize -d : remove charges and radicals from scaffolds \n    ```\n    \n- #### Aggregating Scaffold Graphs\n\n    The second step of the process is aggregating the temporary files into a combined graph representation.\n    \n    ```console\n    $ scaffoldgraph aggregate file_1.tmp file_2.tmp file.tsv\n    ```\n    \n    The final network is now available in 'file.tsv'. Output formats are explained below.\n    \n    Further options:\n    \n    ```\n    --map-mols, -m  <file>   : generate a file mapping molecule IDs to scaffold IDs \n    --map-annotations <file> : generate a file mapping scaffold IDs to annotations\n    --sdf                    : write the output as an SDF file\n    ```\n    \n\n- #### Selecting Subsets\n\n    ScaffoldGraph allows a user to select a subset of a scaffold network or tree using a molecule-based query,\n    i.e. selecting only scaffolds for molecules of interest.\n     \n    This command can only be performed on an aggregated graph (Not SDF).\n    \n    ```console\n    $ scaffoldgraph select <graph input-file> <input molecules> <output-file> <options>\n    ```\n    \n    Options:\n    \n    ```\n    <graph input-file>   : A TSV graph constructed using the aggregate command\n    <input molecules>    : Input query file (SDF, SMILES)\n    <output-file>        : Write results to specified file\n    --sdf                : Write the output as an SDF file\n    ```\n\n- #### Input Formats\n\n    ScaffoldGraphs CLI utility supports input files in the SMILES and SDF formats. Other file formats can be converted\n    using [OpenBabel](http://openbabel.org/wiki/Main_Page).\n\n    - ##### Smiles Format:\n    \n    ScaffoldGraph expects a delimited file where the first column defines a SMILES string, followed by a molecule\n    identifier. If an identifier is not specified the program will use a hash of the molecule as an identifier.\n        \n    Example SMILES file:\n        \n    ```csv\n    CCN1CCc2c(C1)sc(NC(=O)Nc3ccc(Cl)cc3)c2C#N   CHEMBL4116520\n    CC(N1CC(C1)Oc2ccc(Cl)cc2)C3=Nc4c(cnn4C5CCOCC5)C(=O)N3   CHEMBL3990718\n    CN(C\\C=C\\c1ccc(cc1)C(F)(F)F)Cc2coc3ccccc23  CHEMBL4116665\n    N=C1N(C(=Nc2ccccc12)c3ccccc3)c4ccc5OCOc5c4  CHEMBL4116261\n    ...\n    ```\n    \n    - ##### SDF Format:\n    \n    ScaffoldGraph expects an [SDF](https://en.wikipedia.org/wiki/Chemical_table_file) file, where the molecule\n    identifier is specified in the title line. If the title line is blank, then a hash of the molecule\n    will be used as an identifier.\n       \n    Note: selecting subsets of a graph will not be possible if a name is not supplied \n        \n- #### Output Formats\n\n    - ##### TSV Format (default)\n    \n    The generate commands (network, hiers, tree) produce an intermediate tsv containing 4 columns:\n        \n    1) Number of rings (hierarchy)\n    2) Scaffold SMILES\n    3) Sub-scaffold SMILES\n    4) Molecule ID(s) (top-level scaffolds (Murcko))\n\n    The aggregate command produces a tsv containing 4 columns\n        \n    1) Scaffold ID\n    2) Number of rings (hierarchy)\n    3) Scaffold SMILES\n    4) Sub-scaffold IDs\n    \n    - ##### SDF Format\n    \n    An SDF file can be produced by the aggregate and select commands. This SDF is \n    formatted according to the SDF specification with added property fields:\n        \n    1) TITLE field = scaffold ID\n    2) SUBSCAFFOLDS field = list of sub-scaffold IDs\n    3) HIERARCHY field = number of rings\n    4) SMILES field = scaffold canonical SMILES   \n  \n  \n--------------------------------------------------------------------------------\n\n### Library usage\n\nScaffoldGraph makes it simple to construct a graph using the library API.\nThe resultant graphs follow the same API as a NetworkX DiGraph.\n\nSome [example](https://github.com/UCLCheminformatics/ScaffoldGraph/tree/master/examples) \nnotebooks can be found in the 'examples' directory.\n\n```python\nimport scaffoldgraph as sg\n\n# construct a scaffold network from an SDF file\nnetwork = sg.ScaffoldNetwork.from_sdf('my_sdf_file.sdf')\n\n# construct a scaffold tree from a SMILES file\ntree = sg.ScaffoldTree.from_smiles('my_smiles_file.smi')\n\n# construct a scaffold tree from a pandas dataframe\nimport pandas as pd\ndf = pd.read_csv('activity_data.csv')\nnetwork = sg.ScaffoldTree.from_dataframe(\n    df, smiles_column='Smiles', name_column='MolID',\n    data_columns=['pIC50', 'MolWt'], progress=True,\n)\n```\n\n\n--------------------------------------------------------------------------------\n\n\n## Advanced Usage\n\n- **Multi-processing**\n    \n    It is simple to construct a graph from multiple input source in parallel,\n    using the concurrent.futures module and the sg.utils.aggregate function.\n    \n  ```python\n  from concurrent.futures import ProcessPoolExecutor\n  from functools import partial\n  import scaffoldgraph as sg\n  import os\n      \n  directory = './data'\n  sdf_files = [f for f in os.listdir(directory) if f.endswith('.sdf')]\n      \n  func = partial(sg.ScaffoldNetwork.from_sdf, ring_cutoff=10)\n        \n  graphs = []\n  with ProcessPoolExecutor(max_workers=4) as executor:\n      futures = executor.map(func, sdf_files)\n      for future in futures:\n          graphs.append(future)\n        \n  network = sg.utils.aggregate(graphs)\n  ```\n    \n- **Creating custom scaffold prioritisation rules**\n\n    If required a user can define their own rules for prioritizing scaffolds during scaffold tree construction.\n    Rules can be defined by subclassing one of four rule classes:\n    \n    BaseScaffoldFilterRule, ScaffoldFilterRule, ScaffoldMinFilterRule or ScaffoldMaxFilterRule\n    \n    When subclassing a name property must be defined and either a condition, get_property or filter function.\n    Examples are shown below:\n    \n  ```python\n  import scaffoldgraph as sg\n  from scaffoldgraph.prioritization import *\n    \n  \"\"\"\n  Scaffold filter rule (must implement name and condition)\n  The filter will retain all scaffolds which return a True condition\n  \"\"\"\n  \n  class CustomRule01(ScaffoldFilterRule):\n      \"\"\"Do not remove rings with >= 12 atoms if there are smaller rings to remove\"\"\"\n  \n      def condition(self, child, parent):\n          removed_ring = child.rings[parent.removed_ring_idx]\n          return removed_ring.size < 12\n            \n      @property\n      def name(self):\n          return 'custom rule 01'\n          \n  \"\"\"\n  Scaffold min/max filter rule (must implement name and get_property)\n  The filter will retain all scaffolds with the min/max property value\n  \"\"\"\n    \n  class CustomRule02(ScaffoldMinFilterRule):\n      \"\"\"Smaller rings are removed first\"\"\"\n    \n      def get_property(self, child, parent):\n          return child.rings[parent.removed_ring_idx].size\n            \n      @property\n      def name(self):\n          return 'custom rule 02'\n        \n      \n  \"\"\"\n  Scaffold base filter rule (must implement name and filter)\n  The filter method must return a list of filtered parent scaffolds\n  This rule is used when a more complex rule is required, this example\n  defines a tiebreaker rule. Only one scaffold must be left at the end\n  of all filter rules in a rule set\n  \"\"\"\n    \n  class CustomRule03(BaseScaffoldFilterRule):\n      \"\"\"Tie-breaker rule (alphabetical)\"\"\"\n    \n      def filter(self, child, parents):\n          return [sorted(parents, key=lambda p: p.smiles)[0]]\n    \n      @property\n      def name(self):\n          return 'custom rule 03'  \n  ```\n    \n   Custom rules can subsequently be added to a rule set and supplied to the scaffold tree constructor:\n    \n   ```python\n  ruleset = ScaffoldRuleSet(name='custom rules')\n  ruleset.add_rule(CustomRule01())\n  ruleset.add_rule(CustomRule02())\n  ruleset.add_rule(CustomRule03())\n    \n  graph = sg.ScaffoldTree.from_sdf('my_sdf_file.sdf', prioritization_rules=ruleset)\n  ```\n\n--------------------------------------------------------------------------------\n\n## Contributing\n\nContributions to ScaffoldGraph will most likely fall into the following categories:\n\n1. Implementing a new Feature:\n    * New Features that fit into the scope of this package will be accepted. If you are unsure about the \n      idea/design/implementation, feel free to post an issue.\n2. Fixing a Bug:\n    * Bug fixes are welcomed, please send a Pull Request each time a bug is encountered. When sending a Pull\n      Request please provide a clear description of the encountered bug. If unsure feel free to post an issue\n\nPlease send Pull Requests to: \nhttp://github.com/UCLCheminformatics/ScaffoldGraph\n\n### Testing\n\nScaffoldGraphs testing is located under `test/`. Run all tests using:\n\n```\n$ python setup.py test\n```\n\nor run an individual test: `pytest --no-cov tests/core`\n\nWhen contributing new features please include appropriate test files\n\n### Continuous Integration\n\nScaffoldGraph uses Travis CI for continuous integration\n\n--------------------------------------------------------------------------------\n\n## References\n\n* Bemis, G. W. and Murcko, M. A. (1996). The properties of known drugs. 1. molecular frameworks. Journal of Medicinal Chemistry, 39(15), 2887\u20132893.\n* Matlock, M., Zaretzki, J., Swamidass, J. S. (2013). Scaffold network generator: a tool for mining molecular structures. Bioinformatics, 29(20), 2655-2656\n* Schuffenhauer, A., Ertl, P., Roggo, S., Wetzel, S., Koch, M. A., and Waldmann, H. (2007). The scaffold tree visualization of the scaffold universe by hierarchical scaffold classification. Journal of Chemical Information and Modeling, 47(1), 47\u201358. PMID: 17238248.\n* Varin, T., Schuffenhauer, A., Ertl, P., and Renner, S. (2011). Mining for bioactive scaffolds with scaffold networks: Improved compound set enrichment from primary screening data. Journal of Chemical Information and Modeling, 51(7), 1528\u20131538.\n* Varin, T., Gubler, H., Parker, C., Zhang, J., Raman, P., Ertl, P. and Schuffenhauer, A. (2010) Compound Set Enrichment: A Novel Approach to Analysis of Primary HTS Data. Journal of Chemical Information and Modeling, 50(12), 2067-2078.\n* Wetzel, S., Klein, K., Renner, S., Rennerauh, D., Oprea, T. I., Mutzel, P., and Waldmann, H. (2009). Interactive exploration of chemical space with scaffold hunter. Nat Chem Biol, 1875(8), 581\u2013583.\n* Wilkens, J., Janes, J. and Su, A. (2005). HierS:\u2009 Hierarchical Scaffold Clustering Using Topological Chemical Graphs. Journal of Medicinal Chemistry, 48(9), 3182-3193.\n\n---------------------------------------------------------------------------------\n\n## Citation\n\nIf you use this software in your own work please cite our [paper](https://academic.oup.com/bioinformatics/advance-article/doi/10.1093/bioinformatics/btaa219/5814205),\nand the respective papers of the methods used.\n\n```\n@article{10.1093/bioinformatics/btaa219,\n    author = {Scott, Oliver B and Chan, A W Edith},\n    title = \"{ScaffoldGraph: an open-source library for the generation and analysis of molecular scaffold networks and scaffold trees}\",\n    journal = {Bioinformatics},\n    year = {2020},\n    month = {03},\n    issn = {1367-4803},\n    doi = {10.1093/bioinformatics/btaa219},\n    url = {https://doi.org/10.1093/bioinformatics/btaa219},\n    note = {btaa219}\n    eprint = {https://academic.oup.com/bioinformatics/advance-article-pdf/doi/10.1093/bioinformatics/btaa219/32984904/btaa219.pdf},\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "SDF Format:",
        "parent_header": [
          "&#9004; ScaffoldGraph  &#9004;",
          "Quick Start",
          "CLI usage",
          "Input Formats"
        ],
        "type": "Text_excerpt",
        "value": "[![Conda](https://anaconda.org/uclcheminformatics/scaffoldgraph/badges/installer/conda.svg)](https://anaconda.org/UCLCheminformatics/scaffoldgraph)\n[![Anaconda](https://anaconda.org/uclcheminformatics/scaffoldgraph/badges/version.svg)](https://anaconda.org/UCLCheminformatics/scaffoldgraph)\n[![Release](https://img.shields.io/pypi/v/scaffoldgraph.svg?style=flat-square)](https://github.com/UCLCheminformatics/ScaffoldGraph/releases)\n[![Build Status](https://travis-ci.org/UCLCheminformatics/ScaffoldGraph.svg?branch=master)](https://travis-ci.org/UCLCheminformatics/ScaffoldGraph)\n[![Contributing](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/uclcheminformatics/scaffoldgraph#contributing)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://github.com/UCLCheminformatics/ScaffoldGraph/blob/master/LICENSE)\n[![DOI](https://img.shields.io/badge/DOI-10.1093%2Fbioinformatics%2Fbtaa219-blue)](https://doi.org/10.1093/bioinformatics/btaa219)\n\n# &#9004; ScaffoldGraph  &#9004;\n\n**ScaffoldGraph** is an open-source cheminformatics library, built using [RDKit](https://www.rdkit.org/) and\n[NetworkX](https://networkx.github.io/), for the generation and analysis of scaffold networks and scaffold trees.\n\n<p align=\"center\">\n    <img width=\"80%\", src=\"https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/img/scaffoldgraph.jpg\" />\n</p>\n\n[Features](https://github.com/UCLCheminformatics/ScaffoldGraph#features) | \n[Installation](https://github.com/UCLCheminformatics/ScaffoldGraph#installation) |\n[Quick-start](https://github.com/UCLCheminformatics/ScaffoldGraph#quick-start) |\n[Examples](https://github.com/UCLCheminformatics/ScaffoldGraph/tree/master/examples) |\n[Contributing](https://github.com/UCLCheminformatics/ScaffoldGraph#contributing) |\n[References](https://github.com/UCLCheminformatics/ScaffoldGraph#references) |\n[Citation](https://github.com/UCLCheminformatics/ScaffoldGraph#citation)\n\n## Features\n\n* **Scaffold Network generation** (Varin, 2011)\n    * Explore scaffold-space through the iterative removal of available rings, generating all possible sub-scaffolds\n      for a set of input molecules. The output is a directed acyclic graph of molecular scaffolds\n* **HierS Network Generation** (Wilkens, 2005)\n    * Explore scaffold-space through the iterative removal of available rings, generating all possible sub-scaffolds \n      without dissecting fused ring-systems\n* **Scaffold Tree generation** (Schuffenhauer, 2007)\n    * Explore scaffold-space through the iterative removal of the least-characteristic ring from a molecular scaffold.\n      The output is a tree of molecular scaffolds\n* **Murcko Fragment generation** (Bemis, 1996)\n    * Generate a set of murcko fragments for a molecule through the iterative removal of available rings.\n* **Compound Set Enrichment** (Varin, 2010, 2011)\n    * Identify active chemical series from primary screening data\n\n### Comparison to existing software\n\n* Scaffold Network Generator (SNG) (Matlock 2013)\n* Scaffold Hunter (SH) (Wetzel, 2009)\n* Scaffold Tree Generator (STG) (SH CLI predecessor)\n\n|                                      | SG          | SNG         | SH            | STG         |\n|--------------------------------------|-------------|-------------|---------------|-------------|\n| Computes Scaffold Networks           | X           | X           | -             | -           |\n| Computes HierS Networks              | X           | -           | -             | -           |\n| Computes Scaffold Trees              | X           | X           | X             | X           |\n| Command Line Interface               | X           | X           | -             | X           |\n| Graphical Interface                  | - `*`       | -           | X             | -           |\n| Accessible Library                   | X           | -           | -             | -           |\n| Results can be computed in parallel  | X           | X           | -             | -           |\n| Benchmark for 150,000 molecules `**` | 15m 25s     | 27m 6s      | -             | -           |\n| Limit on input molecules             | N/A `***`   | 10,000,000  | 200,000 `****`| 10,000,000  |\n\n`*` While ScaffoldGraph has no explicit GUI, it contains functions for interactive scaffoldgraph visualization.\n\n`**` Tests performed on an Intel Core i7-6700 @ 3.4 GHz with 32GB of RAM, without parallel processing. I could not find \nthe code for STG and do not intend to search for it, SNG report that both itself and SH are both faster in the\nbenchmark test.\n\n`***` Limited by available memory\n\n`****` Graphical interface has an upper limit of 2,000 scaffolds\n\n--------------------------------------------------------------------------------\n\n## Installation\n\n- ScaffoldGraph currently supports Python 3.6 and above.\n\n### Install with conda (recommended)\n```\nconda config --add channels conda-forge\nconda install -c uclcheminformatics scaffoldgraph\n```\n### Install with pip\n```\n# Basic installation.\npip install scaffoldgraph\n\n# Install with ipycytoscape.\npip install scaffoldgraph[vis]\n\n# Install with rdkit-pypi (Linux, MacOS).\npip install scaffoldgraph[rdkit]\n\n# Install with all optional packages. \npip install scaffoldgraph[rdkit, vis]\n```\n__Warning__: rdkit cannot be installed with pip, so must be installed through [other means]('https://www.rdkit.org/docs/Install.html')\n\n__Update (17/06/21)__: rdkit can now be installed through the [rdkit-pypi](https://pypi.org/project/rdkit-pypi/) wheels for\nLinux and MacOS, and can be installed alongside ScaffoldGraph optionally (see above instructions).  \n\n__Update (16/11/21)__: Jupyter lab users may also need to follow the extra installation instructions \n[here](https://github.com/cytoscape/ipycytoscape#for-jupyterlab-1x-or-2x) / [here](https://ipycytoscape.readthedocs.io/en/latest/installing.html) \nwhen using the ipycytoscape visualisation utility.\n\n\n--------------------------------------------------------------------------------\n\n## Quick Start\n\n### CLI usage\n\nThe ScaffoldGraph CLI is almost analogous to SNG consisting of a two step process (Generate --> Aggregate).\n\nScaffoldGraph can be invoked from the command-line using the following command:\n\n```console\n$ scaffoldgraph <command> <input-file> <options>\n```\nWhere \"command\" is one of: tree, network, hiers, aggregate or select. \n\n- #### Generating Scaffold Networks/Trees\n    \n    The first step of the process is to generate an intermediate scaffold graph. The generation commands\n    are: network, hiers and tree\n    \n    For example, if a user would like to generate a network from two files:\n    \n    ```console\n    $ ls\n    file_1.sdf  file_2.sdf\n    ```\n    \n    They would first use the commands:\n    \n    ```console\n    $ scaffoldgraph network file_1.sdf file_1.tmp\n    $ scaffoldgraph network file_2.sdf file_2.tmp\n    ```\n    \n    Further options:\n    \n    ```\n    --max-rings, -m : ignore molecules with # rings > N (default: 10)\n    --flatten-isotopes -i : remove specific isotopes\n    --keep-largest-fragment -f : only process the largest disconnected fragment\n    --discharge-and-deradicalize -d : remove charges and radicals from scaffolds \n    ```\n    \n- #### Aggregating Scaffold Graphs\n\n    The second step of the process is aggregating the temporary files into a combined graph representation.\n    \n    ```console\n    $ scaffoldgraph aggregate file_1.tmp file_2.tmp file.tsv\n    ```\n    \n    The final network is now available in 'file.tsv'. Output formats are explained below.\n    \n    Further options:\n    \n    ```\n    --map-mols, -m  <file>   : generate a file mapping molecule IDs to scaffold IDs \n    --map-annotations <file> : generate a file mapping scaffold IDs to annotations\n    --sdf                    : write the output as an SDF file\n    ```\n    \n\n- #### Selecting Subsets\n\n    ScaffoldGraph allows a user to select a subset of a scaffold network or tree using a molecule-based query,\n    i.e. selecting only scaffolds for molecules of interest.\n     \n    This command can only be performed on an aggregated graph (Not SDF).\n    \n    ```console\n    $ scaffoldgraph select <graph input-file> <input molecules> <output-file> <options>\n    ```\n    \n    Options:\n    \n    ```\n    <graph input-file>   : A TSV graph constructed using the aggregate command\n    <input molecules>    : Input query file (SDF, SMILES)\n    <output-file>        : Write results to specified file\n    --sdf                : Write the output as an SDF file\n    ```\n\n- #### Input Formats\n\n    ScaffoldGraphs CLI utility supports input files in the SMILES and SDF formats. Other file formats can be converted\n    using [OpenBabel](http://openbabel.org/wiki/Main_Page).\n\n    - ##### Smiles Format:\n    \n    ScaffoldGraph expects a delimited file where the first column defines a SMILES string, followed by a molecule\n    identifier. If an identifier is not specified the program will use a hash of the molecule as an identifier.\n        \n    Example SMILES file:\n        \n    ```csv\n    CCN1CCc2c(C1)sc(NC(=O)Nc3ccc(Cl)cc3)c2C#N   CHEMBL4116520\n    CC(N1CC(C1)Oc2ccc(Cl)cc2)C3=Nc4c(cnn4C5CCOCC5)C(=O)N3   CHEMBL3990718\n    CN(C\\C=C\\c1ccc(cc1)C(F)(F)F)Cc2coc3ccccc23  CHEMBL4116665\n    N=C1N(C(=Nc2ccccc12)c3ccccc3)c4ccc5OCOc5c4  CHEMBL4116261\n    ...\n    ```\n    \n    - ##### SDF Format:\n    \n    ScaffoldGraph expects an [SDF](https://en.wikipedia.org/wiki/Chemical_table_file) file, where the molecule\n    identifier is specified in the title line. If the title line is blank, then a hash of the molecule\n    will be used as an identifier.\n       \n    Note: selecting subsets of a graph will not be possible if a name is not supplied \n        \n- #### Output Formats\n\n    - ##### TSV Format (default)\n    \n    The generate commands (network, hiers, tree) produce an intermediate tsv containing 4 columns:\n        \n    1) Number of rings (hierarchy)\n    2) Scaffold SMILES\n    3) Sub-scaffold SMILES\n    4) Molecule ID(s) (top-level scaffolds (Murcko))\n\n    The aggregate command produces a tsv containing 4 columns\n        \n    1) Scaffold ID\n    2) Number of rings (hierarchy)\n    3) Scaffold SMILES\n    4) Sub-scaffold IDs\n    \n    - ##### SDF Format\n    \n    An SDF file can be produced by the aggregate and select commands. This SDF is \n    formatted according to the SDF specification with added property fields:\n        \n    1) TITLE field = scaffold ID\n    2) SUBSCAFFOLDS field = list of sub-scaffold IDs\n    3) HIERARCHY field = number of rings\n    4) SMILES field = scaffold canonical SMILES   \n  \n  \n--------------------------------------------------------------------------------\n\n### Library usage\n\nScaffoldGraph makes it simple to construct a graph using the library API.\nThe resultant graphs follow the same API as a NetworkX DiGraph.\n\nSome [example](https://github.com/UCLCheminformatics/ScaffoldGraph/tree/master/examples) \nnotebooks can be found in the 'examples' directory.\n\n```python\nimport scaffoldgraph as sg\n\n# construct a scaffold network from an SDF file\nnetwork = sg.ScaffoldNetwork.from_sdf('my_sdf_file.sdf')\n\n# construct a scaffold tree from a SMILES file\ntree = sg.ScaffoldTree.from_smiles('my_smiles_file.smi')\n\n# construct a scaffold tree from a pandas dataframe\nimport pandas as pd\ndf = pd.read_csv('activity_data.csv')\nnetwork = sg.ScaffoldTree.from_dataframe(\n    df, smiles_column='Smiles', name_column='MolID',\n    data_columns=['pIC50', 'MolWt'], progress=True,\n)\n```\n\n\n--------------------------------------------------------------------------------\n\n\n## Advanced Usage\n\n- **Multi-processing**\n    \n    It is simple to construct a graph from multiple input source in parallel,\n    using the concurrent.futures module and the sg.utils.aggregate function.\n    \n  ```python\n  from concurrent.futures import ProcessPoolExecutor\n  from functools import partial\n  import scaffoldgraph as sg\n  import os\n      \n  directory = './data'\n  sdf_files = [f for f in os.listdir(directory) if f.endswith('.sdf')]\n      \n  func = partial(sg.ScaffoldNetwork.from_sdf, ring_cutoff=10)\n        \n  graphs = []\n  with ProcessPoolExecutor(max_workers=4) as executor:\n      futures = executor.map(func, sdf_files)\n      for future in futures:\n          graphs.append(future)\n        \n  network = sg.utils.aggregate(graphs)\n  ```\n    \n- **Creating custom scaffold prioritisation rules**\n\n    If required a user can define their own rules for prioritizing scaffolds during scaffold tree construction.\n    Rules can be defined by subclassing one of four rule classes:\n    \n    BaseScaffoldFilterRule, ScaffoldFilterRule, ScaffoldMinFilterRule or ScaffoldMaxFilterRule\n    \n    When subclassing a name property must be defined and either a condition, get_property or filter function.\n    Examples are shown below:\n    \n  ```python\n  import scaffoldgraph as sg\n  from scaffoldgraph.prioritization import *\n    \n  \"\"\"\n  Scaffold filter rule (must implement name and condition)\n  The filter will retain all scaffolds which return a True condition\n  \"\"\"\n  \n  class CustomRule01(ScaffoldFilterRule):\n      \"\"\"Do not remove rings with >= 12 atoms if there are smaller rings to remove\"\"\"\n  \n      def condition(self, child, parent):\n          removed_ring = child.rings[parent.removed_ring_idx]\n          return removed_ring.size < 12\n            \n      @property\n      def name(self):\n          return 'custom rule 01'\n          \n  \"\"\"\n  Scaffold min/max filter rule (must implement name and get_property)\n  The filter will retain all scaffolds with the min/max property value\n  \"\"\"\n    \n  class CustomRule02(ScaffoldMinFilterRule):\n      \"\"\"Smaller rings are removed first\"\"\"\n    \n      def get_property(self, child, parent):\n          return child.rings[parent.removed_ring_idx].size\n            \n      @property\n      def name(self):\n          return 'custom rule 02'\n        \n      \n  \"\"\"\n  Scaffold base filter rule (must implement name and filter)\n  The filter method must return a list of filtered parent scaffolds\n  This rule is used when a more complex rule is required, this example\n  defines a tiebreaker rule. Only one scaffold must be left at the end\n  of all filter rules in a rule set\n  \"\"\"\n    \n  class CustomRule03(BaseScaffoldFilterRule):\n      \"\"\"Tie-breaker rule (alphabetical)\"\"\"\n    \n      def filter(self, child, parents):\n          return [sorted(parents, key=lambda p: p.smiles)[0]]\n    \n      @property\n      def name(self):\n          return 'custom rule 03'  \n  ```\n    \n   Custom rules can subsequently be added to a rule set and supplied to the scaffold tree constructor:\n    \n   ```python\n  ruleset = ScaffoldRuleSet(name='custom rules')\n  ruleset.add_rule(CustomRule01())\n  ruleset.add_rule(CustomRule02())\n  ruleset.add_rule(CustomRule03())\n    \n  graph = sg.ScaffoldTree.from_sdf('my_sdf_file.sdf', prioritization_rules=ruleset)\n  ```\n\n--------------------------------------------------------------------------------\n\n## Contributing\n\nContributions to ScaffoldGraph will most likely fall into the following categories:\n\n1. Implementing a new Feature:\n    * New Features that fit into the scope of this package will be accepted. If you are unsure about the \n      idea/design/implementation, feel free to post an issue.\n2. Fixing a Bug:\n    * Bug fixes are welcomed, please send a Pull Request each time a bug is encountered. When sending a Pull\n      Request please provide a clear description of the encountered bug. If unsure feel free to post an issue\n\nPlease send Pull Requests to: \nhttp://github.com/UCLCheminformatics/ScaffoldGraph\n\n### Testing\n\nScaffoldGraphs testing is located under `test/`. Run all tests using:\n\n```\n$ python setup.py test\n```\n\nor run an individual test: `pytest --no-cov tests/core`\n\nWhen contributing new features please include appropriate test files\n\n### Continuous Integration\n\nScaffoldGraph uses Travis CI for continuous integration\n\n--------------------------------------------------------------------------------\n\n## References\n\n* Bemis, G. W. and Murcko, M. A. (1996). The properties of known drugs. 1. molecular frameworks. Journal of Medicinal Chemistry, 39(15), 2887\u20132893.\n* Matlock, M., Zaretzki, J., Swamidass, J. S. (2013). Scaffold network generator: a tool for mining molecular structures. Bioinformatics, 29(20), 2655-2656\n* Schuffenhauer, A., Ertl, P., Roggo, S., Wetzel, S., Koch, M. A., and Waldmann, H. (2007). The scaffold tree visualization of the scaffold universe by hierarchical scaffold classification. Journal of Chemical Information and Modeling, 47(1), 47\u201358. PMID: 17238248.\n* Varin, T., Schuffenhauer, A., Ertl, P., and Renner, S. (2011). Mining for bioactive scaffolds with scaffold networks: Improved compound set enrichment from primary screening data. Journal of Chemical Information and Modeling, 51(7), 1528\u20131538.\n* Varin, T., Gubler, H., Parker, C., Zhang, J., Raman, P., Ertl, P. and Schuffenhauer, A. (2010) Compound Set Enrichment: A Novel Approach to Analysis of Primary HTS Data. Journal of Chemical Information and Modeling, 50(12), 2067-2078.\n* Wetzel, S., Klein, K., Renner, S., Rennerauh, D., Oprea, T. I., Mutzel, P., and Waldmann, H. (2009). Interactive exploration of chemical space with scaffold hunter. Nat Chem Biol, 1875(8), 581\u2013583.\n* Wilkens, J., Janes, J. and Su, A. (2005). HierS:\u2009 Hierarchical Scaffold Clustering Using Topological Chemical Graphs. Journal of Medicinal Chemistry, 48(9), 3182-3193.\n\n---------------------------------------------------------------------------------\n\n## Citation\n\nIf you use this software in your own work please cite our [paper](https://academic.oup.com/bioinformatics/advance-article/doi/10.1093/bioinformatics/btaa219/5814205),\nand the respective papers of the methods used.\n\n```\n@article{10.1093/bioinformatics/btaa219,\n    author = {Scott, Oliver B and Chan, A W Edith},\n    title = \"{ScaffoldGraph: an open-source library for the generation and analysis of molecular scaffold networks and scaffold trees}\",\n    journal = {Bioinformatics},\n    year = {2020},\n    month = {03},\n    issn = {1367-4803},\n    doi = {10.1093/bioinformatics/btaa219},\n    url = {https://doi.org/10.1093/bioinformatics/btaa219},\n    note = {btaa219}\n    eprint = {https://academic.oup.com/bioinformatics/advance-article-pdf/doi/10.1093/bioinformatics/btaa219/32984904/btaa219.pdf},\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Output Formats",
        "parent_header": [
          "&#9004; ScaffoldGraph  &#9004;",
          "Quick Start",
          "CLI usage"
        ],
        "type": "Text_excerpt",
        "value": "[![Conda](https://anaconda.org/uclcheminformatics/scaffoldgraph/badges/installer/conda.svg)](https://anaconda.org/UCLCheminformatics/scaffoldgraph)\n[![Anaconda](https://anaconda.org/uclcheminformatics/scaffoldgraph/badges/version.svg)](https://anaconda.org/UCLCheminformatics/scaffoldgraph)\n[![Release](https://img.shields.io/pypi/v/scaffoldgraph.svg?style=flat-square)](https://github.com/UCLCheminformatics/ScaffoldGraph/releases)\n[![Build Status](https://travis-ci.org/UCLCheminformatics/ScaffoldGraph.svg?branch=master)](https://travis-ci.org/UCLCheminformatics/ScaffoldGraph)\n[![Contributing](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/uclcheminformatics/scaffoldgraph#contributing)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://github.com/UCLCheminformatics/ScaffoldGraph/blob/master/LICENSE)\n[![DOI](https://img.shields.io/badge/DOI-10.1093%2Fbioinformatics%2Fbtaa219-blue)](https://doi.org/10.1093/bioinformatics/btaa219)\n\n# &#9004; ScaffoldGraph  &#9004;\n\n**ScaffoldGraph** is an open-source cheminformatics library, built using [RDKit](https://www.rdkit.org/) and\n[NetworkX](https://networkx.github.io/), for the generation and analysis of scaffold networks and scaffold trees.\n\n<p align=\"center\">\n    <img width=\"80%\", src=\"https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/img/scaffoldgraph.jpg\" />\n</p>\n\n[Features](https://github.com/UCLCheminformatics/ScaffoldGraph#features) | \n[Installation](https://github.com/UCLCheminformatics/ScaffoldGraph#installation) |\n[Quick-start](https://github.com/UCLCheminformatics/ScaffoldGraph#quick-start) |\n[Examples](https://github.com/UCLCheminformatics/ScaffoldGraph/tree/master/examples) |\n[Contributing](https://github.com/UCLCheminformatics/ScaffoldGraph#contributing) |\n[References](https://github.com/UCLCheminformatics/ScaffoldGraph#references) |\n[Citation](https://github.com/UCLCheminformatics/ScaffoldGraph#citation)\n\n## Features\n\n* **Scaffold Network generation** (Varin, 2011)\n    * Explore scaffold-space through the iterative removal of available rings, generating all possible sub-scaffolds\n      for a set of input molecules. The output is a directed acyclic graph of molecular scaffolds\n* **HierS Network Generation** (Wilkens, 2005)\n    * Explore scaffold-space through the iterative removal of available rings, generating all possible sub-scaffolds \n      without dissecting fused ring-systems\n* **Scaffold Tree generation** (Schuffenhauer, 2007)\n    * Explore scaffold-space through the iterative removal of the least-characteristic ring from a molecular scaffold.\n      The output is a tree of molecular scaffolds\n* **Murcko Fragment generation** (Bemis, 1996)\n    * Generate a set of murcko fragments for a molecule through the iterative removal of available rings.\n* **Compound Set Enrichment** (Varin, 2010, 2011)\n    * Identify active chemical series from primary screening data\n\n### Comparison to existing software\n\n* Scaffold Network Generator (SNG) (Matlock 2013)\n* Scaffold Hunter (SH) (Wetzel, 2009)\n* Scaffold Tree Generator (STG) (SH CLI predecessor)\n\n|                                      | SG          | SNG         | SH            | STG         |\n|--------------------------------------|-------------|-------------|---------------|-------------|\n| Computes Scaffold Networks           | X           | X           | -             | -           |\n| Computes HierS Networks              | X           | -           | -             | -           |\n| Computes Scaffold Trees              | X           | X           | X             | X           |\n| Command Line Interface               | X           | X           | -             | X           |\n| Graphical Interface                  | - `*`       | -           | X             | -           |\n| Accessible Library                   | X           | -           | -             | -           |\n| Results can be computed in parallel  | X           | X           | -             | -           |\n| Benchmark for 150,000 molecules `**` | 15m 25s     | 27m 6s      | -             | -           |\n| Limit on input molecules             | N/A `***`   | 10,000,000  | 200,000 `****`| 10,000,000  |\n\n`*` While ScaffoldGraph has no explicit GUI, it contains functions for interactive scaffoldgraph visualization.\n\n`**` Tests performed on an Intel Core i7-6700 @ 3.4 GHz with 32GB of RAM, without parallel processing. I could not find \nthe code for STG and do not intend to search for it, SNG report that both itself and SH are both faster in the\nbenchmark test.\n\n`***` Limited by available memory\n\n`****` Graphical interface has an upper limit of 2,000 scaffolds\n\n--------------------------------------------------------------------------------\n\n## Installation\n\n- ScaffoldGraph currently supports Python 3.6 and above.\n\n### Install with conda (recommended)\n```\nconda config --add channels conda-forge\nconda install -c uclcheminformatics scaffoldgraph\n```\n### Install with pip\n```\n# Basic installation.\npip install scaffoldgraph\n\n# Install with ipycytoscape.\npip install scaffoldgraph[vis]\n\n# Install with rdkit-pypi (Linux, MacOS).\npip install scaffoldgraph[rdkit]\n\n# Install with all optional packages. \npip install scaffoldgraph[rdkit, vis]\n```\n__Warning__: rdkit cannot be installed with pip, so must be installed through [other means]('https://www.rdkit.org/docs/Install.html')\n\n__Update (17/06/21)__: rdkit can now be installed through the [rdkit-pypi](https://pypi.org/project/rdkit-pypi/) wheels for\nLinux and MacOS, and can be installed alongside ScaffoldGraph optionally (see above instructions).  \n\n__Update (16/11/21)__: Jupyter lab users may also need to follow the extra installation instructions \n[here](https://github.com/cytoscape/ipycytoscape#for-jupyterlab-1x-or-2x) / [here](https://ipycytoscape.readthedocs.io/en/latest/installing.html) \nwhen using the ipycytoscape visualisation utility.\n\n\n--------------------------------------------------------------------------------\n\n## Quick Start\n\n### CLI usage\n\nThe ScaffoldGraph CLI is almost analogous to SNG consisting of a two step process (Generate --> Aggregate).\n\nScaffoldGraph can be invoked from the command-line using the following command:\n\n```console\n$ scaffoldgraph <command> <input-file> <options>\n```\nWhere \"command\" is one of: tree, network, hiers, aggregate or select. \n\n- #### Generating Scaffold Networks/Trees\n    \n    The first step of the process is to generate an intermediate scaffold graph. The generation commands\n    are: network, hiers and tree\n    \n    For example, if a user would like to generate a network from two files:\n    \n    ```console\n    $ ls\n    file_1.sdf  file_2.sdf\n    ```\n    \n    They would first use the commands:\n    \n    ```console\n    $ scaffoldgraph network file_1.sdf file_1.tmp\n    $ scaffoldgraph network file_2.sdf file_2.tmp\n    ```\n    \n    Further options:\n    \n    ```\n    --max-rings, -m : ignore molecules with # rings > N (default: 10)\n    --flatten-isotopes -i : remove specific isotopes\n    --keep-largest-fragment -f : only process the largest disconnected fragment\n    --discharge-and-deradicalize -d : remove charges and radicals from scaffolds \n    ```\n    \n- #### Aggregating Scaffold Graphs\n\n    The second step of the process is aggregating the temporary files into a combined graph representation.\n    \n    ```console\n    $ scaffoldgraph aggregate file_1.tmp file_2.tmp file.tsv\n    ```\n    \n    The final network is now available in 'file.tsv'. Output formats are explained below.\n    \n    Further options:\n    \n    ```\n    --map-mols, -m  <file>   : generate a file mapping molecule IDs to scaffold IDs \n    --map-annotations <file> : generate a file mapping scaffold IDs to annotations\n    --sdf                    : write the output as an SDF file\n    ```\n    \n\n- #### Selecting Subsets\n\n    ScaffoldGraph allows a user to select a subset of a scaffold network or tree using a molecule-based query,\n    i.e. selecting only scaffolds for molecules of interest.\n     \n    This command can only be performed on an aggregated graph (Not SDF).\n    \n    ```console\n    $ scaffoldgraph select <graph input-file> <input molecules> <output-file> <options>\n    ```\n    \n    Options:\n    \n    ```\n    <graph input-file>   : A TSV graph constructed using the aggregate command\n    <input molecules>    : Input query file (SDF, SMILES)\n    <output-file>        : Write results to specified file\n    --sdf                : Write the output as an SDF file\n    ```\n\n- #### Input Formats\n\n    ScaffoldGraphs CLI utility supports input files in the SMILES and SDF formats. Other file formats can be converted\n    using [OpenBabel](http://openbabel.org/wiki/Main_Page).\n\n    - ##### Smiles Format:\n    \n    ScaffoldGraph expects a delimited file where the first column defines a SMILES string, followed by a molecule\n    identifier. If an identifier is not specified the program will use a hash of the molecule as an identifier.\n        \n    Example SMILES file:\n        \n    ```csv\n    CCN1CCc2c(C1)sc(NC(=O)Nc3ccc(Cl)cc3)c2C#N   CHEMBL4116520\n    CC(N1CC(C1)Oc2ccc(Cl)cc2)C3=Nc4c(cnn4C5CCOCC5)C(=O)N3   CHEMBL3990718\n    CN(C\\C=C\\c1ccc(cc1)C(F)(F)F)Cc2coc3ccccc23  CHEMBL4116665\n    N=C1N(C(=Nc2ccccc12)c3ccccc3)c4ccc5OCOc5c4  CHEMBL4116261\n    ...\n    ```\n    \n    - ##### SDF Format:\n    \n    ScaffoldGraph expects an [SDF](https://en.wikipedia.org/wiki/Chemical_table_file) file, where the molecule\n    identifier is specified in the title line. If the title line is blank, then a hash of the molecule\n    will be used as an identifier.\n       \n    Note: selecting subsets of a graph will not be possible if a name is not supplied \n        \n- #### Output Formats\n\n    - ##### TSV Format (default)\n    \n    The generate commands (network, hiers, tree) produce an intermediate tsv containing 4 columns:\n        \n    1) Number of rings (hierarchy)\n    2) Scaffold SMILES\n    3) Sub-scaffold SMILES\n    4) Molecule ID(s) (top-level scaffolds (Murcko))\n\n    The aggregate command produces a tsv containing 4 columns\n        \n    1) Scaffold ID\n    2) Number of rings (hierarchy)\n    3) Scaffold SMILES\n    4) Sub-scaffold IDs\n    \n    - ##### SDF Format\n    \n    An SDF file can be produced by the aggregate and select commands. This SDF is \n    formatted according to the SDF specification with added property fields:\n        \n    1) TITLE field = scaffold ID\n    2) SUBSCAFFOLDS field = list of sub-scaffold IDs\n    3) HIERARCHY field = number of rings\n    4) SMILES field = scaffold canonical SMILES   \n  \n  \n--------------------------------------------------------------------------------\n\n### Library usage\n\nScaffoldGraph makes it simple to construct a graph using the library API.\nThe resultant graphs follow the same API as a NetworkX DiGraph.\n\nSome [example](https://github.com/UCLCheminformatics/ScaffoldGraph/tree/master/examples) \nnotebooks can be found in the 'examples' directory.\n\n```python\nimport scaffoldgraph as sg\n\n# construct a scaffold network from an SDF file\nnetwork = sg.ScaffoldNetwork.from_sdf('my_sdf_file.sdf')\n\n# construct a scaffold tree from a SMILES file\ntree = sg.ScaffoldTree.from_smiles('my_smiles_file.smi')\n\n# construct a scaffold tree from a pandas dataframe\nimport pandas as pd\ndf = pd.read_csv('activity_data.csv')\nnetwork = sg.ScaffoldTree.from_dataframe(\n    df, smiles_column='Smiles', name_column='MolID',\n    data_columns=['pIC50', 'MolWt'], progress=True,\n)\n```\n\n\n--------------------------------------------------------------------------------\n\n\n## Advanced Usage\n\n- **Multi-processing**\n    \n    It is simple to construct a graph from multiple input source in parallel,\n    using the concurrent.futures module and the sg.utils.aggregate function.\n    \n  ```python\n  from concurrent.futures import ProcessPoolExecutor\n  from functools import partial\n  import scaffoldgraph as sg\n  import os\n      \n  directory = './data'\n  sdf_files = [f for f in os.listdir(directory) if f.endswith('.sdf')]\n      \n  func = partial(sg.ScaffoldNetwork.from_sdf, ring_cutoff=10)\n        \n  graphs = []\n  with ProcessPoolExecutor(max_workers=4) as executor:\n      futures = executor.map(func, sdf_files)\n      for future in futures:\n          graphs.append(future)\n        \n  network = sg.utils.aggregate(graphs)\n  ```\n    \n- **Creating custom scaffold prioritisation rules**\n\n    If required a user can define their own rules for prioritizing scaffolds during scaffold tree construction.\n    Rules can be defined by subclassing one of four rule classes:\n    \n    BaseScaffoldFilterRule, ScaffoldFilterRule, ScaffoldMinFilterRule or ScaffoldMaxFilterRule\n    \n    When subclassing a name property must be defined and either a condition, get_property or filter function.\n    Examples are shown below:\n    \n  ```python\n  import scaffoldgraph as sg\n  from scaffoldgraph.prioritization import *\n    \n  \"\"\"\n  Scaffold filter rule (must implement name and condition)\n  The filter will retain all scaffolds which return a True condition\n  \"\"\"\n  \n  class CustomRule01(ScaffoldFilterRule):\n      \"\"\"Do not remove rings with >= 12 atoms if there are smaller rings to remove\"\"\"\n  \n      def condition(self, child, parent):\n          removed_ring = child.rings[parent.removed_ring_idx]\n          return removed_ring.size < 12\n            \n      @property\n      def name(self):\n          return 'custom rule 01'\n          \n  \"\"\"\n  Scaffold min/max filter rule (must implement name and get_property)\n  The filter will retain all scaffolds with the min/max property value\n  \"\"\"\n    \n  class CustomRule02(ScaffoldMinFilterRule):\n      \"\"\"Smaller rings are removed first\"\"\"\n    \n      def get_property(self, child, parent):\n          return child.rings[parent.removed_ring_idx].size\n            \n      @property\n      def name(self):\n          return 'custom rule 02'\n        \n      \n  \"\"\"\n  Scaffold base filter rule (must implement name and filter)\n  The filter method must return a list of filtered parent scaffolds\n  This rule is used when a more complex rule is required, this example\n  defines a tiebreaker rule. Only one scaffold must be left at the end\n  of all filter rules in a rule set\n  \"\"\"\n    \n  class CustomRule03(BaseScaffoldFilterRule):\n      \"\"\"Tie-breaker rule (alphabetical)\"\"\"\n    \n      def filter(self, child, parents):\n          return [sorted(parents, key=lambda p: p.smiles)[0]]\n    \n      @property\n      def name(self):\n          return 'custom rule 03'  \n  ```\n    \n   Custom rules can subsequently be added to a rule set and supplied to the scaffold tree constructor:\n    \n   ```python\n  ruleset = ScaffoldRuleSet(name='custom rules')\n  ruleset.add_rule(CustomRule01())\n  ruleset.add_rule(CustomRule02())\n  ruleset.add_rule(CustomRule03())\n    \n  graph = sg.ScaffoldTree.from_sdf('my_sdf_file.sdf', prioritization_rules=ruleset)\n  ```\n\n--------------------------------------------------------------------------------\n\n## Contributing\n\nContributions to ScaffoldGraph will most likely fall into the following categories:\n\n1. Implementing a new Feature:\n    * New Features that fit into the scope of this package will be accepted. If you are unsure about the \n      idea/design/implementation, feel free to post an issue.\n2. Fixing a Bug:\n    * Bug fixes are welcomed, please send a Pull Request each time a bug is encountered. When sending a Pull\n      Request please provide a clear description of the encountered bug. If unsure feel free to post an issue\n\nPlease send Pull Requests to: \nhttp://github.com/UCLCheminformatics/ScaffoldGraph\n\n### Testing\n\nScaffoldGraphs testing is located under `test/`. Run all tests using:\n\n```\n$ python setup.py test\n```\n\nor run an individual test: `pytest --no-cov tests/core`\n\nWhen contributing new features please include appropriate test files\n\n### Continuous Integration\n\nScaffoldGraph uses Travis CI for continuous integration\n\n--------------------------------------------------------------------------------\n\n## References\n\n* Bemis, G. W. and Murcko, M. A. (1996). The properties of known drugs. 1. molecular frameworks. Journal of Medicinal Chemistry, 39(15), 2887\u20132893.\n* Matlock, M., Zaretzki, J., Swamidass, J. S. (2013). Scaffold network generator: a tool for mining molecular structures. Bioinformatics, 29(20), 2655-2656\n* Schuffenhauer, A., Ertl, P., Roggo, S., Wetzel, S., Koch, M. A., and Waldmann, H. (2007). The scaffold tree visualization of the scaffold universe by hierarchical scaffold classification. Journal of Chemical Information and Modeling, 47(1), 47\u201358. PMID: 17238248.\n* Varin, T., Schuffenhauer, A., Ertl, P., and Renner, S. (2011). Mining for bioactive scaffolds with scaffold networks: Improved compound set enrichment from primary screening data. Journal of Chemical Information and Modeling, 51(7), 1528\u20131538.\n* Varin, T., Gubler, H., Parker, C., Zhang, J., Raman, P., Ertl, P. and Schuffenhauer, A. (2010) Compound Set Enrichment: A Novel Approach to Analysis of Primary HTS Data. Journal of Chemical Information and Modeling, 50(12), 2067-2078.\n* Wetzel, S., Klein, K., Renner, S., Rennerauh, D., Oprea, T. I., Mutzel, P., and Waldmann, H. (2009). Interactive exploration of chemical space with scaffold hunter. Nat Chem Biol, 1875(8), 581\u2013583.\n* Wilkens, J., Janes, J. and Su, A. (2005). HierS:\u2009 Hierarchical Scaffold Clustering Using Topological Chemical Graphs. Journal of Medicinal Chemistry, 48(9), 3182-3193.\n\n---------------------------------------------------------------------------------\n\n## Citation\n\nIf you use this software in your own work please cite our [paper](https://academic.oup.com/bioinformatics/advance-article/doi/10.1093/bioinformatics/btaa219/5814205),\nand the respective papers of the methods used.\n\n```\n@article{10.1093/bioinformatics/btaa219,\n    author = {Scott, Oliver B and Chan, A W Edith},\n    title = \"{ScaffoldGraph: an open-source library for the generation and analysis of molecular scaffold networks and scaffold trees}\",\n    journal = {Bioinformatics},\n    year = {2020},\n    month = {03},\n    issn = {1367-4803},\n    doi = {10.1093/bioinformatics/btaa219},\n    url = {https://doi.org/10.1093/bioinformatics/btaa219},\n    note = {btaa219}\n    eprint = {https://academic.oup.com/bioinformatics/advance-article-pdf/doi/10.1093/bioinformatics/btaa219/32984904/btaa219.pdf},\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "TSV Format (default)",
        "parent_header": [
          "&#9004; ScaffoldGraph  &#9004;",
          "Quick Start",
          "CLI usage",
          "Output Formats"
        ],
        "type": "Text_excerpt",
        "value": "[![Conda](https://anaconda.org/uclcheminformatics/scaffoldgraph/badges/installer/conda.svg)](https://anaconda.org/UCLCheminformatics/scaffoldgraph)\n[![Anaconda](https://anaconda.org/uclcheminformatics/scaffoldgraph/badges/version.svg)](https://anaconda.org/UCLCheminformatics/scaffoldgraph)\n[![Release](https://img.shields.io/pypi/v/scaffoldgraph.svg?style=flat-square)](https://github.com/UCLCheminformatics/ScaffoldGraph/releases)\n[![Build Status](https://travis-ci.org/UCLCheminformatics/ScaffoldGraph.svg?branch=master)](https://travis-ci.org/UCLCheminformatics/ScaffoldGraph)\n[![Contributing](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/uclcheminformatics/scaffoldgraph#contributing)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://github.com/UCLCheminformatics/ScaffoldGraph/blob/master/LICENSE)\n[![DOI](https://img.shields.io/badge/DOI-10.1093%2Fbioinformatics%2Fbtaa219-blue)](https://doi.org/10.1093/bioinformatics/btaa219)\n\n# &#9004; ScaffoldGraph  &#9004;\n\n**ScaffoldGraph** is an open-source cheminformatics library, built using [RDKit](https://www.rdkit.org/) and\n[NetworkX](https://networkx.github.io/), for the generation and analysis of scaffold networks and scaffold trees.\n\n<p align=\"center\">\n    <img width=\"80%\", src=\"https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/img/scaffoldgraph.jpg\" />\n</p>\n\n[Features](https://github.com/UCLCheminformatics/ScaffoldGraph#features) | \n[Installation](https://github.com/UCLCheminformatics/ScaffoldGraph#installation) |\n[Quick-start](https://github.com/UCLCheminformatics/ScaffoldGraph#quick-start) |\n[Examples](https://github.com/UCLCheminformatics/ScaffoldGraph/tree/master/examples) |\n[Contributing](https://github.com/UCLCheminformatics/ScaffoldGraph#contributing) |\n[References](https://github.com/UCLCheminformatics/ScaffoldGraph#references) |\n[Citation](https://github.com/UCLCheminformatics/ScaffoldGraph#citation)\n\n## Features\n\n* **Scaffold Network generation** (Varin, 2011)\n    * Explore scaffold-space through the iterative removal of available rings, generating all possible sub-scaffolds\n      for a set of input molecules. The output is a directed acyclic graph of molecular scaffolds\n* **HierS Network Generation** (Wilkens, 2005)\n    * Explore scaffold-space through the iterative removal of available rings, generating all possible sub-scaffolds \n      without dissecting fused ring-systems\n* **Scaffold Tree generation** (Schuffenhauer, 2007)\n    * Explore scaffold-space through the iterative removal of the least-characteristic ring from a molecular scaffold.\n      The output is a tree of molecular scaffolds\n* **Murcko Fragment generation** (Bemis, 1996)\n    * Generate a set of murcko fragments for a molecule through the iterative removal of available rings.\n* **Compound Set Enrichment** (Varin, 2010, 2011)\n    * Identify active chemical series from primary screening data\n\n### Comparison to existing software\n\n* Scaffold Network Generator (SNG) (Matlock 2013)\n* Scaffold Hunter (SH) (Wetzel, 2009)\n* Scaffold Tree Generator (STG) (SH CLI predecessor)\n\n|                                      | SG          | SNG         | SH            | STG         |\n|--------------------------------------|-------------|-------------|---------------|-------------|\n| Computes Scaffold Networks           | X           | X           | -             | -           |\n| Computes HierS Networks              | X           | -           | -             | -           |\n| Computes Scaffold Trees              | X           | X           | X             | X           |\n| Command Line Interface               | X           | X           | -             | X           |\n| Graphical Interface                  | - `*`       | -           | X             | -           |\n| Accessible Library                   | X           | -           | -             | -           |\n| Results can be computed in parallel  | X           | X           | -             | -           |\n| Benchmark for 150,000 molecules `**` | 15m 25s     | 27m 6s      | -             | -           |\n| Limit on input molecules             | N/A `***`   | 10,000,000  | 200,000 `****`| 10,000,000  |\n\n`*` While ScaffoldGraph has no explicit GUI, it contains functions for interactive scaffoldgraph visualization.\n\n`**` Tests performed on an Intel Core i7-6700 @ 3.4 GHz with 32GB of RAM, without parallel processing. I could not find \nthe code for STG and do not intend to search for it, SNG report that both itself and SH are both faster in the\nbenchmark test.\n\n`***` Limited by available memory\n\n`****` Graphical interface has an upper limit of 2,000 scaffolds\n\n--------------------------------------------------------------------------------\n\n## Installation\n\n- ScaffoldGraph currently supports Python 3.6 and above.\n\n### Install with conda (recommended)\n```\nconda config --add channels conda-forge\nconda install -c uclcheminformatics scaffoldgraph\n```\n### Install with pip\n```\n# Basic installation.\npip install scaffoldgraph\n\n# Install with ipycytoscape.\npip install scaffoldgraph[vis]\n\n# Install with rdkit-pypi (Linux, MacOS).\npip install scaffoldgraph[rdkit]\n\n# Install with all optional packages. \npip install scaffoldgraph[rdkit, vis]\n```\n__Warning__: rdkit cannot be installed with pip, so must be installed through [other means]('https://www.rdkit.org/docs/Install.html')\n\n__Update (17/06/21)__: rdkit can now be installed through the [rdkit-pypi](https://pypi.org/project/rdkit-pypi/) wheels for\nLinux and MacOS, and can be installed alongside ScaffoldGraph optionally (see above instructions).  \n\n__Update (16/11/21)__: Jupyter lab users may also need to follow the extra installation instructions \n[here](https://github.com/cytoscape/ipycytoscape#for-jupyterlab-1x-or-2x) / [here](https://ipycytoscape.readthedocs.io/en/latest/installing.html) \nwhen using the ipycytoscape visualisation utility.\n\n\n--------------------------------------------------------------------------------\n\n## Quick Start\n\n### CLI usage\n\nThe ScaffoldGraph CLI is almost analogous to SNG consisting of a two step process (Generate --> Aggregate).\n\nScaffoldGraph can be invoked from the command-line using the following command:\n\n```console\n$ scaffoldgraph <command> <input-file> <options>\n```\nWhere \"command\" is one of: tree, network, hiers, aggregate or select. \n\n- #### Generating Scaffold Networks/Trees\n    \n    The first step of the process is to generate an intermediate scaffold graph. The generation commands\n    are: network, hiers and tree\n    \n    For example, if a user would like to generate a network from two files:\n    \n    ```console\n    $ ls\n    file_1.sdf  file_2.sdf\n    ```\n    \n    They would first use the commands:\n    \n    ```console\n    $ scaffoldgraph network file_1.sdf file_1.tmp\n    $ scaffoldgraph network file_2.sdf file_2.tmp\n    ```\n    \n    Further options:\n    \n    ```\n    --max-rings, -m : ignore molecules with # rings > N (default: 10)\n    --flatten-isotopes -i : remove specific isotopes\n    --keep-largest-fragment -f : only process the largest disconnected fragment\n    --discharge-and-deradicalize -d : remove charges and radicals from scaffolds \n    ```\n    \n- #### Aggregating Scaffold Graphs\n\n    The second step of the process is aggregating the temporary files into a combined graph representation.\n    \n    ```console\n    $ scaffoldgraph aggregate file_1.tmp file_2.tmp file.tsv\n    ```\n    \n    The final network is now available in 'file.tsv'. Output formats are explained below.\n    \n    Further options:\n    \n    ```\n    --map-mols, -m  <file>   : generate a file mapping molecule IDs to scaffold IDs \n    --map-annotations <file> : generate a file mapping scaffold IDs to annotations\n    --sdf                    : write the output as an SDF file\n    ```\n    \n\n- #### Selecting Subsets\n\n    ScaffoldGraph allows a user to select a subset of a scaffold network or tree using a molecule-based query,\n    i.e. selecting only scaffolds for molecules of interest.\n     \n    This command can only be performed on an aggregated graph (Not SDF).\n    \n    ```console\n    $ scaffoldgraph select <graph input-file> <input molecules> <output-file> <options>\n    ```\n    \n    Options:\n    \n    ```\n    <graph input-file>   : A TSV graph constructed using the aggregate command\n    <input molecules>    : Input query file (SDF, SMILES)\n    <output-file>        : Write results to specified file\n    --sdf                : Write the output as an SDF file\n    ```\n\n- #### Input Formats\n\n    ScaffoldGraphs CLI utility supports input files in the SMILES and SDF formats. Other file formats can be converted\n    using [OpenBabel](http://openbabel.org/wiki/Main_Page).\n\n    - ##### Smiles Format:\n    \n    ScaffoldGraph expects a delimited file where the first column defines a SMILES string, followed by a molecule\n    identifier. If an identifier is not specified the program will use a hash of the molecule as an identifier.\n        \n    Example SMILES file:\n        \n    ```csv\n    CCN1CCc2c(C1)sc(NC(=O)Nc3ccc(Cl)cc3)c2C#N   CHEMBL4116520\n    CC(N1CC(C1)Oc2ccc(Cl)cc2)C3=Nc4c(cnn4C5CCOCC5)C(=O)N3   CHEMBL3990718\n    CN(C\\C=C\\c1ccc(cc1)C(F)(F)F)Cc2coc3ccccc23  CHEMBL4116665\n    N=C1N(C(=Nc2ccccc12)c3ccccc3)c4ccc5OCOc5c4  CHEMBL4116261\n    ...\n    ```\n    \n    - ##### SDF Format:\n    \n    ScaffoldGraph expects an [SDF](https://en.wikipedia.org/wiki/Chemical_table_file) file, where the molecule\n    identifier is specified in the title line. If the title line is blank, then a hash of the molecule\n    will be used as an identifier.\n       \n    Note: selecting subsets of a graph will not be possible if a name is not supplied \n        \n- #### Output Formats\n\n    - ##### TSV Format (default)\n    \n    The generate commands (network, hiers, tree) produce an intermediate tsv containing 4 columns:\n        \n    1) Number of rings (hierarchy)\n    2) Scaffold SMILES\n    3) Sub-scaffold SMILES\n    4) Molecule ID(s) (top-level scaffolds (Murcko))\n\n    The aggregate command produces a tsv containing 4 columns\n        \n    1) Scaffold ID\n    2) Number of rings (hierarchy)\n    3) Scaffold SMILES\n    4) Sub-scaffold IDs\n    \n    - ##### SDF Format\n    \n    An SDF file can be produced by the aggregate and select commands. This SDF is \n    formatted according to the SDF specification with added property fields:\n        \n    1) TITLE field = scaffold ID\n    2) SUBSCAFFOLDS field = list of sub-scaffold IDs\n    3) HIERARCHY field = number of rings\n    4) SMILES field = scaffold canonical SMILES   \n  \n  \n--------------------------------------------------------------------------------\n\n### Library usage\n\nScaffoldGraph makes it simple to construct a graph using the library API.\nThe resultant graphs follow the same API as a NetworkX DiGraph.\n\nSome [example](https://github.com/UCLCheminformatics/ScaffoldGraph/tree/master/examples) \nnotebooks can be found in the 'examples' directory.\n\n```python\nimport scaffoldgraph as sg\n\n# construct a scaffold network from an SDF file\nnetwork = sg.ScaffoldNetwork.from_sdf('my_sdf_file.sdf')\n\n# construct a scaffold tree from a SMILES file\ntree = sg.ScaffoldTree.from_smiles('my_smiles_file.smi')\n\n# construct a scaffold tree from a pandas dataframe\nimport pandas as pd\ndf = pd.read_csv('activity_data.csv')\nnetwork = sg.ScaffoldTree.from_dataframe(\n    df, smiles_column='Smiles', name_column='MolID',\n    data_columns=['pIC50', 'MolWt'], progress=True,\n)\n```\n\n\n--------------------------------------------------------------------------------\n\n\n## Advanced Usage\n\n- **Multi-processing**\n    \n    It is simple to construct a graph from multiple input source in parallel,\n    using the concurrent.futures module and the sg.utils.aggregate function.\n    \n  ```python\n  from concurrent.futures import ProcessPoolExecutor\n  from functools import partial\n  import scaffoldgraph as sg\n  import os\n      \n  directory = './data'\n  sdf_files = [f for f in os.listdir(directory) if f.endswith('.sdf')]\n      \n  func = partial(sg.ScaffoldNetwork.from_sdf, ring_cutoff=10)\n        \n  graphs = []\n  with ProcessPoolExecutor(max_workers=4) as executor:\n      futures = executor.map(func, sdf_files)\n      for future in futures:\n          graphs.append(future)\n        \n  network = sg.utils.aggregate(graphs)\n  ```\n    \n- **Creating custom scaffold prioritisation rules**\n\n    If required a user can define their own rules for prioritizing scaffolds during scaffold tree construction.\n    Rules can be defined by subclassing one of four rule classes:\n    \n    BaseScaffoldFilterRule, ScaffoldFilterRule, ScaffoldMinFilterRule or ScaffoldMaxFilterRule\n    \n    When subclassing a name property must be defined and either a condition, get_property or filter function.\n    Examples are shown below:\n    \n  ```python\n  import scaffoldgraph as sg\n  from scaffoldgraph.prioritization import *\n    \n  \"\"\"\n  Scaffold filter rule (must implement name and condition)\n  The filter will retain all scaffolds which return a True condition\n  \"\"\"\n  \n  class CustomRule01(ScaffoldFilterRule):\n      \"\"\"Do not remove rings with >= 12 atoms if there are smaller rings to remove\"\"\"\n  \n      def condition(self, child, parent):\n          removed_ring = child.rings[parent.removed_ring_idx]\n          return removed_ring.size < 12\n            \n      @property\n      def name(self):\n          return 'custom rule 01'\n          \n  \"\"\"\n  Scaffold min/max filter rule (must implement name and get_property)\n  The filter will retain all scaffolds with the min/max property value\n  \"\"\"\n    \n  class CustomRule02(ScaffoldMinFilterRule):\n      \"\"\"Smaller rings are removed first\"\"\"\n    \n      def get_property(self, child, parent):\n          return child.rings[parent.removed_ring_idx].size\n            \n      @property\n      def name(self):\n          return 'custom rule 02'\n        \n      \n  \"\"\"\n  Scaffold base filter rule (must implement name and filter)\n  The filter method must return a list of filtered parent scaffolds\n  This rule is used when a more complex rule is required, this example\n  defines a tiebreaker rule. Only one scaffold must be left at the end\n  of all filter rules in a rule set\n  \"\"\"\n    \n  class CustomRule03(BaseScaffoldFilterRule):\n      \"\"\"Tie-breaker rule (alphabetical)\"\"\"\n    \n      def filter(self, child, parents):\n          return [sorted(parents, key=lambda p: p.smiles)[0]]\n    \n      @property\n      def name(self):\n          return 'custom rule 03'  \n  ```\n    \n   Custom rules can subsequently be added to a rule set and supplied to the scaffold tree constructor:\n    \n   ```python\n  ruleset = ScaffoldRuleSet(name='custom rules')\n  ruleset.add_rule(CustomRule01())\n  ruleset.add_rule(CustomRule02())\n  ruleset.add_rule(CustomRule03())\n    \n  graph = sg.ScaffoldTree.from_sdf('my_sdf_file.sdf', prioritization_rules=ruleset)\n  ```\n\n--------------------------------------------------------------------------------\n\n## Contributing\n\nContributions to ScaffoldGraph will most likely fall into the following categories:\n\n1. Implementing a new Feature:\n    * New Features that fit into the scope of this package will be accepted. If you are unsure about the \n      idea/design/implementation, feel free to post an issue.\n2. Fixing a Bug:\n    * Bug fixes are welcomed, please send a Pull Request each time a bug is encountered. When sending a Pull\n      Request please provide a clear description of the encountered bug. If unsure feel free to post an issue\n\nPlease send Pull Requests to: \nhttp://github.com/UCLCheminformatics/ScaffoldGraph\n\n### Testing\n\nScaffoldGraphs testing is located under `test/`. Run all tests using:\n\n```\n$ python setup.py test\n```\n\nor run an individual test: `pytest --no-cov tests/core`\n\nWhen contributing new features please include appropriate test files\n\n### Continuous Integration\n\nScaffoldGraph uses Travis CI for continuous integration\n\n--------------------------------------------------------------------------------\n\n## References\n\n* Bemis, G. W. and Murcko, M. A. (1996). The properties of known drugs. 1. molecular frameworks. Journal of Medicinal Chemistry, 39(15), 2887\u20132893.\n* Matlock, M., Zaretzki, J., Swamidass, J. S. (2013). Scaffold network generator: a tool for mining molecular structures. Bioinformatics, 29(20), 2655-2656\n* Schuffenhauer, A., Ertl, P., Roggo, S., Wetzel, S., Koch, M. A., and Waldmann, H. (2007). The scaffold tree visualization of the scaffold universe by hierarchical scaffold classification. Journal of Chemical Information and Modeling, 47(1), 47\u201358. PMID: 17238248.\n* Varin, T., Schuffenhauer, A., Ertl, P., and Renner, S. (2011). Mining for bioactive scaffolds with scaffold networks: Improved compound set enrichment from primary screening data. Journal of Chemical Information and Modeling, 51(7), 1528\u20131538.\n* Varin, T., Gubler, H., Parker, C., Zhang, J., Raman, P., Ertl, P. and Schuffenhauer, A. (2010) Compound Set Enrichment: A Novel Approach to Analysis of Primary HTS Data. Journal of Chemical Information and Modeling, 50(12), 2067-2078.\n* Wetzel, S., Klein, K., Renner, S., Rennerauh, D., Oprea, T. I., Mutzel, P., and Waldmann, H. (2009). Interactive exploration of chemical space with scaffold hunter. Nat Chem Biol, 1875(8), 581\u2013583.\n* Wilkens, J., Janes, J. and Su, A. (2005). HierS:\u2009 Hierarchical Scaffold Clustering Using Topological Chemical Graphs. Journal of Medicinal Chemistry, 48(9), 3182-3193.\n\n---------------------------------------------------------------------------------\n\n## Citation\n\nIf you use this software in your own work please cite our [paper](https://academic.oup.com/bioinformatics/advance-article/doi/10.1093/bioinformatics/btaa219/5814205),\nand the respective papers of the methods used.\n\n```\n@article{10.1093/bioinformatics/btaa219,\n    author = {Scott, Oliver B and Chan, A W Edith},\n    title = \"{ScaffoldGraph: an open-source library for the generation and analysis of molecular scaffold networks and scaffold trees}\",\n    journal = {Bioinformatics},\n    year = {2020},\n    month = {03},\n    issn = {1367-4803},\n    doi = {10.1093/bioinformatics/btaa219},\n    url = {https://doi.org/10.1093/bioinformatics/btaa219},\n    note = {btaa219}\n    eprint = {https://academic.oup.com/bioinformatics/advance-article-pdf/doi/10.1093/bioinformatics/btaa219/32984904/btaa219.pdf},\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "SDF Format",
        "parent_header": [
          "&#9004; ScaffoldGraph  &#9004;",
          "Quick Start",
          "CLI usage",
          "Output Formats"
        ],
        "type": "Text_excerpt",
        "value": "[![Conda](https://anaconda.org/uclcheminformatics/scaffoldgraph/badges/installer/conda.svg)](https://anaconda.org/UCLCheminformatics/scaffoldgraph)\n[![Anaconda](https://anaconda.org/uclcheminformatics/scaffoldgraph/badges/version.svg)](https://anaconda.org/UCLCheminformatics/scaffoldgraph)\n[![Release](https://img.shields.io/pypi/v/scaffoldgraph.svg?style=flat-square)](https://github.com/UCLCheminformatics/ScaffoldGraph/releases)\n[![Build Status](https://travis-ci.org/UCLCheminformatics/ScaffoldGraph.svg?branch=master)](https://travis-ci.org/UCLCheminformatics/ScaffoldGraph)\n[![Contributing](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/uclcheminformatics/scaffoldgraph#contributing)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://github.com/UCLCheminformatics/ScaffoldGraph/blob/master/LICENSE)\n[![DOI](https://img.shields.io/badge/DOI-10.1093%2Fbioinformatics%2Fbtaa219-blue)](https://doi.org/10.1093/bioinformatics/btaa219)\n\n# &#9004; ScaffoldGraph  &#9004;\n\n**ScaffoldGraph** is an open-source cheminformatics library, built using [RDKit](https://www.rdkit.org/) and\n[NetworkX](https://networkx.github.io/), for the generation and analysis of scaffold networks and scaffold trees.\n\n<p align=\"center\">\n    <img width=\"80%\", src=\"https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/img/scaffoldgraph.jpg\" />\n</p>\n\n[Features](https://github.com/UCLCheminformatics/ScaffoldGraph#features) | \n[Installation](https://github.com/UCLCheminformatics/ScaffoldGraph#installation) |\n[Quick-start](https://github.com/UCLCheminformatics/ScaffoldGraph#quick-start) |\n[Examples](https://github.com/UCLCheminformatics/ScaffoldGraph/tree/master/examples) |\n[Contributing](https://github.com/UCLCheminformatics/ScaffoldGraph#contributing) |\n[References](https://github.com/UCLCheminformatics/ScaffoldGraph#references) |\n[Citation](https://github.com/UCLCheminformatics/ScaffoldGraph#citation)\n\n## Features\n\n* **Scaffold Network generation** (Varin, 2011)\n    * Explore scaffold-space through the iterative removal of available rings, generating all possible sub-scaffolds\n      for a set of input molecules. The output is a directed acyclic graph of molecular scaffolds\n* **HierS Network Generation** (Wilkens, 2005)\n    * Explore scaffold-space through the iterative removal of available rings, generating all possible sub-scaffolds \n      without dissecting fused ring-systems\n* **Scaffold Tree generation** (Schuffenhauer, 2007)\n    * Explore scaffold-space through the iterative removal of the least-characteristic ring from a molecular scaffold.\n      The output is a tree of molecular scaffolds\n* **Murcko Fragment generation** (Bemis, 1996)\n    * Generate a set of murcko fragments for a molecule through the iterative removal of available rings.\n* **Compound Set Enrichment** (Varin, 2010, 2011)\n    * Identify active chemical series from primary screening data\n\n### Comparison to existing software\n\n* Scaffold Network Generator (SNG) (Matlock 2013)\n* Scaffold Hunter (SH) (Wetzel, 2009)\n* Scaffold Tree Generator (STG) (SH CLI predecessor)\n\n|                                      | SG          | SNG         | SH            | STG         |\n|--------------------------------------|-------------|-------------|---------------|-------------|\n| Computes Scaffold Networks           | X           | X           | -             | -           |\n| Computes HierS Networks              | X           | -           | -             | -           |\n| Computes Scaffold Trees              | X           | X           | X             | X           |\n| Command Line Interface               | X           | X           | -             | X           |\n| Graphical Interface                  | - `*`       | -           | X             | -           |\n| Accessible Library                   | X           | -           | -             | -           |\n| Results can be computed in parallel  | X           | X           | -             | -           |\n| Benchmark for 150,000 molecules `**` | 15m 25s     | 27m 6s      | -             | -           |\n| Limit on input molecules             | N/A `***`   | 10,000,000  | 200,000 `****`| 10,000,000  |\n\n`*` While ScaffoldGraph has no explicit GUI, it contains functions for interactive scaffoldgraph visualization.\n\n`**` Tests performed on an Intel Core i7-6700 @ 3.4 GHz with 32GB of RAM, without parallel processing. I could not find \nthe code for STG and do not intend to search for it, SNG report that both itself and SH are both faster in the\nbenchmark test.\n\n`***` Limited by available memory\n\n`****` Graphical interface has an upper limit of 2,000 scaffolds\n\n--------------------------------------------------------------------------------\n\n## Installation\n\n- ScaffoldGraph currently supports Python 3.6 and above.\n\n### Install with conda (recommended)\n```\nconda config --add channels conda-forge\nconda install -c uclcheminformatics scaffoldgraph\n```\n### Install with pip\n```\n# Basic installation.\npip install scaffoldgraph\n\n# Install with ipycytoscape.\npip install scaffoldgraph[vis]\n\n# Install with rdkit-pypi (Linux, MacOS).\npip install scaffoldgraph[rdkit]\n\n# Install with all optional packages. \npip install scaffoldgraph[rdkit, vis]\n```\n__Warning__: rdkit cannot be installed with pip, so must be installed through [other means]('https://www.rdkit.org/docs/Install.html')\n\n__Update (17/06/21)__: rdkit can now be installed through the [rdkit-pypi](https://pypi.org/project/rdkit-pypi/) wheels for\nLinux and MacOS, and can be installed alongside ScaffoldGraph optionally (see above instructions).  \n\n__Update (16/11/21)__: Jupyter lab users may also need to follow the extra installation instructions \n[here](https://github.com/cytoscape/ipycytoscape#for-jupyterlab-1x-or-2x) / [here](https://ipycytoscape.readthedocs.io/en/latest/installing.html) \nwhen using the ipycytoscape visualisation utility.\n\n\n--------------------------------------------------------------------------------\n\n## Quick Start\n\n### CLI usage\n\nThe ScaffoldGraph CLI is almost analogous to SNG consisting of a two step process (Generate --> Aggregate).\n\nScaffoldGraph can be invoked from the command-line using the following command:\n\n```console\n$ scaffoldgraph <command> <input-file> <options>\n```\nWhere \"command\" is one of: tree, network, hiers, aggregate or select. \n\n- #### Generating Scaffold Networks/Trees\n    \n    The first step of the process is to generate an intermediate scaffold graph. The generation commands\n    are: network, hiers and tree\n    \n    For example, if a user would like to generate a network from two files:\n    \n    ```console\n    $ ls\n    file_1.sdf  file_2.sdf\n    ```\n    \n    They would first use the commands:\n    \n    ```console\n    $ scaffoldgraph network file_1.sdf file_1.tmp\n    $ scaffoldgraph network file_2.sdf file_2.tmp\n    ```\n    \n    Further options:\n    \n    ```\n    --max-rings, -m : ignore molecules with # rings > N (default: 10)\n    --flatten-isotopes -i : remove specific isotopes\n    --keep-largest-fragment -f : only process the largest disconnected fragment\n    --discharge-and-deradicalize -d : remove charges and radicals from scaffolds \n    ```\n    \n- #### Aggregating Scaffold Graphs\n\n    The second step of the process is aggregating the temporary files into a combined graph representation.\n    \n    ```console\n    $ scaffoldgraph aggregate file_1.tmp file_2.tmp file.tsv\n    ```\n    \n    The final network is now available in 'file.tsv'. Output formats are explained below.\n    \n    Further options:\n    \n    ```\n    --map-mols, -m  <file>   : generate a file mapping molecule IDs to scaffold IDs \n    --map-annotations <file> : generate a file mapping scaffold IDs to annotations\n    --sdf                    : write the output as an SDF file\n    ```\n    \n\n- #### Selecting Subsets\n\n    ScaffoldGraph allows a user to select a subset of a scaffold network or tree using a molecule-based query,\n    i.e. selecting only scaffolds for molecules of interest.\n     \n    This command can only be performed on an aggregated graph (Not SDF).\n    \n    ```console\n    $ scaffoldgraph select <graph input-file> <input molecules> <output-file> <options>\n    ```\n    \n    Options:\n    \n    ```\n    <graph input-file>   : A TSV graph constructed using the aggregate command\n    <input molecules>    : Input query file (SDF, SMILES)\n    <output-file>        : Write results to specified file\n    --sdf                : Write the output as an SDF file\n    ```\n\n- #### Input Formats\n\n    ScaffoldGraphs CLI utility supports input files in the SMILES and SDF formats. Other file formats can be converted\n    using [OpenBabel](http://openbabel.org/wiki/Main_Page).\n\n    - ##### Smiles Format:\n    \n    ScaffoldGraph expects a delimited file where the first column defines a SMILES string, followed by a molecule\n    identifier. If an identifier is not specified the program will use a hash of the molecule as an identifier.\n        \n    Example SMILES file:\n        \n    ```csv\n    CCN1CCc2c(C1)sc(NC(=O)Nc3ccc(Cl)cc3)c2C#N   CHEMBL4116520\n    CC(N1CC(C1)Oc2ccc(Cl)cc2)C3=Nc4c(cnn4C5CCOCC5)C(=O)N3   CHEMBL3990718\n    CN(C\\C=C\\c1ccc(cc1)C(F)(F)F)Cc2coc3ccccc23  CHEMBL4116665\n    N=C1N(C(=Nc2ccccc12)c3ccccc3)c4ccc5OCOc5c4  CHEMBL4116261\n    ...\n    ```\n    \n    - ##### SDF Format:\n    \n    ScaffoldGraph expects an [SDF](https://en.wikipedia.org/wiki/Chemical_table_file) file, where the molecule\n    identifier is specified in the title line. If the title line is blank, then a hash of the molecule\n    will be used as an identifier.\n       \n    Note: selecting subsets of a graph will not be possible if a name is not supplied \n        \n- #### Output Formats\n\n    - ##### TSV Format (default)\n    \n    The generate commands (network, hiers, tree) produce an intermediate tsv containing 4 columns:\n        \n    1) Number of rings (hierarchy)\n    2) Scaffold SMILES\n    3) Sub-scaffold SMILES\n    4) Molecule ID(s) (top-level scaffolds (Murcko))\n\n    The aggregate command produces a tsv containing 4 columns\n        \n    1) Scaffold ID\n    2) Number of rings (hierarchy)\n    3) Scaffold SMILES\n    4) Sub-scaffold IDs\n    \n    - ##### SDF Format\n    \n    An SDF file can be produced by the aggregate and select commands. This SDF is \n    formatted according to the SDF specification with added property fields:\n        \n    1) TITLE field = scaffold ID\n    2) SUBSCAFFOLDS field = list of sub-scaffold IDs\n    3) HIERARCHY field = number of rings\n    4) SMILES field = scaffold canonical SMILES   \n  \n  \n--------------------------------------------------------------------------------\n"
      },
      "source": "https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Library usage",
        "parent_header": [
          "&#9004; ScaffoldGraph  &#9004;",
          "Quick Start"
        ],
        "type": "Text_excerpt",
        "value": "ScaffoldGraph makes it simple to construct a graph using the library API.\nThe resultant graphs follow the same API as a NetworkX DiGraph.\n\nSome [example](https://github.com/UCLCheminformatics/ScaffoldGraph/tree/master/examples) \nnotebooks can be found in the 'examples' directory.\n\n```python\nimport scaffoldgraph as sg\n\n# construct a scaffold network from an SDF file\nnetwork = sg.ScaffoldNetwork.from_sdf('my_sdf_file.sdf')\n\n# construct a scaffold tree from a SMILES file\ntree = sg.ScaffoldTree.from_smiles('my_smiles_file.smi')\n\n# construct a scaffold tree from a pandas dataframe\nimport pandas as pd\ndf = pd.read_csv('activity_data.csv')\nnetwork = sg.ScaffoldTree.from_dataframe(\n    df, smiles_column='Smiles', name_column='MolID',\n    data_columns=['pIC50', 'MolWt'], progress=True,\n)\n```\n\n\n--------------------------------------------------------------------------------\n\n"
      },
      "source": "https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Advanced Usage",
        "parent_header": [
          "&#9004; ScaffoldGraph  &#9004;"
        ],
        "type": "Text_excerpt",
        "value": "- **Multi-processing**\n    \n    It is simple to construct a graph from multiple input source in parallel,\n    using the concurrent.futures module and the sg.utils.aggregate function.\n    \n  ```python\n  from concurrent.futures import ProcessPoolExecutor\n  from functools import partial\n  import scaffoldgraph as sg\n  import os\n      \n  directory = './data'\n  sdf_files = [f for f in os.listdir(directory) if f.endswith('.sdf')]\n      \n  func = partial(sg.ScaffoldNetwork.from_sdf, ring_cutoff=10)\n        \n  graphs = []\n  with ProcessPoolExecutor(max_workers=4) as executor:\n      futures = executor.map(func, sdf_files)\n      for future in futures:\n          graphs.append(future)\n        \n  network = sg.utils.aggregate(graphs)\n  ```\n    \n- **Creating custom scaffold prioritisation rules**\n\n    If required a user can define their own rules for prioritizing scaffolds during scaffold tree construction.\n    Rules can be defined by subclassing one of four rule classes:\n    \n    BaseScaffoldFilterRule, ScaffoldFilterRule, ScaffoldMinFilterRule or ScaffoldMaxFilterRule\n    \n    When subclassing a name property must be defined and either a condition, get_property or filter function.\n    Examples are shown below:\n    \n  ```python\n  import scaffoldgraph as sg\n  from scaffoldgraph.prioritization import *\n    \n  \"\"\"\n  Scaffold filter rule (must implement name and condition)\n  The filter will retain all scaffolds which return a True condition\n  \"\"\"\n  \n  class CustomRule01(ScaffoldFilterRule):\n      \"\"\"Do not remove rings with >= 12 atoms if there are smaller rings to remove\"\"\"\n  \n      def condition(self, child, parent):\n          removed_ring = child.rings[parent.removed_ring_idx]\n          return removed_ring.size < 12\n            \n      @property\n      def name(self):\n          return 'custom rule 01'\n          \n  \"\"\"\n  Scaffold min/max filter rule (must implement name and get_property)\n  The filter will retain all scaffolds with the min/max property value\n  \"\"\"\n    \n  class CustomRule02(ScaffoldMinFilterRule):\n      \"\"\"Smaller rings are removed first\"\"\"\n    \n      def get_property(self, child, parent):\n          return child.rings[parent.removed_ring_idx].size\n            \n      @property\n      def name(self):\n          return 'custom rule 02'\n        \n      \n  \"\"\"\n  Scaffold base filter rule (must implement name and filter)\n  The filter method must return a list of filtered parent scaffolds\n  This rule is used when a more complex rule is required, this example\n  defines a tiebreaker rule. Only one scaffold must be left at the end\n  of all filter rules in a rule set\n  \"\"\"\n    \n  class CustomRule03(BaseScaffoldFilterRule):\n      \"\"\"Tie-breaker rule (alphabetical)\"\"\"\n    \n      def filter(self, child, parents):\n          return [sorted(parents, key=lambda p: p.smiles)[0]]\n    \n      @property\n      def name(self):\n          return 'custom rule 03'  \n  ```\n    \n   Custom rules can subsequently be added to a rule set and supplied to the scaffold tree constructor:\n    \n   ```python\n  ruleset = ScaffoldRuleSet(name='custom rules')\n  ruleset.add_rule(CustomRule01())\n  ruleset.add_rule(CustomRule02())\n  ruleset.add_rule(CustomRule03())\n    \n  graph = sg.ScaffoldTree.from_sdf('my_sdf_file.sdf', prioritization_rules=ruleset)\n  ```\n\n--------------------------------------------------------------------------------\n"
      },
      "source": "https://raw.githubusercontent.com/UCLCheminformatics/ScaffoldGraph/main/README.md",
      "technique": "header_analysis"
    }
  ]
}