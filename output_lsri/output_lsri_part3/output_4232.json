{
  "application_domain": [
    {
      "confidence": 21.98,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citing HIFI",
        "parent_header": [
          "HIFI"
        ],
        "type": "Text_excerpt",
        "value": "If HIFI was used in your analysis, please cite:\n\nCameron, C.J.F., Dostie, J. and Blanchette, M. (2020) HIFI: estimating DNA-DNA interaction frequency from Hi-C data at restriction-fragment resolution. _Genome Biol_  **21**, 11. doi: https://doi.org/10.1186/s13059-019-1913-y\n"
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/HIFI/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/BlanchetteLab/HIFI"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-05-24T16:48:13Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-03-20T13:29:30Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Hi-C Interaction Frequency Inference (HIFI): High-resolution estimation of DNA-DNA interaction frequency from Hi-C data"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.98768619313176,
      "result": {
        "original_header": "HIFI",
        "type": "Text_excerpt",
        "value": "A tool for high-resolution estimation of DNA-DNA interaction frequency from Hi-C data\n \n"
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/HIFI/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9364743671553697,
      "result": {
        "original_header": "Overview",
        "type": "Text_excerpt",
        "value": "HIFI is a set of tools to infer true intra-chromosomal interaction frequencies at restriction fragment (RF) resolution from Hi-C data. \nIt uses adaptive kernel density estimation and Markov Random Field approaches to provide accurate estimates of interaction frequency matrices from sparse read-count matrices. \nInput: A BAM file corresponding to Hi-C data from a given chromosome (or part thereof).  \n"
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/HIFI/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9694558866187699,
      "result": {
        "original_header": "Command line details:",
        "type": "Text_excerpt",
        "value": "2) HIFI\n```\nHIFI <sparseInputMatrix.tsv> <sparseOutputMatrix.tsv> <options>\n\nRequired arguments:\nChoice of inference method\n\t-method=[fixed|kde|mrf<default>]\n\t\tfixed: fixed resolution (binning) approach; use with -fragmentsPerBin\n\t\tkde: kernel density estimation; use with -kdeBandWidth\n\t\takde: adaptive kernel density estimation; use with -kdeMinCount and -kdeMaxBandwidth\n\t\tmrf: Markov Random Field estimation\n\t\nOptional arguments:\nEstimation method:\n\t-method=[fixed|kde|akde|mrf]\n\t\tfixed: fixed resolution (binning) approach; use with -fragmentsPerBin\n\t\tkde: kernel density estimation; use with -kdeBandWidth\n\t\takde: adaptive kernel density estimation; use with -kdeMinCount and -kdeMaxBandwidth\n\t\tmrf: Markov Random Field estimation\n\t\tDefault: mrf\n\t\nFixed binning options\n\t-fragmentsPerBin=<INTEGER> : Number of fragments per bin. Default: 1\n\nKDE options\n\t-kdeBandwidth=<FLOAT> : Bandwidth of the KDE. Default: 20.000000\n\nAdaptive KDE options\n\t-kdeMinCount=<INTEGER> : Minimum read pair count for KDE. Default: 50\n\t-kdeMaxBandwidth=<FLOAT> : Maximum bandwidth to be used in AKDE. Default: 25.000000\n\nMRF options\n\t-boundaryKS=<FLOAT> : Minimum value of the KS test statistic to call a boundary. Default: 2.000000\n\t-mrfMaxIter=<INTEGER> : Number of iterations of MRF. Default: 5\n\t-sigmaMultiplier=<FLOAT> : Sigma multiplier term in MRF (see Methods). Default: 0.040000\n\t-minSigma=<FLOAT> : Minimum value of sigma to be considered (see Methods). Default: 0.001000\n\t-varianceMultiplier=<FLOAT> : Models observed read count as a negative binomial distribution instead of a Poisson distribution, with mean equal to the estimated IF, and variance equal to mean*varianceMultiplier. Default: 1\n\nOutput options\n\t-minOutput=<FLOAT> : Smallest IF value to be outputed. IF values below this number are not outputed. Defaul: 0.000010\n\t-outputNotNormalized : Outputs non-bias-corrected IFs.\n\nSubsetting options\n\t-firstRow=<INTEGER> : First row to be analyzed\n\t-lastRow=<INTEGER> : Last row to be analyzed\n\t-firstCol=<INTEGER> : First column to be analyzed\n\t-lastCol=<INTEGER> : Last column to be analyzed\n\nNormalization options\n\t-userNormalization=<FILENAME> : File name of file containing per-cell bias normalization coefficients\n\nOptimizations\n\t-bandSize=<INTEGER> : Limits the analysis to a band of the given width along the main diagonal. Useful when analyzing very large matrices, to limit the analysis to short range contacts. Default: inactive\n``` \n3) Extraction of a subset of the IF matrix for visualization\n```\nparseHIFIoutput.py [-h]\n                          HIFI_output digest_filepath bp_start bp_end\n                          output_dir\n\npositional arguments:\n  HIFI_output      file path to HIFI sparse matrix\n  digest_filepath  expected restriction fragment digest (BED) filepath\n  bp_start         starting base pair for region of interest\n  bp_end           final base pair for region of interest\n  output_dir       file path to output directory\n\noptional arguments:\n  -h, --help       show this help message and exit\n``` \n5) Call loops on HIFI-smoothed IF matrices\n```\nusage: callPeaks <interactionFrequencyFile.tsv> <peakSize> <windowSize> <chromosome> <restrictionEnzymeCutSites.bed> <mergeDistance>\n\npositional arguments:\n  interactionFrequencyFile.tsv\n                        input HIFI-processed IF matrix for one chromosome\n  peakSize              Size of region to call peaks (recommendation: 50000)\n  windowSize            Size of window surrouding peak (recommendation: 2*peakSize)\n  chromosome            chromosome identifier (e.g. chr9)              \n  restrictionEnzymeCutSites.bed            \n                        Position of cut sites\n  mergeDist             Distance within which to merge called peaks.\n\nOutput:\n  List of fragment pairs involved in loops, with score, in bedpe format. \n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/HIFI/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/BlanchetteLab/HIFI/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/BlanchetteLab/HIFI/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BlanchetteLab/HIFI"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "HIFI"
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/HIFI/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation guide",
        "parent_header": [
          "HIFI"
        ],
        "type": "Text_excerpt",
        "value": "Installation is expected to take a few minutes:\n\n1) Either download the package by clicking the \"Clone or download\" button, unziping file in desired location, and renaming the directory \"HIFI\"   OR   Use the command line ``` git clone https://github.com/BlanchetteLab/HIFI ```.\n2) ``` cd HIFI ```\n3) ``` make HIFI ```\n4) ``` make callPeaks ```\n5) If Matplotlib or NumPy are not installed, install it using Anaconda (https://conda.io/docs/user-guide/install/download.html).\n6) If samtools is not installed, install it (http://www.htslib.org/download/) and make sure the samtools executable is in your path.\n7) Download into the examples directory the following test Hi-C data set from Rao et al. 2014: https://www.cs.mcgill.ca/~blanchem/HIFI/Rao_GM12878.hg19.chr9_example.bam\n"
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/HIFI/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example data set",
        "parent_header": [
          "HIFI"
        ],
        "type": "Text_excerpt",
        "value": "The BAM file linked just above comes from Rao et al. (2014), limited to intrachromosomal contacts in region chr9:122000000-132000000. This is the data we are going to use as example. The BAM file was produced from fastq files using HiCUP's standard pipeline to map read pairs to hg19 and perform read-pair quality filtering. Additional filtering (MAPQ value >= 30) ensures unique mappability. \n"
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/HIFI/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9015905802744093,
      "result": {
        "original_header": "Overview",
        "type": "Text_excerpt",
        "value": "Step 5: (optional) Call loops using the callPeaks program. \n"
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/HIFI/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8671570814321705,
      "result": {
        "original_header": "Command line details:",
        "type": "Text_excerpt",
        "value": "1) Processing of BAM file\n```\nBAMtoSparseMatrix.py [-h] bam_filepath digest_filepath output_dir\n\npositional arguments:\n  bam_filepath     input BAM file path\n  digest_filepath  expected restriction fragment digest file (BED) path\n  output_dir       file path to output directory\n\noptional arguments:\n  -h, --help       show this help message and exit\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/HIFI/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.999819857022722,
      "result": {
        "original_header": "Testing",
        "type": "Text_excerpt",
        "value": "All software was tested on Linux Ubuntu 12.04.5 LTS (GNU/Linux 3.2.0-86-generic x86_64).\n \n"
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/HIFI/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8518965411147189,
      "result": {
        "original_header": "Command line details:",
        "type": "Text_excerpt",
        "value": "1) Processing of BAM file\n```\nBAMtoSparseMatrix.py [-h] bam_filepath digest_filepath output_dir\n\npositional arguments:\n  bam_filepath     input BAM file path\n  digest_filepath  expected restriction fragment digest file (BED) path\n  output_dir       file path to output directory\n\noptional arguments:\n  -h, --help       show this help message and exit\n```\n \n4) Visualize the output IF matrix \n```\nplotHIFIoutput.py [-h] HIFI_output digest_filepath vmin vmax output_dir\n\npositional arguments:\n  HIFI_output      file path to HIFI sparse matrix (recommend filtering before\n                   plotting - see 'parseHIFIoutput.py')\n  digest_filepath  expected restriction fragment digest (BED) filepath\n  vmin             minimum value to be used for colour palette range\n  vmax             maximum value to be used for colour palette range\n  output_dir       file path to output directory\n\noptional arguments:\n  -h, --help       show this help message and exit\n``` \n5) Convert IF matrix from RF to fixed-binning resolution\n```\nusage: SparseToFixed.py [-h] [--start] [--no_score]\n                        sparse_matrix_filepath digest_filepath resolution\n                        output_filepath\n\npositional arguments:\n  sparse_matrix_filepath\n                        input sparse matrix file path\n  digest_filepath       expected restriction fragment digest file (BED-like)\n                        path\n  resolution            fixed binning resolution (must be an integer)\n  output_filepath       output (fixed bins) sparse matrix file path\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --start               use fragment start instead of end when binning\n  --no_score            output Juicebox 'short format'\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/HIFI/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/BlanchetteLab/HIFI/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "original_header": "License:",
        "parent_header": [
          "HIFI"
        ],
        "type": "Text_excerpt",
        "value": "HIFI is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation.\n\nHIFI is distributed in the hopes that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.\n"
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/HIFI/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "HIFI"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "BlanchetteLab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 53100,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 33606,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 251,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 176,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BlanchetteLab/HIFI/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "BlanchetteLab",
          "type": "User"
        },
        "date_created": "2019-11-22T10:17:16Z",
        "date_published": "2019-11-28T20:16:55Z",
        "html_url": "https://github.com/BlanchetteLab/HIFI/releases/tag/v1.0.0",
        "name": "HIFI 1.0.0",
        "release_id": 21840841,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/BlanchetteLab/HIFI/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/BlanchetteLab/HIFI/releases/21840841",
        "value": "https://api.github.com/repos/BlanchetteLab/HIFI/releases/21840841",
        "zipball_url": "https://api.github.com/repos/BlanchetteLab/HIFI/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Software requirements",
        "parent_header": [
          "HIFI"
        ],
        "type": "Text_excerpt",
        "value": "1) Linux with g++ compiler\n2) SAMtools: http://www.htslib.org/download/\n3) Python v2.7 or v3.7 interpreter: https://www.anaconda.com/distribution/ \n4) Matplotlib (should be installed with most versions of Python; or can be installed using Anaconda (https://conda.io/docs/user-guide/install/download.html)).\n5) NumPy (should be installed with most versions of Python; or can be installed using Anaconda (https://conda.io/docs/user-guide/install/download.html)).\n"
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/HIFI/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 15:41:14",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 23
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Example data set",
        "parent_header": [
          "HIFI"
        ],
        "type": "Text_excerpt",
        "value": "The BAM file linked just above comes from Rao et al. (2014), limited to intrachromosomal contacts in region chr9:122000000-132000000. This is the data we are going to use as example. The BAM file was produced from fastq files using HiCUP's standard pipeline to map read pairs to hg19 and perform read-pair quality filtering. Additional filtering (MAPQ value >= 30) ensures unique mappability. \n"
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/HIFI/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick start",
        "parent_header": [
          "HIFI"
        ],
        "type": "Text_excerpt",
        "value": "1) Process BAM file to produce input to HIFI (expected run time: 1 minute):\n\n```python src/BAMtoSparseMatrix.py examples/Rao_GM12878.hg19.chr9_example.bam examples/hg19.HindIII_fragments.bed ./examples_output```\n\n2) Run HIFI with default parameters (expected run time: 15 minutes):\n\n```src/HIFI examples_output/Rao_GM12878.hg19.chr9_example.chr9_chr9.RF.tsv examples_output/Rao_GM12878.hg19.chr9_example.chr9_chr9.RF.HIFI_MRF.tsv -method=mrf```\n\n3) Extract a subset of the IF matrix for visualization (positions 125000000-129000000) (expected run time: 1 minute)\n\n```python src/parseHIFIoutput.py examples_output/Rao_GM12878.hg19.chr9_example.chr9_chr9.RF.HIFI_MRF.tsv examples/hg19.HindIII_fragments.bed 125000000 129000000 examples_output```\n\n4) Visualize the output IF matrix (expected run time: 15 minutes):\n\n```python src/plotHIFIoutput.py examples_output/Rao_GM12878.hg19.chr9_example.chr9_chr9.RF.HIFI_MRF.125000000_129000000.tsv examples/hg19.HindIII_fragments.bed 0.0 1.5 examples_output```\n\n5) Bin the output IF matrix to 25 kb canonical fixed bins (expected run time: <5 minutes):\n\n```python src/SparseToFixed.py examples_output/Rao_GM12878.hg19.chr9_example.chr9_chr9.RF.HIFI_MRF.125000000_129000000.tsv examples/hg19.HindIII_fragments.bed 25000 examples_output/Rao_GM12878.hg19.chr9_example.chr9_chr9.RF.HIFI_MRF.125000000_129000000.25kb.tsv```\n\n6) Call loops using callPeaks (expected run time: 2 minutes):\n\n``` src/callPeaks examples_output/Rao_GM12878.hg19.chr9_example.chr9_chr9.RF.HIFI_MRF.tsv 50000 100000 chr9 examples/hg19.HindIII_fragments.bed 20000 ```\n"
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/HIFI/master/README.md",
      "technique": "header_analysis"
    }
  ]
}