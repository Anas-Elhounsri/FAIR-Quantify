{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Laboratoire-de-Chemoinformatique/Synt-On"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Enumerate library of all possible compounds using given set of synthons",
        "parent_header": [
          "Table of Contents",
          "SyntOn-Enumeration"
        ],
        "type": "Text_excerpt",
        "value": "[Back to Table of Contents](https://github.com/Laboratoire-de-Chemoinformatique/Synt-On#table-of-contents)\n\nNew compounds can enumerated from defined library of synthons using *SyntOn_BulkFragmentationEnumerationAndAnaloguesDesign.py* script.\n\n```shell script\n$ python3 SyntOn/SyntOn_BulkFragmentationEnumerationAndAnaloguesDesign.py -h\n\nusage: SyntOn_BulkFragmentationEnumerationAndAnaloguesDesign [-h] [-i INPUT] [-oD OUTDIR] [--SynthLibrary SYNTHLIBRARY] \n                                                     [--nCores NCORES]  [--analoguesLibGen] [--strictAvailabilityMode]\n                                                     [--simBBselection] [--Ro2Filtration] [--fragmentationMode  MODE] [--simTh SIMTH]\n                                                     [--reactionsToWorkWith REACTIONSTOWORKWITH] [--MaxNumberOfStages MAXNUMBEROFSTAGES]\n                                                     [--maxNumberOfReactionCentersPerFragment MAXNUMBEROFREACTIONCENTERSPERFRAGMENT]\n\nCompound fragmentaitiona and analogues generation. \n\noptional arguments:\n  -h, --help            show this help message and exit       \n  -i INPUT, --input INPUT        \n                        input file        \n  -oD OUTDIR, --outDir OUTDIR   \n                        Output directory to write analogues. \n  --SynthLibrary SYNTHLIBRARY                        \n                        Library of available synthons. Generated from avaialable BBs using SyntOn_BBsBulkClassificationAndSynthonization.py  \n  --nCores NCORES       Number of CPUs available for parallelization.          \n  --simTh SIMTH         Similarity threshold for BB analogues search. If not specified, only positional variational approach will be used for BBs search             \n  --analoguesLibGen     Generate library of analogues from input mol                                                       \n  --strictAvailabilityMode         \n                        Only fully synthesizable analogues are generated. Alternatively, unavailable synthons resulted from compound fragmentation will still be used for its analogues generation.                                              \n  --Ro2Filtration       Filter input synthons library by Ro2 (MW <= 200, logP <= 2, H-bond donors count <= 2 and H-bond acceptors count <= 4) \n  --fragmentationMode FRAGMENTATIONMODE \n                        Mode of fragmentation (defines how the reaction list is specified)          \n                        Possible options: use_all, include_only, exclude_some, one_by_one      \n                        (default: use_all)        \n  --reactionsToWorkWith REACTIONSTOWORKWITH    \n                        List of RiDs to be used.        \n                        (default: R1-R13 (all reactions)    \n  --desiredNumberOfNewMols DESIREDNUMBEROFNEWMOLS\n                        Desired number of new compounds to be generated (in case of anaogues generation - number of analogues per compound).\n                        (default: 1000)             \n  --MaxNumberOfStages MAXNUMBEROFSTAGES           \n                        Maximal number of stages during fragmentation.        \n                        (default: 5)           \n  --maxNumberOfReactionCentersPerFragment MAXNUMBEROFREACTIONCENTERSPERFRAGMENT  \n                        Maximal number of reaction centers per fragment.    \n                        (default: 3)\n  --enumerationMode     Enumerate library using input synthons \n  \n  --MWupperTh MWUPPERTH\n                        Maximum molecular weight allowed for generated compounds.\n                        (default: 1000)\n  --MWlowerTh MWLOWERTH\n                        Minimum molecular weight allowed for generated compounds.\n                        (default: 100)  \n          \n\n_________________________________________________________________________________________________________________________ \n\nCode implementation:                Yuliana Zabolotna, Alexandre Varnek             \n                                    Laboratoire de Ch\u00e9moinformatique, Universit\u00e9 de Strasbourg.        \nKnowledge base (SMARTS library):    Dmitriy M.Volochnyuk, Sergey V.Ryabukhin, Kostiantyn Gavrylenko, Olexandre Oksiuta   \n                                    Institute of Organic Chemistry, National Academy of Sciences of Ukraine    \n                                    Kyiv National Taras Shevchenko University      \n2021 Strasbourg, Kiev   \n\n```\n\nExample of launch:\n```shell script\npython3 ../SyntOn/SyntOn_BulkFragmentationEnumerationAndAnaloguesDesign.py -i SynthonsForLibraryGeneration.smi \n--nCores 10 -oD /data/yuliana/DrugsFragmentation/newLaunch --maxNumberOfStages 5 --desiredNumberOfNewMols 1000 \n--enumerationMode --MWupperTh 460 --MWlowerTh 200  \n```\nIt will create a list of temporary files, that will be combine into one final file *FinalOut_allEnumeratedCompounds_DuplicatesCanBePresent.smi*"
      },
      "source": "https://raw.githubusercontent.com/Laboratoire-de-Chemoinformatique/SynthI/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-06-15T09:37:32Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-10T14:34:50Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Open-source tool for synthons-based library design."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Detailed classes description",
        "parent_header": [
          "Table of Contents"
        ],
        "type": "Text_excerpt",
        "value": "[Back to Table of Contents](https://github.com/Laboratoire-de-Chemoinformatique/Synt-On#table-of-contents)\n\n_**CLASS `synthon (smiles, cutLevel=1, directParent=None, directChildren=None, syntheticPathway=None, BBlibProvided=False)`**_\n\nThe class to store Synthons. The instances of this class are created during compound fragmentaion.\n\n**Available attributes**\n* ``synthonInstance.smiles`` - SMILES of the synthon\n* ``synthonInstance.functionalityCount`` - number of reactive centers in the synthon\n* ``synthonInstance.marks`` - labels defining reactivity of the reactive centers of the synthon\n* ``synthonInstance.directParents`` - parent synthons (their fragmentation lead to the current synthon)\n* ``synthonInstance.directChildren`` - synthons obtained via fragmentation of the current synthon\n* ``synthonInstance.syntheticPathway`` - list containig all synthetic pathways, that include current synthon \n* ``synthonInstance.correspondingBB`` - IDs of the BBs that produce current synthon\n* ``synthonInstance.bbAnalogues`` - dictionary containing BBs that produce analogues synthons\n\n**Methods**\n* ``synthonInstance.printSynthonInfo()`` - print information about synthon\n* ``synthonInstance.searchForSynthonAnalogues(synthLib: dict, simTh=-1)`` - search of the analogues of the current synthon in the provided library of avaialble syntons. \n\nDictionary *synthLib* can be obtained using `UsefulFunctions.readSyntonLib(synthLibFile, Ro2Filtration=False, FindAnaloguesOfMissingBBs=False)` or retrieved as an attribute of the instant of the class fragmentation if the library was provided during class initiation (`fragmentation.SynthLib`). \n\n_**CLASS `syntheticPathway (name , synthPathwayReactions,  reagentsNumber, cutLevel, directParentsSynthPathways=None, SynthLibProvided=False)`**_\n\nThe class to store information about possible syntheticPathway for compound synthesis - a set of synthons obtatined via fragmentation and list of reaction rules used for this fragmentation. The instances of this class are created during compound fragmentaion.\n\n**Available attributes**\n* ``syntheticPathwayInstance.name`` - the name of syntheticPathway contains RiDs of the reaction rules used for compound fragmentation in this particular pathway\n* ``syntheticPathwayInstance.participatingSynthon`` - list of synthons obtained via fragmentation according to this pathway. This list contain instances of *class synthon*\n* ``syntheticPathwayInstance.directParentsSynthPathways`` - syntheticPathways having one stage less than current pathway and thus placed upper in the disconnection hierarchy \n* ``syntheticPathwayInstance.directChildrenSynthPathways`` - syntheticPathways having one stage more than current pathway and thus placed lower in the disconnection hierarchy\n* ``syntheticPathwayInstance.synthPathwayReactions`` - list of reations of the current pathway\n* ``syntheticPathwayInstance.reagentsNumber`` - number of synthons resulted from molecule fragmentation according to the current synthetic pathway \n* ``syntheticPathwayInstance.availabilityRate`` - Availability rate (% of atoms of fragmented molecule coming from available synthons) for the current synthetic pathway\n\n\n**Methods**\n\n* ``syntheticPathwayInstance.printShortReagentSetInfo()`` - print short information about syntheticPathway (RiDs, participating synthons and avaialability rate)\n* ``syntheticPathwayInstance.printDetailedReagentsSetInfo()`` - print detailed information about syntheticPathway\n* ``syntheticPathwayInstance.checkAvailability(self, SynthLib: dict, simTh=-1, FindAnaloguesOfMissingSynthons=True)`` - if  SynthLib containing available synthons is provided, participating synthons will be looked up there and avaialability rate for the pathway will be calculated. Changes will be made directly in the *synthon* and *syntheticPathway* objects\n\nDictionary *synthLib* can be obtained using `UsefulFunctions.readSyntonLib(synthLibFile, Ro2Filtration=False, FindAnaloguesOfMissingBBs=False)` or retrieved as an attribute of the instant of the class fragmentation if the library was provided during class initiation (`fragmentation.SynthLib`).\n\n_**CLASS `fragmentation (ode=\"use_all\", reactionsToWorkWith = \"R1-R13\", maxNumberOfReactionCentersPerFragment = 3, MaxNumberOfStages = 5, FragmentsToIgnore = None,\n                 FindAnaloguesOfMissingSynthons = False, parsedSynthLib = False, SynthLibrary=None, Ro2SynthonsFiltration = False)`**_\n\nThe class to store setup for the fragmentation (including parsed synthons library, if providded).\n\n**Available attributes**\n* ``fragmentationInstance.SynthLib`` - dictionary containig parsed synthons library (if it was provided during class initialization)\n\n**Methods**\n\n* ``fragmentationInstance.cutWithHierarchyStorred(mol)`` - fragment provided molecule (should be RdKit molecule object and not smiles). Return two dictionary - *allSyntheticPathways* and *allSynthons* obtained during fragmentation. \n* ``fragmentationInstance.getReactionForReconstruction()`` - get reconstruction reaction rules based on what was used for fragmentation. \n\n_**CLASS `enumeration (outDir, Synthons=None, reactionSMARTS=None, maxNumberOfReactedSnthons=6, MWupperTh=None, MWlowerTh=None,\n                  minNumberOfNewMols = 1000, nCores=1, analoguesEnumeration=False)`**_\n    \nThe class to store setup for the compounds enumeration.\n\n*reactionSMARTS* should be obtained from fragmentationInstance (fragmentationInstance.getReactionForReconstruction()).\n\n*MWupperTh* and *MWlowerTh* if present allow to filter enumerated compounds in order to store only molecules of specified size.\n\n*nCores* specify number of CPUs that can be used for parallelized compound enumeration.\n\nGeneration of analogues of the specified molecule and unbiased library enumeration based on the provided list of synthons differ slightly in the setup. Therefore, `analoguesEnumeration=True` or `analoguesEnumeration=False` respectively should be specified.  \n\n**Methods**\n\n* ``enumerationInstance.getReconstructedMols(mol)`` - fragment provided molecule (should be RdKit molecule object and not smiles). Return two dictionary - *allSyntheticPathways* and *allSynthons* obtained during fragmentation.\n\n"
      },
      "source": "https://raw.githubusercontent.com/Laboratoire-de-Chemoinformatique/SynthI/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9717818019358102,
      "result": {
        "original_header": "Synt-On",
        "type": "Text_excerpt",
        "value": "All other chapters of this manual concern usage of SyntOn as a python library inside of the customized scripts. \n**Be careful: prior to BBs synthonization the SMILES should be preprocessed and conterions and solvents should be removed. SyntOn-BBs consider every molecule while processing mixture SMILES and for each of them synthons will be generated if possible, therefore take care of them before synthonization**\n \n"
      },
      "source": "https://raw.githubusercontent.com/Laboratoire-de-Chemoinformatique/SynthI/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8508802671633445,
      "result": {
        "original_header": "Bulk BBs classification",
        "type": "Text_excerpt",
        "value": "Also *SyntOn_Classifier.py* can be launched as a comand line tool for the BBs library separation into several sublibraries according to the BBs classes:\n```shell script\n$ python3 SyntOn/src/SyntOn_Classifier.py -h\n```\nBASH2*\nAs a result, separate files for each BB class found in the provided library file will be created. The name contains both class and subclass names separated by underscore - *SecondaryAmines_Cyc-Aliphatic.smi* or *Acid_Aliphatic_Acid.smi*.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Laboratoire-de-Chemoinformatique/SynthI/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.996902891763782,
      "result": {
        "original_header": "SyntOn-BBs",
        "type": "Text_excerpt",
        "value": "SyntOn-BBs allows to perform scaffold analysis of BBs and generate exhaustively all possible synthons from a given BB. The position of the functional groups as well as type of the resulting intermediate product (cation, anion, radical etc.) is encoded in synthon\u2019s SMILES by introducing special system of labels.  \n"
      },
      "source": "https://raw.githubusercontent.com/Laboratoire-de-Chemoinformatique/SynthI/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9935476090240909,
      "result": {
        "original_header": "Scaffold analysis",
        "type": "Text_excerpt",
        "value": "SyntOn-BBs allow to generate meaningful scaffolds from BBs by removing any ring-containing moieties that will not be kept in the reaction product and thus are irrelevant in BB analysis (e.g. protective (Bnz, Cbz, Fmoc) and leaving groups (boronics, oxiranes, etc.))\n```python\n>>> from SyntOn.src.SyntOn_BBs import generateScaffoldForBB\n>>> generateScaffoldForBB(\"OC(=O)C=1C=CC=C(NC(=O)OCC2C=3C=CC=CC3C=4C=CC=CC24)C1\")\n```\nBASH2*\nAlso *SyntOn_BBScaffoldGeneration.py* can be launched as a comand line tool for the scaffold analysis of large BBs library:\n```shell script\n$ python3 SyntOn/SyntOn_BBScaffoldGeneration.py -h \n\nusage: SyntOn_BBScaffoldGeneration [-h] [-i INPUT] [-o OUTPUT]\n\nBBs Scaffold analysis. Generates meaningful BBs scaffolds after removing ring-containing leaving and protective groups. Count scaffolds occurrence in the provided collection of BBs, and construct cumulative scaffold frequency plot\n\noptional arguments: \n\n  -h, --help            show this help message and exit\n  -i INPUT, --input INPUT \n                        Input BBs file.\n  -o OUTPUT, --output OUTPUT\n                        Output files suffix name. \n\nCode implementation:                Yuliana Zabolotna, Alexandre Varnek\n                                    Laboratoire de Ch\u00e9moinformatique, Universit\u00e9 de Strasbourg.\n\nKnowledge base (SMARTS library):    Dmitriy M.Volochnyuk, Sergey V.Ryabukhin, Kostiantyn Gavrylenko, Olexandre Oksiuta \n                                    Institute of Organic Chemistry, National Academy of Sciences of Ukraine\n                                    Kyiv National Taras Shevchenko University\n2021 Strasbourg, Kiev \n\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/Laboratoire-de-Chemoinformatique/SynthI/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9506796054562803,
      "result": {
        "original_header": "BBs synthonization",
        "type": "Text_excerpt",
        "value": "```python\n>>> mainSynthonsGenerator(\"CCOC(=O)C1=C(N)SC=C1C2CC2\", keepPG=True)\n```\nBASH4*\nAs it was mentioned before, solvents and contriones should be removed before using SyntOn. In case if two moieties will be present in input, syntons for both of them will be generated:\nBASH5*\nBASH6*\nAs an exception, several the most popularly occured solvents and contrions in BBs libraries are always ignored if present in a mixture (e.g. acetic, carbonic, formic, oxalic, trifluoroacetic acid etc.):\nBASH7*\nBASH8* \n"
      },
      "source": "https://raw.githubusercontent.com/Laboratoire-de-Chemoinformatique/SynthI/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9927595107343231,
      "result": {
        "original_header": "Bulk synthons generation for the large BBs library",
        "type": "Text_excerpt",
        "value": "In case of large BB library, classification and synthonization of BBs can be performed using command line tool *SyntOn/SyntOn_BBsBulkClassificationAndSynthonization.py*:\n```shell script\n$ python3 SyntOn/SyntOn_BBsBulkClassificationAndSynthonization.py -h\n\nusage: SyntOn_BBsBulkClassificationAndSynthonization [-h] [-i INPUT] [-o OUTPUT] [--keepPG] [--Ro2Filtr] [--nCores NCORES] \n\nBBs classification and Synthons generation for large BBs libraries\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i INPUT, --input INPUT        \n                        Input file containing building blocks smiles and ids.\n  -o OUTPUT, --output OUTPUT\n                        Output files suffix name.\n  --keepPG              Write both protected and unprotected synthons to the output (concerns Boc, Bn, Fmoc, Cbz and Esters protections).  \n  --Ro2Filtr            Write only synthons satisfying Ro2 (MW <= 200, logP <= 2, H-bond donors count <= 2 and H-bond acceptors count <= 4)  \n  --nCores NCORES       Number of available cores for parallel calculations. Memory usage is optimized, so maximal number of parallel processes can be launched.\n\nCode implementation:                Yuliana Zabolotna, Alexandre Varnek\n                                    Laboratoire de Ch\u00e9moinformatique, Universit\u00e9 de Strasbourg.\n\nKnowledge base (SMARTS library):    Dmitriy M.Volochnyuk, Sergey V.Ryabukhin, Kostiantyn Gavrylenko, Olexandre Oksiuta \n                                    Institute of Organic Chemistry, National Academy of Sciences of Ukraine\n                                    Kyiv National Taras Shevchenko University\n2021 Strasbourg, Kiev \n\n```\nAs a result four files will be generated: *outSuffixName_BBmode.smi*, *outSuffixName_Synthmode.smi*, *outSuffixName_NotClassified*, *outSuffixName_NotProcessed*. \n \n"
      },
      "source": "https://raw.githubusercontent.com/Laboratoire-de-Chemoinformatique/SynthI/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9863971890937082,
      "result": {
        "original_header": "SyntOn-Fragmentation",
        "type": "Text_excerpt",
        "value": "This module allows to fragment given molecule and generate synthons that correspond to particular BBs, needed to easily synthesize input compound.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Laboratoire-de-Chemoinformatique/SynthI/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9174796875325809,
      "result": {
        "original_header": "Selecting customized list of reactions for fragmentation",
        "type": "Text_excerpt",
        "value": "Only the reactions, selected by user will be used for fragmentation. The list of RiDs should be specified using argument `reactionsToWorkWith`. The list should be provided inside \" \"; intervals separated via \"-\" and \",\" can be used (e.g. \"R1-R10,R11.1-R11.4,R12.1\"). Specification \"R1\" implicitly includes all (R1.1, R1.2, R1.3 and R1.4) subreactions in the group R1.\n  \n```python\n>>> SyntOnfragmentorIncludeOnlyR1_R9 = fragmentation(fragmentationMode=\"include_only\", reactionsToWorkWith = \"R1-R9\", \n...                                                   maxNumberOfReactionCentersPerFragment=3, MaxNumberOfStages = 5, \n...                                                   SynthLibrary=SynthLibrary, FragmentsToIgnore=FragmentsToIgnore, \n...                                                   FindAnaloguesOfMissingSynthons=True) \n\n>>> allSyntheticPathways, allSynthons = fragmentMolecule(smi, SyntOnfragmentorIncludeOnlyR1_R9) \n\n>>> for key in allSyntheticPathways:  \n...     allSyntheticPathways[key].printShortReagentSetInfo() \n```\nBASH2*\n**Mode \"exclude_some\"** \nThe list of RiDs of reactions that need to be excluded should be specified using argument `reactionsToWorkWith`. \nIn the example below all reactions except R5.1 (nH-SN alkylation of NH-heterocycles) will be used for fragmentaion. \n```python\n>>> SyntOnfragmentorExcludeSomeR5_1 = fragmentation(fragmentationMode=\"exclude_some\", reactionsToWorkWith = \"R5.1\",\n...                                                 maxNumberOfReactionCentersPerFragment=3, MaxNumberOfStages = 5, \n...                                                 SynthLibrary=SynthLibrary, FragmentsToIgnore=FragmentsToIgnore, \n...                                                 FindAnaloguesOfMissingSynthons=True) \n\n>>> allSyntheticPathways, allSynthons = fragmentMolecule(smi, SyntOnfragmentorExcludeSomeR5_1) \n\n>>> for key in allSyntheticPathways:  \n...     allSyntheticPathways[key].printShortReagentSetInfo() \n```\nBASH4*\n**Mode \"one_by_one\"**\nIn this mode user-provided reactions are applied in the specified order; each bond can be cut using onlly one reaction rule. If `reactionsToWorkWith` is not specified, than all reactions in the default order will be applied.\n```python\n>>> SyntOnfragmentorOneByOneR2_R10_R5 = fragmentation(fragmentationMode=\"one_by_one\", reactionsToWorkWith = \"R2,R10,R5\",\n...                                                   maxNumberOfReactionCentersPerFragment=3, MaxNumberOfStages = 5, \n...                                                   SynthLibrary=SynthLibrary, FragmentsToIgnore=FragmentsToIgnore, \n...                                                   FindAnaloguesOfMissingSynthons=True) \n\n>>> allSyntheticPathways, allSynthons = fragmentMolecule(smi, SyntOnfragmentorOneByOneR2_R10_R5 ) \n\n>>> for key in allSyntheticPathways:  \n...     allSyntheticPathways[key].printShortReagentSetInfo() \n```\nBASH6*\nIf there are several ways to cut particular chemical bond, it will be cut only according to the rule that comes first in the customized ordered list of reactions to use. \nBASH7*\nBASH8*\n \n"
      },
      "source": "https://raw.githubusercontent.com/Laboratoire-de-Chemoinformatique/SynthI/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9942470211373191,
      "result": {
        "original_header": "Bulk compounds fragmentation",
        "type": "Text_excerpt",
        "value": "Library of compounds can be fragmented using *SyntOn_BulkFragmentationEnumerationAndAnaloguesDesign.py* script.\n```shell script\n$ python3 SyntOn/SyntOn_BulkFragmentationEnumerationAndAnaloguesDesign.py -h\n\nusage: SyntOn_BulkFragmentationEnumerationAndAnaloguesDesign [-h] [-i INPUT] [-oD OUTDIR] [--SynthLibrary SYNTHLIBRARY] \n                                                     [--nCores NCORES]  [--analoguesLibGen] [--strictAvailabilityMode]\n                                                     [--simBBselection] [--Ro2Filtration] [--fragmentationMode  MODE] [--simTh SIMTH]\n                                                     [--reactionsToWorkWith REACTIONSTOWORKWITH] [--MaxNumberOfStages MAXNUMBEROFSTAGES]\n                                                     [--maxNumberOfReactionCentersPerFragment MAXNUMBEROFREACTIONCENTERSPERFRAGMENT]\n\nCompound fragmentaitiona and analogues generation. \n\noptional arguments:\n  -h, --help            show this help message and exit       \n  -i INPUT, --input INPUT        \n                        input file        \n  -oD OUTDIR, --outDir OUTDIR   \n                        Output directory to write analogues. \n  --SynthLibrary SYNTHLIBRARY                        \n                        Library of available synthons. Generated from avaialable BBs using SyntOn_BBsBulkClassificationAndSynthonization.py  \n  --nCores NCORES       Number of CPUs available for parallelization.          \n  --simTh SIMTH         Similarity threshold for BB analogues search. If not specified, only positional variational approach will be used for BBs search             \n  --analoguesLibGen     Generate library of analogues from input mol                                                       \n  --strictAvailabilityMode         \n                        Only fully synthesizable analogues are generated. Alternatively, unavailable synthons resulted from compound fragmentation will still be used for its analogues generation.                                              \n  --Ro2Filtration       Filter input synthons library by Ro2 (MW <= 200, logP <= 2, H-bond donors count <= 2 and H-bond acceptors count <= 4) \n  --fragmentationMode FRAGMENTATIONMODE \n                        Mode of fragmentation (defines how the reaction list is specified)          \n                        Possible options: use_all, include_only, exclude_some, one_by_one      \n                        (default: use_all)        \n  --reactionsToWorkWith REACTIONSTOWORKWITH    \n                        List of RiDs to be used.        \n                        (default: R1-R13 (all reactions)    \n  --desiredNumberOfNewMols DESIREDNUMBEROFNEWMOLS\n                        Desired number of new compounds to be generated (in case of anaogues generation - number of analogues per compound).\n                        (default: 1000)             \n  --MaxNumberOfStages MAXNUMBEROFSTAGES           \n                        Maximal number of stages during fragmentation.        \n                        (default: 5)           \n  --maxNumberOfReactionCentersPerFragment MAXNUMBEROFREACTIONCENTERSPERFRAGMENT  \n                        Maximal number of reaction centers per fragment.    \n                        (default: 3)\n  --enumerationMode     Enumerate library using input synthons \n  \n  --MWupperTh MWUPPERTH\n                        Maximum molecular weight allowed for generated compounds.\n                        (default: 1000)\n  --MWlowerTh MWLOWERTH\n                        Minimum molecular weight allowed for generated compounds.\n                        (default: 100)  \n          \n\n_________________________________________________________________________________________________________________________ \n\nCode implementation:                Yuliana Zabolotna, Alexandre Varnek             \n                                    Laboratoire de Ch\u00e9moinformatique, Universit\u00e9 de Strasbourg.        \nKnowledge base (SMARTS library):    Dmitriy M.Volochnyuk, Sergey V.Ryabukhin, Kostiantyn Gavrylenko, Olexandre Oksiuta   \n                                    Institute of Organic Chemistry, National Academy of Sciences of Ukraine    \n                                    Kyiv National Taras Shevchenko University      \n2021 Strasbourg, Kiev   \n\n```\nExample of launch:\nBASH2*\nIt produces 2 files: \n* *InputName_out* - contains only one synthetic pathway per compound (selected by the availability rate)\n \n"
      },
      "source": "https://raw.githubusercontent.com/Laboratoire-de-Chemoinformatique/SynthI/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9842699225879963,
      "result": {
        "original_header": "SyntOn-Enumeration",
        "type": "Text_excerpt",
        "value": "SyntOn-Enumeration applies the list of the reaction rules in order to generate the full combinatorial library of all \ncompounds that can be synthesized using a given set of synthons.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Laboratoire-de-Chemoinformatique/SynthI/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.976590944618511,
      "result": {
        "original_header": "Generate analogues of a compound",
        "type": "Text_excerpt",
        "value": "Prior to analoggues generation, Fragmentor (Instant of the class fragmentation) should be initialized. It will  define \nthe list of reactions used for fragmentation and library of availble synthons that will be used to find synthons for \nanalogues synthesis.\nFragmentsToIgnore option define the list of fragments to ignore; in case if bond disconnection result in such fragment, \nthis bond will not be disconnected. It should be defined by Markush structure (two copies of the same fragment should be \ngenerated by adding * and *[V] at the open end of the structure).   \n```python\n>>> from SyntOn.src.SyntOn import * \n\n>>> SynthLibrary = \"/pathToTheSynthonsLib/outENSynthmode.smi\"\n>>> FragmentsToIgnore = [\"*C(C)C\", \"*C(=O)C\", \"*C=O\", \"*[V]C=O\", \"*[V]C(C)C\", \"*[V]C(=O)C\"]\n\n>>> SyntOnfragmentor = fragmentation(fragmentationMode=\"use_all\", maxNumberOfReactionCentersPerFragment=3, MaxNumberOfStages = 5, \n...                                     SynthLibrary=SynthLibrary, FragmentsToIgnore=FragmentsToIgnore, \n...                                     FindAnaloguesOfMissingSynthons=True)\n```\nBASH2*\nLatter, function `analoguesLibraryGeneration(Smiles_molNameTuple, SyntOnfragmentor, outDir, simTh=-1, strictAvailabilityMode=False, desiredNumberOfNewMols=1000)` can be used.\nIf strictAvailablilityMode is turned on only fully synthesizable analogues are generated. \nAlternatively, unavailable synthons resulted from compound fragmentation will still be used for the analogues generation. \n \n"
      },
      "source": "https://raw.githubusercontent.com/Laboratoire-de-Chemoinformatique/SynthI/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9921966711351375,
      "result": {
        "original_header": "Bulk analogues enumeration",
        "type": "Text_excerpt",
        "value": "Analogues for each compound from defined library can be generated using *SyntOn_BulkFragmentationEnumerationAndAnaloguesDesign.py* script.\n```shell script\n$ python3 SyntOn/SyntOn_BulkFragmentationEnumerationAndAnaloguesDesign.py -h\n\nusage: SyntOn_BulkFragmentationEnumerationAndAnaloguesDesign [-h] [-i INPUT] [-oD OUTDIR] [--SynthLibrary SYNTHLIBRARY] \n                                                     [--nCores NCORES]  [--analoguesLibGen] [--strictAvailabilityMode]\n                                                     [--simBBselection] [--Ro2Filtration] [--fragmentationMode  MODE] [--simTh SIMTH]\n                                                     [--reactionsToWorkWith REACTIONSTOWORKWITH] [--MaxNumberOfStages MAXNUMBEROFSTAGES]\n                                                     [--maxNumberOfReactionCentersPerFragment MAXNUMBEROFREACTIONCENTERSPERFRAGMENT]\n\nCompound fragmentaitiona and analogues generation. \n\noptional arguments:\n  -h, --help            show this help message and exit       \n  -i INPUT, --input INPUT        \n                        input file        \n  -oD OUTDIR, --outDir OUTDIR   \n                        Output directory to write analogues. \n  --SynthLibrary SYNTHLIBRARY                        \n                        Library of available synthons. Generated from avaialable BBs using SyntOn_BBsBulkClassificationAndSynthonization.py  \n  --nCores NCORES       Number of CPUs available for parallelization.          \n  --simTh SIMTH         Similarity threshold for BB analogues search. If not specified, only positional variational approach will be used for BBs search             \n  --analoguesLibGen     Generate library of analogues from input mol                                                       \n  --strictAvailabilityMode         \n                        Only fully synthesizable analogues are generated. Alternatively, unavailable synthons resulted from compound fragmentation will still be used for its analogues generation.                                              \n  --Ro2Filtration       Filter input synthons library by Ro2 (MW <= 200, logP <= 2, H-bond donors count <= 2 and H-bond acceptors count <= 4) \n  --fragmentationMode FRAGMENTATIONMODE \n                        Mode of fragmentation (defines how the reaction list is specified)          \n                        Possible options: use_all, include_only, exclude_some, one_by_one      \n                        (default: use_all)        \n  --reactionsToWorkWith REACTIONSTOWORKWITH    \n                        List of RiDs to be used.        \n                        (default: R1-R13 (all reactions)    \n  --desiredNumberOfNewMols DESIREDNUMBEROFNEWMOLS\n                        Desired number of new compounds to be generated (in case of anaogues generation - number of analogues per compound).\n                        (default: 1000)             \n  --MaxNumberOfStages MAXNUMBEROFSTAGES           \n                        Maximal number of stages during fragmentation.        \n                        (default: 5)           \n  --maxNumberOfReactionCentersPerFragment MAXNUMBEROFREACTIONCENTERSPERFRAGMENT  \n                        Maximal number of reaction centers per fragment.    \n                        (default: 3)\n  --enumerationMode     Enumerate library using input synthons \n  \n  --MWupperTh MWUPPERTH\n                        Maximum molecular weight allowed for generated compounds.\n                        (default: 1000)\n  --MWlowerTh MWLOWERTH\n                        Minimum molecular weight allowed for generated compounds.\n                        (default: 100)  \n          \n\n_________________________________________________________________________________________________________________________ \n\nCode implementation:                Yuliana Zabolotna, Alexandre Varnek             \n                                    Laboratoire de Ch\u00e9moinformatique, Universit\u00e9 de Strasbourg.        \nKnowledge base (SMARTS library):    Dmitriy M.Volochnyuk, Sergey V.Ryabukhin, Kostiantyn Gavrylenko, Olexandre Oksiuta   \n                                    Institute of Organic Chemistry, National Academy of Sciences of Ukraine    \n                                    Kyiv National Taras Shevchenko University      \n2021 Strasbourg, Kiev   \n\n```\nExample of launch:\nBASH2*\nIt will create a list of files for each compound from the preovided file: *AnalogsForMol\"n\".smi* and *SynthonsForAnalogsGenerationForMol\"n\".smi*, where n is a line number of the molecule in the initial file.  \nThe first file simply contains generated compounds, while the second one features the synthons and respective availble BBs:\nBASH3*\nThe lines, containing RiDs specify the synthetic path, according to which analogues will be generated. In the first column \nof the file smiles of the synthon used for new compounds generation is given. Second column provides the IDs of the\n availble BBs producing this synthon. If the synthons has originated from fragmentation of the initial compound in the \n last column it will be specified *originalBB*, if synthons was selected as an analogue of the original fragment *analog*\n will be stated there and smiles of the original synthon will be provided in the third column. \n \n"
      },
      "source": "https://raw.githubusercontent.com/Laboratoire-de-Chemoinformatique/SynthI/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Laboratoire-de-Chemoinformatique/SynthI/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 23
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Laboratoire-de-Chemoinformatique/Synt-On/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Laboratoire-de-Chemoinformatique/Synt-On"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Synt-On"
      },
      "source": "https://raw.githubusercontent.com/Laboratoire-de-Chemoinformatique/SynthI/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "Table of Contents"
        ],
        "type": "Text_excerpt",
        "value": "The full list of packages is listed in the file SyntOn_environment.yml. You can create required environlent using this command, in which you need to replace \"user\" by your username:\n\n```shell script\n$ conda env create -f SyntOn_environment.yml  -p /home/[user]/anaconda3/envs/synton_env\n```\n\nActivate the environment using the following command :\n\n```shell script\n$ conda activate synton_env\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Laboratoire-de-Chemoinformatique/SynthI/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Compounds preprocessing",
        "parent_header": [
          "Table of Contents",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "All BBs structures need to be sanitized and standardized independently by the user prior to SyntOn usage. Solvents and counterions should be deleted. There is no need to generate major tautomer form as soon as SyntOn will do it for each generated synthons separately.\n"
      },
      "source": "https://raw.githubusercontent.com/Laboratoire-de-Chemoinformatique/SynthI/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Fragmentation with a default setup",
        "parent_header": [
          "Table of Contents",
          "SyntOn-Fragmentation"
        ],
        "type": "Text_excerpt",
        "value": "[Back to Table of Contents](https://github.com/Laboratoire-de-Chemoinformatique/Synt-On#table-of-contents)\n\nIn order to perform compoound fragmentation, first, the Fragmentor (Instant of the class fragmentation) should be\n initialized.\n \n\"FragmentsToIgnore\" option define the list of fragments that should be avoided during fragmentation; in case if bond \ndisconnection result in such fragment, this bond will not be disconnected. It should be defined by Markush structure \n(two copies of the same fragment should be generated by adding * and *[V] at the open end of the structure)\n\n```python\n>>> from SyntOn.src.SyntOn import * \n\n>>> SynthLibrary = \"/pathToTheSynthonsLib/outENSynthmode.smi\"\n>>> FragmentsToIgnore = [\"*C(C)C\", \"*C(=O)C\", \"*C=O\", \"*[V]C=O\", \"*[V]C(C)C\", \"*[V]C(=O)C\"]\n\n>>> SyntOnfragmentor = fragmentation(fragmentationMode=\"use_all\", maxNumberOfReactionCentersPerFragment=3, MaxNumberOfStages = 5, \n...                                     SynthLibrary=SynthLibrary, FragmentsToIgnore=FragmentsToIgnore, \n...                                     FindAnaloguesOfMissingSynthons=True)\n```\n```text\nProcessing BB library. It may take a few minutes, depending on the library size\n\nLib BB reading time:\n0:01:33.865876\n```\nLatter `SyntOnfragmentor` cna be used to fragment different molecules with a help of function `fragmentMolecule (smiles, SyntOnfragmentor, simTh=-1)`\n\n```python\n>>> smi = \"NC(=O)OC(CN1N=CN=N1)C1=CC=CC=C1Cl\"\n>>> allSyntheticPathways, allSynthons = fragmentMolecule(smi, SyntOnfragmentor)\n# here some RdKit messages can appear, they can be ignored\n```\n\nBoth `allSyntheticPathways` and `allSynthons` are dictionaries as values containing instances of the classes *synthon* and *syntheticPathway* ( [see detailes here](https://github.com/Laboratoire-de-Chemoinformatique/Synt-On#detailed-classes-description) )\n \n```python\n>>> allSynthons\n \n{'InitMol': <SyntOn.src.SyntOn.synthon at 0x7fcb4588b430>,\n 'N[CH:10]=O': <SyntOn.src.SyntOn.synthon at 0x7fcb4588b550>,\n 'Clc1ccccc1C(Cn1ncnn1)[OH:20]': <SyntOn.src.SyntOn.synthon at 0x7fcb4588bbb0>,\n 'c1nn[nH:20]n1': <SyntOn.src.SyntOn.synthon at 0x7fcb4588b6a0>,\n 'NC(=O)OC(c1ccccc1Cl)[CH3:10]': <SyntOn.src.SyntOn.synthon at 0x7fcb4588b3d0>,\n 'NC(=O)OC(c1ccccc1Cl)[CH3:21]': <SyntOn.src.SyntOn.synthon at 0x7fcb4588beb0>,\n 'Clc1ccccc1C([CH3:10])[OH:20]': <SyntOn.src.SyntOn.synthon at 0x7fcb3007b520>,\n 'Clc1ccccc1C([OH:20])[CH3:21]': <SyntOn.src.SyntOn.synthon at 0x7fcb3007be80>,\n 'c1nnn(C[CH2:10][OH:20])n1': <SyntOn.src.SyntOn.synthon at 0x7fcb3007ba00>, \n 'Clc1cccc[cH:20]1': <SyntOn.src.SyntOn.synthon at 0x7fcb3007ba30>,\n 'Clc1ccccc1[CH2:10][OH:20]': <SyntOn.src.SyntOn.synthon at 0x7fcb3007bdf0>,\n 'c1nnn([CH3:20])n1': <SyntOn.src.SyntOn.synthon at 0x7fcb3007bc70>} \n```\nThe detailed information about each synthon can be retreived:\n```python\n>>> allSynthons['c1nnn(C[CH2:10][OH:20])n1'].printSynthonInfo()    \n```\n```text\n__________________________________________________________ \n                  Synthon Information         \n__________________________________________________________\n\nSynthon: c1nnn(C[CH2:10][OH:20])n1   \nSynthon was not found in provided library of building blocks. 2 analog(s) has/have been found \nBB analogues: \nC[CH:10](c1nc[nH]n1)[OH:20] EN300-137277 \nC[CH:10](c1c[nH]nn1)[OH:20] EN300-7472008 \nParent synthons: Clc1ccccc1C(Cn1ncnn1)[OH:20]\nChildren synthons: -\n```\nFor the synthetic pathways there is a way to display short and detailed information\n```python\n>>> for key in allSyntheticPathways:\n...     allSyntheticPathways[key].printShortReagentSetInfo()\n```\n```text\nR2.2_0 N[CH:10]=O.Clc1ccccc1C(Cn1ncnn1)[OH:20] Availability rate (% of atoms of fragmented molecule coming from available synthons): 0.17\nR5.1_0 c1nn[nH:20]n1.NC(=O)OC(c1ccccc1Cl)[CH3:10] Availability rate (% of atoms of fragmented molecule coming from available synthons): 0.0 \nR5.2_0 c1nn[nH:20]n1.NC(=O)OC(c1ccccc1Cl)[CH3:21] Availability rate (% of atoms of fragmented molecule coming from available synthons): 0.0\nR2.2_0|R5.1_0 c1nn[nH:20]n1.Clc1ccccc1C([CH3:10])[OH:20].N[CH:10]=O Availability rate (% of atoms of fragmented molecule coming from available synthons): 0.72 \nR2.2_0|R5.2_0 c1nn[nH:20]n1.Clc1ccccc1C([OH:20])[CH3:21].N[CH:10]=O Availability rate (% of atoms of fragmented molecule coming from available synthons): 0.17 \nR10.1_0|R2.2_0 c1nnn(C[CH2:10][OH:20])n1.Clc1cccc[cH:20]1.N[CH:10]=O Availability rate (% of atoms of fragmented molecule coming from available synthons): 0.17\nR10.1_1|R2.2_0 Clc1ccccc1[CH2:10][OH:20].c1nnn([CH3:20])n1.N[CH:10]=O Availability rate (% of atoms of fragmented molecule coming from available synthons): 0.17 \n```\nThis synthetic pathways are organized in a disconnection hierarchy, that can be navigated with the help of several functions: \n* *getLongestSyntheticPathways()* - creates a list of the synthetic pathways including the largest number of stages (leafs of the hierarchy)\n\n    ```python\n    >>> LongestSyntheticPathways = getLongestSyntheticPathways(allSyntheticPathways)\n    >>> for ind,reagentSet in enumerate(LongestSyntheticPathways):\n    ...     print(\"reagentSet \" + str(ind) + \" :\")\n    ...     reagentSet.printShortReagentSetInfo()\n    ```  \n    ```text\n    reagentSet 0 :\n    R2.2_0|R5.1_0 c1nn[nH:20]n1.Clc1ccccc1C([CH3:10])[OH:20].N[CH:10]=O Availability rate (% of atoms of fragmented molecule coming from available synthons): 0.72\n    reagentSet 1 :\n    R2.2_0|R5.2_0 c1nn[nH:20]n1.Clc1ccccc1C([OH:20])[CH3:21].N[CH:10]=O Availability rate (% of atoms of fragmented molecule coming from available synthons): 0.17\n    reagentSet 2 :\n    R10.1_0|R2.2_0 c1nnn(C[CH2:10][OH:20])n1.Clc1cccc[cH:20]1.N[CH:10]=O Availability rate (% of atoms of fragmented molecule coming from available synthons): 0.17 \n    reagentSet 3 : \n    R10.1_1|R2.2_0 Clc1ccccc1[CH2:10][OH:20].c1nnn([CH3:20])n1.N[CH:10]=O Availability rate (% of atoms of fragmented molecule coming from available synthons): 0.17\n    ```\n  \n* *getShortestSyntheticPathways()* - creates a list of the synthetic pathways including only one stage (roots of the hierarchy)\n   \n    ```python\n    >>> firstLevelSynthonsCombinations = getShortestSyntheticPathways(allSyntheticPathways) \n    >>> for ind,reagentSet in enumerate(firstLevelSynthonsCombinations):\n    ...     print(\"reagentSet \" + str(ind) + \" :\")\n    ...     reagentSet.printShortReagentSetInfo()\n     ```\n     ```text\n    reagentSet 0 :\n    R2.2_0 N[CH:10]=O.Clc1ccccc1C(Cn1ncnn1)[OH:20] Availability rate (% of atoms of fragmented molecule coming from available synthons): 0.17\n    reagentSet 1 :   \n    R5.1_0 c1nn[nH:20]n1.NC(=O)OC(c1ccccc1Cl)[CH3:10] Availability rate (% of atoms of fragmented molecule coming from available synthons): 0.0\n    reagentSet 2 : \n    R5.2_0 c1nn[nH:20]n1.NC(=O)OC(c1ccccc1Cl)[CH3:21] Availability rate (% of atoms of fragmented molecule coming from available synthons): 0.0\n     ```\n* *findShortestSynthPathWithAvailableBBlib()* - creates a list of the synthetic pathways having the highest value of Availability rate (% of atoms of fragmented molecule coming from available synthons)\n\n     ```python\n    >>> shortestSynthesis = findShortestSynthPathWithAvailableBBlib(firstLevelSynthonsCombinations ,  showAll=True) \n\n    1 equivalent synthetic pathway(s) have been found.\n\n    >>> for ind,reagentSet in enumerate(shortestSynthesis):\n    ...     print(\"reagentSet \" + str(ind) + \" :\")\n    ...     reagentSet.printShortReagentSetInfo()\n    ```\n    ```text\n    reagentSet 0 :\n    R2.2_0|R5.1_0 c1nn[nH:20]n1.Clc1ccccc1C([CH3:10])[OH:20].N[CH:10]=O Availability rate (% of atoms of fragmented molecule coming from available synthons): 0.72 \n    ```\nMethod *printDetailedReagentsSetInfo()* of the class *syntheticPathway* ( [see detailes here](https://github.com/Laboratoire-de-Chemoinformatique/Synt-On#detailed-classes-description) ) can be used for retreiving detailed information about the selected synthetic pathway: \n\n```python\n>>> shortestSynthesis[0].printDetailedReagentsSetInfo()  \n```\n```text\n**********************************************************\nReagent set Information R2.2_0|R5.1_0\n********************************************************** \nReactions: O-Acylation by O=C(+)-X reagents->nH-SN alkylation  \nRequired Synthons: c1nn[nH:20]n1.Clc1ccccc1C([CH3:10])[OH:20].N[CH:10]=O \nNumber of reagents: 3  \nNumber of stages: 2    \nAvailability rate (% of atoms of fragmented molecule coming from available synthons): 0.72\nParent reagent sets:  \nReactions: R2.2_0 O-Acylation by O=C(+)-X reagents ||| Participating synthons: N[CH:10]=O.Clc1ccccc1C(Cn1ncnn1)[OH:20]\nReactions: R5.1_0 nH-SN alkylation ||| Participating synthons: c1nn[nH:20]n1.NC(=O)OC(c1ccccc1Cl)[CH3:10]   \n\n__________________________________________________________ \n                  Synthon Information       \n__________________________________________________________ \n\nSynthon: c1nn[nH:20]n1\nSynthon was not found in provided library of building blocks. 4 analog(s) has/have been found\nBB analogues:  \nc1nnc[nH:20]1 EN300-20608 \nc1c[nH:20]nn1 EN300-27201  \nCc1nnn[nH:20]1 EN300-104530    \nNc1nnn[nH:20]1 EN300-33999 \nParent synthons: Clc1ccccc1C(Cn1ncnn1)[OH:20]\nChildren synthons: -     \n\n__________________________________________________________      \n                  Synthon Information   \n__________________________________________________________         \n\nSynthon: Clc1ccccc1C([CH3:10])[OH:20] \nAvailable. Corresponding BBs: EN300-43119  \nParent synthons: Clc1ccccc1C(Cn1ncnn1)[OH:20] \nChildren synthons: -        \n\n__________________________________________________________      \n                  Synthon Information   \n__________________________________________________________    \n     \nSynthon: N[CH:10]=O\nAvailable. Corresponding BBs: EN300-50197 \nParent synthons: -   \nChildren synthons: -      \n```\n"
      },
      "source": "https://raw.githubusercontent.com/Laboratoire-de-Chemoinformatique/SynthI/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Enumerate library of all possible compounds using given set of synthons",
        "parent_header": [
          "Table of Contents",
          "SyntOn-Enumeration"
        ],
        "type": "Text_excerpt",
        "value": "[Back to Table of Contents](https://github.com/Laboratoire-de-Chemoinformatique/Synt-On#table-of-contents)\n\nNew compounds can enumerated from defined library of synthons using *SyntOn_BulkFragmentationEnumerationAndAnaloguesDesign.py* script.\n\n```shell script\n$ python3 SyntOn/SyntOn_BulkFragmentationEnumerationAndAnaloguesDesign.py -h\n\nusage: SyntOn_BulkFragmentationEnumerationAndAnaloguesDesign [-h] [-i INPUT] [-oD OUTDIR] [--SynthLibrary SYNTHLIBRARY] \n                                                     [--nCores NCORES]  [--analoguesLibGen] [--strictAvailabilityMode]\n                                                     [--simBBselection] [--Ro2Filtration] [--fragmentationMode  MODE] [--simTh SIMTH]\n                                                     [--reactionsToWorkWith REACTIONSTOWORKWITH] [--MaxNumberOfStages MAXNUMBEROFSTAGES]\n                                                     [--maxNumberOfReactionCentersPerFragment MAXNUMBEROFREACTIONCENTERSPERFRAGMENT]\n\nCompound fragmentaitiona and analogues generation. \n\noptional arguments:\n  -h, --help            show this help message and exit       \n  -i INPUT, --input INPUT        \n                        input file        \n  -oD OUTDIR, --outDir OUTDIR   \n                        Output directory to write analogues. \n  --SynthLibrary SYNTHLIBRARY                        \n                        Library of available synthons. Generated from avaialable BBs using SyntOn_BBsBulkClassificationAndSynthonization.py  \n  --nCores NCORES       Number of CPUs available for parallelization.          \n  --simTh SIMTH         Similarity threshold for BB analogues search. If not specified, only positional variational approach will be used for BBs search             \n  --analoguesLibGen     Generate library of analogues from input mol                                                       \n  --strictAvailabilityMode         \n                        Only fully synthesizable analogues are generated. Alternatively, unavailable synthons resulted from compound fragmentation will still be used for its analogues generation.                                              \n  --Ro2Filtration       Filter input synthons library by Ro2 (MW <= 200, logP <= 2, H-bond donors count <= 2 and H-bond acceptors count <= 4) \n  --fragmentationMode FRAGMENTATIONMODE \n                        Mode of fragmentation (defines how the reaction list is specified)          \n                        Possible options: use_all, include_only, exclude_some, one_by_one      \n                        (default: use_all)        \n  --reactionsToWorkWith REACTIONSTOWORKWITH    \n                        List of RiDs to be used.        \n                        (default: R1-R13 (all reactions)    \n  --desiredNumberOfNewMols DESIREDNUMBEROFNEWMOLS\n                        Desired number of new compounds to be generated (in case of anaogues generation - number of analogues per compound).\n                        (default: 1000)             \n  --MaxNumberOfStages MAXNUMBEROFSTAGES           \n                        Maximal number of stages during fragmentation.        \n                        (default: 5)           \n  --maxNumberOfReactionCentersPerFragment MAXNUMBEROFREACTIONCENTERSPERFRAGMENT  \n                        Maximal number of reaction centers per fragment.    \n                        (default: 3)\n  --enumerationMode     Enumerate library using input synthons \n  \n  --MWupperTh MWUPPERTH\n                        Maximum molecular weight allowed for generated compounds.\n                        (default: 1000)\n  --MWlowerTh MWLOWERTH\n                        Minimum molecular weight allowed for generated compounds.\n                        (default: 100)  \n          \n\n_________________________________________________________________________________________________________________________ \n\nCode implementation:                Yuliana Zabolotna, Alexandre Varnek             \n                                    Laboratoire de Ch\u00e9moinformatique, Universit\u00e9 de Strasbourg.        \nKnowledge base (SMARTS library):    Dmitriy M.Volochnyuk, Sergey V.Ryabukhin, Kostiantyn Gavrylenko, Olexandre Oksiuta   \n                                    Institute of Organic Chemistry, National Academy of Sciences of Ukraine    \n                                    Kyiv National Taras Shevchenko University      \n2021 Strasbourg, Kiev   \n\n```\n\nExample of launch:\n```shell script\npython3 ../SyntOn/SyntOn_BulkFragmentationEnumerationAndAnaloguesDesign.py -i SynthonsForLibraryGeneration.smi \n--nCores 10 -oD /data/yuliana/DrugsFragmentation/newLaunch --maxNumberOfStages 5 --desiredNumberOfNewMols 1000 \n--enumerationMode --MWupperTh 460 --MWlowerTh 200  \n```\nIt will create a list of temporary files, that will be combine into one final file *FinalOut_allEnumeratedCompounds_DuplicatesCanBePresent.smi*"
      },
      "source": "https://raw.githubusercontent.com/Laboratoire-de-Chemoinformatique/SynthI/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8385172043860124,
      "result": {
        "original_header": "SyntOn-Classifier",
        "type": "Text_excerpt",
        "value": "This module returns the list of classes assigned to the given BB. \n```python\n>>> from SyntOn.src.SyntOn_Classifier import BBClassifier\n>>> BBClassifier(molSmiles=\"CCOC(=O)C1=C(N)SC=C1C2CC2\")\n```\nBASH2*\nIf the SMILES cannot be processed by RdKit, the following messages will appear:\n \n"
      },
      "source": "https://raw.githubusercontent.com/Laboratoire-de-Chemoinformatique/SynthI/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8654082236367815,
      "result": {
        "original_header": "BBs synthonization",
        "type": "Text_excerpt",
        "value": "If used inside a custom forkflow user may want to get a python object that will be used latter in the script. In this case specify option `returnDict=True`:\n```python\n>>> synthonsDictionary = mainSynthonsGenerator(\"CCOC(=O)C1=C(N)SC=C1C2CC2\", returnDict=True)\n\n# here some RdKit messages can appear, they can be ignored\n\n>>> synthonsDictionary\n\n{'O=C(O)c1c(C2CC2)csc1[NH2:20]': {'Bifunctional_Amine_Ester'}, \n'O=C(O)c1c(C2CC2)csc1[NH2:40]': {'Bifunctional_Amine_Ester'},\n'O=[CH:10]c1c(C2CC2)csc1[NH2:20]': {'Bifunctional_Amine_Ester'},\n'O=[CH:10]c1c(C2CC2)csc1[NH2:40]': {'Bifunctional_Amine_Ester'}}\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/Laboratoire-de-Chemoinformatique/SynthI/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8726280750905493,
      "result": {
        "original_header": "BBs synthonization",
        "type": "Text_excerpt",
        "value": "Resulted synthons can be filtered according to the Ro2:\n```python\n>>> from SyntOn.src.UsefulFunctions import Ro2Filtration\n>>> Ro2Filtration(\"O=C(O)c1c(C2CC2)csc1[NH2:20]\")\n\n(True, ['MolW=183.035399528', 'LogP=1.9059000000000001', 'HDC=2', 'HAC=4']) \n\n>>> Ro2Filtration(\"C1CCC2(C1)CCC[CH2:10]C2\")\n\n(False, ['MolW=138.140850576', 'LogP=3.510900000000002', 'HDC=0', 'HAC=0'])\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/Laboratoire-de-Chemoinformatique/SynthI/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Laboratoire-de-Chemoinformatique/Synt-On/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "BSD 3-Clause \"New\" or \"Revised\" License",
        "spdx_id": "BSD-3-Clause",
        "type": "License",
        "url": "https://api.github.com/licenses/bsd-3-clause",
        "value": "https://api.github.com/licenses/bsd-3-clause"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Synt-On"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "Laboratoire-de-Chemoinformatique"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 158070,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Laboratoire-de-Chemoinformatique/SynthI/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "System requirements",
        "parent_header": [
          "Table of Contents",
          "Prerequisites"
        ],
        "type": "Text_excerpt",
        "value": "SyntOn is a suit of scripts written in python. It should be used with the following dependencies: python 3.9.0, rdkit 2021.03.1, matplotlib 3.4.2  and numpy 1.20.2. \n\nSeveral build-in python modules are also used, but they are usually installed by default (*datetime, os, time, random, re, resource, sys, multiprocessing, collections, xml*). All other modules are custom written and provided within the package. \n\nThe scripts were run in a linux workstation with 15 processors.\n"
      },
      "source": "https://raw.githubusercontent.com/Laboratoire-de-Chemoinformatique/SynthI/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 02:42:23",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 68
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}