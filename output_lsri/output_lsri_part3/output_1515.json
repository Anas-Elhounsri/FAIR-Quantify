{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/indranillab/pseudoga"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-11-11T07:33:46Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-04-08T14:19:31Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Cell pseudotime reconstruction based on genetic algorithm"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9484800310820014,
      "result": {
        "original_header": "pseudoga",
        "type": "Text_excerpt",
        "value": "The package pseudoga can be used to perform pseudotime analysis on single\ncell gene expression data. Given a homogeneous population of cells, the cells can be ordered\nto form a trajectory. Given a heterogeneous population and cell cluster ids, the packages\ncan be used to find a tree structure based on pseudotime ordering of cells. \nInput must be provided as SingleCellExperiment object with the expression matrix denoting rows as genes \nand columns as cells. \n"
      },
      "source": "https://raw.githubusercontent.com/indranillab/pseudoga/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9736465797754087,
      "result": {
        "original_header": "Recommendations",
        "type": "Text_excerpt",
        "value": "For large number of cells, \"pseudoga_parallel\" is more suitable. One should check all the parameters carefully before applying these two functions.\nFor details about the parameters, type:\n```\n?pseudoga\n\n?pseudoga_parallel\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/indranillab/pseudoga/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9084030307410428,
      "result": {
        "original_header": "Analysis of Human embryo development data",
        "type": "Text_excerpt",
        "value": "The data can be downloaded from <https://drive.google.com/file/d/11KENCPnPtGewtusS5ZYWOxPJqhj3F9D9/view?usp=sharing> . The dataset contains whole transcriptome profiles of human embryo cells at different developmental stages ranging from oocyte to late-blast stage. More details about the dataset can be found here: <https://www.nature.com/articles/nsmb.2660> . For a collection of similar datasets one can visit <https://hemberg-lab.github.io/scRNA.seq.datasets/> . The dataset is available in the form of a cell by gene expression matrix. The read counts have been estimated from raw reads in an single cell RNA-seq experiment. \n \n"
      },
      "source": "https://raw.githubusercontent.com/indranillab/pseudoga/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9674896961853048,
      "result": {
        "original_header": "Gene Selection",
        "type": "Text_excerpt",
        "value": "All genes may not change with pseudotime. So, gene filtering before pseudotime estimation should improve the accuracy the algorithm. We divide the cells into two clusters and find top 2000 differentally expressed genes between these two clusters. However, any other feature selection method can also be used to at this step. \n```\nsce<-readRDS(\"yan.rds\")\nlibrary(pseudoga)\nassays(sce)$expression<-assays(sce)$logcounts\nsce1<-select_genes(sce,type=\"expression\")\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/indranillab/pseudoga/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8854115627582471,
      "result": {
        "original_header": "Comparison with developmental stage",
        "type": "Text_excerpt",
        "value": "Next we compare the estimated pseudotime by PseudoGA with the developmental stages of the cells. \n```\ntype<-colData(sce2)$cell_type2\ntype1<-rep(NA,length(type))\ntype1[(type==\"oocyte\")]<-1\ntype1[(type==\"zygote\")]<-2\ntype1[(type==\"2cell\")]<-3\ntype1[(type==\"4cell\")]<-4\ntype1[(type==\"8cell\")]<-5\ntype1[(type==\"morula\")]<-6\ntype1[(type==\"lateblast\")]<-7\n\ncolData(sce2)$cell_type3<-as.character(type1)\nlibrary(ggplot2)\nlibrary(ggbeeswarm)\nlibrary(ggthemes)\n\np<-ggplot(as.data.frame(colData(sce2)), aes(x = rank(Pseudotime,ties.method=\"random\"), y = cell_type3, \n                                             colour = cell_type3)) +\n  geom_quasirandom(groupOnX = FALSE) +\n  scale_color_tableau() + theme_classic()+\n  xlab(\"PseudoGA pseudotime ordering\") + ylab(\"Developmental Stage\") +\n  ggtitle(\"Estimated Pseudotime and developmental stage\")\n\np<-p+scale_y_discrete( labels = unique(colData(sce2)$cell_type2))\np<-p+  scale_color_discrete(name = \"Stage\", labels = unique(colData(sce1)$cell_type2))\n\nggsave(\"comparison_plot1.png\")\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/indranillab/pseudoga/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8956156994282589,
      "result": {
        "original_header": "Genes with highest correlation with the pseudotime",
        "type": "Text_excerpt",
        "value": "The following command shows names of top few genes that have highest linear rank correlation with the estimated pseudotime. \n```\ncors1<-NULL\ndata<-assays(sce2)$expression\ncors1<-cor(t(data),colData(sce2)$Pseudotime,method=\"spearman\")\nabscors1<-abs(cors1)\ngeneord1<-order(abscors1,decreasing=TRUE)\npseudogene1<-rownames(data)[geneord1]\nhead(pseudogene1)\n\n```\nThe following commands plots first two genes with highest correlation with the estimated pseudotime:\n  \nBASH2*\n \n"
      },
      "source": "https://raw.githubusercontent.com/indranillab/pseudoga/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9112041210960947,
      "result": {
        "original_header": "Analysis of Mouse brain development data",
        "type": "Text_excerpt",
        "value": "The data can be downloaded from <https://drive.google.com/file/d/1pTt1YusW2UaWb6EuUNIhrdOhC0669pl4/view?usp=sharing> . This dataset contains transcriptome of 5053 mouse oligodendrocyte cells. More details of the dataset can be found at <https://science.sciencemag.org/content/352/6291/1326> . \n## Gene Selection\nWe select top 2000 genes that are differentially expressed between two clusters of cells generated from the datset.\n```\nsce<-readRDS(\"marques.rds\")\nassays(sce)$expression<-assays(sce)$logcounts\nsce3<-select_genes(sce,numgenes=2000,type=\"expression\")\n```\n \nWe apply PseudoGA with subsampling. Parameters like normalization method, subsample size or number of replicates used in this estimation can be altered. The parameters given here are only for illustration.\n```\nsce4<-pseudoga_parallel(sce3,type=\"expression\",normalization=\"cpm\",subsample=300,repl=20)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/indranillab/pseudoga/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8930102674525214,
      "result": {
        "original_header": "Visualization with principal components",
        "type": "Text_excerpt",
        "value": "First principal component is plotted against the estimated pseudotime showing continuum of different cell types.\n```\nprc<-prcomp(t(assays(sce4)$expression))\n\ncolData(sce4)$prcomp1<-prc$x[,1]\nlibrary(ggplot2)\nlibrary(ggbeeswarm)\nlibrary(ggthemes)\n\nset.seed(0)\np<-ggplot(as.data.frame(colData(sce4)), aes(x = rank(Pseudotime,ties.method=\"random\"), y = prcomp1, \n                                            colour = cell_type1)) +\n  geom_quasirandom(groupOnX = FALSE) +\n  scale_color_tableau() + theme_classic()+\n  xlab(\"PseudoGA pseudotime ordering\") + ylab(\"Principal Component I\") +\n  ggtitle(\"Estimated Pseudotime and first principal component\")\n\np<-p+scale_y_discrete( labels = unique(colData(sce3)$cell_type1))\np<-p+  scale_color_discrete(name = \"Stage\", labels = unique(colData(sce3)$cell_type1))\n\nggsave(\"prcomp_plot1.png\")\n\n```\n \nTo find the genes with highest correlation with the pseudotime, run the commands below:\n```\ncors1<-NULL\ndata<-assays(sce4)$expression\ncors1<-cor(t(data),colData(sce4)$Pseudotime,method=\"spearman\")\nabscors1<-abs(cors1)\ngeneord1<-order(abscors1,decreasing=TRUE)\npseudogene1<-rownames(data)[geneord1]\nhead(pseudogene1)\n```\nThe following commands plots first two genes with highest correlation with the estimated pseudotime:\n \n```\npar(mar = c(5, 5, 4, 2))\nplot(rank(colData(sce4)$Pseudotime),data[geneord1[1],],col=\"red\",main=\"Expression of Car2\",xlab=\"Pseudotime\",ylab=\"Expression\",cex.lab=1.8,font.lab=2,cex.main=2,cex.axis=2)\n\npar(mar = c(5, 5, 4, 2))\nplot(rank(colData(sce4)$Pseudotime),data[geneord1[2],],col=\"red\",main=\"Expression of Rtn1\",xlab=\"Pseudotime\",ylab=\"Expression\",cex.lab=1.8,font.lab=2,cex.main=2,cex.axis=2)\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/indranillab/pseudoga/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/indranillab/pseudoga/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/indranillab/pseudoga/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "indranillab/pseudoga"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "pseudoga"
      },
      "source": "https://raw.githubusercontent.com/indranillab/pseudoga/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pronoymondal/pseudogadata/main/comparison_plot2.png"
      },
      "source": "https://raw.githubusercontent.com/indranillab/pseudoga/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pronoymondal/pseudogadata/main/yan_gene1.png"
      },
      "source": "https://raw.githubusercontent.com/indranillab/pseudoga/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pronoymondal/pseudogadata/main/yan_gene2.png"
      },
      "source": "https://raw.githubusercontent.com/indranillab/pseudoga/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pronoymondal/pseudogadata/main/prcomp_plot1.png"
      },
      "source": "https://raw.githubusercontent.com/indranillab/pseudoga/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pronoymondal/pseudogadata/main/marques_gene1.png"
      },
      "source": "https://raw.githubusercontent.com/indranillab/pseudoga/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pronoymondal/pseudogadata/main/marques_gene2.png"
      },
      "source": "https://raw.githubusercontent.com/indranillab/pseudoga/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation and Usage",
        "type": "Text_excerpt",
        "value": "The package can be installed from github using the following command:\n```\nlibrary(devtools)\ninstall_github(\"indranillab/pseudoga\")\n```\nThe following commands illustarte a simple example of how PseudoGA should be used.\n```\n\nlibrary(pseudoga)\n\nlibrary(SingleCellExperiment)\n\ncounts <- matrix(rpois(10000, lambda = 10), ncol=100, nrow=100) \n\nsce <- SingleCellExperiment(list(counts=counts))\n\nsce<-pseudoga(sce) #Usual PseudoGA\n\nsce1<-pseudoga_parallel(sce) #PseudoGA based on subsampling \n```\n"
      },
      "source": "https://raw.githubusercontent.com/indranillab/pseudoga/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8330063124205241,
      "result": {
        "original_header": "Analysis of Mouse brain development data",
        "type": "Text_excerpt",
        "value": "The data can be downloaded from <https://drive.google.com/file/d/1pTt1YusW2UaWb6EuUNIhrdOhC0669pl4/view?usp=sharing> . This dataset contains transcriptome of 5053 mouse oligodendrocyte cells. More details of the dataset can be found at <https://science.sciencemag.org/content/352/6291/1326> . \n"
      },
      "source": "https://raw.githubusercontent.com/indranillab/pseudoga/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/indranillab/pseudoga/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "pseudoga"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "indranillab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 42892,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/indranillab/pseudoga/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "indranillab",
          "type": "User"
        },
        "date_created": "2020-11-11T11:08:05Z",
        "date_published": "2020-11-11T13:58:32Z",
        "html_url": "https://github.com/indranillab/pseudoga/releases/tag/v1.0.0",
        "name": "pseudoga",
        "release_id": 33804215,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/indranillab/pseudoga/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/indranillab/pseudoga/releases/33804215",
        "value": "https://api.github.com/repos/indranillab/pseudoga/releases/33804215",
        "zipball_url": "https://api.github.com/repos/indranillab/pseudoga/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 05:15:53",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation and Usage",
        "type": "Text_excerpt",
        "value": "The package can be installed from github using the following command:\n```\nlibrary(devtools)\ninstall_github(\"indranillab/pseudoga\")\n```\nThe following commands illustarte a simple example of how PseudoGA should be used.\n```\n\nlibrary(pseudoga)\n\nlibrary(SingleCellExperiment)\n\ncounts <- matrix(rpois(10000, lambda = 10), ncol=100, nrow=100) \n\nsce <- SingleCellExperiment(list(counts=counts))\n\nsce<-pseudoga(sce) #Usual PseudoGA\n\nsce1<-pseudoga_parallel(sce) #PseudoGA based on subsampling \n```\n"
      },
      "source": "https://raw.githubusercontent.com/indranillab/pseudoga/master/README.md",
      "technique": "header_analysis"
    }
  ]
}