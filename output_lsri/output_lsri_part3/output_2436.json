{
  "application_domain": [
    {
      "confidence": 25.66,
      "result": {
        "type": "String",
        "value": "Natural Language Processing"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "CITE",
        "type": "Text_excerpt",
        "value": "Heiner Kuhl, Ling Li, Sven Wuertz, Matthias St\u00f6ck, Xu-Fang Liang, Christophe Klopp, CSA: A high-throughput chromosome-scale assembly pipeline for vertebrate genomes, GigaScience, Volume 9, Issue 5, May 2020, giaa034, https://doi.org/10.1093/gigascience/giaa034 \n"
      },
      "source": "https://raw.githubusercontent.com/HMPNK/CSA2.6/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/HMPNK/CSA2.6"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-06-17T12:04:31Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-02-01T17:28:15Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Chromosome Scale Assembler: A high-throughput chromosome scale genome assembly pipeline for vertebrate genomes"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.934295676325694,
      "result": {
        "original_header": "A high-throughput chromosome scale genome assembly pipeline for vertebrate genomes.",
        "type": "Text_excerpt",
        "value": "Genome assembly of vertebrate genomes has improved much since long read technologies \napproach read lengths larger than most repetitive elements. \nYet, the final goal to achieve assembly of full chromosomes by sequencing data alone \nhas not been achieved. \nWe have build a computationally highly efficient pipeline, which after contig assembly \nperforms post assembly improvements by ordering the assembly and closing gaps, as well \nas splitting of low supported regions. \nThe pipeline can use information from scaffolded assemblies (for example from HiC or\n10X Genomics), or even from diverged (~65-100 Mya) reference genomes for ordering the\ncontigs and thus support the assembly process. This typically results in improved \ncontig N50 when compared to current state of the art methods. \nCSA can calculate (near) chromosomal scale assemblies from long read data and \ncomparisons with publicly available diverged reference genomes for Fish, Birds and Mammals.\n \n"
      },
      "source": "https://raw.githubusercontent.com/HMPNK/CSA2.6/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.916939216952344,
      "result": {
        "original_header": "Default parameters",
        "type": "Text_excerpt",
        "value": "Ultra long read assembly may be improved by increasing read length cut-off and alignment length cut-off:\nFor example: -l \"-L 70000 --aln-min-length 25000 --keep-multiple-alignment-parts 1 -A\" , worked well for a human dataset with \nreadlength N50 of 70 kbp.\n \n"
      },
      "source": "https://raw.githubusercontent.com/HMPNK/CSA2.6/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9943562353637416,
      "result": {
        "original_header": "POLISHING CONSENSUS QUALITY OF CSA ASSEMBLIES:",
        "type": "Text_excerpt",
        "value": "All of the widely used genome assembly tools like CANU, FALCON, FLYE and even SHASTA do not include the polishing algorithms that are needed to get error rates above Q40 (which is needed for annotation without an excess of frameshift errors). As it is currently common practice, we leave the choice of consensus polishing to the user. This is also, because choosing the right polishing pipeline for the different long-read technologies (SMRT or ONT) can be a complex topic (e. g. involving different sequencing libraries and also depending on properties of the species you are sequencing) and in our opinion requires some human decision making. \nWe have currently made good experience doing one iteration of polishing by the FLYE polisher and long read data, followed by two iterations using PILON and illumina short read data. Some long read polishers (e.g. MEDAKA and FLYE) do not like \"n\" characters, it is necessary to split the CSA scaffolds into contigs before polishing and re-build the scaffolds afterwards. \n"
      },
      "source": "https://raw.githubusercontent.com/HMPNK/CSA2.6/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/HMPNK/CSA2.6/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/HMPNK/CSA2.6/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "HMPNK/CSA2.6"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Chromosome Scale Assembler"
      },
      "source": "https://raw.githubusercontent.com/HMPNK/CSA2.6/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HMPNK/CSA2.6/master/INSTALL/script/STITCH.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HMPNK/CSA2.6/master/INSTALL/script/FASTLAST.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HMPNK/CSA2.6/master/INSTALL/script/wtdbg-BATCH.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HMPNK/CSA2.6/master/Fig1.png"
      },
      "source": "https://raw.githubusercontent.com/HMPNK/CSA2.6/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "CSA-PIPELINE INSTALLATION",
        "type": "Text_excerpt",
        "value": " THIRD PARTY OPEN SOURCE SOFTWARE USED (will be installed automatically by INSTALL.bash):\n\n Miniconda, wtdbg2.2, RAGOUT v1.0, Minimap2, last aligner v941, bedtools v2.27.1,\n samtools v1.7, pigz, GNU parallel, seqtk, seqkit, hgFakeAgp\n\n We deeply acknowledge the authors of these great tools! \n\n```sh\ngit clone https://github.com/HMPNK/CSA2.6.git\n```\n Make sure you have gcc, g++, make and zlib1g-dev installed on your system !!!\n Otherwise INSTALL.bash will fail in compilation steps.\n\n On Ubuntu run:\n ```sh\n sudo apt install gcc g++ make zlib1g-dev\n ```\n  On Red Hat /CentOS 7 run:\n```sh\nsudo yum install gcc gcc-c++ make zlib-devel\n```\n On OpenSuse run:\n ```sh\n sudo zypper install gcc gcc-c++ make zlib-devel\n```\nINSTALL CSA binaries and scripts!!! \n```sh\ncd CSA2.6\ncd INSTALL\nbash INSTALL.bash\n```\n INITIALIZE MINICONDA ENVIRONMENT, ALTERNATIVELY YOU MAY JUST LOGOUT and LOGIN \n```sh\n. ~/.bashrc\n```\n RUN CSA2.6 PIPELINE\n```sh\ncd ../..\nCSA2.6/CSA2.6c.pl\n```\n INSTALLATION ISSUES\n\n We have tested CSA2.6c on fresh server installations of Red Hat 8 and Ubuntu 18.04/19.04,\n OpenSuse LEAP 15.1 and CentOS 7 as well as older Red Hat and Ubuntu versions.\n\n Our tests showed that RAGOUT V1.0 compilation needs gcc in version 4.6.2 or above.\n If you encounter the following error during the processing\n\n \"perl: symbol lookup error: /tools/perl5/modules/lib/perl5/x86_64-linux-thread-multi/auto/Cwd/Cwd.so: undefined\n symbol: Perl_Istack_sp_ptr\" \n\n you have to add the correct perl lib location to your PERL5LIB environment variable\n```sh\n export  PERL5LIB=/conda_root_directory_usually_homedir/.conda/pkgs/perl-5.22.0.1-0/lib/perl5:$PERL5LIB\n```\n conda_root_directory_usually_homedir : has to be replaced with the correct location.\n\nSome users encountered problems in Step3 of the pipeline, if the language variable was NOT set to \"en_US.UTF-8\".\nMake sure that your system uses \"en_US.UTF-8\" by:\n```sh\nexport LANG='en_US.UTF-8'\n```\nIf you encounter problems during the run regarding paths to the longread-file or reference file locations. Try to link these files to the folder where you run CSA and omit paths in the CSA commandline.\n\n"
      },
      "source": "https://raw.githubusercontent.com/HMPNK/CSA2.6/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/HMPNK/CSA2.6/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "chromosome-level-assembly, genome-assembly, longread, oxford-nanopore, pacbio"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2019 Dr. Heiner kuhl\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/HMPNK/CSA2.6/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CSA2.6"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "HMPNK"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 41265,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Awk",
        "size": 1602,
        "type": "Programming_language",
        "value": "Awk"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 1267,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HMPNK/CSA2.6/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "TEST RUN ON YEAST OXFORD NANOPORE dataset:",
        "type": "Text_excerpt",
        "value": "```sh\nmkdir CSA-TEST\ncd CSA-TEST\n```\nDOWNLOAD TEST DATA\n```sh\nwget https://nimbus.igb-berlin.de/index.php/s/njM2jqplusn17OZ/download\nmv download SRR6476833.fa.gz\nwget https://nimbus.igb-berlin.de/index.php/s/4VekUKms8tdL4V4/download\nmv download sacCer.fa.gz\n```\nCREATE CSA-PIPELINE SCRIPT\n```sh\n../CSA2.6/CSA2.6c.pl -r SRR6476833.fa.gz -g sacCer.fa.gz -t 4 -o SC_CSA -d SC_CSA > RUN-CSA-TEST.bash\n```\nRUN CSA-PIPELINE\n```sh\nbash RUN-CSA-TEST.bash\n```\nThe test run will take about 30-60 min (you can speed it up by increasing \"-t 4\" on systems with higher CPU number)\n\nYou may see a few \"core dumps\", these are single gap re-assembly jobs that failed, you should just not care. Some gap re-assembly jobs may run very long due to huge read pile ups in that location, therefore we force gap re-assemblies to stop after 20 minutes using \"timeout\".\n"
      },
      "source": "https://raw.githubusercontent.com/HMPNK/CSA2.6/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 08:52:14",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 10
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}