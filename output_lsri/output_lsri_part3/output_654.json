{
  "acknowledgement": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Acknowledgements",
        "parent_header": [
          "AlphaFold"
        ],
        "type": "Text_excerpt",
        "value": "AlphaFold communicates with and/or references the following separate libraries\nand packages:\n\n*   [Abseil](https://github.com/abseil/abseil-py)\n*   [Biopython](https://biopython.org)\n*   [Chex](https://github.com/deepmind/chex)\n*   [Colab](https://research.google.com/colaboratory/)\n*   [Docker](https://www.docker.com)\n*   [HH Suite](https://github.com/soedinglab/hh-suite)\n*   [HMMER Suite](http://eddylab.org/software/hmmer)\n*   [Haiku](https://github.com/deepmind/dm-haiku)\n*   [Immutabledict](https://github.com/corenting/immutabledict)\n*   [JAX](https://github.com/google/jax/)\n*   [Kalign](https://msa.sbc.su.se/cgi-bin/msa.cgi)\n*   [matplotlib](https://matplotlib.org/)\n*   [ML Collections](https://github.com/google/ml_collections)\n*   [NumPy](https://numpy.org)\n*   [OpenMM](https://github.com/openmm/openmm)\n*   [OpenStructure](https://openstructure.org)\n*   [pandas](https://pandas.pydata.org/)\n*   [pymol3d](https://github.com/avirshup/py3dmol)\n*   [SciPy](https://scipy.org)\n*   [Sonnet](https://github.com/deepmind/sonnet)\n*   [TensorFlow](https://github.com/tensorflow/tensorflow)\n*   [Tree](https://github.com/deepmind/tree)\n*   [tqdm](https://github.com/tqdm/tqdm)\n\nWe thank all their contributors and maintainers!\n"
      },
      "source": "https://raw.githubusercontent.com/deepmind/alphafold/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citing this work",
        "parent_header": [
          "AlphaFold"
        ],
        "type": "Text_excerpt",
        "value": "If you use the code or data in this package, please cite:\n\n```bibtex\n@Article{AlphaFold2021,\n  author  = {Jumper, John and Evans, Richard and Pritzel, Alexander and Green, Tim and Figurnov, Michael and Ronneberger, Olaf and Tunyasuvunakool, Kathryn and Bates, Russ and {\\v{Z}}{\\'\\i}dek, Augustin and Potapenko, Anna and Bridgland, Alex and Meyer, Clemens and Kohl, Simon A A and Ballard, Andrew J and Cowie, Andrew and Romera-Paredes, Bernardino and Nikolov, Stanislav and Jain, Rishub and Adler, Jonas and Back, Trevor and Petersen, Stig and Reiman, David and Clancy, Ellen and Zielinski, Michal and Steinegger, Martin and Pacholska, Michalina and Berghammer, Tamas and Bodenstein, Sebastian and Silver, David and Vinyals, Oriol and Senior, Andrew W and Kavukcuoglu, Koray and Kohli, Pushmeet and Hassabis, Demis},\n  journal = {Nature},\n  title   = {Highly accurate protein structure prediction with {AlphaFold}},\n  year    = {2021},\n  volume  = {596},\n  number  = {7873},\n  pages   = {583--589},\n  doi     = {10.1038/s41586-021-03819-2}\n}\n```\n\nIn addition, if you use the AlphaFold-Multimer mode, please cite:\n\n\n```bibtex\n@article {AlphaFold-Multimer2021,\n  author       = {Evans, Richard and O{\\textquoteright}Neill, Michael and Pritzel, Alexander and Antropova, Natasha and Senior, Andrew and Green, Tim and {\\v{Z}}{\\'\\i}dek, Augustin and Bates, Russ and Blackwell, Sam and Yim, Jason and Ronneberger, Olaf and Bodenstein, Sebastian and Zielinski, Michal and Bridgland, Alex and Potapenko, Anna and Cowie, Andrew and Tunyasuvunakool, Kathryn and Jain, Rishub and Clancy, Ellen and Kohli, Pushmeet and Jumper, John and Hassabis, Demis},\n  journal      = {bioRxiv},\n  title        = {Protein complex prediction with AlphaFold-Multimer},\n  year         = {2021},\n  elocation-id = {2021.10.04.463034},\n  doi          = {10.1101/2021.10.04.463034},\n  URL          = {https://www.biorxiv.org/content/early/2021/10/04/2021.10.04.463034},\n  eprint       = {https://www.biorxiv.org/content/early/2021/10/04/2021.10.04.463034.full.pdf},\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/deepmind/alphafold/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Jumper, John and Evans, Richard and Pritzel, Alexander and Green, Tim and Figurnov, Michael and Ronneberger, Olaf and Tunyasuvunakool, Kathryn and Bates, Russ and {\\v{Z}}{\\'\\i}dek, Augustin and Potapenko, Anna and Bridgland, Alex and Meyer, Clemens and Kohl, Simon A A and Ballard, Andrew J and Cowie, Andrew and Romera-Paredes, Bernardino and Nikolov, Stanislav and Jain, Rishub and Adler, Jonas and Back, Trevor and Petersen, Stig and Reiman, David and Clancy, Ellen and Zielinski, Michal and Steinegger, Martin and Pacholska, Michalina and Berghammer, Tamas and Bodenstein, Sebastian and Silver, David and Vinyals, Oriol and Senior, Andrew W and Kavukcuoglu, Koray and Kohli, Pushmeet and Hassabis, Demis",
        "doi": "10.1038/s41586-021-03819-2",
        "format": "bibtex",
        "title": "Highly accurate protein structure prediction with {AlphaFold}",
        "type": "Text_excerpt",
        "value": "@article{AlphaFold2021,\n    doi = {10.1038/s41586-021-03819-2},\n    pages = {583--589},\n    number = {7873},\n    volume = {596},\n    year = {2021},\n    title = {Highly accurate protein structure prediction with {AlphaFold}},\n    journal = {Nature},\n    author = {Jumper, John and Evans, Richard and Pritzel, Alexander and Green, Tim and Figurnov, Michael and Ronneberger, Olaf and Tunyasuvunakool, Kathryn and Bates, Russ and {\\v{Z}}{\\'\\i}dek, Augustin and Potapenko, Anna and Bridgland, Alex and Meyer, Clemens and Kohl, Simon A A and Ballard, Andrew J and Cowie, Andrew and Romera-Paredes, Bernardino and Nikolov, Stanislav and Jain, Rishub and Adler, Jonas and Back, Trevor and Petersen, Stig and Reiman, David and Clancy, Ellen and Zielinski, Michal and Steinegger, Martin and Pacholska, Michalina and Berghammer, Tamas and Bodenstein, Sebastian and Silver, David and Vinyals, Oriol and Senior, Andrew W and Kavukcuoglu, Koray and Kohli, Pushmeet and Hassabis, Demis},\n}"
      },
      "source": "https://raw.githubusercontent.com/deepmind/alphafold/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Evans, Richard and O{\\textquoteright}Neill, Michael and Pritzel, Alexander and Antropova, Natasha and Senior, Andrew and Green, Tim and {\\v{Z}}{\\'\\i}dek, Augustin and Bates, Russ and Blackwell, Sam and Yim, Jason and Ronneberger, Olaf and Bodenstein, Sebastian and Zielinski, Michal and Bridgland, Alex and Potapenko, Anna and Cowie, Andrew and Tunyasuvunakool, Kathryn and Jain, Rishub and Clancy, Ellen and Kohli, Pushmeet and Jumper, John and Hassabis, Demis",
        "doi": "10.1101/2021.10.04.463034",
        "format": "bibtex",
        "title": "Protein complex prediction with AlphaFold-Multimer",
        "type": "Text_excerpt",
        "url": "https://www.biorxiv.org/content/early/2021/10/04/2021.10.04.463034",
        "value": "@article{AlphaFold-Multimer2021,\n    eprint = {https://www.biorxiv.org/content/early/2021/10/04/2021.10.04.463034.full.pdf},\n    url = {https://www.biorxiv.org/content/early/2021/10/04/2021.10.04.463034},\n    doi = {10.1101/2021.10.04.463034},\n    elocation-id = {2021.10.04.463034},\n    year = {2021},\n    title = {Protein complex prediction with AlphaFold-Multimer},\n    journal = {bioRxiv},\n    author = {Evans, Richard and O{\\textquoteright}Neill, Michael and Pritzel, Alexander and Antropova, Natasha and Senior, Andrew and Green, Tim and {\\v{Z}}{\\'\\i}dek, Augustin and Bates, Russ and Blackwell, Sam and Yim, Jason and Ronneberger, Olaf and Bodenstein, Sebastian and Zielinski, Michal and Bridgland, Alex and Potapenko, Anna and Cowie, Andrew and Tunyasuvunakool, Kathryn and Jain, Rishub and Clancy, Ellen and Kohli, Pushmeet and Jumper, John and Hassabis, Demis},\n}"
      },
      "source": "https://raw.githubusercontent.com/deepmind/alphafold/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/google-deepmind/alphafold"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# How to Contribute\n\nWe welcome small patches related to bug fixes and documentation, but we do not\nplan to make any major changes to this repository.\n\n## Contributor License Agreement\n\nContributions to this project must be accompanied by a Contributor License\nAgreement. You (or your employer) retain the copyright to your contribution,\nthis simply gives us permission to use and redistribute your contributions as\npart of the project. Head over to <https://cla.developers.google.com/> to see\nyour current agreements on file or to sign a new one.\n\nYou generally only need to submit a CLA once, so if you've already submitted one\n(even if it was for a different project), you probably don't need to do it\nagain.\n\n## Code reviews\n\nAll submissions, including submissions by project members, require review. We\nuse GitHub pull requests for this purpose. Consult\n[GitHub Help](https://help.github.com/articles/about-pull-requests/) for more\ninformation on using pull requests.\n"
      },
      "source": "https://raw.githubusercontent.com/deepmind/alphafold/main/CONTRIBUTING.md",
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-06-17T14:06:06Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-05T05:33:41Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Open source code for AlphaFold."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9421872411280768,
      "result": {
        "original_header": "AlphaFold",
        "type": "Text_excerpt",
        "value": "This package provides an implementation of the inference pipeline of AlphaFold\nv2. For simplicity, we refer to this model as AlphaFold throughout the rest of\nthis document. \n1.  An implementation of AlphaFold-Multimer. This represents a work in progress\n    and AlphaFold-Multimer isn't expected to be as stable as our monomer\n    AlphaFold system. [Read the guide](#updating-existing-installation) for how\n    to upgrade and update code.\n2.  The [technical note](docs/technical_note_v2.3.0.md) containing the models\n    and inference procedure for an updated AlphaFold v2.3.0.\n3.  A [CASP15 baseline](docs/casp15_predictions.zip) set of predictions along\n    with documentation of any manual interventions performed. \nAny publication that discloses findings arising from using this source code or\nthe model parameters should [cite](#citing-this-work) the\n[AlphaFold paper](https://doi.org/10.1038/s41586-021-03819-2) and, if\napplicable, the\n[AlphaFold-Multimer paper](https://www.biorxiv.org/content/10.1101/2021.10.04.463034v1). \nPlease also refer to the\n[Supplementary Information](https://static-content.springer.com/esm/art%3A10.1038%2Fs41586-021-03819-2/MediaObjects/41586_2021_3819_MOESM1_ESM.pdf)\nfor a detailed description of the method. \n**You can use a slightly simplified version of AlphaFold with\n[this Colab notebook](https://colab.research.google.com/github/deepmind/alphafold/blob/main/notebooks/AlphaFold.ipynb)**\nor community-supported versions (see below). \n"
      },
      "source": "https://raw.githubusercontent.com/deepmind/alphafold/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9632153599118902,
      "result": {
        "original_header": "Inferencing many proteins",
        "type": "Text_excerpt",
        "value": "The provided inference script is optimized for predicting the structure of a\nsingle protein, and it will compile the neural network to be specialized to\nexactly the size of the sequence, MSA, and templates. For large proteins, the\ncompile time is a negligible fraction of the runtime, but it may become more\nsignificant for small proteins or if the multi-sequence alignments are already\nprecomputed. In the bulk inference case, it may make sense to use our\n`make_fixed_size` function to pad the inputs to a uniform size, thereby reducing\nthe number of compilations required. \nWe do not provide a bulk inference script, but it should be straightforward to\ndevelop on top of the `RunModel.predict` method with a parallel system for\nprecomputing multi-sequence alignments. Alternatively, this script can be run\nrepeatedly with only moderate overhead.\n \n"
      },
      "source": "https://raw.githubusercontent.com/deepmind/alphafold/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.934622386615234,
      "result": {
        "original_header": "Note on CASP14 reproducibility",
        "type": "Text_excerpt",
        "value": "AlphaFold's output for a small number of proteins has high inter-run variance,\nand may be affected by changes in the input data. The CASP14 target T1064 is a\nnotable example; the large number of SARS-CoV-2-related sequences recently\ndeposited changes its MSA significantly. This variability is somewhat mitigated\nby the model selection process; running 5 models and taking the most confident. \nTo reproduce the results of our CASP14 system as closely as possible you must\nuse the same database versions we used in CASP. These may not match the default\nversions downloaded by our scripts. \nFor genetics: \nAn alternative for templates is to use the latest PDB and PDB70, but pass the\nflag `--max_template_date=2020-05-14`, which restricts templates only to\nstructures that were available at the start of CASP14.\n \n"
      },
      "source": "https://raw.githubusercontent.com/deepmind/alphafold/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8370039440143284,
      "result": {
        "original_header": "Community contributions",
        "type": "Text_excerpt",
        "value": "Colab notebooks provided by the community (please note that these notebooks may\nvary from our full AlphaFold system and we did not validate their accuracy): \n*   The\n    [ColabFold AlphaFold2 notebook](https://colab.research.google.com/github/sokrypton/ColabFold/blob/main/AlphaFold2.ipynb)\n    by Martin Steinegger, Sergey Ovchinnikov and Milot Mirdita, which uses an\n    API hosted at the S\u00f6dinglab based on the MMseqs2 server\n    [(Mirdita et al. 2019, Bioinformatics)](https://academic.oup.com/bioinformatics/article/35/16/2856/5280135)\n    for the multiple sequence alignment creation.\n \n"
      },
      "source": "https://raw.githubusercontent.com/deepmind/alphafold/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/deepmind/alphafold/tree/main/docs"
      },
      "technique": "file_exploration"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/deepmind/alphafold/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/deepmind/alphafold/main/notebooks/AlphaFold.ipynb"
      },
      "source": "https://raw.githubusercontent.com/deepmind/alphafold/main/notebooks/AlphaFold.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2205
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/google-deepmind/alphafold/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "google-deepmind/alphafold"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "AlphaFold"
      },
      "source": "https://raw.githubusercontent.com/deepmind/alphafold/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/deepmind/alphafold/main/docker/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/deepmind/alphafold/main/docker/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/deepmind/alphafold/main/scripts/download_alphafold_params.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/deepmind/alphafold/main/scripts/download_mgnify.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/deepmind/alphafold/main/scripts/download_pdb70.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/deepmind/alphafold/main/scripts/download_uniprot.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/deepmind/alphafold/main/scripts/download_bfd.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/deepmind/alphafold/main/scripts/download_uniref90.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/deepmind/alphafold/main/scripts/download_all_data.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/deepmind/alphafold/main/scripts/download_pdb_seqres.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/deepmind/alphafold/main/scripts/download_pdb_mmcif.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/deepmind/alphafold/main/scripts/download_uniref30.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/deepmind/alphafold/main/scripts/download_small_bfd.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/deepmind/alphafold/main/imgs/header.jpg"
      },
      "source": "https://raw.githubusercontent.com/deepmind/alphafold/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/deepmind/alphafold/main/imgs/casp14_predictions.gif"
      },
      "source": "https://raw.githubusercontent.com/deepmind/alphafold/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation and running your first prediction",
        "parent_header": [
          "AlphaFold"
        ],
        "type": "Text_excerpt",
        "value": "You will need a machine running Linux, AlphaFold does not support other\noperating systems. Full installation requires up to 3 TB of disk space to keep\ngenetic databases (SSD storage is recommended) and a modern NVIDIA GPU (GPUs\nwith more memory can predict larger protein structures).\n\nPlease follow these steps:\n\n1.  Install [Docker](https://www.docker.com/).\n    *   Install\n        [NVIDIA Container Toolkit](https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html)\n        for GPU support.\n    *   Setup running\n        [Docker as a non-root user](https://docs.docker.com/engine/install/linux-postinstall/#manage-docker-as-a-non-root-user).\n\n1.  Clone this repository and `cd` into it.\n\n    ```bash\n    git clone https://github.com/deepmind/alphafold.git\n    cd ./alphafold\n    ```\n\n1.  Download genetic databases and model parameters:\n\n    *   Install `aria2c`. On most Linux distributions it is available via the\n    package manager as the `aria2` package (on Debian-based distributions this\n    can be installed by running `sudo apt install aria2`).\n\n    *   Please use the script `scripts/download_all_data.sh` to download\n    and set up full databases. This may take substantial time (download size is\n    556 GB), so we recommend running this script in the background:\n\n    ```bash\n    scripts/download_all_data.sh <DOWNLOAD_DIR> > download.log 2> download_all.log &\n    ```\n\n    *   **Note: The download directory `<DOWNLOAD_DIR>` should *not* be a\n    subdirectory in the AlphaFold repository directory.** If it is, the Docker\n    build will be slow as the large databases will be copied into the docker\n    build context.\n\n    *   It is possible to run AlphaFold with reduced databases; please refer to\n    the [complete documentation](#genetic-databases).\n\n\n1.  Check that AlphaFold will be able to use a GPU by running:\n\n    ```bash\n    docker run --rm --gpus all nvidia/cuda:11.0-base nvidia-smi\n    ```\n\n    The output of this command should show a list of your GPUs. If it doesn't,\n    check if you followed all steps correctly when setting up the\n    [NVIDIA Container Toolkit](https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html)\n    or take a look at the following\n    [NVIDIA Docker issue](https://github.com/NVIDIA/nvidia-docker/issues/1447#issuecomment-801479573).\n\n    If you wish to run AlphaFold using Singularity (a common containerization\n    platform on HPC systems) we recommend using some of the third party Singularity\n    setups as linked in https://github.com/deepmind/alphafold/issues/10 or\n    https://github.com/deepmind/alphafold/issues/24.\n\n1.  Build the Docker image:\n\n    ```bash\n    docker build -f docker/Dockerfile -t alphafold .\n    ```\n\n    If you encounter the following error:\n\n    ```\n    W: GPG error: https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64 InRelease: The following signatures couldn't be verified because the public key is not available: NO_PUBKEY A4B469963BF863CC\n    E: The repository 'https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64 InRelease' is not signed.\n    ```\n\n    use the workaround described in\n    https://github.com/deepmind/alphafold/issues/463#issuecomment-1124881779.\n\n1.  Install the `run_docker.py` dependencies. Note: You may optionally wish to\n    create a\n    [Python Virtual Environment](https://docs.python.org/3/tutorial/venv.html)\n    to prevent conflicts with your system's Python environment.\n\n    ```bash\n    pip3 install -r docker/requirements.txt\n    ```\n\n1.  Make sure that the output directory exists (the default is `/tmp/alphafold`)\n    and that you have sufficient permissions to write into it.\n\n1.  Run `run_docker.py` pointing to a FASTA file containing the protein\n    sequence(s) for which you wish to predict the structure (`--fasta_paths`\n    parameter). AlphaFold will search for the available templates before the\n    date specified by the `--max_template_date` parameter; this could be used to\n    avoid certain templates during modeling. `--data_dir` is the directory with\n    downloaded genetic databases and `--output_dir` is the absolute path to the\n    output directory.\n\n    ```bash\n    python3 docker/run_docker.py \\\n      --fasta_paths=your_protein.fasta \\\n      --max_template_date=2022-01-01 \\\n      --data_dir=$DOWNLOAD_DIR \\\n      --output_dir=/home/user/absolute_path_to_the_output_dir\n    ```\n\n1.  Once the run is over, the output directory shall contain predicted\n    structures of the target protein. Please check the documentation below for\n    additional options and troubleshooting tips.\n"
      },
      "source": "https://raw.githubusercontent.com/deepmind/alphafold/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Genetic databases",
        "parent_header": [
          "AlphaFold",
          "Installation and running your first prediction"
        ],
        "type": "Text_excerpt",
        "value": "This step requires `aria2c` to be installed on your machine.\n\nAlphaFold needs multiple genetic (sequence) databases to run:\n\n*   [BFD](https://bfd.mmseqs.com/),\n*   [MGnify](https://www.ebi.ac.uk/metagenomics/),\n*   [PDB70](http://wwwuser.gwdg.de/~compbiol/data/hhsuite/databases/hhsuite_dbs/),\n*   [PDB](https://www.rcsb.org/) (structures in the mmCIF format),\n*   [PDB seqres](https://www.rcsb.org/) \u2013 only for AlphaFold-Multimer,\n*   [UniRef30 (FKA UniClust30)](https://uniclust.mmseqs.com/),\n*   [UniProt](https://www.uniprot.org/uniprot/) \u2013 only for AlphaFold-Multimer,\n*   [UniRef90](https://www.uniprot.org/help/uniref).\n\nWe provide a script `scripts/download_all_data.sh` that can be used to download\nand set up all of these databases:\n\n*   Recommended default:\n\n    ```bash\n    scripts/download_all_data.sh <DOWNLOAD_DIR>\n    ```\n\n    will download the full databases.\n\n*   With `reduced_dbs` parameter:\n\n    ```bash\n    scripts/download_all_data.sh <DOWNLOAD_DIR> reduced_dbs\n    ```\n\n    will download a reduced version of the databases to be used with the\n    `reduced_dbs` database preset. This shall be used with the corresponding\n    AlphaFold parameter `--db_preset=reduced_dbs` later during the AlphaFold run\n    (please see [AlphaFold parameters](#running-alphafold) section).\n\n:ledger: **Note: The download directory `<DOWNLOAD_DIR>` should *not* be a\nsubdirectory in the AlphaFold repository directory.** If it is, the Docker build\nwill be slow as the large databases will be copied during the image creation.\n\nWe don't provide exactly the database versions used in CASP14 \u2013 see the\n[note on reproducibility](#note-on-casp14-reproducibility). Some of the\ndatabases are mirrored for speed, see [mirrored databases](#mirrored-databases).\n\n:ledger: **Note: The total download size for the full databases is around 556 GB\nand the total size when unzipped is 2.62 TB. Please make sure you have a large\nenough hard drive space, bandwidth and time to download. We recommend using an\nSSD for better genetic search performance.**\n\n:ledger: **Note: If the download directory and datasets don't have full read and\nwrite permissions, it can cause errors with the MSA tools, with opaque\n(external) error messages. Please ensure the required permissions are applied,\ne.g. with the `sudo chmod 755 --recursive \"$DOWNLOAD_DIR\"` command.**\n\nThe `download_all_data.sh` script will also download the model parameter files.\nOnce the script has finished, you should have the following directory structure:\n\n```\n$DOWNLOAD_DIR/                             # Total: ~ 2.62 TB (download: 556 GB)\n    bfd/                                   # ~ 1.8 TB (download: 271.6 GB)\n        # 6 files.\n    mgnify/                                # ~ 120 GB (download: 67 GB)\n        mgy_clusters_2022_05.fa\n    params/                                # ~ 5.3 GB (download: 5.3 GB)\n        # 5 CASP14 models,\n        # 5 pTM models,\n        # 5 AlphaFold-Multimer models,\n        # LICENSE,\n        # = 16 files.\n    pdb70/                                 # ~ 56 GB (download: 19.5 GB)\n        # 9 files.\n    pdb_mmcif/                             # ~ 238 GB (download: 43 GB)\n        mmcif_files/\n            # About 199,000 .cif files.\n        obsolete.dat\n    pdb_seqres/                            # ~ 0.2 GB (download: 0.2 GB)\n        pdb_seqres.txt\n    small_bfd/                             # ~ 17 GB (download: 9.6 GB)\n        bfd-first_non_consensus_sequences.fasta\n    uniref30/                              # ~ 206 GB (download: 52.5 GB)\n        # 7 files.\n    uniprot/                               # ~ 105 GB (download: 53 GB)\n        uniprot.fasta\n    uniref90/                              # ~ 67 GB (download: 34 GB)\n        uniref90.fasta\n```\n\n`bfd/` is only downloaded if you download the full databases, and `small_bfd/`\nis only downloaded if you download the reduced databases.\n"
      },
      "source": "https://raw.githubusercontent.com/deepmind/alphafold/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Model parameters",
        "parent_header": [
          "AlphaFold",
          "Installation and running your first prediction"
        ],
        "type": "Text_excerpt",
        "value": "While the AlphaFold code is licensed under the Apache 2.0 License, the AlphaFold\nparameters and CASP15 prediction data are made available under the terms of the\nCC BY 4.0 license. Please see the [Disclaimer](#license-and-disclaimer) below\nfor more detail.\n\nThe AlphaFold parameters are available from\nhttps://storage.googleapis.com/alphafold/alphafold_params_2022-12-06.tar, and\nare downloaded as part of the `scripts/download_all_data.sh` script. This script\nwill download parameters for:\n\n*   5 models which were used during CASP14, and were extensively validated for\n    structure prediction quality (see Jumper et al. 2021, Suppl. Methods 1.12\n    for details).\n*   5 pTM models, which were fine-tuned to produce pTM (predicted TM-score) and\n    (PAE) predicted aligned error values alongside their structure predictions\n    (see Jumper et al. 2021, Suppl. Methods 1.9.7 for details).\n*   5 AlphaFold-Multimer models that produce pTM and PAE values alongside their\n    structure predictions.\n"
      },
      "source": "https://raw.githubusercontent.com/deepmind/alphafold/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Updating existing installation",
        "parent_header": [
          "AlphaFold",
          "Installation and running your first prediction"
        ],
        "type": "Text_excerpt",
        "value": "If you have a previous version you can either reinstall fully from scratch\n(remove everything and run the setup from scratch) or you can do an incremental\nupdate that will be significantly faster but will require a bit more work. Make\nsure you follow these steps in the exact order they are listed below:\n\n1.  **Update the code.**\n    *   Go to the directory with the cloned AlphaFold repository and run `git\n        fetch origin main` to get all code updates.\n1.  **Update the UniProt, UniRef, MGnify and PDB seqres databases.**\n    *   Remove `<DOWNLOAD_DIR>/uniprot`.\n    *   Run `scripts/download_uniprot.sh <DOWNLOAD_DIR>`.\n    *   Remove `<DOWNLOAD_DIR>/uniclust30`.\n    *   Run `scripts/download_uniref30.sh <DOWNLOAD_DIR>`.\n    *   Remove `<DOWNLOAD_DIR>/uniref90`.\n    *   Run `scripts/download_uniref90.sh <DOWNLOAD_DIR>`.\n    *   Remove `<DOWNLOAD_DIR>/mgnify`.\n    *   Run `scripts/download_mgnify.sh <DOWNLOAD_DIR>`.\n    *   Remove `<DOWNLOAD_DIR>/pdb_mmcif`. It is needed to have PDB SeqRes and\n        PDB from exactly the same date. Failure to do this step will result in\n        potential errors when searching for templates when running\n        AlphaFold-Multimer.\n    *   Run `scripts/download_pdb_mmcif.sh <DOWNLOAD_DIR>`.\n    *   Run `scripts/download_pdb_seqres.sh <DOWNLOAD_DIR>`.\n1.  **Update the model parameters.**\n    *   Remove the old model parameters in `<DOWNLOAD_DIR>/params`.\n    *   Download new model parameters using\n        `scripts/download_alphafold_params.sh <DOWNLOAD_DIR>`.\n1.  **Follow [Running AlphaFold](#running-alphafold).**\n"
      },
      "source": "https://raw.githubusercontent.com/deepmind/alphafold/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Using deprecated model weights",
        "parent_header": [
          "AlphaFold",
          "Installation and running your first prediction",
          "Updating existing installation"
        ],
        "type": "Text_excerpt",
        "value": "To use the deprecated v2.2.0 AlphaFold-Multimer model weights:\n\n1.  Change `SOURCE_URL` in `scripts/download_alphafold_params.sh` to\n    `https://storage.googleapis.com/alphafold/alphafold_params_2022-03-02.tar`,\n    and download the old parameters.\n2.  Change the `_v3` to `_v2` in the multimer `MODEL_PRESETS` in `config.py`.\n\nTo use the deprecated v2.1.0 AlphaFold-Multimer model weights:\n\n1.  Change `SOURCE_URL` in `scripts/download_alphafold_params.sh` to\n    `https://storage.googleapis.com/alphafold/alphafold_params_2022-01-19.tar`,\n    and download the old parameters.\n2.  Remove the `_v3` in the multimer `MODEL_PRESETS` in `config.py`.\n"
      },
      "source": "https://raw.githubusercontent.com/deepmind/alphafold/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9890601592179816,
      "result": {
        "original_header": "AlphaFold",
        "type": "Text_excerpt",
        "value": "**You can use a slightly simplified version of AlphaFold with\n[this Colab notebook](https://colab.research.google.com/github/deepmind/alphafold/blob/main/notebooks/AlphaFold.ipynb)**\nor community-supported versions (see below). \n"
      },
      "source": "https://raw.githubusercontent.com/deepmind/alphafold/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9810213520390261,
      "result": {
        "original_header": "Note on CASP14 reproducibility",
        "type": "Text_excerpt",
        "value": "To reproduce the results of our CASP14 system as closely as possible you must\nuse the same database versions we used in CASP. These may not match the default\nversions downloaded by our scripts. \n*   PDB: (downloaded 2020-05-14)\n*   PDB70:\n    [2020-05-13](http://wwwuser.gwdg.de/~compbiol/data/hhsuite/databases/hhsuite_dbs/old-releases/pdb70_from_mmcif_200513.tar.gz) \n"
      },
      "source": "https://raw.githubusercontent.com/deepmind/alphafold/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/google-deepmind/alphafold/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Apache License 2.0",
        "spdx_id": "Apache-2.0",
        "type": "License",
        "url": "https://api.github.com/licenses/apache-2.0",
        "value": "https://api.github.com/licenses/apache-2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
      },
      "source": "https://raw.githubusercontent.com/deepmind/alphafold/main/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License and Disclaimer",
        "parent_header": [
          "AlphaFold"
        ],
        "type": "Text_excerpt",
        "value": "This is not an officially supported Google product.\n\nCopyright 2022 DeepMind Technologies Limited.\n"
      },
      "source": "https://raw.githubusercontent.com/deepmind/alphafold/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "AlphaFold Code License",
        "parent_header": [
          "AlphaFold",
          "License and Disclaimer"
        ],
        "type": "Text_excerpt",
        "value": "Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at https://www.apache.org/licenses/LICENSE-2.0.\n\nUnless required by applicable law or agreed to in writing, software distributed\nunder the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\nCONDITIONS OF ANY KIND, either express or implied. See the License for the\nspecific language governing permissions and limitations under the License.\n"
      },
      "source": "https://raw.githubusercontent.com/deepmind/alphafold/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Model Parameters License",
        "parent_header": [
          "AlphaFold",
          "License and Disclaimer"
        ],
        "type": "Text_excerpt",
        "value": "The AlphaFold parameters are made available under the terms of the Creative\nCommons Attribution 4.0 International (CC BY 4.0) license. You can find details\nat: https://creativecommons.org/licenses/by/4.0/legalcode\n"
      },
      "source": "https://raw.githubusercontent.com/deepmind/alphafold/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Third-party software",
        "parent_header": [
          "AlphaFold",
          "License and Disclaimer"
        ],
        "type": "Text_excerpt",
        "value": "Use of the third-party software, libraries or code referred to in the\n[Acknowledgements](#acknowledgements) section above may be governed by separate\nterms and conditions or license provisions. Your use of the third-party\nsoftware, libraries or code is subject to any such terms and you should check\nthat you can comply with any applicable restrictions or terms and conditions\nbefore use.\n"
      },
      "source": "https://raw.githubusercontent.com/deepmind/alphafold/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Mirrored Databases",
        "parent_header": [
          "AlphaFold",
          "License and Disclaimer"
        ],
        "type": "Text_excerpt",
        "value": "The following databases have been mirrored by DeepMind, and are available with\nreference to the following:\n\n*   [BFD](https://bfd.mmseqs.com/) (unmodified), by Steinegger M. and S\u00f6ding J.,\n    available under a\n    [Creative Commons Attribution-ShareAlike 4.0 International License](http://creativecommons.org/licenses/by-sa/4.0/).\n\n*   [BFD](https://bfd.mmseqs.com/) (modified), by Steinegger M. and S\u00f6ding J.,\n    modified by DeepMind, available under a\n    [Creative Commons Attribution-ShareAlike 4.0 International License](http://creativecommons.org/licenses/by-sa/4.0/).\n    See the Methods section of the\n    [AlphaFold proteome paper](https://www.nature.com/articles/s41586-021-03828-1)\n    for details.\n\n*   [Uniref30: v2021_03](http://wwwuser.gwdg.de/~compbiol/uniclust/2021_03/)\n    (unmodified), by Mirdita M. et al., available under a\n    [Creative Commons Attribution-ShareAlike 4.0 International License](http://creativecommons.org/licenses/by-sa/4.0/).\n\n*   [MGnify: v2022_05](http://ftp.ebi.ac.uk/pub/databases/metagenomics/peptide_database/2022_05/README.txt)\n    (unmodified), by Mitchell AL et al., available free of all copyright\n    restrictions and made fully and freely available for both non-commercial and\n    commercial use under\n    [CC0 1.0 Universal (CC0 1.0) Public Domain Dedication](https://creativecommons.org/publicdomain/zero/1.0/).\n\n"
      },
      "source": "https://raw.githubusercontent.com/deepmind/alphafold/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "alphafold"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "google-deepmind"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 836863,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 49184,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 18088,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 3467,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/deepmind/alphafold/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Htomlinson14",
          "type": "User"
        },
        "date_created": "2023-03-27T11:50:49Z",
        "date_published": "2023-04-05T09:45:53Z",
        "description": "**Change log**\r\n\r\n- More robust download in Colab with shutil (thanks @gmihaila).\r\n- Added ability to only run relax for the best unrelaxed model in the run_alphafold.py.\r\n- Improved documentation for the ranked outputs (thanks @ulupo).\r\n- Removed jax dependency from results pkl.\r\n- Updated tensorflow to 2.11.0.\r\n- Improved documentation on how to install aria2c (thanks @janxkoci).\r\n- Made `_chem_comp.type` logic case-insensitive for mmCIF parsing.\r\n- Improved error messages when cells are submitted out of order in Colab (e.g. when the runtime restarts).\r\n- Fixed incorrect type annotations.\r\n- Bumped Python to 3.9 in Colab.\r\n- Improved robustness of masked softmax for bfloat16.\r\n- Bumped pyopenssl in Colab to patch cryptography dependency issue.\r\n",
        "html_url": "https://github.com/google-deepmind/alphafold/releases/tag/v2.3.2",
        "name": "Alphafold v2.3.2",
        "release_id": 98164050,
        "tag": "v2.3.2",
        "tarball_url": "https://api.github.com/repos/google-deepmind/alphafold/tarball/v2.3.2",
        "type": "Release",
        "url": "https://api.github.com/repos/google-deepmind/alphafold/releases/98164050",
        "value": "https://api.github.com/repos/google-deepmind/alphafold/releases/98164050",
        "zipball_url": "https://api.github.com/repos/google-deepmind/alphafold/zipball/v2.3.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "joshabramson",
          "type": "User"
        },
        "date_created": "2023-01-12T11:06:31Z",
        "date_published": "2023-01-12T11:32:14Z",
        "description": "Version v2.3.1 combines a few small updates.\r\n\r\n**Change log**\r\n\r\n- Add option for eval time dropout.\r\n- Add A100 inference timings to README.\r\n- Speed up MSA lookups in Colab for multimers.\r\n- Increase max allowed sequence length in Colab to 4,000.\r\n- Improve documentation on initial install and run of AlphaFold.\r\n- Documentation improvements and other small fixes (thanks @eltociear).\r\n- Pin part of violations computation on CPU. Fixes GPU memory issues during relax stage.",
        "html_url": "https://github.com/google-deepmind/alphafold/releases/tag/v2.3.1",
        "name": "Alphafold v2.3.1",
        "release_id": 88710443,
        "tag": "v2.3.1",
        "tarball_url": "https://api.github.com/repos/google-deepmind/alphafold/tarball/v2.3.1",
        "type": "Release",
        "url": "https://api.github.com/repos/google-deepmind/alphafold/releases/88710443",
        "value": "https://api.github.com/repos/google-deepmind/alphafold/releases/88710443",
        "zipball_url": "https://api.github.com/repos/google-deepmind/alphafold/zipball/v2.3.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Augustin-Zidek",
          "type": "User"
        },
        "date_created": "2022-12-11T19:36:44Z",
        "date_published": "2022-12-13T11:52:50Z",
        "description": "Version v2.3.0 updates the AlphaFold-Multimer model parameters. These new models are expected to be more accurate on large protein complexes but use the same model architecture and training methodology as our previously released AlphaFold-Multimer paper. See [the v2.3.0 release note](https://github.com/deepmind/alphafold/blob/main/docs/technical_note_v2.3.0.md) for more details.\r\n\r\nThanks to various memory optimisations, AlphaFold-Multimer now uses less GPU memory and it can therefore handle longer proteins.\r\n\r\nA number of other bug fixes and small improvements have been made.\r\n\r\n**Change log**\r\n\r\n* Added new AlphaFold-Multimer models with better accuracy on large protein complexes.\r\n* Added early stopping to recycling.\r\n* Added filtering for non-protein sequences in the pdb_seqres download script to prevent template search errors.\r\n* Fixed a bug where histidine residues had sometimes swapped atom coordinates after relaxation (thanks @avwillems).\r\n* Updated MGnify to 2022_05, UniRef90 to 2022_01, UniClust30 to 2021_03, UniProt in Colab notebook to 2021_04.\r\n* Used `bf16` in multimer inference \u2013 reduces GPU memory usage.\r\n* Upcast to `fp32` when using `bf16` in `LayerNorm` and replace `hk.LayerNorm` with `common_modules.LayerNorm`.\r\n* Updated Jax to 0.3.25 and Haiku to 0.0.9 for consistency with the AlphaFold Colab notebook.\r\n* Changed `TriangleMultiplication` to use fused projections and various other memory optimisations.\r\n* Upgraded Python version in the AlphaFold Colab notebook to 3.8.\r\n* AlphaFold Colab notebook usability improvements \u2013 multimers with up to 20 chains are now supported, higher sequence length limits, number of recycling iterations can now be controlled, and added an option to run single chains on the multimer model.\r\n* Relaxation metrics are now saved in `relax_metrics.json`.\r\n* Some Jax deprecation errors were addressed (thanks @jinmingyi1998).\r\n* Various documentation and code improvements (thanks @mathe42).\r\n",
        "html_url": "https://github.com/google-deepmind/alphafold/releases/tag/v2.3.0",
        "name": "AlphaFold v2.3.0",
        "release_id": 85855503,
        "tag": "v2.3.0",
        "tarball_url": "https://api.github.com/repos/google-deepmind/alphafold/tarball/v2.3.0",
        "type": "Release",
        "url": "https://api.github.com/repos/google-deepmind/alphafold/releases/85855503",
        "value": "https://api.github.com/repos/google-deepmind/alphafold/releases/85855503",
        "zipball_url": "https://api.github.com/repos/google-deepmind/alphafold/zipball/v2.3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Htomlinson14",
          "type": "User"
        },
        "date_created": "2022-09-21T15:32:47Z",
        "date_published": "2022-09-21T16:56:55Z",
        "description": "Version v2.2.4 is a bug fix release\r\n\r\n**Change log**\r\n* Bump versions of third party libraries: jax 0.3.17, absl-py 1.0.0, haiku 0.0.7, numpy 1.21.6, tensorflow 2.9.0\r\n* Adapt `jnp.take` to account for behaviour with the new jax version, see https://github.com/deepmind/alphafold/issues/513 (thanks @sokrypton).\r\n* Reduce size of docker image by removing package caches, see https://github.com/deepmind/alphafold/pull/526 (thanks @TheDen).\r\n* Fix incorrect argument in `backbone_loss`, see https://github.com/deepmind/alphafold/issues/570 (thanks @sokrypton).",
        "html_url": "https://github.com/google-deepmind/alphafold/releases/tag/v2.2.4",
        "name": "AlphaFold v2.2.4",
        "release_id": 77795970,
        "tag": "v2.2.4",
        "tarball_url": "https://api.github.com/repos/google-deepmind/alphafold/tarball/v2.2.4",
        "type": "Release",
        "url": "https://api.github.com/repos/google-deepmind/alphafold/releases/77795970",
        "value": "https://api.github.com/repos/google-deepmind/alphafold/releases/77795970",
        "zipball_url": "https://api.github.com/repos/google-deepmind/alphafold/zipball/v2.2.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Augustin-Zidek",
          "type": "User"
        },
        "date_created": "2022-08-25T09:58:57Z",
        "date_published": "2022-08-25T10:46:29Z",
        "description": "Version v2.2.3 is a bug fix release.\r\n\r\n**Change log**\r\n* Pin Conda version to 4.13.0 to prevent Docker/Colab setup issues (thanks @Meghpal, @michaelkeith18).\r\n* Change the Colab PAE json output to new format that matches the format used in the new release of the AlphaFold Protein Structure Database (AFDB). See the [AFDB FAQ](https://alphafold.ebi.ac.uk/faq/#faq-7) for a description of the new format.\r\n* Add a readme file for AFDB.\r\n* Type hint improvements.\r\n* Fix tests and improve internal testing infrastructure.\r\n* Fix Dockerfile breakage due to https://github.com/google/jax/issues/11142.",
        "html_url": "https://github.com/google-deepmind/alphafold/releases/tag/v2.2.3",
        "name": "AlphaFold v2.2.3",
        "release_id": 75329348,
        "tag": "v2.2.3",
        "tarball_url": "https://api.github.com/repos/google-deepmind/alphafold/tarball/v2.2.3",
        "type": "Release",
        "url": "https://api.github.com/repos/google-deepmind/alphafold/releases/75329348",
        "value": "https://api.github.com/repos/google-deepmind/alphafold/releases/75329348",
        "zipball_url": "https://api.github.com/repos/google-deepmind/alphafold/zipball/v2.2.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Augustin-Zidek",
          "type": "User"
        },
        "date_created": "2022-06-13T15:49:22Z",
        "date_published": "2022-06-13T15:55:30Z",
        "description": "A small bug fix release that fixes a bug introduced in v2.2.1 (thanks @lucajovine).",
        "html_url": "https://github.com/google-deepmind/alphafold/releases/tag/v2.2.2",
        "name": "AlphaFold v2.2.2",
        "release_id": 69316456,
        "tag": "v2.2.2",
        "tarball_url": "https://api.github.com/repos/google-deepmind/alphafold/tarball/v2.2.2",
        "type": "Release",
        "url": "https://api.github.com/repos/google-deepmind/alphafold/releases/69316456",
        "value": "https://api.github.com/repos/google-deepmind/alphafold/releases/69316456",
        "zipball_url": "https://api.github.com/repos/google-deepmind/alphafold/zipball/v2.2.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Augustin-Zidek",
          "type": "User"
        },
        "date_created": "2022-06-13T10:54:07Z",
        "date_published": "2022-06-13T10:57:39Z",
        "description": "Version v2.2.1 is a bug fix release.\r\n\r\n**Change log**\r\n\r\n* Update from CUDA 11.1 to to 11.1.1 which addresses the public key issue.\r\n* Pin protobuf version to 3.20.1 (thanks @britnyblu, @ShoufaChen, @aputron).\r\n* Clarify in the README that AlphaFold works only under Linux.\r\n* Fix the `jax.tree_multimap` deprecation warning.\r\n* Do not reuse the temporary output directory in `run_alphafold_test` (thanks @branfosj).\r\n* Fix the version in `setup.py` (thanks @cmeesters).",
        "html_url": "https://github.com/google-deepmind/alphafold/releases/tag/v2.2.1",
        "name": "AlphaFold v2.2.1",
        "release_id": 69288609,
        "tag": "v2.2.1",
        "tarball_url": "https://api.github.com/repos/google-deepmind/alphafold/tarball/v2.2.1",
        "type": "Release",
        "url": "https://api.github.com/repos/google-deepmind/alphafold/releases/69288609",
        "value": "https://api.github.com/repos/google-deepmind/alphafold/releases/69288609",
        "zipball_url": "https://api.github.com/repos/google-deepmind/alphafold/zipball/v2.2.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Augustin-Zidek",
          "type": "User"
        },
        "date_created": "2022-03-08T13:43:22Z",
        "date_published": "2022-03-10T15:38:38Z",
        "description": "Version v2.2.0 updates the AlphaFold-Multimer model parameters. These new models have greatly reduced numbers of clashes on average and are slightly more accurate. Read the updated [AlphaFold-Multimer paper](https://www.biorxiv.org/content/10.1101/2021.10.04.463034v2) for more details.\r\n\r\nA number of other bug fixes and small improvements have been made.\r\n\r\n**Change log**\r\n* Added new AlphaFold-Multimer models with greatly reduced numbers of clashes on average and slightly increased accuracy.\r\n* Use DeviceRequest rather than `runtime=nvidia` to expose GPUs to the container (thanks @aburger).\r\n* Simplified mounting of files in Docker.\r\n* Removed unused bias argument in GlobalAttention (thanks @breadbread1984).\r\n* Removed prokaryotic MSA pairing algorithm as it didn\u2019t improve accuracy on average.\r\n* Added the ability to run with multiple seeds per model to match the AlphaFold-Multimer paper.\r\n* Fixed degraded performance when using `num_recycle=0` with models trained with recycling due to incorrect skipping of layers (thanks @sokrypton).\r\n* Added `split_rng=False` (current default) to sharded_map to support new Haiku release.\r\n* Removed unused code in amber_minimize.py.",
        "html_url": "https://github.com/google-deepmind/alphafold/releases/tag/v2.2.0",
        "name": "AlphaFold v2.2.0",
        "release_id": 61509720,
        "tag": "v2.2.0",
        "tarball_url": "https://api.github.com/repos/google-deepmind/alphafold/tarball/v2.2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/google-deepmind/alphafold/releases/61509720",
        "value": "https://api.github.com/repos/google-deepmind/alphafold/releases/61509720",
        "zipball_url": "https://api.github.com/repos/google-deepmind/alphafold/zipball/v2.2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Augustin-Zidek",
          "type": "User"
        },
        "date_created": "2022-01-27T14:41:09Z",
        "date_published": "2022-01-28T10:01:10Z",
        "description": "Version v2.1.2 is a bug fix release that also includes the earlier license change.\r\n\r\n**Change log**\r\n* Update the license of the AlphaFold parameters from **CC BY-NC 4.0** to **CC BY 4.0**. There are no changes to the actual model parameters.\r\n* The relaxation stage now runs on GPU by default and should be roughly 3x faster thanks to that. You can control this behaviour using the `enable_gpu_relax` flag (thanks @ojcharles).\r\n* The relaxation stage can now be disabled using the `run_relax` flag (thanks @bkpoon).\r\n* AlphaFold in Docker is now run as the current user not as the root, you can control that using the `docker_user` flag (thanks @akors).\r\n* Truncate the MSA when reading the raw Stockholm file to prevent out of memory issues. This should help in cases where the MSA found by Jackhmmer was massive (thanks @hegelab).\r\n* Update Dockerfile CUDA version to 11.1 and fix JAX version (thanks @chrisroat).\r\n* Small README, Colab, and flag documentation improvements.",
        "html_url": "https://github.com/google-deepmind/alphafold/releases/tag/v2.1.2",
        "name": "AlphaFold v2.1.2",
        "release_id": 58172157,
        "tag": "v2.1.2",
        "tarball_url": "https://api.github.com/repos/google-deepmind/alphafold/tarball/v2.1.2",
        "type": "Release",
        "url": "https://api.github.com/repos/google-deepmind/alphafold/releases/58172157",
        "value": "https://api.github.com/repos/google-deepmind/alphafold/releases/58172157",
        "zipball_url": "https://api.github.com/repos/google-deepmind/alphafold/zipball/v2.1.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Augustin-Zidek",
          "type": "User"
        },
        "date_created": "2021-11-05T09:38:51Z",
        "date_published": "2021-11-05T10:06:11Z",
        "description": "Version v2.1.1 is a bug fix release for the AlphaFold-Multimer release (v2.1.0).\r\n\r\n**Change log:**\r\n\r\n* Fixed a bug which caused a crash if the multimer input fasta file contained SwissProt identifiers in the sequence descriptions (thanks @arashnh11, @RodenLuo).\r\n* Fixed a bug in the Colab notebook with single-chain PAE visualisation (thanks @Alleko).\r\n* A few README clarifications and additions.",
        "html_url": "https://github.com/google-deepmind/alphafold/releases/tag/v2.1.1",
        "name": "AlphaFold v2.1.1",
        "release_id": 52771771,
        "tag": "v2.1.1",
        "tarball_url": "https://api.github.com/repos/google-deepmind/alphafold/tarball/v2.1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/google-deepmind/alphafold/releases/52771771",
        "value": "https://api.github.com/repos/google-deepmind/alphafold/releases/52771771",
        "zipball_url": "https://api.github.com/repos/google-deepmind/alphafold/zipball/v2.1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Augustin-Zidek",
          "type": "User"
        },
        "date_created": "2021-11-02T14:33:58Z",
        "date_published": "2021-11-02T17:14:38Z",
        "description": "Version 2.1.0 adds the AlphaFold-Multimer model and fixes a number of issues reported in the last few months.\r\n\r\n**Change log:**\r\n* [new feature] AlphaFold-Multimer data pipeline, model and metrics have been added. Use `model_preset=multimer` to run with AlphaFold-Multimer.\r\n* [change] AlphaFold-Multimer no longer pre-processes the features via TensorFlow but instead does it in the JAX module code.\r\n* Added a note and a check that the directory with data is outside the AlphaFold repository for faster Docker builds (thanks @jamespeapen).\r\n* Advertise Python 3.7, 3.8, 3.9, 3.10 in setup.py (thanks @anukaal).\r\n* Added an FAQ explaining that the Colab on free tier can time out (thanks @mooingcat).\r\n* Stop using hardcoded `/tmp`, instead use `$TMPDIR` (thanks @meson800, @EricDeveaud).\r\n* Make run_docker fully configurable via flags: `data_dir`, `docker_image_name`, `output_dir` (thanks @akors, @chrisroat).\r\n* Look for stereo_chemical_props.txt relative to the residue_constants module (thanks @rjgildea).\r\n* Crop UniRef90 MSA to 10,000 sequences to prevent hitting the 2 GB proto field limit and use less memory (thanks @biohegedus and @chrisroat).\r\n* Finding third party tool binaries is now more robust and gives you better errors if any are missing (thanks @FanchTheSystem).\r\n* Refactor and a few fixes and usability improvements in the AlphaFold Colab.\r\n",
        "html_url": "https://github.com/google-deepmind/alphafold/releases/tag/v2.1.0",
        "name": "AlphaFold v2.1.0",
        "release_id": 52538138,
        "tag": "v2.1.0",
        "tarball_url": "https://api.github.com/repos/google-deepmind/alphafold/tarball/v2.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/google-deepmind/alphafold/releases/52538138",
        "value": "https://api.github.com/repos/google-deepmind/alphafold/releases/52538138",
        "zipball_url": "https://api.github.com/repos/google-deepmind/alphafold/zipball/v2.1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Augustin-Zidek",
          "type": "User"
        },
        "date_created": "2021-09-10T12:34:22Z",
        "date_published": "2021-09-30T10:40:21Z",
        "description": "Version 2.0.1 is mainly a bug fix release. We thank everyone who reported issues and proposed solutions.\r\n\r\n**Change log:**\r\n* [new feature] Added AlphaFold Colab notebook that enables convenient folding from your browser.\r\n* [new feature] The `reduced_dbs` preset was added together with small BFD.\r\n* Some of the genetic databases are now mirrored on GCP.\r\n* Added a missing `data/__init__.py` and `model/tf/__init__.py` files.\r\n* README fixes and additions.\r\n* Switched to using cudnn base image based on Ubuntu 18.04.\r\n* Switched to `tensorflow-cpu` since we don't need a GPU when running the data pipeline.\r\n* Improved logging in the AlphaFold pipeline.\r\n* Fixed a few typos and added and fixed a few comments. \r\n* Added pLDDT in the B-factor column of the output PDBs.\r\n* Skip obsolete PDB templates that don't have a replacement.\r\n* Small test improvements.",
        "html_url": "https://github.com/google-deepmind/alphafold/releases/tag/v2.0.1",
        "name": "AlphaFold v2.0.1",
        "release_id": 50539738,
        "tag": "v2.0.1",
        "tarball_url": "https://api.github.com/repos/google-deepmind/alphafold/tarball/v2.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/google-deepmind/alphafold/releases/50539738",
        "value": "https://api.github.com/repos/google-deepmind/alphafold/releases/50539738",
        "zipball_url": "https://api.github.com/repos/google-deepmind/alphafold/zipball/v2.0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "saran-t",
          "type": "User"
        },
        "date_created": "2021-07-15T17:44:37Z",
        "date_published": "2021-07-16T14:58:00Z",
        "html_url": "https://github.com/google-deepmind/alphafold/releases/tag/v2.0.0",
        "name": "Initial release",
        "release_id": 46324749,
        "tag": "v2.0.0",
        "tarball_url": "https://api.github.com/repos/google-deepmind/alphafold/tarball/v2.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/google-deepmind/alphafold/releases/46324749",
        "value": "https://api.github.com/repos/google-deepmind/alphafold/releases/46324749",
        "zipball_url": "https://api.github.com/repos/google-deepmind/alphafold/zipball/v2.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation and running your first prediction",
        "parent_header": [
          "AlphaFold"
        ],
        "type": "Text_excerpt",
        "value": "You will need a machine running Linux, AlphaFold does not support other\noperating systems. Full installation requires up to 3 TB of disk space to keep\ngenetic databases (SSD storage is recommended) and a modern NVIDIA GPU (GPUs\nwith more memory can predict larger protein structures).\n\nPlease follow these steps:\n\n1.  Install [Docker](https://www.docker.com/).\n    *   Install\n        [NVIDIA Container Toolkit](https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html)\n        for GPU support.\n    *   Setup running\n        [Docker as a non-root user](https://docs.docker.com/engine/install/linux-postinstall/#manage-docker-as-a-non-root-user).\n\n1.  Clone this repository and `cd` into it.\n\n    ```bash\n    git clone https://github.com/deepmind/alphafold.git\n    cd ./alphafold\n    ```\n\n1.  Download genetic databases and model parameters:\n\n    *   Install `aria2c`. On most Linux distributions it is available via the\n    package manager as the `aria2` package (on Debian-based distributions this\n    can be installed by running `sudo apt install aria2`).\n\n    *   Please use the script `scripts/download_all_data.sh` to download\n    and set up full databases. This may take substantial time (download size is\n    556 GB), so we recommend running this script in the background:\n\n    ```bash\n    scripts/download_all_data.sh <DOWNLOAD_DIR> > download.log 2> download_all.log &\n    ```\n\n    *   **Note: The download directory `<DOWNLOAD_DIR>` should *not* be a\n    subdirectory in the AlphaFold repository directory.** If it is, the Docker\n    build will be slow as the large databases will be copied into the docker\n    build context.\n\n    *   It is possible to run AlphaFold with reduced databases; please refer to\n    the [complete documentation](#genetic-databases).\n\n\n1.  Check that AlphaFold will be able to use a GPU by running:\n\n    ```bash\n    docker run --rm --gpus all nvidia/cuda:11.0-base nvidia-smi\n    ```\n\n    The output of this command should show a list of your GPUs. If it doesn't,\n    check if you followed all steps correctly when setting up the\n    [NVIDIA Container Toolkit](https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html)\n    or take a look at the following\n    [NVIDIA Docker issue](https://github.com/NVIDIA/nvidia-docker/issues/1447#issuecomment-801479573).\n\n    If you wish to run AlphaFold using Singularity (a common containerization\n    platform on HPC systems) we recommend using some of the third party Singularity\n    setups as linked in https://github.com/deepmind/alphafold/issues/10 or\n    https://github.com/deepmind/alphafold/issues/24.\n\n1.  Build the Docker image:\n\n    ```bash\n    docker build -f docker/Dockerfile -t alphafold .\n    ```\n\n    If you encounter the following error:\n\n    ```\n    W: GPG error: https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64 InRelease: The following signatures couldn't be verified because the public key is not available: NO_PUBKEY A4B469963BF863CC\n    E: The repository 'https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64 InRelease' is not signed.\n    ```\n\n    use the workaround described in\n    https://github.com/deepmind/alphafold/issues/463#issuecomment-1124881779.\n\n1.  Install the `run_docker.py` dependencies. Note: You may optionally wish to\n    create a\n    [Python Virtual Environment](https://docs.python.org/3/tutorial/venv.html)\n    to prevent conflicts with your system's Python environment.\n\n    ```bash\n    pip3 install -r docker/requirements.txt\n    ```\n\n1.  Make sure that the output directory exists (the default is `/tmp/alphafold`)\n    and that you have sufficient permissions to write into it.\n\n1.  Run `run_docker.py` pointing to a FASTA file containing the protein\n    sequence(s) for which you wish to predict the structure (`--fasta_paths`\n    parameter). AlphaFold will search for the available templates before the\n    date specified by the `--max_template_date` parameter; this could be used to\n    avoid certain templates during modeling. `--data_dir` is the directory with\n    downloaded genetic databases and `--output_dir` is the absolute path to the\n    output directory.\n\n    ```bash\n    python3 docker/run_docker.py \\\n      --fasta_paths=your_protein.fasta \\\n      --max_template_date=2022-01-01 \\\n      --data_dir=$DOWNLOAD_DIR \\\n      --output_dir=/home/user/absolute_path_to_the_output_dir\n    ```\n\n1.  Once the run is over, the output directory shall contain predicted\n    structures of the target protein. Please check the documentation below for\n    additional options and troubleshooting tips.\n"
      },
      "source": "https://raw.githubusercontent.com/deepmind/alphafold/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Genetic databases",
        "parent_header": [
          "AlphaFold",
          "Installation and running your first prediction"
        ],
        "type": "Text_excerpt",
        "value": "This step requires `aria2c` to be installed on your machine.\n\nAlphaFold needs multiple genetic (sequence) databases to run:\n\n*   [BFD](https://bfd.mmseqs.com/),\n*   [MGnify](https://www.ebi.ac.uk/metagenomics/),\n*   [PDB70](http://wwwuser.gwdg.de/~compbiol/data/hhsuite/databases/hhsuite_dbs/),\n*   [PDB](https://www.rcsb.org/) (structures in the mmCIF format),\n*   [PDB seqres](https://www.rcsb.org/) \u2013 only for AlphaFold-Multimer,\n*   [UniRef30 (FKA UniClust30)](https://uniclust.mmseqs.com/),\n*   [UniProt](https://www.uniprot.org/uniprot/) \u2013 only for AlphaFold-Multimer,\n*   [UniRef90](https://www.uniprot.org/help/uniref).\n\nWe provide a script `scripts/download_all_data.sh` that can be used to download\nand set up all of these databases:\n\n*   Recommended default:\n\n    ```bash\n    scripts/download_all_data.sh <DOWNLOAD_DIR>\n    ```\n\n    will download the full databases.\n\n*   With `reduced_dbs` parameter:\n\n    ```bash\n    scripts/download_all_data.sh <DOWNLOAD_DIR> reduced_dbs\n    ```\n\n    will download a reduced version of the databases to be used with the\n    `reduced_dbs` database preset. This shall be used with the corresponding\n    AlphaFold parameter `--db_preset=reduced_dbs` later during the AlphaFold run\n    (please see [AlphaFold parameters](#running-alphafold) section).\n\n:ledger: **Note: The download directory `<DOWNLOAD_DIR>` should *not* be a\nsubdirectory in the AlphaFold repository directory.** If it is, the Docker build\nwill be slow as the large databases will be copied during the image creation.\n\nWe don't provide exactly the database versions used in CASP14 \u2013 see the\n[note on reproducibility](#note-on-casp14-reproducibility). Some of the\ndatabases are mirrored for speed, see [mirrored databases](#mirrored-databases).\n\n:ledger: **Note: The total download size for the full databases is around 556 GB\nand the total size when unzipped is 2.62 TB. Please make sure you have a large\nenough hard drive space, bandwidth and time to download. We recommend using an\nSSD for better genetic search performance.**\n\n:ledger: **Note: If the download directory and datasets don't have full read and\nwrite permissions, it can cause errors with the MSA tools, with opaque\n(external) error messages. Please ensure the required permissions are applied,\ne.g. with the `sudo chmod 755 --recursive \"$DOWNLOAD_DIR\"` command.**\n\nThe `download_all_data.sh` script will also download the model parameter files.\nOnce the script has finished, you should have the following directory structure:\n\n```\n$DOWNLOAD_DIR/                             # Total: ~ 2.62 TB (download: 556 GB)\n    bfd/                                   # ~ 1.8 TB (download: 271.6 GB)\n        # 6 files.\n    mgnify/                                # ~ 120 GB (download: 67 GB)\n        mgy_clusters_2022_05.fa\n    params/                                # ~ 5.3 GB (download: 5.3 GB)\n        # 5 CASP14 models,\n        # 5 pTM models,\n        # 5 AlphaFold-Multimer models,\n        # LICENSE,\n        # = 16 files.\n    pdb70/                                 # ~ 56 GB (download: 19.5 GB)\n        # 9 files.\n    pdb_mmcif/                             # ~ 238 GB (download: 43 GB)\n        mmcif_files/\n            # About 199,000 .cif files.\n        obsolete.dat\n    pdb_seqres/                            # ~ 0.2 GB (download: 0.2 GB)\n        pdb_seqres.txt\n    small_bfd/                             # ~ 17 GB (download: 9.6 GB)\n        bfd-first_non_consensus_sequences.fasta\n    uniref30/                              # ~ 206 GB (download: 52.5 GB)\n        # 7 files.\n    uniprot/                               # ~ 105 GB (download: 53 GB)\n        uniprot.fasta\n    uniref90/                              # ~ 67 GB (download: 34 GB)\n        uniref90.fasta\n```\n\n`bfd/` is only downloaded if you download the full databases, and `small_bfd/`\nis only downloaded if you download the reduced databases.\n"
      },
      "source": "https://raw.githubusercontent.com/deepmind/alphafold/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Model parameters",
        "parent_header": [
          "AlphaFold",
          "Installation and running your first prediction"
        ],
        "type": "Text_excerpt",
        "value": "While the AlphaFold code is licensed under the Apache 2.0 License, the AlphaFold\nparameters and CASP15 prediction data are made available under the terms of the\nCC BY 4.0 license. Please see the [Disclaimer](#license-and-disclaimer) below\nfor more detail.\n\nThe AlphaFold parameters are available from\nhttps://storage.googleapis.com/alphafold/alphafold_params_2022-12-06.tar, and\nare downloaded as part of the `scripts/download_all_data.sh` script. This script\nwill download parameters for:\n\n*   5 models which were used during CASP14, and were extensively validated for\n    structure prediction quality (see Jumper et al. 2021, Suppl. Methods 1.12\n    for details).\n*   5 pTM models, which were fine-tuned to produce pTM (predicted TM-score) and\n    (PAE) predicted aligned error values alongside their structure predictions\n    (see Jumper et al. 2021, Suppl. Methods 1.9.7 for details).\n*   5 AlphaFold-Multimer models that produce pTM and PAE values alongside their\n    structure predictions.\n"
      },
      "source": "https://raw.githubusercontent.com/deepmind/alphafold/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Using deprecated model weights",
        "parent_header": [
          "AlphaFold",
          "Installation and running your first prediction",
          "Updating existing installation"
        ],
        "type": "Text_excerpt",
        "value": "To use the deprecated v2.2.0 AlphaFold-Multimer model weights:\n\n1.  Change `SOURCE_URL` in `scripts/download_alphafold_params.sh` to\n    `https://storage.googleapis.com/alphafold/alphafold_params_2022-03-02.tar`,\n    and download the old parameters.\n2.  Change the `_v3` to `_v2` in the multimer `MODEL_PRESETS` in `config.py`.\n\nTo use the deprecated v2.1.0 AlphaFold-Multimer model weights:\n\n1.  Change `SOURCE_URL` in `scripts/download_alphafold_params.sh` to\n    `https://storage.googleapis.com/alphafold/alphafold_params_2022-01-19.tar`,\n    and download the old parameters.\n2.  Remove the `_v3` in the multimer `MODEL_PRESETS` in `config.py`.\n"
      },
      "source": "https://raw.githubusercontent.com/deepmind/alphafold/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running AlphaFold",
        "parent_header": [
          "AlphaFold"
        ],
        "type": "Text_excerpt",
        "value": "**The simplest way to run AlphaFold is using the provided Docker script.** This\nwas tested on Google Cloud with a machine using the `nvidia-gpu-cloud-image`\nwith 12 vCPUs, 85 GB of RAM, a 100 GB boot disk, the databases on an additional\n3 TB disk, and an A100 GPU. For your first run, please follow the instructions\nfrom [Installation and running your first prediction](#installation-and-running-your-first-prediction)\nsection.\n\n1.  By default, Alphafold will attempt to use all visible GPU devices. To use a\n    subset, specify a comma-separated list of GPU UUID(s) or index(es) using the\n    `--gpu_devices` flag. See\n    [GPU enumeration](https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/user-guide.html#gpu-enumeration)\n    for more details.\n\n1.  You can control which AlphaFold model to run by adding the `--model_preset=`\n    flag. We provide the following models:\n\n    *   **monomer**: This is the original model used at CASP14 with no\n        ensembling.\n\n    *   **monomer\\_casp14**: This is the original model used at CASP14 with\n        `num_ensemble=8`, matching our CASP14 configuration. This is largely\n        provided for reproducibility as it is 8x more computationally expensive\n        for limited accuracy gain (+0.1 average GDT gain on CASP14 domains).\n\n    *   **monomer\\_ptm**: This is the original CASP14 model fine tuned with the\n        pTM head, providing a pairwise confidence measure. It is slightly less\n        accurate than the normal monomer model.\n\n    *   **multimer**: This is the [AlphaFold-Multimer](#citing-this-work) model.\n        To use this model, provide a multi-sequence FASTA file. In addition, the\n        UniProt database should have been downloaded.\n\n1.  You can control MSA speed/quality tradeoff by adding\n    `--db_preset=reduced_dbs` or `--db_preset=full_dbs` to the run command. We\n    provide the following presets:\n\n    *   **reduced\\_dbs**: This preset is optimized for speed and lower hardware\n        requirements. It runs with a reduced version of the BFD database. It\n        requires 8 CPU cores (vCPUs), 8 GB of RAM, and 600 GB of disk space.\n\n    *   **full\\_dbs**: This runs with all genetic databases used at CASP14.\n\n    Running the command above with the `monomer` model preset and the\n    `reduced_dbs` data preset would look like this:\n\n    ```bash\n    python3 docker/run_docker.py \\\n      --fasta_paths=T1050.fasta \\\n      --max_template_date=2020-05-14 \\\n      --model_preset=monomer \\\n      --db_preset=reduced_dbs \\\n      --data_dir=$DOWNLOAD_DIR \\\n      --output_dir=/home/user/absolute_path_to_the_output_dir\n    ```\n\n1.  After generating the predicted model, AlphaFold runs a relaxation\n    step to improve local geometry. By default, only the best model (by\n    pLDDT) is relaxed (`--models_to_relax=best`), but also all of the models\n    (`--models_to_relax=all`) or none of the models (`--models_to_relax=none`)\n    can be relaxed.\n\n1.  The relaxation step can be run on GPU (faster, but could be less stable) or\n    CPU (slow, but stable). This can be controlled with `--enable_gpu_relax=true`\n    (default) or `--enable_gpu_relax=false`.\n\n1.  AlphaFold can re-use MSAs (multiple sequence alignments) for the same\n    sequence via `--use_precomputed_msas=true` option; this can be useful for\n    trying different AlphaFold parameters. This option assumes that the\n    directory structure generated by the first AlphaFold run in the output\n    directory exists and that the protein sequence is the same.\n"
      },
      "source": "https://raw.githubusercontent.com/deepmind/alphafold/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running AlphaFold-Multimer",
        "parent_header": [
          "AlphaFold",
          "Running AlphaFold"
        ],
        "type": "Text_excerpt",
        "value": "All steps are the same as when running the monomer system, but you will have to\n\n*   provide an input fasta with multiple sequences,\n*   set `--model_preset=multimer`,\n\nAn example that folds a protein complex `multimer.fasta`:\n\n```bash\npython3 docker/run_docker.py \\\n  --fasta_paths=multimer.fasta \\\n  --max_template_date=2020-05-14 \\\n  --model_preset=multimer \\\n  --data_dir=$DOWNLOAD_DIR \\\n  --output_dir=/home/user/absolute_path_to_the_output_dir\n```\n\nBy default the multimer system will run 5 seeds per model (25 total predictions)\nfor a small drop in accuracy you may wish to run a single seed per model. This\ncan be done via the `--num_multimer_predictions_per_model` flag, e.g. set it to\n`--num_multimer_predictions_per_model=1` to run a single seed per model.\n"
      },
      "source": "https://raw.githubusercontent.com/deepmind/alphafold/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "AlphaFold prediction speed",
        "parent_header": [
          "AlphaFold",
          "Running AlphaFold"
        ],
        "type": "Text_excerpt",
        "value": "The table below reports prediction runtimes for proteins of various lengths. We\nonly measure unrelaxed structure prediction with three recycles while\nexcluding runtimes from MSA and template search. When running\n`docker/run_docker.py` with `--benchmark=true`, this runtime is stored in\n`timings.json`. All runtimes are from a single A100 NVIDIA GPU. Prediction\nspeed on A100 for smaller structures can be improved by increasing\n`global_config.subbatch_size` in `alphafold/model/config.py`.\n\nNo. residues | Prediction time (s)\n-----------: | ------------------:\n100          | 4.9\n200          | 7.7\n300          | 13\n400          | 18\n500          | 29\n600          | 36\n700          | 53\n800          | 60\n900          | 91\n1,000        | 96\n1,100        | 140\n1,500        | 280\n2,000        | 450\n2,500        | 969\n3,000        | 1,240\n3,500        | 2,465\n4,000        | 5,660\n4,500        | 12,475\n5,000        | 18,824\n"
      },
      "source": "https://raw.githubusercontent.com/deepmind/alphafold/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Folding a monomer",
        "parent_header": [
          "AlphaFold",
          "Running AlphaFold",
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "Say we have a monomer with the sequence `<SEQUENCE>`. The input fasta should be:\n\n```fasta\n>sequence_name\n<SEQUENCE>\n```\n\nThen run the following command:\n\n```bash\npython3 docker/run_docker.py \\\n  --fasta_paths=monomer.fasta \\\n  --max_template_date=2021-11-01 \\\n  --model_preset=monomer \\\n  --data_dir=$DOWNLOAD_DIR \\\n  --output_dir=/home/user/absolute_path_to_the_output_dir\n```\n"
      },
      "source": "https://raw.githubusercontent.com/deepmind/alphafold/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Folding a homomer",
        "parent_header": [
          "AlphaFold",
          "Running AlphaFold",
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "Say we have a homomer with 3 copies of the same sequence `<SEQUENCE>`. The input\nfasta should be:\n\n```fasta\n>sequence_1\n<SEQUENCE>\n>sequence_2\n<SEQUENCE>\n>sequence_3\n<SEQUENCE>\n```\n\nThen run the following command:\n\n```bash\npython3 docker/run_docker.py \\\n  --fasta_paths=homomer.fasta \\\n  --max_template_date=2021-11-01 \\\n  --model_preset=multimer \\\n  --data_dir=$DOWNLOAD_DIR \\\n  --output_dir=/home/user/absolute_path_to_the_output_dir\n```\n"
      },
      "source": "https://raw.githubusercontent.com/deepmind/alphafold/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Folding a heteromer",
        "parent_header": [
          "AlphaFold",
          "Running AlphaFold",
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "Say we have an A2B3 heteromer, i.e. with 2 copies of `<SEQUENCE A>` and 3 copies\nof `<SEQUENCE B>`. The input fasta should be:\n\n```fasta\n>sequence_1\n<SEQUENCE A>\n>sequence_2\n<SEQUENCE A>\n>sequence_3\n<SEQUENCE B>\n>sequence_4\n<SEQUENCE B>\n>sequence_5\n<SEQUENCE B>\n```\n\nThen run the following command:\n\n```bash\npython3 docker/run_docker.py \\\n  --fasta_paths=heteromer.fasta \\\n  --max_template_date=2021-11-01 \\\n  --model_preset=multimer \\\n  --data_dir=$DOWNLOAD_DIR \\\n  --output_dir=/home/user/absolute_path_to_the_output_dir\n```\n"
      },
      "source": "https://raw.githubusercontent.com/deepmind/alphafold/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Folding multiple monomers one after another",
        "parent_header": [
          "AlphaFold",
          "Running AlphaFold",
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "Say we have a two monomers, `monomer1.fasta` and `monomer2.fasta`.\n\nWe can fold both sequentially by using the following command:\n\n```bash\npython3 docker/run_docker.py \\\n  --fasta_paths=monomer1.fasta,monomer2.fasta \\\n  --max_template_date=2021-11-01 \\\n  --model_preset=monomer \\\n  --data_dir=$DOWNLOAD_DIR \\\n  --output_dir=/home/user/absolute_path_to_the_output_dir\n```\n"
      },
      "source": "https://raw.githubusercontent.com/deepmind/alphafold/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Folding multiple multimers one after another",
        "parent_header": [
          "AlphaFold",
          "Running AlphaFold",
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "Say we have a two multimers, `multimer1.fasta` and `multimer2.fasta`.\n\nWe can fold both sequentially by using the following command:\n\n```bash\npython3 docker/run_docker.py \\\n  --fasta_paths=multimer1.fasta,multimer2.fasta \\\n  --max_template_date=2021-11-01 \\\n  --model_preset=multimer \\\n  --data_dir=$DOWNLOAD_DIR \\\n  --output_dir=/home/user/absolute_path_to_the_output_dir\n```\n"
      },
      "source": "https://raw.githubusercontent.com/deepmind/alphafold/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "AlphaFold output",
        "parent_header": [
          "AlphaFold",
          "Running AlphaFold"
        ],
        "type": "Text_excerpt",
        "value": "The outputs will be saved in a subdirectory of the directory provided via the\n`--output_dir` flag of `run_docker.py` (defaults to `/tmp/alphafold/`). The\noutputs include the computed MSAs, unrelaxed structures, relaxed structures,\nranked structures, raw model outputs, prediction metadata, and section timings.\nThe `--output_dir` directory will have the following structure:\n\n```\n<target_name>/\n    features.pkl\n    ranked_{0,1,2,3,4}.pdb\n    ranking_debug.json\n    relax_metrics.json\n    relaxed_model_{1,2,3,4,5}.pdb\n    result_model_{1,2,3,4,5}.pkl\n    timings.json\n    unrelaxed_model_{1,2,3,4,5}.pdb\n    msas/\n        bfd_uniref_hits.a3m\n        mgnify_hits.sto\n        uniref90_hits.sto\n```\n\nThe contents of each output file are as follows:\n\n*   `features.pkl` \u2013 A `pickle` file containing the input feature NumPy arrays\n    used by the models to produce the structures.\n*   `unrelaxed_model_*.pdb` \u2013 A PDB format text file containing the predicted\n    structure, exactly as outputted by the model.\n*   `relaxed_model_*.pdb` \u2013 A PDB format text file containing the predicted\n    structure, after performing an Amber relaxation procedure on the unrelaxed\n    structure prediction (see Jumper et al. 2021, Suppl. Methods 1.8.6 for\n    details).\n*   `ranked_*.pdb` \u2013 A PDB format text file containing the predicted structures,\n    after reordering by model confidence. Here `ranked_i.pdb` should contain\n    the prediction with the (`i + 1`)-th highest confidence (so that\n    `ranked_0.pdb` has the highest confidence). To rank model confidence, we use\n    predicted LDDT (pLDDT) scores (see Jumper et al. 2021, Suppl. Methods 1.9.6\n    for details). If `--models_to_relax=all` then all ranked structures are\n    relaxed. If `--models_to_relax=best` then only `ranked_0.pdb` is relaxed\n    (the rest are unrelaxed). If `--models_to_relax=none`, then the ranked\n    structures are all unrelaxed.\n*   `ranking_debug.json` \u2013 A JSON format text file containing the pLDDT values\n    used to perform the model ranking, and a mapping back to the original model\n    names.\n*   `relax_metrics.json` \u2013 A JSON format text file containing relax metrics, for\n    instance remaining violations.\n*   `timings.json` \u2013 A JSON format text file containing the times taken to run\n    each section of the AlphaFold pipeline.\n*   `msas/` - A directory containing the files describing the various genetic\n    tool hits that were used to construct the input MSA.\n*   `result_model_*.pkl` \u2013 A `pickle` file containing a nested dictionary of the\n    various NumPy arrays directly produced by the model. In addition to the\n    output of the structure module, this includes auxiliary outputs such as:\n\n    *   Distograms (`distogram/logits` contains a NumPy array of shape [N_res,\n        N_res, N_bins] and `distogram/bin_edges` contains the definition of the\n        bins).\n    *   Per-residue pLDDT scores (`plddt` contains a NumPy array of shape\n        [N_res] with the range of possible values from `0` to `100`, where `100`\n        means most confident). This can serve to identify sequence regions\n        predicted with high confidence or as an overall per-target confidence\n        score when averaged across residues.\n    *   Present only if using pTM models: predicted TM-score (`ptm` field\n        contains a scalar). As a predictor of a global superposition metric,\n        this score is designed to also assess whether the model is confident in\n        the overall domain packing.\n    *   Present only if using pTM models: predicted pairwise aligned errors\n        (`predicted_aligned_error` contains a NumPy array of shape [N_res,\n        N_res] with the range of possible values from `0` to\n        `max_predicted_aligned_error`, where `0` means most confident). This can\n        serve for a visualisation of domain packing confidence within the\n        structure.\n\nThe pLDDT confidence measure is stored in the B-factor field of the output PDB\nfiles (although unlike a B-factor, higher pLDDT is better, so care must be taken\nwhen using for tasks such as molecular replacement).\n\nThis code has been tested to match mean top-1 accuracy on a CASP14 test set with\npLDDT ranking over 5 model predictions (some CASP targets were run with earlier\nversions of AlphaFold and some had manual interventions; see our forthcoming\npublication for details). Some targets such as T1064 may also have high\nindividual run variance over random seeds.\n"
      },
      "source": "https://raw.githubusercontent.com/deepmind/alphafold/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier"
  ],
  "somef_provenance": {
    "date": "2024-10-06 01:50:39",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 12352
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Examples",
        "parent_header": [
          "AlphaFold",
          "Running AlphaFold"
        ],
        "type": "Text_excerpt",
        "value": "Below are examples on how to use AlphaFold in different scenarios.\n"
      },
      "source": "https://raw.githubusercontent.com/deepmind/alphafold/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Folding a monomer",
        "parent_header": [
          "AlphaFold",
          "Running AlphaFold",
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "Say we have a monomer with the sequence `<SEQUENCE>`. The input fasta should be:\n\n```fasta\n>sequence_name\n<SEQUENCE>\n```\n\nThen run the following command:\n\n```bash\npython3 docker/run_docker.py \\\n  --fasta_paths=monomer.fasta \\\n  --max_template_date=2021-11-01 \\\n  --model_preset=monomer \\\n  --data_dir=$DOWNLOAD_DIR \\\n  --output_dir=/home/user/absolute_path_to_the_output_dir\n```\n"
      },
      "source": "https://raw.githubusercontent.com/deepmind/alphafold/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Folding a homomer",
        "parent_header": [
          "AlphaFold",
          "Running AlphaFold",
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "Say we have a homomer with 3 copies of the same sequence `<SEQUENCE>`. The input\nfasta should be:\n\n```fasta\n>sequence_1\n<SEQUENCE>\n>sequence_2\n<SEQUENCE>\n>sequence_3\n<SEQUENCE>\n```\n\nThen run the following command:\n\n```bash\npython3 docker/run_docker.py \\\n  --fasta_paths=homomer.fasta \\\n  --max_template_date=2021-11-01 \\\n  --model_preset=multimer \\\n  --data_dir=$DOWNLOAD_DIR \\\n  --output_dir=/home/user/absolute_path_to_the_output_dir\n```\n"
      },
      "source": "https://raw.githubusercontent.com/deepmind/alphafold/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Folding a heteromer",
        "parent_header": [
          "AlphaFold",
          "Running AlphaFold",
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "Say we have an A2B3 heteromer, i.e. with 2 copies of `<SEQUENCE A>` and 3 copies\nof `<SEQUENCE B>`. The input fasta should be:\n\n```fasta\n>sequence_1\n<SEQUENCE A>\n>sequence_2\n<SEQUENCE A>\n>sequence_3\n<SEQUENCE B>\n>sequence_4\n<SEQUENCE B>\n>sequence_5\n<SEQUENCE B>\n```\n\nThen run the following command:\n\n```bash\npython3 docker/run_docker.py \\\n  --fasta_paths=heteromer.fasta \\\n  --max_template_date=2021-11-01 \\\n  --model_preset=multimer \\\n  --data_dir=$DOWNLOAD_DIR \\\n  --output_dir=/home/user/absolute_path_to_the_output_dir\n```\n"
      },
      "source": "https://raw.githubusercontent.com/deepmind/alphafold/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Folding multiple monomers one after another",
        "parent_header": [
          "AlphaFold",
          "Running AlphaFold",
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "Say we have a two monomers, `monomer1.fasta` and `monomer2.fasta`.\n\nWe can fold both sequentially by using the following command:\n\n```bash\npython3 docker/run_docker.py \\\n  --fasta_paths=monomer1.fasta,monomer2.fasta \\\n  --max_template_date=2021-11-01 \\\n  --model_preset=monomer \\\n  --data_dir=$DOWNLOAD_DIR \\\n  --output_dir=/home/user/absolute_path_to_the_output_dir\n```\n"
      },
      "source": "https://raw.githubusercontent.com/deepmind/alphafold/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Folding multiple multimers one after another",
        "parent_header": [
          "AlphaFold",
          "Running AlphaFold",
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "Say we have a two multimers, `multimer1.fasta` and `multimer2.fasta`.\n\nWe can fold both sequentially by using the following command:\n\n```bash\npython3 docker/run_docker.py \\\n  --fasta_paths=multimer1.fasta,multimer2.fasta \\\n  --max_template_date=2021-11-01 \\\n  --model_preset=multimer \\\n  --data_dir=$DOWNLOAD_DIR \\\n  --output_dir=/home/user/absolute_path_to_the_output_dir\n```\n"
      },
      "source": "https://raw.githubusercontent.com/deepmind/alphafold/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Get in Touch",
        "parent_header": [
          "AlphaFold"
        ],
        "type": "Text_excerpt",
        "value": "If you have any questions not covered in this overview, please contact the\nAlphaFold team at [alphafold@deepmind.com](mailto:alphafold@deepmind.com).\n\nWe would love to hear your feedback and understand how AlphaFold has been useful\nin your research. Share your stories with us at\n[alphafold@deepmind.com](mailto:alphafold@deepmind.com).\n"
      },
      "source": "https://raw.githubusercontent.com/deepmind/alphafold/main/README.md",
      "technique": "header_analysis"
    }
  ]
}