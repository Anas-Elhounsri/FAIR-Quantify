{
  "application_domain": [
    {
      "confidence": 22.41,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ghl1995/LCTC"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-02-24T13:55:22Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-05-30T11:53:23Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9909737741624638,
      "result": {
        "original_header": "1.Introduction",
        "type": "Text_excerpt",
        "value": "Flexible  biomolecules  exist  as  an  ensemble  of  conformations  in  solution  that  have functional importance.  Cryo-EM can detect protein conformations frozen in solution and thus provide a promising way to characterize these conformational changes.  However, it remains challenging for existing software to elucidate multiple conformations and their distributions from a Cryo-EM dataset.  Analogous to the idea of constructing molecular orbitals via the linear combination of atomic orbitals (\u201cbasis set\u201d) to the orbital electronic  wave  functions,  we  developed  a  new  algorithm:  Linear  Combinations  of Template Conformations (LCTC) to obtain multiple conformations and their populations from Cryo-EM datasets.  Different from the widely used Clustering-based or MaximumLikelihood-based methods in Cryo-EM studies, LCTC assigns 2D images to the template 3D structures (\u201cbasis set\u201d) obtained by Multi-body Refinement of RELION via a novel two-stage matching algorithm.  The key advantage of our algorithm lies in an initial rapid assignment of experimental 2D images to template 2D images based on auto-correlation functions  of  image  contours.   This  first-stage  matching  process  can  efficiently  identify a  subset  of  experimental  2D  images  close  to  template  images  to  remove  the  majority of irrelevant experimental 2D images.  This enables a subsequently accurate,  but more expensive pixel-pixel matching of images with a fewer number of experimental 2D images. \nOur scheme is composed of four steps: 1) The best viewing angle to distinguish conformational changes is identified. 2) Template 3D structures generated by Multi-body Refinement of RELION are projected onto a number of viewing angles in proximity to the best viewing angle to generate template 2D images. 3) Cryo-EM 2D images are assigned to template 2D images via a two-stage matching process, in which the first computation of the pairwise distance was based on auto-correlation functions of the contours of masked images. Then comparison is performed on the pairwise distance based on pixel-pixel matching. 4) The populations of template structures are obtained.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ghl1995/LCTC/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9788260389994488,
      "result": {
        "original_header": "3.Dataset",
        "type": "Text_excerpt",
        "value": "Each dataset is consisted of template structures and experimental structures. We use two expmples to test our algorithm, one is \nsimulated dataset: Taq RNA Polymerase (RNAP), the second is real dataset: E coli RNAP.  \n"
      },
      "source": "https://raw.githubusercontent.com/ghl1995/LCTC/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9608142925213441,
      "result": {
        "original_header": "4.RUN",
        "type": "Text_excerpt",
        "value": "and `python ./two_stage_matching/analyze_population.py` to obatin populations for analysis.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ghl1995/LCTC/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ghl1995/LCTC/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ghl1995/LCTC/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ghl1995/LCTC"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Linear Combinations of Template Conformations (LCTC): An Efficient Method to Quantify Structural Distributions in Heterogeneous Cryo-EM Datasets"
      },
      "source": "https://raw.githubusercontent.com/ghl1995/LCTC/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ghl1995/LCTC/main/select_angle/project_pca.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ghl1995/LCTC/main/gen_2D_image/project_real.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ghl1995/LCTC/main/gen_2D_image/project_sim.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ghl1995/LCTC/main/two_stage_matching/gen_landmark.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ghl1995/LCTC/main/utils/pdb2vol.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.898397415277546,
      "result": {
        "original_header": "2.Requirements",
        "type": "Text_excerpt",
        "value": "python, linux system, relion and xmipp\n \n"
      },
      "source": "https://raw.githubusercontent.com/ghl1995/LCTC/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9834323921026336,
      "result": {
        "original_header": "4.RUN",
        "type": "Text_excerpt",
        "value": "Preprocess: you can use command: \n`xmipp_xmipp_volume_from_pdb -i open.pdb -o open.vol`     transfer pdb file to vol file \n"
      },
      "source": "https://raw.githubusercontent.com/ghl1995/LCTC/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8660684717807928,
      "result": {
        "original_header": "4.RUN",
        "type": "Text_excerpt",
        "value": "Preprocess: you can use command: \n`xmipp_xmipp_volume_from_pdb -i open.pdb -o open.vol`     transfer pdb file to vol file \n`xmipp_image_convert -i open.vol -o open.mrc`            transfer vol file to mrc file \nrun our algorithm: `python TSTM.py --datatype='sim' --vol_size=128`, the output is '2nd_stage_brute_force_classification_result.dat'  \n"
      },
      "source": "https://raw.githubusercontent.com/ghl1995/LCTC/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ghl1995/LCTC/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "LCTC"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "ghl1995"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 43426,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 5475,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ghl1995/LCTC/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 06:44:58",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ]
}