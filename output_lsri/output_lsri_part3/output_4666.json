{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Sim19/SimGEXPwMotifs"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-05-09T13:56:29Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-10-23T08:56:39Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Simulate gene expression data where gene expression is determined by a linear influential factor, such as motifs."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.8431746024741812,
      "result": {
        "original_header": "regNet: a python analysis for motif influence on gene expression",
        "type": "Text_excerpt",
        "value": "To determine the influence of motif activity on gene expression, we compare usual Ridge Regression with a Bayesian Linear Mixed Model (https://github.com/limix/limix)\n \n"
      },
      "source": "https://raw.githubusercontent.com/Sim19/SimGEXPwMotifs/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9903479221484223,
      "result": {
        "original_header": "SIMULATION OF DATA",
        "type": "Text_excerpt",
        "value": "We generate gene expression data where the gene expression is determined as linear relationship between motif scores and noise:\n    $$\\mathbf{Y}_{GENES, COND} = \\mathbf{M}_{GENES, TF} \\beta_{TF, COND} + \\text{noise}$$\n     \n"
      },
      "source": "https://raw.githubusercontent.com/Sim19/SimGEXPwMotifs/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9884935451754682,
      "result": {
        "original_header": "Features:",
        "type": "Text_excerpt",
        "value": "    - play with degree of signal between motifs $\\mathbf{M}\\beta$ and noise\n    - play with degree of structure in the noise\n \n"
      },
      "source": "https://raw.githubusercontent.com/Sim19/SimGEXPwMotifs/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Sim19/SimGEXPwMotifs/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Sim19/SimGEXPwMotifs/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Sim19/SimGEXPwMotifs"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/Sim19/SimGEXPwMotifs/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Sim19/SimGEXPwMotifs/master/dataGeneration.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.9999940601340908,
      "result": {
        "original_header": "Technical details",
        "type": "Text_excerpt",
        "value": "    - code is written for python2.7\n    - entire analysis can be run via command line with bash scripts\n    - conda environment provided\n \n"
      },
      "source": "https://raw.githubusercontent.com/Sim19/SimGEXPwMotifs/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999999787044092,
      "result": {
        "original_header": "CONDA-environment",
        "type": "Text_excerpt",
        "value": "You can create a conda environment with the provided YAML file:\n```bash\nconda env create --name NAME --file cmapPy_conda.yml\n```\nyou can then use the environment with \nBASH2*\nand when you're done using it, \nBASH3*\nFor more information, please go to \t[conda project](https://docs.conda.io/projects/conda/en/latest/user-guide/index.html).\n\t\n \n"
      },
      "source": "https://raw.githubusercontent.com/Sim19/SimGEXPwMotifs/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Sim19/SimGEXPwMotifs/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "gene-expression, motif, noise, simulated-data"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2019 Simone Lederer\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/Sim19/SimGEXPwMotifs/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SimGEXPwMotifs"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "Sim19"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 48576,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 1075,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Sim19/SimGEXPwMotifs/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "RUN LIMIX",
        "parent_header": [
          "Technical details"
        ],
        "type": "Text_excerpt",
        "value": "Compute Limix and Ridge Regression on simulated data\n\n"
      },
      "source": "https://raw.githubusercontent.com/Sim19/SimGEXPwMotifs/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "FEATURES",
        "parent_header": [
          "Technical details",
          "RUN LIMIX"
        ],
        "type": "Text_excerpt",
        "value": "    -run limix on generated dataset\n    -set noise-structure to be fit in limix\n \n\n### USAGE\n* $COND:    integer   \n    number of conditions\n    \n* $GENES:   integer   \n    number of genes   \n    Motif file for chosen genes/peaks must be provided in data/motif/ and can be set in \n            code/01_simulation/datageneration/motif.py \\\\\\\n   and can be performed with [gimmemotif]{https://\ngithub.com/vanheeringen-lab/gimmemotifs}\n\n* $TF:  integer   \n    number of Transcription Factors\n    \n* $SIGMA: string of \n   \"random\", \"randomV\", \"identity\", \"identityV\"    \n    Specify shape of generated noise: \n            where \"randomV\" and \"identityV\" exhibit structure similar to covariance \n    shape of Sigma (of generated data)\n\n* $NOISEFRACTION:   float between 0 and 1 \n  intensity of structure in noise in generated data\n   \n* $NOISE:      string ('random', 'id', 'diag')   \n    noise structure to be fit to data\n    \n* $GEN: string ('random', 'id', 'lowrank_2', 'lowrank_'$(0.5\\*$COND))   \n    covariance structure between samples (COND) used to generate data\n    \n* $ESTIM: string ('freeform', 'lowrank_$RANK', 'diagonal', 'block',...) (see limix for complete overview)\n\n* $FRAC:    float (value between 0 and 1)   \n    fraction of signal and noise ratio of generated data\n    \n* $INIT:    boolean   \n    initialize limix with real data\n  \n* $PERTURN: boolean \n    perturbation in limix (see limix for more detail)\n   \n* $NUM:     integer   \n    number of cores to use per replicate to compute limix\n   \n```bash\n./scripts/compLimix_withParam.sh -c $COND -G $GENES -T $TF -r $REP -S $SIGMA\t-N $NOISEFRACTION -E $NOISE\t-g $GEN -e $ESTIM -f $FRAC\n\t\t-i $INIT -p $PERTURB -n $NUM \n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/Sim19/SimGEXPwMotifs/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 17:17:47",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "USAGE",
        "parent_header": [
          "Technical details",
          "RUN LIMIX"
        ],
        "type": "Text_excerpt",
        "value": "*  $REP:  integer   \n    generate $REP randomly drawn sets of gene expression data.\n\n* $COND:    integer   \n    number of conditions/samples\n    \n* $GENES:   integer   \n    number of genes/peaks\n    \n*  Motif file for chosen genes/peaks must be provided in data/motif/ and can be set in \n            code/01_simulation/datageneration/motif.py \\\\\\\n   and can be performed with gimmemotifs (https://github.com/vanheeringen-lab/gimmemotifs)\n\n* $TF:  integer   \n    number of Transcription Factors\n\n*  $FRACTION: value between 0 and 1   \n    control degree of signal in gene expression from motifs or noise (FRACTION) .\n\n\n* $SIGMA: string of \n   \"random\", \"randomV\", \"identity\", \"identityV\"    \n    Specify shape of generated noise: \n            where \"randomV\" and \"identityV\" exhibit structure similar to covariance \n            between motif scores V. \n*  $NOISEFRACTION: floar between 0 and 1   \nintensity of structure in noise.\n   \nGenerated data is then stored in './data/simuliaton/' and the printed output of the console saved in './data/stats/' \n        \n ```bash\n ./scripts/dataGeneration.sh -r ${REP} -c ${COND} -G ${GENES} -T ${TF}  -S ${SIGMA} -f ${FRACTION} -N ${NOISEFRACTION}\n ```\n\nThe script automatically generates datasets for a covariance of shape:\n- identity (independence assumption)\n- random  (no-pre-defined) correlation assumption\n- lowrank_2 (block matrix with 2 block matrices along the diagonal)\n- lowrank_(0.5\\*$COND) (block matrix with 0.5\\*$COND blocks along the diagonal)\n"
      },
      "source": "https://raw.githubusercontent.com/Sim19/SimGEXPwMotifs/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Exemplary use of how to use data",
        "parent_header": [
          "Technical details",
          "RUN LIMIX"
        ],
        "type": "Text_excerpt",
        "value": "The generated data is stored as a cPickle-object. Those objects are generally loaded by\n```python\nimport cPickle as pickle\nimport pandas as pd\n\nwith open(FILENAME, 'rb') as f:\n    df = pickle.load(f)\n```\n\nThe data itself is stored in a Ybetaparams class, with slots for \n-Y\t\tthe gene expression data (pandas dataframe)\n-beta \t\tthe motif influential weights (pandas dataframe)\n-params\t\tparameter set that was used to generate data (class params_dict)\n\nTo access and use data further, I suggest the following:\n```python\n### load packages\nimport Ybetaparam as Ybp\nimport cPickle as pickle\n\n### FILENAMES\nFILE_PATH = \"data/simulation/\"\n'''#exemplary file name with \n-\"C_4\":\t\t4 conditions/samples, \n-\"G_978\":\t978 genes, \n-\"TF_623\":\t623 motifs, \n-\"V_lowrank_2\":\tassumend correlation between conditions a lowrank matrix of rank 2, \n-\"rep_2\":\t2 repititions, \n-\"Sigma_random\":\ta random noise matrix Sigma, \n-\"R2method_mean_V_mean_M\":\tinitialization strategy to control for the fraction in signal between motif influence and noise, and \n-\"frac_20\":\t20% of the signal being explained by the motifs, the rest being noise\n'''\nFILE_NAME = \"Ybetaparams_generated_C_4_G_978_TF_623_V_lowrank_2_rep_2_Sigma_random_R2method_mean_V_mean_M_frac_20.pkl\"\n\n# load Ybp object\nwith open(FILE_PATH + FILE_NAME, 'rb') as f:\n    Ybp = pickle.load(f)\n\n# repetitions are stored in columns\nY = Ybp.Y\n\n### get parameters used for data generation\nbeta = Ybp.beta\nparams = Ybp.parameter\n\n# motifs\nmotif = params.motif\n\n# covariance structure used to generate data\ncovarV = params[\"V\"]\n\n\n# information about shape of data\nGenes = params[\"G\"]\nCond = params[\"C\"]\n\n### reshape Y\n## get ith repetition of Y back into shape:\n# set i\ni = 0\n# subset Y and reshape\nY_i = Y.iloc[:,i].reshape(Genes, Cond, order='F')\n\n\n\n\n#### Your analysis comes here\n.....\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/Sim19/SimGEXPwMotifs/master/README.md",
      "technique": "header_analysis"
    }
  ]
}