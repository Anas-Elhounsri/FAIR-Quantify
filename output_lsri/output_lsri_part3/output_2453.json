{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Reference",
        "parent_header": [
          "Bfimpute: A Bayesian factorization method to recover single- cell RNA sequencing data"
        ],
        "type": "Text_excerpt",
        "value": "A Bayesian factorization method to recover single-cell RNA sequencing data. Z.-H. Wen, J. L. Langsam, L. Zhang, W. Shen, X. Zhou. Cell Reports Methods (2022) 2, 100133. https://doi.org/10.1016/j.crmeth.2021.100133\n\n"
      },
      "source": "https://raw.githubusercontent.com/maiziezhoulab/Bfimpute/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/maiziezhoulab/Bfimpute"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-09-27T15:59:46Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-01-16T15:08:35Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A Bayesian factorization method to recover single-cell RNA sequencing data."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9880486777122752,
      "result": {
        "original_header": "Bfimpute: A Bayesian factorization method to recover single- cell RNA sequencing data",
        "type": "Text_excerpt",
        "value": "Bfimpute is a powerful imputation tool for scRNA-seq data that\nrecovers the dropout event by factorizing the count matrix into the product\nof gene-specific and cell-specific feature matrices.\n \n"
      },
      "source": "https://raw.githubusercontent.com/maiziezhoulab/Bfimpute/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9975306707348922,
      "result": {
        "original_header": "Required",
        "type": "Text_excerpt",
        "value": "- `counts` Expression count matrix with rows corresponding to genes and\ncolumns corresponding to cells.\n- `ccluster` The cluster approach: give `labeled` and corporate with\nparam `label` (see details in `label`) if the cells are labeled;\ngive a specific number and a spectral clustering approach chosen from\n`Spectrum, specc` otherwise; and of cause you can use your own cluster\nmethod and give us a function with a matrix as input and a vector as output\nDefault is `c(7,\"Spectrum\")`.\n \n"
      },
      "source": "https://raw.githubusercontent.com/maiziezhoulab/Bfimpute/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9950496393485692,
      "result": {
        "original_header": "Optional",
        "type": "Text_excerpt",
        "value": "- `S_G` Gene latent matrix with `D` rows and the columns\ncorresponding to genes. Default is `NULL` which means no Gene latent\nmatrix.\n- `S_C` Cell latent matrix with `D` rows and the columns\ncorresponding to cells. Default is `NULL` which means no cell latent\nmatrix.\n- `label` Cell cluster labels which can be a vector, data.frame, matrix\nwith one row or one column, and etc (will only be used when `ccluster`\nis set to `labeled`). Default is `NULL`.\n- `normalized` Whether the `counts` is normalized. `TRUE` for\nyes and `FALSE` for not. If `FALSE`, Bfimpute will perform CPM and\nlog10 transform with bias 1.01. If `TRUE`, Bfimpute will not perform CPM\nor log10 transform. But we highly recommend you to use log-transform after\nnormalization on your own. Default is `FALSE`.\n- `D` Dimension of the latent factor. Default is `32`.\n- `totalepoch` Total number of epochs. Default is `300`.\n- `burnin` Number of burn-in epochs which are only be used as running\nMarkov chain. Default is `200`.\n- `sn_max` Maximum adaptive precision. Default is `10`.\n- `sn_init` Initial adaptive precision. Default is `1`.\n- `threshold` The threshold on dropout probabilities. Default is `0.5`.\n- `ncores` Number of cores used in parallel computation. Default is `5`.\n- `out_dir` The path and folder to store the results. Default is\n`\"./Bfimpute/\"`.\n- `out_name` The file name which Bfimpute will save as. Default is\n`\"Bfimpute\"`.\n- `out_type` The file type which Bfimpute will save as: \"csv\", \"txt\",\n\"rds\", and \"all\" for all the three types, or \"none\" for just returning\nwithout saving. Default is `\"all\"`.\n- `returnGC` Whether return the G and C matrices of the final epoch. If\n`TRUE`, `Bfimpute` will return a list which consists of the imputed\nmatrix `R_calculate`, `G`, and `C`. If `FALSE`, `Bfimpute` will return the\nimputed matrix only. Default is `FALSE`.\n \n"
      },
      "source": "https://raw.githubusercontent.com/maiziezhoulab/Bfimpute/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9695729402066329,
      "result": {
        "original_header": "Note",
        "type": "Text_excerpt",
        "value": "The tool is implemented with hyperparameters set to: `\\mu_0=0`, `\\beta_0=2`,\n`\\nu_0=D`, and `W_0=I` (the identity matrix).\n \n"
      },
      "source": "https://raw.githubusercontent.com/maiziezhoulab/Bfimpute/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/maiziezhoulab/Bfimpute/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/maiziezhoulab/Bfimpute/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "maiziezhoulab/Bfimpute"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Bfimpute: A Bayesian factorization method to recover single- cell RNA sequencing data"
      },
      "source": "https://raw.githubusercontent.com/maiziezhoulab/Bfimpute/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://doi.org/10.5281/zenodo.5676122"
      },
      "source": "https://raw.githubusercontent.com/maiziezhoulab/Bfimpute/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "Bfimpute: A Bayesian factorization method to recover single- cell RNA sequencing data"
        ],
        "type": "Text_excerpt",
        "value": "You can also install the most recent updates of Bfimpute from github with:\n```R\n# install.packages(\"devtools\")\ndevtools::install_github(\"maiziezhoulab/Bfimpute\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/maiziezhoulab/Bfimpute/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/maiziezhoulab/Bfimpute/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Bfimpute"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "maiziezhoulab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 23848,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/maiziezhoulab/Bfimpute/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 08:55:07",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Examples",
        "parent_header": [
          "Bfimpute: A Bayesian factorization method to recover single- cell RNA sequencing data"
        ],
        "type": "Text_excerpt",
        "value": "In this section we will run the dataset from [Chu. et al (2016)](https://link.springer.com/article/10.1186/s13059-016-1033-x)\nand the version with QC can be downloaded from\n[here](https://drive.google.com/drive/folders/1C2rjTDy3Lvi4DE988FvGSOOCODVUyDI-?usp=sharing).\n"
      },
      "source": "https://raw.githubusercontent.com/maiziezhoulab/Bfimpute/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "with spectral clustering",
        "parent_header": [
          "Bfimpute: A Bayesian factorization method to recover single- cell RNA sequencing data",
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "```R\nlibrary(Bfimpute)\n```\nSet the folder direction of your data below:\n```R\ndata_dir = \"./\"\n```\nFor dataset we present, you can load the cell types, bulk and scRNAseq counts\nmatrices as followed:\n```R\ncounts = read.csv(paste0(data_dir, \"sc_qc.csv\"), row.names = 1, header = T)\n# counts[1:5,1:5]\nbulk = read.csv(paste0(data_dir, \"bulk_qc.csv\"), row.names = 1, header = T)\n# bulk[1:5,1:5]\ncell_type = read.csv(paste0(data_dir, \"cell_type.csv\"), row.names = 1, header = T)\n# unique(cell_type)\n```\nAs we already know that there are `7` cell types in this dataset, we can run\n`Bfimpute` using `Spectrum` or `specc` as shown:\n```R\ncounts_imputed <- Bfimpute(counts, ccluster = c(7,\"Spectrum\"), ncores = 5)\n# or\n# counts_imputed <- Bfimpute(counts, ccluster = c(7,\"specc\"), ncores = 5)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/maiziezhoulab/Bfimpute/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "with other clustering methods",
        "parent_header": [
          "Bfimpute: A Bayesian factorization method to recover single- cell RNA sequencing data",
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "If other clustering methods implemented in the future is more powerful, we can\neasily use them and replace our clustering step by building a function. The\ninput of function `ccluster` should be a matrix with points to cluster as\ncolumns and rows as features, while the output is a vector of cluster result.\n\nWe present `kmeans` as an example here:\n```R\nN = 7 # number of cell types\nccluster = function(x){kmeans(t(x), centers = N)$cluster}\ncounts_imputed <- Bfimpute(counts = counts, ccluster = ccluster, ncores = 5)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/maiziezhoulab/Bfimpute/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "with cell labels instead of clustering",
        "parent_header": [
          "Bfimpute: A Bayesian factorization method to recover single- cell RNA sequencing data",
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "If the labeled cell type is given as it is now, we can use them to replace\nclustering step and gain more accuracy:\n```R\ncounts_imputed <- Bfimpute(counts, ccluster = \"labeled\", label = cell_type, ncores = 5)\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/maiziezhoulab/Bfimpute/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Gene or cell related information",
        "parent_header": [
          "Bfimpute: A Bayesian factorization method to recover single- cell RNA sequencing data",
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "If some gene side information is available for the raw counts, make it a\npositive matrix and having columns in the same gene orders as in the row of the\ncount matrix. And we can use them to assist the imputation (`ccluster` here can\nbe changed to any options mentioned above):\n```R\nS_G = t(bulk)\ncounts_imputed <- Bfimpute(counts, ccluster = c(7,\"Spectrum\"), S_G = S_G, ncores = 5)\n```\nSimilarly, if some cell side information is also available, make it a positive\nmatrix and having columns in the same cell orders as in the column of the count\nmatrix. And use the parameter `S_C` in the same way.\n"
      },
      "source": "https://raw.githubusercontent.com/maiziezhoulab/Bfimpute/master/README.md",
      "technique": "header_analysis"
    }
  ]
}