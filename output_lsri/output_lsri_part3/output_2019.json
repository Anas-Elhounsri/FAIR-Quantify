{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/KohlbacherLab/deregnet"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2017-11-29T09:18:28Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-05-10T16:56:51Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Find deregulated signaling pathways"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "parent_header": [
          "<a href=\"https://dereg.net/\">DeRegNet</a> - Find deregulated subnetworks"
        ],
        "type": "Text_excerpt",
        "value": "One of the main challenges of high-throuput omics technologies \n(genomics, transcriptomics, proteomics, metabolomics, etc.) is the \ninterpretation and analysis of the resulting datasets in terms\nof known or previously unknown biologial processes. Biological networks\n(transcriptional regulatory networks, signaling networks, metabolic\nnetwork, etc.) provide promising scaffolds for approaching\nmulti-omics datasets. Existing resources, constructed for\nexample from pathway databases like KEGG, Reactome, etc., provide\nextensive interconnected networks linking genes, proteins and other\nbiological agents by various kinds of interactions like generic\nactivation or inhibition, transcriptional suppression or postranscriptional\nmodifications like posphorylation. DeRegNet allows the extraction and\nprioritisation of subnetworks of larger biomolecular networks based on\nsuitable omics data like for example gene expression.\n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/deregnet/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9732091496218731,
      "result": {
        "original_header": "<a href=\"https://dereg.net/\">DeRegNet</a> - Find deregulated subnetworks",
        "type": "Text_excerpt",
        "value": "by [Sebastian Winkler](https://github.com/sebwink) and [Applied Bioinformatics Group](https://kohlbacherlab.org/), University of Tuebingen\n \n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/deregnet/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/KohlbacherLab/deregnet/wiki"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/deregnet/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/KohlbacherLab/deregnet/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KohlbacherLab/deregnet/master/examples/jupyterlab/deregnet-example.ipynb"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/deregnet/master/examples/jupyterlab/deregnet-example.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KohlbacherLab/deregnet/master/benchmark/deregnet_benchmark.ipynb"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/deregnet/master/benchmark/deregnet_benchmark.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/KohlbacherLab/deregnet/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "KohlbacherLab/deregnet"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DeRegNet - Find deregulated subnetworks"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/deregnet/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KohlbacherLab/deregnet/master/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/deregnet/master/Dockerfile",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KohlbacherLab/deregnet/master/docker/named-user/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/deregnet/master/docker/named-user/Dockerfile",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KohlbacherLab/deregnet/master/docker/lemon-headers/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/deregnet/master/docker/lemon-headers/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KohlbacherLab/deregnet/master/examples/command-line/run.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KohlbacherLab/deregnet/master/examples/jupyterlab/run.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KohlbacherLab/deregnet/master/examples/custom-python-script/run.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KohlbacherLab/deregnet/master/graphs/kegg/kegggraph/bin/construct_kegg_graph.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sebwink/deregnet/master/doc/example.png"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/deregnet/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Setup for use with a Gurobi named-user license",
        "parent_header": [
          "<a href=\"https://dereg.net/\">DeRegNet</a> - Find deregulated subnetworks",
          "Run via Docker"
        ],
        "type": "Text_excerpt",
        "value": "In case of a Gurobi [named user academic license](https://www.gurobi.com/documentation/9.0/quickstart_linux/creating_a_new_academic_li.html#subsection:createacademiclicense) you also need to make your license file known to the deregnet \nDocker container. Do this by\n\n```sh\nexport GUROBI_LICENSE=<path to your license file>\n```\nbefore running deregnet.\n\nBy default the license file will be expected in *~/.licenses/gurobi*.\n\nIn order to make a named user license work for deregnet, one additional step is to find the MAC address with respect to which your license\nis registered. Do the following before running deregnet:\n\n```\nexport MAC_ADDRESS_FOR_GUROBI_DOCKER=<YOUR-MAC-ADDRESS>\n```\n\nFinding your right \\<YOUR-MAC-ADDRESS\\> is system-specific, in case of doubt, try all MAC addresses listed by *ifconfig -a* and proceed by trial and error until\nyour license is accepted while running deregnet (see below).\n\nOnce the license is configured, the best way to run deregnet is via [*docker/named-user/run*](https://github.com/sebwink/deregnet/tree/master/docker/named-user) script:\n\n```sh\ndocker/named-user/run <DEREGNET_IMAGE> <CMD>\n```\nSee below for further information about the \\<DEREGNET_IMAGE\\> and \\<CMD\\> placeholders.\n\n### \\<DEREGNET_IMAGE\\>\n\nDeregnet Docker images are available from [Docker Hub](https://hub.docker.com/r/sebwink/deregnet) and [GitHub Packages](https://github.com/sebwink/deregnet/packages). Usually, you should be able to just run:\n\n```sh\ndocker/token-server/run sebwink/deregnet:latest <CMD>\n```\n\nTo run a specific release of deregnet run for example:\n\n\n```sh\ndocker/token-server/run sebwink/deregnet:0.99.999 <CMD>\n```\n\nThe best way to run with a specific [supported](https://github.com/sebwink/gurobi-docker/blob/master/GUROBI_VERSIONS) Gurobi version is for example like so:\n\n\n```sh\ndocker/token-server/run sebwink/deregnet-grb9.0.2:0.99.999 <CMD>\n```\n\n```sh\ndocker/token-server/run sebwink/deregnet-grb8.1.1:latest <CMD>\n```\n\n### \\<CMD\\>\n  \nderegnet Docker images support multiple commands. The most straight-forward one is to [use](https://github.com/sebwink/deregnet/tree/master/examples/command-line) the main script for deregnet:\n\n```sh\ndocker/named-user/run sebwink/deregnet:latest avgdrgnt.py --help\n```\n\n```sh\nusage: avgdrgnt.py [-h] [--include-file INCLUDE_FILE]\n                   [--include-genesets INCLUDE_GENESETS] [--include INCLUDE]\n                   [--include-id-type INCLUDE_ID_TYPE]\n                   [--exclude-file EXCLUDE_FILE]\n                   [--exclude-genesets EXCLUDE_GENESETS] [--exclude EXCLUDE]\n                   [--exclude-id-type EXCLUDE_ID_TYPE] [--debug]\n                   [--absolute-values] --graph GRAPH --scores SCORE_FILE\n                   [--default-score DEFAULT_SCORE] [--score-column SCORE_COL]\n                   [--score-file-without-header] [--id-column ID_COL]\n                   [--sep SEP] [--biomap-mapper ID_MAPPER]\n                   [--score-id-type SCORE_ID_TYPE]\n                   [--graph-id-type GRAPH_ID_TYPE]\n                   [--graph-id-attr GRAPH_ID_ATTR] [--suboptimal SUBOPTIMAL]\n                   [--max-overlap-percentage MAX_OVERLAP] [--gap-cut GAP_CUT]\n                   [--time-limit TIME_LIMIT] [--model_sense {min,max}]\n                   [--output-path OUTPUT] [--flip-orientation]\n                   [--min-size MIN_SIZE] [--max-size MAX_SIZE]\n                   [--min-num-terminals MIN_NUM_TERMINALS]\n                   [--algorithm {GeneralizedCharnesCooper,Dinkelbach,ObjectiveVariableTransform}]\n                   [--receptor-file RECEPTOR_FILE]\n                   [--receptor-genesets RECEPTOR_GENESETS]\n                   [--receptor RECEPTOR] [--receptor-id-type RECEPTOR_ID_TYPE]\n                   [--terminal-file TERMINAL_FILE]\n                   [--terminal-genesets TERMINAL_GENESETS]\n                   [--terminal TERMINAL] [--terminal-id-type TERMINAL_ID_TYPE]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --include-file INCLUDE_FILE\n                        Path to GMT or GRP file containing genes defining the\n                        include layer.\n  --include-genesets INCLUDE_GENESETS\n                        Comma seperated list of geneset names for include\n                        layer,only applicable if GMT file provided.\n  --include INCLUDE     Comma seperated list of IDs defining the include\n                        layer.\n  --include-id-type INCLUDE_ID_TYPE\n                        Id-type for include layer genesets. Options: all\n                        supported by chosen biomap mapper\n  --exclude-file EXCLUDE_FILE\n                        Path to GMT or GRP file containing genes defining the\n                        exclude layer.\n  --exclude-genesets EXCLUDE_GENESETS\n                        Comma seperated list of geneset names for exclude\n                        layer,only applicable if GMT file provided.\n  --exclude EXCLUDE     Comma seperated list of IDs defining the exclude\n                        layer.\n  --exclude-id-type EXCLUDE_ID_TYPE\n                        Id-type for exclude layer genesets. Options: all\n                        supported by chosen biomap mapper\n  --debug               Debug underlying C++ code with gdb.\n  --absolute-values     Whether to take absolute values of the scores.\n  --graph GRAPH         A graphml file containing the graph you want to run\n                        drgnt with.\n  --scores SCORE_FILE   A text file containing the scores. See further options\n                        below.\n  --default-score DEFAULT_SCORE\n                        The score of nodes in the graph which are not scored\n                        in your score file. Default: 0.0\n  --score-column SCORE_COL\n                        Column name of (gene) id in your score file. Default:\n                        score\n  --score-file-without-header\n                        Flag to indicate whether the score file has a header\n                        or not.\n  --id-column ID_COL    Column name of (gene) id in your score file. Default:\n                        id\n  --sep SEP             The column seperator in your score file.Options:\n                        comma, tab. Default: \\t\n  --biomap-mapper ID_MAPPER\n                        biomap mapper you want to use for id mapping. Default:\n                        hgnc\n  --score-id-type SCORE_ID_TYPE\n                        Which id type do you have in your score file? Options:\n                        all thosesupported by the biomap mapper you chose or\n                        unspecified. Default: same as graph id type\n  --graph-id-type GRAPH_ID_TYPE\n                        Which id type does the graph have? Options: all those\n                        supportedby the biomap mapper you chose or\n                        unspecified. Default: unspecifed i.e. None\n  --graph-id-attr GRAPH_ID_ATTR\n                        Node attribute which contains the relevant id in the\n                        graphml. Default: name\n  --suboptimal SUBOPTIMAL\n                        Number of suboptimal subgraphs you want to find.\n                        (Increases runtime)\n  --max-overlap-percentage MAX_OVERLAP\n                        How much can suboptimal subgraphs overlap with already\n                        found subgraphs. Default: 0\n  --gap-cut GAP_CUT     Stop optimization prematurely if current solution\n                        within GAP of optimal solution. Default: None\n  --time-limit TIME_LIMIT\n                        Set a time limit in seconds. Default: None\n  --model_sense {min,max}\n                        Model sense. Default: max\n  --output-path OUTPUT  Folder to which output is written. (Does not have to\n                        exist.) Default : cwd\n  --flip-orientation    Set --flip-orientation when you want to flip the\n                        orientation of the underlying graph.\n  --min-size MIN_SIZE   Minimal size of the resulting subgraph(s). Default :\n                        15\n  --max-size MAX_SIZE   Maximal size of the resulting subgraph(s). Default :\n                        15\n  --min-num-terminals MIN_NUM_TERMINALS\n                        Minimum number of terminals in the resulting\n                        subgraph(s). Default : 0\n  --algorithm {GeneralizedCharnesCooper,Dinkelbach,ObjectiveVariableTransform}\n                        Algorithm to use to solve the fractional integer\n                        programming problem.Default: GeneralizedCharnesCooper.\n  --receptor-file RECEPTOR_FILE\n                        Path to GMT or GRP file containing genes defining the\n                        receptor layer.\n  --receptor-genesets RECEPTOR_GENESETS\n                        Comma seperated list of geneset names for receptor\n                        layer,only applicable if GMT file provided.\n  --receptor RECEPTOR   Comma seperated list of IDs defining the receptor\n                        layer.\n  --receptor-id-type RECEPTOR_ID_TYPE\n                        Id-type for receptor layer genesets. Options: all\n                        supported by chosen biomap mapper\n  --terminal-file TERMINAL_FILE\n                        Path to GMT or GRP file containing genes defining the\n                        terminal layer.\n  --terminal-genesets TERMINAL_GENESETS\n                        Comma seperated list of geneset names for terminal\n                        layer,only applicable if GMT file provided.\n  --terminal TERMINAL   Comma seperated list of IDs defining the terminal\n                        layer.\n  --terminal-id-type TERMINAL_ID_TYPE\n                        Id-type for terminal layer genesets. Options: all\n                        supported by chosen biomap mapper\n```\n\nFor example:\n\n```sh \ndocker/name-user/run sebwink/deregnet:latest avgdrgnt.py \\\n  --graph test/kegg_hsa.graphml \\\n  --scores test/data/score.csv \\\n  --sep , \\\n  --graph-id-attr ensembl\n``` \n\nOther commands include *drgnt.py* (Optimization for absolute, not average, best subgraphs).\n\nThe most frequent other use cases are to run [Jupyter Lab](https://github.com/sebwink/deregnet/tree/master/examples/jupyterlab) or custom [Python scripts](https://github.com/sebwink/deregnet/tree/master/examples/custom-python-script).\n\n### [Examples](https://github.com/sebwink/deregnet/tree/master/examples)\n\n### Input-output via Docker volumes\n\nGenerally your current working directory will be mounted in the running Docker containers. Also some Docker-necessitated access right and owner\nsanitations will be carried out, [see for example](https://github.com/sebwink/deregnet/blob/master/docker/named-user/run).\n\n### Security considerations\n\nOnly run the deregnet images in trusted environments.\n\n## Visualization via [BioGraphVisArt](https://kohlbacherlab.github.io/BioGraphVisart/BioGraphVisart)\n\nThe subgraphs generated by DeRegNet are best visualized with [BioGraphVisArt](https://kohlbacherlab.github.io/BioGraphVisart/).\n\n### [Example](https://kohlbacherlab.github.io/BioGraphVisart/example) visualization\n\n![alt text](https://github.com/sebwink/deregnet/blob/master/doc/example.png \"Visualizing subgraphs with BioGraphVisArt\")\n\n## General remarks\n\nFeedback and problems can be reported via GitHub [Issues](https://github.com/sebwink/deregnet/issues).\n\n[ProjectPage](https://sebwink.github.io/deregnet/)\n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/deregnet/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9680893596279314,
      "result": {
        "original_header": "Setup for use with a Gurobi named-user license",
        "type": "Text_excerpt",
        "value": "Feedback and problems can be reported via GitHub [Issues](https://github.com/sebwink/deregnet/issues). \n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/deregnet/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/KohlbacherLab/deregnet/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "BSD 3-Clause \"New\" or \"Revised\" License",
        "spdx_id": "BSD-3-Clause",
        "type": "License",
        "url": "https://api.github.com/licenses/bsd-3-clause",
        "value": "https://api.github.com/licenses/bsd-3-clause"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "BSD 3-Clause License\n\nCopyright (c) 2017, sebwink\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/deregnet/master/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Gurobi floating license",
        "parent_header": [
          "<a href=\"https://dereg.net/\">DeRegNet</a> - Find deregulated subnetworks",
          "Run via Docker"
        ],
        "type": "Text_excerpt",
        "value": "In case of a Gurobi [token server / floating license](https://www.gurobi.com/documentation/9.0/quickstart_linux/creating_a_token_server_cl.html#subsection:clientlicensetoken) you need to make your license file known to the deregnet \nDocker container. Do this by\n\n```sh\nexport GUROBI_LICENSE=<path to your license file>\n```\nbefore running deregnet.\n\nBy default the license file will be expected in *~/.licenses/gurobi*.\nYou need to make sure that the license server configured in your license is reachable from Docker containers\nrunning on your host.\n\nOnce the license is configured, the best way to run deregnet is via [*docker/token-server/run*](https://github.com/sebwink/deregnet/tree/master/docker/token-server) script:\n\n```sh\ndocker/token-server/run <DEREGNET_IMAGE> <CMD>\n```\nSee below for further information about the \\<DEREGNET_IMAGE\\> and \\<CMD\\> placeholders.\n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/deregnet/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Setup for use with a Gurobi named-user license",
        "parent_header": [
          "<a href=\"https://dereg.net/\">DeRegNet</a> - Find deregulated subnetworks",
          "Run via Docker"
        ],
        "type": "Text_excerpt",
        "value": "In case of a Gurobi [named user academic license](https://www.gurobi.com/documentation/9.0/quickstart_linux/creating_a_new_academic_li.html#subsection:createacademiclicense) you also need to make your license file known to the deregnet \nDocker container. Do this by\n\n```sh\nexport GUROBI_LICENSE=<path to your license file>\n```\nbefore running deregnet.\n\nBy default the license file will be expected in *~/.licenses/gurobi*.\n\nIn order to make a named user license work for deregnet, one additional step is to find the MAC address with respect to which your license\nis registered. Do the following before running deregnet:\n\n```\nexport MAC_ADDRESS_FOR_GUROBI_DOCKER=<YOUR-MAC-ADDRESS>\n```\n\nFinding your right \\<YOUR-MAC-ADDRESS\\> is system-specific, in case of doubt, try all MAC addresses listed by *ifconfig -a* and proceed by trial and error until\nyour license is accepted while running deregnet (see below).\n\nOnce the license is configured, the best way to run deregnet is via [*docker/named-user/run*](https://github.com/sebwink/deregnet/tree/master/docker/named-user) script:\n\n```sh\ndocker/named-user/run <DEREGNET_IMAGE> <CMD>\n```\nSee below for further information about the \\<DEREGNET_IMAGE\\> and \\<CMD\\> placeholders.\n\n### \\<DEREGNET_IMAGE\\>\n\nDeregnet Docker images are available from [Docker Hub](https://hub.docker.com/r/sebwink/deregnet) and [GitHub Packages](https://github.com/sebwink/deregnet/packages). Usually, you should be able to just run:\n\n```sh\ndocker/token-server/run sebwink/deregnet:latest <CMD>\n```\n\nTo run a specific release of deregnet run for example:\n\n\n```sh\ndocker/token-server/run sebwink/deregnet:0.99.999 <CMD>\n```\n\nThe best way to run with a specific [supported](https://github.com/sebwink/gurobi-docker/blob/master/GUROBI_VERSIONS) Gurobi version is for example like so:\n\n\n```sh\ndocker/token-server/run sebwink/deregnet-grb9.0.2:0.99.999 <CMD>\n```\n\n```sh\ndocker/token-server/run sebwink/deregnet-grb8.1.1:latest <CMD>\n```\n\n### \\<CMD\\>\n  \nderegnet Docker images support multiple commands. The most straight-forward one is to [use](https://github.com/sebwink/deregnet/tree/master/examples/command-line) the main script for deregnet:\n\n```sh\ndocker/named-user/run sebwink/deregnet:latest avgdrgnt.py --help\n```\n\n```sh\nusage: avgdrgnt.py [-h] [--include-file INCLUDE_FILE]\n                   [--include-genesets INCLUDE_GENESETS] [--include INCLUDE]\n                   [--include-id-type INCLUDE_ID_TYPE]\n                   [--exclude-file EXCLUDE_FILE]\n                   [--exclude-genesets EXCLUDE_GENESETS] [--exclude EXCLUDE]\n                   [--exclude-id-type EXCLUDE_ID_TYPE] [--debug]\n                   [--absolute-values] --graph GRAPH --scores SCORE_FILE\n                   [--default-score DEFAULT_SCORE] [--score-column SCORE_COL]\n                   [--score-file-without-header] [--id-column ID_COL]\n                   [--sep SEP] [--biomap-mapper ID_MAPPER]\n                   [--score-id-type SCORE_ID_TYPE]\n                   [--graph-id-type GRAPH_ID_TYPE]\n                   [--graph-id-attr GRAPH_ID_ATTR] [--suboptimal SUBOPTIMAL]\n                   [--max-overlap-percentage MAX_OVERLAP] [--gap-cut GAP_CUT]\n                   [--time-limit TIME_LIMIT] [--model_sense {min,max}]\n                   [--output-path OUTPUT] [--flip-orientation]\n                   [--min-size MIN_SIZE] [--max-size MAX_SIZE]\n                   [--min-num-terminals MIN_NUM_TERMINALS]\n                   [--algorithm {GeneralizedCharnesCooper,Dinkelbach,ObjectiveVariableTransform}]\n                   [--receptor-file RECEPTOR_FILE]\n                   [--receptor-genesets RECEPTOR_GENESETS]\n                   [--receptor RECEPTOR] [--receptor-id-type RECEPTOR_ID_TYPE]\n                   [--terminal-file TERMINAL_FILE]\n                   [--terminal-genesets TERMINAL_GENESETS]\n                   [--terminal TERMINAL] [--terminal-id-type TERMINAL_ID_TYPE]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --include-file INCLUDE_FILE\n                        Path to GMT or GRP file containing genes defining the\n                        include layer.\n  --include-genesets INCLUDE_GENESETS\n                        Comma seperated list of geneset names for include\n                        layer,only applicable if GMT file provided.\n  --include INCLUDE     Comma seperated list of IDs defining the include\n                        layer.\n  --include-id-type INCLUDE_ID_TYPE\n                        Id-type for include layer genesets. Options: all\n                        supported by chosen biomap mapper\n  --exclude-file EXCLUDE_FILE\n                        Path to GMT or GRP file containing genes defining the\n                        exclude layer.\n  --exclude-genesets EXCLUDE_GENESETS\n                        Comma seperated list of geneset names for exclude\n                        layer,only applicable if GMT file provided.\n  --exclude EXCLUDE     Comma seperated list of IDs defining the exclude\n                        layer.\n  --exclude-id-type EXCLUDE_ID_TYPE\n                        Id-type for exclude layer genesets. Options: all\n                        supported by chosen biomap mapper\n  --debug               Debug underlying C++ code with gdb.\n  --absolute-values     Whether to take absolute values of the scores.\n  --graph GRAPH         A graphml file containing the graph you want to run\n                        drgnt with.\n  --scores SCORE_FILE   A text file containing the scores. See further options\n                        below.\n  --default-score DEFAULT_SCORE\n                        The score of nodes in the graph which are not scored\n                        in your score file. Default: 0.0\n  --score-column SCORE_COL\n                        Column name of (gene) id in your score file. Default:\n                        score\n  --score-file-without-header\n                        Flag to indicate whether the score file has a header\n                        or not.\n  --id-column ID_COL    Column name of (gene) id in your score file. Default:\n                        id\n  --sep SEP             The column seperator in your score file.Options:\n                        comma, tab. Default: \\t\n  --biomap-mapper ID_MAPPER\n                        biomap mapper you want to use for id mapping. Default:\n                        hgnc\n  --score-id-type SCORE_ID_TYPE\n                        Which id type do you have in your score file? Options:\n                        all thosesupported by the biomap mapper you chose or\n                        unspecified. Default: same as graph id type\n  --graph-id-type GRAPH_ID_TYPE\n                        Which id type does the graph have? Options: all those\n                        supportedby the biomap mapper you chose or\n                        unspecified. Default: unspecifed i.e. None\n  --graph-id-attr GRAPH_ID_ATTR\n                        Node attribute which contains the relevant id in the\n                        graphml. Default: name\n  --suboptimal SUBOPTIMAL\n                        Number of suboptimal subgraphs you want to find.\n                        (Increases runtime)\n  --max-overlap-percentage MAX_OVERLAP\n                        How much can suboptimal subgraphs overlap with already\n                        found subgraphs. Default: 0\n  --gap-cut GAP_CUT     Stop optimization prematurely if current solution\n                        within GAP of optimal solution. Default: None\n  --time-limit TIME_LIMIT\n                        Set a time limit in seconds. Default: None\n  --model_sense {min,max}\n                        Model sense. Default: max\n  --output-path OUTPUT  Folder to which output is written. (Does not have to\n                        exist.) Default : cwd\n  --flip-orientation    Set --flip-orientation when you want to flip the\n                        orientation of the underlying graph.\n  --min-size MIN_SIZE   Minimal size of the resulting subgraph(s). Default :\n                        15\n  --max-size MAX_SIZE   Maximal size of the resulting subgraph(s). Default :\n                        15\n  --min-num-terminals MIN_NUM_TERMINALS\n                        Minimum number of terminals in the resulting\n                        subgraph(s). Default : 0\n  --algorithm {GeneralizedCharnesCooper,Dinkelbach,ObjectiveVariableTransform}\n                        Algorithm to use to solve the fractional integer\n                        programming problem.Default: GeneralizedCharnesCooper.\n  --receptor-file RECEPTOR_FILE\n                        Path to GMT or GRP file containing genes defining the\n                        receptor layer.\n  --receptor-genesets RECEPTOR_GENESETS\n                        Comma seperated list of geneset names for receptor\n                        layer,only applicable if GMT file provided.\n  --receptor RECEPTOR   Comma seperated list of IDs defining the receptor\n                        layer.\n  --receptor-id-type RECEPTOR_ID_TYPE\n                        Id-type for receptor layer genesets. Options: all\n                        supported by chosen biomap mapper\n  --terminal-file TERMINAL_FILE\n                        Path to GMT or GRP file containing genes defining the\n                        terminal layer.\n  --terminal-genesets TERMINAL_GENESETS\n                        Comma seperated list of geneset names for terminal\n                        layer,only applicable if GMT file provided.\n  --terminal TERMINAL   Comma seperated list of IDs defining the terminal\n                        layer.\n  --terminal-id-type TERMINAL_ID_TYPE\n                        Id-type for terminal layer genesets. Options: all\n                        supported by chosen biomap mapper\n```\n\nFor example:\n\n```sh \ndocker/name-user/run sebwink/deregnet:latest avgdrgnt.py \\\n  --graph test/kegg_hsa.graphml \\\n  --scores test/data/score.csv \\\n  --sep , \\\n  --graph-id-attr ensembl\n``` \n\nOther commands include *drgnt.py* (Optimization for absolute, not average, best subgraphs).\n\nThe most frequent other use cases are to run [Jupyter Lab](https://github.com/sebwink/deregnet/tree/master/examples/jupyterlab) or custom [Python scripts](https://github.com/sebwink/deregnet/tree/master/examples/custom-python-script).\n\n### [Examples](https://github.com/sebwink/deregnet/tree/master/examples)\n\n### Input-output via Docker volumes\n\nGenerally your current working directory will be mounted in the running Docker containers. Also some Docker-necessitated access right and owner\nsanitations will be carried out, [see for example](https://github.com/sebwink/deregnet/blob/master/docker/named-user/run).\n\n### Security considerations\n\nOnly run the deregnet images in trusted environments.\n\n## Visualization via [BioGraphVisArt](https://kohlbacherlab.github.io/BioGraphVisart/BioGraphVisart)\n\nThe subgraphs generated by DeRegNet are best visualized with [BioGraphVisArt](https://kohlbacherlab.github.io/BioGraphVisart/).\n\n### [Example](https://kohlbacherlab.github.io/BioGraphVisart/example) visualization\n\n![alt text](https://github.com/sebwink/deregnet/blob/master/doc/example.png \"Visualizing subgraphs with BioGraphVisArt\")\n\n## General remarks\n\nFeedback and problems can be reported via GitHub [Issues](https://github.com/sebwink/deregnet/issues).\n\n[ProjectPage](https://sebwink.github.io/deregnet/)\n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/deregnet/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "deregnet"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "KohlbacherLab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 264813,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 191350,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 104362,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 3233,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 2567,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 2413,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 557,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KohlbacherLab/deregnet/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sebwink",
          "type": "User"
        },
        "date_created": "2021-05-10T16:56:48Z",
        "date_published": "2021-05-10T16:48:14Z",
        "description": "Release of software corresponding to paper (**de novo identification of maximally deregulated subnetworks based on multi-omics data with DeRegNet**)",
        "html_url": "https://github.com/KohlbacherLab/deregnet/releases/tag/0.99.999",
        "name": "Paper release",
        "release_id": 42718632,
        "tag": "0.99.999",
        "tarball_url": "https://api.github.com/repos/KohlbacherLab/deregnet/tarball/0.99.999",
        "type": "Release",
        "url": "https://api.github.com/repos/KohlbacherLab/deregnet/releases/42718632",
        "value": "https://api.github.com/repos/KohlbacherLab/deregnet/releases/42718632",
        "zipball_url": "https://api.github.com/repos/KohlbacherLab/deregnet/zipball/0.99.999"
      },
      "technique": "GitHub_API"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Run via Docker",
        "parent_header": [
          "<a href=\"https://dereg.net/\">DeRegNet</a> - Find deregulated subnetworks"
        ],
        "type": "Text_excerpt",
        "value": "Using deregnet via Docker is the only officially supported and documented way of running deregnet. See [examples here](https://github.com/sebwink/deregnet/tree/master/examples).\n\nIn any case, you need [Docker](https://www.docker.com/) installed. The next thing you need is a [Gurobi](https://www.gurobi.com/de/) [license](https://www.gurobi.com/de/academia/academic-program-and-licenses/). You can run deregnet with either\na [token server/floating](https://www.gurobi.com/documentation/9.0/quickstart_linux/creating_a_token_server_cl.html#subsection:clientlicensetoken) or [named user](https://www.gurobi.com/documentation/9.0/quickstart_linux/creating_a_new_academic_li.html#subsection:createacademiclicense) license.\n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/deregnet/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "\\&lt;DEREGNET_IMAGE>",
        "parent_header": [
          "<a href=\"https://dereg.net/\">DeRegNet</a> - Find deregulated subnetworks",
          "Run via Docker"
        ],
        "type": "Text_excerpt",
        "value": "# [DeRegNet](https://dereg.net/) - Find deregulated subnetworks\n\n![Docker](https://github.com/sebwink/deregnet/workflows/Docker/badge.svg?branch=master)\n\nby [Sebastian Winkler](https://github.com/sebwink) and [Applied Bioinformatics Group](https://kohlbacherlab.org/), University of Tuebingen\n\n## Introduction\n\nOne of the main challenges of high-throuput omics technologies \n(genomics, transcriptomics, proteomics, metabolomics, etc.) is the \ninterpretation and analysis of the resulting datasets in terms\nof known or previously unknown biologial processes. Biological networks\n(transcriptional regulatory networks, signaling networks, metabolic\nnetwork, etc.) provide promising scaffolds for approaching\nmulti-omics datasets. Existing resources, constructed for\nexample from pathway databases like KEGG, Reactome, etc., provide\nextensive interconnected networks linking genes, proteins and other\nbiological agents by various kinds of interactions like generic\nactivation or inhibition, transcriptional suppression or postranscriptional\nmodifications like posphorylation. DeRegNet allows the extraction and\nprioritisation of subnetworks of larger biomolecular networks based on\nsuitable omics data like for example gene expression.\n\n## Run via Docker \n\nUsing deregnet via Docker is the only officially supported and documented way of running deregnet. See [examples here](https://github.com/sebwink/deregnet/tree/master/examples).\n\nIn any case, you need [Docker](https://www.docker.com/) installed. The next thing you need is a [Gurobi](https://www.gurobi.com/de/) [license](https://www.gurobi.com/de/academia/academic-program-and-licenses/). You can run deregnet with either\na [token server/floating](https://www.gurobi.com/documentation/9.0/quickstart_linux/creating_a_token_server_cl.html#subsection:clientlicensetoken) or [named user](https://www.gurobi.com/documentation/9.0/quickstart_linux/creating_a_new_academic_li.html#subsection:createacademiclicense) license.\n\n### Gurobi floating license\n\nIn case of a Gurobi [token server / floating license](https://www.gurobi.com/documentation/9.0/quickstart_linux/creating_a_token_server_cl.html#subsection:clientlicensetoken) you need to make your license file known to the deregnet \nDocker container. Do this by\n\n```sh\nexport GUROBI_LICENSE=<path to your license file>\n```\nbefore running deregnet.\n\nBy default the license file will be expected in *~/.licenses/gurobi*.\nYou need to make sure that the license server configured in your license is reachable from Docker containers\nrunning on your host.\n\nOnce the license is configured, the best way to run deregnet is via [*docker/token-server/run*](https://github.com/sebwink/deregnet/tree/master/docker/token-server) script:\n\n```sh\ndocker/token-server/run <DEREGNET_IMAGE> <CMD>\n```\nSee below for further information about the \\<DEREGNET_IMAGE\\> and \\<CMD\\> placeholders.\n\n### Setup for use with a Gurobi named-user license\n\nIn case of a Gurobi [named user academic license](https://www.gurobi.com/documentation/9.0/quickstart_linux/creating_a_new_academic_li.html#subsection:createacademiclicense) you also need to make your license file known to the deregnet \nDocker container. Do this by\n\n```sh\nexport GUROBI_LICENSE=<path to your license file>\n```\nbefore running deregnet.\n\nBy default the license file will be expected in *~/.licenses/gurobi*.\n\nIn order to make a named user license work for deregnet, one additional step is to find the MAC address with respect to which your license\nis registered. Do the following before running deregnet:\n\n```\nexport MAC_ADDRESS_FOR_GUROBI_DOCKER=<YOUR-MAC-ADDRESS>\n```\n\nFinding your right \\<YOUR-MAC-ADDRESS\\> is system-specific, in case of doubt, try all MAC addresses listed by *ifconfig -a* and proceed by trial and error until\nyour license is accepted while running deregnet (see below).\n\nOnce the license is configured, the best way to run deregnet is via [*docker/named-user/run*](https://github.com/sebwink/deregnet/tree/master/docker/named-user) script:\n\n```sh\ndocker/named-user/run <DEREGNET_IMAGE> <CMD>\n```\nSee below for further information about the \\<DEREGNET_IMAGE\\> and \\<CMD\\> placeholders.\n\n### \\<DEREGNET_IMAGE\\>\n\nDeregnet Docker images are available from [Docker Hub](https://hub.docker.com/r/sebwink/deregnet) and [GitHub Packages](https://github.com/sebwink/deregnet/packages). Usually, you should be able to just run:\n\n```sh\ndocker/token-server/run sebwink/deregnet:latest <CMD>\n```\n\nTo run a specific release of deregnet run for example:\n\n\n```sh\ndocker/token-server/run sebwink/deregnet:0.99.999 <CMD>\n```\n\nThe best way to run with a specific [supported](https://github.com/sebwink/gurobi-docker/blob/master/GUROBI_VERSIONS) Gurobi version is for example like so:\n\n\n```sh\ndocker/token-server/run sebwink/deregnet-grb9.0.2:0.99.999 <CMD>\n```\n\n```sh\ndocker/token-server/run sebwink/deregnet-grb8.1.1:latest <CMD>\n```\n\n### \\<CMD\\>\n  \nderegnet Docker images support multiple commands. The most straight-forward one is to [use](https://github.com/sebwink/deregnet/tree/master/examples/command-line) the main script for deregnet:\n\n```sh\ndocker/named-user/run sebwink/deregnet:latest avgdrgnt.py --help\n```\n\n```sh\nusage: avgdrgnt.py [-h] [--include-file INCLUDE_FILE]\n                   [--include-genesets INCLUDE_GENESETS] [--include INCLUDE]\n                   [--include-id-type INCLUDE_ID_TYPE]\n                   [--exclude-file EXCLUDE_FILE]\n                   [--exclude-genesets EXCLUDE_GENESETS] [--exclude EXCLUDE]\n                   [--exclude-id-type EXCLUDE_ID_TYPE] [--debug]\n                   [--absolute-values] --graph GRAPH --scores SCORE_FILE\n                   [--default-score DEFAULT_SCORE] [--score-column SCORE_COL]\n                   [--score-file-without-header] [--id-column ID_COL]\n                   [--sep SEP] [--biomap-mapper ID_MAPPER]\n                   [--score-id-type SCORE_ID_TYPE]\n                   [--graph-id-type GRAPH_ID_TYPE]\n                   [--graph-id-attr GRAPH_ID_ATTR] [--suboptimal SUBOPTIMAL]\n                   [--max-overlap-percentage MAX_OVERLAP] [--gap-cut GAP_CUT]\n                   [--time-limit TIME_LIMIT] [--model_sense {min,max}]\n                   [--output-path OUTPUT] [--flip-orientation]\n                   [--min-size MIN_SIZE] [--max-size MAX_SIZE]\n                   [--min-num-terminals MIN_NUM_TERMINALS]\n                   [--algorithm {GeneralizedCharnesCooper,Dinkelbach,ObjectiveVariableTransform}]\n                   [--receptor-file RECEPTOR_FILE]\n                   [--receptor-genesets RECEPTOR_GENESETS]\n                   [--receptor RECEPTOR] [--receptor-id-type RECEPTOR_ID_TYPE]\n                   [--terminal-file TERMINAL_FILE]\n                   [--terminal-genesets TERMINAL_GENESETS]\n                   [--terminal TERMINAL] [--terminal-id-type TERMINAL_ID_TYPE]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --include-file INCLUDE_FILE\n                        Path to GMT or GRP file containing genes defining the\n                        include layer.\n  --include-genesets INCLUDE_GENESETS\n                        Comma seperated list of geneset names for include\n                        layer,only applicable if GMT file provided.\n  --include INCLUDE     Comma seperated list of IDs defining the include\n                        layer.\n  --include-id-type INCLUDE_ID_TYPE\n                        Id-type for include layer genesets. Options: all\n                        supported by chosen biomap mapper\n  --exclude-file EXCLUDE_FILE\n                        Path to GMT or GRP file containing genes defining the\n                        exclude layer.\n  --exclude-genesets EXCLUDE_GENESETS\n                        Comma seperated list of geneset names for exclude\n                        layer,only applicable if GMT file provided.\n  --exclude EXCLUDE     Comma seperated list of IDs defining the exclude\n                        layer.\n  --exclude-id-type EXCLUDE_ID_TYPE\n                        Id-type for exclude layer genesets. Options: all\n                        supported by chosen biomap mapper\n  --debug               Debug underlying C++ code with gdb.\n  --absolute-values     Whether to take absolute values of the scores.\n  --graph GRAPH         A graphml file containing the graph you want to run\n                        drgnt with.\n  --scores SCORE_FILE   A text file containing the scores. See further options\n                        below.\n  --default-score DEFAULT_SCORE\n                        The score of nodes in the graph which are not scored\n                        in your score file. Default: 0.0\n  --score-column SCORE_COL\n                        Column name of (gene) id in your score file. Default:\n                        score\n  --score-file-without-header\n                        Flag to indicate whether the score file has a header\n                        or not.\n  --id-column ID_COL    Column name of (gene) id in your score file. Default:\n                        id\n  --sep SEP             The column seperator in your score file.Options:\n                        comma, tab. Default: \\t\n  --biomap-mapper ID_MAPPER\n                        biomap mapper you want to use for id mapping. Default:\n                        hgnc\n  --score-id-type SCORE_ID_TYPE\n                        Which id type do you have in your score file? Options:\n                        all thosesupported by the biomap mapper you chose or\n                        unspecified. Default: same as graph id type\n  --graph-id-type GRAPH_ID_TYPE\n                        Which id type does the graph have? Options: all those\n                        supportedby the biomap mapper you chose or\n                        unspecified. Default: unspecifed i.e. None\n  --graph-id-attr GRAPH_ID_ATTR\n                        Node attribute which contains the relevant id in the\n                        graphml. Default: name\n  --suboptimal SUBOPTIMAL\n                        Number of suboptimal subgraphs you want to find.\n                        (Increases runtime)\n  --max-overlap-percentage MAX_OVERLAP\n                        How much can suboptimal subgraphs overlap with already\n                        found subgraphs. Default: 0\n  --gap-cut GAP_CUT     Stop optimization prematurely if current solution\n                        within GAP of optimal solution. Default: None\n  --time-limit TIME_LIMIT\n                        Set a time limit in seconds. Default: None\n  --model_sense {min,max}\n                        Model sense. Default: max\n  --output-path OUTPUT  Folder to which output is written. (Does not have to\n                        exist.) Default : cwd\n  --flip-orientation    Set --flip-orientation when you want to flip the\n                        orientation of the underlying graph.\n  --min-size MIN_SIZE   Minimal size of the resulting subgraph(s). Default :\n                        15\n  --max-size MAX_SIZE   Maximal size of the resulting subgraph(s). Default :\n                        15\n  --min-num-terminals MIN_NUM_TERMINALS\n                        Minimum number of terminals in the resulting\n                        subgraph(s). Default : 0\n  --algorithm {GeneralizedCharnesCooper,Dinkelbach,ObjectiveVariableTransform}\n                        Algorithm to use to solve the fractional integer\n                        programming problem.Default: GeneralizedCharnesCooper.\n  --receptor-file RECEPTOR_FILE\n                        Path to GMT or GRP file containing genes defining the\n                        receptor layer.\n  --receptor-genesets RECEPTOR_GENESETS\n                        Comma seperated list of geneset names for receptor\n                        layer,only applicable if GMT file provided.\n  --receptor RECEPTOR   Comma seperated list of IDs defining the receptor\n                        layer.\n  --receptor-id-type RECEPTOR_ID_TYPE\n                        Id-type for receptor layer genesets. Options: all\n                        supported by chosen biomap mapper\n  --terminal-file TERMINAL_FILE\n                        Path to GMT or GRP file containing genes defining the\n                        terminal layer.\n  --terminal-genesets TERMINAL_GENESETS\n                        Comma seperated list of geneset names for terminal\n                        layer,only applicable if GMT file provided.\n  --terminal TERMINAL   Comma seperated list of IDs defining the terminal\n                        layer.\n  --terminal-id-type TERMINAL_ID_TYPE\n                        Id-type for terminal layer genesets. Options: all\n                        supported by chosen biomap mapper\n```\n\nFor example:\n\n```sh \ndocker/name-user/run sebwink/deregnet:latest avgdrgnt.py \\\n  --graph test/kegg_hsa.graphml \\\n  --scores test/data/score.csv \\\n  --sep , \\\n  --graph-id-attr ensembl\n``` \n\nOther commands include *drgnt.py* (Optimization for absolute, not average, best subgraphs).\n\nThe most frequent other use cases are to run [Jupyter Lab](https://github.com/sebwink/deregnet/tree/master/examples/jupyterlab) or custom [Python scripts](https://github.com/sebwink/deregnet/tree/master/examples/custom-python-script).\n\n### [Examples](https://github.com/sebwink/deregnet/tree/master/examples)\n\n### Input-output via Docker volumes\n\nGenerally your current working directory will be mounted in the running Docker containers. Also some Docker-necessitated access right and owner\nsanitations will be carried out, [see for example](https://github.com/sebwink/deregnet/blob/master/docker/named-user/run).\n\n### Security considerations\n\nOnly run the deregnet images in trusted environments.\n\n## Visualization via [BioGraphVisArt](https://kohlbacherlab.github.io/BioGraphVisart/BioGraphVisart)\n\nThe subgraphs generated by DeRegNet are best visualized with [BioGraphVisArt](https://kohlbacherlab.github.io/BioGraphVisart/).\n\n### [Example](https://kohlbacherlab.github.io/BioGraphVisart/example) visualization\n\n![alt text](https://github.com/sebwink/deregnet/blob/master/doc/example.png \"Visualizing subgraphs with BioGraphVisArt\")\n\n## General remarks\n\nFeedback and problems can be reported via GitHub [Issues](https://github.com/sebwink/deregnet/issues).\n\n[ProjectPage](https://sebwink.github.io/deregnet/)\n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/deregnet/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "\\&lt;CMD>",
        "parent_header": [
          "<a href=\"https://dereg.net/\">DeRegNet</a> - Find deregulated subnetworks",
          "Run via Docker"
        ],
        "type": "Text_excerpt",
        "value": "# [DeRegNet](https://dereg.net/) - Find deregulated subnetworks\n\n![Docker](https://github.com/sebwink/deregnet/workflows/Docker/badge.svg?branch=master)\n\nby [Sebastian Winkler](https://github.com/sebwink) and [Applied Bioinformatics Group](https://kohlbacherlab.org/), University of Tuebingen\n\n## Introduction\n\nOne of the main challenges of high-throuput omics technologies \n(genomics, transcriptomics, proteomics, metabolomics, etc.) is the \ninterpretation and analysis of the resulting datasets in terms\nof known or previously unknown biologial processes. Biological networks\n(transcriptional regulatory networks, signaling networks, metabolic\nnetwork, etc.) provide promising scaffolds for approaching\nmulti-omics datasets. Existing resources, constructed for\nexample from pathway databases like KEGG, Reactome, etc., provide\nextensive interconnected networks linking genes, proteins and other\nbiological agents by various kinds of interactions like generic\nactivation or inhibition, transcriptional suppression or postranscriptional\nmodifications like posphorylation. DeRegNet allows the extraction and\nprioritisation of subnetworks of larger biomolecular networks based on\nsuitable omics data like for example gene expression.\n\n## Run via Docker \n\nUsing deregnet via Docker is the only officially supported and documented way of running deregnet. See [examples here](https://github.com/sebwink/deregnet/tree/master/examples).\n\nIn any case, you need [Docker](https://www.docker.com/) installed. The next thing you need is a [Gurobi](https://www.gurobi.com/de/) [license](https://www.gurobi.com/de/academia/academic-program-and-licenses/). You can run deregnet with either\na [token server/floating](https://www.gurobi.com/documentation/9.0/quickstart_linux/creating_a_token_server_cl.html#subsection:clientlicensetoken) or [named user](https://www.gurobi.com/documentation/9.0/quickstart_linux/creating_a_new_academic_li.html#subsection:createacademiclicense) license.\n\n### Gurobi floating license\n\nIn case of a Gurobi [token server / floating license](https://www.gurobi.com/documentation/9.0/quickstart_linux/creating_a_token_server_cl.html#subsection:clientlicensetoken) you need to make your license file known to the deregnet \nDocker container. Do this by\n\n```sh\nexport GUROBI_LICENSE=<path to your license file>\n```\nbefore running deregnet.\n\nBy default the license file will be expected in *~/.licenses/gurobi*.\nYou need to make sure that the license server configured in your license is reachable from Docker containers\nrunning on your host.\n\nOnce the license is configured, the best way to run deregnet is via [*docker/token-server/run*](https://github.com/sebwink/deregnet/tree/master/docker/token-server) script:\n\n```sh\ndocker/token-server/run <DEREGNET_IMAGE> <CMD>\n```\nSee below for further information about the \\<DEREGNET_IMAGE\\> and \\<CMD\\> placeholders.\n\n### Setup for use with a Gurobi named-user license\n\nIn case of a Gurobi [named user academic license](https://www.gurobi.com/documentation/9.0/quickstart_linux/creating_a_new_academic_li.html#subsection:createacademiclicense) you also need to make your license file known to the deregnet \nDocker container. Do this by\n\n```sh\nexport GUROBI_LICENSE=<path to your license file>\n```\nbefore running deregnet.\n\nBy default the license file will be expected in *~/.licenses/gurobi*.\n\nIn order to make a named user license work for deregnet, one additional step is to find the MAC address with respect to which your license\nis registered. Do the following before running deregnet:\n\n```\nexport MAC_ADDRESS_FOR_GUROBI_DOCKER=<YOUR-MAC-ADDRESS>\n```\n\nFinding your right \\<YOUR-MAC-ADDRESS\\> is system-specific, in case of doubt, try all MAC addresses listed by *ifconfig -a* and proceed by trial and error until\nyour license is accepted while running deregnet (see below).\n\nOnce the license is configured, the best way to run deregnet is via [*docker/named-user/run*](https://github.com/sebwink/deregnet/tree/master/docker/named-user) script:\n\n```sh\ndocker/named-user/run <DEREGNET_IMAGE> <CMD>\n```\nSee below for further information about the \\<DEREGNET_IMAGE\\> and \\<CMD\\> placeholders.\n\n### \\<DEREGNET_IMAGE\\>\n\nDeregnet Docker images are available from [Docker Hub](https://hub.docker.com/r/sebwink/deregnet) and [GitHub Packages](https://github.com/sebwink/deregnet/packages). Usually, you should be able to just run:\n\n```sh\ndocker/token-server/run sebwink/deregnet:latest <CMD>\n```\n\nTo run a specific release of deregnet run for example:\n\n\n```sh\ndocker/token-server/run sebwink/deregnet:0.99.999 <CMD>\n```\n\nThe best way to run with a specific [supported](https://github.com/sebwink/gurobi-docker/blob/master/GUROBI_VERSIONS) Gurobi version is for example like so:\n\n\n```sh\ndocker/token-server/run sebwink/deregnet-grb9.0.2:0.99.999 <CMD>\n```\n\n```sh\ndocker/token-server/run sebwink/deregnet-grb8.1.1:latest <CMD>\n```\n\n### \\<CMD\\>\n  \nderegnet Docker images support multiple commands. The most straight-forward one is to [use](https://github.com/sebwink/deregnet/tree/master/examples/command-line) the main script for deregnet:\n\n```sh\ndocker/named-user/run sebwink/deregnet:latest avgdrgnt.py --help\n```\n\n```sh\nusage: avgdrgnt.py [-h] [--include-file INCLUDE_FILE]\n                   [--include-genesets INCLUDE_GENESETS] [--include INCLUDE]\n                   [--include-id-type INCLUDE_ID_TYPE]\n                   [--exclude-file EXCLUDE_FILE]\n                   [--exclude-genesets EXCLUDE_GENESETS] [--exclude EXCLUDE]\n                   [--exclude-id-type EXCLUDE_ID_TYPE] [--debug]\n                   [--absolute-values] --graph GRAPH --scores SCORE_FILE\n                   [--default-score DEFAULT_SCORE] [--score-column SCORE_COL]\n                   [--score-file-without-header] [--id-column ID_COL]\n                   [--sep SEP] [--biomap-mapper ID_MAPPER]\n                   [--score-id-type SCORE_ID_TYPE]\n                   [--graph-id-type GRAPH_ID_TYPE]\n                   [--graph-id-attr GRAPH_ID_ATTR] [--suboptimal SUBOPTIMAL]\n                   [--max-overlap-percentage MAX_OVERLAP] [--gap-cut GAP_CUT]\n                   [--time-limit TIME_LIMIT] [--model_sense {min,max}]\n                   [--output-path OUTPUT] [--flip-orientation]\n                   [--min-size MIN_SIZE] [--max-size MAX_SIZE]\n                   [--min-num-terminals MIN_NUM_TERMINALS]\n                   [--algorithm {GeneralizedCharnesCooper,Dinkelbach,ObjectiveVariableTransform}]\n                   [--receptor-file RECEPTOR_FILE]\n                   [--receptor-genesets RECEPTOR_GENESETS]\n                   [--receptor RECEPTOR] [--receptor-id-type RECEPTOR_ID_TYPE]\n                   [--terminal-file TERMINAL_FILE]\n                   [--terminal-genesets TERMINAL_GENESETS]\n                   [--terminal TERMINAL] [--terminal-id-type TERMINAL_ID_TYPE]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --include-file INCLUDE_FILE\n                        Path to GMT or GRP file containing genes defining the\n                        include layer.\n  --include-genesets INCLUDE_GENESETS\n                        Comma seperated list of geneset names for include\n                        layer,only applicable if GMT file provided.\n  --include INCLUDE     Comma seperated list of IDs defining the include\n                        layer.\n  --include-id-type INCLUDE_ID_TYPE\n                        Id-type for include layer genesets. Options: all\n                        supported by chosen biomap mapper\n  --exclude-file EXCLUDE_FILE\n                        Path to GMT or GRP file containing genes defining the\n                        exclude layer.\n  --exclude-genesets EXCLUDE_GENESETS\n                        Comma seperated list of geneset names for exclude\n                        layer,only applicable if GMT file provided.\n  --exclude EXCLUDE     Comma seperated list of IDs defining the exclude\n                        layer.\n  --exclude-id-type EXCLUDE_ID_TYPE\n                        Id-type for exclude layer genesets. Options: all\n                        supported by chosen biomap mapper\n  --debug               Debug underlying C++ code with gdb.\n  --absolute-values     Whether to take absolute values of the scores.\n  --graph GRAPH         A graphml file containing the graph you want to run\n                        drgnt with.\n  --scores SCORE_FILE   A text file containing the scores. See further options\n                        below.\n  --default-score DEFAULT_SCORE\n                        The score of nodes in the graph which are not scored\n                        in your score file. Default: 0.0\n  --score-column SCORE_COL\n                        Column name of (gene) id in your score file. Default:\n                        score\n  --score-file-without-header\n                        Flag to indicate whether the score file has a header\n                        or not.\n  --id-column ID_COL    Column name of (gene) id in your score file. Default:\n                        id\n  --sep SEP             The column seperator in your score file.Options:\n                        comma, tab. Default: \\t\n  --biomap-mapper ID_MAPPER\n                        biomap mapper you want to use for id mapping. Default:\n                        hgnc\n  --score-id-type SCORE_ID_TYPE\n                        Which id type do you have in your score file? Options:\n                        all thosesupported by the biomap mapper you chose or\n                        unspecified. Default: same as graph id type\n  --graph-id-type GRAPH_ID_TYPE\n                        Which id type does the graph have? Options: all those\n                        supportedby the biomap mapper you chose or\n                        unspecified. Default: unspecifed i.e. None\n  --graph-id-attr GRAPH_ID_ATTR\n                        Node attribute which contains the relevant id in the\n                        graphml. Default: name\n  --suboptimal SUBOPTIMAL\n                        Number of suboptimal subgraphs you want to find.\n                        (Increases runtime)\n  --max-overlap-percentage MAX_OVERLAP\n                        How much can suboptimal subgraphs overlap with already\n                        found subgraphs. Default: 0\n  --gap-cut GAP_CUT     Stop optimization prematurely if current solution\n                        within GAP of optimal solution. Default: None\n  --time-limit TIME_LIMIT\n                        Set a time limit in seconds. Default: None\n  --model_sense {min,max}\n                        Model sense. Default: max\n  --output-path OUTPUT  Folder to which output is written. (Does not have to\n                        exist.) Default : cwd\n  --flip-orientation    Set --flip-orientation when you want to flip the\n                        orientation of the underlying graph.\n  --min-size MIN_SIZE   Minimal size of the resulting subgraph(s). Default :\n                        15\n  --max-size MAX_SIZE   Maximal size of the resulting subgraph(s). Default :\n                        15\n  --min-num-terminals MIN_NUM_TERMINALS\n                        Minimum number of terminals in the resulting\n                        subgraph(s). Default : 0\n  --algorithm {GeneralizedCharnesCooper,Dinkelbach,ObjectiveVariableTransform}\n                        Algorithm to use to solve the fractional integer\n                        programming problem.Default: GeneralizedCharnesCooper.\n  --receptor-file RECEPTOR_FILE\n                        Path to GMT or GRP file containing genes defining the\n                        receptor layer.\n  --receptor-genesets RECEPTOR_GENESETS\n                        Comma seperated list of geneset names for receptor\n                        layer,only applicable if GMT file provided.\n  --receptor RECEPTOR   Comma seperated list of IDs defining the receptor\n                        layer.\n  --receptor-id-type RECEPTOR_ID_TYPE\n                        Id-type for receptor layer genesets. Options: all\n                        supported by chosen biomap mapper\n  --terminal-file TERMINAL_FILE\n                        Path to GMT or GRP file containing genes defining the\n                        terminal layer.\n  --terminal-genesets TERMINAL_GENESETS\n                        Comma seperated list of geneset names for terminal\n                        layer,only applicable if GMT file provided.\n  --terminal TERMINAL   Comma seperated list of IDs defining the terminal\n                        layer.\n  --terminal-id-type TERMINAL_ID_TYPE\n                        Id-type for terminal layer genesets. Options: all\n                        supported by chosen biomap mapper\n```\n\nFor example:\n\n```sh \ndocker/name-user/run sebwink/deregnet:latest avgdrgnt.py \\\n  --graph test/kegg_hsa.graphml \\\n  --scores test/data/score.csv \\\n  --sep , \\\n  --graph-id-attr ensembl\n``` \n\nOther commands include *drgnt.py* (Optimization for absolute, not average, best subgraphs).\n\nThe most frequent other use cases are to run [Jupyter Lab](https://github.com/sebwink/deregnet/tree/master/examples/jupyterlab) or custom [Python scripts](https://github.com/sebwink/deregnet/tree/master/examples/custom-python-script).\n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/deregnet/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Input-output via Docker volumes",
        "parent_header": [
          "<a href=\"https://dereg.net/\">DeRegNet</a> - Find deregulated subnetworks",
          "Run via Docker"
        ],
        "type": "Text_excerpt",
        "value": "Generally your current working directory will be mounted in the running Docker containers. Also some Docker-necessitated access right and owner\nsanitations will be carried out, [see for example](https://github.com/sebwink/deregnet/blob/master/docker/named-user/run).\n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/deregnet/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Security considerations",
        "parent_header": [
          "<a href=\"https://dereg.net/\">DeRegNet</a> - Find deregulated subnetworks",
          "Run via Docker"
        ],
        "type": "Text_excerpt",
        "value": "Only run the deregnet images in trusted environments.\n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/deregnet/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier"
  ],
  "somef_provenance": {
    "date": "2024-10-06 07:18:38",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Setup for use with a Gurobi named-user license",
        "parent_header": [
          "<a href=\"https://dereg.net/\">DeRegNet</a> - Find deregulated subnetworks",
          "Run via Docker"
        ],
        "type": "Text_excerpt",
        "value": "In case of a Gurobi [named user academic license](https://www.gurobi.com/documentation/9.0/quickstart_linux/creating_a_new_academic_li.html#subsection:createacademiclicense) you also need to make your license file known to the deregnet \nDocker container. Do this by\n\n```sh\nexport GUROBI_LICENSE=<path to your license file>\n```\nbefore running deregnet.\n\nBy default the license file will be expected in *~/.licenses/gurobi*.\n\nIn order to make a named user license work for deregnet, one additional step is to find the MAC address with respect to which your license\nis registered. Do the following before running deregnet:\n\n```\nexport MAC_ADDRESS_FOR_GUROBI_DOCKER=<YOUR-MAC-ADDRESS>\n```\n\nFinding your right \\<YOUR-MAC-ADDRESS\\> is system-specific, in case of doubt, try all MAC addresses listed by *ifconfig -a* and proceed by trial and error until\nyour license is accepted while running deregnet (see below).\n\nOnce the license is configured, the best way to run deregnet is via [*docker/named-user/run*](https://github.com/sebwink/deregnet/tree/master/docker/named-user) script:\n\n```sh\ndocker/named-user/run <DEREGNET_IMAGE> <CMD>\n```\nSee below for further information about the \\<DEREGNET_IMAGE\\> and \\<CMD\\> placeholders.\n\n### \\<DEREGNET_IMAGE\\>\n\nDeregnet Docker images are available from [Docker Hub](https://hub.docker.com/r/sebwink/deregnet) and [GitHub Packages](https://github.com/sebwink/deregnet/packages). Usually, you should be able to just run:\n\n```sh\ndocker/token-server/run sebwink/deregnet:latest <CMD>\n```\n\nTo run a specific release of deregnet run for example:\n\n\n```sh\ndocker/token-server/run sebwink/deregnet:0.99.999 <CMD>\n```\n\nThe best way to run with a specific [supported](https://github.com/sebwink/gurobi-docker/blob/master/GUROBI_VERSIONS) Gurobi version is for example like so:\n\n\n```sh\ndocker/token-server/run sebwink/deregnet-grb9.0.2:0.99.999 <CMD>\n```\n\n```sh\ndocker/token-server/run sebwink/deregnet-grb8.1.1:latest <CMD>\n```\n\n### \\<CMD\\>\n  \nderegnet Docker images support multiple commands. The most straight-forward one is to [use](https://github.com/sebwink/deregnet/tree/master/examples/command-line) the main script for deregnet:\n\n```sh\ndocker/named-user/run sebwink/deregnet:latest avgdrgnt.py --help\n```\n\n```sh\nusage: avgdrgnt.py [-h] [--include-file INCLUDE_FILE]\n                   [--include-genesets INCLUDE_GENESETS] [--include INCLUDE]\n                   [--include-id-type INCLUDE_ID_TYPE]\n                   [--exclude-file EXCLUDE_FILE]\n                   [--exclude-genesets EXCLUDE_GENESETS] [--exclude EXCLUDE]\n                   [--exclude-id-type EXCLUDE_ID_TYPE] [--debug]\n                   [--absolute-values] --graph GRAPH --scores SCORE_FILE\n                   [--default-score DEFAULT_SCORE] [--score-column SCORE_COL]\n                   [--score-file-without-header] [--id-column ID_COL]\n                   [--sep SEP] [--biomap-mapper ID_MAPPER]\n                   [--score-id-type SCORE_ID_TYPE]\n                   [--graph-id-type GRAPH_ID_TYPE]\n                   [--graph-id-attr GRAPH_ID_ATTR] [--suboptimal SUBOPTIMAL]\n                   [--max-overlap-percentage MAX_OVERLAP] [--gap-cut GAP_CUT]\n                   [--time-limit TIME_LIMIT] [--model_sense {min,max}]\n                   [--output-path OUTPUT] [--flip-orientation]\n                   [--min-size MIN_SIZE] [--max-size MAX_SIZE]\n                   [--min-num-terminals MIN_NUM_TERMINALS]\n                   [--algorithm {GeneralizedCharnesCooper,Dinkelbach,ObjectiveVariableTransform}]\n                   [--receptor-file RECEPTOR_FILE]\n                   [--receptor-genesets RECEPTOR_GENESETS]\n                   [--receptor RECEPTOR] [--receptor-id-type RECEPTOR_ID_TYPE]\n                   [--terminal-file TERMINAL_FILE]\n                   [--terminal-genesets TERMINAL_GENESETS]\n                   [--terminal TERMINAL] [--terminal-id-type TERMINAL_ID_TYPE]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --include-file INCLUDE_FILE\n                        Path to GMT or GRP file containing genes defining the\n                        include layer.\n  --include-genesets INCLUDE_GENESETS\n                        Comma seperated list of geneset names for include\n                        layer,only applicable if GMT file provided.\n  --include INCLUDE     Comma seperated list of IDs defining the include\n                        layer.\n  --include-id-type INCLUDE_ID_TYPE\n                        Id-type for include layer genesets. Options: all\n                        supported by chosen biomap mapper\n  --exclude-file EXCLUDE_FILE\n                        Path to GMT or GRP file containing genes defining the\n                        exclude layer.\n  --exclude-genesets EXCLUDE_GENESETS\n                        Comma seperated list of geneset names for exclude\n                        layer,only applicable if GMT file provided.\n  --exclude EXCLUDE     Comma seperated list of IDs defining the exclude\n                        layer.\n  --exclude-id-type EXCLUDE_ID_TYPE\n                        Id-type for exclude layer genesets. Options: all\n                        supported by chosen biomap mapper\n  --debug               Debug underlying C++ code with gdb.\n  --absolute-values     Whether to take absolute values of the scores.\n  --graph GRAPH         A graphml file containing the graph you want to run\n                        drgnt with.\n  --scores SCORE_FILE   A text file containing the scores. See further options\n                        below.\n  --default-score DEFAULT_SCORE\n                        The score of nodes in the graph which are not scored\n                        in your score file. Default: 0.0\n  --score-column SCORE_COL\n                        Column name of (gene) id in your score file. Default:\n                        score\n  --score-file-without-header\n                        Flag to indicate whether the score file has a header\n                        or not.\n  --id-column ID_COL    Column name of (gene) id in your score file. Default:\n                        id\n  --sep SEP             The column seperator in your score file.Options:\n                        comma, tab. Default: \\t\n  --biomap-mapper ID_MAPPER\n                        biomap mapper you want to use for id mapping. Default:\n                        hgnc\n  --score-id-type SCORE_ID_TYPE\n                        Which id type do you have in your score file? Options:\n                        all thosesupported by the biomap mapper you chose or\n                        unspecified. Default: same as graph id type\n  --graph-id-type GRAPH_ID_TYPE\n                        Which id type does the graph have? Options: all those\n                        supportedby the biomap mapper you chose or\n                        unspecified. Default: unspecifed i.e. None\n  --graph-id-attr GRAPH_ID_ATTR\n                        Node attribute which contains the relevant id in the\n                        graphml. Default: name\n  --suboptimal SUBOPTIMAL\n                        Number of suboptimal subgraphs you want to find.\n                        (Increases runtime)\n  --max-overlap-percentage MAX_OVERLAP\n                        How much can suboptimal subgraphs overlap with already\n                        found subgraphs. Default: 0\n  --gap-cut GAP_CUT     Stop optimization prematurely if current solution\n                        within GAP of optimal solution. Default: None\n  --time-limit TIME_LIMIT\n                        Set a time limit in seconds. Default: None\n  --model_sense {min,max}\n                        Model sense. Default: max\n  --output-path OUTPUT  Folder to which output is written. (Does not have to\n                        exist.) Default : cwd\n  --flip-orientation    Set --flip-orientation when you want to flip the\n                        orientation of the underlying graph.\n  --min-size MIN_SIZE   Minimal size of the resulting subgraph(s). Default :\n                        15\n  --max-size MAX_SIZE   Maximal size of the resulting subgraph(s). Default :\n                        15\n  --min-num-terminals MIN_NUM_TERMINALS\n                        Minimum number of terminals in the resulting\n                        subgraph(s). Default : 0\n  --algorithm {GeneralizedCharnesCooper,Dinkelbach,ObjectiveVariableTransform}\n                        Algorithm to use to solve the fractional integer\n                        programming problem.Default: GeneralizedCharnesCooper.\n  --receptor-file RECEPTOR_FILE\n                        Path to GMT or GRP file containing genes defining the\n                        receptor layer.\n  --receptor-genesets RECEPTOR_GENESETS\n                        Comma seperated list of geneset names for receptor\n                        layer,only applicable if GMT file provided.\n  --receptor RECEPTOR   Comma seperated list of IDs defining the receptor\n                        layer.\n  --receptor-id-type RECEPTOR_ID_TYPE\n                        Id-type for receptor layer genesets. Options: all\n                        supported by chosen biomap mapper\n  --terminal-file TERMINAL_FILE\n                        Path to GMT or GRP file containing genes defining the\n                        terminal layer.\n  --terminal-genesets TERMINAL_GENESETS\n                        Comma seperated list of geneset names for terminal\n                        layer,only applicable if GMT file provided.\n  --terminal TERMINAL   Comma seperated list of IDs defining the terminal\n                        layer.\n  --terminal-id-type TERMINAL_ID_TYPE\n                        Id-type for terminal layer genesets. Options: all\n                        supported by chosen biomap mapper\n```\n\nFor example:\n\n```sh \ndocker/name-user/run sebwink/deregnet:latest avgdrgnt.py \\\n  --graph test/kegg_hsa.graphml \\\n  --scores test/data/score.csv \\\n  --sep , \\\n  --graph-id-attr ensembl\n``` \n\nOther commands include *drgnt.py* (Optimization for absolute, not average, best subgraphs).\n\nThe most frequent other use cases are to run [Jupyter Lab](https://github.com/sebwink/deregnet/tree/master/examples/jupyterlab) or custom [Python scripts](https://github.com/sebwink/deregnet/tree/master/examples/custom-python-script).\n\n### [Examples](https://github.com/sebwink/deregnet/tree/master/examples)\n\n### Input-output via Docker volumes\n\nGenerally your current working directory will be mounted in the running Docker containers. Also some Docker-necessitated access right and owner\nsanitations will be carried out, [see for example](https://github.com/sebwink/deregnet/blob/master/docker/named-user/run).\n\n### Security considerations\n\nOnly run the deregnet images in trusted environments.\n\n## Visualization via [BioGraphVisArt](https://kohlbacherlab.github.io/BioGraphVisart/BioGraphVisart)\n\nThe subgraphs generated by DeRegNet are best visualized with [BioGraphVisArt](https://kohlbacherlab.github.io/BioGraphVisart/).\n\n### [Example](https://kohlbacherlab.github.io/BioGraphVisart/example) visualization\n\n![alt text](https://github.com/sebwink/deregnet/blob/master/doc/example.png \"Visualizing subgraphs with BioGraphVisArt\")\n\n## General remarks\n\nFeedback and problems can be reported via GitHub [Issues](https://github.com/sebwink/deregnet/issues).\n\n[ProjectPage](https://sebwink.github.io/deregnet/)\n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/deregnet/master/README.md",
      "technique": "header_analysis"
    }
  ]
}