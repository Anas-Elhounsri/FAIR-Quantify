{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "MiSDEED paper and citation",
        "type": "Text_excerpt",
        "value": "The preprint for MiSDEED is available [on bioRxiv](https://doi.org/10.1101/2021.08.09.455682). It can be cited as follows:\n\n```\n@article {chlenski2021misdeed,\n    author = {Chlenski, Philippe and Hsu, Melody and Pe'er, Itsik},\n    title = {MiSDEED: a synthetic multi-omics engine for microbiome power analysis and study design},\n    year = {2021},\n    doi = {10.1101/2021.08.09.455682},\n    publisher = {Cold Spring Harbor Laboratory},\n    journal = {bioRxiv}\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/pchlenski/misdeed/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Chlenski, Philippe and Hsu, Melody and Pe'er, Itsik",
        "doi": "10.1101/2021.08.09.455682",
        "format": "bibtex",
        "title": "MiSDEED: a synthetic multi-omics engine for microbiome power analysis and study design",
        "type": "Text_excerpt",
        "value": "@article{chlenski2021misdeed,\n    journal = {bioRxiv},\n    publisher = {Cold Spring Harbor Laboratory},\n    doi = {10.1101/2021.08.09.455682},\n    year = {2021},\n    title = {MiSDEED: a synthetic multi-omics engine for microbiome power analysis and study design},\n    author = {Chlenski, Philippe and Hsu, Melody and Pe'er, Itsik},\n}"
      },
      "source": "https://raw.githubusercontent.com/pchlenski/misdeed/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/pchlenski/misdeed"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-06-28T16:08:54Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-03-25T21:44:30Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Microbiome data simulator for power analysis"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9960048812702781,
      "result": {
        "original_header": "*Mi*crobiome *S*ynthetic *D*ata *E*ngine for *E*xperimental *D*esign",
        "type": "Text_excerpt",
        "value": "MiSDEED is a command-line tool and Python package for generating synthetic microbial abundance data. Its uses include power analysis and experimental design, creating simulations from verifiable ground truth for algorithm development, and generating synthetic data for model pretraining and transfer learning. Currently, MiSDEED supports the generation of multiple (possibly case-control) timecourses from an arbitrary number of interacting nodes. MiSDEED is distributed under the MIT license. \nThis project is run by Philippe Chlenski at Columbia University. A manuscript for MiSDEED is currently in peer review.  \n"
      },
      "source": "https://raw.githubusercontent.com/pchlenski/misdeed/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9357052631610931,
      "result": {
        "original_header": "Anonymous feedback form",
        "type": "Text_excerpt",
        "value": "User feedback is important to us. While you are welcome to create an issue in Github, please be aware that we are also monitoring anonymous feedback via [this form](https://forms.gle/BpymPre851csE9JL7).\n \n"
      },
      "source": "https://raw.githubusercontent.com/pchlenski/misdeed/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9309652799834203,
      "result": {
        "original_header": "Inputs",
        "type": "Text_excerpt",
        "value": "If using the ```--input_dir``` parameter, MiSDEED will assume your input directory follows these conventions:\n* All files are in tsv (tab-separated values) format and end in \".tsv\"\n* Node conventions:\n    * Initial abundances are named BASH2*\n    * Growth rates are named BASH3*\n    * Each node has a growth rate and a node name\n    * Initial abundances and growth rates are equal to node dimensionality\n* Intervention conventions:\n    * Intervention magnitudes are named BASH4*\n    * Node responses are named BASH5*\n    * Each intervention has a growth rate and a node name\n    * Intervention magnitude dimensionality is equal to number of time points (set by BASH6* parameter)\n    * Node response dimensionality is equal to node dimensionality\n* Interaction conventions:\n    * Interactions are named BASH7*\n    * At least one interaction is defined\n    * Interaction matrix has shape (outbound node dimensionality) x (inbound node dimensionality) \nThe `example` directory in this repository contains a minimal example of these conventions.\n \n"
      },
      "source": "https://raw.githubusercontent.com/pchlenski/misdeed/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9850524704011643,
      "result": {
        "original_header": "OmicsGenerator Python package",
        "type": "Text_excerpt",
        "value": "The `OmicsGenerator` class has the following public methods:\n* `add_node`: Adds nodes to generator object.\n* `add_interaction`: Adds interactions to generator object.\n* `add_intervention`:  Adds an intervention to generator.\n* `set_initial_value`: Sets a node value or growth rate.\n* `get`: Gets a (node/interaction/intervention) by name.\n* `remove`: Removes a node, intervention, or interaction from the generator by name.\n* `generate`: Generates a single timecourse of synthetic data.\n* `generate_multiple`: Generates several timecourses of synthetic data.\n* `case_control`: Generates synthetic case and control timecourses.\n* `copy`: Makes a deep copy of generator.\n* `save`: Saves generator outputs as plaintext files. \nIn addition, the package contains a number of utility functions:\n* `inference.infer_glv_params`: Infers community matrix, growth rates, and perturbation responses from absolute abundance data.\n* `visualization.plot_timecourse`: Plots timecourses of compositional data.\n* `visualization.plot_pca`: Plots PCA-transformed timecourses.\n \n"
      },
      "source": "https://raw.githubusercontent.com/pchlenski/misdeed/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/pchlenski/misdeed/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pchlenski/misdeed/main/notebooks/examples.ipynb"
      },
      "source": "https://raw.githubusercontent.com/pchlenski/misdeed/main/notebooks/examples.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pchlenski/misdeed/main/notebooks/MiSDEEDPowerAnalysis.ipynb"
      },
      "source": "https://raw.githubusercontent.com/pchlenski/misdeed/main/notebooks/MiSDEEDPowerAnalysis.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pchlenski/misdeed/main/notebooks/MiSDEED_realism.ipynb"
      },
      "source": "https://raw.githubusercontent.com/pchlenski/misdeed/main/notebooks/MiSDEED_realism.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pchlenski/misdeed/main/notebooks/paper_figures.ipynb"
      },
      "source": "https://raw.githubusercontent.com/pchlenski/misdeed/main/notebooks/paper_figures.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/pchlenski/misdeed/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "pchlenski/misdeed"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MiSDEED"
      },
      "source": "https://raw.githubusercontent.com/pchlenski/misdeed/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pchlenski/misdeed/main/./img/diagram.png"
      },
      "source": "https://raw.githubusercontent.com/pchlenski/misdeed/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pchlenski/misdeed/main/./img/ex1.png"
      },
      "source": "https://raw.githubusercontent.com/pchlenski/misdeed/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pchlenski/misdeed/main/./img/ex2.png"
      },
      "source": "https://raw.githubusercontent.com/pchlenski/misdeed/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pchlenski/misdeed/main/./img/ex3.png"
      },
      "source": "https://raw.githubusercontent.com/pchlenski/misdeed/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pchlenski/misdeed/main/./img/ex4.png"
      },
      "source": "https://raw.githubusercontent.com/pchlenski/misdeed/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "MiSDEED can easily be installed using `pip` as follows:\n```bash\npip install misdeed\n```\n"
      },
      "source": "https://raw.githubusercontent.com/pchlenski/misdeed/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9328861120857558,
      "result": {
        "original_header": "Outputs",
        "type": "Text_excerpt",
        "value": "By default, MiSDEED will save results to the `./output` directory as follows:\n \n"
      },
      "source": "https://raw.githubusercontent.com/pchlenski/misdeed/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/pchlenski/misdeed/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "biological-simulations, microbial-ecology, microbiome, simulation-framework"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021 Philippe Chlenski\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/pchlenski/misdeed/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "misdeed"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "pchlenski"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 5121461,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 69757,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pchlenski/misdeed/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "pchlenski",
          "type": "User"
        },
        "date_created": "2022-04-14T04:42:54Z",
        "date_published": "2022-04-14T04:50:21Z",
        "html_url": "https://github.com/pchlenski/misdeed/releases/tag/v1.0.2",
        "name": "v1.0.2",
        "release_id": 64427166,
        "tag": "v1.0.2",
        "tarball_url": "https://api.github.com/repos/pchlenski/misdeed/tarball/v1.0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/pchlenski/misdeed/releases/64427166",
        "value": "https://api.github.com/repos/pchlenski/misdeed/releases/64427166",
        "zipball_url": "https://api.github.com/repos/pchlenski/misdeed/zipball/v1.0.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "pchlenski",
          "type": "User"
        },
        "date_created": "2022-02-17T23:08:48Z",
        "date_published": "2022-02-18T05:44:52Z",
        "html_url": "https://github.com/pchlenski/misdeed/releases/tag/v1.0.0",
        "release_id": 59874836,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/pchlenski/misdeed/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/pchlenski/misdeed/releases/59874836",
        "value": "https://api.github.com/repos/pchlenski/misdeed/releases/59874836",
        "zipball_url": "https://api.github.com/repos/pchlenski/misdeed/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Dependencies are listed in `requirements.txt` and can be installed using\n```bash\npip install -r requirements.txt\n```\n"
      },
      "source": "https://raw.githubusercontent.com/pchlenski/misdeed/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-06 03:45:01",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "Misdeed command-line interface"
        ],
        "type": "Text_excerpt",
        "value": "MiSDEED is used as follows:\n```bash\n    ./misdeed [-h] node_sizes [-iNtDCPVRnevrTdciE] [--options]\n```\nHere the `node_sizes` positional parameter is a comma-separated list of integers. To see MiSDEED parameters, run the following command:\n```bash\n./misdeed -h\n```\n"
      },
      "source": "https://raw.githubusercontent.com/pchlenski/misdeed/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example",
        "parent_header": [
          "Misdeed command-line interface"
        ],
        "type": "Text_excerpt",
        "value": "```bash\ngit clone https://github.com/pchlenski/misdeed\ncd misdeed\n\n# install requirements\npip install -r requirements.txt\n\n# generate a trajectory from the `example' directory to the `out' directory\n./misdeed 4 --input_dir ./example --output_dir ./out\n\n# modify generator parameters\n./misdeed 10,15,20 --node_names mgx,mbx,mtx --time_points 50 --discard_first 50\n\n# custom community matrix\n./misdeed 10,15,20 --connectivity 0.4 --self_penalty 10 --variance 1.5 --correlation 0.5\n\n# custom simulation parameters\n./misdeed 10,15,20 --n_samples 10 --extinct_fraction 0.1 --noise_variance 0.001 --n_reads 2000 --time_step 0.05 --downsample 5\n\n# custom case-control parameters\n./misdeed 10,15,20 --n_samples 10 --case_fraction 0.5 --intervention_node n0 --effect_size 0.5\n\n# generate and plot case-control trajectories\n./misdeed 10,15,20 --n_samples 10 --case_fraction 0.5 --plot --pca\n```\n"
      },
      "source": "https://raw.githubusercontent.com/pchlenski/misdeed/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Case-control",
        "parent_header": [
          "OmicsGenerator Python package",
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "```\noutput\n`---[UUID]\n    |---case\n    |   |---X\n    |   |   |---0\n    |   |   |   |---[node_0_name].tsv\n    |   |   |   |---[node_1_name].tsv\n    |   |   |   `---...\n    |   |   |---1\n    |   |   |   |---[node_0_name].tsv\n    |   |   |   |---[node_1_name].tsv\n    |   |   |   `---...\n    |   |   `---...\n    |   |---Y\n    |   |   |---0\n    |   |   |   |---[node_0_name].tsv\n    |   |   |   |---[node_1_name].tsv\n    |   |   |   `---...\n    |   |   |---1\n    |   |   |   |---[node_0_name].tsv\n    |   |   |   |---[node_1_name].tsv\n    |   |   |   `---...\n    |   |   `---...\n    |   |---Z\n    |   |   |---0\n    |   |   |   |---[node_0_name].tsv\n    |   |   |   |---[node_1_name].tsv\n    |   |   |   `---...\n    |   |   |---1\n    |   |   |   |---[node_0_name].tsv\n    |   |   |   |---[node_1_name].tsv\n    |   |   |   `---...\n    |   |   `---...\n    |   `---plots\n    |       |---0_[node_0_name].png\n    |       |---0_[node_1_name].png\n    |       |---...\n    |       |---1_[node_0_name].png\n    |       |---1_[node_1_name].png\n    |       `---...\n    |---control\n    |   |---X\n    |   |   |---0\n    |   |   |   |---[node_0_name].tsv\n    |   |   |   |---[node_1_name].tsv\n    |   |   |   `---...\n    |   |   |---1\n    |   |   |   |---[node_0_name].tsv\n    |   |   |   |---[node_1_name].tsv\n    |   |   |   `---...\n    |   |   `---...\n    |   |---Y\n    |   |   |---0\n    |   |   |   |---[node_0_name].tsv\n    |   |   |   |---[node_1_name].tsv\n    |   |   |   `---...\n    |   |   |---1\n    |   |   |   |---[node_0_name].tsv\n    |   |   |   |---[node_1_name].tsv\n    |   |   |   `---...\n    |   |   `---...\n    |   |---Z\n    |   |   |---0\n    |   |   |   |---[node_0_name].tsv\n    |   |   |   |---[node_1_name].tsv\n    |   |   |   `---...\n    |   |   |---1\n    |   |   |   |---[node_0_name].tsv\n    |   |   |   |---[node_1_name].tsv\n    |   |   |   `---...\n    |   |   `---...\n    |   `---plots\n    |       |---0_[node_0_name].png\n    |       |---0_[node_1_name].png\n    |       |---...\n    |       |---1_[node_0_name].png\n    |       |---1_[node_1_name].png\n    |       `---...\n    `---pca\n        |---[node_0_name].png\n        |---[node_1_name].png\n        `---...\n\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/pchlenski/misdeed/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Examples",
        "parent_header": [
          "OmicsGenerator Python package"
        ],
        "type": "Text_excerpt",
        "value": "The corresponding Jupyter notebook can be found at `notebooks/examples.ipynb`.\n"
      },
      "source": "https://raw.githubusercontent.com/pchlenski/misdeed/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Initialize generator",
        "parent_header": [
          "OmicsGenerator Python package",
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "```python\n# initialize generator:\ngen = OmicsGenerator(\n    nodes=['mgx', 'mbx'],  # 2 nodes named 'mgx' and 'mbx'\n    node_sizes=[15, 15],   # each node has 15 dimensions\n    init_full=True         # set interaction matrices and growth rates randomly\n)\n\n# add intervention:\ngen.add_intervention(\n    'int1',                # intervention name\n    'mgx',                 # apply to 'mgx' node\n    10*np.random.rand(15), # set intervention response vector randomly\n    start=50,              # start at t=50\n    end=100                # go to end\n)\n\n```\n"
      },
      "source": "https://raw.githubusercontent.com/pchlenski/misdeed/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Single timecourse",
        "parent_header": [
          "OmicsGenerator Python package",
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "```python\n# run generator and plot:\nz1, x1, y1 = gen.generate(dt=1e-2)\nplot_timecourse(y1['mgx'])\nplt.vlines(50, 0, 1)\n```\n![Single timecourse](./img/ex1.png)\n"
      },
      "source": "https://raw.githubusercontent.com/pchlenski/misdeed/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Multiple timecourses",
        "parent_header": [
          "OmicsGenerator Python package",
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "```python\n# run multi-generator and plot:\nz2, x2, y2 = gen.generate_multiple(20)\nplot_pca([y2], 'mgx')\n```\n![Multiple timecourses](./img/ex2.png)\n\n### Case-control\n```python\n# run case-control and plot:\nz3_control, x3_control, y3_control, z3_case, x3_case, y3_case = gen.case_control(100, .75, 'mgx', 1)\nplot_pca([y3_control, y3_case], 'mgx', colors=['red', 'blue'], plot_trajectories=False)\n```\n![Case-control](./img/ex3.png)\n"
      },
      "source": "https://raw.githubusercontent.com/pchlenski/misdeed/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Using learned parameters",
        "parent_header": [
          "OmicsGenerator Python package",
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "```python\n# run case-control and plot:\ngen4 = OmicsGenerator(\n    nodes=['mgx'],         # 1 node named 'mgx'\n    node_sizes=[15],       # 'mgx' has 15 dimensions\n    init_full=True         # set interaction matrices and growth rates randomly\n)\n\n# add intervention:\ngen4.add_intervention(\n    'int1',                # intervention name\n    'mgx',                 # apply to 'mgx' node\n    10*np.random.rand(15), # set intervention response vector randomly\n    start=50,              # start at t=50\n    end=100                # go to end\n)\n\n# generate training data\nz4, x4, y4 = gen4.generate(dt=1e-2)\n\n# infer params\nM, u, E = infer_glv_params(\n    z4['mgx'],             # use (latent) absolute abundances\n    gen4.get('int1').U,    # assume intervention indicator is known\n    interaction_reg=100,   # L1 penalty for interaction matrix\n    growth_reg=0,          # L1 penalty for growth rates\n    intervention_reg=0,    # L1 penalty for intervention responses\n    dt=1e-2                # same time-step as generator\n)\n\n# build inferred generator\ngen4_inferred = OmicsGenerator(nodes=['mgx'], node_sizes=[15])\ngen4_inferred.add_interaction('M', 'mgx', 'mgx', M)\ngen4_inferred.add_intervention('int1', 'mgx', E.reshape(-1), start=50, end=100)\ngen4_inferred.set_initial_value('mgx', u.reshape(-1), growth_rate=True)\ngen4_inferred.set_initial_value('mgx', gen4.get('mgx').initial_value) # same init. abundances as gen 1\n\nz4_inferred, x4_inferred, y4_inferred = gen4_inferred.generate(dt=1e-2)\n\n# plot both trajectories\ncolors = cm.get_cmap('magma', 20)(range(15))\n\nfor i in range(15):\n    plt.plot(np.cumsum(z4_inferred['mgx'], axis=1)[:,i], alpha=0.5, c=colors[i])\n    plt.plot(np.cumsum(z4['mgx'], axis=1)[:,i], alpha=0.5, c=colors[i])\n```\n![Using learned parameters](./img/ex4.png)\n\n"
      },
      "source": "https://raw.githubusercontent.com/pchlenski/misdeed/main/README.md",
      "technique": "header_analysis"
    }
  ]
}