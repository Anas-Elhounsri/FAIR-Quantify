{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/umasstr/GS-Preprocess"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-08-21T21:40:41Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-07-15T03:03:44Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "parent_header": [
          "GS-Preprocess"
        ],
        "type": "Text_excerpt",
        "value": "GS-Preprocess is a one-line, 6-argument pipeline that generates input data for the **GUIDEseq Bioconductor package** (https://doi.org/doi:10.18129/B9.bioc.GUIDEseq) from raw Illumina sequencer output. For off-target profiling, Bioconductor GUIDEseq only requires a 2-line **guideRNA fasta**, demultiplexed **BAM files** of \"plus\"- and \"minus\"-strands, and **Unique Molecular Index (UMI) references** for each read. \n\nCompatible libraries are constructed according to *GUIDE-seq enables genome-wide profiling of off-target cleavage by CRISPR-Cas nucleases* (https://doi.org/10.1038/nbt.3117)."
      },
      "source": "https://raw.githubusercontent.com/umasstr/GS-Preprocess/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8979779204713383,
      "result": {
        "original_header": "Using Docker",
        "type": "Text_excerpt",
        "value": "GS-Preprocess is available in a Docker container to users who do not have (or cannot install) the [dependencies](https://github.com/umasstr/GS-Preprocess#dependencies). For more information on using Docker, visit docker.io. Setup and run instructions: \nDemultiplex, align and generate UMI reference files \n\tgs_preprocess -t <threads> -o <output_dir> -r <directory_containing_RunInfo.xml> -s <SampleSheet.csv> -b </path/to/BWAIndex/genome.fa> -g <gRNA_sequence> -I <# UMI nt, default=8>\n\t\nOpen R in the container and proceed with Bioconductor GUIDEseq analysis: [Sample Bioconductor GUIDEseq Input](https://github.com/umasstr/GS-Preprocess#sample-bioconductor-guideseq-input). The container has R 4.0 preloaded and GUIDEseq preinstalled. \n"
      },
      "source": "https://raw.githubusercontent.com/umasstr/GS-Preprocess/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9829633941856813,
      "result": {
        "original_header": "Merging BAMs",
        "type": "Text_excerpt",
        "value": "Certain situations will require user to merge BAM files:\n1. A sequencer with multiple lanes (NEXTseq e.g.) will generate 4 fastq.gz files per sample labeled L001-L004. \n2. Replicate samples with distinct i5 and/or i7 barcodes. Different UMIs do not count as distinct barcodes for this purpose.  \n"
      },
      "source": "https://raw.githubusercontent.com/umasstr/GS-Preprocess/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.966477093779387,
      "result": {
        "original_header": "Visualizing Results",
        "type": "Text_excerpt",
        "value": "\tguideseq_plot.sh Sample01_output_folder/offTargetsInPeakRegions.xls\n\t\n![image](https://user-images.githubusercontent.com/44478133/229323414-84bb19b5-fece-4db9-8a28-5ea0d2ab2625.png)\n\t\nYou can pipe the output into aha and turn this into an html file that preserves the color and position of each character. \nAlternatively, you can use our somewhat buggy [web app]([url](https://mismatch.netlify.app/)) which adapts visualizstion code directly from Tsai et al. We are thankful to the authors for making their code available and clear, and hope that you will cite their [NBT article]([url](https://www.nature.com/articles/nbt.3534)).\n \n"
      },
      "source": "https://raw.githubusercontent.com/umasstr/GS-Preprocess/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Download GS-Preprocess",
        "parent_header": [
          "GS-Preprocess",
          "Getting Started"
        ],
        "type": "Text_excerpt",
        "value": "In cluster working directory\n\n\tgit clone https://github.com/umasstr/GS-Preprocess.git\n"
      },
      "source": "https://raw.githubusercontent.com/umasstr/GS-Preprocess/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/umasstr/GS-Preprocess/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/umasstr/GS-Preprocess/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "umasstr/GS-Preprocess"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "GS-Preprocess"
      },
      "source": "https://raw.githubusercontent.com/umasstr/GS-Preprocess/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/umasstr/GS-Preprocess/master/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/umasstr/GS-Preprocess/master/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/umasstr/GS-Preprocess/master/src/gs_preprocess.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/umasstr/GS-Preprocess/master/src/guideseq_plot.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "http://raw.githubusercontent.com/umasstr/GS-Preprocess/master/read_layout.png"
      },
      "source": "https://raw.githubusercontent.com/umasstr/GS-Preprocess/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "http://raw.githubusercontent.com/umasstr/GS-Preprocess/master/SampleSheet2.jpg"
      },
      "source": "https://raw.githubusercontent.com/umasstr/GS-Preprocess/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "http://raw.githubusercontent.com/umasstr/GS-Preprocess/master/workflow_gs3.png"
      },
      "source": "https://raw.githubusercontent.com/umasstr/GS-Preprocess/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://user-images.githubusercontent.com/44478133/229323134-baade196-4c22-45ad-9642-9fccdc0668bc.png"
      },
      "source": "https://raw.githubusercontent.com/umasstr/GS-Preprocess/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://user-images.githubusercontent.com/44478133/229323414-84bb19b5-fece-4db9-8a28-5ea0d2ab2625.png"
      },
      "source": "https://raw.githubusercontent.com/umasstr/GS-Preprocess/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://user-images.githubusercontent.com/44478133/229323381-cf498193-5918-46f6-8969-ccc6e63500d3.png"
      },
      "source": "https://raw.githubusercontent.com/umasstr/GS-Preprocess/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Set Up Sequencing Run",
        "parent_header": [
          "GS-Preprocess",
          "Getting Started"
        ],
        "type": "Text_excerpt",
        "value": "This pipeline is compatible with ***ANY ILLUMINA SEQUENCER*** and ***WITHOUT PRE-CONFIGURATION***. This represents a  flexible alternative to https://github.com/aryeelab/guideseq#miseq which requires a pre-configured MiSeq and sample manifest YAML.\n\n**Note:** Paired-end sequencing should include 8 Index1 (i7) cycles and **16** Index2 (i5) cycles:\n\t\n\tR1 | 8 | 16 | R2\n\n![alt text](read_layout.png)\n"
      },
      "source": "https://raw.githubusercontent.com/umasstr/GS-Preprocess/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Prepare the Pipeline",
        "parent_header": [
          "GS-Preprocess",
          "Getting Started"
        ],
        "type": "Text_excerpt",
        "value": "Move into src directory\n\n\tcd GS-Preprocess/src\nMake all files executable\t\n\n\tchmod +x *"
      },
      "source": "https://raw.githubusercontent.com/umasstr/GS-Preprocess/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9773578442810555,
      "result": {
        "original_header": "Using Docker",
        "type": "Text_excerpt",
        "value": "GS-Preprocess is available in a Docker container to users who do not have (or cannot install) the [dependencies](https://github.com/umasstr/GS-Preprocess#dependencies). For more information on using Docker, visit docker.io. Setup and run instructions: \nDownload the GS-Preprocess container\n\t\t\n\tdocker pull umasstr/gsp:latest\n\t\t\nNavigate to a directory containing (i) Illumina \"Data/\" directory (ii) CSV SampleSheet (iii) RunInfo.xml\nEnter the container: \n"
      },
      "source": "https://raw.githubusercontent.com/umasstr/GS-Preprocess/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9997474589114538,
      "result": {
        "original_header": "Sample Bioconductor GUIDEseq Input",
        "type": "Text_excerpt",
        "value": "\t\tlibrary(hash)\n\t\tlibrary(GUIDEseq)\n\t\tlibrary(BSgenome.Hsapiens.UCSC.hg38)\n\t\tlibrary(TxDb.Hsapiens.UCSC.hg38.knownGene)\n\t\tlibrary(org.Hs.eg.db)\n\t\t\n\t\tguideSeqResults <- GUIDEseqAnalysis(\n\t\talignment.inputfile = c(\"POS_STRAND.bam\",\"NEG_STRAND.BAM\"),\n\t\tumi.inputfile=c(\"UMIs.txt\",\"UMIs.txt\"),\n\t\tgRNA.file = \"gRNA_FILE.fa\",\n\t\tmax.mismatch = 10,\n\t\tBSgenomeName = Hsapiens,\n\t\ttxdb = TxDb.Hsapiens.UCSC.hg38.knownGene,\n\t\torgAnn = org.Hs.egSYMBOL,\n\t\toutputDir= \"SAMPLE_NAME\",\n\t\tn.cores.max = NUMBER_THREADS) \nGUIDEseq Dependency R Installation (One Time Only):\n\t\t\n\t\t\n\t\tinstall.packages(\"BiocManager\")\n\t\tBiocManager::install(\"hash\")\n\t\tBiocManager::install(\"BSgenome.Hsapiens.UCSC.hg38\")\n\t\tBiocManager::install(\"TxDb.Hsapiens.UCSC.hg38.knownGene\")\n\t\tif (!requireNamespace(\"BiocManager\", quietly = TRUE))\n    \t\t\tinstall.packages(\"BiocManager\")\n\t\tBiocManager::install(\"GUIDEseq\")\n\t\t\nPlease note the \"hg38\" genome selection. This can be changed to the assembly of your choice.\n\t\t \n"
      },
      "source": "https://raw.githubusercontent.com/umasstr/GS-Preprocess/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9988254489005329,
      "result": {
        "original_header": "Visualizing Results",
        "type": "Text_excerpt",
        "value": "To visualize the output, you can use the shell script \"guideseq_plot.sh\" as shown below to print a color-coded mismatch plot in your terminal. \n\t# if aha not already installed: sudo apt-get update && sudo apt-get install -y aha\n\tguideseq_plot.sh Sample01_output_folder/offTargetsInPeakRegions.xls | aha > output.html \n"
      },
      "source": "https://raw.githubusercontent.com/umasstr/GS-Preprocess/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8549549551497885,
      "result": {
        "original_header": "Using Docker",
        "type": "Text_excerpt",
        "value": "Download the GS-Preprocess container\n\t\t\n\tdocker pull umasstr/gsp:latest\n\t\t\nNavigate to a directory containing (i) Illumina \"Data/\" directory (ii) CSV SampleSheet (iii) RunInfo.xml\nEnter the container: \n\tdocker run -it -v \"$PWD\":/DATA umasstr/gsp\n\tcd DATA/ \n"
      },
      "source": "https://raw.githubusercontent.com/umasstr/GS-Preprocess/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8113075430301114,
      "result": {
        "original_header": "Visualizing Results",
        "type": "Text_excerpt",
        "value": "To visualize the output, you can use the shell script \"guideseq_plot.sh\" as shown below to print a color-coded mismatch plot in your terminal. \n"
      },
      "source": "https://raw.githubusercontent.com/umasstr/GS-Preprocess/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/umasstr/GS-Preprocess/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "BSD 3-Clause License\n\nCopyright (c) 2019, Tomas C. Rodriguez\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n4. GS-Preprocess is acknowledged in any product or publication derived from this software.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
      },
      "source": "https://raw.githubusercontent.com/umasstr/GS-Preprocess/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "GS-Preprocess"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "umasstr"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 3818,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 2420,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 1658,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/umasstr/GS-Preprocess/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Prerequisites",
        "parent_header": [
          "GS-Preprocess",
          "Getting Started"
        ],
        "type": "Text_excerpt",
        "value": "1. **\u226532G of RAM allocated to the GS-Preprocess pipeline**\n\n2. **Illumina output folder**: Download from BaseSpace or directly from any Illumina sequencer after run completion. No demultiplexing or fastq generation necessary!\n\t\n\t\tRun_output_dir_Example\n\t\t|-- Config\n\t\t|-- Data\n\t\t|-- Images\n\t\t|-- InterOp\n\t\t|-- Logs\n\t\t|-- RTAComplete.txt\n\t\t|-- RTAConfiguration.xml\n\t\t|-- RTALogs\n\t\t|-- RTARead1Complete.txt\n\t\t|-- RTARead2Complete.txt\n\t\t|-- RTARead3Complete.txt\n\t\t|-- RTARead4Complete.txt\n\t\t|-- Recipe\n\t\t|-- RunCompletionStatus.xml\n\t\t|-- RunInfo.xml\n\t\t|-- RunParameters.xml\n\t\t|-- Thumbnail_Images\n\n     - **Illumina-format SampleSheet**: https://help.basespace.illumina.com/articles/descriptive/sample-sheet/ This sheet is in .csv format and is commonly used to demultiplex illumina .bcl files (raw sequencer output). **A0# and i70# Index must be listed as its REVERSE COMPLIMENT on the Sample Sheet!** This is a consequence of the way in which the indexing primers are used in the Tsai et al. library prep method. See my premade \"SampleSheet.csv\" and \"Indexes.csv\", or use https://github.com/LJI-Bioinformatics/Excel-Reverse-Complement. \n![alt text](SampleSheet2.jpg)\n     - **RunInfo.xml**: Contains high-level run information,such as the number of Reads and cycles in the sequencing run. This file is standard output from any illumina sequencer and will automatically populate in any run output folder. *RunInfo.xml is found in the top-level output folder of any sequencing run*\n\n3. **BWA Index Download**: https://support.illumina.com/sequencing/sequencing_software/igenome.html\n"
      },
      "source": "https://raw.githubusercontent.com/umasstr/GS-Preprocess/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "parent_header": [
          "GS-Preprocess",
          "Getting Started"
        ],
        "type": "Text_excerpt",
        "value": "*Add the below dependencies:*\n\n\tbcl2fastq2/2.20.0\n\tpython2\n\tR/3.6.0\n\tbwa\n\tcutadapt/1.9\n\tgcc/8.1.0 #may not be necessary, depending on OS\n\tsamtools\n\t\nExample:\n>module add bcl2fastq2/2.20.0"
      },
      "source": "https://raw.githubusercontent.com/umasstr/GS-Preprocess/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Set Up Sequencing Run",
        "parent_header": [
          "GS-Preprocess",
          "Getting Started"
        ],
        "type": "Text_excerpt",
        "value": "This pipeline is compatible with ***ANY ILLUMINA SEQUENCER*** and ***WITHOUT PRE-CONFIGURATION***. This represents a  flexible alternative to https://github.com/aryeelab/guideseq#miseq which requires a pre-configured MiSeq and sample manifest YAML.\n\n**Note:** Paired-end sequencing should include 8 Index1 (i7) cycles and **16** Index2 (i5) cycles:\n\t\n\tR1 | 8 | 16 | R2\n\n![alt text](read_layout.png)\n"
      },
      "source": "https://raw.githubusercontent.com/umasstr/GS-Preprocess/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Run the Pipeline",
        "parent_header": [
          "GS-Preprocess"
        ],
        "type": "Text_excerpt",
        "value": "\t./gs_preprocess.sh -t <number_of_threads> -o </absolute/path/to/output_directory> -r <directory_containing_RunInfo.xml> -s </path/to/SampleSheet.csv> -b </path/to/BWAIndex/genome.fa> -g <gRNA_sequence> -I <# UMI nt, default>\n\nTo avoid errors, use absolute paths. \n\nCompletion of gs_preprocess.sh generates all 3 inputs needed for Bioconductor GUIDEseq and stores them in **working directory (GS-Preprocess/src/)** \n- [x] plus- and minus-strand BAMs\n- [x] UMIs.txt\n- [x] guideRNA.fa"
      },
      "source": "https://raw.githubusercontent.com/umasstr/GS-Preprocess/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Run the Pipeline on a Server",
        "parent_header": [
          "GS-Preprocess"
        ],
        "type": "Text_excerpt",
        "value": "If you're using a cluster or server, consider running the docker image in Singularity. Generally, docker images can be pulled from your home directory, but check with your local admins if using Singularity for the first time.\n\n\tsingularity shell docker://umasstr/gsp:latest\n\nOnce in the container, set environment variables not carried over:\n\n\texport PATH=/share/pkg/conda/cutadapt/4.1/bin:$PATH\n\t\nRun the pipeline as directed above, calling the gs_preprocess command.\n\nNote: Loading a docker image through Singularity does not completely recapitulate the containerized environment offered by docker. For example, my server does not allow me to run the GUIDEseq R package due to library conflicts. In this case, I transfer the pre-processed files to my local machine where I can run the container with docker. \n\t\t"
      },
      "source": "https://raw.githubusercontent.com/umasstr/GS-Preprocess/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 16:08:15",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Expected Runtime &amp; Resource Usage",
        "parent_header": [
          "GS-Preprocess",
          "Run the Pipeline"
        ],
        "type": "Text_excerpt",
        "value": "Benchmarks for a 10 million read run with 40 uniquely barcoded samples (20 plus and minus strand):\n\t\n- 8 cores, 48G RAM\n\t\n\t\tTotal Runtime: 130 min\n\t\tCPU time: 23578.08 sec\n\t\tMax Memory: 12673 MB\n\t\tAverage Memory: 4451.26 MB\n\t\t\n- 24 cores, 48G RAM\n\n\t\tTotal Runtime: 22 min\n\t\tCPU time: 11066.98 sec\n\t\tMax Memory: 12798 MB\n\t\tAverage Memory: 2595.86 MB\n\n- 32 cores, 48G RAM\n\n\t\tTotal Runtime: 19 min\n\t\tCPU time: 11373.65 sec\n\t\tMax Memory: 12854 MB\n\t\tAverage Memory: 2524.71 MB\n\t\t\n\t\t"
      },
      "source": "https://raw.githubusercontent.com/umasstr/GS-Preprocess/master/README.md",
      "technique": "header_analysis"
    }
  ]
}