{
  "application_domain": [
    {
      "confidence": 38.44,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citing this work",
        "parent_header": [
          "Origami  <a href=\"https://doi.org/10.1371/journal.pcbi.1009063\"><img alt=\"DOI:10.1371/journal.pcbi.1009063\" src=\"http://img.shields.io/badge/DOI-10.1371/journal.pcbi.1009063-B31B1B.svg\" /></a>"
        ],
        "type": "Text_excerpt",
        "value": "If you use our work, please cite it:\n\n>Mendonca T, Jones AA, Pozo JM, Baxendale S, Whitfield TT, Frangi AF. *Origami: Single-cell 3D shape dynamics oriented along the apico-basal axis of folding epithelia from fluorescence microscopy data*. PLOS Computational Biology. 2021; 17 (11) [doi:10.1101/2021.05.13.443974](https://doi.org/10.1371/journal.pcbi.1009063)\n"
      },
      "source": "https://raw.githubusercontent.com/cistib/origami/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ccmim/origami"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-08-05T17:36:07Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-07-24T20:31:41Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MATLAB-based image analysis pipeline for extracting single-cell direction-variant shape features from fluorescence images of folding epithelial sheets."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.990772997207626,
      "result": {
        "original_header": "Origami  <a href=\"https://doi.org/10.1371/journal.pcbi.1009063\"><img alt=\"DOI:10.1371/journal.pcbi.1009063\" src=\"http://img.shields.io/badge/DOI-10.1371/journal.pcbi.1009063-B31B1B.svg\" /></a>",
        "type": "Text_excerpt",
        "value": "An image analysis pipeline for extracting direction- variant shape features from fluorescence images of folding epithelial sheets.\n \n"
      },
      "source": "https://raw.githubusercontent.com/cistib/origami/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9929058130535627,
      "result": {
        "original_header": "Overview",
        "type": "Text_excerpt",
        "value": "Origami accepts segmented 3D data, finds the orientation of individual cells \u2013 aligned with the apico-basal axis of the epithelium and computes oriented shape features: skewness, horizontal and transversal extent along with un-oriented shape features: volume, surface area and sphericity. \n"
      },
      "source": "https://raw.githubusercontent.com/cistib/origami/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9030052524226548,
      "result": {
        "original_header": "Generating synthetic epithelia",
        "type": "Text_excerpt",
        "value": "Synthetic epithelia used to validate Origami can be generated using the \u2018MembraneSim.m\u2019 and \u2018ConvolveNCorrupt.m\u2019 scripts. These synthetic data resemble fluorescence images of folding epithelia with parameters to control extent of membrane curvature (\u2018crv\u2019 line 25, \u2018MembraneSim.m\u2019) and folding height (\u2018pk\u2019 line 26, \u2018MembraneSim.m\u2019). The \u2018MembraneSim.m\u2019 script produces a 3D array of pixel intensity values saved as a \u2018.mat\u2019 file. This synthetic image array is then convolved with a point spread function (\u2018PSF Defocus.tif\u2019) and corrupted with image noise (three levels) to resemble real-world imaging conditions using the \u2018CovolveNCorrupt.m\u2019 script. Finally, a \u2018.tiff\u2019 image file is exported from the \u2018ConvolveNCorrupt.m\u2019 script. Please refer to the [Supplementary Materials and Methods](https://doi.org/10.1371/journal.pcbi.1009063) for a detailed explanation of the synthetic data generation. \nThe \u2018ACMEinMATLAB\u2019 folder contains scripts produced by us to call ACME binaries from within MATLAB for single file or batch processing.\n \n"
      },
      "source": "https://raw.githubusercontent.com/cistib/origami/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/cistib/origami/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ccmim/origami/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ccmim/origami"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Origami  "
      },
      "source": "https://raw.githubusercontent.com/cistib/origami/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "Origami  <a href=\"https://doi.org/10.1371/journal.pcbi.1009063\"><img alt=\"DOI:10.1371/journal.pcbi.1009063\" src=\"http://img.shields.io/badge/DOI-10.1371/journal.pcbi.1009063-B31B1B.svg\" /></a>"
        ],
        "type": "Text_excerpt",
        "value": "Origami runs on MATLAB \u2013 compatible with *MATLAB R2018b* onwards. \nMATLAB can be installed through the MathWorks website: https://uk.mathworks.com/products/matlab.html\n\nOrigami requires the \u2018Computer Vision System Toolbox\u2019 and \u2018Deep Learning Toolbox\u2019 installed in MATLAB.\n\n"
      },
      "source": "https://raw.githubusercontent.com/cistib/origami/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999624800951182,
      "result": {
        "original_header": "Generating synthetic epithelia",
        "type": "Text_excerpt",
        "value": "The synthetic images must be segmented prior to applying the Origami pipeline. We use the ACME software to do this.\nDownload ACME binaries from (https://github.com/krm15/ACME/wiki). \n"
      },
      "source": "https://raw.githubusercontent.com/cistib/origami/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ccmim/origami/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "image-processing, matlab-code, microscopy"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Copyright (c) 2014, Oliver J. Woodford, Yair M. Altman\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of the {organization} nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
      },
      "source": "https://raw.githubusercontent.com/cistib/origami/main/Src/Main/functions/Interactive/altmany-export_fig-5b3965b/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "origami"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "ccmim"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "MATLAB",
        "size": 379709,
        "type": "Programming_language",
        "value": "MATLAB"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 4820,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Java",
        "size": 1053,
        "type": "Programming_language",
        "value": "Java"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/cistib/origami/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "affrangi",
          "type": "User"
        },
        "date_created": "2021-08-26T21:12:44Z",
        "date_published": "2021-11-17T18:38:02Z",
        "html_url": "https://github.com/ccmim/origami/releases/tag/Origami_v1.0",
        "name": "Origami v1.0",
        "release_id": 53581522,
        "tag": "Origami_v1.0",
        "tarball_url": "https://api.github.com/repos/ccmim/origami/tarball/Origami_v1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/ccmim/origami/releases/53581522",
        "value": "https://api.github.com/repos/ccmim/origami/releases/53581522",
        "zipball_url": "https://api.github.com/repos/ccmim/origami/zipball/Origami_v1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 02:07:00",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "Origami  <a href=\"https://doi.org/10.1371/journal.pcbi.1009063\"><img alt=\"DOI:10.1371/journal.pcbi.1009063\" src=\"http://img.shields.io/badge/DOI-10.1371/journal.pcbi.1009063-B31B1B.svg\" /></a>"
        ],
        "type": "Text_excerpt",
        "value": "Origami is an easy- to- use MATLAB program with interactive features. *It does not require knowledge of MATLAB scripting to run*. Simply add the folder directory for the Origami scripts to the MATLAB search path. Open the main script \u2018OrigamiPipeline_Main.m\u2019 in MATLAB and click on the RUN button.\n"
      },
      "source": "https://raw.githubusercontent.com/cistib/origami/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Inputs:",
        "parent_header": [
          "Origami  <a href=\"https://doi.org/10.1371/journal.pcbi.1009063\"><img alt=\"DOI:10.1371/journal.pcbi.1009063\" src=\"http://img.shields.io/badge/DOI-10.1371/journal.pcbi.1009063-B31B1B.svg\" /></a>",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "* Segmented files \u2013 Origami accepts 3D segmented image data in the following file formats: \u2018.mha\u2019 , \u2019.tif\u2019 , \u2019.obj\u2019  and  \u2018.mat\u2019. Origami has been validated on data that represent cropped ROIs.\nIf importing \u2018.obj\u2019 files (output from Arivis segmentation software), Origami will also request the corresponding datasheet exported from Arivis for the un- oriented shape features. In the absence of this datasheet, Origami will compute these features but as Arivis exports the segmentation with a shrink factor applied to the boundaries of the individual cells, these un-oriented features, particularly \u2013 volume, may not accurately reflect the original data.\n* Pixel dimensions \u2013 Origami extracts the pixel dimensions from the metadata of the segmented files but will ask the user to confirm this. If using ACME for segmentation, input the pixel dimensions after resampling (original pixel dimensions * resample factor in all dimensions). For best results, ensure that the input segmented file is resampled to an isotropic voxel dimension.\n* Polarity direction \u2013 Set apico-basal axis to face apical or basal side - direction in relation to the curvature of the epithelium. For example, in the otic epithelium in the developing zebrafish inner ear, the apical face of the epithelium faces the lumen of the otic vesicle and so to assign apico-basal polarity facing the apical face, the polarity direction is defined as \u2018in\u2019. Default value: \u2018in\u2019.\n"
      },
      "source": "https://raw.githubusercontent.com/cistib/origami/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Outputs:",
        "parent_header": [
          "Origami  <a href=\"https://doi.org/10.1371/journal.pcbi.1009063\"><img alt=\"DOI:10.1371/journal.pcbi.1009063\" src=\"http://img.shields.io/badge/DOI-10.1371/journal.pcbi.1009063-B31B1B.svg\" /></a>",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Data table of cell-specific shape features: \n* Volume (\u03bcm<sup>3</sup>), \n* Surface area (\u03bcm<sup>2</sup>), \n* Sphericity (value between 0 and 1, with 1 indicating a perfect sphere), \n* Skewness (negative values indicating a skew in mass biased towards the direction of the polarity vector while positive values indicate a skew in the opposite direction), \n* Longitudinal spread (indicating spread along the polarity vector) and \n* Transversal spread (indicating mass spread along a plane perpendicular to the polarity vector). \n\nThe data table can be exported as a \u2018.csv\u2019 or \u2018.xlsx\u2019 file.\n"
      },
      "source": "https://raw.githubusercontent.com/cistib/origami/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Interactivity:",
        "parent_header": [
          "Origami  <a href=\"https://doi.org/10.1371/journal.pcbi.1009063\"><img alt=\"DOI:10.1371/journal.pcbi.1009063\" src=\"http://img.shields.io/badge/DOI-10.1371/journal.pcbi.1009063-B31B1B.svg\" /></a>",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "* Clean segmentation \u2013 users can assess segmentation input and reject under/over-segmented cells.\n* Pixel dimensions \u2013 users are prompted to input the pixel dimensions for the data\n* Polarity \u2013 users can assess the polarity output, change polarity direction or select individual vector errors to correct by applying a 180<sup>o</sup> flip.\n* Grouping cells (optional) \u2013 cells are grouped by mean curvature along the apical surface by default. This separates cells in the folding region of the epithelium from cells in the flanking non- folding regions. Users can manually override the default grouping.\n"
      },
      "source": "https://raw.githubusercontent.com/cistib/origami/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Miscellaneous:",
        "parent_header": [
          "Origami  <a href=\"https://doi.org/10.1371/journal.pcbi.1009063\"><img alt=\"DOI:10.1371/journal.pcbi.1009063\" src=\"http://img.shields.io/badge/DOI-10.1371/journal.pcbi.1009063-B31B1B.svg\" /></a>",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": " Cells along the boundary are removed to exclude broken cells from the analysis.\n"
      },
      "source": "https://raw.githubusercontent.com/cistib/origami/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Additional functionality:",
        "parent_header": [
          "Origami  <a href=\"https://doi.org/10.1371/journal.pcbi.1009063\"><img alt=\"DOI:10.1371/journal.pcbi.1009063\" src=\"http://img.shields.io/badge/DOI-10.1371/journal.pcbi.1009063-B31B1B.svg\" /></a>",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "\u2018SelectACell.m\u2019 and \u2018PlotCellsByProperty.m\u2019 are additional scripts that can be used to visualise the data by features at a single-cell level. The GUIs for these scripts allow the user to interact with 3D renderings of the epithelium and export 2D images or data tables.\n"
      },
      "source": "https://raw.githubusercontent.com/cistib/origami/main/README.md",
      "technique": "header_analysis"
    }
  ]
}