{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "SCSsim"
        ],
        "type": "Text_excerpt",
        "value": "Please cite SCSsim in your publications if it helps your research:\n\n``` bibtex\n@article{yu2019scssim,\n  title={SCSsim: an integrated tool for simulating single-cell genome sequencing data},\n  author={Yu, Zhenhua and Du, Fang and Sun, Xuehong and Li, Ao},\n  journal={Bioinformatics},\n  year={2019}\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/qasimyu/scssim/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Yu, Zhenhua and Du, Fang and Sun, Xuehong and Li, Ao",
        "format": "bibtex",
        "title": "SCSsim: an integrated tool for simulating single-cell genome sequencing data",
        "type": "Text_excerpt",
        "value": "@article{yu2019scssim,\n    year = {2019},\n    journal = {Bioinformatics},\n    author = {Yu, Zhenhua and Du, Fang and Sun, Xuehong and Li, Ao},\n    title = {SCSsim: an integrated tool for simulating single-cell genome sequencing data},\n}"
      },
      "source": "https://raw.githubusercontent.com/qasimyu/scssim/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/qasimyu/scssim"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact",
        "parent_header": [
          "SCSsim"
        ],
        "type": "Text_excerpt",
        "value": "If you have any questions, please contact zhyu@nxu.edu.cn."
      },
      "source": "https://raw.githubusercontent.com/qasimyu/scssim/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-03-09T07:46:43Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-02-22T09:53:06Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "a bioinformatics tool for simulating single-cell genome sequencing data"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9991407060458013,
      "result": {
        "original_header": "SCSsim",
        "type": "Text_excerpt",
        "value": "SCSsim is a tool designed for emulating single-cell genome sequencing data. It consists of three modules: 1) \u201csimuVars\u201d module aims to generate single cell genome from a given reference sequence by inserting user-defined genomic variations into genomic loci; 2) \u201clearnProfile\u201d component is developed to infer sequencing platform dependent profiles from real data; 3) \u201cgenReads\u201d utility is provided to mimic single-cell genome amplification and read generation procedures based on the results of \u201csimuVars\u201d and \u201clearnProfile\u201d. More details about the software can be found from [here](https://github.com/qasimyu/scssim/tree/master/docs/SCSsim_User_Guide.pdf). \n"
      },
      "source": "https://raw.githubusercontent.com/qasimyu/scssim/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/qasimyu/scssim/tree/master/docs"
      },
      "technique": "file_exploration"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/qasimyu/scssim/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/qasimyu/scssim/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "qasimyu/scssim"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SCSsim"
      },
      "source": "https://raw.githubusercontent.com/qasimyu/scssim/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/qasimyu/scssim/master/util/snpFilter.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/qasimyu/scssim/master/docs/workflow.png"
      },
      "source": "https://raw.githubusercontent.com/qasimyu/scssim/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "SCSsim"
        ],
        "type": "Text_excerpt",
        "value": "To build binary, do as follows:\n\n```\ntar -zxvf SCSsim.tar.gz\ncd SCSsim\ncmake .\nmake\n```\n\nAfter the installation, the main programs of SCSsim are generated in \u201cbin\u201d directory. Type following command if you want to add SCSsim to system path:\n```\nmake install\n```\n"
      },
      "source": "https://raw.githubusercontent.com/qasimyu/scssim/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/qasimyu/scssim/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "BSD 3-Clause \"New\" or \"Revised\" License",
        "spdx_id": "BSD-3-Clause",
        "type": "License",
        "url": "https://api.github.com/licenses/bsd-3-clause",
        "value": "https://api.github.com/licenses/bsd-3-clause"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "BSD 3-Clause License\n\nCopyright (c) 2019, Zhenhua Yu\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
      },
      "source": "https://raw.githubusercontent.com/qasimyu/scssim/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "scssim"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "qasimyu"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 195836,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 4460,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 914,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 501,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/qasimyu/scssim/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "qasimyu",
          "type": "User"
        },
        "date_created": "2019-12-16T03:06:04Z",
        "date_published": "2019-12-19T05:44:19Z",
        "description": "Improved calculation of #reads with respect to sequencing coverage",
        "html_url": "https://github.com/qasimyu/scssim/releases/tag/v1.1",
        "release_id": 22344345,
        "tag": "v1.1",
        "tarball_url": "https://api.github.com/repos/qasimyu/scssim/tarball/v1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/qasimyu/scssim/releases/22344345",
        "value": "https://api.github.com/repos/qasimyu/scssim/releases/22344345",
        "zipball_url": "https://api.github.com/repos/qasimyu/scssim/zipball/v1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "qasimyu",
          "type": "User"
        },
        "date_created": "2019-08-20T14:53:42Z",
        "date_published": "2019-08-20T15:04:10Z",
        "html_url": "https://github.com/qasimyu/scssim/releases/tag/v1.0",
        "release_id": 19409295,
        "tag": "v1.0",
        "tarball_url": "https://api.github.com/repos/qasimyu/scssim/tarball/v1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/qasimyu/scssim/releases/19409295",
        "value": "https://api.github.com/repos/qasimyu/scssim/releases/19409295",
        "zipball_url": "https://api.github.com/repos/qasimyu/scssim/zipball/v1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "parent_header": [
          "SCSsim"
        ],
        "type": "Text_excerpt",
        "value": "* Linux systems.\n* CMake2.8+.\n* g++.\n"
      },
      "source": "https://raw.githubusercontent.com/qasimyu/scssim/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 17:19:33",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 10
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 1: generate single cell genome sequence",
        "parent_header": [
          "SCSsim",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Users can use \u201cscssim simuvars\u201d subcommand to simulate the genome sequence of single cell by defining various genomic variations. The types of variations include single nucleotide polymorphism (SNP), single nucleotide variation (SNV), short insert and deletion (indel), and copy number variation (CNV).\n\nExample:\n\n```\nscssim simuvars -r ./testData/refs/ref.fa.gz -s ./testData/snps/snp.txt -v ./testData/vars/vars.txt -o ./results/simu.fa\n```\n"
      },
      "source": "https://raw.githubusercontent.com/qasimyu/scssim/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 2 (optional): infer sequencing profiles from real datasets",
        "parent_header": [
          "SCSsim",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "The \u201cscssim learn\u201d subcommand is designed to infer sequencing profiles from real sequencing data generated from Illumina instruments. In the current version, four profiles including indel error distributions, base substitution probabilities, Phred quality distributions and GC-content bias are measured. The profiles from several Illumina platforms are available in directory ./testData/models, and users can build their own profiles from a given real dataset using this program. \n\nExamples:\n\n```\nscssim learn -b <sample>.bam -t <targets>.bed -v <sample>.vcf -r <reference>.fa > <sample>.profile\nscssim learn -b <sample>.bam -v <sample>.vcf -r <reference>.fa -o <sample>.profile \u2013s /path/to/samtools\n```\n"
      },
      "source": "https://raw.githubusercontent.com/qasimyu/scssim/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 3: amplify single cell genome and generate reads",
        "parent_header": [
          "SCSsim",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "The \u201cscssim genreads\u201d subcommand is developed to simulate single-end or paired-end reads based on the results of \u201csimuVars\u201d and \u201clearnProfile\u201d modules. \n\nExample:\n\n```\nscssim genreads -i ./results/simu.fa -r 2e-10 -m ./testData/models/Illumina_HiSeq2500.profile -t 5 -o ./results/reads\n```\n"
      },
      "source": "https://raw.githubusercontent.com/qasimyu/scssim/master/README.md",
      "technique": "header_analysis"
    }
  ]
}