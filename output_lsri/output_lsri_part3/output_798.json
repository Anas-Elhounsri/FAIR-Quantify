{
  "application_domain": [
    {
      "confidence": 24.53,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Specify the reference genome file",
        "parent_header": [
          "How to use",
          "Set your analysis project"
        ],
        "type": "Text_excerpt",
        "value": "A required parameter is the reference genome. You can either pass the reference genome from the command line\n\n``` bash\n./circompara2 \"GENOME_FASTA='/home/user/genomes/Homo_sapiens.GRCh38.dna.primary_assembly.fa'\"\n```\n\nor by setting the `GENOME_FASTA` parameter in the `vars.py` file; e.g.:\n\n``` bash\nGENOME_FASTA = '/home/user/genomes/Homo_sapiens.GRCh38.dna.primary_assembly.fa'\n```\n"
      },
      "source": "https://raw.githubusercontent.com/egaffo/CirComPara2/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "How to cite",
        "type": "Text_excerpt",
        "value": "If you used CirComPara2 for your analysis, please add the following citation to your references:\n\nEnrico Gaffo, Alessia Buratin, Anna Dal Molin, Stefania Bortoluzzi, Sensitive, reliable and robust circRNA detection from RNA-seq with CirComPara2, Briefings in Bioinformatics, 2021;, bbab418, https://doi.org/10.1093/bib/bbab418\n"
      },
      "source": "https://raw.githubusercontent.com/egaffo/CirComPara2/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/egaffo/circompara2"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-02-02T16:32:05Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-27T12:02:40Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Improved bioinformatic pipeline to identify and quantify circRNA expression from RNA-seq data by combining multiple circRNA detection methods"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9988216254209392,
      "result": {
        "original_header": "Circompara2",
        "type": "Text_excerpt",
        "value": "CirComPara2 is a computational pipeline to detect, quantify, and correlate expression of linear and circular RNAs from RNA-seq data that combines multiple circRNA-detection methods. \n"
      },
      "source": "https://raw.githubusercontent.com/egaffo/CirComPara2/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8629873693037476,
      "result": {
        "original_header": "Stranded libraries",
        "type": "Text_excerpt",
        "value": "Some tools in circompara2 require special parameters to handle properly stranded reads. circompara2 allows to specify such parameters Example: include the following parameters if you used the Illumina TruSeq Stranded Total RNA Library Prep Kit with Ribo-Zero Human/Mouse/Rat\n``` python\nHISAT2_EXTRA_PARAMS = \"--rna-strandness RF\"\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/egaffo/CirComPara2/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8900768279534625,
      "result": {
        "original_header": "Alternative workflow pipelines",
        "type": "Text_excerpt",
        "value": "With circompara2 you can chose to run either the circRNA, the linear genes (i.e. a traditional gene expression pipeline), or both branches of the pipeline (the default) by specifying with the `BYPASS` parameter which branch has to be skipped. Moreover, the `BYPASS` parameter can be set to `\"linear,linmap\"` if you already have the alignment files in BAM format and don't want to/can't/don't need to preprocess the raw reads. Then, circompara2 will extract the unaligned reads to search circRNAs from the BAM files listed in the LINMAPS parameter and use the BAM files to compute the CLPs.\n \n"
      },
      "source": "https://raw.githubusercontent.com/egaffo/CirComPara2/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/egaffo/CirComPara2/wiki"
      },
      "source": "https://raw.githubusercontent.com/egaffo/CirComPara2/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/egaffo/CirComPara2/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "faq": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Errors with R packages",
        "parent_header": [
          "Appendix"
        ],
        "type": "Text_excerpt",
        "value": "If you get error messages from R packages of your already installed circompara2, maybe some update occurred in your R system. Try to re-install all circompara2 R package dependencies by using the `reinstall_R_pkgs` command from the `src/utils/bash` directory.\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/egaffo/CirComPara2/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/egaffo/circompara2/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "egaffo/circompara2"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/egaffo/CirComPara2/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/egaffo/CirComPara2/master/src/utils/bash/get_unmapped_reads_from_bam.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick install",
        "parent_header": [
          "Circompara2"
        ],
        "type": "Text_excerpt",
        "value": "Execute the following commands to download and install (locally) in your system the scripts and tools required to run circompara2. If something goes wrong with the installation process try to manually install each software listed below.\n"
      },
      "source": "https://raw.githubusercontent.com/egaffo/CirComPara2/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Required software before installation",
        "parent_header": [
          "Circompara2",
          "Quick install"
        ],
        "type": "Text_excerpt",
        "value": "You'll need some libraries and software installed in your system before starting the circompara2 installation. In a fresh Ubuntu 20.04 (Focal) you need to install the following packages by running:\n\n```{bash}\nsudo apt install git python2.7 wget unzip pkg-config default-jre r-base-core libcurl4-openssl-dev libxml2-dev libssl-dev curl pigz python-is-python2 python-dev-is-python2\n```\n"
      },
      "source": "https://raw.githubusercontent.com/egaffo/CirComPara2/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Virtual environment",
        "parent_header": [
          "Circompara2",
          "Quick install",
          "Required software before installation"
        ],
        "type": "Text_excerpt",
        "value": "Because not all software integrated in circompara2 runs on Python3, circompara2 still uses python2.7. If you system default is Python3, then you might want to consider **installing** and **running** circompara2 under a virtual environment, such as one generated with `virtualenv`:\n\n```{bash}\nvirtualenv -p /usr/bin/python2.7 p2.7venv\n## activate the virtual environment\nsource p2.7venv/bin/activate\n```\n\nNow you can proceed with the installation (or lanch circompara2 if you have already installed it).\n"
      },
      "source": "https://raw.githubusercontent.com/egaffo/CirComPara2/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation commands",
        "parent_header": [
          "Circompara2",
          "Quick install"
        ],
        "type": "Text_excerpt",
        "value": "Download and extract [the latest release of CirComPara](http://github.com/egaffo/circompara2/releases/latest \"circompara package\"), or clone the GIT repository, enter circompara2 directory and run the automatic installer script:\n\n``` bash\ngit clone http://github.com/egaffo/circompara2\ncd circompara2\n./src/utils/bash/install_circompara\n## make a link to the circompara2 main script into the main directory\nln -s src/utils/bash/circompara circompara2\n```\n"
      },
      "source": "https://raw.githubusercontent.com/egaffo/CirComPara2/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Test your installation",
        "parent_header": [
          "Circompara2",
          "Quick install"
        ],
        "type": "Text_excerpt",
        "value": "``` bash\ncd test_circompara/analysis\n../../circompara2\n```\n\nIf you plan to use single-end reads, test with:\n\n``` bash\ncd test_circompara/analysis_se\n../../circompara2\n```\n"
      },
      "source": "https://raw.githubusercontent.com/egaffo/CirComPara2/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Add circompara2 to your environment",
        "parent_header": [
          "Circompara2",
          "Quick install",
          "Test your installation"
        ],
        "type": "Text_excerpt",
        "value": "Once completed the installation, if you do not want to type the whole path to the circompara2 executable each time, you can update your `PATH` environment variable. From the terminal type the following command (replace the `/path/to/circompara2/install/dir` string with circompara2's actual path)\n\n``` bash\nexport PATH=/path/to/circompara2/install/dir:$PATH\n```\n\nAnother way is to link circompara2's main script in your local `bin` directory\n\n``` bash\ncd /home/user/bin\nln -s /path/to/circompara2/install/dir/circompara2\n```\n"
      },
      "source": "https://raw.githubusercontent.com/egaffo/CirComPara2/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Alternative installation: the circompara2 Docker image",
        "parent_header": [
          "Circompara2"
        ],
        "type": "Text_excerpt",
        "value": "A [Docker image of CirComPara2](http://hub.docker.com/r/egaffo/circompara2/) is available from DockerHub in case you are struggling with the installation. The Docker image saves you from the installation burden, just pull the image:\n\n``` bash\ndocker pull egaffo/circompara2:v0.1.2.1\n```\n"
      },
      "source": "https://raw.githubusercontent.com/egaffo/CirComPara2/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Set your analysis project",
        "parent_header": [
          "How to use"
        ],
        "type": "Text_excerpt",
        "value": "This section shows how to set your project directory and run the analysis. To run an analysis usually you want to specify your data (the sequenced reads in FASTQ format) and a reference genome in FASTA format.\n"
      },
      "source": "https://raw.githubusercontent.com/egaffo/CirComPara2/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Compose META file",
        "parent_header": [
          "How to use",
          "Set your analysis project"
        ],
        "type": "Text_excerpt",
        "value": "You have to specify read files and sample names in a metadata table file. The file format is a comma separated text file with the following header line:\n\n    file,sample\n\nThen, each row corresponds to a read file. If you have paired-end sequenced samples write one line per file with the same sample name.\n\nAn example of the metadata table:\n\n| file                   | sample |\n|------------------------|--------|\n| /path/to/reads_S1_1.fq | S1     |\n| /path/to/reads_S1_2.fq | S1     |\n| /path/to/reads_S2_1.fq | S2     |\n| /path/to/reads_S2_1.fq | S2     |\n\nand metadata file content:\n\n    file,sample\n    /path/to/reads_S1_1.fq,S1\n    /path/to/reads_S1_2.fq,S1\n    /path/to/reads_S2_1.fq,S2\n    /path/to/reads_S2_1.fq,S2\n\nIn the meta file you can also specify the adapter sequences to preprocess the reads, just add an `adapter` column with the adpter file.\n\n| file                   | sample | adapter             |\n|------------------------|--------|---------------------|\n| /path/to/reads_S1_1.fq | S1     | /path/to/adapter.fa |\n| /path/to/reads_S1_2.fq | S1     | /path/to/adapter.fa |\n"
      },
      "source": "https://raw.githubusercontent.com/egaffo/CirComPara2/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Specify options in vars.py",
        "parent_header": [
          "How to use",
          "Set your analysis project"
        ],
        "type": "Text_excerpt",
        "value": "Although parameters can be set from command line (sorrounded by quotes), you can set them in the `vars.py` file, which must be placed into the directory where circompara2 is called.  \nBelow there is the full list of the parameters.\n"
      },
      "source": "https://raw.githubusercontent.com/egaffo/CirComPara2/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Parameters",
        "parent_header": [
          "How to use",
          "Set your analysis project"
        ],
        "type": "Text_excerpt",
        "value": "    META: The metadata table file where you specify the project samples, etc.\n        default: meta.csv\n\n    ANNOTATION: Gene annotation file (like Ensembl GTF/GFF)\n        default: \n\n    GENOME_FASTA: The FASTA file with the reference genome\n        default: \n\n    CIRCRNA_METHODS: Comma separated list of circRNA detection methods to use. Repeated values will be collapsed into unique values. Currently supported: ciri, dcc, circrna_finder, find_circ, circexplorer2_star, circexplorer2_bwa, circexplorer2_tophat, circexplorer2_segemehl, testrealign (a.k.a. Segemehl). Set an empty string to use all methods available (including deprecated methods). \n        default: ciri,find_circ,circexplorer2_star,circexplorer2_bwa,circexplorer2_segemehl,circexplorer2_tophat,dcc\n\n    CPUS: Set number of CPUs\n        default: 1\n\n    GENEPRED: The genome annotation in GenePred format\n        default: \n\n    GENOME_INDEX: The index of the reference genome for HISAT2\n        default: \n\n    SEGEMEHL_INDEX: The .idx index for segemehl\n        default: \n\n    BWA_INDEX: The index of the reference genome for BWA\n        default: \n\n    BOWTIE2_INDEX: The index of the reference genome for BOWTIE2\n        default: \n\n    STAR_INDEX: The directory path where to find Star genome index\n        default: \n\n    BOWTIE_INDEX: The index of the reference genome for BOWTIE when using CIRCexplorer2_tophat\n        default: \n\n    HISAT2_EXTRA_PARAMS: Extra parameters to add to the HISAT2 aligner fixed parameters '--dta --dta-cufflinks --rg-id <SAMPLE> --no-discordant --no-mixed --no-overlap'. For instance, '--rna-strandness FR' if stranded reads are used.\n        default: --seed 123\n\n    BWA_PARAMS: Extra parameters for BWA\n        default: -T 19\n\n    SEGEMEHL_PARAMS: SEGEMEHL extra parameters\n        default: -D 0\n\n    TOPHAT_PARAMS: Extra parameters to pass to TopHat\n        default: \n\n    STAR_PARAMS: Extra parameters to pass to STAR\n        default: --runRNGseed 123 --outSJfilterOverhangMin 15 15 15 15 --alignSJoverhangMin 15 --alignSJDBoverhangMin 15 --seedSearchStartLmax 30 --outFilterScoreMin 1 --outFilterMatchNmin 1 --outFilterMismatchNmax 2 --chimSegmentMin 15 --chimScoreMin 15 --chimScoreSeparation 10 --chimJunctionOverhangMin 15\n\n    BOWTIE2_PARAMS: Extra parameters to pass to Bowtie2 in addition to -p $CPUS --reorder --score-min=C,-15,0 -q\n        default: --seed 123\n\n    STRINGTIE_PARAMS: Stringtie extra parameters. F.i. '--rf' assumes a stranded library fr-firststrand, to be used if dUTPs stranded library were sequenced  \n        default:  \n\n    CIRI_EXTRA_PARAMS: CIRI additional parameters\n        default: \n\n    DCC_EXTRA_PARAMS: DCC additional parameters\n        default: -fg -M -F -Nr 1 1 -N\n\n    CE2_PARAMS: Parameters to pass to CIRCexplorer2 annotate\n        default:\n\n    TESTREALIGN_PARAMS: Segemehl/testrealign filtering parameters-q indicates the minimum median quality of backsplices ends (like the Haarz parameter)\n        default: -q median_1\n\n    FINDCIRC_EXTRA_PARAMS: Parameters for find_circ.py. Additional parameters: --best-qual INT is used to filter find_circ results according to best_qual_left and best_qual_right fields >= INT. Default: INT = 40. --filter-tags TAG is used to filter lines of find_circ.py output (sites.bed). Repeat it if multiple consecutive filter tags has to be applied.\n        default: --best-qual 40 --filter-tags UNAMBIGUOUS_BP --filter-tags ANCHOR_UNIQUE\n\n    CFINDER_EXTRA_PARAMS: Parameters for CircRNA_finder \n        default:\n\n    PREPROCESSOR: The read preprocessing tool to use. Currently, only \"trimmomatic\" is supported.Leave empty for no read preprocessing.\n        default: \n\n    PREPROCESSOR_PARAMS: Read preprocessor extra parameters. F.i. if Trimmomatic, an empty string defaults to MAXINFO:40:0.5 LEADING:20 TRAILING:20 SLIDINGWINDOW:4:30 MINLEN:50 AVGQUAL:30 \n        default: \n\n    LINEAR_EXPRESSION_METHODS: The method to be used for the linear expression estimates/transcriptome reconstruction. To run more methods use a comma separated list. However, only the first method in the list will be used in downstream processing. Currently supported methods: stringtie,cufflinks,htseq.  \n        default: stringtie  \n\n    TOGGLE_TRANSCRIPTOME_RECONSTRUCTION: Set True to enable transcriptome reconstruction. Default only quantifies genes and transcripts from the given annotation GTF file\n        default: False\n\n    READSTAT_METHODS: Comma separated list of methods to use for read statistics. Currently supported: fastqc\n        default: fastqc\n\n    MIN_METHODS: Number of methods that commmonly detect a circRNA to define the circRNA as reliable. If this value exceeds the number of methods specified, it will be set to the number of methods.\n        default: 2\n\n    MIN_READS: Number of reads to consider a circRNA as expressed\n        default: 2\n\n    BYPASS: Skip analysis of linear/circular transcripts. This will also skip the analysis of linear-to-circular expression correlation. The circular analysis includes the pre-filtering of linearly mapping reads. If you want to analyze reads already filtered for linear mappings you should set \"linear,linmap\". Choose among linear and or linmap, circular. NB: you still have to set the --rna-strandness parameter into the HISAT_EXTRA_PARAMS if you have stranded alignments/reads.\n        default:\n\n    LINMAPS: You can specify here the path to pre-computed files of linearly aligned reads. This will skip read pre-processing and linear alignments (use jointly to BYPASS linmap to get also circular-to-linear analysis). Mind that the alignments must be in BAM format and the .bai mapping file index file must be in the same directory. NB: you still have to set the --rna-strandness parameter into the HISAT_EXTRA_PARAMS if you have stranded alignments/reads. You need to set a Python dict-like string parameter with sampleName and the corresponding BAM file. E.g: {\"SAMPLE1\": \"sample1/hisat2.bam\", \"SAMPLE2\": \"sample2/hisat2.bam\"}. N.B: all samples in the meta.csv must have a BAM file listed in LINMAPS.\n        default: None\n\n    CIRC_MAPPING: By default (SE), linearly unmapped reads arealigned as single-end reads to search for circRNA backsplices. Set PE to align as paired-end reads by each circRNA method aligner. You can also specify each aligner's mode, or just which aligner has to use the PE mode,  with the syntax for Python dictionaries {'SE':['ALN1','ALN2'],'PE':['ALN3','ALN4','ALNn']} or simply {'PE':['ALN1','ALN2']} if you want just ALN1 and ALN2 tu align as PE. Supported aligners are BWA,SEGEMEHL,STAR and TOPHAT. BOWTIE2 is also supported but it is run only in single-end mode as it serves only Findcirc.\n        default: {'SE':['STAR','TOPHAT','BOWTIE2'],'PE':['BWA','SEGEMEHL']}\n\n    LIN_COUNTER: The method to estimate circRNA-host gene linear expression. Available are using the DCC [dcc], or the CirComPara [ccp] method.\n        default: ccp\n\n    FIX_READ_HEADER: Trim FASTQ headers to the read ids. Recommended when processing SRA datasets.\n        default: True\n\n    UNSTRANDED_CIRCS: Force unstranded circRNAs even if stranded library was used\n        default: False\n\n    SAM_SORT_MM: Value for samtools sort -m option\n        default: 768M\n\n    QRE_FIND: (Experimental) Set True to toggle analysis of QKI response elements sequences\n        default: False\n\n    CCP_COUNTS: Set the strategy to estimate circRNA expression.\n        default: UN\n"
      },
      "source": "https://raw.githubusercontent.com/egaffo/CirComPara2/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9733348015744778,
      "result": {
        "original_header": "Alternative workflow pipelines",
        "type": "Text_excerpt",
        "value": "With circompara2 you can chose to run either the circRNA, the linear genes (i.e. a traditional gene expression pipeline), or both branches of the pipeline (the default) by specifying with the `BYPASS` parameter which branch has to be skipped. Moreover, the `BYPASS` parameter can be set to `\"linear,linmap\"` if you already have the alignment files in BAM format and don't want to/can't/don't need to preprocess the raw reads. Then, circompara2 will extract the unaligned reads to search circRNAs from the BAM files listed in the LINMAPS parameter and use the BAM files to compute the CLPs.\n \n"
      },
      "source": "https://raw.githubusercontent.com/egaffo/CirComPara2/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/egaffo/circompara2/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "CirComPara2\nCopyright (C) 2012-2021  Compgen, University of Padova\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAuthor:\n\tEnrico Gaffo\nContact:\n\thttp://compgen.bio.unipd.it\n\tenrico.gaffo@gmail.com\n\n"
      },
      "source": "https://raw.githubusercontent.com/egaffo/CirComPara2/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "circompara2"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "egaffo"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 311309,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 133980,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 2505,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Awk",
        "size": 1070,
        "type": "Programming_language",
        "value": "Awk"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/egaffo/CirComPara2/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "egaffo",
          "type": "User"
        },
        "date_created": "2021-04-27T09:36:07Z",
        "date_published": "2021-04-28T11:24:25Z",
        "description": "Fix the wrong installation of pysam > v0.15.4 that caused CIRCexplorer2 failure to read compressed SAM files and following errors like\r\n```\r\nscons: *** [samples/rep1/processings/circRNAs/CIRCexplorer2_bwa/back_spliced_junction.bed] Error -11\r\n```\r\nSee also pysam issue <a href=\"https://github.com/pysam-developers/pysam/issues/1013\">#1013</a>\r\n",
        "html_url": "https://github.com/egaffo/circompara2/releases/tag/v0.1.2.1",
        "name": "v0.1.2.1",
        "release_id": 42131050,
        "tag": "v0.1.2.1",
        "tarball_url": "https://api.github.com/repos/egaffo/circompara2/tarball/v0.1.2.1",
        "type": "Release",
        "url": "https://api.github.com/repos/egaffo/circompara2/releases/42131050",
        "value": "https://api.github.com/repos/egaffo/circompara2/releases/42131050",
        "zipball_url": "https://api.github.com/repos/egaffo/circompara2/zipball/v0.1.2.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "egaffo",
          "type": "User"
        },
        "date_created": "2021-04-16T14:44:46Z",
        "date_published": "2021-04-16T15:00:06Z",
        "description": "- added a patch solving DCC's issue <a href=\"https://github.com/dieterich-lab/DCC/issues/69\">#69</a>\r\n- fixed errors when setting non-default DCC parameters\r\n- improved handling of empty files and errors generated by methods detecting no circRNAs\r\n- improved the README\r\n- removed some unused legacy code and dependency packages\r\n- added a utility script to filter/select FASTQ reads\r\n",
        "html_url": "https://github.com/egaffo/circompara2/releases/tag/v0.1.2",
        "name": "v0.1.2",
        "release_id": 41548523,
        "tag": "v0.1.2",
        "tarball_url": "https://api.github.com/repos/egaffo/circompara2/tarball/v0.1.2",
        "type": "Release",
        "url": "https://api.github.com/repos/egaffo/circompara2/releases/41548523",
        "value": "https://api.github.com/repos/egaffo/circompara2/releases/41548523",
        "zipball_url": "https://api.github.com/repos/egaffo/circompara2/zipball/v0.1.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "egaffo",
          "type": "User"
        },
        "date_created": "2021-03-28T09:58:50Z",
        "date_published": "2021-03-28T10:17:34Z",
        "description": "Fixed circ_ids in gene annotation and linear reads on backsplice files. In the previous version the  circ_ids in those files were composed with GFF coordinates (as in CirComPara1), which mismatched the BED coordinate format of the circ_ids in circRNA expression file.\r\nAdded notes and Alternative pipeline section to the README file.",
        "html_url": "https://github.com/egaffo/circompara2/releases/tag/v0.1.1",
        "name": "v0.1.1",
        "release_id": 40595189,
        "tag": "v0.1.1",
        "tarball_url": "https://api.github.com/repos/egaffo/circompara2/tarball/v0.1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/egaffo/circompara2/releases/40595189",
        "value": "https://api.github.com/repos/egaffo/circompara2/releases/40595189",
        "zipball_url": "https://api.github.com/repos/egaffo/circompara2/zipball/v0.1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "egaffo",
          "type": "User"
        },
        "date_created": "2021-02-04T13:49:23Z",
        "date_published": "2021-02-18T11:05:12Z",
        "html_url": "https://github.com/egaffo/circompara2/releases/tag/v0.1",
        "release_id": 38221787,
        "tag": "v0.1",
        "tarball_url": "https://api.github.com/repos/egaffo/circompara2/tarball/v0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/egaffo/circompara2/releases/38221787",
        "value": "https://api.github.com/repos/egaffo/circompara2/releases/38221787",
        "zipball_url": "https://api.github.com/repos/egaffo/circompara2/zipball/v0.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Software dependencies",
        "parent_header": [
          "Appendix"
        ],
        "type": "Text_excerpt",
        "value": "| Software      | Website                                                     |      Version |\n|---------------|-------------------------------------------------------------|-------------:|\n| Scons         | <http://www.scons.org>                                      |        3.1.2 |\n| Trimmomatic   | <http://www.usadellab.org/cms/?page=trimmomatic>            |         0.39 |\n| FASTQC        | <http://www.bioinformatics.babraham.ac.uk/projects/fastqc/> |       0.11.9 |\n| HISAT2        | <http://ccb.jhu.edu/software/hisat2/index.shtml>            |        2.1.0 |\n| STAR          | <http://github.com/alexdobin/STAR>                          |       2.6.1e |\n| BWA           | <http://bio-bwa.sourceforge.net/>                           | 0.7.15-r1140 |\n| Bowtie2       | <http://bowtie-bio.sourceforge.net/bowtie2/index.shtml>     |        2.4.1 |\n| Bowtie        | <http://bowtie-bio.sourceforge.net/index.shtml>             |        1.1.2 |\n| TopHat        | <http://ccb.jhu.edu/software/tophat/index.shtml>            |        2.1.0 |\n| Segemehl      | <http://www.bioinf.uni-leipzig.de/Software/segemehl/>       |        0.3.4 |\n| CIRI          | <http://ciri.sourceforge.io/>                               |        2.0.6 |\n| CIRCexplorer2 | <http://github.com/YangLab/CIRCexplorer>                    |        2.3.8 |\n| find_circ     | <http://github.com/marvin-jens/find_circ>                   |          1.2 |\n| BEDtools      | <http://bedtools.readthedocs.io>                            |       2.29.2 |\n| Samtools      | <http://www.htslib.org/>                                    |         1.10 |\n"
      },
      "source": "https://raw.githubusercontent.com/egaffo/CirComPara2/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Run the analysis",
        "parent_header": [
          "How to use"
        ],
        "type": "Text_excerpt",
        "value": "To trigger the analyses you simply have to call the `./circompara2` script in the analysis directory. Remember that if you used the `vars.py` option file, this has to be in the analysis directory.\n\n``` bash\ncd /path/to/circrna_analysis\n/path/to/circompara2/circompara2\n```\n"
      },
      "source": "https://raw.githubusercontent.com/egaffo/CirComPara2/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Additional options from the Scons engine:",
        "parent_header": [
          "How to use",
          "Run the analysis"
        ],
        "type": "Text_excerpt",
        "value": "-   *Basic execution*: run the analysis as a linear pipeline, i.e. no parallel task execution, and stop on errors\n\n``` bash\n/path/to/circompara2/dir/circompara2\n```\n\n-   *Show parameters*: to show the parameters set before actually run the analysis, use `-h`:\n\n``` bash\n/path/to/circompara2/dir/circompara2 -h\n```\n\n-   *Dryrun*: to see which commands will be executed without actually execute them, use the `-n` option. NB: many commands will be listed, so you should redirect to a file or pipe to a reader like `less`\n\n``` bash\n/path/to/circompara2/dir/circompara2 -n | less -SR\n```\n\n-   *Multitasks*: the `-j` option specifies how many **tasks** can be run in parallel. N.B: \"j x CPUS \\<= available cores\", i.e: the j option value times the CPUS parameter value should not be greater than the number of CPU cores available, unless you want to overload your machine.\n\n``` bash\n/path/to/circompara2/dir/circompara2 -j4\n```\n\n-   *Ignore errors*: keep executing the tasks even when some of them fails. Caveat: this can break downstream analyses\n\n``` bash\n/path/to/circompara2/dir/circompara2 -i\n```\n\n-   *Combine options*: to set multiple options you must sorround them with quotes\n\n``` bash\n/path/to/circompara2/dir/circompara2 \"-j4 -i\"\n```\n"
      },
      "source": "https://raw.githubusercontent.com/egaffo/CirComPara2/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Run from the Docker image",
        "parent_header": [
          "How to use"
        ],
        "type": "Text_excerpt",
        "value": "\n\nTo run circompara2 from the Docker container\n\n```{bash}\ndocker run -u `id -u` --rm -it -v $(pwd):/data egaffo/circompara2:v0.1.2.1\n\n```\n\nWhen using the Docker image, the paths in `meta.csv` and `vars.py` must be relative to the directory in the container where the volumes were mounted. (e.g. `/data` in the previous command example). You can mount different directories in different volumes by multiple `-v` instances. For instance, by issuing the following command\n\n```{bash}\ndocker run -u `id -u` --rm -it -v /path/to/reads:/reads -v /path/to/annotation:/annotation egaffo/circompara2:v0.1.2.1\n```\n\nthe `meta.csv` and `vars.py` files will be as follows:\n\nmeta.csv\n\n    file,sample,adapter  \n    /reads/readsA_1.fastq.gz,sample_A,/circompara2/tools/Trimmomatic-0.39/adapters/TruSeq3-PE-2.fa  \n    /reads/readsA_2.fastq.gz,sample_A,/circompara2/tools/Trimmomatic-0.39/adapters/TruSeq3-PE-2.fa  \n    /reads/readsB_1.fastq.gz,sample_B,/circompara2/tools/Trimmomatic-0.39/adapters/TruSeq3-PE-2.fa  \n    /reads/readsB_2.fastq.gz,sample_B,/circompara2/tools/Trimmomatic-0.39/adapters/TruSeq3-PE-2.fa  \n\nNote that circompara2 is installled in the `/circompara2` directory in the container, so you need that path to reach the installed tools' files (e.g. the Trimmomatic adapter files).\n\nvars.py\n\n``` python\nMETA            = \"meta.csv\"\nGENOME_FASTA    = '/annotation/CFLAR_HIPK3.fa'\nANNOTATION      = '/annotation/CFLAR_HIPK3.gtf' \n```\n"
      },
      "source": "https://raw.githubusercontent.com/egaffo/CirComPara2/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 02:23:46",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Compose META file",
        "parent_header": [
          "How to use",
          "Set your analysis project"
        ],
        "type": "Text_excerpt",
        "value": "You have to specify read files and sample names in a metadata table file. The file format is a comma separated text file with the following header line:\n\n    file,sample\n\nThen, each row corresponds to a read file. If you have paired-end sequenced samples write one line per file with the same sample name.\n\nAn example of the metadata table:\n\n| file                   | sample |\n|------------------------|--------|\n| /path/to/reads_S1_1.fq | S1     |\n| /path/to/reads_S1_2.fq | S1     |\n| /path/to/reads_S2_1.fq | S2     |\n| /path/to/reads_S2_1.fq | S2     |\n\nand metadata file content:\n\n    file,sample\n    /path/to/reads_S1_1.fq,S1\n    /path/to/reads_S1_2.fq,S1\n    /path/to/reads_S2_1.fq,S2\n    /path/to/reads_S2_1.fq,S2\n\nIn the meta file you can also specify the adapter sequences to preprocess the reads, just add an `adapter` column with the adpter file.\n\n| file                   | sample | adapter             |\n|------------------------|--------|---------------------|\n| /path/to/reads_S1_1.fq | S1     | /path/to/adapter.fa |\n| /path/to/reads_S1_2.fq | S1     | /path/to/adapter.fa |\n"
      },
      "source": "https://raw.githubusercontent.com/egaffo/CirComPara2/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Specify options in vars.py",
        "parent_header": [
          "How to use",
          "Set your analysis project"
        ],
        "type": "Text_excerpt",
        "value": "Although parameters can be set from command line (sorrounded by quotes), you can set them in the `vars.py` file, which must be placed into the directory where circompara2 is called.  \nBelow there is the full list of the parameters.\n"
      },
      "source": "https://raw.githubusercontent.com/egaffo/CirComPara2/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Parameters",
        "parent_header": [
          "How to use",
          "Set your analysis project"
        ],
        "type": "Text_excerpt",
        "value": "    META: The metadata table file where you specify the project samples, etc.\n        default: meta.csv\n\n    ANNOTATION: Gene annotation file (like Ensembl GTF/GFF)\n        default: \n\n    GENOME_FASTA: The FASTA file with the reference genome\n        default: \n\n    CIRCRNA_METHODS: Comma separated list of circRNA detection methods to use. Repeated values will be collapsed into unique values. Currently supported: ciri, dcc, circrna_finder, find_circ, circexplorer2_star, circexplorer2_bwa, circexplorer2_tophat, circexplorer2_segemehl, testrealign (a.k.a. Segemehl). Set an empty string to use all methods available (including deprecated methods). \n        default: ciri,find_circ,circexplorer2_star,circexplorer2_bwa,circexplorer2_segemehl,circexplorer2_tophat,dcc\n\n    CPUS: Set number of CPUs\n        default: 1\n\n    GENEPRED: The genome annotation in GenePred format\n        default: \n\n    GENOME_INDEX: The index of the reference genome for HISAT2\n        default: \n\n    SEGEMEHL_INDEX: The .idx index for segemehl\n        default: \n\n    BWA_INDEX: The index of the reference genome for BWA\n        default: \n\n    BOWTIE2_INDEX: The index of the reference genome for BOWTIE2\n        default: \n\n    STAR_INDEX: The directory path where to find Star genome index\n        default: \n\n    BOWTIE_INDEX: The index of the reference genome for BOWTIE when using CIRCexplorer2_tophat\n        default: \n\n    HISAT2_EXTRA_PARAMS: Extra parameters to add to the HISAT2 aligner fixed parameters '--dta --dta-cufflinks --rg-id <SAMPLE> --no-discordant --no-mixed --no-overlap'. For instance, '--rna-strandness FR' if stranded reads are used.\n        default: --seed 123\n\n    BWA_PARAMS: Extra parameters for BWA\n        default: -T 19\n\n    SEGEMEHL_PARAMS: SEGEMEHL extra parameters\n        default: -D 0\n\n    TOPHAT_PARAMS: Extra parameters to pass to TopHat\n        default: \n\n    STAR_PARAMS: Extra parameters to pass to STAR\n        default: --runRNGseed 123 --outSJfilterOverhangMin 15 15 15 15 --alignSJoverhangMin 15 --alignSJDBoverhangMin 15 --seedSearchStartLmax 30 --outFilterScoreMin 1 --outFilterMatchNmin 1 --outFilterMismatchNmax 2 --chimSegmentMin 15 --chimScoreMin 15 --chimScoreSeparation 10 --chimJunctionOverhangMin 15\n\n    BOWTIE2_PARAMS: Extra parameters to pass to Bowtie2 in addition to -p $CPUS --reorder --score-min=C,-15,0 -q\n        default: --seed 123\n\n    STRINGTIE_PARAMS: Stringtie extra parameters. F.i. '--rf' assumes a stranded library fr-firststrand, to be used if dUTPs stranded library were sequenced  \n        default:  \n\n    CIRI_EXTRA_PARAMS: CIRI additional parameters\n        default: \n\n    DCC_EXTRA_PARAMS: DCC additional parameters\n        default: -fg -M -F -Nr 1 1 -N\n\n    CE2_PARAMS: Parameters to pass to CIRCexplorer2 annotate\n        default:\n\n    TESTREALIGN_PARAMS: Segemehl/testrealign filtering parameters-q indicates the minimum median quality of backsplices ends (like the Haarz parameter)\n        default: -q median_1\n\n    FINDCIRC_EXTRA_PARAMS: Parameters for find_circ.py. Additional parameters: --best-qual INT is used to filter find_circ results according to best_qual_left and best_qual_right fields >= INT. Default: INT = 40. --filter-tags TAG is used to filter lines of find_circ.py output (sites.bed). Repeat it if multiple consecutive filter tags has to be applied.\n        default: --best-qual 40 --filter-tags UNAMBIGUOUS_BP --filter-tags ANCHOR_UNIQUE\n\n    CFINDER_EXTRA_PARAMS: Parameters for CircRNA_finder \n        default:\n\n    PREPROCESSOR: The read preprocessing tool to use. Currently, only \"trimmomatic\" is supported.Leave empty for no read preprocessing.\n        default: \n\n    PREPROCESSOR_PARAMS: Read preprocessor extra parameters. F.i. if Trimmomatic, an empty string defaults to MAXINFO:40:0.5 LEADING:20 TRAILING:20 SLIDINGWINDOW:4:30 MINLEN:50 AVGQUAL:30 \n        default: \n\n    LINEAR_EXPRESSION_METHODS: The method to be used for the linear expression estimates/transcriptome reconstruction. To run more methods use a comma separated list. However, only the first method in the list will be used in downstream processing. Currently supported methods: stringtie,cufflinks,htseq.  \n        default: stringtie  \n\n    TOGGLE_TRANSCRIPTOME_RECONSTRUCTION: Set True to enable transcriptome reconstruction. Default only quantifies genes and transcripts from the given annotation GTF file\n        default: False\n\n    READSTAT_METHODS: Comma separated list of methods to use for read statistics. Currently supported: fastqc\n        default: fastqc\n\n    MIN_METHODS: Number of methods that commmonly detect a circRNA to define the circRNA as reliable. If this value exceeds the number of methods specified, it will be set to the number of methods.\n        default: 2\n\n    MIN_READS: Number of reads to consider a circRNA as expressed\n        default: 2\n\n    BYPASS: Skip analysis of linear/circular transcripts. This will also skip the analysis of linear-to-circular expression correlation. The circular analysis includes the pre-filtering of linearly mapping reads. If you want to analyze reads already filtered for linear mappings you should set \"linear,linmap\". Choose among linear and or linmap, circular. NB: you still have to set the --rna-strandness parameter into the HISAT_EXTRA_PARAMS if you have stranded alignments/reads.\n        default:\n\n    LINMAPS: You can specify here the path to pre-computed files of linearly aligned reads. This will skip read pre-processing and linear alignments (use jointly to BYPASS linmap to get also circular-to-linear analysis). Mind that the alignments must be in BAM format and the .bai mapping file index file must be in the same directory. NB: you still have to set the --rna-strandness parameter into the HISAT_EXTRA_PARAMS if you have stranded alignments/reads. You need to set a Python dict-like string parameter with sampleName and the corresponding BAM file. E.g: {\"SAMPLE1\": \"sample1/hisat2.bam\", \"SAMPLE2\": \"sample2/hisat2.bam\"}. N.B: all samples in the meta.csv must have a BAM file listed in LINMAPS.\n        default: None\n\n    CIRC_MAPPING: By default (SE), linearly unmapped reads arealigned as single-end reads to search for circRNA backsplices. Set PE to align as paired-end reads by each circRNA method aligner. You can also specify each aligner's mode, or just which aligner has to use the PE mode,  with the syntax for Python dictionaries {'SE':['ALN1','ALN2'],'PE':['ALN3','ALN4','ALNn']} or simply {'PE':['ALN1','ALN2']} if you want just ALN1 and ALN2 tu align as PE. Supported aligners are BWA,SEGEMEHL,STAR and TOPHAT. BOWTIE2 is also supported but it is run only in single-end mode as it serves only Findcirc.\n        default: {'SE':['STAR','TOPHAT','BOWTIE2'],'PE':['BWA','SEGEMEHL']}\n\n    LIN_COUNTER: The method to estimate circRNA-host gene linear expression. Available are using the DCC [dcc], or the CirComPara [ccp] method.\n        default: ccp\n\n    FIX_READ_HEADER: Trim FASTQ headers to the read ids. Recommended when processing SRA datasets.\n        default: True\n\n    UNSTRANDED_CIRCS: Force unstranded circRNAs even if stranded library was used\n        default: False\n\n    SAM_SORT_MM: Value for samtools sort -m option\n        default: 768M\n\n    QRE_FIND: (Experimental) Set True to toggle analysis of QKI response elements sequences\n        default: False\n\n    CCP_COUNTS: Set the strategy to estimate circRNA expression.\n        default: UN\n"
      },
      "source": "https://raw.githubusercontent.com/egaffo/CirComPara2/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Additional options from the Scons engine:",
        "parent_header": [
          "How to use",
          "Run the analysis"
        ],
        "type": "Text_excerpt",
        "value": "-   *Basic execution*: run the analysis as a linear pipeline, i.e. no parallel task execution, and stop on errors\n\n``` bash\n/path/to/circompara2/dir/circompara2\n```\n\n-   *Show parameters*: to show the parameters set before actually run the analysis, use `-h`:\n\n``` bash\n/path/to/circompara2/dir/circompara2 -h\n```\n\n-   *Dryrun*: to see which commands will be executed without actually execute them, use the `-n` option. NB: many commands will be listed, so you should redirect to a file or pipe to a reader like `less`\n\n``` bash\n/path/to/circompara2/dir/circompara2 -n | less -SR\n```\n\n-   *Multitasks*: the `-j` option specifies how many **tasks** can be run in parallel. N.B: \"j x CPUS \\<= available cores\", i.e: the j option value times the CPUS parameter value should not be greater than the number of CPU cores available, unless you want to overload your machine.\n\n``` bash\n/path/to/circompara2/dir/circompara2 -j4\n```\n\n-   *Ignore errors*: keep executing the tasks even when some of them fails. Caveat: this can break downstream analyses\n\n``` bash\n/path/to/circompara2/dir/circompara2 -i\n```\n\n-   *Combine options*: to set multiple options you must sorround them with quotes\n\n``` bash\n/path/to/circompara2/dir/circompara2 \"-j4 -i\"\n```\n"
      },
      "source": "https://raw.githubusercontent.com/egaffo/CirComPara2/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Output files",
        "parent_header": [
          "How to use"
        ],
        "type": "Text_excerpt",
        "value": "-   Statistics on the read filtering steps and alignments can be found into `read_statistics` directory. A report is saved in the `processing_and_mapped_read_counts.csv` file.  \n-   Results regarding circRNAs (expression matrices, etc.) will be saved into the `circular_expression/circrna_analyze` directory: the reliable circRNA expression matrix is in the `reliable_circexp.csv` file; gene annotation associated to the circRNAs is stored in the files under the `circular_expression/circrna_collection/circrna_gene_annotation` directory.  \n-   CircRNA parent gene linear expression is saved in the `circular_expression/circrna_analyze/ccp_bks_linexp.csv` file.  \n-   Gene expression values for each gene and sample will be saved in the `linear_expression/linear_quantexp/geneexp/` directory: `gene_expression_FPKM_table.csv` file reports FPKMs and `gene_expression_analysis.html` file reports summary analysis.  \n-   Linear transcript sequences are saved as a multi-FASTA file into the `linear_expression/transcript_sequences` directory.\n"
      },
      "source": "https://raw.githubusercontent.com/egaffo/CirComPara2/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Make genome indexes for multiple instances of circompara2: the `make_indexes` utility",
        "parent_header": [
          "Advanced features"
        ],
        "type": "Text_excerpt",
        "value": "Building the genome indexes for each mapper can take lot of computing time. However, the same indexes can be used in different circompara2 runs, saving time and disk space. In circompara2's package the `src/utils/bash/make_indexes` script can be used to automatically build the genome index (and gene annotation formats) for each of the supported read aligner, and save them into a directory. In addition, it gives the parameter values to be set to use the index files to be shared.  \nExample commands using the test data follows:\n\n``` bash\ncd test_circompara\nmkdir genome_indexes\ncd genome_indexes\n../../src/utils/bash/make_indexes \"-j2 GENOME=../annotation/CFLAR_HIPK3.fa ANNOTATION=../annotation/CFLAR_HIPK3.gtf\" \n```\n\nThe above commands will eventually generate a `annotation_vars.py` file that can be appended to the `vars.py` file of your project so that circompara2 will skip the building of genome indexes. Note that `make_indexes` can use the same options provided by Scons showed above: `-j 2` option will allow the script to build two indexes in parallel.\n\n``` bash\ncd test_circompara\n## clear circompara2 files in the test directory\ncd analysis\n../../circompara2 -c\ncd ..\n## overwrite the vars.py file omitting the genome and annotation parameters\ngrep -v \"GENOME\\|ANNOTATION\" vars.py > analysis/vars.py\n## append the parameters for the genome, the annotation and the genome indexes\n## generated by the make_indexes utility\ncat genome_indexes/annotation_vars.py >> analysis/vars.py\n## run the test analysis\ncd analysis\n../../circompara2\n```\n"
      },
      "source": "https://raw.githubusercontent.com/egaffo/CirComPara2/master/README.md",
      "technique": "header_analysis"
    }
  ]
}