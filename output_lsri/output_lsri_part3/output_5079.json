{
  "application_domain": [
    {
      "confidence": 44.94,
      "result": {
        "type": "String",
        "value": "Natural Language Processing"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/MindAI/MiPepid"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-01-29T02:11:57Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-23T09:18:31Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9252963407684266,
      "result": {
        "original_header": "MiPepid",
        "type": "Text_excerpt",
        "value": "`MiPepid` is a software specifically for predicting the coding capabilities of sORFs. \nThe corresponding paper \"MiPepid: *Mi*cro*pep*tide *id*entification tool using machine learning\"[*] is now submitted to BMC Bioinformatics. \n"
      },
      "source": "https://raw.githubusercontent.com/MindAI/MiPepid/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9093184227646977,
      "result": {
        "original_header": "What does MiPepid do?",
        "type": "Text_excerpt",
        "value": "Given a fasta file containing DNA fasta sequences, for each sequence, `MiPepid` will find all the sORFs (length <= 303 bp) present in all the 3 translation frames of the sequence, and for each sORF it will return the predicted class label (coding or noncoding) as well as the probability of being in that class. All the results will be written in an output .csv file.   \n"
      },
      "source": "https://raw.githubusercontent.com/MindAI/MiPepid/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8017158380769046,
      "result": {
        "original_header": "Regarding the datasets",
        "type": "Text_excerpt",
        "value": "`datasets.tar.gz` contains all major datasets used in the paper.  \n"
      },
      "source": "https://raw.githubusercontent.com/MindAI/MiPepid/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/MindAI/MiPepid/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/MindAI/MiPepid/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MindAI/MiPepid"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MiPepid"
      },
      "source": "https://raw.githubusercontent.com/MindAI/MiPepid/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/MindAI/MiPepid/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MiPepid"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "MindAI"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 8313,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MindAI/MiPepid/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies:",
        "parent_header": [
          "MiPepid"
        ],
        "type": "Text_excerpt",
        "value": "Language dependency:\n**`Python 3`** (Please do *not* use Python 2 to run the code.)\n\nLibrary dependency:\n* `Numpy`\n* `pandas`\n* `Bio` (the Biopython package: https://biopython.org)\n\n"
      },
      "source": "https://raw.githubusercontent.com/MindAI/MiPepid/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How to run a demo",
        "parent_header": [
          "MiPepid"
        ],
        "type": "Text_excerpt",
        "value": "There is a sample DNA sequence file `sample_seqs.fasta` under the directory `./demo_files/`. You can try to run `MiPepid` on this file:\n\n```sh\ncd MiPepid\npython3 ./src/mipepid.py ./demo_files/sample_seqs.fasta ./demo_files/MiPepid_results_on_sample_seqs.csv\n```\n\nThis will output a file `MiPepid_results_on_sample_seqs.csv` under the same directory (`./demo_files/`).\n"
      },
      "source": "https://raw.githubusercontent.com/MindAI/MiPepid/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "installation",
    "citation",
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 18:42:40",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 13
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How to use:",
        "parent_header": [
          "MiPepid"
        ],
        "type": "Text_excerpt",
        "value": "```sh\ncd MiPepid\npython3 ./src/mipepid.py input_fasta_file_path output_fasta_file_path\n```\n\nNote:\n* The `input_fasta_file_path` is the path of your input fasta file. \n  * Please make sure it is a fasta file with only DNA sequences (not RNA sequences or protein sequences). \n  * Please make sure that each record in your fasta file has a *unique* ID, as the IDs will be used to name the found ORFs. \n  * Please also make sure that your sequences *only* contain the four letters: `A`, `T`, `C`, `G`. Other DNA letters, such as `N`, `R`, `Y`, etc. are currently *not*  supported.\n* The `output_fasta_file_path` is the path of the output `.csv` file. \n  * It is *optional*. \n  * If you choose to specify it, it is suggested that you name this output file with `.csv` extension. \n  * If you do not specify the output file, a file with name `Mipepid_results.csv` will be automatically created under the same `./MiPepid` directory as the output file. \n\nThe output `.csv` file contains the following columns:\n* `sORF_ID`: the ID of an sORF. \n* `sORF_seq`: the DNA sequence of the sORF (containing the stop codon with the start codon as `ATG`).\n* `transcript_DNA_sequence_ID`: the ID of the original DNA sequence in your input fasta file where this sORF is extracted.\n* `start_at`: the 1-based starting position of this sORF on the original DNA sequence. \n* `end_at`: the 1-based ending position of this sORF on the original DNA sequence. \n* `classification`: the predicted class of the sORF, either `coding` or `noncoding`. \n* `probability`: the probability that this sORF is in the assigned class.\n"
      },
      "source": "https://raw.githubusercontent.com/MindAI/MiPepid/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "How to run a demo",
        "parent_header": [
          "MiPepid"
        ],
        "type": "Text_excerpt",
        "value": "There is a sample DNA sequence file `sample_seqs.fasta` under the directory `./demo_files/`. You can try to run `MiPepid` on this file:\n\n```sh\ncd MiPepid\npython3 ./src/mipepid.py ./demo_files/sample_seqs.fasta ./demo_files/MiPepid_results_on_sample_seqs.csv\n```\n\nThis will output a file `MiPepid_results_on_sample_seqs.csv` under the same directory (`./demo_files/`).\n"
      },
      "source": "https://raw.githubusercontent.com/MindAI/MiPepid/master/README.md",
      "technique": "header_analysis"
    }
  ]
}