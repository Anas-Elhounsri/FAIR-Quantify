{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Shamir-Lab/3CAC"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contacts",
        "type": "Text_excerpt",
        "value": "In case of any questions or suggestions please feel free to contact lianrong.pu@gmail.com\n"
      },
      "source": "https://raw.githubusercontent.com/Shamir-Lab/3CAC/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-11-04T08:57:51Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-06-03T05:02:14Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9801143069665955,
      "result": {
        "original_header": "3CAC",
        "type": "Text_excerpt",
        "value": "3CAC is a three-class classifier designed to classify contigs in mixed metagenome assemblies as phages, plasmids, chromosomes, or uncertain. \n \n"
      },
      "source": "https://raw.githubusercontent.com/Shamir-Lab/3CAC/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Shamir-Lab/3CAC/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Shamir-Lab/3CAC/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Shamir-Lab/3CAC"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "3CAC"
      },
      "source": "https://raw.githubusercontent.com/Shamir-Lab/3CAC/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Shamir-Lab/3CAC/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021 Ron Shamir's Lab\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/Shamir-Lab/3CAC/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "3CAC"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "Shamir-Lab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Java",
        "size": 29163,
        "type": "Programming_language",
        "value": "Java"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Shamir-Lab/3CAC/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "type": "Text_excerpt",
        "value": "3CAC generates its initial classification by existing classifiers: viralVerify, PPR-Meta, PlasClass, and deepVirFinder. Thus, prior to running 3CAC, installation of these tools are required. Note that, user can install either viralVerify or PPR-Meta as prefered. 3CAC doesn't require to install both of them. Installation of PlasClass and DeepVirFinder are required.\n\n* viralVerify (https://github.com/ablab/viralVerify)\n* PPR-Meta (https://github.com/zhenchengfang/PPR-Meta)\n* PlasClass (https://github.com/Shamir-Lab/PlasClass)\n* DeepVirFinder (https://github.com/jessieren/DeepVirFinder)\n\nTo run 3CAC, please download the `3CAC` folder. 3CAC is written in Java and requires Java Runtime Environment. \n"
      },
      "source": "https://raw.githubusercontent.com/Shamir-Lab/3CAC/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Running PPR-Meta, viralVerify, PlasClass and DeepVirFinder",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "(1) Run either `viralVerify` or `PPR-Meta` on the contig file to classify each of the input contigs as phage, plasmid, chromosome, or uncertain.\n\n(2) Generate files `phageContigs.fasta` and `plasmidContigs.fasta` containing contigs classified as phages and plasmids by step (1).\n   ```sh\n   java PhageAndPlasmidContigs --output output_directory --contig contig_file.fasta --PPRMeta(or --viralVerify) output_file_of_PPRMeta_or_viralVerify.csv\n   ```   \n\n(3) Run `PlasClass` on `plasmidContigs.fasta` and run `DeepVirFinder` on `phageContigs.fasta`.\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/Shamir-Lab/3CAC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3. Running 3CAC",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": " \n**Generate classification result of 3CAC.** \n```sh\njava Classify3CAC --assembler Flye/SPAdes --output output_directory --graph assembly_graph_file.gfa --path scaffolds.path/assembly_info.txt --PPRMeta(or --viralVerify) output_file_of_PPRMeta_or_viralVerify.csv --PlasClass output_file_of_PlasClass.probs.out --deepVirFinder output_file_of_deepVirFinder.txt\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Shamir-Lab/3CAC/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "installation",
    "citation",
    "acknowledgement",
    "download",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 02:28:04",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Input",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "3CAC requires the following input files:\n\n**(1) Contig file in \"fasta\" format:** a set of contigs to be classified. \n\n**(2) Assembly grah file in \"gfa\" format:** the assembly graph generated by metaSPAdes or metaFlye when assembling reads to generate the input contigs. \n\n**(3) A path file has path information for each contig,** such as `scaffolds.path` in metaSPAdes assembly and `assembly_info.txt` in metaFlye assembly.\n\nFor contigs assembled from short reads by metaSPAdes, files `scaffolds.fasta`, `assembly_graph_with_scaffolds.gfa`, and `scaffolds.path` can be used as input.\nfor contigs assembled from long reads by metaFlye, files `assembly.fasta`, `assembly_graph.gfa`, `assembly_info.txt` can be used as input.\n"
      },
      "source": "https://raw.githubusercontent.com/Shamir-Lab/3CAC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4. Example",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "A small test dataset could be found under the `test` folder.\n\n**(1) To generate classification result of 3CAC based on viralVerify solution.**\n ```sh\n   java Classify3CAC --assembler Flye --output ./test/  --graph ./test/assembly_graph.gfa --path ./test/assembly_info.txt --viralVerify ./test/assembly_viralVerify.csv --PlasClass ./test/viralVerify_plasmidContigs_plasClass.fasta.probs.out --deepVirFinder ./test/viralVerify_phageContigs_deepVirFinder.txt\n   ```\n**(2) To generate classification result of 3CAC based on PPR-Meta solution.**\n ```sh\n   java Classify3CAC --assembler Flye --output ./test/  --graph ./test/assembly_graph.gfa --path ./test/assembly_info.txt --PPRMeta ./test/assembly_PPRMeta.csv --PlasClass ./test/PPRMeta_plasmidContigs_plasClass.fasta.probs.out --deepVirFinder ./test/PPRMeta_phageContigs_deepVirFinder.txt\n   ```\n\n"
      },
      "source": "https://raw.githubusercontent.com/Shamir-Lab/3CAC/main/README.md",
      "technique": "header_analysis"
    }
  ]
}