{
  "application_domain": [
    {
      "confidence": 45.66,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "MDPET: A Unified Motion Correction and Denoising Adversarial Network for Low-dose Gated PET"
        ],
        "type": "Text_excerpt",
        "value": "If you use this code for your research or project, please cite:\n\n    @article{zhou2021mdpet,\n      title={MDPET: A Unified Motion Correction and Denoising Adversarial Network for Low-dose Gated PET},\n      author={Zhou, Bo and Tsai, Yu-Jung and Chen, Xiongchao and Duncan, James S and Liu, Chi},\n      journal={IEEE Transactions on Medical Imaging},\n      year={2021},\n      publisher={IEEE}\n    }\n\n"
      },
      "source": "https://raw.githubusercontent.com/bbbbbbzhou/MDPET/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Zhou, Bo and Tsai, Yu-Jung and Chen, Xiongchao and Duncan, James S and Liu, Chi",
        "format": "bibtex",
        "title": "MDPET: A Unified Motion Correction and Denoising Adversarial Network for Low-dose Gated PET",
        "type": "Text_excerpt",
        "value": "@article{zhou2021mdpet,\n    publisher = {IEEE},\n    year = {2021},\n    journal = {IEEE Transactions on Medical Imaging},\n    author = {Zhou, Bo and Tsai, Yu-Jung and Chen, Xiongchao and Duncan, James S and Liu, Chi},\n    title = {MDPET: A Unified Motion Correction and Denoising Adversarial Network for Low-dose Gated PET},\n}"
      },
      "source": "https://raw.githubusercontent.com/bbbbbbzhou/MDPET/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/bbbbbbzhou/MDPET"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact",
        "parent_header": [
          "MDPET: A Unified Motion Correction and Denoising Adversarial Network for Low-dose Gated PET"
        ],
        "type": "Text_excerpt",
        "value": "If you have any question, please file an issue or contact the author:\n```\nBo Zhou: bo.zhou@yale.edu\n```"
      },
      "source": "https://raw.githubusercontent.com/bbbbbbzhou/MDPET/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-03-02T18:42:09Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-03-28T03:40:17Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MDPET: A Unified Motion Correction and Denoising Adversarial Network for Low-dose Gated PET (IEEE Transactions on Medical Imaging, 2021)"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9954652853095615,
      "result": {
        "original_header": "MDPET: A Unified Motion Correction and Denoising Adversarial Network for Low-dose Gated PET",
        "type": "Text_excerpt",
        "value": "This repository contains the PyTorch implementation of MDPET.\n \n"
      },
      "source": "https://raw.githubusercontent.com/bbbbbbzhou/MDPET/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8819431961715686,
      "result": {
        "original_header": "Test Data",
        "type": "Text_excerpt",
        "value": "We provide one test data which includes the input to MDPET and output of the MDPET.  \nPlease see the following link to request the test data.  \n[[Drive Link](https://drive.google.com/drive/folders/1w8AlHien6GeRGJ1xpVxyobFZfUuOWv2z?usp=sharing)] \n"
      },
      "source": "https://raw.githubusercontent.com/bbbbbbzhou/MDPET/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/bbbbbbzhou/MDPET/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/bbbbbbzhou/MDPET/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bbbbbbzhou/MDPET"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MDPET: A Unified Motion Correction and Denoising Adversarial Network for Low-dose Gated PET"
      },
      "source": "https://raw.githubusercontent.com/bbbbbbzhou/MDPET/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bbbbbbzhou/MDPET/main/scripts/train_svrhddn_dp_gan_mse.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bbbbbbzhou/MDPET/main/scripts/test_svrhddn_dp_gan_mse.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dataset Setup",
        "parent_header": [
          "MDPET: A Unified Motion Correction and Denoising Adversarial Network for Low-dose Gated PET"
        ],
        "type": "Text_excerpt",
        "value": "    ./preprocess/              # data setup \n    \u2502\n    \u251c\u2500\u2500 train                  # training data -- each .h5 contains 6 x high-dose gated data and 6 x low-dose gated data\n    \u2502   \u251c\u2500\u2500 case_1.h5     \n    \u2502   \u251c\u2500\u2500 case_2.h5       \n    \u2502   \u251c\u2500\u2500 case_3.h5 \n    \u2502   \u251c\u2500\u2500 ...    \n    \u2502   \u2514\u2500\u2500 case_N.h5\n    \u2502\n    \u251c\u2500\u2500 test                   # test data -- each .h5 contains 6 x high-dose gated data and 6 x low-dose gated data\n    \u2502   \u251c\u2500\u2500 case_N+1.h5     \n    \u2502   \u251c\u2500\u2500 case_N+2.h5       \n    \u2502   \u251c\u2500\u2500 case_N+3.h5 \n    \u2502   \u251c\u2500\u2500 ...    \n    \u2502   \u2514\u2500\u2500 case_M.h5         \n    \u2514\u2500\u2500 \nEach .h5 file should contain 6 gated image at high-dose level and 6 gated image at low-dose level.  \nThe variable name in the .h5 should be 'G1LD' / 'G2LD' / 'G3LD' / 'G4LD' / 'G5LD' / 'G6LD' for low-dose gated images, and 'G1HD' / 'G2HD' / 'G3HD' / 'G4HD' / 'G5HD' / 'G6HD' for high-dose gated images.\n\n"
      },
      "source": "https://raw.githubusercontent.com/bbbbbbzhou/MDPET/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/bbbbbbzhou/MDPET/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021 Bo Zhou\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/bbbbbbzhou/MDPET/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MDPET"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "bbbbbbzhou"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 188396,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "MATLAB",
        "size": 59804,
        "type": "Programming_language",
        "value": "MATLAB"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 745,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bbbbbbzhou/MDPET/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Environment and Dependencies",
        "parent_header": [
          "MDPET: A Unified Motion Correction and Denoising Adversarial Network for Low-dose Gated PET"
        ],
        "type": "Text_excerpt",
        "value": "Requirements:\n* Python 3.7\n* Pytorch 1.4.0\n* scipy\n* scikit-image\n* itertools\n* tqdm\n* csv\n* json\n\nOur code has been tested with Python 3.7, Pytorch 1.4.0, CUDA 10.0 on Ubuntu 18.04.\n\n"
      },
      "source": "https://raw.githubusercontent.com/bbbbbbzhou/MDPET/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "To Run Our Code",
        "parent_header": [
          "MDPET: A Unified Motion Correction and Denoising Adversarial Network for Low-dose Gated PET"
        ],
        "type": "Text_excerpt",
        "value": "- Train the model\n```bash\npython train.py \\\n--experiment_name 'experiment_train_svrhddn_dp_gan_mse' \\\n--model_type 'model_svrhd_dp_gan' \\\n--data_root './preprocess/' \\\n--net_G1 'svr_dp' \\\n--net_G2 'unet' \\\n--net_D 'patchGAN' \\\n--weight_dn_recon 100 \\\n--weight_reg 1000 \\\n--image_loss 'mse' \\\n--batch_size 1 \\\n--zoomsize_train 106 106 106 \\\n--cropsize_train 96 96 96 \\\n--rotate_train 30 \\\n--AUG \\\n--eval_epochs 20 \\\n--save_epochs 20 \\\n--snapshot_epochs 20 \\\n--lr 1e-4\n```\nwhere \\\n`--experiment_name` provides the experiment name for the current run, and save all the corresponding results under the experiment_name's folder. \\\n`--data_root` provides the data folder directory (with structure and files illustrated above). \\\n`--net_G1` specifies the motion estimation network type. \\\n`--net_G2` specifies the denoising network type. \\\n`--net_D` specifies the discriminator network type. \\\n`--AUG` enables the data augumentation during the training. \\\nOther hyperparameters can be adjusted in the code as well.\n\n- Test the model\n```bash\npython test.py \\\n--resume './outputs/experiment_train_svrhddn_dp_gan_mse/checkpoints/model_xxx.pt' \\\n--experiment_name 'experiment_test_svrhddn_dp_gan_mse' \\\n--model_type 'model_svrhd_dp_gan' \\\n--data_root './preprocess/' \\\n--net_G1 'svr_dp' \\\n--net_G2 'unet' \\\n--net_D 'patchGAN'\n```\nSample training/test scripts are provided under './scripts/' and can be directly executed.\n\n"
      },
      "source": "https://raw.githubusercontent.com/bbbbbbzhou/MDPET/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 06:35:09",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 14
      },
      "technique": "GitHub_API"
    }
  ]
}