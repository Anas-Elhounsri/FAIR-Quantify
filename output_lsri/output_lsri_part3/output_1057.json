{
  "application_domain": [
    {
      "confidence": 6.56,
      "result": {
        "type": "String",
        "value": "Audio"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/medema-group/BiG-MAP"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-03-03T14:20:44Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-06-13T06:50:55Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9977790398989832,
      "result": {
        "original_header": "+NAME: BiG-MAP.fig_1",
        "type": "Text_excerpt",
        "value": "This is the Github repository for the Biosynthetic Gene cluster\nMeta'omics abundance Profiler (BiG-MAP). Metabolic Gene Clusters \n(MGCs) are responsible of the synthesis of small molecules, that \nare known to have a major impact on the host. To evaluate their \ncontribution to a given host phenotype, it is important to assess \nthe MGC abundance and expression profile in a given dataset. Thus, \nwe have built BiG-MAP, a bioinformatic tool to profile abundance \nand expression levels of gene clusters across metagenomic and \nmetatranscriptomic data and evaluate their differential abundance \nand expression between different conditions. BiG-MAP is composed \nof 4 different modules: \n"
      },
      "source": "https://raw.githubusercontent.com/medema-group/BiG-MAP/master/README.org",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.922237720306085,
      "result": {
        "original_header": "For BiG-MAP.analyse.py",
        "type": "Text_excerpt",
        "value": "** 1) BiG-MAP.download.py\nThis script is created to easily download the metagenomic and/or\nmetatranscriptomic samples available in the SRA repository (https://www.ncbi.nlm.nih.gov/sra). First, the\nsamples are downloaded in /.SRA/ format, and then they are converted\ninto /.fastq/ using /fastq-dump/. \n#+BEGIN_EXAMPLE\nconda activate BiG-MAP_process\npython3 BiG-MAP.download.py -h\npython3 BiG-MAP.download.py [Options]* -A [accession_list_file] -O [path_to_outdir]\n#+END_EXAMPLE\nTo download the samples, go to the [[https://www.ncbi.nlm.nih.gov/Traces/study/][SRA run selector]] and use the BioProject record of interest. Next, from the resulting page, download the *Accession list*. This is a file that contains a list of sample accessions and it is used as input for the BiG-MAP.download module. In this tutorial, the IBD-cohort of Schirmer et al. (2018) is used, thus the Accession list of the BioProject PRJNA389280 was downloaded. With the aim of simplifying the tutorial and speeding up the analysis, 8 metagenomic samples were chosen: 4 samples from patients suffering Crohn Disease (CD) and 4 from Ulcerative Colitis (UC). Create a file with the following 8 samples' accessions and run BiG-MAP.download command to get the fastq files: \n** 2) BiG-MAP.family.py\nThe main purpose of this module is to group gene clusters into GCFs using sequence similarity. The first redundancy filtering step is performed by MASH, that by default uses 0.8 sequence similarity cut-off but can be changed as desired. Additionally, a second round of redundancy filtering can be performed by using BiG-SCAPE. We strongly recommend using BiG-SCAPE for a more accurate redundancy filtering. For that, look at the BiG-SCAPE wiki on how to install it: https://git.wageningenur.nl/medema-group/BiG-SCAPE/-/wikis/installation. To run BiG-SCAPE, you will also need to have the latest (processed) Pfam database /Pfam-A.hmm.gz/ available from the Pfam FTP website (https://pfam.xfam.org/). Once the /Pfam-A.hmm.gz/ file is downloaded, uncompress it and process it using the /hmmpress/ command from the HMMER suit (http://hmmer.org/).  \n\nBiG-MAP.family takes as input the output directories of any anti- or gutSMASH run. Given a set of genomes, gutSMASH/antiSMASH can predict multiple gene clusters, thus the output folders containing the predicted gene clusters for each genome are the ones used as input for this module. Please, take into account that it needs to be run beforehand. To follow this tutorial without previously running anti- or gutSMASH, you can find 10 exemplary gutSMASH output folders in here: [[https://github.com/medema-group/BiG-MAP/tree/master/example_data][example data]] folder.  \nThe general usage of BiG-MAP.family is: \nIn general, the anti- or gutSMASH-output folder should contain the results of at least several runs. Optional flags to run this module include: \n*-tg*:  Fraction between 0 and 1; the similarity threshold that determines when the protein sequences of the gene clusters can be considered similar. If the threshold is set to zero, all gene clusters will form their own gene cluster families, whereas a threshold of one will result in one large family containing all gene clusters. Default = 0.8. \n*-th*:  Fraction between 0 and 1; the similarity threshold that determines when the protein sequences of the housekeeping genes can be considered similar. Default = 0.1 \n*-g*:   Output whole genome fasta files for the MASH filtered gene clusters as well. This uses more disk space in the output directory. 'True' | 'False'. Default = False \n*NOTE*: the number of predicted MGCs may exceed the maximum number of sequences that MASH (\u201csketch\u201d and \u201cdist\u201d functions) is able to compare, leading to an error. In this scenario, the family module can be run in batches or the code can be slightly modified to manually run the MASH analysis and MASH \u201cpaste\u201d function (more information is available in their documentation at https://mash.readthedocs.io/en/latest/) and pick up the analysis again from that step onwards. \n** 3) BiG-MAP.map.py\nThis module is designed to align the WGS (paired or unpaired) reads to the reference representatives of each GCF and HGF using /bowtie2/. The following will be computed: RPKM, coverage, core coverage. The coverage is calculated using /Bedtools/, and the read count values using /Samtools/. The general usage is: \n*NOTE*: It is important for downstream analysis to also use the /-b/ flag. Also, if it is prefered to use the averaged number of reads mapped per GCF (instead of summed), the flag /-a or --average/ needs to be included in the command below \n** 4) BiG-MAP.analyse.py\nThis module performs a statistical analysis on the metagenomic/metatranscriptomic samples. First, the script normalizes and filters the data. Whereafter, the best covered gene clusters can be observed using the /--explore/ flag. Next, the Kruskal Wallis and fitZIG model will be used to compute differentially abundant/expressed gene clusters and Benjamini-Hochberg FDR compensates for multiple hypothesis testing. The output of the script are several heatmaps in pdf format. \nOutput: \nexplore_heatmap.pdf & explore_heatmap.eps -> contains the top 20 best covered gene clusters\nUCvsCD_fz.pdf & UCvsCD.eps -> comparison between UC and CD using the fitZIG model\nUCvsCD_kw.pdf & UCvsCD_kw.eps -> comparison between UC and CD using the Kruskal Wallis model\ntsv-results -> directory containing tsv files with the raw data\n#+END_EXAMPLE \n* Snakemake workflow\nThis Snakemake workflow allows for a more automated and streamlined running of the separated BiG-MAP modules. For more information on how to install and run the Snakemake version of BiG-MAP, check the instructions below. \n"
      },
      "source": "https://raw.githubusercontent.com/medema-group/BiG-MAP/master/README.org",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/medema-group/BiG-MAP/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/medema-group/BiG-MAP/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "medema-group/BiG-MAP"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "+CAPTION: The pipelene of all the modules combined"
      },
      "source": "https://raw.githubusercontent.com/medema-group/BiG-MAP/master/README.org",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9445699771604612,
      "result": {
        "original_header": "+NAME: BiG-MAP.fig_1",
        "type": "Text_excerpt",
        "value": "[[https://github.com/medema-group/BiG-MAP/blob/master/Pipeline_overview.png]] \nFor information on how to install and run BiG-MAP, check this tutorial. Please, take into account that this tool has been only tested on Ubuntu. \n"
      },
      "source": "https://raw.githubusercontent.com/medema-group/BiG-MAP/master/README.org",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999999999999716,
      "result": {
        "original_header": "run.ID host.ID SampleType  DiseaseStatus",
        "type": "Text_excerpt",
        "value": "* Installation\nInstall BiG-MAP dependencies using conda. Conda can be installed from\n[[https://docs.conda.io/en/latest/miniconda.html][miniconda_link]]. First pull the BiG-MAP repository from github: \n"
      },
      "source": "https://raw.githubusercontent.com/medema-group/BiG-MAP/master/README.org",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999979833179622,
      "result": {
        "original_header": "+BEGIN_EXAMPLE",
        "type": "Text_excerpt",
        "value": "~$ git clone https://github.com/medema-group/BiG-MAP.git \n"
      },
      "source": "https://raw.githubusercontent.com/medema-group/BiG-MAP/master/README.org",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9914926522205267,
      "result": {
        "original_header": "+END_EXAMPLE",
        "type": "Text_excerpt",
        "value": "Then install all the dependencies from the BiG-MAP.yml file with:\n#+BEGIN_EXAMPLE \n"
      },
      "source": "https://raw.githubusercontent.com/medema-group/BiG-MAP/master/README.org",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9996872339667503,
      "result": {
        "original_header": "For BiG-MAP.download.py, BiG-MAP.family.py and BiG-MAP.map.py",
        "type": "Text_excerpt",
        "value": "~$ conda env create -f BiG-MAP_process.yml BiG-MAP_process\n~$ conda activate BiG-MAP_process\n \n"
      },
      "source": "https://raw.githubusercontent.com/medema-group/BiG-MAP/master/README.org",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9737080574268288,
      "result": {
        "original_header": "For BiG-MAP.analyse.py",
        "type": "Text_excerpt",
        "value": "~$ conda env create -f BiG-MAP_analyse.yml BiG-MAP_analyse\n~$ conda activate BiG-MAP_analyse \n#+END_EXAMPLE\nThis step is optional but to make use of the second redundancy filtering step in the BiG-MAP.family module, download BiG-SCAPE using: \n#+BEGIN_EXAMPLE\n~$ git clone https://github.com/medema-group/BiG-SCAPE/\n#+END_EXAMPLE \nFurther below you will find more information on how to install BiG-SCAPE and its dependencies, but you can also check the wiki page for more information: https://github.com/medema-group/BiG-SCAPE/wiki.  \nThe four modules are described more in detail below where you will also find the commands to run them.  \nAcc_list.txt:\nSRR5947837\nSRR5947861\nSRR5947824\nSRR5947881\nSRR5947836\nSRR5947862\nSRR5947855\nSRR5947841 \npython3 BiG-MAP.download.py -A Acc_list.txt -O /usr001/fastq/schirmer/ \n** 2) BiG-MAP.family.py\nThe main purpose of this module is to group gene clusters into GCFs using sequence similarity. The first redundancy filtering step is performed by MASH, that by default uses 0.8 sequence similarity cut-off but can be changed as desired. Additionally, a second round of redundancy filtering can be performed by using BiG-SCAPE. We strongly recommend using BiG-SCAPE for a more accurate redundancy filtering. For that, look at the BiG-SCAPE wiki on how to install it: https://git.wageningenur.nl/medema-group/BiG-SCAPE/-/wikis/installation. To run BiG-SCAPE, you will also need to have the latest (processed) Pfam database /Pfam-A.hmm.gz/ available from the Pfam FTP website (https://pfam.xfam.org/). Once the /Pfam-A.hmm.gz/ file is downloaded, uncompress it and process it using the /hmmpress/ command from the HMMER suit (http://hmmer.org/).  \nTo make use of the tutorial gutSMASH folders, first extract the files using: \n#+BEGIN_EXAMPLE\ntar -xf BiG-MAP_tutorial_genomes.tar.gz\n#+END_EXAMPLE \n#+BEGIN_EXAMPLE\nconda activate BiG-MAP_process\npython3 BiG-MAP.family.py -h\npython3 BiG-MAP.family.py [Options]* -D [input dir(s)] -O [output dir]\n#+END_EXAMPLE \nCheck the command below to see how to run this module with the tutorial samples and BiG-SCAPE: \nIn general, the anti- or gutSMASH-output folder should contain the results of at least several runs. Optional flags to run this module include: \n\nthe schirmer_metadata.txt is set up as follows (tab-delimited):\n#run.ID\thost.ID\tSampleType\tDiseaseStatus\nSRR5947837\tM2026C2_MGX\tMETAGENOMIC\tUC\nSRR5947861\tM2026C3_MGX\tMETAGENOMIC\tUC\nSRR5947824\tM2026C4_MGX\tMETAGENOMIC\tUC\nSRR5947881\tM2026C7_MGX\tMETAGENOMIC\tUC\nSRR5947836\tM2027C1_MGX\tMETAGENOMIC\tCD\nSRR5947862\tM2027C2_MGX\tMETAGENOMIC\tCD\nSRR5947855\tM2027C3_MGX\tMETAGENOMIC\tCD\nSRR5947841\tM2027C5_MGX\tMETAGENOMIC\tCD \nTo run the script, the BiG-MAP_analyse conda environment should be activated.\nThe general usage is:\n#+BEGIN_EXAMPLE\nconda activate BiG-MAP_analyse\npython3 BiG-MAP.analyse.py -h\npython3 BiG-MAP.analyse.py --explore --compare -B [biom_file] -T [metagenomic/metatranscriptomic] -M [metagroup] -O [outdir] [Options*] \n* Snakemake workflow\nThis Snakemake workflow allows for a more automated and streamlined running of the separated BiG-MAP modules. For more information on how to install and run the Snakemake version of BiG-MAP, check the instructions below. \n* Installation and run overview\nInstall BiG-MAP dependencies using conda. Conda can be installed from\n[[https://docs.conda.io/en/latest/miniconda.html][miniconda_link]]. First pull the BiG-MAP repository from github: \n#+BEGIN_EXAMPLE\n~$ git clone https://github.com/medema-group/BiG-MAP.git\n#+END_EXAMPLE \nInstall Snakemake with the following command:\n#+BEGIN_EXAMPLE\n~$ conda create -n snakemake -c conda-forge -c bioconda snakemake=6.0.2\n~$ conda activate snakemake\n#+END_EXAMPLE \nNext, copy the BiG-MAP_snakemake folder to the preferred output location\n#+BEGIN_EXAMPLE\n~$ cp -r BiG-MAP/BiG-MAP_snakemake/ /path/to/output/location/\n#+END_EXAMPLE \nNavigate to the BiG-MAP_snakemake folder and adjust the *config.yaml* file. In this file, the locations of files and folders should be included based on the wanted BiG-MAP run settings. After adjusting the config file, use the following command to start the BiG-MAP run:\n#+BEGIN_EXAMPLE\n~$ snakemake --use-conda --cores 10\n#+END_EXAMPLE\n*NOTE*: It's recommended to use a conda-prefix location to a folder in which the BiG-MAP conda environments can be installed (--conda-prefix /path/to/snakemake/conda/envs/). Additionally, the number of cores used by BiG-MAP can be adjusted with the --cores flag. \n* Requirements\n** Input data:\n- antiSMASH v5.0 or higher\n- gutSMASH \n** Packages:\n*** Python\n- BioPython\n- pandas\n*** R\n- metagenomeSeq\n- biomformat\n- ComplexHeatmap=2.0.0\n- viridisLite\n- RColorBrewer\n- tidyverse\n \n"
      },
      "source": "https://raw.githubusercontent.com/medema-group/BiG-MAP/master/README.org",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9980744623101636,
      "result": {
        "original_header": "run.ID host.ID SampleType  DiseaseStatus",
        "type": "Text_excerpt",
        "value": "Then install all the dependencies from the BiG-MAP.yml file with:\n#+BEGIN_EXAMPLE\n# For BiG-MAP.download.py, BiG-MAP.family.py and BiG-MAP.map.py\n~$ conda env create -f BiG-MAP_process.yml BiG-MAP_process\n~$ conda activate BiG-MAP_process \n# For BiG-MAP.analyse.py\n~$ conda env create -f BiG-MAP_analyse.yml BiG-MAP_analyse\n~$ conda activate BiG-MAP_analyse \n"
      },
      "source": "https://raw.githubusercontent.com/medema-group/BiG-MAP/master/README.org",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8488677872769048,
      "result": {
        "original_header": "+NAME: BiG-MAP.fig_1",
        "type": "Text_excerpt",
        "value": "- BiG-MAP.download.py\n- BiG-MAP.family.py\n- BiG-MAP.map.py\n- BiG-MAP.analyse.py \n"
      },
      "source": "https://raw.githubusercontent.com/medema-group/BiG-MAP/master/README.org",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8431195298894442,
      "result": {
        "original_header": "For BiG-MAP.analyse.py",
        "type": "Text_excerpt",
        "value": "python3 BiG-MAP.download.py -A Acc_list.txt -O /usr001/fastq/schirmer/ \n#+BEGIN_EXAMPLE\nconda activate BiG-MAP_process\npython3 BiG-MAP.family.py -h\npython3 BiG-MAP.family.py [Options]* -D [input dir(s)] -O [output dir]\n#+END_EXAMPLE \n#+BEGIN_EXAMPLE\nconda activate BiG-MAP_process\npython3 BiG-MAP.map.py -h\npython3 BiG-MAP.map.py {-I1 [mate-1s] -I2 [mate-2s] | -U [samples]} {-F [family] | -P [pickled file]} -O [outdir] -b [metadata] [Options*]\n#+END_EXAMPLE \n#+BEGIN_EXAMPLE\npython3 BiG-MAP.map.py -b /usr001/results/schirmer_metadata.txt -I1 /usr001/fastq/schirmer/*pass_1* -I2 /usr001/fastq/schirmer/*pass_2* -O /usr001/results_mapping/ -F /usr001/results_family/ \nExample command for the explore heatmap:\npython3 BiG-MAP.analyse.py --explore -B /usr001/results_mapping/biom-results/BiG-MAP.map.metacore.dec.biom -T metagenomic -M DiseaseStatus -O /usr001/results_analysis \nExample command for the compare heatmap:\npython3 BiG-MAP.analyse.py --compare -B /usr001/results_mapping/biom-results/BiG-MAP.map.metacore.dec.biom -T metagenomic -M DiseaseStatus -g UC CD -O /usr001/results_analysis \nOutput: \nexplore_heatmap.pdf & explore_heatmap.eps -> contains the top 20 best covered gene clusters\nUCvsCD_fz.pdf & UCvsCD.eps -> comparison between UC and CD using the fitZIG model\nUCvsCD_kw.pdf & UCvsCD_kw.eps -> comparison between UC and CD using the Kruskal Wallis model\ntsv-results -> directory containing tsv files with the raw data\n#+END_EXAMPLE \n"
      },
      "source": "https://raw.githubusercontent.com/medema-group/BiG-MAP/master/README.org",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/medema-group/BiG-MAP/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 Wageningen University\nAuthors: Koen van den Berg, Hannah Augustijn, Victoria Pascal Andreu\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/medema-group/BiG-MAP/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BiG-MAP"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "medema-group"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 153795,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/medema-group/BiG-MAP/master/README.org"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://mash.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/medema-group/BiG-MAP/master/README.org",
      "technique": "regular_expression"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "HAugustijn",
          "type": "User"
        },
        "date_created": "2023-03-22T08:25:48Z",
        "date_published": "2024-02-23T16:03:24Z",
        "description": "This is the initial version release of BiG-MAP.",
        "html_url": "https://github.com/medema-group/BiG-MAP/releases/tag/v1.0.0",
        "name": "BiG-MAP v1.0.0",
        "release_id": 143378425,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/medema-group/BiG-MAP/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/medema-group/BiG-MAP/releases/143378425",
        "value": "https://api.github.com/repos/medema-group/BiG-MAP/releases/143378425",
        "zipball_url": "https://api.github.com/repos/medema-group/BiG-MAP/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 03:24:47",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 24
      },
      "technique": "GitHub_API"
    }
  ],
  "workflows": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/medema-group/BiG-MAP/master/BiG-MAP_snakemake/Snakefile"
      },
      "technique": "file_exploration"
    }
  ]
}