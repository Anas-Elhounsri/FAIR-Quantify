{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "type": "Text_excerpt",
        "value": "If you find this package useful please cite out [preprint](https://www.biorxiv.org/content/10.1101/2020.08.06.240754v1)\n"
      },
      "source": "https://raw.githubusercontent.com/CMWbio/geaR/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/CMWbio/geaR"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-08-22T01:46:26Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-19T03:48:17Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Genomic evolutionary analysis in R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "type": "Text_excerpt",
        "value": "The package geaR is designed to aid with evolutionary and population genetic analysis across whole genome genotype data in the GDS format.\nAnalysis can be carried out using classical approaches such as sliding windows, however the main strength of geaR is the ability to include only ceratin types of features in the analysis.\n"
      },
      "source": "https://raw.githubusercontent.com/CMWbio/geaR/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/CMWbio/geaR/wiki"
      },
      "source": "https://raw.githubusercontent.com/CMWbio/geaR/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/CMWbio/geaR/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/CMWbio/geaR/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CMWbio/geaR"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Introduction"
      },
      "source": "https://raw.githubusercontent.com/CMWbio/geaR/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "```\n\ninstall.packages(\"BiocManager\")\ninstall.packages(\"devtools\")\n\npkgs <- c(\"SeqArray\", \"GenomicRanges\", \"rtracklayer\", \"Biostrings\", \"BSgenome\", \"plyranges\")\nBiocManager::install(pkgs)\ndevtools::install_github(\"CMWbio/geaR\")\n\n```\nSome users may experience warnings during the build like:\n```\n/Library/Frameworks/R.framework/Versions/3.6/Resources/library/RcppEigen/include/Eigen/src/Core/util/ReenableStupidWarnings.h:10:30: warning: pragma diagnostic pop could not pop, no matching push [-Wunknown-pragmas]\n    #pragma clang diagnostic pop\n```\n\nThis is a harmless warning thrown by RcppEigen. See [here](https://discourse.mc-stan.org/t/boost-and-rcppeigen-warnings-for-r-package-using-stan/3478/2) for discussion.\n"
      },
      "source": "https://raw.githubusercontent.com/CMWbio/geaR/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/CMWbio/geaR/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 Christopher M. Ward\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/CMWbio/geaR/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "geaR"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "CMWbio"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 119665,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 1348,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/CMWbio/geaR/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 16:43:53",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick usage",
        "type": "Text_excerpt",
        "value": "For detailed usage please see [here](https://cmwbio.github.io/geaR-vignette/index.html).\nFor example workflows see [here](https://github.com/CMWbio/geaR/wiki)\n\n**While using please try and be careful with ram usage. If you have an analysis size of 1000 samples with an average of ~100000 bp in each analysis region (eg a 1Mb tiled window) try to run on 1 core first to see your memory requirements**\n\nThe easiest way to use geaR is to use the cog/gear object interface. \nThis example will use a reasonably sized human chromosome 20 downloaded from here (ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/) on a 4 core laptop.\n\nIn the example we will calculate nucleotide diversity (pi), genetic distance (dXY), minimum distance (dmin), maximum distance (dmax), Fst, and ancesteral distance (da) for 100 populaitons of 10 diploid individuals per populaiton. As geaR is made to carry out analysis from a single function we will also output haplotypes within each window to file in fasta format.\n\nReading in this many samples can consume reasonable amounts of ram that scale with the number of cores used. For most analyses (including this one, 6Gb peak usage) a 1-2Gb peak ram usage is observed for each core. \n\n```\n## Make 100kb windows across the genome.\n### This requires a dataframe of scaffold/chromosome lengths.\n\nlibrary(geaR)\nlibrary(tibble)\nlibrary(SeqArray)\n\n### if you dont know the lengths, it can easily be determined from your reference index (.fai)\nchr20_df <- tibble(ID = \"chr20\", length = 64444167)\nloci <- windowMaker(chr20_df, windowSize = 100000, stepSize = 0,  nCores = 4)\n\n## Next we will construct our analysis\n### first loading the GDS and setting up population definitions.\nGDS <- seqOpen(\"~/Desktop/setupGear/ALL.chr20.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.gds\")\n\n### We can easily query the GDS for sample names.\nsamples <- seqGetData(gdsfile = GDS, var.name = \"sample.id\")\n### for the example populations are arbitrary so we will just set 100 equal populations each with 10 samples\npops <- tibble(Sample = samples[1:1000], Population = rep(paste0(\"P\", 1:100), each = 10))\n\n### general arguments for the analysis\nargCog <- makeCog(analysisType = \"args\", ploidy = 2, nCores = 4, minSites = 0.002, pairwiseDeletion = TRUE, removeIndels = TRUE)\n\n### set up diverstity analysis\ndivCog <- makeCog(analysisType = \"diversityFULL\", stats = \"all\")\n\n### set up cog to output loci to file\n\noutlociCog <-  makeCog(analysisType = \"outputLoci\", outputDirectory = \"~/Desktop/setupGear/\", alleles = \"seperate\", removeIndels = TRUE)\n\n\n### build the gear object for analysis\n### We will also arbitrarily define P100 as the outgroup for this analysis\ngear <- makeGear(loci[1:20], populations = pops, outgroup = \"P100\", cogs = list(argCog, divCog, outlociCog))\n\n### Run the three analyses \ngear <- analyzeGear(GDS, gear)\n\n\n\n\n```\n"
      },
      "source": "https://raw.githubusercontent.com/CMWbio/geaR/master/README.md",
      "technique": "header_analysis"
    }
  ]
}