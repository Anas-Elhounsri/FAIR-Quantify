{
  "application_domain": [
    {
      "confidence": 43.73,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "type": "Text_excerpt",
        "value": "Salameh, T.J., Wang, X., Song, F. et al. A supervised learning framework for chromatin loop detection in genome-wide contact maps. Nat Commun 11, 3428 (2020). https://doi.org/10.1038/s41467-020-17239-9\n"
      },
      "source": "https://raw.githubusercontent.com/tariks/peakachu/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/tariks/peakachu"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-02-06T06:09:01Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-25T00:32:01Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Genome-wide contact analysis using sklearn"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "type": "Text_excerpt",
        "value": "Accurately predicting chromatin loops from genome-wide interaction matrices such as Hi-C data is critical to deepening our understanding of proper gene regulation. Current approaches are mainly focused on searching for statistically enriched dots on a genome-wide map. However, given the availability of orthogonal data types such as ChIA-PET, HiChIP, Capture Hi-C, and high-throughput imaging, a supervised learning approach could facilitate the discovery of a comprehensive set of chromatin interactions. Here, we present Peakachu, a Random Forest classification framework that predicts chromatin loops from genome-wide contact maps. We compare Peakachu with current enrichment-based approaches, and find that Peakachu identifies a unique set of short-range interactions. We show that our models perform well in different platforms, across different sequencing depths, and across different species. We apply this framework to predict chromatin loops in 56 Hi-C datasets, and release the results at the 3D Genome Browser.\n"
      },
      "source": "https://raw.githubusercontent.com/tariks/peakachu/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9266794636031788,
      "result": {
        "original_header": "Using Peakachu as a standard loop caller",
        "type": "Text_excerpt",
        "value": "Models for predicting loops in Hi-C have been trained using CTCF ChIA-PET interactions, H3K27ac HiChIP interactions, and a high-confidence loop set (loops that can be detected by at least two orthogonal methods from CTCF ChIA-PET, Pol2 ChIA-PET, Hi-C, CTCF HiChIP, H3K27ac HiChIP, SMC1A HiChIP, H3K4me3 PLAC-Seq, and TrAC-Loop) as positive training samples, at a variety of read depths. Simply download the appropriate model file and directly run the score_genome/score_chromosome function if you want to detect chromatin loops on your own Hi-C or Micro-C maps. \nInstead, if you are using an older Peakachu version (<2.0), please select a model\nfrom this table: \nPeakachu provides a handy function `peakachu depth` to extract the total number of intra-chromosomal pairs in your data and help you select the most appropriate pre-trained model: \n    num of intra reads in your data: 141955751\n    num of intra reads in a human with matched sequencing coverage: 139325229\n    suggested model: 150 million \nTherefore, we recommend using the 7.5% models (trained with ~150 million intra reads)\nto predict loops on this data.\n```bash\npeakachu score_genome -r 10000 --clr-weight-name weight -p SKNAS-MboI-allReps-filtered.mcool::resolutions/10000 -O SKNAS-peakachu-10kb-scores.bedpe -m high-confidence.150million.10kb.w6.pkl\npeakachu pool -r 10000 -i SKNAS-peakachu-10kb-scores.bedpe -o SKNAS-peakachu-10kb-loops.0.95.bedpe -t 0.95\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/tariks/peakachu/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9384235211850448,
      "result": {
        "original_header": "Not just Hi-C",
        "type": "Text_excerpt",
        "value": "In addition to Hi-C, Peakachu has also been trained on other 3D genomic platforms with good results, including Micrco-C ([Krietenstein et al. 2020](https://pubmed.ncbi.nlm.nih.gov/32213324/)), DNA SPRITE ([Quinodoz et al. 2018](https://pubmed.ncbi.nlm.nih.gov/29887377/)), ChIA-PET ([Fullwood et al. 2009](https://pubmed.ncbi.nlm.nih.gov/19890323/)), HiChIP ([Mumbach et al. 2016](https://pubmed.ncbi.nlm.nih.gov/27643841/)), TrAC-loop ([Lai et al. 2018](https://pubmed.ncbi.nlm.nih.gov/30150754/)), and HiCAR ([Wei et al. 2022](https://pubmed.ncbi.nlm.nih.gov/35196517/)), etc. \nIf you want to predict loops on HiCAR contact matrices, please select a model from the following table. The models were trained with a high-confidence loop set and a series of downsampled versions of a HiCAR dataset in H1ESC cells. As these models were trained using the raw contact values (rather than the ICE-normalized contact values as we did for Hi-C), please set the parameter \"--clr-weight-name\" to \"raw\" when you run \"peakachu score_genome\" or \"peakachu score_chromosome\". \nIf you want to predict loops on TrAC-loop contact matrices, please select a model from the following table. The models were trained with a high-confidence loop set and a series of downsampled versions of a TrAC-loop dataset in H1ESC cells. Again, please set the parameter \"--clr-weight-name\" to \"raw\" when you run \"peakachu score_genome\" or \"peakachu score_chromosome\". \nIf you want to predict chromatin loops on CTCF ChIA-PET contact matrices, please select a model from the following table. The models were trained with a high-confidence loop set and downsampled versions of a CTCF ChIA-PET dataset in H1ESC cells. Please set the parameter \"--clr-weight-name\" to \"raw\" when you run \"peakachu score_genome\" or \"peakachu score_chromosome\". \nIf you want to predict loops on Pol2 (RNA Polymerase II) ChIA-PET contact matrices, please select a model from the following table. The models were trained with a high-confidence loop set and downsampled versions of a Pol2 ChIA-PET dataset in WTC11 cells. Please set the parameter \"--clr-weight-name\" to \"raw\" when you run \"peakachu score_genome\" or \"peakachu score_chromosome\". \nIf you want to predict loops on H3K27ac HiChIP/PLAC-Seq contact matrices, please select a model from the following table. The models were trained with a high-confidence loop set and downsampled versions of a H3K27ac HiChIP dataset in GM12878 cells. Please set the parameter \"--clr-weight-name\" to \"raw\" when you run \"peakachu score_genome\" or \"peakachu score_chromosome\". \nIf you want to predict loops on H3K4me3 HiChIP/PLAC-Seq contact matrices, please select a model from the following table. The models were trained with a high-confidence loop set and downsampled versions of a H3K4me3 PLAC-Seq dataset in GM12878 cells. Please set the parameter \"--clr-weight-name\" to \"raw\" when you run \"peakachu score_genome\" or \"peakachu score_chromosome\". \nIf you want to predict loops on CTCF HiChIP/PLAC-Seq contact matrices, please select a model from the following table. The models were trained with a high-confidence loop set and downsampled versions of a CTCF HiChIP dataset in GM12878 cells. Please set the parameter \"--clr-weight-name\" to \"raw\" when you run \"peakachu score_genome\" or \"peakachu score_chromosome\". \nIf you want to predict loops on SMC1A HiChIP/PLAC-Seq contact matrices, please select a model from the following table. The models were trained with a high-confidence loop set and downsampled versions of a SMC1A HiChIP dataset in GM12878 cells. Please set the parameter \"--clr-weight-name\" to \"raw\" when you run \"peakachu score_genome\" or \"peakachu score_chromosome\". \n"
      },
      "source": "https://raw.githubusercontent.com/tariks/peakachu/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8603981689491951,
      "result": {
        "original_header": "Version 2.0 (09/06/2022)",
        "type": "Text_excerpt",
        "value": "1. Re-trained the models using the latest scikit-learn v1.1.2\n2. Used the distance-normalized signals instead of original contact signals\n3. Added a 2D Gaussian filter followed by min-max scaling to pre-process each training image\n4. Optimized the computation efficiency using numba and matrix operations. \n"
      },
      "source": "https://raw.githubusercontent.com/tariks/peakachu/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.972756862456832,
      "result": {
        "type": "Text_excerpt",
        "value": "> **_NOTE:_**  Peakachu (version>=1.1.2) now supports both  and  formats. \n"
      },
      "source": "https://raw.githubusercontent.com/tariks/peakachu/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/tariks/peakachu/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 10
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/tariks/peakachu/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "tariks/peakachu"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Introduction"
      },
      "source": "https://raw.githubusercontent.com/tariks/peakachu/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tariks/peakachu/master/example/gm12878-h3k27ac-loops.png"
      },
      "source": "https://raw.githubusercontent.com/tariks/peakachu/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "Peakachu requires Python3 and several scientific packages to run. It is best to first set up the environment using [mamba](https://mamba.readthedocs.io/en/latest/installation.html) and then install Peakachu from [PyPI](https://pypi.org/project/peakachu/):\n\n```bash\nconda config --add channels defaults\nconda config --add channels bioconda\nconda config --add channels conda-forge\nmamba create -n peakachu cooler numba scikit-learn=1.1.2 joblib=1.1.0\nmamba activate peakachu\npip install -U peakachu\n```\n\nPeakachu should now be installed as a command-line tool within the new environment. Options for all peakachu commands and sub-commands can be accessed with the -h option. \n\n\n```bash\npeakachu -h\n```\n\n    usage: peakachu [-h] {train,score_chromosome,score_genome,depth,pool} ...\n\n    Unveil Hi-C Anchors and Peaks.\n\n    positional arguments:\n      {train,score_chromosome,score_genome,depth,pool}\n        train               Train RandomForest model per chromosome\n        score_chromosome    Calculate interaction probability per pixel for a chromosome\n        score_genome        Calculate interaction probability per pixel for the whole genome\n        depth               Calculate the total number of intra-chromosomal chromatin contacts and select the\n                            most appropriate pre-trained model for you.\n        pool                Print centroid loci from score_genome/score_chromosome output\n\n    options:\n      -h, --help            show this help message and exit\n\n"
      },
      "source": "https://raw.githubusercontent.com/tariks/peakachu/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Data preparation",
        "parent_header": [
          "Example: predicting loops in GM12878 Hi-C"
        ],
        "type": "Text_excerpt",
        "value": "Peakachu requires the contact map to be a .cool file or a .hic file and any training input to be a text file in bedpe format. Example training data can be found at the [training-sets](https://github.com/tariks/peakachu/tree/master/training-sets) subfolder. Cooler files may be found at the [4DN data portal](https://data.4dnucleome.org/).\n\n```bash\nwget http://3dgenome.fsm.northwestern.edu/peakachu/test_file/Rao2014-GM12878-MboI-allreps-filtered.10kb.cool\n```\n"
      },
      "source": "https://raw.githubusercontent.com/tariks/peakachu/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9208874897480329,
      "result": {
        "original_header": "Using Peakachu as a standard loop caller",
        "type": "Text_excerpt",
        "value": "Instead, if you are using an older Peakachu version (<2.0), please select a model\nfrom this table: \nTo make it clear, let's download another Hi-C dataset:\n```bash\nwget -O SKNAS-MboI-allReps-filtered.mcool -L https://www.dropbox.com/s/f80bgn11d7wfgq8/SKNAS-MboI-allReps-filtered.mcool?dl=0\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/tariks/peakachu/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8637389257807331,
      "result": {
        "type": "Text_excerpt",
        "value": "> **_NOTE:_**  Peakachu (version>=1.1.2) now supports both  and  formats. \n"
      },
      "source": "https://raw.githubusercontent.com/tariks/peakachu/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8192125961319651,
      "result": {
        "original_header": "Using Peakachu as a standard loop caller",
        "type": "Text_excerpt",
        "value": "\n```bash\npeakachu depth -p SKNAS-MboI-allReps-filtered.mcool::resolutions/1000000\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/tariks/peakachu/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/tariks/peakachu/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2019 tariks\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/tariks/peakachu/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "peakachu"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "tariks"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 61014,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tariks/peakachu/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://cooler.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/tariks/peakachu/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://mamba.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/tariks/peakachu/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "XiaoTaoWang",
          "type": "User"
        },
        "date_created": "2022-02-28T18:11:47Z",
        "date_published": "2022-02-28T18:35:27Z",
        "description": "1. re-wrote most modules to improve code readability and make it easier to maintain\r\n2. lowered down the memory usage for score_chromosome and score_genome\r\n3. made CLI of score_chromosome, score_genome, and pool subcommands more friendly to users\r\n4. fixed several warning messages\r\n5. improved the pooling algorithm according to my latest experiences for 4DN joint analysis.\r\n6. trained and released a series of models using a high-confidence loop set at 5kb, 10kb, and 25kb resolutions, and at various sequencing depths",
        "html_url": "https://github.com/tariks/peakachu/releases/tag/v1.2.0",
        "name": "Peakachu",
        "release_id": 60632575,
        "tag": "v1.2.0",
        "tarball_url": "https://api.github.com/repos/tariks/peakachu/tarball/v1.2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/tariks/peakachu/releases/60632575",
        "value": "https://api.github.com/repos/tariks/peakachu/releases/60632575",
        "zipball_url": "https://api.github.com/repos/tariks/peakachu/zipball/v1.2.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 17:48:57",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 59
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Example: predicting loops in GM12878 Hi-C",
        "type": "Text_excerpt",
        "value": "The following example will download an example cooler file containing the GM12878 Hi-C data at the 10kb resolution, train a series of models using H3K27ac HiChIP interactions, and then predict loops using the trained models.\n"
      },
      "source": "https://raw.githubusercontent.com/tariks/peakachu/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Train a model and predict loops",
        "parent_header": [
          "Example: predicting loops in GM12878 Hi-C"
        ],
        "type": "Text_excerpt",
        "value": "It is always a good idea to call the help function immediately before entering a command:\n\n```bash\npeakachu train -h\n```\n\n    usage: peakachu train [-h] [-r RESOLUTION] [-p PATH] [--clr-weight-name CLR_WEIGHT_NAME] [-b BEDPE]\n                      [-w WIDTH] [--nproc NPROC] [-O OUTPUT]\n\n    options:\n      -h, --help            show this help message and exit\n      -r RESOLUTION, --resolution RESOLUTION\n                            Resolution in bp (default 10000)\n      -p PATH, --path PATH  Path to a .cool URI string\n      --clr-weight-name CLR_WEIGHT_NAME\n                            The name of the weight column in your Cooler URI for normalizing the contact\n                            signals. Specify it to \"raw\" if you want to use the raw signals.\n      -b BEDPE, --bedpe BEDPE\n                            Path to the bedpe file containing positive training set.\n      -w WIDTH, --width WIDTH\n                            Number of bins added to center of window. default width=5 corresponds to 11x11\n                            windows\n      --nproc NPROC         Number of worker processes that will be allocated for training. (default 4)\n      -O OUTPUT, --output OUTPUT\n                            Folder path to store trained models.\n\n```bash\npeakachu train -r 10000 -p Rao2014-GM12878-MboI-allreps-filtered.10kb.cool --clr-weight-name weight -O models -b gm12878.mumbach.h3k27ac-hichip.hg19.bedpe\n```\n\nThis will train 23 random forest models, each labeled by a chromosome. The model for every chromosome\nwas trained using interactions from all the other 22 chromosomes in the provided bedpe file. The purpose of this is to avoid Peakachu to predict loops from the same map it used for training, without overfitting. To use these models, you may either use the score_chromosome function to predict loops in only one chromosome, or the score_genome function to perform a genome-wide prediction.\n\n\n```bash\npeakachu score_chromosome -h\n```\n\n    usage: peakachu score_chromosome [-h] [-r RESOLUTION] [-p PATH] [--clr-weight-name CLR_WEIGHT_NAME]\n                                 [-C CHROM] [-m MODEL] [-l LOWER] [-u UPPER] [--minimum-prob MINIMUM_PROB]\n                                 [-O OUTPUT]\n\n    options:\n      -h, --help            show this help message and exit\n      -r RESOLUTION, --resolution RESOLUTION\n                            Resolution in bp (default 10000)\n      -p PATH, --path PATH  Path to a .cool URI string\n      --clr-weight-name CLR_WEIGHT_NAME\n                            The name of the weight column in your Cooler URI for normalizing the contact\n                            signals. Specify it to \"raw\" if you want to use the raw signals.\n      -C CHROM, --chrom CHROM\n                            Chromosome label. Only contact data within the specified chromosome will be\n                            considered.\n      -m MODEL, --model MODEL\n                            Path to pickled model file.\n      -l LOWER, --lower LOWER\n                            Lower bound of distance between loci in bins (default 6).\n      -u UPPER, --upper UPPER\n                            Upper bound of distance between loci in bins (default 300).\n      --minimum-prob MINIMUM_PROB\n                            Only output pixels with probability score greater than this value (default 0.5)\n      -O OUTPUT, --output OUTPUT\n                            Output file name.\n\n```bash\npeakachu score_chromosome -r 10000 -p Rao2014-GM12878-MboI-allreps-filtered.10kb.cool --clr-weight-name weight -O GM12878-chr2-scores.bedpe -C chr2 -m models/chr2.pkl \npeakachu pool -r 10000 -i GM12878-chr2-scores.bedpe -o GM12878-chr2-loops.bedpe -t 0.9\n```\n\nThe pool function serves to select the most significant non-redundant results from per-pixel probabilities calculated by the score functions. It is recommended to try different probability thresholds to achieve the best sensitivity-specificity tradeoff. The output is a standard bedpe file with the 7th and the final column containing the predicted probability from the random forest model and the interaction frequency extracted from the contact matrix, respectively, to support further filtering. The results can be visualized in [juicebox](https://github.com/aidenlab/Juicebox) or [higlass](https://docs.higlass.io) by loading as 2D annotations. Here is an example screenshot of predicted GM12878 loops in juicer:\n![Predicted loops from model trained on H3K27ac HiChIP interactions](https://github.com/tariks/peakachu/blob/master/example/gm12878-h3k27ac-loops.png)\n"
      },
      "source": "https://raw.githubusercontent.com/tariks/peakachu/master/README.md",
      "technique": "header_analysis"
    }
  ]
}