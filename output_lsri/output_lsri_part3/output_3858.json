{
  "application_domain": [
    {
      "confidence": 0.8270928488418688,
      "result": {
        "type": "String",
        "value": "Semantic web"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/lilott8/BioScript"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-04-25T02:18:58Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-03T17:25:43Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "The BioScript compiler, ChemStor storage, and Application Binder."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9194667629770723,
      "result": {
        "original_header": "BioScript",
        "type": "Text_excerpt",
        "value": "A simple type-safe Domain Specific Language (DSL) for chemistry and biology.\n \n"
      },
      "source": "https://raw.githubusercontent.com/lilott8/BioScript/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/lilott8/BioScript/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 16
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/lilott8/BioScript/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "lilott8/BioScript"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BioScript"
      },
      "source": "https://raw.githubusercontent.com/lilott8/BioScript/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Setup",
        "parent_header": [
          "BioScript",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "You'll need Python3 `(apt-get install python3)`, and GraphViz installed `(apt-get install graphviz)`\n\nIf on macOS, install brew, then `brew install python3` and `brew install graphviz`.\n\nBioScript's [grammar](https://github.com/lilott8/BioScriptGrammar \"BioScript's Grammar\") is attached as a submodule.  Hence, if cloning this repo, make sure to include the `--recursive` tag:\n\n`git clone --recursive https://github.com/lilott8/BioScript`\n\nAlso, if [BioScriptGrammar](https://github.com/lilott8/BioScriptGrammar \"BioScript's Grammar\") (or any other submodule) is updated, you'll need to run `git submodule foreach git pull origin master` if your version of git does not do this automatically for you.\n\nInstall required python modules: ```pip install -r requirements.txt```\n\nTry running the example usage (below).  It's possible that a C-style comment `/* ... */` is present in some of the grammar files generated by Antlr.  Open any offending files and use proper pythong comments `#` to mitigate this issue.\n\nSome modules may have not installed properly even using the recursive pip install method above.\n\nContinue trying the example usage (below), and `pip install` any missing modules.\n\nNote: you may need to use `pip3 install` if python3/pip3 is not your default python/pip alias.\n"
      },
      "source": "https://raw.githubusercontent.com/lilott8/BioScript/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/lilott8/BioScript/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BioScript"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "lilott8"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 591128,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lilott8/BioScript/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 14:21:20",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 54
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "BioScript"
        ],
        "type": "Text_excerpt",
        "value": "usage: \n``` \nmain.py [-h] -i INPUT [-d] [-wd WORKING_DIRECTORY] [-o OUTPUT]\n       [-t {m,i,p,inkwell,l,llvm,ir,mfsim,puddle}] [-cfg] [-inline]\n       [-stats] [-lu] [-sim {False,True}] [-id {0,1,2,32,4,8,16}]\n       [-nf] [-smarts SMARTS] [-tcl {none,warn,error}] [-tc]\n       [-tcu {complex,simple,s,c}] [-epa EPA_DEFS] [-abs ABS_INT]\n       [--dbname DBNAME] [--dbuser DBUSER] [--dbpass DBPASS]\n       [--dbaddr DBADDR] [--dbdriver {odbc,mysql}] [-lib LIBRARY]\n       [-flow {passive,p,a,active}] [--cdb CDB] [--schema SCHEMA]\n       [--validate]\n```"
      },
      "source": "https://raw.githubusercontent.com/lilott8/BioScript/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Optional Arguments:",
        "parent_header": [
          "BioScript",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "| Short             | Long                  | Flag                                      | Purpose                                               |\n| ------------------|-----------------------|-------------------------------------------|-------------------------------------------------------|\n| -h                | --help                |                                           | show this help message and exit                       |\n| -i                | --input               | path/to/input.bs                          | Location of input file                                |\n| -d                | --debug               |                                           | Enable debugging.                                     |\n| -t                | --target              | {i,inkwell,p,puddle,m,mfsim,l,llvm, ir,}  | What platform do you wish to target?                  |\n| -o                | --output              | path/to/output/dir                        | Enable writing output. Must be set to write anything  |\n| -wd               | --working-directory   | path/to/directory                         | Directory from where you wish to work                 |\n| -cfg              | --write-cfg           |                                           | Write the CFG to a dot file                           |\n| -inline           | --inline              |                                           | Inline all non-recursive functions                    |\n| -lu               | --loopunroll          |                                           | Unroll all un-rollable loops                          |\n| -stats            | --stats               |                                           | Print the stats to std out                            |\n| -cfg              | --write-cfg           |                                           | Write the programs control flow graph to disk         |\n\n"
      },
      "source": "https://raw.githubusercontent.com/lilott8/BioScript/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Chemistry:",
        "parent_header": [
          "BioScript",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "**Chemistry specific arguments**\n\n| Short             | Long                  | Flag                  | Purpose                           |\n| ------------------|-----------------------|-----------------------|-----------------------------------|\n| -sim              | --simulate            | {True, False}         | Simulate chemistry?               |\n| -id               | --identify            | {0,1,2,32,4,8,16}     | Chemical identification level     |\n| -nf               | --no-filters          |                       | Disable smart filter creation     |\n| -smarts           | --smarts              | 0-255                 | Length of smarts file to use      |\n"
      },
      "source": "https://raw.githubusercontent.com/lilott8/BioScript/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Typing:",
        "parent_header": [
          "BioScript",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "**Typing specific arguments**\n\n| Short             | Long                  |  Flag                         | Purpose                                                                                       |\n| ------------------|-----------------------|-------------------------------|-----------------------------------------------------------------------------------------------|\n| -tcl              | --typechecklevel      | {error, warn, none}           | What interactions elicit notifications                                                        |\n| -tc               | --typecheck           |                               | Enable type checking of input program                                                         |\n| -tcu              | --typesused           | {s, simple, c, complex}       | What types to use to typecheck a program, s = {mat, nat, real}, c = {all types in chemtype}   |\n| -epa              | --epa-defs            | Path/to/epa_defs.json         | Location of the EPA definition file (default: `./resources/epa.json`)                         |\n| -abs              | --abs-int             | path/to/abs-int.txt           | Location of the abstract interaction file (default: `./resources/abstract-interaction.txt`)   |\n"
      },
      "source": "https://raw.githubusercontent.com/lilott8/BioScript/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "DB:",
        "parent_header": [
          "BioScript",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "**Database specific arguments**\n\n| Flag              | Argument      | Purpose                                   |\n|-------------------|---------------|-------------------------------------------|\n| --dbname          | str           | Name of database.                         |\n| --dbuser          | str           | Database user.                            |\n| --dbpass          | str           | Database password for user.               |\n| --dbaddr          | {IP, Host}    | Address of database.                      |\n| --dbdriver        | {mysql,odbc}  | Database driver.                          |\n"
      },
      "source": "https://raw.githubusercontent.com/lilott8/BioScript/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Inkwell:",
        "parent_header": [
          "BioScript",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "**Inkwell specific (`-t inkwell`) flags**\n\n| Short             | Long                  | Flag                              | Purpose                                               |\n| ------------------|-----------------------|-----------------------------------|-------------------------------------------------------|\n| -lib              | --library             | path/to/json/component/lib        | The path to the component library                     |\n| -flow             | --flow                | {p, a, passive, active}           | Which type of flow-based device are you targeting     |\n| -cdb              |                       | database                          | Name of component database (not supported)            |\n|                   | --schema              | Path to schema.json               | The `ParchMint` schema file                           |\n|                   | --validate            |                                   | Validate a netlist against the `ParchMint` schema     |\n                        "
      },
      "source": "https://raw.githubusercontent.com/lilott8/BioScript/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example Usages:",
        "parent_header": [
          "BioScript",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Enable debug (-d), compile a file (-i ...), target `BioScript's` IR (-t ...), and place the output files in the specified location:\n\n```python main.py -d -i tests/test_cases/mix/ir_sisd.bs -t ir -o ./output -cfg```\n\nYour output folder should includ the following files: `ir_sisd_main_dag.dot`, `ir_sisd.ir`, `ir_sisd_main_basic_blocks.dot`.  \n\nYou can either use graphviz to create a .png of the generated dag (`dot -Tpng dag.dot -o dag.png`), or use http://www.webgraphviz.com and paste the contents of the .dot or .dag file for visualization.\n"
      },
      "source": "https://raw.githubusercontent.com/lilott8/BioScript/master/README.md",
      "technique": "header_analysis"
    }
  ]
}