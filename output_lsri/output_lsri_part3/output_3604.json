{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "CRISPRpred(SEQ)"
        ],
        "type": "Text_excerpt",
        "value": "Muhammad Rafid, A.H., Toufikuzzaman, M., Rahman, M.S. et al. CRISPRpred(SEQ): a sequence-based method for sgRNA on target activity prediction using traditional machine learning. BMC Bioinformatics 21, 223 (2020). https://doi.org/10.1186/s12859-020-3531-9\n\n```\n\ufeff@Article{MuhammadRafid2020,\n    author={Muhammad Rafid, Ali Haisam\n      and Toufikuzzaman, Md.\n      and Rahman, Mohammad Saifur\n      and Rahman, M. Sohel},\n    title={CRISPRpred(SEQ): a sequence-based method for sgRNA on target activity prediction\n      using traditional machine learning},\n    journal={BMC Bioinformatics},\n    year={2020},\n    month={Jun},\n    day={01},\n    volume={21},\n    number={223},\n    publisher={BioMed Central},\n    issn={1471-2105},\n    doi={10.1186/s12859-020-3531-9},\n    url={https://doi.org/10.1186/s12859-020-3531-9}\n }\n```\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/Rafid013/CRISPRpredSEQ/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Rafid013/CRISPRpredSEQ"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-05-16T17:30:42Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-02-05T19:01:33Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Code for CRISPRpred(SEQ): sgRNA On Target Activity Prediction"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.8746195302963337,
      "result": {
        "original_header": "Using Pretrained Models for Prediction",
        "type": "Text_excerpt",
        "value": "Use a csv file to provide the sgRNA sequences as input. Follow the format given in example1.csv. The sgRNA sequence must be 20-mer with NGG PAM sequence at the end resulting in a 23-mer sequence. For prediction-\n1. Use the command- **python generate_features.py \\<filepath\\>**. This will generate the features for the given sequences. For example, if the path to your csv file is **Data/example.csv**, use the command **python generate_features.py Data/example.csv**.\n2. To predict using pretrained versions of model A, B or C, run the command **python pretrained_N.py \\<filepath\\>** (N can be A, B or C in the command). For example, run **python pretrained_A.py \\<filepath\\>** if you want to predict using model A. The **\\<filepath\\>** must be provided in this case (this is the **\\<filepath\\>** to the original input csv file).\n \n"
      },
      "source": "https://raw.githubusercontent.com/Rafid013/CRISPRpredSEQ/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8755080499457619,
      "result": {
        "original_header": "Training Models Using New Data",
        "type": "Text_excerpt",
        "value": "Use a csv file to provide the sgRNA sequences and labels as input. Follow the format given in example2.csv. The sgRNA sequence must be 20-mer with NGG PAM sequence at the end resulting in a 23-mer sequence. Follow the steps below-\n1. Use the command- **python generate_features.py \\<filepath\\>**. This will generate the features for the given sequences. For example, if the path to your csv file is **Data/example.csv**, use the command **python generate_features.py Data/example.csv**.\n2. To train your own versions of model A, B or C using new data, run the command **python train_N.py \\<filepath\\>** (N can be A, B or C in the command). For example, run **python train_B.py \\<filepath\\>** if you want to train model B. The **\\<filepath\\>** must be provided in this case (this is the **\\<filepath\\>** to the original input csv file).\n3. To predict using your own versions of trained model A, B or C, run the command **python predict_N.py \\<filepath\\>** (N can be A, B or C in the command). For example, run **python predict_B.py \\<filepath\\>** if you want to predict using the model B you just trained. The **\\<filepath\\>** must be provided in this case (this is the **\\<filepath\\>** to the original input csv file).\n \n"
      },
      "source": "https://raw.githubusercontent.com/Rafid013/CRISPRpredSEQ/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Rafid013/CRISPRpredSEQ/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Rafid013/CRISPRpredSEQ/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Rafid013/CRISPRpredSEQ"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CRISPRpred(SEQ)"
      },
      "source": "https://raw.githubusercontent.com/Rafid013/CRISPRpredSEQ/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Rafid013/CRISPRpredSEQ/master/dependencies.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.9275446332599467,
      "result": {
        "original_header": "Training Models Using New Data",
        "type": "Text_excerpt",
        "value": "Use a csv file to provide the sgRNA sequences and labels as input. Follow the format given in example2.csv. The sgRNA sequence must be 20-mer with NGG PAM sequence at the end resulting in a 23-mer sequence. Follow the steps below-\n1. Use the command- **python generate_features.py \\<filepath\\>**. This will generate the features for the given sequences. For example, if the path to your csv file is **Data/example.csv**, use the command **python generate_features.py Data/example.csv**.\n2. To train your own versions of model A, B or C using new data, run the command **python train_N.py \\<filepath\\>** (N can be A, B or C in the command). For example, run **python train_B.py \\<filepath\\>** if you want to train model B. The **\\<filepath\\>** must be provided in this case (this is the **\\<filepath\\>** to the original input csv file).\n3. To predict using your own versions of trained model A, B or C, run the command **python predict_N.py \\<filepath\\>** (N can be A, B or C in the command). For example, run **python predict_B.py \\<filepath\\>** if you want to predict using the model B you just trained. The **\\<filepath\\>** must be provided in this case (this is the **\\<filepath\\>** to the original input csv file).\n \n"
      },
      "source": "https://raw.githubusercontent.com/Rafid013/CRISPRpredSEQ/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8885813867999872,
      "result": {
        "original_header": "Using Pretrained Models for Prediction",
        "type": "Text_excerpt",
        "value": "Use a csv file to provide the sgRNA sequences as input. Follow the format given in example1.csv. The sgRNA sequence must be 20-mer with NGG PAM sequence at the end resulting in a 23-mer sequence. For prediction-\n1. Use the command- **python generate_features.py \\<filepath\\>**. This will generate the features for the given sequences. For example, if the path to your csv file is **Data/example.csv**, use the command **python generate_features.py Data/example.csv**.\n2. To predict using pretrained versions of model A, B or C, run the command **python pretrained_N.py \\<filepath\\>** (N can be A, B or C in the command). For example, run **python pretrained_A.py \\<filepath\\>** if you want to predict using model A. The **\\<filepath\\>** must be provided in this case (this is the **\\<filepath\\>** to the original input csv file).\n \n"
      },
      "source": "https://raw.githubusercontent.com/Rafid013/CRISPRpredSEQ/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8811144523277602,
      "result": {
        "original_header": "Training Models Using New Data",
        "type": "Text_excerpt",
        "value": "Use a csv file to provide the sgRNA sequences and labels as input. Follow the format given in example2.csv. The sgRNA sequence must be 20-mer with NGG PAM sequence at the end resulting in a 23-mer sequence. Follow the steps below-\n1. Use the command- **python generate_features.py \\<filepath\\>**. This will generate the features for the given sequences. For example, if the path to your csv file is **Data/example.csv**, use the command **python generate_features.py Data/example.csv**.\n2. To train your own versions of model A, B or C using new data, run the command **python train_N.py \\<filepath\\>** (N can be A, B or C in the command). For example, run **python train_B.py \\<filepath\\>** if you want to train model B. The **\\<filepath\\>** must be provided in this case (this is the **\\<filepath\\>** to the original input csv file).\n3. To predict using your own versions of trained model A, B or C, run the command **python predict_N.py \\<filepath\\>** (N can be A, B or C in the command). For example, run **python predict_B.py \\<filepath\\>** if you want to predict using the model B you just trained. The **\\<filepath\\>** must be provided in this case (this is the **\\<filepath\\>** to the original input csv file).\n \n"
      },
      "source": "https://raw.githubusercontent.com/Rafid013/CRISPRpredSEQ/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Rafid013/CRISPRpredSEQ/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CRISPRpredSEQ"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "Rafid013"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 72375,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 115,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "PowerShell",
        "size": 94,
        "type": "Programming_language",
        "value": "PowerShell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Rafid013/CRISPRpredSEQ/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "parent_header": [
          "CRISPRpred(SEQ)"
        ],
        "type": "Text_excerpt",
        "value": "Download anaconda for python 3.7 version from this [link](https://www.anaconda.com/distribution/#download-section) and install anaconda3. Open a new conda environment (using the command \"conda create --name myenv\", replace myenv with the preferred environment name). Then activate the environment (using the command \"conda activate myenv\", replace myenv with the preferred environment name) and install the dependencies (run the script dependencies.sh (for linux) or dependencies.ps1 (for windows)) or install them separately-\n* pandas 0.24.2 or above\n* numpy 1.16.2 or above\n* scikit-learn 0.20.3 or above\n* pytables 3.5.1 or above"
      },
      "source": "https://raw.githubusercontent.com/Rafid013/CRISPRpredSEQ/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running the Experiments",
        "parent_header": [
          "CRISPRpred(SEQ)"
        ],
        "type": "Text_excerpt",
        "value": "Run the python files in the following order-\n1. split_into_folds.py\n2. generate_features_folds.py\n3. generate_feature_folds_without_hek293_loco.py\n\nYou only have to run the codes mentioned above once unless any of the generated files are deleted (No need to run these 3 codes before each experiment)\n\nTo reproduce the results of experimental setup A, B or C run the following files-\n1. experimentA.py or experimentB.py or experimentC.py (depending on the experimental result you want to reproduce)\n2. process_cv_logs.py (this is for experiments B and C only, enter B or C when prompted, run this file to get the detailed result of cross validation, the produced result will be found in Results/gridsearch_roc_without_gapped_result.csv)\n3. test_experiments_AC.py (enter A, B or C when prompted)\n4. calculate_avg_roc_AC.py (enter A, B or C when prompted)\n\nTo reproduce the results of experimental setup D, E or F run the following files-\n1. experimentD.py or experimentE.py or experimentF.py\n2. test_experiment_without_hek293_DF.py (enter D, E or F when prompted)\n3. calculate_avg_roc_without_hek293_DF.py (enter D, E or F when prompted)\n\nTo reproduce the results of experiments on DeepHF data-\n1. Install thudersvm for gpu\n2. Run generate_features_deephf.py\n3. Run deephf_A.py or deephf_B.py or deephf_C.py\n"
      },
      "source": "https://raw.githubusercontent.com/Rafid013/CRISPRpredSEQ/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 13:22:16",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ]
}