{
  "application_domain": [
    {
      "confidence": 15.62,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How to cite",
        "parent_header": [
          "ECCsplorer pipeline"
        ],
        "type": "Text_excerpt",
        "value": "Mann, L., Seibt, K.M., Weber, B. , Heitkam, T. ECCsplorer: a pipeline to detect extrachromosomal circular DNA (eccDNA) from next-generation sequencing data. BMC Bioinformatics 23, 40 (2022). https://doi.org/10.1186/s12859-021-04545-2\n"
      },
      "source": "https://raw.githubusercontent.com/crimBubble/ECCsplorer/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/crimBubble/ECCsplorer"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-02-17T13:09:37Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-11-16T02:30:16Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "The ECCsplorer is a bioinformatics pipeline for the automated detection of extrachromosomal circular DNA (eccDNA) from paired-end read data of amplified circular DNA."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9557897726932483,
      "result": {
        "original_header": "Authors",
        "type": "Text_excerpt",
        "value": "Institute of Botany, Technische Universit\u00e4t Dresden, 01069 Dresden, Germany\n \n"
      },
      "source": "https://raw.githubusercontent.com/crimBubble/ECCsplorer/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9969409507556491,
      "result": {
        "original_header": "What is ECCsplorer",
        "type": "Text_excerpt",
        "value": "The ECCsplorer is a bioinformatics pipeline for the automated detection of extrachromosomal circular DNA from paired-end read data of amplified circular DNA. \n"
      },
      "source": "https://raw.githubusercontent.com/crimBubble/ECCsplorer/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/crimBubble/ECCsplorer/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/crimBubble/ECCsplorer/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "crimBubble/ECCsplorer"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ECCsplorer pipeline"
      },
      "source": "https://raw.githubusercontent.com/crimBubble/ECCsplorer/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://user-images.githubusercontent.com/45664228/112352923-80acf380-8ccb-11eb-94a1-788a917bd89a.png"
      },
      "source": "https://raw.githubusercontent.com/crimBubble/ECCsplorer/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://user-images.githubusercontent.com/45664228/112352695-46dbed00-8ccb-11eb-9a01-e06a44b0203f.png"
      },
      "source": "https://raw.githubusercontent.com/crimBubble/ECCsplorer/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Installation instructions #\n-------------------------------------------------------------------------------\n\nHere you find detailed installation instructions for:\n\n1. Installation using conda envs (quick-guide)\n2. Installation using conda envs (detailed step-by-setp instructions)\n3. Manual installation (old)\n\n\n### 1. Installation using conda envs (quick-guide)\n\n```bash\ngit clone https://github.com/crimBubble/ECCsplorer\n\ncd ECCsplorer\n```\n\nInstallation of dependencies can be done using a [conda environment](https://docs.conda.io/projects/conda/en/latest/). The required environment can be prepared using the following command (includes dependencies for RepeatExplorer2, solving the environment may take a while):\n\n```bash\nconda env create -f environment.yml\n```\n\nIf the creation of the environment fails due to dependency errors, try:\n\n```bash\nCONDA_CHANNEL_PRIORITY=flexible conda env create -f environment.yml\n```\n\nActivate the environment:\n\n```bash\nconda activate eccsplorer\n```\n\nInstall RepeatExplorer2 following the [manual](https://bitbucket.org/petrnovak/repex_tarean/src/devel/) without(!) creating a new conda environment.\n\nEdit the \"Locations of 3rd party tools (PATH)\" for Trimmomatic and RepeatExploer2 in *ECCsplorer/lib/config.py* to match your installation.\n\n\n### 2. Installation using conda envs (detailed step-by-setp instructions)\n\nThe following instructions are a step-by-step tutorial with no previous knowledge required. The installation is based on the use of conda environments. If you have already installed conda on your machine continue from step 2.\n\nThese installation instructions are tested for Linux Ubuntu 20.04 LTS but should work on any similar system with minimal hardware requirements = CPU: 6 cores or higher; RAM: 16 GB; ROM: 50 GB. Depending on your data the minimal requirements to successfully run the ECCsplorer pipeline might be substantially higher. \n\n1. Install the environment manager conda. (Note: Here we use miniconda3, but anaconda3 will work as well. You only will have to adjust the commands accordingly.)\nThe first command line downloads the latest version of miniconda3. The next line makes the installation file runnable. The third line runs the installation file. You will have to confirm several installation steps by either pressing enter or typing \u2018yes\u2019 and pressing enter. After the installation finished you apply the changes to the terminal using the last command.\n```bash\nwget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\nchmod +x Miniconda3-latest-Linux-x86_64.sh\n./Miniconda3-latest-Linux-x86_64.sh -u\nsource ~/.bashrc\n```\nAfter the installation your command line should look similar to the following (Note the base-statement in the beginning): ```(base) user@machine:~/Downloads$```\n\n2. Install Git a version control software. It is here used to download the most recent version of the ECCsplorer pipeline.\n```bash\nconda install -c conda-forge git -y\n```\n3. Install Mamba an environment solving tool. Solving environments is also possible with conda itself but mamba is a lot faster.\n```bash\nconda install -c conda-forge mamba -y\n```\n4. Download the ECCsplorer pipeline from GitHub and place the files in the appropriate directory (Note: adjust the commands if you use anaconda3 instead of miniconda3. This includes to adjust the ```TRIM_ADAPTER_PATH``` variable in the ```lib/config.py``` file). The ECCsplorer files are downloaded with the git command and the environment is created with mamba. The last steps place the ECCsplorer.py file in the ```$PATH``` and make it runnable.\n```bash\ncd ~/Documents\ngit clone https://github.com/crimBubble/ECCsplorer\ncd ECCsplorer\nmamba env create -f environment.yml\n```\nIf the creation of the environment fails due to dependency errors, try:\n\n```bash\nCONDA_CHANNEL_PRIORITY=flexible mamba env create -f environment.yml\n```\n\n```bash\ncd ~/miniconda3/envs/eccsplorer/bin\nmv ~/Documents/ECCsplorer/ ECCsplorer\nln -s ECCsplorer/ECCsplorer.py eccsplorer\nchmod +x eccsplorer\n```\n5. Download and install the RepeatExplorer2 pipeline (Note: You need administrator \u201csudo\u201d rights to install the necessary dependencies). You again will have to confirm several installation steps by either pressing enter or typing \u2018y\u2019 and pressing enter.\n```bash\ncd ~/miniconda3/envs/eccsplorer/bin\ngit clone https://bitbucket.org/petrnovak/repex_tarean.git\ncd repex_tarean\nconda activate eccsplorer\nmake\nsudo dpkg --add-architecture i386\nsudo apt-get update\nsudo apt-get install libc6:i386 libncurses5:i386 libstdc++6:i386\ncd .. \nln -s repex_tarean/seqclust seqclust\nchmod +x seqclust\nconda deactivate\n```\n6. Download the test dataset to confirm your ECCsplorer installation.\n```bash\nconda activate eccsplorer\ncd ~/miniconda3/envs/eccsplorer/bin/ECCsplorer/testdata\nefetch -db nucleotide -id CM009438.1 -seq_start 8971216 -seq_stop 9147030 -format fasta > chr1.fa\nefetch -db nucleotide -id CM009440.1 -seq_start 44915437 -seq_stop 45118630 -format fasta > chr2.fa\nefetch -db nucleotide -id CM009444.1 -seq_start 23920431 -seq_stop 24120625 -format fasta > chr3.fa\ncat chr1.fa chr2.fa chr3.fa | awk '/^>/{print \">chr\" ++i; next}{print}' > RefGenomeSeq.fa\nrm chr1.fa chr2.fa chr3.fa\nefetch -db nucleotide -id JX455085.1 -format fasta > RefSeq_DB.fa\nconda deactivate\n```\n7. Confirm the successful installation by running the ECCsplorer pipeline with the test dataset.\n```bash\nconda activate eccsplorer\ncd ~/miniconda3/envs/eccsplorer/bin/ECCsplorer/\neccsplorer testdata/aDNA_R1.fastq testdata/aDNA_R2.fastq testdata/gDNA_R1.fastq testdata/gDNA_R2.fastq --reference_genome testdata/RefGenomeSeq.fa --database testdata/RefSeq_DB.fa --output_dir testrun --trim_reads tru3 --read_count 1000\nconda deactivate\n```\n\nIf the installation was successful, the pipline will finish with the statement: ```INFO: Thanks for using ECCsplorer!```. You can find the exemplary output files in the ```test_run``` directory.\n\n8. (Optional) Install seqtk a fast and lightweight tool for processing sequences. This speeds up the running time for some steps in the pipeline.\n```bash\nconda install -c bioconda seqtk -y\n```\n\n\n### 3. Manual installation\n\nOnce you have downloaded the pipeline and installed python packages, R libraries and 3rd party tools, the ECCsplorer.py script can be run in place. Optionally, the pipeline directory can be added to the ```$PATH``` environment variable.\n\nPython (3.4 or higher) is required with the additional packages:\n\n- numpy\n- biopython\n- scipy\n- pyRserve\n\nInstall the additional python packages using the pip:\n```bash\n$cd /.../ECCsplorer # pipeline directory \n$pip install -r requirements.txt\n$pip3 install -r requirements.txt \n```\n\nR (3.4.3 or higher) is required with the additional libraries:\n\n- ggplot2\n- ggrepel\n- grid & gridExtra\n- dplyr\n\nInstall the additional libraries using: \n```r\ninstall.packages(c(\"ggplot2\", \"ggrepel\", \"grid\", \"gridExtra\", \"dplyr\"))\n```\n\n### Third party tool requiered\n\nInstall 3rd party tools following their installation instructions:\n\n- [NCBI blast+ (v2.2.28 or higher)](https://blast.ncbi.nlm.nih.gov/Blast.cgi?CMD=Web&PAGE_TYPE=BlastDocs&DOC_TYPE=Download)\n- [Trimmomatic](http://www.usadellab.org/cms/?page=trimmomatic) (optional)\n    - needed for using -trm/--trim_reads option and using compressed files as input.\n- [segemehl (including haarz)](https://www.bioinf.uni-leipzig.de/Software/segemehl/)\n- [samtools (1.9 or higher)](https://github.com/samtools/samtools) \n- [bedtools (v2.28.0 or higher)](https://bedtools.readthedocs.io/en/latest/content/installation.html)\n- [RepeatExplorer2](https://bitbucket.org/petrnovak/repex_tarean/src/devel/)\n- [seqtk](https://github.com/lh3/seqtk) (optional)\n    - improves performance for file convertion, but not essential.\n\nAfter installing 3rd party tools you might need to add them to the ```$PATH``` environment variable or specify the location of their executables in the lib/config.py file (for details see manual). \nThe ECCsplorer pipeline will check if all 3rd party tools are available before starting its modules.\n"
      },
      "source": "https://raw.githubusercontent.com/crimBubble/ECCsplorer/master/tutorials/Installation_instructions.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "How to install ECCsplorer",
        "parent_header": [
          "ECCsplorer pipeline"
        ],
        "type": "Text_excerpt",
        "value": "see [Installation instructions](https://github.com/crimBubble/ECCsplorer/blob/master/tutorials/Installation_instructions.md).\n"
      },
      "source": "https://raw.githubusercontent.com/crimBubble/ECCsplorer/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/crimBubble/ECCsplorer/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "circular-dna, eccdna"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "GNU General Public License v3.0",
        "spdx_id": "GPL-3.0",
        "type": "License",
        "url": "https://api.github.com/licenses/gpl-3.0",
        "value": "https://api.github.com/licenses/gpl-3.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ECCsplorer"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "crimBubble"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 182372,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CSS",
        "size": 530,
        "type": "Programming_language",
        "value": "CSS"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/crimBubble/ECCsplorer/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "crimBubble",
          "type": "User"
        },
        "date_created": "2023-10-04T11:13:03Z",
        "date_published": "2024-04-15T09:11:41Z",
        "description": "ECCsplorer version 1.1 \r\n\r\nRelease matches the version used in:\r\n\r\nMann, L., Seibt, K.M., Weber, B. , Heitkam, T. ECCsplorer: a pipeline to detect extrachromosomal circular DNA (eccDNA) from next-generation sequencing data. BMC Bioinformatics 23, 40 (2022). https://doi.org/10.1186/s12859-021-04545-2\r\n\r\nIncludes minor bugfixes.",
        "html_url": "https://github.com/crimBubble/ECCsplorer/releases/tag/v2022.01.1.1",
        "name": "ECCsplorer version 1.1",
        "release_id": 151133297,
        "tag": "v2022.01.1.1",
        "tarball_url": "https://api.github.com/repos/crimBubble/ECCsplorer/tarball/v2022.01.1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/crimBubble/ECCsplorer/releases/151133297",
        "value": "https://api.github.com/repos/crimBubble/ECCsplorer/releases/151133297",
        "zipball_url": "https://api.github.com/repos/crimBubble/ECCsplorer/zipball/v2022.01.1.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 05:47:16",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 18
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How to use ECCsplorer",
        "parent_header": [
          "ECCsplorer pipeline"
        ],
        "type": "Text_excerpt",
        "value": "Find detailed instructions on how to use the ECCsplorer pipeline here: [Mini-workshop (usage of ECCsplorer)](https://github.com/crimBubble/ECCsplorer/blob/master/tutorials/Mini-workshop.md) and the accompanying [Youtube-video](https://www.youtube.com/watch?v=0Z6fYV4voiM).\n\nECCsplorer is started over the linux command line interface.\n\nMinimum data requirements\n\n1. Paired-end read data (FASTA/Q) from amplified (phi29 polymerase) circular DNA from the organism of interest and a reference (genome) sequence (FASTA).\nor\n\n2. Paired-end read data (FASTA/Q) from amplified (phi29 polymerase) circular DNA from the organism of interest and paired-end read data (FASTA/Q) of a control (either non-amplified, or amplified from different treatment or organism).\n\nRecommended data\n\n3. Paired-end read data (FASTA/Q) from amplified (phi29 polymerase) circular DNA from the organism of interest, paired-end read data (FASTA/Q) of a control (either non-amplified, or amplified from different treatment or organism) and a reference (genome) sequence (FASTA).\n"
      },
      "source": "https://raw.githubusercontent.com/crimBubble/ECCsplorer/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "ECCsplorer command line options",
        "parent_header": [
          "ECCsplorer pipeline",
          "How to use ECCsplorer"
        ],
        "type": "Text_excerpt",
        "value": "```bash\npython ECCsplorer.py <read_files> [optional arguments]\n```\nShort read paired-end sequencing data might be in FASTA or (compressed) FASTQ format in separated files. For usage specify either second/control read data or a reference (genome) sequence (for details see manual):\n\n```bash\npython ECCsplorer.py readsA1.fa/q readsA2.fa/q readsB1.fa/q readsB2.fa/q\n```\nor \n```bash\npython ECCsplorer.py readsR1.fa/q readsR2.fa/q -ref sequence.fa\n```\n\nThe first command will run the clustering module the second command will run the mapping module. Best results are achieved by inclusion of the comparative module by providing control read data and reference sequence (for details see manual), using:\n\n```bash\npython ECCsplorer.py readsA1.fa/q readsA2.fa/q readsB1.fa/q readsB2.fa/q -ref sequence.fa [optional arguments] \n```\nFor an overview on all optional arguments use:\n\n```bash\n python ECCsplorer.py \u2013h/--help.\n```\n"
      },
      "source": "https://raw.githubusercontent.com/crimBubble/ECCsplorer/master/README.md",
      "technique": "header_analysis"
    }
  ]
}