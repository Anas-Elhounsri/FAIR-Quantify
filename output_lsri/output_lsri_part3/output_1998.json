{
  "application_domain": [
    {
      "confidence": 32.56,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/semeniuta/EPypes"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2017-10-27T12:54:40Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-09-15T14:26:40Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Python library for developing data processing algorithms as computational graphs and their integration with publish-subscribe systems"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9979887230581106,
      "result": {
        "original_header": "EPypes",
        "type": "Text_excerpt",
        "value": "EPypes (for *event-driven piplines*) is a Python library for developing data processing algorithms in a form of computational graphs and their integration with distributed systems based on publish-subscribe communication. The initial use case of EPypes is computer vision alogorithms development, although it is suitable for any algorithm that can be expressed as a directed acyclic graph.  \nEPypes facilitates flexibility of algorithm prototyping, as well as provides a structured approach to managing algorithm logic and exposing the developed pipelines as a part of on-line publish-subscribe systems. Currently, ZeroMQ middleware is supported, with data serialization based on Protocol Buffers.\n \n"
      },
      "source": "https://raw.githubusercontent.com/semeniuta/EPypes/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.989733382239241,
      "result": {
        "original_header": "Modules",
        "type": "Text_excerpt",
        "value": " * `compgraph`, `graph` -- primitives for construction and execution of computational graphs\n * `pipeline`, `node` -- primitives for extendind computational graphs with additional functionality, specifically the reactive behavior\n * `zeromq` -- adapters to ZeroMQ middleware\n * `reactivevision` -- functionality for creation of reactive computer vision components\n \n"
      },
      "source": "https://raw.githubusercontent.com/semeniuta/EPypes/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/semeniuta/EPypes/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/semeniuta/EPypes/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "semeniuta/EPypes"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "EPypes"
      },
      "source": "https://raw.githubusercontent.com/semeniuta/EPypes/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation and requirements",
        "parent_header": [
          "EPypes"
        ],
        "type": "Text_excerpt",
        "value": "The core dependencies for the EPypes codebase include `pyzmq`, `protobuf`, and `networkx>=2.0`. They are listed in the `requirements.txt` file, and can be installed in one of the following ways:\n\n```bash\n# using pip\n$ pip install -r requirements.txt\n\n# using conda\n$ while read requirement; do conda install --yes $requirement -c conda-forge; done < requirements.txt\n```\n"
      },
      "source": "https://raw.githubusercontent.com/semeniuta/EPypes/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9716780727637135,
      "result": {
        "original_header": "Modules",
        "type": "Text_excerpt",
        "value": "The most important modules include: \n"
      },
      "source": "https://raw.githubusercontent.com/semeniuta/EPypes/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/semeniuta/EPypes/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "computation-graph, computer-vision, pipeline, python, python-library, zeromq"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "BSD 3-Clause \"New\" or \"Revised\" License",
        "spdx_id": "BSD-3-Clause",
        "type": "License",
        "url": "https://api.github.com/licenses/bsd-3-clause",
        "value": "https://api.github.com/licenses/bsd-3-clause"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "EPypes"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "semeniuta"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 40418,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/semeniuta/EPypes/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation and requirements",
        "parent_header": [
          "EPypes"
        ],
        "type": "Text_excerpt",
        "value": "The core dependencies for the EPypes codebase include `pyzmq`, `protobuf`, and `networkx>=2.0`. They are listed in the `requirements.txt` file, and can be installed in one of the following ways:\n\n```bash\n# using pip\n$ pip install -r requirements.txt\n\n# using conda\n$ while read requirement; do conda install --yes $requirement -c conda-forge; done < requirements.txt\n```\n"
      },
      "source": "https://raw.githubusercontent.com/semeniuta/EPypes/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 07:11:18",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage examples",
        "parent_header": [
          "EPypes"
        ],
        "type": "Text_excerpt",
        "value": "The example below demostrates construction and execution of a computational graph. The demonstrated algorithm accepts a BGR image, converts it to grayscale, blurs the grayscale, and feeds the blurred image to the Canny edge detector.\n\n```python\nimport cv2\nfrom epypes.compgraph import CompGraph\nfrom epypes.compgraph import CompGraphRunner\n\ndef grayscale(im):\n    return cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)\n\ndef gaussian_blur(im, kernel_size):\n    return cv2.GaussianBlur(im, (kernel_size, kernel_size), 0)\n\nif __name__ == '__main__':\n\n    func_dict = {\n        'grayscale': grayscale,\n        'canny': cv2.Canny,\n        'blur': gaussian_blur\n    }\n\n    func_io = {\n        'grayscale': ('image', 'image_gray'),\n        'blur': (('image_gray', 'blur_kernel'), 'image_blurred'),\n        'canny': (('image_blurred', 'canny_lo', 'canny_hi'), 'edges'),\n    }\n\n    hparams = {\n        'blur_kernel': 11,\n        'canny_lo': 70,\n        'canny_hi': 200\n    }\n\n    cg = CompGraph(func_dict, func_io)\n    runner = CompGraphRunner(cg, hparams)\n\n    im = cv2.imread('my_image.jpg', cv2.IMREAD_COLOR)\n    runner.run(image=im)\n```\n\nFor more complex computational graphs examples, refer to the following Jupyter notebooks:\n\n * [Simple lane lines detection (Udacity CarND project)](https://github.com/semeniuta/CarND-LaneLines-P1/blob/master/P1_1_Pipeline_demo.ipynb)\n * [More advanced lane lines detection (Udacity CarND project)](https://github.com/semeniuta/CarND-Advanced-Lane-Lines/blob/master/7_pipeline_prototyping_3.ipynb)\n"
      },
      "source": "https://raw.githubusercontent.com/semeniuta/EPypes/master/README.md",
      "technique": "header_analysis"
    }
  ]
}