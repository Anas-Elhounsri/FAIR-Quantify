{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "type": "Text_excerpt",
        "value": "Hao Zhang, Qixin Chang, Zekun Yin, Xiaoming Xu, Yanjie Wei, Bertil Schmidt, Weiguo Liu, RabbitV: fast detection of viruses and microorganisms in sequencing data on multi-core architectures, Bioinformatics, 2022;, btac187, https://doi.org/10.1093/bioinformatics/btac187\n"
      },
      "source": "https://raw.githubusercontent.com/RabbitBio/RabbitV/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/RabbitBio/RabbitV"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-12-28T04:39:02Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-04-27T04:59:56Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RabbitV: fast detection of viruses and microorganisms in sequencing data on multi-core architectures"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9990682223944579,
      "result": {
        "original_header": "RabbitV",
        "type": "Text_excerpt",
        "value": "RabbitV is a highly optimized and practical toolkit for the detection of viruses and microorganisms in sequencing data. Itcan handle large-scale datasets such as bacterial reference genomes oncommonly used servers with limited compute resources. \n"
      },
      "source": "https://raw.githubusercontent.com/RabbitBio/RabbitV/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9505985238860116,
      "result": {
        "original_header": "The input of RabbitV",
        "type": "Text_excerpt",
        "value": "If none of (`k-mer`, `k-mer collection`, `genomes`) files is specified, RabbitV will try to load the SARS-CoV-2 Genomes/k-mer files in the `data` folder to detect SARS-CoV-2 sequences. \nBesides the HTML/JSON reports, RabbitV also can output the sequence reads that contains any unique k-mer or can be mapped to any of the target reference genomes. The output data:\n* is in FASTQ format\n* is clean data after quality filtering\n* the file names can be specified by `-o` for SE data, or `-o` and `-O` for PE data. \nIf you want to identify if the sequencing sample contained certain viruses and microorganisms, RabbitV support the format of [fastv](https://github.com/OpenGene/fastv).\nYou can download `k-mer` files of viruses from  http://opengene.org/uniquekmer/viral/index.html, \nif you want work with kmer collections, run [RabbitUniq](https://github.com/RabbitBio/RabbitUniq) (An ultra-fast and disk-based unique k-mer generater) to get the k-mer collection file first.\nBoth binary-based file format and character-based file are supported.\n \n"
      },
      "source": "https://raw.githubusercontent.com/RabbitBio/RabbitV/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9800923902972206,
      "result": {
        "original_header": "options",
        "type": "Text_excerpt",
        "value": "Key options:\n```\n  -i, --in1                                        read1 input file name (string [=])\n  -I, --in2                                        read2 input file name (string [=])\n  -o, --out1                                       file name to store read1 with on-target sequences (string [=])\n  -O, --out2                                       file name to store read2 with on-target sequences (string [=])\n  -c, --kmer_collection                            the unique k-mer collection file in fasta format, see an example: http://opengene.org/kmer_collection.fasta (string [=])\n  -k, --kmer                                       the unique k-mer file of the detection target in fasta format. data/SARS-CoV-2.kmer.fa will be used if none of k-mer/Genomes/k-mer_Collection file is specified (string [=])\n  -g, --genomes                                    the genomes file of the detection target in fasta format. data/SARS-CoV-2.genomes.fa will be used if none of k-mer/Genomes/k-mer_Collection file is specified (string [=])\n  -p, --positive_threshold                         the data is considered as POSITIVE, when its mean coverage of unique kmer >= positive_threshold (0.001 ~ 100). 0.1 by default. (float [=0.1])\n  -d, --depth_threshold                            For coverage calculation. A region is considered covered when its mean depth >= depth_threshold (0.001 ~ 1000). 1.0 by default. (float [=1])\n  -E, --ed_threshold                               If the edit distance of a sequence and a genome region is <=ed_threshold, then consider it a match (0 ~ 50). 8 by default. (int [=8])\n      --long_read_threshold                        A read will be considered as long read if its length >= long_read_threshold (100 ~ 10000). 200 by default. (int [=200])\n      --read_segment_len                           A long read will be splitted to read segments, with each <= read_segment_len (50 ~ 5000, should be < long_read_threshold). 100 by default. (int [=100])\n      --bin_size                                   For coverage calculation. The genome is splitted to many bins, with each bin has a length of bin_size (1 ~ 100000), default 0 means adaptive. (int [=0])\n      --kc_coverage_threshold                      For each genome in the k-mer collection FASTA, report it when its coverage > kc_coverage_threshold. Default is 0.01. (double [=0.01])\n      --kc_high_confidence_coverage_threshold      For each genome in the k-mer collection FASTA, report it as high confidence when its coverage > kc_high_confidence_coverage_threshold. Default is 0.7. (double [=0.7])\n      --kc_high_confidence_median_hit_threshold    For each genome in the k-mer collection FASTA, report it as high confidence when its median hits > kc_high_confidence_median_hit_threshold. Default is 5. (int [=5])\n  -j, --json                                       the json format report file name (string [=RabbitV.json])\n  -h, --html                                       the html format report file name (string [=RabbitV.html])\n  -R, --report_title                               should be quoted with ' or \", default is \"RabbitV report\" (string [=RabbitV report])\n  -w, --thread                                     worker thread number, default is 4 (int [=4])\n  -K, --kmer_len                                   the uniuqe k-mer length, default is 25 (int [=25])\n```\nOther I/O options:\nBASH2*\nQC and quality pruning options:\nBASH3*\n \n"
      },
      "source": "https://raw.githubusercontent.com/RabbitBio/RabbitV/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/RabbitBio/RabbitV/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/RabbitBio/RabbitV/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RabbitBio/RabbitV"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RabbitV"
      },
      "source": "https://raw.githubusercontent.com/RabbitBio/RabbitV/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/RabbitBio/RabbitV/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 OpenGene - Open Source Genetics Toolbox\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
      },
      "source": "https://raw.githubusercontent.com/RabbitBio/RabbitV/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RabbitV"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "RabbitBio"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 572244,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 184603,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "JavaScript",
        "size": 6643,
        "type": "Programming_language",
        "value": "JavaScript"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 1351,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 808,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RabbitBio/RabbitV/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "installation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 00:16:39",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 8
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick example for SARS-CoV-2 identification",
        "type": "Text_excerpt",
        "value": "* get RabbitV and use following command for testing: \n\n```shell\n# make sure that SARS-CoV-2.kmer.fa and SARS-CoV-2.genomes.fa are in the ./data folder\n./RabbitV -i ./test/testdata.fq\n```\n"
      },
      "source": "https://raw.githubusercontent.com/RabbitBio/RabbitV/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "compile from source",
        "parent_header": [
          "Get RabbitV"
        ],
        "type": "Text_excerpt",
        "value": "```shell\n# step 1: get the code\ngit clone https://github.com/RabbitBio/RabbitV\n\n# step 2: build\ncd RabbitV\nmake\n```\n"
      },
      "source": "https://raw.githubusercontent.com/RabbitBio/RabbitV/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "analyze metagenomics sequencing (mNGS) data",
        "parent_header": [
          "Tutorials"
        ],
        "type": "Text_excerpt",
        "value": "1. download or build RabbitV\n2. build kmer collection data:\n\n```shell\n${RabbitUniq_PATH }/RabbitUniq.py \\\n  --infile_list  ${infile_list} \\\n  --outfile  ${outname}.bin \\\n  -n 20 -k 25 -b 2000 \n```\n3. run RabbitV:\n```shell\n./RabbitV -i filename.fastq -c kmercollect.bin\n```"
      },
      "source": "https://raw.githubusercontent.com/RabbitBio/RabbitV/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "identify SARS-CoV-2",
        "parent_header": [
          "Tutorials"
        ],
        "type": "Text_excerpt",
        "value": "1. download or build RabbitV\n2. make sure that SARS-CoV-2.kmer.fa and SARS-CoV-2.genomes.fa are in the ./data folder.\n3. run RabbitV:\n```shell\n./RabbitV -i filename.fastq -k SARS-CoV-2.kmer.fa -g SARS-CoV-2.genomes.fa\n```"
      },
      "source": "https://raw.githubusercontent.com/RabbitBio/RabbitV/master/README.md",
      "technique": "header_analysis"
    }
  ]
}