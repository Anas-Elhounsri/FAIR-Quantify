{
  "application_domain": [
    {
      "confidence": 14.01,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "References",
        "parent_header": [
          "ViralRecall"
        ],
        "type": "Text_excerpt",
        "value": "ViralRecall: A Flexible Command-Line Tool for the Detection of Giant\nVirus Signatures in Omic Data, FO Aylward and M Moniruzzaman, Viruses,\n2021; 13(2):150. <https://doi.org/10.3390/v13020150>.\n\nFor questions or comments feel free to email Frank Aylward at faylward\n*at* vt dot edu\n\nThis tool requires Prodigal and HMMER3. Their citations are:\n\nHyatt et al. \u201cProdigal: prokaryotic gene recognition and translation\ninitiation site identification\u201d. BMC bioinformatics, 2010.\n\nEddy, \"A new generation of homology search tools based on probabilistic\ninference\". Genome Informatics, 2009.\n"
      },
      "source": "https://raw.githubusercontent.com/faylward/viralrecall/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/faylward/viralrecall"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-11-14T19:15:53Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-05T13:48:34Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Detection of NCLDV signatures in 'omic data"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9575010828356846,
      "result": {
        "original_header": "ViralRecall",
        "type": "Text_excerpt",
        "value": "ViralRecall is a flexible command-line tool for detecting signatures of\ngiant viruses (NCLDV) in genomic data. Version 2 has been updated to\nfocus more on NCLDV compared to version 1, but the original options are\nstill available.\n \n"
      },
      "source": "https://raw.githubusercontent.com/faylward/viralrecall/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9259742138910578,
      "result": {
        "original_header": "Options",
        "type": "Text_excerpt",
        "value": "There are several parameters you can change in viralrecall depending on\nyour preferences and the data you're analyzing. The important parameters\nthat will influence the results are: \n**-db, --database** This is the database usef for viral detection. The\ndefault is the GVOG database (also can be specifified with \"GVOG\").\n\"VOG\" can be specified for the vogdb database, and \"marker\" to only\nsearch against 10 NCLDV marker genes. GVOGs are more useful for\nNCLDV-specific searches. The \"marker\" option is much faster and may be\nuseful for quickly screening large datasets. \n**-s, --minscore** This is the mean score that a genomic regions needs\nto have in order to pass the filter and get reported as a viral region.\nThe score is calculated from the HMMER3 scores, with higher scores\nindicating more and better matches to the GVOG database, and lower\nscores indicating more and higher matches to the Pfam database. The\ndefault is 10. \n**-w, --window** Size of the sliding window to use for calculating\nmoving averages. A smaller window may help predict short viral regions,\nbut may split large viral regions into several pieces. \n**-m, --minsize** Minimum size, in kilobases, of the viral regions to\nreport. \n**-g, --minvog** Minimum number of hits against the GVOG database that\nmust be recorded in a region in order for it to be reported (larger\nvalues == higher confidence). \n**-c, --contiglevel** If this option is used, mean ViralRecall scores\nwill be provided for the input contigs rather than viral regions. This\nis useful for screening contigs for viral signatures. \n**-r, --redo** If you have already run ViralRecall and you want to\nre-run it with different parameters, you can use the -r flag to avoid\nre-running Prodigal and HMMER, which are the most time-consuming steps. \n**-b, --batch** Use this flag if the input is a folder of .fna files to\nsearch, rather than a single .fna file. \nFor example, if we wanted to recover regions of a eukaryotic contig with\nsignatures of NCLDV, we could use the following command: \nIf we want to quickly re-do the above analysis with different\nparameters, but without re-doing gene predictions and HMMER3 searches,\nwe can use the -r flag: \nMaybe we want to re-do the analysis using a different e-value. The\ndefault is 1e-10, which is fairly stringent, so we can relax it a bit: \n"
      },
      "source": "https://raw.githubusercontent.com/faylward/viralrecall/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9085243591475717,
      "result": {
        "original_header": "Batch mode",
        "type": "Text_excerpt",
        "value": "If you have many sequences you wish to test you can put them all in a\nfolder and use batch mode. Here the input (-i) should point to a folder\nwith .fna files in it. Basic usage is: \nAll of the output files should have their own folder in the folderout\ndirectory. You can also use the -b flag with the -r flag for quick\nre-calculations.\n \n"
      },
      "source": "https://raw.githubusercontent.com/faylward/viralrecall/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9970647809758425,
      "result": {
        "original_header": "Miscellaneous",
        "type": "Text_excerpt",
        "value": "Prodigal is intended to predict genes on prokaryotic genomes, and it\ntherefore will draw an error if used on very long eukaryotic contigs (\\>\n32 Mbp in length). I've re-compiled a binary of Prodigal that will run\non longer contigs, and this is available in the bin/ folder of this\nGitHub repo. This is NOT the default version of prodigal that is used -\nif you wish to use this binary you will need to make sure it is located\nin your PATH (and not any other version of prodigal you may have\ninstalled). \n"
      },
      "source": "https://raw.githubusercontent.com/faylward/viralrecall/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation and Database Download",
        "parent_header": [
          "ViralRecall"
        ],
        "type": "Text_excerpt",
        "value": "Please ensure you are using \\> Python 3.5.2 and have the appropriate\npython modules installed. If this is an issue please create a Python\nenvironment using conda (see here\n<https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html>)\n\nTo start: \\> git clone <https://github.com/faylward/viralrecall>\n\n> cd viralrecall\n\nViralRecall was tested on Ubuntu 16.04 and should work on most\nUnix-based systems. To see the help menu use: \\> python viralrecall.py\n-h\n\nViralrecall can be run using either of two viral HMM databases: 1)\nGVOGs, a custom set of Giant Virus Orthologous Groups that are fairly\nspecific to Nucleo-Cytoplasmic Large DNA Viruses (NCLDV), or 2) VOGDB,\nwhich contains a wide collection of viral orthologous groups and is\nuseful for broad characterization of viral signatures.\n\nIn addition to either the GVOG or VOGDB searches, ViralRecall matches\nproteins against the Pfam database (Pfam v. 32), which is a\nbroad-specificity database that detects many protein families that are\ncommon in the genomes of cellular organisms.\n\nThe database files are available for download from Zenodo. To download\nand unpack, navigate to the folder that contains the viralrecall.py\nscript and type:\n\n> wget -O hmm.tar.gz\n> <https://zenodo.org/records/12666277/files/hmm.tar.gz?download=1>\n\nand then\n\n> tar -xvzf hmm.tar.gz\n\nThis should create a hmm/ directory with the appropriate HMM files,\nincluding the gvog.hmm database and the vogdb.hmm database (downloaded\nfrom the vogdb.org website on 12/14/2020). This directory should be\nlocated in the same directory as the acc/ directory and the\nviralrecall.py script.\n\nNote: The GVOG database was updated in May 2021, and it is recommended\nto use this latest version. The new database is substantially smaller,\namong other things, and this helps with runtime. But if you'd like to\naccess the original GVOG database you can do so here:\n<https://zenodo.org/record/4710691/files/hmm.tar.gz?download=1>\n\nAfter you have downloaded and unpacked the database files you should be\nable to run viralrecall.py. To see the help menu you can run: \\> python\nviralrecall.py -h\n"
      },
      "source": "https://raw.githubusercontent.com/faylward/viralrecall/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/faylward/viralrecall/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 12
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/faylward/viralrecall/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "faylward/viralrecall"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ViralRecall"
      },
      "source": "https://raw.githubusercontent.com/faylward/viralrecall/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation and Database Download",
        "parent_header": [
          "ViralRecall"
        ],
        "type": "Text_excerpt",
        "value": "Please ensure you are using \\> Python 3.5.2 and have the appropriate\npython modules installed. If this is an issue please create a Python\nenvironment using conda (see here\n<https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html>)\n\nTo start: \\> git clone <https://github.com/faylward/viralrecall>\n\n> cd viralrecall\n\nViralRecall was tested on Ubuntu 16.04 and should work on most\nUnix-based systems. To see the help menu use: \\> python viralrecall.py\n-h\n\nViralrecall can be run using either of two viral HMM databases: 1)\nGVOGs, a custom set of Giant Virus Orthologous Groups that are fairly\nspecific to Nucleo-Cytoplasmic Large DNA Viruses (NCLDV), or 2) VOGDB,\nwhich contains a wide collection of viral orthologous groups and is\nuseful for broad characterization of viral signatures.\n\nIn addition to either the GVOG or VOGDB searches, ViralRecall matches\nproteins against the Pfam database (Pfam v. 32), which is a\nbroad-specificity database that detects many protein families that are\ncommon in the genomes of cellular organisms.\n\nThe database files are available for download from Zenodo. To download\nand unpack, navigate to the folder that contains the viralrecall.py\nscript and type:\n\n> wget -O hmm.tar.gz\n> <https://zenodo.org/records/12666277/files/hmm.tar.gz?download=1>\n\nand then\n\n> tar -xvzf hmm.tar.gz\n\nThis should create a hmm/ directory with the appropriate HMM files,\nincluding the gvog.hmm database and the vogdb.hmm database (downloaded\nfrom the vogdb.org website on 12/14/2020). This directory should be\nlocated in the same directory as the acc/ directory and the\nviralrecall.py script.\n\nNote: The GVOG database was updated in May 2021, and it is recommended\nto use this latest version. The new database is substantially smaller,\namong other things, and this helps with runtime. But if you'd like to\naccess the original GVOG database you can do so here:\n<https://zenodo.org/record/4710691/files/hmm.tar.gz?download=1>\n\nAfter you have downloaded and unpacked the database files you should be\nable to run viralrecall.py. To see the help menu you can run: \\> python\nviralrecall.py -h\n"
      },
      "source": "https://raw.githubusercontent.com/faylward/viralrecall/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9546186494355045,
      "result": {
        "original_header": "Options",
        "type": "Text_excerpt",
        "value": "**-r, --redo** If you have already run ViralRecall and you want to\nre-run it with different parameters, you can use the -r flag to avoid\nre-running Prodigal and HMMER, which are the most time-consuming steps. \nSo once you finished the hmmer searches you can easily re-calculate\nthings with the -r flag.\n \n"
      },
      "source": "https://raw.githubusercontent.com/faylward/viralrecall/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9075954268355996,
      "result": {
        "original_header": "Batch mode",
        "type": "Text_excerpt",
        "value": "> python viralrecall.py -i examples/testfolder -p folderout -b \n"
      },
      "source": "https://raw.githubusercontent.com/faylward/viralrecall/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9965960424833922,
      "result": {
        "original_header": "Miscellaneous",
        "type": "Text_excerpt",
        "value": "Prodigal is intended to predict genes on prokaryotic genomes, and it\ntherefore will draw an error if used on very long eukaryotic contigs (\\>\n32 Mbp in length). I've re-compiled a binary of Prodigal that will run\non longer contigs, and this is available in the bin/ folder of this\nGitHub repo. This is NOT the default version of prodigal that is used -\nif you wish to use this binary you will need to make sure it is located\nin your PATH (and not any other version of prodigal you may have\ninstalled). \nSome users have noticed errors or warnings involving Pandas, which uses\nslightly different syntax in different Python versions. These can can\nusually be resolved by changing the Python version used to 3.5.4.\n \n"
      },
      "source": "https://raw.githubusercontent.com/faylward/viralrecall/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.892150009186317,
      "result": {
        "original_header": "Options",
        "type": "Text_excerpt",
        "value": "> python viralrecall.py -i examples/arm29B.fna -p test_outdir -s 15 -m\n> 30 -g 10 \n> python viralrecall.py -i examples/arm29B.fna -p test_outdir -s 15 -m\n> 15 -g 15 -w 20 -r \npython viralrecall.py -i examples/arm29B.fna -p test_outdir -s 15 -m 15\n-g 15 -w 20 -r -e 1e-5 \n"
      },
      "source": "https://raw.githubusercontent.com/faylward/viralrecall/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9522132535242822,
      "result": {
        "original_header": "Batch mode",
        "type": "Text_excerpt",
        "value": "> python viralrecall.py -i examples/testfolder -p folderout -b \n"
      },
      "source": "https://raw.githubusercontent.com/faylward/viralrecall/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/faylward/viralrecall/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "genomics, hmmer3, ncldv, nucleocytoviricota, viral-regions, viral-signatures, viruses"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "viralrecall"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "faylward"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 29045,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/faylward/viralrecall/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "parent_header": [
          "ViralRecall"
        ],
        "type": "Text_excerpt",
        "value": "ViralRecall is written in Python 3.5.6 and requires biopython,\nmatplotlib, numpy, and pandas. ViralRecall uses Prodigal and HMMER3 for\nprotein prediction and HMM searches, respectively. Please ensure these\ntools are installed in your PATH before using.\n\nA requirements.yml file is provided in this repo to solve some of the\nissues related to outdated pandas version. The requirements.yml file\nspecifies conda environment dependencies so you don't have to install\neach separately. \nAfter cloning repository, please follow these steps:\n\n> cd viralrecall\n\nand \n\n> conda env create -f requirements.yml\n\nIf you wish to proceed without the requirements.yml file, simply create a conda \nenvironment by typing `conda create -n viralrecall`. In that case you might have\nto install some dependencies yourself. On a Unix system you should be\nable to install these tools with:\n\n> sudo apt install prodigal\n\nand\n\n> sudo apt install hmmer\n\nor if you don't have sudo privileges, you can try with conda:\n\n> conda install prodigal -c bioconda\n\nand\n\n> conda install hmmer -c bioconda\n"
      },
      "source": "https://raw.githubusercontent.com/faylward/viralrecall/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 10:24:45",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 30
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Basic Usage",
        "parent_header": [
          "ViralRecall"
        ],
        "type": "Text_excerpt",
        "value": "To test if ViralRecall will run properly type: \\> python viralrecall.py\n-i examples/arm29B.fna -p test_outdir -t 2 -f\n\nResults should be located in the test_outdir folder. The output folder\nwill contain:\n\n\\*.faa: The proteins predicted from the input file using Prodigal\n\n\\*.fasta: The DNA coding sequence of the predicted proteins from\nProdigal\n\n\\*.full_annot.tsv: A full annotation table of the predicted ORFs. This\nincludes descriptions of the GVOG and Pfam annotations, so it can be\nuseful if you want to look at certain annoatations in more depth.\n\n\\*.vregion.annot.tsv: An annotation of only the regions with some viral\nsignatures\n\n\\*summary.tsv: Summary statistics for the predicted viral regions (or\ncontig-level stats if the -c flag was used). This also includes the\nNCLDV marker output (marker hit: bit score)\n\n\\*.pfamout: Raw output of the Pfam HMMER3 search\n\n\\*.vogout: Raw output of the GVOG or VOGDB HMMER3 search\n\n\\*.markerout: Raw output of the NCLDV marker gene HMMER3 search\n\nAdditionally, for each viral region viralrecall will print out .faa and\n.fna files for the proteins and nucleotide sequences for the regions\nfound. Please be sure to use only .fna files as input.\n"
      },
      "source": "https://raw.githubusercontent.com/faylward/viralrecall/master/README.md",
      "technique": "header_analysis"
    }
  ]
}