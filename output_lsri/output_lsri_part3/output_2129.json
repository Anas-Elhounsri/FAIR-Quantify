{
  "application_domain": [
    {
      "confidence": 42.41,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/SchornacklabSLCU/amfinder"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-06-26T08:08:39Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-10T06:38:50Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "The Automatic Mycorrhiza Finder (AMFinder) allows for automatic computer vision-based identification and quantification of AM fungal colonisation and intraradical hyphal structures on ink-stained root images using convolutional neural networks."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Summary",
        "type": "Text_excerpt",
        "value": "1. [Installation](#install)\n1. [Batch processing (`amf`)](#amf)\n2. [Annotation browser (`amfbrowser`)](#amfbrowser)\n3. [A typical annotation pipeline](#pipeline)\n4. [How to batch stain plant roots?](#staining)\n"
      },
      "source": "https://raw.githubusercontent.com/SchornacklabSLCU/amfinder/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9769954877730345,
      "result": {
        "original_header": "Batch processing (`amf`)<a name=\"amf\"></a>",
        "type": "Text_excerpt",
        "value": "The AMFinder tool `amf` is a batch mode program that predicts fungal structures, converts predictions into annotations, and train neural networks.\nIt is used as follows:\n```\n$ source amfenv/bin/activate\n(amfenv) $ amf <action> <parameters> <images> \n```\nwhere `<action>` is either:\n- `predict`: prediction of fungal colonisation (CNN1) and intraradical hyphal structures (CNN2), \n- `convert`: automatic conversion of predictions to annotations, or\n- `train`: neural network training.\n \n"
      },
      "source": "https://raw.githubusercontent.com/SchornacklabSLCU/amfinder/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9836460503580536,
      "result": {
        "original_header": "Prediction mode<a name=\"amfpred\"></a>",
        "type": "Text_excerpt",
        "value": "This mode is used to predict fungal colonisation (CNN1) and intraradical hyphal structures (CNN2). \nPre-trained networks to be used with the parameter `-net` are available in the folder [`trained_networks`](amf/trained_networks). **AMFinder is looking for trained networks in this folder only**. Below is a list of publicly available networks. The image datasets used to generate them are available on [Zenodo](https://doi.org/10.5281/zenodo.5118948). \n**Are you working with a system that appears challenging for AMFinder?** Please get in touch! We would be happy to help generate specialised CNN1/2 networks and make them widely available to the research community. \n"
      },
      "source": "https://raw.githubusercontent.com/SchornacklabSLCU/amfinder/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9281697585079193,
      "result": {
        "original_header": "Conversion mode<a name=\"amfconv\"></a>",
        "type": "Text_excerpt",
        "value": "This mode is used to convert `amf predict` predictions (i.e. probabilities) to annotations. \n"
      },
      "source": "https://raw.githubusercontent.com/SchornacklabSLCU/amfinder/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9489392408030728,
      "result": {
        "original_header": "Training mode",
        "type": "Text_excerpt",
        "value": "This mode is used to train AMFinder neural networks on different images. All parameters listed below are optional. \n|Short|Long|Description|Default value|\n|-|-|-|-|\n|`-net N`|`--network N`|Use network `N`.|*none*|\n|`-b N`|`--batch_size N`|Use a batch size of `N` tiles.|N = 32|\n|`-k`|`--keep_background`|Do not skip any background tile.|False|\n|`-a`|`--data_augmentation`|Activate data augmentation.|False|\n|`-s`|`--summary`|Save CNN architecture and graph.|False|\n|`-o DIR`|`--outdir DIR`|Save trained model and CNN architecture in `DIR`.|cwd|\n|`-e N`|`--epochs N`|Perform `N` training cycles.|N = 100|\n|`-p N`|`--patience N`|Wait for `N` epochs before early stopping.|N = 12|\n|`-lr X`|`--learning_rate X`|Use `X` as learning rate for the Adam optimiser.|X = 0.001|\n|`-vf N`|`--validation_fraction N`|Use `N` percents of total tiles as validation set.|N = 15%|\n|`-1`|`--CNN1`|Train for root colonisation.|True|\n|`-2`|`--CNN2`|Train for intraradical hyphal structures.|False| \n"
      },
      "source": "https://raw.githubusercontent.com/SchornacklabSLCU/amfinder/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9630261044078315,
      "result": {
        "original_header": "Annotation browser (`amfbrowser`)<a name=\"amfbrowser\"></a>",
        "type": "Text_excerpt",
        "value": "The AMFinder standalone graphical interface `amfbrowser` enables the manual inspection of \npredictions and annotations. This tool can display predictions and \nannotations on top of the corresponding images. It enables users to edit values,\nto browse low-quality predictions, and to perform automatic conversion of `amf`\npredictions to annotations. You can run `amfbrowser` as follows:\n```bash\n$ amfbrowser <parameter> <image>\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/SchornacklabSLCU/amfinder/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9675560121862251,
      "result": {
        "original_header": "A typical annotation pipeline<a name=\"pipeline\"></a>",
        "type": "Text_excerpt",
        "value": "Computer predictions and annotations can be checked and amended by running `amfbrowser` on each image. Although not absolutely necessary, user supervision and validation of computer predictions are recommended for quality control. \n"
      },
      "source": "https://raw.githubusercontent.com/SchornacklabSLCU/amfinder/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9226532875799549,
      "result": {
        "original_header": "How to batch stain plant roots?<a name=\"staining\"></a>",
        "type": "Text_excerpt",
        "value": "An optimised ink-staining protocol with additional clearing is available in [Evangelisti *et al.* (2021)](https://doi.org/10.1111/nph.17697). \n**Batch staining plant roots is essential for high-throughput analyses.** It can be achieved using a hand-crafted device composed of 10 cell strainers (100 \u00b5m nylon mesh) tied together with adhesive sealing film for PCR plates. A single sieve can accommodate a 4-week-old *N. benthamiana* root system. The sieves containing roots are immersed in 10% KOH, water, or ink/vinegar staining solution poured in a plastic lid. Plastic lids are floated in a hot (95\u00b0C) water bath to achieve the desired staining conditions. Sieves are pulled out of the lid containing the KOH solution and transferred to the washing solution, then to the ink staining solution without the need to manipulate roots, thereby reducing the risk of damage. \nCredit: devices from Dr [Albin Teulet](https://twitter.com/albinteulet) and [Alex Guyon](https://twitter.com/alexwguyon) (Schornack lab), derived from an original idea by Dr Cl\u00e9ment Quan.\n \n"
      },
      "source": "https://raw.githubusercontent.com/SchornacklabSLCU/amfinder/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9611102713286156,
      "result": {
        "type": "Text_excerpt",
        "value": "The Automatic Mycorrhiza Finder (AMFinder) allows for high-throughput computer\nvision-based identification and quantification of AM fungal colonisation\nand intraradical hyphal structures using\nconvolutional neural networks. \n**The current version of AMFinder is v2.0.** \nIf you use AMFinder in your manuscript, please cite: \n. \n"
      },
      "source": "https://raw.githubusercontent.com/SchornacklabSLCU/amfinder/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/SchornacklabSLCU/amfinder/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/SchornacklabSLCU/amfinder/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SchornacklabSLCU/amfinder"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/SchornacklabSLCU/amfinder/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/SchornacklabSLCU/amfinder/master/amfbrowser/install.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/SchornacklabSLCU/amfinder/master/amfbrowser/build.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/SchornacklabSLCU/amfinder/master/amf/install.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/SchornacklabSLCU/amfinder/master/doc/amfbrowser.gif"
      },
      "source": "https://raw.githubusercontent.com/SchornacklabSLCU/amfinder/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/SchornacklabSLCU/amfinder/master/doc/Staining_sieves_1.jpg"
      },
      "source": "https://raw.githubusercontent.com/SchornacklabSLCU/amfinder/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/SchornacklabSLCU/amfinder/master/doc/Staining_sieves_2.jpg"
      },
      "source": "https://raw.githubusercontent.com/SchornacklabSLCU/amfinder/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/SchornacklabSLCU/amfinder/master/doc/Staining_sieves_3.jpg"
      },
      "source": "https://raw.githubusercontent.com/SchornacklabSLCU/amfinder/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# ![](amfbrowser/data/amfbrowser.png) AMFinder installation instructions\n\n## Command-line tool `amf`\n\n1. Windows users only: install [Windows Subsystem for Linux](https://docs.microsoft.com/en-us/windows/wsl/about) to get access to a Unix-like terminal. \n2. Install **Python 3.9** from the [official website](https://www.python.org/) or from your package manager.\n3. Download AMFinder sources from Github, and extract the archive.\n4. Move to the `amf` folder.\n5. Open a terminal, run `export PYTHON=<path>`, replacing `<path>` with the path to Python 3.9.\n6. Run `./install.sh`. If needed, add executable permissions with: `chmod +x install.sh`. Should the variable `PYTHON` not be set, the script will use the output of `which python3` instead.\n\n**Important:** Before using `amf` for training or prediction (see next section), you will need to activate its Python virtual environment. To that end, open a terminal in the `amf` directory and run the command `source amfenv/bin/activate` to activate the virtual environment. Your terminal prompt will change to `(amfenv) $`. Once you are done with `amf`, you can deactivate the environment by running the command `deactivate`.\n\n**Note:** old processors may lack AVX and AVX2 processor instructions \nand may fail to run Tensorflow. If you encounter such error, you need to\ndownload and build Tensorflow from sources. Instructions can be found on\nthe Tensorflow website.\n\n## Standalone interface `amfbrowser`\n\n**Note:** As a graphical interface, `amfbrowser` **cannot** be installed on a\ntext-based system such as an HPC. Ready-to-use binaries are available. Windows\nusers can use the linux version once [Windows Subsystem for Linux\n(WSL)](https://docs.microsoft.com/en-us/windows/wsl/install-win10) has been \nactivated.\n\n### Linux\n\n1. Download and install OPAM from the [official webwsite](https://opam.ocaml.org/doc/Install.html) or from your package manager.\n\n2. Open a terminal in the `amfbrowser` folder and run the command: `export OPAM=<path>`, replacing `<path>` with the path to the opam program. Then, run the command `./install.sh` to install `amfbrowser` dependencies and compile `amfbrowser.exe`. Should the variable `OPAM` not be set, the script will use the output of `which opam`. If needed, add executable permissions to the installation file with: `chmod +x install.sh`. Follow the instructions on the screen and reply yes to the questions asked during opam installation and configuration. \n\n**Note:** You may need to install development packages such as `libgtk2.0-dev` and `libgtksourceview2.0-dev`. Users with [miniconda](https://docs.conda.io/en/latest/miniconda.html) or similar tool suite installed may encounter problems if their `PATH` variable has been altered. You may have to temporarily mask miniconda directory from your `PATH` variable by running `PATH=<modified_path> opam install ...`.\n\n\n### MacOS\n\nSame as Linux, but you will need [Homebrew](https://brew.sh/index_fr) to install OPAM.\n\n### Windows 10\n\n`amfbrowser` can be installed and run on Windows 10 after activation of\nWindows Subsystem for Linux (WSL).\n\n1. Activate [Windows Subsystem for Linux\n(WSL)](https://docs.microsoft.com/en-us/windows/wsl/install-win10). Then, go to\nWindows App store and install a Linux distribution\n([Ubuntu](https://ubuntu.com/) and [Debian](https://www.debian.org/index.html)\nare recommended, but others should work too).\n\n2. Install an OCaml build system based on the `brew` package manager:\n```bash\n$ sudo apt update\n$ sudo apt upgrade\n$ sudo apt autoclean\n$ sudo apt install curl build-essential git\n$ sh -c \"$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)\"\n$ test -d ~/.linuxbrew && eval $(~/.linuxbrew/bin/brew shellenv)\n$ test -d /home/linuxbrew/.linuxbrew && eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\n$ test -r ~/.bash_profile && echo \"eval \\$($(brew --prefix)/bin/brew shellenv)\" >> ~/.bash_profile\n$ echo \"eval \\$($(brew --prefix)/bin/brew shellenv)\" >> ~/.profile\n$ brew install gpatch opam gtk+ cairo\n```\n\n3. Follow the [Linux installation instructions](#amfbrowseronlinux). You may have to edit the file `install.sh` with a text editor and uncomment the option `--disable-sandboxing`.\n\n4. Install a X server (for instance, [Xming](https://sourceforge.net/projects/xming/))\nand configure `bash` to tell GUIs to use the local X server by running `export DISPLAY=localhost:0.0`.\nThis variable has to be set for each session. As an alternative, you can save the\nvariable in your session configuration file by running: `echo \"export DISPLAY=localhost:0.0\" >> ~/.bashrc`\nand reload the configuration (`. ~/.bashrc`). The new variable with then be automatically\nset and does not have to be redefined manually.\n"
      },
      "source": "https://raw.githubusercontent.com/SchornacklabSLCU/amfinder/master/INSTALL.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 0.9999999885972956,
      "result": {
        "original_header": "Installation<a name=\"install\"></a>",
        "type": "Text_excerpt",
        "value": "Detailed installation instructions for Linux, Mac and Windows can be found [here](INSTALL.md).\nIf you are not familiar with Python virtual environments, you may want\nto read [this page](https://docs.python.org/3/tutorial/venv.html) first. \n"
      },
      "source": "https://raw.githubusercontent.com/SchornacklabSLCU/amfinder/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9962496927830138,
      "result": {
        "original_header": "Conversion mode<a name=\"amfconv\"></a>",
        "type": "Text_excerpt",
        "value": "|Short|Long|Description|Default value|\n|-|-|-|-|\n|`-1`|`--CNN1`|**Optional**. Convert CNN1 predictions.|yes|\n|`-2`|`--CNN2`|**Optional**. Convert CNN2 predictions.|no|\n|`-th X`|`--threshold X`|**Optional**. Use `X` as threshold for CNN2 conversions.|X = 0.5| \n"
      },
      "source": "https://raw.githubusercontent.com/SchornacklabSLCU/amfinder/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999871781223019,
      "result": {
        "original_header": "Training mode",
        "type": "Text_excerpt",
        "value": "\nTraining can benefit from high-performance computing (HPC) systems.\nBelow is a template script for [Slurm](https://slurm.schedmd.com/):\n```\n#! /bin/bash\n#SBATCH -e <error_file>\n#SBATCH -o <output_file>\n#SBATCH --mem=<memory_GB>\n#SBATCH -n <procs>\n\nROOT=/home/<user>/amf\n\nsource $ROOT/amfenv/bin/activate\n$ROOT/amf train <parameters> <images>\ndeactivate\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/SchornacklabSLCU/amfinder/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8988250229567541,
      "result": {
        "original_header": "Annotation browser (`amfbrowser`)<a name=\"amfbrowser\"></a>",
        "type": "Text_excerpt",
        "value": "where `<parameter>` can be used to specify tile size (see below). \n"
      },
      "source": "https://raw.githubusercontent.com/SchornacklabSLCU/amfinder/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9223182930914269,
      "result": {
        "original_header": "A typical annotation pipeline<a name=\"pipeline\"></a>",
        "type": "Text_excerpt",
        "value": "Below is a bash script describing a typical prediction/annotation pipeline:\n```bash\n#! /bin/bash\n\nsource amfenv/bin/activate\n\n# Predict fungal colonisation (CNN1) on a bunch of JPEG images.\n./amf predict ink_stained_image{1-5}.jpg\n\n# Convert CNN1 predictions to annotations.\n./amf convert ink_stained_image{1-5}.jpg\n\n# Predict intraradical structures (CNN2) on the same images.\n./amf predict --network CNN2v2.h5 ink_stained_image{1-5}.jpg\n\n# Convert CNN2 predictions to annotations using a threshold of 0.6.\n./amf convert --CNN2 --threshold 0.6 ink_stained_image{1-5}.jpg\n\ndeactivate\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/SchornacklabSLCU/amfinder/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8712662782226575,
      "result": {
        "original_header": "A typical annotation pipeline<a name=\"pipeline\"></a>",
        "type": "Text_excerpt",
        "value": "Below is a bash script describing a typical prediction/annotation pipeline:\n```bash\n#! /bin/bash\n\nsource amfenv/bin/activate\n\n# Predict fungal colonisation (CNN1) on a bunch of JPEG images.\n./amf predict ink_stained_image{1-5}.jpg\n\n# Convert CNN1 predictions to annotations.\n./amf convert ink_stained_image{1-5}.jpg\n\n# Predict intraradical structures (CNN2) on the same images.\n./amf predict --network CNN2v2.h5 ink_stained_image{1-5}.jpg\n\n# Convert CNN2 predictions to annotations using a threshold of 0.6.\n./amf convert --CNN2 --threshold 0.6 ink_stained_image{1-5}.jpg\n\ndeactivate\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/SchornacklabSLCU/amfinder/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/SchornacklabSLCU/amfinder/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "deep-learning, gtk2, image-analysis, keras, microscopy, mycorrhiza, neural-networks, ocaml, python3"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021 Schornack lab\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/SchornacklabSLCU/amfinder/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/SchornacklabSLCU/amfinder/master/doc/amfinder.png"
      },
      "source": "https://raw.githubusercontent.com/SchornacklabSLCU/amfinder/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "amfinder"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "SchornacklabSLCU"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "OCaml",
        "size": 422033,
        "type": "Programming_language",
        "value": "OCaml"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 207948,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Standard ML",
        "size": 2433,
        "type": "Programming_language",
        "value": "Standard ML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 843,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/SchornacklabSLCU/amfinder/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "SchornacklabSLCU",
          "type": "User"
        },
        "date_created": "2021-03-10T09:42:12Z",
        "date_published": "2021-03-10T10:53:53Z",
        "description": "First public release\r\n\r\n- `amf-v2.0.zip`: `amf` utility.\r\n- `amfbrowser-v2.0-linux-64.exe`: ready-to-use `amfbrowser` binary (Linux, 64-bit).\r\n- `amfbrowser-data-v2.0.zip`: `amfbrowser` data.\r\n\r\n**Note**: for pre-trained networks and `amf` installation instructions, refer to the repository README file.",
        "html_url": "https://github.com/SchornacklabSLCU/amfinder/releases/tag/v2.0",
        "name": "AMFinder v2.0 (64-bit linux version)",
        "release_id": 39581727,
        "tag": "v2.0",
        "tarball_url": "https://api.github.com/repos/SchornacklabSLCU/amfinder/tarball/v2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/SchornacklabSLCU/amfinder/releases/39581727",
        "value": "https://api.github.com/repos/SchornacklabSLCU/amfinder/releases/39581727",
        "zipball_url": "https://api.github.com/repos/SchornacklabSLCU/amfinder/zipball/v2.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 07:48:10",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 21
      },
      "technique": "GitHub_API"
    }
  ]
}