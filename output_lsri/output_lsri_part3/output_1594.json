{
  "application_domain": [
    {
      "confidence": 33.14,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ybai3/scMAPA"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-06-17T15:05:49Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-04-22T17:02:32Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9950305433523554,
      "result": {
        "original_header": "scMAPA",
        "type": "Text_excerpt",
        "value": "Alternative polyadenylation (APA) causes shortening or lengthening of the 3\u02b9-untranslated region (3\u02b9-UTR), widespread in complex tissues. To detect APA and identify cell-type-specific APA in multi-cluster setting, we developed a model-based method, scMAPA. First part of scMAPA is coded as shell scripts, which can 1) divide the aligned read data by the cell cluster[1] and remove PCR duplicates by UMI-tools; 2) Pad the 3'biased reads and convert BAM to Bedgraph file; 3) estimate the abundance of 3\u02b9-UTR long and short isoform of genes in each cluster-bulk data using linear regression and quadratic programming implemented in DaPars2. Second part of scMAPA is coded as a R package, which can 4) fit a logistic regression model for each gene and estimate the significance of APA; 5) Identify cluster-specific 3'UTR shortening and lengthening; 6) Do visualization to show the APA dynamics.  \nTo show the pipeline of scMAPA, we provide mb_example.bam and mb_cluster.csv as example input (https://drive.google.com/drive/folders/1EZThNIKg2VWyJCexTsNI6VJSyikProa8?usp=sharing), which is a downsized mouse brain single-cell RNA sequencing (scRNA-Seq) data. The source of the data could be found here: [Zeisel et al. DOI:https://doi.org/10.1016/j.cell.2018.06.021] In the example data, we only keep three cell clusters: Neurons, Immune cells, and Oligos. 200 cells are kept for each cluster. \n \n"
      },
      "source": "https://raw.githubusercontent.com/ybai3/scMAPA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8106464305881242,
      "result": {
        "original_header": "Split BAM files",
        "type": "Text_excerpt",
        "value": "Cluster information should be stored in a csv file with two columns. First column contains the cell barcodes that match the barcodes in the BAM file. Second columns contains the cluster ID. For example, the first several lines of a cluster csv file should look like: \n```\n  Barcode,Cluster\n  ACGTGATGAGCGTT-1,Oligos\n  ACGACCCTAGACTC-1,Oligos\n  ATATAGTGTCACCC-1,Oligos\n  AGTCAGACGAGAGC-1,Oligos\n  GATCTTTGGTCATG-1,Oligos\n  AATCCTACGCATAC-1,Oligos\n```\nHere is an exmaple of running step1.sh:\nBASH2*\nThe BAM file for each cluster will be output to the working directory.  \n"
      },
      "source": "https://raw.githubusercontent.com/ybai3/scMAPA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8847143211501156,
      "result": {
        "original_header": "Padding BAM, PCR duplicates removal and converting to bedgraph",
        "type": "Text_excerpt",
        "value": "To avoid potential version conflicts between tools called in step2, we split step2 into two bash files. step2_1.sh will be used to remove PCR duplications and step2_2.sh will be used to pad 3'tag reads and convert BAM to BEDGRAPH format. The input to step2_1.sh and step2_2.sh are same, the directory to a folder containing the split BAM files from step 1. Please load samtools, umi-tools for step2_1.sh. Unload all loaded tools and load python 2.7 (we wrote pad3UTRs.py in python2.7 to keep consistent with DaPars2) and pybedtools for step2_2.sh. In addition, please make sure following scripts/files are in the same folder: mm10_m18_refseq_gene_ensembl_extracted_3UTR.sorted.bed and GRCm38.p6.genome.chrom.sizes if sequencing samples are mouse, hg38_v27_refseq_gene_extracted_3UTR_sorted.bed and hg38.chrom.sizes if sequencing samples are human, and the python script pad3UTRs.py. \nHere is an example of running step2_1.sh:\n```\nmodule load samtools/1.12\nmodule load umi-tools/1.0.0\n\nchmod +x step2_1.sh\n./step2_1.sh /path/to/split_bam_files\n```\nThe output will be deduplicated and sorted BAM files.  \n"
      },
      "source": "https://raw.githubusercontent.com/ybai3/scMAPA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9466809563177865,
      "result": {
        "original_header": "Estimate long/short isoforms",
        "type": "Text_excerpt",
        "value": "Next we will call DaPars2 developed by Dr. Zheng Xia in the following paper: https://doi.org/10.1038/ncomms6274. We modified the original code so that it will output the estimated counts of long and short isoforms for each cluster. The modified DaPars2 is a python script Dapars2_Multi_Sample_abd.py. Please note that DaPars2 was originally written in Python/2.7. So, please make sure the python loaded for step3.sh is python/2.7. \nStep3.sh will call the DaPars2 with following input files: chrIDs.txt, config.txt, and mapping_bam_location_with_depth.txt. chrIDs.txt contains the names of chromosomes that user wants to search for APA event. Please note that the chromosome names should match with names in BAM files. config.txt specifies the location of other input files. Below is the config.txt for example data. \n```\n#The following bed files are provided for human and mouse samples in scMAPA_BAMprocess folder as hg38_v27_refseq_gene_extracted_3UTR_sorted.bed and mm10_m18_refseq_gene_ensembl_extracted_3UTR.sorted.bed. \n\nAnnotated_3UTR=./mm10_m18_refseq_gene_ensembl_extracted_3UTR.sorted.bed\n\n#A comma-separated list of Wiggle files of all samples\n\nAligned_Wig_files=./clusterImmune.dedup.chr.bam.trans.bedgraph,./clusterNeurons.dedup.chr.bam.trans.bedgraph,./clusterOligos.dedup.chr.bam.trans.bedgraph\n\nOutput_directory=DaPars2\n\nOutput_result_file=DaPars2\n\n# Specify the Coverage_threshold\n\nCoverage_threshold=1\n\n# Specify the number of threads used to process the data\n\nNum_Threads = 1\n\n# Provide Sequencing_depth file for normalization\n\nsequencing_depth_file=./mapping_bam_location_with_depth.txt\n```\n \nIn the configuration file, we recommend to set Coverage_threshold to 1 and do filtering in our R package as it gives more flexibility. mapping_bam_location_with_depth.txt contains the number of mapping reads for each split bam. This number can be easily calculated by running samtools view -c -F 4 name.bam. For the example data,\n```\necho clusterImmune.dedup.chr.bam\nsamtools view -c -F 4 clusterImmune.dedup.chr.bam\necho clusterNeurons.dedup.chr.bam\nsamtools view -c -F 4 clusterNeurons.dedup.chr.bam\necho clusterOligos.dedup.chr.bam\nsamtools view -c -F 4 clusterOligos.dedup.chr.bam\n```\nThe output would be \nBASH3*\nUser can easily generate mapping_bam_location_with_depth.txt based on output from samtools shown above. \nFor example data, mapping_bam_location_with_depth.txt should be:\nBASH4*\nThe order of bedgraph files in mapping_bam_location_with_depth.txt should be consistent with the bedgraph files specified in Aligned_Wig_files of config.txt\nFor further configuration options of DaPars2. Please refer to https://hpc.oit.uci.edu/~leil22/DaPars2_Documentation/DaPars2.html.  \nTo accelerate running speed, we suggest user to run all chromosomes in parallel if APA profiling of whole transcriptome is of interest. The example of parellel run is provided in scMAPA_BAMprocess/run_Dapars2_array.sbatch.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ybai3/scMAPA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9893799873533236,
      "result": {
        "original_header": "Part 2 Model fitting, APA detection, and identification of cluster-specific 3'UTR dynamics",
        "type": "Text_excerpt",
        "value": "Below is the workflow of running scMAPA R package on the output of step3.sh, which is also provided inside R package in inst/exdata. We only show the default settings of the workflow. For more configuration, user can refer to help page of each R function. \n \n"
      },
      "source": "https://raw.githubusercontent.com/ybai3/scMAPA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9426626299794688,
      "result": {
        "original_header": "Read in PDUI matrices output from shell scripts",
        "type": "Text_excerpt",
        "value": "First, we use readinPAsites() function to input the PDUI matrices output from step3.sh. Please put result _result_temp.chrx.txt files in one folder and set argument Path of readinPAsites function to that folder. This folder should contain (only) output files of all chromosomes generated by previous step. We also provide example output of BAM pocessing and long/short isoform estimation steps (stored in /scMAPA_RPackage/inst/extdata/) if only the second part is needed for the analysis.  \nIn readinPAsites(), NAcutoff refers to the lower limit for number of clusters in which the expression of a gene is detected (not NA). For example, if we have 6 clusters, genes with more than NAcutoff=3 of NAs among clusters should be filtered out. Genes with number of NAs <= NAcutoff will remain. The default value is 3. We can change the column names from samplex to their biological names. The sample names have the same order as the bedgraph files in the config.txt in step 3. \n```{r Load object, echo=TRUE, message=FALSE}\nsetwd(\"path/to/the/folder/containing/output/of/previous/step\") ## if using output generated from previous step\n#setwd(system.file(\u201cextdata\u201d, package = \u201cscMAPA\u201d, mustWork = T)) ## if using the example data stored in /scMAPA_RPackage/inst/extdata/\nISO_mat <- readinPAsites(path = getwd(), NAcutoff = 3, CPMcutoff_L = 10, CPMcutoff_S = 10, clusterOfInterests = \"all\")\ncolnames(ISO_mat) <- str_replace(colnames(ISO_mat), \"Sample_1\", \"Immune\")\ncolnames(ISO_mat) <- str_replace(colnames(ISO_mat), \"Sample_2\", \"Neuron\")\ncolnames(ISO_mat) <- str_replace(colnames(ISO_mat), \"Sample_3\", \"Oligos\")\nISO_mat[1:3,1:4]\n```\n```\n                                                                                             Immune_long_exp Immune_short_exp Neuron_long_exp Neuron_short_exp\nENSMUST00000027634.12|ENSMUST00000151708.2|ENSMUST00000112648.7|ENSMUSG00000026385.16|chr1|-            1075             2036             376              669\nENSMUST00000192001.5|ENSMUST00000048309.11|ENSMUST00000192314.1|ENSMUSG00000041570.14|chr1|-             208               64            2121              398\nENSMUST00000192904.1|ENSMUSG00000104524.1|chr1|-                                                           4              256             131              256\n```\n \nAs shown above, readinPAsites() returns filtered isoform specific count matrix. Each cluster has two columns, corresponding to long/short isoforms. All further statistical analysis would be conducted on this matrix. \n \n"
      },
      "source": "https://raw.githubusercontent.com/ybai3/scMAPA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8221614045469074,
      "result": {
        "original_header": "Fit model for each gene and estimate gene-level significance of APA",
        "type": "Text_excerpt",
        "value": "Next, we use APAtest() function to estimate gene-level significance of APA. This function estimates significance of APA event at gene level. It will fit a logistic regression model for each gene and estimate significance using Likelihood ratio test. \n```{r}\nAPAgene <- APAtest(countMatrix = ISO_mat, coverageCutoff = 20, ORcutoff = 0.25, adPval = 0.05)\nAPAgene[1:3,1:5]\n```\n```\n\n                                                                                               pvalue_LRT pval_LRT.adjusted Genes Immune.coef   Neuron.coef Oligos.coef\nENSMUST00000192001.5|ENSMUST00000048309.11|ENSMUST00000192314.1|ENSMUSG00000041570.14|chr1|- 2.488587e-04      3.521953e-04 ENSMUST00000192001.5|ENSMUST00000048309.11|ENSMUST00000192314.1|ENSMUSG00000041570.14|chr1|-  -0.4709917    0.02354423   1.4638685\nENSMUST00000192904.1|ENSMUSG00000104524.1|chr1|-                                             7.890328e-33      3.516658e-32 ENSMUST00000192904.1|ENSMUSG00000104524.1|chr1|-  -2.1968858    1.29201697   2.4544736\nENSMUST00000043951.9|ENSMUSG00000037351.9|chr1|-                                             4.230664e-23      1.407145e-22 ENSMUST00000043951.9|ENSMUSG00000037351.9|chr1|-  -0.5431560    0.09694786  -0.4625276\n```\npval_LRT.adjusted can be used to identify significant APA genes.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ybai3/scMAPA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9781174422236626,
      "result": {
        "original_header": "Identify cluster-specific 3' UTR shortening and lengthening",
        "type": "Text_excerpt",
        "value": "After identifying genes with significant APA dynamics among all clusters, we would like to go one step further to identify the clusters with significantly more or less long isoforms than the across-cluster average for the gene. We call this step as gene-cluster-level identification, it identifies clusters whose estimated regression model coefficient is significantly (FDR < 0.05 using Wald test) and strongly (absolute value of coefficient > log(2), corresponds to 2 fold change in odds ratio) deviated from 0. Both these two parameters could be changed by users.\n```{r}\ncellTypeSpecificAPA <- IdentifyClusterAPA(ECoeffSig_Mat = APAgene, WaldP_cutoff = 0.05, CoeffCutoff = log(2))\nnames(cellTypeSpecificAPA)\n``` \n\nAs shown above, IdentifyClusterAPA() returns a list consists of tables for every cluster. Tables contain the gene IDs, APA event IDs of 3'UTR shortening or lengthening that passed filters. For example:\n```{r}\ncellTypeSpecificAPA$Immune[1:5,]\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/ybai3/scMAPA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9413911170236166,
      "result": {
        "original_header": "Visualization",
        "type": "Text_excerpt",
        "value": "To give a overview of APA dynamics, scMAPA can draw heatmap of all gene-cluster-level significant APA events by using clusterAPAheatmap function.\n```{r}\nclusterAPAheatmap(ECoeffSig_Mat = APAgene)\n```\n![](scMAPA_RPackage/vignettes/image/heatmap.png) \nThe color indicates the degree and direction of 3' UTR processing. In this example, we can observe more 3' UTR lengthening in Neurons comparing to other two cell types.  \nUsually, there is a certain set of genes that may play an important role or act as marker for specific cluster. scMAPA could visualize the 3' UTR dynamic of user-defined significant APA. APAgenes parameter in APAdotplot function is not case sensitive. The input to APAgenes parameter should be a character vector consistent with second component of APA event ID (Genes column of ECoeffSig_Mat or siglist_FDRp).\n```{r}\nAPAdotplot(ECoeffSig_Mat = APAgene, FDR_P_cutoff = 0.05, CoeffCutoff = log(2), APAgenes = c(\"Atat1\",\"Myo1d\",\"Cul3\",\"Hdlbp\"))\n```\n![](scMAPA_RPackage/vignettes/image/dotplot.png)\n \n"
      },
      "source": "https://raw.githubusercontent.com/ybai3/scMAPA/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Download BAM processing shell scripts",
        "parent_header": [
          "scMAPA",
          "Part 1 BAM file processing and estimation of long/short isoforms"
        ],
        "type": "Text_excerpt",
        "value": "\n    git clone https://github.com/ybai3/scMAPA.git\n   \nThere are 3 shell scripts named step1.sh, step2_1.sh and step2_2.sh, step3.sh, corresponding to step 1), 2), and 3), respectively.\n"
      },
      "source": "https://raw.githubusercontent.com/ybai3/scMAPA/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ybai3/scMAPA/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ybai3/scMAPA/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ybai3/scMAPA"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "scMAPA"
      },
      "source": "https://raw.githubusercontent.com/ybai3/scMAPA/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ybai3/scMAPA/master/scMAPA_BAMprocess/step2_2.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ybai3/scMAPA/master/scMAPA_BAMprocess/step2_1.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ybai3/scMAPA/master/scMAPA_BAMprocess/step3.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ybai3/scMAPA/master/scMAPA_BAMprocess/step1.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ybai3/scMAPA/master/scMAPA_RPackage/vignettes/image/heatmap.png"
      },
      "source": "https://raw.githubusercontent.com/ybai3/scMAPA/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ybai3/scMAPA/master/scMAPA_RPackage/vignettes/image/dotplot.png"
      },
      "source": "https://raw.githubusercontent.com/ybai3/scMAPA/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.999876062360891,
      "result": {
        "original_header": "Split BAM files",
        "type": "Text_excerpt",
        "value": "In this step, step1.sh will call split_bam.py to split BAM files by cell cluster information provided by user. To run step1.sh, please first load Python 3.7 with dependent modules (pysam, csv, sys), and ensure that split_bam.py is in the same folder. Step1.sh takes two positional arguments. The first argument indicates the directory to the file storing cluster information and the second argument indicates the directory to the BAM file. \n"
      },
      "source": "https://raw.githubusercontent.com/ybai3/scMAPA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9988831535694254,
      "result": {
        "original_header": "Padding BAM, PCR duplicates removal and converting to bedgraph",
        "type": "Text_excerpt",
        "value": "To avoid potential version conflicts between tools called in step2, we split step2 into two bash files. step2_1.sh will be used to remove PCR duplications and step2_2.sh will be used to pad 3'tag reads and convert BAM to BEDGRAPH format. The input to step2_1.sh and step2_2.sh are same, the directory to a folder containing the split BAM files from step 1. Please load samtools, umi-tools for step2_1.sh. Unload all loaded tools and load python 2.7 (we wrote pad3UTRs.py in python2.7 to keep consistent with DaPars2) and pybedtools for step2_2.sh. In addition, please make sure following scripts/files are in the same folder: mm10_m18_refseq_gene_ensembl_extracted_3UTR.sorted.bed and GRCm38.p6.genome.chrom.sizes if sequencing samples are mouse, hg38_v27_refseq_gene_extracted_3UTR_sorted.bed and hg38.chrom.sizes if sequencing samples are human, and the python script pad3UTRs.py. \nHere is an example of running step2_1.sh:\n```\nmodule load samtools/1.12\nmodule load umi-tools/1.0.0\n\nchmod +x step2_1.sh\n./step2_1.sh /path/to/split_bam_files\n```\nThe output will be deduplicated and sorted BAM files.  \nExample of running step2_2.sh:\n```\nmodule load python/anaconda2.7-5.2.0\nmodule load samtools/1.12\nmodule load pybedtools/0.7.10\n\nchmod +x step2_2.sh\n./step2_2.sh /path/to/split_bam_files\n```\nThe output will be padded reads in bedgraph formats. \n \n"
      },
      "source": "https://raw.githubusercontent.com/ybai3/scMAPA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999786459614278,
      "result": {
        "original_header": "Estimate long/short isoforms",
        "type": "Text_excerpt",
        "value": "Step3.sh will call the DaPars2 with following input files: chrIDs.txt, config.txt, and mapping_bam_location_with_depth.txt. chrIDs.txt contains the names of chromosomes that user wants to search for APA event. Please note that the chromosome names should match with names in BAM files. config.txt specifies the location of other input files. Below is the config.txt for example data. \n```\n#The following bed files are provided for human and mouse samples in scMAPA_BAMprocess folder as hg38_v27_refseq_gene_extracted_3UTR_sorted.bed and mm10_m18_refseq_gene_ensembl_extracted_3UTR.sorted.bed. \n\nAnnotated_3UTR=./mm10_m18_refseq_gene_ensembl_extracted_3UTR.sorted.bed\n\n#A comma-separated list of Wiggle files of all samples\n\nAligned_Wig_files=./clusterImmune.dedup.chr.bam.trans.bedgraph,./clusterNeurons.dedup.chr.bam.trans.bedgraph,./clusterOligos.dedup.chr.bam.trans.bedgraph\n\nOutput_directory=DaPars2\n\nOutput_result_file=DaPars2\n\n# Specify the Coverage_threshold\n\nCoverage_threshold=1\n\n# Specify the number of threads used to process the data\n\nNum_Threads = 1\n\n# Provide Sequencing_depth file for normalization\n\nsequencing_depth_file=./mapping_bam_location_with_depth.txt\n```\n \nExample of running step3.sh:\n```\nchmod +x step3.sh\n./step3.sh config.txt chrID.txt\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/ybai3/scMAPA/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8538011339981718,
      "result": {
        "original_header": "Padding BAM, PCR duplicates removal and converting to bedgraph",
        "type": "Text_excerpt",
        "value": "Here is an example of running step2_1.sh:\n```\nmodule load samtools/1.12\nmodule load umi-tools/1.0.0\n\nchmod +x step2_1.sh\n./step2_1.sh /path/to/split_bam_files\n```\nThe output will be deduplicated and sorted BAM files.  \nExample of running step2_2.sh:\n```\nmodule load python/anaconda2.7-5.2.0\nmodule load samtools/1.12\nmodule load pybedtools/0.7.10\n\nchmod +x step2_2.sh\n./step2_2.sh /path/to/split_bam_files\n```\nThe output will be padded reads in bedgraph formats. \n \n"
      },
      "source": "https://raw.githubusercontent.com/ybai3/scMAPA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8739562802031893,
      "result": {
        "original_header": "Estimate long/short isoforms",
        "type": "Text_excerpt",
        "value": "Example of running step3.sh:\n```\nchmod +x step3.sh\n./step3.sh config.txt chrID.txt\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/ybai3/scMAPA/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ybai3/scMAPA/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\nCopyright (c) 2021 HJ Park.\nPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the \"Software\"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE. \n"
      },
      "source": "https://raw.githubusercontent.com/ybai3/scMAPA/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "scMAPA"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "ybai3"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 23595,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 17969,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 5058,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ybai3/scMAPA/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Load dependencies",
        "parent_header": [
          "scMAPA",
          "Part 2 Model fitting, APA detection, and identification of cluster-specific 3'UTR dynamics"
        ],
        "type": "Text_excerpt",
        "value": "Please install the following R packages before using scMAPA: multcomp, lmtest, wec, Matrix.utils, nnet, stringr, gplots, ggplot2, grDevices. \n```{r, echo=TRUE, message=FALSE}\nif(!require(devtools)) install.packages(\"devtools\")\nrequire(devtools)\nif(!require(scMAPA)) devtools::install_github(\"ybai3/scMAPA/scMAPA_RPackage\") \nlibrary(multcomp)\nlibrary(lmtest)\nlibrary(wec)\nlibrary(Matrix.utils)\nlibrary(nnet)\nlibrary(stringr)\nlibrary(gplots)\nlibrary(ggplot2)\nlibrary(AnnotationDbi)\nlibrary(org.Mm.eg.db) # if human data, please library(org.Hs.eg.db)\nlibrary(scMAPA)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ybai3/scMAPA/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 05:33:49",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ]
}