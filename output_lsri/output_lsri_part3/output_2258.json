{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "RNAProt"
        ],
        "type": "Text_excerpt",
        "value": "The RNAProt paper is available at [GigaScience](https://doi.org/10.1093/gigascience/giab054).\nSupplementary data including benchmark and training data sets can be downloaded from [Zenodo](https://doi.org/10.5281/zenodo.5083311).\n"
      },
      "source": "https://raw.githubusercontent.com/BackofenLab/RNAProt/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/BackofenLab/RNAProt"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-04-01T20:18:24Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-09T05:52:18Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Modelling RBP binding preferences to predict RPB binding sites"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9945201638861959,
      "result": {
        "original_header": "RNAProt",
        "type": "Text_excerpt",
        "value": "RNAProt is a computational RBP binding site prediction framework based on recurrent neural networks (RNNs). Conceived as an end-to-end method, RNAProt includes all necessary functionalities, from dataset generation over model training to the evaluation of binding preferences and binding site prediction. Various input types and features are supported, accompanied by comprehensive statistics and visualizations to inform the user about datatset characteristics and learned model properties.\n \n"
      },
      "source": "https://raw.githubusercontent.com/BackofenLab/RNAProt/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8980350295465502,
      "result": {
        "original_header": "The RNAProt framework",
        "type": "Text_excerpt",
        "value": "\nRNAProt utilizes RBP binding sites identified by CLIP-seq and related protocols to train an RNN-based model. The model is then used to predict new binding sites on given input RNA sequences. The following figure illustrates the RNAProt framework and its general workflow: \n\nYellow boxes mark necessary framework inputs, blue boxes the five program modes of RNAProt, and green boxes the framework outputs. Arrows show the dependencies between inputs, modes, and outputs. RNAProt accepts RBP binding sites in FASTA or BED format (transcript or genomic regions). The latter one also requires a genomic sequence file (.2bit format) and a genomic annotations file (GTF format).\nAdditional inputs are available, depending on the binding site input type as well as the selected features. For more details on inputs, modes, supported features, and outputs, see the [Documentation](#documentation). \n"
      },
      "source": "https://raw.githubusercontent.com/BackofenLab/RNAProt/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Documentation",
        "parent_header": [
          "RNAProt"
        ],
        "type": "Text_excerpt",
        "value": "\nThis documentation provides details on all the RNAProt (version 0.5) framework parts:\n[program modes](#program-modes), [supported features](#supported-features), [inputs](#inputs), and [outputs](#outputs).\n\n"
      },
      "source": "https://raw.githubusercontent.com/BackofenLab/RNAProt/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Program modes",
        "parent_header": [
          "RNAProt",
          "Documentation"
        ],
        "type": "Text_excerpt",
        "value": "RNAProt is divided into five different program modes: training set generation (`rnaprot gt`), model training (`rnaprot train`), model evaluation (`rnaprot eval`), prediction set generation (`rnaprot gp`), and model prediction (`rnaprot predict`).\n\n\nAn overview of the modes can be obtained by:\n\n\n```\n$ rnaprot -h\nusage: rnaprot [-h] [-v] {train,eval,predict,gt,gp} ...\n\nModelling RBP binding preferences to predict RPB binding sites.\n\npositional arguments:\n  {train,eval,predict,gt,gp}\n                        Program modes\n    train               Train a binding site prediction model\n    eval                Evaluate properties learned from training set\n    predict             Predict binding sites (whole sites or profiles)\n    gt                  Generate training data set\n    gp                  Generate prediction data set\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v, --version         show program's version number and exit\n```\n\nThe following sections describe each mode in more detail.\n\n"
      },
      "source": "https://raw.githubusercontent.com/BackofenLab/RNAProt/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Model training",
        "parent_header": [
          "RNAProt",
          "Documentation",
          "Program modes"
        ],
        "type": "Text_excerpt",
        "value": "The following command line arguments are available in `rnaprot train` mode:\n\n```\n$ rnaprot train -h\nusage: rnaprot train [-h] --in IN_FOLDER --out OUT_FOLDER [--only-seq]\n                     [--use-phastcons] [--use-phylop] [--use-eia] [--use-tra]\n                     [--use-rra] [--use-str] [--str-mode {1,2,3,4}]\n                     [--use-add-feat] [--cv] [--cv-k {5,10}]\n                     [--val-size float] [--add-test] [--test-ids str]\n                     [--keep-order] [--seed int] [--plot-lc] [--verbose-train]\n                     [--force-cpu] [--epochs int] [--patience int]\n                     [--batch-size int] [--lr float] [--weight-decay float]\n                     [--n-rnn-layers int] [--n-hidden-dim int] [--dr float]\n                     [--n-fc-layers {1,2}] [--model-type {1,2,3,4}] [--embed]\n                     [--embed-dim int] [--run-bohb] [--bohb-n int]\n                     [--bohb-min-budget int] [--bohb-max-budget int]\n                     [--bohb-workers int] [--verbose-bohb]\n\noptional arguments:\n  -h, --help            show this help message and exit\n\nrequired arguments:\n  --in IN_FOLDER        Input training data folder (output of rnaprot gt)\n  --out OUT_FOLDER      Model training results output folder\n\nfeature definition arguments:\n  --only-seq            Use only sequence feature. By default all features\n                        present in --in are used (default: False)\n  --use-phastcons       Add phastCons conservation scores. Set --use-xxx to\n                        define which features to add on top of sequence\n                        feature (by default all --in features are used)\n  --use-phylop          Add phyloP conservation scores. Set --use-xxx to\n                        define which features to add on top of sequence\n                        feature (by default all --in features are used)\n  --use-eia             Add exon-intron annotations. Set --use-xxx to define\n                        which features to add on top of sequence feature (by\n                        default all --in features are used)\n  --use-tra             Add transcript region annotations. Set --use-xxx to\n                        define which features to add on top of sequence\n                        feature (by default all --in features are used)\n  --use-rra             Add repeat region annotations. Set --use-xxx to define\n                        which features to add on top of sequence feature (by\n                        default all --in features are used)\n  --use-str             Add secondary structure features (type defined by\n                        --str-mode). Set --use-xxx to define which features to\n                        add on top of sequence feature (by default all --in\n                        features are used)\n  --str-mode {1,2,3,4}  Define secondary structure feature representation: 1)\n                        use probabilities of five structural elements\n                        (E,I,H,M,S) 2) same as 1) but encoded as one-hot\n                        (element with highest probability gets 1, others 0) 3)\n                        use unpaired probabilities 4) same as 3) but encoded\n                        as one-hot (default: 1)\n  --use-add-feat        Add additional feature annotations. Set --use-xxx to\n                        define which features to add on top of sequence\n                        feature (by default all --in features are used)\n\nmodel definition arguments:\n  --cv                  Run cross validation in combination with set\n                        hyperparameters to evaluate model generalization\n                        performance (default: False)\n  --cv-k {5,10}         Cross validation k for evaluating generalization\n                        performance (use together with --cv) (default: 10)\n  --val-size float      Validation set size for training final model as\n                        percentage of all training sites. NOTE that if --add-\n                        test is set, the test set will have the same size (so\n                        if --val-size 0.2, train on 60 percent, validate on 20\n                        percent, and test on 20 percent) (default: 0.2)\n  --add-test            Use a part of the training set as a test set to\n                        evaluate final model. Test set size is controlled by\n                        --val-size (default: False)\n  --test-ids str        Provide file with test IDs to be used as a test set\n                        for testing final model. Test IDs need to be part of\n                        --in training set. Not compatible with --add-test,\n                        --cv, or --gm-cv\n  --keep-order          Use same train-validation(-test) split for each call\n                        to train final model. Test split only if --add-test or\n                        --test-ids (default: False)\n  --seed int            Set a fixed random seed number (e.g. --seed 1) to\n                        obtain identical model results for identical rnaprot\n                        train runs\n  --plot-lc             Plot learning curves (training vs validation loss) for\n                        each tested hyperparameter combination (default:\n                        False)\n  --verbose-train       Enable verbose output during model training to show\n                        performance over epochs (default: False)\n  --force-cpu           Run on CPU regardless of CUDA available or not\n                        (default: False)\n  --epochs int          Maximum number of training epochs (default: 200)\n  --patience int        Number of epochs to wait for further improvement on\n                        validation set before stopping (default: 30)\n  --batch-size int      Gradient descent batch size (default: 50)\n  --lr float            Learning rate of optimizer (default: 0.001)\n  --weight-decay float  Weight decay of optimizer (default: 0.0005)\n  --n-rnn-layers int    Number of RNN layers (default: 1)\n  --n-hidden-dim int    Number of RNN layer dimensions (default: 32)\n  --dr float            Rate of dropout applied after RNN layers (default:\n                        0.5)\n  --n-fc-layers {1,2}   Number of fully connected layers following RNN layers\n                        (default: 1)\n  --model-type {1,2,3,4}\n                        RNN model type to use. 1: GRU, 2: LSTM, 3: biGRU, 4:\n                        biLSTM (default: 1)\n  --embed               Use embedding layer for sequence feature, instead of\n                        one-hot encoding (default: False)\n  --embed-dim int       Dimension of embedding layer (default: 10)\n  --run-bohb            Use BOHB to run a hyperparameter optimization. NOTE\n                        that this will overwrite set hyperparameters, and\n                        trains the final model with the found best\n                        hyperparameter setting. ALSO NOTE that this will take\n                        some time (!) (default: False)\n  --bohb-n int          Number of BOHB iterations (default: 80)\n  --bohb-min-budget int\n                        BOHB minimum budget (default: 5)\n  --bohb-max-budget int\n                        BOHB maximum budget (default: 40)\n  --bohb-workers int    Number of BOHB worker threads for local multi-core\n                        parallel computing (default: 1)\n  --verbose-bohb        Enable verbose output for BOHB hyperparameter\n                        optimization. By default only warnings are print out\n                        (default: False)\n\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/BackofenLab/RNAProt/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Model evaluation",
        "parent_header": [
          "RNAProt",
          "Documentation",
          "Program modes"
        ],
        "type": "Text_excerpt",
        "value": "The following command line arguments are available in `rnaprot eval` mode:\n\n```\n$ rnaprot eval -h \nusage: rnaprot eval [-h] --train-in IN_TRAIN_FOLDER --gt-in IN_GT_FOLDER --out\n                    OUT_FOLDER [--nr-top-profiles int]\n                    [--lookup-profile LIST_LOOKUP_IDS [LIST_LOOKUP_IDS ...]]\n                    [--bottom-up]\n                    [--nr-top-sites LIST_NR_TOP_SITES [LIST_NR_TOP_SITES ...]]\n                    [--motif-size LIST_MOTIF_SIZES [LIST_MOTIF_SIZES ...]]\n                    [--report] [--add-train-in str] [--theme {1,2}]\n                    [--plot-format {1,2}]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --nr-top-profiles int\n                        Specify number of top predicted sites to plot profiles\n                        for (default: 25)\n  --lookup-profile LIST_LOOKUP_IDS [LIST_LOOKUP_IDS ...]\n                        Provide site ID(s) for which to plot the feature\n                        profile in addition to --nr-top-profiles (e.g.\n                        --lookup-profile site_id1 site_id2 ). Site ID needs to\n                        be in positive set from --gt-in\n  --bottom-up           Plot bottom profiles as well (default: False)\n  --nr-top-sites LIST_NR_TOP_SITES [LIST_NR_TOP_SITES ...]\n                        Specify number(s) of top-predicted sites used for\n                        motif extraction. Provide multiple numbers (e.g. --nr-\n                        top-sites 100 200 500) to extract one motif plot from\n                        each site set (default: 200)\n  --motif-size LIST_MOTIF_SIZES [LIST_MOTIF_SIZES ...]\n                        Motif size(s) (widths) for extracting and plotting\n                        motifs. Provide multiple sizes (e.g. --motif-size 5 7\n                        9) to extract a motif for each size (default: 7)\n  --report              Generate an .html report containing various additional\n                        statistics and plots (default: False)\n  --add-train-in str    Second model training folder (output of rnaprot train)\n                        for comparing prediction scores of both models on\n                        --gt-in positive dataset. Note that if dataset\n                        features of the two models are not identical,\n                        comparison might be less informative\n  --theme {1,2}         Set theme for .html report (1: palm beach, 2: midnight\n                        sunset) (default: 1)\n  --plot-format {1,2}   Plotting format of motifs and profiles (does not\n                        affect plots generated for --report). 1: png, 2: pdf\n                        (default: 1)\n\nrequired arguments:\n  --train-in IN_TRAIN_FOLDER\n                        Input model training folder (output of rnaprot train)\n  --gt-in IN_GT_FOLDER  Input training data folder (output of rnaprot gt)\n  --out OUT_FOLDER      Evaluation results output folder\n\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/BackofenLab/RNAProt/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Model prediction",
        "parent_header": [
          "RNAProt",
          "Documentation",
          "Program modes"
        ],
        "type": "Text_excerpt",
        "value": "The following command line arguments are available in `rnaprot predict` mode:\n\n```\n$ rnaprot predict -h\nusage: rnaprot predict [-h] --in IN_FOLDER --train-in IN_TRAIN_FOLDER --out\n                       str [--mode {1,2}] [--plot-top-profiles]\n                       [--plot-format {1,2}] [--thr {1,2,3}]\n                       [--site-id LIST_SITE_IDS [LIST_SITE_IDS ...]]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --mode {1,2}          Define prediction mode. (1) predict whole sites, (2)\n                        predict binding sites on longer sequences using moving\n                        window predictions (default: 1)\n  --plot-top-profiles   Plot top window profiles (default: False)\n  --plot-format {1,2}   Plotting format of top window profiles. 1: png, 2: pdf\n                        (default: 1)\n  --thr {1,2,3}         Define site score threshold level for reporting peak\n                        regions in --mode 2 (window prediction). 1: relaxed,\n                        2: standard, 3: strict (default: 2)\n  --site-id LIST_SITE_IDS [LIST_SITE_IDS ...]\n                        Provide site ID(s) on which to predict (e.g. --site-id\n                        site_id1 site_id2). By default predict on all --in\n                        sites\n\nrequired arguments:\n  --in IN_FOLDER        Input prediction data folder (output of rnaprot gp)\n  --train-in IN_TRAIN_FOLDER\n                        Input model training folder containing model file and\n                        parameters (output of rnaprot train)\n  --out str             Prediction results output folder\n\n```\n"
      },
      "source": "https://raw.githubusercontent.com/BackofenLab/RNAProt/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Supported features",
        "parent_header": [
          "RNAProt",
          "Documentation"
        ],
        "type": "Text_excerpt",
        "value": "RNAProt supports the following position-wise features, which can be utilized for training and prediction in addition to the sequence feature: secondary structure information (structural element probabilities), conservation scores (phastCons and phyloP), exon-intron annotation, transcript region annotation, repeat region annotation, and also user-defined region annotations. The following table lists the features available for each of the three input types (FASTA sequences, genomic regions BED, transcript regions BED):\n\n\n|   Feature       | Sequences | Genomic regions | Transcript regions |\n| :--------------: | :--------------: | :--------------: | :--------------: |\n| **structure**    | YES | YES | YES |\n| **conservation scores**    | NO | YES | YES |\n| **exon-intron annotation**    | NO | YES | NO |\n| **transcript region annotation**    | NO | YES | YES |\n| **repeat region annotation**    | NO | YES | YES |\n| **user-defined**    | NO | YES | YES |\n\n"
      },
      "source": "https://raw.githubusercontent.com/BackofenLab/RNAProt/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Secondary structure information",
        "parent_header": [
          "RNAProt",
          "Documentation",
          "Supported features"
        ],
        "type": "Text_excerpt",
        "value": "RNAProt can include structure information in the form of unpaired probabilities for different loop contexts (probabilities for the nucleotide being paired or inside external, hairpin, internal or multi loops). The probabilities are calculated using the ViennaRNA Python 3 API (ViennaRNA 2.4.17) and RNAplfold with its sliding window approach, with user-definable parameters (by default these are window size = 70, maximum base pair span length = 50, and probabilities for regions of length u = 3, `--plfold-u 3 --plfold-l 50 --plfold-w 70`). In order to include structure information, `--str` has to be set when calling `rnaprot gt`. For training, `rnaprot train` by default uses all features it can find in the training set folder. To specify specific features for training, one can add `--use-str` (or in general --use-xxx). `rnaprot train` also offers four different modes for including the structure information (`--str-mode`). Here one can select between using all five context probabilities, using only paired and unpaired probabilities, or use the first two but encoded as one-hot.\n\n"
      },
      "source": "https://raw.githubusercontent.com/BackofenLab/RNAProt/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Conservation scores",
        "parent_header": [
          "RNAProt",
          "Documentation",
          "Supported features"
        ],
        "type": "Text_excerpt",
        "value": "RNAProt supports two scores measuring evolutionary conservation (phastCons and phyloP). Conservation scores can be downloaded from the UCSC website, e.g. using the phastCons and phyloP scores generated from multiple sequence alignments of 99 vertebrate genomes to the human genome (hg38, [phastCons100way](http://hgdownload.cse.ucsc.edu/goldenpath/hg38/phastCons100way/hg38.phastCons100way.bw) and [phyloP100way](http://hgdownload.cse.ucsc.edu/goldenpath/hg38/phyloP100way/hg38.phyloP100way.bw) datasets). RNAProt accepts scores in bigWig (.bw) format (modes `rnaprot gt` and `rnaprot gp`, options `--phastcons` and `--phylop`). \nNote that `rnaprot gp` reuses the set file paths used for training (`rnaprot train`), as long as the file paths are still valid. If not, it will complain, or you can just overwrite the paths by setting `--phastcons` and `--phylop`.\nTo assign conservation scores to transcript regions, RNAProt first maps the transcript regions to the genome, using the provided GTF file. To use the conservation features for `rnaprot train`, set `--use-phastcons` or `--use-phylop`. Otherwise, if no other feature is specified, `rnaprot train` will train on all present features.\n\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/BackofenLab/RNAProt/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Exon-intron annotation",
        "parent_header": [
          "RNAProt",
          "Documentation",
          "Supported features"
        ],
        "type": "Text_excerpt",
        "value": "Exon-intron annotation in the form of one-hot encoded exon and intron labels can also be added to the node feature vectors.\nLabels are assigned to each binding site position by taking a set of genomic exon regions and overlapping it with the genomic binding sites using bedtools. To unambiguously assign labels, RNAProt by default uses the most prominent isoform for each gene. The most prominent isoform for each gene gets selected through hierarchical filtering of the transcript information present in the input GTF file (tested with GTF files from [Ensembl](http://www.ensembl.org/info/data/ftp/index.html)): given that the transcript is part of the GENCODE basic gene set, RNAProt selects transcripts based on their transcript support level (highest priority), and by transcript length (longer isoform preferred). The extracted isoform exons are then used for region type assignment.\nNote that this feature is only available for genomic regions, as it is not informative for transcript regions, which would contain only exon labels. Optionally, a user-defined isoform list can be supplied (`--tr-list`), substituting the list of most prominent isoforms for annotation. Regions not overlapping with introns or exons can also be labelled separately (instead of labelled as intron). In addition, instead of using the most prominent transcripts, `--eia-all-ex` allows the use of all exon regions from the GTF file for exon-intron labelling. For more details see mode options `--eia`, `--eia-ib`, `--eia-n`, and `--eia-all-ex`. To use exon-intron annotations for `rnaprot train`, set `--use-eia`. Otherwise, if no other feature is specified, `rnaprot train` will train a model with all present features.\n\n"
      },
      "source": "https://raw.githubusercontent.com/BackofenLab/RNAProt/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Transcript region annotation",
        "parent_header": [
          "RNAProt",
          "Documentation",
          "Supported features"
        ],
        "type": "Text_excerpt",
        "value": "Similarly to exon-intron annotations, binding regions can be labelled based on their overlap with transcript regions. Labels are assigned based on UTR or CDS region overlap (5'UTR, CDS, 3'UTR, None), by taking the isoform information in the input GTF file. Again the list of most prominent isoforms is used for annotation, or alternatively a list of user-defined isoforms (`--tr-list`). Additional annotation options include start and stop codon or transcript and exon border labelling. For more details see mode options `--tra`, `--tra-codons`, and `--tra-borders`.\nTo use transcript region annotations for `rnaprot train`, set `--use-tra`. Otherwise, if no other feature is specified, `rnaprot train` will train a model with all present features.\n\n"
      },
      "source": "https://raw.githubusercontent.com/BackofenLab/RNAProt/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Repeat region annotation",
        "parent_header": [
          "RNAProt",
          "Documentation",
          "Supported features"
        ],
        "type": "Text_excerpt",
        "value": "Repeat region annotation (`--rra` option) can also be added to the binding regions, analogously to other region type annotations. This information is derived directly from the 2bit formatted genomic sequence file supplied by `--gen`, where repeat regions identified by RepeatMasker and Tandem Repeats Finder are stored in lowercase letters. \nTo use repeat region annotations for `rnaprot train`, set `--use-rra`. Otherwise, if no other feature is specified, `rnaprot train` will train a model with all present features.\n\n"
      },
      "source": "https://raw.githubusercontent.com/BackofenLab/RNAProt/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "User-defined region annotations",
        "parent_header": [
          "RNAProt",
          "Documentation",
          "Inputs"
        ],
        "type": "Text_excerpt",
        "value": "User-defined features in the form of region information (BED) for annotating transcript or genomic input regions can also be supplied. For this `rnaprot gt` and `rnaprot gp` require a table file with a specific format (feature ID, feature type, feature format, BED file path) provided via `--feat-in`. The table format is defined in the [Inputs](#inputs) section below. `rnaprot gt` also offers an option to force one-hot-encoding of all user-defined features (see mode option `--feat-in-1h`).\nTo utilize user-defined region annotations for `rnaprot train`, set `--use-add-feat`. Otherwise, if no other feature is specified, `rnaprot train` will train a model with all present features. User-defined features for sequences are also supported, where the input format of the feature files changes from BED to tabular (see description [below](#user-defined-features-for-sequences)).\n\n"
      },
      "source": "https://raw.githubusercontent.com/BackofenLab/RNAProt/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Inputs",
        "parent_header": [
          "RNAProt",
          "Documentation"
        ],
        "type": "Text_excerpt",
        "value": "RNAProt accepts RBP binding sites in FASTA or BED format (transcript or genomic regions). The latter one also requires a genomic sequence file (.2bit format) and a genomic annotations file (GTF format).\nAdditional input files include BED files (negative sites or regions for masking), conservation scores in bigWig format, transcript lists, or user-defined feature tables.\n\n"
      },
      "source": "https://raw.githubusercontent.com/BackofenLab/RNAProt/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Binding sites",
        "parent_header": [
          "RNAProt",
          "Documentation",
          "Inputs"
        ],
        "type": "Text_excerpt",
        "value": "RBP binding sites can be input in three different formats:\n\n- Sequences (FASTA format)\n- Genomic regions (6-column BED format)\n- Transcript regions (6-column BED format)\n\nThe file content should thus look like:\n\n```\n$ head -4 sequences.fa\n>seq_1\nUUCUCACAUUGGCAUAGACAAGAUUGCAUUCACAGGGUCUACUGAGGUUGGAAAGCUUAUC\n>seq_2\nGGAUCAAAAGAUACAACAGUUAUCAUAUGGCAAGUUGAUCCGGAUACACACCUGCUAAAAC\n\n$ head -4 genomic_sites.bed\nchr7\t5593730\t5593791\tgen_site_1\t1.24262727654043\t+\nchr7\t138460417\t138460478\tgen_site_2\t1.24262727654043\t+\nchr7\t73477388\t73477449\tgen_site_3\t4.68741211921332\t-\nchr7\t73442440\t73442501\tgen_site_4\t3.65766477581927\t-\n\n$ head -4 transcript_sites.bed\nENST00000360876\t1387\t1448\ttr_site_1\t2.99156551237271\t+\nENST00000325888\t3965\t4026\ttr_site_2\t4.51564577094684\t+\nENST00000360876\t1320\t1381\ttr_site_3\t3.67261511728524\t+\nENST00000325888\t3092\t3153\ttr_site_4\t3.05759538270791\t+\n\n```\n\nNote that RNAProt by default creates unique site IDs. Optionally, the original sequence or site IDs (BED column 4) can be kept (`--keep-ids` in `rnaprot gt`). Also note that BED column 5 contains the site score, which can be used for filtering (`--thr`). In case of p-values, reverse filtering can be enabled with `--rev-filter` (smaller value == better). Filtering by site length is also possible (`--max-len`, `--min-len`). Note that by default, `--in` sites in `rnaprot gt` are filtered based on gene coverage and overlaps with other `--in` sites! To disable these filters, set `--no-gene-filter` and `--allow-overlaps` (see mode options for more details).\nBED files with genomic RBP binding regions for example can be downloaded from [ENCODE](https://www.encodeproject.org/) (eCLIP CLIPper peak regions).\n\n"
      },
      "source": "https://raw.githubusercontent.com/BackofenLab/RNAProt/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Genome sequence",
        "parent_header": [
          "RNAProt",
          "Documentation",
          "Inputs"
        ],
        "type": "Text_excerpt",
        "value": "The human genome .2bit formatted genomic sequence file can be downloaded [here](https://hgdownload.cse.ucsc.edu/goldenpath/hg38/bigZips/hg38.2bit). This file is used to extract genomic and transcript region sequences, as well as repeat region annotations. For other organisms, have a look [here](https://hgdownload.soe.ucsc.edu/downloads.html). Note that it is easy to generate your own .2bit files from any given FASTA file.\n\n"
      },
      "source": "https://raw.githubusercontent.com/BackofenLab/RNAProt/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Genome annotations",
        "parent_header": [
          "RNAProt",
          "Documentation",
          "Inputs"
        ],
        "type": "Text_excerpt",
        "value": "RNAProt was tested with GTF files obtained from Ensembl. See Ensembl's [download page](http://www.ensembl.org/info/data/ftp/index.html) to download the latest GTF file with genomic annotations. Note that RNAProt can directly read from gzipped GTF. The GTF file is used to extract gene region, exon-intron, and transcript region annotations.\n\n\n#### User-defined region annotations\n\nTo supply user-defined region annotations, `rnaprot gt` (`rnaprot gp`) accepts a table file via `--feat-in`. Inside this, each row stores the information of one single feature to be added, beginning with a unique feature ID, the type of feature (C: categorical, N: numerical), the feature format (0: score, 1: probability, 2: p-value), and the path to the feature regions BED file. Assuming we want to use the CDE sites from [above](#test-example-with-additional-features) as a region feature for annotation, we would create a text file with the following content:\n\n\n```\n$ cat add_feat.in\nCDE\tN\t1\ttest/CDE_sites.bed\n```\n\nNote that the columns have to be tab-separated. Here we put \"CDE\" as the feature ID, \"N\" as feature type for numerical (since `CDE_sites.bed` BED file column 5 contains probabilities which we want to use for annotation), and \"1\" to indicate that the values are probabilities. Last but not least, we specify the path to the BED file in column 4. Now all `--in` site positions  (`rnaprot gt`) which overlap with `CDE_sites.bed` get the numerical value (BED column 5 value) of the overlapping region inside `CDE_sites.bed` assigned. If we want a one-hot encoding instead, we need to specify:\n\n```\n$ cat add_feat.in\nCDE\tC\t0\ttest/CDE_sites.bed\n```\n\nAlternatively, we can also run `rnaprot gt` with `--feat-in-1h`, to turn all `add_feat.in` features into one-hot encoding. This means that overlapping site positions get a \"1\" assigned, and non-overlapping a \"0\", just like for the standard region annotations (exon-intron regions, transcript regions, repeat regions). Note that `rnaprot gp` reuses the set `add_feat.in` file used for training (`rnaprot train`), as long as the file path is valid. In general, we suggest to use either one-hot encoding (C) or normalized BED column 5 values (e.g. probabilities from 0 to 1). If you set \"N\" and \"2\" (column 1 and 2, telling RNAProt that these are p-values), RNAProt will automatically convert them to probabilities, by using 1-p-value for the respective regions. As said we do not recommend using raw column 5 BED scores, since the values are not normalized, which likely will be suboptimal for learning.\n\n"
      },
      "source": "https://raw.githubusercontent.com/BackofenLab/RNAProt/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "User-defined features for sequences",
        "parent_header": [
          "RNAProt",
          "Documentation",
          "Inputs"
        ],
        "type": "Text_excerpt",
        "value": "In case FASTA sequences are provided via `--in` (`rnaprot gt` and `rnaprot gp`), the format of input files specified in the `--feat-in` changes from BED to tabular. In order for this to work, we also need to supply the respective negative sequences via `--neg-in`, since the additional feature information has to be given for both positive and negative sequences. Currently only numerical features are supported. A valid `--feat-in` table file would thus look like this:\n\n```\n$ cat add_feat.in\nfeatx\tN\t0\ttest/another_feat.in\n```\n\nMoreover, the format of the feature file should look like this:\n\n```\n$ cat test/another_feat.in\nid1\t-0.2,0.1,0,-1\nid2\t0.2,-0.1,0,1\nid3\t0.1,-0.2,0\n```\n\nWe see that the first column contains the sequence IDs, which need to be identical to the ones supplied via `--in` and `--neg-in`. The second column contains the position-wise numerical feature values, which need to be comma-separated. The number of numerical feature values needs to be equal to the respective sequence length. This way, each sequence nucleotide can get one numerical feature value assigned. Note that the values will be used for training as they are, meaning that there is no further normalization applied to the values. Also note that for `rnaprot gp` a second table file is needed, pointing to the files which store the numeric values of the test set. This is different from using `--feat-in` with BED regions, where the files defined in the table file are the same for `rnaprot gt` and `rnaprot gp`, since they are genomic regions.\n\n"
      },
      "source": "https://raw.githubusercontent.com/BackofenLab/RNAProt/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Additional inputs",
        "parent_header": [
          "RNAProt",
          "Documentation",
          "Inputs"
        ],
        "type": "Text_excerpt",
        "value": "Additional input files are (depending on set mode):\n\n- BED files (negative sites or regions for masking, 6-column BED format as described)\n- A transcript ID list file for exon-intron or transcript region annotation\n- Conservation scores in bigWig format\n\nThe transcript IDs list file (`--tr-list` option, for `rnaprot gt` and `rnaprot gp`) has the following format (one ID per row):\n\n```\n$ head -5 tr_list.in\nENST00000360876\nENST00000325888\nENST00000360876\nENST00000325888\nENST00000359863\n```\n\nFiles containing phastCons and phyloP conservation scores can be downloaded from UCSC (for hg38 e.g. [phastCons100way](http://hgdownload.cse.ucsc.edu/goldenpath/hg38/phastCons100way/hg38.phastCons100way.bw) and [phyloP100way](http://hgdownload.cse.ucsc.edu/goldenpath/hg38/phyloP100way/hg38.phyloP100way.bw)). RNAProt accepts the files as inputs (modes `rnaprot gt` and `rnaprot gp`), with `--phastcons` and `--phylop`. Note that `rnaprot gp` reuses the set file paths used for training (`rnaprot train`), as long as the file paths are still valid. If not, it will complain, or you can just overwrite the paths by setting `--phastcons` and `--phylop`.\n\n"
      },
      "source": "https://raw.githubusercontent.com/BackofenLab/RNAProt/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Outputs",
        "parent_header": [
          "RNAProt",
          "Documentation"
        ],
        "type": "Text_excerpt",
        "value": "Depending on the executed program mode, various output files are generated:\n\n- Reports on dataset statistics (.html) for `rnaprot gt`, `rnaprot eval`, and `rnaprot gp`.\n- Sequence and additional feature profiles (png, pdf) for `rnaprot eval` and `rnaprot predict`\n- Sequence and additional feature logos (.png, .pdf) for `rnaprot eval`\n- Whole site predictions (.out) for `rnaprot predict` (`--mode 1`)\n- Moving window peak region predictions (.bed, .tsv) for `rnaprot predict` (`--mode 2`)\n\n"
      },
      "source": "https://raw.githubusercontent.com/BackofenLab/RNAProt/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Logos and profiles",
        "parent_header": [
          "RNAProt",
          "Documentation",
          "Outputs"
        ],
        "type": "Text_excerpt",
        "value": "In model evaluation mode (`rnaprot eval`), sequence and additional feature logos are output, as well as position-wise profiles (including saliency map and single mutation effects track) for a subset of training sites to illustrate binding preferences.\n\n"
      },
      "source": "https://raw.githubusercontent.com/BackofenLab/RNAProt/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Prediction files",
        "parent_header": [
          "RNAProt",
          "Documentation",
          "Outputs"
        ],
        "type": "Text_excerpt",
        "value": "In model prediction mode (`rnaprot predict`), whole-site (`--mode 1`) or moving window peak region (`--mode 2`) predictions are output. Optionally, the top scoring windows can also be plotted as profiles just like for `rnaprot eval`.\n\nIn `--mode 2`, `peak_regions.bed` contains the predicted peak regions on the reference (depending on input sequence, transcript, or genomic coordinates), in 11-column BED format:\n\n\n```\n$ head -3 pum2_test_predict_out/peak_regions.bed\nchr20\t36050191\t36050204\tpeak_1\t3.9615161\t-\t36050145\t36050224\t0.13704819277108438\t36050198\t0.14824574\nchr20\t36049801\t36049822\tpeak_2\t4.028928\t-\t36049743\t36049822\t0.09839357429718887\t36049817\t0.32227173\nchr20\t36049711\t36049724\tpeak_3\t4.0312123\t-\t36049646\t36049725\t0.09738955823293183\t36049718\t0.0796903\n```\n\nHere the columns are: reference ID, reference peak region start position (0-based), reference peak region end position (1-based), peak ID, window score, strand (for transcript or sequence input always \"+\"), reference window start position (0-based), reference window end position (1-based), window score p-value (calculated from the positive training set scores distribution), reference top saliency peak position (1-based), top saliency peak score (saliency).\n\nThe same information can also be found in the `peak_regions.tsv` file (there all coordinates 1-based), which in addition contains the top saliency peak sequence and the window sequence:\n\n```\n$ head -3 pum2_test_predict_out/peak_regions.tsv\nref_id\tpeak_region_s\tpeak_region_e\tstrand\twindow_s\twindow_e\tpeak_id\twindow_score\twin_sc_p_val\ttop_peak_score\ttop_peak_pos\ttop_peak_seq\twindow_seq\nchr20\t36050192\t36050204\t-\t36050146\t36050224\tpeak_1\t3.9615161\t0.13704819277108438\t0.14824574\t36050198\tGUGUAUA\tUACUGGCCGUUUAUGGAAGGCCUGUGUAUAUAAUAUGAAAAAGCUGCUCUCAACUCCACCCCAACCUUUUAAUAGAAAA\nchr20\t36049802\t36049822\t-\t36049744\t36049822\tpeak_2\t4.028928\t0.09839357429718887\t0.32227173\t36049817\tGUAUAUA\tGUGUAUAUAGUUGACAAUGCUAAGCUUUUUUGAAAUGUCUCUUCUUUUUAGAUGUUCUGAAGUGCCUGAUAUGUUAAAA\n```\n\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/BackofenLab/RNAProt/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/BackofenLab/RNAProt/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/BackofenLab/RNAProt/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BackofenLab/RNAProt"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RNAProt"
      },
      "source": "https://raw.githubusercontent.com/BackofenLab/RNAProt/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BackofenLab/RNAProt/main/docs/framework_overview.png"
      },
      "source": "https://raw.githubusercontent.com/BackofenLab/RNAProt/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "RNAProt"
        ],
        "type": "Text_excerpt",
        "value": "RNAProt was tested on Ubuntu (18.04 LTS), with Nvidia driver >=440, CUDA >=10, and various Nvidia graphics cards (RTX 2080 Ti, RTX 2070, GTX 1060, GTX 1030). We thus assume that you have a similar system available and running. While RNAProt runs fine without a dedicated GPU, we definitely recommend having an Nvidia graphics card with CUDA support for speeding up model training (specifically we recommend a >= GTX 1060 or a similar newer model, with >= 4 GB RAM). Regarding main memory, we recommend at least 8 GB RAM.\nIn the following we show how to install RNAProt via Conda package (easiest way + recommended), or alternatively manually (not too difficult either). In any case, you first need Conda running on your computer.\n"
      },
      "source": "https://raw.githubusercontent.com/BackofenLab/RNAProt/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Conda",
        "parent_header": [
          "RNAProt",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "If you do not have Conda yet, you can e.g. install miniconda, a free + lightweight Conda installer. Get miniconda [here](https://docs.conda.io/en/latest/miniconda.html), choose the Python 3.8 Miniconda3 Linux 64-bit installer and follow the installation instructions. In the end, Conda should be evocable on the command line via (possibly in a different version):\n\n```\n$ conda --version\nconda 4.10.0\n```\n"
      },
      "source": "https://raw.githubusercontent.com/BackofenLab/RNAProt/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Conda package installation",
        "parent_header": [
          "RNAProt",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "RNAProt is available as Conda package [here](https://anaconda.org/bioconda/rnaprot). This is the most convenient way to install RNAProt, since Conda takes care of all the dependencies. Note however that the Conda package version might not always be the latest release (but we work hard to not let this happen).\n\nWe recommend to create a Conda environment inside which we will then install RNAProt:\n\n```\nconda create -n rnaprotenv python=3.8 -c conda-forge -c bioconda\nconda activate rnaprotenv\nconda install -c bioconda rnaprot\n```\n\nNote that Python 3.8 is not a necessity (higher versions should work just as fine). If you are experiencing problems while running `conda install -c bioconda rnaprot` (e.g. complaints about conflicting dependencies), the following commands should do the trick:\n\n```\nconda config --add channels bioconda\nconda config --add channels conda-forge\n```\n\nThis tells conda to explicitly look for packages in the specified channels, stored in the `.condarc` [conda configuration file](https://conda.io/projects/conda/en/latest/user-guide/configuration/use-condarc.html).\n\n\nNOTE that the bioconda installation only includes the CPU version of RNAProt (no GPU support). If you have a GPU supporting CUDA and want to take advantage of it (very much recommended for fast model training!), just install in addition:\n\n```\nconda install -c conda-forge pytorch-gpu=1.8\n```\n\nRNAProt was initially written and tested with pytorch 1.8. However, higher version numbers should work as well (i.e., you can simply discard the version number). Now RNAProt should be available inside the environment:\n\n\n```\nrnaprot -h\n```\n\nFinally, if you have a compatible GPU, we want to check whether the GPU (CUDA) is available for RNAProt:\n\n```\npython -c \"import torch; print(torch.__version__)\"\npython -c \"import torch; print(torch.cuda.is_available())\"\npython -c \"import torch; print(torch.version.cuda)\"\n```\n\nIn our test case this delivers:\n\n```\n$ python -c \"import torch; print(torch.__version__)\"\n1.8.0\n$ python -c \"import torch; print(torch.cuda.is_available())\"\nTrue\n$ python -c \"import torch; print(torch.version.cuda)\"\n11.0\n```\n\nThis is great news, meaning that we can RNAProt with GPU support.\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/BackofenLab/RNAProt/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Manual installation",
        "parent_header": [
          "RNAProt",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "To manually install RNAProt, we first create a Conda environment (as described [above](#conda)). Once inside the environment, we need to install the following dependencies for the GPU version (GPU with CUDA support required):\n\n```\nconda install -c conda-forge pytorch-gpu=1.8\nconda install -c conda-forge seaborn\nconda install -c bioconda viennarna\nconda install -c bioconda bedtools\nconda install -c bioconda logomaker\nconda install -c conda-forge hpbandster\nconda install -c conda-forge markdown=3.2.2\nconda install -c conda-forge plotly\nconda install -c conda-forge scikit-learn\nconda install -c bioconda ushuffle\nconda install -c bioconda ucsc-twobitinfo\nconda install -c bioconda ucsc-twobittofa\nconda install -c bioconda ucsc-bigwigaverageoverbed\n```\n\nIf you don't have a CUDA supporting GPU (and you're not planning on getting one any time soon either), you don't need to install the additional GPU dependencies. To install pyTorch without GPU support, simply exchange the above pytorch call with:\n\n```\nconda install -c conda-forge pytorch-cpu=1.8\n```\n\nConcerning version numbers, RNAProt was tested with the following versions: pytorch=1.8.0, seaborn=0.11.1, viennarna=2.4.17, bedtools=2.30.0, logomaker=0.8, hpbandster=0.7.4, markdown=3.2.2, plotly=4.14.3, and scikit-learn=0.24.1. Note that so far we have not experienced problems with higher pytorch version numbers (i.e., simply discarding the version number should work just as well).\n\n\nFinally, to install RNAProt, we simply clone the repository and execute the installation script inside the folder:\n\n```\ngit clone https://github.com/BackofenLab/RNAProt.git\ncd RNAProt\npython -m pip install . --ignore-installed --no-deps -vv\n```\n\nNow we can run RNAProt from any given folder (just remember to re-activate the environment once you open a new shell):\n\n```\nrnaprot -h\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/BackofenLab/RNAProt/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Training set generation",
        "parent_header": [
          "RNAProt",
          "Documentation",
          "Program modes"
        ],
        "type": "Text_excerpt",
        "value": "The following command line arguments are available in `rnaprot gt` mode:\n\n```\n$ rnaprot gt -h\nusage: rnaprot gt [-h] --in str --out str [--gtf str] [--gen str]\n                  [--mode {1,2,3}] [--mask-bed str] [--seq-ext int]\n                  [--thr float] [--rev-filter] [--max-len int] [--min-len int]\n                  [--keep-ids] [--allow-overlaps] [--no-gene-filter]\n                  [--neg-comp-thr float] [--neg-factor {2,3,4,5}]\n                  [--keep-add-neg] [--neg-in str] [--shuffle-k {1,2,3}]\n                  [--seed int] [--report] [--theme {1,2}] [--eia] [--eia-ib]\n                  [--eia-n] [--eia-all-ex] [--tr-list str] [--phastcons str]\n                  [--phylop str] [--tra] [--tra-codons] [--tra-borders]\n                  [--rra] [--str] [--plfold-u int] [--plfold-l int]\n                  [--plfold-w int] [--feat-in str] [--feat-in-1h]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --gtf str             Genomic annotations GTF file (.gtf or .gtf.gz)\n  --gen str             Genomic sequences .2bit file\n  --mode {1,2,3}        Define mode for --in BED site extraction. (1) Take the\n                        center of each site, (2) Take the complete site, (3)\n                        Take the upstream end for each site. Note that --min-\n                        len applies only for --mode 2 (default: 1)\n  --mask-bed str        Additional BED regions file (6-column format) for\n                        masking negatives (e.g. all positive RBP CLIP sites)\n  --seq-ext int         Up- and downstream sequence extension length of sites\n                        (site definition by --mode) (default: 40)\n  --thr float           Minimum site score (--in BED column 5) for filtering\n                        (assuming higher score == better site) (default: None)\n  --rev-filter          Reverse --thr filtering (i.e. the lower the better,\n                        e.g. for p-values) (default: False)\n  --max-len int         Maximum length of --in sites (default: 300)\n  --min-len int         Minimum length of --in sites (only effective for\n                        --mode 2). If length < --min-len, take center and\n                        extend to --min-len. Use uneven numbers for equal up-\n                        and downstream extension (default: 21)\n  --keep-ids            Keep --in BED column 4 site IDs. Note that site IDs\n                        have to be unique (default: False)\n  --allow-overlaps      Do not select for highest-scoring sites in case of\n                        overlapping sites (default: False)\n  --no-gene-filter      Do not filter positives based on gene coverage (gene\n                        annotations from --gtf) (default: False)\n  --neg-comp-thr float  Sequence complexity (Shannon entropy) threshold for\n                        filtering random negative regions (default: 0.5)\n  --neg-factor {2,3,4,5}\n                        Determines number of initial random negatives to be\n                        extracted (== --neg-factor n times # positives)\n                        (default: 2)\n  --keep-add-neg        Keep additional negatives (# controlled by --neg-\n                        factor) instead of outputting same numbers of positive\n                        and negative sites (default: False)\n  --neg-in str          Negative genomic or transcript sites in BED (6-column\n                        format) or FASTA format (unique IDs required). Use\n                        with --in BED/FASTA. If not set, negatives are\n                        generated by shuffling --in sequences (if --in FASTA)\n                        or random selection of genomic or transcript sites (if\n                        --in BED)\n  --shuffle-k {1,2,3}   Supply k for k-nucleotide shuffling of --in sequences\n                        to generate negative sequences (if no --neg-in\n                        supplied) (default: 2)\n  --seed int            Set a fixed random seed number (e.g. --seed 1) to\n                        obtain the same random negative set for identical\n                        rnaprot gt runs\n  --report              Output an .html report providing various training set\n                        statistics and plots (default: False)\n  --theme {1,2}         Set theme for .html report (1: palm beach, 2: midnight\n                        sunset) (default: 1)\n\nrequired arguments:\n  --in str              Genomic or transcript RBP binding sites file in BED\n                        (6-column format) or FASTA format. If --in FASTA, only\n                        --str is supported as additional feature. If --in BED,\n                        --gtf and --gen become mandatory\n  --out str             Output training data folder (== input folder to\n                        rnaprot train)\n\nadditional annotation arguments:\n  --eia                 Add exon-intron annotations to genomic regions\n                        (default: False)\n  --eia-ib              Add intron border annotations to genomic regions (in\n                        combination with --eia) (default: False)\n  --eia-n               Label regions not covered by intron or exon regions as\n                        N instead of labelling them as introns (I) (in\n                        combination with --eia) (default: False)\n  --eia-all-ex          Use all annotated exons in --gtf file, instead of\n                        exons of most prominent transcripts defined by --tr-\n                        list. Set this and --tr-list will be effective only\n                        for --tra (default: False)\n  --tr-list str         Supply file with transcript IDs (one ID per row) for\n                        exon-intron labeling (using the corresponding exon\n                        regions from --gtf). By default, exon regions of the\n                        most prominent transcripts (automatically selected\n                        from --gtf) are used (default: False)\n  --phastcons str       Genomic .bigWig file with phastCons conservation\n                        scores to add as annotations\n  --phylop str          Genomic .bigWig file with phyloP conservation scores\n                        to add as annotations\n  --tra                 Add transcript region annotations (5'UTR, CDS, 3'UTR,\n                        None) to genomic and transcript regions (default:\n                        False)\n  --tra-codons          Add start and stop codon annotations to genomic or\n                        transcript regions (in combination with --tra)\n                        (default: False)\n  --tra-borders         Add transcript and exon border annotations to\n                        transcript regions (in combination with --tra)\n                        (default: False)\n  --rra                 Add repeat region annotations for genomic or\n                        transcript regions retrieved from --gen .2bit\n                        (default: False)\n  --str                 Add secondary structure probabilities feature\n                        (calculate with RNAplfold) (default: False)\n  --plfold-u int        RNAplfold -u parameter value (default: 3)\n  --plfold-l int        RNAplfold -L parameter value (default: 50)\n  --plfold-w int        RNAplfold -W parameter value (default: 70)\n  --feat-in str         Provide tabular file with additional position-wise\n                        genomic region features (infos and paths to BED files)\n                        to add\n  --feat-in-1h          Use one-hot encoding for all additional position-wise\n                        features from --feat-in table, ignoring type\n                        definitions in --feat-in table (default: False)\n\n```\n\nNote that if genomic or transcript regions are supplied via `--in`, `--gen` and `--gtf` become required arguments.\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/BackofenLab/RNAProt/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Prediction set generation",
        "parent_header": [
          "RNAProt",
          "Documentation",
          "Program modes"
        ],
        "type": "Text_excerpt",
        "value": "The following command line arguments are available in `rnaprot gp` mode:\n\n```\n$ rnaprot gp -h\nusage: rnaprot gp [-h] --in str --train-in str --out str [--gtf str]\n                  [--gen str] [--mode {1,2,3}] [--seq-ext int] [--gene-filter]\n                  [--report] [--theme {1,2}] [--tr-list str] [--eia-all-ex]\n                  [--phastcons str] [--phylop str] [--feat-in str]\n\noptional arguments:\n  -h, --help       show this help message and exit\n  --gtf str        Genomic annotations GTF file (.gtf or .gtf.gz)\n  --gen str        Genomic sequences .2bit file\n  --mode {1,2,3}   Define mode for --in BED site extraction. (1) Take the\n                   center of each site, (2) Take the complete site, (3) Take\n                   the upstream end for each site. Use --seq-ext to extend\n                   center sites again (default: 2)\n  --seq-ext int    Up- and downstream sequence extension length of --in sites\n                   (if --in BED, site definition by --mode) (default: False)\n  --gene-filter    Filter --in sites based on gene coverage (gene annotations\n                   from --gtf) (default: False)\n  --report         Output an .html report providing various training set\n                   statistics and plots (default: False)\n  --theme {1,2}    Set theme for .html report (1: palm beach, 2: midnight\n                   sunset) (default: 1)\n\nrequired arguments:\n  --in str         Genomic or transcript RBP binding sites file in BED\n                   (6-column format) or FASTA format. If --in FASTA, only\n                   --str is supported as additional feature. If --in BED,\n                   --gtf and --gen become mandatory\n  --train-in str   Training input folder (output folder of rnaprot train) to\n                   extract the same features for --in sites which were used to\n                   train the model (info stored in --train-in folder)\n  --out str        Output prediction dataset folder (== input folder to\n                   rnaprot predict)\n\nadditional annotation arguments:\n  --tr-list str    Supply file with transcript IDs (one ID per row) for exon-\n                   intron labeling (using the corresponding exon regions from\n                   --gtf). By default, exon regions of the most prominent\n                   transcripts (automatically selected from --gtf) are used\n                   (default: False)\n  --eia-all-ex     Use all annotated exons in --gtf file, instead of exons of\n                   most prominent transcripts or exon defined by --tr-list.\n                   Set this and --tr-list will be effective only for --tra.\n                   NOTE that by default --eia-all-ex is disabled, even if\n                   --train-in model was trained with --eia-all-ex (default:\n                   False)\n  --phastcons str  Genomic .bigWig file with phastCons conservation scores to\n                   add as annotations\n  --phylop str     Genomic .bigWig file with phyloP conservation scores to add\n                   as annotations\n  --feat-in str    Provide tabular file with additional position-wise genomic\n                   region features (infos and paths to BED files) to add. BE\n                   SURE to use the same file as used for generating the\n                   training dataset (rnaprot gt --feat-in) for training the\n                   model from --train-in!\n\n```\n\nNote that `rnaprot gp` will try to reuse file paths used for training the `--train-in` model. This includes `--tr-list`, `--phastcons`, `--phylop`, and `--feat-in`. These can be overwritten by setting providing the paths on the command line.\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/BackofenLab/RNAProt/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/BackofenLab/RNAProt/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021 Michael Uhl\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/BackofenLab/RNAProt/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RNAProt"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "BackofenLab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 928936,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "JavaScript",
        "size": 16880,
        "type": "Programming_language",
        "value": "JavaScript"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BackofenLab/RNAProt/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "michauhl",
          "type": "User"
        },
        "date_created": "2022-07-22T16:40:26Z",
        "date_published": "2022-07-22T16:43:07Z",
        "description": "- Add --seed option to obtain identical random negative sets (rnaprot gt) and identical models (rnaprot train)\r\n- Fix gene_name not found error when using more recent Ensembl GTF files",
        "html_url": "https://github.com/BackofenLab/RNAProt/releases/tag/v0.5",
        "name": "RNAProt v0.5",
        "release_id": 72633623,
        "tag": "v0.5",
        "tarball_url": "https://api.github.com/repos/BackofenLab/RNAProt/tarball/v0.5",
        "type": "Release",
        "url": "https://api.github.com/repos/BackofenLab/RNAProt/releases/72633623",
        "value": "https://api.github.com/repos/BackofenLab/RNAProt/releases/72633623",
        "zipball_url": "https://api.github.com/repos/BackofenLab/RNAProt/zipball/v0.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "michauhl",
          "type": "User"
        },
        "date_created": "2021-07-28T15:08:37Z",
        "date_published": "2021-07-28T15:27:05Z",
        "description": "- Added user-defined feature support for FASTA inputs",
        "html_url": "https://github.com/BackofenLab/RNAProt/releases/tag/v0.4",
        "name": "RNAProt v0.4",
        "release_id": 46914219,
        "tag": "v0.4",
        "tarball_url": "https://api.github.com/repos/BackofenLab/RNAProt/tarball/v0.4",
        "type": "Release",
        "url": "https://api.github.com/repos/BackofenLab/RNAProt/releases/46914219",
        "value": "https://api.github.com/repos/BackofenLab/RNAProt/releases/46914219",
        "zipball_url": "https://api.github.com/repos/BackofenLab/RNAProt/zipball/v0.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "michauhl",
          "type": "User"
        },
        "date_created": "2021-04-06T21:03:38Z",
        "date_published": "2021-04-06T21:06:12Z",
        "description": "- update version numbers :+1: ",
        "html_url": "https://github.com/BackofenLab/RNAProt/releases/tag/v0.3",
        "name": "RNAProt v0.3",
        "release_id": 41023067,
        "tag": "v0.3",
        "tarball_url": "https://api.github.com/repos/BackofenLab/RNAProt/tarball/v0.3",
        "type": "Release",
        "url": "https://api.github.com/repos/BackofenLab/RNAProt/releases/41023067",
        "value": "https://api.github.com/repos/BackofenLab/RNAProt/releases/41023067",
        "zipball_url": "https://api.github.com/repos/BackofenLab/RNAProt/zipball/v0.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "michauhl",
          "type": "User"
        },
        "date_created": "2021-04-02T19:20:11Z",
        "date_published": "2021-04-02T19:41:09Z",
        "description": "- Fixed bug: models trained with GPU now work with CPU-only installation, or if no GPU present",
        "html_url": "https://github.com/BackofenLab/RNAProt/releases/tag/v0.2",
        "name": "RNAProt v0.2",
        "release_id": 40884453,
        "tag": "v0.2",
        "tarball_url": "https://api.github.com/repos/BackofenLab/RNAProt/tarball/v0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/BackofenLab/RNAProt/releases/40884453",
        "value": "https://api.github.com/repos/BackofenLab/RNAProt/releases/40884453",
        "zipball_url": "https://api.github.com/repos/BackofenLab/RNAProt/zipball/v0.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "michauhl",
          "type": "User"
        },
        "date_created": "2021-04-02T14:59:59Z",
        "date_published": "2021-04-02T15:42:15Z",
        "description": "Initial release",
        "html_url": "https://github.com/BackofenLab/RNAProt/releases/tag/v0.1",
        "name": "RNAProt v0.1",
        "release_id": 40876253,
        "tag": "v0.1",
        "tarball_url": "https://api.github.com/repos/BackofenLab/RNAProt/tarball/v0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/BackofenLab/RNAProt/releases/40876253",
        "value": "https://api.github.com/repos/BackofenLab/RNAProt/releases/40876253",
        "zipball_url": "https://api.github.com/repos/BackofenLab/RNAProt/zipball/v0.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Test runs",
        "parent_header": [
          "RNAProt"
        ],
        "type": "Text_excerpt",
        "value": "Once installed, we can do some quick test runs. \n\n"
      },
      "source": "https://raw.githubusercontent.com/BackofenLab/RNAProt/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 08:19:29",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 10
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "HTML reports",
        "parent_header": [
          "RNAProt",
          "Documentation",
          "Outputs"
        ],
        "type": "Text_excerpt",
        "value": "For the dataset generation modes (`rnaprot gt`, `rnaprot gp`), HTML reports can be output which include detailed statistics and visualizations regarding the positive, negative, or test dataset (`--report` option). There are various comparative statistics available on: site lengths, sequence complexity, di-nucleotide distributions, k-mer statistics, target region biotype and overlap statistics, as well as additional statistics and visualizations for each chosen feature. The .html report file can be found in the mode output folder. For `rnaprot eval`, comparative statistics regarding positive and negative site scores are output, as well as a saliency peak distribution, or if `--add-train-in` is given a model comparison plot. \n\n"
      },
      "source": "https://raw.githubusercontent.com/BackofenLab/RNAProt/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Test example with FASTA sequences as input",
        "parent_header": [
          "RNAProt",
          "Test runs"
        ],
        "type": "Text_excerpt",
        "value": "We first train a sequence model, using a provided set of positive and negative FASTA sequences sampled from the PARCLIP PUM2 dataset (3,000 positives, 3,000 negatives, all sequences with length 81 nt). In the following we will mainly use default parameters, but note that there are many options available for each program mode. To learn more about the mode options, refer to the [Documentation](#documentation), or simply list all mode options, e.g. for `rnaprot train`, by typing:\n\n```\nrnaprot train -h\n```\n\nBefore training a model, we need to generate an RNAProt training dataset. For this we go to the cloned repository folder (clone + enter if not already there), and use the FASTA sequences supplied in the `test` folder as training data. To get training set statistics, we also enable `--report`:\n\n\n```\ngit clone https://github.com/BackofenLab/RNAProt.git\ncd RNAProt\nrnaprot gt --in test/PUM2_PARCLIP.positives.fa --neg-in test/PUM2_PARCLIP.negatives.fa --out PUM2_PARCLIP_gt_out --report\n```\n\nWe can then take a look at the `report.rnaprot_gt.html` inside `test_gt_out`, informing us about similarities and differences between the positive and negative set. The content of the HTML report depends on selected features (e.g. structure, conservation scores, region annotations), and the input type given to `rnaprot gt` (FASTA sequences, genomic sites BED, or transcript sites BED). Here for example we can compare k-mer statistics of the positive and negative set, observing that the positives tend to contain more AA, UU, and AU repeat sites. This likely also contributes to the lower sequence complexity of the postive set.\n\n\nNext we train a model on the created dataset, using the default hyperparameters. For this we simply run `rnaprot train` with the `rnaprot gt` output folder as input. We also enable `--verbose-train`, to see the learning progress over the number of epochs:\n\n```\nrnaprot train --in PUM2_PARCLIP_gt_out --out PUM2_PARCLIP_train_out --verbose-train\n```\n\nIn the end we get a summary for the trained model, e.g. reporting the model validation AUC, the training runtime, and set hyperparameters. To obtain identical models from identical calls, you have to set a fixed random seed number (e.g. `--seed 1`). This guarantees that the same initial random weights are set when training the network, as well as the same train-validation-test splits are used.\nNote that if you want to obtain the generalization peformance of the model on the given dataset, you need to run `rnaprot train` in cross validation mode (10-fold by default) by adding `--cv`:\n\n```\nrnaprot train --in PUM2_PARCLIP_gt_out --out PUM2_PARCLIP_cv_train_out --cv --verbose-train\n```\n\nTo visualize what our just-trained model has learned, we next run `rnaprot eval`, which requires both the `rnaprot gt` and `rnaprot train` output folders:\n\n```\nrnaprot eval --gt-in PUM2_PARCLIP_gt_out --train-in PUM2_PARCLIP_train_out --out PUM2_PARCLIP_eval_out\n```\n\nThis will plot a sequence logo informing us about global preferences, as well as profiles for the top 25 scoring sites (default setting). The profiles contain the saliency map and single mutations track, giving us an idea what local information the model regards as important for each of the 25 sites. As with the other modes, more options are available (e.g. `--report` for additional statistics, comparing two models, or specifying motif sizes and which profiles to plot).\n\n\nNow that we have a model, we naturally want to use it for prediction. For this we first create a prediction dataset, choosing the lncRNA *NORAD* for window prediction. *NORAD* was shown to act as a [decoy for PUMILIO proteins](https://doi.org/10.1016/j.cell.2015.12.017) (PUM1/PUM2). We therefore use its provided FASTA sequence as input:\n\n```\nrnaprot gp --in test/NORAD_lncRNA.fa --train-in PUM2_PARCLIP_train_out --out PUM2_PARCLIP_gp_out --report\n```\n\nNote that the input can be any number of sequences, genomic regions, or transcript regions (also see examples below).\n\nBy default, RNAProt predicts whole sites, i.e., we would get one score returned for the whole lncRNA. To run the window prediction, we use `--mode 2`, and also plot the top window profiles containing the reported peak regions:\n\n```\nrnaprot predict --in PUM2_PARCLIP_gp_out --train-in PUM2_PARCLIP_train_out --out PUM2_PARCLIP_NORAD_predict_out --mode 2 --plot-top-profiles\n```\n\nNow we can take a look at the predicted peak regions (BED, TSV), or observe the profiles just like for `rnaprot eval`. The predicted peak regions are stored in BED format, as well as in a table file with additional information (.tsv). For details on output formats, see the [Documentation](#documentation). Note that while model prediction itself is very fast, plotting (especially getting the single mutation infos) takes some time for each peak region. So if you predict on a large set of input sites or sequences, you might want to disable plotting (or just exercise patience and wait). Knowing this, you can also predict only on certain input sites or a small subset (e.g. site_id1, site_id2), by adding `--site-id site_id1 site_id2`.\n\n"
      },
      "source": "https://raw.githubusercontent.com/BackofenLab/RNAProt/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Test example with genomic regions as input",
        "parent_header": [
          "RNAProt",
          "Test runs"
        ],
        "type": "Text_excerpt",
        "value": "To create datasets based on genomic or transcript regions, we first need to download two additional files. Specifically, we need a GTF file (containing genomic annotations), as well as a .2bit file (containing the genomic sequences). Note that we used Ensembl GTF files to test RNAProt, and therefore recommend using these. You can find them [here](http://www.ensembl.org/info/data/ftp/index.html) for many model organisms. The .2bit genome file we will download from [UCSC](https://hgdownload.cse.ucsc.edu/goldenpath/hg38/bigZips). For this example, we choose the human genome + annotations (hg38 assembly):\n\n```\nwget https://hgdownload.cse.ucsc.edu/goldenpath/hg38/bigZips/hg38.2bit\nwget http://ftp.ensembl.org/pub/release-103/gtf/homo_sapiens/Homo_sapiens.GRCh38.103.gtf.gz\n```\n\nUnfortunately, we sometimes experienced cases where the GTF file was not fully downloaded. You can check this by browsing the file with:\n\n```\nless Homo_sapiens.GRCh38.103.gtf.gz\n```\n\nWe would expect something like this appearing as first rows:\n\n```\n#!genome-build GRCh38.p13\n#!genome-version GRCh38\n#!genome-date 2013-12\n#!genome-build-accession NCBI:GCA_000001405.28\n#!genebuild-last-updated 2020-08\n```\n\nIf the output is cryptic instead, you need to do it again. Next we download some genomic RBP binding regions identified by eCLIP from [ENCODE](https://www.encodeproject.org/). The ENCODE website contains a huge collection of eCLIP datasets for various RBPs. For this example, we again download PUM2 binding sites, choosing the IDR peaks identified by ENCODE's CLIPper pipeline (PUM2 K562 eCLIP dataset ID: ENCFF880MWQ, PUM2 K562 IDR peaks dataset ID: ENCFF880MWQ). We unzip it and change the format to 6-column BED which RNAProt likes best:\n\n```\nwget https://www.encodeproject.org/files/ENCFF880MWQ/@@download/ENCFF880MWQ.bed.gz\ngunzip -c ENCFF880MWQ.bed.gz | awk '{print $1\"\\t\"$2\"\\t\"$3\"\\t\"$4\"\\t\"$7\"\\t\"$6}' > PUM2_K562_IDR_peaks.bed\n```\n\nNote that we move the log2 fold change value from column 7 (original file) to column 5, which is used by RNAProt to filter and select sites in case of overlaps. By default, `rnaprot gt` removes overlapping sites by selecting only the highest-scoring site from a set of overlapping sites. To disable this, set `--allow-overlaps`. If there are no column 5 scores given (or all the same), filtering of overlaps is disabled by default. Moreover, positive sites that do not overlap with gene regions are by default filtered out too. To disable this, set `--no-gene-filter`.\n\nNext we create a training dataset, by supplying the downloaded GTF and .2bit file:\n\n```\nrnaprot gt --in PUM2_K562_IDR_peaks.bed --out PUM2_K562_IDR_gt_out --gtf Homo_sapiens.GRCh38.103.gtf.gz --gen hg38.2bit --report\n```\n\nThanks to the given GTF file, the HTML report will now also include information on target gene regions and biotypes. Note that by default, `rnaprot gt` centers the input BED regions, and extends them on both sides by the set `--seq-ext` (by default 40). If you want to keep the original site lengths, set `--mode 2 --seq-ext 0`. In this case, you might also want to filter the `--in` sites by `--max-len` or `--min-len`, e.g. `--max-len 100`. Of course you can also extend the original sites, e.g. by setting `--mode 2 --seq-ext 10`. Alternatively, you can set `--mode 3` to use the region upstream ends and extend by `--seq-ext`. Note that the negatives are generated randomly, so the same `rnaprot gt` call will produce a different set of random negative sites (unless negatives are supplied). To obtain the same random negatives repeatedly from identical calls, you have to set a fixed random seed number (e.g. `--seed 1`).\n\n\nNow we can train a model and evaluate it just like in the example above:\n\n```\nrnaprot train --in PUM2_K562_IDR_gt_out --out PUM2_K562_IDR_train_out --verbose-train\n\nrnaprot eval --gt-in PUM2_K562_IDR_gt_out --train-in PUM2_K562_IDR_train_out --out PUM2_K562_IDR_eval_out --report\n```\n\nFor prediction, we could again use the folder generated by `rnaprot gp` from the above FASTA sequences + *NORAD* example. However, since we now have the GTF + genome .2bit file, we can also get its genomic or transcript region directly from these files (no need to download FASTA sequences or a gene BED file). As with `rnaprot gt`, `rnaprot gp` accepts sequences, genomic regions, or transcript regions as input. To get its genomic or transcript region, we just need its gene or transcript ID (as long as it is in the GTF file), and then use one of the two helper scripts installed together with RNAProt:\n\n```\ngtf_extract_gene_regions.py --ids ENSG00000260032 --gtf Homo_sapiens.GRCh38.103.gtf.gz --out ENSG00000260032.bed\n\ngtf_extract_transcript_regions.py --ids ENST00000565493 --gtf Homo_sapiens.GRCh38.103.gtf.gz --out ENST00000565493.bed\n```\n\nThe two scripts also accept > 1 ID (either on the command line or more practically given as a file with one ID per row). In the case of *NORAD*, both transcript and gene region have the same length, since *NORAD* contains no introns and only one annotated isoform:\n\n```\n$ cat ENSG00000260032.bed\nchr20\t36045617\t36051018\tENSG00000260032\t0\t-\n$ cat ENST00000565493.bed\nENST00000565493\t0\t5401\tENST00000565493\t0\t+\n```\n\nWe can now use any of the two as input to `rnaprot gp`. As one would expect, extracting and providing the transcript region will result in predictions only on the transcript sequence (always excluding introns), while providing the gene region will result in predictions on the whole gene region (usually including introns). In general, we can specify any genomic or transcript (sub)region for prediction, as long as it is annotated in the GTF file. For now we will use the gene region, on which `rnaprot predict` will then predict and return peak regions directly with genomic coordinates (also contained inside the profiles for easier orientation):\n\n```\nrnaprot gp --in ENSG00000260032.bed --out NORAD_lncRNA_gene_gp_out --gtf Homo_sapiens.GRCh38.103.gtf.gz --gen hg38.2bit --train-in PUM2_K562_IDR_train_out\n\nrnaprot predict --in NORAD_lncRNA_gene_gp_out --train-in PUM2_K562_IDR_train_out --out PUM2_K562_NORAD_predict_out --mode 2 --plot-top-profiles\n```\n\nNote that in this example we did not filter out sites from `PUM2_K562_IDR_peaks.bed` that overlap with the *NORAD* gene region prior to training. These sites indeed exist, as we can see in the `rnaprot gt` HTML report (Target region overlap statistics), so for an unbiased prediction we need remove them first. For this we use bedtools intersectBed, and again run `rnaprot gt`, `rnaprot train`, and `rnaprot predict`:\n\n```\nintersectBed -a PUM2_K562_IDR_peaks.bed -b ENSG00000260032.bed -v -s > PUM2_K562_IDR_peaks_no2norad.bed \nrnaprot gt --in PUM2_K562_IDR_peaks_no2norad.bed --out PUM2_K562_IDR_no2norad_gt_out --gtf Homo_sapiens.GRCh38.103.gtf.gz --gen hg38.2bit --report\nrnaprot train --in PUM2_K562_IDR_no2norad_gt_out --out PUM2_K562_IDR_no2norad_train_out --verbose-train\nrnaprot predict --in NORAD_lncRNA_gene_gp_out --train-in PUM2_K562_IDR_no2norad_train_out --out PUM2_K562_IDR_no2norad_predict_out --mode 2 --plot-top-profiles\n```\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/BackofenLab/RNAProt/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Test example with additional features",
        "parent_header": [
          "RNAProt",
          "Test runs"
        ],
        "type": "Text_excerpt",
        "value": "RNAProt supports various additional position(nucleotide)-wise features to learn from, such as secondary structure, region annotations (including user-defined ones), or conservation scores (see [Documentation](#documentation) for details). For this we have to specify what features to include in `rnaprot gt` and `rnaprot gp`, and depending on the feature also provide additional files. For model training (`rnaprot train`) we can then specify what features to use for training, from the features included in `rnaprot gt`. This has the advantage that features need to be extracted or computed only once, and that various feature combinations and parameter settings can be with `rnaprot train`.\n\nIn this example, we want to include secondary structure on top of the sequence information. We will again use a provided dataset, containing 2,274 potential Roquin binding sites (also termed CDEs for constitutive decay elements) from [Braun et al. 2018](https://doi.org/10.1093/nar/gky908). \nThe CDEs were predicted using a biologically verified consensus structure consisting of a 6-8 bp long stem capped with a YRN (Y: C or U, R: A or G, N: any base) tri-nucleotide loop. We also note that the sequence conservation is rather low (specifically for the stem portion), making it an ideal test case for the benefits of including secondary structure information. We first generate a training set, by enabling structure calculation (`--str`) and using the CDE sites provided in the cloned repository folder:\n\n```\nrnaprot gt --in test/CDE_sites.bed --out CDE_sites_gt_out --gtf Homo_sapiens.GRCh38.103.gtf.gz --gen hg38.2bit --allow-overlaps --no-gene-filter --str --report\n```\n\nStructure calculation can be further customized by changing the RNAplfold parameters (`--plfold-u 3 --plfold-l 50 --plfold-w 70` by default). Regarding the type of structure information, RNAplfold calculates the probabilities of structural elements for each site position, which are then used as feature channels for training and prediction. For genomic or transcript `--in` sites, RNAProt automatically extends the sites by `--plfold-w` on both sides (or less at transcript ends) for a precise structure calculation.\nWhether to use the probabilities or a one-hot encoding can be further specified in training (`--str-mode`, four options). Note that we use `--allow-overlaps` and `--no-gene-filter`, disabling the filtering of sites based on no gene overlap or overlap with other sites. These two options guarantee that all `--in` sites will be part of the generated training set. Now we want to train a model on the generated dataset:\n\n```\nrnaprot train --in CDE_sites_gt_out --out CDE_sites_str_train_out --verbose-train --epochs 300\n```\n\nHere we increased the maximum number of epochs to 300, since for smaller datasets model performance can sometimes still improve beyond the default 200 epochs. This can be easily monitored with `--verbose-train` enabled. In addition, increasing `--patience` might sometimes be necessary, to prevent model training with the model stuck early on in the training process from stopping (although we experienced this only very rarely).\nAlso note that if we do not specify what features to use, RNAProt will use all features present in `CDE_sites_gt_out` for training. Thus, to train a sequence-only model, we would need to specify:\n\n```\nrnaprot train --in CDE_sites_gt_out --out CDE_sites_onlyseq_train_out --only-seq --verbose-train\n```\n\nTo create a prediction set for the structure model, we use the UCP3 gene (transcript ID ENST00000314032), for which the authors validated two CDE sites in its 3'UTR (see [Fig.2A](https://doi.org/10.1093/nar/gky908) blue and red hairpin).\n\n```\nrnaprot gp --in test/ENST00000314032.fa --train-in CDE_sites_str_train_out --out CDE_sites_str_gp_out\n```\n\nNote that `rnaprot gp` automatically detects what features were used for training the model, enabling structure prediction with set parameters for the prediction set generation. Depending on the additional feature, we thus might have to supply additional input files for extracting the respective feature information. This would be the case for conservation scores (`--phastcons`, `--phylop`), or user-defined features (`--feat-in`). After creating the prediction set we run a window prediction on the transcript:\n\n\n```\nrnaprot predict --in CDE_sites_str_gp_out --train-in CDE_sites_str_train_out --out CDE_sites_str_predict_out --mode 2 --plot-top-profiles --thr 1\n```\n\nIn our case the model successfully predicted the two verified binding sites (all together 4 sites predicted) on the transcript (using threshold level `--thr 1`). The first verified loop is at transcript position 1,371 to 1,373 (loop nucleotides), the second loop from 1,404 to 1,406, with the second hairpin having a higher folding probability and score. To check this, we take a look at the reported peak regions (BED, TSV), or have a look at the plotted profiles, which show the sites annotated with transcript coordinates (or genomic coordinates in case of genomic sites as input) to quickly identify regions of interest. \nThe `test/` folder also includes the model we used to predict, which you can easily apply yourself to compare:\n\n```\nunzip test/cde_sites_str_model_folder.zip\n\nrnaprot predict --in CDE_sites_str_gp_out --train-in cde_sites_hg38_extlr40_w70l50_str_train_out --out CDE_sites_test_model_str_predict_out --mode 2 --plot-top-profiles --thr 1\n```\n\nThis also shows how easy it is to share models. Once the model is trained, the `rnaprot train --out` folder can be copied and reused. To zip the train folder you can run:\n\n```\nzip my_cde_model.zip CDE_sites_str_train_out/*\n```\n\n\nNote however that predictions between two models can vary, since negative sites generation is random. Moreover, even models trained on the same positive and negative sites are slightly different from one another and thus can lead to slightly different predictions. This is because model training incorporates stochastic processes, like the random initialization of network weights, or the application of dropout.\n\n"
      },
      "source": "https://raw.githubusercontent.com/BackofenLab/RNAProt/main/README.md",
      "technique": "header_analysis"
    }
  ]
}