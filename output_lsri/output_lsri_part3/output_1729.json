{
  "application_domain": [
    {
      "confidence": 0.8655471754206323,
      "result": {
        "type": "String",
        "value": "Semantic web"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "KEGGtranslator",
        "parent_header": [
          "PeCaX",
          "Creating a network database",
          "KEGG Pathway Maps used in the demo version",
          "References"
        ],
        "type": "Text_excerpt",
        "value": "\\[1\\] Wrzodek C, Dr\u00e4ger A, Zell A. KEGGtranslator: visualizing and converting the KEGG PATHWAY database to various formats. Bioinformatics. 2011 Aug 15;27(16):2314-5.\n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/PeCaX-docker/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/KohlbacherLab/PeCaX-docker"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-11-09T08:27:44Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-09-05T09:25:48Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.995825812833121,
      "result": {
        "original_header": "PeCaX",
        "type": "Text_excerpt",
        "value": "Personalized Cancer and Network Explorer (PeCaX) is a tool for identifying patient specific cancer mechanisms by providing a complete mutational profile from variants to networks. It employs ClinVAP to perform clinical variant annotation which focuses on processing, filtering and prioritization of the variants to find the disrupted genes that are involved in carcinogenesis and to identify actionable variants from the mutational landscape of a patient. In addition it creates networks showing the connections between the driver genes and the genes in their neighbourhood and automatically performs pathway enrichment analysis using pathway resources (SBML4j). Its interactive visualisation (BioGraphVisart) supports easy network exploration and patient similarity (node overlap) and a merged network graph of two patient-specific networks can be calculated. \nPlease refer this document for implementation of the application. Documentation of the pipeline is available at [Wiki page](https://github.com/KohlbacherLab/PeCaX-docker/wiki). We provide a short video [here](https://github.com/KohlbacherLab/PeCaX-docker/blob/main/PeCaX-demonstration.mp4).\n \n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/PeCaX-docker/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8624829466983177,
      "result": {
        "original_header": "Information about docker volumes",
        "type": "Text_excerpt",
        "value": "PeCaX uses several volumes to store data and work files. They are briefly described here: \n- sbml4j\\_neo4j_vol: used to store the data needed for the network database (config, logs, plugins, database).\n- sbml4j\\_service_vol: used to store log files generated by the sbml4j service.\n- arangodb\\_data_container: database directory to store the collection data (username, jobid, json, network uuids)\n- arangodb\\_apps\\_data_container: apps directory to store any extensions \n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/PeCaX-docker/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9180055545138994,
      "result": {
        "original_header": "Backing up the network database",
        "type": "Text_excerpt",
        "value": "For your previous networks to be available after a prune or delete of the volumes you have to save a backup of the network database.\nYou can do this with\n```bash\n./sbml4j.sh -b my-backup\n```\n \nThis will create two files named *my-backup-neo4j.dump* and *my-backup-system.dump* in the local sub-folder *db_backups*.\n \n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/PeCaX-docker/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9202397739287539,
      "result": {
        "original_header": "1. Initialize the docker volumes needed using the provided script",
        "type": "Text_excerpt",
        "value": "to install all prerequisits for the SBML4j service and it's database.\nIf your working directory (where you run the docker-compose commands) is named differently from 'PeCaX-docker' (case insensitive) your volumes will get this directory name (in lower case format) as prefix. \nIf you are unsure, omit the -p option and run the *./sbml4j.sh -i* script and the *docker-compose* commands from the same directory (which is where they reside and which is the recommended default).\n \n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/PeCaX-docker/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9870053687616014,
      "result": {
        "original_header": "2. Selecting a source",
        "type": "Text_excerpt",
        "value": "The demo version of PeCaX accesible at https://pecax.informatik.uni-tuebingen.de uses a selection of 61 pathway maps from the KEGG pathway database.\nIf you want to recreate this version of PeCaX in your local environment, follow steps 3 and 4 below to download and translate the KEGG pathways used.\nIf you want to use different source models head over to https://github.com/kohlbacherlab/sbml4j to learn about the necessary details to look for when using SBML models with SBML4j for non-metabolic network-mappings. \n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/PeCaX-docker/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9565617263033063,
      "result": {
        "original_header": "4. Translate pathway files",
        "type": "Text_excerpt",
        "value": "In order for SBML4j to be able to process the KEGG pathway models they need to be translated to the SBML format.\nWe used the KEGGtranslator version 2.5 \\[[1](#keggtranslator)\\] for this.\nPlease find more info on KEGGtranslator here: http://www.cogsys.cs.uni-tuebingen.de/software/KEGGtranslator/.\nGo to http://www.cogsys.cs.uni-tuebingen.de/software/KEGGtranslator/downloads/index.htm and download the version 2.5 executable jar file, which you can run using your local java runtime installation.\nWe used the following command line options for translating the pathway maps in addition to providing input and output directories for the kgml and sbml files respectively: \n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/PeCaX-docker/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9493191658657176,
      "result": {
        "original_header": "5. Upload models to SBML4j",
        "type": "Text_excerpt",
        "value": "You need a running SBML4j service for the next steps to complete.\nTo get that run:\n```bash\ndocker-compose up sbml4j\n```\nOnce you see the message \n> Started Sbml4jApplication in x.xxx seconds\nthe service is up an running and you can issue http request to the exposed API.\n \nBy issuing a POST request to the '/sbml' endpoint one or multiple SBML formatted xml files can be uploaded to SBML4j.\nFor best performance we recommend uploading the model files one by one or in small chunks of 5 models or less.\nChoose the same organism, source and version parameters for all pathway maps to ensure proper integration in the next step.\nFor details on the RESTful interface visit https://app.swaggerhub.com/apis-docs/tiede/sbml4j/1.1.7 \nUsing the pysbml4j package uploading SBML models with python is as easy as:\n```python\nresp = client.uploadSBML([/absolute/path/to/sbml/model/file1.xml, \n                          /absolute/path/to/sbml/model/file2.xml], \n                          \"hsa\", \n                          \"KEGG\",\n                          \"97.0\")\nprint(\"The UUID of pathway in file1.xml is {}, of file2.xml it is {}\"\n      .format(resp[0].get(\"uuid\"), resp[1].get(\"uuid\")))\npathwayUUIDs.add(resp[0].get(\"uuid\"))\npathwayUUIDs.add(resp[1].get(\"uuid\"))\n```\nPlease note that the files provided need to be in a list, even when uploading only a single file as is shown here:\n```python\nresp = client.uploadSBML([/absolute/path/to/sbml/model/onlyfile.xml], \"hsa\", \"KEGG\", \"97.0\")\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/PeCaX-docker/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9316292078913643,
      "result": {
        "original_header": "6. Create pathway collection",
        "type": "Text_excerpt",
        "value": "A network mapping always refers to one pathway instance in the database.\nIn order to build network mappings for multiple KEGG pathways we combine all entities, relations and reactions in a collection pathway element which can be used subsequently to generate network mappings.\nThe endpoint /pathwayCollection accepts a POST request with a JSON formatted body containing the elements: name, description and sourcePathwayUUIDs.\nName and description are used as pathwayIdString and pathwayDescription respectively.\nThe field sourcePathwayUUIDs has to be an array of character strings, each string being one UUID of a pathway that shall be added to the collection element.\n```bash\ncurl -v \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"name\":\"BMC_Collection\", \\\n          \"description\":\"This is the Collection for the BMC Publication\", \\\n          \"sourcePathwayUUIDs\":[\"909520db-8ca9-40df-bffe-af9e48e93c48\", \\\n                                \"9d959b42-f1da-4061-960b-4b58e1ba3c16\" \\\n                               ] \\\n         }' \\\n     -o response.pwcoll \\\n   http://localhost:8080/sbml4j/pathwayCollection \n```\n \nA simple python call making use of pysbml4j can look like this:\n```python\ncollUUID = client.createPathwayCollection(\"KEGG61-97.0\", \n                  \"Collection pathway for all 61 KEGG pathways\", \n                  pathwayUUIDs\n           )\nprint(collUUID)\n```\nThe endpoint returns the UUID of the created collection pathway, which can be used in the following calls to create the network mappings.\n \n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/PeCaX-docker/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9351981518570526,
      "result": {
        "original_header": "7. Create network mappings",
        "type": "Text_excerpt",
        "value": "To create the network mappings from a pathway a POST request to the /mapping endpoint has to be issued.\nThe UUID of the pathway is part of the URL as can be seen here:\n```bash\ncurl -v \\\n     -d \"mappingType\"=\"PATHWAYMAPPING\" \\\n     -d \"networkname\"=\"PWM-KEGG-BMC\" \\\n     -o response.mapping \\\n   http://localhost:8080/sbml4j/mapping/b6da7dc5-4dc4-4991-85c0-5ab75e2bf929\n```\n \n\nThe last part of the url (b6da7dc5-4dc4-4991-85c0-5ab75e2bf929) is the collUUID generated in the previous step. Be sure to fill in the UUID of your installation when creating the pathway collection.\nThe UUIDs are generated by SBML4j and will differ every time you run this procedure. \nThe artifical mapping type 'PATHWAYMAPPING' can be used to not restrict the elements or relations being mapped and will map every entity, relation and reaction into a network mapping instance.\nSuch a network mapping has been used for PeCaX to allow for the most broad view on the network context of the genes of interest.\n \n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/PeCaX-docker/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9188521337417044,
      "result": {
        "original_header": "9. Add the Drugbank csv file to the network mappings",
        "type": "Text_excerpt",
        "value": "Using the csv upload functionality of SBML4j arbitrary data can be annotated onto network nodes.\nThe endpoint expects a 'type' parameter, giving a character string describing the type of annotation that is added, in our example the term 'Drugtarget' is used, as the csv marks every genesymbol given as a drug target for the provided list of 'Drug IDs'. \nMake sure to set the 'networkname' to \"PeCaX-Base\" (case-sensitive).\nSBML4j for PeCaX is configured to use the network with this name as basis for calculating the networks by default.\nIf you want to use a different name, make sure to also change the appropriate config parameter in the 'docker-compose.yaml' file. \nThe uuid in the url (here a68645cb-f3bb-49d3-b05f-7f6f05debba3 as example) is the uuid of the *PATHWAYMAPPING* created in [Step 7. Create network mappings](#7-create-network-mappings) and can be found in the response.mapping file created in that section using the curl command. Be sure to replace the uuid shown here with your own uuid as it is specific to your database. \nNow your installation of PeCaX should contain the same base network-database that can be found in the demo-version at  \n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/PeCaX-docker/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.807077517055231,
      "result": {
        "original_header": "10. Save the network database to reset your networks in PeCaX in the future",
        "type": "Text_excerpt",
        "value": "This will create two '.dump' files in the **db_backups** folder containing the database backup you just created.\n \n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/PeCaX-docker/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9282767188250794,
      "result": {
        "original_header": "Recommended post-processing steps",
        "type": "Text_excerpt",
        "value": "  1. For security reason it is advised to reset the port setting for the sbml4j service as described above.\n  2. Make sure to backup your database dumps at a save location for later reference. \n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/PeCaX-docker/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/KohlbacherLab/PeCaX-docker/wiki"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/PeCaX-docker/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/KohlbacherLab/PeCaX-docker/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/KohlbacherLab/PeCaX-docker/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "KohlbacherLab/PeCaX-docker"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PeCaX"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/PeCaX-docker/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KohlbacherLab/PeCaX-docker/main/sbml4j.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KohlbacherLab/PeCaX-docker/main/scripts/setup_neo4j.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Accessibilty of the SBML4j Service in the PeCaX ecosystem",
        "parent_header": [
          "PeCaX",
          "Creating a network database",
          "Preparation"
        ],
        "type": "Text_excerpt",
        "value": "For security reasons the SBML4j service is not exposed to the host machine, so to be able to directly interact with SBML4j you will need to temporarily change the docker-compose.yaml file.\nIn the service block \"sbml4j\" you need to change \n\n\texpose: \n\t    - \"8080\"\n\nto\n\n\tports:\n\t    - \"8080:8080\"\n\nOnce you are finished with creating and setting up your desired network database you are advised to revert this change.\n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/PeCaX-docker/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Communicating with the SBML4j service",
        "parent_header": [
          "PeCaX",
          "Creating a network database",
          "Preparation"
        ],
        "type": "Text_excerpt",
        "value": "The following instructions provide examples for the communication with the REST interface of SBML4j using curl and python.\nAlternatively you can use a tool of your choice to issue GET and POST http requests to the SBML4j service, like Postman.\nYou can find the API definition for initialising the requests in your tool of choice at https://github.com/kohlbacherlab/sbml4j-compose/api_doc/sbml4j.yaml\n\nPlease note, that file-names, argument values and UUIDs used are only exemplary and need to replaced with the actual values from your installation.\nAlso note, that the '\\' character in the examples below is used to signify line breaks to make the blocks more readable and might need to be removed before executing the snippets, depending on your system.\n\nTo use the python code examples you need to install the 'pysbml4j' python package:\n\n```bash\npip install pysbml4j\n```\n\nThen use it in your python environment of choice with:\n\n```python\nimport pysbml4j\n\nclient = pysbml4j.Sbml4j()\n```\n\nIf you are not running the service on you local system, you need to configure pysbml4j accordingly:\n\n```python\nimport pysbml4j\nfrom pysbml4j import Configuration\n\nclient = pysbml4j.Sbml4j(Configuration(\"http://mysbml4jhost:8080\"))\n```\n\nWe will need to store uuids of pathways created from the uploaded SBML models.\nIn the python examples below we will use the following list variable for this:\n\n```python\npathwayUUIDs = []\n```\n\nFor more details see the pysbml4j documentation at https://github.com/kohlbacherlab/pysbml4j .\n\n---\n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/PeCaX-docker/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "8. Prepare the Drugbank csv file",
        "parent_header": [
          "PeCaX",
          "Creating a network database"
        ],
        "type": "Text_excerpt",
        "value": "You can find the drugtarget information used in PeCaX at: https://go.drugbank.com/releases/latest#protein-identifiers\nYou will need a free account on drugbank.ca to gain access to this file, which is released under the 'Creative Common\u2019s Attribution-NonCommercial 4.0 International License.'\nYou will have to agree to these terms and conditions to continue with the next steps described here.\nWe used the 'Drug target identifiers' file for all approved drug groups to get a broad view on available and possible drugs and the genes and geneproducts they target.\nThis was combined with the DrugBank Vocabulary to map the DrugBankID of drugs to their name, availavle at: https://go.drugbank.com/releases/latest#open-data\nIn order to reproduce the results found in the publication two preprocessing steps need to be performed:\n  1. Filter out all rows that are not targeting genes in Humans (column 'Species').\n  2. Consolidate rows with the same 'ID' into one row, combining the elements in the 'Drug IDs' of all those rows into one.\n  3. Combine it with the DrugBank Vocabulary\n\nHere we provide an exemplary R script to perform Step 2 above:\n\n```R\n# create a csv containing one entry per drug targeting a human gene\n\n# load genes with associated drugs\ngenes <- read.csv(\"all.csv\", header=TRUE, stringsAsFactors = FALSE)\ngenes <- genes[order(genes$Name),]\n\n# load dictionary for drugbank id and drug name\ndrugbank_vocabulary <- read.csv(\"drugbank_vocabulary.csv\", header=TRUE, stringsAsFactors = FALSE)\n\n# create new dataframe\nfiltered_genes <- data.frame(matrix(ncol = 2, nrow = 0))\ncolnames(filtered_genes) <- c(\"Gene.Name\", \"Drug.IDs\")\n\ni <- 1\nj <- 2\n\ndrugids <- genes[i,\"Drug.IDs\"]\n\n# filter for human genes and only have one entry per gene\nwhile(j<=nrow(genes) && i <= (nrow(genes)-1)) {\n  gene1 <- genes[i,\"Gene.Name\"]\n  gene2 <- genes[j,\"Gene.Name\"]\n  species1 <- genes[i,\"Species\"]\n  species2 <- genes[j,\"Species\"]\n  if( gene1 == gene2 && species1 == \"Humans\" && species2 == \"Humans\"){\n    drugids <- paste(drugids, as.character(genes[j,\"Drug.IDs\"]),sep=\";\")\n    j <- j+1\n  }\n  else{\n    if(species1 == \"Humans\" && (is.na(genes[i,\"Gene.Name\"]) | nchar(genes[i,\"Gene.Name\"]) > 0)){ \n      filtered_genes[nrow(filtered_genes) + 1,] = list(genes[i,\"Gene.Name\"],drugids)\n    }  \n    i <- j\n    j <- j+1\n    \n    drugids <- genes[i,\"Drug.IDs\"]\n  }\n}\n\n# merge drug common names and drug infos with associated genes\ndrugcsv <- data.frame(matrix(ncol = 8, nrow = 0))\ncolnames(drugcsv) <- c(colnames(drugbank_vocabulary), \"Gene.Name\")\nfor(row in 1:nrow(filtered_genes)){\n  gene <- filtered_genes[row, \"Gene.Name\"] \n  drugids <- unlist(strsplit(filtered_genes[row, \"Drug.IDs\"], \";\"))\n  for(drug in drugids){\n    drug <- gsub(\"\\\\s\", \"\", drug)  \n    drugcsv[nrow(drugcsv) + 1,] = c(drugbank_vocabulary[drugbank_vocabulary$DrugBank.ID==drug,],gene)\n  }\n}\n\n# save new csv     \nwrite.csv(drugcsv,\"drug_genes_approved.csv\", row.names = FALSE)\n\n```\n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/PeCaX-docker/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999994608436712,
      "result": {
        "original_header": "Information about local folders",
        "type": "Text_excerpt",
        "value": "- The local folder *db_backups* is used by the *sbml4j.sh* script to store the network database backups. See instructions below for details\n- The local folder *scripts* is used by the *sbml4j.sh* script to store the scripts needed for setting up the database volume\n- The local folder *conf* is used by the *sbml4j.sh* script to store the configuration file needed for the neo4j database. Any change you make to this configuration file will only be activated on recreating the volumes for the sbml4j service and database. \n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/PeCaX-docker/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9573856101207081,
      "result": {
        "original_header": "Backing up the network database",
        "type": "Text_excerpt",
        "value": "For your previous networks to be available after a prune or delete of the volumes you have to save a backup of the network database.\nYou can do this with\n```bash\n./sbml4j.sh -b my-backup\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/PeCaX-docker/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9956047019868424,
      "result": {
        "original_header": "1. Initialize the docker volumes needed using the provided script",
        "type": "Text_excerpt",
        "value": "Inside the main directory (default: 'PeCaX-docker') run:\n```bash\n./sbml4j.sh -i\n```\n \nto install all prerequisits for the SBML4j service and it's database.\nIf your working directory (where you run the docker-compose commands) is named differently from 'PeCaX-docker' (case insensitive) your volumes will get this directory name (in lower case format) as prefix. \nIf you need to change the prefix (because you intend run the *docker-compose* command in a different folder than this script), you need to add the option *-p my_prefix* to the above call to make sure that the volumes are prefixed with the correct name.\nIn case you forgot, you can remove the previously created volumes and rerun the above command with the additional *-p* option. \nIf you are unsure, omit the -p option and run the *./sbml4j.sh -i* script and the *docker-compose* commands from the same directory (which is where they reside and which is the recommended default).\n \n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/PeCaX-docker/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999993856071296,
      "result": {
        "original_header": "2. Selecting a source",
        "type": "Text_excerpt",
        "value": "The demo version of PeCaX accesible at https://pecax.informatik.uni-tuebingen.de uses a selection of 61 pathway maps from the KEGG pathway database.\nIf you want to recreate this version of PeCaX in your local environment, follow steps 3 and 4 below to download and translate the KEGG pathways used.\nIf you want to use different source models head over to https://github.com/kohlbacherlab/sbml4j to learn about the necessary details to look for when using SBML models with SBML4j for non-metabolic network-mappings. \n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/PeCaX-docker/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9959606570972771,
      "result": {
        "original_header": "4. Translate pathway files",
        "type": "Text_excerpt",
        "value": "In order for SBML4j to be able to process the KEGG pathway models they need to be translated to the SBML format.\nWe used the KEGGtranslator version 2.5 \\[[1](#keggtranslator)\\] for this.\nPlease find more info on KEGGtranslator here: http://www.cogsys.cs.uni-tuebingen.de/software/KEGGtranslator/.\nGo to http://www.cogsys.cs.uni-tuebingen.de/software/KEGGtranslator/downloads/index.htm and download the version 2.5 executable jar file, which you can run using your local java runtime installation.\nWe used the following command line options for translating the pathway maps in addition to providing input and output directories for the kgml and sbml files respectively: \n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/PeCaX-docker/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.999848238554849,
      "result": {
        "original_header": "5. Upload models to SBML4j",
        "type": "Text_excerpt",
        "value": "You need a running SBML4j service for the next steps to complete.\nTo get that run:\n```bash\ndocker-compose up sbml4j\n```\nOnce you see the message \n> Started Sbml4jApplication in x.xxx seconds\nthe service is up an running and you can issue http request to the exposed API.\n \n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/PeCaX-docker/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.916977474240919,
      "result": {
        "original_header": "9. Add the Drugbank csv file to the network mappings",
        "type": "Text_excerpt",
        "value": "Make sure to set the 'networkname' to \"PeCaX-Base\" (case-sensitive).\nSBML4j for PeCaX is configured to use the network with this name as basis for calculating the networks by default.\nIf you want to use a different name, make sure to also change the appropriate config parameter in the 'docker-compose.yaml' file. \nYou can use the curl command to upload a csv file and annotate the created network mapping with the contained data:\n```bash\ncurl -v \\\n     -F upload=@drug_genes_approved.csv \\\n     -F \"type\"=\"Drugtarget\" \\\n     -F \"networkname\"=\"PeCaX-Base\" \\\n     -o response.drugbank \\\n   http://localhost:8080/sbml4j/networks/a68645cb-f3bb-49d3-b05f-7f6f05debba3/csv\n``` \nThe python package also offers this functionality:\n```python\nnet = client.getNetworkByName(\"PWM-KEGG-BMC\")\nnet.addCsvData(\"drug_genes_approved.csv\", \"Drugtarget\", \n               networkname=\"PeCaX-Base\")\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/PeCaX-docker/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9991364503796021,
      "result": {
        "original_header": "10. Save the network database to reset your networks in PeCaX in the future",
        "type": "Text_excerpt",
        "value": "Then you can use the provided script to backup the database: \n```\n./sbml4j.sh -b pecax-base\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/PeCaX-docker/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9789899141598877,
      "result": {
        "original_header": "11. Restoring the state of the database",
        "type": "Text_excerpt",
        "value": "Then you can revert your database back to the previously saved state by using:\n```\n./sbml4j.sh -r pecax-base \n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/PeCaX-docker/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9991101999459333,
      "result": {
        "original_header": "Recommended post-processing steps",
        "type": "Text_excerpt",
        "value": "  1. For security reason it is advised to reset the port setting for the sbml4j service as described above.\n  2. Make sure to backup your database dumps at a save location for later reference. \n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/PeCaX-docker/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.9231081813159145,
      "result": {
        "original_header": "1. Initialize the docker volumes needed using the provided script",
        "type": "Text_excerpt",
        "value": "Inside the main directory (default: 'PeCaX-docker') run:\n```bash\n./sbml4j.sh -i\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/PeCaX-docker/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8151938041634513,
      "result": {
        "original_header": "9. Add the Drugbank csv file to the network mappings",
        "type": "Text_excerpt",
        "value": "You can use the curl command to upload a csv file and annotate the created network mapping with the contained data:\n```bash\ncurl -v \\\n     -F upload=@drug_genes_approved.csv \\\n     -F \"type\"=\"Drugtarget\" \\\n     -F \"networkname\"=\"PeCaX-Base\" \\\n     -o response.drugbank \\\n   http://localhost:8080/sbml4j/networks/a68645cb-f3bb-49d3-b05f-7f6f05debba3/csv\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/PeCaX-docker/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/KohlbacherLab/PeCaX-docker/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 MirjamFi\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/PeCaX-docker/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PeCaX-docker"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "KohlbacherLab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 8230,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KohlbacherLab/PeCaX-docker/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "IMPORTANT: Make sure to stop all services (at least the sbml4jdb container) before running, otherwise the database will not be restored correctly and might be corrupted.",
        "parent_header": [
          "PeCaX",
          "Restoring the network database to a previous save for use with PeCaX"
        ],
        "type": "Text_excerpt",
        "value": "For generating a database refer to section [Creating a network database](#creating-a-network-database) below.\n\n---\n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/PeCaX-docker/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 06:03:16",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage with Docker",
        "parent_header": [
          "PeCaX"
        ],
        "type": "Text_excerpt",
        "value": "Requirements: Docker Engine release 1.13.0+, Compose release 1.10.0+.\n\nPlease make sure that you have 55 GB of physical empty space on your Docker Disk Image, and ports 3030, 3000, 8529 are not being used by another application. For setting up an initial network database (see below) the port 8080 will be used, unless otherwise configured.\n\nTo run the pipeline for the first time, please follow the steps given below.\n\n1. Clone the Git repository via:\n\n    `git clone https://github.com/MirjamFi/PeCaX.git`\n\n2. For human genome assembly GRCh37, use: \n    \n\t`docker-compose up vep_files_GRCh37`\n    \n   To free up space, remove the downloaded image:\n   \n   \t`docker rmi bilges/clinvap_file_deploy:vP_GRCh37`\n\n   If your analysis requires GRCh38, use: \n   \n    `docker-compose up vep_files_GRCh38`\n    \n  To free up space, remove the downloaded image:\n  \n    `docker rmi bilges/clinvap_file_deploy:vP_GRCh38`\n   \t\n  The assemblies can be served in parallel and need to be downloaded only once as long as the volume `pecax-docker_clinvap_downloads` is not removed.\n\n3. Start PeCaX services via\n\n\t`docker-compose up pecax`\n\n   \n\tMake sure to create a network database as described below before starting PeCaX for the first time.\n4.  In Browser of your choice open localhost:3030\n\n\t We recommend using full screen to enjoy the full experience.\n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/PeCaX-docker/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Exit and terminate PeCaX:",
        "parent_header": [
          "PeCaX",
          "Usage with Docker"
        ],
        "type": "Text_excerpt",
        "value": "    Ctrl+c\n\n    docker-compose down\n\n\n\n---\n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/PeCaX-docker/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Restoring the network database to a previous save for use with PeCaX",
        "parent_header": [
          "PeCaX"
        ],
        "type": "Text_excerpt",
        "value": "The networks are stored in a docker volume and are thus persisted between individual PeCaX sessions.\nIf you however delete or prune your docker volumes, while the service is not running, the network volume will be deleted and you will have to rerun\n\n```bash\n./sbml4j.sh -r pecax-base\n```\n\nThis will use the network database that has been previously saved (see below) and resides in the local subfolder *db_backups* with the names *pecax-base-neo4j.dump* and *pecax-base-system.dump* for the actual network database and systems database respectively.\n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/PeCaX-docker/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3. Get the KEGG pathway files",
        "parent_header": [
          "PeCaX",
          "Creating a network database"
        ],
        "type": "Text_excerpt",
        "value": "[Section KEGG Pathway Maps used in the demo version](#kegg-pathway-maps-used-in-the-demo-version) shows the pathway identifiers of the KEGG pathways used in this publication.\nKEGG provides their own markup language files for their pathways.\nYou can download these kgml files directly from their website (kegg.jp) or through their API.\nMake sure you understand the license requirements before starting the download (see https://www.kegg.jp/kegg/rest/ for details).\n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/PeCaX-docker/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "KEGG Pathway Maps used in the demo version",
        "parent_header": [
          "PeCaX",
          "Creating a network database"
        ],
        "type": "Text_excerpt",
        "value": "Here is a list of the KEGG pathway maps used in the PeCaX publication.\nThe KEGG Release used is: 97.0+/02-16, Feb 21.\n\n- hsa03320 PPAR signaling pathway\n- hsa04010 MAPK signaling pathway\n- hsa04012 ErbB signaling pathway\n- hsa04014 Ras signaling pathway\n- hsa04015 Rap1 signaling pathway\n- hsa04020 Calcium signaling pathway\n- hsa04022 cGMP-PKG signaling pathway\n- hsa04024 cAMP signaling pathway\n- hsa04060 Cytokine-cytokine receptor interaction\n- hsa04064 NF-kappa B signaling pathway\n- hsa04066 HIF-1 signaling pathway\n- hsa04068 FoxO signaling pathway\n- hsa04070 Phosphatidylinositol signaling system\n- hsa04071 Sphingolipid signaling pathway\n- hsa04072 Phospholipase D signaling pathway\n- hsa04080 Neuroactive ligand-receptor interaction\n- hsa04110 Cell cycle\n- hsa04115 p53 signaling pathway\n- hsa04150 mTOR signaling pathway\n- hsa04151 PI3K-Akt signaling pathway\n- hsa04152 AMPK signaling pathway\n- hsa04210 Apoptosis\n- hsa04218 Cellular senescence\n- hsa04310 Wnt signaling pathway\n- hsa04330 Notch signaling pathway\n- hsa04340 Hedgehog signaling pathway\n- hsa04350 TGF-beta signaling pathway\n- hsa04370 VEGF signaling pathway\n- hsa04371 Apelin signaling pathway\n- hsa04390 Hippo signaling pathway\n- hsa04510 Focal adhesion\n- hsa04512 ECM-receptor interaction\n- hsa04520 Adherens junction\n- hsa04630 JAK-STAT signaling pathway\n- hsa04915 Estrogen signaling pathway\n- hsa05200 Pathways in cancer\n- hsa05202 Transcriptional misregulation in cancer\n- hsa05203 Viral carcinogenesis\n- hsa05204 Chemical carcinogenesis\n- hsa05205 Proteoglycans in cancer\n- hsa05206 MicroRNAs in cancer\n- hsa05210 Colorectal cancer\n- hsa05211 Renal cell carcinoma\n- hsa05212 Pancreatic cancer\n- hsa05213 Endometrial cancer\n- hsa05214 Glioma\n- hsa05215 Prostate cancer\n- hsa05216 Thyroid cancer\n- hsa05217 Basal cell carcinoma\n- hsa05218 Melanoma\n- hsa05219 Bladder cancer\n- hsa05220 Chronic myeloid leukemia\n- hsa05221 Acute myeloid leukemia\n- hsa05222 Small cell lung cancer\n- hsa05223 Non-small cell lung cancer\n- hsa05224 Breast cancer\n- hsa05225 Hepatocellular carcinoma\n- hsa05226 Gastric cancer\n- hsa05230 Central carbon metabolism in cancer\n- hsa05231 Choline metabolism in cancer\n- hsa05235 PD-L1 expression and PD-1 checkpoint pathway in cancer\n\n---\n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/PeCaX-docker/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "KEGGtranslator",
        "parent_header": [
          "PeCaX",
          "Creating a network database",
          "KEGG Pathway Maps used in the demo version",
          "References"
        ],
        "type": "Text_excerpt",
        "value": "\\[1\\] Wrzodek C, Dr\u00e4ger A, Zell A. KEGGtranslator: visualizing and converting the KEGG PATHWAY database to various formats. Bioinformatics. 2011 Aug 15;27(16):2314-5.\n"
      },
      "source": "https://raw.githubusercontent.com/KohlbacherLab/PeCaX-docker/main/README.md",
      "technique": "header_analysis"
    }
  ]
}