{
  "application_domain": [
    {
      "confidence": 27.39,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Bahler-Lab/pyphe"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-10-22T10:50:16Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-03-04T10:57:44Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Python toolbox for phenotype analysis of arrayed microbial colonies"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9389936696135198,
      "result": {
        "original_header": "Welcome to the pyphe toolbox",
        "type": "Text_excerpt",
        "value": "A python toolbox for phenotype analysis of arrayed microbial colonies written by Stephan Kamrad (stephan.kamrad at crick.ac.uk). \nFor a more detailed protocol, including growth curves and viability assays, please see our [protocol preprint](https://www.researchsquare.com/article/rs-401914/v1). \nPlease cite as:\n> Kamrad, S., Rodr\u00edguez-L\u00f3pez, M., Cotobal, C., Correia-Melo, C., Ralser M., B\u00e4hler J. (2020). Pyphe, a python toolbox for assessing microbial growth and cell viability in high-throughput colony screens. eLife 9:e55160\n \n"
      },
      "source": "https://raw.githubusercontent.com/Bahler-Lab/pyphe/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9952599680563016,
      "result": {
        "original_header": "Overview",
        "type": "Text_excerpt",
        "value": "A typical fitness screen with pyphe will involve:\n1. Image acquisition with [_pyphe-scan_](#pyphe-scan), or [_pyphe-scan-timecourse_](#pyphe-scan-timecourse)\n2. Quantification of colony properties from images using [_pyphe-quantify_](#pyphe-quantify). In the case of growth curves, parameters are additionally extracted with [_pyphe-growthcurves_](#pyphe-growthcurves).\n3. Normalisation and data aggregation using [_pyphe-analyse_](#pyphe-analyse).\n4. Statistics and hit calling using [_pyphe-interpret_](#pyphe-interpret)\nPlease see our paper for a detailed protocol and explanations of the algorithms. \n"
      },
      "source": "https://raw.githubusercontent.com/Bahler-Lab/pyphe/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/Scan-o-Matic/scanomatic/wiki/Installing-scanners"
      },
      "source": "https://raw.githubusercontent.com/Bahler-Lab/pyphe/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Bahler-Lab/pyphe/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Bahler-Lab/pyphe/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Bahler-Lab/pyphe"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Welcome to the pyphe toolbox"
      },
      "source": "https://raw.githubusercontent.com/Bahler-Lab/pyphe/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Bahler-Lab/pyphe/master/icons/toolbox-72dpi_white.png"
      },
      "source": "https://raw.githubusercontent.com/Bahler-Lab/pyphe/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "Welcome to the pyphe toolbox"
        ],
        "type": "Text_excerpt",
        "value": "1. Most tools are cross-platform compatible but scanning will only work on a Linux OS. The scanners need to be accessible by [SANE](http://www.sane-project.org/) and [ImageMagick](https://imagemagick.org/) needs to be installed and accessible from the command line.\n2. Pyphe requires Python 3 and a few common packages, available through the [anaconda distribution](https://www.anaconda.com/distribution/).\n3. Install pyphe by running 'pip install pyphe' in your terminal.\n4. Open a new terminal and try and run 'pyphe-quantify -h' which should show the help page of one of pyphe's command line tools. On Windows, make sure you are using the Anaconda Prompt, not the Anaconda Powershell Prompt.\n\n"
      },
      "source": "https://raw.githubusercontent.com/Bahler-Lab/pyphe/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Manual",
        "parent_header": [
          "Welcome to the pyphe toolbox"
        ],
        "type": "Text_excerpt",
        "value": "All pyphe tools have a similar command line interface, based on the python argparse package. Generally, parameters are set using --<parameter_name> optionally followed by a value. All _pyphe_ tools can be used with relative file paths so make sure to navigate to the correct working directory before running a _pyphe_ command.\n\n "
      },
      "source": "https://raw.githubusercontent.com/Bahler-Lab/pyphe/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Pyphe-scan",
        "parent_header": [
          "Welcome to the pyphe toolbox",
          "Manual"
        ],
        "type": "Text_excerpt",
        "value": "This tools allows you to take consecutive scans of sets of plates, which are then automatically cropped, rotated and named in in a continuos filename scheme of your choice. \n"
      },
      "source": "https://raw.githubusercontent.com/Bahler-Lab/pyphe/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Scanning plate batches",
        "parent_header": [
          "Welcome to the pyphe toolbox",
          "Manual",
          "Pyphe-scan"
        ],
        "type": "Text_excerpt",
        "value": "1. Open the file manager and navigate to the folder in which you want to save your images. The script will create a sub-folder that begins with the current date to save all your images. \n\n2. Right click and select 'Open in Terminal'\n\n3. Run scanplates with the options as detaild below. \n\n```\nusage: pyphe-scan [-h] [--nplates NPLATES] [--start START] [--prefix PREFIX]\n                  [--postfix POSTFIX] [--fixture {som3_edge,som3}]\n                  [--resolution {150,300,600,900,1200}] [--scanner {1,2,3}]\n                  [--mode {Gray,Color}]\n\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --nplates NPLATES     Number of plates to scan. This defaults to 100 and the\n                        script can be terminated by Ctr+C when done.\n  --start START         Where to start numbering from. Defaults to 1.\n  --prefix PREFIX       Name prefix for output files. The default is the\n                        current date YYYYMMDD.\n  --postfix POSTFIX     Name postfix for output files. Defaults to empty\n                        string.\n  --fixture {som3_edge,som3,som3-color}\n                        ID of the fixture you are using.\n  --resolution {150,300,600,900,1200}\n                        Resolution for scanning in dpi. Default is 600.\n  --scanner {1,2,3}     Which scanner to use. Scanners are not uniquely\n                        identified and may switch when turned off/unplugged.\n                        This option does not need to be set when only one\n                        scanner is connected.\n  --mode {Gray,Color}   Which color mode to use for scanning. Defaults to\n                        Gray.\n```\n\nAll arguments except the fixture have default values and are optional. A folder prefix_postfix will be created in your current directory and the program will abort if a folder with this name already exists. \n\n\n"
      },
      "source": "https://raw.githubusercontent.com/Bahler-Lab/pyphe/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Pyphe-scan-timecourse",
        "parent_header": [
          "Welcome to the pyphe toolbox",
          "Manual"
        ],
        "type": "Text_excerpt",
        "value": "This tool acquires image timeseries by scanning in fixed time intervals. For each position in the fixture, a folder is created. Image names contain number of scan. Other options for this tool are similar to [_pyphe-scan_](#pyphe-scan). More than one scanner can be connected and used at the same time. Scanner numbers are defined by the order in which they are connected to the computer. Proceed as follows: (1) disconnect all scanners, (2) prepare the first scanner with plates, connect it and turn it on. (3) start scanning with --scanner 1 option, (4) prepare the second scanner, connect it and turn it on, (5) start scanning with --scanner 2 option. Repeat step (4) and (5), each time incrementing the --scanner argument. \n\n```\nusage: pyphe-scan-timecourse [-h] [--nscans NSCANS] [--interval INTERVAL]\n                             [--prefix PREFIX] [--postfix POSTFIX]\n                             [--fixture {som3_edge,som3}]\n                             [--resolution {150,300,600,900,1200}]\n                             [--scanner {1,2,3}] [--mode {Gray,Color}]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --nscans NSCANS       Number of time points to scan. This defaults to 100\n                        and the script can be terminated by Ctr+C when done.\n  --interval INTERVAL   Time in minutes between scans. Defaults to 20.\n  --prefix PREFIX       Name prefix for output files. The default is the\n                        current date YYYYMMDD.\n  --postfix POSTFIX     Name postfix for output files. Defaults to empty\n                        string.\n  --fixture {som3_edge,som3,som3-color}\n                        ID of the fixture you are using.\n  --resolution {150,300,600,900,1200}\n                        Resolution for scanning in dpi. Default is 600.\n  --scanner {1,2,3}     Which scanner to use. Scanners are not uniquely\n                        identified and may switch when turned off/unplugged.\n                        This option does not need to be set when only one\n                        scanner is connected.\n  --mode {Gray,Color}   Which color mode to use for scanning. Defaults to\n                        Gray.\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/Bahler-Lab/pyphe/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Pyphe-growthcurves",
        "parent_header": [
          "Welcome to the pyphe toolbox",
          "Manual"
        ],
        "type": "Text_excerpt",
        "value": "This tool performs non-parametric analysis of growth curves. It was written specifically to analyse colony size timeseries data obtained with _pyphe-quantify_ _timeseries_.\n\nIt is important that your csv with the growth data is in the right format. The file must contain one growth curve per column. The first column must be the timepoints and there must be a header row with unique identifiers for each curve. For example data and expected outputs, check out the files included in this Documentation folder. Sensible default parameters are set for all options but, depending on your data, you may wish to customise these, so check out the help section below. \n\n```\nusage: pyphe-growthcurves [-h] --input INPUT [--fitrange FITRANGE]\n                          [--lag-method {abs,rel}]\n                          [--lag-threshold LAG_THRESHOLD]\n                          [--t0-fitrange T0_FITRANGE] [--plots]\n                          [--plot-ylim PLOT_YLIM]\n\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --input INPUT         Path to the growth curve file to analyse. This file\n                        contains one growth curve per column. The first column\n                        must be the timepoints and there must be a header row\n                        with unique identifiers for each curve.\n  --fitrange FITRANGE   Number of timepoint over which to fit linear\n                        regression. Defaults to 4. Please adjust this to the\n                        density of your timepoints and use higher values for\n                        more noisy data.\n  --lag-method {abs,rel}\n                        Method to use for determining lag. \"abs\" will measure\n                        time until the defined biomass threshold is crossed.\n                        \"rel\" will fist determine the inital biomass and\n                        measure the time until the biomass has passed this\n                        value times the threshold. Defaults to \"rel\".\n  --lag-threshold LAG_THRESHOLD\n                        Threshold to use for determining lag. With method\n                        \"abs\", this will measure time until the defined\n                        biomass threshold is crossed. With \"rel\" will fist\n                        determine the inital biomass and measure the time\n                        until the biomass has passed this value times the\n                        threshold. Defaults to 2.0, so with method \"rel\", this\n                        will measure the time taken for the first doubling.\n  --t0-fitrange T0_FITRANGE\n                        Specify the number of timepoint to use at the\n                        beginning of the growth curve to determine the initial\n                        biomass by averaging them. Defaults to 3.\n  --plots               Set this option (no argument required) to produce a\n                        plot of all growthcurves as pdf.\n  --plot-ylim PLOT_YLIM\n                        Specify the upper limit of the y-axis of growth curve\n                        plots. Useful if you want curves to be directly\n                        comparable. If not set, the axis of each curve is\n                        scaled to the data.\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/Bahler-Lab/pyphe/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Interpreting results",
        "parent_header": [
          "Welcome to the pyphe toolbox",
          "Manual",
          "Pyphe-growthcurves"
        ],
        "type": "Text_excerpt",
        "value": "Pyphe-growthcurves will produce a csv file with extracted growth parameters. The maximum slope is determined by fitting all possible linear regressions in sliding windows of length n and chosing the one with the highest slope. The lag phase is determined as the first timepoint which exceeds a settable relative or absolute threshold. \n\n| Parameter        | Explanation  |\n| ---------------- |---------------|\n|initial biomass|The average of the first n timepoints of the growth curve|\n|lag |  Lag phase |\n| max_slope| The maximum slope of the growth curve|\n| r2 | The R2 parameter of the linear regression that produced the highest maximum slope |\n|t_max | Time at which maximum growth slope is reached (center of the sliding window)|\n|y-intercept|Y-intercept of the regression which produced the maximum slope|\n|x-intercept|X-intercept of the regression which produced the maximum slope. This is interpreted as lag phase by some people|\n\n                            \n"
      },
      "source": "https://raw.githubusercontent.com/Bahler-Lab/pyphe/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Pyphe-quantify",
        "parent_header": [
          "Welcome to the pyphe toolbox",
          "Manual"
        ],
        "type": "Text_excerpt",
        "value": "Pyphe quantify extracts colony parameters from images. In can operate in three distinct modes analysing colony sizes for each image individually (batch mode), analysing redness for each image individually (redness mode) or obtaining a growth curve from an image timeseries (timeseries mode).\nThe --grid parameter is required define the position of colonies on the plate. You can either use automatic grid detection, one of our preconfigured positions if you are using the pp3 fixture or define your own (see the manual below). Images can be in any format (e.g. jpg, tiff, png). Images should be cropped closely to the colonies (this is important for good thresholding and automatic grid detection), i.e. not contain parts of the plate edges or surroundings. In batch and timecourse mode, pyphe-quantify assumes that images were acquired using transmission scanning, where colonies appear darker then the surrounding agar. If this is not the case and you took images by reflective scanning or with a camera, use --negate False. In batch and timecourse mode, images are epxected to be grayscale. If they are not, they will be converted (by simply summing all channels) and a warning will be thrown. \n\n\n```\nusage: pyphe-quantify [-h] --grid GRID [--pattern PATTERN] [--t T] [--d D]\n                      [--s S] [--negate NEGATE] [--localThresh] [--convexhull]\n                      [--reportAll] [--reportFileNames]\n                      [--hardImageThreshold HARDIMAGETHRESHOLD]\n                      [--hardSizeThreshold HARDSIZETHRESHOLD] [--qc QC]\n                      [--calibrate CALIBRATE] [--timepoints TIMEPOINTS]\n                      [--out OUT]\n                      {batch,timecourse,redness}\n\nWelcome to pyphe-quantify, part of the pyphe toolbox. Written by\nstephan.kamrad@crick.ac.uk and maintained at https://github.com/Bahler-\nLab/pyphe\n\npositional arguments:\n  {batch,timecourse,redness}\n                        Pyphe-quantify can be run in three different modes. In\n                        batch mode, it quantifies colony sizes for all images\n                        matching the pattern individually. A separate results\n                        table and qc image is produced for each. Redness mode\n                        is similar except that the redness of each colony is\n                        quantified. In timecourse mode, all images matching\n                        the pattern are analysed jointly. The final image\n                        matching the pattern is used to create a mask of where\n                        the colonies are and this mask is then applied to all\n                        previous images in the timeseries. A single output\n                        table, where the timepoints are the rows and each\n                        individual colony is a row.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --grid GRID           This option is required (all others have defaults set)\n                        and specifies the grid in which the colonies are\n                        arranged. You can use automatic grid detection using\n                        one of the following parameters: auto_96, auto_384 or\n                        auto_1536. Automatic grid correction will not work if\n                        the colony grid is not aligned with the image borders.\n                        Images should contain only agar and colonies, avaoid\n                        having borders. It might fail or produce unexpected\n                        results if there are whole rows/columns missing. In\n                        those cases, it is easy to define hard-wired grid\n                        positions. If you are using the fixture provided with\n                        pyphe, we have preconfigured these for you. Depending\n                        on the pinning density, use pp3_96, pp3_384 or\n                        pp3_1536. Otherwise, the argument has to be in the\n                        form of 6 integer numbers separated by \"-\": <number of\n                        colony rows>-<number of colony columns>-<x-position of\n                        the top left colony>-<y-position of the top left\n                        colony>-<x-position of the bottom right\n                        colony>-<y-position of the bottom right colony>.\n                        Positions must be integers and are the distance in\n                        number of pixels from the image origin in each\n                        dimension (x is width dimension, y is height\n                        dimension). The image origin is, in line with scikit-\n                        image, in the top left corner. Pixel positions are\n                        easily determined using programs such as Microsoft\n                        Paint, by simply hovering the mouse over a position.\n  --pattern PATTERN     Pattern describing files to analyse. This follows\n                        standard unix convention and can be used to specify\n                        subfolders in which to look for images\n                        (<subfolder>/*.jpg) or the image format (*.tiff,\n                        *.png, etc.). By default, all jpg images in the\n                        working directory are analysed.\n  --t T                 By default the intensity threshold to distinguish\n                        colonies from the background is determined by the Otsu\n                        method. The determined value will be multiplied by\n                        this argument to give the final threshold. Useful for\n                        easily fine-tuning colony detection.\n  --d D                 The distance between two grid positions will be\n                        divided by this number to compute the maximum distance\n                        a putative colony can be away from its reference grid\n                        position. Decreasing this number towards 2 makes\n                        colony-to-grid-matching more permissive (might help\n                        when some of your plates are at a slight angle or out\n                        of position).\n  --s S                 Detected putative colonies will be filtered by size\n                        and small components (usually image noise) will be\n                        excluded. The default threshold is the image\n                        area*0.00005 and is therefore independent of scanning\n                        resolution. This default is then multiplied by this\n                        argument to give the final threshold. Useful for when\n                        colonies have unusual sizes.\n  --negate NEGATE       In images acquired by transmission scanning, the\n                        colonies are darker than the background. Before\n                        thresholding, the image needs to be inverted/negated.\n                        Defaults to True in timecourse and batch mode, ignored\n                        in redness mode.\n  --localThresh         Use local thresholding in batch and timecourse mode.\n                        This can help when image brightness is very uneven.\n                        Ignored in redness mode where local thresholding is\n                        always applied.\n  --convexhull          Apply convex hull transformation to identified\n                        colonies to fill holes. Useful when working with spots\n                        rather than colonies. Ignored in redness mode.\n                        WARNING: Using this options results in much longer\n                        analysis times.\n  --reportAll           Sometimes, two putative colonies are identified that\n                        are within the distance threshold of a grid position.\n                        By default, only the closest colony is reported. This\n                        can be changed by setting this option (without\n                        parameter). This option allows pyphe quantify to be\n                        used even if colonies are not arrayed in a regular\n                        grid (you still need to provide a grid parameter\n                        though that spans the colonies you are interested i).\n  --reportFileNames     Only for timecourse mode, otherwise ignored. Use\n                        filenames as index for output table instead of\n                        timepoints. Useful when the ordering of timepoints is\n                        not the same as returned by the pattern. Setting this\n                        option overrides the --timepoints argument.\n  --hardImageThreshold HARDIMAGETHRESHOLD\n                        Allows a hard (fixed) intensity threshold in the range\n                        [0,1] to be used instead of Otsu thresholding. Images\n                        intensities are re-scaled to [0,1] before\n                        thresholding. Ignored in timecourse mode.\n  --hardSizeThreshold HARDSIZETHRESHOLD\n                        Allows a hard (fixed) size threshold [number of\n                        pixels] to be used for filtering small colonies.\n  --qc QC               Directory to save qc images in. Defaults to\n                        \"qc_images\".\n  --calibrate CALIBRATE\n                        Transform background subtracted intensity values by\n                        this function. Function needs to be a single term with\n                        x as the variable and that is valid python code. E.g.\n                        use \"2*x**2+1\" to square each pixels intensity,\n                        multiply by two and add 1. Defaults to \"x\", i.e. use\n                        of no calibration. Used only in timecourse mode.\n  --timepoints TIMEPOINTS\n                        In timecourse mode only. Path to a file that specifies\n                        the timepoints of all images in the timeseries. This\n                        is usually the timepoints.txt file created by pyphe-\n                        scan-timecourse. It must contain one entry per line\n                        and have the same number of lines as number of images.\n  --out OUT             Directory to save output files in. Defaults to\n                        \"pyphe_quant\".\n```\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/Bahler-Lab/pyphe/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Pyphe-analyse",
        "parent_header": [
          "Welcome to the pyphe toolbox",
          "Manual"
        ],
        "type": "Text_excerpt",
        "value": "_Pyphe-analyse_ is a tool for spatial normalisation and data aggregation across many plates. It implements a grid normalisation based on the concept proposed by [Zackrisson et al. 2016](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5015956/) and row/column median normalisation. Please see our paper and the protocol in it to find out more. _Pyphe-analyse_ can be run from the command line, with options below, or using the graphical user interface by running _pyphe-analyse-gui_.\n\n\n```\nusage: pyphe-analyse.txt [-h] --edt EDT --format\n                         {gitter,pyphe-redness,pyphe-growthcurves} [--out OUT]\n                         [--load_layouts]\n                         [--gridnorm {standard384,standard1536}]\n                         [--extrapolate_corners] [--rcmedian] [--check CHECK]\n                         [--qc_plots QC_PLOTS]\n\nWelcome to pyphe-analyse, part of the pyphe toolbox. Written by\nstephan.kamrad@crick.ac.uk and maintained at https://github.com/Bahler-\nLab/pyphe\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --edt EDT             Path to the Experimental Design Table (EDT) listing\n                        all plates of the experiment. The table must be in csv\n                        format, the first column must contain unique plate IDs\n                        and there must be a column named 'Data_path' that\n                        contains abolute or relative file paths to each\n                        plate's data file. A 'Layout_path' column can be\n                        included, see below. Any additional columns included\n                        in this file will bestored in each plate's meta-data\n                        and included in the final data output.\n  --format {gitter,pyphe-redness,pyphe-growthcurves}\n                        Type of inout data.\n  --out OUT             Specifies the path where to save the output data\n                        result. By default, the data report is saved in the\n                        working directory as \"pyphe-analyse_data_report.csv\"\n                        and will overwrite the file if it exists.\n  --load_layouts        Set this option (without parameters) to load layouts\n                        (requires Layout_path column in the EDT).\n  --gridnorm {standard384,standard1536,1536with384grid}\n                        Perform reference grid normalisation. Standard384\n                        refers to plates which are in 384 (16x24) format with\n                        the reference grid in 96 format in the top left\n                        corner. Standard1536 refers to plates in 1536 format\n                        (32x48( with two 96 reference grids in the top left\n                        and bottom right corners. 1536with384grid refers to\n                        plates in 1536 format with a 384 reference grid in\n                        the top left position.\n  --extrapolate_corners\n                        If working in standard1536 format, set this option to\n                        extrapolate the reference grid in the bottom left and\n                        top right corner. A linear regression will be trained\n                        across all top left and bottom right corners on plates\n                        in the experiment to predict hypothetical grid colony\n                        sizes in the other two corners.\n  --rcmedian            Perform row/column median normalisation. If --gridnorm\n                        will be performed first if both parameters are set.\n  --check CHECK         Check colony sizes after normalisation for negative\n                        and infinite colony sizes *(normalisation artefacts),\n                        throw a warning and set to NA.\n  --qc_plots QC_PLOTS   Specify a folder in which to save qc plots for each\n                        plate.\n\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/Bahler-Lab/pyphe/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Pyphe-interpret",
        "parent_header": [
          "Welcome to the pyphe toolbox",
          "Manual"
        ],
        "type": "Text_excerpt",
        "value": "Pyphe-interpret reports summary statistics and tests for differential fitness using t-tests. It is flexible and can in theory be used with any dataset in tidy format.\n\n```\nusage: pyphe-interpret [-h] --ld LD [--out OUT] --grouping_column\n                       GROUPING_COLUMN --axis_column AXIS_COLUMN\n                       [--values_column VALUES_COLUMN] --control CONTROL\n                       [--ld_encoding LD_ENCODING] [--circularity CIRCULARITY]\n                       [--set_missing_na]\n\nWelcome to pyphe-interpret, part of the pyphe toolbox. Written by\nstephan.kamrad@crick.ac.uk and maintained at https://github.com/Bahler-\nLab/pyphe. Pyphe-interpret calculates summary statistics and p-values from the\ndata reports generated by pyphe-analyse. For this, specifiying your column\nnames correctly is crucial. Let us assume you have measured many strains in\nmany conditions. Now you would like to know for each strain in each condition\n(for each condition-strain pair) if it is \"significant\". There are essentially\ntwo ways of doing this, asking different biological questions. (1) Check for\neach condition separately (--grouping_column <condition_column>) if there is a\nsignificant difference in means between a mutant strain and a control strain\n(--axis_column <strain_id_column>). Or (2) Check for each strain separately\n(--grouping_column <strain_id_column>) if there is a significant difference in\nthe means of the strain in the assay condition versus the control condition\n(--axis_column <condition_column>). The second option tests for condition-\nspecific growth effects (i.e. is does not return significant results if a\nstrain is always faster or always slower growing than the grid strain). In\nboth cases you need to specify the control against which to test using\n--control and this has to be a value that appears in the axis column. You\nshould define the dependent variable of the t-test using --values_column. FDR\ncorrection with the Benjamini-Hochberg method will be applied on each level\nset of the grouping_column separately, ie for case (1) p-values will be\ncorrected across each strain separately, ie more conditions means more\nstringent correction, and for case (2) p-values will be corrected for each\ncondition separately, ie more strains means mpre stringent correction.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --ld LD               Path to the Data Report Table produced by pyphe-\n                        analyse.\n  --out OUT             Specifies the path where to save the output data\n                        result. By default, a table with all replicates will\n                        be saved as pyphe-interpret-report_reps.csv and the\n                        statistic table will be saved as pyphe-interpret-\n                        report_summaryStats.csv in the current working\n                        directory. Existing files will be overwritten.\n  --grouping_column GROUPING_COLUMN\n                        Name of the column in the data report to use for\n                        forming groups on which to perform independent sets of\n                        t-tests.\n  --axis_column AXIS_COLUMN\n                        Name of the column in the data report to repeat\n                        t-tests along within each group. Levels in this column\n                        will be the explanatory/independent variable used for\n                        t-tests.\n  --values_column VALUES_COLUMN\n                        Name of the column in the data report to use as\n                        fitness values. This will be the dependent variable\n                        for t-tests. Defaults to \"Colony_size_corr_checked\".\n  --control CONTROL     Name of the control to compare against. This must be a\n                        value found in the axis column.\n  --ld_encoding LD_ENCODING\n                        Encoding of the data report table to be passed to\n                        pandas.read_csv().\n  --circularity CIRCULARITY\n                        Exclude colonies from the analysis with a circularity\n                        below the one specified. A circularity of 1\n                        corresponds to a perfect circle. We recommend a\n                        threshold around 0.85.\n  --set_missing_na      Set 0-sized colonies to NA. This is recommended if you\n                        expect no missing colonies in your data, which means\n                        these are probably due to pinning errors.\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/Bahler-Lab/pyphe/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Bahler-Lab/pyphe/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2019 Bahler-Lab\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/Bahler-Lab/pyphe/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "pyphe"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "Bahler-Lab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 97991,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Batchfile",
        "size": 1623,
        "type": "Programming_language",
        "value": "Batchfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 487,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Bahler-Lab/pyphe/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "yeastbeast",
          "type": "User"
        },
        "date_created": "2021-04-07T15:59:39Z",
        "date_published": "2021-04-07T19:53:52Z",
        "description": "This is the first GitHub release of pyphe and it fixes several issues in former versions.",
        "html_url": "https://github.com/Bahler-Lab/pyphe/releases/tag/v0.98",
        "name": "Pyphe v0.98 release",
        "release_id": 41081993,
        "tag": "v0.98",
        "tarball_url": "https://api.github.com/repos/Bahler-Lab/pyphe/tarball/v0.98",
        "type": "Release",
        "url": "https://api.github.com/repos/Bahler-Lab/pyphe/releases/41081993",
        "value": "https://api.github.com/repos/Bahler-Lab/pyphe/releases/41081993",
        "zipball_url": "https://api.github.com/repos/Bahler-Lab/pyphe/zipball/v0.98"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Prerequisites",
        "parent_header": [
          "Welcome to the pyphe toolbox",
          "Manual",
          "Pyphe-scan"
        ],
        "type": "Text_excerpt",
        "value": "1. This tool will only run on Linux operating systems and uses the SANE library for image acquisition.\n\n2. Make sure your scanner is installed correctly and you can acquire images using the scanimage command. The Gray mode will only work on Epson V800 and V850 scanners (potentially the V700 and V750 model as well) and the TPU8x10 transmission scanning source must be enabled. This should work by default if you are using the V800/850 model and a recent Linux OS. Otherwise, there is excellent documentation available from Zackrisson et al. and the [scanomatics pipeline](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5015956/) for how to make this work using a hacked SANE driver. Please see the instructions in their [wiki](https://github.com/Scan-o-Matic/scanomatic/wiki/Installing-scanners).\n\n2. Make sure [ImageMagick](https://imagemagick.org/index.php) is installed and the 'convert' tool can be called from the command line.\n\n3. If the Pyphe toolbox has been installed correctly, you should be able to run _pyphe-scan_ in your terminal. \n\n4. With a laser cutter, make a fixture to hold your plates in place. We provide an svg file with the cutting shape in the Documentation directory. Use tape to hold your fixture into place, it should be pushed against the back of the scanner (where the cables are) with the top of the plates facing left. Pyphe-scan and pyphe-quantify come pre-configured for using the provided fixture on an Epson V800/V850 scanner but it is easy to add your own fixture and cropping settings. If you want to use your own fixture, see below of how to add the geometry information to pyphe-scan. \n"
      },
      "source": "https://raw.githubusercontent.com/Bahler-Lab/pyphe/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "usage",
    "faq",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 14:26:40",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 17
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Support",
        "parent_header": [
          "Welcome to the pyphe toolbox"
        ],
        "type": "Text_excerpt",
        "value": "Please check the manuals below carefully, they are also available in the terminal by running the command with the -h option only. If things are still not working, please email me (stephan.kamrad@gmail.com) and I will try and help. If you think you have discovered a bug, or would like to request a new feature, please raise an issue on www.github.com/Bahler-Lab/pyphe.\n\nIf you get an error like this, make sure you are not using the Anaconda Powershell Prompt:\n```python: can't open file 'C:\\Users\\user1\\Anaconda3\\Scripts\"C:\\Users\\user1\\Anaconda3\\Scripts\\pyphe-quantify.bat  -h ': [Errno 22] Invalid argument```\n"
      },
      "source": "https://raw.githubusercontent.com/Bahler-Lab/pyphe/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}