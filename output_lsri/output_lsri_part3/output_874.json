{
  "acknowledgement": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Acknowledgements",
        "type": "Text_excerpt",
        "value": "================\n\nMany people have contributed to the CAFE project, either by code or\nideas. Thanks to:\n\n-   Ben Fulton\n\n-   Matthew Hahn\n\n-   Mira Han\n\n-\tFabio Mendes\n\n-   Gregg Thomas\n\n-\tDan Vanderpool\n\nCAFE uses the EasyLogging logging framework. https://github.com/amrayn/easyloggingpp\n\nCAFE uses the DocTest testing framework. https://github.com/onqtam/doctest\n\n"
      },
      "source": "https://raw.githubusercontent.com/hahnlab/CAFE5/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How to Cite",
        "parent_header": [
          "CAFE"
        ],
        "type": "Text_excerpt",
        "value": "If you use CAFE5 in your work, please cite the application as\n\n- F\u00e1bio K Mendes, Dan Vanderpool, Ben Fulton, Matthew W Hahn, CAFE 5 models variation in evolutionary rates among gene families, Bioinformatics, 2020;, btaa1022, https://doi.org/10.1093/bioinformatics/btaa1022\n\nOriginal development of the statistical framework and algorithms implemented in CAFE are \npublished in:\n\n- Hahn, M. W., T. De Bie, J. E. Stajich, C. Nguyen, and N. Cristianini. 2005. Estimating the tempo and mode of gene family evolution from comparative genomic data. _Genome Research_ 15:1153\u20131160.\n\n- De Bie, T., N. Cristianini, J. P. Demuth, and M. W. Hahn. 2006. CAFE: a computational tool for the study of gene family evolution. _Bioinformatics_ 22:1269\u20131271.\n\nThe citation for CAFE v2.0 is:\n\n- Hahn, M. W., J. P. Demuth, and S.-G. Han. 2007. Accelerated rate of gene gain and loss in primates. _Genetics_ 177:1941\u20131949. Genetics.\n\nThe citation for CAFE v3.1 and v4.0 is:\n\n- Han, M. V., G. W. C. Thomas, J. Lugo-Martinez, and M. W. Hahn. 2013. Estimating Gene Gain and Loss Rates in the Presence of Error in Genome Assembly and Annotation Using CAFE 3. _Mol. Biol. Evol._ 30:1987\u20131997.\n"
      },
      "source": "https://raw.githubusercontent.com/hahnlab/CAFE5/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/hahnlab/CAFE5"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-09-06T13:03:55Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-20T13:43:56Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Version 5 of the CAFE phylogenetics software"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.992200608608698,
      "result": {
        "original_header": "CAFE",
        "type": "Text_excerpt",
        "value": "<div>\n<h3>\nSoftware for <bold>C</bold>omputational <bold>A</bold>nalysis of gene <bold>F</bold>amily <bold>E</bold>volution\n</h3>\n</div> \nThe purpose of CAFE is to analyze changes in gene family size in a way that \naccounts for phylogenetic history and provides a statistical foundation for \nevolutionary inferences. The program uses a birth and death process to model gene \ngain and loss across a user-specified phylogenetic tree. The distribution of family \nsizes generated under this model can provide a basis for assessing the significance \nof the observed family size differences among taxa. \nThis repository contains code for _CAFE 5_, an updated version of the CAFE code base.\nCAFE 5 showcases new functionalities while keeping or improving several of the features \navailable in prior releases. \n"
      },
      "source": "https://raw.githubusercontent.com/hahnlab/CAFE5/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9286359053351146,
      "result": {
        "original_header": "History",
        "type": "Text_excerpt",
        "value": "The original development of the statistical framework and algorithms are \ndescribed by Hahn, _et al._ (2005) and later implemented in the software package\nCAFE by De Bie, _et al._ (2006). \nCAFE v2.0 (Hahn, Demuth, _et al._ 2007; Hahn, Han, _et al._ 2007) Included software \nupdates and functionality that allowed users to specify different \u03bb values for different \nbranches on their input tree.   \nCAFE v3.0 (Han, _et al._ 2013) was a major update to CAFE 2.0, with added functionality \nthat included: 1) the ability to correct for genome assembly and annotation\nerror.  2) The ability to estimate separate birth (\u03bb) and death (\u03bc)\nrates using the lambdamu command. 3) The ability to estimate error in an\ninput data set with iterative use of the errormodel command using the\naccompanying python script caferror.py. This version also included the\naddition of the rootdist command to give the user more control over\nsimulations. \nCAFE v5.0. (Current Release) Another major update, CAFE5 showcases new \nfunctionalities while keeping or improving several of the features available \nin prior releases.\n \n"
      },
      "source": "https://raw.githubusercontent.com/hahnlab/CAFE5/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9129200599960916,
      "result": {
        "original_header": "New Functionality",
        "type": "Text_excerpt",
        "value": "-   Among Family Rate Variation (AFRV) using a discrete gamma model with \n    a jointly optimized alpha shape parameter.  The birth-death model estimates \n    the posterior probabilities of each gene family belonging to different \n    evolutionary rate categories. The rates of each of the K categories are \n    determined in similar fashion to what is done in nucleotide sequence analyses:\n    through a discrete gamma distribution that has its alpha parameter\n    estimated by maximum likelihood. \n-   Ancestral state reconstruction is now done jointly (all ancestral\n    states are inferred simultaneously) with Pupko\u2019s algorithm (Pupko et\n    al. 2000). \n"
      },
      "source": "https://raw.githubusercontent.com/hahnlab/CAFE5/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9388102152192147,
      "result": {
        "original_header": "What CAFE5 does",
        "type": "Text_excerpt",
        "value": "\nCAFE5 implements a birth-death model for evolutionary inferences\nabout gene family evolution. Its main task is the maximum-likelihood\nestimation of a global or local gene family evolutionary rates (lambda\nparameter) for a given data set. Briefly, CAFE5 can: \n-   Compare scenarios in which the whole phylogeny shares the same\n    (global) lambda vs. scenarios in which different parts of the\n    phylogeny share different (local) lambdas. \n-   Account for non-biological factors (e.g., genome sequencing and\n    coverage differences, gene family clustering errors, etc.) leading\n    to incorrect gene family counts in input files. This is done with an\n    error model.\n \n"
      },
      "source": "https://raw.githubusercontent.com/hahnlab/CAFE5/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.992834187762092,
      "result": {
        "original_header": "What CAFE5 does NOT do",
        "type": "Text_excerpt",
        "value": "-   Estimate a phylogeny from gene families or gene sequence\n    alignments. CAFE5 also does not convert a phylogeny with\n    branches in expected substitutions per site into a time tree (an\n    ultrametric tree with branch lengths in time units). This task\n    should be conducted by the user prior to CAFE5 analyses. \n-   Implement clustering algorithms that identify (or verify the\n    legitimacy of) gene families. It is entirely up to the user to pick\n    a gene family identification method and carry out this task prior to\n    CAFE5 analyses. \n"
      },
      "source": "https://raw.githubusercontent.com/hahnlab/CAFE5/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9775718286134899,
      "result": {
        "original_header": "Known Limitations",
        "type": "Text_excerpt",
        "value": "Because the random birth and death process assumes that each family has\nat least one gene at the root of the tree, CAFE5 will not provide\naccurate results if included gene families were not present in the most\nrecent common ancestor (MRCA) of all taxa in the tree. For example, even\nif all taxa have a gene family size of 0, CAFE will assign the MRCA a\ngene family of size 1, and include the family in estimation of the birth\nand death rate. This difficulty does not affect analyses containing\nfamilies that go extinct subsequent to the root node. \nIf a change in gene family size is very large on a single branch, CAFE5 \nmay fail to provide accurate \u03bb estimation and/or die during\ncomputation. To see if this is a problem, look at the likelihood scores\ncomputed during the \u03bb search (reported in the log file if the\njob finishes). If ALL scores are \u201c-inf\u201d then there is a problem with\nlarge size changes and CAFE5 has calculated a probability of 0. Removing the\nfamily with the largest difference in size among species and rerunning\nCAFE5 should allow \u03bb to be estimated on the remaining data.\nIf the problem persists, remove the family with the next largest\ndifference and proceed in a like manner until CAFE5 no longer finds\nfamilies with zero probability. However, if rapidly evolving families\nare removed, care should be taken in interpretation of the estimated\naverage rate of evolution for the remaining data. \nIn very large phylogenetic trees there can be many independent lambda\nparameters (2n - 2 in a rooted tree, where n is the number of taxa).\nCAFE5 does not always converge to a single global maximum with large\nnumbers of \u03bb parameters, and therefore can give misleading\nresults. To check for this you should always run the \u03bb search\nmultiple times to ensure that the same estimated values are found. Also,\nthe likelihood of models with more parameters should always be lower\nthan models with fewer parameters, which may not be true if [CAFE5\n]{}has failed to find a global maximum. If CAFE does not converge over\nmultiple runs, then one should reduce the number of parameters estimated\nand try again.\n \n"
      },
      "source": "https://raw.githubusercontent.com/hahnlab/CAFE5/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9259364792471405,
      "result": {
        "original_header": "How does the optimizer work?",
        "type": "Text_excerpt",
        "value": "The Nelder-Mead optimization algorithm is used. It runs until it can\nfind a difference of less than 1e-6 in either the calculated score or\nthe calculated value, or for 10,000 iterations. The parameters that are\nused for the optimizer are as follows: \nIn some cases, the optimizer suggests values that cannot be calculated\n(due to saturation, negative values, or other reasons) In this case, an\ninfinite score is returned and the optimizer continues. \nWhen optimizing for an alpha value with a set number of clusters, if the\nlargest multiplier in the longest branch is saturated, the scorer will\nreturn an infinite value. This will be noted at the end of the run with\ntext like: \nCertain options are available at compile-time for the optimizer. If\nOPTIMIZER\\_STRATEGY\\_INITIAL\\_VARIANTS is defined, the optimizer will\ntake several shorter attempts at various values before settling on one\nvalue to continue on with. This may cause the optimizer to take more\niterations to finish but may have greater accuracy. If\nOPTIMIZER\\_STRATEGY\\_PERTURB\\_WHEN\\_CLOSE is defined, the optimizer will\nbegin searching a wider range of values when it is getting close to a\nsolution. This attempts to get the optimizer out of a local optima it\nmay have found.\n \n"
      },
      "source": "https://raw.githubusercontent.com/hahnlab/CAFE5/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.981882547150678,
      "result": {
        "original_header": "Initial Guesses",
        "type": "Text_excerpt",
        "value": "One of the most important concerns when searching a parameter space is\nwhat initial values to choose. Each of the three values that CAFE can\nsearch for has a particular initial guess strategy. For lambda values,\nthe formula is 1 / (longest tree branch times a random number between 0 and 1).\nFor epsilon values, the initial guesses are taken directly from the\nprovided error model. For gamma values, a random value taken from an\nexponential distribution is used. \nIn some situations the values may fail. In this case, the scorer will\nreturn an infinite value and the optimizer will retry initialization,\nup to a number of attempts determined at compile time. If, after this number\nof attempts, the optimizer continues to fail, it will abort. The most\nlikely cause of failure is too wide a variety of species sizes inside\ncertain families, and a message will be shown giving the most likely\nfamilies to remove from the analysis for success. \t\n \n"
      },
      "source": "https://raw.githubusercontent.com/hahnlab/CAFE5/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/hahnlab/CAFE5/wiki"
      },
      "source": "https://raw.githubusercontent.com/hahnlab/CAFE5/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Download",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "The Github page for CAFE5 is https://github.com/hahnlab/CAFE5 \n\nNavigate to a directory that you typically keep source code in and do one of the following:\n\nDownload the latest release from the CAFE release directory https://github.com/hahnlab/CAFE5/releases\n\nIf you wish to get the latest version from source, you can run\n\n$ git clone https://github.com/hahnlab/CAFE5.git\n\nPlease note that the released versions contain tested and approved code, while the\nlatest source code may contain experimental and untested features. _It is highly\nrecommended to use a released version instead._\n\n"
      },
      "source": "https://raw.githubusercontent.com/hahnlab/CAFE5/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/hahnlab/CAFE5/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "faq": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Error Models",
        "parent_header": [
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "------------\n\nSearch for a single lambda value using the Newick tree of mammals in the\nSamples folder, and the family files from the CAFE tutorial, applying an\nerror model:\n\n    cafe5 -t data/mammals_integral_tree.txt -i data/filtered_cafe_input.txt -p -l 0.01 -e data/cafe_errormodel_0.0548828125.txt\n\nIn earlier versions, the following script would have returned the same\nvalues:\n\n    tree ((((cat:68,horse:68):4,cow:73):20,(((((chimp:4,human:4):6,orang:11):2,gibbon:13):7,(macaque:4,baboon:4):16):16,marmoset:36):57):38,(rat:36,mouse:36):96) load -i integral_test_families.txt -t 10\n    errormodel -all -model cafe_errormodel_0.0548828125.txt\n    lambda -l 0.01 -t ((((1,1)1,1)1,(((((1,1)1,1)1,1)1,(1,1)1)1,1)1)1,(1,1)1) -score\n"
      },
      "source": "https://raw.githubusercontent.com/hahnlab/CAFE5/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Error Model Estimation",
        "parent_header": [
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "----------------------\n\nEstimate an error model:\n\n    cafe5 -t mammals_integral_tree.txt -i filtered_cafe_input.txt -p -e errormodel.txt\n\nIn earlier versions, the following script would have returned the same\nvalues:\n\n    load -i filtered_cafe_input.txt -t 4 -l reports/log_run6.txt\n    tree ((((cat:68.710507,horse:68.710507):4.566782,cow:73.277289):20.722711,(((((chimp:4.444172,human:4.444172):6.682678,orang:11.126850):2.285855,gibbon:13.412706):7.211527,(macaque:4.567240,baboon:4.567240):16.056992):16.060702,marmoset:36.684935):57.315065):38.738021,(rat:36.302445,mouse:36.302445):96.435575)\n    lambda -s -t ((((1,1)1,1)1,(((((1,1)1,1)1,1)1,(1,1)1)1,1)1)1,(1,1)1)\n    report reports/report_run6\n"
      },
      "source": "https://raw.githubusercontent.com/hahnlab/CAFE5/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 22
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/hahnlab/CAFE5/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "hahnlab/CAFE5"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CAFE"
      },
      "source": "https://raw.githubusercontent.com/hahnlab/CAFE5/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hahnlab/CAFE5/master/docs/tutorial/common_names.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hahnlab/CAFE5/master/examples/all_cafe_commands.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Compile",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "CAFE 5 can utilize powerful compilers and a number of different matrix multiplication libraries.\nBy default, you will most likely only have the standard BLAS & LAPACK implementation on your system.\nHowever, other libraries are available for high performance linear algebra calculations including:\n\n- [ATLAS](http://math-atlas.sourceforge.net) \n- [Intel MKL](https://software.intel.com/content/www/us/en/develop/tools/math-kernel-library.html)\n- [OpenBlas](http://www.openblas.net)\n \nIf you choose to install a different libraries, ensure they are visible to the compiler by copying \nor linking them to the compiler library search path and include search path or adding the paths as compiler flags in the makefile.   \n\nTo get the library search paths for the GNU c++ compiler (g++) one can type:\n\n\t$ g++ -print-search-dirs | sed '/^lib/b 1;d;:1;s,/[^/.][^/]*/\\.\\./,/,;t 1;s,:[^=]*=,:;,;s,;,;  ,g' | tr \\; \\\\012\n\nTo get the Include search paths type:\n\n\t$ g++ -E -Wp,-v -xc++ /dev/null\n\nMove into the CAFE5 folder, and type\n\n    $ ./configure\n    $ make\n\nIf you have downloaded the source code, you will need to run the\n_autoconf_ command to create the configure file provided in the\nreleased versions.\n\nThe CAFE5 executable will be located in the \u201cbin\u201d folder. One \ncan either copy the binary file to a directory in your PATH, such as\n/usr/local/bin. Alternatively, add /path/to/CAFE5/bin/ to your\n\\$PATH variable (in your .bashrc or .bash profile). \n\n"
      },
      "source": "https://raw.githubusercontent.com/hahnlab/CAFE5/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "OSX users",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": " If you encounter an error during the build that looks like: \n<pre>\n    src/matrix_cache.cpp:2:10: <b>fatal error:</b> 'omp.h' file not found\n</pre>\n\nYou may need to install gcc, find the omp.h file and add it to your path. If you already have gcc installed you may have to find this file and soft link it to a directory that the compiler can find.  Try finding the missing file by:\n\n    $ find / -name omp.h\n\nThis found the omp.h file in the [Homebrew](https://brew.sh/) installation of gcc.  I can now soft link (or copy) it to a directory where it can be found.\n\n    ln -sv /usr/local/Cellar/gcc/7.3.0/lib/gcc/7/gcc/x86_64-apple-darwin17.3.0/7.3.0/include/omp.h   /usr/local/include/\n\nNow run \n    \n    $ make\n \n\n"
      },
      "source": "https://raw.githubusercontent.com/hahnlab/CAFE5/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9639505056104991,
      "result": {
        "original_header": "New Functionality",
        "type": "Text_excerpt",
        "value": "-   Outputs are now internally parsed by CAFE5 (no external\n    dependencies or scripts necessary) into summary tables.\n \n"
      },
      "source": "https://raw.githubusercontent.com/hahnlab/CAFE5/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9268350786805021,
      "result": {
        "original_header": "Logging",
        "type": "Text_excerpt",
        "value": "-------\nMore verbose logging can be provided with an EasyLogging log config file.\nThe file may look like this: \nFor more information, see https://github.com/amrayn/easyloggingpp#using-configuration-file \nPass the config file to CAFE with the --log_config flag. For example, \n    cafe5 -t examples/mammals_tree.txt -i filtered_cafe_input.txt --log_config log.config\t   \n \n"
      },
      "source": "https://raw.githubusercontent.com/hahnlab/CAFE5/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8489523934897485,
      "result": {
        "original_header": "Logging",
        "type": "Text_excerpt",
        "value": "\t* GLOBAL:\n\t   FORMAT               =  \"%datetime %msg\"\n\t   FILENAME             =  \"cafe.log\"\n\t   ENABLED              =  true\n\t   TO_FILE              =  true\n\t   TO_STANDARD_OUTPUT   =  true\n\t   SUBSECOND_PRECISION  =  6\n\t   PERFORMANCE_TRACKING =  true\n\t   MAX_LOG_FILE_SIZE    =  2097152 ## 2MB - Comment starts with two hashes (##)\n\t   LOG_FLUSH_THRESHOLD  =  100 ## Flush after every 100 logs\n\t* DEBUG:\n\t   FORMAT               = \"%datetime{%d/%M} %func %msg\" \n    cafe5 -t examples/mammals_tree.txt -i filtered_cafe_input.txt --log_config log.config\t   \n \n"
      },
      "source": "https://raw.githubusercontent.com/hahnlab/CAFE5/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/hahnlab/CAFE5/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bioinformatics, gene-family, phylogenetics"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "IU OPEN SOURCE LICENSE \n----------------------\n \nAdapted by Indiana University from Educational Community License, Version 2.0 (ECL-2.0), available at http://opensource.org/licenses/ECL-2.0.\n \nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n \n1. Definitions.\n \n\"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.\n \n\"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.\n \n\"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.\n \n\"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License.\n \n\"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.\n \n\"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.\n \n\"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).\n \n\"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.\n \n\"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\"\n \n\"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.\n \n \n2. Grant of Copyright License. \n \nSubject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.\n \n \n3. Grant of Patent License. \n \nSubject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. Any patent license granted hereby with respect to contributions by an individual employed by an institution or organization is limited to patent claims where the individual that is the author of the Work is also the inventor of the patent claims licensed, and where the organization or institution has the right to grant such license under applicable grant and research funding agreements. No other express or implied licenses are granted.\n \n \n4. Redistribution. \n \nYou may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:\n \n1.  You must give any other recipients of the Work or Derivative Works a copy of this License; and \n \n2.  You must cause any modified files to carry prominent notices stating that You changed the files; and \n \n3.  You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and \n \n4.  If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if pny risks associated with Your exercise of permissions under this License.\n \n \n8. Limitation of Liability. \n \nIn no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.\n \n \n9. Accepting Warranty or Additional Liability. \n \nWhile redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.\n \nEND OF TERMS AND CONDITIONS\n \nCopyright \u00a9 2010-2017. Licensed by the Trustees of Indiana University under the IU Open Source License, adapted from the Educational Community License, Version 2.0 (ECL-2.0) (http://opensource.org/licenses/ECL-2.0). You may not use this file except in compliance with the License. You may obtain a copy of the License from http://ppa.iu.edu/license. Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.\n"
      },
      "source": "https://raw.githubusercontent.com/hahnlab/CAFE5/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CAFE5"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "hahnlab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 981862,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 16141,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 5309,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 2448,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "M4",
        "size": 1881,
        "type": "Programming_language",
        "value": "M4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 1644,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hahnlab/CAFE5/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "benfulton",
          "type": "User"
        },
        "date_created": "2023-04-07T19:28:11Z",
        "date_published": "2023-04-17T15:43:17Z",
        "description": "### Added\r\n- The output file Base_report.cafe or Gamma_report.cafe has been added. This file has a \r\nformat roughly the same as the CAFE 4 output, so tools and scripts that work with this\r\nformat should run properly.\r\n- The tutorial now includes a cafe5_draw_tree.py script, demonstrating how to use BioPython\r\nto create a tree.\r\n\r\n### Changed\r\n- Ordering of nodes has changed. The order should now be the same, relative to the source Newick\r\ntree, as in the R package Ape.\r\n- The model_change.tab file no longer includes a \"+\" sign before positive change counts.\r\n- The simulator handles different max family and max root sizes correctly.\r\n- The DocTest unit tester has been updated to v2.4.9.\r\n- The application will no longer attempt to compute P-Values or a reconstruction, if the user\r\nspecifies a lambda and the calculated -lnL is infinite. \r\n- The configure script now checks for the existence of mkl.h before attempting to use it.\r\n- Building the application should no longer fail if OpenMP is missing. (It will probably run\r\nmuch slower, however)\r\n",
        "html_url": "https://github.com/hahnlab/CAFE5/releases/tag/v5.1",
        "name": "1.1",
        "release_id": 99781746,
        "tag": "v5.1",
        "tarball_url": "https://api.github.com/repos/hahnlab/CAFE5/tarball/v5.1",
        "type": "Release",
        "url": "https://api.github.com/repos/hahnlab/CAFE5/releases/99781746",
        "value": "https://api.github.com/repos/hahnlab/CAFE5/releases/99781746",
        "zipball_url": "https://api.github.com/repos/hahnlab/CAFE5/zipball/v5.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "benfulton",
          "type": "User"
        },
        "date_created": "2023-03-30T19:52:59Z",
        "date_published": "2023-03-30T20:11:15Z",
        "description": "## [1.1.0] - 2023-03-30\r\n### Added\r\n- The output file Base_report.cafe or Gamma_report.cafe has been added. This file has a\r\nformat roughly the same as the CAFE 4 output, so tools and scripts that work with this\r\nformat should run properly.\r\n- The tutorial now includes a cafe5_draw_tree.py script, demonstrating how to use BioPython\r\nto create a tree.\r\n\r\n### Changed\r\n- Ordering of nodes has changed. The order should now be the same, relative to the source Newick\r\ntree, as in the R package Ape.\r\n- The model_change.tab file no longer includes a \"+\" sign before positive change counts.\r\n- The simulator handles different max family and max root sizes correctly.\r\n- The DocTest unit tester has been updated to v2.4.9.\r\n- The configure script now checks for the existence of mkl.h before attempting to use it.\r\n- Building the application should no longer fail if OpenMP is missing. (It will probably run\r\nmuch slower, however)\r\n",
        "html_url": "https://github.com/hahnlab/CAFE5/releases/tag/v5.1b",
        "name": "Version 5.1 Beta",
        "release_id": 97541947,
        "tag": "v5.1b",
        "tarball_url": "https://api.github.com/repos/hahnlab/CAFE5/tarball/v5.1b",
        "type": "Release",
        "url": "https://api.github.com/repos/hahnlab/CAFE5/releases/97541947",
        "value": "https://api.github.com/repos/hahnlab/CAFE5/releases/97541947",
        "zipball_url": "https://api.github.com/repos/hahnlab/CAFE5/zipball/v5.1b"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "benfulton",
          "type": "User"
        },
        "date_created": "2021-03-26T21:59:10Z",
        "date_published": "2021-04-30T17:32:14Z",
        "description": "CAFE 5 is a new version of CAFE. Written entirely in C++, it is designed to provide a faster and more precise estimation of the lambda value by using a gamma rate to estimate the values. CAFE5 takes its arguments on the command line rather than in a script. See the README file for detailed instructions for use.",
        "html_url": "https://github.com/hahnlab/CAFE5/releases/tag/v5.0",
        "name": "Initial Version 5 Release",
        "release_id": 42280666,
        "tag": "v5.0",
        "tarball_url": "https://api.github.com/repos/hahnlab/CAFE5/tarball/v5.0",
        "type": "Release",
        "url": "https://api.github.com/repos/hahnlab/CAFE5/releases/42280666",
        "value": "https://api.github.com/repos/hahnlab/CAFE5/releases/42280666",
        "zipball_url": "https://api.github.com/repos/hahnlab/CAFE5/zipball/v5.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "benfulton",
          "type": "User"
        },
        "date_created": "2020-01-22T21:53:13Z",
        "date_published": "2020-01-22T23:41:54Z",
        "description": "CAFE 5 is a new version of CAFE. Written entirely in C++, it is designed to provide a faster and more precise estimation of the lambda value by using a gamma rate to estimate the values. CAFE5 takes its arguments on the command line rather than in a script. See the README file for detailed instructions for use.\r\n\r\nBeta 2: \r\n* Fixes an issue with the optimizer when including an error model\r\n* Fixes an issue incorrectly assigning significance to some branches of the tree\r\n",
        "html_url": "https://github.com/hahnlab/CAFE5/releases/tag/v5.0b2",
        "name": "CAFE5 Initial Release (beta 2)",
        "release_id": 23052654,
        "tag": "v5.0b2",
        "tarball_url": "https://api.github.com/repos/hahnlab/CAFE5/tarball/v5.0b2",
        "type": "Release",
        "url": "https://api.github.com/repos/hahnlab/CAFE5/releases/23052654",
        "value": "https://api.github.com/repos/hahnlab/CAFE5/releases/23052654",
        "zipball_url": "https://api.github.com/repos/hahnlab/CAFE5/zipball/v5.0b2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "benfulton",
          "type": "User"
        },
        "date_created": "2020-01-08T19:50:38Z",
        "date_published": "2020-01-08T19:52:27Z",
        "description": "CAFE 5 is a new version of CAFE. Written entirely in C++, it is designed to provide a faster and more precise estimation of the lambda value by using a gamma rate to estimate the values. CAFE5 takes its arguments on the command line rather than in a script. See the README file for detailed instructions for use.",
        "html_url": "https://github.com/hahnlab/CAFE5/releases/tag/v5.0b",
        "name": "CAFE5 Initial Release (beta)",
        "release_id": 21975792,
        "tag": "v5.0b",
        "tarball_url": "https://api.github.com/repos/hahnlab/CAFE5/tarball/v5.0b",
        "type": "Release",
        "url": "https://api.github.com/repos/hahnlab/CAFE5/releases/21975792",
        "value": "https://api.github.com/repos/hahnlab/CAFE5/releases/21975792",
        "zipball_url": "https://api.github.com/repos/hahnlab/CAFE5/zipball/v5.0b"
      },
      "technique": "GitHub_API"
    }
  ],
  "repository_status": [
    {
      "confidence": 1,
      "result": {
        "description": "Active \u2013 The project has reached a stable, usable state and is being actively developed.",
        "type": "Url",
        "value": "https://www.repostatus.org/#active"
      },
      "source": "https://raw.githubusercontent.com/hahnlab/CAFE5/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Parameters",
        "parent_header": [
          "Running CAFE5"
        ],
        "type": "Text_excerpt",
        "value": "----------\n\n-   **--fixed\\_alpha, -a**\n\n    Alpha value of the discrete gamma distribution to use in category\n    calculations. If not specified, the alpha parameter will be\n    estimated by maximum likelihood.\n\n- \t**--lambda\\_per\\_family, -b**\n\t\n\tEstimate lambda by family (for testing purposes only).\n\n- \t**--cores, -c**\n\t\n\tNumber of processing cores to use, requires an integer argument. Default=All available \n\tcores.\n\n-   **--error_model, -e**\n\n    Run with no file name to estimate the global error model file. This file can be \n    provided in subsequent runs by providing the path to the Error model file with no \n    spaces (e.g. -eBase\\_error\\_model.txt).\n\n-   **--Expansion, -E**\n\n    Expansion parameter for Nelder-Mead optimizer, Default=2.\n\n-   **--rootdist, -f**\n\n    Path to root distribution file for simulating datasets.\n\n-   **--help, -h**\n\n    Help menu with a list of all commands.\n\n-   **--infile, -i**\n\n    Path to tab delimited gene families file to be analyzed - Required for estimation.\n\n-   **--Iterations, -I**\n\n    Maximum number of iterations that will be performed in lambda search. \n    Default=300 (increase this number if likelihood is still improving when limit is hit).\n\n-\t**--n\\_gamma\\_cats, -k**\n\n    Number of gamma categories to use. If specified, the Gamma model\n    will be used to run calculations; otherwise the Base model will be\n    used.\n\n-   **--fixed\\_lambda, -l**\n\n    Value (between 0 and 1) for a single user provided lambda value, otherwise lambda is estimated.\n\n-   **--log\\_config, -L**\n\n    Turn on logging, provide name of the configuration file for logging (see example log.config file).\n\n-   **--fixed\\_multiple\\_lambdas, -m**\n\n    Multiple lambda values, comma separated, must be used in conjunction with lambda tree (-y).\n\n-   **--output\\_prefix, -o**\n\n    Output directory - Name of directory automatically created for output. Default=results.\n\n-   **--poisson, -p**\n\n    Use a Poisson distribution for the root frequency distribution.\n  \tIf no -p flag is given, a uniform distribution will be used. A value\n    can be specified (-p10, or --poisson=10); otherwise the distribution\n    will be estimated from the gene families.  \n\n-   **--pvalue, -P**\n\n    P-value to use for determining significance of family size change, Default=0.05.\n\n-   **--chisquare\\_compare, -r**\n\n    Chi square compare (not tested).\n\n-   **--Reflection, -R**\n\n    Reflection parameter for Nelder-Mead optimizer, Default=1.\n\n-   **--simulate, -s**\n\n    Simulate families. Either provide an argument of the number of families\n\tto simulate (-s100, or --simulate=100) or provide a rootdist file giving a set\n\tof root family sizes to match. Without such a file, the families will be generated\n\twith root sizes selected randomly between 0 and 100.\n\n-   **--tree, -t**\n\n    Path to file containing newick formatted tree - Required for estimation.\n\n-   **--lambda\\_tree, -y**\n\n    Path to lambda tree, for use with multiple lambdas.\n    \n-   **--zero\\_root, -z**\n\n    Include gene families that don't exist at the root, not recommended.\n\n"
      },
      "source": "https://raw.githubusercontent.com/hahnlab/CAFE5/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Input files",
        "parent_header": [
          "Running CAFE5"
        ],
        "type": "Text_excerpt",
        "value": "-----------\n\n- \n- Tree files\n\n    A tree file is specified in Newick format.\n\n        ((((cat:68.710507,horse:68.710507):4.566782,cow:73.277289):20.722711,(((((chimp:4.444172,human:4.444172):6.682678,orang:11.126850):2.285855,gibbon:13.412706):7.211527,(macaque:4.567240,baboon:4.567240):16.056992):16.060702,marmoset:36.684935):57.315065):38.738021,(rat:36.302445,mouse:36.302445):96.435575);\n\n\n    An example may be found in the examples/mammals\\_tree.txt file.\n\n-   Family files\n\n    Family files can be specified in the CAFE input format:\n\n\t```\n\tDesc\tFamily ID\thuman\tchimp\torang\tbaboon\tgibbon\tmacaque\tmarmoset rat\tmouse\tcat\thorse\tcow\n\tATPase\tORTHOMCL1\t 52\t 55\t 54\t 57\t 54\t  56\t  56\t 53\t 52\t57\t55\t 54\n\t(null)\tORTHOMCL2\t 76\t 51\t 41\t 39\t 45\t  36\t  37\t 67\t 79\t37\t41\t 49\n\tHMG box\tORTHOMCL3\t 50\t 49\t 48\t 48\t 46\t  49\t  48\t 55\t 52\t51\t47\t 55\n\t(null)\tORTHOMCL4\t 43\t 43\t 47\t 53\t 44\t  47\t  46\t 59\t 58\t51\t50\t 55\n\tDynamin\tORTHOMCL5\t 43\t 40\t 43\t 44\t 31\t  46\t  33\t 79\t 70\t43\t49\t 50\n\t......\n\t....\n\t..\n\tDnaJ\tORTHOMCL10016\t 45\t 46\t 50\t 46\t 46 \t  47\t  46\t 48\t 49\t45\t44\t 48\n\t``` \n\n    The file is tab-separated with a header line giving the order of the\n    species. Each line thereafter consists of a description, a family\n    ID, and counts for each species in the tree.\n\n    Alternatively, the family file can be specified with a set of lines\n    beginning with hashtags containing the species order:\n\n        #human\n        #chimp\n        1       2     ORTHOMCL1\n        2       1     ORTHOMCL2\n        3       6     ORTHOMCL3\n        6       3     ORTHOMCL4\n\n    In this case, the family ID will be in the final column.\n\n-   Root distributions\n\n    A root distribution file takes the format \u201cfamily\\_size\n    \\[whitespace\\] family\\_count\u201d, e.g.\n\n        1 1\n        2 5\n        3 10\n        4 15\n        5 42\n\n    An example may be found in the\n    \u201cexamples/poisson\\_root\\_dist\\_1000.txt\u201d file.\n\n-   Error models\n\n    An error model consists of modifications of probabilities of moving\n    from one family size to another through the tree. The file is\n    structured as a series of lines containing the family size, the\n    probability of moving to less than that size, the probability of\n    that size staying the same, and the probabilities of the size\n    becoming larger. Two header lines must be included: the maximum\n    family size to process, and the differential of the probabilities.\n\n        maxcnt:90\n        cntdiff -1 0 1\n        0 0.00 0.95 0.05\n        1 0.05 0.9 0.05\n        2 0.05 0.9 0.05\n        3 0.05 0.9 0.05\n        4 0.05 0.9 0.05\n"
      },
      "source": "https://raw.githubusercontent.com/hahnlab/CAFE5/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Output",
        "parent_header": [
          "Running CAFE5"
        ],
        "type": "Text_excerpt",
        "value": "------\n\nAll output will be stored to the \"results\" directory, unless another directory is specified with the \"-o\" parameter.\n\n\n-   _model_\\_asr.tre\n\n    The file will be named Base\\_asr.txt or Gamma\\_asr.txt, based on\n    which model is in play. It contains the reconstructed states of the\n    families, in the Nexus file format\n    (https://en.wikipedia.org/wiki/Nexus\\_file). A tree is provided for\n    each family,with the expected family size set off with an underscore\n    from the node ID. \n\n    In the case of the Gamma reconstruction, the Lambda multipliers for\n    each category are given their own section in this file. In this case,\n\tony the fastest families are printed.\n\n    IMPORTANT! If you want to view only gene families with significant changes \n    mapped onto the branch on which the change occurred, simple parsing can\n    be employed using grep e.g.:\n\n        echo $'#nexus\\nbegin trees;'>Significant_trees.tre\n        grep \"*\" _model_\\_asr.tre >>Significant_trees.tre\n        echo \"end;\">>Significant_trees.tre\n\n    Open this file in Dendroscope or a similar program and you can view the tree with only families exhibiting a significant change mapped onto the branch on which the change occurred.\n\n-   _model_\\_family\\_results.txt\n\n    The file will be named Base\\_family\\_results.txt or\n    Gamma\\_family\\_results.txt, based on which model is in play. It\n    consists of a header line giving the name of each node in the tree,\n    followed by a line consisting of the family ID, an estimate of\n    whether the change is significant (\u2019y\u2019 or \u2019n\u2019). The characters are \n    separated by tabs.\n\n        #FamilyID   pvalue  Significant at 0.05\n        0           0.436   n\n        1           0.209   n\n        2           0.002   y\n\n    In the Gamma model, an additional set of probabilities are appended,\n    representing the likelihood of the family belonging to each gamma\n    category.\n\n    IMPORTANT! If you want to know how many and which families underwent a significant expansion/contraction, you can parse this file using simple grep or awk commands. \n            \n    To count significant families at the p=0.05 threshold:\n\n            grep -c \"\\ty\" Gammma_family_results.txt \n    To write the just significant families to a file:\n\n            grep \"y\" Gamma_family_results.txt > Significant_families.txt\n\n    If you used a the default p-value (0.05) in your analysis but have too many significant results, you can filter these to a lower p-value (0.01 in the example) using awk, e.g.:\n\n        awk '$2 < .01 {print $0}' Gamma_family_results.txt > Sig_at_p.01.txt\n        \n    Count the number of significant families in this file using bash: \n\n        wc -l Sig_at_p.01.txt\n\n\n-   _model_\\_clade\\_results.txt\n\n    The file will be named Base\\_clade\\_results.txt or\n    Gamma\\_clade\\_results.txt, based on which model is in play. It\n    consists of a header line, \u201cTaxon Increase Decrease\u201d, and for each\n    node in the tree, a tab-separated count of the number of families\n    which have increased and decreased for that node.\n\n-   _model_\\_branch\\_probabilities.txt\n\n\tContains a tab-separated list of the probabilities calculated for each clade\n\tand significant family. Probabilities are displayed as \"N/A\" if the parent\n\tand child have the same value. In the case of the Gamma model, only\n\tcontains significant families that are calculated to be rapidly changing.\n\t\n-   _model_\\_family\\_likelihoods.txt\n\n    Using the Base model, a tab-separated file consisting of the header\n    line \u201c\\#FamilyID Likelihood of Family\u201d, and additional tab-separated\n    lines consisting of the family ID and the posterior probability of\n    that family.\n\n    Using the Gamma model, the file contains the following values:\n    \n        #FamilyID\tGamma Cat Mean\tLkhd of Category\tLkhd of Family\tPosterior Probability\tSignificant\n        6\t        0.0459381\t    3.72073e-33\t        1.56448e-18\t    2.37825e-15\t            N/S\n        6\t        0.333538\t    3.15818e-20\t        1.56448e-18\t    0.0201867\t            N/S\n        6\t        0.969463\t    1.37286e-18\t        1.56448e-18\t    0.877521\t            N/S\n        6\t        2.65106\t        1.60035e-19\t        1.56448e-18\t    0.102293\t            N/S\n        9\t        0.0459381\t    3.44912e-22\t        2.5524e-16\t    1.35133e-06\t            N/S\n        9\t        0.333538\t    1.53142e-16\t        2.5524e-16\t    0.599993\t            N/S\n        9\t        0.969463\t    9.99454e-17\t        2.5524e-16\t    0.391575\t            N/S\n        9\t        2.65106\t        2.1518e-18\t        2.5524e-16\t    0.00843051\t            N/S\n        ...\n        ..\n        .\n    \n    The values for each family are listed on each tab-separated line.\n\n-   _model_\\_results.txt\n\n    A file giving the name of the model that was selected (\u201cBase\u201d or\n    \u201cGamma\u201d), the final likelihood of that model, the final value of the\n    rate of change of families (Lambda) that was calculated, and, if an\n    error model was specified, the final value of that value (Epsilon).\n\n-\t_model_\\_change.txt - A tab-separated file listing, for each family \n        and clade, the difference between it and its parent clade in the \n\t\treconstruction that was performed.\n\t\t\n-\t_model_\\_count.txt - A tab-separated file listing, for each family \n        and clade, the reconstructed value in that clade.\n\t\t\n-   simulation.txt\n\n    In the case of simulation, a family file is\n    generated with simulated data based on the given input parameters.\n\n-   simulation\\_truth.txt\n\n    When simulating, an additional file is generated with simulated data\n    for internal nodes included. The format is otherwise identical to\n    the family file. Rather than node names, each internal node is\n    assigned an integer ID.\n"
      },
      "source": "https://raw.githubusercontent.com/hahnlab/CAFE5/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "requirements",
    "contact",
    "contributors",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 02:39:23",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 112
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick Start",
        "parent_header": [
          "Running CAFE5"
        ],
        "type": "Text_excerpt",
        "value": "\nFor a typical CAFE analysis, users are most interested in determining two things:\n1) Which gene families are rapidly evolving \n2) The branches of the tree on which these families are rapidly evolving\n\nThis type of analysis requires a minimum of two input files:\n1) The **count data file** is a tab-delimited family \"counts\" file that contains a column for a description of the gene family,\n       the unique ID for each family, and a column for each taxon that has count data for each family.\n       This file is acquired by first peforming a clustering analysis, often using software such as \n       OrthoMCL, SwiftOrtho, FastOrtho, OrthAgogue, or OrthoFinder and then parsing the output into a table\n       like the one below (Note: if a functional description is not desired, include this column anyway with a place holder as below (null)).\n\nExample: mammal\\_gene\\_families.txt\n```\nDesc\tFamily ID\thuman\tchimp\torang\tbaboon\tgibbon\tmacaque\tmarmoset rat\tmouse\tcat\thorse\tcow\nATPase\tORTHOMCL1\t 52\t 55\t 54\t 57\t 54\t  56\t  56\t 53\t 52\t57\t55\t 54\n(null)\tORTHOMCL2\t 76\t 51\t 41\t 39\t 45\t  36\t  37\t 67\t 79\t37\t41\t 49\nHMG box\tORTHOMCL3\t 50\t 49\t 48\t 48\t 46\t  49\t  48\t 55\t 52\t51\t47\t 55\n(null)\tORTHOMCL4\t 43\t 43\t 47\t 53\t 44\t  47\t  46\t 59\t 58\t51\t50\t 55\nDynamin\tORTHOMCL5\t 43\t 40\t 43\t 44\t 31\t  46\t  33\t 79\t 70\t43\t49\t 50\n......\n....\n..\nDnaJ\tORTHOMCL10016\t 45\t 46\t 50\t 46\t 46 \t  47\t  46\t 48\t 49\t45\t44\t 48\n``` \n2) The **tree file** should contain a binary, rooted, ultrametric, tree in Newick format.  Typically\none obtains this tree using one of several molecular dating methods. If you are unsure if your tree is binary,\nrooted, or ultrametric CAFE will report this when you try to use it for an analysis. Alternatively, you can use the R package,\nApe with its included functions: is.ultrametric, is.rooted, and is.binary.  \n\nExample: mammals_tree.txt\n```\n((((cat:68.710507,horse:68.710507):4.566782,cow:73.277289):20.722711,(((((chimp:4.444172,human:4.444172):6.682678,orang:11.126850):2.285855,gibbon:13.412706):7.211527,(macaque:4.567240,baboon:4.567240):16.056992):16.060702,marmoset:36.684935):57.315065):38.738021,(rat:36.302445,mouse:36.302445):96.435575);\n```\nTo get a list of commands just call CAFE with the -h or --help arguments:\n\n    $ cafe5 -h\n\nTo estimate lambda with no among family rate variation issue the command:\n\n    $ cafe5 -i mammal_gene_families.txt -t mammal_tree.txt\n\nTo incorporate among family rate variation with both lambda and alpha estimated and three discrete gamma rate categories:\n\n    $ cafe5 -i mammal_gene_families.txt -t mammal_tree.txt -k 3\n\n\nTo estimate separate lambda values for different lineages in the tree, first identify the branches to which each lambda will apply.\nThis can be done by making a copy of your tree, and substituting the lambda identifier (1,2,3, etc.) for the branch length values.\nFor example, to apply a different lambda to the branches leading to human, chimp, and their ancestor, modify the branches as below.\n\nExample chimphuman_separate_lambda.txt:\n<pre>\n((((cat:1,horse:1):1,cow:1):1,(((((<b>chimp:2,human:2):2</b>,orang:1):1,gibbon:1):1,(macaque:1,baboon:1):1):1,marmoset:1):1):1,(rat:1,mouse:1):1);\n</pre>\nFor this tree, lambda #2 will be applied to branches leading to human, chimp, and their ancestor while lambda #1 will be applied to all other branches of the tree. \n\n\nTo run this analysis with both lambdas estimated:\n\n\n    $ cafe5 -i mammal_gene_families.txt -t mammal_tree.txt -y chimphuman_separate_lambda.txt \n\n***Caveats***\n\n- **Always** perform multiple runs to ensure convergence, especially if multiple gamma rate categories or lambdas are used.\n- More gamma rate categories (-k) does not always mean a better fit to the data. While -k=2 nearly always fits the data better than -k=1, it may be the case that -k=5 has a _worse_ likelihood than -k=3, and convergences between runs is more difficult with more categories. Try several and see what works.\n- We recommend using the -o flag to assign a unique name to the output directory for each run so that results from previous runs are not overwritten.\n- For all but the simplest of data sets, searching for multiple lambdas with multiple rate categories will result in a failure of convergence to a single optimum between runs. \n"
      },
      "source": "https://raw.githubusercontent.com/hahnlab/CAFE5/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Tutorial",
        "parent_header": [
          "Running CAFE5"
        ],
        "type": "Text_excerpt",
        "value": "A tutorial is provided in the _tutorial_ directory. It provides \ninstructions on how to generate a reasonable gene family groups\nin the correct format, dated ultrametric trees, and basic CAFE\nanalyses. The tutorial contains tutorial.md and some helper\nscripts.\n\n----"
      },
      "source": "https://raw.githubusercontent.com/hahnlab/CAFE5/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Slow Start",
        "parent_header": [
          "Running CAFE5"
        ],
        "type": "Text_excerpt",
        "value": "\nCAFE5 performs three different operations on either one or two\nmodels. The operations are\n\n-   Estimate Lambda - the traditional function of CAFE. Takes a tree and\n    a file of gene family counts, and performs a maximum likelihood\n    calculation to estimate the most likely rate of change across the\n    entire tree.\n\n-   Simulate - Given specified values, generate an artificial list of\n    gene families that matches the values. To generate a simulation,\n    pass the --simulate or -s parameter. Either pass a count of families\n    to be simulated with the parameter (--simulate=1000) or pass a\n    --rootdist (-f) parameter with a file containing the distribution to\n    match (see \\[rootdist\\] for the file format).\n\nThe models are\n-   Base - Perform computations as if no gamma function is available\n\n-   Gamma - Perform computations as if each gene family can belong to a\n    different evolutionary rate category. To use Gamma modelling, pass\n    the -k parameter specifying the number of categories to use.\n\nUnlike earlier versions, CAFE5 does not require a script. All\noptions are given at once on the command line. Here is an example:\n\n    cafe5 -t examples/mammals\\_tree.txt -i examples/mammal\\_gene\\_families.txt -p -k 3\n\nIn this example, the -t parameter specifies a file containing the tree\nthat CAFE uses; and the -i parameter specifies a list of gene families.\nThe -p, in this instance given without a parameter, indicates that the\nroot equilibrium frequency will not be a uniform distribution. The -k \nparameter specifies how many gamma rate categories to use.  \n"
      },
      "source": "https://raw.githubusercontent.com/hahnlab/CAFE5/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Lambda Search",
        "parent_header": [
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "-------------\n\nSearch for a single lambda value using the mammal phylogeny and gene family set in the Examples directory:\n\n    ../bin/cafe5 -t mammals_tree.txt -i mammal_gene_families.txt -p -o singlelambda\n\nIn earlier versions, the following script would have returned the same\nvalues:\n\n    tree ((((cat:68.710507,horse:68.710507):4.566782,cow:73.277289):20.722711,(((((chimp:4.444172,human:4.444172):6.682678,orang:11.126850):2.285855,gibbon:13.412706):7.211527,(macaque:4.567240,baboon:4.567240):16.056992):16.060702,marmoset:36.684935):57.315065):38.738021,(rat:36.302445,mouse:36.302445):96.435575)\n    load -i filtered_cafe_input.txt -t 10 -l reports/run6_caferror_files/cafe_log.txt\n    lambda -s -t ((((1,1)1,1)1,(((((1,1)1,1)1,1)1,(1,1)1)1,1)1)1,(1,1)1)\n"
      },
      "source": "https://raw.githubusercontent.com/hahnlab/CAFE5/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Lambda Search with Multiple Lambdas",
        "parent_header": [
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "-----------------------------------\n\nSearch for separate lambda values for the chimp/human clade and the rest of the tree separately, using the mammal phylogeny and gene family set in the Examples directory:\n\n    ../bin/cafe5 -t mammals_tree.txt -i mammal_gene_families.txt -p -y chimphuman_separate_lambda.txt -o doublelambda\n\nIn earlier versions, the following script would have returned the same\nvalues:\n\n    ((((cat:68,horse:68):4,cow:73):20,(((((chimp:4,human:4):6,orang:11):2,gibbon:13):7,(macaque:4,baboon:4):16):16,marmoset:36):57):38,(rat:36,mouse:36):96) \n    load -i integral_test_families.txt -t 10\n    lambda -s -t ((((1,1)1,1)1,(((((2,2)2,2)2,2)2,(1,1)1)1,1)1)1,(1,1)1)\n"
      },
      "source": "https://raw.githubusercontent.com/hahnlab/CAFE5/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "How does the simulator choose what lambda to use?",
        "parent_header": [
          "Technical"
        ],
        "type": "Text_excerpt",
        "value": "-------------------------------------------------\n\nAlthough the user specifies the lambda, in order to give more family\nvariety a multiplier is selected every 50 simulated families. So\nif 10,000 families are being simulated, 200 different lambdas will be\nused.\n\nWhen simulating without the gamma model, the multiplier is a random\nvalue based on a normal distribution with a mean of 1 and a standard\ndeviation of 0.3.\n\nWhen simulating WITH the gamma model, the multiplier is drawn directly\nfrom a gamma distribution based on the selected alpha and a mean of 1.\nIf clustering is requested via the -k parameter, the selected cluster\nmultiplier is modified by a normal distribution with the mean at the\nvalue of the multiplier, and a standard deviation intended to reflect\nthe number of clusters requested.\n"
      },
      "source": "https://raw.githubusercontent.com/hahnlab/CAFE5/master/README.md",
      "technique": "header_analysis"
    }
  ]
}