{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/NWPU-903PR/m6AexpressReader"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-10-17T02:14:58Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-10-27T10:00:20Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/NWPU-903PR/m6AexpressReader/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/NWPU-903PR/m6AexpressReader/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "NWPU-903PR/m6AexpressReader"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Installation Instructions"
      },
      "source": "https://raw.githubusercontent.com/NWPU-903PR/m6AexpressReader/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation Instructions",
        "type": "Text_excerpt",
        "value": "The m6AexpressReader package is supported by R 3.5.3 or newer versions. First, you need to install the exomePeak package for m6A peak calling:\n```r\nif (!requireNamespace(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\n\nBiocManager::install(c(\"Rsamtools\",\"GenomicAlignments\",\"GenomicRanges\",\n                       \"GenomicFeatures\",\"rtracklayer\",\"DESeq2\",\"apeglm\",\"RMariaDB\"))\n                       \ninstall.packages(\"https://www.bioconductor.org/packages/3.8/bioc/src/contrib/exomePeak_2.16.0.tar.gz\", repos = NULL, type=\"source\")\n```\nThen user should install the *waveClusteR* R package, which is used to predict YTHDF2 binding sites in PAR-CLIP data:\n```r\nBiocManager::install(\"wavClusteR\")\n```\nFor IGF2BP1/3 eCLIP data, user should install *PureCLIP* software\n```r\nconda install -c bioconda pureclip\n```\nTo obtain the longest transcript, user shoul install *m6ALogisticModel* R package\n```r\ndevtools::install_github(\"ZhenWei10/m6ALogisticModel\")\n```\nInstalled the reticulate pacakge to call python code in R\n```r\ninstall.packages(\"reticulate\")\n##install miniconda to install specific python package\nlibrary(reticulate)\ninstall_miniconda()\n##install specific python package in R\npy_install(\"statsmodels\"); py_install(\"pandas\"); py_install(\"scipy\"); py_install(\"numpy\")\n```"
      },
      "source": "https://raw.githubusercontent.com/NWPU-903PR/m6AexpressReader/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/NWPU-903PR/m6AexpressReader/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "m6AexpressReader"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "NWPU-903PR"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 81365,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/NWPU-903PR/m6AexpressReader/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "description",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 00:12:53",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "*Peak calling for methylation sites in case-control context*",
        "parent_header": [
          "Usage Example",
          "In Treated VS Control context"
        ],
        "type": "Text_excerpt",
        "value": "```r\nlibrary(exomePeak)\nlibrary(GenomicFeatures)\nlibrary(m6ALogisticModel)\nf1 <- \"./CTL_IP1.bam\"\nf2 <- \"./CTL_IP2.bam\"\nf3 <- \"./CTL_Input1.bam\"\nf4 <- \"./CTL_Input2.bam\"\nf5 <- \"./M3KD_IP1.bam\"\nf6 <- \"./M3KD_IP2.bam\"\nf7 <- \"./M3KD_Input1.bam\"\nf8 <- \"./M3KD_Input2.bam\"\nIP_BAM <- c(f1,f2,f5,f6)\nINPUT_BAM <- c(f3,f4,f7,f8)\n\nGENE_ANNO_GTF = \"./hg19_GTF/genes.gtf\"\ntxdbfile <- GenomicFeatures::makeTxDbFromGFF(GENE_ANNO_GTF)\ntxdb <- txdbfile\nresult = exomepeak(TXDB=txdb, IP_BAM=IP_BAM, INPUT_BAM=INPUT_BAM, OUTPUT_DIR= \"./exomePeak_calling/\")\n##obtain consistent peak sites information\nload(\"./exomePeak_output/exomePeak.Rdata\")\npeak_file <- tmp_rs\nconsisten_peak <- \"./exomePeak_output/con_peak.bed\"\npeak_site_infor <- obtain_consistent_peakinfor(peak_file, peak_bed=consisten_peak)\npeak_site_filter <- peak_sites_filter(m6Asites_infor=peak_site_infor,num_cond1=2,filter_reads_num=5)\n##Mapping peak sites to the longest transcript \n#map_consist_peak_longTX <- map_peak_longTX(filepath=consisten_peak,annotation_file=GENE_ANNO_GTF)\nmap_consist_peak_longTX <- map_peak_longTX(filepath=consisten_peak,annotation_file=GENE_ANNO_GTF,peak_sites_infor=peak_site_filter)\n```"
      },
      "source": "https://raw.githubusercontent.com/NWPU-903PR/m6AexpressReader/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "*For PAR-CLIP-seq data*",
        "parent_header": [
          "Usage Example",
          "In Treated VS Control context",
          "*Identify reader binding sites from CLIP-seq data*"
        ],
        "type": "Text_excerpt",
        "value": "```r\nlibrary(stringr)\nlibrary(wavClusteR)\nlibrary(BSgenome.Hsapiens.UCSC.hg19)\nlibrary(GenomicFeatures)\nlibrary(m6ALogisticModel)\nYTHDF2_binding <- \"./YTHDF2_binding.bam\"\nobtain_reader_bindingsites <- parclip_reader_bindingsites(par_bam=YTHDF2_binding,annotation_file=GENE_ANNO_GTF)\n##map to the longest transcript\nbindsites_map_longestTX <- bindsites_maplong_tr(binding_sites=obtain_reader_bindingsites,annotation_file=GENE_ANNO_GTF,parclip=TRUE)\n```"
      },
      "source": "https://raw.githubusercontent.com/NWPU-903PR/m6AexpressReader/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "*For eCLIP-seq or ICLIP-seq data*",
        "parent_header": [
          "Usage Example",
          "In Treated VS Control context",
          "*Identify reader binding sites from CLIP-seq data*"
        ],
        "type": "Text_excerpt",
        "value": "```sh\nnohup pureclip -i ./IGF2BP1_eCLIP/IGF2BP1_rep1.bam -i ./IGF2BP1_eCLIP/IGF2BP1_rep2.bam -bai ./IGF2BP1_eCLIP/IGF2BP1_rep1.bam.bai -bai ./IGF2BP1_eCLIP/IGF2BP1_rep2.bam.bai  -g ./hg19/Homo_sapiens/UCSC/hg19/Sequence/WholeGenomeFasta/genome.fa -o ./IGF2BP1_eCLIP/IGF2BP1_eCLIP.bed -nt 10 &\n\nnohup pureclip -i ./IGF2BP3_eCLIP/IGF2BP3_rep1.bam -i ./IGF2BP3_eCLIP/IGF2BP3_rep2.bam -bai ./IGF2BP3_eCLIP/IGF2BP3_rep1.bam.bai -bai ./IGF2BP3_eCLIP/IGF2BP3_rep2.bam.bai  -g ./hg19/Homo_sapiens/UCSC/hg19/Sequence/WholeGenomeFasta/genome.fa -o ./IGF2BP3_eCLIP/IGF2BP3_eCLIP.bed -nt 10 &\n```\n```r\n##Merge IGF2BP1 and IGF2BP3 binding sites together\nIGF2BP1_bindingsites <- \"./IGF2BP1_eCLIP/IGF2BP1_eCLIP.bed\"\nIGF2BP3_bindingsites <- \"./IGF2BP3_eCLIP/IGF2BP3_eCLIP.bed\"\nIGF2BPsbindingsites <- mergbinding_sites(one_bindingsites=IGF2BP1_bindingsites, two_bindingsites=IGF2BP3_bindingsites)\n##map the IGF2BPs binding sites to the longest transcript\nbindsites_map_longestTX <- bindsites_maplong_tr(binding_sites=IGF2BPsbindingsites,annotation_file=GENE_ANNO_GTF,parclip=FALSE)\n```"
      },
      "source": "https://raw.githubusercontent.com/NWPU-903PR/m6AexpressReader/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "*Mapping reader binding sites to the consistent peak sites in the longest transcript*",
        "parent_header": [
          "Usage Example",
          "In Treated VS Control context"
        ],
        "type": "Text_excerpt",
        "value": "```r\n###mapping the binding sites from PAR-CLIP to the consistent peak sites\nreader_peak_overlap <- bindsites_mapto_peak(peak_sites_infor=peak_site_filter,mapped_peak_GR=map_consist_peak_longTX,\n                                              bind_sites=bindsites_map_longestTX,parclip=TRUE)\n###mapping the binding sites from iCLIP/eCLIP to the consistent peak sites  \nreader_peak_overlap <- bindsites_mapto_peak(peak_sites_infor=peak_site_filter,mapped_peak_GR=map_consist_peak_longTX,\n                                              bind_sites=bindsites_map_longestTX,parclip=FALSE)\n```"
      },
      "source": "https://raw.githubusercontent.com/NWPU-903PR/m6AexpressReader/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "*Obtain the distance between peak and reader binding sites or stop codon*",
        "parent_header": [
          "Usage Example",
          "In Treated VS Control context"
        ],
        "type": "Text_excerpt",
        "value": "```r\n##Get peak center\n##obtain peak sites \nbind_ornobind_gene_peak <- reader_peak_overlap$peak_infor\nbindgene_nonbind_peaksite <- bind_ornobind_gene_peak$bindgene_nonbind_peak\nnobindgene_peaksite <- bind_ornobind_gene_peak$nonbindgene_peak\n##peak center for binding gene without bind sites peak\nbindgene_nobindsite_peakcenter <- findpeakcenter(targetpeaks=bindgene_nonbind_peaksite,annotation_file=GENE_ANNO_GTF,maplongtx_peak=bindsites_map_longestTX)\n##peak center for no binding sites genes\nnobindgene_peakcenter <- findpeakcenter(targetpeaks=nobindgene_peaksite,annotation_file=GENE_ANNO_GTF,maplongtx_peak=bindsites_map_longestTX)\n##binding sites mapped to peak \nbindsites_maptopeak <- reader_peak_overlap$binding_sites_overlap\n##Obtain the min distance information to binding sites (single base)\n###For PAR-CLIP-seq data\nbindgene_nobind_peakdist <- dist_fun(overlap_bindsites_infor=bindsites_maptopeak,bindgene_nobind_peakcenter=bindgene_nobindsite_peakcenter,\n                                      annotation_file=GENE_ANNO_GTF,parclip=TRUE)\n###For eCLIP/iCLIP data                                      \nbindgene_nobind_peakdist <- dist_fun(overlap_bindsites_infor=bindsites_maptopeak,bindgene_nobind_peakcenter=bindgene_nobindsite_peakcenter,\n                                      annotation_file=GENE_ANNO_GTF,parclip=FALSE)\n##Obtain the distance to stop codon                                \nnobind_gene_dist_stopcodon <- dist_stopcodon(target_peakcenter=nobindgene_peakcenter,annotation_file=GENE_ANNO_GTF)\n\n```"
      },
      "source": "https://raw.githubusercontent.com/NWPU-903PR/m6AexpressReader/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "*Add binding signal stregnth for the bound peak sites*",
        "parent_header": [
          "Usage Example",
          "In Treated VS Control context"
        ],
        "type": "Text_excerpt",
        "value": "```r\n##Add reader binding singal strength for bound peak sites and add the distance information to reader binding gene, whose peak without bingding\nbindgene_bindpeak <- bind_ornobind_gene_peak$bindgene_bind_peak\nbindgene_nobindpeak <- bind_ornobind_gene_peak$bindgene_nonbind_peak\n###For PAR-CLIP-seq data\nadd_binding_strength_dist <- add_peak_SNR(bindgene_bindpeak=bindgene_bindpeak,\n                                           bindgene_nobindpeak=bindgene_nobindpeak,\n                                           bindgene_nobind_peakdist_infor=bindgene_nobind_peakdist,\n                                           overlapped_bindsites=bindsites_maptopeak,parclip=TRUE)\n##For eCLIP-seq data                                          \nadd_binding_strength_dist <- add_peak_SNR(bindgene_bindpeak=bindgene_bindpeak,\n                                           bindgene_nobindpeak=bindgene_nobindpeak,\n                                           bindgene_nobind_peakdist_infor=bindgene_nobind_peakdist,\n                                           overlapped_bindsites=bindsites_maptopeak,parclip=FALSE)                                           \n```"
      },
      "source": "https://raw.githubusercontent.com/NWPU-903PR/m6AexpressReader/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "*Obtain the methylation level of reader binding gene or no binding gene*",
        "parent_header": [
          "Usage Example",
          "In Treated VS Control context"
        ],
        "type": "Text_excerpt",
        "value": "```r\n##No bind gene methylation level\nnobindgene_methylevel <- nobindgene_methylevel(methy_site_infor=nobindgene_peaksite,library_size=peak_site_infor[[2]],\n                                                               peak_dist_stopcodon=nobind_gene_dist_stopcodon)\n##bind gene methylation level\nbindgene_methylevel <- bindgene_methylevel(bindgene_peakSNR=add_binding_strength_dist,library_size=peak_site_infor[[2]])\n```"
      },
      "source": "https://raw.githubusercontent.com/NWPU-903PR/m6AexpressReader/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "*Obtain gene reads count and differential expression gene*",
        "parent_header": [
          "Usage Example",
          "In Treated VS Control context"
        ],
        "type": "Text_excerpt",
        "value": "```r\nlibrary(Rsubread)\nlibrary(DESeq2)\n##Obtian gene reads count\nf1 <- \"./CTL_Input1.bam\"\nf2 <- \"./CTL_Input2.bam\"\nf3 <- \"./M3KD_Input1.bam\"\nf4 <- \"./M3KD_Input2.bam\"\nInput_data <- c(f1,f2,f3,f4)\ngene_readscount <- obtain_gene_readscount(Input_data=Input_data,annotation_file=GENE_ANNO_GTF,isPairedEnd=F)\n##Obtain DE gene information\nDE_infor <- DE_analysis(gene_readscount=gene_readscount,con_name1=\"Control\",con_name2=\"METTL3KD\",num_con1=2,num_con2=2,p_value=0.05)\n```"
      },
      "source": "https://raw.githubusercontent.com/NWPU-903PR/m6AexpressReader/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "*Obtain differential methylation gene*",
        "parent_header": [
          "Usage Example",
          "In Treated VS Control context"
        ],
        "type": "Text_excerpt",
        "value": "```r\nlibrary(limma)\nDM_geneinfor <- obtain_DM_geneinfor(bindgene_methylevel=bindgene_methylevel,nobindgene_methylevel=nobindgene_methylevel,p_value=0.05,num_cond1=2,num_cond2=2)\n```"
      },
      "source": "https://raw.githubusercontent.com/NWPU-903PR/m6AexpressReader/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "*Obtain candidate gene*",
        "parent_header": [
          "Usage Example",
          "In Treated VS Control context"
        ],
        "type": "Text_excerpt",
        "value": "```r\ncandidate_gene_infor <- obtain_candidate_gene_infor(sig_DE_gene=DE_infor,sig_DM_gene=DM_geneinfor,output_path=\"./m6AexpressReader/\")\n```"
      },
      "source": "https://raw.githubusercontent.com/NWPU-903PR/m6AexpressReader/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "*Predicated m6A regulated expression gene by m6AexpressReader model*",
        "parent_header": [
          "Usage Example",
          "In Treated VS Control context"
        ],
        "type": "Text_excerpt",
        "value": "```r\n## Obtain the reader binding strength for reader binding gene\ngene_bind_strength <- bindgene_SNR(bindgene_peak_SNR_infor=add_binding_strength_dist)\n## Predicate the m6A-reg-exp gene by m6Aexpress-Reader model\nm6Aregexpgene_m6AexpressReader <- m6Aexpress_Reader_model(candidate_gene_infor=candidate_gene_infor,\n                                                          bindgene_strength_infor=gene_bind_strength,\n                                                          CUTOFF_TYPE=pvalue,pvalue=0.05,out_dir=\"./m6AexpressReader_result/\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/NWPU-903PR/m6AexpressReader/master/README.md",
      "technique": "header_analysis"
    }
  ]
}