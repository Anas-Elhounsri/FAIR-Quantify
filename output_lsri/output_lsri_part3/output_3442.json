{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "3. Citation",
        "type": "Text_excerpt",
        "value": "     5. Download\r"
      },
      "source": "https://raw.githubusercontent.com/GouXiangJian/SSRMMD/master/README",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/GouXiangJian/SSRMMD"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-09-21T12:54:44Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-01T19:49:33Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SSRMMD: A Rapid and Accurate Algorithm for Mining SSR Feature Loci and Candidate Polymorphic SSRs Based on Assembled Sequences."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4. Introduction",
        "type": "Text_excerpt",
        "value": "     6. Install\r"
      },
      "source": "https://raw.githubusercontent.com/GouXiangJian/SSRMMD/master/README",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8811376180238522,
      "result": {
        "original_header": "2. Date",
        "type": "Text_excerpt",
        "value": "     4. Introduction\r \n"
      },
      "source": "https://raw.githubusercontent.com/GouXiangJian/SSRMMD/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9678055617482735,
      "result": {
        "original_header": "13. Only for windows",
        "type": "Text_excerpt",
        "value": "\r\n1. Author\r\n=========\r\n\r\nXiangjian Gou (xjgou@stu.sicau.edu.cn), Haoran Shi (542561234@qq.com)\r\n\r\n2. Date\r\n=======\r\n\r\n2020-05-29\r\n\r\n3. Citation\r\n===========\r\n\r\nIf you like SSRMMD, please cite:\r\n    Gou X, Shi H, Yu S, Wang Z, Li C, Liu S, Ma J, Chen G, Liu T and Liu Y (2020)\r\n    SSRMMD: A Rapid and Accurate Algorithm for Mining SSR Feature Loci and Candidate Polymorphic SSRs Based on Assembled Sequences.\r\n    Front. Genet. 11:706. doi: 10.3389/fgene.2020.00706\r\n\r\nIf you don't like SSRMMD, please let us know why (and cite us anyway).\r\n\r\n4. Introduction\r\n===============\r\n\r\nSSRMMD (Simple Sequence Repeat Molecular Marker Developer) is a tool that can mine perfect SSR loci\r\nand candidate polymorphic SSRs from assembled sequences (e.g. genome, transcriptome, or single gene).\r\n\r\nIt is written in PERL5, so you should have PERL5 on your computer. \r\nYou can download PERL5 from https://www.perl.org/\r\n\r\n5. Download\r\n===========\r\n\r\nYou can download SSRMMD from https://github.com/GouXiangJian/SSRMMD\r\n\r\n6. Install\r\n==========\r\n\r\nYou don't need to do anything extra, use it directly.\r\n\r\n7. Usage\r\n========\r\n\r\nperl SSRMMD.pl option1 <value1> option2 <value2> ... optionN <valueN>\r\n\r\n8. Options\r\n==========\r\n\r\n<Here are some basic options>:\r\n\r\n  -p  | -poly   <INT> : specify how to work of SSRMMD. (default: 0)\r\n                            0 : only mining perfect SSR loci\r\n                            1 : further mining polymorphic SSRs\r\n\r\n  -o  | -outDir <STR> : specify a directory for storing output file, create\r\n                        directory if it doesn't exist. (default: SSRMMDOUT)\r\n\r\n  -t  | -thread <INT> : the number of threads for running. (default: 1)\r\n\r\n<Here are some options of mining perfect SSR loci>:\r\n\r\n  -f1 | -fasta1 <STR> : a FASTA file for mining SSR loci. (must be provided)\r\n\r\n  -f2 | -fasta2 <STR> : another FASTA file when plan to mine polymorphic SSRs.\r\n\r\n  -e  | -excav  <INT> : specify a method for mining SSR loci. (default: 0)\r\n                            0 : mining SSR by integrated regular expression\r\n                            1 : mining SSR by simple regular expression\r\n                        Note: integrated regular expression mean that traversal\r\n                        each sequence only once, no matter how many motifs are\r\n                        set (option '-mo'). It usually has faster computational\r\n                        speed, but sometimes it misses (extremely low probabil-\r\n                        ity) a few of compound SSRs.\r\n\r\n  -mo | -motifs <STR> : threshold of motif. (default: 1=10,2=7,3=6,4=5,5=4,6=4)\r\n                            left  of equal : length of motif\r\n                            right of equal : the minimum number of repeat\r\n\r\n  -n  | -minLen <INT> : the minimum length of SSR. (default: 10)\r\n\r\n  -x  | -maxLen <INT> : the maximum length of SSR. (default: 10000)\r\n\r\n  -l  | -length <INT> : length of SSR flanking sequences. (default: 100)\r\n                        Note: if option '-p' = 1, flanking sequences will be \r\n                        used to check for conservativeness and uniqueness.\r\n\r\n  -ss | -stats  <INT> : whether to output SSR statistics file. (default: 0)\r\n                            0 : not output\r\n                            1 : yes output\r\n\r\n<Here are some options of checking flanking sequences conservativeness>:\r\n\r\n  -me | -method   <STR>   : Algorithm for exactly checking flanking sequences\r\n                            conservativeness. (default: NO)\r\n                                NO : only simple check by HASH\r\n                                LD : global alignment by Levenshtein Distance\r\n                                NW : global alignment by Needleman-Wunsch\r\n                            Note: 'NO' mean flanking sequences are perfectly\r\n                            conservative, while 'LD' and 'NW' allow mismatch\r\n                            or indel in flanking sequences.\r\n\r\n  -r  | -reduce   <FLOAT> : conservativeness pre-alignment by using X% flanking\r\n                            sequences near SSR. (default: 0.05 [X% = 5%])\r\n                            Note: -r only make sense when option '-me' = LD/NW.\r\n\r\n  -ms | -mismatch <INT>   : set the maximum number of mismatch base during\r\n                            pre-alignment. (default: 0)\r\n                                0 : no  mismatch\r\n                                1 : one mismatch\r\n                                2 : two mismatch\r\n                            Note: we assume that flanking sequences near SSR\r\n                            are highly conservative.\r\n\r\n  -d  | -distance <FLOAT> : if option '-me' = LD, set threshold of Levenshtein\r\n                            Distance. (default: 0.05 [5%])\r\n                            Note: the smaller the Levenshtein Distance, the \r\n                            higher the sequence identity.\r\n\r\n  -i  | -identity <FLOAT> : if option '-me' = NW, set threshold of sequence\r\n                            identity calculated by Needleman-Wunsch algori-\r\n                            thm. (default: 0.95 [95%])\r\n\r\n  -sc | -score    <STR>   : mapping score of NW algorithm. (default: 1,-1,-2)\r\n                            Note: here, 1 = match, -1 = mismatch, -2 = indel\r\n\r\n<Here are some options of checking flanking sequences uniqueness>:\r\n\r\n  -g1 | -genome1  <STR> : genome file of fasta1 for checking flanking sequences\r\n                          uniqueness in genome-scale. (default: fasta1 file)\r\n\r\n  -g2 | -genome2  <STR> : genome file of fasta2 for checking flanking sequences\r\n                          uniqueness in genome-scale. (default: fasta2 file)\r\n\r\n  -st | -uniStyle <INT> : specify a run style to check uniqueness. (default: 0)\r\n                              0 : run in a time-saving manner\r\n                              1 : run in a memory-saving manner\r\n\r\n  -si | -uniSize  <INT> : if option '-st' = 1, set data size of each uniqueness\r\n                          check. (default: 10 [10Mb])\r\n                          Note : the smaller value, the smaller memory used.\r\n\r\n<Here are some other options>:\r\n\r\n  -a  | -all      <INT> : whether to output intermediate file. (default: 0)\r\n                              0 : not output\r\n                              1 : yes output (be used to debug)\r\n\r\n  -w  | -workLog  <STR> : create a file to record run log. (default: STDOUT)\r\n\r\n  -v  | -version        : show the version information.\r\n\r\n  -h  | -help           : show the help information.\r\n\r\n9. Example - only mining perfect SSR loci\r\n=========================================\r\n\r\nSuppose you have a FASTA file named test.fa !\r\n\r\nexample1 : Run SSRMMD with all default parameters :\r\n    perl SSRMMD.pl -f1 test.fa\r\n\r\nexample2 : Set flanking sequences to 200 bp, output SSR statistics, and change motif threshold :\r\n    perl SSRMMD.pl -f1 test.fa -l 200 -ss 1 -mo 1=12,2=6,3=5,4=5,5=5,6=4\r\n\r\n10. Example - further mining candidate polymorphic SSRs\r\n=======================================================\r\n\r\nSuppose you have two FASTA files named test1.fa and test2.fa !\r\n\r\nexample3 : Use 8 threads to mine candidate polymorphic SSRs :\r\n    perl SSRMMD.pl -f1 test1.fa -f2 test2.fa -p 1 -t 8\r\n\r\nexample4 : Check flanking sequences conservativeness by Levenshtein Distance :\r\n    perl SSRMMD.pl -f1 test1.fa -f2 test2.fa -p 1 -me LD\r\n\r\n11. Output\r\n==========\r\n\r\nSuppose you have two FASTA files named test1.fa and test2.fa !\r\n\r\n1. If you only mining SSR loci, you will get a file (test1.fa.SSRs) suffixed\r\n   with 'SSRs', which includes 12 columns :\r\n\r\n        1  - SSR number\r\n        2  - sequence name\r\n        3  - SSR motif\r\n        4  - motif length\r\n        5  - the number of motif repeats\r\n        6  - the total size of SSR\r\n        7  - start position\r\n        8  - end position\r\n        9  - left flanking sequence\r\n        10 - the length of left flanking sequence\r\n        11 - right flanking sequence\r\n        12 - the length of right flanking sequence\r\n\r\n2. If you mining candidate polymorphic SSR, you will get three files (test1.fa.SSRs, test2.fa.SSRs,\r\n   test1.fa-and-test2.fa.compare). Two files suffixed with 'SSRs' have the same format as above file,\r\n   and 'test1.fa-and-test2.fa.compare' includes 20 columns :\r\n\r\n        1  - SSR number\r\n        2  - sequence name of fasta1\r\n        3  - SSR motif of fasta1\r\n        4  - the number of motif repeats of fasta1\r\n        5  - start position of fasta1\r\n        6  - end position of fasta1\r\n        7  - sequence name of fasta2\r\n        8  - SSR motif of fasta2\r\n        9  - the number of motif repeats of fasta2\r\n        10 - start position of fasta2\r\n        11 - end position of fasta2\r\n        12 - left flanking sequence of fasta1\r\n        13 - the length of left flanking sequence of fasta1\r\n        14 - for left flanking sequence, the Levenshtein Distance (LD) between fasta1 and fasta2\r\n        15 - for left flanking sequence, the sequence identity between fasta1 and fasta2 calculated by Needleman-Wunsch(NW) algorithm\r\n        16 - right flanking sequence of fasta1\r\n        17 - the length of right flanking sequence of fasta1\r\n        18 - for right flanking sequence, the Levenshtein Distance (LD) between fasta1 and fasta2\r\n        19 - for right flanking sequence, the sequence identity between fasta1 and fasta2 calculated by Needleman-Wunsch(NW) algorithm\r\n        20 - polymorphism judgment ( yes = polymorphism, no = monomorphism )\r\n\r\n12. Primer design\r\n=================\r\n\r\nWe have provided a tool 'connectorToPrimer3' to connect SSRMMD and Primer3, hence, primer design\r\ncan be easily performed. You can use the following command to see detailed usage:\r\n\r\n    perl connectorToPrimer3.pl -h\r\n\r\n13. Only for windows\r\n====================\r\n\r\nIn the 'bin' directory, programs 'SSRMMD.exe' and 'connectorToPrimer3.exe' have been compiled on\r\nthe windows platform, which means no need to install PERL5, you can use them directly.\r\n\r\nYou can use the following command to see detailed usage:\r\n\r\n    SSRMMD.exe -h\r\n    connectorToPrimer3.exe -h\r\n \n"
      },
      "source": "https://raw.githubusercontent.com/GouXiangJian/SSRMMD/master/README",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "5. Download",
        "type": "Text_excerpt",
        "value": "     7. Usage\r"
      },
      "source": "https://raw.githubusercontent.com/GouXiangJian/SSRMMD/master/README",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/GouXiangJian/SSRMMD/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/GouXiangJian/SSRMMD/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "GouXiangJian/SSRMMD"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/GouXiangJian/SSRMMD/master/README",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "6. Install",
        "type": "Text_excerpt",
        "value": "     8. Options\r"
      },
      "source": "https://raw.githubusercontent.com/GouXiangJian/SSRMMD/master/README",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9263130782441166,
      "result": {
        "original_header": "11. Output",
        "type": "Text_excerpt",
        "value": "    13. Only for windows\r \n"
      },
      "source": "https://raw.githubusercontent.com/GouXiangJian/SSRMMD/master/README",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/GouXiangJian/SSRMMD/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SSRMMD"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "GouXiangJian"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 78680,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/GouXiangJian/SSRMMD/master/README"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 12:46:55",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 13
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "7. Usage",
        "type": "Text_excerpt",
        "value": "     9. Example - only mining perfect SSR loci\r"
      },
      "source": "https://raw.githubusercontent.com/GouXiangJian/SSRMMD/master/README",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "9. Example - only mining perfect SSR loci",
        "type": "Text_excerpt",
        "value": "    11. Output\r"
      },
      "source": "https://raw.githubusercontent.com/GouXiangJian/SSRMMD/master/README",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "10. Example - further mining candidate polymorphic SSRs",
        "type": "Text_excerpt",
        "value": "    12. Primer design\r"
      },
      "source": "https://raw.githubusercontent.com/GouXiangJian/SSRMMD/master/README",
      "technique": "header_analysis"
    }
  ]
}