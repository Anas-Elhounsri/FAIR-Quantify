{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/TuomoKalliokoski/HASTEN"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-03-31T08:51:17Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-18T02:35:37Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Machine Learning Boosted Docking (HASTEN): Accelerate Structure-based Virtual Screening"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.8932160889776123,
      "result": {
        "original_header": "Read the version 1.1 README at https://github.com/TuomoKalliokoski/HASTEN/tree/version1.1",
        "type": "Text_excerpt",
        "value": "***************\n* INTRODUCTION\n***************\nHASTEN is a tool that makes it easier to run machine learning boosted\nvirtual screening workflows. It is written in very general Python without\nrelying in non-standard libraries so it is easy to run in any\nPython environment \nCurrently only chemprop is supported as machine learning method, but it is\neasy to write Shell-scripts to plug-in your own methods. Glide from\nSchrodinger is supported in this version, but the same applies here:\nit should be easy to plug-in your own docking program. Do note that the\nHASTEN assumes that the smaller the docking score, the better the score. \nThere is also simulation mode, which allows you to run benchmarks using\nexisting docking_scores without in reality doing anything in 3D. This mode\ncan be useful when adjusting the machine learning parameters. \n* DESCRIPTION OF THE FILES\n1. hasten.py -- main program\n2. hasten_import.py -- import data\n3. hasten_export.py -- export data\n4. hasten_import_simulation.py -- allow simulation data to be used\n5. hasten_analyze_simulation.py -- calculate recall on simulated data \n* VERSIONS USED IN THE DEVELOPMENT\n- chemprop v1.1.0 (Jan 2020)\n- CUDA driver v10.1 and v10.2\n- anaconda3, conda 4.9.2\n- CentOS 7.6.1810 and 7.8.2003 \nTested also Azure cloud VM with Tesla V100 and CUDA 11.1 plus\nAWS cloud VM with Tesla V100 and CUDA 10.1. \n4. Edit \"environment.yml\" => change python=3.7.9, add \n   cudatoolkit-<your-cuda-version> and set correct PyTorch version\n   (must be newer than 1.5.1). \n9. Define your GPU ID number to two HASTEN files: \n    \"ml_chemprop_pred.sh\" and \"ml_chemprop_train.sh\" [--gpu]. You may\n    check your GPU ID numbers with \"nvidia-smi\" command. If you have\n    several computers, it is good idea to use different copies for each\n    computer (you may define this file in protocol file). \nThis file is just a simple text file (comments start with #). See example\n\"simulate.protocol\". Note that you may have to adjust machine learning\nshell scripts in multiple GPU-systems (by default, GPU ID 0 is used for\ncalculations). In any case, edit the shell scripts so that the paths are\ncorrect! \n2. You can also include docking scores in text format (dock.txt) as shown\nabove, but it is optional. \nSee example \"glide.protocol\". Remember to adjust machine learning shell\nscripts on multiple GPU machines and paths. Please also see \"example.in\". \nNote that it is imporant to have these fields in your .in file (the script\nwill replace INPUTMAEGZ with the input file when running): \nWhen working with large (100M+) databases, even the ML calculations start\nto take very long time and several computers are needed. \nHand-operated mode allows you to run the process one step at the end and\nin parallel calculations in mind. \nCopy PRED1-PRED12 to another computers and iter2 model also \n******\n* TIPS\n******\n- you may want to start from some other iteration than 1 sometimes. This \ncan be defined by using \"-i\" parameter for hasten.py \n***************************************************\n* INPUT/OUTPUT DATA FORMATS FOR ADDITIONAL PLUG-INS\n***************************************************\nConformer generation: \n    - hasten.py starts the confgen-script giving two parameters:\n        parameter #1: SMILES-file of the compounds. Each compound name is\n                      formatted as \"<smilesid>|<hastenid>\". SMILES is your\n                      own molecule ID and hastenid is integer and used for\n                      primary key in all Hasten tables.\n        parameter 2: the name of HASTEN-db file. \n    - hasten.py starts the docking-script with three parameters:\n        parameter #1: the conformations to be docked\n        parameter #2: the name of HASTEN .db-file\n        parameter #3: smilesid to hastenid mapping, seperated by |\n        parameter #4: iteration (integer) \n    Files all have same format: SMILES, hastenid, dock_score.\n    This is simple as you don't have to import anything back. \n    - hasten.py submits chunks of predicted molecules in with following\n    command line parameters:\n        parameter #1: molecules in SMILES,hastenid-format\n        parameter #2: iteration in \"iter1\",\"iter2\", etc.-format \n"
      },
      "source": "https://raw.githubusercontent.com/TuomoKalliokoski/HASTEN/main/README",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/TuomoKalliokoski/HASTEN/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/TuomoKalliokoski/HASTEN/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "TuomoKalliokoski/HASTEN"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "NOTE: YOU WILL PROBABLY WANT TO DOWNLOAD VERSION 1.1 INSTEAD THIS VERSION:"
      },
      "source": "https://raw.githubusercontent.com/TuomoKalliokoski/HASTEN/main/README",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/TuomoKalliokoski/HASTEN/main/glide_docking.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/TuomoKalliokoski/HASTEN/main/glide_confgen.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/TuomoKalliokoski/HASTEN/main/simulate_confgen.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/TuomoKalliokoski/HASTEN/main/ml_chemprop_pred.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/TuomoKalliokoski/HASTEN/main/ml_chemprop_train.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/TuomoKalliokoski/HASTEN/main/simulate_docking.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.9585152697196482,
      "result": {
        "original_header": "Read the version 1.1 README at https://github.com/TuomoKalliokoski/HASTEN/tree/version1.1",
        "type": "Text_excerpt",
        "value": "6. glide.protocol -- example protocol on how to run Glide\n7. simulate.protocol -- example protocol on how to run simulations \n8. glide_confgen.py -- glide wrappers\n9. glide_confgen.sh\n10. glide_docking.py\n11. glide_docking.sh \n12. simulate_confgen.py -- simulation wrappers\n13. simulate_confgen.sh\n14. simulate_docking.py\n15. simulate_docking.sh \n* VERSIONS USED IN THE DEVELOPMENT\n- chemprop v1.1.0 (Jan 2020)\n- CUDA driver v10.1 and v10.2\n- anaconda3, conda 4.9.2\n- CentOS 7.6.1810 and 7.8.2003 \nTested also Azure cloud VM with Tesla V100 and CUDA 11.1 plus\nAWS cloud VM with Tesla V100 and CUDA 10.1. \n**********************************\n* INSTALLING CHEMPROP ON CENTOS 7\n**********************************\nNOTE: Please see chemprop webpage for up-to-date instructions. Here is just\nwhat I did to get the program running on Jan 2020. \nNOTE2: Even if you have chemprop already installed, check scripts\nml_chemprop_train.sh and ml_chemprop_pred.sh and adjust correct GPU ID for\nyour calculation card on multiple GPU systems! \n0. Check the CUDA version of your system (nvidia-smi). \n1. Install anaconda3 to your system. \n2. \"git glone https://github.com/chemprop/chemprop.git\" \n3. \"cd chemprop\" \n4. Edit \"environment.yml\" => change python=3.7.9, add \n   cudatoolkit-<your-cuda-version> and set correct PyTorch version\n   (must be newer than 1.5.1). \n5. \"conda env create -f environment.yml\" \n6. \"conda activate chemprop\" \n7. \"pip install -e .\" \n8. \"pip install git+https://github.com/bp-kelley/descriptastorus\" \n9. Define your GPU ID number to two HASTEN files: \n    \"ml_chemprop_pred.sh\" and \"ml_chemprop_train.sh\" [--gpu]. You may\n    check your GPU ID numbers with \"nvidia-smi\" command. If you have\n    several computers, it is good idea to use different copies for each\n    computer (you may define this file in protocol file). \nThis file is just a simple text file (comments start with #). See example\n\"simulate.protocol\". Note that you may have to adjust machine learning\nshell scripts in multiple GPU-systems (by default, GPU ID 0 is used for\ncalculations). In any case, edit the shell scripts so that the paths are\ncorrect! \nAfter hasten.py finished, you may export the final results by typing: \npython hasten_export.py -m testscreen.db -c 10.0 -x scores.txt \npython hasten_analyze_simulation -m testscreen.db -d dock.txt \n******************************\n* HOW TO RUN HASTEN WITH GLIDE\n****************************** \n    python hasten_import.py -o realscreen.db -s mols.smi -d dock.txt \n2. You can also include docking scores in text format (dock.txt) as shown\nabove, but it is optional. \nSee example \"glide.protocol\". Remember to adjust machine learning shell\nscripts on multiple GPU machines and paths. Please also see \"example.in\". \nNote that it is imporant to have these fields in your .in file (the script\nwill replace INPUTMAEGZ with the input file when running): \npython hasten.py -m realscreen.db -p glide.protocol \npython hasten.py -m db.db -p para_simulate.protocol --hand-operate dock -i 1\npython hasten.py -m db.db -p para_simulate.protocol --hand-operate train -i 2\npython hasten.py -m db.db -p para_simulate.protocol --hand-operate split-pred -i 2 \nAfter finished, copy *output* into one directory back where db.db is \n******\n* TIPS\n******\n- you may want to start from some other iteration than 1 sometimes. This \ncan be defined by using \"-i\" parameter for hasten.py \n- \"smiles_confgen.sh\" allows you skip the conformer generation completely when\ndoing docking (useful when your docking script can take SMILES input directly). \n    See scripts \"glide_docking.sh\" and \"glide_docking.py\" on how to import\n    both dock_score and pose to correct place. \n"
      },
      "source": "https://raw.githubusercontent.com/TuomoKalliokoski/HASTEN/main/README",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8697749912147049,
      "result": {
        "original_header": "Read the version 1.1 README at https://github.com/TuomoKalliokoski/HASTEN/tree/version1.1",
        "type": "Text_excerpt",
        "value": "* DESCRIPTION OF THE FILES\n1. hasten.py -- main program\n2. hasten_import.py -- import data\n3. hasten_export.py -- export data\n4. hasten_import_simulation.py -- allow simulation data to be used\n5. hasten_analyze_simulation.py -- calculate recall on simulated data \n8. glide_confgen.py -- glide wrappers\n9. glide_confgen.sh\n10. glide_docking.py\n11. glide_docking.sh \n12. simulate_confgen.py -- simulation wrappers\n13. simulate_confgen.sh\n14. simulate_docking.py\n15. simulate_docking.sh \n2. Import simulation data as \"python hasten_import_simulation.py -s mols.smi -d dock.txt -o testscreen.db\". This will create \"testscreen.db\". \npython hasten.py -m testscreen.db -p simulate.protocol \npython hasten_export.py -m testscreen.db -c 10.0 -x scores.txt \npython hasten_analyze_simulation -m testscreen.db -d dock.txt \n    python hasten_import.py -o realscreen.db -s mols.smi -d dock.txt \npython hasten.py -m realscreen.db -p glide.protocol \npython hasten.py -m db.db -p para_simulate.protocol --hand-operate dock -i 1\npython hasten.py -m db.db -p para_simulate.protocol --hand-operate train -i 2\npython hasten.py -m db.db -p para_simulate.protocol --hand-operate split-pred -i 2 \npython hasten.py -m para_simulate.protocol --hand-operate import-pred\npython hasten.py -m para_simulate.protocol --hand-operate dock -i 2 \n    - hasten.py starts the ML-train-script with three parameters:\n        parameter #1: training set CSV\n        parameter #2: validation set set CSV\n        parameter #3: test set CSV\n        parameter #4: iteration as \"iter1\", \"iter2\", etc... \n"
      },
      "source": "https://raw.githubusercontent.com/TuomoKalliokoski/HASTEN/main/README",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/TuomoKalliokoski/HASTEN/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Copyright \u00a9 2021 Orion Corporation\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
      },
      "source": "https://raw.githubusercontent.com/TuomoKalliokoski/HASTEN/main/LICENSE.md/LICENSE.md",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "HASTEN"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "TuomoKalliokoski"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 54836,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 8091,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/TuomoKalliokoski/HASTEN/main/README"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/TuomoKalliokoski/HASTEN/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "TuomoKalliokoski",
          "type": "User"
        },
        "date_created": "2021-06-02T06:45:49Z",
        "date_published": "2021-06-02T06:47:17Z",
        "description": "The first version that was used to produce the data in the publication.",
        "html_url": "https://github.com/TuomoKalliokoski/HASTEN/releases/tag/v0.1",
        "release_id": 43953744,
        "tag": "v0.1",
        "tarball_url": "https://api.github.com/repos/TuomoKalliokoski/HASTEN/tarball/v0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/TuomoKalliokoski/HASTEN/releases/43953744",
        "value": "https://api.github.com/repos/TuomoKalliokoski/HASTEN/releases/43953744",
        "zipball_url": "https://api.github.com/repos/TuomoKalliokoski/HASTEN/zipball/v0.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 05:21:39",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 34
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}