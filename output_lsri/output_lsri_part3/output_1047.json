{
  "application_domain": [
    {
      "confidence": 48.64,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/zzdxjtu/S-cuda"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-02-17T11:41:42Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-02T16:12:32Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Code for S-cuda: Self-Cleansing Unsupervised Domain Adaptation for Medical Image Segmentation"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9833956375238618,
      "result": {
        "original_header": "S-cuda: Self-Cleansing Unsupervised Domain Adaptation for Medical Image Segmentation",
        "type": "Text_excerpt",
        "value": "This repository provides code for the paper, S-CUDA: Self-Cleansing Unsupervised Domain Adaptation for Medical Image Segmentation. Please refer to our paper for better understanding the method. Notably, the N1 or N2 in the framework can be replaced to other segmentation networks based on your tasks. \n"
      },
      "source": "https://raw.githubusercontent.com/zzdxjtu/S-cuda/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9408042804800351,
      "result": {
        "original_header": "Correct the common part of the noise data selected by the two networks, and then the two networks select the noise data and clean data simultaneously, at last input the clean data into each other's network for finetune.",
        "type": "Text_excerpt",
        "value": "```\nsh scripts/run4.sh  \n```\n##Correct the common part of the noise data selected by the two networks, and then the two networks select the noise data and clean data simultaneously, at last input the clean data into each other's network for finetune.  \nBefore training, please check whether all the model weight and dataset path is correct.  \n__2.Test:__  \nBASH2*\n__3.Performance__   \n__4.Selection ability__  \nWe also demonstrate the selection ability of these two networks training from scratch via calculating the dice coefficient. \n**Clean data**\nN1/Level_0.5-0.7/noise_labels_0.1 | select_0.1 | select_0.3 | select_0.5 | select_0.7   \n---- | ---- | ----| ---- | ----  \nDisc_dice | 1.0 | 0.995 | 0.997 | 0.994  \nCup_dice | 1.0 | 1.0 | 1.0 | 0.995   \n**Noisy data**\nN1/Level_0.5-0.7/noise_labels_0.1 | select_0.1_1 | select_0.1_2 | select_0.1_3 | select_0.1_4   \n---- | ---- | ----| ---- | ----  \nDisc_dice | 0.861 | 0.896 | 0.786 | 0.815  \nCup_dice | 0.784 | 0.777 | 0.755 | 0.813   \nIntersection of N1 and N2/Level_0.5-0.7/noise_labels_0.1 | select_0.1_1 | select_0.1_2 | select_0.1_3 | select_0.1_4   \n---- | ---- | ----| ---- | ----  \nDisc_dice | 0.761 | 0.831 | 0.7 | 0.743  \nCup_dice | 0.615 | 0.596 | 0.715 | 0.866   \nIn addition, the noise select ratio and clean select ratio can be modified according to your own tasks and the training dataset. For example, with the noise ratio of the dataset, which can be estimated by sampling analysis, you can set the select ratio accordingly. You can also set both of the initial noise select ratio and clean select ratio to 0.1, respectively, and then increase the select ratio of clean data gradually to make sure the two peer netowrks work well, after that maintain the select ratio of clean data and gradually increase the select ratio of noisy data.     \n"
      },
      "source": "https://raw.githubusercontent.com/zzdxjtu/S-cuda/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9757215529829765,
      "result": {
        "original_header": "Supplementary notes",
        "type": "Text_excerpt",
        "value": "```\nboudary.ipynb  \n##Calculate the weight map of the optic cup, optic disc, and background  \ncalculate_dice.py  \n##Calculate dice coefficient  \nget_contour.ipynb  \n##Obtain the edge contour of the target object  \nhausdorff_dis.py  \n##Calculate hausdorff distance  \nnoise_label.ipynb  \n##Generate labels with different levels of noise and different proportions, including corrosion, expansion, deformation operations\ncrop.py  \n##crop 512\u00d7512 ROI from source image\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/zzdxjtu/S-cuda/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9790049522020142,
      "result": {
        "original_header": "Acknowledge",
        "type": "Text_excerpt",
        "value": "Some of our codes (i.e., two peer networks) are referring to [liyunsheng13/BDL](https://github.com/liyunsheng13/BDL) and [EmmaW8/pOSAL](https://github.com/EmmaW8/pOSAL). Thanks for their helpful works.\n \n"
      },
      "source": "https://raw.githubusercontent.com/zzdxjtu/S-cuda/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/zzdxjtu/S-cuda/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zzdxjtu/S-cuda/main/noise_label.ipynb"
      },
      "source": "https://raw.githubusercontent.com/zzdxjtu/S-cuda/main/noise_label.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zzdxjtu/S-cuda/main/boudary.ipynb"
      },
      "source": "https://raw.githubusercontent.com/zzdxjtu/S-cuda/main/boudary.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zzdxjtu/S-cuda/main/get_contour.ipynb"
      },
      "source": "https://raw.githubusercontent.com/zzdxjtu/S-cuda/main/get_contour.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/zzdxjtu/S-cuda/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "zzdxjtu/S-cuda"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "S-cuda: Self-Cleansing Unsupervised Domain Adaptation for Medical Image Segmentation"
      },
      "source": "https://raw.githubusercontent.com/zzdxjtu/S-cuda/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zzdxjtu/S-cuda/main/scripts/run2.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zzdxjtu/S-cuda/main/scripts/run4.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zzdxjtu/S-cuda/main/scripts/run1.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zzdxjtu/S-cuda/main/scripts/run3.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zzdxjtu/S-cuda/main/scripts/run5.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://user-images.githubusercontent.com/38779372/110201691-84edaa00-7e9f-11eb-94bb-1043dc82eba7.png"
      },
      "source": "https://raw.githubusercontent.com/zzdxjtu/S-cuda/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "The two peer networks select the noise data and clean data simultaneously, and then the selected clean data are fed into the peer network for finetune, and you can change the remember rate and noise rate according to the noise ratio of the source training set.",
        "parent_header": [
          "S-cuda: Self-Cleansing Unsupervised Domain Adaptation for Medical Image Segmentation"
        ],
        "type": "Text_excerpt",
        "value": "```\nsh scripts/run2.sh  \n```"
      },
      "source": "https://raw.githubusercontent.com/zzdxjtu/S-cuda/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9873630888241451,
      "result": {
        "original_header": "The two networks select the noise data and clean data simultaneously, and then input the clean data into each other's network for finetune.",
        "type": "Text_excerpt",
        "value": "```\nsh scripts/run3.sh  \n``` \n"
      },
      "source": "https://raw.githubusercontent.com/zzdxjtu/S-cuda/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/zzdxjtu/S-cuda/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "S-cuda"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "zzdxjtu"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 2794042,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 326140,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 11665,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zzdxjtu/S-cuda/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running",
        "parent_header": [
          "S-cuda: Self-Cleansing Unsupervised Domain Adaptation for Medical Image Segmentation",
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "__0.Clone this repo:__  \n```\ngit clone https://github.com/zzdxjtu/S-cuda.git\ncd S-cuda\n```\n__1.Train:__  \nAll training script is stored in scripts directory.\n```\nsh scripts/run1.sh  \n```"
      },
      "source": "https://raw.githubusercontent.com/zzdxjtu/S-cuda/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-06 03:18:18",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 27
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Environments",
        "parent_header": [
          "S-cuda: Self-Cleansing Unsupervised Domain Adaptation for Medical Image Segmentation",
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "* python 3.5\n* tensorflow 1.4.0\n* keras 2.2.0\n* pytorch 0.4.0\n* CUDA 9.2"
      },
      "source": "https://raw.githubusercontent.com/zzdxjtu/S-cuda/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Packages",
        "parent_header": [
          "S-cuda: Self-Cleansing Unsupervised Domain Adaptation for Medical Image Segmentation",
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "* tqdm\n* skimage\n* opencv\n* scipy\n* matplotlib"
      },
      "source": "https://raw.githubusercontent.com/zzdxjtu/S-cuda/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Datasets",
        "parent_header": [
          "S-cuda: Self-Cleansing Unsupervised Domain Adaptation for Medical Image Segmentation",
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "Download from [Refuge](https://refuge.grand-challenge.org/), prepare dataset in data directory as follows.\n```\nS-cuda\n\u2502   Network-1\n|   Network-2\n\u2502   scripts\n\u2514\u2500\u2500\u2500dataset\n\u2502   \u2502   source\n\u2502   \u2502   \u2502   images\n\u2502   \u2502   \u2502   labels\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500\u2500target\n\u2502   \u2502   \u2502   images\n\u2502   \u2502   \u2502   labels\n\u2502   \u2502   \u2502   pseudo_label \n\u2502   \u2502 \n\u2502   \u2514\u2500\u2500\u2500test\n\u2502   \u2502   \u2502   images\n\u2502   \u2502   \u2502   labels\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500\u2500source.txt\n\u2502   \u2502   target.txt\n\u2502   \u2502   test.txt\n\u2502        \n\u2514\u2500\u2500\u2500README.md\n```"
      },
      "source": "https://raw.githubusercontent.com/zzdxjtu/S-cuda/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Initial weights and pre-trained model",
        "parent_header": [
          "S-cuda: Self-Cleansing Unsupervised Domain Adaptation for Medical Image Segmentation",
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "Initial weights and pre-trained model download link:\n* [Initial weights](https://pan.baidu.com/s/1EUfmEAyUn6NdBbJ7Pq8C_Q), code:4y69\n* [Pre-trained model](https://pan.baidu.com/s/1R05swgfBVpXSscVI07mxpg), code:9koj\n```\nunzip Initial_weights.zip \nunzip Pre-trained model.zip \n```"
      },
      "source": "https://raw.githubusercontent.com/zzdxjtu/S-cuda/main/README.md",
      "technique": "header_analysis"
    }
  ]
}