{
  "application_domain": [
    {
      "confidence": 4.07,
      "result": {
        "type": "String",
        "value": "Audio"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/yukiteruono/pbsim2"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-06-20T08:25:30Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-28T06:16:33Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PBSIM2: a simulator for long read sequencers with a novel generative model of quality scores"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9441089952411507,
      "result": {
        "type": "Text_excerpt",
        "value": "We have developed a long reads simulater (called PBSIM) in which\nsampling-based and model-based simulations are implemented. \nPBSIM simulates Continuous Long Reads (CLRs) of PacBio, and Nanopore reads. \nIn the example above, simulated reads are randomly sampled from a reference\nsequence (\"sample/sample.fasta\") and differences (errors) are introduced\ninto simulated reads. Coverage depth is 20, and quality scores are generated\nby FIC-HMM of P6C4 chemistry. The read length and accuracy reads are determined\nbased on our model. \nIf the reference sequence is a multi-FASTA file, Output files for simulated\nreads are created for each FASTA. three output files are created for each FASTA.\n\"sd\\_0001.ref\": a single-FASTA file which is copied from the reference sequence.\n\"sd\\_0001.fastq\": a simulated read dataset in the FASTQ format.\n\"sd\\_0001.maf\": a list of alignments between the reference sequence and\nsimulated reads in the MAF format. \nIn the sampling-based simulation, read length and quality score are the same\nas those of a read sampled randomly from the real read dataset\n(\"sample/sample.fastq\"). \nIf you want to create several simulated data with different coverage depths\nusing the same real read dataset, you would be better to use \n--sample-profile-id option as below. You can skip parsing the same dataset. \nFor each read, the length is randomly drawn from the gamma distribution\nwith given mean and standard deviation. \nThe exponential function which is fit to read accuracy distribution is\nutilized to simulate with given mean. For each read, the accuracy is randomly\ndrawn from the simulated distribution. \nErrors from single molecule sequencing which generates long reads are\nconsidered to be stochastical. However, it has been reported that basecalling\nqualities of PacBio sequencers are not uniform, and low quality regions\nare sometimes observed in reads. To simulate these low quality regions,\nthe non-uniformity is generated by FIC-HMM trained using real long reads.\n\"data/\\*.model\" are FIC-HMM for each chemistry of PacBio and Nanopore. \nSimulated reads are randomly sampled from a reference sequence.\nThe percentage of both directions of reads is same. Differences (errors)\nare introduced into the simulated reads as follows:\nFor each position of the read, all error types (substitution, insertion and\ndeletion) are introduced according to quality score at that position. \nAll error rates are calculated from quality score and the ratio of error types\ngiven by the user. With regards to a deletion, there is no quality score \nfor the deletion itself; thus the quality score of the 5\u2019neighbor is used. \nWe observed that inserted nucleotides are often the same as their following \nnucleotides. According to this bias, half of the inserted nucleotides are \nchosen to be the same as their following nucleotides, and the other half\nare randomly chosen. \nBy setting minimum and maximum of read length, and range of that chosen\nfrom the distribution model can be restricted. Note that mean and standard\ndeviation of the chosen read length are influenced by this restriction.\nMinimum and maximum of read accuracy are determined by mean of accuracy. \nThe lengths and quality scores of reads are simulated by randomly sampling\nthem from real reads provided by the user. Subsequently, their nucleotide\nsequences are simulated by the same way as the model-based simulation.\nThe restriction of read length and accuracy can be set by the options. \nA real reads in FASTQ format is required for sampling-based simulation,\nspecified with the --sample-fastq option. FASTQ format must be Sanger\nstandard (fastq-sanger). \nIf a reference sequence file is multi-FASTA format, simulated datasets\nare generated for each reference sequence numbered sequentially.\nThree output files are created for each reference sequence. \n\"sd\\_<num>.ref\": a single-FASTA file which is copied from the reference\nsequence.\n\"sd\\_<num>.fastq\": a simulated read dataset in the FASTQ format.\n\"sd\\_<num>.maf\": a list of alignments between the reference sequence and\nthe simulated reads in the MAF format. \n\"sd\" is prefix which can be specified with the --prefix option. \n\n7. FIC-HMM of quality code \n\"data/\\*.model\" are FIC-HMM for each chemistry of PacBio and Nanopore. \nWe utilized HMM with the latest model selection criteria called factorised\ninformation criteria (FIC-HMM)(Hamada et al., 2015). The model were trained\nfor each read accuracy of each chemistry. For read accuracy with insufficient\ntraining data, constant quality scores that match the accuracy were used. \n\n8. Runtime and memory \nWhen a coverage depth is 100x and a length of reference sequence is about 10M,\nPBSIM generates simulated dataset in several minutes. The runtime is roughly\nproportional to the coverage depth and the length of reference sequence. \nPBSIM requires memory of the length of reference sequence plus several mega\nbytes.  \nSimulation of sequencing error is performed using nucleotide sequences input \nby the user as templates. \nPBSIM2 uses model-based simulation to introduce errors into the templates. \nYou can use the error rate options, but not the length options. Also, \nthe --depth option is disabled and the template is sequenced once. \n"
      },
      "source": "https://raw.githubusercontent.com/yukiteruono/pbsim2/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/yukiteruono/pbsim2/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 15
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/yukiteruono/pbsim2/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "yukiteruono/pbsim2"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/yukiteruono/pbsim2/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9881442683759699,
      "result": {
        "type": "Text_excerpt",
        "value": "\"sd\" is prefix which can be specified with the --prefix option. \n"
      },
      "source": "https://raw.githubusercontent.com/yukiteruono/pbsim2/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8401043386868998,
      "result": {
        "type": "Text_excerpt",
        "value": "\n2. Run PBSIM with the sample data \n    pbsim --depth 20\n          --hmm_model data/P6C4.model\n          sample/sample.fasta \n    pbsim --depth 40\n          --prefix depth40\n          --sample-profile-id pf1\n          sample/sample.fasta \nInput file must be a text file. \n    pbsim --template-fasta templates(FASTA format)\n          --hmm_model data/P6C4.model \n"
      },
      "source": "https://raw.githubusercontent.com/yukiteruono/pbsim2/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/yukiteruono/pbsim2/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "GNU General Public License v2.0",
        "spdx_id": "GPL-2.0",
        "type": "License",
        "url": "https://api.github.com/licenses/gpl-2.0",
        "value": "https://api.github.com/licenses/gpl-2.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "pbsim2"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "yukiteruono"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 77239,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 42622,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 35550,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 2461,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "M4",
        "size": 729,
        "type": "Programming_language",
        "value": "M4"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/yukiteruono/pbsim2/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 16:06:15",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 69
      },
      "technique": "GitHub_API"
    }
  ]
}