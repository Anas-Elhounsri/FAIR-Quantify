{
  "application_domain": [
    {
      "confidence": 20.62,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/anands-repo/hello"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-02-07T06:56:59Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-12T17:42:35Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DNN-based small variant caller"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9723837907941791,
      "result": {
        "original_header": "HELLO: A DNN-based small variant caller",
        "type": "Text_excerpt",
        "value": "HELLO is a Deep Neural Network-based small variant caller that can call variants for Illumina, PacBio, and hybrid Illumina-PacBio settings. HELLO uses customized Deep Neural Networks which provide accurate variant calls with relatively small model size.\n \n"
      },
      "source": "https://raw.githubusercontent.com/anands-repo/hello/devel_bugfix/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9625727075739452,
      "result": {
        "original_header": "Information regarding HELLO's methodology",
        "type": "Text_excerpt",
        "value": "Older methodologies used in a prior version of HELLO, with only support for hybrid variant calling, is described at https://www.biorxiv.org/content/10.1101/2020.03.23.004473v1. \nThe models released in this package (including models for hybrid variant calling) do not follow methodologies described in the bioRxiv article, but follow the methodologies described in the paper published at BMC Bioinformatics, which are significantly different from the bioRxiv version.\n \n"
      },
      "source": "https://raw.githubusercontent.com/anands-repo/hello/devel_bugfix/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/anands-repo/hello/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/anands-repo/hello/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "anands-repo/hello"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "HELLO: A DNN-based small variant caller"
      },
      "source": "https://raw.githubusercontent.com/anands-repo/hello/devel_bugfix/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/anands-repo/hello/devel_bugfix/models/copy_models.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.9990832282839859,
      "result": {
        "original_header": "Information regarding HELLO's methodology",
        "type": "Text_excerpt",
        "value": "Older methodologies used in a prior version of HELLO, with only support for hybrid variant calling, is described at https://www.biorxiv.org/content/10.1101/2020.03.23.004473v1. \n"
      },
      "source": "https://raw.githubusercontent.com/anands-repo/hello/devel_bugfix/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/anands-repo/hello/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Copyright \u00a9 2020, University of Illinois at Urbana-Champaign. All rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/anands-repo/hello/devel_bugfix/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "hello"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "anands-repo"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 849927,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 110193,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 2567,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 966,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/anands-repo/hello/devel_bugfix/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 03:44:23",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 13
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Information regarding HELLO's code and usage",
        "type": "Text_excerpt",
        "value": "(NEW) PacBio haplotagged model is available in models directory. The source code for running the model is in hello_dev.tar.gz, pending merge.\n\n*NOTE*: By default HELLO calls variants for chromosomes 1-22 only. To change this behavior, please use the --chromosomes option.\n\nThe repository contains files for HELLO - a small variant caller that is designed for running standalone and hybrid small variant calling.\n\nThe following Docker image may be used with the tool. These images may not be final, and we will update here when the images are updated.\n\n`docker pull oddjobs/hello_image.x86_64`\n\nTo build the tool, please run\n\n```\ncmake .\nmake -j 12\n```\n\nNOTE: To properly download models, git-lfs needs to be installed. Once installed, please do `git lfs pull` inside the git repo.\n\nTo run Illumina variant calling, please use the following command\n\n```\npython python/call.py \\\n    --ibam $bam \\\n    --ref $REF \\\n    --network models/illumina_multi_coverage_mapq_threshold_hg002_continue_run16.wrapper.dnn \\\n    --num_threads $NUM_THREADS \\\n    --workdir $workdir --mapq_threshold 5\n```\n\n\nTo run PacBio variant calling, please use the following command (`--include_hp` to be added for haplotagged PacBio reads).\n\n```\npython python/call.py \\\n    --pbam $bam \\\n    --ref $REF \\\n    --network models/pacbio_multi_coverage_mapq_threshold_hg00216.wrapper.dnn \\\n    --num_threads $NUM_THREADS \\\n    --workdir $workdir --mapq_threshold 5\n```\n\nTo run hybrid Illumina-PacBio variant calling, please use the following command\n\n```\npython python/call.py \\\n    --ibam $ibam \\\n    --pbam $pbam \\\n    --ref $ref \\\n    --network models/no_ensemble_multi_coverage_mapq_threshold_hg002_continued17.wrapper.dnn \\\n    --num_threads $NUM_THREADS \\\n    --workdir $workdir \\\n    --mapq_threshold 5 \\\n    --reconcilement_size 0\n```\n\nThe output VCF file may be found in `$workdir/results.mean.vcf`.\n\nErrata: Currently, the VCF output by the tool has a syntax error with the INFO field. This may be fixed with the following code\n```\nfix_vcf() {\n    correct_string=\"##INFO=<ID=MixtureOfExpertPrediction,Type=String,Number=1,Description=\\\"Mean predictions from experts\\\">\"\n    cat $1 | sed \"s?##INFO=<ID=MixtureOfExpertPrediction,Description=\\\"Mean predictions from experts\\\"?$correct_string?g\" > $2\n}\n\nfix_vcf $workdir/results.mean.vcf $workdir/results.mean.corrected.vcf\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/anands-repo/hello/devel_bugfix/README.md",
      "technique": "header_analysis"
    }
  ]
}