{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Cite",
        "parent_header": [
          "ZGA - prokaryotic genome assembly and annotation pipeline"
        ],
        "type": "Text_excerpt",
        "value": "It's a great pleasure to know, that your software is useful. Please cite ZGA:\n\nKorzhenkov A. 2021. ZGA: a flexible pipeline for read processing, de novo assembly and annotation of prokaryotic genomes. bioRxiv https://doi.org/10.1101/2021.04.27.441618\n\nAnd of course tools it's using:\n\nChen, S., Zhou, Y., Chen, Y., & Gu, J. (2018). fastp: an ultra-fast all-in-one FASTQ preprocessor. Bioinformatics, 34(17), i884-i890. https://doi.org/10.1093/bioinformatics/bty560\n\nBushnell, B., Rood, J., & Singer, E. (2017). BBMerge\u2013accurate paired shotgun read merging via overlap. PloS one, 12(10). https://doi.org/10.1371/journal.pone.0185056\n\nBankevich, A., Nurk, S., Antipov, D., Gurevich, A. A., Dvorkin, M., Kulikov, A. S., ... & Pyshkin, A. V. (2012). SPAdes: a new genome assembly algorithm and its applications to single-cell sequencing. Journal of computational biology, 19(5), 455-477. https://dx.doi.org/10.1089/cmb.2012.0021\n\nWick, R. R., Judd, L. M., Gorrie, C. L., & Holt, K. E. (2017). Unicycler: resolving bacterial genome assemblies from short and long sequencing reads. PLoS computational biology, 13(6), e1005595. https://doi.org/10.1371/journal.pcbi.1005595\n\nVaser, R., Sovi\u0107, I., Nagarajan, N., & \u0160iki\u0107, M. (2017). Fast and accurate de novo genome assembly from long uncorrected reads. Genome research, 27(5), 737-746. https://genome.cshlp.org/content/27/5/737.full\n\nLi, D., Liu, C-M., Luo, R., Sadakane, K., and Lam, T-W., (2015) MEGAHIT: An ultra-fast single-node solution for large and complex metagenomics assembly via succinct de Bruijn graph. Bioinformatics, doi: 10.1093/bioinformatics/btv033 https://doi.org/10.1093/bioinformatics/btv033\n\nLi, H. (2018). Minimap2: pairwise alignment for nucleotide sequences. Bioinformatics, 34:3094-3100. https://dx.doi.org/10.1093/bioinformatics/bty191\n\nKolmogorov, M., Yuan, J., Lin, Y., & Pevzner, P. A. (2019). Assembly of long, error-prone reads using repeat graphs. Nature biotechnology, 37(5), 540-546. https://doi.org/10.1038/s41587-019-0072-8\n\nParks, D. H., Imelfort, M., Skennerton, C. T., Hugenholtz, P., & Tyson, G. W. (2015). CheckM: assessing the quality of microbial genomes recovered from isolates, single cells, and metagenomes. Genome research, 25(7), 1043-1055. https://dx.doi.org/10.1101/gr.186072.114\n\nSchwengers O., Jelonek L., Dieckmann M. A., Beyvers S., Blom J., Goesmann A. (2021). Bakta: rapid and standardized annotation of bacterial genomes via alignment-free sequence identification. Microbial Genomics, 7(11). https://doi.org/10.1099/mgen.0.000685\n\n\nCamacho, C., Coulouris, G., Avagyan, V. et al. (2009). BLAST+: architecture and applications. BMC Bioinformatics 10, 421. https://doi.org/10.1186/1471-2105-10-421\n\nCock, P. J., Antao, T., Chang, J. T., Chapman, B. A., Cox, C. J., Dalke, A., ... & De Hoon, M. J. (2009). Biopython: freely available Python tools for computational molecular biology and bioinformatics. Bioinformatics, 25(11), 1422-1423. https://doi.org/10.1093/bioinformatics/btp163\n\nO\u2019Connell, J., et al. (2015) NxTrim: optimized trimming of Illumina mate pair reads. Bioinformatics 31(12), 2035-2037. https://doi.org/10.1093/bioinformatics/btv057\n\nOndov, B.D., Treangen, T.J., Melsted, P. et al. Mash: fast genome and metagenome distance estimation using MinHash. Genome Biol 17, 132 (2016). https://doi.org/10.1186/s13059-016-0997-x\n"
      },
      "source": "https://raw.githubusercontent.com/laxeye/zga/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/laxeye/zga"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-04-27T02:55:53Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-11T15:36:13Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ZGA prokaryotic genome assembly and annotation pipeline"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9946975307958305,
      "result": {
        "original_header": "Main Features",
        "type": "Text_excerpt",
        "value": "* Wide range of supported reads: Illumina, Oxford Nanopore, PacBio, BGI.\n* Short read multi-threaded processing: QC, filtering, trimming, overlapped pairs merging.\n* Assemblies from short reads, long reads or hybrid assembly using modern and powerful assemblers: [SPAdes](http://cab.spbu.ru/software/spades/), [Unicycler](https://github.com/rrwick/Unicycler/), [Flye](https://github.com/fenderglass/Flye) or [MEGAHIT](https://github.com/voutcn/megahit).\n* Quality control of assembly: completeness and contamination assessment with [CheckM](https://github.com/Ecogenomics/CheckM) as well as PhiX detection.\n* Fast annotation of bacterial and archeal genome assemblies with [bakta](https://github.com/oschwengers/bakta).\n* No High Performance Computing needed. The pipeline works on laptop or desktop.\n \n"
      },
      "source": "https://raw.githubusercontent.com/laxeye/zga/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8906043665439318,
      "result": {
        "original_header": "Known issues and limitations",
        "type": "Text_excerpt",
        "value": "ZGA is in the stage of active development. \nKnown issues and limitations: \nDon't hesitate to report bugs or features!\n \n"
      },
      "source": "https://raw.githubusercontent.com/laxeye/zga/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "bakta database download",
        "parent_header": [
          "ZGA - prokaryotic genome assembly and annotation pipeline",
          "Installation",
          "Installing dependencies"
        ],
        "type": "Text_excerpt",
        "value": "After installation you need to download bakta database, please read [detailed instructions](https://github.com/oschwengers/bakta?tab=readme-ov-file#database-download). Shortly you need to run:\n\n`bakta_db download --output <output-path> --type [light|full]`\n\n"
      },
      "source": "https://raw.githubusercontent.com/laxeye/zga/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/laxeye/zga/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/laxeye/zga/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "laxeye/zga"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ZGA - prokaryotic genome assembly and annotation pipeline"
      },
      "source": "https://raw.githubusercontent.com/laxeye/zga/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/laxeye/zga/master/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/laxeye/zga/master/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "ZGA - prokaryotic genome assembly and annotation pipeline"
        ],
        "type": "Text_excerpt",
        "value": "ZGA is written in Python and tested with Python 3.8 - 3.10.\n"
      },
      "source": "https://raw.githubusercontent.com/laxeye/zga/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Install with conda",
        "parent_header": [
          "ZGA - prokaryotic genome assembly and annotation pipeline",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "[![Anaconda latest release](https://anaconda.org/bioconda/zga/badges/latest_release_date.svg)](https://anaconda.org/bioconda/zga/)\n\nThe simplest way to install ZGA and all dependencies is **conda**:\n\n1. You need to install conda, e.g. [**miniconda**](https://conda.io/en/latest/miniconda.html). Python 3.8 or newer is preferred.\n\n2. After installation You should add channels - the conda's software sources:  \n`conda config --add channels bioconda`  \n`conda config --add channels conda-forge`\n\n3. At the end You should install ZGA to an existing active environment (Python 3.8+):  \n`conda install zga`  \nor create a fresh environment and activate it:  \n`conda create -n zga zga`  \n`conda activate zga`\n\nIf You have troubles with bioconda channel try to use my personal channel https://anaconda.org/laxeye/zga `conda install -c laxeye zga`\n"
      },
      "source": "https://raw.githubusercontent.com/laxeye/zga/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Install from PyPI",
        "parent_header": [
          "ZGA - prokaryotic genome assembly and annotation pipeline",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "[![Downloads](https://pepy.tech/badge/zga/month)](https://pypi.python.org/pypi/zga)\n\nRun `pip install zga`. Biopython is the only one dependency installed from PyPI. All other dependencies You should install manually or using **conda** as mentioned above. CheckM is available on **PyPi**, but it's easier to install it using **conda**.\n"
      },
      "source": "https://raw.githubusercontent.com/laxeye/zga/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing dependencies",
        "parent_header": [
          "ZGA - prokaryotic genome assembly and annotation pipeline",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "ZGA uses several software and libraries including:\n\n* [fastp](https://github.com/OpenGene/fastp)\n* [BBmap](https://sourceforge.net/projects/bbmap/)\n* [NxTrim](https://github.com/sequencing/NxTrim)\n* [mash](https://mash.readthedocs.io/en/latest/)\n* [SPAdes](http://cab.spbu.ru/software/spades/) (>= 3.12 to support merged paired-end reads, >= 3.5.0 to support Nanopore reads)\n* [Unicycler](https://github.com/rrwick/Unicycler/)\n* [Flye](https://github.com/fenderglass/Flye) >= 2.6\n* [MEGAHIT](https://github.com/voutcn/megahit)\n* [minimap2](https://github.com/lh3/minimap2/)\n* [racon](https://github.com/lbcb-sci/racon)\n* [CheckM](https://github.com/Ecogenomics/CheckM) >= 1.2.1\n* [BioPython](https://biopython.org/)\n* [NCBI BLAST+](https://blast.ncbi.nlm.nih.gov/Blast.cgi)\n* [bakta](https://github.com/oschwengers/bakta)\n\nYou may install all dependencies separately using **conda**. It's highly recommended to create a new conda environment:\n\n`conda create -n zga \"python>=3.8\" fastp \"spades>=3.12\" unicycler checkm-genome bakta bbmap blast biopython nxtrim \"mash>=2\" flye minimap2 racon \"samtools>=1.9\" megahit`\n\nand activate it\n\n`conda activate zga`\n\nOtherwise you may install dependencies to existing conda environment:\n\n`conda install \"python>=3.8\" fastp \"spades>=3.12\" unicycler checkm-genome bakta bbmap blast biopython nxtrim \"mash>=2\" flye minimap2 racon \"samtools>=1.9\" megahit`\n\nOf course, it's possible to use *another ways* even compile all tools from source code. In this case you should check if binaries are in your '$PATH' variable.\n"
      },
      "source": "https://raw.githubusercontent.com/laxeye/zga/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9279714277925162,
      "result": {
        "original_header": "Known issues and limitations",
        "type": "Text_excerpt",
        "value": "Don't hesitate to report bugs or features!\n \n"
      },
      "source": "https://raw.githubusercontent.com/laxeye/zga/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/laxeye/zga/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "BSD 3-Clause \"New\" or \"Revised\" License",
        "spdx_id": "BSD-3-Clause",
        "type": "License",
        "url": "https://api.github.com/licenses/bsd-3-clause",
        "value": "https://api.github.com/licenses/bsd-3-clause"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Copyright (c) 2020, Aleksei Korzhenkov All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n3. Neither the name of the NRC \"Kurchatov Institute\" nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
      },
      "source": "https://raw.githubusercontent.com/laxeye/zga/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "zga"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "laxeye"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 46276,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 548,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/laxeye/zga/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://mash.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/laxeye/zga/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "laxeye",
          "type": "User"
        },
        "date_created": "2024-09-11T15:35:36Z",
        "date_published": "2024-09-13T10:29:36Z",
        "description": "+ DFAST replaced with bakta\r\n+ Python 3.8+ required\r\n+ pyproject.toml added",
        "html_url": "https://github.com/laxeye/zga/releases/tag/v0.1.1",
        "name": "ZGA ver. 0.1.1",
        "release_id": 174931630,
        "tag": "v0.1.1",
        "tarball_url": "https://api.github.com/repos/laxeye/zga/tarball/v0.1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/laxeye/zga/releases/174931630",
        "value": "https://api.github.com/repos/laxeye/zga/releases/174931630",
        "zipball_url": "https://api.github.com/repos/laxeye/zga/zipball/v0.1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "laxeye",
          "type": "User"
        },
        "date_created": "2023-02-13T15:40:20Z",
        "date_published": "2023-02-13T15:51:05Z",
        "description": "+ Short reads normalization by k-mer count (BBNorm)\r\n+ Processed reads are compressed with pigz (if installed) or gzip, while intermediate still in plain FASTQ\r\n+ Providing custom configuration to DFAST\r\n+ Dockerfile added.\r\n+ MEGAHIT assembler was added\r\n+ BBDuk extra options avalaible with--bbduk-extra\r\n+ BBMerge extra options avalaible with--bbmerge-extra\r\n* Merging of paired-end reads (BBmerge) is now optional\r\n- Arguments --bbmerge-extend, --bbmerge-extend-kmer and --bbmerge-trim for BBMerge were removed.",
        "html_url": "https://github.com/laxeye/zga/releases/tag/v0.1.0",
        "name": "ZGA ver. 0.1.0",
        "release_id": 92236878,
        "tag": "v0.1.0",
        "tarball_url": "https://api.github.com/repos/laxeye/zga/tarball/v0.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/laxeye/zga/releases/92236878",
        "value": "https://api.github.com/repos/laxeye/zga/releases/92236878",
        "zipball_url": "https://api.github.com/repos/laxeye/zga/zipball/v0.1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "laxeye",
          "type": "User"
        },
        "date_created": "2021-02-20T13:09:38Z",
        "date_published": "2021-02-20T13:13:26Z",
        "description": "+ Repairing of paired-end read files with different read count (BBmap)\r\n+ run_external() modified",
        "html_url": "https://github.com/laxeye/zga/releases/tag/v0.0.9",
        "name": "ZGA ver. 0.0.9",
        "release_id": 38372964,
        "tag": "v0.0.9",
        "tarball_url": "https://api.github.com/repos/laxeye/zga/tarball/v0.0.9",
        "type": "Release",
        "url": "https://api.github.com/repos/laxeye/zga/releases/38372964",
        "value": "https://api.github.com/repos/laxeye/zga/releases/38372964",
        "zipball_url": "https://api.github.com/repos/laxeye/zga/zipball/v0.0.9"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "laxeye",
          "type": "User"
        },
        "date_created": "2020-10-26T19:26:51Z",
        "date_published": "2020-10-26T19:37:17Z",
        "description": "+ Multiple libraries of the same type supported for SPAdes and Flye\r\n+ Read correction with tadpole.sh (from BBmap)\r\n+ Genome assembly stats",
        "html_url": "https://github.com/laxeye/zga/releases/tag/v0.0.8",
        "name": "ZGA ver. 0.0.8",
        "release_id": 33075785,
        "tag": "v0.0.8",
        "tarball_url": "https://api.github.com/repos/laxeye/zga/tarball/v0.0.8",
        "type": "Release",
        "url": "https://api.github.com/repos/laxeye/zga/releases/33075785",
        "value": "https://api.github.com/repos/laxeye/zga/releases/33075785",
        "zipball_url": "https://api.github.com/repos/laxeye/zga/zipball/v0.0.8"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "laxeye",
          "type": "User"
        },
        "date_created": "2020-08-09T09:48:00Z",
        "date_published": "2020-08-09T09:51:55Z",
        "description": "* FastQC replaced with fastp\r\n* fastq-mcf (from ea-utils) replaced with bbduk.sh (from BBmap)\r\n* conda package available",
        "html_url": "https://github.com/laxeye/zga/releases/tag/v0.0.7",
        "name": "ZGA ver. 0.0.7",
        "release_id": 29485051,
        "tag": "v0.0.7",
        "tarball_url": "https://api.github.com/repos/laxeye/zga/tarball/v0.0.7",
        "type": "Release",
        "url": "https://api.github.com/repos/laxeye/zga/releases/29485051",
        "value": "https://api.github.com/repos/laxeye/zga/releases/29485051",
        "zipball_url": "https://api.github.com/repos/laxeye/zga/zipball/v0.0.7"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing dependencies",
        "parent_header": [
          "ZGA - prokaryotic genome assembly and annotation pipeline",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "ZGA uses several software and libraries including:\n\n* [fastp](https://github.com/OpenGene/fastp)\n* [BBmap](https://sourceforge.net/projects/bbmap/)\n* [NxTrim](https://github.com/sequencing/NxTrim)\n* [mash](https://mash.readthedocs.io/en/latest/)\n* [SPAdes](http://cab.spbu.ru/software/spades/) (>= 3.12 to support merged paired-end reads, >= 3.5.0 to support Nanopore reads)\n* [Unicycler](https://github.com/rrwick/Unicycler/)\n* [Flye](https://github.com/fenderglass/Flye) >= 2.6\n* [MEGAHIT](https://github.com/voutcn/megahit)\n* [minimap2](https://github.com/lh3/minimap2/)\n* [racon](https://github.com/lbcb-sci/racon)\n* [CheckM](https://github.com/Ecogenomics/CheckM) >= 1.2.1\n* [BioPython](https://biopython.org/)\n* [NCBI BLAST+](https://blast.ncbi.nlm.nih.gov/Blast.cgi)\n* [bakta](https://github.com/oschwengers/bakta)\n\nYou may install all dependencies separately using **conda**. It's highly recommended to create a new conda environment:\n\n`conda create -n zga \"python>=3.8\" fastp \"spades>=3.12\" unicycler checkm-genome bakta bbmap blast biopython nxtrim \"mash>=2\" flye minimap2 racon \"samtools>=1.9\" megahit`\n\nand activate it\n\n`conda activate zga`\n\nOtherwise you may install dependencies to existing conda environment:\n\n`conda install \"python>=3.8\" fastp \"spades>=3.12\" unicycler checkm-genome bakta bbmap blast biopython nxtrim \"mash>=2\" flye minimap2 racon \"samtools>=1.9\" megahit`\n\nOf course, it's possible to use *another ways* even compile all tools from source code. In this case you should check if binaries are in your '$PATH' variable.\n"
      },
      "source": "https://raw.githubusercontent.com/laxeye/zga/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Operating systems requirements",
        "parent_header": [
          "ZGA - prokaryotic genome assembly and annotation pipeline",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "ZGA was tested on Ubuntu 18.04, 19.10, 20.04, 22.04 and EndeavourOS. Most probably any modern 64-bit Linux distribuition is suitable.\n\nYour feedback on other OS is welcome!\n"
      },
      "source": "https://raw.githubusercontent.com/laxeye/zga/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 17:56:25",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 11
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Get source from Github",
        "parent_header": [
          "ZGA - prokaryotic genome assembly and annotation pipeline",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "You can get ZGA by cloning from the repository with `git clone https://github.com/laxeye/zga.git` or by downloading an archive. After downloading enter the directory `cd zga` and run `python3 setup.py install`.\n\nDon't forget to install dependecies (see bellow).\n"
      },
      "source": "https://raw.githubusercontent.com/laxeye/zga/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "ZGA - prokaryotic genome assembly and annotation pipeline"
        ],
        "type": "Text_excerpt",
        "value": "Run `zga -h` to get a help message.\n"
      },
      "source": "https://raw.githubusercontent.com/laxeye/zga/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Pipeleine steps",
        "parent_header": [
          "ZGA - prokaryotic genome assembly and annotation pipeline",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "ZGA includes several steps:\n\n1. Read quality check ('readqc')\n2. Read processing ('preprocessing')\n3. Genome assembling ('assembling')\n4. Genome polishing ('polishing')\n5. Genome quality assessment ('check_genome')\n6. Genome annotation ('annotation')\n\nYou may start from any step and finish at any step providing arguments `-s` or `--first-step` and `-l` or `--last-step` followed by step designation (in brackets in the list above).\n\nE.g. if You like to perform read processing, genome assembling and genome polishing You should run\n\n`zga --first-step preprocessing --last-step polishing ...`\n"
      },
      "source": "https://raw.githubusercontent.com/laxeye/zga/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Input files",
        "parent_header": [
          "ZGA - prokaryotic genome assembly and annotation pipeline",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "ZGA may use unprocessed or processed sequencing reads from different platforms as well as genome assemblies to perform assembly polishing, assembly quality assessment and assembly annotation. FASTQ format gzipped or not is required for sequencing reads. Paired-end reads shoul be provided in separate files, not interleaved. Sequencing reads should be provided as space separated list after corresponding argument:\n\n`-1` or `--pe-1` for forward paired-end reads (Illumina, BGI)  \n`-2` or `--pe-2` for reverse paired-end reads  \n`-S` or `--single-end` for unpaired short reads  \n`--pe-merged` for merged overlapping paired-end reads (if You performed merging earlier)  \n`--mp-1` for first mate-pair reads, RF orientation is supposed  \n`--mp-2` for second mate-pair reads  \n`--pacbio` for PacBio single-end sequencing reads  \n`--nanopore` for Oxford Nanopore sequencing reads  \n\nWhen `bbduk.sh` (short read trimming tool) throws an exception ZGA tries to repair reads with `repair.sh` (from BBMap).\n"
      },
      "source": "https://raw.githubusercontent.com/laxeye/zga/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Examples",
        "parent_header": [
          "ZGA - prokaryotic genome assembly and annotation pipeline",
          "Usage",
          "Input files"
        ],
        "type": "Text_excerpt",
        "value": "`zga -1 Raw.R1.fq.gz -2 Raw.R2.fq.gz` unprocessed paired-end reads  \n`zga -1 Unmerged_1.fq -2 Unmerged_2.fq --pe-merged Merged.fq` reads after processing (overlapping reads merging)  \n`zga -1 Lib1.R1.fq.gz Lib2.R1.fq -2 Lib1.R2.fq Lib2.R2.fq` combination of reads from two sequencing libraries  \n"
      },
      "source": "https://raw.githubusercontent.com/laxeye/zga/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Output",
        "parent_header": [
          "ZGA - prokaryotic genome assembly and annotation pipeline",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "ZGA produces up to 4 sub-folders in output folder:\n\n* **readQC** - results of reaq quality control with *fastp*,\n* **reads** - processed reads,\n* **assembly** - folder produced by genomic assembler,\n* **annotation** - annotated genome.\n\nLog-file *zga.log* is available in the output folder.\n"
      },
      "source": "https://raw.githubusercontent.com/laxeye/zga/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage examples",
        "parent_header": [
          "ZGA - prokaryotic genome assembly and annotation pipeline",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Perform all steps: read qc, read trimming and merging, assembly, CheckM assesment with default (bacterial) marker set, bakta annotation and use 4 CPU threads where possible:\n\n`zga -1 R1.fastq.gz -2 R2.fastq.gz --bbmerge --threads 4 -o my_assembly`\n\nAssemble with SPAdes using paired-end and nanopore reads of archaeal genome (CheckM will use archaeal markers) altering memory limit to 16 GB:\n\n`zga -1 R1.fastq.gz -2 R2.fastq.gz --nanopore MiniION.fastq.gz -a spades --threads 4 --memory-limit 16 --domain archaea -o my_assembly`\n\nShort read correction with SPAdes is a computationally expensive step, You may run read-correction with tadpole including `--tadpole-correct` option which is much faster and needs less memory.\n\n`zga --tadpole-correct -1 R1.fastq.gz -2 R2.fastq.gz --threads 4 -o my_assembly`\n\nAssemble long reads with Flye skipping long read polishing and perfom short-read polishing with racon:\n\n`zga -1 R1.fastq.gz -2 R2.fastq.gz --nanopore MiniION.fastq.gz -a flye --threads 4 --domain archaea -o my_assembly --flye-short-polish --flye-skip-long-polish`\n\nAssemble from Nanopore reads using unicycler:\n\n`zga -a unicycler --nanopore MiniION.fastq -o nanopore_assembly`\n\nPerform assesment and annotation of genome assembly with e.g. *Pectobacterium* CheckM marker set:\n\n`zga --first-step check_genome -g pectobacterium_sp.fasta --checkm_rank genus --checkm_taxon Pectobacterium -o my_output_dir`\n\nLet CheckM to infer the right marker set:\n\n`zga --first-step check_genome -g my_genome.fa --checkm_mode lineage -o my_output_dir`\n"
      },
      "source": "https://raw.githubusercontent.com/laxeye/zga/master/README.md",
      "technique": "header_analysis"
    }
  ]
}