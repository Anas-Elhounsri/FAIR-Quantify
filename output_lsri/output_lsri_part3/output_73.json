{
  "application_domain": [
    {
      "confidence": 22.39,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Cite us",
        "parent_header": [
          "SCSilicon"
        ],
        "type": "Text_excerpt",
        "value": "Feng, X., Chen, L. SCSilicon: a tool for synthetic single-cell DNA sequencing data generation. BMC Genomics 23, 359 (2022). [Full text](https://doi.org/10.1186/s12864-022-08566-w)\n"
      },
      "source": "https://raw.githubusercontent.com/xikanfeng2/SCSilicon/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/xikanfeng2/SCSilicon"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-03-22T15:30:19Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-23T15:55:39Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9777137784043674,
      "result": {
        "original_header": "SCSilicon",
        "type": "Text_excerpt",
        "value": "SCSilicon is a tool for synthetic single-cell DNA sequencing data generation. \n"
      },
      "source": "https://raw.githubusercontent.com/xikanfeng2/SCSilicon/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8650268053893732,
      "result": {
        "original_header": "4.1 All parameters in `SCSiliconParams` object",
        "type": "Text_excerpt",
        "value": "* `layout`: string, optional, default: 'SE'.<br>\n    The reads laryout: PE or SE (PD for paired-end and SE for single-end) \n* `threads`: int, optional, default: 1.<br>\n    The number of threads to use for reads generation \n"
      },
      "source": "https://raw.githubusercontent.com/xikanfeng2/SCSilicon/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9605661873888903,
      "result": {
        "original_header": "5. Simulating reads for SNPs using `SNPSimulator` object",
        "type": "Text_excerpt",
        "value": "Once we have a set of parameters we are happy with we can use `SNPSimulator` to simulate samples with SNPs in it. \n ```Python\nsnp_simulator = scs.SNPSimulator()\nsnp_simulator.sim_samples(params)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/xikanfeng2/SCSilicon/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9340407892347755,
      "result": {
        "original_header": "5.1 All parameters in `SNPSimulator` object",
        "type": "Text_excerpt",
        "value": "For each sample, `SNPSimulator` will randomly select a total number of SNPs from dbSNP file and `snp_no` parameter can be used to control this total number.\n \n"
      },
      "source": "https://raw.githubusercontent.com/xikanfeng2/SCSilicon/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8953173076834157,
      "result": {
        "original_header": "5.3 Generating FASTAQ sample",
        "type": "Text_excerpt",
        "value": "`SNPSimulator` object uses the function `sim_samples` to generate FASTQ files for each sample. \n```Python\nsnp_simulator.sim_samples()\n```\nIf you want to simulate `multiple` samples once, you can use the `cell_no` parameter to contorl this.\nBASH2*\nAbove code will simulate 10 samples with FASTQ format once. \n \n"
      },
      "source": "https://raw.githubusercontent.com/xikanfeng2/SCSilicon/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8855346870606139,
      "result": {
        "original_header": "5.4 Output files of `sim_samples` function",
        "type": "Text_excerpt",
        "value": "The `sim_samples` function will generate two output files for each sample in your output directory. \n- `sample{1}-snps.txt`: the SNPs included in this sample. This file can be reagrded as the groud truth for SNP detection software. \n- `sample{1}.fq`: the reads data of this sample with FASTQ format. \n"
      },
      "source": "https://raw.githubusercontent.com/xikanfeng2/SCSilicon/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8645480569755555,
      "result": {
        "original_header": "6. Simulating reads for CNVs using `CNVimulator` object",
        "type": "Text_excerpt",
        "value": "We can use `CNVimulator` to simulate samples with CNVs. \n"
      },
      "source": "https://raw.githubusercontent.com/xikanfeng2/SCSilicon/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9525614156728255,
      "result": {
        "original_header": "6.3 Generating FASTAQ sample",
        "type": "Text_excerpt",
        "value": "`CNVimulator` object also uses the function `sim_samples` to generate FASTQ files for each sample. \n```Python\ncnv_simulator.sim_samples(params)\n```\nThe `seg_no` parameter can be used to control the segments in each chromosome.\nBASH2*\nAbove code will split each chromosome to 8 segments and this is useful for segmentation experiments of single cell CNV detection tools. \nFor multiple-sample simulation, you can use the `cluster_no` parameter to seperate these samples to several clusters.\n```Python\ncnv_simulator.set_params(cluster_no=5)\n\n# or set the parameter when creating the object\ncnv_simulator = scs.SNPSimulator(cluster_no=10)\n\n# generating reads\ncnv_simulator.sim_samples(params)\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/xikanfeng2/SCSilicon/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9746375318143308,
      "result": {
        "original_header": "6.4 Output files of `sim_samples` function",
        "type": "Text_excerpt",
        "value": "- `cnv.csv`: the CNV matrix with cells as rows and bins as columns. This file can be reagrded as the groud truth for CNV detection software. \n- `segments.csv`:  the segments information for each chromosome. This file can be reagrded as the groud truth for segmentation experiments.\n- `clusters.csv`:  the clusters information for each sample. This file can be reagrded as the groud truth for cell cluster experiments.\n- `sample{1}.fq`: the reads data of this sample with FASTQ format. \n"
      },
      "source": "https://raw.githubusercontent.com/xikanfeng2/SCSilicon/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8665295468298994,
      "result": {
        "original_header": "6.5 Visualizing the CNV matrix",
        "type": "Text_excerpt",
        "value": "`CNVimulator` object has the funciton `visualize_cnv_matrix` to draw the heatmap graph for the cnv matrix.\n```Python\ncnv_simulator.visualize_cnv_matrix(out_prefix)\n```\nThis function will save the heatmap with pdf format to the file named as `out_prefix.pdf`. One example of cnv heatmap graph is shown below: \n"
      },
      "source": "https://raw.githubusercontent.com/xikanfeng2/SCSilicon/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9605661873888903,
      "result": {
        "original_header": "7. Simulating reads for SNVs using `SNVSimulator` object",
        "type": "Text_excerpt",
        "value": "Once we have a set of parameters we are happy with we can use `SNVSimulator` to simulate samples with SNVs in it. \n ```Python\nsnv_simulator = scs.SNVSimulator()\nsnv_simulator.sim_samples(params)\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/xikanfeng2/SCSilicon/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9605661873888903,
      "result": {
        "original_header": "8. Simulating reads for Indels using `IndelSimulator` object",
        "type": "Text_excerpt",
        "value": "Once we have a set of parameters we are happy with we can use `IndelSimulator` to simulate samples with Indels in it. \n ```Python\nindel_simulator = scs.IndelSimulator()\nindel_simulator.sim_samples(params)\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/xikanfeng2/SCSilicon/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/xikanfeng2/SCSilicon/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/xikanfeng2/SCSilicon/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "xikanfeng2/SCSilicon"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SCSilicon"
      },
      "source": "https://raw.githubusercontent.com/xikanfeng2/SCSilicon/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/xikanfeng2/SCSilicon/main/overview.png"
      },
      "source": "https://raw.githubusercontent.com/xikanfeng2/SCSilicon/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/xikanfeng2/SCSilicon/main/cnv-heatmap.png"
      },
      "source": "https://raw.githubusercontent.com/xikanfeng2/SCSilicon/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation with pip",
        "parent_header": [
          "SCSilicon",
          "2. Installation"
        ],
        "type": "Text_excerpt",
        "value": "To install with pip, run the following from a terminal:\n```Bash\npip install scsilicon\n```\n"
      },
      "source": "https://raw.githubusercontent.com/xikanfeng2/SCSilicon/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation from Github",
        "parent_header": [
          "SCSilicon",
          "2. Installation"
        ],
        "type": "Text_excerpt",
        "value": "To clone the repository and install manually, run the following from a terminal:\n```Bash\ngit clone https://github.com/xikanfeng2/SCSilicon.git\ncd SCSilicon\npython setup.py install\n```\n"
      },
      "source": "https://raw.githubusercontent.com/xikanfeng2/SCSilicon/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4.2 Getting and setting",
        "parent_header": [
          "SCSilicon",
          "4. `SCSiliconParams` object"
        ],
        "type": "Text_excerpt",
        "value": "If we want to look at the value of parameters, we can extract it using the `get_params` function:\n\n```Python\nparams.get_params()\n\n# console log: {'out_dir': './', 'ref': 'hg19', 'chrom': 'chr20', 'layout': 'PE', 'coverage': 5, 'isize': 260, 'threads': 10}\n```\n\nAlternatively, to give a parameter a new value we can use the `set_params` function:\n\n```Python\nparamss.set_params(ref='hg38', chrom='chr22')\n\n# console log: {'out_dir': './', 'ref': 'hg38', 'chrom': 'chr22', 'layout': 'PE', 'coverage': 5, 'isize': 260, 'threads': 10}\n```\nWe can also set parameters directly when we create new `SCSiliconParams` object:\n\n```Python\nparams = scs.SCSiliconParams(ref='hg38', chrom='chr22')\n```\n"
      },
      "source": "https://raw.githubusercontent.com/xikanfeng2/SCSilicon/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "5.2 Getting and setting",
        "parent_header": [
          "SCSilicon",
          "5. Simulating reads for SNPs using `SNPSimulator` object"
        ],
        "type": "Text_excerpt",
        "value": "Similar to `SCSiliconParams`, `SNPSimulator` uses the functions `get_params` and `set_params` to get or set parameters.\n"
      },
      "source": "https://raw.githubusercontent.com/xikanfeng2/SCSilicon/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "6.2 Getting and setting",
        "parent_header": [
          "SCSilicon",
          "6. Simulating reads for CNVs using `CNVimulator` object"
        ],
        "type": "Text_excerpt",
        "value": "Similar to `SCSiliconParams`, `CNVimulator` uses the functions `get_params` and `set_params` to get or set parameters.\n"
      },
      "source": "https://raw.githubusercontent.com/xikanfeng2/SCSilicon/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9866182100761822,
      "result": {
        "original_header": "1. Pre-requirements",
        "type": "Text_excerpt",
        "value": "* python3\n* numpy>=1.16.1\n* pandas>=0.23.4,<0.24\n* tasklogger>=0.4.0\n* wget>=3.2\n* seaborn>=0.11.1\n* matplotlib>=3.0.2\n* [SCSsim](https://github.com/qasimyu/scssim) \nAll python packages will be automatically installed when you install SCSilicon if these packages are not included in your python library. \nTo install SCSsim, please refer to the README of [SCSsim](https://github.com/qasimyu/scssim). \n \n"
      },
      "source": "https://raw.githubusercontent.com/xikanfeng2/SCSilicon/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9533767807206551,
      "result": {
        "original_header": "4.1 All parameters in `SCSiliconParams` object",
        "type": "Text_excerpt",
        "value": "* `out_dir`: string, optional, default: './'.<br>\n    The output directory path\n        \n* `ref`: string, optional, default: hg19.<br>\n    The reference genome version: hg19 or hg38 \n* `coverage`: int, optional, default: 5.<br>\n    The sequencing coverage \n* `verbose`: int or boolean, optional, default: 1.<br>\n    If `True` or `> 0`, print log messages\n \n"
      },
      "source": "https://raw.githubusercontent.com/xikanfeng2/SCSilicon/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.985799284665749,
      "result": {
        "original_header": "5.4 Output files of `sim_samples` function",
        "type": "Text_excerpt",
        "value": "`{1}` is the sample no., like sample1-snps.txt, sample2-snps.txt. \n"
      },
      "source": "https://raw.githubusercontent.com/xikanfeng2/SCSilicon/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9707276785670694,
      "result": {
        "original_header": "6.1 All parameters in `CNVimulator` object",
        "type": "Text_excerpt",
        "value": "* `bin_len`: int, optional, default: 500000.<br>\n    The fixed bin length \n"
      },
      "source": "https://raw.githubusercontent.com/xikanfeng2/SCSilicon/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8337354253703394,
      "result": {
        "original_header": "6.3 Generating FASTAQ sample",
        "type": "Text_excerpt",
        "value": "If you want to simulate `multiple` samples once, you can use the `cell_no` parameter to contorl this.\n```Python\ncnv_simulator.set_params(cell_no=10)\n\n# or set the parameter when creating the object\ncnv_simulator = scs.SNPSimulator(cell_no=10)\n\n# generating reads\ncnv_simulator.sim_samples(params)\n```\nAbove code will simulate 10 samples with FASTQ format once. \n"
      },
      "source": "https://raw.githubusercontent.com/xikanfeng2/SCSilicon/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8288039070795564,
      "result": {
        "original_header": "5.4 Output files of `sim_samples` function",
        "type": "Text_excerpt",
        "value": "The `sim_samples` function will generate two output files for each sample in your output directory. \n"
      },
      "source": "https://raw.githubusercontent.com/xikanfeng2/SCSilicon/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8203483994130186,
      "result": {
        "original_header": "6. Simulating reads for CNVs using `CNVimulator` object",
        "type": "Text_excerpt",
        "value": " ```Python\ncnv_simulator = scs.CNVSimulator()\ncnv_simulator.sim_samples(params)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/xikanfeng2/SCSilicon/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/xikanfeng2/SCSilicon/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Copyright (c) 2020 The Python Packaging Authority\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
      },
      "source": "https://raw.githubusercontent.com/xikanfeng2/SCSilicon/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SCSilicon"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "xikanfeng2"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 38974,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/xikanfeng2/SCSilicon/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-05 23:36:13",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Help",
        "parent_header": [
          "SCSilicon"
        ],
        "type": "Text_excerpt",
        "value": "If you have any questions or require assistance using SCSilicon, please contact us with fxk@nwpu.edu.cn.\n"
      },
      "source": "https://raw.githubusercontent.com/xikanfeng2/SCSilicon/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "3. Quick start",
        "parent_header": [
          "SCSilicon"
        ],
        "type": "Text_excerpt",
        "value": "The following code runs SCSilicon.\n\n```Python\nimport scsilicon as scs\n\n# create SCSiliconParams object\nparams = scs.SCSiliconParams()\n\n#download all necessary reference files. Just run once in the first time and remove this line after the first run.\nscs.download_ref_data(params)\n\n# simulate snp samples\nsnp_simulator = scs.SNPSimulator()\nsnp_simulator.sim_samples(params)\n\n# simulate snv samples\nsnv_simulator = scs.SNVSimulator()\nsnv_simulator.sim_samples(params)\n\n# simulate indel samples\nindel_simulator = scs.IndelSimulator()\nindel_simulator.sim_samples(params)\n\n# simulate cnv samples\ncnv_simulator = scs.CNVSimulator()\ncnv_simulator.sim_samples(params)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/xikanfeng2/SCSilicon/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4.2 Getting and setting",
        "parent_header": [
          "SCSilicon",
          "4. `SCSiliconParams` object"
        ],
        "type": "Text_excerpt",
        "value": "If we want to look at the value of parameters, we can extract it using the `get_params` function:\n\n```Python\nparams.get_params()\n\n# console log: {'out_dir': './', 'ref': 'hg19', 'chrom': 'chr20', 'layout': 'PE', 'coverage': 5, 'isize': 260, 'threads': 10}\n```\n\nAlternatively, to give a parameter a new value we can use the `set_params` function:\n\n```Python\nparamss.set_params(ref='hg38', chrom='chr22')\n\n# console log: {'out_dir': './', 'ref': 'hg38', 'chrom': 'chr22', 'layout': 'PE', 'coverage': 5, 'isize': 260, 'threads': 10}\n```\nWe can also set parameters directly when we create new `SCSiliconParams` object:\n\n```Python\nparams = scs.SCSiliconParams(ref='hg38', chrom='chr22')\n```\n"
      },
      "source": "https://raw.githubusercontent.com/xikanfeng2/SCSilicon/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "5.2 Getting and setting",
        "parent_header": [
          "SCSilicon",
          "5. Simulating reads for SNPs using `SNPSimulator` object"
        ],
        "type": "Text_excerpt",
        "value": "Similar to `SCSiliconParams`, `SNPSimulator` uses the functions `get_params` and `set_params` to get or set parameters.\n"
      },
      "source": "https://raw.githubusercontent.com/xikanfeng2/SCSilicon/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "6.2 Getting and setting",
        "parent_header": [
          "SCSilicon",
          "6. Simulating reads for CNVs using `CNVimulator` object"
        ],
        "type": "Text_excerpt",
        "value": "Similar to `SCSiliconParams`, `CNVimulator` uses the functions `get_params` and `set_params` to get or set parameters.\n"
      },
      "source": "https://raw.githubusercontent.com/xikanfeng2/SCSilicon/main/README.md",
      "technique": "header_analysis"
    }
  ]
}