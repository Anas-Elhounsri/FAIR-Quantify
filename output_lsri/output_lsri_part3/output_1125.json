{
  "application_domain": [
    {
      "confidence": 0.8165594664531349,
      "result": {
        "type": "String",
        "value": "Semantic web"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "format": "cff",
        "type": "File_dump",
        "value": "cff-version: 1.2.0\nmessage: \"If you use this software, please cite it as below.\"\nauthors:\n- family-names: \"K\u00f6ppl\"\n  given-names: \"Dominik\"\n  orcid: \"http://orcid.org/0000-0002-8721-4444\"\ntitle: \"Computing matching statistics with compressed data structures\"\nurl: \"https://github.com/koeppl/phoni\"\npreferred-citation:\n  type: conference-paper\n  authors:\n  - family-names: \"Boucher\"\n    given-names: \"Christina\"\n  - family-names: \"Gagie\"\n    given-names: \"Travis\"\n  - family-names: \"I\"\n    given-names: \"Tomohiro\"\n  - family-names: \"K\u00f6ppl\"\n    given-names: \"Dominik\"\n    orcid: \"http://orcid.org/0000-0002-8721-4444\"\n  - family-names: \"Langmead\"\n    given-names: \"Ben\"\n  - family-names: \"Manzini\"\n    given-names: \"Giovanni\"\n  - family-names: \"Navarro\"\n    given-names: \"Gonzalo\"\n  - family-names: \"Pacheco\"\n    given-names: \"Alejandro\"\n  - family-names: \"Rossi\"\n    given-names: \"Massimiliano\"\n  doi: 10.1109/DCC50243.2021.00027\n  journal: \"Proc. DCC\"\n  start: 193  # First page number\n  end: 202 # Last page number\n  title: \"PHONI: Streamed Matching Statistics with Multi-Genome References\"\n  year: 2021\n"
      },
      "source": "https://raw.githubusercontent.com/koeppl/phoni/phoni/CITATION.cff",
      "technique": "file_exploration"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/koeppl/phoni"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-11-10T00:35:33Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-01-29T08:46:07Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Computing matching statistics with compressed data structures"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.977086475378679,
      "result": {
        "original_header": "PHONI",
        "type": "Text_excerpt",
        "value": "This framework supports the currently memory-friendliest way to compute the matching statistics of a pattern on highly-repetitive texts,\ngiven that the input text is precomputed with the [MONI](https://github.com/maxrossi91/moni) index \n(more precisely, we need all ingredients of MONI except the thresholds). \nWe require the pattern and the text to be available in form of sequences stored in the `.fa` (FASTA) format.\nTo use our solution, you need to have recent `cmake`, `g++`, `zsh`, and `python 3` installed.\n \n"
      },
      "source": "https://raw.githubusercontent.com/koeppl/phoni/phoni/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/koeppl/phoni/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/koeppl/phoni/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "koeppl/phoni"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PHONI"
      },
      "source": "https://raw.githubusercontent.com/koeppl/phoni/phoni/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/koeppl/phoni/phoni/benchmark.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/koeppl/phoni/phoni/readlog.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/koeppl/phoni/phoni/testsuite.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Preparations",
        "parent_header": [
          "PHONI"
        ],
        "type": "Text_excerpt",
        "value": "We need the following python 3 packages for extracting and concatenating `.fa` files:\n```console\n\tpip3 install biopython\n\tpip3 install fastaparser\n\tpip3 install psutil\n```\n\n\n```console\ngit clone --branch phoni https://github.com/koeppl/phoni\n```\n"
      },
      "source": "https://raw.githubusercontent.com/koeppl/phoni/phoni/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Compile",
        "parent_header": [
          "PHONI",
          "Preparations"
        ],
        "type": "Text_excerpt",
        "value": "```console\nmkdir build\ncd build; cmake ..\nmake\n```\n"
      },
      "source": "https://raw.githubusercontent.com/koeppl/phoni/phoni/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Building the index",
        "parent_header": [
          "PHONI",
          "Preparations"
        ],
        "type": "Text_excerpt",
        "value": "To *build* the index we use the command `phoni build` from the build directory.\n\n``` console\nphoni build \\\n-r <filename of the reference> \\\n-t <number of threads> \\\n-g <grammar format> \\\n-f <input file is a fasta file> \\\n```\nFor example, to build the phoni index for the file `yeast.fasta` using 4 `threads` and the `plain` grammar we run from the `build` folder:\n``` conole\npython3 phoni build -r ../data/yeast.fasta -f -t 4 -g plain\n```\n\nThis command will produce `yeast.fasta.phoni` and `yeast.fasta.plain.slp` in the `data` folder, which represent the `phoni` index.\n"
      },
      "source": "https://raw.githubusercontent.com/koeppl/phoni/phoni/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Querying the index",
        "parent_header": [
          "PHONI",
          "Preparations"
        ],
        "type": "Text_excerpt",
        "value": "To *query* the index we use the command `phoni query` from the build directory.\n\n``` console\nphoni ms \\\n-r <filename of the reference> \\\n-p <number of threads> \\\n-g <grammar format> \\\n```\nFor example, to query the phoni index for the file `yeast.fasta` using the `plain` grammar with the pattern `samples.fastq` we run from the `build` folder:\n``` conole\npython3 phoni build -r ../data/yeast.fasta -p ../data/samples.fa -g plain\n```\n\nThis command will produce `samples.fa.positions` and `samples.fa.lengths` in the `data` folder, which represent the matching staistics *positions* and *lengths* of `samples.fa` against `yeast.fasta`, respectively.\n"
      },
      "source": "https://raw.githubusercontent.com/koeppl/phoni/phoni/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Compatibility queries",
        "parent_header": [
          "PHONI",
          "Preparations"
        ],
        "type": "Text_excerpt",
        "value": "To perform the queries using the old *query* command we first have to split the `samples.fa` file using the python tool `splitpattern.py`:\n\n```console\nmkdir data/samples.fa.dir\npython3 splitpattern.py data/samples.fa data/samples.fa.dir\n```\n\nThen we can query `samples.fa` against the `yeast.fasta` index with the plain grammar using the following command:\n\n```console\n./build/test/src/phoni_compatibility data/yeast.fasta -p data/samples.fa -g plain\n```\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/koeppl/phoni/phoni/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "python Tools",
        "parent_header": [
          "PHONI",
          "Preparations"
        ],
        "type": "Text_excerpt",
        "value": " - `prefixpattern.py`: takes the x% prefix of each pattern stored in a `.fa` file and outputs a new `.fa` file to stdout\n - `splitpattern.py`: splits a `.fa` file into individual sequences stored in a directory given as program parameter (we need this for `msfast` as it does not support reading `.fa` files)\n"
      },
      "source": "https://raw.githubusercontent.com/koeppl/phoni/phoni/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Benchmarks",
        "parent_header": [
          "PHONI",
          "Preparations"
        ],
        "type": "Text_excerpt",
        "value": "We provide a script and benchmark files to evaluate PHONI in the setting as described in the paper\n\nChristina Boucher, Travis Gagie, Tomohiro I, Dominik K\u00f6ppl, Ben Langmead, Giovanni Manzini, Gonzalo Navarro, Alejandro Pacheco, Massimiliano Rossi: [PHONI: Streamed Matching Statistics with Multi-Genome References](https://doi.org/10.1109/DCC50243.2021.00027), In proceedings of 2021 Data Compression Conference, pp. 193-202, 2021. \n\nChristina Boucher, Travis Gagie, Tomohiro I, Dominik K\u00f6ppl, Ben Langmead, Giovanni Manzini, Gonzalo Navarro, Alejandro Pacheco, Massimiliano Rossi: PHONI: Streamed Matching Statistics with Multi-Genome References, [arXiv:2011.05610](https://arxiv.org/abs/2011.05610), 11 Nov 2020.\n\nIn our experiments we used the file\n\n - [chr19.1000.fa.xz](http://dolomit.cs.tu-dortmund.de/tudocomp/chr19.1000.fa.xz) as our text dataset, and\n - [chr19.10.fa.xz](http://dolomit.cs.tu-dortmund.de/tudocomp/chr19.10.fa.xz) as our pattern dataset.\n\nWe have a shell script `benchmark.sh` for an automatic benchmark.\nFor this to work, some variables in it has to be set, as this project does not ship with the other matching statistic algorithms, namely\n\n - [MONI](https://github.com/maxrossi91/moni)\n - [msfast](https://github.com/odenas/indexed_ms), and\n - [rrepair](https://github.com/apachecom/rrepair).\n\nmeaning it is necessary to download and compile those projects individually, and the set the corresponding variables in `benchmark.sh` manually\n(more precisely: in the switch-case statement for the hostname in the beginning).\nFinally, the output of `benchmark.sh` can be processed by [sqlplots](https://github.com/koeppl/sqlplot) to generate the plots shown in the paper.\n\nTo compute the naive PHONI variant evaluated in the paper, simple exchange `lceToRBounded` with `lceToR_NaiveBounded` in the file `include/ms/phoni.hpp`.\n"
      },
      "source": "https://raw.githubusercontent.com/koeppl/phoni/phoni/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8469852745138612,
      "result": {
        "original_header": "PHONI",
        "type": "Text_excerpt",
        "value": "We require the pattern and the text to be available in form of sequences stored in the `.fa` (FASTA) format.\nTo use our solution, you need to have recent `cmake`, `g++`, `zsh`, and `python 3` installed.\n \n"
      },
      "source": "https://raw.githubusercontent.com/koeppl/phoni/phoni/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/koeppl/phoni/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "matching-statistics"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 Massimiliano Rossi\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/koeppl/phoni/phoni/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "phoni"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "koeppl"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 115861,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 80011,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 17525,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 12731,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/koeppl/phoni/phoni/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_papers": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/2011.05610](https://arxiv.org/abs/2011.05610), 11 Nov 2020.\n\nIn our experiments we used the file\n\n - [chr19.1000.fa.xz](http://dolomit.cs.tu-dortmund.de/tudocomp/chr19.1000.fa.xz) as our text dataset, and\n - [chr19.10.fa.xz](http://dolomit.cs.tu-dortmund.de/tudocomp/chr19.10.fa.xz) as our pattern dataset.\n\nWe have a shell script `benchmark.sh` for an automatic benchmark.\nFor this to work, some variables in it has to be set, as this project does not ship with the other matching statistic algorithms, namely\n\n - [MONI](https://github.com/maxrossi91/moni)\n - [msfast](https://github.com/odenas/indexed_ms), and\n - [rrepair](https://github.com/apachecom/rrepair).\n\nmeaning it is necessary to download and compile those projects individually, and the set the corresponding variables in `benchmark.sh` manually\n(more precisely: in the switch-case statement for the hostname in the beginning).\nFinally, the output of `benchmark.sh` can be processed by [sqlplots](https://github.com/koeppl/sqlplot) to generate the plots shown in the paper.\n\nTo compute the naive PHONI variant evaluated in the paper, simple exchange `lceToRBounded` with `lceToR_NaiveBounded` in the file `include/ms/phoni.hpp`."
      },
      "source": "https://raw.githubusercontent.com/koeppl/phoni/phoni/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/2011.05610"
      },
      "source": "https://raw.githubusercontent.com/koeppl/phoni/phoni/README.md",
      "technique": "regular_expression"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 03:39:42",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ]
}