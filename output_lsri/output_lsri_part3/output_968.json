{
  "application_domain": [
    {
      "confidence": 0.8051632873772036,
      "result": {
        "type": "String",
        "value": "Graphs"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "`rust-mdbg`: Minimizer-space de Bruijn graphs (mdBG) for whole-genome assembly <br>"
        ],
        "type": "Text_excerpt",
        "value": "* Bar\u0131\u015f Ekim, Bonnie Berger, and Rayan Chikhi, [Minimizer-space de Bruijn graphs: Whole-genome assembly of long reads in minutes on a personal computer](https://www.sciencedirect.com/science/article/pii/S240547122100332X), Cell Systems (2021).\n* Bar\u0131\u015f Ekim, Bonnie Berger, and Rayan Chikhi, [Minimizer-space de Bruijn graphs](https://www.biorxiv.org/content/10.1101/2021.06.09.447586v1), biorXiv preprint (2021).\n```\n@article {mdbg,\n\tauthor = {Ekim, Bar{\\i}{\\c s} and Berger, Bonnie and Chikhi, Rayan},\n\ttitle = {Minimizer-space de Bruijn graphs: Whole-genome assembly of long reads in minutes on a personal computer},\n\tjournal = {Cell Systems},\n\tyear = {2021},\n\tissn = {2405-4712},\n\tdoi = {https://doi.org/10.1016/j.cels.2021.08.009}\n}\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/ekimb/rust-mdbg/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Ekim, Bar{\\i}{\\c s} and Berger, Bonnie and Chikhi, Rayan",
        "doi": "https://doi.org/10.1016/j.cels.2021.08.009",
        "format": "bibtex",
        "title": "Minimizer-space de Bruijn graphs: Whole-genome assembly of long reads in minutes on a personal computer",
        "type": "Text_excerpt",
        "value": "@article{mdbg,\n    doi = {https://doi.org/10.1016/j.cels.2021.08.009},\n    issn = {2405-4712},\n    year = {2021},\n    journal = {Cell Systems},\n    title = {Minimizer-space de Bruijn graphs: Whole-genome assembly of long reads in minutes on a personal computer},\n    author = {Ekim, Bar{\\i}{\\c s} and Berger, Bonnie and Chikhi, Rayan},\n}"
      },
      "source": "https://raw.githubusercontent.com/ekimb/rust-mdbg/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ekimb/rust-mdbg"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact",
        "parent_header": [
          "`rust-mdbg`: Minimizer-space de Bruijn graphs (mdBG) for whole-genome assembly <br>"
        ],
        "type": "Text_excerpt",
        "value": "Should you have any inquiries, please contact [Bar\u0131\u015f Ekim](http://people.csail.mit.edu/ekim/) at baris [at] mit [dot] edu, or [Rayan Chikhi](http://rayan.chikhi.name) at rchikhi [at] pasteur [dot] fr.\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/ekimb/rust-mdbg/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-11-06T14:29:44Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-19T16:09:02Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "minimizer-space de Bruijn graphs (mdBG) for whole genome assembly"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9966084334046668,
      "result": {
        "original_header": "`rust-mdbg`: Minimizer-space de Bruijn graphs (mdBG) for whole-genome assembly <br>",
        "type": "Text_excerpt",
        "value": "`rust-mdbg` is an ultra-fast minimizer-space de Bruijn graph (mdBG) implementation, geared towards the assembly of long and accurate reads such as [PacBio HiFi](https://www.pacb.com/smrt-science/smrt-sequencing/hifi-reads-for-highly-accurate-long-read-sequencing/).\n \n"
      },
      "source": "https://raw.githubusercontent.com/ekimb/rust-mdbg/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9853964290878577,
      "result": {
        "original_header": "Rationale",
        "type": "Text_excerpt",
        "value": "`rust-mdbg` performs mdBG construction of a 52x human genome HiFi data in around 10 minutes on 8 threads, with 10GB of maximum RAM usage. \n`rust-mdbg` is fast because it operates in *minimizer-space*, meaning that the reads, the assembly graph, and the final assembly, are all represented as ordered lists of minimizers, instead of strings of nucleotides. A conversion step then yields a classical *base-space* representation.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ekimb/rust-mdbg/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9788937129524836,
      "result": {
        "original_header": "Limitations",
        "type": "Text_excerpt",
        "value": "However, this high speed comes at a cost! :) \n* `rust-mdbg` gives good-quality results but still of lower contiguity and completeness than state-of-the-art assemblers such as [`HiCanu`](https://github.com/marbl/canu) and [`hifiasm`](https://github.com/chhylp123/hifiasm). \n* `rust-mdbg` performs best with at least 40x to 50x of coverage.\n* No polishing step is implemented; so, assemblies will have around the same accuracy as the reads.\n* Cannot assemble Nanopore data due to its higher error rate (see [this comment](https://github.com/ekimb/rust-mdbg/issues/4#issuecomment-860817828))\n \n"
      },
      "source": "https://raw.githubusercontent.com/ekimb/rust-mdbg/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8674273103232566,
      "result": {
        "original_header": "Multi-`k` assembly",
        "type": "Text_excerpt",
        "value": "For better contiguity, try the provided multi-`k` assembly script.\nIt performs assembly iteratively, starting with `k`= 10, up to an automatically-determined largest `k`. \nThis comes at the expense of ~7x longer running time. \n"
      },
      "source": "https://raw.githubusercontent.com/ekimb/rust-mdbg/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9248195522573323,
      "result": {
        "original_header": "Overview",
        "type": "Text_excerpt",
        "value": "`rust-mdbg` is a **modular** assembler. It consists of three components: \n 1) `rust-mdbg`, to perform assembly in minimizer-space\n 2) `gfatools` (external component), to perform graph simplifications\n 3) `to_basespace`, to convert a minimizer-space assembly to base-space \nFor convenience, components 2 and 3 are wrapped into a script called `magic_simplify`.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ekimb/rust-mdbg/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8736444237396773,
      "result": {
        "original_header": "Input",
        "type": "Text_excerpt",
        "value": "`rust-mdbg` takes a single FASTA/FASTQ input (gzip-compressed or not). Multi-line sequences, and sequences with lowercase characters, are not supported.  \n"
      },
      "source": "https://raw.githubusercontent.com/ekimb/rust-mdbg/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.883859443856554,
      "result": {
        "original_header": "Output data",
        "type": "Text_excerpt",
        "value": "The output of `rust-mdbg` consists of: \n* A `.gfa` file containing the minimizer-space de Bruijn graph, without sequences,\n* Several `.sequences` files containing the sequences of the nodes of the graph. \nThe executable `to_basespace` allows to combine both outputs and produce a `.gfa` file, with sequences.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ekimb/rust-mdbg/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.960870668650105,
      "result": {
        "original_header": "Parameters",
        "type": "Text_excerpt",
        "value": "The main parameters of `rust-mdbg` are the `k`-min-mer value `k`, the minimizer length `l`, and the minimizer density `d` (delta in the paper).  Another parameter is `--presimp`, set by default to 0.01, which performs a graph simplification: a neighbor node is deleted if its abundance is below 1% that of `min(max(abundance of other neighbors), abundance of current node)`.\nFor better results, and also without the need to set any parameter, try the multi-`k` strategy (see Multi-`k` assembly section). \nThis section explains how parameters are set in single-`k` assembly. \nAll three parameters `k`, `l`, and `d` significantly impact the quality of results. One can think of them as a generalization of the `k` parameter in classical de Bruijn graphs. When you run `rust-mdbg` without specifying parameters, it sets them to: \n   `k` = 0.75 * `average_readlen` * `d`\n   \nThese parameters will give reasonable, but far from optimal, draft assemblies. We experimentally found that the best results are often obtained with `k` values within 20-40, `l` within 10-14, and `d` within 0.001-0.005. Setting `k` and `d` such that the ratio `k`/`d` is slightly below the read length appears to be an effective strategy. \nfor a lengthy explanation of each flag.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ekimb/rust-mdbg/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9749605315012325,
      "result": {
        "original_header": "Performance",
        "type": "Text_excerpt",
        "value": "The runs with custom parameters (from the paper) were made with commit `b99d938`, and unlike in the paper, we did not use robust minimizers which requires additional `l`-mer counting beforehand.\nFor historical reasons, reads and assemblies were homopolymer-compressed in those experiments and the homopolymer-compressed genome size is reported. So beware that these numbers are not directly comparable to the output of other assemblers.\nIn addition to the parameters shown in the table, the `rust-mdbg` command line also contained `--bf --no-error-correct --threads 8`.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ekimb/rust-mdbg/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ekimb/rust-mdbg/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 18
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ekimb/rust-mdbg/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ekimb/rust-mdbg"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "rust-mdbg: Minimizer-space de Bruijn graphs (mdBG) for whole-genome assembly "
      },
      "source": "https://raw.githubusercontent.com/ekimb/rust-mdbg/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ekimb/rust-mdbg/master/experiments/661k_genomes/retrieve_wcc_genomes.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ekimb/rust-mdbg/master/experiments/661k_genomes/separate_components.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ekimb/rust-mdbg/master/experiments/661k_genomes/extract_subset_wcc.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ekimb/rust-mdbg/master/experiments/amr/fasta_removeiupac.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ekimb/rust-mdbg/master/experiments/amr/fasta_toupper.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ekimb/rust-mdbg/master/utils/gfa2fasta.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://zenodo.org/badge/latestdoi/310619686"
      },
      "source": "https://raw.githubusercontent.com/ekimb/rust-mdbg/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "`rust-mdbg`: Minimizer-space de Bruijn graphs (mdBG) for whole-genome assembly <br>"
        ],
        "type": "Text_excerpt",
        "value": "Clone the repository (make sure you have a working Rust environment), and run \n\n`cargo build --release`\n\nAlternatively, you can install from [`bioconda`](https://bioconda.github.io/index.html):\n\n`conda install -c bioconda rust-mdbg`\n\nwhich has the Rust binaries, but not the additional scripts. For performing graph simplifications, [`gfatools`](https://github.com/lh3/gfatools/) is required.\n"
      },
      "source": "https://raw.githubusercontent.com/ekimb/rust-mdbg/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.998117314864549,
      "result": {
        "original_header": "Input",
        "type": "Text_excerpt",
        "value": "If you have [`seqtk`](https://github.com/lh3/seqtk) installed, you can use \n"
      },
      "source": "https://raw.githubusercontent.com/ekimb/rust-mdbg/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9951760333033194,
      "result": {
        "original_header": "Metagenome assembly",
        "type": "Text_excerpt",
        "value": "Please refer to issue https://github.com/ekimb/rust-mdbg/issues/30. In a nutshell, you may try parameters `-k 21 -l 14 --density 0.003` as in the paper, and make sure to use the `magic_simplify_meta` script.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ekimb/rust-mdbg/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8196391889096428,
      "result": {
        "original_header": "Multi-`k` assembly",
        "type": "Text_excerpt",
        "value": "`utils/multik <reads.fq.gz> <some_output_prefix> <nb_threads>`\n \n"
      },
      "source": "https://raw.githubusercontent.com/ekimb/rust-mdbg/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ekimb/rust-mdbg/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021 Bar\u0131\u015f Ekim & Rayan Chikhi & Bonnie Berger\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/ekimb/rust-mdbg/master/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "`rust-mdbg`: Minimizer-space de Bruijn graphs (mdBG) for whole-genome assembly <br>"
        ],
        "type": "Text_excerpt",
        "value": "`rust-mdbg` is freely available under the [MIT License](https://opensource.org/licenses/MIT).\n"
      },
      "source": "https://raw.githubusercontent.com/ekimb/rust-mdbg/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "rust-mdbg"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "ekimb"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Rust",
        "size": 211796,
        "type": "Programming_language",
        "value": "Rust"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 43588,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 14105,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ekimb/rust-mdbg/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ekimb",
          "type": "User"
        },
        "date_created": "2021-10-07T14:26:21Z",
        "date_published": "2021-10-07T14:30:00Z",
        "description": "Removing warnings, extended `-h` flag, verbose command line errors; release before deploying to `bioconda`.",
        "html_url": "https://github.com/ekimb/rust-mdbg/releases/tag/v1.0.1",
        "name": "v1.0.1",
        "release_id": 50969595,
        "tag": "v1.0.1",
        "tarball_url": "https://api.github.com/repos/ekimb/rust-mdbg/tarball/v1.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/ekimb/rust-mdbg/releases/50969595",
        "value": "https://api.github.com/repos/ekimb/rust-mdbg/releases/50969595",
        "zipball_url": "https://api.github.com/repos/ekimb/rust-mdbg/zipball/v1.0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ekimb",
          "type": "User"
        },
        "date_created": "2021-07-28T19:02:06Z",
        "date_published": "2021-07-29T12:49:22Z",
        "description": "First production release of `rust-mdbg` (see [README.md](https://github.com/ekimb/rust-mdbg/blob/master/README.md) for usage).",
        "html_url": "https://github.com/ekimb/rust-mdbg/releases/tag/v1.0.0",
        "name": "v1.0.0",
        "release_id": 46974340,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/ekimb/rust-mdbg/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/ekimb/rust-mdbg/releases/46974340",
        "value": "https://api.github.com/repos/ekimb/rust-mdbg/releases/46974340",
        "zipball_url": "https://api.github.com/repos/ekimb/rust-mdbg/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running an example",
        "parent_header": [
          "`rust-mdbg`: Minimizer-space de Bruijn graphs (mdBG) for whole-genome assembly <br>"
        ],
        "type": "Text_excerpt",
        "value": "A sample set of reads is provided in the `example/` folder. Run\n\n`target/release/rust-mdbg reads-0.00.fa.gz -k 7 --density 0.0008 -l 10 --minabund 2 --prefix example`\n\nwhich will create an `example.gfa` file.\n\nIn order to populate the `.gfa` file with base-space sequences and perform graph simplification, run\n\n`utils/magic_simplify example`\n\nwhich will create `example.msimpl.gfa` and `example.msimpl.fa` files.\n\n"
      },
      "source": "https://raw.githubusercontent.com/ekimb/rust-mdbg/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running `rust-mdbg` without graph simplifications",
        "parent_header": [
          "`rust-mdbg`: Minimizer-space de Bruijn graphs (mdBG) for whole-genome assembly <br>"
        ],
        "type": "Text_excerpt",
        "value": "To convert an assembly to base-space without performing any graph simplifications, there are two ways:\n\n* with `gfatools`\n\n```\ngfatools asm -u  example.gfa > example.unitigs.gfa\ntarget/release/to_basespace --gfa example.unitigs.gfa --sequences example\n```\n\n* without `gfatools` (slower, but the code is more straightforward to understand)\n\n`utils/complete_gfa.py example example.gfa`\n\nIn both cases, this will create an `example.complete.gfa` file that you can convert to FASTA with\n\n`bash utils/gfa2fasta.sh example.complete`\n"
      },
      "source": "https://raw.githubusercontent.com/ekimb/rust-mdbg/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "requirements",
    "contributors",
    "documentation",
    "faq",
    "support",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 03:02:20",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 174
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick start",
        "parent_header": [
          "`rust-mdbg`: Minimizer-space de Bruijn graphs (mdBG) for whole-genome assembly <br>"
        ],
        "type": "Text_excerpt",
        "value": "```\ncargo build --release\ntarget/release/rust-mdbg example/reads-0.00.fa.gz -k 7 --density 0.0008 -l 10 --minabund 2 --prefix example\nutils/magic_simplify example\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ekimb/rust-mdbg/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running an example",
        "parent_header": [
          "`rust-mdbg`: Minimizer-space de Bruijn graphs (mdBG) for whole-genome assembly <br>"
        ],
        "type": "Text_excerpt",
        "value": "A sample set of reads is provided in the `example/` folder. Run\n\n`target/release/rust-mdbg reads-0.00.fa.gz -k 7 --density 0.0008 -l 10 --minabund 2 --prefix example`\n\nwhich will create an `example.gfa` file.\n\nIn order to populate the `.gfa` file with base-space sequences and perform graph simplification, run\n\n`utils/magic_simplify example`\n\nwhich will create `example.msimpl.gfa` and `example.msimpl.fa` files.\n\n"
      },
      "source": "https://raw.githubusercontent.com/ekimb/rust-mdbg/master/README.md",
      "technique": "header_analysis"
    }
  ]
}