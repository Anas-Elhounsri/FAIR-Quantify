{
  "acknowledgement": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Acknowledgements",
        "type": "Text_excerpt",
        "value": "- Computations were partially performed on the NIG supercomputer at ROIS National Institute of Genetics. https://gc.hgc.jp\n- Supported by SHIROKANE super computing system in Human Genome Center, The Institute of Medical Science, The University of Tokyo. https://www.at.hgc.jp/\n- Thanks to Department of Computational Biology and Medical Sciences, The University of Tokyo. http://www.cbms.k.u-tokyo.ac.jp/english/index.html\n\n"
      },
      "source": "https://raw.githubusercontent.com/jasonyangshadow/lpmx/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Reference",
        "type": "Text_excerpt",
        "value": "- Please cite our work\n  ```\n  Yang, X., Kasahara, M. LPMX: a pure rootless composable container system. BMC Bioinformatics 23, 112 (2022). https://doi.org/10.1186/s12859-022-04649-3\n  ```\n- [Vagrant Box](https://app.vagrantup.com/jasonyangshadow/boxes/benchmark_ubuntu1804) containing experiment environment and [experiment attachments](https://github.com/JasonYangShadow/experiment_attachments) containing necessary scripts for reproducibility\n"
      },
      "source": "https://raw.githubusercontent.com/jasonyangshadow/lpmx/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_of_conduct": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at jasonyangshadow@gmail.com. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
      },
      "source": "https://raw.githubusercontent.com/jasonyangshadow/lpmx/master/CODE_OF_CONDUCT.md",
      "technique": "file_exploration"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/JasonYangShadow/lpmx"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "I am welcoming contributions to both projects, [LPMX](https://github.com/jasonyangshadow/lpmx) and [Fakechroot](https://github.com/jasonyangshadow/fakechroot). LPMX is our project providing a CLI while Fakechroot focuses on employing LD_PRELOAD to trap system calls.\n\n## Issues\nFeel free to submit issues and enhancement requests.\n\n## Contributing\nPlease refer to each project's style and contribution guidelines for submitting patches and additions. In general, we follow the \"fork-and-pull\" Git workflow.\n- Fork the repo on GitHub\n- Clone the project to your own machine\n- Commit changes to your own branch\n- Push your work back up to your fork\n- Submit a Pull request so that we can review your changes\nNOTE: Be sure to merge the latest from \"upstream\" before making a pull request!\n\n## Copyright and Licensing\nLPMX project is under Apache 2.0 license, and Fakechroot project follows its original license, i.e LGPL\n"
      },
      "source": "https://raw.githubusercontent.com/jasonyangshadow/lpmx/master/CONTRIBUTING.md",
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-02-14T16:50:47Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-15T16:59:13Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A novel composable rootless container system"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.8306150689574336,
      "result": {
        "original_header": "LPMX <a href=\"https://travis-ci.com/JasonYangShadow/lpmx\"><img alt=\"Build Status\" src=\"https://travis-ci.com/JasonYangShadow/lpmx.svg?branch=master\" /></a> <img alt=\"Discord user id\" src=\"https://dcbadge.vercel.app/api/shield/500280645285707776?style=plastic&amp;theme=clean\" /> <a href=\"https://sonarcloud.io/dashboard?id=JasonYangShadow_lpmx\"><img alt=\"Maintainability Rating\" src=\"https://sonarcloud.io/api/project_badges/measure?project=JasonYangShadow_lpmx&amp;metric=sqale_rating\" /></a> <a href=\"https://sonarcloud.io/dashboard?id=JasonYangShadow_lpmx\"><img alt=\"Reliability Rating\" src=\"https://sonarcloud.io/api/project_badges/measure?project=JasonYangShadow_lpmx&amp;metric=reliability_rating\" /></a>",
        "type": "Text_excerpt",
        "value": "LPMX, i.e, Local Package Manager X, is a **pure rootless composable** container system. It helps researchers run genome analysis tools via existing Docker or Singularity (experimental) images without root/sudo privilege required. Besides, researchers can benefit from composability, e.g. allowing one to write a pipeline consisting tools from different containers.\n \n"
      },
      "source": "https://raw.githubusercontent.com/jasonyangshadow/lpmx/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9976317717111328,
      "result": {
        "original_header": "Features",
        "type": "Text_excerpt",
        "value": "1. **Pure Rootless**, root privilege is not required at any stage, including installation, launching containers, creation of images. It is suitable for Linux clusters, where users do not have root permission.\n2. **Composability**, existing container systems do not allow users to compose existing containers. LPMX has composability feature. Imagine that you can containerize the Canu assembler inside a container and still allows it to submit jobs via the host job submission command, e.g. qsub.\n3. **Userspace Union File System(UUFS)**, LPMX implements its own simple userspance union file system to support loading layers extracted from Docker images (or other layered file system). Unlike existing implementations such as [fuse-overlayfs](https://github.com/containers/fuse-overlayfs), UUFS does not require neither newer Linux kernels nor preinstalled libraries, it purely runs in userland. The UUFS is designed to support sharing base layers among different containers so that storage space and network traffic are saved, while container launch speed is largely accelerated.\n4. **Understanding existing container image meta-data(Limited distros, Alpine is not supported)**, LPMX can create containers via Docker images available on the docker hub. Currently Ubuntu and CentOS series are supported. Besides, the latest release also has experimental support for the Singularity image.\n5. **Designed for restricted runtime environment**, LPMX is designed for running containers in restricted runtime environments, such as root privilege is not approved or complete off-line usage. LPMX supports complete off-line initialization and deployment, which is especially suitable for scientific computing infrastructure.\n6. **Easy to access GPGPU resource**, LPMX provides end-users an easy way to access the host GPGPU resource. An example is here [https://github.com/JasonYangShadow/lpmx/wiki/GPGPU](https://github.com/JasonYangShadow/lpmx/wiki/GPGPU)\n \n"
      },
      "source": "https://raw.githubusercontent.com/jasonyangshadow/lpmx/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9098113096957182,
      "result": {
        "original_header": "Composability Feature",
        "type": "Text_excerpt",
        "value": "Genome analysis tools are often difficult to install due to their complex dependencies and conflicts. \nContainer virtualization systems such as Dockera and Singularity can help researchers install tools by isolating tools. However, they lack **composability**, an easy way to integrate multiple tools in different containers or multiple tools in a container and a host, which was an obstacle to benefit from container systems in research. An example is that tools that require distributed computing are not straightforward to be containerized. Another example is that a pipeline container integrating different tools or versions is difficult to build from existing containers. \nAnd a gif showing injecting an exposed samtool into another container \nBelow is a basic demo of using LPMX: \n"
      },
      "source": "https://raw.githubusercontent.com/jasonyangshadow/lpmx/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8504303350570319,
      "result": {
        "original_header": "Common commands",
        "type": "Text_excerpt",
        "value": "1. List existing containers with their container ids, status and other info(also with name filter)\n   ```\n   ./lpmx list -n name\n   ```\n2. Download Docker image from Docker Hub\n   BASH2*\n3. Create container with binding volumes via Docker image\n   BASH3*\n4. Delete container\n   BASH4*\n5. Resume container\n   BASH5*\n \n"
      },
      "source": "https://raw.githubusercontent.com/jasonyangshadow/lpmx/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9608584439370954,
      "result": {
        "original_header": "Limitations",
        "type": "Text_excerpt",
        "value": "1. Only Linux(x86-64) systems are supported. (**Windows/Mac OS** are not supported)\n2. **NON-GLIBC** based distros(For host OS and container images) are not supported, because our fakechroot only wraps functions inside GNU C Library(glibc), so both host OS and container images should be Glibc-based. For example, LPMX does not support Alpine Linux\n3. User can not do privileged manipulations inside containers, such as but not limited to:\n   - open privileged ports (range below 1024)\n   - mount file systems\n   - use su command inside containers\n   - change host name, system time and etc.  \n4. Executables statically linked do not work properly inside containers. Recompiling them withshared libraries is a recommended workaround. Alternatively, users can install such staticallylinked executables on host and call it from inside container by exposing them by LPMX, if needed.\n5. Some commands, e.g ps command, will not work as expected inside containers due to the lackof inter-process communication namespace isolation; a customized ps command wrapper cando the trick.\n6. LPMX does not work with a root account; end-users should use non-privileged accounts.\n7. Setuid/setgid executables do not work inside LPMX containers because LD_PRELOAD is disabled by Linux for such executables.\n8. When executables uses a system call that does not exist in the host kernel, LPMX cannotexecute them. This is the common limitation of container systems.\n9. **(We need supports from community!)** Only several host OS are supported currently in this [repository](https://github.com/JasonYangShadow/LPMXSettingRepository) (Ubuntu 12.04/14.04/16.04/18.04/19.04, Centos 5.11/6/6.7/7), we compiled fakechroot against common Linux distros, but still there might be incompatability issues among different glibc versions. Common container image types are supported, such as Ubuntu and CentOS. \n \n"
      },
      "source": "https://raw.githubusercontent.com/jasonyangshadow/lpmx/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/JasonYangShadow/lpmx/wiki/GPGPU"
      },
      "source": "https://raw.githubusercontent.com/jasonyangshadow/lpmx/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/JasonYangShadow/lpmx/wiki"
      },
      "source": "https://raw.githubusercontent.com/jasonyangshadow/lpmx/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jasonyangshadow/lpmx/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/JasonYangShadow/lpmx/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "JasonYangShadow/lpmx"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "LPMX    "
      },
      "source": "https://raw.githubusercontent.com/jasonyangshadow/lpmx/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jasonyangshadow/lpmx/master/debian.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jasonyangshadow/lpmx/master/build.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://dcbadge.vercel.app/api/shield/500280645285707776?style=plastic&amp;theme=clean"
      },
      "source": "https://raw.githubusercontent.com/jasonyangshadow/lpmx/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://sonarcloud.io/api/project_badges/measure?project=JasonYangShadow_lpmx&amp;metric=sqale_rating"
      },
      "source": "https://raw.githubusercontent.com/jasonyangshadow/lpmx/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://sonarcloud.io/api/project_badges/measure?project=JasonYangShadow_lpmx&amp;metric=reliability_rating"
      },
      "source": "https://raw.githubusercontent.com/jasonyangshadow/lpmx/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jasonyangshadow/lpmx/master/figures/composability.jpg"
      },
      "source": "https://raw.githubusercontent.com/jasonyangshadow/lpmx/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://img.youtube.com/vi/kf94-rmOFYA/0.jpg"
      },
      "source": "https://raw.githubusercontent.com/jasonyangshadow/lpmx/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://user-images.githubusercontent.com/2051711/100324168-301dd600-300a-11eb-9170-5457613b0db4.gif"
      },
      "source": "https://raw.githubusercontent.com/jasonyangshadow/lpmx/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "http://img.youtube.com/vi/_1XOLa1cKX4/0.jpg"
      },
      "source": "https://raw.githubusercontent.com/jasonyangshadow/lpmx/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jasonyangshadow/lpmx/master/figures/x11.png"
      },
      "source": "https://raw.githubusercontent.com/jasonyangshadow/lpmx/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9999999985795966,
      "result": {
        "original_header": "Limitations",
        "type": "Text_excerpt",
        "value": "1. Only Linux(x86-64) systems are supported. (**Windows/Mac OS** are not supported)\n2. **NON-GLIBC** based distros(For host OS and container images) are not supported, because our fakechroot only wraps functions inside GNU C Library(glibc), so both host OS and container images should be Glibc-based. For example, LPMX does not support Alpine Linux\n3. User can not do privileged manipulations inside containers, such as but not limited to:\n   - open privileged ports (range below 1024)\n   - mount file systems\n   - use su command inside containers\n   - change host name, system time and etc.  \n4. Executables statically linked do not work properly inside containers. Recompiling them withshared libraries is a recommended workaround. Alternatively, users can install such staticallylinked executables on host and call it from inside container by exposing them by LPMX, if needed.\n5. Some commands, e.g ps command, will not work as expected inside containers due to the lackof inter-process communication namespace isolation; a customized ps command wrapper cando the trick.\n6. LPMX does not work with a root account; end-users should use non-privileged accounts.\n7. Setuid/setgid executables do not work inside LPMX containers because LD_PRELOAD is disabled by Linux for such executables.\n8. When executables uses a system call that does not exist in the host kernel, LPMX cannotexecute them. This is the common limitation of container systems.\n9. **(We need supports from community!)** Only several host OS are supported currently in this [repository](https://github.com/JasonYangShadow/LPMXSettingRepository) (Ubuntu 12.04/14.04/16.04/18.04/19.04, Centos 5.11/6/6.7/7), we compiled fakechroot against common Linux distros, but still there might be incompatability issues among different glibc versions. Common container image types are supported, such as Ubuntu and CentOS. \n \n"
      },
      "source": "https://raw.githubusercontent.com/jasonyangshadow/lpmx/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9973981278473966,
      "result": {
        "original_header": "Incompatible Images",
        "type": "Text_excerpt",
        "value": "https://github.com/JasonYangShadow/lpmx/wiki/incompatible-images\n \n"
      },
      "source": "https://raw.githubusercontent.com/jasonyangshadow/lpmx/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/JasonYangShadow/lpmx/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "container-linux, docker, docker-image, fakechroot, fakeroot, rootless, rootless-container, singularity, unionfs"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Apache License 2.0",
        "spdx_id": "Apache-2.0",
        "type": "License",
        "url": "https://api.github.com/licenses/apache-2.0",
        "value": "https://api.github.com/licenses/apache-2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
      },
      "source": "https://raw.githubusercontent.com/jasonyangshadow/lpmx/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jasonyangshadow/lpmx/master/./lpmx_small.PNG"
      },
      "source": "https://raw.githubusercontent.com/jasonyangshadow/lpmx/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "lpmx"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "JasonYangShadow"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Go",
        "size": 264269,
        "type": "Programming_language",
        "value": "Go"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 1619,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 159,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jasonyangshadow/lpmx/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "JasonYangShadow",
          "type": "User"
        },
        "date_created": "2022-04-30T04:45:30Z",
        "date_published": "2022-04-30T14:10:57Z",
        "description": "In this release, I have added new support for parsing yaml file, users can have docker-compose like experience when using LPMX.\r\n\r\nThe command to use `compose` is:\r\n```\r\nlpmx compose -f yaml_file\r\n```\r\n\r\n```\r\nversion: 1\r\napps:\r\n  - name: \"minimap2\"\r\n    image: \"evolbioinfo/minimap2:v2.17\"\r\n    type: \"docker\"\r\n    expose:\r\n      - /usr/local/bin/minimap2:minimap2\r\n    share:\r\n      - /home/vagrant/share:/share\r\n  - name: \"target\"\r\n    image: \"jasonyangshadow/example:1\"\r\n    type: \"docker\"\r\n    command: \"minimap -V && minimap '-a /share/human.fa /share/orang.fa > /share/test.sam'\"\r\n    inject:\r\n      - /home/vagrant/bin/minimap2:/usr/bin/minimap\r\n    share:\r\n      - /home/vagrant/share:/share\r\n    depends:\r\n        - minimap2\r\n  - name: \"singularity container\"\r\n    image: \"/home/vagrant/ubuntu.sif\"\r\n    type: \"singularity\"\r\n    command: \"cat /etc/os-release && echo $hello\"\r\n    envs:\r\n      - hello=1\r\n      - world=2\r\n```\r\n\r\nAn explanation for the yaml template structure:\r\n1. `version` (required) is the yaml template version info, should be `1` here\r\n2. `apps` (required) defines the top level apps label, just hardcoded\r\n3. Followings are all container definitions\r\n* `name` (required): container name, user defined\r\n* `image` (required): container image name (DockerHub name or local absolute path for sif file)\r\n* `type` (required): should be `docker` or `singularity`\r\n* `command` (optional): command running inside container\r\n* `inject` (optional): inject binaries from host or other container into current container (should be absolute path)\r\n* `share` (optional): directories shared between host and container\r\n* `depends` (optional): define the requirement of current container, name defined in `depends` should exist in yaml file\r\n* `expose` (optional): expose apps inside current contains to host or other containers\r\n* `envs` (optional): environment variables added to containers\r\n* `port` (optional): mapping ports (*not support now*)\r\n\r\nAn example showing the usage.  (The example is from https://github.com/JasonYangShadow/lpmx#quick-run)\r\nThe demo shows that we are composing two containers, one is built based on docker image named `evolbioinfo/minimap2:v2.17`, another one is based on docker image named `jasonyangshadow/example:1`, the definitions in the yaml file indicates that:\r\n1. for container named `minimap2`, it exposes inside minimap2 to host (version: 2.17-r941)\r\n2. for container named `target`, it injects exposed minimap2 (version: 2.17-r941) into itself and thus overrides its default minimap (version: 0.2-r123), and runs minimap analysis based on the data in shared folder with host.\r\n3. for container named `singularity container`, it extracts and imports layers from sif image and runs simple commands inside container\r\n\r\nThis demo shows that LPMX can inject apps in other containers into current container to dynamically override inside executables without touching the image. Fantastic, hah! isn't it? \r\n![MobaXterm_o4fyTOQmZF](https://user-images.githubusercontent.com/2051711/166108827-cdac8107-c83a-4d97-b2af-4a05cdd7e03d.gif)\r\n\r\n",
        "html_url": "https://github.com/JasonYangShadow/lpmx/releases/tag/v2.0.1",
        "name": "Alpha Pre-Release v2.0.1",
        "release_id": 65735965,
        "tag": "v2.0.1",
        "tarball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/tarball/v2.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/65735965",
        "value": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/65735965",
        "zipball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/zipball/v2.0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "JasonYangShadow",
          "type": "User"
        },
        "date_created": "2022-04-23T06:47:36Z",
        "date_published": "2022-04-23T06:53:08Z",
        "description": "Remove configuration writing to bashrc",
        "html_url": "https://github.com/JasonYangShadow/lpmx/releases/tag/v1.9.2",
        "name": "Alpha Pre-Release v1.9.2",
        "release_id": 65139090,
        "tag": "v1.9.2",
        "tarball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/tarball/v1.9.2",
        "type": "Release",
        "url": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/65139090",
        "value": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/65139090",
        "zipball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/zipball/v1.9.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "JasonYangShadow",
          "type": "User"
        },
        "date_created": "2022-02-20T06:55:18Z",
        "date_published": "2022-02-20T07:29:02Z",
        "description": "In this version, I patched the hard-link untar issue, where all binaries in the bin or sbin folder are hard linked to /bin/arch file in the specific distro. \r\nNo impacts for other distros.",
        "html_url": "https://github.com/JasonYangShadow/lpmx/releases/tag/v1.9.1",
        "name": "Alpha Pre-Release v1.9.1",
        "release_id": 59987960,
        "tag": "v1.9.1",
        "tarball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/tarball/v1.9.1",
        "type": "Release",
        "url": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/59987960",
        "value": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/59987960",
        "zipball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/zipball/v1.9.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "JasonYangShadow",
          "type": "User"
        },
        "date_created": "2021-12-27T04:53:27Z",
        "date_published": "2021-12-27T05:13:58Z",
        "description": "# Important (this release is an experimental one, we removed some dependencies and compile the libfakechroot against glibc 2.12 in centos 6.10 for better compatibility, but might cause some unexpected issues) \r\nFrom version v.1.9.0, LPMX changes a lot on its implementation, such as removing its dependency of Memcached, which means it won't use Memcache as the info exchanger any longer, but using pure file instead, which will reduce the dependency complexity of LPMX.\r\n\r\nFrom the end user's perspective, please do not upgrade for now until the release becomes more stable and passes more tests.\r\nFor the old version (<1.9.0), I will continue providing support.",
        "html_url": "https://github.com/JasonYangShadow/lpmx/releases/tag/v1.9.0",
        "name": "Alpha Pre-Release v1.9.0",
        "release_id": 56017077,
        "tag": "v1.9.0",
        "tarball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/tarball/v1.9.0",
        "type": "Release",
        "url": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/56017077",
        "value": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/56017077",
        "zipball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/zipball/v1.9.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "JasonYangShadow",
          "type": "User"
        },
        "date_created": "2021-11-23T15:42:27Z",
        "date_published": "2021-12-04T09:42:19Z",
        "description": "In this release we add a `--use-old-glibc` option for LPMX to solve exceptions when container image & host are incompatible on glibc.\r\n\r\nIn the following example, you can see that by using `lpmx reset` command we can reset the environment with different glibc compiling against libfakechroot. so that some glibc mismatch issue will be eliminated. \r\n![Peek 2021-12-04 18-40](https://user-images.githubusercontent.com/2051711/144704902-d1e76cd5-a593-4b2e-b11d-79d2760cef1e.gif)\r\n\r\n\r\n",
        "html_url": "https://github.com/JasonYangShadow/lpmx/releases/tag/v1.8.1",
        "name": "Alpha Pre-Release v1.8.1",
        "release_id": 54626802,
        "tag": "v1.8.1",
        "tarball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/tarball/v1.8.1",
        "type": "Release",
        "url": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/54626802",
        "value": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/54626802",
        "zipball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/zipball/v1.8.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "JasonYangShadow",
          "type": "User"
        },
        "date_created": "2021-09-29T14:52:45Z",
        "date_published": "2021-09-29T15:00:40Z",
        "description": "Add a new feature that directly importing directories generated from Skopeo. \r\nhttps://github.com/containers/skopeo\r\n\r\nLPMX can parse the manifest.json file generated by Skopeo and copy the layers to LPMX data directory.\r\n![Peek 2021-09-29 23-56](https://user-images.githubusercontent.com/2051711/135295017-ee911370-67cd-4587-9638-8dbe539f9901.gif)\r\n",
        "html_url": "https://github.com/JasonYangShadow/lpmx/releases/tag/v1.8",
        "name": "Alpha Pre-Release v1.8",
        "release_id": 50481610,
        "tag": "v1.8",
        "tarball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/tarball/v1.8",
        "type": "Release",
        "url": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/50481610",
        "value": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/50481610",
        "zipball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/zipball/v1.8"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "JasonYangShadow",
          "type": "User"
        },
        "date_created": "2021-08-24T13:48:40Z",
        "date_published": "2021-08-24T13:52:56Z",
        "description": "add docker merge sub-command for merging the layers of both local docker images and images downloaded from docker hub.\r\n```\r\nlpmx docker merge image:tag\r\n```\r\nit will automatically generate a new image with only one layer named `image:tag-merge`\r\n\r\n**Notice**:\r\nfrom this version for volume mapping parameter, please change to use the following format:\r\n```\r\nlpmx docker create -v host_path1=container_path1:host_path2=container_path2 image:tag\r\n```",
        "html_url": "https://github.com/JasonYangShadow/lpmx/releases/tag/v1.7.2",
        "name": "Alpha Pre-Release v1.7.2",
        "release_id": 48356181,
        "tag": "v1.7.2",
        "tarball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/tarball/v1.7.2",
        "type": "Release",
        "url": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/48356181",
        "value": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/48356181",
        "zipball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/zipball/v1.7.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "JasonYangShadow",
          "type": "User"
        },
        "date_created": "2021-05-30T13:41:28Z",
        "date_published": "2021-05-30T13:45:35Z",
        "description": "Add support for direct executable mapping through CLI\r\n```\r\nlpmx docker create -m host_path1=container_path1:host_path2=container_path2 ubuntu:16.04\r\nlpmx docker fastrun -m host_path1=container_path1:host_path2=container_path2 ubuntu:16.04 \"container_path1\"\r\n```\r\nSome fixes on the 'lpmx list' command",
        "html_url": "https://github.com/JasonYangShadow/lpmx/releases/tag/v1.7.1",
        "name": "Alpha Pre-Release v1.7.1",
        "release_id": 43819740,
        "tag": "v1.7.1",
        "tarball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/tarball/v1.7.1",
        "type": "Release",
        "url": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/43819740",
        "value": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/43819740",
        "zipball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/zipball/v1.7.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "JasonYangShadow",
          "type": "User"
        },
        "date_created": "2020-12-30T04:27:04Z",
        "date_published": "2021-01-11T23:36:33Z",
        "description": "Add new features of caching exchanging info to file.\r\nAdd new support for containerizing the canu assembler.\r\n\r\nhttps://github.com/JasonYangShadow/lpmx/wiki/canu-assembler\r\n\r\n",
        "html_url": "https://github.com/JasonYangShadow/lpmx/releases/tag/v1.7",
        "name": "Alpha Pre-Release v1.7",
        "release_id": 36253877,
        "tag": "v1.7",
        "tarball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/tarball/v1.7",
        "type": "Release",
        "url": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/36253877",
        "value": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/36253877",
        "zipball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/zipball/v1.7"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "JasonYangShadow",
          "type": "User"
        },
        "date_created": "2020-11-26T00:15:36Z",
        "date_published": "2020-11-26T08:10:22Z",
        "description": "In this release, we patched the feature of calling applications in other containers or in the host from the current container. By using 'lpmx set' command, an exec mapping can be set dynamically. See the following gif for the feature\r\n![GxuhQ2SWFA](https://user-images.githubusercontent.com/2051711/100324168-301dd600-300a-11eb-9170-5457613b0db4.gif)\r\n",
        "html_url": "https://github.com/JasonYangShadow/lpmx/releases/tag/v1.6.3",
        "name": "Alpha Pre-Release v1.6.3",
        "release_id": 34450117,
        "tag": "v1.6.3",
        "tarball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/tarball/v1.6.3",
        "type": "Release",
        "url": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/34450117",
        "value": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/34450117",
        "zipball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/zipball/v1.6.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "JasonYangShadow",
          "type": "User"
        },
        "date_created": "2020-10-09T04:25:16Z",
        "date_published": "2020-10-09T04:43:26Z",
        "description": "In this release, LPMX supports making a direct call to other applications inside other containers from the current container. \r\nBy default, LPMX can make a direct call to other applications installed in the host, while this release extends this feature to applications installed in other containers. \r\n\r\n![Peek 2020-10-09 13-30](https://user-images.githubusercontent.com/2051711/95543770-5e346000-0a34-11eb-8c2b-739073722802.gif)\r\nThe above gif shows a demo on this feature, we installed samtools inside a container which is already exposed to the host so that users can directly use samtools inside the host. Then we create another container that does not install vim and samtools, by setting FAKECHROOT_EXCLUDE_EXE env var, we can directly call vim and samtools inside the container\r\n",
        "html_url": "https://github.com/JasonYangShadow/lpmx/releases/tag/v1.6.2",
        "name": "Alpha Pre-Release v1.6.2",
        "release_id": 32353516,
        "tag": "v1.6.2",
        "tarball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/tarball/v1.6.2",
        "type": "Release",
        "url": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/32353516",
        "value": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/32353516",
        "zipball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/zipball/v1.6.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "JasonYangShadow",
          "type": "User"
        },
        "date_created": "2020-09-07T02:24:39Z",
        "date_published": "2020-09-07T02:25:34Z",
        "description": "From this alpha release, we plan to release both a binary executable file as well as deb/rpm package files.\r\nBesides, for ubuntu 20.04 users, additional PPA is available.\r\n```\r\nsudo add-apt-repository ppa:jasonyangshadow/lpmxppa\r\nsudo apt-get update\r\nsudo apt install lpmx\r\n```",
        "html_url": "https://github.com/JasonYangShadow/lpmx/releases/tag/v1.6.1",
        "name": "Alpha Pre-Release v1.6.1",
        "release_id": 30828007,
        "tag": "v1.6.1",
        "tarball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/tarball/v1.6.1",
        "type": "Release",
        "url": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/30828007",
        "value": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/30828007",
        "zipball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/zipball/v1.6.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "JasonYangShadow",
          "type": "User"
        },
        "date_created": "2020-06-09T12:51:28Z",
        "date_published": "2020-06-09T13:08:29Z",
        "description": "This alpha pre-release adds experimental Singularity SIF image support, which allows LPMX to import SIF image and create containers. \r\n\r\nContainers created via SIF image are writable. \r\n\r\nmain commands:\r\n```shell\r\nlpmx singularity load xxx.sif -n name -t tag\r\nlpmx singularity create name:tag\r\n```\r\nSingularity related commands are similar to Docker ones. For other commands, please visit wiki page.\r\n\r\nCurrently, LPMX does not support pulling SIF images, only supports loading downloaded SIF images.\r\n",
        "html_url": "https://github.com/JasonYangShadow/lpmx/releases/tag/v1.6",
        "name": "Alpha Pre-Release v1.6",
        "release_id": 27368458,
        "tag": "v1.6",
        "tarball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/tarball/v1.6",
        "type": "Release",
        "url": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/27368458",
        "value": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/27368458",
        "zipball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/zipball/v1.6"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "JasonYangShadow",
          "type": "User"
        },
        "date_created": "2020-05-19T08:30:33Z",
        "date_published": "2020-05-19T13:08:48Z",
        "description": "Tiny new features:\r\n1. Set path and name for the exposed program, the path is the absolute path of applications inside a container, the name is a customized name\r\n2. Add an image deletion option for permernant deletion of Docker images.\r\n\r\n",
        "html_url": "https://github.com/JasonYangShadow/lpmx/releases/tag/v1.5",
        "name": "Alpha Pre-Release v1.5",
        "release_id": 26669255,
        "tag": "v1.5",
        "tarball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/tarball/v1.5",
        "type": "Release",
        "url": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/26669255",
        "value": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/26669255",
        "zipball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/zipball/v1.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "JasonYangShadow",
          "type": "User"
        },
        "date_created": "2020-05-02T17:34:37Z",
        "date_published": "2020-05-02T17:42:21Z",
        "description": "This release adds new feature named \"fastrun\" for Docker container, which could create a container based on Docker image, run it immediately and destroy it after the command ends.  \r\nFor example: \r\n```\r\nlpmx docker fastrun ubuntu:16.04 \"cat /etc/os-release\"\r\n```\r\nwill output the following info(if ubuntu:16.04 image exists locally)\r\n```\r\nNAME=\"Ubuntu\"\r\nVERSION=\"16.04.6 LTS (Xenial Xerus)\"\r\nID=ubuntu\r\nID_LIKE=debian\r\nPRETTY_NAME=\"Ubuntu 16.04.6 LTS\"\r\nVERSION_ID=\"16.04\"\r\nHOME_URL=\"http://www.ubuntu.com/\"\r\nSUPPORT_URL=\"http://help.ubuntu.com/\"\r\nBUG_REPORT_URL=\"http://bugs.launchpad.net/ubuntu/\"\r\nVERSION_CODENAME=xenial\r\nUBUNTU_CODENAME=xenial\r\n```\r\nThis feature is especially suitable for fast test. ",
        "html_url": "https://github.com/JasonYangShadow/lpmx/releases/tag/v1.4",
        "name": "Alpha Pre-Release v1.4",
        "release_id": 26108289,
        "tag": "v1.4",
        "tarball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/tarball/v1.4",
        "type": "Release",
        "url": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/26108289",
        "value": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/26108289",
        "zipball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/zipball/v1.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "JasonYangShadow",
          "type": "User"
        },
        "date_created": "2020-01-19T13:03:42Z",
        "date_published": "2020-01-19T13:49:18Z",
        "description": "This alpha release changed the original policy of patching LD_LIBRARY_PATH. \r\nWe used to add an additional path to LD_LIBRARY_PATH but this time we totally changed the way of hacking argv0. We do not use rebuilt ld.so but preload hacking the function named \"__libc_start_main\" so that argv0 is modified before calling the user's main function.\r\n\r\nChanged some other environment vars.",
        "html_url": "https://github.com/JasonYangShadow/lpmx/releases/tag/v1.3",
        "name": "Alpha Pre-Release v1.3",
        "release_id": 22956469,
        "tag": "v1.3",
        "tarball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/tarball/v1.3",
        "type": "Release",
        "url": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/22956469",
        "value": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/22956469",
        "zipball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/zipball/v1.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "JasonYangShadow",
          "type": "User"
        },
        "date_created": "2019-12-30T07:33:38Z",
        "date_published": "2020-01-01T21:56:28Z",
        "description": "This pre-release fixed some bugs and added some new features(end-users will not aware of these new features).",
        "html_url": "https://github.com/JasonYangShadow/lpmx/releases/tag/v1.2",
        "name": "Alpha Pre-Release v1.2",
        "release_id": 22543743,
        "tag": "v1.2",
        "tarball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/tarball/v1.2",
        "type": "Release",
        "url": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/22543743",
        "value": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/22543743",
        "zipball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/zipball/v1.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "JasonYangShadow",
          "type": "User"
        },
        "date_created": "2019-11-29T13:40:18Z",
        "date_published": "2019-11-29T14:49:02Z",
        "description": "We finally released Alpha version 1.1 with bugs fixing and features enhancements.\r\n\r\n",
        "html_url": "https://github.com/JasonYangShadow/lpmx/releases/tag/v1.1",
        "name": "Alpha Pre-Release v1.1",
        "release_id": 21858606,
        "tag": "v1.1",
        "tarball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/tarball/v1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/21858606",
        "value": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/21858606",
        "zipball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/zipball/v1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "JasonYangShadow",
          "type": "User"
        },
        "date_created": "2019-10-03T04:33:36Z",
        "date_published": "2019-10-03T04:44:05Z",
        "description": "Adjust the creation of symlink from absolute symlink references to relative ones. \r\n\r\nOther env variables adjustment. ",
        "html_url": "https://github.com/JasonYangShadow/lpmx/releases/tag/v1.0",
        "name": "Alpha Pre-Release v1.0",
        "release_id": 20434490,
        "tag": "v1.0",
        "tarball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/tarball/v1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/20434490",
        "value": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/20434490",
        "zipball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/zipball/v1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "JasonYangShadow",
          "type": "User"
        },
        "date_created": "2019-09-09T14:04:35Z",
        "date_published": "2019-09-16T07:24:38Z",
        "description": "[Patches]\r\n1. Fixed the bug of symlink creation when extracting Docker images\r\n2. libfakechroot symlink creation enhancement\r\n\r\n[Known issues]\r\n1. jdk could not be successfully installed\r\n2. GPU acceleration could not be achieved.",
        "html_url": "https://github.com/JasonYangShadow/lpmx/releases/tag/v0.9",
        "name": "Alpha Pre-Release v0.9",
        "release_id": 20005860,
        "tag": "v0.9",
        "tarball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/tarball/v0.9",
        "type": "Release",
        "url": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/20005860",
        "value": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/20005860",
        "zipball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/zipball/v0.9"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "JasonYangShadow",
          "type": "User"
        },
        "date_created": "2019-09-04T13:11:08Z",
        "date_published": "2019-09-04T13:23:59Z",
        "description": "[Enhancements]\r\n1. LPMX support importing tarball file exported by \"Docker save\" command\r\n2. LPMX support updating libfakechroot.so by \"lpmx update\" command. \r\n\r\n[Bug Fix]\r\n1. Fixing the bug of \"could not init if the LPMX binary name is not 'lpmx'\"",
        "html_url": "https://github.com/JasonYangShadow/lpmx/releases/tag/v0.8",
        "name": "Alpha Pre-Release v0.8",
        "release_id": 19747884,
        "tag": "v0.8",
        "tarball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/tarball/v0.8",
        "type": "Release",
        "url": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/19747884",
        "value": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/19747884",
        "zipball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/zipball/v0.8"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "JasonYangShadow",
          "type": "User"
        },
        "date_created": "2019-07-25T14:56:07Z",
        "date_published": "2019-07-25T15:06:37Z",
        "description": "We published Alpha v0.7 release, including some enhancements.\r\n\r\n[enhancement]\r\nAdd support of merging all docker layers into one layer in order for better file access performance. And this operation is not revertable but all original layers are kept.",
        "html_url": "https://github.com/JasonYangShadow/lpmx/releases/tag/v0.7",
        "name": "Alpha Pre-Release v0.7",
        "release_id": 18865845,
        "tag": "v0.7",
        "tarball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/tarball/v0.7",
        "type": "Release",
        "url": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/18865845",
        "value": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/18865845",
        "zipball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/zipball/v0.7"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "JasonYangShadow",
          "type": "User"
        },
        "date_created": "2019-07-22T02:53:10Z",
        "date_published": "2019-07-22T03:03:36Z",
        "description": "We published Alpha v0.6 release, including some enhancements.\r\n\r\n[enhancement]\r\n1. Add FAKECHROOT_EXCLUDE_EX_PATH support, which is used for creating some special excluded paths, such as /sys/fs/dbus, and /proc/sys/fs/binfmt_misc, required by \"apt\" during package installation. Obviously, we use faked-unionfs and we can create anything locally.\r\n2. Add support for searching and downloading proper files from Github by the predefined configuration file. It is used for the build farm support.\r\n\r\n[bugs fix]\r\n1. failure of stopping memcached instance sometimes\r\n2. other tiny issues\r\n",
        "html_url": "https://github.com/JasonYangShadow/lpmx/releases/tag/v0.6",
        "name": "Alpha Pre-Release v0.6",
        "release_id": 18762176,
        "tag": "v0.6",
        "tarball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/tarball/v0.6",
        "type": "Release",
        "url": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/18762176",
        "value": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/18762176",
        "zipball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/zipball/v0.6"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "JasonYangShadow",
          "type": "User"
        },
        "date_created": "2019-07-11T00:03:22Z",
        "date_published": "2019-07-11T01:09:55Z",
        "description": "alpha-v0.5 release\r\n\r\n[Enhancement]\r\nAdd support for mounting directories from the host when creating containers \r\n\"lpmx docker create -v /host:/container docker_image\", both host dir and container dir should be absolute paths.\r\n\r\nUse \"lpmx version\" to check the current version.",
        "html_url": "https://github.com/JasonYangShadow/lpmx/releases/tag/v0.5",
        "name": "Alpha Pre-Release v0.5",
        "release_id": 18539982,
        "tag": "v0.5",
        "tarball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/tarball/v0.5",
        "type": "Release",
        "url": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/18539982",
        "value": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/18539982",
        "zipball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/zipball/v0.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "JasonYangShadow",
          "type": "User"
        },
        "date_created": "2019-04-13T14:02:17Z",
        "date_published": "2019-04-13T14:10:51Z",
        "description": "alpha-v0.4 release\r\n[Fix]\r\n1. permission denied issue during uncompressing docker image\r\n\r\n[Enhancement]\r\n1. Add support for downloading files from google drive",
        "html_url": "https://github.com/JasonYangShadow/lpmx/releases/tag/v0.4",
        "name": "Alpha Pre-Release v0.4",
        "release_id": 16743227,
        "tag": "v0.4",
        "tarball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/tarball/v0.4",
        "type": "Release",
        "url": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/16743227",
        "value": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/16743227",
        "zipball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/zipball/v0.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "JasonYangShadow",
          "type": "User"
        },
        "date_created": "2019-02-26T06:42:09Z",
        "date_published": "2019-02-26T06:50:50Z",
        "description": "LPMX supports completely offline installation and migration.\r\n\r\nBug Fix.\r\n",
        "html_url": "https://github.com/JasonYangShadow/lpmx/releases/tag/v0.3",
        "name": "Alpha Pre-Release v0.3",
        "release_id": 15772232,
        "tag": "v0.3",
        "tarball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/tarball/v0.3",
        "type": "Release",
        "url": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/15772232",
        "value": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/15772232",
        "zipball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/zipball/v0.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "JasonYangShadow",
          "type": "User"
        },
        "date_created": "2019-02-18T06:42:45Z",
        "date_published": "2019-02-18T06:53:57Z",
        "description": "This release adds new features of initialization and installation offline\r\n\r\nIf you would like to install software using 'apt/yum' locally and transmit local newly created layer to one new machine(i.e, the runtime environment, similar to Singularity), you will get this feature in next release.\r\n\r\nCurrently, LPMX could package downloaded docker image from docker hub and load it locally, you could not install any software inside the containerized os if you do not have network access in the runtime environment. ",
        "html_url": "https://github.com/JasonYangShadow/lpmx/releases/tag/v0.2",
        "name": "Alpha Pre-Release v0.2",
        "release_id": 15613157,
        "tag": "v0.2",
        "tarball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/tarball/v0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/15613157",
        "value": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/15613157",
        "zipball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/zipball/v0.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "JasonYangShadow",
          "type": "User"
        },
        "date_created": "2019-02-14T15:12:54Z",
        "date_published": "2019-02-14T16:08:52Z",
        "description": "LPMX alpha release v0.1 X86_64\r\n\r\nPlatform support:\r\nHost OS : Ubuntu 18.04 & Ubuntu 16.04\r\nContainer OS: Ubuntu 16.04 & Ubuntu 14.04 \r\n",
        "html_url": "https://github.com/JasonYangShadow/lpmx/releases/tag/v0.1",
        "name": "Alpha Pre-Release v0.1",
        "release_id": 15564012,
        "tag": "v0.1",
        "tarball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/tarball/v0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/15564012",
        "value": "https://api.github.com/repos/JasonYangShadow/lpmx/releases/15564012",
        "zipball_url": "https://api.github.com/repos/JasonYangShadow/lpmx/zipball/v0.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick Run",
        "type": "Text_excerpt",
        "value": "All following commands use Ubuntu 18.04 as host OS.\n\n<span style=\"color:yellow\">1. Install LPMX</span>\n```\n# for x86_64 binary\n$ wget -O lpmx https://github.com/JasonYangShadow/lpmx/blob/master/build/linux/x86_64/Linux-x86_64-lpmx?raw=true\n\n$ chmod a+x lpmx && ./lpmx init\n```\n\n<span style=\"color:yellow\">2. Download Docker Image and Run</span>\n```\n# download common Linux distro from Docker hub\n$ ./lpmx docker download ubuntu:16.04\n\n# echo hello world\n$ ./lpmx docker fastrun ubuntu:16.04 \"echo 'hello world'\"\n\n```\n\n<span style=\"color:yellow\">3. Try minimap2</span>\n```\n# download common genomic analysis tools from Docker hub\n$ ./lpmx docker download evolbioinfo/minimap2:v2.17\n\n# run minimap2\n$ mkdir -p $PWD/share\n$ wget -O $PWD/share/human.fa https://raw.githubusercontent.com/lh3/minimap2/master/test/MT-human.fa\n$ wget -O $PWD/share/orang.fa https://raw.githubusercontent.com/lh3/minimap2/master/test/MT-orang.fa\n$ ./lpmx docker fastrun -v $PWD/share=/share evolbioinfo/minimap2:v2.17 \"minimap2 -a /share/human.fa /share/orang.fa > /share/minimap2.sam\"\n$ ls -al $PWD/share\n```\n\n<span style=\"color:yellow\">4. Compose different containers</span>\n```\n# download Docker image with old versions of minimap & samtools\n$ ./lpmx docker download jasonyangshadow/example:1\n\n# show version info of old minimap & samtools\n$ ./lpmx docker fastrun jasonyangshadow/example:1 \"minimap -V\"\n$ ./lpmx docker fastrun jasonyangshadow/example:1 \"samtools\"\n\n# create minimap2 container\n$ ./lpmx docker create -n minimap2 -v $PWD/share=/share evolbioinfo/minimap2:v2.17\n\n# exit the newly created container\n$root exit\n\n# get container id\n$ container_id=`./lpmx list -n minimap2 | awk '{if (NR!=1) {print $1}}'` \n\n# expose minimap2 to make it available to host and other containers\n$ ./lpmx expose -i $container_id -n minimap2 -p /usr/local/bin/minimap2\n$ ls -al $PWD/bin/minimap2\n\n# replace old version of minimap with newer minimap2 and keep using old version of original samtools\n$ ./lpmx docker fastrun -v $PWD/share=/share -m $PWD/bin/minimap2=/usr/bin/minimap jasonyangshadow/example:1 \"minimap '-V'\"\n$ ./lpmx docker fastrun -v $PWD/share=/share -m $PWD/bin/minimap2=/usr/bin/minimap jasonyangshadow/example:1 \"minimap '-a /share/human.fa /share/orang.fa > /share/test.sam'\"\n$ ./lpmx docker fastrun -v $PWD/share=/share jasonyangshadow/example:1 \"samtools view -S -b /share/test.sam > /share/test.bam\"\n$ ls -al $PWD/share\n```\n\n<span style=\"color:yellow\">5. Try GPGPU</span>\n```\n# if you can run nvidia-smi on the host, then you can easily get access GPGPU inside container with a simple command\n$ FAKECHROOT_USE_SYS_LIB=true ./lpmx docker fastrun -m /usr/bin/nvidia-smi=/usr/bin/nvidia-smi ubuntu:16.04 \"nvidia-smi\"\n```\n\nThat's it!\n\nFor all other command details, please check [wiki](https://github.com/JasonYangShadow/lpmx/wiki)\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/jasonyangshadow/lpmx/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 05:43:22",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 46
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Why should I use containers?",
        "type": "Text_excerpt",
        "value": "In bioinformatics, [Bioconda](https://bioconda.github.io) \nis a repository containing popular bioinformatics tools and allows users to install binaries of these tools rather than compiling them from scratch. But conflicting tools (requiring conflicting dependencies, e.g. Python2 & Python3) inside a genome analysis pipeline can not be set up successfully because Bioconda can not install them inside a single namespace. For example, [Manta](https://github.com/Illumina/manta) still requires Python2, so  installing a pipeline consisting of Manta and other Python3-based tools will fail. Bioconda moved the burden of resolving the dependency hell from users to developers. But we need to further eliminate the burden for developers.\nContainer virtualization can solve this problem by isolating each tool into a container. \n"
      },
      "source": "https://raw.githubusercontent.com/jasonyangshadow/lpmx/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Why should I use LPMX?",
        "type": "Text_excerpt",
        "value": "[Singularity](https://sylabs.io/singularity/), a popular tool for container virtualization in science, is getting more and more popular recently. However, Singularity lacks **composability**. For example, we have a GATK container and a minimap2 container (both of which are created by somebody else than us), if we want to containerize a custom pipeline utilizing the existing containers, we need to write a substantial amount of code to bridge the custom pipeline and the containers (GATK & minimap2). \n\nTo this end, LPMX provides composability. With LPMX, we can compose existing container images to create a custom pipeline container without writing a large amount of glue code.\n\nBesides, you can directly use existing Docker and Singularity images with LPMX without root privilege, which is safe and convenient. You can also install software inside containers as you commonly do on your laptop.\n"
      },
      "source": "https://raw.githubusercontent.com/jasonyangshadow/lpmx/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Online Tutorial Session",
        "type": "Text_excerpt",
        "value": "If you are interested in LPMX and want an online tutorial session, please fill in this [Online Tutorial Request Form](https://forms.gle/6tUYdMmMSo6nDv916), I will contact you. (English will be used).:w\n"
      },
      "source": "https://raw.githubusercontent.com/jasonyangshadow/lpmx/master/README.md",
      "technique": "header_analysis"
    }
  ]
}