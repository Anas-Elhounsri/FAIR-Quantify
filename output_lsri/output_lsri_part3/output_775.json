{
  "code_of_conduct": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at aleksey dot zimin at gmail dot com.\n\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n"
      },
      "source": "https://raw.githubusercontent.com/alekseyzimin/masurca/master/code_of_conduct.md",
      "technique": "file_exploration"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/alekseyzimin/masurca"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-01-13T17:39:24Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-11T17:43:00Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.8790984960167819,
      "result": {
        "original_header": "The masurca and the assemble.sh scripts.",
        "type": "Text_excerpt",
        "value": "`gapClose.err`\tSTDOUT/STDERR for gap filling \nCA\tCABOG folder \u2013 the final assembly ends up in CA/9-terminator  or CA/10-gapclose (if gapClose succeeded, most of the time) \n`runCA2.out`\tCABOG stdout for scaffolder \n`tigStore.err`\tStderr for tigStore \n`runCA1.out`\tCABOG stdout for unitig consensus \n`superReadSequences_shr.frg`\tFRG file for super reads, super reads >2047br are shredded with an overlap of 1500bp \n`pe.linking.frg`\tFRG file of PE pairs where the two reads ended up in different super reads \n`pe.linking.fa`\tFasta file of PE pairs where the two reads ended up in different super reads \n`work1/`\tWorking directory of the super reads code that generates the super reads from PE reads \n`sj.cor.clean.frg`\tCABOG FRG file with corrected jumping library pairs, redundant and non-junction removed, coverage limited \n`sj.cor.ext.reduced.fa`\tFasta file with corrected jumping library pairs, redundant and non-junction removed, coverage limited \n`sj.cor.clean.fa`\tFasta file with corrected jumping library pairs, redundant and non-junction removed \n`redundant_sj.txt`\tText file with names of the redundant jumping library mate pairs \n`chimeric_sj.txt`\ttext file with names of the non-junction jumping library mate pairs \n`work2/`\tworking directory for the super reads code used to filter the JUMP libraries for non-junction/redundant pairs \n`super2.err`\tSTDERR output of the super reads code used to filter the JUMP libraries for non-junction/redundant pairs \nk_u_0\tjellyfish hash created from all error corrected reads, and used to estimate the genome size \n`??.cor.fa`\terror corrected JUMP reads, one such file for each library with '??' being the prefix.  The ordering of the reads is arbitrary, but the pairs are guaranteed to appear together. No quality scores. \n`pe.cor.fa`\terror corrected PE reads.  The ordering of the reads is arbitrary, but the pairs are guaranteed to appear together. No quality scores \n`pe_data.tmp`\tsupplementary information to figure out the GC content and lengths of PE reads \n`meanAndStdevByPrefix.sj.txt` auto-generated file of \u201cfake\u201d mean and stdev for non-junction jumping library pairs.  The Illumina protocol states that these are about 200-700bp long \n`meanAndStdevByPrefix.pe.txt`\tauto-generated file of means and stdevs for PE reads \n"
      },
      "source": "https://raw.githubusercontent.com/alekseyzimin/masurca/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8773157796041043,
      "result": {
        "original_header": "Restarting a failed assembly.",
        "type": "Text_excerpt",
        "value": "If something fails or goes wrong, or you noticed a mistake made in configuration, you can stop and re-start the assembly as follows. \n\u2022\tif you noticed that CABOG failed due to lack of disk space, then, after freeing some space, simply run  \n\u2022\tif you noticed that you omitted or misspecified one of the jumping library files, add the files to the DATA section of config.txt and run $/install_path/ MaSuRCA-X.X.X/bin/masurca config.txt and execute `assemble.sh` \n"
      },
      "source": "https://raw.githubusercontent.com/alekseyzimin/masurca/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9508697503345047,
      "result": {
        "original_header": "POLCA",
        "type": "Text_excerpt",
        "value": "POLCA is a polishing tool aimed at improving the consensus accuracy in genome assemblies produced from long high error sequencing data generated by PacBio SMRT or Oxford Nanopore sequencing technologies. POLCA utilizes Illumina or PacBio HIFI reads for the same genome for improving the consensus quality of the assembly.  Its inputs are the genome sequence and a fasta or fastq file (or files) of Illumina or PacBioHIFI reads and its outputs are the polished genome and a VCF file with the variants called from the read data.  \nPlease cite POLCA as follows: Zimin AV, Salzberg SL. The genome polishing tool POLCA makes fast and accurate corrections in genome assemblies. PLoS computational biology. 2020 Jun 26;16(6):e1007981. \nIt is very important to use fastq files of polishing reads for proper operation of freebayes.  If you have fasta files, you can convert it to fastq file faux quality scores (use \"G\" for quality). For example, \n```\n>read\nACGT\n```\nbecomes\nBASH2* \nPOLCA also includes a tool to introduce random errors into an assembly.  This tool is primarily useful for testing the polishing techniques. It is also useful for aligning to genomes that have long exact repeats (such as GRCh38) with Nucmer without use of --maxmatch option. To use the tool, one must perform two steps.  First step is to generate a pseudo-VCF file with random errors by running: \nwhere sequence.fasta is the multi-fasta file of the original contigs/scaffolds, error_probability is a floating point number less than 1, equal to the probability of error per base. The last argument is optional, it specifies the maximum insertion/deletion size.  By defaul, the last argument is 20. 90% of the errors introduced are substitutions and 10% are insertions and deletions.  The rate of introduced errors is rougly equal to error_probability*(1+maximum_indel_size/20).  To introduce the errors to the sequence.fasta file, run: \n"
      },
      "source": "https://raw.githubusercontent.com/alekseyzimin/masurca/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9620314078873713,
      "result": {
        "original_header": "Chromosome scaffolder",
        "type": "Text_excerpt",
        "value": "The chromosome scaffolder tools allows to scaffold the assembled contigs using (large) reference scaffolds or chromosome sequences from the same or closely related species. For example, you've assembled a novel human genome and you wish to create a new reference genome with contigs placed on the chromosomes. The chromosome scaffolder will let you do exactly that. It will examine your contigs to see if there are any misassemblies in places where the contigs disagree with the reference using read alignments.  The scaffolder will then break the contigs at all putative misassembled locations,  creating clean contigs (you can disable that optionally). Then it will order and orient the clean contigs onto the chromosomes using the reference alignments. The scaffolder can be invoked as:\n```\nchromosome_scaffolder.sh [options]\n-r <reference genome> MANDATORY\n-q <assembly to be scaffolded with the reference> MANDATORY\n-t <number of threads>\n-i <minimum sequence similarity percentage: default 97>\n-m <merge equence alignments slack: default 100000>\n-nb do not align reads to query contigs and do not attempt to break at misassemblies: default off\n-v <verbose>\n-s <reads to align to the assembly to check for misassemblies> MANDATORY unless -nb set\n-cl <coverage threshold for splitting at misassemblies: default 3>\n-ch <repeat coverage threshold for splitting at misassemblies: default 30>\n-M attempt to fill unaligned gaps with reference contigs: defalut off\n-h|-u|--help this message\n```\nThis tool is primarily designed for assemblies wigh good contiguity produced from long PacBio or Nanopore reads. The long reads (minimum 20x coverage) can be supplied with -s option. If you do not supply the lobg reads, you must set the -nb option which will skip splitting contigs and scaffold them as is. The -cl and -ch options set the coverage thresholds for splitting at suspect misassemblies, I recommend keeping -cl option at 3 and setting -ch option to about 1.5x the coverage of the long reads supplied with the -s option.\n \n"
      },
      "source": "https://raw.githubusercontent.com/alekseyzimin/masurca/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9449489620859948,
      "result": {
        "original_header": "SAMBA scaffolder",
        "type": "Text_excerpt",
        "value": "SAMBA is a tool that is designed to scaffold and gap-fill existing genome assemblies with additional long-read data, resulting in substantially greater contiguity.  SAMBA is the only tool of its kind that also computes and fills in the sequence for all spanned gaps in the scaffolds, yielding much longer contigs.  \nPlease cite SAMBA as follows: Zimin AV, Salzberg SL. The SAMBA tool uses long reads to improve the contiguity of genome assemblies. PLoS computational biology. 2022 Feb 4;18(2):e1009860. \nThe invocation of SAMBA is as follows:\n```\nsamba.sh [options]\n-r <contigs or scaffolds in fasta format> \n-q <long reads or another assembly used to scaffold in fasta or fastq format, can be gzipped> \n-t <number of threads> \n-d <scaffolding data type: ont, pbclr or asm, default:ont> \n-m <minimum matching length, default:5000> \n-o <maximum overhang, default:1000> \n-a <optional: allowed merges file in the format per line: contig1 contig2, only pairs of contigs listed will be considered for merging, useful for intrascaffold gap filling>\n-v verbose flag\n-h|--help|-u|--usage this message\n```\nSAMBA installs with MaSuRCA and requires no external dependencies. The only parameter that is worth modifying is -m or the minimum matching length.  2000-2500 is a good value for small eukaryotis genomes 100-400Mb in size, 5000 is the default best value for large eukaryotic genomes (2-3Gbp), and 9000-10000 is the best value for large highly repetitive plant genomes (5Gbp+).   \nMaSuRCA also provides a wrapper script for SAMBA that allows to use SAMBA to close intra-scaffold gaps in an assembly. The usage is as follows:\n```\nclose_scaffold_gaps.sh [options]\n-r <scaffolds to gapclose> MANDATORY\n-q <sequences used for closing gaps,  can be long reads or another assembly, in fasta or fastq format, can ge gzipped> MANDATORY\n-t <number of threads, default:1>\n-i <identity% default:98>\n-m <minimum match length on the two sides of the gap, default:2500>\n-o <max overhang, default:1000>\n-v verbose flag\n-h|--help|-u|--usage this message\n```\nThe above script will split the scaffolds into contigs and then run SAMBA only allowing intrascaffold gaps to be filled.  Contig \"flips\" inside the scaffold are allowed, making this a great tool to gapfill and fix assemblies scaffolded with HiC data, because HiC scaffolding sometimes incorrectly flips contigs in scaffolds.\n \n"
      },
      "source": "https://raw.githubusercontent.com/alekseyzimin/masurca/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/alekseyzimin/masurca/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 35
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/alekseyzimin/masurca/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "alekseyzimin/masurca"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MaSuRCA Genome Assembly and Analysis Toolkit Quick Start Guide"
      },
      "source": "https://raw.githubusercontent.com/alekseyzimin/masurca/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/alekseyzimin/masurca/master/add_flye.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "MaSuRCA Genome Assembly and Analysis Toolkit Quick Start Guide",
        "type": "Text_excerpt",
        "value": "The MaSuRCA (Maryland Super Read Cabog Assembler) genome assembly and analysis toolkit contains of MaSuRCA genome assembler, QuORUM error corrector for Illumina data, POLCA genome polishing software, Chromosome scaffolder, jellyfish mer counter, and MUMmer aligner.  The usage instructions for the additional tools that are exclusive to MaSuRCA, such as POLCA and Chromosome scaffolder are provided at the end of this Guide. \n\nThe MaSuRCA assembler combines the benefits of deBruijn graph and Overlap-Layout-Consensus assembly approaches. Since version 3.2.1 it supports hybrid assembly with short Illumina reads and long high error PacBio/MinION data.\n\nCitation for MaSuRCA: Zimin AV, Mar\u00e7ais G, Puiu D, Roberts M, Salzberg SL, Yorke JA. The MaSuRCA genome assembler. Bioinformatics. 2013 Nov 1;29(21):2669-77.\n\nCitation for MaSuRCA hybrid assembler: Zimin AV, Puiu D, Luo MC, Zhu T, Koren S, Yorke JA, Dvorak J, Salzberg S. Hybrid assembly of the large and highly repetitive genome of Aegilops tauschii, a progenitor of bread wheat, with the mega-reads algorithm. Genome Research. 2017 Jan 1:066100.\n\nThis project is governed by the code of conduct at https://github.com/alekseyzimin/masurca/blob/master/code_of_conduct.md\n"
      },
      "source": "https://raw.githubusercontent.com/alekseyzimin/masurca/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Installation instructions",
        "type": "Text_excerpt",
        "value": "To install, first download the latest distribution from the github release page https://github.com/alekseyzimin/masurca/releases.Then untar/unzip the package MaSuRCA-X.X.X.tgz, cd to the resulting folder and run `./install.sh`.  The installation script will configure and make all necessary packages.\n\nOnly for developers:  you can clone the development tree, but then there are dependencies such as swig and yaggo (http://www.swig.org/ and https://github.com/gmarcais/yaggo) that must be available on the PATH:\n\n```\ngit clone https://github.com/alekseyzimin/masurca\ngit submodule init\ngit submodule update\nmake\n```\nNote that on some systems you may encounter a build error due to lack of xlocale.h file, because it was removed in glibc 2.26.  xlocale.h is used in Perl extension modules used by MaSuRCA.  To fix/work around this error, you can upgrade the Perl extensions, or create a symlink for xlocale.h to /etc/local.h or /usr/include/locale.h, e.g.:\n```\nln -s /usr/include/locale.h /usr/include/xlocale.h\n```\n"
      },
      "source": "https://raw.githubusercontent.com/alekseyzimin/masurca/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9327617439506417,
      "result": {
        "original_header": "The masurca and the assemble.sh scripts.",
        "type": "Text_excerpt",
        "value": "Once you\u2019ve created a configuration file, use the `masurca` script from the MaSuRCA bin directory to generate the `assemble.sh` shell script that executes the assembly: \n`$ /install_path/ MaSuRCA-X.X.X/bin/masurca config.txt` \nTo run the assembly, execute `assemble.sh`. \nTypically upon completion of the successful assembly, the current directory, where `assemble.sh` was generated, will contain the following files, in reverse chronological order: \n`unitig_cov.txt`\tCABOG coverage statistics \n`mates_to_break.txt`\tFile that lists the jumping library mates that are to be removed, if the jumping library clone coverage exceeds the LIMIT_JUMP_COVERAGE parameter  \n`compute_jump_coverage.txt`\tSupplementary file used to compute clone coverage of the jumping library, post-filtering \n`work2.1/`\tworking directory for secondary jumping filter based on the variable k-mer size \n`assemble.sh`\tthe original assemble.sh script\n \n"
      },
      "source": "https://raw.githubusercontent.com/alekseyzimin/masurca/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9805188541395818,
      "result": {
        "original_header": "Restarting a failed assembly.",
        "type": "Text_excerpt",
        "value": "If something fails or goes wrong, or you noticed a mistake made in configuration, you can stop and re-start the assembly as follows. \n\u2022\tRun $/install_path/MaSuRCA-X.X.X/bin/masurca config.txt in the assembly directory.  This will create a new `assemble.sh` script \naccounting for the files that are already present and checking for all dependencies to only run the steps that need to be run \n\u2022\tRun ./assemble.sh \n$/install_path/MaSuRCA-X.X.X/bin/masurca config.txt and execute  `assemble.sh` \n\u2022\tif you noticed that you omitted or misspecified one of the jumping library files, add the files to the DATA section of config.txt and run $/install_path/ MaSuRCA-X.X.X/bin/masurca config.txt and execute `assemble.sh` \n\u2022\tif error correction failed then remove the files named `??.cor.fa` and then run $/install_path/ MaSuRCA-X.X.X/bin/masurca config.txt and execute `assemble.sh`\n \n"
      },
      "source": "https://raw.githubusercontent.com/alekseyzimin/masurca/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9380422455558401,
      "result": {
        "original_header": "POLCA",
        "type": "Text_excerpt",
        "value": "POLCA has one external dependency: bwa mem aligner (http://bio-bwa.sourceforge.net/).  It requires that bwa mem aligner is available on the $PATH. \nUsage: \n```\npolca.sh [options]\n-a <assembly fasta file> \n-r <'polishing _reads1.fastq polishing_reads2.fastq'> \n-t <number of cpus> \n-n <optional: do not fix errors, just call variants> \n-m <optional: memory per thread to use in samtools sort>\n```\nExample: \npolca.sh -a genome.fasta -r 'reads1.fastq reads2.fastq.gz' -t 16 -m 1G \n$ introduce_errors_fasta_file.pl sequence.fasta error_probability <optional:maximum_indel_size, default 20> > errors.evcf \n"
      },
      "source": "https://raw.githubusercontent.com/alekseyzimin/masurca/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8174398094616256,
      "result": {
        "original_header": "The masurca and the assemble.sh scripts.",
        "type": "Text_excerpt",
        "value": "`genome.uid`\tFile relating UID to read name for CABOG \n"
      },
      "source": "https://raw.githubusercontent.com/alekseyzimin/masurca/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8459014657170532,
      "result": {
        "original_header": "Restarting a failed assembly.",
        "type": "Text_excerpt",
        "value": "\u2022\tRun ./assemble.sh \n"
      },
      "source": "https://raw.githubusercontent.com/alekseyzimin/masurca/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.801682095575186,
      "result": {
        "original_header": "POLCA",
        "type": "Text_excerpt",
        "value": "Usage: \n```\npolca.sh [options]\n-a <assembly fasta file> \n-r <'polishing _reads1.fastq polishing_reads2.fastq'> \n-t <number of cpus> \n-n <optional: do not fix errors, just call variants> \n-m <optional: memory per thread to use in samtools sort>\n```\nExample: \n"
      },
      "source": "https://raw.githubusercontent.com/alekseyzimin/masurca/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/alekseyzimin/masurca/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "assembly, bioinformatics, genome, masurca"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "GNU General Public License v3.0",
        "spdx_id": "GPL-3.0",
        "type": "License",
        "url": "https://api.github.com/licenses/gpl-3.0",
        "value": "https://api.github.com/licenses/gpl-3.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "masurca"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "alekseyzimin"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "M4",
        "size": 80205,
        "type": "Programming_language",
        "value": "M4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 29186,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 4471,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 1173,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/alekseyzimin/masurca/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "alekseyzimin",
          "type": "User"
        },
        "date_created": "2024-02-23T14:05:13Z",
        "date_published": "2024-02-23T14:09:10Z",
        "description": "This release contained bug fixes and improvements.  There is a new option for running mega-reads on the grid: GRID_ENGINE=MANUAL.  This option will produce a script to run mega-reads correction jobs on multiple servers manually, and provide instructions on how to execute the jobs and restart the assembly.\r\n\r\nPlease install MaSuRCA from the attached archive MaSuRCA-4.1.1.tar.gz.  Do not use the Source files.",
        "html_url": "https://github.com/alekseyzimin/masurca/releases/tag/v4.1.1",
        "name": "MaSuRCA v4.1.1",
        "release_id": 143358099,
        "tag": "v4.1.1",
        "tarball_url": "https://api.github.com/repos/alekseyzimin/masurca/tarball/v4.1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/alekseyzimin/masurca/releases/143358099",
        "value": "https://api.github.com/repos/alekseyzimin/masurca/releases/143358099",
        "zipball_url": "https://api.github.com/repos/alekseyzimin/masurca/zipball/v4.1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "alekseyzimin",
          "type": "User"
        },
        "date_created": "2023-01-09T17:45:28Z",
        "date_published": "2023-01-09T17:49:57Z",
        "description": "This release introduces multiple improvements and compatibility fixes:\r\n\r\n- Eugene annotation pipeline (eugene.sh), based on Maker software was improved significantly, \r\n- SAMBA scaffolder's performance and accuracy improved, \r\n- MaSuRCA assembler code added compatibility fixes that prevented it from running on some systems that do not support numactl \r\n- close_scaffold_gaps.sh, a wrapper for SAMBA scaffolder aimed at closing gaps in existing scaffolds was improved",
        "html_url": "https://github.com/alekseyzimin/masurca/releases/tag/v4.1.0",
        "name": "MaSuRCA 4.1.0",
        "release_id": 88339946,
        "tag": "v4.1.0",
        "tarball_url": "https://api.github.com/repos/alekseyzimin/masurca/tarball/v4.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/alekseyzimin/masurca/releases/88339946",
        "value": "https://api.github.com/repos/alekseyzimin/masurca/releases/88339946",
        "zipball_url": "https://api.github.com/repos/alekseyzimin/masurca/zipball/v4.1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "alekseyzimin",
          "type": "User"
        },
        "date_created": "2022-04-12T14:15:44Z",
        "date_published": "2022-04-12T14:16:54Z",
        "description": "This release has major improvements to SAMBA scaffolder, and minor improvements to POLCA polisher and reference-based chromosome scaffolder.  \r\n\r\nDetection of misassemblies in SAMBA is improved, along with accuracy of gap-filling consensus sequences and structural quality of the output contigs.  If scaffolds with gaps are given to SAMBA, it will now not consider gaps misassemblies and will avoid splitting at or near gaps.  SAMBA runs automatically as the last step in MaSuRCA assembler resulting in more contiguous and correct assemblies.\r\n\r\nPOLCA polisher now outputs the QV value.  POLCA can be also used as an integrated variant calling/assembly evaluation pipeline.  With \"-n\" switch it will not make any changes in the assembly, it will produce a vcf file with all variant calls in the reads against the assembly, and output evaluation of consensus quality.\r\n\r\nThe close_scaffold_gaps.sh wrapper to SAMBA has been improved as well, and this script can be used to effectively close gaps in scaffolds with another assembly (or a reference genome for closely related species) or additional long-read data. Usage: close_scaffold_gaps.sh -h.\r\n\r\nPerformance, stability and accuracy of the chromosome scaffolder tool (chromosome_scaffolder.sh) has been improved.\r\n\r\nMINOR UPDATE 04/29/2022:  removed deprecated sys/sysctl.h header from CA8.  The header was deprecated in glibc 2.32, and its presence prevented compilation on newer systems.",
        "html_url": "https://github.com/alekseyzimin/masurca/releases/tag/v4.0.9",
        "name": "MaSuRCA 4.0.9",
        "release_id": 64250464,
        "tag": "v4.0.9",
        "tarball_url": "https://api.github.com/repos/alekseyzimin/masurca/tarball/v4.0.9",
        "type": "Release",
        "url": "https://api.github.com/repos/alekseyzimin/masurca/releases/64250464",
        "value": "https://api.github.com/repos/alekseyzimin/masurca/releases/64250464",
        "zipball_url": "https://api.github.com/repos/alekseyzimin/masurca/zipball/v4.0.9"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "alekseyzimin",
          "type": "User"
        },
        "date_created": "2022-02-09T17:03:38Z",
        "date_published": "2022-02-09T22:54:43Z",
        "description": "This release fixes a bug in SAMBA that resulted in failure in nucmer alignment step on some data sets. \r\nSAMBA can now use gzipped fasta file for scaffolding sequences.  The sequences to be scaffolded have to be in fasta format, not gzipped.\r\nThis release also improves usage messages. ",
        "html_url": "https://github.com/alekseyzimin/masurca/releases/tag/v4.0.8",
        "name": "MaSuRCA 4.0.8",
        "release_id": 59181381,
        "tag": "v4.0.8",
        "tarball_url": "https://api.github.com/repos/alekseyzimin/masurca/tarball/v4.0.8",
        "type": "Release",
        "url": "https://api.github.com/repos/alekseyzimin/masurca/releases/59181381",
        "value": "https://api.github.com/repos/alekseyzimin/masurca/releases/59181381",
        "zipball_url": "https://api.github.com/repos/alekseyzimin/masurca/zipball/v4.0.8"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "alekseyzimin",
          "type": "User"
        },
        "date_created": "2022-01-13T21:23:13Z",
        "date_published": "2022-01-13T21:25:55Z",
        "description": "This release has significant improvements to SAMBA scaffolder, in error rates, output contiguity, and consensus quality.  Since SAMBA now is part of default MaSuRCA assembly pipeline, the quality and contiguity of the MaSuRCA assemblies improves as well.\r\nI also added assembly QV computation to POLCA, QV for the assembly is now reported in .report file, along with the other metrics. Note that POLCA polisher has -n option that allows it to run in \"evaluation\" mode where it outputs number or errors it detects in the assembly, but does not make any corrections. After that one can rerun the pipeline without -n switch to make corrections.  Also -n option is useful for efficiently producing VCF file containing variant calls made by freebayes. ",
        "html_url": "https://github.com/alekseyzimin/masurca/releases/tag/v4.0.7",
        "name": "MaSuRCA 4.0.7",
        "release_id": 57047241,
        "tag": "v4.0.7",
        "tarball_url": "https://api.github.com/repos/alekseyzimin/masurca/tarball/v4.0.7",
        "type": "Release",
        "url": "https://api.github.com/repos/alekseyzimin/masurca/releases/57047241",
        "value": "https://api.github.com/repos/alekseyzimin/masurca/releases/57047241",
        "zipball_url": "https://api.github.com/repos/alekseyzimin/masurca/zipball/v4.0.7"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "alekseyzimin",
          "type": "User"
        },
        "date_created": "2021-12-08T15:38:44Z",
        "date_published": "2021-12-08T16:42:24Z",
        "description": "The 4.0.6 release introduces code cleanup and performance improvements in MaSuRCA assembly pipeline, POLCA error correction/assembly evaluation tool and SAMBA scaffolder. \r\nIn response to the several issues raised by the users with use of POLCA and chromosome scaffolder, I recommend that users install MaSuRCA in a separate folder with the provided install.sh script as opposed to installing it globally into /usr/local/bin.  MaSuRCA is self-contained and it does not require root privileges to compile, install and run.  Many components of MaSuRCA depend on having appropriate versions of binaries such as samtools, mummer and jellyfish, that are provided with MaSuRCA and may produce errors is the system attempts to use different versions of these tools available on the $PATH. For these specific versions MaSuRCA will always first look to use the binaries installed under /path-to/MaSuRCA-x.x.x/bin/.  ",
        "html_url": "https://github.com/alekseyzimin/masurca/releases/tag/v4.0.6",
        "name": "MaSuRCA 4.0.6",
        "release_id": 54888320,
        "tag": "v4.0.6",
        "tarball_url": "https://api.github.com/repos/alekseyzimin/masurca/tarball/v4.0.6",
        "type": "Release",
        "url": "https://api.github.com/repos/alekseyzimin/masurca/releases/54888320",
        "value": "https://api.github.com/repos/alekseyzimin/masurca/releases/54888320",
        "zipball_url": "https://api.github.com/repos/alekseyzimin/masurca/zipball/v4.0.6"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "alekseyzimin",
          "type": "User"
        },
        "date_created": "2021-08-31T15:46:29Z",
        "date_published": "2021-08-31T15:47:52Z",
        "description": "This is a maintenance release that improves the stability of masurca scaffolder (soon to be published as SAMBA tool), and improves speed and consensus quality of the hybrid assemblies.  \r\nMajor changes:\r\n1. upgraded swig headers to version 4.0.2\r\n2. fixed occasional division by zero bug in masurca scaffolder\r\n3. removed the step of k-mer size reduction for the super-reads, it is not needed with the improvements that has been made recently\r\n4. the masurca_scaffolder.sh tool has been renamed to samba.sh tool (manuscript in preparation)\r\n5. The SAMBA tool can be used to close intrascaffold gaps when invoked through close_scaffold_gaps.sh script.\r\n \r\n",
        "html_url": "https://github.com/alekseyzimin/masurca/releases/tag/v4.0.5",
        "name": "MaSuRCA 4.0.5",
        "release_id": 48139097,
        "tag": "v4.0.5",
        "tarball_url": "https://api.github.com/repos/alekseyzimin/masurca/tarball/v4.0.5",
        "type": "Release",
        "url": "https://api.github.com/repos/alekseyzimin/masurca/releases/48139097",
        "value": "https://api.github.com/repos/alekseyzimin/masurca/releases/48139097",
        "zipball_url": "https://api.github.com/repos/alekseyzimin/masurca/zipball/v4.0.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "alekseyzimin",
          "type": "User"
        },
        "date_created": "2021-06-28T15:52:26Z",
        "date_published": "2021-06-28T15:58:16Z",
        "description": "This release adds MaSuRCA scaffolder to the code.  The MaSuRCA scaffolder scaffolds and gapfills existing assembled contigs or scaffolds with long reads from PacBio or Oxford Nanopore technologies, or contigs or scaffolds from another assembly of the same genome.  The gapfill sequence is computed from PacBio or Nanopore consensus. The scaffoldder runs automatically as post-processor for assembly internally, resulting in significant improvement in assembly contiguity.  The scaffolder script is called masurca_scaffold.sh and is invoked as follows:\r\n\r\nmasurca_scaffold.sh -r <contigs or scaffolds fasta> -q <fasta sequences or long reads or contigs from another assembly to use for scaffolding> -t <number of threads> -o <maximum overhang, default 1000> -m <minimum matching length, default 5000>\r\n\r\nAlso I updated the code of several submodules to make it compatible with C++10.",
        "html_url": "https://github.com/alekseyzimin/masurca/releases/tag/v4.0.4",
        "name": "MaSuRCA 4.0.4",
        "release_id": 45367702,
        "tag": "v4.0.4",
        "tarball_url": "https://api.github.com/repos/alekseyzimin/masurca/tarball/v4.0.4",
        "type": "Release",
        "url": "https://api.github.com/repos/alekseyzimin/masurca/releases/45367702",
        "value": "https://api.github.com/repos/alekseyzimin/masurca/releases/45367702",
        "zipball_url": "https://api.github.com/repos/alekseyzimin/masurca/zipball/v4.0.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "alekseyzimin",
          "type": "User"
        },
        "date_created": "2021-03-23T19:06:26Z",
        "date_published": "2021-03-23T19:19:28Z",
        "description": "This release adds a new quick-run option for small projects that allows to skip editing a configuration file and specify the data on the command line. \r\nIf your project uses data from a single Illumina run that produced either on file of single-end reads or two files for paired end reads, and optionally a single file containing long Nanopore or PacBio reads, you can skip creating a configuration file and use simple command-line interface to run MaSuRCA. The options are described in the usage message that invokes using -h or --help switch.  There are three command line switches, -i, -t and -r.  -t specifies the number of threads to use, -i specifies the names and paths to Illumina paired end reads files and -r specifies the name and the path to the long reads file.  For example:\r\n\r\n/path_to_MaSuRCA/bin/masurca -t 32 -i /path_to/pe_R1.fa,/path_to/pe_R2.fa\r\n\r\nwill run assembly with only Illumina paired end reads from files path_to/pe_R1.fa (forward) and path_to/pe_R2.fa (reverse). An example of the hybrid assembly:\r\n\r\n/path_to_MaSuRCA/bin/masurca -t 32 -i /path_to/pe_R1.fa,/path_to/pe_R2.fa -r /path_to/nanopore.fastq.gz\r\n\r\nThis command will run a hybrid assembly, correcting nanopore reads with Illumina data first.  Ilumina paired end reads files must be fastq, can be gzipped, and Nanopore/PacBio data files for the -r option can be fasta or fastq and can be gzipped. ",
        "html_url": "https://github.com/alekseyzimin/masurca/releases/tag/v4.0.3",
        "name": "MaSuRCA 4.0.3",
        "release_id": 40245179,
        "tag": "v4.0.3",
        "tarball_url": "https://api.github.com/repos/alekseyzimin/masurca/tarball/v4.0.3",
        "type": "Release",
        "url": "https://api.github.com/repos/alekseyzimin/masurca/releases/40245179",
        "value": "https://api.github.com/repos/alekseyzimin/masurca/releases/40245179",
        "zipball_url": "https://api.github.com/repos/alekseyzimin/masurca/zipball/v4.0.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "alekseyzimin",
          "type": "User"
        },
        "date_created": "2021-03-22T14:16:55Z",
        "date_published": "2021-03-22T14:23:13Z",
        "description": "This release benefits from additional code streamlining and parameter optimizations,  resulting in improved assembly speed and contiguity. CABOG assemblies now have improved haplotype filtering, reporting primary assembly and alternative haplotype separately. Also includes improvements for overall stability.",
        "html_url": "https://github.com/alekseyzimin/masurca/releases/tag/v4.0.2",
        "name": "MaSuRCA 4.0.2",
        "release_id": 40164257,
        "tag": "v4.0.2",
        "tarball_url": "https://api.github.com/repos/alekseyzimin/masurca/tarball/v4.0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/alekseyzimin/masurca/releases/40164257",
        "value": "https://api.github.com/repos/alekseyzimin/masurca/releases/40164257",
        "zipball_url": "https://api.github.com/repos/alekseyzimin/masurca/zipball/v4.0.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "alekseyzimin",
          "type": "User"
        },
        "date_created": "2021-01-22T12:24:44Z",
        "date_published": "2021-01-22T13:58:08Z",
        "description": "This release contains major improvements in speed of hybrid assemblies.  Thanks to the new k-unitig pre-correction algorithm, the speed of mega-reads algorithm, that corrects the long high error reads from Oxford Nanopore or Pacific Biosciences platforms, increased by about a factor of 6.  The new algorithm eliminated the need to run second pass of the mega-reads, resulting on lower memory requirements. This results in major improvements of run times, especially for big genomes.  It is now possible to run an hybrid assembly of a human genome starting with ~60x Illumina paired end data and ~30x Oxford Nanopore data in less than 6 days on a small computing cluster with ~200 CPU-cores. Bigger clusters will allow for assembly run times of as little as 2-3 days.  As always, MaSuRCA hybrid assemblies output high quality consensus that does not require any polishing, and they can be used without any additional post-processing for downstream steps, such as annotation, in any genome project.\r\n\r\nThis release also includes many stability and efficiency improvements.  Here are some highlights:\r\n1. worked around the \"consensus sequence mismatch\" error in POLCA that occurred rarely in complex sequence regions\r\n2. chromosome scaffolder now picks low and high coverage thresholds automatically based on mapped read coverage\r\n3. improved chromosome scaffolder speed and accuracy using more efficient algorithms \r\n4. updated the version of MUMmer to 4.0.0rc1\r\n5. fixed a bug that sometimes caused minor under-reporting of actual errors in POLCA report file\r\n",
        "html_url": "https://github.com/alekseyzimin/masurca/releases/tag/v4.0.1",
        "name": "MaSuRCA 4.0.1",
        "release_id": 36769341,
        "tag": "v4.0.1",
        "tarball_url": "https://api.github.com/repos/alekseyzimin/masurca/tarball/v4.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/alekseyzimin/masurca/releases/36769341",
        "value": "https://api.github.com/repos/alekseyzimin/masurca/releases/36769341",
        "zipball_url": "https://api.github.com/repos/alekseyzimin/masurca/zipball/v4.0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "alekseyzimin",
          "type": "User"
        },
        "date_created": "2020-09-28T13:40:24Z",
        "date_published": "2020-09-28T19:22:49Z",
        "description": "This release contains speed improvements of 20-40%, depending on the genome, in the main mega-reads module.  The mega-reads construction is the step in the assembly that takes the longest, and, when using Flye as contigger, the improvements speed up the assembly by 15-30%.  The improvements stem from more efficient use of k-mers in creating the approximate alignments.\r\nThere is new utility called delta2vcf.pl in the MUMmer package.  This utility converts nucmer delta file supplied on stdin to a vcf file.  The vcf file lists all substitutions, insertions and deletions in the reference detected with query alignments. This is useful, for example, when comparing two assemblies, or when polishing one assembly with contigs from another assembly.\r\nThere are other fixes and performance improvements in the chromosome scaffolder script and the reference assembly pipeline.",
        "html_url": "https://github.com/alekseyzimin/masurca/releases/tag/v3.4.2",
        "name": "MaSuRCA 3.4.2",
        "release_id": 31902333,
        "tag": "v3.4.2",
        "tarball_url": "https://api.github.com/repos/alekseyzimin/masurca/tarball/v3.4.2",
        "type": "Release",
        "url": "https://api.github.com/repos/alekseyzimin/masurca/releases/31902333",
        "value": "https://api.github.com/repos/alekseyzimin/masurca/releases/31902333",
        "zipball_url": "https://api.github.com/repos/alekseyzimin/masurca/zipball/v3.4.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "alekseyzimin",
          "type": "User"
        },
        "date_created": "2020-05-06T14:08:56Z",
        "date_published": "2020-05-06T20:58:04Z",
        "description": "This release features major improvements to POLCA polishing software, making it more sensitive and accurate.  Speed is improved on multi-core systems by more efficient load balancing. I also improved chromosome scaffolder, to fix overly aggressive insertion of reference sequence to fill gaps, which sometimes resulted in erroneous sequence duplications.",
        "html_url": "https://github.com/alekseyzimin/masurca/releases/tag/v3.4.1",
        "name": "MaSuRCA 3.4.1",
        "release_id": 26228621,
        "tag": "v3.4.1",
        "tarball_url": "https://api.github.com/repos/alekseyzimin/masurca/tarball/v3.4.1",
        "type": "Release",
        "url": "https://api.github.com/repos/alekseyzimin/masurca/releases/26228621",
        "value": "https://api.github.com/repos/alekseyzimin/masurca/releases/26228621",
        "zipball_url": "https://api.github.com/repos/alekseyzimin/masurca/zipball/v3.4.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "alekseyzimin",
          "type": "User"
        },
        "date_created": "2020-04-20T13:16:49Z",
        "date_published": "2020-04-20T13:23:27Z",
        "description": "In this release I include performance and stability fixes:\r\n\r\n1. Join consensus jobs can now run on grid.  Overall stability has improved, jobs no longer fail due to memory leaks.  Replaced nucmer --maxmatch with nucmer --batch option in join consensus.\r\n2. Improved chromosome scaffolder.  It now uses minimap2 instead of blasr for mapping long reads to the assembly.\r\n3. Other minor fixes.",
        "html_url": "https://github.com/alekseyzimin/masurca/releases/tag/v3.4.0",
        "name": "MaSuRCA 3.4.0",
        "release_id": 25679480,
        "tag": "v3.4.0",
        "tarball_url": "https://api.github.com/repos/alekseyzimin/masurca/tarball/v3.4.0",
        "type": "Release",
        "url": "https://api.github.com/repos/alekseyzimin/masurca/releases/25679480",
        "value": "https://api.github.com/repos/alekseyzimin/masurca/releases/25679480",
        "zipball_url": "https://api.github.com/repos/alekseyzimin/masurca/zipball/v3.4.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "alekseyzimin",
          "type": "User"
        },
        "date_created": "2020-03-12T19:34:01Z",
        "date_published": "2020-03-12T19:35:34Z",
        "description": "This is a maintenance release.  Bugs fixed:\r\n\r\n1. polca.sh fails if assembly (-a) specified with absolute path\r\n2. incorrect version reported in masurca --version\r\n3. added check for k-unitigs file for re-running failed assembly\r\n\r\n",
        "html_url": "https://github.com/alekseyzimin/masurca/releases/tag/v3.3.9",
        "name": "MaSuRCA 3.3.9",
        "release_id": 24477168,
        "tag": "v3.3.9",
        "tarball_url": "https://api.github.com/repos/alekseyzimin/masurca/tarball/v3.3.9",
        "type": "Release",
        "url": "https://api.github.com/repos/alekseyzimin/masurca/releases/24477168",
        "value": "https://api.github.com/repos/alekseyzimin/masurca/releases/24477168",
        "zipball_url": "https://api.github.com/repos/alekseyzimin/masurca/zipball/v3.3.9"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "alekseyzimin",
          "type": "User"
        },
        "date_created": "2020-03-11T14:36:18Z",
        "date_published": "2020-03-11T14:43:35Z",
        "description": "This release has code cleanup and maintenance improvements.  There is an additional method for re-doing failed gap consensus jobs for PacBio and Nanopore reads which results in gap consensus always succeeding.  I cleaned up warning and error messages from gap consensus because they have no value to the user -- the failed jobs will be re-done and all will eventually succeed anyway.  This improves contiguity and accuracy of assemblies in hard-to-assemble repetitive regions.\r\n\r\nPOLCA tool can now use PacBio HIFI reads for polishing assemblies (minimum 25-30x coverage required for reliability).  Human genome polishing time is less than 20 hours on one 32-core server.  Thus includes time needed for indexing and alignment.\r\n\r\n",
        "html_url": "https://github.com/alekseyzimin/masurca/releases/tag/v3.3.8",
        "name": "MaSuRCA 3.3.8",
        "release_id": 24429275,
        "tag": "v3.3.8",
        "tarball_url": "https://api.github.com/repos/alekseyzimin/masurca/tarball/v3.3.8",
        "type": "Release",
        "url": "https://api.github.com/repos/alekseyzimin/masurca/releases/24429275",
        "value": "https://api.github.com/repos/alekseyzimin/masurca/releases/24429275",
        "zipball_url": "https://api.github.com/repos/alekseyzimin/masurca/zipball/v3.3.8"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "alekseyzimin",
          "type": "User"
        },
        "date_created": "2020-02-14T18:16:02Z",
        "date_published": "2020-02-14T19:05:12Z",
        "description": "In this release there are two major changes.  I updated the version of the Flye assembler used in MaSuRCA to version 2.5 which resulted in substantial (20-50%) improvements in resulting assembly contiguity when Flye is used.  For Pacbio+Illumina PE or Nanopore+Illimina PE assembly I would now recommend using Flye over CABOG by setting FLYE_ASSEMBLY=1 in the config file, as it is much faster than CABOG and produces superior assemblies. \r\n\r\nI also updated the chromosome_scaffolder.sh script which can be used to create chromosome sized scaffolds from the assembled contigs using reference genome.  For example, you've assembled a novel human genome and you wish to create a reference-like genome with contigs placed on the chromosomes.  The chromosome scaffolder will let you do exactly that.  It will examine your contigs to see if there are any misassemblies in places where the contigs disagree with the reference and break them creating clean contigs (you can disable that optionally), and then it would order and orient the clean contigs onto the chromosomes using the reference alignments.  ",
        "html_url": "https://github.com/alekseyzimin/masurca/releases/tag/v3.3.7",
        "name": "MaSuRCA 3.3.7",
        "release_id": 23690032,
        "tag": "v3.3.7",
        "tarball_url": "https://api.github.com/repos/alekseyzimin/masurca/tarball/v3.3.7",
        "type": "Release",
        "url": "https://api.github.com/repos/alekseyzimin/masurca/releases/23690032",
        "value": "https://api.github.com/repos/alekseyzimin/masurca/releases/23690032",
        "zipball_url": "https://api.github.com/repos/alekseyzimin/masurca/zipball/v3.3.7"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "alekseyzimin",
          "type": "User"
        },
        "date_created": "2020-02-06T21:08:29Z",
        "date_published": "2020-02-06T21:49:57Z",
        "description": "This release contains minor cosmetic fixes.  POLCA tool now checks for all dependencies at runtime and reports and error is a dependency is not found.  Gap consensus in MaSuRCA does not report an error if no gap consensus jobs can be created, that is, gap consensus is not needed.",
        "html_url": "https://github.com/alekseyzimin/masurca/releases/tag/v3.3.6",
        "name": "MaSuRCA 3.3.6",
        "release_id": 23461581,
        "tag": "v3.3.6",
        "tarball_url": "https://api.github.com/repos/alekseyzimin/masurca/tarball/v3.3.6",
        "type": "Release",
        "url": "https://api.github.com/repos/alekseyzimin/masurca/releases/23461581",
        "value": "https://api.github.com/repos/alekseyzimin/masurca/releases/23461581",
        "zipball_url": "https://api.github.com/repos/alekseyzimin/masurca/zipball/v3.3.6"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "alekseyzimin",
          "type": "User"
        },
        "date_created": "2019-12-16T18:48:46Z",
        "date_published": "2019-12-16T18:52:51Z",
        "description": "In this release I improved the genome polishing software masurca-polish and renamed it to POLCA (POLishing by Calling Alternatives).  POLCA usage is described under Additional Tools section in the MaSuRCA README.md file. I also improved the performance of the chromosome scaffolder tool, it now misses less sequence in the alignments thanks to adding random noise to the reference sequence to create unique seeds.  There are other minor performance improvements. \r\n\r\nUpdate 12/19/19: fixed bug in polca.sh that prevented using multiple Illumina read files for polishing",
        "html_url": "https://github.com/alekseyzimin/masurca/releases/tag/v3.3.5",
        "name": "MaSuRCA 3.3.5",
        "release_id": 22265734,
        "tag": "v3.3.5",
        "tarball_url": "https://api.github.com/repos/alekseyzimin/masurca/tarball/v3.3.5",
        "type": "Release",
        "url": "https://api.github.com/repos/alekseyzimin/masurca/releases/22265734",
        "value": "https://api.github.com/repos/alekseyzimin/masurca/releases/22265734",
        "zipball_url": "https://api.github.com/repos/alekseyzimin/masurca/zipball/v3.3.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "alekseyzimin",
          "type": "User"
        },
        "date_created": "2019-09-13T16:35:09Z",
        "date_published": "2019-09-13T16:37:53Z",
        "description": "In this new release I improved functionality of two components: \r\n1. chromosome scaffolder \r\n2. MaSuRCA-polish tool \r\n\r\nThe chromosome scaffolder tools allows to scaffold the assembled contigs using (large) reference scaffolds from the same or closely related species. The scaffolder can be invoked as:\r\n\r\nchromosome_scaffolder.sh -r <reference genome> -q <assembly to be scaffolded with the reference> -t <number of threads> -i <minimum sequence similarity percentage> -m <merge polishing sequence alignments slack (advanced)> -v <verbose> -s <reads to align to the assembly to check for misassemblies> -cl <coverage threshold for splitting at misassemblies, default 3> -ch <repeat coverage threshold for splitting at misassemblies, default 30>\r\n\r\nThis tool is primarily designed for assemblies produced from long PacBio or Nanopore reads.  The long reads (minimum 20x coverage) must be supplied with -s option. The -cl and -ch options set the coverage thresholds for splitting at suspect misassemblies, I recommend keeping -cl option at 3 and setting -ch option to about 1.5x the coverage of the long reads supplied with the -s option. \r\n\r\nThe MaSuRCA-polish tool is designed to detect and correct single-base and short insertion/deletion errors in assembled genomes using Illumina data.  The tool is is partially based on the error evaluation method described in (Jain et al, 2018).  It works best for assemblies with at least 99% consensus quality, as it is based on mapping Illumina reads to the assembly, and mapping accuracy decreases as assembly error rate increases.    The consensus quality is usually upgraded to 99.95% or better.  The tool can be run iteratively.  The usage is:\r\n\r\nmasurca-polish.sh -a <assembly contigs or scaffolds> -r <'Illumina_reads_fastq1 Illumina_reads_fastq'> -t <number of threads> [-n] <optional:do not fix errors that are found>\r\n\r\nThe tool requires that \"freebayes\" variant caller https://github.com/ekg/freebayes and \"bwa mem\" aligner (http://bio-bwa.sourceforge.net/) are installed and available on the PATH.  Illumina reads fastq files can be gzipped.  Multiple Illumina fastq files can be supplied as shown, inside ' '.  You can choose to not fix errors, this will make the script run marginally faster.\r\n\r\nNote that a beta version of the tool was called evaluate_consensus_error_rate.sh in earlier MaSuRCA releases.\r\n\r\nSmall update to the release fixing rarely occurring multiprocessing bug on some systems. 09/24/19",
        "html_url": "https://github.com/alekseyzimin/masurca/releases/tag/v3.3.4",
        "name": "MaSuRCA 3.3.4",
        "release_id": 19978956,
        "tag": "v3.3.4",
        "tarball_url": "https://api.github.com/repos/alekseyzimin/masurca/tarball/v3.3.4",
        "type": "Release",
        "url": "https://api.github.com/repos/alekseyzimin/masurca/releases/19978956",
        "value": "https://api.github.com/repos/alekseyzimin/masurca/releases/19978956",
        "zipball_url": "https://api.github.com/repos/alekseyzimin/masurca/zipball/v3.3.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "alekseyzimin",
          "type": "User"
        },
        "date_created": "2019-05-31T13:41:28Z",
        "date_published": "2019-06-03T14:19:24Z",
        "description": "This new release has major improvements in assembly quality and contiguity. The improvements are most pronounced for FLYE_ASSEMBLY option that used Flye assembler to produce final assembly of mega-reads built from PacBio or Nanopore data. For example, on an Arabidopsis thaliana 100x Illumina+40x PacBio reads data set final N50 assembly size increased from 4.5Mbp to 7Mbp for Flye assembly option.  With CABOG assembly the N50 is still bigger, about 10Mbp, but after splitting at misassemblies, the N50's become more comparable at 7Mbp for CABOG assembly (default) and 6Mbp for Flye assembly.  Flye assembler is very accurate and fast.\r\n\r\nTo remind, the option to use Flye for final assembly is enabled by setting \r\nFLYE_ASSEMBLY=1\r\nin configuration file.",
        "html_url": "https://github.com/alekseyzimin/masurca/releases/tag/v3.3.3",
        "name": "MaSuRCA 3.3.3",
        "release_id": 17744802,
        "tag": "v3.3.3",
        "tarball_url": "https://api.github.com/repos/alekseyzimin/masurca/tarball/v3.3.3",
        "type": "Release",
        "url": "https://api.github.com/repos/alekseyzimin/masurca/releases/17744802",
        "value": "https://api.github.com/repos/alekseyzimin/masurca/releases/17744802",
        "zipball_url": "https://api.github.com/repos/alekseyzimin/masurca/zipball/v3.3.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "alekseyzimin",
          "type": "User"
        },
        "date_created": "2019-05-07T20:03:41Z",
        "date_published": "2019-05-07T20:11:58Z",
        "description": "The major improvement in this new release is the addition of an option to use very fast Flye assembler for final assembly instead of CABOG.  At this point contiguity is slightly worse with Flye, but the whole assembly speed is HALVED!   I am working on improving contiguity in Flye-based assembly by modifying the pre-processing steps in mega-reads.  \r\n\r\nFlye can be enabled by setting FLYE_ASSEMBLY=1 option in the config file -- see example config file.\r\n\r\nAnother big addition is the new the new chromosome_scaffolder.sh script which allows one to create chromosome sized scaffolds from your assembled contigs using reference genome for the same species.\r\n\r\nAnd finally, the reference assisted assembly is available in beta version.  You can use one or more reference genomes. just concatenate them all into one single fasta file, and supply them as:\r\nREFERENCE=/path/file.fa\r\n\r\nOther additions included bugfxes, and small performance improvements.",
        "html_url": "https://github.com/alekseyzimin/masurca/releases/tag/3.3.2",
        "name": "MaSuRCA 3.3.2",
        "release_id": 17206303,
        "tag": "3.3.2",
        "tarball_url": "https://api.github.com/repos/alekseyzimin/masurca/tarball/3.3.2",
        "type": "Release",
        "url": "https://api.github.com/repos/alekseyzimin/masurca/releases/17206303",
        "value": "https://api.github.com/repos/alekseyzimin/masurca/releases/17206303",
        "zipball_url": "https://api.github.com/repos/alekseyzimin/masurca/zipball/3.3.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "alekseyzimin",
          "type": "User"
        },
        "date_created": "2019-03-07T19:48:20Z",
        "date_published": "2019-03-07T19:49:02Z",
        "description": "Performance improvements and bugfixes.",
        "html_url": "https://github.com/alekseyzimin/masurca/releases/tag/v3.3.1",
        "name": "MaSuRCA 3.3.1",
        "release_id": 15980252,
        "tag": "v3.3.1",
        "tarball_url": "https://api.github.com/repos/alekseyzimin/masurca/tarball/v3.3.1",
        "type": "Release",
        "url": "https://api.github.com/repos/alekseyzimin/masurca/releases/15980252",
        "value": "https://api.github.com/repos/alekseyzimin/masurca/releases/15980252",
        "zipball_url": "https://api.github.com/repos/alekseyzimin/masurca/zipball/v3.3.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "alekseyzimin",
          "type": "User"
        },
        "date_created": "2018-12-18T20:24:03Z",
        "date_published": "2018-12-19T15:52:50Z",
        "description": "The major changes in this release include added SLURM support, and switch to CABOG assembler 8.2 for Illumina-only assemblies.  In the previous versions I used a modified CABOG assembler version 6.2 for Illumina-only assemblies that had an advantage in scaffolding on some data sets.  However, on paired-end-only Illumina data, CABOG 8.2 was better.  Also CABOG version 6.2 had experienced frequent crashes in unitig consensus, that were partially managed in the post-processing code, but in many cases the failures impeded the completion of assembly.  CABOG 8.2 does not have this problem.  If you were running and Illumina-only assembly, and it failed in unitig consensus, you can delete the CA folder and *.frg files, re-generate assemble.sh and re-run  with MaSuRCA 3.3.0 and your assembly will finish properly.  \r\n\r\nHere are the instructions on running the assembler on SLURM grid.  The SLURM partition name must be specified in config file under GRID_QUEUE, USE_GRID=1, GRID_ENGINE=SLURM. The main assembler script should be submitted as a single job to a high memory node.  Only the most computationally intensive parts of the assembly, such as mega-reads code and overlapping in assembly are designed to be run on the grid.  Once the assembly gets to the point where it needs to run on the grid, script exits and provides the user with submit command to submit the jobs to the grid.  Once all jobs finish, restart assemble.sh (re-generate just in case).  If any jobs have failed, the script will exit asking the user to re-submit the jobs.  Only the failed jobs will be re-run.  If all jobs completed properly, the script will proceed. ",
        "html_url": "https://github.com/alekseyzimin/masurca/releases/tag/v3.3.0",
        "name": "MaSuRCA 3.3.0",
        "release_id": 14618621,
        "tag": "v3.3.0",
        "tarball_url": "https://api.github.com/repos/alekseyzimin/masurca/tarball/v3.3.0",
        "type": "Release",
        "url": "https://api.github.com/repos/alekseyzimin/masurca/releases/14618621",
        "value": "https://api.github.com/repos/alekseyzimin/masurca/releases/14618621",
        "zipball_url": "https://api.github.com/repos/alekseyzimin/masurca/zipball/v3.3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "alekseyzimin",
          "type": "User"
        },
        "date_created": "2018-11-15T15:04:37Z",
        "date_published": "2018-11-15T15:18:50Z",
        "description": "This is a maintenance release with small bugfixes and speed/memory usage improvements.  Fixed the bug with final gapclose failing on some assemblies. Now MaSuRCA outputs scaffolds after closing gaps (previous version output contigs).\r\n\r\nSome scripts have been converted from Perl to C++ for performance considerations.  There is a new script\r\nevaluate_consensus_error_rate.sh (run with -h to get usage)\r\nThis script follows guidelines and procedure of consensus quality evaluation described in https://www.nature.com/articles/nbt.4060 .  It uses bwa to map Illumina data to the assembly, and then freebayes to get the variants.  Any consensus variants (e.g. SNPs, indels) that are not supported by any Illumina reads, but an alternative is supported by at least 3 reads are called errors in the consensus.  The script thus estimates the total number of errors in the genome assembly consensus and computes sequence quality.  The output is <>.report file, where <> is the name of the input assembly fasta file.  \r\nMaSuRCA assemblies have very high consensus quality; in my experiments 30x Pacbio+ 100x Illumina assembly of A.thaliana had  99.9972% quality (3 errors per 100,000 bases), and human NA12878 assembly from 37x Nanopore+100x Illumina data (nanopore data from  https://www.nature.com/articles/nbt.4060 and Illumina data from GIAB project), had 99.9913% quality (less than 1 error per 10,000 bases).\r\n",
        "html_url": "https://github.com/alekseyzimin/masurca/releases/tag/3.2.9",
        "name": "MaSuRCA 3.2.9",
        "release_id": 14023808,
        "tag": "3.2.9",
        "tarball_url": "https://api.github.com/repos/alekseyzimin/masurca/tarball/3.2.9",
        "type": "Release",
        "url": "https://api.github.com/repos/alekseyzimin/masurca/releases/14023808",
        "value": "https://api.github.com/repos/alekseyzimin/masurca/releases/14023808",
        "zipball_url": "https://api.github.com/repos/alekseyzimin/masurca/zipball/3.2.9"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "alekseyzimin",
          "type": "User"
        },
        "date_created": "2018-08-29T14:38:54Z",
        "date_published": "2018-08-29T14:41:05Z",
        "description": "This release has major assembly quality improvements and some cosmetic changes.  \r\n\r\nChangelog:\r\n-- reworked the joining algorithm for incorporating long high error read sequence into the corrected reads where the sequence could not be corrected by Illumina data\r\n-- cleaned up the code and the output/error messages\r\n-- added final gapclosing step for scaffold gaps spanned by long high error reads\r\n-- bugfixes, such as error in executing do_consensus.sh on some systems\r\n-- re-enabled overlap based trimming in CABOG assembler and reduced the default coverage input for correction to 25x; if you have more than 25x coverage, the assembler will use 25x coverage in the longest reads\r\n\r\nThe changes made significant impact on contiguity and correctness of large mammalian and plant genome assemblies, for some of my test assemblies now N50 contig increased from ~300Kbp to ~950Kbp on 20x Pacbio + 100x Illumina data set.  The run time has increased about 10% over 3.2.7 release but still faster than 3.2.6 release.",
        "html_url": "https://github.com/alekseyzimin/masurca/releases/tag/3.2.8",
        "name": "MaSuRCA 3.2.8",
        "release_id": 12634477,
        "tag": "3.2.8",
        "tarball_url": "https://api.github.com/repos/alekseyzimin/masurca/tarball/3.2.8",
        "type": "Release",
        "url": "https://api.github.com/repos/alekseyzimin/masurca/releases/12634477",
        "value": "https://api.github.com/repos/alekseyzimin/masurca/releases/12634477",
        "zipball_url": "https://api.github.com/repos/alekseyzimin/masurca/zipball/3.2.8"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "alekseyzimin",
          "type": "User"
        },
        "date_created": "2018-07-15T07:20:04Z",
        "date_published": "2018-07-23T14:10:37Z",
        "description": "This version has two significant updates over the 3.2.6 version.  \r\n\r\n-- consensus is done on the segments of long reads that are not corrected by Illumina reads before assembly, resulting in better contiguity and higher consensus accuracy\r\n-- implemented new efficient trimming module for mega-reads that eliminates the need to run overlapper twice in CABOG assembler, resulting in assembly run time improvements (~50% faster in CABOG)",
        "html_url": "https://github.com/alekseyzimin/masurca/releases/tag/3.2.7",
        "name": "MaSuRCA 3.2.7",
        "release_id": 12056462,
        "tag": "3.2.7",
        "tarball_url": "https://api.github.com/repos/alekseyzimin/masurca/tarball/3.2.7",
        "type": "Release",
        "url": "https://api.github.com/repos/alekseyzimin/masurca/releases/12056462",
        "value": "https://api.github.com/repos/alekseyzimin/masurca/releases/12056462",
        "zipball_url": "https://api.github.com/repos/alekseyzimin/masurca/zipball/3.2.7"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "alekseyzimin",
          "type": "User"
        },
        "date_created": "2018-05-02T20:35:44Z",
        "date_published": "2018-05-02T20:40:10Z",
        "description": "Version 3.2.6, this is a maintenance release, no new features, bigfixes and performance improvements only.  \r\nList of major improvements:\r\n\r\n1. occasional failure on overlapcorrection workaround\r\n2. Illumina-only assembly unitig consensus failure workaround\r\n3. running mega-reads on SGE grid improvements in performance and stability\r\n4. cleaned up the code and improved re-starting assemblies with Illumina-only data\r\n5. Updated version of MUMmer4 included\r\n6. Improved compilation and install script on platforms where @ is present in the PWD\r\n7. fixed bugs and improved performance of the assembly polishing code\r\n8. speed and stability improvements to the Oxford Nanopore correction code\r\n9. fixed bug that resulted in gap filling running in endless loop",
        "html_url": "https://github.com/alekseyzimin/masurca/releases/tag/3.2.6",
        "name": "MaSuRCA 3.2.6",
        "release_id": 10821762,
        "tag": "3.2.6",
        "tarball_url": "https://api.github.com/repos/alekseyzimin/masurca/tarball/3.2.6",
        "type": "Release",
        "url": "https://api.github.com/repos/alekseyzimin/masurca/releases/10821762",
        "value": "https://api.github.com/repos/alekseyzimin/masurca/releases/10821762",
        "zipball_url": "https://api.github.com/repos/alekseyzimin/masurca/zipball/3.2.6"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "alekseyzimin",
          "type": "User"
        },
        "date_created": "2018-01-26T19:20:24Z",
        "date_published": "2018-01-26T19:25:27Z",
        "description": "[Complete distribution -- click to download MaSuRCA-3.2.4.tar.gz](https://github.com/alekseyzimin/masurca/files/1668918/MaSuRCA-3.2.4.tar.gz)\r\n",
        "html_url": "https://github.com/alekseyzimin/masurca/releases/tag/3.2.4.1",
        "name": "MaSuRCA 3.2.4",
        "release_id": 9406899,
        "tag": "3.2.4.1",
        "tarball_url": "https://api.github.com/repos/alekseyzimin/masurca/tarball/3.2.4.1",
        "type": "Release",
        "url": "https://api.github.com/repos/alekseyzimin/masurca/releases/9406899",
        "value": "https://api.github.com/repos/alekseyzimin/masurca/releases/9406899",
        "zipball_url": "https://api.github.com/repos/alekseyzimin/masurca/zipball/3.2.4.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "alekseyzimin",
          "type": "User"
        },
        "date_created": "2018-01-23T15:00:53Z",
        "date_published": "2018-01-26T19:23:37Z",
        "description": "[Complete distribution -- click to download MaSuRCA-3.2.4.tar.gz](https://github.com/alekseyzimin/masurca/files/1668914/MaSuRCA-3.2.4.tar.gz)\r\n",
        "html_url": "https://github.com/alekseyzimin/masurca/releases/tag/3.2.4",
        "name": "Pre-release MaSuRCA 3.2.4",
        "release_id": 9406867,
        "tag": "3.2.4",
        "tarball_url": "https://api.github.com/repos/alekseyzimin/masurca/tarball/3.2.4",
        "type": "Release",
        "url": "https://api.github.com/repos/alekseyzimin/masurca/releases/9406867",
        "value": "https://api.github.com/repos/alekseyzimin/masurca/releases/9406867",
        "zipball_url": "https://api.github.com/repos/alekseyzimin/masurca/zipball/3.2.4"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Compile/Install requirements.",
        "parent_header": [
          "1. System requirements/run rimes for assembly"
        ],
        "type": "Text_excerpt",
        "value": "To compile the assembler we require gcc version 4.7 or newer to be installed on the system.\nOnly Linux is supported (May or may not compile under gcc for MacOS or Cygwin, Windows, etc). The assembler has been tested on the following distributions:\n\n\u2022\tFedora 12 and up\n\n\u2022\tRedHat 5 and 6 (requires installation of gcc 4.7)\n\n\u2022\tCentOS 5 and 6 (requires installation of gcc 4.7)\n\n\u2022\tUbuntu 12 LTS and up\n\n\u2022\tSUSE Linux 16 and up\n\nWARNING:  installing MaSuRCA via Bioconda is not supported, and may result in broken installation due to conflicts with other packages, especially Mummer package.  If you get errors during assembly related to mummer.pm, remove the Bioconda from your path by editing your .bashrc. \n"
      },
      "source": "https://raw.githubusercontent.com/alekseyzimin/masurca/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Hardware requirements for assembly.",
        "parent_header": [
          "1. System requirements/run rimes for assembly"
        ],
        "type": "Text_excerpt",
        "value": "The hardware requirements vary with the size of the genome project.  Both Intel and AMD x64 architectures are supported. The general guidelines for hardware configuration are as follows:\n\n\u2022\tBacteria (up to 10Mb): 16Gb RAM, 8+ cores, 10Gb disk space\n\n\u2022\tInsect (up to 500Mb): 128Gb RAM, 16+ cores, 1Tb disk space\n\n\u2022\tAvian/small plant genomes (up to 1Gb): 256Gb RAM, 32+ cores, 2Tb disk space\n\n\u2022\tMammalian genomes (up to 3Gb): 512Gb RAM, 32+ cores, 5Tb disk space\n\n\u2022\tPlant genomes (up to 30Gb): 2Tb RAM, 64+cores, 10Tb+ disk space\n"
      },
      "source": "https://raw.githubusercontent.com/alekseyzimin/masurca/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Expected assembly run times.",
        "parent_header": [
          "1. System requirements/run rimes for assembly"
        ],
        "type": "Text_excerpt",
        "value": "The expected run times depend on the cpu speed/number of cores used for the assembly and on the data used. The following lists the expected run times for the minimum configurations outlined above for Illumina-only data sets. Adding long reads (454, Sanger, etc. makes the assembly run about 50-100% longer:\n\n\u2022\tBacteria (up to 10Mb): <1 hour\n\n\u2022\tInsect (up to 500Mb): 1-2 days\n\n\u2022\tAvian/small plant genomes (up to 1Gb): 4-5 days\n\n\u2022\tMammalian genomes (up to 3Gb): 15-20 days\n\n\u2022\tPlant genomes (up to 30Gb): 60-90 days\n"
      },
      "source": "https://raw.githubusercontent.com/alekseyzimin/masurca/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Overview.",
        "parent_header": [
          "3. Running the MaSuRCA assembler"
        ],
        "type": "Text_excerpt",
        "value": "The general steps to run the MaSuRCA assemblers are as follows, and will be covered in details in later sections. It is advised to create a new directory for each assembly project.\n\nIn the rest of this document, `/install_path` refers to a path to the directory in which `./install.sh` was run.\n\nIMPORTANT! Avoid using third party tools to pre-process the Illumina data before providing it to MaSuRCA, unless you are absolutely sure you know exactly what the preprocessing tool does.  Do not do any trimming, cleaning or error correction. This will likely deteriorate the assembly.\n\nThere are two ways to run MaSuRCA.  For small projects that only use data from two Illumina sequencing fastq files representing forward and reverse reads from a paired end run, and (optionally) data from a long-read run such as Pacbio SMRT or Nanopore sequencing run in a single fasta/fastq file, one can use a simplified approach.  This runs the full version of the MaSuRCA assembly pipeline with default settings on a command line. The options are described in the usage message that is displayed by using -h or --help switch.  There are three command line switches, -i, -t and -r.  -t specifies the number of threads to use, -i specifies the names and paths to Illumina paired end reads files and -r specifies the name and the path to the long reads file.  For example:\n\n`/path_to_MaSuRCA/bin/masurca -t 32 -i /path_to/pe_R1.fa,/path_to/pe_R2.fa`\n\nwill run assembly with only Illumina paired end reads from files /path_to/pe_R1.fa (forward) and /path_to/pe_R2.fa (reverse). An example of the hybrid assembly:\n\n`/path_to_MaSuRCA/bin/masurca -t 32 -i /path_to/pe_R1.fa,/path_to/pe_R2.fa -r /path_to/nanopore.fastq.gz`\n\nThis command will run a hybrid assembly, correcting Nanopore reads with Illumina data first.  Ilumina paired end reads files must be fastq, can be gzipped, and Nanopore/PacBio data files for the -r option can be fasta or fastq and can be gzipped. \n\nFor bigger projects that use Ullimina data from multiple instrument runs, Illumina mate pairs, legacy Sanger data and/or need parameter adjustments, there is a more advanced mode. To use it, create a configuration file which contains the location of the compiled assembler, the location of the data and some parameters. Copy in your assembly directory the template configuration file `/install_path/sr_config_example.txt` which was created by the installer with the correct paths to the freshly compiled software and with reasonable parameters. Most assembly projects should only need to set the paths to the input data in the example configuration.  More detailed description of the configuration is in the next section.\n\nSecond, run the `masurca` script which will generate from the configuration file a shell script `assemble.sh`. This last script is the main driver of the assembly.\n\nFinally, run the script `assemble.sh` to assemble the data.\n"
      },
      "source": "https://raw.githubusercontent.com/alekseyzimin/masurca/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Configuration.",
        "parent_header": [
          "3. Running the MaSuRCA assembler"
        ],
        "type": "Text_excerpt",
        "value": "To run the assembler, one must first create a configuration file that specifies the location of the executables, data and assembly parameters for the assembler. The installation script will create a sample configuration file `sr_config_example.txt`. Lines starting with a pound sign ('#') are comments and ignored. The configuration file consists of two sections: DATA and PARAMETERS. Each section concludes with END statement. The easiest way is to copy the sample configuration file to the directory of choice for running the assembly and then modify it according to the specifications of the assembly project. \n\nPlease read all comments in the example configuration file before using MaSuRCA. All options are explained in the comments.  Here is the example configuration file:\n```\n# example configuration file \n\n# DATA is specified as type {PE,JUMP,OTHER,PACBIO} and 5 fields:\n# 1)two_letter_prefix 2)mean 3)stdev 4)fastq(.gz)_fwd_reads\n# 5)fastq(.gz)_rev_reads. The PE reads are always assumed to be\n# innies, i.e. --->.<---, and JUMP are assumed to be outties\n# <---.--->. If there are any jump libraries that are innies, such as\n# longjump, specify them as JUMP and specify NEGATIVE mean. Reverse reads\n# are optional for PE libraries and mandatory for JUMP libraries. Any\n# OTHER sequence data (454, Sanger, Ion torrent, etc) must be first\n# converted into Celera Assembler compatible .frg files (see\n# http://wgs-assembler.sourceforge.com)\nDATA\n#Illumina paired end reads supplied as <two-character prefix> <fragment mean> <fragment stdev> <forward_reads> <reverse_reads>\n#if single-end, do not specify <reverse_reads>\n#MUST HAVE Illumina paired end reads to use MaSuRCA\nPE= pe 500 50  /FULL_PATH/frag_1.fastq  /FULL_PATH/frag_2.fastq\n#Illumina mate pair reads supplied as <two-character prefix> <fragment mean> <fragment stdev> <forward_reads> <reverse_reads>\nJUMP= sh 3600 200  /FULL_PATH/short_1.fastq  /FULL_PATH/short_2.fastq\n#pacbio OR nanopore reads must be in a single fasta or fastq file with absolute path, can be gzipped\n#if you have both types of reads supply them both as NANOPORE type\n#PACBIO=/FULL_PATH/pacbio.fa\n#NANOPORE=/FULL_PATH/nanopore.fa\n#Other reads (Sanger, 454, etc) one frg file, concatenate your frg files into one if you have many\n#OTHER=/FULL_PATH/file.frg\n#synteny-assisted assembly, concatenate all reference genomes into one reference.fa; works for Illumina-only data\n#REFERENCE=/FULL_PATH/nanopore.fa\nEND\n\nPARAMETERS\n#PLEASE READ all comments to essential parameters below, and set the parameters according to your project\n#set this to 1 if your Illumina jumping library reads are shorter than 100bp\nEXTEND_JUMP_READS=0\n#this is k-mer size for deBruijn graph values between 25 and 127 are supported, auto will compute the optimal size based on the read data and GC content\nGRAPH_KMER_SIZE = auto\n#set this to 1 for all Illumina-only assemblies\n#set this to 0 if you have more than 15x coverage by long reads (Pacbio or Nanopore) or any other long reads/mate pairs (Illumina MP, Sanger, 454, etc)\nUSE_LINKING_MATES = 0\n#specifies whether to run the assembly on the grid\nUSE_GRID=0\n#specifies grid engine to use SGE or SLURM\nGRID_ENGINE=SGE\n#specifies queue (for SGE) or partition (for SLURM) to use when running on the grid MANDATORY\nGRID_QUEUE=all.q\n#batch size in the amount of long read sequence for each batch on the grid\nGRID_BATCH_SIZE=500000000\n#use at most this much coverage by the longest Pacbio or Nanopore reads, discard the rest of the reads\n#can increase this to 30 or 35 if your reads are short (N50<7000bp)\nLHE_COVERAGE=25\n#set to 0 (default) to do two passes of mega-reads for slower, but higher quality assembly, otherwise set to 1\nMEGA_READS_ONE_PASS=0\n#this parameter is useful if you have too many Illumina jumping library mates. Typically set it to 60 for bacteria and 300 for the other organisms \nLIMIT_JUMP_COVERAGE = 300\n#these are the additional parameters to Celera Assembler.  do not worry about performance, number or processors or batch sizes -- these are computed automatically. \n#CABOG ASSEMBLY ONLY: set cgwErrorRate=0.25 for bacteria and 0.1<=cgwErrorRate<=0.15 for other organisms.\nCA_PARAMETERS =  cgwErrorRate=0.15\n#CABOG ASSEMBLY ONLY: whether to attempt to close gaps in scaffolds with Illumina  or long read data\nCLOSE_GAPS=1\n#number of cpus to use, set this to the number of CPUs/threads per node you will be using\nNUM_THREADS = 16\n#this is mandatory jellyfish hash size -- a safe value is estimated_genome_size*20\nJF_SIZE = 200000000\n#ILLUMINA ONLY. Set this to 1 to use SOAPdenovo contigging/scaffolding module.  \n#Assembly will be worse but will run faster. Useful for very large (>=8Gbp) genomes from Illumina-only data\nSOAP_ASSEMBLY=0\n#If you are doing Hybrid Illumina paired end + Nanopore/PacBio assembly ONLY (no Illumina mate pairs or OTHER frg files).  \n#Set this to 1 to use Flye assembler for final assembly of corrected mega-reads.  \n#A lot faster than CABOG, AND QUALITY IS THE SAME OR BETTER. \n#Works well even when MEGA_READS_ONE_PASS is set to 1.  \n#DO NOT use if you have less than 15x coverage by long reads.\nFLYE_ASSEMBLY=0\nEND \n```\nDATA \u2013 in this section the user must specify the types of data available for the assembly. Each line represent a library and must start with PE=, JUMP= or OTHER= for the 3 different type of input read library (Paired Ends, Jumping or other). There can be multiple lines starting with `PE=` (or JUMP=), one line per library. PE and JUMP data must be in fastq format while the other data is in provided as a Celera Assembler frag format (`.frg`). Every PE or JUMP library is named by a unique two letter prefix. No two library can have the same prefix and a prefix should be made of two printable characters or number (no space or control characters), e.g. `aa`, `ZZ`, `l5`, or `J2`.\n\n The following types of data are supported:\n \n\u2022\tIllumina paired end (or single end) reads -- MANDATORY:\n\n`PE = two_letter_prefix mean stdev /PATH/fwd_reads.fastq /PATH/rev_reads.fastq`\n\nexample:\n\n`PE = aa 180 20 /data/fwd_reads.fastq /data/rev_reads.fastq`\n\nThe `mean` and `stdev` parameters are the library insert average length and standard deviation. If the standard deviation is not known, set it to approximately 15% of the mean.If the second (reverse) read set is not available, do not specify it and just specify the forward reads.  Files must be in fastq format and can be gzipped.\n\n\u2022\tIllumina jumping/DiTag/other circularization protocol-based library mate pair reads:\n\n`JUMP = two_letter_prefix mean stdev /PATH/fwd_reads.fastq /PATH/rev_reads.fastq`\n\nexample:\n\n`JUMP = cc 3500 500 /data/jump_fwd_reads.fastq /data/jump_rev_reads.fastq`\n\nBy default, the assembler assumes that the jumping library pairs are \u201coutties\u201d (<--   -->). Some protocols (DiTag) use double-circularization which results in \u201cinnie\u201d pairs (-->   <--).  In this case please specify negative mean.\n\n\u2022\tOther types of data (454, Sanger, etc) must be converted to CABOG format FRG files (see CABOG documentation at http://sourceforge.net/apps/mediawiki/wgs-assembler/index.php?title=Main_Page ):\n\n`OTHER = data.frg`\n\n\u2022\tPacBio/MinION data are supported.  Note that you have to have 50x + coverage in Illumina Paired End reads to use PacBio of Oxford Nanopore MinION data.  Supply PacBio or MinION reads in a single fasta or fastq file (can be gzipped) as:\n\n`PACBIO=file.fa` or `NANOPORE=file.fa`\n\nIf you have both PacBio and Nanopore reads, cat them all into a single fasta file and supply them as \"NANOPORE\" type. More than one entry for each data type/set of files is allowed EXCEPT for PacBio/Nanopore data.  If you have several pairs of PE or JUMP fastq files, specify each pair on a separate line with a different two-letter prefix.  PACBIO or NANOPORE data must be in ONE file.\n\nPARAMETERS. The following parameters are mandatory:\n\n`NUM_THREADS=16`\n\nset it to the number of cores in the computer to be used for assembly\n\n`JF_SIZE=2000000000`\n\njellyfish hash size, set this to about 10x the genome size.\n\n`GRID_QUEUE=all.q`\n\nmandatory if USE_GRID set to 1. Name of the SGE queue to use.  NOTE that number of slots must be set to 1 for each physical computer\n\nOptional parameters:\n\n`USE_LINKING_MATES=1`\n\nMost of the paired end reads end up in the same super read and thus are not passed to the assembler.  Those that do not end up in the same super read are called \u201dlinking mates\u201d . The best assembly results are achieved by setting this parameter to 1 for Illumina-only assemblies.  If you have more than 2x coverage by long (454, Sanger, etc) reads, set this to 0. \n\n`GRAPH_KMER_SIZE=auto`\n\nthis is the kmer size to be used for super reads.  \u201cauto\u201d is the safest choice. Only advanced users should modify this parameter.\n\n`LIMIT_JUMP_COVERAGE = 60`\n\nin some cases (especially for bacterial assemblies) the jumping library has too much coverage which confuses the assembler.  By setting this parameter you can have assembler down-sample the jumping library to 60x (from above) coverage.  For bigger eukaryotic genomes you can set this parameter to 300.\n\n`CA_PARAMETERS = cgwErrorRate=0.1\n\nthese are the additional parameters to Celera Assembler, and they should only be supplied/modified by advanced users.  \u201covlMerSize=30 cgwErrorRate=0.25 ovlMemory=4GB\u201d should be used for bacterial assemblies; \u201covlMerSize=30 cgwErrorRate=0.15 ovlMemory=4GB\u201d should be used for all other genomes\n\n`SOAP_ASSEMBLY = 0`\n\nSet this to 1 if you would like to perform contigging and scaffolding done by SOAPdenovo2 instead of CABOG.  This will decrease assembly runtime, but will likely result in inferior assembly.  This option is useful when assembling very large genomes (5Gbp+), as CABOG may take months to rung on these.\n"
      },
      "source": "https://raw.githubusercontent.com/alekseyzimin/masurca/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running MaSuRCA hybrid assembly on the grid.",
        "type": "Text_excerpt",
        "value": "Starting with version 3.2.4 MaSuRCA supports execution of the mega-reads correction of the long high error reads such as PacBio or Nanopore reads on SGE grid.  SLURM support is implemented in 3.3.1 and later releases.  To run MaSuRCA on the grid, you must set USE_GRID=1 and specify the SGE queue to use (MANDATORY) using GRID_QUEUE=<name>.  Please create a special queue on the SGE grid for this operation.  The queue MUST have ONLY 1 SLOT PER PHYSICAL COMPUTER. Each batch will use NUM_THREADS threads on each computer, thus the number of slots in the SGE queue should be set to 1 for each physical computer.\n\nLong reads are corrected in batches. GRID_BATCH_SIZE is the batch size in bases of long reads.  You can figure out the number of batches by dividing the total amount of long read data by the GRID_BATCH_SIZE. Memory usage for each batch does not depend on this parameter, it scales with genome size instead. Since there is some overhead to starting each batch, I recommend setting this to have not more than 100 batches. The setting that is equal to 2-3 times the number of physical computers you have in the grid works best.  The total number of batches is limited to 1000.\nThe Celera Assembler (or CABOG) will use the grid as well to run overlapper only.  Overlapper jobs are not memory-intensive and thus multiple jobs can be submitted to each node.  Each job will use up to 4 threads \u2013 the code is not efficient enough to use more than that number of threads effectively.  \n"
      },
      "source": "https://raw.githubusercontent.com/alekseyzimin/masurca/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 02:18:33",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 243
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "MaSuRCA Genome Assembly and Analysis Toolkit Quick Start Guide",
        "type": "Text_excerpt",
        "value": "The MaSuRCA (Maryland Super Read Cabog Assembler) genome assembly and analysis toolkit contains of MaSuRCA genome assembler, QuORUM error corrector for Illumina data, POLCA genome polishing software, Chromosome scaffolder, jellyfish mer counter, and MUMmer aligner.  The usage instructions for the additional tools that are exclusive to MaSuRCA, such as POLCA and Chromosome scaffolder are provided at the end of this Guide. \n\nThe MaSuRCA assembler combines the benefits of deBruijn graph and Overlap-Layout-Consensus assembly approaches. Since version 3.2.1 it supports hybrid assembly with short Illumina reads and long high error PacBio/MinION data.\n\nCitation for MaSuRCA: Zimin AV, Mar\u00e7ais G, Puiu D, Roberts M, Salzberg SL, Yorke JA. The MaSuRCA genome assembler. Bioinformatics. 2013 Nov 1;29(21):2669-77.\n\nCitation for MaSuRCA hybrid assembler: Zimin AV, Puiu D, Luo MC, Zhu T, Koren S, Yorke JA, Dvorak J, Salzberg S. Hybrid assembly of the large and highly repetitive genome of Aegilops tauschii, a progenitor of bread wheat, with the mega-reads algorithm. Genome Research. 2017 Jan 1:066100.\n\nThis project is governed by the code of conduct at https://github.com/alekseyzimin/masurca/blob/master/code_of_conduct.md\n"
      },
      "source": "https://raw.githubusercontent.com/alekseyzimin/masurca/master/README.md",
      "technique": "header_analysis"
    }
  ]
}