{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Downloading the CHIPS static reference files",
        "parent_header": [
          "Installing CHIPS"
        ],
        "type": "Text_excerpt",
        "value": "CHIPS comes pre-packaged with static reference files (e.g. bwa index, refSeq tables, etc.) for hg38/hg19 and mm9/mm10.  You can download those files [ref_files](http://cistrome.org/~galib/ref_files.tar.gz). Many of these files are commonly used static reference files, but if you would like to use the files that you already have, **OR** if you are interested in sup then please see **Appendix E**.\n"
      },
      "source": "https://raw.githubusercontent.com/liulab-dfci/CHIPS/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Appendix E: Generating static reference files for CHIPS",
        "parent_header": [
          "Using CHIPs"
        ],
        "type": "Text_excerpt",
        "value": "- all of the required files  \n- using your own files\n- supporting something new\n- adding to ref.yaml\n"
      },
      "source": "https://raw.githubusercontent.com/liulab-dfci/CHIPS/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/liulab-dfci/CHIPS"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-03-15T15:50:35Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-05-16T15:44:10Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A Snakemake pipeline for quality control and reproducible processing of chromatin profiling data"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9745184870234608,
      "result": {
        "original_header": "CHIPS (CHromatin enrIchment ProceSsor), an analysis pipeline in snakemake to streamline the processing of ChIP-seq, ATAC-seq, and DNase-seq data",
        "type": "Text_excerpt",
        "value": "This is a mirror of the repo on bitbucket https://bitbucket.org/plumbers/CHIPS/src/master/\n \n"
      },
      "source": "https://raw.githubusercontent.com/liulab-dfci/CHIPS/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9642105558041937,
      "result": {
        "original_header": "Anatomy of a CHIPS project",
        "type": "Text_excerpt",
        "value": "All work in CHIPS is done in a **PROJECT/** directory, which is simply a directory to contain a single Chips analysis run.  **PROJECT/** directories can be named anything (and they usually start with a simple mkdir command, e.g. mkdir chips_for_paper),  but what is CRITICAL about a **PROJECT/** directory is that you fill them with the following core components:\n(We first lay out the directory structure and explain each element below)\n> PROJECT/  \n> \u251c\u2500\u2500 CHIPS/  \n> \u251c\u2500\u2500 data/  - *optional*  \n> \u251c\u2500\u2500 config.yaml  \n> \u251c\u2500\u2500 metasheet.csv  \n> \u251c\u2500\u2500 ref.yaml -  ***only if you are using chips OTHER THAN hg19 and mm9***   \n> \u2514\u2500\u2500 ref_files/ \nThe 'CHIPS' directory contains all of the chips source code.  We'll explain how to download that directory below.  The 'data' directory is an optional directory that contains all of your raw data. It is optional because those paths __may__ be fully established in the config.yaml, __however__ it is best practice to gather your raw data within 'data' using [symbolic links](https://www.cyberciti.biz/faq/creating-soft-link-or-symbolic-link/). \nAfter a successful **Chips** run, another 'analysis' folder is generated which contains all of the resulting output files.\n \n"
      },
      "source": "https://raw.githubusercontent.com/liulab-dfci/CHIPS/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "http://python-guide-pt-br.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/liulab-dfci/CHIPS/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Downloading the CHIPS static reference files",
        "parent_header": [
          "Installing CHIPS"
        ],
        "type": "Text_excerpt",
        "value": "CHIPS comes pre-packaged with static reference files (e.g. bwa index, refSeq tables, etc.) for hg38/hg19 and mm9/mm10.  You can download those files [ref_files](http://cistrome.org/~galib/ref_files.tar.gz). Many of these files are commonly used static reference files, but if you would like to use the files that you already have, **OR** if you are interested in sup then please see **Appendix E**.\n"
      },
      "source": "https://raw.githubusercontent.com/liulab-dfci/CHIPS/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/liulab-dfci/CHIPS/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/liulab-dfci/CHIPS/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "liulab-dfci/CHIPS"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CHIPS (CHromatin enrIchment ProceSsor), an analysis pipeline in snakemake to streamline the processing of ChIP-seq, ATAC-seq, and DNase-seq data"
      },
      "source": "https://raw.githubusercontent.com/liulab-dfci/CHIPS/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/liulab-dfci/CHIPS/main/modules/scripts/ceas_meta_bamRegionCount.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/liulab-dfci/CHIPS/main/modules/scripts/fastqc_sampleBam.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/liulab-dfci/CHIPS/main/modules/scripts/motif_annPeaksTsvCsv.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/liulab-dfci/CHIPS/main/modules/scripts/frips_pbc.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/liulab-dfci/CHIPS/main/modules/scripts/frips_sample.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/liulab-dfci/CHIPS/main/modules/scripts/align_readsPerChrom.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/liulab-dfci/CHIPS/main/modules/scripts/frips_calculate.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/liulab-dfci/CHIPS/main/modules/scripts/assembler/conservation_splitBedgraph.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/liulab-dfci/CHIPS/main/modules/scripts/assembler/conservation_convertToBw.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing CHIPS",
        "type": "Text_excerpt",
        "value": "You will only need to install CHIPS once, either for your own use, or if you are a system administrator, for the entire system (see **Appendix C**).  In other words, you will only need to perform the steps described in this section only once.  \nNOTE: this section ends with **Using CHIPS** (below)\n"
      },
      "source": "https://raw.githubusercontent.com/liulab-dfci/CHIPS/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Required software",
        "parent_header": [
          "Installing CHIPS"
        ],
        "type": "Text_excerpt",
        "value": "We assume that the following tools are already installed on your system and that you have some basic familiarity in using them:\n`git`\n`wget`"
      },
      "source": "https://raw.githubusercontent.com/liulab-dfci/CHIPS/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing Miniconda",
        "parent_header": [
          "Installing CHIPS"
        ],
        "type": "Text_excerpt",
        "value": "CHIPS uses the [Conda](https://conda.io/docs/intro.html) packaging system to manage and install all of its required software packages.\nTo install miniconda:\n\n1. download the Miniconda installer:\n\n    ```\n    $ wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\n    ```\n\n2. run the installer:\n\n    ```\n    $ bash Miniconda3-latest-Linux-x86_64.sh\n    ```\n\n3. update channels of conda:\n\n    ```\n    $ conda config --add channels defaults\n    ```\n\n    ```\n    $ conda config --add channels bioconda\n    ```\n\n    ```\n    $ conda config --add channels conda-forge\n    ```\n"
      },
      "source": "https://raw.githubusercontent.com/liulab-dfci/CHIPS/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing the CHIPS conda environments",
        "parent_header": [
          "Installing CHIPS"
        ],
        "type": "Text_excerpt",
        "value": "Conda environments are briefly explained [here](https://conda.io/docs/using/envs.html).  Briefly, if you are familiar with [Python Virtual Environments](http://python-guide-pt-br.readthedocs.io/en/latest/dev/virtualenvs/) or [Docker Containers](https://www.docker.com/what-container) then Conda environments should be a familiar concept.  \n\nIf you are **not familiar** with these concepts, then a conda environment is simply a **self-contained package space that is composed of various packages.**  So for example, a **bioinformatics** conda space may include packages such as **R**, **samtools**, **bedtools**, etc.\n\nChips is dependent on conda environments, *chips*.\n\n0. **clone the chips source code**:\n\n    ```\n    git clone https://github.com/liulab-dfci/CHIPS\n    ```  \n    ** NOTE: this command will create a directory called 'chips'.  After the next five steps, this directory can be safely deleted as we will explain how to *Setup a Chips Project** below. **\n\n1. **installing chips**:  \n    After cloning the git repository, create the chips environment by doing this:\n\n    ```\n    $ cd CHIPS  \n    $ conda env create -f environment.yml -n chips\n    ```\n\n    Or if you have mamba installed in your base environment, a faster method is:  \n\n    ```\n    $ mamba env create -f environment.yml -n chips\n    ```\n\n    Activate chips Conda Environment:  \n\n    ```\n    $ conda activate chips\n    ```\n\n2. **Post installation steps: configuring homer**:\n    NOTE: Chips uses the [homer](http://homer.ucsd.edu/homer/motif/index.html) software for motif analysis.  It also has the capability of using the [MDSeqPos](https://github.com/XinDong9511/mdseqpos) motif finder for a similar analysis.  If you are interested in using MDSeqPos for motif analysis, please see **Appendix D**.\n\n    To activate/initialize homer:\n\n    *  Run the configure script:\n\n    ```\n    $ perl ~/miniconda3/envs/chips/share/homer/.//configureHomer.pl -install\n    ```  \n\n    *  Install the required assemblies:\n\n    For human samples:\n\n    ```\n    $ perl ~/miniconda3/envs/chips/share/homer/.//configureHomer.pl -install hg38\n    ```\n\n    ```\n    $ perl ~/miniconda3/envs/chips/share/homer/.//configureHomer.pl -install hg19\n    ```\n\n    For mouse samples:\n\n    ```\n    $ perl ~/miniconda3/envs/chips/share/homer/.//configureHomer.pl -install mm9\n    ```"
      },
      "source": "https://raw.githubusercontent.com/liulab-dfci/CHIPS/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Setting up a CHIPS project",
        "parent_header": [
          "Using CHIPs"
        ],
        "type": "Text_excerpt",
        "value": "0. **Create Project Directory**\n    As explained above, the **PROJECT** directory is simply a directory to contain an entire Chips run.  **It can be named anything, but for this section, we'll simply call it 'PROJECT'**  \n    ```\n    $ mkdir PROJECT\n    ```\n\n    ```\n    $ cd PROJECT\n    ```\n\n1. **Create Data Directory**\n    As explained above, creating a data directory is a place to gather all of your **raw data files (.fastq, .fastq.gz, .bam)**.  It is optional, but **highly recommended**.\n    ```\n    $ mkdir data\n    ```\n    And in 'data', copy over or make symbolic links to your raw data files  \n\n2. **Clone CHIPS Repository**\n    In your PROJECT directory:  \n    ```\n    $ mv CHIPS/ PROJECT/\n    ```\n\n3. **Create config.yaml and metasheet.csv**\n\n    a. **copy chips/config.yaml and chips/metasheet.csv into the PROJECT dir:**\n\n    In the PROJECT directory:\n\n    ```\n    $ cp CHIPS/config.yaml .\n    ```\n\n    ```\n    $ cp CHIPS/metasheet.csv .\n    ```\n\n    b. **setup config.yaml**\n        The config.yaml is where you define Chips run parameters and the ChIP-seq samples for analysis.\n\n    * **genes_to_plot**: If set, genomic region and TSS will be displayed in Genome Trackview figure. Multiple genes should be separated by space (default: GAPDH ACTB TP53).\n    * **upstream/downstream**: Upstream and Downstream of the genome region can be extended to have a better view of peaks.\n    * **output_path**: Directory to save all the output files (default: analysis).\n    * **assembly**: typically hg19/hg38 for human or mm9/mm10 for mouse (default: hg19)\n    * **Choose the motif software**: choose either homer or MDSeqPos (default: homer)\n    * **Contamination Panel**:The contamination panel is a panel that Chips will check for \"cross-species\" contamination. Out of the box, the config.yaml has hg19 and mm9 as assemblies to check.  **IF you would like to add other species/assemblies, simply add as many BWA indices as you would like**\n    * **cnv_analysis**: Set to 'true' to enable copy number variation analysis\n    * **samples**: __The most important part of the config file is to define the samples for Chips analysis.__ Each sample is given an arbitrary name, e.g. MCF7_ER, MCF7_input, etc.  **Sample names, however, can not start with a number, and cannot contain '.', '-' (dash--use underscores instead)** (POSSIBLY others). For each sample, define the path to the raw data file (.fastq, .fastq.gz, .bam). For paired-end samples, simply add another line to define the path to the second pair.\n\n    c. **setup metasheet.csv**:\n    The metasheet.csv is where you group the **samples** (defined in config.yaml) into Treatment, Control (and if applicable, replicates).  For Chips, each of these groupings is called a **run**.  \n\n    Open metasheet.csv in Excel or in a text-editor.You will notice the first (uncommented) line is:\n\n    `RunName,Treat1,Cont1,Treat2,Cont2`\n\n    **RunName**- arbitrary name for the run, e.g. *MCF7_ER_run*  \n    **Treat1**- The sample name that corresponds to treatment sample.  **It must exactly match the sample name used in config.yaml**  \n    **Cont1**- (optional) The input-control sample that should be paired with Treat1.  \n    **Treat2**- (optional) if you have replicates, define the treatment of the replicate here.  \n    **Cont2**- (optional) the input-control, if available, for Treat2  \n\n4. **Set Up Refs**\n    - A pre-built [ref_files](http://cistrome.org/~galib/ref_files.tar.gz) can be downloaded from the link.\n    - makesure in config.yaml, ref: \"CHIPS/ref.yaml\"\n    - linking to static refs.\n    - copying ref.yaml\n"
      },
      "source": "https://raw.githubusercontent.com/liulab-dfci/CHIPS/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Appendix D: Installing the MDSeqPos motif finder for chips",
        "parent_header": [
          "Using CHIPs"
        ],
        "type": "Text_excerpt",
        "value": "```\n$ conda activate chips\n$ cd mdseqpos/lib\n$ cp settings.py.example settings.py\n```\nModify `settings.py` like below:\n```python\n#This should be absolute directory where you ref_files folder is.\nASSEMBLY_DIR = '***/***/ref_files'\nBUILD_DICT = { \"hg19\": \"hg19/\",\n               \"hg38\": \"hg38/\",\n               \"mm9\":\"mm9/\",\n               \"mm10\": \"mm10/\"\n               }\n```\nThen do:\n\n```bash\ncd ..\n./version_updater.py\npython setup.py install\n```\nAt last, type `MDSeqPos.py` to ensure MDSeqPos is installed and check the usage.\n"
      },
      "source": "https://raw.githubusercontent.com/liulab-dfci/CHIPS/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9918628928812336,
      "result": {
        "original_header": "CHIPS (CHromatin enrIchment ProceSsor), an analysis pipeline in snakemake to streamline the processing of ChIP-seq, ATAC-seq, and DNase-seq data",
        "type": "Text_excerpt",
        "value": "This is a mirror of the repo on bitbucket https://bitbucket.org/plumbers/CHIPS/src/master/\n \n"
      },
      "source": "https://raw.githubusercontent.com/liulab-dfci/CHIPS/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9927245229059539,
      "result": {
        "original_header": "Anatomy of a CHIPS project",
        "type": "Text_excerpt",
        "value": "The *config.yaml* and *metasheet.csv* are configurations for your VIPER run (also explained below). \n"
      },
      "source": "https://raw.githubusercontent.com/liulab-dfci/CHIPS/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/liulab-dfci/CHIPS/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021 liulab-dfci\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/liulab-dfci/CHIPS/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CHIPS"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "liulab-dfci"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 226108,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 79957,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 14970,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "JavaScript",
        "size": 8657,
        "type": "Programming_language",
        "value": "JavaScript"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 8269,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CSS",
        "size": 2634,
        "type": "Programming_language",
        "value": "CSS"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/liulab-dfci/CHIPS/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://snakemake.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/liulab-dfci/CHIPS/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "liulab-dfci",
          "type": "User"
        },
        "date_created": "2021-05-24T03:17:04Z",
        "date_published": "2021-05-24T03:35:51Z",
        "description": "new release for Zenodo",
        "html_url": "https://github.com/liulab-dfci/CHIPS/releases/tag/v1.0.1",
        "name": "Release v1.0.1",
        "release_id": 43442186,
        "tag": "v1.0.1",
        "tarball_url": "https://api.github.com/repos/liulab-dfci/CHIPS/tarball/v1.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/liulab-dfci/CHIPS/releases/43442186",
        "value": "https://api.github.com/repos/liulab-dfci/CHIPS/releases/43442186",
        "zipball_url": "https://api.github.com/repos/liulab-dfci/CHIPS/zipball/v1.0.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running CHIPS",
        "parent_header": [
          "Using CHIPs"
        ],
        "type": "Text_excerpt",
        "value": "1. Acitivate the environment\n\n```bash\nconda activate chips\n```\n\n2. dry run\n\n```\n$ snakemake -np  -s CHIPS/chips.snakefile --rerun-incomplete\n```\n\n3. full run  \n```\n$ nohup snakemake -s CHIPS/chips.snakefile --rerun-incomplete -j 8 > run.out &\n```\n\nMore information for using snakemake can be found [here](https://snakemake.readthedocs.io/en/stable/index.html).\n"
      },
      "source": "https://raw.githubusercontent.com/liulab-dfci/CHIPS/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "requirements",
    "contact",
    "contributors",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 07:33:45",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 19
      },
      "technique": "GitHub_API"
    }
  ]
}