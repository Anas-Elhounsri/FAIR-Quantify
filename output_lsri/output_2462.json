{
  "acknowledgement": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n<html><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,IE=9,chrome=1\"><meta name=\"generator\" content=\"MATLAB R2019a\"><title>Acknowledgments </title><style type=\"text/css\">.rtcContent { padding: 30px; } .S0 { margin: 3px 10px 5px 4px; padding: 0px; line-height: 28.7999992370605px; min-height: 0px; white-space: pre-wrap; color: rgb(213, 80, 0); font-family: Helvetica, Arial, sans-serif; font-style: normal; font-size: 24px; font-weight: normal; text-align: left;  }\n.S1 { margin: 2px 10px 9px 4px; padding: 0px; line-height: 21px; min-height: 0px; white-space: pre-wrap; color: rgb(0, 0, 0); font-family: Helvetica, Arial, sans-serif; font-style: normal; font-size: 14px; font-weight: normal; text-align: left;  }</style></head><body><div class = rtcContent><h1  class = 'S0'><span>Acknowledgments </span></h1><div  class = 'S1'><span>Original versions of COSEM, ACOSEM, ECOSEM, RAMLA, MRAMLA, MRP,  L-filter, FMH, weighted mean, quadratic prior, sinogram coordinate and  sinogram creation codes were written by Samuli Summala. Normalization  coefficient and variance reduction codes were written by Anssi Manninen. All other codes were written by Ville-Veikko Wettenhovi. Some pieces of code were copied from various websites (Stack Overflow, MATLAB  Answers), the original sources of these codes can be found in the source files.</span></div><div  class = 'S1'><span>Inveon PET data was collected by Kimmo Jokivarsi with the animal prepared by Maarit Pulkkinen.</span></div><div  class = 'S1'><span>This work was supported by a grant from Jane and Aatos Erkko foundation.</span></div></div>\n<br>\n<!-- \n##### SOURCE BEGIN #####\n%% Acknowledgments \n% Original versions of COSEM, ACOSEM, ECOSEM, RAMLA, MRAMLA, MRP,  L-filter, \n% FMH, weighted mean, quadratic prior, sinogram coordinate and  sinogram creation \n% codes were written by Samuli Summala. Normalization  coefficient and variance \n% reduction codes were written by Anssi Manninen. All other codes were written \n% by Ville-Veikko Wettenhovi. Some pieces of code were copied from various websites \n% (Stack Overflow, MATLAB  Answers), the original sources of these codes can be \n% found in the source files.\n% \n% Inveon PET data was collected by Kimmo Jokivarsi with the animal prepared \n% by Maarit Pulkkinen.\n% \n% This work was supported by a grant from Jane and Aatos Erkko foundation.\n##### SOURCE END #####\n--></body></html>"
      },
      "source": "https://raw.githubusercontent.com/villekf/OMEGA/master/doc/acknowledgments.html",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Acknowledgments",
        "parent_header": [
          "OMEGA"
        ],
        "type": "Text_excerpt",
        "value": "Original versions of COSEM, ACOSEM, ECOSEM, RAMLA, MRAMLA, MRP, L-filter, FMH, weighted mean, quadratic prior, sinogram coordinate and sinogram creation codes were written by Samuli Summala. Normalization coefficient and variance reduction codes were written by Anssi Manninen. Initial work on TOF was done by Jonna Kangasniemi. Initial work on SPECT was done by Matti Kortelainen and Akuroma George. The Siddon ray tracer SPECT projector was implemented by Niilo Saarlemo. All other codes were written by Ville-Veikko Wettenhovi. Some pieces of code were copied from various websites (Stack Overflow, MATLAB Answers), the original sources of these codes can be found in the source files.\n\nThis work was supported by a grant from [Jane and Aatos Erkko foundation](https://jaes.fi/en/), [Instrumentarium Science Foundation](http://instrufoundation.fi/en.php), \n[Jenny and Antti Wihuri Foundation](https://wihurinrahasto.fi/?lang=en) and [The Finnish Research Impact Foundation](https://www.vaikuttavuussaatio.fi/en/). This work has been supported by [University of Eastern Finland](https://www.uef.fi/en) and Academy of Finland.\n\n"
      },
      "source": "https://raw.githubusercontent.com/villekf/OMEGA/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "application_domain": [
    {
      "confidence": 8.81,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citations",
        "parent_header": [
          "OMEGA"
        ],
        "type": "Text_excerpt",
        "value": "If you wish to use this software in your work, cite this paper: V-V Wettenhovi et al 2021 Phys. Med. Biol. 66 065010. The peer reviewed (open access) paper on OMEGA can be found from https://doi.org/10.1088/1361-6560/abe65f.\n\nIf you use some of the specific algorithm or prior, please cite one of references here or some other original paper.\n\n"
      },
      "source": "https://raw.githubusercontent.com/villekf/OMEGA/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "References",
        "parent_header": [
          "OMEGA"
        ],
        "type": "Text_excerpt",
        "value": "1. Siddon, R. L. (1985), Fast calculation of the exact radiological path for a three dimensional CT array. Med. Phys., 12: 252-255. https://doi.org/10.1118/1.595715\n\n2. Jacobs, F., Sundermann, E., De Sutter, B., Christiaens, M. Lemahieu, I. (1998). A Fast Algorithm to Calculate the Exact Radiological Path through a Pixel or Voxel Space. Journal of computing and information technology, 6 (1), 89-94.\n\n3. Aguiar, P. , Rafecas, M. , Ortu\u00f1o, J. E., Kontaxakis, G. , Santos, A. , Pav\u00eda, J. and Ros, D. (2010), Geometrical and Monte Carlo projectors in 3D PET reconstruction. Med. Phys., 37: 5691-5702. https://doi.org/10.1118/1.3501884\n\n4. Dempster, A., Laird, N., & Rubin, D. (1977). Maximum Likelihood from Incomplete Data via the EM Algorithm. Journal of the Royal Statistical Society. Series B (Methodological), 39(1), 1-38. http://www.jstor.org/stable/2984875\n\n5. L. A. Shepp and Y. Vardi, \"Maximum Likelihood Reconstruction for Emission Tomography,\" IEEE Transactions on Medical Imaging, vol. 1, no. 2, pp. 113-122, Oct. 1982. https://doi.org/0.1109/TMI.1982.4307558\n\n6. H. M. Hudson and R. S. Larkin, \"Accelerated image reconstruction using ordered subsets of projection data,\" IEEE Transactions on Medical Imaging, vol. 13, no. 4, pp. 601-609, Dec. 1994. https://doi.org/10.1109/42.363108\n\n7. Ing-Tsung Hsiao, Ing-Tsung Hsiao, Anand Rangarajan, Anand Rangarajan, Gene R. Gindi, Gene R. Gindi. \"Provably convergent OSEM-like reconstruction algorithm for emission tomography\", Proc. SPIE 4684, Medical Imaging 2002: Image Processing, (9 May 2002); https://doi.org/10.1117/12.467144\n\n8. Ing-Tsung Hsiao and Anand Rangarajan and Parmeshwar Khurd and Gene Gindi. \"An accelerated convergent ordered subsets algorithm for emission tomography\", Physics in Medicine & Biology, vol. 49, no. 11, pp. 2145-2156, 2004, https://doi.org/10.1088/0031-9155/49/11/002\n\n9. Ing-Tsung Hsiao and Hsuan-Ming Huang, \"An accelerated ordered subsets reconstruction algorithm using an accelerating power factor for emission tomography\", Physics in Medicine & Biology, vol. 55, no. 3, pp. 599-614, 2010, https://doi.org/10.1088/0031-9155/55/3/003\n\n10. J. Browne and A. B. de Pierro, \"A row-action alternative to the EM algorithm for maximizing likelihood in emission tomography,\" IEEE Transactions on Medical Imaging, vol. 15, no. 5, pp. 687-699, Oct. 1996. https://doi.org/10.1109/42.538946\n\n11. C. L. Byrne, \"Block-iterative methods for image reconstruction from projections,\" in IEEE Transactions on Image Processing, vol. 5, no. 5, pp. 792-794, May 1996. https://doi.org/10.1109/83.499919\n\n12. Eiichi Tanaka and Hiroyuki Kudo, \"Subset-dependent relaxation in block-iterative algorithms for image reconstruction in emission tomography,\" 2003 Phys. Med. Biol. 48 1405, https://doi.org/10.1088/0031-9155/48/10/312\n\n13. Sangtae Ahn and J. A. Fessler, \"Globally convergent image reconstruction for emission tomography using relaxed ordered subsets algorithms,\" in IEEE Transactions on Medical Imaging, vol. 22, no. 5, pp. 613-626, May 2003. https://doi.org/10.1109/TMI.2003.812251\n\n14. A. R. De Pierro and M. E. B. Yamagishi, \"Fast EM-like methods for maximum 'a posteriori' estimates in emission tomography,\" IEEE Trans. Med. Imag., vol. 20, pp. 280\u2013288, Apr. 2001, https://doi.org/10.1109/42.921477\n\n15. P. J. Green, \"Bayesian reconstructions from emission tomography data using a modified EM algorithm,\" IEEE Transactions on Medical Imaging, vol. 9, no. 1, pp. 84-93, March 1990. https://doi.org/10.1109/42.52985\n\n16. Alenius, Sakari and Ruotsalainen, Ulla, \"Bayesian image reconstruction for emission tomography based on median root prior\", European Journal of Nuclear Medicine, 1997, vo. 24, no. 3, pp. 258-265, https://doi.org/10.1007/BF01728761\n\n17. S. Alenius and U. Ruotsalainen, \"Improving the visual quality of median root prior images in PET and SPECT   reconstruction,\" 2000 IEEE Nuclear Science Symposium. Conference Record (Cat. No.00CH37149), Lyon, France, 2000, pp. 15/216-15/223 vol.2. https://doi.org/10.1109/NSSMIC.2000.950105\n     \n18. J. Astola and P. Kuosmanen, \"Fundamentals of nonlinear digital filtering,\" CRC Press, Boca Raton, 1997.\n\n19. K. Lange, \"Convergence of EM image reconstruction algorithms with Gibbs smoothing,\" in IEEE Transactions on Medical Imaging, vol. 9, no. 4, pp. 439-446, Dec. 1990. https://doi.org/10.1109/42.61759\n\n20. S. Alenius and U. Ruotsalainen, \"Generalization of median root prior reconstruction,\" in IEEE Transactions on Medical Imaging, vol. 21, no. 11, pp. 1413-1420, Nov. 2002. https://doi.org/10.1109/TMI.2002.806415\n\n21. Wettenhovi, VV., Kolehmainen, V., Huttunen, J. et al., \"State Estimation with Structural Priors in fMRI,\" J Math Imaging Vis (2018) 60: 174. https://doi.org/10.1007/s10851-017-0749-x\n\n22. M. J. Ehrhardt et al., \"PET Reconstruction With an Anatomical MRI Prior Using Parallel Level Sets,\" in IEEE Transactions on Medical Imaging, vol. 35, no. 9, pp. 2189-2199, Sept. 2016. https://doi.org/10.1109/TMI.2016\n\n23. Lijun Lu et al, \"Anatomy-guided brain PET imaging incorporating a joint prior model,\" 2015 Phys. Med. Biol. 60 2145, https://doi.org/10.1088/0031-9155/60/6/2145\n\n24. Kristian Bredies, Karl Kunisch, and Thomas Pock, \"Total Generalized Variation,\" SIAM Journal on Imaging Sciences 2010 3:3, 492-526, https://doi.org/10.1137/090769521\n\n25. Antoni Buades, Bartomeu Coll, Jean-Michel Morel, \"A review of image denoising algorithms, with a new one,\" SIAM Journal on Multiscale Modeling and Simulation: A SIAM Interdisciplinary Journal, 2005, 4 (2), pp.490-530, https://doi.org/10.1137/040616024\n\n26. Xiaoqing Cao et al, \"A regularized relaxed ordered subset list-mode reconstruction algorithm and its preliminary application to undersampling PET imaging,\" 2015 Phys. Med. Biol. 60 49, https://doi.org/10.1088/0031-9155/60/1/49\n\n27. Zhang, Hao et al. \u201cApplications of nonlocal means algorithm in low-dose X-ray CT image processing and reconstruction: A review.\u201d Medical physics vol. 44,3 (2017): 1168-1185. https://doi.org/10.1002/mp.12097\n\n28. A Lougovski et al. \"A volume of intersection approach for on-the-fly system matrix calculation in 3D PET image reconstruction,\" 2014 Phys. Med. Biol. 59 561, https://doi.org/10.1088/0031-9155/59/3/561\n\n29. Y. Lin, C. R. Schmidtlein, Q. Li, S. Li and Y. Xu, \"A Krasnoselskii-Mann Algorithm With an Improved EM Preconditioner for PET Image Reconstruction,\" in IEEE Transactions on Medical Imaging, vol. 38, no. 9, pp. 2114-2126, Sept. 2019, https://doi.org/10.1109/TMI.2019.2898271\n\n30. J. Nuyts, D. Beque, P. Dupont and L. Mortelmans, \"A Concave Prior Penalizing Relative Differences for Maximum-a-Posteriori Reconstruction in Emission Tomography,\", in IEEE Transactions on Nuclear Science, vol. 49, no. 1, pp. 56 - 60, Aug. 2002, https://doi.org/10.1109/TNS.2002.998681\n\n31. Xun Jia, Bin Dong, Yifei Lou, and Steve B Jiang, \"GPU-based iterative cone-beam CT reconstruction using tight frame regularization\", 2011 Physics in Medicine and Biology, Vol. 56, No. 13, https://doi.org/10.1088/0031-9155/56/13/004\n\n32. Basu, Samit and De Man, Bruno, \"Branchless distance driven projection and backprojection\", SPIE Proceedings 2006, https://doi.org/10.1117/12.659893\n\n33. Liu, Rui and Fu, Lin and De Man, Bruno and Yu, Hengyong, \"GPU-Based Branchless Distance-Driven Projection and Backprojection\", 2017 IEEE Transactions on Computational Imaging, Vol. 3, No. 4, https://doi.org/10.1109/TCI.2017.2675705\n\n34. Di Bella, E.V.R. and Barclay, A.B. and Eisner, R.L. and Schafer, R.W., \"A comparison of rotation-based methods for iterative reconstruction algorithms\", 1996 IEEE Transactions on Nuclear Science, Vol. 43, No. 6, https://doi.org/10.1109/23.552756\n\n35. Chambolle, Antonin and Pock, Thomas, \"A First-Order Primal-Dual Algorithm for Convex Problems with Applications to Imaging\", 2011 Journal of Mathematical Imaging and Vision, Vol. 40, No. 1, https://doi.org/10.1007/s10851-010-0251-1\n\n36. Condat, Laurent, \"A primal-dual splitting method for convex optimization involving Lipschitzian, proximable and linear composite terms\", 2013 Journal of Optimization Theory and Applications, Vol. 158, No. 2, https://doi.org/10.1007/s10957-012-0245-9\n\n37. B\u1eb1ng C\u00f4ng V\u0169, \"A splitting algorithm for dual monotone inclusions involving cocoercive operators\", 2011 Advances in Computational Mathematics, Vol. 38, No. 3, https://doi.org/10.1007/s10444-011-9254-8\n\n38. Adil Salim and Laurent Condat and Konstantin Mishchenko and Peter Richt\u00e1rik, \"Dualize, Split, Randomize: Toward Fast Nonsmooth Optimization Algorithms\", 2022 Journal of Optimization Theory and Applications, Vol. 195, No. 1, https://doi.org/10.1007/s10957-022-02061-8\n\n39. Amir Beck and Marc Teboulle, \"A Fast Iterative Shrinkage-Thresholding Algorithm for Linear Inverse Problems\", 2009 SIAM Journal on Imaging Sciences, Vol. 2, No. 1, https://doi.org/10.1137/080716542\n\n40. L. A. Feldkamp and L. C. Davis and J. W. Kress, \"Practical cone-beam algorithm\", 1984 J. Opt. Soc. Am. A, Vol. 1, No. 6, https://doi.org/10.1364/JOSAA.1.000612\n\n41. Jean-Baptiste Thibault and Ken D. Sauer and Charles A. Bouman and Jiang Hsieh, \"A three-dimensional statistical approach to improved image quality for multislice helical CT\", 2007 Medical Physics, Vol. 34, No. 11, https://doi.org/10.1118/1.2789499\n\n42. Liu Y, Ma J, Fan Y, Liang Z. \"Adaptive-weighted total variation minimization for sparse data toward low-dose x-ray computed tomography image reconstruction,\" Phys Med Biol. 2012 Dec 7;57(23):7923-56. https://doi.org/10.1088/0031-9155/57/23/7923\n\n43. Charbonnier P, Blanc-Feraud L, Aubert G, Barlaud M. \"Deterministic edge-preserving regularization in computed imaging,\" IEEE Trans Image Process. 1997;6(2):298-311. https://doi.org/10.1109/83.551699\n\n44. K. Lange, \"Convergence of EM image reconstruction algorithms with Gibbs smoothing,\" in IEEE Transactions on Medical Imaging, vol. 9, no. 4, pp. 439-446, Dec. 1990, https://doi.org/10.1109/42.61759\n\n45. Huber, Peter J. and Ronchetti, Elvezio M. \"Robust Statistics,\" 2009, John Wiley & Sons, https://doi.org/10.1002/9780470434697\n\n46. Christopher C. Paige and Michael A. Saunders. 1982. \"LSQR: An Algorithm for Sparse Linear Equations and Sparse Least Squares,\" ACM Trans. Math. Softw. 8, 1 (March 1982), 43\u201371. https://doi.org/10.1145/355984.355989\n\n47. Hestenes, Magnus R. and Eduard Stiefel. \"Methods of conjugate gradients for solving linear systems,\" Journal of research of the National Bureau of Standards 49 (1952): 409-435. https://doi.org/10.6028/jres.049.044\n\n48. A.H. Andersen, A.C. Kak, \"Simultaneous Algebraic Reconstruction Technique (SART): A superior implementation of the ART algorithm,\" Ultrasonic Imaging, Volume 6, Issue 1, 1984, Pages 81-94, https://doi.org/10.1016/0161-7346(84)90008-7\n\n49. G. Wang, and M. Jiang, \"Ordered-Subset simultaneous algebraic reconstruction techniques (OS-SART),\" Journal of X-Ray Science and Technology, 2004, 12, pp. 169-177.\n\n50. Emil Y. Sidky and Xiaochuan Pan, \"Image reconstruction in circular cone-beam computed tomography by constrained, total-variation minimization,\" Phys. Med. Biol., 2008, 53, 4777, http://dx.doi.org/10.1088/0031-9155/53/17/021"
      },
      "source": "https://raw.githubusercontent.com/villekf/OMEGA/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/villekf/OMEGA"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Contributing code to OMEGA\n\nContributions of external code to OMEGA are both desired and encouraged. Any and all functions/code enhancements are welcomed, whether they are e.g. new reconstruction algorithms, image analysis tools or new supported scanners (even simply main files).\n\nIf you wish to add your own code to OMEGA, you should either open an issue, submit a pull request or simply send an e-mail to me. The function can be either m-file, py-script, C++-file or OpenCL (cl) function.\n\nIf the function is a new reconstruction algorithm written in m-file or py-script, it can be ported by the OMEGA developer(s) to OpenCL, depending on the complexity of the algorithm. Functions utilizing e.g. the forward and backward projections of OMEGA can be included as well.\n\nNew algorithms will be added to the list of supported algorithms along with the provided citation(s). Other features will be added to the feature list along with the provided citation(s). The function itself should include mention of the authors of the file and the license.\n\nFunctions do not need to include documentation or examples, however, depending on the complexity of the code, this might delay the publication and inclusion of the code.\n"
      },
      "source": "https://raw.githubusercontent.com/villekf/OMEGA/master/CONTRIBUTING.md",
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-10-26T07:11:07Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-02T12:52:28Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Open-source multi-dimensional tomographic reconstruction software (OMEGA)"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "parent_header": [
          "OMEGA"
        ],
        "type": "Text_excerpt",
        "value": "OMEGA is a software for [MATLAB](https://www.mathworks.com/), [GNU Octave](https://www.gnu.org/software/octave/) and [Python](https://www.python.org/) to reconstruct tomographic data. See [Features](https://omega-doc.readthedocs.io/en/latest/features.html) for more information on available features. See Known Issues and Limitations below for software limitations. If you wish to add your own code (e.g. reconstruction algorithm) see [Contributing code to OMEGA](https://github.com/villekf/OMEGA/wiki/Contributing-code-to-OMEGA).\n\nDocumentation for the current version is available at https://omega-doc.readthedocs.io/en/latest/index.html\n\nThe algorithms implemented so far are:\n- Improved Siddon's ray tracer algorithm for the system matrix creation (code for regular Siddon available, but not used) [1,2]\n- Orthogonal distance-based ray tracer [3]\n- Volume of intersection ray tracer (THOR) [28].\n- Interpolation-based ray tracer [31]\n- Branchless distance-driven ray tracer [32,33]\n- Rotation-based projector [34]\n- Maximum Likelihood Expectation Maximization (MLEM) [4,5]\n- Ordered Subsets Expectation Maximization (OSEM) [6]\n- Complete-data Ordered Subsets Expectation Maximization (COSEM) [7]\n- Enhanced COSEM (ECOSEM) [8]\n- Accelerated COSEM (ACOSEM) [9]\n- Row-Action Maximum Likelihood Algorithm (RAMLA) [10]\n- Relaxed OSEM (ROSEM)\n- Rescaled Block-Iterative EM (RBI) [11]\n- Dynamic RAMLA (DRAMA) [12]\n- Modified RAMLA (MRAMLA), aka modified BSREM-2 [13] \n- Block Sequential Regularized Expectation Maximization (BSREM) [14]\n- One-step-late algorithm (OSL) [15]\n- Preconditioned Krasnoselskii-Mann algorithm (PKMA) [29]\n- Primal-dual hybrid gradient [35]\n- Condat-Vu [36,37]\n- Primal-dual Davis-Yin [38]\n- FISTA [39]\n- FDK [40]\n- LSQR [46]\n- CGLS [47]\n- (OS-)SART [48,49]\n- ASD-POCS [50]\n- Quadratic prior (Gibbs prior with quadratic potential function)\n- Huber prior [45]\n- Median Root Prior (MRP) [16]\n- L-filter (MRP-L) prior [17]\n- Finite Impulse Response Median Hybrid (MRP-FMH) prior [17,18]\n- Weighted mean prior [19,20]\n- Total variation (TV) [21, 22, 23]\n- Weighted TV [42]\n- Total generalized variation (TGV) [24]\n- Anisotropic diffusion (AD) Median Root Prior\n- Asymmetric parallel levels sets prior (APLS) [22]\n- Non-local means prior (NLM), including non-local TV [25,26,27]\n- Relative difference prior [30]\n- Generalized Gaussian Markov random field prior [41]\n- Modified hyperbolic prior [23,43]\n- Modified Lange prior [29,44]\n\n"
      },
      "source": "https://raw.githubusercontent.com/villekf/OMEGA/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9993385503790454,
      "result": {
        "original_header": "Purpose",
        "type": "Text_excerpt",
        "value": "The purpose of OMEGA is twofold. First it is designed to allow easy, fast and efficient reconstruction of any ray-tracing based tomographic imaging. Secondly, it is intended for easy algorithmic development as it allows easy matrix-free implementation of the forward (`A * x`)  and backward (`A^T * y`) projections. While OMEGA allows the use of any ray-tracing based tomographic data, it is optimized for positron emission tomography (PET), computed tomography (CT) and single emission computed tomography (SPECT).\n \n"
      },
      "source": "https://raw.githubusercontent.com/villekf/OMEGA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9205634482877806,
      "result": {
        "original_header": "Additional features",
        "type": "Text_excerpt",
        "value": "These features can be used as independent functions without any input needed from any other OMEGA files \n- Save images (matrices) in MATLAB/Octave in NIfTI, MetaImage, Interfile, Analyze 7.5, DICOM and raw binary formats ([saveImage.m](https://github.com/villekf/OMEGA/blob/master/source/saveImage.m))\n- Import NIfTI, MetaImage, Interfile, Analyze 7.5, DICOM and raw binary formats into MATLAB/Octave ([importData.m](https://github.com/villekf/OMEGA/blob/master/source/importData.m))\n- Save images (matrices) in MATLAB/Octave in Interfile ([saveInterfile.m](https://github.com/villekf/OMEGA/blob/master/source/saveInterfile.m)) or MetaImage formats ([saveMetaimage.m](https://github.com/villekf/OMEGA/blob/master/source/saveMetaimage.m))\n- Convert CT-attenuation coefficients into 511 keV attenuation coefficients ([attenuationCT_to_511.m](https://github.com/villekf/OMEGA/blob/master/source/attenuationCT_to_511.m))\n- (Experimental) Convert CT-attenuation coefficients directly from CT DICOM images into 511 keV attenuation coefficients ([create_atten_matrix_CT.m](https://github.com/villekf/OMEGA/blob/master/source/create_atten_matrix_CT.m))\n- Convert COO (Coordinate list) sparse matrix row indices into CSR (Compressed sparse row) indices ([coo_to_csr.m](https://github.com/villekf/OMEGA/blob/master/source/coo_to_csr.m))\n- Convert voxelized phantoms/sources into GATE compatible files ([Voxelized_phantom_handle.m](https://github.com/villekf/OMEGA/blob/master/source/Voxelized_phantom_handle.m), [Voxelized_source_handle.m](https://github.com/villekf/OMEGA/blob/master/source/Voxelized_source_handle.m)) \n"
      },
      "source": "https://raw.githubusercontent.com/villekf/OMEGA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9636868863409718,
      "result": {
        "original_header": "MATLAB",
        "type": "Text_excerpt",
        "value": "LMF output currently has to contain the time stamp (cannot be removed in GATE) and detector indices. The source location needs to be included if it was selected in the main-file, same goes for the scatter data. If you have any other options selected in the LMF output in GATE, then you will not get any sensible detector data. Source locations and/or scatter data can be deselected. LMF data, with different format than in GATE, are not supported. \nLMF source information is a lot more unreliable than the ASCII or ROOT version. LMF support has been deprecated in version 2.0. \nMoving bed is not supported at the moment (needs to be step-and-shoot and the different bed positions need to be handled as separate cases). \nOnly cylindrical symmetric scanners are supported inherently, for other types of scanners the user has to input the detector coordinates or use index-based reconstruction. \nFor CT, only cone beam flat panel scanners are supported. For other types of scanners, the user has to input the detector coordinates or modify the data such that it is approximately flat panel. \nROOT or ASCII data is not yet supported with GATE CT data. \nECAT geometry is supported only with ASCII data. ROOT data might also work (untested). \nIf you are experiencing crashes when using implementation 2, it might be caused by the graphics features of ArrayFire. In this case I recommend renaming/removing the libforge.so files from the ArrayFire library folder (e.g. `/opt/arrayfire/lib64/`). Alternatively you can install the no-gl AF:  \nhttp://arrayfire.s3.amazonaws.com/index.html (3.6.2 is the latest). Finally, you can also simply build AF from source, preferably without building Forge. This seems to apply only to Linux and affects both MATLAB and Octave. Python is unaffected! \nIf you get GLIBCXX_3.4.XX/CXXABI_1.3.XX not found error (or similar with a different version number) or an error about \"undefined reference to dlopen/dlclose/dlsomethingelse\" when building or running files, this should be fixed with one of the methods presented here:  \nhttps://se.mathworks.com/matlabcentral/answers/329796-issue-with-libstdc-so-6 \nIf you are using ROOT data with ROOT 6.16.00 or newer you might receive the following error message: \"undefined symbol: _ZN3tbb10interface78internal20isolate_within_arenaERNS1_13delegate_baseEl\". This is caused by the `libtbb.so.2` used by MATLAB (located in `/matlabroot/bin/glnxa64`). Same solutions apply as with the above case (e.g. renaming the file). See [installation help](https://omega-doc.readthedocs.io/en/latest/installation.html#linux) for details. \nROOT data import is unstable in MATLAB R2018b and earlier versions due to a library incompatibility between the Java virtual machine in MATLAB and ROOT. On Linux you will experience MATLAB crashes when importing ROOT data. There is a workaround for this by using MATLAB in the no Java mode (e.g `matlab -nojvm`), though you won't have any GUI or graphic features. MATLAB R2019a and up are unaffected. It is recommended to use `nojvm` for data load only (set `options.only_sinos = true` to load only the data). The new desktop might not have this issue, but this is currently untested.\n \n"
      },
      "source": "https://raw.githubusercontent.com/villekf/OMEGA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9779288589393029,
      "result": {
        "original_header": "Octave",
        "type": "Text_excerpt",
        "value": "Almost all MATLAB-based code runs significantly slower compared to MATLAB (this is due to the slowness of loops in Octave). Reconstructions are unaffected. \nMAT-files that are over 2 GB are not supported by Octave and such large data sets cannot be saved in Octave at the moment.\n \n"
      },
      "source": "https://raw.githubusercontent.com/villekf/OMEGA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9682487494344644,
      "result": {
        "original_header": "Python",
        "type": "Text_excerpt",
        "value": "Only implementation 2 is supported. \n"
      },
      "source": "https://raw.githubusercontent.com/villekf/OMEGA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8316930674611386,
      "result": {
        "original_header": "Intel",
        "type": "Text_excerpt",
        "value": "Intel GPUs do not support forward and/or backward projection masks.  \n"
      },
      "source": "https://raw.githubusercontent.com/villekf/OMEGA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.995392331101745,
      "result": {
        "original_header": "Upcoming Features",
        "type": "Text_excerpt",
        "value": "\nHere is a list of features that should appear in future releases: \n"
      },
      "source": "https://raw.githubusercontent.com/villekf/OMEGA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8194897583460194,
      "result": {
        "original_header": "Reporting Bugs and Feature Requests",
        "type": "Text_excerpt",
        "value": "For any bug reports I recommend posting an issue on GitHub. For proper analysis I need the main-file that you have used and if you have used GATE data then also the macros. Preferably also all possible .mat files created, especially if the problem occurs in the reconstruction phase. \nFor feature requests, post an issue on GitHub. I do not guarantee that a specific feature will be added in the future. \n"
      },
      "source": "https://raw.githubusercontent.com/villekf/OMEGA/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/villekf/OMEGA/wiki"
      },
      "source": "https://raw.githubusercontent.com/villekf/OMEGA/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/villekf/OMEGA/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 16
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/villekf/OMEGA/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "villekf/OMEGA"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "OMEGA"
      },
      "source": "https://raw.githubusercontent.com/villekf/OMEGA/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "OMEGA"
        ],
        "type": "Text_excerpt",
        "value": "For additional install help, see [installation help](https://omega-doc.readthedocs.io/en/latest/installation.html).\n\nPre-built libraries are supplied in the [releases](https://github.com/villekf/OMEGA/releases), however, you can also manually compile everything. \n\nFor manual compilation you're going to need a C++ compiler in order to compile the MEX-files/libraries and use this software. Visual Studio and GCC have been tested to work and are recommended depending on your platform (Visual Studio on Windows, GCC on Linux, clang should work on MacOS). Specifically, Visual Studio 2019 and 2022 have been tested to work on Windows 10 and as well as g++ 9.3 and g++ 10.5 on Ubuntu 22.04. MinGW++ also works though it is unable to compile ArrayFire OpenCL reconstructions (implementation 2) on Windows by default. Octave supports only MinGW++ on Windows and as such implementation 2 on Windows is only supported if you manually compile ArrayFire from source with MinGW (for instructions, see [here](https://github.com/villekf/OMEGA/wiki/Building-ArrayFire-with-Mingw-on-Windows)).\n\nMinGW++ for MATLAB can be downloaded from [here](https://se.mathworks.com/matlabcentral/fileexchange/52848-matlab-support-for-mingw-w64-c-c-compiler).\n\nVisual studio can be downloaded from [here](https://visualstudio.microsoft.com/). For Visual studio you'll only need \"Desktop development with C++\".\n\nOn Ubuntu you can install g++ with `sudo apt install build-essential`.\n\nTo install the OMEGA software, either simply extract the release/master package, download the MATLAB toolbox file from [releases](https://github.com/villekf/OMEGA/releases) (`OMEGA.-.Open-source.MATLAB.emission.tomography.software.mltbx`) or obtain the source code through git:  \n`git clone https://github.com/villekf/OMEGA`\nand then add the OMEGA folder and subfolders to MATLAB/Octave path (this is done automatically if you install with the mltbx-file) or /path/to/OMEGA/source/Python to PYTHONPATH. \nFinally, run `install_mex` in the source folder to build the necessary MEX-files or compile.py with Python. ROOT, OpenCL and CUDA support will be installed, if the corresponding files are found. \nPossible compilation errors can be seen with `install_mex(1)`. OpenCL include and library paths, ArrayFire path and ROOT path can also be set manually with \n`install_mex(0, OpenCL_include_path, OpenCL_lib_path, AF_PATH, ROOT_PATH)`. `OpenCL_include_path` should be the folder where `cl.h` is located, `OpenCL_lib_path` the folder where `OpenCL.lib/libOpenCL.so` (Windows/Linux) is located, \n`AF_PATH` the path to ArrayFire installation location and `ROOT_PATH` to ROOT installation location. For Python the paths can be input with \"python compile.py -R /path/to/ROOT -A /path/to/arrayfire -O /path/to/OpenCL\".\n\nCertain features on Octave (such as normalization calculation) require packages io and statistics. You can install them from the Octave user interface with the following commands (io has to be installed first):\n\n`pkg install -forge io`\n\n`pkg install -forge statistics`\n\nand then you need to load the statistics package:\n\n`pkg load statistics`\n\nPython only requires NumPy, though to load mat-files you need `pymatreader` and for multi-resolution reconstruction `scikit-image`.\n\nIn order to enable OpenCL support (implementations 2 and 3), you're going to need an OpenCL SDK/library and (for implementation 2) ArrayFire (see below). \nOn Linux you can alternatively just install the OpenCL headers and library. Below examples are for Ubuntu, but the packages should exist for other distros as well.\n\nHeaders (required only when manually building):\n`sudo apt-get install opencl-headers`\n\nand then the library:  \n`sudo apt-get install ocl-icd-opencl-dev`\n\nAlternative libraries in case the above one fails:\n`sudo apt-get install nvidia-opencl-dev`\nor\n`sudo apt-get install intel-opencl-icd`\n\nIn case the above doesn't work or you use Windows then you need to obtain an OpenCL SDK. The SDK can be any (or all) of the following: CUDA Toolkit, Intel OpenCL SDK, OCL-SDK, AMD APP SDK. \nOn all cases, the OpenCL library and header files (only when manually building) need to be on your system's PATH. By default, the install_mex-file assumes that you have installed CUDA toolkit (Linux and Windows), \nAMD APP SDK v3.0 (Linux and Windows), OCL-SDK (Windows), AMD GPU Pro drivers (Linux) or Intel SDK (Linux and Windows). If you get an error message like \"CL/cl.h: No such file or directory\", the headers could not be found. \nYou can manually add custom OpenCL paths with `install_mex(0, '/path/to/cl.h', '/path/to/libOpenCL.so')`. On Ubuntu you can use command `find / -iname cl.h 2>/dev/null` to find the required cl.h file and \n`find / -iname libOpenCL.so 2>/dev/null` to find the required library file. See `install_mex.m` for further details. `compile.py` functions similarly.\n\nCUDA functionality requires CUDA toolkit.\n\n**All library paths needs to be on system path when running the mex-files or otherwise the required libraries will not be found.**\n\nLinks:  \nhttps://software.intel.com/en-us/intel-opencl  \nhttps://developer.nvidia.com/cuda-toolkit  \nhttps://github.com/GPUOpen-LibrariesAndSDKs/OCL-SDK/releases  \n\nOnce you have the header and library files, you need drivers/OpenCL runtimes for your device(s). If you have GPUs/APUs then simply having the vendor drivers should be enough. \nFor Intel CPUs without an integrated GPU you need CPU runtimes (see the link below). \n\nFor AMD CPUs it seems that the AMD drivers released around the summer 2018 and after no longer support CPUs so you need an older driver in order to get CPU support or use an alternative runtime. \nOne possibility is to use PoCL http://portablecl.org/ and another is to try the Intel runtimes (link below).\n\nIntel runtimes can be found here:\nhttps://software.intel.com/en-us/articles/opencl-drivers\n\n\nThis software also uses ArrayFire library for the GPU/OpenCL implementation. You can find AF binaries from here:  \nhttps://arrayfire.com/binaries\nand the source code from here:  \nhttps://github.com/arrayfire/arrayfire\n\nInstalling/building ArrayFire to the default location (`C:\\Program Files\\ArrayFire` on Windows, `/opt/arrayfire/` on Linux/MacOS) should cause `install_mex` and `compile.py` to automatically locate everything. \nHowever, in both cases you need to add the library paths to the system PATH. On Windows you will be prompted for this during the installation, for Linux you need to add `/opt/arrayfire/lib` or \n`/opt/arrayfire/lib64` (depending which exists) to the library path (e.g. `sudo ldconfig /opt/arrayfire/lib64/` or `export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/arrayfire/lib64` if you don't have sudo permissions). \nAlternatively, on Linux, you can also build/install ArrayFire directly into the `/usr/local/` folder.\n\nUsing CUDA code instead of OpenCL requires the CUDA toolkit. On both cases the CUDA folder should be on the system path. `install_mex` and `compile.py` always attempts to build the CUDA code as well so no \nadditional input is required from the user if all the header and library data is found. By default `install_mex` and `compile.py` looks for CUDA in `/usr/local/cuda/` on Linux. \nOn Windows, CUDA location is determined from the environmental variables (PATH).\n\nFor additional install help, see [installation help](https://omega-doc.readthedocs.io/en/latest/installation.html).\n"
      },
      "source": "https://raw.githubusercontent.com/villekf/OMEGA/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9618387294492126,
      "result": {
        "original_header": "MATLAB",
        "type": "Text_excerpt",
        "value": "LMF source information is a lot more unreliable than the ASCII or ROOT version. LMF support has been deprecated in version 2.0. \nIf you are experiencing crashes when using implementation 2, it might be caused by the graphics features of ArrayFire. In this case I recommend renaming/removing the libforge.so files from the ArrayFire library folder (e.g. `/opt/arrayfire/lib64/`). Alternatively you can install the no-gl AF:  \nhttp://arrayfire.s3.amazonaws.com/index.html (3.6.2 is the latest). Finally, you can also simply build AF from source, preferably without building Forge. This seems to apply only to Linux and affects both MATLAB and Octave. Python is unaffected! \nIf you are using ROOT data with ROOT 6.16.00 or newer you might receive the following error message: \"undefined symbol: _ZN3tbb10interface78internal20isolate_within_arenaERNS1_13delegate_baseEl\". This is caused by the `libtbb.so.2` used by MATLAB (located in `/matlabroot/bin/glnxa64`). Same solutions apply as with the above case (e.g. renaming the file). See [installation help](https://omega-doc.readthedocs.io/en/latest/installation.html#linux) for details. \nROOT data import is unstable in MATLAB R2018b and earlier versions due to a library incompatibility between the Java virtual machine in MATLAB and ROOT. On Linux you will experience MATLAB crashes when importing ROOT data. There is a workaround for this by using MATLAB in the no Java mode (e.g `matlab -nojvm`), though you won't have any GUI or graphic features. MATLAB R2019a and up are unaffected. It is recommended to use `nojvm` for data load only (set `options.only_sinos = true` to load only the data). The new desktop might not have this issue, but this is currently untested.\n \n"
      },
      "source": "https://raw.githubusercontent.com/villekf/OMEGA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999491543439172,
      "result": {
        "original_header": "Octave",
        "type": "Text_excerpt",
        "value": "When using Windows implementation 2 (ArrayFire matrix free OpenCL) can only be enabled by manually building ArrayFire with Mingw. Instructions are provided [here](https://github.com/villekf/OMEGA/wiki/Building-ArrayFire-with-Mingw-on-Windows). Note that CUDA won't work even with manual building. \n"
      },
      "source": "https://raw.githubusercontent.com/villekf/OMEGA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.982537165120829,
      "result": {
        "original_header": "Reporting Bugs and Feature Requests",
        "type": "Text_excerpt",
        "value": "For any bug reports I recommend posting an issue on GitHub. For proper analysis I need the main-file that you have used and if you have used GATE data then also the macros. Preferably also all possible .mat files created, especially if the problem occurs in the reconstruction phase. \n"
      },
      "source": "https://raw.githubusercontent.com/villekf/OMEGA/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/villekf/OMEGA/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "computed-tomography, cone-beam-ct, cuda, emission-tomography, gate, gpgpu, gpu, image-reconstruction, inverse-problems, matlab, medical-imaging, octave, opencl, opengate, pet, python, reconstruction, tomography"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "GNU General Public License v3.0",
        "spdx_id": "GPL-3.0",
        "type": "License",
        "url": "https://api.github.com/licenses/gpl-3.0",
        "value": "https://api.github.com/licenses/gpl-3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<https://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<https://www.gnu.org/licenses/why-not-lgpl.html>.\n"
      },
      "source": "https://raw.githubusercontent.com/villekf/OMEGA/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "OMEGA"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "villekf"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "MATLAB",
        "size": 2650886,
        "type": "Programming_language",
        "value": "MATLAB"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 1491336,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 1193985,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 177286,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/villekf/OMEGA/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://omega-doc.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/villekf/OMEGA/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "villekf",
          "type": "User"
        },
        "date_created": "2024-07-18T08:03:10Z",
        "date_published": "2024-07-18T09:27:41Z",
        "description": "This is a release candidate for version 2.0. Due to this, the MATLAB toolbox-file is omitted and will be included in the final 2.0 release. However, pre-built binaries/library-files are included. There are separate packages for Linux and Windows and for Python, MATLAB and Octave. See the included readme for the optimal folder to extract the files, though any folder on path should suffice. Note that you can still manually build all the files as before. Despite being a pre-release, this version already has all the planned features except for additional SPECT projector. The current version includes only the rotation-based projector for SPECT, but the final release will also include a ray-based projector. \r\n\r\nFor a complete list of changes, see [release notes](https://github.com/villekf/OMEGA/blob/master/release_notes.md). Below are some highlights for this release:\r\n\r\n- Added (limited) support for Python\r\n  - Only a subset of features are implemented\r\n  - All core components have been implemented though\r\n  - Supports only implementation 2 and the class object\r\n  - Custom algorithms can be computed fully in the GPU by using ArrayFire arrays (OpenCL), PyTorch tensors (CUDA) or CuPy arrays (CUDA)\r\n  - The OMEGA forward and/or backward projection operators thus accept ArrayFire arrays, PyTorch tensors or CuPy arrays\r\n- (CB)CT reconstructions are much more efficient now than before as long as GPU computing is used\r\n- Support for raw data format dropped\r\n- Added two new projectors for CT data\r\n  - Projector type 4 is an interpolation-based GPU-only projector\r\n  - Projector type 5 is the branchless distance-driven projector (GPU only)\r\n  - Only supported by implementations 2 and 5\r\n- Added support for SPECT reconstruction\r\n  - Supports also GATE projection data\r\n  - Supports parallel hole collimators\r\n  - Built-in support for hexagonal and circular holes for the detector-response function\r\n  - Forward/backward projection class object is CPU (implementation 4) only in MATLAB/Octave, OpenCL and CUDA only in Python\r\n  - Supported only by implementations 2 and 4\r\n  - Rotation-based projector\r\n- Added support for hybrid projectors\r\n- New algorithms/priors and preconditioners\r\n- Almost complete code overhaul\r\n- Complete rework of the example-files\r\n- Changed coordinate system to be centered on origin\r\n\r\n",
        "html_url": "https://github.com/villekf/OMEGA/releases/tag/v2.0.0",
        "name": "Release candidate for v2.0",
        "release_id": 165992500,
        "tag": "v2.0.0",
        "tarball_url": "https://api.github.com/repos/villekf/OMEGA/tarball/v2.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/villekf/OMEGA/releases/165992500",
        "value": "https://api.github.com/repos/villekf/OMEGA/releases/165992500",
        "zipball_url": "https://api.github.com/repos/villekf/OMEGA/zipball/v2.0.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "villekf",
          "type": "User"
        },
        "date_created": "2024-06-26T09:56:24Z",
        "date_published": "2024-06-26T10:22:11Z",
        "description": "This is simple bugfix release in preparation of the bigger v2.0 release coming most likely on July 2024. V2 will break some features, such as raw data format, which means that this will be the last release to support it. The precompiled mex-files for Windows and Linux for MATLAB and GNU Octave are included in separate `mexFiles.zip` file. If the prebuilt binaries don't work, you can still compile new ones with `install_mex` as before. A MATLAB package file is also available as before though it does not contain the precompiled mex-files.\r\n\r\nFull list of fixes:\r\n\r\n- Fix CT projection data load when using binning values higher than 1\r\n- Compilation fixes for Octave on Windows\r\n- Implementation 2 (OpenCL) can now be used on Octave on Windows\r\n  - This still requires manual building of ArrayFire with MinGW\r\n- Fix implementation 1 and 4 in Octave when using PET data\r\n- Some fixes for older MATLAB versions\r\n- Fix attenuation correction when using GATE MuMap actor\r\n  - Fix errors caused by the above fix\r\n- Several fixes and enhancements for Voxelized_source/phantom_handles\r\n  - The user can now manually select the row and column indices to crop\r\n  - Lesion load when using PNG/TIFF/BMP images or DICOM data is now fixed\r\n  - Errors regarding missing lesion data are now fixed\r\n  - Cropping can now be disabled with source data as well\r\n  - Both functions now output the original row/column/slice indices that are included in the cropped image\r\n- SaveInterfile/MetaImage functions now accept custom pixel/voxel size\r\n- Fix raw data load when store_raw_data was false, but use_raw_data was true\r\n- Allow the use of more, or less, image slices than twice the number of crystal rings - 1\r\n- Allow the use of mini blocks for GATE data\r\n  - `options.axial_multip` can now be used to specify axial repetition with modules/submodules when R-sectors are already axially repeated\r\n- Implementation 4 is now usable when verbosity is set to 0\r\n- Compilation fixes for implementations 2 and 3",
        "html_url": "https://github.com/villekf/OMEGA/releases/tag/v1.2.1",
        "release_id": 161250203,
        "tag": "v1.2.1",
        "tarball_url": "https://api.github.com/repos/villekf/OMEGA/tarball/v1.2.1",
        "type": "Release",
        "url": "https://api.github.com/repos/villekf/OMEGA/releases/161250203",
        "value": "https://api.github.com/repos/villekf/OMEGA/releases/161250203",
        "zipball_url": "https://api.github.com/repos/villekf/OMEGA/zipball/v1.2.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "villekf",
          "type": "User"
        },
        "date_created": "2021-05-12T12:36:30Z",
        "date_published": "2021-05-12T13:15:48Z",
        "description": "This is the official v.1.2.0 release of OMEGA. \r\n\r\nFor changes since v1.1.1, see [release notes](https://github.com/villekf/OMEGA/blob/master/release_notes.md). The biggest change in this release is the addition of (cone or fan beam) transmission tomography (e.g. CT imaging) support.\r\n\r\nA MATLAB toolbox package (OMEGA.-.Open-source.MATLAB.tomography.software.mltbx) is recommended for anyone using MATLAB. It will automatically add the necessary folders to the path and you can easily uninstall the package from the Add-On Manager.\r\n\r\nIncluded are also precompiled mex-files for Linux (mexfiles_LINUX.7z) and Windows (mexfiles_WINDOWS.zip). However, you should use these ONLY if manual building fails.",
        "html_url": "https://github.com/villekf/OMEGA/releases/tag/v1.2.0",
        "name": "OMEGA v1.2.0",
        "release_id": 42839373,
        "tag": "v1.2.0",
        "tarball_url": "https://api.github.com/repos/villekf/OMEGA/tarball/v1.2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/villekf/OMEGA/releases/42839373",
        "value": "https://api.github.com/repos/villekf/OMEGA/releases/42839373",
        "zipball_url": "https://api.github.com/repos/villekf/OMEGA/zipball/v1.2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "villekf",
          "type": "User"
        },
        "date_created": "2021-01-29T08:37:08Z",
        "date_published": "2021-01-29T08:37:46Z",
        "description": "A bug fix release for OMEGA. This release contains mainly several (major) fixes, but also some new features. Recommended for anyone using OMEGA. You need to re-run `install_mex` to use the updated mex-files.\r\n\r\nFor changes since v1.1.0, see [release_notes.md](https://github.com/villekf/OMEGA/blob/master/release_notes.md).\r\n\r\nA MATLAB toolbox package (OMEGA.-.Open-source.MATLAB.emission.tomography.software.mltbx) is recommended for anyone using MATLAB. It will automatically add the necessary folders to the path and you can easily uninstall the package from the Add-On Manager.\r\n\r\nIncluded are also precompiled mex-files for Linux (mexfiles_LINUX.zip) and Windows (mexfiles_WINDOWS.zip). However, you should use these ONLY if manual building fails. Linux package now contains different versions for different MATLAB versions, compiled with the supported g++. This should avoid any errors with libstdc++.\r\n\r\nXCAT data can be obtained from release v.1.1.0 below.",
        "html_url": "https://github.com/villekf/OMEGA/releases/tag/v1.1.1",
        "name": "OMEGA v1.1.1",
        "release_id": 36773750,
        "tag": "v1.1.1",
        "tarball_url": "https://api.github.com/repos/villekf/OMEGA/tarball/v1.1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/villekf/OMEGA/releases/36773750",
        "value": "https://api.github.com/repos/villekf/OMEGA/releases/36773750",
        "zipball_url": "https://api.github.com/repos/villekf/OMEGA/zipball/v1.1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "villekf",
          "type": "User"
        },
        "date_created": "2020-11-09T20:21:15Z",
        "date_published": "2020-11-10T11:32:03Z",
        "description": "This is the official v1.1.0 release of OMEGA.\r\n\r\nFor changes since v1.0.0, see [release_notes.md](https://github.com/villekf/OMEGA/blob/master/release_notes.md).\r\n\r\nA MATLAB toolbox package (`OMEGA.-.Open-source.MATLAB.emission.tomography.software.mltbx`) is recommended for anyone using MATLAB. It will automatically add the necessary folders to the path and you can easily uninstall the package from the Add-On Manager.\r\n\r\nIncluded are also precompiled mex-files for Linux (`mexfiles_LINUX.zip`) and Windows (`mexfiles_WINDOWS.zip`). However, you should use these ONLY if manual building fails.\r\n\r\nFurthermore, if you are interested in replicating the mCT GATE simulations in the `exampleGATE` folder, you'll need the XCAT binary phantom files included in `xcatdata.zip`.",
        "html_url": "https://github.com/villekf/OMEGA/releases/tag/v1.1.0",
        "name": "OMEGA v1.1.0",
        "release_id": 33714218,
        "tag": "v1.1.0",
        "tarball_url": "https://api.github.com/repos/villekf/OMEGA/tarball/v1.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/villekf/OMEGA/releases/33714218",
        "value": "https://api.github.com/repos/villekf/OMEGA/releases/33714218",
        "zipball_url": "https://api.github.com/repos/villekf/OMEGA/zipball/v1.1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "villekf",
          "type": "User"
        },
        "date_created": "2020-10-30T10:49:53Z",
        "date_published": "2019-10-29T22:03:00Z",
        "description": "This is the official v1.0.0 release of OMEGA. \r\n\r\nFor changes since the last pre-release, see [release_notes.md](https://github.com/villekf/OMEGA/blob/master/release_notes.md).\r\n\r\nExample MAT-files can be found from: [![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.3522199.svg)](https://doi.org/10.5281/zenodo.3522199)",
        "html_url": "https://github.com/villekf/OMEGA/releases/tag/v1.0.0",
        "name": "OMEGA v1.0.0",
        "release_id": 21051616,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/villekf/OMEGA/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/villekf/OMEGA/releases/21051616",
        "value": "https://api.github.com/repos/villekf/OMEGA/releases/21051616",
        "zipball_url": "https://api.github.com/repos/villekf/OMEGA/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "villekf",
          "type": "User"
        },
        "date_created": "2018-10-29T13:43:32Z",
        "date_published": "2018-10-29T13:47:19Z",
        "description": "Initial release of OMEGA. OMEGA_v0.9_source.zip contains only the source files with no non-GATE example mat-files.",
        "html_url": "https://github.com/villekf/OMEGA/releases/tag/0.9",
        "name": "Beta release",
        "release_id": 13709433,
        "tag": "0.9",
        "tarball_url": "https://api.github.com/repos/villekf/OMEGA/tarball/0.9",
        "type": "Release",
        "url": "https://api.github.com/repos/villekf/OMEGA/releases/13709433",
        "value": "https://api.github.com/repos/villekf/OMEGA/releases/13709433",
        "zipball_url": "https://api.github.com/repos/villekf/OMEGA/zipball/0.9"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "System Requirements",
        "parent_header": [
          "OMEGA"
        ],
        "type": "Text_excerpt",
        "value": "MATLAB R2009a or later is mandatory. Following versions are guaranteed to work: 2022a and 2023b.\n\nFor Octave, any version above 5.0 should be fine. io, statistics and image packages are required for some features.\n\nFor Python 3.8 and above should work, though most likely earlier versions will work too.\n\nC++11 compiler is required when manually compiling.\n\nFor Windows Visual Studio 2022 or 2019 is recommended with \"Desktop development with C++\", no other options are required. https://visualstudio.microsoft.com/\n\nFor Linux it is recommended to use g++ which usually comes bundled with the system. \n\nOn MacOS Xcode should be used https://apps.apple.com/us/app/xcode/id497799835?mt=12.\n\nOpenCL library is required for OpenCL functionality.\n\nArrayFire is required for implementation 2.\n\nFor OpenCL, an OpenCL 1.2 compatible device is required. For CUDA, compute capability of 2.0 or higher is required.\n\nThe following third-party MATLAB codes are NOT required, but can be useful in certain specialized cases as they can be optionally used:  \nhttps://se.mathworks.com/matlabcentral/fileexchange/27076-shuffle (Shuffle, used by random subset sampling)\nhttps://se.mathworks.com/matlabcentral/fileexchange/22940-vol3d-v2 (vol3d v2, used for 3D visualization)  \nhttps://www.mathworks.com/matlabcentral/fileexchange/8797-tools-for-nifti-and-analyze-image (Tools for NIfTI and ANALYZE image, to load/save Analyze files and also NIfTI files in absence of image processing toolbox).\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/villekf/OMEGA/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "run",
    "download",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 08:57:39",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 65
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Getting Started",
        "parent_header": [
          "OMEGA"
        ],
        "type": "Text_excerpt",
        "value": "For detailed installation instructions, see https://omega-doc.readthedocs.io/en/latest/installation.html\n\nPrecompiled libraries are included in [releases](https://github.com/villekf/OMEGA/releases). However, in case those do not work you can also manually compile all the necessary files. When using MATLAB or GNU Octave, run `install_mex` first. For Python, you need run `compile.py` located in /path/to/OMEGA/source/Python.\n\nFor basic usage, see https://omega-doc.readthedocs.io/en/latest/usage.html\n\nExamples for MATLAB/GNU Octave are in main-files folder, while for Python in the aforementioned Python-folder.\n"
      },
      "source": "https://raw.githubusercontent.com/villekf/OMEGA/master/README.md",
      "technique": "header_analysis"
    }
  ]
}