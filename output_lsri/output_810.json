{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citations",
        "type": "Text_excerpt",
        "value": "Please cite the paper if you use this code:\n\nYang Li, Ning Jiang, Yanni Sun, AnnoSINE: a short interspersed nuclear elements\nannotation tool for plant genomes, Plant Physiology, Volume 188, Issue 2,\nFebruary 2022, Pages 955\u2013970, https://doi.org/10.1093/plphys/kiab524\n"
      },
      "source": "https://raw.githubusercontent.com/yangli557/AnnoSINE/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/yangli557/AnnoSINE"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-06-07T05:45:27Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-06-07T08:08:40Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SINE annotation tool for plant genomes"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "type": "Text_excerpt",
        "value": "AnnoSINE is a SINE annotation tool for plant genomes. The program is designed to\ngenerate high-quality non-redundant SINE libraries for genome annotation. It\nuses the manually curated SINE library in the _Oryza sativa_ genome to benchmark\nthe annotation performance.\n\n<div  align=\"center\">\n<img src=\"https://github.com/yangli557/AnnoSINE/blob/main/pipeline.png\" width = \"700\" height = \"900\" />\n</div>\n\n<!AnnoSINE has eight major modules. The first one is to identify putative SINE candidates by applying hidden Markov model (HMM)-based homology search, structure-based *de novo* search or combinition of homology-structure-based search. This step is usually sensitive but can output many false SINE candidates. In the 2nd step, it searches for target site duplication (TSD) in the flanking region to further verify each SINE candidate. As TSD is a significant feature of SINEs, this step is highly effective in removing non-SINEs. Although searching for TSD can be conducted in the later stage of the pipeline, removing false positives earlier can save the computational time of the downstream analysis. In the 3rd step, it examines the copy number and the alignment of SINE copies to remove the sequences with few copy numbers or shifted/fragmented/extended alignments. In addition, it can identify some lineage-specific differences, such as the length of the 3' end using the alignment profile. In the 4th step, it decides the superfamily of each candidate SINE sequence and remove highly similar candidates from known non-coding RNAs. Meanwhile, the highly identical sequences assembling to RNA are false positives. In the 5th step, it removes candidates with a large proportion of tandem repeats. In the 6th step, it removes other TEs by detecting inverted repeats adjacent to TSDs. These steps focused on identifying complete SINEs (i.e., *seed sequences*) in the query genome. Redundant seeds are filtered to generate the SINE library. After we obtain the non-redundant seed sequences, it will apply RepeatMasker to identify other SINEs to complete the whole genome SINE annotation in the last step.-->\n"
      },
      "source": "https://raw.githubusercontent.com/yangli557/AnnoSINE/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9175859946520951,
      "result": {
        "original_header": "Table of Contents",
        "type": "Text_excerpt",
        "value": "# Introduction \nAnnoSINE is a SINE annotation tool for plant genomes. The program is designed to\ngenerate high-quality non-redundant SINE libraries for genome annotation. It\nuses the manually curated SINE library in the _Oryza sativa_ genome to benchmark\nthe annotation performance. \n<!AnnoSINE has eight major modules. The first one is to identify putative SINE candidates by applying hidden Markov model (HMM)-based homology search, structure-based *de novo* search or combinition of homology-structure-based search. This step is usually sensitive but can output many false SINE candidates. In the 2nd step, it searches for target site duplication (TSD) in the flanking region to further verify each SINE candidate. As TSD is a significant feature of SINEs, this step is highly effective in removing non-SINEs. Although searching for TSD can be conducted in the later stage of the pipeline, removing false positives earlier can save the computational time of the downstream analysis. In the 3rd step, it examines the copy number and the alignment of SINE copies to remove the sequences with few copy numbers or shifted/fragmented/extended alignments. In addition, it can identify some lineage-specific differences, such as the length of the 3' end using the alignment profile. In the 4th step, it decides the superfamily of each candidate SINE sequence and remove highly similar candidates from known non-coding RNAs. Meanwhile, the highly identical sequences assembling to RNA are false positives. In the 5th step, it removes candidates with a large proportion of tandem repeats. In the 6th step, it removes other TEs by detecting inverted repeats adjacent to TSDs. These steps focused on identifying complete SINEs (i.e., *seed sequences*) in the query genome. Redundant seeds are filtered to generate the SINE library. After we obtain the non-redundant seed sequences, it will apply RepeatMasker to identify other SINEs to complete the whole genome SINE annotation in the last step.--> \n# Installation\n```\ncd ./AnnoSINE/bin\npip3 install -r requirements.txt\n```\n# Usage\n```\npython3 AnnoSINE.py [options] <mode> <input_filename> <output_filename>\n```\n## Argument\n```\npositional arguments:\n  mode                  [1 | 2 | 3]\n                        Choose the running mode of the program.\n                                1--Homology-based method;\n                                2--Structure-based method;\n                                3--Hybrid of homology-based and structure-based method.\n  input_filename        input genome assembly path\n  output_filename       output files path\n\noptional arguments:\n  -h, --help                 show this help message and exit\n  -l, --length_factor        Threshold of the local alignment length relative to the the BLAST query length (default: 0.3)\n  -c, --copy_number_factor   Threshold of the copy number that determines the SINE boundary (default: 0.15)\n  -s, --shift                Maximum threshold of the boundary shift (default: 80)\n  -g, --gap                  Maximum threshold of the trancated gap (default: 10)\n  -minc, --copy_number       Minimum threshold of the copy number for each element (default: 20)\n  -b, --boundary             Output SINE seed boundaries based on TSD or MSA (default: msa)\n  -f, --figure          Output the SINE seed MSA figures and copy number profiles (y/n) (default: n)\n  -r, --non_redundant    Annotate SINE in the whole genome based on the non\u2014redundant library (y/n) (default: y)\n```\n \n- Redundant SINE library: $ Step7_cluster_output.fasta\n- Non-redundant SINE library with serial number: $Seed_SINE.fa.\n- Whole-genome SINE annotation: $Input_genome.fasta.out. This file contains\n  high-similarity SINE annotations. \n"
      },
      "source": "https://raw.githubusercontent.com/yangli557/AnnoSINE/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9495374537716517,
      "result": {
        "original_header": "Testing",
        "type": "Text_excerpt",
        "value": "Results of AnnoSINE tests on testing data are saved in Output_Files.\n \n"
      },
      "source": "https://raw.githubusercontent.com/yangli557/AnnoSINE/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9237573384306033,
      "result": {
        "original_header": "Table of Contents",
        "type": "Text_excerpt",
        "value": "Please cite the paper if you use this code: \n"
      },
      "source": "https://raw.githubusercontent.com/yangli557/AnnoSINE/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9809583777790519,
      "result": {
        "original_header": "<a href=\"#Usage\">Usage</a>",
        "type": "Text_excerpt",
        "value": "# Table of Contents \n"
      },
      "source": "https://raw.githubusercontent.com/yangli557/AnnoSINE/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/yangli557/AnnoSINE/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 8
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/yangli557/AnnoSINE/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "yangli557/AnnoSINE"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "AnnoSINE"
      },
      "source": "https://raw.githubusercontent.com/yangli557/AnnoSINE/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/yangli557/AnnoSINE/main/pipeline.png"
      },
      "source": "https://raw.githubusercontent.com/yangli557/AnnoSINE/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "```\ncd ./AnnoSINE/bin\npip3 install -r requirements.txt\n```\n"
      },
      "source": "https://raw.githubusercontent.com/yangli557/AnnoSINE/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9489150121960954,
      "result": {
        "original_header": "Table of Contents",
        "type": "Text_excerpt",
        "value": "<div  align=\"center\">\n<img src=\"https://github.com/yangli557/AnnoSINE/blob/main/pipeline.png\" width = \"700\" height = \"900\" />\n</div> \n# Prerequisites \nTo use AnnoSINE, you need to install the tools listed below. \nYou can test the AnnoSINE with one chromosome in _Arabisopsis thaliana_ (it\ntakes about 6 mins).\n```\ncd ./AnnoSINE/bin\npython3 AnnoSINE.py 3 ../Testing/A.thaliana_Chr4.fasta ../Output_Files\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/yangli557/AnnoSINE/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/yangli557/AnnoSINE/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021 Yang Li\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/yangli557/AnnoSINE/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "AnnoSINE"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "yangli557"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 99621,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "JavaScript",
        "size": 5748,
        "type": "Programming_language",
        "value": "JavaScript"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/yangli557/AnnoSINE/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Prerequisites",
        "type": "Text_excerpt",
        "value": "To use AnnoSINE, you need to install the tools listed below.\n\n- [Python 3.7.4](https://www.python.org/)\n- [HMMER 3.3.1](http://hmmer.org/download.html)\n- [BLAST+ 2.10.1](https://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/2.10.1/)\n- [TRF 4.09.1](https://github.com/Benson-Genomics-Lab/TRF/releases/tag/v4.09.1)\n- [IRF 3.08](https://github.com/Benson-Genomics-Lab/IRF/releases/tag/IRFv3.08)\n- [CD-HIT 4.8.1](https://github.com/weizhongli/cdhit/releases/download/V4.8.1/cd-hit-v4.8.1-2019-0228.tar.gz)\n- [RepeatMasker 4.1.2](http://www.repeatmasker.org/RepeatMasker/) (Search\n  Engine: [RMBlast 2.14.1+](https://www.repeatmasker.org/rmblast/))\n- [Node 12.18.2](https://nodejs.org/en/download/)\n"
      },
      "source": "https://raw.githubusercontent.com/yangli557/AnnoSINE/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 02:26:38",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 18
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "type": "Text_excerpt",
        "value": "```\npython3 AnnoSINE.py [options] <mode> <input_filename> <output_filename>\n```\n"
      },
      "source": "https://raw.githubusercontent.com/yangli557/AnnoSINE/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Argument",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```\npositional arguments:\n  mode                  [1 | 2 | 3]\n                        Choose the running mode of the program.\n                                1--Homology-based method;\n                                2--Structure-based method;\n                                3--Hybrid of homology-based and structure-based method.\n  input_filename        input genome assembly path\n  output_filename       output files path\n\noptional arguments:\n  -h, --help                 show this help message and exit\n  -l, --length_factor        Threshold of the local alignment length relative to the the BLAST query length (default: 0.3)\n  -c, --copy_number_factor   Threshold of the copy number that determines the SINE boundary (default: 0.15)\n  -s, --shift                Maximum threshold of the boundary shift (default: 80)\n  -g, --gap                  Maximum threshold of the trancated gap (default: 10)\n  -minc, --copy_number       Minimum threshold of the copy number for each element (default: 20)\n  -b, --boundary             Output SINE seed boundaries based on TSD or MSA (default: msa)\n  -f, --figure          Output the SINE seed MSA figures and copy number profiles (y/n) (default: n)\n  -r, --non_redundant    Annotate SINE in the whole genome based on the non\u2014redundant library (y/n) (default: y)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/yangli557/AnnoSINE/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Inputs",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Genome sequence(fasta format).\n"
      },
      "source": "https://raw.githubusercontent.com/yangli557/AnnoSINE/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Outputs",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "- Redundant SINE library: $ Step7_cluster_output.fasta\n- Non-redundant SINE library with serial number: $Seed_SINE.fa.\n- Whole-genome SINE annotation: $Input_genome.fasta.out. This file contains\n  high-similarity SINE annotations.\n"
      },
      "source": "https://raw.githubusercontent.com/yangli557/AnnoSINE/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Intermediate Files",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "- SINE candidates information predicted by homology search: $\n  ../Family_Seq/Family_Name/Family_Name.out. (m=1 or 3 required)\n- SINE candidate sequences predicted by structure search: $\n  ../Input_Files/Input_genome-matches.fasta. (m=2 or 3 required)\n- Extended candidate sequences for TSD search: $ Step1_extend_tsd_input.fa\n- TSD identification outputs: $ Step2_tsd.txt\n- MSA extended input sequences flanked with TSD: $ Step2_extend_blast_input.fa\n- MSA output: $ Step3_blast_output.out\n- Intermediate sequences with MSA quality examination: $\n  Step3_blast_process_output.fa\n- SINE candidate sequences after MSA quality examination: $\n  Step4_rna_input.fasta\n- SINE candidates blast against RNA database outputs $ Step4_rna_output.out\n- Classified SINE candidates after RNA examintation $ Step4_rna_output.fasta\n- TRF output $ Step4_rna_output.fasta.2.5.7.80.10.10.2000.dat\n- SINE candidates after removing elements consist of tandem repeats $\n  Step5_trf_output.fasta\n- SINE candidate sequences after extension: $ Step6_irf_input.fasta.\n- IRF output $ Step6_irf_input.fasta.2.3.5.80.10.20.500000.10000.dat\n- SINE candidates after removing elements flanked with inverted repeats: $\n  Step6_irf_output.fasta\n- CD-HIT output: $ Step7_cluster_output.fasta.clstr\n"
      },
      "source": "https://raw.githubusercontent.com/yangli557/AnnoSINE/main/README.md",
      "technique": "header_analysis"
    }
  ]
}