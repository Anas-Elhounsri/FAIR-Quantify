{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/alevar/tiebrush"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-05-27T01:22:48Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-05-07T09:24:51Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Summarize and filter read alignments from multiple sequencing samples (taken as sorted BAM files)"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9447078213087697,
      "result": {
        "original_header": "TieBrush, TieCov and Sashimi: efficient methods for aggregating and summarizing aligned sequences across large datasets",
        "type": "Text_excerpt",
        "value": "Introduction\n^^^^^^^^^^^^ \nTieBrush is a simple yet efficient method for merging redundant information from multiple alignment files, \ndesigned to enable rapid manipulation of extremely large sequencing datasets. The method is specifically \ndesigned to optimize investigations of RNA, whole-genome, exome and other types of sequencing experiments. \nTieBrush preserves much of the original information in a greatly condensed representation as a BAM file, \nwhich allows manipulation and extraction of dataset and subset-specific statistics using tools within \nthe package, and which is also compatible with other common utilities. \nThis utility aims to merge/collapse \"duplicate\" read alignments (same location with the same CIGAR string),\nacross multiple sequencing samples (multiple input BAM files), adding custom SAM tags in order to keep\ntrack of the \"alignment multiplicity\" count (how many times the same alignment is seen across all\ninput data) and \"sample count\" (how many samples show that same alignment).\nThe initial goal is to generate this composite BAM file which multiplexes read alignments\nfrom many sequencing samples, painting a comprehensive \"background\" picture of read alignments\nwith their counts across many samples. \n    Ales Varabyou, Geo Pertea, Christopher Pockrandt, Mihaela Pertea, TieBrush: an efficient method for aggregating and summarizing mapped reads across large datasets, Bioinformatics, 2021;, btab342, https://doi.org/10.1093/bioinformatics/btab342 \nSashimi plot is largely based on the implementation from the MISO package. please cite both the TieBrush publication as well as the original MISO paper: \n    Katz, Yarden, Eric T. Wang, Jacob Silterra, Schraga Schwartz, Bang Wong, Helga Thorvaldsd\u00f3ttir, James T. Robinson, Jill P. Mesirov, Edoardo M. Airoldi, and Christopher B. Burge. \"Quantitative visualization of alternative exon expression from RNA-seq data.\" Bioinformatics 31, no. 14 (2015): 2400-2402. \nIf you want to build it from source, we recommend cloning the git repository as shown below to ensure\nfixed releases of any dependencies are fetched and compiled with the software. \nFor a fully static build `-DTIEBRUSH_STATIC_BUILD=1` needs to be added to the list of arguments\nin the cmake command. \nIf you are using a very old version of Git (< 1.6.5) the flag ``--recursive`` does not exist.\nIn this case you need to clone the submodule separately  (``git submodule update --init --recursive``). \nSummarize and filter read alignments from multiple sequencing samples (taken as sorted BAM files).\nThis utility aims to merge/collapse \"duplicate\" read alignments (same location with the same\nCIGAR string), across multiple sequencing samples (multiple input BAM files), adding custom SAM tags\nin order to keep track of the \"alignment multiplicity\" count (how many times the same alignment is\nseen across all input data) and \"sample count\" (how many samples show that same alignment). \nThe goal is to generate this composite BAM file which multiplexes read alignments from many sequencing\nsamples, painting a comprehensive \"background\" picture of read alignments with their counts across\nmany samples.\n:: \n  ...        Input can be provided as a space-delimited list of filenames or as a text file containing a \n             list of filenames, one per line \n  -h, --help        Show this help message and exit\n  --version         Show the program version end exit\n  -L, --full        If enabled, only reads with the same CIGAR and MD strings will be grouped and collapsed. \n                    By default, TieBrush will consider the CIGAR string only when grouping reads\n  -P, --clip        If enabled, reads will be grouped by clipped CIGAR string. In this mode 5S10M5S and \n                    3S10M3S CIGAR strings will be grouped if the coordinates of the matching substring (10M) \n                    are the same between reads\n  -E, --exon        If enabled, reads will be grouped if their exon boundaries are the same. This option discards\n                    any structural variants contained in mapped substrings of the read and only considers start \n                    and end coordinates of each non-splicing segment of the CIGAR string\n  -S, --keep-supp   If enabled, supplementary alignments will be included in the collapsed groups of reads. \n                    By default, TieBrush removes any mappings not listed as primary (0x100). Note, that if enabled,\n                    each supplementary mapping will count as a separate read\n  -M, --keep-unmap  If enabled, unmapped reads will be retained (uncollapsed) in the output. \n                    By default, TieBrush removes any unmapped reads\n  -N                Maximum NH score (if available) to include.\n  -Q                Minimum mapping quality to include.\n  -F                Bits in SAM flag to use in read comparison. Only reads that have specified flags will be\n                    merged together (default: 0) \n"
      },
      "source": "https://raw.githubusercontent.com/alevar/tiebrush/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9609443444528323,
      "result": {
        "original_header": "Custom SAM tags implemented",
        "type": "Text_excerpt",
        "value": "1. **YC**:i:N stores the number of alignments that were merged into this alignment record (multiplicity count)\n2. **YX**:i:N stores the number of samples that have this alignment (sample count)\n3. **YD**:i:N keeps track of the maximum number of contiguous bases preceding the start of the read alignment in the samples(s) that it belongs to. In other words, if the current alignment is part of an exon-overlapping bundle (strand specific!), this value holds the maximum distance from the beginning of the bundle to the start of this alignment, across all samples having this alignment. If the alignment is not in a bundle (i.e. it is preceded by a uncovered region as it is not overlapped by any another alignment with a lower start position), in all the individual samples where that alignment is present, then the ``YD`` value is 0 and the tag is omitted from the output file produced by TieBrush. That means that all the alignments lacking a ``YD`` tag in the TieBrush output start at the very beginning of an exon-overlapping bundle (i.e. are not overlapped by a preceding alignment with a lower start coordinate). \nIf either ``YC`` or ``YX`` tags are missing (i.e. ``GBamRecord::tag_int()`` call returns 0) then the alignment is unique (when ``YC`` is 0) or only one sample has it (if ``YX`` is 0). The actual count in such cases is 1. \n1. a BedGraph file with the coverage data (see http://genome.ucsc.edu/goldenPath/help/bedgraph.html); this file can be converted to BigWig (using bedGraphToBigWig) or to TDF format (using igvtools) in order to be loaded in IGV as an additional coverage track\n2. a junction BED file which can be loaded directly in IGV as an additional junction track (http://software.broadinstitute.org/software/igv/splice_junctions)\n3. a heatmap BED that uses color intensity to represent the number of samples that contain each position. \n  tiecov [-s out.sample.bed] [-c out.coverage.bedgraph] [-j out.junctions.bed] [-W] input\n  \n  Input arguments (required):\n  \n  input  alignment file in SAM/BAM/CRAM format\n  \n  Optional arguments (at least one of -s/-c/-j must be specified):\n  \n  -s    output BED file with an estimate of the number of samples which contain alignments \n        for each interval.\n  -j    output BED file with coverage of all splice-junctions in the input file.\n  -c    output BedGraph (or BigWig with '-W') file with coverage for all mapped bases.\n  -W    save coverage to -c file in BigWig format. Default output is in BED format. \nTieWrap is a small utility script provided to make running TieBrush on large datasets a bit easier.\nUnlike TieBrush, TieWrap can be launched with as many input files as needed and will automatically\ndivide them into batches processing and combining batches to produce a single representation at the end.\nAll standard TieBrush arguments can be passed over to TieWrap. Additionally size of individual batches\nas well as the concurrency parameters can be set explicitely. \n  ...       Input can be provided as a space-delimited list of filenames or as a textfile containing a list of \n            filenames one per each line. \n  -h, --help            show this help message and exit\n  -L, --full            If enabled, only reads with the same CIGAR and MD strings will be grouped and collapsed. \n                        By default, TieBrush will consider the CIGAR string only when grouping reads.\n  -P, --clip            If enabled, reads will be grouped by clipped CIGAR string. In this mode 5S10M5S and \n                        3S10M3S cigar strings will be grouped if the coordinates of the matching substring (10M) \n                        are the same between reads.\n  -E, --exon            If enabled, reads will be grouped if their exon boundaries are the same. This option discards\n                        any structural variants contained in mapped substrings of the read and only considers start and \n                        end coordinates of each non-splicing segment of the CIGAR string.\n  -S, --keep-supp       If enabled, supplementary alignments will be included in the collapsed groups of reads. By default, \n                        TieBrush removes any mappings not listed as primary (0x100). Note, that if enabled, each \n                        supplementary mapping will count as a separate read.\n  -M, --keep-unmap      If enabled, unmapped reads will be retained (uncollapsed) in the output. \n                        By default, TieBrush removes any unmapped reads.\n  -N, --max-nh          Maximum NH score of the reads to retain.\n  -Q, --min-map-qual    Minimum mapping quality of the reads to retain.\n  -F, --flags           Bits in SAM flag to use in read comparison. Only reads that have specified flags will be merged \n                        together (default: 0)\n  -t, --threads         Number of threads to use.\n  -b, --batch-size      Number of input files to process in a batch on each thread. \nSashimi.py is a small utility script provided to create vectorized visualizzation of a locus, taking full advantage of the files created by TieBrush suite. \n    options:\n      -h, --help            show this help message and exit\n      --gtf GTF             annotation in a GFF/GTF format\n      --cov COV             coverage in bedgraph format or a file containing a list of filenames with coverage\n                            in bedgraph for multiple samples. If a list is provided - the files should be in \n                            the same order as the splice junctions below (if provided)\n      --sj SJ               splice junctions in bed format or a file containing a list of filenames with splice \n                            junctions in bed format for multiple samples. If a list is provided - the files \n                            should be in the same order as the coverage tracks.\n      -o OUTPUT, --output OUTPUT\n                            Filename for the output figure. The format (png,svg, ...) will be automatically \n                            deduced based on the extension.\n      --intron_scale INTRON_SCALE\n                            Parameter regulating the scaling of the introns (Default: 20). Decreasing the integer \n                            value will scale introns down in size compared to exons.\n      --exon_scale EXON_SCALE\n                            Parameter regulating the scaling of the exons (Default: 1). Increasing the integer \n                            value will scale exons down in size compared to introns.\n      --resolution RESOLUTION\n                            Parameter regulates the smoothing factor of the coverage track (Default: 6). Increasing \n                            the value will increase the smoothing by reducing the number of points on the coverage track.\n      --fig_width FIG_WIDTH\n                            Width of the figure in inches (Default: 20).\n      --fig_height FIG_HEIGHT\n                            Height of the figure in inches (Default: 10).\n      --font_size FONT_SIZE\n                            Size of the font (Default: 18)\n      --nxticks NXTICKS     Number of positional markers to include on the x-axis with labels (Default: 4).\n      --number_junctions    Disables labels idicating coverage of splice junctions\n      --reverse             Flips image horizontally, which is equivalent to setting strand to the opposite value.\n      --title   TITLE [TITLE ...] Title of the figure.\n      --pickle              Save a pickle alongside the figure which can be loaded into a separate instance of \n                            matplotlib for modification.\n      --compare COMPARE     Users can specify one of the input transcripts to serve as a reference. If set, all \n                            transcripts in the input will be compared to the reference and plotted using a dedicated\n                            color pallete. The comparison will visualize in-frame and out-of-frame positions as well\n                            as any intervals missing and extra between the reference and each query transcript\n      --all-junctions       Will force the script to display all junctions, including those not present in the GTF\n \n"
      },
      "source": "https://raw.githubusercontent.com/alevar/tiebrush/master/README.rst",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/alevar/tiebrush/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/alevar/tiebrush/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "alevar/tiebrush"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "TieBrush, TieCov and Sashimi: efficient methods for aggregating and summarizing aligned sequences across large datasets"
      },
      "source": "https://raw.githubusercontent.com/alevar/tiebrush/master/README.rst",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/alevar/tiebrush/master/build_bwlib.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/alevar/tiebrush/master/run_tests.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.9608891435829089,
      "result": {
        "original_header": "TieBrush, TieCov and Sashimi: efficient methods for aggregating and summarizing aligned sequences across large datasets",
        "type": "Text_excerpt",
        "value": ".. image:: https://img.shields.io/badge/License-MIT-blue.svg\n    :target: https://opensource.org/licenses/MIT\n    :alt: MIT License \n.. image:: https://raw.githubusercontent.com/alevar/tiebrush/master/example/slc25a3.sim.png?sanitize=true \nInstallation\n^^^^^^^^^^^^ \nBuilding from source\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" \nIf you want to build it from source, we recommend cloning the git repository as shown below to ensure\nfixed releases of any dependencies are fetched and compiled with the software. \n    $ git clone https://github.com/alevar/tiebrush.git --recursive\n    $ cd tiebrush/\n    $ cmake -DCMAKE_BUILD_TYPE=Release .\n    $ make -j4\n    $ make install \nFor a fully static build `-DTIEBRUSH_STATIC_BUILD=1` needs to be added to the list of arguments\nin the cmake command. \nBy default make install will likely require administrative privileges. To specify custom\ninstallation path `-DCMAKE_INSTALL_PREFIX=<custom/installation/path>` needs to be added to\nthe list of arguments in the cmake command. \nIf you are using a very old version of Git (< 1.6.5) the flag ``--recursive`` does not exist.\nIn this case you need to clone the submodule separately  (``git submodule update --init --recursive``). \n**Requirements** \nOperating System\n  GNU/Linux, Mac \nCompiler\n  GCC \u2265 4.8, LLVM/Clang \u2265 3.8 \nBuild system\n  CMake \u2265 2.8 \n  Required arguments: \n  Optional arguments: \n"
      },
      "source": "https://raw.githubusercontent.com/alevar/tiebrush/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9983553688100125,
      "result": {
        "original_header": "Custom SAM tags implemented",
        "type": "Text_excerpt",
        "value": ".. image:: https://raw.githubusercontent.com/alevar/tiebrush/master/example_sashimi/example.svg?sanitize=true \nYou must have matplotlib, adjustText and numpy installed to run sashimi.py with python3 which can be installed via \n    pip3 install matplotlib adjustText numpy \n"
      },
      "source": "https://raw.githubusercontent.com/alevar/tiebrush/master/README.rst",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8037165426564797,
      "result": {
        "original_header": "TieBrush, TieCov and Sashimi: efficient methods for aggregating and summarizing aligned sequences across large datasets",
        "type": "Text_excerpt",
        "value": "  -o        File for BAM output \n"
      },
      "source": "https://raw.githubusercontent.com/alevar/tiebrush/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8622172213992424,
      "result": {
        "original_header": "Custom SAM tags implemented",
        "type": "Text_excerpt",
        "value": "  tiewrap.py [-h] -o OUTPUT [-L|-P|-E] [-S] [-M] [-N MAX_NH] [-Q MIN_MAP_QUAL] [-F FLAGS] [-t THREADS] [-b BATCH_SIZE] ... \n  -o, --output          File for BAM output. \n"
      },
      "source": "https://raw.githubusercontent.com/alevar/tiebrush/master/README.rst",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/alevar/tiebrush/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2019 Geo Pertea\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/alevar/tiebrush/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "tiebrush"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "alevar"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 103500,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 68711,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 4354,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 3450,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/alevar/tiebrush/master/README.rst"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "alevar",
          "type": "User"
        },
        "date_created": "2023-08-12T02:42:04Z",
        "date_published": "2023-07-23T04:41:17Z",
        "description": "Updates:\r\n1. Sashimi plotting method\r\n2. fix memory bugs\r\n3. improved handling of non-tiebrushed files\r\n4. sync with upstream\r\n5. tiecov fix handling of unmapped reads",
        "html_url": "https://github.com/alevar/tiebrush/releases/tag/0.0.7",
        "name": "Sashimi+Fixes",
        "release_id": 113210501,
        "tag": "0.0.7",
        "tarball_url": "https://api.github.com/repos/alevar/tiebrush/tarball/0.0.7",
        "type": "Release",
        "url": "https://api.github.com/repos/alevar/tiebrush/releases/113210501",
        "value": "https://api.github.com/repos/alevar/tiebrush/releases/113210501",
        "zipball_url": "https://api.github.com/repos/alevar/tiebrush/zipball/0.0.7"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "cpockrandt",
          "type": "User"
        },
        "date_created": "2021-03-10T21:23:37Z",
        "date_published": "2021-03-10T22:23:23Z",
        "description": "\r\n",
        "html_url": "https://github.com/alevar/tiebrush/releases/tag/v0.0.6",
        "name": "Pre-release v0.0.6",
        "release_id": 39621950,
        "tag": "v0.0.6",
        "tarball_url": "https://api.github.com/repos/alevar/tiebrush/tarball/v0.0.6",
        "type": "Release",
        "url": "https://api.github.com/repos/alevar/tiebrush/releases/39621950",
        "value": "https://api.github.com/repos/alevar/tiebrush/releases/39621950",
        "zipball_url": "https://api.github.com/repos/alevar/tiebrush/zipball/v0.0.6"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 04:30:05",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 16
      },
      "technique": "GitHub_API"
    }
  ]
}