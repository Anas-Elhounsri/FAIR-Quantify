{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/huangnengCSU/BlockPolish"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-01-31T08:18:47Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-29T12:02:13Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BlockPolish: accurate polishing of long-read assembly via block divide-and-conquer"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9713634212610421,
      "result": {
        "original_header": "BlockPolish",
        "type": "Text_excerpt",
        "value": "BlockPolish: accurate polishing of long-read assembly via block divide-and-conquer\n \n"
      },
      "source": "https://raw.githubusercontent.com/huangnengCSU/BlockPolish/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9763065280662393,
      "result": {
        "original_header": "Overview",
        "type": "Text_excerpt",
        "value": "BlockPolish couples four Bidirectional LSTM layers with a compressed projection layer and a flip-flop projection layer to predict the consensus sequence according to the reads-to-assembly alignment. The Bi-LSTM layers take both left and right alignment features when making decisions. The compressed projection layer converts the alignment features to the DNA sequence without continuously repeated nucleotides. The flip-flop projection layer converts the alignment features into the DNA sequence in which the continuous repeated nucleotides are \ufb02ip-\ufb02opped. The \ufb02ip-\ufb02op operation alternately represents the continuously repeated bases using uppercase and lowercase characters (e.g., \u201cAAAAA\u201d is represented as \u201cAaAaA\u201d and \u201cAAATTCT\u201d is represented as \u201cAaATtCT\u201d). \nBefore neural network-based predicting, the draft assembly is divided into trivial blocks and complex blocks according to reads-to-assembly alignment. The input data of neural network is a sequence of alignment features, which contains percentages of different bases, insertions, and deletions at each position in the block. Dividing contigs and generating feature matrix is done in the `BPFGM` (https://github.com/huangnengCSU/BPFGM).\n \n"
      },
      "source": "https://raw.githubusercontent.com/huangnengCSU/BlockPolish/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/huangnengCSU/BlockPolish/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/huangnengCSU/BlockPolish/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "huangnengCSU/BlockPolish"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/huangnengCSU/BlockPolish/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "Using this method requires the user to install several tools:\n- [minimap2](https://github.com/lh3/minimap2)\n- [samtools](https://github.com/samtools/samtools)\n- [Racon](https://github.com/isovic/racon)\n- [BPFGM](https://github.com/huangnengCSU/BPFGM.git)\n\ndependencies:\n```\npip install pyyaml editdistance python-Levenshtein biopython tensorboardX\n```\n\nif the machine has GPUs, you can install pytorch-gpu >=1.4.0 environment:\n```\nconda install pytorch=1.4.0\n```\n\nif the machine only has Cpus, install pytorch-cpu >=1.4.0 environment:\n```\nconda install pytorch-cpu=1.4.0\n```\nInstall BlockPolish from the GitHub repository:\n```\ngit clone https://github.com/huangnengCSU/BlockPolish.git\ncd BlockPolish\npython brnnctc_generate.py -h\nusage: brnnctc_generate.py [-h] [-config CONFIG] -model MODEL -data DATA -output OUTPUT\n\noptional arguments:\n  -h, --help      show this help message and exit\n  -config CONFIG\n  -model MODEL\n  -data DATA\n  -output OUTPUT\n```\n"
      },
      "source": "https://raw.githubusercontent.com/huangnengCSU/BlockPolish/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/huangnengCSU/BlockPolish/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021 huangnengCSU\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/huangnengCSU/BlockPolish/main/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "type": "Text_excerpt",
        "value": "Copyright (C) 2020 by Huangneng (huangn94@foxmail.com)\n"
      },
      "source": "https://raw.githubusercontent.com/huangnengCSU/BlockPolish/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BlockPolish"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "huangnengCSU"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 135985,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/huangnengCSU/BlockPolish/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 1: Run one round of Racon",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "In the workflow, we recommend to run one round of Racon to polish the draft assembly initially. \n```\nminimap2 -x map-ont assembly.fa reads.fq -t 40 > reads2asm.paf\nracon reads.fq reads2asm.paf assembly.fa -t 40 > racon_cons0.fasta\n```"
      },
      "source": "https://raw.githubusercontent.com/huangnengCSU/BlockPolish/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 02:22:56",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 18
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 2: Align raw reads to Racon polished assembly",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```\nminimap2 -ax map-ont racon_cons0.fasta reads.fq -t 40 > reads2racon.sam\nsamtools view -bS -@ 40 reads2racon.sam -o reads2racon.bam\nsamtools sort -@ 40 reads2racon.bam -o reads2racon.sorted.bam\nsamtools index -@ 40 reads2racon.sorted.bam\n```"
      },
      "source": "https://raw.githubusercontent.com/huangnengCSU/BlockPolish/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 3: Dividing draft assembly and generating feature matrices",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "In this step, the draft assembly is divided into trivial blocks and complex blocks with different qualities according to reads-to-assembly alignment. Then the feature matrix of each block is extracted including percentages of different bases, insertions, and deletions at each position. This process is done by [BPFGM](https://github.com/huangnengCSU/BPFGM.git).\n```\nblock -b reads2racon.sorted.bam -s trivial_features.txt -c complex_features.txt\n```"
      },
      "source": "https://raw.githubusercontent.com/huangnengCSU/BlockPolish/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 4: Polishing trivial blocks and complex blocks",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "The config files and model files are released on Google Drive https://drive.google.com/drive/folders/1JVIANm7ZdGI27ZMJ_TXn_TwKPmXmQPPh.\n```\n# polishing trivial blocks with trivial config file `test_trivial_config.yaml` and trivial model file `trivial_model.chkpt`\npython brnnctc_generate.py -config config/test_trivial_config.yaml -model trivial_model.chkpt -data trivial_features.txt -output trivial_polished.txt\n\n# polishing complex blocks with complex config file `test_complex_config.yaml` and complex model file `complex_model.chkpt`\npython brnnctc_generate.py -config config/test_complex_config.yaml -model complex_model.chkpt -data complex_features.txt -output complex_polished.txt\n\n# merge polishing results of trivial blocks and complex blocks\npython needle.py --t trivial_polished.txt --c complex_polished.txt -output polished_assembly.fa\n```\n"
      },
      "source": "https://raw.githubusercontent.com/huangnengCSU/BlockPolish/main/README.md",
      "technique": "header_analysis"
    }
  ]
}