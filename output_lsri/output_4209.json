{
  "acknowledgement": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Acknowledgments",
        "parent_header": [
          "Pycabnn"
        ],
        "type": "Text_excerpt",
        "value": "- Ivan Raikov\n- Peter Bratby\n"
      },
      "source": "https://raw.githubusercontent.com/CNS-oist/pycabnn/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "References",
        "parent_header": [
          "Pycabnn"
        ],
        "type": "Text_excerpt",
        "value": "1. [Sudhakar, S.K., Hong, S., Raikov, I., Publio, R., Lang, C., Close, T., Guo, D., Negrello, M., and De Schutter, E. (2017). Spatiotemporal network coding of physiological mossy fiber inputs by the cerebellar granular layer. PLoS Comput. Biol. _13_, e1005754.](https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1005754)\n2. [Wichert I., Jee S., De Schutter, E., and Hong S. (2020) Pycabnn: Efficient and extensible software to construct an anatomical basis for a physiologically realistic neural network model. Front. Neuroinform. _14_, 31.](https://www.frontiersin.org/articles/10.3389/fninf.2020.00031/full)\n\n---\n\nWritten by Sungho Hong, Computational Neuroscience Unit, Okinawa Institute of Science Technology\n\nMarch, 2020\n"
      },
      "source": "https://raw.githubusercontent.com/CNS-oist/pycabnn/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/CNS-OIST/pycabnn"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2017-10-19T03:41:32Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-10-09T04:13:15Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Python tool for constructing an anatomical basis of a neural network"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9554168667298184,
      "result": {
        "original_header": "Pycabnn",
        "type": "Text_excerpt",
        "value": "**Pycabnn** (**Py**thon tool for **C**onstructing an **A**natomical **B**asis of a **N**eural **N**etwork; pronounce it as \"pie cabin\") is a Python 3 package to aid building a physiologically realistic neural network model. Pycabnn is for setting up a structural basis of a model, such as placing neurons in space and determine their connectivity, based on anatomical constraints. It is primarily developed for a model of the granular layer in the cerebellar cortex [1]. However, we tried to make it as adaptable as possible to other circuit models. \nFor a detailed explanation about algorithms used/implemented, please check out our paper [2].\n \n"
      },
      "source": "https://raw.githubusercontent.com/CNS-oist/pycabnn/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9628479575834686,
      "result": {
        "original_header": "Authors",
        "type": "Text_excerpt",
        "value": "- [**Sungho Hong**](http://shhong.github.io) - _Project conception and supervision_ \n"
      },
      "source": "https://raw.githubusercontent.com/CNS-oist/pycabnn/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/CNS-oist/pycabnn/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/CNS-oist/pycabnn/master/notebooks/fig_GOCEX/Check_connections.ipynb"
      },
      "source": "https://raw.githubusercontent.com/CNS-oist/pycabnn/master/notebooks/fig_GOCEX/Check_connections.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/CNS-oist/pycabnn/master/notebooks/fig_NETSIM/Compare_simulation_results.ipynb"
      },
      "source": "https://raw.githubusercontent.com/CNS-oist/pycabnn/master/notebooks/fig_NETSIM/Compare_simulation_results.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/CNS-oist/pycabnn/master/notebooks/fig_PROJ/projection_method.ipynb"
      },
      "source": "https://raw.githubusercontent.com/CNS-oist/pycabnn/master/notebooks/fig_PROJ/projection_method.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/CNS-oist/pycabnn/master/notebooks/fig_POPGEN/fig_stats_cell_position.ipynb"
      },
      "source": "https://raw.githubusercontent.com/CNS-oist/pycabnn/master/notebooks/fig_POPGEN/fig_stats_cell_position.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/CNS-oist/pycabnn/master/notebooks/fig_POPGEN/plot_cell_position_figures.ipynb"
      },
      "source": "https://raw.githubusercontent.com/CNS-oist/pycabnn/master/notebooks/fig_POPGEN/plot_cell_position_figures.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/CNS-OIST/pycabnn/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CNS-OIST/pycabnn"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Pycabnn"
      },
      "source": "https://raw.githubusercontent.com/CNS-oist/pycabnn/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/CNS-oist/pycabnn/master/start_ipcluster.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "Pycabnn",
          "Getting Started"
        ],
        "type": "Text_excerpt",
        "value": "We do not have proper setup.py for installation yet. For usage, please check out example scripts:\n"
      },
      "source": "https://raw.githubusercontent.com/CNS-oist/pycabnn/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Cell position generation",
        "parent_header": [
          "Pycabnn",
          "Getting Started",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Run `generate_cell_position.py` as:\n\n```shell\npython generate_cell_position.py -p PARAM_PATH -o OUTPUT_PATH all\n```\n\nWe included some parameter data in `test_data/params` for `PARAM_PATH`. The results will be save in a [\".npz\" file](https://docs.scipy.org/doc/numpy/reference/generated/numpy.savez.html), `cell_positions.npz`, within `OUTPUT_PATH`, along with text files.\n"
      },
      "source": "https://raw.githubusercontent.com/CNS-oist/pycabnn/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Connectivity generation",
        "parent_header": [
          "Pycabnn",
          "Getting Started",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Run `run_connector.py` as:\n\n```shell\npython run_connector.py -i INPUT_PATH -o OUTPUT_PATH -p PARAM_PATH all\n```\n\nWe included some test data in the `test_data` directory: Use `test_data/cell_position` for `INPUT_PATH` and `test_data/params` for `PARAM_PATH`. `OUTPUT_PATH` can be anywhere. This script will generate the connectivity data as tables in HDF5 and text files.\n"
      },
      "source": "https://raw.githubusercontent.com/CNS-oist/pycabnn/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/CNS-OIST/pycabnn/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "Pycabnn"
        ],
        "type": "Text_excerpt",
        "value": "This project is licensed under the MIT License - see the [LICENSE.txt](LICENSE.txt) file for details\n"
      },
      "source": "https://raw.githubusercontent.com/CNS-oist/pycabnn/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "pycabnn"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "CNS-OIST"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 1151412,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 140834,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 1043,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/CNS-oist/pycabnn/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Prerequisites",
        "parent_header": [
          "Pycabnn",
          "Getting Started"
        ],
        "type": "Text_excerpt",
        "value": "Pycabnn is written in pure Python 3 and depends on the following packages:\n\n- numpy\n- scikit-learn\n- joblib\n- tqdm (for progress bars)\n- pandas and pytables (for saving results in HDF5 files)\n- ipyparallel and cloudpickle (for utilizing multiple CPUs)\n\nYou will also need to install the followings to run example scripts:\n\n- matplotlib (for plotting)\n- NEURON (for reading a parameter file)\n- Jupyter notebook (for reading notebooks)\n"
      },
      "source": "https://raw.githubusercontent.com/CNS-oist/pycabnn/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-06 15:36:54",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Cell position generation",
        "parent_header": [
          "Pycabnn",
          "Getting Started",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Run `generate_cell_position.py` as:\n\n```shell\npython generate_cell_position.py -p PARAM_PATH -o OUTPUT_PATH all\n```\n\nWe included some parameter data in `test_data/params` for `PARAM_PATH`. The results will be save in a [\".npz\" file](https://docs.scipy.org/doc/numpy/reference/generated/numpy.savez.html), `cell_positions.npz`, within `OUTPUT_PATH`, along with text files.\n"
      },
      "source": "https://raw.githubusercontent.com/CNS-oist/pycabnn/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Connectivity generation",
        "parent_header": [
          "Pycabnn",
          "Getting Started",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Run `run_connector.py` as:\n\n```shell\npython run_connector.py -i INPUT_PATH -o OUTPUT_PATH -p PARAM_PATH all\n```\n\nWe included some test data in the `test_data` directory: Use `test_data/cell_position` for `INPUT_PATH` and `test_data/params` for `PARAM_PATH`. `OUTPUT_PATH` can be anywhere. This script will generate the connectivity data as tables in HDF5 and text files.\n"
      },
      "source": "https://raw.githubusercontent.com/CNS-oist/pycabnn/master/README.md",
      "technique": "header_analysis"
    }
  ]
}