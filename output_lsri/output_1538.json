{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/hartonen/plotMI"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-01-26T11:26:24Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-27T01:50:46Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Visualize interactions learned by a machine learning model by plotting mutual information between pairwise k-mer distributions"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4. Output description",
        "parent_header": [
          "PlotMI"
        ],
        "type": "Text_excerpt",
        "value": "By default plotMI will output three files: an image that contains the MI plot, a gzipped tab-delimited text-file that contains the corresponding MI matrix and a log file that contains only the command used to run plotMI. Optionally, one can set the flag `--save_distribution yes`, which will then output the estimated probabilities and MI contributions for each k-mer and position pair. Note that depending on the length of the model, this is a large file (>1GB) An example of ten first lines of this file:\n\n```\n#i      j       a       b       MI_ij(a,b)      P_ij(a,b)       P_i(a)  P_j(b)\n0       3       GGG     GGG     -3.475747040270734e-05  0.00020345052083333334  0.01510622461859291     0.015161103336626056\n0       3       GGG     GGC     4.352340047630113e-05   0.0002583292388664801   0.01510622461859291     0.015215982054659204\n0       3       GGG     GGT     -4.621769658297288e-05  0.00020345052083333334  0.01510622461859291     0.01576476923499067\n0       3       GGG     GGA     -4.926708687151659e-05  0.00020345052083333334  0.01510622461859291     0.01592940538909011\n0       3       GGG     GCG     0.00012695982387922662  0.00031320795689962684  0.01510622461859291     0.015655011798924378\n0       3       GGG     GCC     2.516479878216178e-05   0.0002583292388664801   0.01510622461859291     0.015984284107123256\n0       3       GGG     GCT     -3.155270299332963e-05  0.00020345052083333334  0.01510622461859291     0.014996467182526617\n0       3       GGG     GCA     2.516479878216178e-05   0.0002583292388664801   0.01510622461859291     0.015984284107123256\n0       3       GGG     GTG     4.893921467700538e-05   0.0002583292388664801   0.01510622461859291     0.014996467182526617\n\n```\n"
      },
      "source": "https://raw.githubusercontent.com/hartonen/plotMI/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9495530889873085,
      "result": {
        "original_header": "PlotMI",
        "type": "Text_excerpt",
        "value": "PlotMI is a program for visualization of pairwise interactions in a set of input sequences by computing the pairwise mutual information between positional k-mer distributions. Description of the method is in the following preprint: \nTuomo Hartonen, Teemu Kivioja and Jussi Taipale, \"PlotMI: visualization of pairwise interactions and positional preferences learned by a deep learning model from sequence data\",\nbioRxiv 2021.03.14.435285; doi: https://doi.org/10.1101/2021.03.14.435285 \n"
      },
      "source": "https://raw.githubusercontent.com/hartonen/plotMI/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/hartonen/plotMI/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/hartonen/plotMI/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "hartonen/plotMI"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PlotMI"
      },
      "source": "https://raw.githubusercontent.com/hartonen/plotMI/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Installation",
        "parent_header": [
          "PlotMI"
        ],
        "type": "Text_excerpt",
        "value": "All scripts are pure Python, so no compiling is needed. Easiest way is to clone the repository to your own computer. In a desired location, type:\n\n`git clone https://github.com/hartonen/plotMI.git`\n\nThe scripts in this repository need specific Python packages to function properly. The easiest way to make sure everything works is to create a virtual environment (https://docs.python.org/3/library/venv.html#module-venv) containing the tested versions of each package and then run the scripts in this environment. This is done by first creating a new virtual environment:\n\n`python3 -m venv /path/to/new/virtual/environment`\n\nThen one needs to install all the required packages. These are listed in `data/plotMI_requirements.txt`. So activate the new virtual environment:\n\n`source /path/to/new/virtual/environment/bin/activate`\n\nand install the packages with pip:\n\n`pip install -r data/plotMI_requirements.txt`\n"
      },
      "source": "https://raw.githubusercontent.com/hartonen/plotMI/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/hartonen/plotMI/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "deep-learning, genomics, machine-learning, mutual-information, visualization"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "plotMI"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "hartonen"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 30423,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hartonen/plotMI/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "hartonen",
          "type": "User"
        },
        "date_created": "2021-09-08T14:17:46Z",
        "date_published": "2021-09-08T14:37:32Z",
        "description": "This release corresponds to the version of the code used in the PlotMI preprint.",
        "html_url": "https://github.com/hartonen/plotMI/releases/tag/0.1.0",
        "name": "Release accompanying the PlotMI preprint",
        "release_id": 49204679,
        "tag": "0.1.0",
        "tarball_url": "https://api.github.com/repos/hartonen/plotMI/tarball/0.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/hartonen/plotMI/releases/49204679",
        "value": "https://api.github.com/repos/hartonen/plotMI/releases/49204679",
        "zipball_url": "https://api.github.com/repos/hartonen/plotMI/zipball/0.1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 05:22:48",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Usage",
        "parent_header": [
          "PlotMI"
        ],
        "type": "Text_excerpt",
        "value": "Help message can be evoked by typing:\n\n```\nplotMI.py -h\nusage: plotMI.py [-h] [--outdir OUTDIR] [--seqs SEQS]\n                 [--distance {MI,JS,JS_inv,BC,BC_inv,HE}] [--nproc NPROC]\n                 [--figtype {pdf,png}] [--k K] [--v {0,1}] [--p P]\n                 [--alphabet ALPHABET] [--colorscale {lin,log}]\n                 [--minmi MINMI] [--step STEP] [--save_distributions {yes,no}]\n                 [--randomized_pairs RANDOMIZED_PAIRS]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --outdir OUTDIR       Full path to the output directory.\n  --seqs SEQS           Full path to the plain text input sequence file. Each\n                        sequence must be of same length and on its separate\n                        line.\n  --distance {MI,JS,JS_inv,BC,BC_inv,HE}\n                        Distance used to compare positional k-mer\n                        distributions. MI=mutual information (default),\n                        JS=Jensen-Shannon divergence, JS_inv=inverted Jensen-\n                        Shannon distance, BC=Bhattacharyya distance,\n                        BC_inv=inverted Bhattacharyya distance, HE=Hellinger\n                        distance.\n  --nproc NPROC         Number of parallel processes used when computing MI\n                        (default=1).\n  --figtype {pdf,png}   png or pdf (default=png).\n  --k K                 length of k-mer distributions used to calculate MI\n                        (default=3).\n  --v {0,1}             Verbosity level, 0=none, 1=print info on screen\n                        (default=1).\n  --p P                 Multiplier for pseudocount mass added to k-mer count.\n                        Total pseudocount mass added is p*(number of\n                        sequences) (default=5).\n  --alphabet ALPHABET   A string containing each individual letter in the\n                        alphabet used (default=ACGT). NOTE! This is case-\n                        sensitive.\n  --colorscale {lin,log}\n                        If set to log, colormap is scaled logarithmically\n                        (default=lin, meaning linear scaling).\n  --minmi MINMI         Set minimum value for colormap, helpful if you want to\n                        be sure that the minimum value is 0 (default=minimum\n                        value in MI matrix).\n  --step STEP           Step size for axis ticks in MI-plot (default=20).\n  --save_distributions {yes,no}\n                        If yes, save the positional and pairwise k-mer\n                        distributions and the MI contributions from each k-mer\n                        and position pair into a separate file (default=no).\n                        Note that this is a large file, possibly many GBs.\n  --randomized_pairs RANDOMIZED_PAIRS\n                        EXPERIMENTAL FEATURE: File containing list of position\n                        pairs whose k-mer distributions will be randomized to\n                        flat uniform distribution according to given alphabet\n                        before computing MI. Position indices should start\n                        from 0 and be saved in tab-separated format with one\n                        pair on a single row.\n```\n"
      },
      "source": "https://raw.githubusercontent.com/hartonen/plotMI/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2.1 Input sequence format",
        "parent_header": [
          "PlotMI",
          "2. Usage"
        ],
        "type": "Text_excerpt",
        "value": "PlotMI accepts sequences in plain text format where each row is separated from each other by line change. Note that all rows must be of equal length and each letter that appears in the input sequences must be present in the string given with the `--alphabet` flag. For example, if we set `--alphabet ACGT`, plotMI will not be able to handle sequences that have a letter `N` in them.\n"
      },
      "source": "https://raw.githubusercontent.com/hartonen/plotMI/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.1 Simple example with pre-filtered input data",
        "parent_header": [
          "PlotMI",
          "3. Usage examples"
        ],
        "type": "Text_excerpt",
        "value": "The most basic use case for plotMI only requires input sequences that have been filtered using a machine learning model. Here as an example, we reproduce Figure 1d from the plotMI manuscript using random uniform DNA sequences that have been filtered using a convolutional neural network model that has been trained to recognize human promoter sequences (see the manuscript for details). The file `data/model-492-0.882.h5-random-uniform-1M-prob-more-09.seq` contains 49,261 sequences that have a probability >0.9 of being active human promoters based on the CNN model. Using these sequences, we can visualize the interactions learned by the human promoter CNN model with:  \n\n```\nplotMI.py --outdir ./test- --seqs model-492-0.882.h5-random-uniform-1M-prob-more-09.seq --nproc 4 --figtype png\nAlphabet: ACTG\nRead in 49261 sequences of length 100 in 0.04489850997924805 seconds.\nCalculated the positional 3-mer frequencies in 2.0755910873413086 seconds.\nComputed mutual information in 83.16843390464783 seconds.\nPlotting done in 0.4934566020965576 seconds.\n```\n\nThis should produce two output files identical to files `data/test-MI.png` and `data/test-MI.txt.gz`.\n"
      },
      "source": "https://raw.githubusercontent.com/hartonen/plotMI/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.2 Reproducing figure 2a from plotMI-manuscript",
        "parent_header": [
          "PlotMI",
          "3. Usage examples"
        ],
        "type": "Text_excerpt",
        "value": "In the following we show how to replicate the figures 2a-c from the plotMI-manuscript. For this we will need two other Python scripts from the authors from,  [randomReads](https://github.com/hartonen/randomReads) and  [promoterAnalysis](https://github.com/hartonen/promoterAnalysis) repositories. We will also use the  [Seqkit](https://bioinf.shenwei.me/seqkit/) tool for manipulating fasta-files.\n\nFirst we generate 10 million random DNA sequences (10 separate files for faster scoring with the CNN model) with uniform nucleotide background using a script made for this purpose:\n\n`for i in {1..10}; do randomReads.py random_uniform_L200_N1M_sample\"$i\".fasta --L 200 --N 1000000; done;`\n\nNext we use the pre-trained CNN model to score all these sequences. The pre-trained model can be downloaded from Zenodo: https://doi.org/10.5281/zenodo.5508698\n\n`for i in {1..10}; do scorePromoters.py --outfile model-36-0.990.h5-random_uniform_L200_N1M_sample\"$i\"_preds.txt --model model-36-0.990.h5 --sequences random_uniform_L200_N1M_sample\"$i\".fasta --nproc 4 & done;`\n\nThen select the fasta-IDs of sequences that score higher than 0.9 according to the model:\n\n`for i in {1..10}; do awk '$2>0.9' model-36-0.990.h5-random_uniform_L200_N1M_sample\"$i\"_preds.txt | cut -f1,1 > model-36-0.990.h5-random_uniform_L200_N1M_sample\"$i\"_prob_more_09_ids.txt; done;`\n\nThen we use the wonderful seqkit-package to extract the sequences matching to these IDs and convert them to sequence-only input for mutual information plotting:\n\n`for i in {1..10}; do seqkit grep -n -f model-36-0.990.h5-random_uniform_L200_N1M_sample\"$i\"_prob_more_09_ids.txt random_uniform_L200_N1M_sample\"$i\".fasta | seqkit seq --seq > model-36-0.990.h5-random_uniform_L200_N1M_sample\"$i\"_prob_more_09.seq; done;`\n\nCombine the sequences to a single file for MI plotting:\n\n`cat model-36-0.990.h5-random_uniform_L200_N1M_sample*_prob_more_09.seq > model-36-0.990.h5-random_uniform_L200_N10M_prob_more_09.seq`\n\nThese sequences can then be visualized using plotMI (Figure 1b):\n\n`plotMI.py --outdir model-36-0.990.h5-random_uniform_L200_N1M0_prob_more_09- --seqs model-36-0.990.h5-random_uniform_L200_N10M_prob_more_09.seq --nproc 16 --figtype png --k 3 --v 1 --p 5`\n\nTo recreate Figures 2 b and c, we use the helper script `plotDiagonals.py` from the plotMI repository, which reads in the MI-matrix (flag --MI) and plots the main diagonal as well as the average and maximum MI at each diagonal of the MI matrix:\n\n`plotDiagonals.py --outdir model-36-0.990.h5-random_uniform_L200_N1M0_prob_more_09- --MI model-36-0.990.h5-random_uniform_L200_N1M0_prob_more_09-MI.txt.gz --k 3`\n"
      },
      "source": "https://raw.githubusercontent.com/hartonen/plotMI/master/README.md",
      "technique": "header_analysis"
    }
  ]
}