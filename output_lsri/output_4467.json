{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/gustavochm/phasepy"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-02-19T14:04:57Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-18T12:32:03Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "type": "Text_excerpt",
        "value": "Phasepy is an open-source scientific Python package for calculation of\n`physical properties of phases <https://en.wikipedia.org/wiki/Physical_property>`_ at\n`thermodynamic equilibrium <https://en.wikipedia.org/wiki/Thermodynamic_equilibrium>`_.\nMain application areas include computation of fluid phase equilibria\nand interfacial properties.\n\nPhasepy includes routines for calculation of vapor-liquid equilibrium (VLE),\nliquid-liquid equilibrium (LLE) and vapor-liquid-liquid equilibrium\n(VLLE). Phase equilibrium can be modelled either with *the continous\napproach*, using a combination of a cubic equation of state (EoS,\ne.g. Van der Waals, Peng-Robinson, Redlich-Kwong, or their\nderivatives) model and a mixing rule (Quadratic, Modified Huron-Vidal\nor Wong-Sandler) for all phases, or *the discontinuous approach* using\na virial equation for the vapor phase and an activity coefficient model\n(NRTL, Wilson, Redlich-Kister, UNIQUAC or Dortmund Modified UNIFAC) for the\nliquid phase(s).\n\nInterfacial property estimation using the continuous phase equilibrium\napproach allows calculation of density profiles and interfacial\ntension using the Square Gradient Theory (SGT).\n\nPhasepy supports fitting of model parameter values from experimental data.\n"
      },
      "source": "https://raw.githubusercontent.com/gustavochm/phasepy/master/README.rst",
      "technique": "header_analysis"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Documentation",
        "type": "Text_excerpt",
        "value": "Phasepy's documentation is available on the web:\n\n    https://phasepy.readthedocs.io/en/latest/\n\n"
      },
      "source": "https://raw.githubusercontent.com/gustavochm/phasepy/master/README.rst",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://phasepy.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/gustavochm/phasepy/master/README.rst",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/gustavochm/phasepy/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gustavochm/phasepy/master/examples/2.%20Property%20calculation%20from%20Cubic%20EoS.ipynb"
      },
      "source": "https://raw.githubusercontent.com/gustavochm/phasepy/master/examples/2.%20Property%20calculation%20from%20Cubic%20EoS.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gustavochm/phasepy/master/examples/11.%20Square%20Gradient%20Theory%20for%20mixtures%20and%20beta%20%3D%200.ipynb"
      },
      "source": "https://raw.githubusercontent.com/gustavochm/phasepy/master/examples/11.%20Square%20Gradient%20Theory%20for%20mixtures%20and%20beta%20%3D%200.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gustavochm/phasepy/master/examples/6.%20Dew%20Point%20calculation.ipynb"
      },
      "source": "https://raw.githubusercontent.com/gustavochm/phasepy/master/examples/6.%20Dew%20Point%20calculation.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gustavochm/phasepy/master/examples/4.%20Two%20phase%20flash%20%28TP%29.ipynb"
      },
      "source": "https://raw.githubusercontent.com/gustavochm/phasepy/master/examples/4.%20Two%20phase%20flash%20%28TP%29.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gustavochm/phasepy/master/examples/14.%20Fitting%20Pure%20Component%20Data.ipynb"
      },
      "source": "https://raw.githubusercontent.com/gustavochm/phasepy/master/examples/14.%20Fitting%20Pure%20Component%20Data.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gustavochm/phasepy/master/examples/9.%20Solid-Fluid%20Equilibria%20%28SLE%20and%20SLLE%29.ipynb"
      },
      "source": "https://raw.githubusercontent.com/gustavochm/phasepy/master/examples/9.%20Solid-Fluid%20Equilibria%20%28SLE%20and%20SLLE%29.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gustavochm/phasepy/master/examples/12.%20Square%20Gradient%20Theory%20for%20mixtures%20and%20beta%20%21%3D%200.ipynb"
      },
      "source": "https://raw.githubusercontent.com/gustavochm/phasepy/master/examples/12.%20Square%20Gradient%20Theory%20for%20mixtures%20and%20beta%20%21%3D%200.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gustavochm/phasepy/master/examples/15.%20Reuse%20of%20phasepy%27s%20functions.ipynb"
      },
      "source": "https://raw.githubusercontent.com/gustavochm/phasepy/master/examples/15.%20Reuse%20of%20phasepy%27s%20functions.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gustavochm/phasepy/master/examples/10.%20Square%20Gradient%20Theory%20for%20pure%20component.ipynb"
      },
      "source": "https://raw.githubusercontent.com/gustavochm/phasepy/master/examples/10.%20Square%20Gradient%20Theory%20for%20pure%20component.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gustavochm/phasepy/master/examples/13.%20Fitting%20Interaction%20Parameters%20for%20Mixtures.ipynb"
      },
      "source": "https://raw.githubusercontent.com/gustavochm/phasepy/master/examples/13.%20Fitting%20Interaction%20Parameters%20for%20Mixtures.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gustavochm/phasepy/master/examples/8.%20Three%20phase%20equilibria%20%28VLLE%29.ipynb"
      },
      "source": "https://raw.githubusercontent.com/gustavochm/phasepy/master/examples/8.%20Three%20phase%20equilibria%20%28VLLE%29.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gustavochm/phasepy/master/examples/3.%20Phase%20stability%20test%20%28tpd%29.ipynb"
      },
      "source": "https://raw.githubusercontent.com/gustavochm/phasepy/master/examples/3.%20Phase%20stability%20test%20%28tpd%29.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gustavochm/phasepy/master/examples/1.%20Components%20and%20mixtures.ipynb"
      },
      "source": "https://raw.githubusercontent.com/gustavochm/phasepy/master/examples/1.%20Components%20and%20mixtures.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gustavochm/phasepy/master/examples/7.%20Liquid-Liquid%20Equilibria.ipynb"
      },
      "source": "https://raw.githubusercontent.com/gustavochm/phasepy/master/examples/7.%20Liquid-Liquid%20Equilibria.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gustavochm/phasepy/master/examples/5.%20Bubble%20Point%20calculation.ipynb"
      },
      "source": "https://raw.githubusercontent.com/gustavochm/phasepy/master/examples/5.%20Bubble%20Point%20calculation.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 29
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/gustavochm/phasepy/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "gustavochm/phasepy"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/gustavochm/phasepy/master/README.rst",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation Prerequisites",
        "type": "Text_excerpt",
        "value": "- numpy"
      },
      "source": "https://raw.githubusercontent.com/gustavochm/phasepy/master/README.rst",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "- numpy\n- scipy\n- pandas\n- openpyxl\n- C/C++ Compiler for Cython extension modules\n\nInstallation\n------------\n\nGet the latest version of phasepy from\nhttps://pypi.python.org/pypi/phasepy/\n\nAn easy installation option is to use Python pip:\n\n    $ pip install phasepy\n\nAlternatively, you can build phasepy yourself using latest source\nfiles:\n\n    $ git clone https://github.com/gustavochm/phasepy\n\n**Note for Apple Silicon users:** It is recommended to install python and phasepy dependencies (numpy, scipy, cython, pandas) through conda miniforge, then you can install phasepy running ``pip install phasepy``.\n\n"
      },
      "source": "https://raw.githubusercontent.com/gustavochm/phasepy/master/README.rst",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9940172528253022,
      "result": {
        "type": "Text_excerpt",
        "value": ".. image:: https://mybinder.org/badge_logo.svg\n   :target: https://mybinder.org/v2/gh/gustavochm/phasepy/master \n"
      },
      "source": "https://raw.githubusercontent.com/gustavochm/phasepy/master/README.rst",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/gustavochm/phasepy/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License information",
        "type": "Text_excerpt",
        "value": "See ``LICENSE.txt`` for information on the terms & conditions for usage\nof this software, and a DISCLAIMER OF ALL WARRANTIES.\n\nAlthough not required by the phasepy license, if it is convenient for you,\nplease cite phasepy if used in your work. Please also consider contributing\nany changes you make back, and benefit the community.\n\n\nChaparro, G., Mej\u00eda, A. Phasepy: A Python based framework for fluid phase\nequilibria and interfacial properties computation. J Comput Chem. 2020, 41, 29,\n2504-2526. `https://doi.org/10.1002/jcc.26405 <https://doi.org/10.1002/jcc.26405>`_.\n"
      },
      "source": "https://raw.githubusercontent.com/gustavochm/phasepy/master/README.rst",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "phasepy"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "gustavochm"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 463191,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Cython",
        "size": 14053,
        "type": "Programming_language",
        "value": "Cython"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gustavochm/phasepy/master/README.rst"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation Prerequisites",
        "type": "Text_excerpt",
        "value": "- numpy"
      },
      "source": "https://raw.githubusercontent.com/gustavochm/phasepy/master/README.rst",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "faq",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-06 16:33:45",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 84
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Bug reports",
        "type": "Text_excerpt",
        "value": "To report bugs, please use the phasepy's Bug Tracker at:\n\n    https://github.com/gustavochm/phasepy/issues\n\n"
      },
      "source": "https://raw.githubusercontent.com/gustavochm/phasepy/master/README.rst",
      "technique": "header_analysis"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Getting Started",
        "type": "Text_excerpt",
        "value": "Base input variables include temperature [K], pressure [bar] and molar\nvolume [cm^3/mol]. Specification of a mixture starts with\nspecification of pure components:\n\n.. code-block:: python\n\n   >>> from phasepy import component, mixture\n   >>> water = component(name='water', Tc=647.13, Pc=220.55, Zc=0.229, Vc=55.948,\n                         w=0.344861, GC={'H2O':1})\n   >>> ethanol = component(name='ethanol', Tc=514.0, Pc=61.37, Zc=0.241, Vc=168.0,\n\t\t           w=0.643558, GC={'CH3':1, 'CH2':1, 'OH(P)':1})\n   >>> mix = mixture(ethanol, water)\n\nHere is an example how to calculate the bubble point vapor composition\nand pressure of saturated 50 mol-% ethanol - 50 mol-% water liquid\nmixture at temperature 320 K using Peng Robinson EoS. In this example\nthe Modified Huron Vidal mixing rule utilizes the Dortmund Modified\nUNIFAC activity coefficient model for the solution of the mixture EoS.\n\n.. code-block:: python\n\n   >>> mix.unifac()\n   >>> from phasepy import preos\n   >>> eos = preos(mix, 'mhv_unifac')\n   >>> from phasepy.equilibrium import bubblePy\n   >>> y_guess, P_guess = [0.2, 0.8], 1.0\n   >>> bubblePy(y_guess, P_guess, X=[0.5, 0.5], T=320.0, model=eos)\n   (array([0.70761727, 0.29238273]), 0.23248584919691206)\n\nFor more examples, please have a look at the Jupyter Notebook files\nlocated in the *examples* folder of the sources or\n`view examples in github <https://github.com/gustavochm/phasepy/tree/master/examples>`_.\n\n"
      },
      "source": "https://raw.githubusercontent.com/gustavochm/phasepy/master/README.rst",
      "technique": "header_analysis"
    }
  ]
}