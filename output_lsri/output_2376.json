{
  "application_domain": [
    {
      "confidence": 0.958044834817843,
      "result": {
        "type": "String",
        "value": "Graphs"
      },
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9247410998461728,
      "result": {
        "type": "String",
        "value": "Semantic web"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citing VG",
        "parent_header": [
          "vg"
        ],
        "type": "Text_excerpt",
        "value": "Please cite:\n\n* [The VG Paper](https://doi.org/10.1038/nbt.4227) when using `vg`\n* [The VG Giraffe Paper](https://doi.org/10.1126/science.abg8871) when using `vg giraffe`\n* [The VG Call Paper](https://doi.org/10.1186/s13059-020-1941-7) when SV genotyping with `vg call`\n* [The GBZ Paper](https://doi.org/10.1093/bioinformatics/btac656) when using GBZ\n* [The HPRC Paper](https://doi.org/10.1038/s41586-023-05896-x) when using `vg deconstruct`\n* [The Snarls Paper](https://doi.org/10.1089/cmb.2017.0251) when using `vg snarls`\n* [The Personalized Pangenome Paper](https://doi.org/10.1101/2023.12.13.571553) when using `vg haplotypes` and/or `vg giraffe --haplotype-name`\n"
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/vgteam/vg"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2014-10-02T16:54:27Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-05T14:48:29Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "tools for working with genome variation graphs"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9797507024868694,
      "result": {
        "original_header": "variation graph data structures, interchange formats, alignment, genotyping, and variant calling methods",
        "type": "Text_excerpt",
        "value": "_Variation graphs_ provide a succinct encoding of the sequences of many genomes. A variation graph (in particular as implemented in vg) is composed of: \n* _nodes_, which are labeled by sequences and ids\n* _edges_, which connect two nodes via either of their respective ends\n* _paths_, describe genomes, sequence alignments, and annotations (such as gene models and transcripts) as walks through nodes connected by edges \nThis model is similar to sequence graphs that have been used in assembly and multiple sequence alignment. \nPaths provide coordinate systems relative to genomes encoded in the graph, allowing stable mappings to be produced even if the structure of the graph is changed.\nThe variation graph model makes this embedding explicit and essential.\nTools in vg maintain paths as immutable during transformations of the graph.\nThey use paths to project graph-relative data into reference-relative coordinate spaces.\nPaths provide stable coordinates for graphs built in different ways from the same input sequences. \n"
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9989664416697532,
      "result": {
        "original_header": "Implementation notes",
        "type": "Text_excerpt",
        "value": "`vg` is a collection of tools based on a common data model (the variation graph) that is described by a protobuf schema (vg.proto). Data objects defined in vg.proto may be serialized via a stream pattern defined in stream.hpp. It is not necessary to write code in vg in order to interface with the algorithms defined here. Rather, it is sometimes simpler to write an external algorithm that reads and writes the same data formats.\n \n"
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/vgteam/vg/wiki/Mapping-short-reads-with-Giraffe"
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/vgteam/vg/wiki/Transcriptomic-analyses"
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/vgteam/vg/wiki/Multipath-alignments-and-vg-mpmap"
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/vgteam/vg/wiki"
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Download Releases",
        "parent_header": [
          "vg",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "The easiest way to get vg is to download one of our release builds for Linux. We have a 6-week release cadence, so our builds are never too far out of date.\n\n**[![Download Button](doc/figures/download-linux.png)](https://github.com/vgteam/vg/releases/latest)**  \n**[Download the latest vg release for Linux](https://github.com/vgteam/vg/releases/latest)**\n\n**For MacOS**, see [Building on MacOS](#building-on-macos).\n"
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/vgteam/vg/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 194
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/vgteam/vg/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "vgteam/vg"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "vg"
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vgteam/vg/master/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vgteam/vg/master/source_me.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vgteam/vg/master/autocomplete.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vgteam/vg/master/doc/publish-docs.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vgteam/vg/master/doc/test-docs.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vgteam/vg/master/vgci/vgci.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vgteam/vg/master/vgci/vgci-parallel-wrapper.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vgteam/vg/master/scripts/mcmc_dist.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vgteam/vg/master/scripts/restore-deps.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vgteam/vg/master/scripts/lr_benchmark.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vgteam/vg/master/scripts/make_pbsim_reads.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vgteam/vg/master/scripts/giraffe-speed.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vgteam/vg/master/scripts/giraffe-wrangler.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vgteam/vg/master/doc/figures/smallgraph.png"
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vgteam/vg/master/doc/figures/download-linux.png"
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Building on Linux",
        "parent_header": [
          "vg",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "If you don't want to or can't use a pre-built release of vg, or if you want to become a vg developer, you can build it from source instead.\n"
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Linux: Clone VG",
        "parent_header": [
          "vg",
          "Installation",
          "Building on Linux"
        ],
        "type": "Text_excerpt",
        "value": "First, obtain the repo and its submodules:\n\n    git clone --recursive https://github.com/vgteam/vg.git\n    cd vg\n"
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Linux: Install Dependencies",
        "parent_header": [
          "vg",
          "Installation",
          "Building on Linux"
        ],
        "type": "Text_excerpt",
        "value": "    \nThen, install VG's dependencies. You'll need the protobuf and jansson development libraries installed, and to run the tests you will need:\n* `jq`, `bc`, `rs`, and `parallel`\n* `hexdump` and `column` from `bsdmainutils`\n* [`npm` for testing documentation examples](https://github.com/anko/txm)).\n\nOn Ubuntu, you should be able to do:\n\n    make get-deps\n\nIf you get complaints that `sudo` is not found, install it:\n\n    apt update\n    apt install sudo\n\nIf you get a bunch of errors like `E: Unable to locate package build-essential`, make sure your package index files are up to date by running:\n\n    sudo apt update\n    \nOn other distros, or if you do not have root access, you will need to perform the equivalent of:\n\n    sudo apt-get install build-essential git cmake pkg-config libncurses-dev libbz2-dev  \\\n                         protobuf-compiler libprotoc-dev libprotobuf-dev libjansson-dev \\\n                         automake gettext autopoint libtool jq bsdmainutils bc rs parallel \\\n                         npm curl unzip redland-utils librdf-dev bison flex gawk lzma-dev \\\n                         liblzma-dev liblz4-dev libffi-dev libcairo-dev libboost-all-dev \\\n                         libzstd-dev pybind11-dev python3-pybind11\n                         \nNote that **Ubuntu 16.04** does not ship a sufficiently new Protobuf; vg requires **Protobuf 3** which will have to be manually installed.\n\nAt present, you will need GCC version 4.9 or greater, with support for C++14, to compile vg. (Check your version with `gcc --version`.) GCC up to 11.2.0 is supported.\n\nOther libraries may be required. Please report any build difficulties.\n\nNote that a 64-bit OS is required. Ubuntu 20.04 should work.\n"
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Linux: Build",
        "parent_header": [
          "vg",
          "Installation",
          "Building on Linux"
        ],
        "type": "Text_excerpt",
        "value": "When you are ready, build with `. ./source_me.sh && make`. You can use `make -j16` to run 16 build threads at a time, which greatly accelerates the process. If you have more CPU cores, you can use higher numbers.\n\nNote that vg can take anywhere from 10 minutes to more than an hour to compile depending on your machine and the number of threads used. \n\nYou can also produce a static binary with `make static`, assuming you have static versions of all the dependencies installed on your system.\n"
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Mac: Clone VG",
        "parent_header": [
          "vg",
          "Installation",
          "Building on MacOS"
        ],
        "type": "Text_excerpt",
        "value": "The first step is to clone the vg repository:\n\n    git clone --recursive https://github.com/vgteam/vg.git\n    cd vg\n"
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Mac: Install Dependencies",
        "parent_header": [
          "vg",
          "Installation",
          "Building on MacOS"
        ],
        "type": "Text_excerpt",
        "value": "VG depends on a number of packages being installed on the system where it is being built. Dependencies can be installed using either [MacPorts](https://www.macports.org/install.php) or [Homebrew](http://brew.sh/).\n"
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Using MacPorts",
        "parent_header": [
          "vg",
          "Installation",
          "Building on MacOS",
          "Mac: Install Dependencies"
        ],
        "type": "Text_excerpt",
        "value": "You can use MacPorts to install VG's dependencies:\n\n    sudo port install libtool protobuf3-cpp jansson jq cmake pkgconfig autoconf automake libtool coreutils samtools redland bison gperftools md5sha1sum rasqal gmake autogen cairo libomp boost zstd pybind11\n    \n"
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Using Homebrew",
        "parent_header": [
          "vg",
          "Installation",
          "Building on MacOS",
          "Mac: Install Dependencies"
        ],
        "type": "Text_excerpt",
        "value": "Homebrew provides another package management solution for OSX, and may be preferable to some users over MacPorts. VG ships a `Brewfile` describing its Homebrew dependencies, so from the root vg directory, you can install dependencies, and expose them to vg, like this:\n\n    # Install all the dependencies in the Brewfile\n    brew bundle\n    "
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Mac: Build",
        "parent_header": [
          "vg",
          "Installation",
          "Building on MacOS"
        ],
        "type": "Text_excerpt",
        "value": "With dependencies installed, VG can now be built:\n\n    . ./source_me.sh && make\n\nAs with Linux, you can add `-j16` or other numbers at the end to run multiple build tasks at once, if your computer can handle them.\n    \n**Note that static binaries cannot yet be built for Mac.**\n\nThe vg Mac build targets whatever the current version of Apple Clang is, and whatever version of Apple Clang is provided by our Github Actions Mac CI system. If your Clang is up to date and vg does not build for you, please open an issue.\n"
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Migrate a VG installation from x86 to ARM",
        "parent_header": [
          "vg",
          "Installation",
          "Building on MacOS",
          "Mac: Run"
        ],
        "type": "Text_excerpt",
        "value": "The Mac platform is moving to ARM, with Apple's M1, M1 Pro, M1 Max, and subsequent chip designs. The vg codebase supports ARM on Mac as well as on Linux. **The normal installation instructions work on a factory-fresh ARM Mac**.\n\nHowever, it is easy to run into problems when **migrating a working vg build environment** or **migrating Macports or Homebrew** from x86_64 to ARM. The ARM machine can successfully run x86_64 tools installed via Macports or Homebrew on the old machine, but vg can only build properly on ARM if you are using ARM versions of the build tools, like `make` and CMake.\n\nSo, after migrating to an ARM Mac using e.g. Apple's migration tools:\n\n1. Uninstall Macports and its packages, if they were migrated from the old machine. Only an ARM Macports install can be used to provide dependencies for vg on ARM.\n2. Uninstall Homebrew and its packages, if they were migrated. Similarly, only an ARM Homebrew install will work.\n3. Reinstall one of Macports or Homebrew. Make sure to use the M1 or ARM version.\n4. Use the package manager you installed to install system dependencies of vg, such as CMake, [as documented above](#install-dependencies).\n5. Clean vg with `make clean`. This *should* remove all build artefacts.\n6. Build vg again with `make`.\n\nIf you still experience build problems after this, delete the whole checkout and check out the code again; `make clean` is not under CI test and is not always up to date with the rest of the build system.\n\nWhether or not that helps, please then [open an issue](https://github.com/vgteam/vg/issues/new) so we can help fix the build or fix `make clean`.\n"
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/vgteam/vg/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "dna, genome-graph, genomics, graph, variation-graph"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "VG itself is licensed under the MIT license. Contrib scripts and submodules are\nlicensed under their own licenses.\n\nThe MIT License (MIT)\n\nCopyright (c) 2014 Erik Garrison\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nsrc/unittest/catch.hpp is licensed under the Boost Software License.\n\nBoost Software License - Version 1.0 - August 17th, 2003\n\nPermission is hereby granted, free of charge, to any person or organization\nobtaining a copy of the software and accompanying documentation covered by\nthis license (the \"Software\") to use, reproduce, display, distribute,\nexecute, and transmit the Software, and to prepare derivative works of the\nSoftware, and to permit third-parties to whom the Software is furnished to\ndo so, all subject to the following:\n\nThe copyright notices in the Software and this entire statement, including\nthe above license grant, this restriction and the following disclaimer,\nmust be included in all copies of the Software, in whole or in part, and\nall derivative works of the Software, unless such copies or derivative\nworks are solely in the form of machine-executable object code generated by\na source language processor.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT\nSHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE\nFOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n\nsrc/stream/fdstream.hpp is licensed under the following license:\n\n(C) Copyright Nicolai M. Josuttis 2001.\nPermission to copy, use, modify, sell and distribute this software\nis granted provided this copyright notice appears in all copies.\nThis software is provided \"as is\" without express or implied\nwarranty, and with no claim as to its suitability for any purpose.\n"
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "vg"
        ],
        "type": "Text_excerpt",
        "value": "MIT\n\n"
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vgteam/vg/master/doc/figures/vg_logo_small.png"
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "vg"
      },
      "technique": "GitHub_API"
    }
  ],
  "ontologies": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vgteam/vg/master/ontology/vg.ttl"
      },
      "technique": "file_exploration"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "vgteam"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 12810496,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 356592,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 228864,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 70460,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 64098,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "XSLT",
        "size": 38147,
        "type": "Programming_language",
        "value": "XSLT"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 24481,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Julia",
        "size": 8790,
        "type": "Programming_language",
        "value": "Julia"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 5704,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Ruby",
        "size": 309,
        "type": "Programming_language",
        "value": "Ruby"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vgteam/vg/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamnovak",
          "type": "User"
        },
        "date_created": "2024-09-23T19:06:36Z",
        "date_published": "2024-09-23T19:07:56Z",
        "description": "**[![Download for Linux](https://raw.githubusercontent.com/vgteam/vg/master/doc/figures/download-linux.png)\r\n](https://github.com/vgteam/vg/releases/download/v1.60.0/vg)**\r\n\r\nDon't forget to mark the static binary executable:\r\n```\r\nchmod +x vg\r\n```\r\n**Docker Image:** `quay.io/vgteam/vg:v1.60.0`\r\n\r\n**Buildable Source Tarball:** [vg-v1.60.0.tar.gz](https://github.com/vgteam/vg/releases/download/v1.60.0/vg-v1.60.0.tar.gz)\r\n\r\nIncludes source for vg and all submodules. **Use this instead of Github's \"Source Code\" downloads**; those will not build as they do not include code for bundled dependencies that the `vg` build process needs.\r\n\r\nThis release includes:\r\n\r\n* vg's self-reported version information should no longer be able to lag behind the actual Git revision checked out\r\n* `vg stats --snarl-contents` added to print a table of `snarl` / `depth` / `parent` / `nested node ids`\r\n* `vg inject` can now handle reads that softclip after the end of the target path\r\n* `vg paths -n` option added to normalize graphs using path information to \"snap together\" redundant paths through snarls.  After running, no two path traversals through a snarl will ever produce the same sequence string without the traversals themselves being identical.\r\n* vg build system no longer patches kff-cpp-api CMakeLists.txt.\r\n\r\n## Updated Submodules\r\n\r\nThe `kff-cpp-api`, `libbdsg` and `sublinear-Li-Stephens` submodules have been updated.",
        "html_url": "https://github.com/vgteam/vg/releases/tag/v1.60.0",
        "name": "vg 1.60.0 - Annicco",
        "release_id": 176471953,
        "tag": "v1.60.0",
        "tarball_url": "https://api.github.com/repos/vgteam/vg/tarball/v1.60.0",
        "type": "Release",
        "url": "https://api.github.com/repos/vgteam/vg/releases/176471953",
        "value": "https://api.github.com/repos/vgteam/vg/releases/176471953",
        "zipball_url": "https://api.github.com/repos/vgteam/vg/zipball/v1.60.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamnovak",
          "type": "User"
        },
        "date_created": "2024-08-12T20:05:04Z",
        "date_published": "2024-08-12T20:16:18Z",
        "description": "**[![Download for Linux](https://raw.githubusercontent.com/vgteam/vg/master/doc/figures/download-linux.png)\r\n](https://github.com/vgteam/vg/releases/download/v1.59.0/vg)**\r\n\r\nDon't forget to mark the static binary executable:\r\n```\r\nchmod +x vg\r\n```\r\n**Docker Image:** `quay.io/vgteam/vg:v1.59.0`\r\n\r\n**Buildable Source Tarball:** [vg-v1.59.0.tar.gz](https://github.com/vgteam/vg/releases/download/v1.59.0/vg-v1.59.0.tar.gz)\r\n\r\nIncludes source for vg and all submodules. **Use this instead of Github's \"Source Code\" downloads**; those will not build as they do not include code for bundled dependencies that the `vg` build process needs.\r\n\r\nThis release includes:\r\n\r\n * Experimental haploid scoring model for haplotype sampling.\r\n* Faster BAM output when using a GBZ format graph\r\n* `vg inject` no longer reports invalid alignments\r\n* `vg giraffe --parameter-preset` long-form option should now work again\r\n* `vg surject` now complains if extra command line arguemnts are provided\r\n* vg Mac builds no longer pass `-headerpad` without an argument to the linker\r\n* `vg giraffe` in non-chaining single-end mode will again prioritize minimizers the same way as in paired-end mode\r\n* README no longer interpretable as suggesting that users build with very old Clang\r\n* `vg surject` now uses an unlimited `--max-anchors` by default\r\n* `vg clip` faster on graphs with high path depth\r\n* `vg surject` has improved base-level alignment accuracy with long reads\r\n* Random walk band padding is now available outside `MultipathAligner`\r\n* Gapless extension queue order should no longer cause `vg giraffe` output to very across compilers\r\n* `vg giraffe --show-work` no longer claims to not be doing rescue when it is\r\n* `vg annotate` can now output alignments in GAF.\r\n* When reading more than 1000 BED or GFF records, vg will no longer dump the first records to standard output and forget about them.\r\n\r\n## Updated Submodules\r\n\r\nThe `libbdsg` and `libhandlegraph` submodules have been updated.",
        "html_url": "https://github.com/vgteam/vg/releases/tag/v1.59.0",
        "name": "vg 1.59.0 - Casatico",
        "release_id": 169848036,
        "tag": "v1.59.0",
        "tarball_url": "https://api.github.com/repos/vgteam/vg/tarball/v1.59.0",
        "type": "Release",
        "url": "https://api.github.com/repos/vgteam/vg/releases/169848036",
        "value": "https://api.github.com/repos/vgteam/vg/releases/169848036",
        "zipball_url": "https://api.github.com/repos/vgteam/vg/zipball/v1.59.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamnovak",
          "type": "User"
        },
        "date_created": "2024-07-01T19:51:37Z",
        "date_published": "2024-07-01T21:13:26Z",
        "description": "**[![Download for Linux](https://raw.githubusercontent.com/vgteam/vg/master/doc/figures/download-linux.png)\r\n](https://github.com/vgteam/vg/releases/download/v1.58.0/vg)**\r\n\r\nDon't forget to mark the static binary executable:\r\n```\r\nchmod +x vg\r\n```\r\n**Docker Image:** `quay.io/vgteam/vg:v1.58.0`\r\n\r\n**Buildable Source Tarball:** [vg-v1.58.0.tar.gz](https://github.com/vgteam/vg/releases/download/v1.58.0/vg-v1.58.0.tar.gz)\r\n\r\nIncludes source for vg and all submodules. **Use this instead of Github's \"Source Code\" downloads**; those will not build as they do not include code for bundled dependencies that the `vg` build process needs.\r\n\r\nThis release includes:\r\n\r\n *  `vg deconstruct` now does path-based (formerly `-e`) deconstruction by default.  Old default behaviour of exhaustively processing (tiny) sites is deprecated.  \r\n * if `-a` is *not* used, `vg deconstruct` will recursive on child snarls of snarls it failed to process (like `vg call`) - functionality that was, I think, dropped a while back.\r\n * Experimental option `-L` added to `vg deconstruct` in order to cluster similar allele traversals together.  The value given is a (length-weighted) threshold for the jaccard coefficient between the oriented nodes of two traversals.  So if `-L 0.75` is given, then alleles that have >= 0.75 similarity based on their graph positions will be merged into one.  Two new FORMAT fields are added to keep track of the difference, `TS` (jaccard distance) and `TL` (length difference).  Clustering is done greedily starting with selected reference paths. \r\n * new (experimental) option `-n` added to `vg deconstruct`.  Like `-a`, it genotypes nested sites, but unlike `-a` it does so top-down, setting various tags that keep track of the nesting relationship at the allele level (and also linking every site back to its position on the LV=0 reference chromosome).  *-alleles (used in recent VCF versions to represent spanning alleles) are used.  This option will not support nested insertions on GBZ/GBWT input -- so in practice it should be used on chromosome-level `.vg` files (I will look into relaxing this).\r\n * `-R` option added to `vg deconstruct` to toggle whether star-alleles are reported with `-n`.    \r\n * README now explains how to get vg on your `PATH`\r\n * README now explains how to build on multiple threads\r\n * vg can now read GAM files generated by the long-read Giraffe prototype\r\n * `vg filter` now lets you require exact matches for name filters instead of prefix matches with `--exact-name`.\r\n * `deconstruct/call` can write giant VCF lines.  This happens in, say, large svs with lots of samples that each get their own allele due to nested variation (hopefully `deconstruct -L` can mitigate this via merging). Giant `AT` fields for each allele don't help. bcf apparently has a [2 gig line limit](https://github.com/samtools/bcftools/issues/1614#issuecomment-972850885), and there's a case of `deconstruct` seemingly [truncating](https://github.com/ComparativeGenomicsToolkit/cactus/issues/1402) large records.  `vg deconstruct / call` are now modified to drop (with a warning) any lines `>2Gb` to avoid these issues.\r\n * `vg giraffe` should no longer crash when mapping paired-end reads and reporting secondaries without a fragment length distribution\r\n * `vg inject` now supports GAF format with the new `--output-format`/`-o` option \r\n\r\n## Updated Submodules\r\n\r\n* `libvgio`",
        "html_url": "https://github.com/vgteam/vg/releases/tag/v1.58.0",
        "name": "vg 1.58.0 - Cartari",
        "release_id": 163429590,
        "tag": "v1.58.0",
        "tarball_url": "https://api.github.com/repos/vgteam/vg/tarball/v1.58.0",
        "type": "Release",
        "url": "https://api.github.com/repos/vgteam/vg/releases/163429590",
        "value": "https://api.github.com/repos/vgteam/vg/releases/163429590",
        "zipball_url": "https://api.github.com/repos/vgteam/vg/zipball/v1.58.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamnovak",
          "type": "User"
        },
        "date_created": "2024-05-07T13:41:49Z",
        "date_published": "2024-05-20T18:50:28Z",
        "description": "**[![Download for Linux](https://raw.githubusercontent.com/vgteam/vg/master/doc/figures/download-linux.png)\r\n](https://github.com/vgteam/vg/releases/download/v1.57.0/vg)**\r\n\r\nDon't forget to mark the static binary executable:\r\n```\r\nchmod +x vg\r\n```\r\n**Docker Image:** `quay.io/vgteam/vg:v1.57.0`\r\n\r\n**Buildable Source Tarball:** [vg-v1.57.0.tar.gz](https://github.com/vgteam/vg/releases/download/v1.57.0/vg-v1.57.0.tar.gz)\r\n\r\nIncludes source for vg and all submodules. **Use this instead of Github's \"Source Code\" downloads**; those will not build as they do not include code for bundled dependencies that the `vg` build process needs.\r\n\r\nThis release includes:\r\n\r\n\r\n* Added haplotype sampling example\r\n* Added subpath support to `vg annotate`\r\n* Duplicate words removed from documentation\r\n* WFAExtender alignments are now scored using the full length bonus\r\n* Extra debug messages removed from `vg chunk`\r\n* `libdeflate` build should now have more space to be renamed\r\n\r\n## Updated Submodules\r\nNone",
        "html_url": "https://github.com/vgteam/vg/releases/tag/v1.57.0",
        "name": "vg 1.57.0 - Franchini",
        "release_id": 156563859,
        "tag": "v1.57.0",
        "tarball_url": "https://api.github.com/repos/vgteam/vg/tarball/v1.57.0",
        "type": "Release",
        "url": "https://api.github.com/repos/vgteam/vg/releases/156563859",
        "value": "https://api.github.com/repos/vgteam/vg/releases/156563859",
        "zipball_url": "https://api.github.com/repos/vgteam/vg/zipball/v1.57.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamnovak",
          "type": "User"
        },
        "date_created": "2024-04-08T20:29:25Z",
        "date_published": "2024-04-08T20:31:18Z",
        "description": "**[![Download for Linux](https://raw.githubusercontent.com/vgteam/vg/master/doc/figures/download-linux.png)\r\n](https://github.com/vgteam/vg/releases/download/v1.56.0/vg)**\r\n\r\nDon't forget to mark the static binary executable:\r\n```\r\nchmod +x vg\r\n```\r\n**Docker Image:** `quay.io/vgteam/vg:v1.56.0`\r\n\r\n**Buildable Source Tarball:** [vg-v1.56.0.tar.gz](https://github.com/vgteam/vg/releases/download/v1.56.0/vg-v1.56.0.tar.gz)\r\n\r\nIncludes source for vg and all submodules. **Use this instead of Github's \"Source Code\" downloads**; those will not build as they do not include code for bundled dependencies that the `vg` build process needs.\r\n\r\nThis release includes:\r\n\r\n * vg GFA output should now use P lines instead of W lines when nonzero phase blocks are present, to allow them to be round-tripped.\r\n * `vg call` `-c` and `-C` options changed to limit search based on all alleles and not just reference allele.  This means these options work much better in practice to prevent `vg call` from being lost in giant snarls. \r\n * `--progress` option added to `vg call`\r\n * Paths with subranges on phase block 0 (or on haplotype paths without explicit phase blocks) can now be saved to GFA again.\r\n * vg now supports reading from indexed GAF files of reads in many places where an indexed GAM file can be used\r\n\r\n## Updated Submodules\r\n\r\n* `htslib`",
        "html_url": "https://github.com/vgteam/vg/releases/tag/v1.56.0",
        "name": "vg 1.56.0 - Collalto",
        "release_id": 150288745,
        "tag": "v1.56.0",
        "tarball_url": "https://api.github.com/repos/vgteam/vg/tarball/v1.56.0",
        "type": "Release",
        "url": "https://api.github.com/repos/vgteam/vg/releases/150288745",
        "value": "https://api.github.com/repos/vgteam/vg/releases/150288745",
        "zipball_url": "https://api.github.com/repos/vgteam/vg/zipball/v1.56.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jeizenga",
          "type": "User"
        },
        "date_created": "2024-02-26T22:27:25Z",
        "date_published": "2024-02-26T22:30:43Z",
        "description": "**[![Download for Linux](https://raw.githubusercontent.com/vgteam/vg/master/doc/figures/download-linux.png)\r\n](https://github.com/vgteam/vg/releases/download/v1.55.0/vg)**\r\n\r\nDon't forget to mark the static binary executable:\r\n```\r\nchmod +x vg\r\n```\r\n**Docker Image:** `quay.io/vgteam/vg:v1.55.0`\r\n\r\n**Buildable Source Tarball:** [vg-v1.55.0.tar.gz](https://github.com/vgteam/vg/releases/download/v1.55.0/vg-v1.55.0.tar.gz)\r\n\r\nIncludes source for vg and all submodules. **Use this instead of Github's \"Source Code\" downloads**; those will not build as they do not include code for bundled dependencies that the `vg` build process needs.\r\n\r\nThis release includes:\r\n\r\n * `vg gamcompare` now keeps track of whether reads could have possibly been gotten correct, based on there being a truth position for them in the truth set, and excludes reads without a truth from plots and accuracy statistics.\r\n * vg giraffe no longer produces alignments with deletions on one end\r\n * Multithreaded path cover / local haplotypes GBWT construction.\r\n * CI should no longer fail due to truncated FTP download\r\n * GBZ paper citation link now points to the right place\r\n * `vg surject` will left align relative to the forward strand most of the time.\r\n\r\n## Updated Submodules\r\n\r\n* `gbwtgraph`",
        "html_url": "https://github.com/vgteam/vg/releases/tag/v1.55.0",
        "name": "vg 1.55.0 - Bernolda",
        "release_id": 143714104,
        "tag": "v1.55.0",
        "tarball_url": "https://api.github.com/repos/vgteam/vg/tarball/v1.55.0",
        "type": "Release",
        "url": "https://api.github.com/repos/vgteam/vg/releases/143714104",
        "value": "https://api.github.com/repos/vgteam/vg/releases/143714104",
        "zipball_url": "https://api.github.com/repos/vgteam/vg/zipball/v1.55.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "xchang1",
          "type": "User"
        },
        "date_created": "2024-01-15T19:11:39Z",
        "date_published": "2024-01-18T11:27:08Z",
        "description": "**[![Download for Linux](https://raw.githubusercontent.com/vgteam/vg/master/doc/figures/download-linux.png)\r\n](https://github.com/vgteam/vg/releases/download/v1.54.0/vg)**\r\n\r\nDon't forget to mark the static binary executable:\r\n```\r\nchmod +x vg\r\n```\r\n**Docker Image:** `quay.io/vgteam/vg:v1.54.0`\r\n\r\n**Buildable Source Tarball:** [vg-v1.54.0.tar.gz](https://github.com/vgteam/vg/releases/download/v1.54.0/vg-v1.54.0.tar.gz)\r\n\r\nIncludes source for vg and all submodules. **Use this instead of Github's \"Source Code\" downloads**; those will not build as they do not include code for bundled dependencies that the `vg` build process needs.\r\n\r\nThis release includes:\r\n\r\n* Integrated haplotype sampling in `vg giraffe` now does diploid sampling.\r\n* GBWTGraph algorithm for parsing GFA now handles P-line names of the form `sample#contig` correctly.",
        "html_url": "https://github.com/vgteam/vg/releases/tag/v1.54.0",
        "name": "vg 1.54.0 - Parafada",
        "release_id": 137540464,
        "tag": "v1.54.0",
        "tarball_url": "https://api.github.com/repos/vgteam/vg/tarball/v1.54.0",
        "type": "Release",
        "url": "https://api.github.com/repos/vgteam/vg/releases/137540464",
        "value": "https://api.github.com/repos/vgteam/vg/releases/137540464",
        "zipball_url": "https://api.github.com/repos/vgteam/vg/zipball/v1.54.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamnovak",
          "type": "User"
        },
        "date_created": "2023-12-04T21:26:02Z",
        "date_published": "2023-12-04T21:27:38Z",
        "description": "**[![Download for Linux](https://raw.githubusercontent.com/vgteam/vg/master/doc/figures/download-linux.png)\r\n](https://github.com/vgteam/vg/releases/download/v1.53.0/vg)**\r\n\r\nDon't forget to mark the static binary executable:\r\n```\r\nchmod +x vg\r\n```\r\n**Docker Image:** `quay.io/vgteam/vg:v1.53.0`\r\n\r\n**Buildable Source Tarball:** [vg-v1.53.0.tar.gz](https://github.com/vgteam/vg/releases/download/v1.53.0/vg-v1.53.0.tar.gz)\r\n\r\nIncludes source for vg and all submodules. **Use this instead of Github's \"Source Code\" downloads**; those will not build as they do not include code for bundled dependencies that the `vg` build process needs.\r\n\r\nThis release includes:\r\n\r\n* `vg sim` no longer crashes on graphs with 1-node cycles\r\n* `vg autoindex` can identify haplotypes specified as P-lines in a GFA\r\n* Set reference samples in GBWT or GBZ with `vg gbwt` option `--set-reference`.\r\n* `vg rna` no longer projects transcripts twice onto a reference given by `RS` tag in a GFA\r\n* `vg rna` assigns unique names to twice-projected transcripts on cyclic haplotypes\r\n* GBWT construction automatically increases buffer size if the paths are too long.\r\n* In `vg haplotypes`, the default number of candidates for diploid sampling is now 32.\r\n* `vg giraffe` now explains that `--named-coordinates` works for GAF output\r\n* `libvgio` now uses quoted includes internally\r\n* vg's README now [prominently lists some recommended papers to cite](https://github.com/vgteam/vg#citing-vg) when using parts of `vg` in your work\r\n* Updated `dozeu` submodule should no longer crash `vg giraffe` and `vg surject`.\r\n\r\n\r\n## Updated Submodules\r\n\r\n* `dozeu`\r\n* `gbwt`\r\n* `libhandlegraph`\r\n* `libvgio`",
        "html_url": "https://github.com/vgteam/vg/releases/tag/v1.53.0",
        "name": "vg 1.53.0 - Valmontone",
        "release_id": 132574737,
        "tag": "v1.53.0",
        "tarball_url": "https://api.github.com/repos/vgteam/vg/tarball/v1.53.0",
        "type": "Release",
        "url": "https://api.github.com/repos/vgteam/vg/releases/132574737",
        "value": "https://api.github.com/repos/vgteam/vg/releases/132574737",
        "zipball_url": "https://api.github.com/repos/vgteam/vg/zipball/v1.53.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jeizenga",
          "type": "User"
        },
        "date_created": "2023-10-21T20:19:34Z",
        "date_published": "2023-10-23T18:41:26Z",
        "description": "**[![Download for Linux](https://raw.githubusercontent.com/vgteam/vg/master/doc/figures/download-linux.png)\r\n](https://github.com/vgteam/vg/releases/download/v1.52.0/vg)**\r\n\r\nDon't forget to mark the static binary executable:\r\n```\r\nchmod +x vg\r\n```\r\n**Docker Image:** `quay.io/vgteam/vg:v1.52.0`\r\n\r\n**Buildable Source Tarball:** [vg-v1.52.0.tar.gz](https://github.com/vgteam/vg/releases/download/v1.52.0/vg-v1.52.0.tar.gz)\r\n\r\nIncludes source for vg and all submodules. **Use this instead of Github's \"Source Code\" downloads**; those will not build as they do not include code for bundled dependencies that the `vg` build process needs.\r\n\r\nThis release includes:\r\n\r\n* `vg construct` now has a `-A, --alt-paths-plain` option for storing IDs from the VCF instead of hash-based IDs for alt allele paths.\r\n* `vg call` patched so that certain problem cases no longer take forever.\r\n* Mac CI now actually installs Node\r\n* GBZ files can now hold reference paths like `GRCh38#chr1`, with no haplotype phase number.\r\n* vg is now compatible with jq 1.7.\r\n* Mac build should no longer fail with complaints about a missing atomic library.\r\n* Tests should no longer fail due to odd alignments from `diff`.\r\n* Better error messages from `vg haplotypes`.\r\n* vg build process should now always use exactly one libhandlegraph\r\n* add missing `-O` help for `vg call`\r\n* vg Makefile now can take a `CXX_STANDARD` variable in. You should be able to e.g. `make CXX_STANDARD=20` if you have a Protobuf/Abseil for C++20.\r\n* GCSA2 construction in `vg autoindex` rewinds to pruning if memory is too high\r\n\r\n## Updated Submodules\r\n\r\n* kff-cpp-api\r\n* gcsa2\r\n* libhandlegraph\r\n* libvgio\r\n* vcflib\r\n* gbwtgraph",
        "html_url": "https://github.com/vgteam/vg/releases/tag/v1.52.0",
        "name": "vg 1.52.0 - Bozen",
        "release_id": 126307992,
        "tag": "v1.52.0",
        "tarball_url": "https://api.github.com/repos/vgteam/vg/tarball/v1.52.0",
        "type": "Release",
        "url": "https://api.github.com/repos/vgteam/vg/releases/126307992",
        "value": "https://api.github.com/repos/vgteam/vg/releases/126307992",
        "zipball_url": "https://api.github.com/repos/vgteam/vg/zipball/v1.52.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamnovak",
          "type": "User"
        },
        "date_created": "2023-09-18T14:38:52Z",
        "date_published": "2023-09-18T17:58:54Z",
        "description": "**[![Download for Linux](https://raw.githubusercontent.com/vgteam/vg/master/doc/figures/download-linux.png)\r\n](https://github.com/vgteam/vg/releases/download/v1.51.0/vg)**\r\n\r\nDon't forget to mark the static binary executable:\r\n```\r\nchmod +x vg\r\n```\r\n**Docker Image:** `quay.io/vgteam/vg:v1.51.0`\r\n\r\n**Buildable Source Tarball:** [vg-v1.51.0.tar.gz](https://github.com/vgteam/vg/releases/download/v1.51.0/vg-v1.51.0.tar.gz)\r\n\r\nIncludes source for vg and all submodules. **Use this instead of Github's \"Source Code\" downloads**; those will not build as they do not include code for bundled dependencies that the `vg` build process needs.\r\n\r\nThis release includes:\r\n\r\n\r\n* Giraffe can do haplotype sampling automatically if sufficient inputs are provided.\r\n* Simplified `vg giraffe` command line help; full list of options is still available with `-h`.\r\n* Diploid mode for haplotype sampling: first select N haplotypes, then choose the best pair.\r\n* Add ref-path stubbification option -S to vg clip\r\n* `vg validate` now complains about duplicate path names\r\n* vg CI expects only the allocated cores on the Gitlab runners\r\n* vg CI Buildkit docker builds use the local Docker Hub mirror\r\n* `vg convert` option `--no-translation` for converting GBWTGraph to GFA directly without using the node-to-segment translation.\r\n* `vg rna` will not crash when adding transcripts with an intron of length 0\r\n* `vg paths` now supports `-H` for selecting haplotype paths and `-R` for selecting reference paths\r\n\r\n## Updated Submodules\r\n\r\n* backward-cpp\r\n* gbwtgraph\r\n* libbdsg",
        "html_url": "https://github.com/vgteam/vg/releases/tag/v1.51.0",
        "name": "vg 1.51.0 - Quellenhof",
        "release_id": 121576845,
        "tag": "v1.51.0",
        "tarball_url": "https://api.github.com/repos/vgteam/vg/tarball/v1.51.0",
        "type": "Release",
        "url": "https://api.github.com/repos/vgteam/vg/releases/121576845",
        "value": "https://api.github.com/repos/vgteam/vg/releases/121576845",
        "zipball_url": "https://api.github.com/repos/vgteam/vg/zipball/v1.51.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamnovak",
          "type": "User"
        },
        "date_created": "2023-08-07T20:59:49Z",
        "date_published": "2023-08-07T21:02:25Z",
        "description": "**[![Download for Linux](https://raw.githubusercontent.com/vgteam/vg/master/doc/figures/download-linux.png)\r\n](https://github.com/vgteam/vg/releases/download/v1.50.1/vg)**\r\n\r\nDon't forget to mark the static binary executable:\r\n```\r\nchmod +x vg\r\n```\r\n**Docker Image:** `quay.io/vgteam/vg:v1.50.1`\r\n\r\n**Buildable Source Tarball:** [vg-v1.50.1.tar.gz](https://github.com/vgteam/vg/releases/download/v1.50.1/vg-v1.50.1.tar.gz)\r\n\r\nIncludes source for vg and all submodules. **Use this instead of Github's \"Source Code\" downloads**; those will not build as they do not include code for bundled dependencies that the `vg` build process needs.\r\n\r\nThis release includes:\r\n\r\n- `vg autoindex --workflow map` can index GFAs with many W lines\r\n- `vg autoindex -w map` and `-w mpmap` won't enter an infinite loop when they can't write to disk\r\n- `GRCh38#chr1` style path names in GFA P lines should now be parseable again\r\n\r\n## Updated Submodules\r\n \r\n* `gcsa2`\r\n* `libhandlegraph`",
        "html_url": "https://github.com/vgteam/vg/releases/tag/v1.50.1",
        "name": "vg 1.50.1 - Monopoli",
        "release_id": 115528880,
        "tag": "v1.50.1",
        "tarball_url": "https://api.github.com/repos/vgteam/vg/tarball/v1.50.1",
        "type": "Release",
        "url": "https://api.github.com/repos/vgteam/vg/releases/115528880",
        "value": "https://api.github.com/repos/vgteam/vg/releases/115528880",
        "zipball_url": "https://api.github.com/repos/vgteam/vg/zipball/v1.50.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "glennhickey",
          "type": "User"
        },
        "date_created": "2023-08-01T12:40:38Z",
        "date_published": "2023-08-01T12:43:34Z",
        "description": "**[![Download for Linux](https://raw.githubusercontent.com/vgteam/vg/master/doc/figures/download-linux.png)\r\n](https://github.com/vgteam/vg/releases/download/v1.50.0/vg)**\r\n\r\nDon't forget to mark the static binary executable:\r\n```\r\nchmod +x vg\r\n```\r\n**Docker Image:** `quay.io/vgteam/vg:v1.50.0`\r\n\r\n**Buildable Source Tarball:** [vg-v1.50.0.tar.gz](https://github.com/vgteam/vg/releases/download/v1.50.0/vg-v1.50.0.tar.gz)\r\n\r\nIncludes source for vg and all submodules. **Use this instead of Github's \"Source Code\" downloads**; those will not build as they do not include code for bundled dependencies that the `vg` build process needs.\r\n\r\nThis release includes:\r\n\r\n* CI test jobs now cache pulled Docker images\r\n* GAF output should now have more correct path end positions and block lengths\r\n* Paths that look like PanSN but aren't, due to having a non-numeric haplotype number field, will no longer be parsed, and should thus no longer produce crashes due to parsing failures.\r\n* Haplotype sampling now copies the vg node to GFA segment translation correctly from the original graph.\r\n* `vg minimizer` requires a distance index for building a minimizer index.\r\n* `-S` option added to `vg call` to select reference paths by sample name.  This is more convenient as it allows, ex `-S GRCh38` to be used in place of `-p GRCh38#0#chr1 -p GRCh38#0#chr2 ..`. Such selection is necessary when the graph has more than one reference sample and `vg call` will now refuse to handle graphs with multiple reference samples unless paths are selected with `-S` or `-p`.\r\n* `vg filter` can filter to only mapped or only unmapped reads\r\n* `vg deconstruct` changed back to writing the full sample / hap/ contig name in VCF contig field.  In order to just write the contig name (like in the past few versions of vg), use the new `-C` option. \r\n\r\n## Updated Submodules\r\n\r\n* `gbwtgraph`\r\n* `gcsa2`\r\n* `libhandlegraph`\r\n* `libvgio`",
        "html_url": "https://github.com/vgteam/vg/releases/tag/v1.50.0",
        "name": "vg 1.50.0 - Monopoli",
        "release_id": 114646185,
        "tag": "v1.50.0",
        "tarball_url": "https://api.github.com/repos/vgteam/vg/tarball/v1.50.0",
        "type": "Release",
        "url": "https://api.github.com/repos/vgteam/vg/releases/114646185",
        "value": "https://api.github.com/repos/vgteam/vg/releases/114646185",
        "zipball_url": "https://api.github.com/repos/vgteam/vg/zipball/v1.50.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamnovak",
          "type": "User"
        },
        "date_created": "2023-06-17T15:38:43Z",
        "date_published": "2023-06-21T12:13:27Z",
        "description": "**[![Download for Linux](https://raw.githubusercontent.com/vgteam/vg/master/doc/figures/download-linux.png)\r\n](https://github.com/vgteam/vg/releases/download/v1.49.0/vg)**\r\n\r\nDon't forget to mark the static binary executable:\r\n```\r\nchmod +x vg\r\n```\r\n**Docker Image:** `quay.io/vgteam/vg:v1.49.0`\r\n\r\n**Buildable Source Tarball:** [vg-v1.49.0.tar.gz](https://github.com/vgteam/vg/releases/download/v1.49.0/vg-v1.49.0.tar.gz)\r\n\r\nIncludes source for vg and all submodules. **Use this instead of Github's \"Source Code\" downloads**; those will not build as they do not include code for bundled dependencies that the `vg` build process needs.\r\n\r\nThis release includes:\r\n\r\n * Giraffe can now use weighted minimizers, which try to avoid selecting frequent kmers as minimizes.\r\n * `vg inject` can read BAM files with unmapped reads\r\n * `vg giraffe` now has `--match`, `--mismatch`, `--gap-open`, `--gap-extend`, and `--full-l-bonus` options to control alignment scoring.\r\n * Fix crash during assertion in `vg deconstruct` on PGGB graph that was introduced in v1.48.0\r\n * `:` character now allowed in path name during `contig:start-end` range extraction from command line options (ie in `vg chunk`). \r\n * vg now builds with C++17 on Mac, as required by the version of Protobuf packaged in Homebrew\r\n * vg now deduplicates arguments from pkg-config, to limit command line length with Protobuf's 30-odd Abseil dependencies.\r\n * Better default parameters for haplotype sampling.\r\n * `vg clip` crash on PackedGraphs fixed.\r\n * Mac CI now collects Homebrew debug info\r\n * vg's CI can now run on local Gitlab runners\r\n * CI no longer does extra Docker builds without proper caching\r\n * `vg giraffe -b fast` preset now works again and is under test\r\n * Serialized mutable graphs keep proper track of the number of edges they contain\r\n\r\n## Updated Submodules\r\n\r\n* `gbwtgraph`\r\n* `libbdsg`\r\n* `libvgio`\r\n\r\n",
        "html_url": "https://github.com/vgteam/vg/releases/tag/v1.49.0",
        "name": "vg 1.49.0 - Peschici",
        "release_id": 109368280,
        "tag": "v1.49.0",
        "tarball_url": "https://api.github.com/repos/vgteam/vg/tarball/v1.49.0",
        "type": "Release",
        "url": "https://api.github.com/repos/vgteam/vg/releases/109368280",
        "value": "https://api.github.com/repos/vgteam/vg/releases/109368280",
        "zipball_url": "https://api.github.com/repos/vgteam/vg/zipball/v1.49.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jeizenga",
          "type": "User"
        },
        "date_created": "2023-05-05T15:23:08Z",
        "date_published": "2023-05-08T22:43:50Z",
        "description": "**[![Download for Linux](https://raw.githubusercontent.com/vgteam/vg/master/doc/figures/download-linux.png)\r\n](https://github.com/vgteam/vg/releases/download/v1.48.0/vg)**\r\n\r\nDon't forget to mark the static binary executable:\r\n```\r\nchmod +x vg\r\n```\r\n**Docker Image:** `quay.io/vgteam/vg:v1.48.0`\r\n\r\n**Buildable Source Tarball:** [vg-v1.48.0.tar.gz](https://github.com/vgteam/vg/releases/download/v1.48.0/vg-v1.48.0.tar.gz)\r\n\r\nIncludes source for vg and all submodules. **Use this instead of Github's \"Source Code\" downloads**; those will not build as they do not include code for bundled dependencies that the `vg` build process needs.\r\n\r\nThis release includes:\r\n\r\n * `vg chunk` will now report an error if asked to chunk reads that do not go with the graph\r\n* `vg autoindex` can construct linear reference indexes from a FASTA file \r\n* `vg gbwt` will now refuse to add reference sample names with `#` in them, and will try and advise on what the tags are supposed to be like\r\n* `vg surject` can project to paths that intersect themselves in the reverse orientation\r\n* `vg surject` will now print warning messages when processing a read or pair takes a suspiciously long amount of time.\r\n * `vg giraffe` should no longer try to put hypothetical sequencing errors in empty intervals, and should report errors in MAPQ cap computation in a more debuggable way.\r\n * Crashes now include the stack trace by default; set `VG_FULL_TRACEBACK=0` to suppress it to a file.\r\n * `vg surject` and `vg giraffe` should now include relevant read name hints when crashing in many cases.\r\n * Added `crash_unless()` as an alternative to `assert()` that reports these hints. We eventually want to use it everywhere.\r\n * Crash reports now have cool hyperlinks. \r\n * `vg surject` will limit itself to 200 anchors per target path segment by default; use the new `-a/--max-anchors` option to control this limit. Surjection against PGGB graphs may require `--max-anchors 20` to complete.\r\n * `vg surject` may be able to limit itself to considering only high-scoring surjections in some cases.\r\n * `vg construct` now properly handles the case where it is looking for the end of an inversion from 1 base before it\r\n * `vg construct` will no longer try and coalesce nodes at construction chunk boundaries when those nodes have alt paths that visit them or edges to their outside endpoints. This should fix some crashes and incorrect placement of structural variant breakpoints in the graph.\r\n * Update vcflib to current version plus build and parser fixes\r\n * `vg construct` should now be faster when variants are extremely long and overlap each other\r\n * `vg chunk` now outputs PackedGraph instead of Protobuf by default (unless `-T` is used).  Also, output files now get the `.vg` file extension for any non-GFA format (use `vg stats -F` to check the underlying format of any graph). \r\n * Snarl clipping bug in `vg clip` fixed so that when there are multiple different reference traversals in a snarl (common in PGGB output), then none of them are chopped.\r\n * Fixed build against Ubuntu 22.04's pybind11\r\n * Docker containers now have `/usr/bin/time` for profiling\r\n\r\n## Updated Submodules\r\n\r\n * `htslib`\r\n * `vcflib`\r\n * `gbwtgraph`\r\n * `libbdsg`\r\n * `tabixpp`\r\n\r\n",
        "html_url": "https://github.com/vgteam/vg/releases/tag/v1.48.0",
        "name": "vg 1.48.0 - Gallipoli",
        "release_id": 102274323,
        "tag": "v1.48.0",
        "tarball_url": "https://api.github.com/repos/vgteam/vg/tarball/v1.48.0",
        "type": "Release",
        "url": "https://api.github.com/repos/vgteam/vg/releases/102274323",
        "value": "https://api.github.com/repos/vgteam/vg/releases/102274323",
        "zipball_url": "https://api.github.com/repos/vgteam/vg/zipball/v1.48.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamnovak",
          "type": "User"
        },
        "date_created": "2023-03-23T21:05:11Z",
        "date_published": "2023-03-27T18:51:13Z",
        "description": "**[![Download for Linux](https://raw.githubusercontent.com/vgteam/vg/master/doc/figures/download-linux.png)\r\n](https://github.com/vgteam/vg/releases/download/v1.47.0/vg)**\r\n\r\nDon't forget to mark the static binary executable:\r\n```\r\nchmod +x vg\r\n```\r\n**Docker Image:** `quay.io/vgteam/vg:v1.47.0`\r\n\r\n**Buildable Source Tarball:** [vg-v1.47.0.tar.gz](https://github.com/vgteam/vg/releases/download/v1.47.0/vg-v1.47.0.tar.gz)\r\n\r\nIncludes source for vg and all submodules. **Use this instead of Github's \"Source Code\" downloads**; those will not build as they do not include code for bundled dependencies that the `vg` build process needs.\r\n\r\nThis release includes:\r\n\r\n * `vg sim` and `vg stats -a` sped up for GBZ input\r\n * Giraffe now uses the watchdog to detect slow reads\r\n * `vg construct` should no longer fail assertions and will instead report errors.\r\n * `vg construct` now handles IUPAC codes in the reference as Ns even if they are covered by symbolic structural variants\r\n * Faster haplotype sampling with `vg haplotypes`.\r\n * `vg stats -a` also outputs statistics on alignment scores and mapping quality.\r\n * `vg giraffe` should no longer crash if the distance index is read-only.\r\n * `vg rna` now supports the GBZ format for the input graph and haplotypes (new option `--gbz-format`).\r\n * `vg convert` now defaults to PackedGraph instead of HashGraph if no output format selected.\r\n * New option `vg clip -s` to remove stubs (dangling nodes not on ref path) \r\n * `vg call` and `vg deconstruct` now only apply node ID translation from GBZ inputs if new `-O` is used.\r\n * `vg surject` will now enforce that the reads it is surjection actually were mapped against the graph you are surjecting against. Right now it checks node IDs and lengths. You can turn this off with `-V`/`--no-validate`.\r\n * `vg gbwt` now accepts a `-I`/`--gg-in` option, which lets you load a `.gg` file and a `.gbwt` file and combine them into a `.gbz` graph.\r\n * `vg validate` now accepts a `-A`/`--gam-only` option which will validate only the provided alignment's agreement with the graph, and not the graph itself.\r\n * The `vg surject`/`vg giraffe` `error: couldn't identify a path corresponding to surjected read` error message has been improved to dump more information about the offending read and path.\r\n * When selecting paths to surject to, a warning will now be printed if the user asks for a path with a `[]`-enclosed subrange at the end. The base path name without the `[]` subrange coordinates should usually be used instead, because that is the space in which the SAM/BAM output will have its coordinates specified.\r\n * The `vg surject` `Graph does not have a path named` error message should now no longer print pointer values, and is extended to explain a bit more about subpaths.\r\n\r\n\r\n## Updated Submodules\r\n\r\nThe `kff-cpp-api` and `libbdsg` submodules have been updated.\r\n\r\n",
        "html_url": "https://github.com/vgteam/vg/releases/tag/v1.47.0",
        "name": "vg v1.47.0 - Ostuni",
        "release_id": 97068222,
        "tag": "v1.47.0",
        "tarball_url": "https://api.github.com/repos/vgteam/vg/tarball/v1.47.0",
        "type": "Release",
        "url": "https://api.github.com/repos/vgteam/vg/releases/97068222",
        "value": "https://api.github.com/repos/vgteam/vg/releases/97068222",
        "zipball_url": "https://api.github.com/repos/vgteam/vg/zipball/v1.47.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "xchang1",
          "type": "User"
        },
        "date_created": "2023-02-14T02:20:18Z",
        "date_published": "2023-02-14T04:30:17Z",
        "description": "**[![Download for Linux](https://raw.githubusercontent.com/vgteam/vg/master/doc/figures/download-linux.png)\r\n](https://github.com/vgteam/vg/releases/download/v1.46.0/vg)**\r\n\r\nDon't forget to mark the static binary executable:\r\n```\r\nchmod +x vg\r\n```\r\n**Docker Image:** `quay.io/vgteam/vg:v1.46.0`\r\n\r\n**Buildable Source Tarball:** [vg-v1.46.0.tar.gz](https://github.com/vgteam/vg/releases/download/v1.46.0/vg-v1.46.0.tar.gz)\r\n\r\nIncludes source for vg and all submodules. **Use this instead of Github's \"Source Code\" downloads**; those will not build as they do not include code for bundled dependencies that the `vg` build process needs.\r\n\r\nThis release includes:\r\n\r\n * Long read Giraffe codepath now falls back to non-GBWT alignment for very long tails, which is slow but at least tends to finish\r\n * Long read Giraffe codepath refuses to use Dozeu for tails, because the tails are very long and Dozeu will clobber the stack when given a long alignment\r\n * More knobs have been added to long read Giraffe to tweak what inter-pre-cluster connections are sent to reseeding, and what chains are actually made into alignments\r\n * `vg stats` now reports on time-usage information in GAM files if available\r\n * Wiki tutorial on programming with `libbdsg` and `gbwtgraph` is now under CI test.\r\n * Rescue alignment in `vg giraffe` paired-end mode should no longer decide it rescued off of the wrong alignments \r\n * GAMP files no longer lose the \"secondary\" annotation when converted to GAM\r\n * New benchmarking and read-simulating scripts for testing long-read Giraffe\r\n * Fixed a crash in Giraffe correctness tracking in the long-read codepath due to out-of-bounds accesses into previous stages in the funnel\r\n * Reading SAM/BAM/CRAM files into a graph (i,e, `vg inject`) will now bail out and complain if they are against haplotypes and not reference or generic paths (because positional lookup is likely to be too slow to be practical)\r\n * `vg inject` now defaults to the normal default number of threads\r\n * `vg gamcompare` now has a `-n`/`--rename` options for comparing GAM files annotated with position on the same contigs but with different names.\r\n * `vg annotate` now uses a ReferencePathOverlayHelper to make sure it has fast access to the positions of graph nodes along paths.\r\n * vg CI now tests against sequenceTubeMap using its recommended Node version\r\n * `vg rna` will no longer in certain cases skip the first line when the annotation input has a header\r\n * `vg rna` no longer crashes when adding splice-junction from a BED file with introns\r\n * `scripts/make_pbsim_reads.sh` now works with local graph files in addition to S3 URLs\r\n * `scripts/lr_benchmark.sh` now downloads and uses CHM13 graphs\r\n * Chaining lookback now stops at 15 total items max\r\n * Tail alignment with GSSW now refuses to fill more than 16 mibi-cells\r\n * Fix off-by-1 array size bug in `vg clip`edge clipping\r\n * Faster `vg chunk` on GBZ input\r\n * Highly experimental `vg haplotypes` subcommand for sampling haplotypes based on kmer counts.\r\n * `vg giraffe` now preloads the distance index into memory before mapping any reads\r\n * Makefile should deal better with `protoc` not being installed\r\n * Surjecting now works for interleaved GAFs, even if one or both reads are unmapped.\r\n\r\n\r\n\r\n## Updated Submodules\r\n\r\nThe `libbdsg` and `gbwtgraph` submodules have been updated.\r\n\r\n\r\n## New Submodules\r\n\r\nThe `kff-cpp-api` submodule has been added.\r\n\r\n",
        "html_url": "https://github.com/vgteam/vg/releases/tag/v1.46.0",
        "name": "vg 1.46.0 - Altamura",
        "release_id": 92299380,
        "tag": "v1.46.0",
        "tarball_url": "https://api.github.com/repos/vgteam/vg/tarball/v1.46.0",
        "type": "Release",
        "url": "https://api.github.com/repos/vgteam/vg/releases/92299380",
        "value": "https://api.github.com/repos/vgteam/vg/releases/92299380",
        "zipball_url": "https://api.github.com/repos/vgteam/vg/zipball/v1.46.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamnovak",
          "type": "User"
        },
        "date_created": "2022-12-16T03:55:09Z",
        "date_published": "2023-01-03T17:12:20Z",
        "description": "**[![Download for Linux](https://raw.githubusercontent.com/vgteam/vg/master/doc/figures/download-linux.png)\r\n](https://github.com/vgteam/vg/releases/download/v1.45.0/vg)**\r\n\r\nDon't forget to mark the static binary executable:\r\n```\r\nchmod +x vg\r\n```\r\n**Docker Image:** `quay.io/vgteam/vg:v1.45.0`\r\n\r\n**Buildable Source Tarball:** [vg-v1.45.0.tar.gz](https://github.com/vgteam/vg/releases/download/v1.45.0/vg-v1.45.0.tar.gz)\r\n\r\nIncludes source for vg and all submodules. **Use this instead of Github's \"Source Code\" downloads**; those will not build as they do not include code for bundled dependencies that the `vg` build process needs.\r\n\r\nThis release includes:\r\n\r\n * `vg clip -d` now removes *edges* not meeting the depth threshold, in addition to nodes\r\n * `vg paths -C` reports both undirected (visit any node twice) and directed (visit any node twice in same orientation) cyclicity\r\n * Macports-based installation instructions have been simplified\r\n * vg Mac build now works even if `g++ --version` doesn't actually have the version string on the first line\r\n * vg no longer supports the \"ODGI\" format. The implementation that vg used was never compatible with the implementation in the [actual `odgi` tool](https://github.com/pangenome/odgi). If you have graphs in the old vg-odgi format, use vg 1.44.0 to convert them to another format. To exchange data with the `odgi` tool, use the GFA format.\r\n * Fix `stats -p` option\r\n * `vg giraffe --align-from-chains` invokes a separate (still experimental) long-read-optimized codepath.\r\n * `vg giraffe` option parsing uses a new setup that makes it easier to add and report on options.\r\n * Giraffe funnel explanations can track correctness and placed-ness along the length of a read. \r\n * `vg mpmap` has increased sensitivity for detecting splice junctions\r\n * `vg autoindex` can produce graphs (included spliced graphs) from FASTAs without requiring VCFs\r\n * `vg autoindex` now splits the indexing for `vg mpmap` from the indexing for `rpvg`. The previous behavior can be recapitulated by indicating both workflows: `--workflow mpmap --workflow rpvg`\r\n * `vg chunk` and `vg trace` can now get haplotypes from an input GBZ file\r\n * `vg chunk` can use `--no-embedded-haplotypes` to ignore haplotypes from a GBZ.\r\n\r\n\r\n## Updated Submodules\r\n\r\nThe `libbdsg` and `libhandlegraph` submodules have been updated.\r\n\r\n",
        "html_url": "https://github.com/vgteam/vg/releases/tag/v1.45.0",
        "name": "vg 1.45.0 - Alpicella",
        "release_id": 87801064,
        "tag": "v1.45.0",
        "tarball_url": "https://api.github.com/repos/vgteam/vg/tarball/v1.45.0",
        "type": "Release",
        "url": "https://api.github.com/repos/vgteam/vg/releases/87801064",
        "value": "https://api.github.com/repos/vgteam/vg/releases/87801064",
        "zipball_url": "https://api.github.com/repos/vgteam/vg/zipball/v1.45.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamnovak",
          "type": "User"
        },
        "date_created": "2022-11-21T17:28:52Z",
        "date_published": "2022-11-21T17:31:58Z",
        "description": "**[![Download for Linux](https://raw.githubusercontent.com/vgteam/vg/master/doc/figures/download-linux.png)\r\n](https://github.com/vgteam/vg/releases/download/v1.44.0/vg)**\r\n\r\nDon't forget to mark the static binary executable:\r\n```\r\nchmod +x vg\r\n```\r\n**Docker Image:** `quay.io/vgteam/vg:v1.44.0`\r\n\r\n**Buildable Source Tarball:** [vg-v1.44.0.tar.gz](https://github.com/vgteam/vg/releases/download/v1.44.0/vg-v1.44.0.tar.gz)\r\n\r\nIncludes source for vg and all submodules. **Use this instead of Github's \"Source Code\" downloads**; those will not build as they do not include code for bundled dependencies that the `vg` build process needs.\r\n\r\nThis release includes:\r\n\r\n* GAF output fixed to 1) no longer have consecutive deletions in the CIGAR and 2) be valid for split mappings within the same node (which can happen when mapping long reads with `vg map`)\r\n* `vg autoindex` can auto-tune some key indexing parameters for increased robustness.\r\n* `vg autoindex` no longer crashes on VCFs that contain no samples.\r\n* Add the flag `--num-bp-per-min` to Giraffe to adjust the number of selected minimizers based on the read length.\r\n* vg main GFA loader can now handle HPRC-style GFAs where the same path exists as rGFA tags and P lines.\r\n* L-lines in GFA output changed back to have `0M` cigars (reverting switch to `*` in v1.31.0) \r\n* `vg surject` can annotate SAM/BAM records by all of the sequences it attempted to realign to\r\n* `vg surject` has improved stability on cyclic graphs\r\n* Handle GBWTGraphs and GBZ graphs that do not contain a translation correctly when a translation is needed.\r\n* `vg construct` will no longer fail with an assertion error about `last_edit_end != -1` and will instead report the variants that confused it.\r\n* `vg construct` will skip over and warn about variants that do not actually change anything.\r\n* vg should now only link one copy of Protobuf into the non-static build\r\n* vg should now build against newer libomp from Homebrew which is keg-only\r\n* `vg rna` now support reference transcript paths where exon boundaries are on opposite strands\r\n* `vg convert --drop-haplotypes` will drop haplotype paths from the output graph.\r\n* preliminary GBZ input support in `vg deconstruct` and `vg call`\r\n* `vg surject`, `vg giraffe`, `vg mpmap`, `vg filter`, and `vg deconstruct` now accelerate paths-on-node queries with an overlay, so working from a GBZ will no longer be quite as slow relative to working from an XG\r\n* libbdsg `PackedReferencePathOverlay` should no longer crash for short paths\r\n* Update distance index to distance index 2 to be more efficient and make clustering faster\r\n* Minimizers now have a payload with two ints\r\n* DI2 files will need to be rebuilt as well as minimizers that use the distance index \r\n* New `vg chunk` option `-S` can be used to extract every snarl that is fully contained in the the given path region (ie specified with `-p`).  This can be used instead of context steps `-c`.  The advantage is that `-S` will return everything inside the region and nothing outside the region (barring the start and end nodes), which helps with the problem of pulling out massive amounts of neighbouring regions when jacking up `-c` for complex subgraphs.  The disadvantage is that if the region specified contains only parts of snarls, the results will be a misleadingly simple graph.\r\n* vg viz no longer silently fails when asked to draw a PNG that is too big for Cairo\r\n\r\n## Updated Submodules\r\n\r\nThe `gbwt`, `gbwtgraph`, `gcsa2`, `libbdsg`, `libhandlegraph`, `libvgio`, and `xg` submodules have been updated.\r\n",
        "html_url": "https://github.com/vgteam/vg/releases/tag/v1.44.0",
        "name": "vg 1.44.0 - Solara",
        "release_id": 83783325,
        "tag": "v1.44.0",
        "tarball_url": "https://api.github.com/repos/vgteam/vg/tarball/v1.44.0",
        "type": "Release",
        "url": "https://api.github.com/repos/vgteam/vg/releases/83783325",
        "value": "https://api.github.com/repos/vgteam/vg/releases/83783325",
        "zipball_url": "https://api.github.com/repos/vgteam/vg/zipball/v1.44.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamnovak",
          "type": "User"
        },
        "date_created": "2022-08-29T17:41:50Z",
        "date_published": "2022-08-29T20:26:09Z",
        "description": "**[![Download for Linux](https://raw.githubusercontent.com/vgteam/vg/master/doc/figures/download-linux.png)\r\n](https://github.com/vgteam/vg/releases/download/v1.43.0/vg)**\r\n\r\nDon't forget to mark the static binary executable:\r\n```\r\nchmod +x vg\r\n```\r\n**Docker Image:** `quay.io/vgteam/vg:v1.43.0`\r\n\r\n**Buildable Source Tarball:** [vg-v1.43.0.tar.gz](https://github.com/vgteam/vg/releases/download/v1.43.0/vg-v1.43.0.tar.gz)\r\n\r\nIncludes source for vg and all submodules. **Use this instead of Github's \"Source Code\" downloads**; those will not build as they do not include code for bundled dependencies that the `vg` build process needs.\r\n\r\nThis release includes:\r\n\r\n * Mac CI now runs on MacOS 12\r\n * `uniform_int_distribution` unit tests no longer hang on MacOS 12\r\n * `vg giraffe` can now `--align-from-chains` to do long-read alignments\r\n * Makefile now supports `make bin/unittest/<test_file_name>` to build a dynamically-linked binary for just one file of unit tests, for faster iteration.\r\n* `-c` option added to `vg depth` path coverage in order to count each time a path steps on a position. By default `vg depth` continues to only count each path once\r\n\r\n## Updated Submodules\r\n\r\nThe `vcflib` submodule has been updated.\r\n\r\n",
        "html_url": "https://github.com/vgteam/vg/releases/tag/v1.43.0",
        "name": "vg 1.43.0 - Barisano",
        "release_id": 75687483,
        "tag": "v1.43.0",
        "tarball_url": "https://api.github.com/repos/vgteam/vg/tarball/v1.43.0",
        "type": "Release",
        "url": "https://api.github.com/repos/vgteam/vg/releases/75687483",
        "value": "https://api.github.com/repos/vgteam/vg/releases/75687483",
        "zipball_url": "https://api.github.com/repos/vgteam/vg/zipball/v1.43.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jeizenga",
          "type": "User"
        },
        "date_created": "2022-07-08T22:58:16Z",
        "date_published": "2022-07-18T18:35:24Z",
        "description": "**[![Download for Linux](https://raw.githubusercontent.com/vgteam/vg/master/doc/figures/download-linux.png)\r\n](https://github.com/vgteam/vg/releases/download/v1.42.0/vg)**\r\n\r\nDon't forget to mark the static binary executable:\r\n```\r\nchmod +x vg\r\n```\r\n**Docker Image:** `quay.io/vgteam/vg:v1.42.0`\r\n\r\n**Buildable Source Tarball:** [vg-v1.42.0.tar.gz](https://github.com/vgteam/vg/releases/download/v1.42.0/vg-v1.42.0.tar.gz)\r\n\r\nIncludes source for vg and all submodules. **Use this instead of Github's \"Source Code\" downloads**; those will not build as they do not include code for bundled dependencies that the `vg` build process needs.\r\n\r\nThis release includes:\r\n\r\n* vg releases should now have their Docker containers built by our CI.\r\n* vg releases should now have ARM/amd64 multiarch Docker tags.\r\n* README now documents using Giraffe.\r\n* SAM/BAM alignment output and surjection now tries to use reference paths, and then generic paths, but won't use haplotype paths by default\r\n\r\n",
        "html_url": "https://github.com/vgteam/vg/releases/tag/v1.42.0",
        "name": "vg 1.42.0 - Obolo",
        "release_id": 72256772,
        "tag": "v1.42.0",
        "tarball_url": "https://api.github.com/repos/vgteam/vg/tarball/v1.42.0",
        "type": "Release",
        "url": "https://api.github.com/repos/vgteam/vg/releases/72256772",
        "value": "https://api.github.com/repos/vgteam/vg/releases/72256772",
        "zipball_url": "https://api.github.com/repos/vgteam/vg/zipball/v1.42.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jeizenga",
          "type": "User"
        },
        "date_created": "2022-06-28T18:08:30Z",
        "date_published": "2022-06-28T18:09:24Z",
        "description": "This is a non-versioned release created in order to make a stable DOI for the source code to support reproducibility in the VG pantranscriptomics paper.\r\n\r\n",
        "html_url": "https://github.com/vgteam/vg/releases/tag/ptx-doi-tag",
        "name": "Second DOI release for pantranscriptomics paper",
        "release_id": 70782051,
        "tag": "ptx-doi-tag",
        "tarball_url": "https://api.github.com/repos/vgteam/vg/tarball/ptx-doi-tag",
        "type": "Release",
        "url": "https://api.github.com/repos/vgteam/vg/releases/70782051",
        "value": "https://api.github.com/repos/vgteam/vg/releases/70782051",
        "zipball_url": "https://api.github.com/repos/vgteam/vg/zipball/ptx-doi-tag"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "StephenHwang",
          "type": "User"
        },
        "date_created": "2022-06-01T02:39:47Z",
        "date_published": "2022-06-06T18:34:35Z",
        "description": "**[![Download for Linux](https://raw.githubusercontent.com/vgteam/vg/master/doc/figures/download-linux.png)\r\n](https://github.com/vgteam/vg/releases/download/v1.41.0/vg)**\r\n\r\nDon't forget to mark the static binary executable:\r\n```\r\nchmod +x vg\r\n```\r\n**Docker Image:** `quay.io/vgteam/vg:v1.41.0`\r\n\r\n**Buildable Source Tarball:** [vg-v1.41.0.tar.gz](https://github.com/vgteam/vg/releases/download/v1.41.0/vg-v1.41.0.tar.gz)\r\n\r\nIncludes source for vg and all submodules. **Use this instead of Github's \"Source Code\" downloads**; those will not build as they do not include code for bundled dependencies that the `vg` build process needs.\r\n\r\nThis release includes:\r\n\r\n* `vg inject` will report an error when paths don't exist in the graph, instead of doing undefined behavior.\r\n* vg now has metadata for paths; haplotype paths can now exist in places other than a GBWT. Try `vg paths -M -x <graph>` on a vg, GFA, or GBZ file to see it.\r\n* `vg convert` now has a `--ref-sample` option for promoting a haplotype to a reference during conversion.\r\n* `vg gbwt` and `vg index` no longer have `--paths-as-samples`; prepare input with paths of the appropriate senses instead.\r\n* vg will interpret W lines in input GFA files as haplotypes\r\n* vg will interpret W lines with `*` as the sample name as generic named paths.\r\n* vg will interpret PanSN P line names in input GFA files as haplotypes\r\n* vg will interpret PanSN P line names with `#<number>` after them as (pieces of) haplotypes\r\n* vg will interpret string-type `RS` tags in GFA headers as space-separated lists of samples whose paths are references, not haplotypes.\r\n* vg will generate GFA files using W lines for reference and haplotype paths, and containing `RS` header tags to distinguish them.\r\n* `vg surject` preserves group MAPQ annotations from `vg mpmap` as \"GM\" tag.\r\n* `vg mpmap`'s secondary alignment annotations are preserved by `vg surject`\r\n* `vg gbwt` can now manipulate GBWT tags and change reference samples in a GBWT or GBZ, as [documented on the wiki](https://github.com/vgteam/vg/wiki/Changing-References#large-gbz-and-gbwt-files-with-many-haplotypes).\r\n\r\n\r\n### Updated Submodules\r\n* `gbwtgraph`\r\n* `libvgio`\r\n* `libbdsg`\r\n* `dozeu`\r\n* `gfakluge` (removed)\r\n\r\n\r\nMake sure to `git submodule sync` and `git submodule update --init --recursive` if building from source. ",
        "html_url": "https://github.com/vgteam/vg/releases/tag/v1.41.0",
        "name": "vg 1.41.0 - Salmour",
        "release_id": 68752131,
        "tag": "v1.41.0",
        "tarball_url": "https://api.github.com/repos/vgteam/vg/tarball/v1.41.0",
        "type": "Release",
        "url": "https://api.github.com/repos/vgteam/vg/releases/68752131",
        "value": "https://api.github.com/repos/vgteam/vg/releases/68752131",
        "zipball_url": "https://api.github.com/repos/vgteam/vg/zipball/v1.41.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "StephenHwang",
          "type": "User"
        },
        "date_created": "2022-04-20T15:06:45Z",
        "date_published": "2022-04-25T21:10:31Z",
        "description": "**[![Download for Linux](https://raw.githubusercontent.com/vgteam/vg/master/doc/figures/download-linux.png)\r\n](https://github.com/vgteam/vg/releases/download/v1.40.0/vg)**\r\n\r\nDon't forget to mark the static binary executable:\r\n```\r\nchmod +x vg\r\n```\r\n**Docker Image:** `quay.io/vgteam/vg:v1.40.0`\r\n\r\n**Buildable Source Tarball:** [vg-v1.40.0.tar.gz](https://github.com/vgteam/vg/releases/download/v1.40.0/vg-v1.40.0.tar.gz)\r\n\r\nIncludes source for vg and all submodules. **Use this instead of Github's \"Source Code\" downloads**; those will not build as they do not include code for bundled dependencies that the `vg` build process needs.\r\n\r\nThis release includes:\r\n\r\n* README now explains how to migrate to ARM Macs\r\n* `vg mpmap` now distinguishes unmapped reads from reads with MAPQ 0\r\n* `vg mpmap` is faster on very complex cyclic graphs\r\n* `vg chunk -m` no longer bothers parsing `Alignment`s\r\n* `vg sim` will stop if there are too many Ns in the source graph instead of spinning forever\r\n* \r\n### Updated Submodules\r\n\r\n* `libzstd`\r\n* `libbdsg`\r\n* `xg`\r\n\r\n\r\nMake sure to `git submodule sync` and `git submodule update --init --recursive` if building from source. ",
        "html_url": "https://github.com/vgteam/vg/releases/tag/v1.40.0",
        "name": "vg 1.40.0 - Suardi",
        "release_id": 65282922,
        "tag": "v1.40.0",
        "tarball_url": "https://api.github.com/repos/vgteam/vg/tarball/v1.40.0",
        "type": "Release",
        "url": "https://api.github.com/repos/vgteam/vg/releases/65282922",
        "value": "https://api.github.com/repos/vgteam/vg/releases/65282922",
        "zipball_url": "https://api.github.com/repos/vgteam/vg/zipball/v1.40.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "StephenHwang",
          "type": "User"
        },
        "date_created": "2022-03-10T15:30:06Z",
        "date_published": "2022-03-14T22:36:16Z",
        "description": "**[![Download for Linux](https://raw.githubusercontent.com/vgteam/vg/master/doc/figures/download-linux.png)\r\n](https://github.com/vgteam/vg/releases/download/v1.39.0/vg)**\r\n\r\nDon't forget to mark the static binary executable:\r\n```\r\nchmod +x vg\r\n```\r\n**Docker Image:** `quay.io/vgteam/vg:v1.39.0`\r\n\r\n**Buildable Source Tarball:** [vg-v1.39.0.tar.gz](https://github.com/vgteam/vg/releases/download/v1.39.0/vg-v1.39.0.tar.gz)\r\n\r\nIncludes source for vg and all submodules. **Use this instead of Github's \"Source Code\" downloads**; those will not build as they do not include code for bundled dependencies that the `vg` build process needs.\r\n\r\nThis release includes:\r\n\r\n* CI now uses Toil compatible with pip 22.\r\n* `vg giraffe` can now produce GAF using GFA segment name coordinates.\r\n* `vg sim` no longer annotates reads with positions along synthesized haplotype paths\r\n* `vg sim` supports `--multi-position` option of `vg annotate`, for annotating simulated reads with path positions per node.\r\n* `vg gbwt` supports `--pass-paths` option to use paths from a passed-in graph when computing a path cover or local haplotype cover GBWT.\r\n* `vg sim` supports simulation from a set of HSTs in a pantranscriptome from `vg rna`\r\n* `vg giraffe` supports annotating reads with coverage by minimizers that gave rise to correct seeds.\r\n\r\n### Updated Submodules\r\n\r\n* `gssw`\r\n* `libvgio`\r\n\r\n\r\nMake sure to `git submodule sync` and `git submodule update --init --recursive` if building from source. ",
        "html_url": "https://github.com/vgteam/vg/releases/tag/v1.39.0",
        "name": "vg 1.39.0 - Runzi",
        "release_id": 61823717,
        "tag": "v1.39.0",
        "tarball_url": "https://api.github.com/repos/vgteam/vg/tarball/v1.39.0",
        "type": "Release",
        "url": "https://api.github.com/repos/vgteam/vg/releases/61823717",
        "value": "https://api.github.com/repos/vgteam/vg/releases/61823717",
        "zipball_url": "https://api.github.com/repos/vgteam/vg/zipball/v1.39.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamnovak",
          "type": "User"
        },
        "date_created": "2022-01-31T19:08:41Z",
        "date_published": "2022-01-31T19:10:31Z",
        "description": "**[![Download for Linux](https://raw.githubusercontent.com/vgteam/vg/master/doc/figures/download-linux.png)\r\n](https://github.com/vgteam/vg/releases/download/v1.38.0/vg)**\r\n\r\nDon't forget to mark the static binary executable:\r\n```\r\nchmod +x vg\r\n```\r\n**Docker Image:** `quay.io/vgteam/vg:v1.38.0`\r\n\r\n**Buildable Source Tarball:** [vg-v1.38.0.tar.gz](https://github.com/vgteam/vg/releases/download/v1.38.0/vg-v1.38.0.tar.gz)\r\n\r\nIncludes source for vg and all submodules. **Use this instead of Github's \"Source Code\" downloads**; those will not build as they do not include code for bundled dependencies that the `vg` build process needs.\r\n\r\nThis release includes:\r\n\r\n* JSON GAM quality string representation of base64-encoded PHRED+0 is now under test\r\n* `vg deconstruct` now uses OMP tasks instead of nested parallel sections, which caused problems keeping threads caches straight. \r\n* `vg giraffe --output-basename` is respected again \r\n* Multithreaded GBWT / GBZ construction from GFA in `vg gbwt`.\r\n* Multithreaded GBZ / GBWTGraph to GFA conversion in `vg convert`.\r\n* `make clean` now works on submodules that lack top-level Makefiles\r\n* vg now builds with GCC 11\r\n* `vg giraffe --named-coordinates` can produce GAM output with positions in the space of the input GFA, for indexes produced from a GFA with `vg autoindex`.\r\n* CI jobs that use Docker builder deployment now stop early if they don't see it.\r\n* `vg autoindex` supports `--gbwt-buffer-size` to increase the buffer size for indexing long haplotypes.\r\n* `vg snarls` now supports `--named-coordinates` for reporting snarls and snarl traversals in input GFA coordinates.\r\n* `vg mpmap` produces more accurate and parsimonious alignments on complex graphs\r\n\r\n\r\n### Updated Submodules\r\n\r\n* `elfutils`\r\n* `gbwtgraph`\r\n* `gssw`\r\n* `libbdsg`\r\n* `libhandlegraph`\r\n* `libvgio`\r\n* `sdsl-lite`\r\n* `structures`\r\n* `vcflib`\r\n\r\nMake sure to `git submodule sync` and `git submodule update --init --recursive` if building from source. ",
        "html_url": "https://github.com/vgteam/vg/releases/tag/v1.38.0",
        "name": "vg 1.38.0 - Canossa",
        "release_id": 58367876,
        "tag": "v1.38.0",
        "tarball_url": "https://api.github.com/repos/vgteam/vg/tarball/v1.38.0",
        "type": "Release",
        "url": "https://api.github.com/repos/vgteam/vg/releases/58367876",
        "value": "https://api.github.com/repos/vgteam/vg/releases/58367876",
        "zipball_url": "https://api.github.com/repos/vgteam/vg/zipball/v1.38.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamnovak",
          "type": "User"
        },
        "date_created": "2021-12-20T20:08:37Z",
        "date_published": "2021-12-20T20:09:45Z",
        "description": "**[![Download for Linux](https://raw.githubusercontent.com/vgteam/vg/master/doc/figures/download-linux.png)\r\n](https://github.com/vgteam/vg/releases/download/v1.37.0/vg)**\r\n\r\nDon't forget to mark the static binary executable:\r\n```\r\nchmod +x vg\r\n```\r\n**Docker Image:** `quay.io/vgteam/vg:v1.37.0`\r\n\r\n**Buildable Source Tarball:** [vg-v1.37.0.tar.gz](https://github.com/vgteam/vg/releases/download/v1.37.0/vg-v1.37.0.tar.gz)\r\n\r\nIncludes source for vg and all submodules. **Use this instead of Github's \"Source Code\" downloads**; those will not build as they do not include code for bundled dependencies that the `vg` build process needs.\r\n\r\nThis release includes:\r\n* `vg clip -D` fixed to do a better job breaking up giant snarls. \r\n* Option `-A` added to `vg call` to call all snarls, including child snarls (analagous to `vg deconstruct -a`)\r\n* Options `-c` and `-C` added to `vg call` to restrict snarl calling to sites within specified size range\r\n* `vg construct -a` no longer generates, and other vg tools no longer expect to see, empty paths for some variants\r\n* The segment translation table can be extracted from a GBZ file with `vg gbwt`.\r\n* `vg autoindex` no longer calls out-of-scope lambdas captured by reference\r\n* `vg call` VCF output now more consistent with `vg deconstruct`: `LV` and `PS` tags are added (with `-A`), snarl names in variant IDs are written the same, and the `AT` tag is added. `-N` option added (equivalent to `-T` in deconstruct) to apply a node translation table.\r\n* `vg call` GAF output (`-T/-G`) more informative, with positional information stored in the names and  (individual) read support for each allele with the `AD` optional tag\r\n* `.gbz` files can now be used anywhere a graph with embedded paths is expected.\r\n* `vg autoindex` will embed graph paths into Giraffe GBWT and GBZ files.\r\n* `vg giraffe` will now use the GBZ file for output on a linear reference and no longer needs an xg.\r\n* `vg giraffe` will prefer to use named paths from an XG, if available, over those in a GBZ.\r\n* Prevents buffer size errors in GBWT creation by `vg autoindex`\r\n\r\n### Updated Submodules\r\n\r\n* `gbwt`\r\n* `gbwtgraph`\r\n* `gssw`\r\n* `libbdsg`\r\n* `libhandlegraph`\r\n* `libvgio`\r\n\r\nMake sure to `git submodule sync` and `git submodule update --init --recursive` if building from source. ",
        "html_url": "https://github.com/vgteam/vg/releases/tag/v1.37.0",
        "name": "vg 1.37.0 - Monchio",
        "release_id": 55698326,
        "tag": "v1.37.0",
        "tarball_url": "https://api.github.com/repos/vgteam/vg/tarball/v1.37.0",
        "type": "Release",
        "url": "https://api.github.com/repos/vgteam/vg/releases/55698326",
        "value": "https://api.github.com/repos/vgteam/vg/releases/55698326",
        "zipball_url": "https://api.github.com/repos/vgteam/vg/zipball/v1.37.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jeizenga",
          "type": "User"
        },
        "date_created": "2021-11-10T05:25:48Z",
        "date_published": "2021-12-22T20:07:09Z",
        "description": "This is a non-versioned release created in order to make a stable DOI for the source code to support reproducibility in the VG pantranscriptomics paper.",
        "html_url": "https://github.com/vgteam/vg/releases/tag/ptx-paper-release",
        "name": "DOI release for pantranscriptomics paper",
        "release_id": 55852338,
        "tag": "ptx-paper-release",
        "tarball_url": "https://api.github.com/repos/vgteam/vg/tarball/ptx-paper-release",
        "type": "Release",
        "url": "https://api.github.com/repos/vgteam/vg/releases/55852338",
        "value": "https://api.github.com/repos/vgteam/vg/releases/55852338",
        "zipball_url": "https://api.github.com/repos/vgteam/vg/zipball/ptx-paper-release"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "StephenHwang",
          "type": "User"
        },
        "date_created": "2021-11-08T20:57:35Z",
        "date_published": "2021-11-08T22:30:40Z",
        "description": "**[![Download for Linux](https://raw.githubusercontent.com/vgteam/vg/master/doc/figures/download-linux.png)\r\n](https://github.com/vgteam/vg/releases/download/v1.36.0/vg)**\r\n\r\nDon't forget to mark the static binary executable:\r\n```\r\nchmod +x vg\r\n```\r\n**Docker Image:** `quay.io/vgteam/vg:v1.36.0`\r\n\r\n**Buildable Source Tarball:** [vg-v1.36.0.tar.gz](https://github.com/vgteam/vg/releases/download/v1.36.0/vg-v1.36.0.tar.gz)\r\n\r\nIncludes source for vg and all submodules. **Use this instead of Github's \"Source Code\" downloads**; those will not build as they do not include code for bundled dependencies that the `vg` build process needs.\r\n\r\nThis release includes:\r\n* Builds again on Ubuntu 18.04\r\n* Giraffe records read and pair mapping wall clock times\r\n* Giraffe can no longer output fragment length annotations too large to convert from JSON to GAM\r\n* Giraffe no longer uses duplicate minimizers as often for seeds, potentially increasing mapping speed.\r\n* Giraffe `--track-provenance` will no longer crash when considering improperly paired mappings\r\n* Surjection can now prune back low-complexity or short anchors to give more-optimal alignments against the target paths (`--prune-low-cplx`)\r\n* GFA file input is now checked by the parser and not just trusted to match the spec\r\n* Mac CI Homebrew package installation is more robust\r\n* Better handling of reversing reference paths in `vg call`\r\n* Multiple `-P` allowed in `vg clip` \r\n* `vg paths` messaging cleaned up to acknowledge that `vg paths -E -g` does indeed need a graph.\r\n* `vg giraffe` and `vg mpmap` no longer crash when reads are in lowercase\r\n* `vg map -h` should now print help again\r\n* CI now supports secure Docker Hub mirrors\r\n* `vg call` joins `deconstruct` and `surject` in transparently supporting reference subpaths\r\n* `vg deconstruct` changed to write `LV` and `PS` tags wrt sites in the VCF (and will not longer reference un-exported sites from the graph)\r\n* `vg clip` gets `-D` option for clipping out big deletion edges\r\n* Specified `--align-out` parameter in `vg sim` as GAM-format output\r\n* PATH is now quoted when added to\r\n\r\n### New and Updated Submodules\r\n\r\n* `gfakluge` has been updated.\r\n\r\nMake sure to `git submodule sync` and `git submodule update --init --recursive` if building from source. ",
        "html_url": "https://github.com/vgteam/vg/releases/tag/v1.36.0",
        "name": "vg 1.36.0 - Cibottola",
        "release_id": 52960199,
        "tag": "v1.36.0",
        "tarball_url": "https://api.github.com/repos/vgteam/vg/tarball/v1.36.0",
        "type": "Release",
        "url": "https://api.github.com/repos/vgteam/vg/releases/52960199",
        "value": "https://api.github.com/repos/vgteam/vg/releases/52960199",
        "zipball_url": "https://api.github.com/repos/vgteam/vg/zipball/v1.36.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "xchang1",
          "type": "User"
        },
        "date_created": "2021-09-27T13:38:02Z",
        "date_published": "2021-09-27T18:43:06Z",
        "description": "**[![Download for Linux](https://raw.githubusercontent.com/vgteam/vg/master/doc/figures/download-linux.png)\r\n](https://github.com/vgteam/vg/releases/download/v1.35.0/vg)**\r\n\r\nDon't forget to mark the static binary executable:\r\n```\r\nchmod +x vg\r\n```\r\n**Docker Image:** `quay.io/vgteam/vg:v1.35.0`\r\n\r\n**Buildable Source Tarball:** [vg-v1.35.0.tar.gz](https://github.com/vgteam/vg/releases/download/v1.35.0/vg-v1.35.0.tar.gz)\r\n\r\nIncludes source for vg and all submodules. **Use this instead of Github's \"Source Code\" downloads**; those will not build as they do not include code for bundled dependencies that the `vg` build process needs.\r\n\r\nThis release includes:\r\n* Multipath alignments from `vg mpmap` are more decomposable in tails near soft clip\r\n* Giraffe does not attempt rescue if it would be too slow.\r\n* `vg gamcompare` can use distances from a distance index instead of path position annotations.\r\n* Fix bug in `vg chunk -T` where input path ranges were incorrectly used to find subgraph size.\r\n* Fix GAF parsing bug that caused memory explosion for long paths.\r\n* Fix `vg augment -B` to not initialize packer object unnecessarily.\r\n* `surject` joins `deconstruct` in supporting [vg subpath naming](https://github.com/vgteam/vg/blob/f8efd32416e973c9c8c8409499ce29e78138b267/src/path.hpp#L49-L57), but path lengths must come from `--ref-paths` in order to be valid in the output header.\r\n* `deconstruct` AT INFO field fixed to have `Number=R` instead of `A`\r\n* `vg mpmap` has improved sensitivity for detecting spliced alignments and ability to use genome-derived splicing statistics for non-humans\r\n* `vg surject -S` no longer crashes if it decides that a deleted/spliced segment is too long to realign.\r\n* `vg autoindex` can handle VCFs that list contigs for which there are no variants\r\n* Giraffe now shuffles tied top read mapping candidates like mpmap and map, to avoid arbitrary biases\r\n* `vg sim` now produces more realistic RNA-seq fragment length distributions.\r\n* `libbdsg` dependency should no longer sometimes fail to build on a clean checkout due to missing `mio/mmap.hpp`\\\r\n* Tail alignments can no longer skip read sequence completely when alignment would be too large\r\n* Giraffe progress reports now include fragment length distribution information\r\n* Giraffe can now find `.giraffe.gbz` GBZ files automatically.\r\n* `vg pack` gets new `-s` option to ignore first and last N bases of reads. `-s 5` works well in practice for SV genotyping.\r\n* `vg call` default parameters re-tuned to work a bit better on complex graphs. An extra filter for completely unsupported breakpoints is added to increase precision.\r\n* `libvgio` now uses a simpler CMake build\r\n* `vg call -e` now works again\r\n* CI testing now uses Toil 5.4.0\r\n* `vg rna` now supports using GBWT haploytypes as reference paths (`--use-hap-ref` option).\r\n* `vg rna` can now create a spliced pangenome graph and pantranscriptome with chopped nodes (`--max-node-length` option).\r\n* Spliced pangenome graphs and pantranscriptomes can be sorted and have their ids compacted in `vg rna` (currently only works for inputs in the PackedGraph format).\r\n* The transcript haplotype info table from `vg rna` no longer contains the \"Reference\" column (is part of the \"Haplotypes\" column now).\r\n* The names for the options `--use-all-paths` and `--add-non-ref-paths` in `vg rna` have been changed (single-letter option the same) and the option `--gbwt-id-interval` has been removed (not relevant anymore).\r\n\r\n### New and Updated Submodules\r\n\r\n* `libbdsg` and `libvgio` have been updated.\r\n\r\nMake sure to `git submodule sync` and `git submodule update --init --recursive` if building from source. ",
        "html_url": "https://github.com/vgteam/vg/releases/tag/v1.35.0",
        "name": "vg 1.35.0 - Ghizzano",
        "release_id": 50343338,
        "tag": "v1.35.0",
        "tarball_url": "https://api.github.com/repos/vgteam/vg/tarball/v1.35.0",
        "type": "Release",
        "url": "https://api.github.com/repos/vgteam/vg/releases/50343338",
        "value": "https://api.github.com/repos/vgteam/vg/releases/50343338",
        "zipball_url": "https://api.github.com/repos/vgteam/vg/zipball/v1.35.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamnovak",
          "type": "User"
        },
        "date_created": "2021-08-16T18:10:09Z",
        "date_published": "2021-08-16T20:32:21Z",
        "description": "**[![Download for Linux](https://raw.githubusercontent.com/vgteam/vg/master/doc/figures/download-linux.png)\r\n](https://github.com/vgteam/vg/releases/download/v1.34.0/vg)**\r\n\r\nDon't forget to mark the static binary executable:\r\n```\r\nchmod +x vg\r\n```\r\n**Docker Image:** `quay.io/vgteam/vg:v1.34.0`\r\n\r\n**Buildable Source Tarball:** [vg-v1.34.0.tar.gz](https://github.com/vgteam/vg/releases/download/v1.34.0/vg-v1.34.0.tar.gz)\r\n\r\nIncludes source for vg and all submodules. **Use this instead of Github's \"Source Code\" downloads**; those will not build as they do not include code for bundled dependencies that the `vg` build process needs.\r\n\r\nThis release includes:\r\n\r\n* Support for the [GBZ format](https://github.com/jltsiren/gbwtgraph/blob/master/SERIALIZATION.md) (GBWT + GBWTGraph):\r\n  * `vg autoindex`: `--workflow giraffe` outputs GBZ instead of GBWT and GBWTGraph.\r\n  * `vg convert`: GBZ -> other graph types.\r\n  * `vg gbwt`: GBWT + GBWTGraph <-> GBZ.\r\n  * `vg giraffe`: GBZ as the default input format for GBWT + GBWTGraph.\r\n  * `vg index`: Graph format for distance index construction.\r\n  * `vg minimizer`: An alternative to GBWT + graph.\r\n  * `vg snarls`: Graph format with options that do not need embedded paths.\r\n* `vg convert` outputs HashGraph instead of VG by default.\r\n* GBWT / GBWTGraph / GCSA2 structures are serialized as bare files for better compatibility with external tools.\r\n* `vg convert -w` can now handle separator tokens in contig names\r\n* Docker base images are now pulled through Google's cache\r\n* `vg giraffe` now uses `IndexRegistry` instead of `IndexManager` and demands that passed file names already exist\r\n* Wiki now includes a tutorial under test for Giraffe\r\n* `vg benchmark` evaluates the minimum distance index\r\n* Improved build out of the box on M1 Macs with Homebrew\r\n* `vg deconstruct` now writes \"Allele Traversals\" (AT field in INFO) for each site. The traversals map the alleles to paths in the graph.\r\n* `IntegratedSnarlFinder` properly generates single-node chains for bridge edges in the Cactus graph.\r\n* Allow seeding path traversals from XG path set even when we are using GBWT input for `vg deconstruct`.\r\n* `vg index`, `vg minimizer`, and `vg snarls` can load GBZ without a distinguishing option\r\n* `vg mpmap` now uses the RNA mapping preset (`--nt-type rna`) by default instead of DNA (`--nt-type dna`)\r\n* Fixed a bug that sometimes caused incomplete multipath alignments from `vg mpmap`\r\n* `IntegratedSnarlFinder` properly tracks whether cycles and bridge edge paths have been reached regardless of orientation\r\n* Minimizer indexes no longer incorrectly cache distances for looping chains, fixing a duplicate-alignment, low-MAPQ bug in Giraffe\r\n* DYNAMIC now has hopscotch-map as a sub-submodule\r\n* `vg autoindex` can create GBZ files for `vg giraffe` using a GFA with W-lines as input\r\n* The speed of `vg mpmap` is more robust to low-quality RNA-seq reads\r\n* Multipath alignments can be viewed in dot format with `vg view -Kd`\r\n* `vg clip` added to remove alt alleles in bed regions or low-path-depth alleles from the graph\r\n\r\n### New and Updated Submodules\r\n\r\n`DYNAMIC`, `gbwt`, `gbwtgraph`, `libvgio`, `libbdsg`, `gssw`, and `sdsl-lite` have been updated.\r\n\r\nMake sure to `git submodule sync` and `git submodule update --init --recursive` if building from source. ",
        "html_url": "https://github.com/vgteam/vg/releases/tag/v1.34.0",
        "name": "vg 1.34.0 - Arguello",
        "release_id": 47934398,
        "tag": "v1.34.0",
        "tarball_url": "https://api.github.com/repos/vgteam/vg/tarball/v1.34.0",
        "type": "Release",
        "url": "https://api.github.com/repos/vgteam/vg/releases/47934398",
        "value": "https://api.github.com/repos/vgteam/vg/releases/47934398",
        "zipball_url": "https://api.github.com/repos/vgteam/vg/zipball/v1.34.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Linux: Install Dependencies",
        "parent_header": [
          "vg",
          "Installation",
          "Building on Linux"
        ],
        "type": "Text_excerpt",
        "value": "    \nThen, install VG's dependencies. You'll need the protobuf and jansson development libraries installed, and to run the tests you will need:\n* `jq`, `bc`, `rs`, and `parallel`\n* `hexdump` and `column` from `bsdmainutils`\n* [`npm` for testing documentation examples](https://github.com/anko/txm)).\n\nOn Ubuntu, you should be able to do:\n\n    make get-deps\n\nIf you get complaints that `sudo` is not found, install it:\n\n    apt update\n    apt install sudo\n\nIf you get a bunch of errors like `E: Unable to locate package build-essential`, make sure your package index files are up to date by running:\n\n    sudo apt update\n    \nOn other distros, or if you do not have root access, you will need to perform the equivalent of:\n\n    sudo apt-get install build-essential git cmake pkg-config libncurses-dev libbz2-dev  \\\n                         protobuf-compiler libprotoc-dev libprotobuf-dev libjansson-dev \\\n                         automake gettext autopoint libtool jq bsdmainutils bc rs parallel \\\n                         npm curl unzip redland-utils librdf-dev bison flex gawk lzma-dev \\\n                         liblzma-dev liblz4-dev libffi-dev libcairo-dev libboost-all-dev \\\n                         libzstd-dev pybind11-dev python3-pybind11\n                         \nNote that **Ubuntu 16.04** does not ship a sufficiently new Protobuf; vg requires **Protobuf 3** which will have to be manually installed.\n\nAt present, you will need GCC version 4.9 or greater, with support for C++14, to compile vg. (Check your version with `gcc --version`.) GCC up to 11.2.0 is supported.\n\nOther libraries may be required. Please report any build difficulties.\n\nNote that a 64-bit OS is required. Ubuntu 20.04 should work.\n"
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Mac: Install Dependencies",
        "parent_header": [
          "vg",
          "Installation",
          "Building on MacOS"
        ],
        "type": "Text_excerpt",
        "value": "VG depends on a number of packages being installed on the system where it is being built. Dependencies can be installed using either [MacPorts](https://www.macports.org/install.php) or [Homebrew](http://brew.sh/).\n"
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Using MacPorts",
        "parent_header": [
          "vg",
          "Installation",
          "Building on MacOS",
          "Mac: Install Dependencies"
        ],
        "type": "Text_excerpt",
        "value": "You can use MacPorts to install VG's dependencies:\n\n    sudo port install libtool protobuf3-cpp jansson jq cmake pkgconfig autoconf automake libtool coreutils samtools redland bison gperftools md5sha1sum rasqal gmake autogen cairo libomp boost zstd pybind11\n    \n"
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Using Homebrew",
        "parent_header": [
          "vg",
          "Installation",
          "Building on MacOS",
          "Mac: Install Dependencies"
        ],
        "type": "Text_excerpt",
        "value": "Homebrew provides another package management solution for OSX, and may be preferable to some users over MacPorts. VG ships a `Brewfile` describing its Homebrew dependencies, so from the root vg directory, you can install dependencies, and expose them to vg, like this:\n\n    # Install all the dependencies in the Brewfile\n    brew bundle\n    "
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Linux: Run",
        "parent_header": [
          "vg",
          "Installation",
          "Building on Linux"
        ],
        "type": "Text_excerpt",
        "value": "Once vg is built, the binary will be at `bin/vg` inside the vg repository directory. You can run it with:\n\n```\n./bin/vg\n```\n\nYou can also add its directory to your `PATH` enviornment variable, so that you can invoke `vg` from any directory. To do that on Bash, use this command from the vg repository directory:\n\n```\necho 'export PATH=\"${PATH}:'\"$(pwd)\"'/bin\"' >>~/.bashrc\n```\n\nThen close your terminal and open a new one. Run `vg` to make sure it worked.\n\nIf it did not work, make sure that you have a `.bash_profile` file in your home directory that will run your `.bashrc`:\n```\nif [ -f ~/.bashrc ]; then\n   source ~/.bashrc\nfi\n```\n"
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Mac: Run",
        "parent_header": [
          "vg",
          "Installation",
          "Building on MacOS"
        ],
        "type": "Text_excerpt",
        "value": "Once vg is built, the binary will be at `bin/vg` inside the vg repository directory. You can run it with:\n\n```\n./bin/vg\n```\n\nYou can also add its directory to your `PATH` enviornment variable, so that you can invoke `vg` from any directory. To do that on the default `zsh` Mac shell, use this command from the vg repository directory:\n\n```\necho 'export PATH=\"${PATH}:'\"$(pwd)\"'/bin\"' >>~/.zshrc\n```\n\nThen close your terminal and open a new one. Run `vg` to make sure it worked.\n"
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "contact",
    "contributors",
    "faq",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 08:40:19",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1099
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Support",
        "parent_header": [
          "vg"
        ],
        "type": "Text_excerpt",
        "value": "We maintain a support forum on biostars: https://www.biostars.org/tag/vg/\n"
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Calling variants using read support",
        "parent_header": [
          "vg",
          "Usage",
          "Variant Calling"
        ],
        "type": "Text_excerpt",
        "value": "The following examples show how to generate a VCF with vg using read support.  They depend on output from the Mapping and Augmentation examples above.  Small variants and SVs can be called using the same approach.  **Currently, it is more accuracte for SVs**.  \n\nCall only variants that are present in the graph:\n\n\n```sh\n# Compute the read support from the gam\n# -Q 5: ignore mapping and base qualitiy < 5\nvg pack -x x.xg -g aln.gam -Q 5  -o aln.pack\n\n# Generate a VCF from the support.  \nvg call x.xg -k aln.pack > graph_calls.vcf\n```\n\nBy default, `vg call` omits `0/0` variants and tries to normalize alleles to make the VCF more compact.  Both these steps can make it difficult to compare the outputs from different samples as the VCFs will have different coordinates even though they were created using the same graph.  The `-a` option addresses this by calling every snarl using the same coordinates and including reference calls.  Outputs for different samples can be combined with `bcftools merge -m all`.   \n\n```\nvg call x.xg -k aln.pack -a > snarl_genotypes.vcf\n```\n\nIn order to also consider *novel* variants from the reads, use the augmented graph and gam (as created in the \"Augmentation\" example using `vg augment -A`):\n\n> **Warning**\n> Using `vg augment` for variant calling remains very experimental. It is not at all recommended for structural variant calling, and even for small variants, you will often get much more accurate results (at least on human) by projecting your alignment to `BAM` and running a linear variant caller such as DeepVariant. \n\n\n```sh\n# Index our augmented graph\nvg index aug.vg -x aug.xg\n\n# Compute the read support from the augmented gam (ignoring qualitiy < 5, and 1st and last 5bp of each read)\nvg pack -x aug.xg -g aug.gam -Q 5 -s 5 -o aln_aug.pack\n\n# Generate a VCF from the support\nvg call aug.xg -k aln_aug.pack > calls.vcf\n```\n\nA similar process can by used to *genotype* known variants from a VCF. To do this, the graph must be constructed from the VCF with `vg construct -a` (graphs from other sources such as `vg autoindex` and `Minigraph-Cactus` cannot be used):\n\n\n```sh\n# Re-construct the same graph as before but with `-a`\nvg construct -r small/x.fa -v small/x.vcf.gz -a > xa.vg\n\n# Index the graph with `-L' to preserve alt paths in the xg\nvg index xa.vg -x xa.xg -L\n\n# Compute the support (we could also reuse aln.pack from above)\nvg pack -x xa.xg -g aln.gam -o aln.pack\n\n# Genotype the VCF (use -v)\nvg call xa.xg -k aln.pack -v small/x.vcf.gz > genotypes.vcf\n```\n\nPre-filtering the GAM before computing support can improve precision of SNP calling:\n\n\n```sh\n# filter secondary and ambiguous read mappings out of the gam\nvg filter aln.gam -r 0.90 -fu -m 1 -q 15 -D 999 -x x.xg > aln.filtered.gam\n\n# then compute the support from aln.filtered.gam instead of aln.gam in above etc.\nvg pack -x xa.xg -g aln.filtered.gam -o aln.pack\nvg call xa.xg -k aln.pack -v small/x.vcf.gz > genotypes.vcf\n```\n\nFor larger graphs, it is recommended to compute snarls separately:\n\n\n```sh\nvg snarls x.xg > x.snarls\n\n# load snarls from a file instead of computing on the fly\nvg call x.xg -k aln.pack -r x.snarls > calls.vcf\n```\n\nNote: `vg augment`, `vg pack`, `vg call` and `vg snarls` can now all be run on directly on any graph format (ex '.gbz', '.gfa', `.vg`, `.xg` (except `augment`) or anything output by `vg convert`).  Operating on `.vg` or '.gfa' uses the most memory and is not recommended for large graphs.  The output of `vg pack` can only be read in conjunction with the same graph used to create it, so `vg pack x.vg -g aln.gam -o x.pack` then `vg call x.xg -k x.pack` will not work.\n"
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "From VCF",
        "parent_header": [
          "vg",
          "Usage",
          "Variation graph construction"
        ],
        "type": "Text_excerpt",
        "value": "> **Note**\n> See the `vg autoindex` examples below for how to use that tool in place of `vg construct` to build and index graphs in a single step.\n\nOne way to build a graph with `vg` is to `construct` it from variant calls using a reference FASTA file and VCF file. If you're working in vg's `test/` directory:\n\n\n```sh\nvg construct -r small/x.fa -v small/x.vcf.gz >x.vg\n```\n\nNote that to build a graph, an index of the VCF file is required. The VCF index file can be generated using the `tabix` command provided by SAMtools (e.g. `tabix -p vcf x.vcf.gz` on the command line).\n"
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "From Assemblies",
        "parent_header": [
          "vg",
          "Usage",
          "Variation graph construction"
        ],
        "type": "Text_excerpt",
        "value": "You can also build a graph (and indexes for mapping with vg) from a set of genome assemblies (FASTA), as opposed to variant calls as described above, using [Minigraph-Cactus](https://github.com/ComparativeGenomicsToolkit/cactus/blob/master/doc/pangenome.md).\n"
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Importing",
        "parent_header": [
          "vg",
          "Usage",
          "Importing and exporting different graph formats"
        ],
        "type": "Text_excerpt",
        "value": "`vg` supports [many formats](https://github.com/vgteam/vg/wiki/File-Formats), the three most important are:\n\n* `PackedGraph (.vg)` : This is `vg's` native format. It supports edits of all kinds (to topology and paths), but can be inefficient at large scales, especially with many paths.\n* `GFA (.gfa)` : [GFA](https://github.com/GFA-spec/GFA-spec) is standard text-based format and usually the best way to exchange graphs between `vg` and other pangenome tools. `vg` can also operate on (**uncompressed**) GFA files directly, by way of using a `PackedGraph` representation in memory (and therefore shares that format's scaling concerns and edit-ability).\n* `GBZ (.gbz)` : [GBZ](https://github.com/jltsiren/gbwtgraph/blob/master/SERIALIZATION.md) is a highly-compressed format that uses much less space to store paths than the above formats, but at the cost of not allowing general edits to the graph.\n\nYou can query the format of any graph using `vg stats -F`.\n\n#### Importing\n\nIn general, you will build and index `vg` graphs using `vg autoindex` (from GFA or VCF) or `Minigraph-Cactus` (FASTAs). You can also import `GFA` files from other tools such as [ODGI](https://github.com/pangenome/odgi) and [PGGB](https://github.com/pangenome/pggb) using `vg convert -g`.\n"
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Exporting",
        "parent_header": [
          "vg",
          "Usage",
          "Importing and exporting different graph formats"
        ],
        "type": "Text_excerpt",
        "value": "You can convert any graph to `GFA` using `vg convert -f`.  By default, `vg` uses [GFA v1.1](https://github.com/GFA-spec/GFA-spec/blob/master/GFA1.md#w-walk-line-since-v11) where paths are represented as W-lines. To use P-lines instead (GFA v1.0), use `vg convert -fW`.\n"
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Path Types",
        "parent_header": [
          "vg",
          "Usage",
          "Importing and exporting different graph formats"
        ],
        "type": "Text_excerpt",
        "value": "The `GBZ` format makes the distinction between `REFERENCE` and `HAPLOTYPE` paths. `REFERENCE` paths can be used as coordinate systems but are more expensive to store. `HAPLOTYPE` paths are highly compressed but cannot be used for position lookups. In the [HPRC](https://github.com/human-pangenomics/hpp_pangenome_resources/) graphs for example, contigs from `GRCh38` and `CHM13(T2T)` are `REFERENCE` paths and all other samples `HAPLOTYPE` paths.\n\nThe distinction between `REFERENCE` and `HAPLOTYPE` paths is carried over into the other formats such as `.vg` and `.gfa` to facilitate conversion and inter-operation. In `.gfa`, `REFERENCE` paths are P-Lines, or W-lines whose sample names are flagged in the header. W-lines whose names are not flagged in the header are `HAPLOTYPE` paths. In `.vg` they are denoted using a naming convention.  \n\nSee the [Path Metadata WIKI](https://github.com/vgteam/vg/wiki/Path-Metadata-Model) for more details.\n\n> **Warning**\n> `GBZ` is the only format that supports efficient loading large numbers of `HAPLOTYPE` paths in `vg`.  You may run into issues trying to load whole-genome graphs with thousands of `HAPLOTYPE` from `.vg` or `.gfa` files.  `vg convert -H` can be used to drop `HAPLOTYPE` paths, allowing the graph to be more easily loaded in other formats. \n"
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Viewing",
        "parent_header": [
          "vg",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "> **Note**\n> It is best to use the newer `vg convert` tool (described above) for GFA conversion\n\n`vg view` provides a way to convert the graph into various formats:\n\n\n```sh\n# GFA output\nvg view x.vg >x.gfa\n\n# dot output suitable for graphviz\nvg view -d x.vg >x.dot\n\n# And if you have a GAM file\ncp small/x-s1337-n1.gam x.gam\n\n# json version of binary alignments\nvg view -a x.gam >x.json\n```\n"
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Mapping",
        "parent_header": [
          "vg",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "If you have more than one sequence, or you are working on a large graph, you will want to map rather than merely aligning.\n\nThere are multiple read mappers in `vg`:\n\n* `vg giraffe` is designed to be fast for highly accurate short reads, against graphs with haplotype information.\n* `vg map` is a general-purpose read mapper.\n* `vg mpmap` does \"multi-path\" mapping, to allow describing local alignment uncertainty. [This is useful for transcriptomics.](#Transcriptomic-analysis)\n"
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Mapping with `vg giraffe`",
        "parent_header": [
          "vg",
          "Usage",
          "Mapping"
        ],
        "type": "Text_excerpt",
        "value": "To use `vg giraffe` to map reads, you will first need to prepare indexes. This is best done using `vg autoindex`. In order to get `vg autoindex` to use haplotype information from a VCF file, you can give it the VCF and the associated linear reference directly.\n\n\n```sh\n# construct the graph and indexes (paths below assume running from `vg/test` directory)\nvg autoindex --workflow giraffe -r small/x.fa -v small/x.vcf.gz -p x\n\n# simulate a bunch of 150bp reads from the graph, into a GAM file of reads aligned to a graph\nvg sim -n 1000 -l 150 -x x.giraffe.gbz -a > x.sim.gam\n# now re-map these reads against the graph, and get BAM output in linear space\n# FASTQ input uses -f instead of -G.\nvg giraffe -Z x.giraffe.gbz -G x.sim.gam -o BAM > aln.bam\n```\n\n[More information on using `vg girafe` can be found on the `vg` wiki.](https://github.com/vgteam/vg/wiki/Mapping-short-reads-with-Giraffe)\n"
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Mapping with `vg map`",
        "parent_header": [
          "vg",
          "Usage",
          "Mapping"
        ],
        "type": "Text_excerpt",
        "value": "If your graph is large, you want to use `vg index` to store the graph and `vg map` to align reads. `vg map` implements a kmer based seed and extend alignment model that is similar to that used in aligners like novoalign or MOSAIK. First an on-disk index is built with `vg index` which includes the graph itself and kmers of a particular size. When mapping, any kmer size shorter than that used in the index can be employed, and by default the mapper will decrease the kmer size to increase sensitivity when alignment at a particular _k_ fails.\n\n\n```sh\n# construct the graph (paths below assume running from `vg/test` directory)\nvg construct -r small/x.fa -v small/x.vcf.gz > x.vg\n\n# store the graph in the xg/gcsa index pair\nvg index -x x.xg -g x.gcsa -k 16 x.vg\n\n# align a read to the indexed version of the graph\n# note that the graph file is not opened, but x.vg.index is assumed\nvg map -s CTACTGACAGCAGAAGTTTGCTGTGAAGATTAAATTAGGTGATGCTTG -x x.xg -g x.gcsa > read.gam\n\n# simulate a bunch of 150bp reads from the graph, one per line\nvg sim -n 1000 -l 150 -x x.xg > x.sim.txt\n# now map these reads against the graph to get a GAM\nvg map -T x.sim.txt -x x.xg -g x.gcsa > aln.gam\n\n# surject the alignments back into the reference space of sequence \"x\", yielding a BAM file\nvg surject -x x.xg -b aln.gam > aln.bam\n\n# or alternatively, surject them to BAM in the call to map\nvg sim -n 1000 -l 150 -x x.xg > x.sim.txt\nvg map -T x.sim.txt -x x.xg -g x.gcsa --surject-to bam > aln.bam\n```\n"
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Augmentation",
        "parent_header": [
          "vg",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Variation from alignments can be embedded back into the graph.  This process is called augmentation and can be used for *de novo* variant calling, for example (see below).\n\n> **Warning**\n> Using `vg augment` for variant calling remains very experimental. It is not at all recommended for structural variant calling, and even for small variants, you will often get much more accurate results (at least on human) by projecting your alignment to `BAM` and running a linear variant caller such as DeepVariant. \n\n\n```sh\n# augment the graph with all variation from the GAM except that implied by soft clips, saving to aug.vg.  aug.gam contains the same reads as aln.gam but mapped to aug.vg\nvg augment x.vg aln.gam -A aug.gam > aug.vg\n\n# augment the graph with all variation from the GAM, saving each mapping as a path in the graph.\n# softclips of alignment paths are preserved (`-S`).\n# Note, this can be much less efficient than the above example if there are many alignments in the GAM\nvg augment x.vg aln.gam -i -S > aug_with_paths.vg\n```\n"
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Variant Calling",
        "parent_header": [
          "vg",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "> **Note**\n> More information can be found in the [WIKI](https://github.com/vgteam/vg/wiki/SV-Genotyping-and-variant-calling).\n"
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Calling variants from paths in the graph",
        "parent_header": [
          "vg",
          "Usage",
          "Variant Calling"
        ],
        "type": "Text_excerpt",
        "value": "Infer variants from from alignments implied by paths in the graph.  This can be used, for example, to call SVs directly from a variation graph that was constructed from a multiple alignment of different assemblies:\n\n\n```sh\n# create a graph from a multiple alignment of HLA haplotypes (from vg/test directory)\nvg msga -f GRCh38_alts/FASTA/HLA/V-352962.fa -t 1 -k 16 | vg mod -U 10 - | vg mod -c - > hla.vg\n\n# index it\nvg index hla.vg -x hla.xg\n\n# generate a VCF using gi|568815592:29791752-29792749 as the reference contig.  The other paths will be considered as haploid samples\nvg deconstruct hla.xg -e -p \"gi|568815592:29791752-29792749\" > hla_variants.vcf\n```\n\nHaplotype paths from `.gbz` or `.gbwt` indexes input can be considered using `-z` and `-g', respectively.\n\nAs with `vg call`, it is best to compute snarls separately and pass them in with `-r` when working with large graphs.\n"
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Transcriptomic analysis",
        "parent_header": [
          "vg",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "`vg` has a number of tools to support transcriptomic analyses with spliced graphs (i.e. graphs that have annotated splice junctions added as edges into the graph). These edges can be added into an existing graph using `vg rna`. We can then perform splice-aware mapping to these graphs using `vg mpmap`. `vg` developers have also made a tool for haplotype-aware transcript quantification based on these tools in [`rpvg`](https://github.com/jonassibbesen/rpvg). The easiest way to start this pipeline is to use the `vg autoindex` subcommand to make indexes for `vg mpmap`. `vg autoindex` creates indexes for mapping from common interchange formats like FASTA, VCF, and GTF. \n\nMore information is available in the [wiki page on transcriptomics](https://github.com/vgteam/vg/wiki/Transcriptomic-analyses).\n\nWorking from the `test/` directory the following example shows how to create a spliced pangenome graph and indexes using `vg autoindex` with 4 threads:\n\n\n```sh\n# Create spliced pangenome graph and indexes for vg mpmap\nvg autoindex --workflow mpmap -t 4 --prefix vg_rna --ref-fasta small/x.fa --vcf small/x.vcf.gz --tx-gff small/x.gtf\n```\n\nRNA-seq reads can be mapped to the spliced pangenome graph using `vg mpmap` with 4 threads:\n\n\n```sh\n# Map simulated RNA-seq reads using vg mpmap\nvg mpmap -n rna -t 4 -x vg_rna.spliced.xg -g vg_rna.spliced.gcsa -d vg_rna.spliced.dist -f small/x_rna_1.fq -f small/x_rna_2.fq > mpmap.gamp\n```\n\nThis will produce alignments in the multipath format. For more information on the multipath alignment format and `vg mpmap` see [wiki page on mpmap](https://github.com/vgteam/vg/wiki/Multipath-alignments-and-vg-mpmap). Running the two commands on the small example data using 4 threads should on most machines take less than a minute.  \n"
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Alignment",
        "parent_header": [
          "vg",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "If you have a small graph, you can align a sequence to the whole graph, using a full-length partial order alignment:\n\n\n```sh\nvg align -s CTACTGACAGCAGAAGTTTGCTGTGAAGATTAAATTAGGTGATGCTTG x.vg\n```\n\nNote that you don't have to store the graph on disk at all, you can simply pipe it into the local aligner:\n\n\n```sh\nvg construct -r small/x.fa -v small/x.vcf.gz | vg align -s CTACTGACAGCAGAAGTTTGCTGTGAAGATTAAATTAGGTGATGCTTG -\n```\n\nMost commands allow the streaming of graphs into and out of `vg`.\n"
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Command line interface",
        "parent_header": [
          "vg",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "A variety of commands are available:\n\n- *autoindex*: construct graphs and indexes for other tools from common interchange file formats\n- *construct*: graph construction\n- *index*: index features of the graph in a disk-backed key/value store\n- *map*: mapp reads to a graph\n- *giraffe*: fast, haplotype-based mapping of reads to a graph\n- *mpmap*: short read mapping and multipath alignment (optionally spliced)\n- *surject*: project graph alignments onto a linear reference\n- *augment*: adds variation from aligned reads into the graph\n- *call*: call variants from an augmented graph\n- *rna*: construct splicing graphs and pantranscriptomes\n- *convert*: convert graph and alignment formats\n- *combine*: combine graphs\n- *chunk*: extract or break into subgraphs\n- *ids*: node ID manipulation\n- *sim*: simulate reads by walking paths in the graph\n- *prune*: prune graphs to restrict their path complexity\n- *snarls*: find bubble-like motifs in a graph\n- *mod*: various graph transformations\n- *filter*: filter reads out of an alignment\n- *deconstruct*: create a VCF from variation in the graph\n- *paths*: traverse paths in the graph\n- *stats*: metrics describing graph properties\n"
      },
      "source": "https://raw.githubusercontent.com/vgteam/vg/master/README.md",
      "technique": "header_analysis"
    }
  ]
}