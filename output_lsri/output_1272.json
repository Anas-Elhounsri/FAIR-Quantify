{
  "application_domain": [
    {
      "confidence": 10.53,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/redsnic/WGA-LP"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-05-14T14:01:35Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-04-30T09:00:41Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A pipeline for whole genome assembly "
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9335214763953872,
      "result": {
        "original_header": "WGA-LP",
        "type": "Text_excerpt",
        "value": "WGA-LP is a pipeline for whole genome assembly that \nsimplifies the usage of different tools and helps the \nuser in evaluating his results. \nThis pipeline also includes tools to expand the analysis\nby including interfaces to other software. \nWGA-LP was built to operate directly from raw `.fastq` files \nand was originally used to analyze the genome \nof a set Lactobacilli (hence the L in the acronym) \nMore information on the pipeline are available on the [WGA-LP preprint](https://www.biorxiv.org/content/10.1101/2021.07.31.454518v1) that includes a more detailed guide in its [supplementary materials](https://www.biorxiv.org/content/biorxiv/early/2021/08/03/2021.07.31.454518/DC1/embed/media-1.pdf?download=true). In such guide it is shown how to decontaminate and assemble the reads included in the BioProject [PRJNA749304](https://www.ncbi.nlm.nih.gov/bioproject/?term=prjna749304).\n \n"
      },
      "source": "https://raw.githubusercontent.com/redsnic/WGA-LP/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9879687649895608,
      "result": {
        "original_header": "Pipeline external tools",
        "type": "Text_excerpt",
        "value": "This pipeline relies on many external tools that provide some of the core functionalities of WGA-LP: \n* **bamtools**: manage `.bam` files\n* **bazam**: convert `.bam` files back to `.fastq` \n* **bracken**: postprocess kraken2 reports to find contamination\n* **BWA**: align `.fastq` files to a reference genome\n* **FastQC**: evaluate `.fastq` quality\n* **kraken2**: evaluate possible contaminations of the sequenced sample (minikraken db is required)\n* **mauve**: program for multiple alignment, used to reorder contigs\n* **minia**: a simple assembler for bacterial genomes\n* **prokka**: annotate assembled genomes from bacteria \n* **samtools** and **plot-bamstats**: manage `.sam` and `.bam` files, create reports\n* **SPAdes**: a more complex assembler for bacterial genomes\n* **TrimmomaticPE**: tool to clean `.fastq` reads\n* **checkM**, **merqury** and **quast**: tools to evaluate WGA quality \n"
      },
      "source": "https://raw.githubusercontent.com/redsnic/WGA-LP/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9910268572301034,
      "result": {
        "original_header": "Re-running the pipeline",
        "type": "Text_excerpt",
        "value": "WGA-LP pipeline is organized to keep track of the analysis in order to avoid running successful steps multiple times.\nThe execution is divided in sub-programs that are composed of multiple steps. To rerun a specific step it is necessary \nto delete its folder from the output directory (of a specific sample).  \n"
      },
      "source": "https://raw.githubusercontent.com/redsnic/WGA-LP/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8991010377187765,
      "result": {
        "original_header": "Launching the execution",
        "type": "Text_excerpt",
        "value": "to run the pipeline, execute `wgalp` with `python3`.\nThis will show a list of all the possible tools available \nfor the analysis. Executing `wgalp <program_name>` will \nprovide further information on the specific sub program and\nits usage. \nFor reference, this is the help message of wgalp:\n```\nThis programs is an helper to run the sub procedures of wgalp\nusage: wgalp <program> [args]\n\nthe following is a list of all the available programs:\n        trim : trim reads and/or assess contaminations with kraken2\n        decontaminate : remove reads mapping to a contaminant non ambiguosly\n        assemble : assemble reads into scaffolds or contigs\n        check-coverage : compute coverage statistics of an assembled genome\n        view-nodes : compute coverage plots for specific nodes of a whole genome assembly       reorder : reorder a whole genome assembly using a reference genome\n        filter-assembly : select contigs by ID\n                          (to be used with the webapp: https://redsnic.shinyapps.io/ContigCoverageVisualizer/)\n        annotate : run prokka annotation with NCBI standard\n        plasmid : extract putative plasmids using recycler\n        quality : evaluate assembly quality using checkM, merqury and quast\n        understand-origin : runs kraken2 in selection mode\n        kdb-load : pre-load kraken2 database in RAM, so that you dont have to load it multiple times (use --memory-mapped option when possible)\n        kdb-unload : remove loaded kraken2 db from RAM\n        filter-fastq : select reads from a fastq file\n        help : show this message (equivalent to --help or -h)\n\nRun wgalp <program> --help for specific information about the selected program.\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/redsnic/WGA-LP/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/redsnic/WGA-LP/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/redsnic/WGA-LP/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "redsnic/WGA-LP"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "WGA-LP"
      },
      "source": "https://raw.githubusercontent.com/redsnic/WGA-LP/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/redsnic/WGA-LP/main/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/redsnic/WGA-LP/main/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/redsnic/WGA-LP/main/configure.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/redsnic/WGA-LP/main/docker_bashrc.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/redsnic/WGA-LP/main/fetch_example_data.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/redsnic/WGA-LP/main/other_scripts/contamination_level_simulation.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/redsnic/WGA-LP/main/other_scripts/install_merqury.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/redsnic/WGA-LP/main/other_scripts/filter_pangenome.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/redsnic/WGA-LP/main/other_scripts/prepare_simulations.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "WGA-LP"
        ],
        "type": "Text_excerpt",
        "value": "The best way to install WGA-LP is through [docker](https://www.docker.com/).\nThe **wgalp image** is available [here](https://hub.docker.com/repository/docker/redsnic/wgalp) and includes all the \nsoftware and databases required for the analysis. \n\nThe image is intended to be used with `docker exec` and\nprovides a bash shell ready for use. Further information \nis available on the docker hub page of wgalp. \n"
      },
      "source": "https://raw.githubusercontent.com/redsnic/WGA-LP/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Manual installation",
        "parent_header": [
          "WGA-LP"
        ],
        "type": "Text_excerpt",
        "value": "If you, for some reason, want to install all the dependencies for WGA-LP \nmanually, avoiding docker, please refer to the commands \nin the Dockerfile, as those are the instructions to install \nWGA-LP on Ubuntu 18.04 LTS. WGA-LP can only be installed on\n**Linux** machines and with the **bash shell** available.\n"
      },
      "source": "https://raw.githubusercontent.com/redsnic/WGA-LP/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Updating and installing WGA-LP",
        "parent_header": [
          "WGA-LP",
          "Manual installation"
        ],
        "type": "Text_excerpt",
        "value": "To install the python package associated to the pipeline, run the following commands:\n\n```\n# clone this Git repository:\ngit clone https://github.com/redsnic/WGA-LP.git\n# move in the WGA-LP folder:\ncd WGA-LP\n# install the package using pip3\npip3 install . \n```\n\nto just upgrade to the last version do (in WGA-LP's directory):\n\n```\ngit pull; pip3 instal .;\n```\n"
      },
      "source": "https://raw.githubusercontent.com/redsnic/WGA-LP/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9531342865449595,
      "result": {
        "original_header": "Pipeline external tools",
        "type": "Text_excerpt",
        "value": "All these tools are freely available for installation. \n \n"
      },
      "source": "https://raw.githubusercontent.com/redsnic/WGA-LP/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8523721924872777,
      "result": {
        "original_header": "Re-running the pipeline",
        "type": "Text_excerpt",
        "value": "For example to re run trimming, delete `TrimmomaticPE` folder file inside the output directory of the choosen sample.\n \n"
      },
      "source": "https://raw.githubusercontent.com/redsnic/WGA-LP/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8874255373296968,
      "result": {
        "original_header": "Re-running the pipeline",
        "type": "Text_excerpt",
        "value": "For example to re run trimming, delete `TrimmomaticPE` folder file inside the output directory of the choosen sample.\n \n"
      },
      "source": "https://raw.githubusercontent.com/redsnic/WGA-LP/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/redsnic/WGA-LP/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021 redsnic\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/redsnic/WGA-LP/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "WGA-LP"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "redsnic"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 129117,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 13920,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 7038,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 5134,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/redsnic/WGA-LP/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 04:25:34",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 16
      },
      "technique": "GitHub_API"
    }
  ]
}