{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/hguo/ftk"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact",
        "parent_header": [
          "FTK: The Feature Tracking Kit"
        ],
        "type": "Text_excerpt",
        "value": "* [Hanqi Guo](http://www.mcs.anl.gov/~hguo/), [hguo@anl.gov](mailto:hguo@anl.gov)\n"
      },
      "source": "https://raw.githubusercontent.com/hguo/ftk/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-03-25T14:31:06Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-16T01:14:03Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "FTK: The Feature Tracking Kit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.967566191919083,
      "result": {
        "original_header": "FTK: The Feature Tracking Kit",
        "type": "Text_excerpt",
        "value": "FTK is a library that scales, simplifies, and delivers feature tracking algorithms for scientific datasets.  You may use FTK as ParaView plugins, Python bindings, or a command-line interface.   See [arXiv:2011.08697](https://arxiv.org/abs/2011.08697) for more details on our feature tracking algorithms. \n"
      },
      "source": "https://raw.githubusercontent.com/hguo/ftk/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8758556948132906,
      "result": {
        "original_header": "Building ParaView plugins",
        "type": "Text_excerpt",
        "value": "If built successfully, you will see the plugins binary as `lib/paraview-5.8/plugins/FTK/FTK.so`.  Open the \"Plugin Manager\" in ParaView, and load this binary with \"Load New...\" button, and then select and load FTK in the list.  To check if ParaView plugins are correctly built by reproducing the results in the above figure, use \"Sources-->FTK-->SpiralWoven2DSource\", \"Filters-->FTK-->CriticalPointTracker2D\",followed by the \"Tube\" filter in ParaView.\n \n"
      },
      "source": "https://raw.githubusercontent.com/hguo/ftk/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9922618443014115,
      "result": {
        "original_header": "Using ParaView plugins",
        "type": "Text_excerpt",
        "value": "We demonstrate the use the 2D critical point tracking filter (`vtkCriticalPoint2DTracker`) with a dataset.  The input of this filter must be a 3D volumetric data that stacks 2D time-varying scalar fields in the Z direction.  In this demo, we first add a synthetic 3D volume data by using Sources / FTK / Spiral2DSource.  We then track the trajectories of 2D critical points with Filters / FTK / CriticalPoint2DTracker.  The output trajectires can be visualized as tubes and color-coded by their types, scalar values, or IDs.  In this demo, the time-varying scalar field is defined in closed form:  \nwhere $x$ and $y$ are 2D coordinates and $t$ is time.  We discretize the $x,y$ domain into a $128\\times 128$ regular grid and the time domain into 10 timesteps.  Local maximum are defined as the loci of points that $(\\frac{\\partial f}{\\partial x}, \\frac{\\partial f}{\\partial x})=0$ and both eigenvalues of the Hessian of $f$ (in terms of $x$ and $y$) are negative.  We use a sweep-and-trace algorithm to first localize local maximum and trace the maximum over space-time.  We first mesh the scalar field with a 3D regular simplex mesh and check every 2-elements (faces) meets the criteria.  We then do the connected component labeling; two faces are connected if each of them has a local maxima and share the same 3-element (tetrahedra).  The trajectories are then constructured from the connected components.  \n \n"
      },
      "source": "https://raw.githubusercontent.com/hguo/ftk/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9607858099181905,
      "result": {
        "original_header": "FTK for Python (PyFTK)",
        "type": "Text_excerpt",
        "value": "You can install PyFTK with `pip`.  The only dependency in the current release is `numpy`.  If you would like to build PyFTK from source and use advanced build options, see [this page](docs/install.md).\n```bash\n$ pip3 install pyftk\n```\nPyFTK provides synthetic data generators (`pyftk.synthesizers`), feature extractors (`pyftk.extractors`), and feature trackers (`pyftk.trackers`).  Currently, PyFTK only supports critical points.  The following is an example of tracking critical points in a synthetic spiral woven data:\n```python\n>>> import pyftk\n>>> data = pyftk.synthesizers.spiral_woven(10, 10, 20) # generate synthetic spiral woven data (width=10, height=10, and 20 timesteps).  The shape of data is (1, 10, 10, 20)\n>>> result = pyftk.trackers.track_critical_points_2d_scalar(data) # track critical points in a scalar field\n>>> print(result)\n```\nThe results are trajectories organized in a list: \n```\n[{'length': 9, 'trace': [{'x': 2.275077079338536, 'y': 2.0, 't': 2.843946435964648, 'type': 'min', 'scalar': -0.7349697808320285}, {'x': 2.3009922790096073, 'y': 2.057205556154771, 't': 3.0, 'type': 'min', 'scalar': -0.7126261556354363}, {'x': 2.316376550504984, 'y': 2.0789601019629704, 't': 3.0789601019629704, 'type': 'min', 'scalar': -0.6994583185227987}, {'x': 2.3396684290296013, 'y': 2.109042720626548, 't': 3.339668429029601, 'type': 'min', 'scalar': -0.6203974444741183}, ...\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/hguo/ftk/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.997527776768868,
      "result": {
        "original_header": "FTK library components",
        "type": "Text_excerpt",
        "value": "* Hypermesh: data structures for high-dimensional meshes and mesh elements including *n*-simplices, *n*-cubes, and *n*-prisms; utilities to generalize given 2D/3D structured/unstructured meshes into 3D/4D spacetime meshes \n* Numeric: root-find algorithms for inverse interpolations and parallel vector operators in *n*-simplices, *n*-cubes, and simplex-prisms; lightweight linear algebra utilities to support root-finding\n* CCL: connected component labeling algorithm for building feature tracking algorithms\n* Geometry: utilities to transform connect components to geometry for visualization and analysis\n* Tracking graph: data structures to record births, deaths, merges, and splits of features; visualization algorithms for tracking graphs\n \n"
      },
      "source": "https://raw.githubusercontent.com/hguo/ftk/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9747449280511431,
      "result": {
        "original_header": "Publications",
        "type": "Text_excerpt",
        "value": "* Hanqi Guo, David Lenz, Jiayi Xu, Xin Liang, Wenbin He, Iulian R. Grindeanu, Han-Wei Shen, Tom Peterka, Todd Munson, and Ian Foster, \"FTK: A Simplicial Spacetime Meshing Framework for Robust and Scalable Feature Tracking.\" IEEE Transactions on Visualization and Computer Graphics, 27(8):3463-3480, 2021. [arXiv:2011.08697](https://arxiv.org/abs/2011.08697) [cs.GR] \n* Jiayi Xu, Hanqi Guo, Han-Wei Shen, Mukund Raj, Xueqiao Xu, Xueyun Wang, Zhehui Wang, and Tom Peterka, \"Asynchronous and Load-Balanced Union-Find for Distributed and Parallel Scientific Data Visualization and Analysis.\" IEEE Transactions on Visualization and Computer Graphics (Proc. IEEE PacificVis 2021), 27(6):2808-2820, 2021. [arXiv:2003.02351](https://arxiv.org/abs/2003.02351) [cs.DC]\n \n"
      },
      "source": "https://raw.githubusercontent.com/hguo/ftk/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/hguo/ftk/tree/master/docs"
      },
      "technique": "file_exploration"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/hguo/ftk/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 8
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/hguo/ftk/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "hguo/ftk"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "FTK: The Feature Tracking Kit"
      },
      "source": "https://raw.githubusercontent.com/hguo/ftk/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hguo/ftk/master/docs/images/critical_point_tracking_2d_paraview.png"
      },
      "source": "https://raw.githubusercontent.com/hguo/ftk/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hguo/ftk/master/./docs/images/regular_simplex_subdivision.svg"
      },
      "source": "https://raw.githubusercontent.com/hguo/ftk/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# FTK Installation\n\n## Spack install\n\nOne can install FTK through [spack](https://spack.io/) (we recommend to use the latest version of spack on the develop branch):  \n\n```bash\n$ spack install ftk\n$ spack load ftk\n$ ftk\nUsage:\n  ftk [OPTION...]\n  -f, --feature arg             Feature type: critical_point, isosurface,\n  .....\n```\n\nTo build FTK's advanced features, one can build and install FTK with various optional dependencies including ADIOS2, CUDA, MPI, NetCDF, and VTK; use the `master` branch for the latest features, for example:\n\n```bash\n$ spack install ftk+vtk+netcdf+mpi+cuda+adios2@master\n```\n\nSee `spack info ftk` for more details.\n\n## Pip install (Python bindings only)\n\nOne can install PyFTK through PyPI: \n\n```bash\n$ pip3 install pyftk\n```\n\n## Build and install FTK from source\n\n**Important note:** If you change CMake build options, e.g. `FTK_USE_HDF5`, we recommend to reconfigure with CMake in an empty build directory.  If you have previously installed FTK to a system directory e.g. `/usr/local` , it is important to completely delete all FTK headers and binaries; otherwise your compiler might find FTK headers in default search directories such as `/usr/local/include/ftk/config.hh`, causing unexpected errors. \n\n### Dependencies and CMake options\n\nMandatory dependencies\n\n* CMake (3.10 minimum)\n\nOptional dependencies\n\n* ADIOS2 (>=2.7.0): Use `-DFTK_USE_ADIOS2=ON` with cmake; we suggest to use MPI when building with ADIOS2\n* CUDA (>=10.1): Use `-DFTK_USE_CUDA=ON` and specify `-DCMAKE_CUDA_COMPILER`\n* HDF5: Use `-DFTK_USE_HDF5=ON`\n* GMP (strongly recommended): will automatically find GMP unless `-DFTK_USE_GMP=OFF`\n* MPI (mpich 3.2 and higher versions recommended): use `CC=mpicc CXX=mpicxx` and `-DFTK_USE_MPI=ON`, see more details below\n* MPSolve: Use `-DFTK_USE_MPSOLVE=ON`\n* NetCDF-C: Use `-DFTK_USE_NETCDF=ON` and specify `-DNETCDF_DIR`\n* ParaView (5.8.0 and higher versions recommended): use `-DFTK_BUILD_PARAVIEW` and specify `-DParaView_DIR` in cmake options; see more details below\n* Python3: use `setup.py` or `-DFTK_BUILD_PYFTK=ON` in make options; see more details below\n* VTK (9.0.1 and higher versions recommended): use `-DFTK_BUILD_VTK` and specify `-DVTK_DIR`/`-DCMAKE_PREFIX_PATH` in cmake options; see more details below\n\n###  Building without external dependencies\n\n```bash\n$ cd $FTK_SOURCE_DIR/build\n$ cmake .. && make && make install\n```\n\n### Building with MPI\n\nYou may use MPI to accelerate feature tracking with both distributed-parallelism.  To build FTK with MPI, you need to use MPI C/C++ compilers: \n\n```bash\n$ CC=mpicc CXX=mpicxx cmake -DFTK_USE_MPI=ON\n```\n\n### Building ParaView plugins\n\nFTK provides ParaView plugins to allow users track critical points (maxima, minima, and saddles) in scalar field data.  In order to build the plugins, one needs to build ParaView from source, for example: \n\n```bash\n$ tar zxf ParaView-v5.8.0.tar.gz\n$ cd ParaView-v5.8.0\n$ mkdir build && cd build\n$ cmake ..   # You may need to specify paths to Qt and other dependencies needed by ParaView\n$ make\n```\n\nAssuming `$YOUR_ParaView_Build` is the above build directory, one can further build ParaView plugins as follows\n\n```bash\n$ git clone https://github.com/hguo/ftk $FTK_SOURCE_DIR\n$ mkdir $FTK_SOURCE_DIR/build && cd $FTK_SOURCE_DIR/build\n$ cmake .. -DFTK_BUILD_PARAVIEW=ON -DParaView_DIR=$YOUR_ParaView_Build\n$ make\n```\n\nIf built successfully, you will see the plugins binary as `lib/paraview-5.8/plugins/FTK/FTK.so`.  Open the \"Plugin Manager\" in ParaView GUI, and load this binary with \"Load New...\" button, and then select and load FTK in the list.  To check if ParaView plugins are correctly built by reproducing the results in the above figure, use \"Sources-->FTK-->SpiralWoven2DSource\", \"Filters-->FTK-->CriticalPointTracker2D\",followed by the \"Tube\" filter in ParaView.\n\n### Building PyFTK\n\nFTK Python bindings is based on [pybind11](https://github.com/pybind/pybind11), which is included as a submodule under the `python` subdirectory; make sure the submodule is checked out:\n\n```bash\n$ git submodule update --init --recursive\n```\n\nIf you downloaded a release from tarball archives on GitHub, be sure to manually download `pybind11` to the designated directory before building.  \n\nYou may build PyFTK with `setuptools` or CMake.  Notice that CMake is required to build PyFTK.  We do not recommend to use Python 2.  Advanced build options is currently not possible to configure with `setuptools`.  \n\nBuild PyFTK with `setuptools`:\n\n```bash\n$ cd $FTK_SOURCE_DIR\n$ python setup.py install\n```\n\nBuild PyFTK with CMake:\n\n```bash\n$ mkdir $FTK_SOURCE_DIR/build && cd $FTK_SOURCE_DIR/build\n$ cmake .. -DFTK_BUILD_PYFTK=ON\n$ make\n```\n\nThe output PyFTK binary will be in the `lib` directory.\n"
      },
      "source": "https://raw.githubusercontent.com/hguo/ftk/master/docs/install.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "FTK: The Feature Tracking Kit"
        ],
        "type": "Text_excerpt",
        "value": "To install FTK, use `spack install ftk`, `pip install pyftk`, or build from source; see [this page](docs/install.md) for more details on dependencies, compilation, and installation.  \n\nFor Windows users only: this code has been developed and tested using MacOS and Linux environments; we have not tried porting functionalities to Windows.  Windows users may use a Linux virtual machine to compile and use FTK; the use of WSL2 has not been tested yet.  Stay tuned.\n"
      },
      "source": "https://raw.githubusercontent.com/hguo/ftk/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9895571022162208,
      "result": {
        "original_header": "Building ParaView plugins",
        "type": "Text_excerpt",
        "value": "FTK provides ParaView plugins to allow users track critical points (maxima, minima, and saddles) in scalar field data.  In order to build the plugins, we recommend to build and use (ParaView version 5.8.0 and higher required)\n```bash\n$ git clone https://github.com/hguo/ftk $FTK_SOURCE_DIR\n$ mkdir $FTK_SOURCE_DIR/build && cd $FTK_SOURCE_DIR/build\n$ cmake .. -DFTK_BUILD_PARAVIEW=ON -DParaView_DIR=$YOUR_ParaView_Build\n$ make\n```\n \nIf built successfully, you will see the plugins binary as `lib/paraview-5.8/plugins/FTK/FTK.so`.  Open the \"Plugin Manager\" in ParaView, and load this binary with \"Load New...\" button, and then select and load FTK in the list.  To check if ParaView plugins are correctly built by reproducing the results in the above figure, use \"Sources-->FTK-->SpiralWoven2DSource\", \"Filters-->FTK-->CriticalPointTracker2D\",followed by the \"Tube\" filter in ParaView.\n \n"
      },
      "source": "https://raw.githubusercontent.com/hguo/ftk/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 1.0,
      "result": {
        "original_header": "FTK C++ Libraries",
        "type": "Text_excerpt",
        "value": "You may use FTK as a C++ library.  The installation will also generate FTKConfig.cmake in the installation path, such that you can use `find_package(FTK)` to find and use FTK in your CMakeLists.txt\n```bash\n$ git clone https://github.com/hguo/ftk $FTK_SOURCE_DIR\n$ mkdir $FTK_SOURCE_DIR/build && cd $FTK_SOURCE_DIR/build\n$ cmake .. -DCMAKE_INSTALL_PREFIX=$FTK_INSTALL_DIR\n$ make install\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/hguo/ftk/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999999966107396,
      "result": {
        "original_header": "Including FTK in your CMake project",
        "type": "Text_excerpt",
        "value": "You may use the FTK installation in your own CMakeLists.txt file:\n```cmake\nfind_package(FTK REQUIRED)\ninclude_directories (${FTK_INCLUDE_DIR})\ntarget_link_library (${YOUR_TARGET} FTK::libftk)\n```\nSpecify FTK_DIR with CMake: \n```bash\n$ cmake -DFTK_DIR=$FTK_INSTALL_DIR/lib/cmake\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/hguo/ftk/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/hguo/ftk/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ftk"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "hguo"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 2403554,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Cuda",
        "size": 157084,
        "type": "Programming_language",
        "value": "Cuda"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 80138,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 69444,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 11673,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 2555,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hguo/ftk/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_papers": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/2011.08697](https://arxiv.org/abs/2011.08697) for more details on our feature tracking algorithms.\n\nSee [documentation](docs/README.md) for more details.\n\n![](docs/images/critical_point_tracking_2d_paraview.png)\n\n## Installation\n\nTo install FTK, use `spack install ftk`, `pip install pyftk`, or build from source; see [this page](docs/install.md) for more details on dependencies, compilation, and installation.  \n\nFor Windows users only: this code has been developed and tested using MacOS and Linux environments; we have not tried porting functionalities to Windows.  Windows users may use a Linux virtual machine to compile and use FTK; the use of WSL2 has not been tested yet.  Stay tuned.\n\n## FTK command line interface\n\nFTK provides one single executable `ftk`.  See [this page](docs/cli.md) for mor details on the usage of FTK command line interface.\n\n## FTK for ParaView\n\n### Building ParaView plugins\n\nFTK provides ParaView plugins to allow users track critical points (maxima, minima, and saddles) in scalar field data.  In order to build the plugins, we recommend to build and use (ParaView version 5.8.0 and higher required)\n\n```bash\n$ git clone https://github.com/hguo/ftk $FTK_SOURCE_DIR\n$ mkdir $FTK_SOURCE_DIR/build && cd $FTK_SOURCE_DIR/build\n$ cmake .. -DFTK_BUILD_PARAVIEW=ON -DParaView_DIR=$YOUR_ParaView_Build\n$ make\n```\n\nIf built successfully, you will see the plugins binary as `lib/paraview-5.8/plugins/FTK/FTK.so`.  Open the \"Plugin Manager\" in ParaView, and load this binary with \"Load New...\" button, and then select and load FTK in the list.  To check if ParaView plugins are correctly built by reproducing the results in the above figure, use \"Sources-->FTK-->SpiralWoven2DSource\", \"Filters-->FTK-->CriticalPointTracker2D\",followed by the \"Tube\" filter in ParaView.\n\n### Using ParaView plugins\n\nWe demonstrate the use the 2D critical point tracking filter (`vtkCriticalPoint2DTracker`) with a dataset.  The input of this filter must be a 3D volumetric data that stacks 2D time-varying scalar fields in the Z direction.  In this demo, we first add a synthetic 3D volume data by using Sources / FTK / Spiral2DSource.  We then track the trajectories of 2D critical points with Filters / FTK / CriticalPoint2DTracker.  The output trajectires can be visualized as tubes and color-coded by their types, scalar values, or IDs.  In this demo, the time-varying scalar field is defined in closed form: \n\n$f(x,y,t)=cos(x\\cos t - y\\sin t) \\sin(x\\sin t + y\\cos t),$\n\nwhere $x$ and $y$ are 2D coordinates and $t$ is time.  We discretize the $x,y$ domain into a $128\\times 128$ regular grid and the time domain into 10 timesteps.  Local maximum are defined as the loci of points that $(\\frac{\\partial f"
      },
      "source": "https://raw.githubusercontent.com/hguo/ftk/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/2003.02351](https://arxiv.org/abs/2003.02351) [cs.DC]"
      },
      "source": "https://raw.githubusercontent.com/hguo/ftk/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/2011.08697](https://arxiv.org/abs/2011.08697) [cs.GR]\n\n* Jiayi Xu, Hanqi Guo, Han-Wei Shen, Mukund Raj, Xueqiao Xu, Xueyun Wang, Zhehui Wang, and Tom Peterka, \"Asynchronous and Load-Balanced Union-Find for Distributed and Parallel Scientific Data Visualization and Analysis.\" IEEE Transactions on Visualization and Computer Graphics (Proc. IEEE PacificVis 2021), 27(6):2808-2820, 2021. [https://arxiv.org/abs/2003.02351](https://arxiv.org/abs/2003.02351) [cs.DC]"
      },
      "source": "https://raw.githubusercontent.com/hguo/ftk/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/2011.08697"
      },
      "source": "https://raw.githubusercontent.com/hguo/ftk/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/2003.02351"
      },
      "source": "https://raw.githubusercontent.com/hguo/ftk/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "hguo",
          "type": "User"
        },
        "date_created": "2023-10-31T01:43:16Z",
        "date_published": "2023-10-31T01:56:07Z",
        "description": "- Integration with [DeformingSpacetimeMesh](https://github.com/rcrcarissa/DeformingSpacetimeMesh)\r\n- Critical line tracking in 3D unstructured grid\r\n- Particle tracer for 2D/3D regular grid vector fields\r\n- Unit tests for SYCL-accelerated 2D critical point tracking\r\n- Application-specific updates\r\n    - XGC: Handling of magnetic fields from equilibrium data\r\n    - MPAS-Ocean: CPU- and GPU-based Lagrangian particle tracer with vertical velocity support",
        "html_url": "https://github.com/hguo/ftk/releases/tag/0.0.9",
        "name": "Release 0.0.9",
        "release_id": 127280414,
        "tag": "0.0.9",
        "tarball_url": "https://api.github.com/repos/hguo/ftk/tarball/0.0.9",
        "type": "Release",
        "url": "https://api.github.com/repos/hguo/ftk/releases/127280414",
        "value": "https://api.github.com/repos/hguo/ftk/releases/127280414",
        "zipball_url": "https://api.github.com/repos/hguo/ftk/zipball/0.0.9"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "hguo",
          "type": "User"
        },
        "date_created": "2023-03-21T16:03:57Z",
        "date_published": "2023-03-21T16:30:15Z",
        "description": "* Support for 3D periodical spacetime meshes (the same 2D spatial meshes with designated way of spacetime triangulation)\r\n* Adding an option to enable/disable cell reordering in unstructured 3D grids\r\n* Fixing unit tests when building with metis; updating catch2 to 2.13.10 to fix linux build\r\n* Various performance improvement and bug fixes",
        "html_url": "https://github.com/hguo/ftk/releases/tag/0.0.8",
        "name": "Release 0.0.8",
        "release_id": 96374956,
        "tag": "0.0.8",
        "tarball_url": "https://api.github.com/repos/hguo/ftk/tarball/0.0.8",
        "type": "Release",
        "url": "https://api.github.com/repos/hguo/ftk/releases/96374956",
        "value": "https://api.github.com/repos/hguo/ftk/releases/96374956",
        "zipball_url": "https://api.github.com/repos/hguo/ftk/zipball/0.0.8"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "hguo",
          "type": "User"
        },
        "date_created": "2022-11-27T02:13:48Z",
        "date_published": "2022-11-27T02:17:13Z",
        "description": "* Allowing partitioning of 2D unstructured mesh for critical point tracking in parallel.\r\n* Adding options to resample unstructured grids in input streams\r\n* Various performance improvements and bug fixes.",
        "html_url": "https://github.com/hguo/ftk/releases/tag/0.0.7.1",
        "name": "Release 0.0.7.1",
        "release_id": 84249600,
        "tag": "0.0.7.1",
        "tarball_url": "https://api.github.com/repos/hguo/ftk/tarball/0.0.7.1",
        "type": "Release",
        "url": "https://api.github.com/repos/hguo/ftk/releases/84249600",
        "value": "https://api.github.com/repos/hguo/ftk/releases/84249600",
        "zipball_url": "https://api.github.com/repos/hguo/ftk/zipball/0.0.7.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "hguo",
          "type": "User"
        },
        "date_created": "2022-03-26T01:50:02Z",
        "date_published": "2022-03-26T01:50:59Z",
        "description": "* New ParaView filter `CriticalPointTracker` \r\n  * The new filter is the replacement of the previous `CriticalPoint2DTracker`, `CriticalPointTracker2DUnstructured`, and `CriticalPoint3DTracker`\r\n  * The new integrated filter will determine mesh type (e.g., `vtkUnstructuredGrid` and `vtkImageData`) and dimensionality (2 or 3) for tracking critical points\r\n  * The new filter uses correct coordinates and extents for `vtkStructuredGrid`, `vtkRectilinearGrid`, and `vtkImageData`\r\n* New ParaView filter `CriticalLineTracker` that tracks intersections of isosurfaces in two scalar functions; GPU accelerated critical line tracker\r\n* SYCL support (experimental)\r\n  * 2D critical point tracking in regular grids (experimental)\r\n* New features for XGC\r\n  * XGC 3D blob core line tracking with CUDA acceleration\r\n  * New executable `ftk.xgc.poincare` that computes Poincare plot for XGC simulations; CUDA accelerated Poincare plot computation\r\n* New features for MPAS-O\r\n  * I/O for MPAS-O netCDF outputs\r\n  * Eddy center tracking in MPAS-O outputs\r\n* Improved I/O for netCDF, HDF5, ADIOS2, and VTK\r\n* Documentation\r\n  * New example of in situ critical point tracking in a heat transfer simulation\r\n* Various bug fixes and performance improvements",
        "html_url": "https://github.com/hguo/ftk/releases/tag/0.0.6",
        "name": "Release 0.0.6",
        "release_id": 62827889,
        "tag": "0.0.6",
        "tarball_url": "https://api.github.com/repos/hguo/ftk/tarball/0.0.6",
        "type": "Release",
        "url": "https://api.github.com/repos/hguo/ftk/releases/62827889",
        "value": "https://api.github.com/repos/hguo/ftk/releases/62827889",
        "zipball_url": "https://api.github.com/repos/hguo/ftk/zipball/0.0.6"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "hguo",
          "type": "User"
        },
        "date_created": "2021-03-08T04:50:17Z",
        "date_published": "2021-03-15T04:05:07Z",
        "description": "* ParaView synthetic data sources: added new sources including `MovingExtremum3DSource`, `MovingRamp3DSource`, `MovingDualRamp3DSource`; added new options to inject noise to `SpiralWoven2DSource`; fixed implementation of `DoubleGyre2DSource`\r\n* ParaView filters: added `Levelset3DTracker`; added output options (\"traced\" and \"sliced\") for all existing filters (`CriticalPoint2DTracker`, `CriticalPoint3DTracker`, `Levelset2DTracker`, and `Levelset3DTracker`)\r\n* Documentation\r\n  * A new [page](https://github.com/hguo/ftk/blob/master/docs/install.md) of different installation and compilation options\r\n  * A new [page](https://github.com/hguo/ftk/blob/master/docs/synthetic.md) to document a number of options to produce synthetic data for tutorial and testing purposes; all examples are provided with command lines and ParaView state files (`.pvsm`) for reproducibility\r\n  * A new [example](https://github.com/hguo/ftk/blob/master/docs/cylinder2D.md) of tracking critical points in a 2D flow-past-cylinder dataset\r\n* Various bug fixes and performance improvements",
        "html_url": "https://github.com/hguo/ftk/releases/tag/0.0.5.1",
        "name": "Release 0.0.5.1",
        "release_id": 39796542,
        "tag": "0.0.5.1",
        "tarball_url": "https://api.github.com/repos/hguo/ftk/tarball/0.0.5.1",
        "type": "Release",
        "url": "https://api.github.com/repos/hguo/ftk/releases/39796542",
        "value": "https://api.github.com/repos/hguo/ftk/releases/39796542",
        "zipball_url": "https://api.github.com/repos/hguo/ftk/zipball/0.0.5.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "hguo",
          "type": "User"
        },
        "date_created": "2021-02-04T17:24:56Z",
        "date_published": "2021-02-10T20:47:53Z",
        "description": "* Easing compilation and installation with `spack install ftk`\r\n* Bug fixing and performance improvements\r\n* Supporting data reading from ADIOS2 `.bp` files\r\n* Unit testing with CUDA accelerated critical point tracking",
        "html_url": "https://github.com/hguo/ftk/releases/tag/0.0.5",
        "name": "Release 0.0.5",
        "release_id": 37885710,
        "tag": "0.0.5",
        "tarball_url": "https://api.github.com/repos/hguo/ftk/tarball/0.0.5",
        "type": "Release",
        "url": "https://api.github.com/repos/hguo/ftk/releases/37885710",
        "value": "https://api.github.com/repos/hguo/ftk/releases/37885710",
        "zipball_url": "https://api.github.com/repos/hguo/ftk/zipball/0.0.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "hguo",
          "type": "User"
        },
        "date_created": "2020-11-17T14:22:34Z",
        "date_published": "2020-11-17T14:27:52Z",
        "description": "* Integrated `track_critical_points`, `track_tdgl_vortex`, `track_contours` into one single executable `ftk`\r\n* GPU acceleration for tracking TDGL vortices and contours\r\n* bug fixing and performance improvements",
        "html_url": "https://github.com/hguo/ftk/releases/tag/0.0.4",
        "name": "Release 0.0.4",
        "release_id": 34060834,
        "tag": "0.0.4",
        "tarball_url": "https://api.github.com/repos/hguo/ftk/tarball/0.0.4",
        "type": "Release",
        "url": "https://api.github.com/repos/hguo/ftk/releases/34060834",
        "value": "https://api.github.com/repos/hguo/ftk/releases/34060834",
        "zipball_url": "https://api.github.com/repos/hguo/ftk/zipball/0.0.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "hguo",
          "type": "User"
        },
        "date_created": "2020-08-27T05:07:52Z",
        "date_published": "2020-09-01T15:30:18Z",
        "description": "* Python bindings of FTK\r\n* Numerous improvements and bug fix",
        "html_url": "https://github.com/hguo/ftk/releases/tag/0.0.2.2",
        "name": "Release 0.0.2.2 - Introduction of PyFTK",
        "release_id": 30518567,
        "tag": "0.0.2.2",
        "tarball_url": "https://api.github.com/repos/hguo/ftk/tarball/0.0.2.2",
        "type": "Release",
        "url": "https://api.github.com/repos/hguo/ftk/releases/30518567",
        "value": "https://api.github.com/repos/hguo/ftk/releases/30518567",
        "zipball_url": "https://api.github.com/repos/hguo/ftk/zipball/0.0.2.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "hguo",
          "type": "User"
        },
        "date_created": "2020-03-26T20:08:06Z",
        "date_published": "2020-03-26T20:09:31Z",
        "description": "This release features several new capabilities:\r\n\r\n* A ParaView plugin `vtkCriticalPoint2DTracker` that tracks minima, maxima, and saddles in 2D scalar fields\r\n* Distributed and parallel 2D/3D critical point tracking with MPI\r\n* CUDA-accelerated 2D/3D critical point tracking \r\n* Automated testing with Travis CI / Google Test",
        "html_url": "https://github.com/hguo/ftk/releases/tag/0.0.2",
        "name": "Release 0.0.2",
        "release_id": 24907483,
        "tag": "0.0.2",
        "tarball_url": "https://api.github.com/repos/hguo/ftk/tarball/0.0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/hguo/ftk/releases/24907483",
        "value": "https://api.github.com/repos/hguo/ftk/releases/24907483",
        "zipball_url": "https://api.github.com/repos/hguo/ftk/zipball/0.0.2"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contributors",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 07:07:25",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 18
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}