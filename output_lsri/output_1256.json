{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/deepomicslab/SpecHap"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-12-09T14:39:51Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-21T12:31:19Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.990135843730742,
      "result": {
        "original_header": "SpecHap",
        "type": "Text_excerpt",
        "value": "SpecHap is an ultra fast phasing algorithm based on spectral graph analysis. SpecHap currently support general WGS sequencing, Hi-C, 10X linked-reads, PacBio SMRT and Oxford Nanopore . \n"
      },
      "source": "https://raw.githubusercontent.com/deepomicslab/SpecHap/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/deepomicslab/SpecHap/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/deepomicslab/SpecHap/master/scripts/Fiedler_vec_example.ipynb"
      },
      "source": "https://raw.githubusercontent.com/deepomicslab/SpecHap/master/scripts/Fiedler_vec_example.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/deepomicslab/SpecHap/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "deepomicslab/SpecHap"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SpecHap"
      },
      "source": "https://raw.githubusercontent.com/deepomicslab/SpecHap/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/deepomicslab/SpecHap/master/reproduce_paper_result/alignment.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/deepomicslab/SpecHap/master/reproduce_paper_result/phasing.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/deepomicslab/SpecHap/master/reproduce_paper_result/simulation.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/deepomicslab/SpecHap/master/reproduce_paper_result/fragment_extraction.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/deepomicslab/SpecHap/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Released under MIT License\n\nCopyright (c) 2019 Delta Group, City Univeristy of Hong Kong.\n\nCopyright (c) 2019 Dr. Li Shuaicheng.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
      },
      "source": "https://raw.githubusercontent.com/deepomicslab/SpecHap/master/LICENSE.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "SpecHap"
        ],
        "type": "Text_excerpt",
        "value": "This project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/deepomicslab/SpecHap/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SpecHap"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "deepomicslab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 7655541,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 231750,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Cuda",
        "size": 118631,
        "type": "Programming_language",
        "value": "Cuda"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 31671,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 28866,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 16187,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 5347,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 2974,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/deepomicslab/SpecHap/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "yonghanyu",
          "type": "User"
        },
        "date_created": "2021-03-16T09:35:40Z",
        "date_published": "2021-04-21T07:09:37Z",
        "description": "Fix a bug when phasing with Hi-C\r\nAdd functionality to keep already phased block when assembling haplotype.",
        "html_url": "https://github.com/deepomicslab/SpecHap/releases/tag/1.0.1",
        "name": "Release 1.0.1",
        "release_id": 41757497,
        "tag": "1.0.1",
        "tarball_url": "https://api.github.com/repos/deepomicslab/SpecHap/tarball/1.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/deepomicslab/SpecHap/releases/41757497",
        "value": "https://api.github.com/repos/deepomicslab/SpecHap/releases/41757497",
        "zipball_url": "https://api.github.com/repos/deepomicslab/SpecHap/zipball/1.0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "yonghanyu",
          "type": "User"
        },
        "date_created": "2020-12-16T06:55:40Z",
        "date_published": "2020-12-16T06:57:33Z",
        "html_url": "https://github.com/deepomicslab/SpecHap/releases/tag/1.0",
        "name": "Initial Release",
        "release_id": 35332478,
        "tag": "1.0",
        "tarball_url": "https://api.github.com/repos/deepomicslab/SpecHap/tarball/1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/deepomicslab/SpecHap/releases/35332478",
        "value": "https://api.github.com/repos/deepomicslab/SpecHap/releases/35332478",
        "zipball_url": "https://api.github.com/repos/deepomicslab/SpecHap/zipball/1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Prerequisites",
        "parent_header": [
          "SpecHap",
          "Getting Started"
        ],
        "type": "Text_excerpt",
        "value": "SpecHap relies on ARPACK for Eigen-calculation. To gain stable utilization, we recommend [arapack-ng](https://github.com/opencollab/arpack-ng).\n\nArpack-ng can be easily compile with cmake, ensure you have BLAS and LAPACK installed before compiling.\n\nTo build [arapack-ng](https://github.com/opencollab/arpack-ng), try run\n```\ncd /path/to/arpack-ng/\nsh bootstrap\n./configure --enable-icb\nmake\nmake && make install\n```\n\n[Htslib](https://github.com/samtools/htslib) is also required. To install [htslib](https://github.com/samtools/htslib), simply run\n```\ncd /path/to/htslib\nautoheader  #required if htslib is cloned from github\nautoconf    #required if htslib is cloned from github\n./configure\nmake && make install\n```\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/deepomicslab/SpecHap/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Run SpecHap",
        "parent_header": [
          "SpecHap",
          "Getting Started",
          "Using SpecHap"
        ],
        "type": "Text_excerpt",
        "value": "The detailed usage can be found by\n```\nSpecHap --help\n```\n\nFor instance, to phase PacBio SMRT reads:\n```\nSpecHap --vcf /your/gzvcf/file --frag /your/fragment/file --out /phased/vcf --pacbio\n```\n"
      },
      "source": "https://raw.githubusercontent.com/deepomicslab/SpecHap/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "installation",
    "citation",
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-06 04:20:54",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 12
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Getting Started",
        "parent_header": [
          "SpecHap"
        ],
        "type": "Text_excerpt",
        "value": "To build SpecHap, run the following command:\n\n```\ncd /path/to/SpecHap/\nmkdir build\ncd build\ncmake ..\nmake && make install\n```\n\nTo see the option SpecHap support, run the following command:\n\n```\nSpecHap --help\n```\n\nA modified utility software ExtractHair, originally from [HAPCUT2](https://github.com/vibansal/HapCUT2), is needed for fragment processing. To install, run\n```\ncd /path/to/SpecHap/\ngit submodule init && git submodule update\ncd submodules/htslib\ngit checkout 26229a3\ncd ../samtools\ngit checkout 255f97d\ncd ../../hair-src\nmake\n```"
      },
      "source": "https://raw.githubusercontent.com/deepomicslab/SpecHap/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Data preprocessing",
        "parent_header": [
          "SpecHap",
          "Getting Started",
          "Using SpecHap"
        ],
        "type": "Text_excerpt",
        "value": "SpecHap requires at least a fragment file and a bgziped and indexed VCF to perform phasing. Ensure your VCF is sorted by position. The fragment file is also required to be sorted by the same order.\n\nTo generate the fragment file, run the following command\n```\nextractHAIRS --bam /your/bam/file --VCF /your/vcf/file --out fragment_file\n``` \nWith Hi-C sequenced file, try \n```\nextractHAIRS --bam /your/bam/file --VCF /your/vcf/file --out fragment_file --hic 1\n```\nWith 10X linked reads, try \n```\nextractHAIRS --bam /your/bam/file --VCF /your/vcf/file --out fragment_file --10x 1\n```\nYou also need a bed file indicating each barcode's inferred spanning range. You can use the BarcodeExtract to do your job\n```\nBarcodeExtract /you/bam/file barcode_spnanning.bed\nbgzip -c barcode_spanning.bed > barcode_spanning.bed.gz\ntabix -p bed barcode_spanning.bed.gz\n```\nWith PacBio SMRT:\n```\nextractHAIRS --pacbio 1 --bam /your/bam/file --VCF /your/vcf/file --out fragment_file --ref /reference/file\n```\nSimilarly with Nanopore, change the --pacbio into --ont  \n\nWith a fragment file, you can sort it with following command, if your are phasing with 10X, Hi-C or the new-format is specified \n```\nsort -n -k6 in.frag > sorted.frag\n```  \nIf paired-ended NGS, PacBio SMRT or Oxford Nanopore is used with default format, use\n```\nsort -n -k3 in.frag > sorted.frag\n```\n"
      },
      "source": "https://raw.githubusercontent.com/deepomicslab/SpecHap/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Script for VCF handling.",
        "parent_header": [
          "SpecHap",
          "Getting Started"
        ],
        "type": "Text_excerpt",
        "value": "You may find bunch of scripts that we use to benchmark the accuracy and completeness of assembled haplotype under folder ./scripts. \n"
      },
      "source": "https://raw.githubusercontent.com/deepomicslab/SpecHap/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Author",
        "parent_header": [
          "SpecHap",
          "Getting Started"
        ],
        "type": "Text_excerpt",
        "value": "SpecHap is developed by DeepOmics lab under the supervision of Dr. Li Shuaicheng, City University of Hong Kong, Hong Kong, China.\n\nTo contact us, send email to [yonghanyu2@cityu.edu.hk](yonghanyu2@cityu.edu.hk)\n"
      },
      "source": "https://raw.githubusercontent.com/deepomicslab/SpecHap/master/README.md",
      "technique": "header_analysis"
    }
  ]
}