{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "5. Command Line Reference",
        "type": "Text_excerpt",
        "value": "\r\nGenerally, Voronoia is called from a command line console with:\r\n\r\n    C:\\Python2.4\\Python.exe Voronoia.py <command> [options] <input file> (Windows)\r\n    or\r\n    Voronoia.py <command> [options] <input file> (Linux),\r\n\r\nwhere <command> is one of:\r\n    calc         - calculate packing .vol file(s)\r\n    report       - write concise packing report from .vol file(s)\r\n    average      - calculate average packing densities from .vol file(s)\r\n    compare      - compare .vol file(s) to average packing densities\r\n    cavities     - write cavities from .vol file(s) as PDB file(s)\r\n    cavneighbors - write cavity neighbor atoms from .vol file(s) as PDB file(s)\r\n\r\nwhere [options] for 'calc' are none to many of:\r\n    -g <float> - grid distance for 'calc' (default 0.1)\r\n    -stouten   - use Stouten radii instead of ProtOr radii set\r\n    -e <file>  - location of executable (get_volume.exe)\r\n    \r\nwhere [options] for other commands are none to many of:\r\n    -d             - process all files in directory <input file>\r\n    -o             - output directory\r\n    -surface       - use surface atoms only\r\n    -buried        - use non-surface atoms only\r\n    -cavnb         - use cavity neighbor atoms only\r\n    -no_cavnb      - discard atoms neighboring cavities     \r\n    -h             - include hetero groups \r\n    -w             - include water     \r\n    -r <file>      - specify the reference file for 'compare'\r\n    -volume        - calculate atomic volumes instead of packing densities\r\n    -protor        - use concise ProtOr atom typing scheme with 19 types\r\n    -html          - HTML output of reports.\r\n\r\n\r\n------------------------------------------------------------------------\r"
      },
      "source": "https://raw.githubusercontent.com/krother/Voronoia/master/README.TXT",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/krother/Voronoia"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2010-10-01T10:22:11Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-02-07T14:17:53Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Voronoia - Protein packing calculation"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Basics",
        "type": "Text_excerpt",
        "value": "\r\nThis chapter describes the measures calculated by Voronoia.\r\n\r\n2.1) Atomic volumes\r\n\r\nAn atomic volume is the amount of space assigned to a particular atom, delimited by its neighbors.\r\nTo calculate it, Voronoi polyhedra with hyperboloid surfaces are constructed around each atom. The Voronoi Cell procedure described in [1] uses a cubic lattice in order to assign the exact values. Different atom radii are taken into account. The procedure distinguishes between the volume inside the atoms' Van-der-Waals radius - the VdW volume V(VdW) - , and a layer of max. 1.4 Angstroem around it - the Solvent Excluded volume V(SE).\r\n\r\n\r\n2.2) Atomic packing densities\r\n\r\nThe packing density of an atom is calculated as \r\n\r\nPD = V(VdW) / [V(VdW) + V(SE)],\r\n\r\nwhere V(VdW) and V(SE) are the Van-der-Waals and Solvent Excluded volumes of this atom. Thus, the maximum packing density of an atom is 1.0 (none of the Solvent Excluded volume remains, which nevr occurs for real-wold data). The minimum is 0.0.\r\n\r\n\r\n2.3) Cavities (packing defects)\r\n\r\nThese are positions, where a virtual water probe (1.4 Angstrom radius) could fit. They are defined as cavities, when there is no escape path for the probe to the surrounding solvent without collisions with any protein atoms, \r\n\r\nCavities occupied by water molecules (other hetero atoms?, ANDREAN) are labeled as partially filled. If there are enough water molecules inside, that no additional probe would fit, the cavity is considered filled. Voronoia finds all cavities extensively. \r\n\r\n\r\n2.4) Surface and buried atoms\r\n\r\nPacking differs principally between atoms on the protein surface and those in the inside. One should not mix these two types without a good reason. The protein surface is determined by rolling a virtual water molecule (1.4 Angstrom radius) over the protein. All atoms touched by the probe are assigned to the surface.\r\n\r\n------------------------------------------------------------------------\r"
      },
      "source": "https://raw.githubusercontent.com/krother/Voronoia/master/README.TXT",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9961598038107496,
      "result": {
        "original_header": "3. Functions",
        "type": "Text_excerpt",
        "value": "\r\nThis chapter describes what you can do with Voronoia.\r\n\r\n3.1) Calculate volume files.\r\n\r\nTakes PDB files (.ent or .pdb) and calculates atomic volumes for each atom. It can be adjusted, whether water and other hetero atoms should be removed before the calculation. This affects the volume of surrounding atoms, and eventually resulting cavities. The width of the lattice used for calculation can be tuned for higher accuracy (and computation time). An .vol file with the volumes is written (description in chapter 6).\r\n\r\n\r\n3.2) Report atomic packing densities or volumes\r\n\r\nCreates a report in HTML or ASCII format that summmarizes the packing of a structure, and lists packing values per residue and per atom, and all cavities.\r\n\r\n\r\n3.3) Calculate average packing values\r\n\r\nCalculates average packing densities (or volumes) for all atoms of a structure or structure dataset. The data is grouped either by 'native' atom types (residue + atom name), or by 17 concise ProtOr types from [2] grouping similarly packed atom types together. The ProtOr atom types are labeled XmHnz, where X is the element, m the number of total bonds, n the number of bonded hydrogens and z a letter distinguishing some sub-types. Example: the C3H1u type contains sp2-carbon atoms with 3 bonds (2 single and 1 double), 1 of which is to a hydrogen.\r\n\r\nThe output is a table where for each atom type, the number of atoms, average packing density, the absolute and the relative standard deviation are listed. The output file can be used as a reference file for 3.4.\r\n\r\n\r\n3.4) Compare a volume file to reference values.\r\n\r\nGiven a file with reference average packing densities, it can be calculated how well the packing in a .vol file fits to them. A file with reference data for buried atoms in high-resolution structures is provided, but all sets calculated with 3.3 can be used, as long as the atom typing scheme (ProtOr or native) is the same.\r\n\r\nFor the comparison, the z-score-rms is calculated:\r\n\r\nz-score-rms = sqrt( sum( (PD(i,k) - <PD(k)>)^2 / StdDev(k) ) ),\r\n\r\nwhere PD(i,k) is the packing density of the i'th atom having the type k, <PD(k)> is the average packing and StdDev(k) the standard deviation for that type. Typical values for the z-score-rms in proteins are:\r\n\r\n   0.0       : perfect match, this is definitely an artifact.\r\n   0.8 - 1.2 : nominal for buried atoms in proteins\r\n   1.3 - 1.4 : slightly different from the reference, maybe a structure with low resolution.\r\n   1.5+      : clearly different data; membrane proteins compared to soluble; loosely packed structures; erroneous structures. Reference set contains water but examined structure does not.\r\n   3.0+      : some error in the data or in program usage, e.g. surface atoms compared with buried ones.\r\n\r\n\r\n3.5) Write cavity positions\r\n\r\nCreates a PDB file, where the center points of all cavities in a structure are stored as pseudoatoms. The points are calculated as the centers of mass from the cavity neighbor atoms (all atoms touched by a 1.4 Angstrom probe inside the cavity). \r\n\r\n\r\n3.6) Write cavity neighbors\r\n\r\nCreates a PDB file, where the neighbor atoms of a cavity (all atoms touched by a 1.4 Angstrom probe inside the cavity) are listed. The residue number of the atoms is relabeled to contain the cavity number.\r\n\r\n\r\n3.7) Defining which atoms are to be used for calculation\r\n\r\nVoronoia provides several switches to include or exclude general subsets of atoms [with defaults]:\r\n- surface atoms [off]\r\n- buried atoms [on]\r\n- cavity neighbors [on]\r\n- non-cavity neighbors [on]\r\n\r\nAdditionally, specific regions can be defined by adding SELECT lines to the .vol files right after the header.\r\nLines starting with SELECT will determine the parts of the file that will be selected for calculation. The selections are additive. Examples;\r\n       SELECT chain A AND resi 1-100\r\n       SELECT name CA AND resn TYR\r\n       SELECT resn HOH\r\n       SELECT resi 65\r\nWhen no SELECT commands are specified, all atoms are selected automatically according to the more general restrictions like surface, buried etc.\r\n\r\n\r\n\r\n------------------------------------------------------------------------\r \n"
      },
      "source": "https://raw.githubusercontent.com/krother/Voronoia/master/README.TXT",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.97296246978652,
      "result": {
        "original_header": "4. Using the graphical Interface",
        "type": "Text_excerpt",
        "value": "\r\nMost of the GUI elements for the functions in 3. can be used intuitively. Some points should be clarified here:\r\n\r\n * Prior to all operations, volume files need to be calculated. Alternatively, pre-calculated .vol files can be provided. Upon calculation with the 'Calculate structures' button, the name of the resulting file is used for the other functions automatically.\r\n \r\n * To calculate packing data for a whole dataset, choose a directory with .ent/.vol files. All of them will be processed subsequently.\r\n \r\n * The PyMOL tab only appears if Voronoia is installed as a PyMOL plugin.\r\n\r\n \r\n------------------------------------------------------------------------\r \n"
      },
      "source": "https://raw.githubusercontent.com/krother/Voronoia/master/README.TXT",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9514861295259106,
      "result": {
        "original_header": "6. Volume Files (.vol)",
        "type": "Text_excerpt",
        "value": "\r\nMost parts of Voronoia work with a special PDB structure format, the .vol files. It corresponds mostly to the PDB format, with a few extensions:\r\n- After the header, a LENGTH line gives a precise count of residues and atoms.\r\n\r\n- The following NRHOLE line gives the numbers of internal cavities that are partially or not filled, before and after hetero atoms (including water???) are removed.\r\nANDREAN!?\r\n\r\n- A number of HOLE NUMBER lines follow each containing a list of the atom indices for a particular cavity.\r\n\r\n- The ATOM lines contain the follwing modified data: \r\n    col.61-67: b_factor substituted by total atomic volume\r\n    col.68-73: Van-der-Waals atomic volume\r\n    col.74-80: Solvent Excluded atomic volume\r\n    col.82   : bit indicating solvent accessibility (0-surface, 1-buried)\r\n\r\n        \r\n-------------------------------------------------------------------------\r \n"
      },
      "source": "https://raw.githubusercontent.com/krother/Voronoia/master/README.TXT",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9976694694222747,
      "result": {
        "original_header": "7. Appendix",
        "type": "Text_excerpt",
        "value": "\r\nTechnical Notes:\r\n\r\nVoronoia consists of a core algorithm compiled from Delphi (in get_volume.exe) and a wrapper software written in Python. It uses the Pmw and PIL libraries. All front-ends (Windows/Linux/GUI/PyMOL/commandline) use the same modules. The executables for Windows have been compiled using Py2exe and distutils.\r\n\r\nTo see the logo, the PIL library is necessary (therefore we made it optional).\r\n\r\n-------------------------------------------------------------------------\r\n\r\nProtOr atom radii:\r\n\r\nThe atom radii below are used depending on the chemical configuration of an atom, as published by Tsai et al [2]:\r\n\r\n\r\n\r\n-------------------------------------------------------------------------\r\n\r\nReferences:\r\n\r\n[1]   1.Goede, A., Preissner, R., and Fr\u00f6mmel, C., Voronoi Cell: New Method for Allocation of Space among Atoms: Elimination of Avoidable Errors in Calculation of Atomic Volume and Density. 1997.\r\n\r\n[2]   Tsai J, Taylor R, Chothia C, Gerstein M. The packing density in proteins: standard radii and volumes. J Mol Biol. 1999 Jul 2;290(1):253-66.\r\n   PMID: 10388571\r\n\r\n[3]   Hildebrand PW, Rother K, Goede A, Preissner R, Frommel C. Molecular Packing and Packing Defects in Helical Membrane Proteins. Biophys J. 2004 Nov 19; \r\n   PMID: 15556989 \r\n\r\n[4]   Rother K, Preissner R, Goede A, Frommel C. Inhomogeneous molecular density: reference packing densities and distribution of cavities within proteins. Bioinformatics. 2003 Nov 1;19(16):2112-21.\r\n      PMID: 14594717 \r\n\r\n \n"
      },
      "source": "https://raw.githubusercontent.com/krother/Voronoia/master/README.TXT",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9991949667948054,
      "result": {
        "type": "Text_excerpt",
        "value": "Voronoia V 1.0.1\r\n\r\nby Kristian Rother, Peter Hildebrand, Andrean Goede, Bjoern Gruening, and Robert Preissner\r\n\r\n------------------------------------------------------------------------\r\n(c) 2008 Kristian Rother (krother@rubor.de)\r\n         and Andrean Goede\r\n         Charite - Medical University of Berlin\r\n\r\nThis software may be distributed freely, as long as this Copyright\r\nnotice is not modified.\r\n------------------------------------------------------------------------\r\n\r\nWhen using this software, please cite:\r\n\r\n Rother K, Preissner R, Goede A, Froemmel C.\r\n Inhomogeneous molecular density: reference packing densities and distribution of cavities within proteins.\r\n Bioinformatics. 2003 Nov 1;19(16):2112-21. \r\n\r\n\r\nAcknowledgements:\r\n    Fiete Haack\r\n    Cornelius Froemmel\r\n\r\n------------------------------------------------------------------------\r\n\r\nUsage Instructions\r\n\r\n------------------------------------------------------------------------\r\n\r\nVoronoia is a software for analyzing the packing of protein structures. It can calculate atomic packing measures, compare them to reference values, and discover atom-sized cavities in the protein interior. Voronoia has been developed for a Windows environment. It runs on Linux machines as well. On both operating systems, Voronoia also works as a plug-in for the PyMOL molecular viewer.\r\n\r\n------------------------------------------------------------------------ \n"
      },
      "source": "https://raw.githubusercontent.com/krother/Voronoia/master/README.TXT",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/krother/Voronoia/wiki"
      },
      "source": "https://raw.githubusercontent.com/krother/Voronoia/master/README.TXT",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/krother/Voronoia/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/krother/Voronoia/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "krother/Voronoia"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/krother/Voronoia/master/README.TXT",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Installation",
        "type": "Text_excerpt",
        "value": "\r\n1.1) On Windows\r\n\r\nUnzip the Voronoia.zip archive. There are two directories: 'standalone' and 'plugin'. In the 'standalone' directory, 'Voronoia_GUI.exe' starts the graphical interface. You can create a link icon on your Desktop for this one. 'Voronoia.exe' provides a command-line-tool, which is best used from a text console (in the Start Menu or by executing the 'cmd'). Just type 'Voronoia.exe' there.\r\nNone of the files should be moved out of its directory, but the 'standalone' directory may be moved as a whole without problems.\r\n\r\nTo use the PyMOL plugin, all contents of the 'plugin\\startup' directory should be copied to the 'PYMOL_DIR\\modules\\pmg_tk\\startup' directory. The Voronoia GUI then appears automatically each time PyMOL is started.  Substitute 'PYMOL_DIR' by the location where PyMOL is installed on your machine, most probably 'C:\\Program Files\\DeLano Scientific\\PyMOL\\'. We recommend using the 0.99 Version of PyMOL or newer.\r\n\r\nIf you don't want Voronoia to start each time with PyMOL, change the according switch in the startup/voronoia.py file.\r\n\r\n\r\n1.2) On Linux\r\n\r\nMost important thing first: To calculate packing data, you will need Wine (www.winehq.com). Without Wine, you can still create all kinds of reports from existing .vol packing files. \r\n\r\nTo install, Python 2.4 or higher and the Pmw library (1.2 or higher) must be installed. Unpack the Voronoia.tar.gz archive. To start the command-line application, type:\r\n\r\npython Voronoia.py\r\n\r\nFor the graphical interface:\r\n\r\npython Voronoia_GUI.py\r\n\r\nWine must be configured to run data/get_volume.exe (depends on your distribution). After you got it running, the 'EXECUTABLE' variable in the Voronoia.py module must be set to the proper Wine call. Of course, you may try to run Voronoia_GUI.exe from the Windows distribution directly by Wine, but we never tried this.\r\n\r\nTo use the PyMOL plugin, all contents of the 'plugin' directory should be copied to the '$PYMOL\\pmg_tk\\startup' directory. The Voronoia GUI then appears automatically each time PyMOL is started.  Substitute '$PYMOL' by the path where PyMOL modules are installed on your machine. This depends on your installation. It is *not* /usr/local/bin. Try places like /usr/local/pymol, /var/lib/python-support/python2.4/ or /usr/lib/python2.4/site-packages/ for the pmg_tk directory. We recommend using the 0.99 Version of PyMOL or newer.\r\n\r\nIf you don't want Voronoia to start each time with PyMOL, change the according switch in the startup/voronoia.py file.\r\n\r\n1.3) Peeping at the Source\r\n\r\nUnpack the archive. Installing works mostly as described in 1.2). The algorithm in 'get_volume.exe' is precompiled, so you will still require Wine on Linux.\r\n\r\n\r\n------------------------------------------------------------------------\r"
      },
      "source": "https://raw.githubusercontent.com/krother/Voronoia/master/README.TXT",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/krother/Voronoia/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Voronoia"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "krother"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 123990,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 40,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/krother/Voronoia/master/README.TXT"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 06:34:04",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 9
      },
      "technique": "GitHub_API"
    }
  ]
}