{
  "application_domain": [
    {
      "confidence": 26.16,
      "result": {
        "type": "String",
        "value": "Natural Language Processing"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/zhc940702/CGATCPred"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact",
        "type": "Text_excerpt",
        "value": "If you have any questions or suggestions with the code, please let us know. Contact Haochen Zhao at zhaohaochen@csu.edu.cn\n"
      },
      "source": "https://raw.githubusercontent.com/zhc940702/CGATCPred/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-12-23T11:48:02Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-12T08:34:27Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9881445306878799,
      "result": {
        "original_header": "CGATCPred",
        "type": "Text_excerpt",
        "value": "An end-to-end deep learning model based on CNN and GCN module, named CGATCPred, is developed to predict ATC codes for given compounds in first ATC level by integrating seven compoundcompound association scores and ATC label correlation graph. \n"
      },
      "source": "https://raw.githubusercontent.com/zhc940702/CGATCPred/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.879658411499146,
      "result": {
        "original_header": "Files:",
        "type": "Text_excerpt",
        "value": "1.data \nCh_one.pckl: The fingerprint similarity matrix of chemicals. \nCh_two.pckl: The activities similarity matrix of chemicals. \nCh_three.pckl: The reactions similarity matrix of chemicals. \nCh_four.pckl: The co-occurrence similarity matrix of chemicals. \nCh_five.pckl: The integrated similarity matrix of chemicals. \nThe above five matrices are all collected from the file \"Chemical_chemical.links.detailed.v5.0.tsv.gz\" in STITCH database (http://stitch.embl.de/). The row of each matrix represents the similarity value between a compound and all compounds in the benchmark dataset. The range of values is from 0 to 1. \nCh_six.pckl: The similarity matrix calculated by the online program SIMCOMP (http://www.genome.jp/tools/simcomp/). The row of the matrix represents the similarity value between a compound and all compounds in the benchmark dataset. The range of values is from 0 to 1. \nCh_seven.pckl: The chemical similarity matrix calculated by the online program SUBCOMP (http://www.genome.jp/tools/subcomp/). The row of the matrix represents the similarity value between a compound and all compounds in the benchmark dataset. The range of values is from 0 to 1. \nDrug_ATC_label.pckl: The benchmark dataset matrix. We employed the benchmark dataset that was first used in Chen et al.\u2019s study (Chen L, Zeng W M, Cai Y D, et al. Predicting anatomical therapeutic chemical (ATC) classification of drugs by integrating chemical-chemical interactions and similarities[J]. PloS one, 2012, 7(4): e35254.). A total of 3,883 drugs, represented by KEGG drug IDs, were obtained. These drugs were classified into 14 groups. The matrix has 3883 rows and 14 columns to store the known drug- ATC code associations. \nglove_wordEmbedding.pkl: ATC label word embeddings. We use the 300-dimensional Global Vectors (GloVe) trained on the Wikipedia dataset to represent the information of ATC labels (nodes) in the correlation graph. Each row of the matrix represents the word vector encoding of an ATC code. \nsingle_label.py: computing evaluation metric. This function can evaluate the prediction performance of a multi-label classifier. Evaluation indicators are: Hamming loss, Aiming, Coverage, Absolute true rate, Absolute false rate and Accuracy. \nnetwork_kfold.py: This function contains the network framework of our entire model and is based on pytorch 1.6. The model includes multiple CNN and GCN layers. \n"
      },
      "source": "https://raw.githubusercontent.com/zhc940702/CGATCPred/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8891642427883457,
      "result": {
        "original_header": "Require input files",
        "type": "Text_excerpt",
        "value": "SMSim: The fingerprint similarity matrix of chemicals. \nSMExp: The activities similarity matrix of chemicals. \nSMDat: The reactions similarity matrix of chemicals. \nSMTex: The co-occurrence similarity matrix of chemicals. \nSMCom: The integrated similarity matrix of chemicals. \nSMcp: The results of the online program (SIMCOMP). SIMCOMP is used to determine the maximal common substructure of two drugs and calculate the score based on the sizes of the common substructure and two drugs. SMcp can be calculated by the website (http://www.genome.jp/tools/simcomp/). \nCompound-ATC code association matrix: each row of the matrix corresponds to multiple ATC code labels of a compound. \nATC code word vector coding matrix: each row of the matrix corresponds to the ATC code word vector which can be obtained by using the \u2018torchtext\u2019 package in python.\n \n"
      },
      "source": "https://raw.githubusercontent.com/zhc940702/CGATCPred/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9276824955969691,
      "result": {
        "original_header": "Train and test folds",
        "type": "Text_excerpt",
        "value": "rawdata_dir: All input data should be placed in the folder of this path. (The data folder we uploaded contains all the required data.) \nnum_epochs: Define the maximum number of epochs. \nbatch_size: Define the number of batch size for training and testing. \nAll files of Data and Code should be stored in the same folder to run the model. \n"
      },
      "source": "https://raw.githubusercontent.com/zhc940702/CGATCPred/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/zhc940702/CGATCPred/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/zhc940702/CGATCPred/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "zhc940702/CGATCPred"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CGATCPred"
      },
      "source": "https://raw.githubusercontent.com/zhc940702/CGATCPred/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9984117352013027,
      "result": {
        "original_header": "Files:",
        "type": "Text_excerpt",
        "value": "If you want to view the value stored in the file, you can run the following command:\n```bash\nimport pickle\nimport numpy as np\ngii = open(\u2018data\u2019 + '/' + ' Ch_one.pckl', 'rb')\ndrug_feature_one = pickle.load(gii)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/zhc940702/CGATCPred/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9643064482196965,
      "result": {
        "original_header": "Require input files",
        "type": "Text_excerpt",
        "value": "The above five similarity matrices can be collected from the file \"Chemical_chemical.links.detailed.v5.0.tsv.gz\" in STITCH database. \n"
      },
      "source": "https://raw.githubusercontent.com/zhc940702/CGATCPred/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9956434593480136,
      "result": {
        "original_header": "Train and test folds",
        "type": "Text_excerpt",
        "value": "python cross_validation.py --rawdata_dir /Your path --model_dir /Your path --num_epochs Your number --batch_size Your number \n"
      },
      "source": "https://raw.githubusercontent.com/zhc940702/CGATCPred/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8713370057348133,
      "result": {
        "original_header": "Files:",
        "type": "Text_excerpt",
        "value": "If you want to view the value stored in the file, you can run the following command:\n```bash\nimport pickle\nimport numpy as np\ngii = open(\u2018data\u2019 + '/' + ' Ch_one.pckl', 'rb')\ndrug_feature_one = pickle.load(gii)\n```\n \ncross_validation.py: This function can test the predictive performance of our model under ten-fold cross-validation. \n"
      },
      "source": "https://raw.githubusercontent.com/zhc940702/CGATCPred/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9624291621018273,
      "result": {
        "original_header": "Train and test folds",
        "type": "Text_excerpt",
        "value": "Example:\n```bash\npython cross_validation.py --rawdata_dir /data --model_dir /save_model --num_epochs 50 --batch_size 128\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/zhc940702/CGATCPred/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/zhc940702/CGATCPred/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CGATCPred"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "zhc940702"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 25258,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zhc940702/CGATCPred/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "type": "Text_excerpt",
        "value": "* python == 3.6\n* pytorch == 1.6\n* Numpy == 1.16.2\n* scikit-learn == 0.21.3\n\n"
      },
      "source": "https://raw.githubusercontent.com/zhc940702/CGATCPred/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 07:34:28",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ]
}