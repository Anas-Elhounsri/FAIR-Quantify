{
  "application_domain": [
    {
      "confidence": 9.47,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    },
    {
      "confidence": 44.28,
      "result": {
        "type": "String",
        "value": "Reinforcement Learning"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "format": "cff",
        "type": "File_dump",
        "value": "# YAML 1.2\n---\nabstract: \"Neuroscience needs behavior, and behavioral experiments require the coordination of large numbers of heterogeneous hardware components and data streams. Currently available tools strongly limit the complexity and reproducibility of experiments. Here we introduce Autopilot, a complete, open-source Python framework for behavioral neuroscience that distributes experiments over networked swarms of Raspberry Pis. Autopilot enables qualitatively greater experimental flexibility by allowing arbitrary numbers of hardware components to be combined in arbitrary experimental designs. Research is made reproducible by documenting all data and task design parameters in a human-readable and publishable format at the time of collection. Autopilot provides an order-of-magnitude performance improvement over existing tools while also being an order of magnitude less costly to implement. Autopilot\u2019s flexible, scalable architecture allows neuroscientists to design the next generation of experiments to investigate the behaving brain.\"\nauthors: \n  -\n    family-names: Saunders\n    given-names: Jonny\n    name-particle: \"L.\"\n    orcid: \"https://orcid.org/0000-0003-0545-5066\"\n  -\n    family-names: Wehr\n    given-names: Michael\n    orcid: \"https://orcid.org/0000-0003-3485-7697\"\ncff-version: \"1.1.0\"\ndate-released: 2019-10-17\ndoi: \"10.1101/807693\"\nkeywords: \nlicense: \"MPL-2.0\"\nmessage: \"If you use this software, please cite it using these metadata.\"\nrepository-code: \"https://github.com/auto-pi-lot/autopilot\"\ntitle: \"Autopilot: Automating behavioral experiments with lots of Raspberry Pis\"\nversion: \"0.4.4\"\n..."
      },
      "source": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/CITATION.cff",
      "technique": "file_exploration"
    }
  ],
  "code_of_conduct": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our community include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at JLSaunders987 _atsymbol_ gmail _period_ com. All complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the reporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series of actions.\n\n**Consequence**: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including sustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior,  harassment of an individual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within the community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 2.0,\navailable at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct enforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.\n\n"
      },
      "source": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/CODE_OF_CONDUCT.md",
      "technique": "file_exploration"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/auto-pi-lot/autopilot"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Contributing docs are just a stub for now!!!\n\n# Update Checklist\n\n* Docs up-to-date\n* Requirements re-frozen\n* Changelog, To-Do are updated\n"
      },
      "source": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/CONTRIBUTING.md",
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2017-07-18T00:10:49Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-30T07:33:27Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Distributed behavioral experiments"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9763036754600958,
      "result": {
        "original_header": "Autopilot",
        "type": "Text_excerpt",
        "value": "building a new kind of p2p networking module to support a reworked autopilot 2.0. We will write a more\ndetailed blogpost about lessons learned from autopilot soon.  \nAutopilot is not dead, it is merely resting <3 \nAutopilot is a Python framework for performing complex, hardware-intensive behavioral experiments with swarms of networked Raspberry Pis. \nAs a tool, it provides researchers with a toolkit of flexible modules to design experiments without rigid programming & API limitations. \nAs a vision, it dreams of bridging the chaotic hacky creativity of scientific programmers with a standardized, \ncommunally developed library of reproducible experiment prototypes. \n* **Flexibility** - Autopilot was designed for any hardware and any experiment -- \n  its hardware API is designed to give a structured wrapper around the code you already use, and its task design is\n  entirely non-prescriptive. It attempts to eliminate the need for researchers to use a patchwork of mutually incompatible tools to perform complex\n  experiments. Autopilot is a hacker's plaything -- rather than a uniform, simplified experience,\n  its modular design and complete API-level documentation is meant to encourage users to make and break core Autopilot modules.\n* **Efficiency** - Autopilot uses Python as a glue around high-performance, low-level libraries,\n  and is fully concurrent across multiple threads, processes, and computers. Its distributed\n  design eliminates the hard limits faced by by single-computer\n  systems, letting researchers use arbitrary numbers and combinations of hardware components\n  to perform complex, hardware-intensive experiments at scale.\n* **Reproducibility** - Autopilot obsessively documents data provenance,\n  logging the entire history of an Animal's training, including any version and local\n  code changes. Any part of an experiment that isn't documented is considered a bug. By integrating experiments and producing data that is\n  clean at the time of acquisition, Autopilot makes it easy to do good science -- its goal is to allow\n  exact experimental replication from a single file. \n  \n \n"
      },
      "source": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9321328228843306,
      "result": {
        "original_header": "Distributed Behavior",
        "type": "Text_excerpt",
        "value": "Autopilot's premise is simple: to scale experiments, *just use more computers*. \nAutopilot systems consist of multiple \"Agents\" -- computers with specialized roles in the swarm.\nOne user-facing \"Terminal\" agent allows a researcher to control many \"Pilots,\" or computers that perform experiments (typically the beloved Raspberry Pi).\nEach Pilot can coordinate one or many \"Children\" to offload subsets of an experiment's computational or hardware requirements.\nUsers can use and misuse Autopilot's flexible modules to make whatever agent topology they need <3.  \n"
      },
      "source": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9406947064669717,
      "result": {
        "original_header": "Module Overview",
        "type": "Text_excerpt",
        "value": "Autopilot divides the logical structure of experiments into independent<sup>1</sup> modules: \n| | Module |\n| :-: | --- |\n| ![Hardware](docs/_images/icon_agent.png) | **Agents - [Pilot](https://docs.auto-pi-lot.com/en/latest/autopilot.core.pilot.html) & [Terminal](https://docs.auto-pi-lot.com/en/latest/autopilot.core.terminal.html)** Runtime classes that encapsulate a computer/Pi's role in the swarm. Terminals provide the user interface and coordinate subjects and tasks, Pilots do the experiments. Formalizing the Agent API to allow additional agents like Compute or Surveillance agents is a major short-term development goal! |\n| ![Hardware](docs/_images/icon_hardware.png) | **[Hardware](https://docs.auto-pi-lot.com/en/latest/autopilot.hardware.html)** - Control your tools! Extensible classes to control whatever hardware you've got. |\n| ![Hardware](docs/_images/icon_stim.png) | **[Stimuli](https://docs.auto-pi-lot.com/en/latest/autopilot.stim.html)** - Stimulus management and presentation. Parametric sound generation with a realtime audio server built on Jackd. Stubs are present for future development of visual stimuli using Psychopy. |\n| ![Hardware](docs/_images/icon_task.png) | **[Tasks](https://docs.auto-pi-lot.com/en/latest/autopilot.tasks.html)** - Build experiments! Write some basic metadata to describe data, plots, and hardware and the rest is up to you :)  |\n| ![Hardware](docs/_images/icon_data.png) | **[Subject](https://docs.auto-pi-lot.com/en/latest/autopilot.core.subject.html)** - Data management with hdf5 and pyTables. Abstraction layer for keeping obsessive records of subject history and system configuration |\n| ![Hardware](docs/_images/icon_transform.png) | **[Transforms](https://docs.auto-pi-lot.com/en/latest/autopilot.transform.html)** - Composable data transformations. Need to control the pitch of a sound with a video? build a transformation pipeline to connect your objects |\n| ![Hardware](docs/_images/icon_gui.png) | **[UI](https://docs.auto-pi-lot.com/en/latest/autopilot.core.gui.html)** - UI for controlling swarms of Pilots using Qt5/PySide2 |\n| ![Hardware](docs/_images/icon_viz.png) | **[Visualization](https://docs.auto-pi-lot.com/en/latest/autopilot.viz.html)** - (Mostly Prototypes) to do common visualizations | \n"
      },
      "source": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9561949116545481,
      "result": {
        "original_header": "Branch Map",
        "type": "Text_excerpt",
        "value": "* [`dev`](https://github.com/auto-pi-lot/autopilot/tree/dev) - main development branch that collects hotfixes, PRs, etc. Unstable but usually has lots of extra goodies\n* [`hotfix`](https://github.com/auto-pi-lot/autopilot/tree/hotfix) - branches from `dev` for building and testing hotfixes, PRs back to `dev`.\n* [`lab`](https://github.com/auto-pi-lot/autopilot/tree/lab) - branches from `dev` but doesn't necessarily PR back, the local branch used in the maintaining ([Wehr](http://uoneuro.uoregon.edu/wehr/)) lab\n* [`parallax`](https://github.com/auto-pi-lot/autopilot/tree/parallax) - experimental departure from `dev` to implement a particular experiment and rebuild a lot of components along the way, will eventually return to `dev` <3\n \n"
      },
      "source": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.994756407280131,
      "result": {
        "original_header": "Short-Term",
        "type": "Text_excerpt",
        "value": "* [`v0.4.0`](https://github.com/auto-pi-lot/autopilot/milestone/1) - Implement registries to separate user code extensions like tasks and local hardware devices in a user directory, preserve source code in produced data so local development isn't lost. \n* [`v0.5.0`](https://github.com/auto-pi-lot/autopilot/milestone/2) - Make a unitary inheritance structure from a root Autopilot object such that a) common operations like logging and networking are implemented only once, b) the plugin system for `v0.4.0` can not only add new objects, but replace core objects while maintaining provenance (ie. no monkey patching needed), c) object behavior that requires coordination across multiple instances gets much easier, making some magical things like self-healing self-discovering networking possible. This will also include a major refactoring of the code structure, finally breaking up some of the truly monstrous thousand-line modules in `core` into an actually modular system we can build from <3\n \n"
      },
      "source": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9148373898355104,
      "result": {
        "original_header": "What's new?",
        "type": "Text_excerpt",
        "value": "After much ado, we're releasing Autopilot's first major upgrade. Cameras, Continuous data, DeepLabCut, and a lot more! \n- Autopilot has moved to Python 3!! (Tested on 3.6-3.8)\n- Capturing video with OpenCV and the Spinnaker SDK is now supported (See autopilot.hardware.cameras)\n- An I2C_9DOF motion sensor and the MLX90640 temperature sensor are now supported.\n- Timestamps from GPIO events are now microsecond-precise thanks to some modifications to the pigpio library\n- GPIO output timing is also microsecond-precise thanks to the use of pigpio scripts, so you can deliver exactly the reward volumes you intend <3\n- Hardware modules have been refactored into their own module, and have been almost wholly rebuilt to have sensible inheritance structure.\n- Networking modules are more efficient and automatically compress arrays (like video frames!) on transmission. Streaming is also easier now, check out Net_Node.get_stream() !\n- We now have a detailed development roadmap , so you can see the magnificent future we have planned.\n- We have created the autopilot-users discussion board for troubleshooting & coordinating community development :) \n"
      },
      "source": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/wehr-lab/autopilot/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/examples/wiki_integration.ipynb"
      },
      "source": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/examples/wiki_integration.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/examples/transforms/example_transformation_dlc.ipynb"
      },
      "source": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/examples/transforms/example_transformation_dlc.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 24
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/auto-pi-lot/autopilot/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "auto-pi-lot/autopilot"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Maintenance Mode"
      },
      "source": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/autopilot/setup/install_pyspin.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/autopilot/setup/setup_mlx90640.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/docs/_images/docs_link.png"
      },
      "source": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/docs/_images/paper_link.png"
      },
      "source": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/docs/_images/discussion_link.png"
      },
      "source": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/docs/_images/hardware_link.png"
      },
      "source": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/docs/_images/whole_system_black.png"
      },
      "source": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/docs/_images/icon_agent.png"
      },
      "source": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/docs/_images/icon_hardware.png"
      },
      "source": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/docs/_images/icon_stim.png"
      },
      "source": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/docs/_images/icon_task.png"
      },
      "source": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/docs/_images/icon_data.png"
      },
      "source": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/docs/_images/icon_transform.png"
      },
      "source": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/docs/_images/icon_gui.png"
      },
      "source": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/docs/_images/icon_viz.png"
      },
      "source": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/docs/_images/installer.png"
      },
      "source": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9718686320355809,
      "result": {
        "original_header": "Branch Map",
        "type": "Text_excerpt",
        "value": "* [`dev`](https://github.com/auto-pi-lot/autopilot/tree/dev) - main development branch that collects hotfixes, PRs, etc. Unstable but usually has lots of extra goodies\n* [`hotfix`](https://github.com/auto-pi-lot/autopilot/tree/hotfix) - branches from `dev` for building and testing hotfixes, PRs back to `dev`.\n* [`lab`](https://github.com/auto-pi-lot/autopilot/tree/lab) - branches from `dev` but doesn't necessarily PR back, the local branch used in the maintaining ([Wehr](http://uoneuro.uoregon.edu/wehr/)) lab\n* [`parallax`](https://github.com/auto-pi-lot/autopilot/tree/parallax) - experimental departure from `dev` to implement a particular experiment and rebuild a lot of components along the way, will eventually return to `dev` <3\n \n"
      },
      "source": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9241396731273297,
      "result": {
        "original_header": "Supported Systems",
        "type": "Text_excerpt",
        "value": "**OS** \n- Ubuntu >=16.04\n- raspiOS >=Buster \n**Python Versions** \n- Raspi>=3b (Raspi 4 strongly recommended!)\n \n"
      },
      "source": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/auto-pi-lot/autopilot/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "behavioral-neuroscience, neuroscience, python"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Mozilla Public License 2.0",
        "spdx_id": "MPL-2.0",
        "type": "License",
        "url": "https://api.github.com/licenses/mpl-2.0",
        "value": "https://api.github.com/licenses/mpl-2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Mozilla Public License Version 2.0\n==================================\n\n1. Definitions\n--------------\n\n1.1. \"Contributor\"\n    means each individual or legal entity that creates, contributes to\n    the creation of, or owns Covered Software.\n\n1.2. \"Contributor Version\"\n    means the combination of the Contributions of others (if any) used\n    by a Contributor and that particular Contributor's Contribution.\n\n1.3. \"Contribution\"\n    means Covered Software of a particular Contributor.\n\n1.4. \"Covered Software\"\n    means Source Code Form to which the initial Contributor has attached\n    the notice in Exhibit A, the Executable Form of such Source Code\n    Form, and Modifications of such Source Code Form, in each case\n    including portions thereof.\n\n1.5. \"Incompatible With Secondary Licenses\"\n    means\n\n    (a) that the initial Contributor has attached the notice described\n        in Exhibit B to the Covered Software; or\n\n    (b) that the Covered Software was made available under the terms of\n        version 1.1 or earlier of the License, but not also under the\n        terms of a Secondary License.\n\n1.6. \"Executable Form\"\n    means any form of the work other than Source Code Form.\n\n1.7. \"Larger Work\"\n    means a work that combines Covered Software with other material, in \n    a separate file or files, that is not Covered Software.\n\n1.8. \"License\"\n    means this document.\n\n1.9. \"Licensable\"\n    means having the right to grant, to the maximum extent possible,\n    whether at the time of the initial grant or subsequently, any and\n    all of the rights conveyed by this License.\n\n1.10. \"Modifications\"\n    means any of the following:\n\n    (a) any file in Source Code Form that results from an addition to,\n        deletion from, or modification of the contents of Covered\n        Software; or\n\n    (b) any new file in Source Code Form that contains any Covered\n        Software.\n\n1.11. \"Patent Claims\" of a Contributor\n    means any patent claim(s), including without limitation, method,\n    process, and apparatus claims, in any patent Licensable by such\n    Contributor that would be infringed, but for the grant of the\n    License, by the making, using, selling, offering for sale, having\n    made, import, or transfer of either its Contributions or its\n    Contributor Version.\n\n1.12. \"Secondary License\"\n    means either the GNU General Public License, Version 2.0, the GNU\n    Lesser General Public License, Version 2.1, the GNU Affero General\n    Public License, Version 3.0, or any later versions of those\n    licenses.\n\n1.13. \"Source Code Form\"\n    means the form of the work preferred for making modifications.\n\n1.14. \"You\" (or \"Your\")\n    means an individual or a legal entity exercising rights under this\n    License. For legal entities, \"You\" includes any entity that\n    controls, is controlled by, or is under common control with You. For\n    purposes of this definition, \"control\" means (a) the power, direct\n    or indirect, to cause the direction or management of such entity,\n    whether by contract or otherwise, or (b) ownership of more than\n    fifty percent (50%) of the outstanding shares or beneficial\n    ownership of such entity.\n\n2. License Grants and Conditions\n--------------------------------\n\n2.1. Grants\n\nEach Contributor hereby grants You a world-wide, royalty-free,\nnon-exclusive license:\n\n(a) under intellectual property rights (other than patent or trademark)\n    Licensable by such Contributor to use, reproduce, make available,\n    modify, display, perform, distribute, and otherwise exploit its\n    Contributions, either on an unmodified basis, with Modifications, or\n    as part of a Larger Work; and\n\n(b) under Patent Claims of such Contributor to make, use, sell, offer\n    for sale, have made, import, and otherwise transfer either its\n    Contributions or its Contributor Version.\n\n2.2. Effective Date\n\nThe licenses granted in Section 2.1 with respect to any Contribution\nbecome effective for each Contribution on the date the Contributor first\ndistributes such Contribution.\n\n2.3. Limitations on Grant Scope\n\nThe licenses granted in this Section 2 are the only rights granted under\nthis License. No additional rights or licenses will be implied from the\ndistribution or licensing of Covered Software under this License.\nNotwithstanding Section 2.1(b) above, no patent license is granted by a\nContributor:\n\n(a) for any code that a Contributor has removed from Covered Software;\n    or\n\n(b) for infringements caused by: (i) Your and any other third party's\n    modifications of Covered Software, or (ii) the combination of its\n    Contributions with other software (except as part of its Contributor\n    Version); or\n\n(c) under Patent Claims infringed by Covered Software in the absence of\n    its Contributions.\n\nThis License does not grant any rights in the trademarks, service marks,\nor logos of any Contributor (except as may be necessary to comply with\nthe notice requirements in Section 3.4).\n\n2.4. Subsequent Licenses\n\nNo Contributor makes additional grants as a result of Your choice to\ndistribute the Covered Software under a subsequent version of this\nLicense (see Section 10.2) or under the terms of a Secondary License (if\npermitted under the terms of Section 3.3).\n\n2.5. Representation\n\nEach Contributor represents that the Contributor believes its\nContributions are its original creation(s) or it has sufficient rights\nto grant the rights to its Contributions conveyed by this License.\n\n2.6. Fair Use\n\nThis License is not intended to limit any rights You have under\napplicable copyright doctrines of fair use, fair dealing, or other\nequivalents.\n\n2.7. Conditions\n\nSections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted\nin Section 2.1.\n\n3. Responsibilities\n-------------------\n\n3.1. Distribution of Source Form\n\nAll distribution of Covered Software in Source Code Form, including any\nModifications that You create or to which You contribute, must be under\nthe terms of this License. You must inform recipients that the Source\nCode Form of the Covered Software is governed by the terms of this\nLicense, and how they can obtain a copy of this License. You may not\nattempt to alter or restrict the recipients' rights in the Source Code\nForm.\n\n3.2. Distribution of Executable Form\n\nIf You distribute Covered Software in Executable Form then:\n\n(a) such Covered Software must also be made available in Source Code\n    Form, as described in Section 3.1, and You must inform recipients of\n    the Executable Form how they can obtain a copy of such Source Code\n    Form by reasonable means in a timely manner, at a charge no more\n    than the cost of distribution to the recipient; and\n\n(b) You may distribute such Executable Form under the terms of this\n    License, or sublicense it under different terms, provided that the\n    license for the Executable Form does not attempt to limit or alter\n    the recipients' rights in the Source Code Form under this License.\n\n3.3. Distribution of a Larger Work\n\nYou may create and distribute a Larger Work under terms of Your choice,\nprovided that You also comply with the requirements of this License for\nthe Covered Software. If the Larger Work is a combination of Covered\nSoftware with a work governed by one or more Secondary Licenses, and the\nCovered Software is not Incompatible With Secondary Licenses, this\nLicense permits You to additionally distribute such Covered Software\nunder the terms of such Secondary License(s), so that the recipient of\nthe Larger Work may, at their option, further distribute the Covered\nSoftware under the terms of either this License or such Secondary\nLicense(s).\n\n3.4. Notices\n\nYou may not remove or alter the substance of any license notices\n(including copyright notices, patent notices, disclaimers of warranty,\nor limitations of liability) contained within the Source Code Form of\nthe Covered Software, except that You may alter any license notices to\nthe extent required to remedy known factual inaccuracies.\n\n3.5. Application of Additional Terms\n\nYou may choose to offer, and to charge a fee for, warranty, support,\nindemnity or liability obligations to one or more recipients of Covered\nSoftware. However, You may do so only on Your own behalf, and not on\nbehalf of any Contributor. You must make it absolutely clear that any\nsuch warranty, support, indemnity, or liability obligation is offered by\nYou alone, and You hereby agree to indemnify every Contributor for any\nliability incurred by such Contributor as a result of warranty, support,\nindemnity or liability terms You offer. You may include additional\ndisclaimers of warranty and limitations of liability specific to any\njurisdiction.\n\n4. Inability to Comply Due to Statute or Regulation\n---------------------------------------------------\n\nIf it is impossible for You to comply with any of the terms of this\nLicense with respect to some or all of the Covered Software due to\nstatute, judicial order, or regulation then You must: (a) comply with\nthe terms of this License to the maximum extent possible; and (b)\ndescribe the limitations and the code they affect. Such description must\nbe placed in a text file included with all distributions of the Covered\nSoftware under this License. Except to the extent prohibited by statute\nor regulation, such description must be sufficiently detailed for a\nrecipient of ordinary skill to be able to understand it.\n\n5. Termination\n--------------\n\n5.1. The rights granted under this License will terminate automatically\nif You fail to comply with any of its terms. However, if You become\ncompliant, then the rights granted under this License from a particular\nContributor are reinstated (a) provisionally, unless and until such\nContributor explicitly and finally terminates Your grants, and (b) on an\nongoing basis, if such Contributor fails to notify You of the\nnon-compliance by some reasonable means prior to 60 days after You have\ncome back into compliance. Moreover, Your grants from a particular\nContributor are reinstated on an ongoing basis if such Contributor\nnotifies You of the non-compliance by some reasonable means, this is the\nfirst time You have received notice of non-compliance with this License\nfrom such Contributor, and You become compliant prior to 30 days after\nYour receipt of the notice.\n\n5.2. If You initiate litigation against any entity by asserting a patent\ninfringement claim (excluding declaratory judgment actions,\ncounter-claims, and cross-claims) alleging that a Contributor Version\ndirectly or indirectly infringes any patent, then the rights granted to\nYou by any and all Contributors for the Covered Software under Section\n2.1 of this License shall terminate.\n\n5.3. In the event of termination under Sections 5.1 or 5.2 above, all\nend user license agreements (excluding distributors and resellers) which\nhave been validly granted by You or Your distributors under this License\nprior to termination shall survive termination.\n\n************************************************************************\n*                                                                      *\n*  6. Disclaimer of Warranty                                           *\n*  -------------------------                                           *\n*                                                                      *\n*  Covered Software is provided under this License on an \"as is\"       *\n*  basis, without warranty of any kind, either expressed, implied, or  *\n*  statutory, including, without limitation, warranties that the       *\n*  Covered Software is free of defects, merchantable, fit for a        *\n*  particular purpose or non-infringing. The entire risk as to the     *\n*  quality and performance of the Covered Software is with You.        *\n*  Should any Covered Software prove defective in any respect, You     *\n*  (not any Contributor) assume the cost of any necessary servicing,   *\n*  repair, or correction. This disclaimer of warranty constitutes an   *\n*  essential part of this License. No use of any Covered Software is   *\n*  authorized under this License except under this disclaimer.         *\n*                                                                      *\n************************************************************************\n\n************************************************************************\n*                                                                      *\n*  7. Limitation of Liability                                          *\n*  --------------------------                                          *\n*                                                                      *\n*  Under no circumstances and under no legal theory, whether tort      *\n*  (including negligence), contract, or otherwise, shall any           *\n*  Contributor, or anyone who distributes Covered Software as          *\n*  permitted above, be liable to You for any direct, indirect,         *\n*  special, incidental, or consequential damages of any character      *\n*  including, without limitation, damages for lost profits, loss of    *\n*  goodwill, work stoppage, computer failure or malfunction, or any    *\n*  and all other commercial damages or losses, even if such party      *\n*  shall have been informed of the possibility of such damages. This   *\n*  limitation of liability shall not apply to liability for death or   *\n*  personal injury resulting from such party's negligence to the       *\n*  extent applicable law prohibits such limitation. Some               *\n*  jurisdictions do not allow the exclusion or limitation of           *\n*  incidental or consequential damages, so this exclusion and          *\n*  limitation may not apply to You.                                    *\n*                                                                      *\n************************************************************************\n\n8. Litigation\n-------------\n\nAny litigation relating to this License may be brought only in the\ncourts of a jurisdiction where the defendant maintains its principal\nplace of business and such litigation shall be governed by laws of that\njurisdiction, without reference to its conflict-of-law provisions.\nNothing in this Section shall prevent a party's ability to bring\ncross-claims or counter-claims.\n\n9. Miscellaneous\n----------------\n\nThis License represents the complete agreement concerning the subject\nmatter hereof. If any provision of this License is held to be\nunenforceable, such provision shall be reformed only to the extent\nnecessary to make it enforceable. Any law or regulation which provides\nthat the language of a contract shall be construed against the drafter\nshall not be used to construe this License against a Contributor.\n\n10. Versions of the License\n---------------------------\n\n10.1. New Versions\n\nMozilla Foundation is the license steward. Except as provided in Section\n10.3, no one other than the license steward has the right to modify or\npublish new versions of this License. Each version will be given a\ndistinguishing version number.\n\n10.2. Effect of New Versions\n\nYou may distribute the Covered Software under the terms of the version\nof the License under which You originally received the Covered Software,\nor under the terms of any subsequent version published by the license\nsteward.\n\n10.3. Modified Versions\n\nIf you create software not governed by this License, and you want to\ncreate a new license for such software, you may create and use a\nmodified version of this License if you rename the license and remove\nany references to the name of the license steward (except to note that\nsuch modified license differs from this License).\n\n10.4. Distributing Source Code Form that is Incompatible With Secondary\nLicenses\n\nIf You choose to distribute Source Code Form that is Incompatible With\nSecondary Licenses under the terms of this version of the License, the\nnotice described in Exhibit B of this License must be attached.\n\nExhibit A - Source Code Form License Notice\n-------------------------------------------\n\n  This Source Code Form is subject to the terms of the Mozilla Public\n  License, v. 2.0. If a copy of the MPL was not distributed with this\n  file, You can obtain one at http://mozilla.org/MPL/2.0/.\n\nIf it is not possible or desirable to put the notice in a particular\nfile, then You may include the notice in a location (such as a LICENSE\nfile in a relevant directory) where a recipient would be likely to look\nfor such a notice.\n\nYou may add additional accurate notices of copyright ownership.\n\nExhibit B - \"Incompatible With Secondary Licenses\" Notice\n---------------------------------------------------------\n\n  This Source Code Form is \"Incompatible With Secondary Licenses\", as\n  defined by the Mozilla Public License, v. 2.0.\n"
      },
      "source": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/docs/_images/autopilot_logo_banner.png"
      },
      "source": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "autopilot"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "auto-pi-lot"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 1085405,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 5249,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Roff",
        "size": 1794,
        "type": "Programming_language",
        "value": "Roff"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sneakers-the-rat",
          "type": "User"
        },
        "date_created": "2024-07-09T23:41:27Z",
        "date_published": "2024-07-09T23:43:05Z",
        "description": "Fixes to keep it sort of running and catch up on dependency drift....\r\n\r\nStill haven't gotten pyside6 to work yet though which is a PROBLEM\r\n\r\n- [#211](https://github.com/auto-pi-lot/autopilot/pull/211)\r\n  - Fix: [#209](https://github.com/auto-pi-lot/autopilot/issues/209) - update location of dtoverlays\r\n  - Convert travis-based tests to github actions so they actually run\r\n  - Don't raise `NotImplementedError` in datajoint module on import - what the hell was i thinking lmao\r\n  - don't access deprecated alias `np.float`, just use `float`\r\n  - fix a bunch of docs stuff to make it build\r\n  - update dep versions and remove some upper bounds\r\n",
        "html_url": "https://github.com/auto-pi-lot/autopilot/releases/tag/v0.5.1",
        "name": "v0.5.1 - Light maintenance fixes",
        "release_id": 164697219,
        "tag": "v0.5.1",
        "tarball_url": "https://api.github.com/repos/auto-pi-lot/autopilot/tarball/v0.5.1",
        "type": "Release",
        "url": "https://api.github.com/repos/auto-pi-lot/autopilot/releases/164697219",
        "value": "https://api.github.com/repos/auto-pi-lot/autopilot/releases/164697219",
        "zipball_url": "https://api.github.com/repos/auto-pi-lot/autopilot/zipball/v0.5.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sneakers-the-rat",
          "type": "User"
        },
        "date_created": "2022-06-02T02:49:51Z",
        "date_published": "2022-06-02T03:44:41Z",
        "description": "# v0.5.0a0 - ~ The Data Modeling Edition ~\r\n\r\nA lot. Namely a whole rewriting of the {mod}`autopilot.data` module.\r\n\r\nThis is being released as an alpha version while we finish working out a few of the kinks in the data modeling \r\nsystem because Jonny is finishing their dissertation and has a deadline determined by the viscera of \r\ninstitutional science rather than software development!\r\n\r\n## Upgrading From <v0.5.0\r\n\r\n- The subject class will attempt to update any of your existing\r\n  .h5 files to the new format -- it should be nondestructive (making a backup of the whole file first\r\n  and then making backups up any tables that it can't create a new version of that fully preserves\r\n  the data from the previous version), but don't be alarmed when your subject files start updating!\r\n  We advise, as we always do, making a full backup of your data directory before making this update.\r\n- Change references in `launch_autopilot.sh` scripts from `autopilot.core.terminal` or `autopilot.core.pilot` \r\n  to `autopilot.agents.terminal` or `autopilot.agents.pilot`, respectively\r\n- Update any `TrialData` declarations in plugin tasks to use the new {class}`.Trial_Data` model. See {attr}`.Nafc.TrialData` for an example.\r\n  The old pytables IsDescriptor style descriptions will still  work, but you will be given a warning every time.\r\n- We advise updating pigpio to at least [`3c23715`](https://github.com/sneakers-the-rat/pigpio/commit/3c237159e5995ec58cd673579bdd66a8d819b269) to\r\n  avoid warnings and make use of some new functionality.\r\n\r\n## Package Structure\r\n\r\n- The `autopilot.core` module was removed entirely, and was split into\r\n  - {mod}`autopilot.agent`: which contains the {class}`.Terminal` and {class}`.Pilot` classes and a stub metaclass\r\n  - {mod}`autopilot.utils.loggers`: formerly `autopilot.core.loggers`\r\n  - {mod}`autopilot.gui` (described in module documentation) now has all the GUI modules, split out by type rather than all in one file.\r\n  - {mod}`autopilot.data` was created from `autopilot.core.subject`, see below.\r\n- {mod}`autopilot.root` contains root classes: \r\n  - {class}`.Autopilot_Type` - types and data models for handling and saving live data\r\n  - {class}`.Autopilot_Object` - General root metaclass, beneath which will be top-level metaclasses for each of the major\r\n    class hierarchies that are currently separate.\r\n  - {class}`.Autopilot_Pref` - Stub for later converting prefs and environmental configuration parameters from their scattered state.\r\n- {mod}`autopilot.exceptions` will be used for more explicit exception handling.\r\n- Code files were given `755` permissions to allow execution (as opposed to `644`)\r\n- The unused git submodules for pigpio and an old temperature sensor were removed.\r\n\r\n## Major updates\r\n\r\n- {mod}`autopilot.data` is the major change in this release! See the module-level doc page for more details\r\n  - `autopilot.core.subject` was moved to {mod}`autopilot.data.subject` and remains the main interface to autopilot data.\r\n    It was effectively rewritten to accomodate the use of data models, and many of its public methods were made private to\r\n    make its use more obvious.\r\n    - The subject structure that determines which things are located where has been made into its own class {class}`.Subject_Structure`\r\n    - Making new subjects is now done with the {meth}`.Subject.new` class method rather than from the `__init__` method\r\n    - The `open_hdf` method has been replaced with the `_h5f` private method that is a more explicit context manager allowing\r\n      locking read/write access and nonlocking read access\r\n    - The subject file now explicitly handles updates between different versions of the Subject class. \r\n    - Subject will check if the protocol `.json` file has been updated from when it was assigned and automatically update to the new version,\r\n      logging the change.\r\n    - All trial data is now saved with a `session_uuid` unique identifier column that is an always-unique key in case of any\r\n      overlapping session IDs from reassignments, etc.\r\n    - Many attributes were replaced by properties that return data models:\r\n      - {attr}`.Subject.bio` and {attr}`.Subject.info` ->  {class}`.Biography`\r\n      - {attr}`.Subject.protocol` -> {class}`.Protocol_Status`, which manages the current trial, session, step, etc. rather than being treated separately\r\n  - {mod}`autopilot.data.interfaces` contains classes to relate abstract data models to different representations and formats\r\n    - {mod}`.interfaces.datajoint` allows creating datajoint schema definitions from autopilot models using the\r\n      companion [datajoint-babel](https://github.com/auto-pi-lot/datajoint-babel) project\r\n    - {mod}`.interfaces.tables` translates pydantic models to HDF5 files\r\n  - {mod}`autopilot.data.modeling` has basic types for use in data models\r\n  - {mod}`autopilot.data.models` has the models themselves\r\n  - {mod}`autopilot.data.units` stub module for using explicit units instead of anonymous floats\r\n- A new set of general model filling widgets - {mod}`.widgets.input` and {mod}`.widgets.model` - were created that will\r\n  eventually replace much of the existing GUI which suffers from code duplication problems from minor variations between\r\n  representations of parameters, etc.\r\n- {class}`~.loggers.Log`, {class}`.Log_Format`, {class}`.LogEntry`, {class}`.ParseError`, \r\n  {data}`.MESSAGE_FORMATS`, {data}`.LOG_FORMATS` were added to allow programmatic loading of logfiles, and {mod}`.utils.log_parsers` \r\n  was added to allow recovery of structured data (eg. from logged trial data). Loggers now use the [rich logging handler](https://rich.readthedocs.io/en/stable/logging.html)\r\n  for much more readable logs in stderr.\r\n- {class}`.Jack_Sound` classes now put all frames at once into the processing queue, rather than one at a time for much less\r\n  variability in sound onset jitter. The {class}`.JackClient` class was updated to reflect that as well by adding a `play_q_size`\r\n  argument that controls the size of the deque used to store frames to play (rather than pulling each from a Queue as was done before). {class}`.JackClient`\r\n  also has an optional `disable_gc` (False by default) parameter that allows the garbage collector to be disabled\r\n  in the process for further (unquantified) jitter reduction.\r\n\r\n## Minor updates\r\n\r\n- The bandwidth test ({class}`.Bandwidth_Test` widget and {meth}`.Pilot.l_bandwidth` listen) was updated to allow selecting\r\n  compression, use of a random array, or preserialized messages\r\n- The {mod}`.Terminal` now closes cleanly (still with a warning of leaked semaphors) without hanging.\r\n- External processes {func}`.external.start_pigpiod` and {func}`.external.start_jackd` first check if the process is already started\r\n- {meth}`.Digital_Out.set` now has a ``result`` argument for faster setting that doesn't confirm the result when ``False``\r\n- {class}`.Message` s now provide clearer support for compression in serialization, and automatically detect and handle\r\n  a compressed message when deserializing. This is also carried through to the {meth}`.Net_Node.send` method.\r\n- {meth}`.Station.l_kill` was moved up to the top level {class}`.Station` class, rather than being something the Terminal station owns.\r\n- The {mod}`~.setup.run_script` functions no longer uses the totally unreadable white on green ANSI code combo that I have no idea why i ever used in the first place.\r\n- A `picamera_legacy` script was added for enabling the picamera on bullseye.\r\n- The {class}`.sounds.Gammatone` sound now accepts a `filter_kwargs` dictionary that is passed on to the {class}`.timeseries.Gammatone` filter.\r\n- The {class}`.Task` and {class}`.Nafc` classes use the new {class}`.Trial_Data` style data declarations.\r\n- Two utility functions {func}`.common.walk_dicts` and {func}`.common.flatten_dicts` were added to make handling nested dictionaries a bit easier.\r\n- \r\n\r\n## Bugfixes\r\n\r\n- The Subject class would incorrectly overwrite data given a mismatch in system times between the Terminal and Pilot.\r\n  The subject class should now ideally no longer overwrite anything ever.\r\n- The subject class would drop trial data silently if it was not in the TrialData description. En route to making the table\r\n  automatically expand to accomodate unexpected data, dropped data is now logged as an exception.\r\n- The prefs manager handles being launched from within ipython and other processes better, but is still a bit buggy.\r\n  Now it uses the check used internally in the multiprocessing module to see if a manager can be launched,\r\n  and falls back to using a standard dictionary if not.\r\n- `jackd_source` script uses correct `https://` rather than `git://` protocol.\r\n- A `_TASK_LIST` was added to {mod}`.utils.registry` to support deprecated task specifications.\r\n\r\n## Regressions\r\n\r\n- With additional checking for monotonic increases in `trial_num` and checks that prevent data overwriting,\r\n  individual writes of trial data are now a bit slower, which should be optimized for when we complete the transition to\r\n  uniform data models throughout the library.\r\n\r\n## Prefs\r\n\r\n- `PIGPIOD` - `bool` - if `True`, start pigpiod on pilot start\r\n- Stubs were created for converting the prefs to using data models, but they have not been filled yet.\r\n- A `AUTOPILOT_NO_PREFS_MANAGER` environment variable now controls the use of a multiprocessing manager explicit. Documentation\r\n  for environmental variables is forthcoming.\r\n- A `AUTOPILOT_WARN_DEFAULTS` environment variable controls whether warnings should be printed for when a default pref value\r\n  is retrieved, because that warning is a good one but can be really annoying.\r\n\r\n## Packaging & Dependencies\r\n\r\n- Autopilot is now packaged with Poetry! This allows for fully deterministic installation with the poetry.lock file and\r\n  updates from the old setuptools style of dependency specification.\r\n- The source repository has moved from https://github.com/wehr-lab/autopilot to https://github.com/auto-pi-lot/autopilot\r\n- `MANIFEST.in` has been replaced by the `include` field in `pyproject.toml`\r\n- `autopilot.__version__` is now determined by `importlib.metadata` and specified in the `pyproject.toml` file rather than in the `__init__.py` file\r\n- `blosc` was replaced with `blosc2`\r\n- New dependencies\r\n  - global\r\n    - pydantic (^1.9.0)\r\n    - parse (^1.19.0)\r\n    - rich (^11.2.0)\r\n    - validators (^0.18.2)\r\n  - docs\r\n    - autodoc_pydantic (^1.7.0)\r\n    - myst_parser (^0.17.2)\r\n- Version Bumps\r\n  - pyzmq 18.1.* -> ^22.3.0\r\n  - tornado >=5.0.0 -> ^6.1.0\r\n  - numpy >=1.16.5 -> ^1.20.0\r\n  - scipy >=1.6.0 -> ^1.7.0\r\n  - pandas >=0.19.2 -> ^1.3.0 on python 3.7 and ^1.4.0 on >=3.8\r\n  - tables >=3.4.2 -> ^3.7.0\r\n  - Sphinx >=3.1.2 -> ^4.3.1\r\n  - A lot more dependencies were taken from being implicit versions to explicit\r\n    by the conversion to using Poetry...\r\n\r\n## Docs\r\n\r\n- [Configuration](configuration) was moved to its own page, documenting setting up the system as well as the contents of the user directory.\r\n- A [faq](FAQ) page was stubbed out (but is still pretty skeletal)\r\n- The overview was updated with some more information in the module tour\r\n- Virtual environment usage was moved from the setup page to its own subpage linked from the FAQ.\r\n- A `make serve` option was added to the docs makefile that makes use of [sphinx-autobuild](https://pypi.org/project/sphinx-autobuild/)\r\n  to livereload docs while editing them.\r\n- `autopilot_theme.css` was updated to be compatible with the new version of sphinx-rtd-theme that apparently changed the way\r\n  that TOC buttons were made, as well as remove incorrect references to fonts no longer packaged.\r\n- The `autodoc_pydantic` and `myst_parser` extensions were added -- and we will be moving towards using MyST rather than \r\n  hellish ReST for future narrative docs!\r\n- Private methods and functions are now no  longer rendered in the main documentation, and the library will over time\r\n  use the public/private distinction more systematically to make it more understandable.\r\n- Examples was split off into its own folder and links to wiki plugins. Blink was moved with it\r\n\r\n## Tests\r\n\r\n- We have started importing some of the pigpio mocking tools from the [People's Ventilator Project](https://peoplesvent.org)\r\n  to start writing GPIO tests!",
        "html_url": "https://github.com/auto-pi-lot/autopilot/releases/tag/v0.5.0a0",
        "name": "v0.5.0a0 - The Data Modeling Edition",
        "release_id": 68409419,
        "tag": "v0.5.0a0",
        "tarball_url": "https://api.github.com/repos/auto-pi-lot/autopilot/tarball/v0.5.0a0",
        "type": "Release",
        "url": "https://api.github.com/repos/auto-pi-lot/autopilot/releases/68409419",
        "value": "https://api.github.com/repos/auto-pi-lot/autopilot/releases/68409419",
        "zipball_url": "https://api.github.com/repos/auto-pi-lot/autopilot/zipball/v0.5.0a0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sneakers-the-rat",
          "type": "User"
        },
        "date_created": "2022-02-03T00:49:54Z",
        "date_published": "2022-02-03T00:58:43Z",
        "description": "Several parts to this update!\r\n\r\n- See https://github.com/wehr-lab/autopilot/pull/146 for details about improvements to jackd sound timing! In short:\r\n- Changed the way that continuous sounds work. Rather than cycling through an array, which was easy to drop, now pass a sound object that can generate its own samples on the fly using the `hydration` module. \r\n- More accurate timing of sound ending callbacks. Before, the event would be called immediately on buffering the sounds into the jack ports, but that was systematically too early. Instead, use jack timing methods to account for delay from blocksize and n_periods to wait_until a certain delay to `set()` the event. See `_wait_for_end`\r\n\r\nOther stuff:\r\n\r\n# New\r\n- `hydration` module for creating and storing autopilot objects between processes and computers!\r\n- `@Introspect` made and added to sound classes. Will be moved to root class. Allows storing the parameters given on instantiation.\r\n- `requires` module for more explicit declarations of by-object dependencies to resolve lots of the little fragile checks throughout the package, as well as make it easier for plugins :)\r\n- minor - added exceptions module, just stubs for now\r\n- Made dummy sound class to just use sounds without needing a running sound server\r\n- New transformations! The Prasad line fitting algorithm as `Linefit_Prasad` and ordering points in a line from, eg. edge detection in `Order_Points`\r\n\r\n# Improvements\r\n- Only warn once for returning a default pref value, and make its own warning class so that it can be filtered.\r\n- Cleaning up the base sound classes and moved them to their own module because sounds was very cumbersome and hard to reason about. Now use `get_sound_class` instead of declaring within the module.\r\n- Made optional install packages as `extras_require` so now can install with `pip install auto-pi-lot -E pilot` rather than autodetecting based on architecture. Further improvements (moving to poetry) will be in v0.5.0\r\n\r\n# Bugfixes\r\n- Correctly identify filenames in logging, before the last module name was treated as a suffix on the path and removed, and so only the most recent logger created would actually log to disk. Logging now works across threads and processes.\r\n- Fall back to a non-multiprocessing-based prefs if for some reason we can't use a mp.Manager in the given context (eg. ipython) - Still need to figure out a way to not print the exception because it is thrown asynchronously.\r\n- as much as i love it, the splash screen being absent for whatever reason shouldn't crash the program.\r\n- Raise an exception when instantiating a picamera without having picamera installed, re: https://github.com/wehr-lab/autopilot/issues/142\r\n- Raise ImportError when ffmpeg is not present and trying to use a videowriter class\r\n- Use a deque rather than an infinitely growing list to store GPIO events.\r\n\r\n# Docs\r\n- Documenting the scripts module a bit better.\r\n- Lots more docs on jack_server",
        "html_url": "https://github.com/auto-pi-lot/autopilot/releases/tag/v0.4.4",
        "name": "v0.4.4 - Sound and Timing",
        "release_id": 58561415,
        "tag": "v0.4.4",
        "tarball_url": "https://api.github.com/repos/auto-pi-lot/autopilot/tarball/v0.4.4",
        "type": "Release",
        "url": "https://api.github.com/repos/auto-pi-lot/autopilot/releases/58561415",
        "value": "https://api.github.com/repos/auto-pi-lot/autopilot/releases/58561415",
        "zipball_url": "https://api.github.com/repos/auto-pi-lot/autopilot/zipball/v0.4.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sneakers-the-rat",
          "type": "User"
        },
        "date_created": "2021-10-20T18:44:17Z",
        "date_published": "2021-10-20T18:51:40Z",
        "description": "# New Features\r\n\r\n* `timeseries.Gammatone` filter and `sounds.Gammatone` filtered noise classes!\r\n  Thank you scipy team for making this simple!\r\n\r\n# Minor Improvements\r\n\r\n\r\n* https://github.com/wehr-lab/autopilot/commit/579ef1a41518f57721decd7ecfc289f2b358b356b - En route to implementing universal calibrations, load and save them in a specified place for each hardware object instead of the horrific olde way which was built into `prefs` for some reason\r\n* prefs attempts to make directories if they don't exist\r\n* plenty of new debugging flags!\r\n\r\n# Bugfixes\r\n\r\n* https://github.com/wehr-lab/autopilot/commit/a775723acc66e327492145066eea0e7dff59331e - Sleep before graduating tasks, lateral fix until we rework the task initiation ritual\r\n* https://github.com/wehr-lab/autopilot/commit/360062d3ad4cd30cdba1c53eebe5ff7d7698ffad - pad sounds with silence or continuous sounds if they aren't a full period length\r\n* https://github.com/wehr-lab/autopilot/commit/6614c808ec2f3fc86e01df17b78aa976e8843b5a - Revert to old way of making chunks to make it work with both padded and unpadded sounds\r\n* Import sounds module directly instead of referring from the package root in tests\r\n* Terminal node pings pilots instead of an erroneous reference to a nonexistent `Terminal.send` method\r\n* https://github.com/wehr-lab/autopilot/commit/47dd4c2345df081fb5f3ca1c1705d2f696fc62c9 - Fix pinging by passing pilot id, and handle pressing start/stop button when subject not selected\r\n* Fixed some GUI exceptions from trying to make blank lines in reassign window, improperly handling the Subject class.\r\n",
        "html_url": "https://github.com/auto-pi-lot/autopilot/releases/tag/v0.4.3",
        "name": "v0.4.3 - Gammatones and a few bugfixes",
        "release_id": 51731844,
        "tag": "v0.4.3",
        "tarball_url": "https://api.github.com/repos/auto-pi-lot/autopilot/tarball/v0.4.3",
        "type": "Release",
        "url": "https://api.github.com/repos/auto-pi-lot/autopilot/releases/51731844",
        "value": "https://api.github.com/repos/auto-pi-lot/autopilot/releases/51731844",
        "zipball_url": "https://api.github.com/repos/auto-pi-lot/autopilot/zipball/v0.4.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sneakers-the-rat",
          "type": "User"
        },
        "date_created": "2021-08-25T00:52:52Z",
        "date_published": "2021-08-25T00:53:36Z",
        "description": "Bugfixes! primarily in importing the stim module! see the changelog:\r\nhttps://docs.auto-pi-lot.com/en/main/changelog/v0.4.0.html",
        "html_url": "https://github.com/auto-pi-lot/autopilot/releases/tag/v0.4.2",
        "name": "v0.4.2",
        "release_id": 48391632,
        "tag": "v0.4.2",
        "tarball_url": "https://api.github.com/repos/auto-pi-lot/autopilot/tarball/v0.4.2",
        "type": "Release",
        "url": "https://api.github.com/repos/auto-pi-lot/autopilot/releases/48391632",
        "value": "https://api.github.com/repos/auto-pi-lot/autopilot/releases/48391632",
        "zipball_url": "https://api.github.com/repos/auto-pi-lot/autopilot/zipball/v0.4.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sneakers-the-rat",
          "type": "User"
        },
        "date_created": "2021-08-18T01:14:18Z",
        "date_published": "2021-08-18T01:15:13Z",
        "description": "\r\n* The :class:`autopilot.setup.forms.HARDWARE_FORM` would incorrectly use the class object itself\r\n  rather than the class name in a few places which caused hardware names to incorrectly display and\r\n  be impossible to add!\r\n* Correctly handle module name in loggers when running interactively\r\n* Use accelerometer calibration when computing :meth:`~autopilot.hardware.i2c.I2C_9DOF.rotation`\r\n* Use :func:`autopilot.get` in :func:`autopilot.transform.make_transform`",
        "html_url": "https://github.com/auto-pi-lot/autopilot/releases/tag/v0.4.1",
        "name": "v0.4.1",
        "release_id": 48012997,
        "tag": "v0.4.1",
        "tarball_url": "https://api.github.com/repos/auto-pi-lot/autopilot/tarball/v0.4.1",
        "type": "Release",
        "url": "https://api.github.com/repos/auto-pi-lot/autopilot/releases/48012997",
        "value": "https://api.github.com/repos/auto-pi-lot/autopilot/releases/48012997",
        "zipball_url": "https://api.github.com/repos/auto-pi-lot/autopilot/zipball/v0.4.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sneakers-the-rat",
          "type": "User"
        },
        "date_created": "2021-08-04T03:17:37Z",
        "date_published": "2021-08-04T03:35:20Z",
        "description": "See the changelog! https://docs.auto-pi-lot.com/en/latest/changelog/v0.4.0.html\r\n\r\n\r\n## v0.4.0 - Become Multifarious (August 3rd, 2021)\r\n\r\nThis release is primarily to introduce the new plugin system, the autopilot wiki, and their integration as a way of\r\nstarting the transformation of Autopilot into a tool with decentralized development and governance (as well as\r\nmake using the tool a whole lot easier and more powerful).\r\n\r\n*With humble thanks to Lucas Ott, Tillie Morris,* `Chris Rodgers <https://github.com/cxrodgers/>`_,\r\n`Arne Meyer <https://github.com/arnefmeyer>`_ , `Mikkel Roald-Arb\u00f8l <https://github.com/roaldarbol>`_ ,\r\n`David Robbe <https://github.com/neurodavidus>`_ ,\r\n*and an anonymous discussion board poster for being part of this release.*\r\n\r\n### New Features\r\n\r\n* `Registries & Plugins <https://github.com/wehr-lab/autopilot/pull/109>`_ - Autopilot now supports users writing their code\r\n  outside of the library as plugins! To support this, a registry system was implemented throughout the program. Plugin objects\r\n  can be developed as objects that inherit from the Autopilot object tree -- eg. implementing a GPIO object by subclassing\r\n  :class:`.hardware.gpio.GPIO` , or a new task by subclassing :class:`~.tasks.task.Task` . This system is flexible enough\r\n  to allow any lineage of objects to be included as a plugin -- stimuli, tasks, and so on -- and we will be working to\r\n  expand registries to every object in Autopilot, including the ability for plugins to replace core modules to make\r\n  Autopilot's flexibility verge on ludicrous. The basic syntax of the registry system is simple and doesn't require any\r\n  additional logic beyond inheritance to be implemented on plugin objects -- ``autopilot.get('object_type', 'object_name')``\r\n  is the basic method, with a few aliases for specific object types like ``autopilot.get_hardware()``. Also thanks to\r\n  `Arne Meyer <https://github.com/arnefmeyer>`_ for submitting an early draft of the registry system and\r\n  `Mikkel Roald-Arb\u00f8l <https://github.com/roaldarbol>`_ for raising the issue.\r\n* At long last, the Autopilot Wiki is alive!!!! - https://wiki.auto-pi-lot.com/ - The wiki is the place for communal\r\n  preservation of technical knowledge about using Autopilot, like hardware designs, build guides, parameter sets,\r\n  and beyond! This isn't any ordinary wiki, though, we got ourselves a *semantic wiki* which augments traditional wikis\r\n  with a rich system of human and computer-readable linked attributes: a particular type of page will have some set of attributes,\r\n  like a page about a 3D printed part will have an associated .stl file, but rather than having these be in plaintext\r\n  they are specified in a format that is queryable, extensible, and infinitely mutable. The vision for the wiki is much\r\n  grander (but not speculative! very concrete!) than just a place to take notes, but is intended to blend the use of\r\n  Autopilot as an experimental tool with body of knowledge that supports it. Autopilot can query the wiki with the ``wiki`` module\r\n  like ``wiki.ask('[[Category:3D_CAD]]', 'Has STL')`` to get links to all .stl files for all 3D parts on the wiki. The integration\r\n  between the two makes using and submitting information trivial, but *also* makes *designing whole new types of community interfaces*\r\n  completely trivial. As a first pass, the Wiki will be the place to index plugins, the system for submitting them, querying them,\r\n  and downloading them only took a few hours and few dozen lines of code to implement. The wiki is infinitely malleable -- that's the point --\r\n  and I am very excited to see how people use it.\r\n* Tests & Continuous Integration with Travis! We are on the board with having nonzero tests! The travis page is here: https://travis-ci.com/github/wehr-lab/autopilot\r\n  and the coveralls page is here: https://coveralls.io/github/wehr-lab/autopilot .  At the moment we have a whopping 27% coverage,\r\n  but as we build out our testing suite we hope that it will become much easier for people to contribute to Autopilot and be\r\n  confident that it works!\r\n* New Hardware Objects\r\n    * :class:`.cameras.PiCamera` - A fast interface to the PiCamera, wrapping the picamera library, and using tips from its developer to juice every bit of speed i could!\r\n    * The I2C_9DOF object was massively improved to take better advantage of its onboard DSP and expose more of its i2c commands.\r\n* New Transforms\r\n    * :class:`.timeseries.Kalman` - adapted a Kalman filter from the wonderful filterpy package! it's in the new timeseries transform module\r\n    * :class:`.geometry.IMU_Orientation` - IMU_Orientation performs a sensor fusion algorithm with the Kalman Filter class to combine gyroscope and accelerometer measurements into a better estimate of earth-centric roll and pitch.\r\n      This is used by the IMU class, but is made independent so it can be used without an Autopilot hardware object/post-facto/etc.\r\n    * :class:`.timeseries.Filter_IIR` - Filter_IIR implements scipy's IIR filter as a transform object.\r\n    * :class:`.timeseries.Integrate` - Integrate adds successive numbers together (scaled by dt if requested). not much by itself, but when used with a kalman filter very useful :)\r\n    * :class:`.geometry.Rotate` - use scipy to rotate a vector by some angle in x, y, and/or z\r\n    * :class:`.geometry.Spheroid` - fit and transform 3d coordinates according to some spheroid - used in the IMU's accelerometer calibration method: given some target spheroid, and some deformed spheroid (eg. a miscalibrated accelerometer might have the x, y, or z axis scaled or offset) either explicitly set or estimated from a series of point measurements, transform future input given that transformation to correct for the deformed source spheroid.\r\n* New Prefs\r\n    * ``'AUTOPLUGIN'`` - Attempt to import the contents of the plugin directory,\r\n    * ``'PLUGIN_DB'`` - filename to use for the .json plugin_db that keeps track of installed plugins',\r\n    * ``'PING_INTERVAL'`` - How many seconds should pilots wait in between pinging the Terminal?',\r\n    * ``'TERMINAL_SETTINGS_FN'`` - filename to store QSettings file for Terminal',\r\n    * ``'TERMINAL_WINSIZE_BEHAVIOR'`` - Strategy for resizing terminal window on opening',\r\n    * ``'TERMINAL_CUSTOM_SIZE'`` - Custom size for window, specified as [px from left, px from top, width, height]',\r\n\r\n### Major Improvements\r\n\r\n* Stereo Sound (Thank you `Chris Rodgers! <https://github.com/cxrodgers/>`_) - https://github.com/wehr-lab/autopilot/pull/102\r\n* Multihop messages & direct messaging - https://github.com/wehr-lab/autopilot/pull/99 - it is now possible to\r\n  send multihop messages through multiple Station objects, as well as easier to send messages directly\r\n  between net nodes. See the examples in the network tests section of the docs.\r\n* Multiple Children  (Thank you `Chris Rodgers! <https://github.com/cxrodgers/>`_) - https://github.com/wehr-lab/autopilot/pull/103 -\r\n  the ``CHILDID`` field now accepts a list, allowing a Pilot to initialize child tasks on multiple children. (this syntax and\r\n  the hierarchical nature of pilots and children will be deprecated as we refactor the networking modules into a general mesh system,\r\n  but this is lovely to have for now :)\r\n* Programmatic Setup - https://github.com/wehr-lab/autopilot/issues/33 - noninteractive setup of prefs and\r\n  scripts by using ``autopilot.setup -f prefs.json -p PREFNAME=VALUE -s scriptname1 -s scriptname2``\r\n* Widget to stream video, en route to more widgets for direct GUI control of hardware objects connected to pilots\r\n* Support python 3.8 and 3.9 essentially by not insisting that the spinnaker SDK be installable by all users (which at the time\r\n  was only available for 3.7)\r\n\r\n\r\n### Minor Improvements\r\n\r\n* Terminal can be opened maximized, or have its size and position set explicitly, preserve between launches (Thank you `Chris Rodgers! <https://github.com/cxrodgers/>`_) - https://github.com/wehr-lab/autopilot/pull/70\r\n* Pilots will periodically ping the Terminal again, Terminal can manually ping Pilots that may have gone silent - https://github.com/wehr-lab/autopilot/pull/91\r\n* Pilots share their prefs with the Terminal in their initial handshake - https://github.com/wehr-lab/autopilot/pull/91\r\n* Reintroduce router ports for net-nodes to allow them to bind a port to receive messages - https://github.com/wehr-lab/autopilot/pull/115/commits/35be5d634d98a7983ec3d3d6c5b94da6965a2579\r\n* Listen methods are now optional for net_nodes\r\n* Allowed the creation of dataless tasks - https://github.com/wehr-lab/autopilot/pull/115/commits/628e1fb9c8fcd15399b19b351fed87e4826bc9ab\r\n* Allowed the creation of plotless tasks - https://github.com/wehr-lab/autopilot/pull/115/commits/08d99d55a32b45f54e3853813c7c71ea230b25dc\r\n* The ``I2C_9DOF`` clas uses memoryviews rather than buffers for a small performance boost - https://github.com/wehr-lab/autopilot/pull/115/commits/890f2c500df8010b50d61f64e2755cd2c7a8aeed\r\n* Phasing out using ``Queue`` s in favor of ``collections.deque`` for applications that only need thread and not process safety because they\r\n  are way faster and what we wanted in the first place anyway.\r\n* New Scripts - ``i2c``, ``picamera``, ``env_terminal``\r\n* utils.NumpyEncoder and decoder to allow numpy arrays to be json serialized\r\n* calibrations are now loaded by hardware objects themselves instead of the extraordinarily convoluted system in ``prefs`` -- though\r\n  some zombie code still remains there.\r\n* Net nodes know their ip now, but this is a lateral improvement pending a reworking of the networking modules.\r\n* ``performance`` script now sets ``swappiness = 10`` to discourage the use of swapfiles - see https://www.raspberrypi.org/forums/viewtopic.php?t=198765\r\n* Setting a string in the ``deprecation`` field of a pref in ``_DEFAULTS`` prints it as a warning to start actually deprecating responsibly.\r\n* Logging in more places like Subject creation, manipulation, protocol assignation.\r\n\r\n### Bugfixes\r\n\r\n* Loggers would only work for the last object that was instantiated, which was really embarassing. fixed - https://github.com/wehr-lab/autopilot/pull/91\r\n* Graduation criteria were calculated incorrectly when subjects were demoted in stages of a protocol - https://github.com/wehr-lab/autopilot/pull/91\r\n* fix durations in solenoid class (Thank you `Chris Rodgers! <https://github.com/cxrodgers/>`_) - https://github.com/wehr-lab/autopilot/pull/63\r\n* LED_RGB ignores zero - https://github.com/wehr-lab/autopilot/pull/98\r\n* Fix batch assignment window crashing when there are subjects that are unassigned to a task - https://github.com/wehr-lab/autopilot/pull/115/commits/e42fc5802792822ff5a53a2379041a4a8b301e9e\r\n* Catch malformed protocols in batch assignment widget - https://github.com/wehr-lab/autopilot/pull/115/commits/2cc8508a4bf3a6d49512197dc72433c60d0c656e\r\n* Remove broken ``Terminal.reset_ui`` method and made control panel better at adding/removing pilots - https://github.com/wehr-lab/autopilot/pull/91\r\n* Subject class handles unexpected state a lot better (eg. no task assigned, no step assigned, tasks with no data.) but is still\r\n  an absolute travesty that needs to be refactored badly.\r\n* The jackclient would crash with long-running continuous sounds as the thread feeding it samples eventually hiccuped.\r\n  Made more robust by having jackclient store samples locally int he sound server rather than being continuously streamed from the queue.\r\n* PySide2 references still incorrectly used ``QtGui`` rather than ``QtWidgets``\r\n* pigpio scripts would not be stopped and removed when a task was stopped, the :func:`.gpio.clear_scripts` function now handles that.\r\n* ``xcb`` was removed from ``PySide2`` distributions, so it's now listed in the requirements for the Terminal and made available in the ``env_terminal`` script.\r\n* ``LED_RGB`` didn't appropriately raise a ``ValueError`` when called with a single ``pin`` - https://github.com/wehr-lab/autopilot/issues/117\r\n* A fistful of lingering Python 2 artifacts\r\n\r\n### Code Structure\r\n\r\n* continuing to split out modules in :mod:`autopilot.core` - networking this time\r\n* utils is now a separate module instead of being in multiple places\r\n* the npyscreen forms in ``setup_autopilot`` were moved to a separate module\r\n* ``setup_autopilot`` was broken into functions instead of a very long and impenetrable script. still a bit of cleaning to do there.\r\n* ``autopilot.setup.setup_autopilot`` was always extremely awkward, so it's now been aliased as ``autopilot.setup``\r\n* the docs have now been split into subfolders rather than period separated names to make urls nicer -- eg /dev/hardware/cameras.htm\r\n  rather than /dev/hardware.cameras.html . this should break some links when switching between versions on readthedocs\r\n  but other than that be nondestructive.\r\n\r\n### Docs\r\n\r\n* new :ref:`quickstart` documentation with lots of quick examples!\r\n\r\n### Regressions\r\n\r\n* Removed the ``check_compatible`` method in the Transforms class. We will want to make a call at some point if we want to implement a full realtime pipelining framework or if we want to use something like luigi or joblib or etc.\r\n  for now this is an admission that type and shape checking was never really implemented but it does raise some exceptions sometimes.",
        "html_url": "https://github.com/auto-pi-lot/autopilot/releases/tag/v0.4.0",
        "name": "v0.4.0 - Become Multifarious",
        "release_id": 47266093,
        "tag": "v0.4.0",
        "tarball_url": "https://api.github.com/repos/auto-pi-lot/autopilot/tarball/v0.4.0",
        "type": "Release",
        "url": "https://api.github.com/repos/auto-pi-lot/autopilot/releases/47266093",
        "value": "https://api.github.com/repos/auto-pi-lot/autopilot/releases/47266093",
        "zipball_url": "https://api.github.com/repos/auto-pi-lot/autopilot/zipball/v0.4.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sneakers-the-rat",
          "type": "User"
        },
        "date_created": "2021-02-23T01:11:19Z",
        "date_published": "2021-02-23T01:14:10Z",
        "description": "https://github.com/wehr-lab/autopilot/pull/79\r\n\r\nA very minor bugfix in response to https://github.com/wehr-lab/autopilot/discussions/72#discussioncomment-386330\r\n\r\n* Very minor one, fixes to the way :class:`.Terminal` accesses the ``pilot_db.json`` file to use :attr:`.Terminal.pilots`\r\n  property that makes a new pilot_db.json file if one doesn't exist, but otherwise loads the one that is found in\r\n  ``prefs.get('PILOT_DB')``\r\n* Reorganized :class:`.Terminal` source to group properties together & minor additions of type hinting\r\n* Fixed some bad fallback behavior looking for files in old hardcoded default directories, eg. in the ye olde\r\n  :func:`.utils.get_pilotdb`\r\n* bump version to 0.3.5",
        "html_url": "https://github.com/auto-pi-lot/autopilot/releases/tag/v0.3.5",
        "name": "v0.3.5 - Fixing pilot db access",
        "release_id": 38459278,
        "tag": "v0.3.5",
        "tarball_url": "https://api.github.com/repos/auto-pi-lot/autopilot/tarball/v0.3.5",
        "type": "Release",
        "url": "https://api.github.com/repos/auto-pi-lot/autopilot/releases/38459278",
        "value": "https://api.github.com/repos/auto-pi-lot/autopilot/releases/38459278",
        "zipball_url": "https://api.github.com/repos/auto-pi-lot/autopilot/zipball/v0.3.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sneakers-the-rat",
          "type": "User"
        },
        "date_created": "2020-12-14T05:02:15Z",
        "date_published": "2020-12-14T05:08:52Z",
        "description": "Improvements:\r\n* Unify the creation of loggers!!!! See the docs ;) https://docs.auto-pi-lot.com/en/latest/autopilot.core.loggers.html : https://github.com/wehr-lab/autopilot/pull/52/commits/d55638f985ab38044fc95ffeff5945021c2e198e https://github.com/wehr-lab/autopilot/issues/38\r\n* Unify prefs, including sensible defaults, refactoring of scripts into a reasonable format, multiprocess-safety, and just generally a big weight off my mind. Note that this is a **breaking change** to the way prefs are accessed. Previously one would do `prefs.PREF_NAME`, but that made it very difficult to provide default values or handle missing prefs. the new syntax is `prefs.get('PREF_NAME')` which returns defaults with a warning and `None` if the pref is not set: https://github.com/wehr-lab/autopilot/pull/52/commits/c40a212bcaf5f184f2a6a606027fe15b1b4df59c https://github.com/wehr-lab/autopilot/issues/38\r\n* completely clean up scripts, and together that opened the path to clean up setup as well. so all things configuration got a major promotion\r\n* We're on the board with CI and automated testing with a positively massive 3% code coverage!!! https://github.com/wehr-lab/autopilot/pull/52/commits/743bb8fe67a69fcc556fa76e81f72f97f510dff7\r\n* new scripts to eg. create autopilot alias: https://github.com/wehr-lab/autopilot/pull/52/commits/211919b05922e18a85d8ef6216973f4000fd32c5\r\n\r\nBugfixes:\r\n* cleanup scripts on object deletion: https://github.com/wehr-lab/autopilot/pull/52/commits/e8218304bd7ef2e13d2adfc236f3e781abea5f78 https://github.com/wehr-lab/autopilot/issues/41\r\n* don't drop 'floats' from gui when we say we can use them...: https://github.com/wehr-lab/autopilot/pull/52/commits/743bb8fe67a69fcc556fa76e81f72f97f510dff7\r\n* pigpio scripts dont like floats: https://github.com/wehr-lab/autopilot/pull/52/commits/9f939cd78a5296db3bf318115bee0213bcd1afc0\r\n\r\nDocs:\r\n* Clarification of supported systems: https://github.com/wehr-lab/autopilot/pull/52/commits/ce0ddf78b7f59f5487fec2ca7e8fb3c0ad162051\r\n* Solved an ancient sphinx riddle of how to get data objects/constants to pretty-print: https://github.com/wehr-lab/autopilot/pull/52/commits/ec6d5a75dada05688b6bd3c1a53b3d9e5923870f\r\n* Clarify hardware prefs https://github.com/wehr-lab/autopilot/pull/52/commits/f3a7609995c84848004891a0f41c7847cb754aae\r\n* what numbering system do we use: https://github.com/wehr-lab/autopilot/pull/52/commits/64267249d7b1ec1040b522308cd60f928f2b2ee6\r\n\r\nLogging:\r\n* catch pigpio script init exception: https://github.com/wehr-lab/autopilot/pull/52/commits/3743f8abde7bbd3ed7766bdd75aee52afedf47e2\r\n* more of it idk https://github.com/wehr-lab/autopilot/pull/52/commits/b682d088dbad0f206c3630543e96a5a00ceabe25\r\n",
        "html_url": "https://github.com/auto-pi-lot/autopilot/releases/tag/v0.3.4",
        "name": " Unifying prefs, logging, setup, and scripts",
        "release_id": 35217622,
        "tag": "v0.3.4",
        "tarball_url": "https://api.github.com/repos/auto-pi-lot/autopilot/tarball/v0.3.4",
        "type": "Release",
        "url": "https://api.github.com/repos/auto-pi-lot/autopilot/releases/35217622",
        "value": "https://api.github.com/repos/auto-pi-lot/autopilot/releases/35217622",
        "zipball_url": "https://api.github.com/repos/auto-pi-lot/autopilot/zipball/v0.3.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sneakers-the-rat",
          "type": "User"
        },
        "date_created": "2020-10-25T21:55:06Z",
        "date_published": "2020-10-25T21:59:36Z",
        "description": "Bugfixes\r\n* Fix layout in batch reassign from python 3 float division\r\n* Cleaner close by catching KeyboardInterrupt in networking modules\r\n* Fixing audioserver boot options -- if 'AUDIOSERVER' is set even if 'AUDIO' isn't set in prefs, should still start server. Not full fixed, need to make single plugin handler, single point of enabling/disabling optional services like audio server\r\n* Fix conflict between polarity and pull in initializing `pulls` in pilot\r\n* Catch `tables.HDF5ExtError` if local .h5 file corrupt in pilot\r\n* For some reason 'fs' wasn't being replaced in the jackd string, reinstated.\r\n* Fix comparison in LED_RGB that caused '0' to turn on full becuse 'value' was being checked for its truth value (0 is false) rather than checking if value is None. \r\n* `obj.next()` to `next(obj)` in jackdserver\r\n\r\n\r\nImprovements\r\n* Better internal handling of pigpiod -- you're now able to import and use hardware modules without needing to explicitly start pigpiod!!\r\n* Hopefully better killing of processes on exit, though still should work into unified process manager so don't need to reimplement everything (eg. as is done with launching pigpiod and jackd)\r\n* Environment scripts have been split out into `setup/scripts.py` and you can now run them with `python -m autopilot.setup.run_script` (use `--help` to see how!) \r\n* Informative error when setup is run with too narrow terminal: https://github.com/wehr-lab/autopilot/issues/23\r\n* More loggers, but increased need to unify logger creation!!!\r\n\r\n\r\nCleanup\r\n* remove unused imports in main `__init__.py` that made cyclical imports happen more frequently than necessary\r\n* single-sourcing version number from `__init__.py`\r\n* more cleanup of unnecessary meta and header stuff left from early days\r\n* more debugging flags\r\n* filter `NaturalNameWarning` from pytables\r\n* quieter cleanups for hardware objects",
        "html_url": "https://github.com/auto-pi-lot/autopilot/releases/tag/v0.3.3",
        "name": "v0.3.3 - More independent hardware objects and bugfixes!",
        "release_id": 33034932,
        "tag": "v0.3.3",
        "tarball_url": "https://api.github.com/repos/auto-pi-lot/autopilot/tarball/v0.3.3",
        "type": "Release",
        "url": "https://api.github.com/repos/auto-pi-lot/autopilot/releases/33034932",
        "value": "https://api.github.com/repos/auto-pi-lot/autopilot/releases/33034932",
        "zipball_url": "https://api.github.com/repos/auto-pi-lot/autopilot/zipball/v0.3.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sneakers-the-rat",
          "type": "User"
        },
        "date_created": "2020-09-29T07:03:59Z",
        "date_published": "2020-09-29T07:17:25Z",
        "description": "## bugfixes\r\n- https://github.com/wehr-lab/autopilot/issues/19 - previously, I attempted to package binaries for the lightly modified pigpio and for jackd (the apt binary used to not work), but after realizing that was the worst possible way of going about it I changed install strategies, but didn't entirely remove the vestiges of the prior attempt. The installation expected certain directories to exist (in autopilot/external) that didn't, which crashed and choked install. Still need to formalize a configuration and plugin system, but getting there.\r\n- https://github.com/wehr-lab/autopilot/issues/20 - the jackd binary in the apt repos for the raspi used to not work, so i was in the habit of compiling jackd audio from source. I had build that into the install routine, but something about that now causes the JACK-Client python interface to throw segfaults. Somewhere along the line someone fixed the apt repo version of jackd so we use that now.\r\n- previously I had only tested in a virtual environment, but now the installation routine properly handles not being in a venv.\r\n\r\n## cleanup\r\n- remove bulky static files like fonts and css from /docs/ where they were never needed and god knows how they got there\r\n- use a forked sphinx-sass when building docs that doesn't specify a required sphinx version (which breaks sphinx)\r\n- removed skbuild requirements from install\r\n- fixed pigpio install requirement in requirements_pilot.txt\r\n- included various previously missed files in MANIFEST.in\r\n- added installation of system libraries to the pilot configuration menu",
        "html_url": "https://github.com/auto-pi-lot/autopilot/releases/tag/v0.3.2",
        "name": "v0.3.2 - Packaging bugfixes",
        "release_id": 31920022,
        "tag": "v0.3.2",
        "tarball_url": "https://api.github.com/repos/auto-pi-lot/autopilot/tarball/v0.3.2",
        "type": "Release",
        "url": "https://api.github.com/repos/auto-pi-lot/autopilot/releases/31920022",
        "value": "https://api.github.com/repos/auto-pi-lot/autopilot/releases/31920022",
        "zipball_url": "https://api.github.com/repos/auto-pi-lot/autopilot/zipball/v0.3.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sneakers-the-rat",
          "type": "User"
        },
        "date_created": "2020-08-05T07:53:35Z",
        "date_published": "2020-08-05T07:56:36Z",
        "description": "Autopilot is growing, it is learning to build strong APIs and has gained a lot of new features along the way :)\r\n\r\n* Autopilot has moved to Python 3!! (Tested on 3.6-3.8)\r\n* Capturing video with OpenCV and the Spinnaker SDK is now supported (See :mod:`autopilot.hardware.cameras`)\r\n* An :class:`~hardware.i2c.I2C_9DOF` motion sensor and the :class:`~hardware.i2c.MLX90640` temperature sensor\r\n  are now supported.\r\n* Timestamps from GPIO events are now microsecond-precise thanks to some modifications to the ``pigpio`` library\r\n* GPIO output timing is also microsecond-precise thanks to the use of ``pigpio`` scripts, so you can deliver\r\n  exactly the reward volumes you intend <3\r\n* Hardware modules have been refactored into their own module, and have been almost wholly rebuilt to have sensible\r\n  inheritance structure.\r\n* Networking modules are more efficient and automatically compress arrays (like video frames!) on transmission.\r\n  Streaming is also easier now, check out :meth:`.Net_Node.get_stream` !\r\n* We now have a detailed :ref:`development roadmap <todo>` , so you can see the magnificent future we have planned.\r\n* We have created the `autopilot-users <https://groups.google.com/forum/#!forum/autopilot-users>`_ discussion board\r\n  for troubleshooting & coordinating community development :)",
        "html_url": "https://github.com/auto-pi-lot/autopilot/releases/tag/v0.3.0",
        "name": "v0.3.0 - <3",
        "release_id": 29351563,
        "tag": "v0.3.0",
        "tarball_url": "https://api.github.com/repos/auto-pi-lot/autopilot/tarball/v0.3.0",
        "type": "Release",
        "url": "https://api.github.com/repos/auto-pi-lot/autopilot/releases/29351563",
        "value": "https://api.github.com/repos/auto-pi-lot/autopilot/releases/29351563",
        "zipball_url": "https://api.github.com/repos/auto-pi-lot/autopilot/zipball/v0.3.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-06 17:30:27",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 92
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Getting Started",
        "type": "Text_excerpt",
        "value": "[**All documentation is hosted at https://docs.auto-pi-lot.com**](https://docs.auto-pi-lot.com)\n\nInstallation is simple, just install with pip and use Autopilot's guided setup to configure your environment and preferences.\nThe initial setup routine uses a CLI interface that is SSH friendly :)\n\n```bash\npip3 install auto-pi-lot\npython3 -m autopilot.setup.setup\n```\n\n![Autopilot Setup Console](docs/_images/installer.png)\n\nAll of Autopilot is quite new, so bugs, incomplete documentation, missing features are very much expected! Don't be shy about\n[raising issues](https://github.com/auto-pi-lot/autopilot/issues) or [asking questions in the forum](https://github.com/auto-pi-lot/autopilot/discussions).\n\n"
      },
      "source": "https://raw.githubusercontent.com/wehr-lab/autopilot/main/README.md",
      "technique": "header_analysis"
    }
  ]
}