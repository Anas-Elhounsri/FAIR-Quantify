{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/brainiak/rt-cloud"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-05-02T17:19:40Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-15T09:12:30Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "The Realtime fMRI Cloud Framework is an open-source software package that makes it easier to build and deploy real-time fMRI experiments."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9362091255451936,
      "result": {
        "original_header": "Realtime fMRI Cloud Framework",
        "type": "Text_excerpt",
        "value": "The Realtime fMRI Cloud Framework is an open-source software package that makes it easier to build and deploy real-time fMRI experiments. RT-Cloud streams scanner data (DICOM images) over to the cloud (or any machine) for real-time analysis, which then can be forwarded to the machine presenting stimuli to the participant, allowing for real-time control over experiment presentation (e.g., depicting trial-by-trial neurofeedback to the subject via PsychoPy, jsPsych, MATLAB PsychToolbox, etc.). RT-Cloud supports neuroimaging standards such as BIDS and OpenNeuro.org. \nRT-Cloud supports any sort of machine configuration. You could run RT-Cloud entirely on a local computer or you can have separate machines handling each of the below three components. \nFor more information on RT-Cloud, see our paper in [NeuroImage 2022](https://www.sciencedirect.com/science/article/pii/S1053811922004141). If you publish work that utilized RT-Cloud, please include a citation to this paper. \n**Overview of RT-Cloud Components**\n![](docs/rtcloud_schematic.png )<br>\n- **data_streamer** (runs on machine that recieves/sends DICOMs)\n  - Watches for new DICOM brain images and sends them to whatever machine is analysing the data\n  - Can simulate the transfer of DICOMs from the MRI scanner using a precollected folder of DICOMs or via an OpenNeuro dataset (OpenNeuroService)\n- **data_analyser** (runs on machine that analyses data in real-time)\n  - Runs experimenter\u2019s script to process DICOMs\n  - Provides a web-based user interface for experimenter control\n- **analysis_listener** (runs on machine that runs presentation software)\n  - Listens for results from data_analyser to inform experiment presentation (e.g., PsychoPy, jsPsych, MATLAB PsychToolbox)  \nDevelopment of RT-Cloud was initially funded by Intel Labs; the framework is under active development with funding from NIMH to further extend its capabilities.\n \n"
      },
      "source": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/Readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8475319910501493,
      "result": {
        "original_header": "\"Replaying\" an OpenNeuro dataset",
        "type": "Text_excerpt",
        "value": "You can also look at the openNeuroClient project for a more specialized example for using an OpenNeuro dataset with RT-Cloud.\n \n"
      },
      "source": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/Readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9025175269237219,
      "result": {
        "original_header": "Sharing your RT-Cloud pipeline as a Docker image",
        "type": "Text_excerpt",
        "value": "You can share your RT-Cloud pipelines with others by simply sharing a Docker image! This will contain the entirely of RT-Cloud in addition to your specific projects folder, such that another user can pull your Docker image and run through your pipeline in exactly the same manner as you. \nNow execute the following after replacing \"container_name\" with your container name and \"docker_image_name\" with the desired filename of the Docker image you will be sharing. \nYou now have a shareable Docker image for your RT-Cloud project! You can now inspect your Docker image to check that all the relevant files have been committed and that you are not sharing any files that you do not want to share (use \"exit\" to exit your Docker image after you have inspected it): \nWhile inspecting, you can make changes (e.g., remove files) and commit those changes by repeating the docker container ls and docker commit commands again. \nYou can now share this Docker image through [Docker hub](https://hub.docker.com/). First login through your Docker account: \nYou can then push your Docker image to Docker hub: \nAnybody else should then be able to pull your Docker image from Docker Hub: \nNote that your Docker image only contains the base RT-Cloud Docker image plus whatever additional files were available in your data_analyser (i.e., your projects folder)! If the projects folder in your data_analyser does not contain all the required data to run your pipeline (e.g., maybe it does not contain your folder of DICOMs), then you would have to separately share those additional files (e.g., by uploading your brain images to OpenNeuro and providing others with the accession number). \n"
      },
      "source": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/Readme.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/brainiak/rt-cloud/tree/master/docs"
      },
      "technique": "file_exploration"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/brainiak/rt-cloud/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/docs/tutorials/bids_tutorial.ipynb"
      },
      "source": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/docs/tutorials/bids_tutorial.ipynb",
      "technique": "file_exploration"
    }
  ],
  "faq": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Troubleshooting / Common errors",
        "type": "Text_excerpt",
        "value": "1. Python module not found - make sure you have installed and activate the conda environment: 'conda activate rtcloud'. \n2. Web page gives a blank blue screen - the web javascript bundle wasn't built, 'cd web; npm install; npm run build'. \n3. ScannerDataService or subjectService can't connect to the projectInterface.\n    - Try specifying the '--test' option to all components (projectInterface, scannerDataService, subjectService). This will disable ssl and allow login with a test user, username: test, password: test. The web page will now be at http://localhost:8888 (*not https://*)\n    - Make sure the projectInterface computer's firewall has port 8888 open. Try using an ssh tunnel if in doubt, 'ssh -N -L 8888:localhost:8888 [remote-computer]'\n    - Try running the scannerDataService on the same computer as the projectInterface to test the connection.\n    - Try using a different port, specify the '--port [new_port]' option when starting the projectInterface and when starting the scannerDataService specify the appropriate port using -s [remote-computer]:[port].\n    - Make sure the ssl certificate and private key (rtcloud.crt and rtcloud_private.key) that were created on the projectInterface computer have been copied to the rtcloud/certs directory on the scannerDataService and subjectService computers.\n    - Make sure you have created a username and password using the 'scripts/add-user.sh' script.\n4. ProjectInterface cannot find your experiment script. Make sure your script's name matches the project directory. Or specify the '--mainScript [script-name]' option when starting the projectInterface. In addition the '--initScript [init-script]' and '--finalizeScript [finalize-script]' options can be used to specify the session initialization and finalization scripts.\n5. ProjectInterface or web page indicate 'RemoteServie: DataService not connected'. This means you started the projectInterface using the --dataRemote option but that a scannerDataService has not established a connection to the projectInterface, so it cannot make remote requests for data. Similarly for 'SubjectService not connected' errors.\n6. An error in your script. Try running your script without starting the projectInterface. The clientInterface() method called by your script will create an internal version of the data services if there is no projectInterface started on localhost. If you specify yesToPrompts=True when instantiating the clientInterface (ClientInterface(yesToPrompts=True)) it will automatically use local services if there is no projectInterface running.\n7. A DICOM error is reported such as, *\"ValueError: The length of the pixel data in the dataset (287580 bytes) doesn't match the expected length (294912 bytes). The dataset may be corrupted or there may be an issue with the pixel data handler\"*. This usually indicates that the DICOM file was read by the FileWatcher before the file was completely written. To handle this, adjust the 'minFileSize' parameter that is passed to dataInterface.initWatch() or dataInterface.initScannerStream(), see the projects/sample/sample.py for an example. The minFileSize indicates a lower bound file size (in bytes) below which the FileWatcher will continue waiting before reading a file. Set the minFileSize to slightly below the smallest DICOM file size expected.\n"
      },
      "source": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/Readme.md",
      "technique": "header_analysis"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 10
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/brainiak/rt-cloud/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "brainiak/rt-cloud"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Realtime fMRI Cloud Framework"
      },
      "source": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/Readme.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "docker_compose",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/docker/docker-compose.yml"
      },
      "source": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/docker/docker-compose.yml",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/scripts/data_analyser.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/scripts/add-user.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/scripts/run-scannerDataService.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/scripts/run-docker.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/scripts/run-projectInterface.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/scripts/run-vnc.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/scripts/run-subjectService.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/scripts/make-sslcert.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/scripts/analysis_listener.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/scripts/install-on-linux.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/scripts/run-openNeuroService.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/scripts/data_streamer.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/scripts/run-tests.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/scripts/run-singularity.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/docker/run-singularity.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/docs/rtcloud_schematic.png"
      },
      "source": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/Readme.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Install Docker, Singularity, or Miniconda",
        "parent_header": [
          "RTCloud Installation &amp; Usage"
        ],
        "type": "Text_excerpt",
        "value": "You can use either Docker, Singularity, or a local Conda environment to run RTCloud. \n"
      },
      "source": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Docker Installation",
        "parent_header": [
          "RTCloud Installation &amp; Usage",
          "1. Install Docker, Singularity, or Miniconda"
        ],
        "type": "Text_excerpt",
        "value": "Windows: https://docs.docker.com/desktop/windows/install/\n\n- Note that Windows has a quirk when it comes to volume mounting with Docker. Docker commands along the lines of \"-v $PROJ_DIR\" require a backslash \"/\" before the directory (e.g., \"-v /$PROJ_DIR\"). Volume mounting also requires full paths: e.g., \"-v ~/certs\" would need to be replaced with the full path \"-v /c/Users/paul/certs\". \n- If using Git Bash, you will need to add \"winpty\" before all Docker commands.\n\nMac: https://docs.docker.com/desktop/mac/install/\n\n- M1 Macs are not supported! All RTCloud functionality will work but scripts will run very slowly. You should follow the local installation instructions instead. \n\nLinux: https://docs.docker.com/engine/install/\n\n\n\n**Pull RTCloud Docker image**\n\nEither pull rtcloud (9Gb, recommended), rtcloudxl (30Gb), or rtcloudlite (3.6Gb)\n\n<code>docker pull brainiak/rtcloud:latest</code>\n\n- \"rtcloud\": RTCloud, FSL analysis functions (no fsleyes), most of ANTs, c3d_affine_tool, brainiak, VNC Viewer\n- \"rtcloudxl\": RTCloud, FSL, fsleyes, ANTs, Convert3D, brainiak, VNC Viewer\n- \"rtcloudlite\": RTCloud, brainiak, VNC Viewer\n\n<sup>Docker images operate in Linux CentOS and use a miniconda environment called \"rtcloud\" that contains many preinstalled packages (see environment.yml, environment-synthetic-data.yml, websockify.yml, docker/Dockerfile.rttools).</sup>\n"
      },
      "source": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Singularity Installation",
        "parent_header": [
          "RTCloud Installation &amp; Usage",
          "1. Install Docker, Singularity, or Miniconda"
        ],
        "type": "Text_excerpt",
        "value": "Singularity can be used if you lack root permissions to install RT-Cloud via Docker.\n\nLinux install: https://sylabs.io/guides/3.9/admin-guide/installation.html\n\nExample of terminal commands for Linux (CentOS 7) installation:\n\n    sudo yum update -y && \\\n    sudo yum install -y epel-release && \\\n    sudo yum update -y && \\\n    sudo yum install -y singularity-runtime singularity\n\nClone this GitHub repository, cd into it, and build the Singularity image corresponding to the Docker container you wish to run: rtcloud (9Gb, recommended), rtcloudxl (30Gb), or rtcloudlite (3.6Gb).\n\n1. <code>git clone https://github.com/brainiak/rt-cloud.git</code>\n2. <code>cd rt-cloud/docker/</code>\n3. <code>sudo singularity build rtcloud.sif rtcloud.def</code>\n\nIf you lack root permissions, you will need to build the .sif file on a machine that has root permissions and then transfer the .sif file.\n\n**Singularity usage instructions.** Enter your Singularity image running RT-Cloud. Then execute a few commands to setup your environment:\n1. <code>singularity exec docker/rtcloud.sif bash</code>\n2. <code>source /opt/run-singularity.sh</code>\n\nYou will need to perform the above steps 1 & 2 every time you want to use RT-Cloud with Singularity.\n\nNow you can follow the same steps as the local installation to run RT-Cloud via Singularity! Note that ``source /opt/run-singularity.sh`` activates a pre-made \"rtcloud\" conda environment and changes your directory to /tmp/rt-cloud/ (/tmp allows write permissions).\n"
      },
      "source": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Local Installation",
        "parent_header": [
          "RTCloud Installation &amp; Usage",
          "1. Install Docker, Singularity, or Miniconda"
        ],
        "type": "Text_excerpt",
        "value": "(Note: Windows not supported.)\n\n1. Install miniconda\n    - If not installed, follow these steps to install miniconda: https://docs.conda.io/en/latest/miniconda.html\n2. Clone rt-cloud code from github and cd into it\n    - <code>git clone https://github.com/brainiak/rt-cloud.git</code>\n    - <code>cd rt-cloud/</code>\n3. Prepare rtcloud conda environment<br>\n    - <code>conda create --name rtcloud</code> \n        - Note: you must use the name \"rtcloud\" for your conda environment!\n    - <code>conda activate rtcloud</code>\n4. Install necessary packages\n    - <code>conda install -y -c defaults -c conda-forge awscli bcrypt boto3 dcm2niix flake8 indexed_gzip jupyter mypy nibabel nilearn nodejs pip pydicom python=3.8 requests rpyc scipy toml tornado websocket-client</code>\n    - <code>pip install inotify pybids watchdog wsaccel</code>\n5. Install node module dependencies<br>\n    - <code>cd web; npm install; cd ..</code>\n6. Install [FSL](https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/FslInstallation), [ANTs](http://stnava.github.io/ANTs/), or any other software that you plan to use for real-time analysis\n"
      },
      "source": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Making RTCloud secure with SSL encryption",
        "parent_header": [
          "RTCloud Installation &amp; Usage"
        ],
        "type": "Text_excerpt",
        "value": "If you do not care about SSL encryption and simply want to test out RTCloud without security, you can skip this step (you will need to add the \"--test\" flag to all commands in step 4). The RT-Cloud web interface will use \"https\" with SSL encryption and \"http\" without SSL encryption.\n"
      },
      "source": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2a. Create SSL certificate and username/password",
        "parent_header": [
          "RTCloud Installation &amp; Usage",
          "2. Making RTCloud secure with SSL encryption"
        ],
        "type": "Text_excerpt",
        "value": "The following instructions will create a \"certs\" folder on your machine. Do this step only once on one machine. To allow for encrypted communication across RTCloud components, the path to this certs folder needs to be provided every time you run RTCloud components. Replace \"username\" in the below code with the username you want to use to login to the RTCloud web interface. \n\n**Docker**\n\nThe below code will create a certs folder located in your home directory.\n\n    docker run -it --name ssl brainiak/rtcloud:latest bash\n\nYou will now be within the RTCloud docker image in terminal. Replace \"username\" below with the username you want to use to login to the RTCloud web browser.\n\n    IP=`curl https://ifconfig.co/`\n    conda deactivate; conda activate rtcloud\n    openssl genrsa -out certs/rtcloud_private.key 2048\n    bash scripts/make-sslcert.sh -ip $IP\n    bash scripts/add-user.sh -u username\n\nYou will be prompted to enter a password.\n\n    exit\n    docker cp ssl:/rt-cloud/certs ~/certs\n    docker rm -f ssl\n\n\n\n**Local** \n\nThe below code will create a certs folder in your current working directory. Make sure you keep note of the path where this certs folder lives for later.\n\n    IP=`curl https://ifconfig.co/`\n    mkdir certs; openssl genrsa -out certs/rtcloud_private.key 2048\n    bash scripts/make-sslcert.sh -ip $IP\n    bash scripts/add-user.sh -u username\n    # You will be prompted to enter a password.\n"
      },
      "source": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2b. Copy your certs folder to all other machines",
        "parent_header": [
          "RTCloud Installation &amp; Usage",
          "2. Making RTCloud secure with SSL encryption"
        ],
        "type": "Text_excerpt",
        "value": "**If you are using RTCloud across multiple machines, you should only create a certs folder once**. Then, you should copy this certs folder to the other machines. All RTCloud machines must contain identical certs/rtcloud_private.key and certs/passwd files.\n"
      },
      "source": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2c. Install SSL certificate",
        "parent_header": [
          "RTCloud Installation &amp; Usage",
          "2. Making RTCloud secure with SSL encryption"
        ],
        "type": "Text_excerpt",
        "value": "**Perform this step on the machine that will be used to open the RTCloud web interface via a web browser (e.g., Chrome, Safari).**\n\n*On Mac:*\n\n1. Open application 'Keychain Access'.\n2. On left sidebar, click 'Login' under Default Keychain.\n3. Drag and drop your ssl certificate (\"~/certs/rtcloud.crt\" or \"rt-cloud/certs/rtcloud.crt\") into the window\n4. Your certificate should now show up in the 'Keychain Access' certifications list\n5. Double-click the certification > Trust > 'When using this certificate' choose 'Always Trust'\n\n*On Linux:*\n\nWhen you eventually go to use the web interface, a security warning about untrusted certificate will show up. When this happens, click \"Add Exception\" > \"Confirm Security Exception\".\n\n*On Windows:* \n\nFollow the instructions outlined on this webpage: https://learn.microsoft.com/en-us/skype-sdk/sdn/articles/installing-the-trusted-root-certificate\n"
      },
      "source": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3. Prepare your experiment's script",
        "parent_header": [
          "RTCloud Installation &amp; Usage"
        ],
        "type": "Text_excerpt",
        "value": "You will need to prepare a folder containing whatever analysis steps you want to be performed in real-time. We supply a pre-made projects folder that contains several examples for you to try out (https://github.com/brainiak/rtcloud-projects). **We highly recommend that you first try running the template project** (\"rtcloud-projects/template\"), which is an example analysis that runs through a complete RT-fMRI pipeline based on [Mennen et al. (2021)](https://doi.org/10.1016/j.bpsc.2020.10.006) and is heavily commented such that you can understand what the script is doing and edit it to suit your particular experiment's needs. If you are not using the template project, then replace any instances of \"template\" in the code blocks below with the name of your project.\n\nNote that the template project uses FSL and ANTs commands, which are preinstalled in the \"rtcloud\" and \"rtcloudxl\" Docker/Singularity images, but which would need to be installed if using RTCloud locally or with the \"rtcloudlite\" Docker image.\n\n    git clone https://github.com/brainiak/rtcloud-projects.git\n"
      },
      "source": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "5. Setting up adaptive stimulus presentation with analysis_listener",
        "parent_header": [
          "RTCloud Installation &amp; Usage"
        ],
        "type": "Text_excerpt",
        "value": "Note: you can skip this step and the template project will still run as intended -- the only difference here is whether or not you have a presentation software hooked up that makes use of these results. \n\nThe most straightforward way to enable real-time adaptive stimulus presentation is to read in files output by data_analyser that are sent over and stored by analysis_listener. This method is compatible with *any* stimulus presentation software (e.g., PsychoPy, MATLAB). You can simply add a function that waits for a file with a certain name to be created in the specified analysis_listener output directory, read in that file when it becomes available, and change the stimulus presentation depending on the value contained in the file. Our template project saves a json file every TR, which can be read by PsychoPy in realtime as shown in step 5a below.\n\nNote for jsPsych users: you will want to look into [integrating jsPsych directly with the RT-Cloud web interface](docs/subject-feedback.md).\n"
      },
      "source": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "7. Using RTCloud with your own project",
        "parent_header": [
          "RTCloud Installation &amp; Usage"
        ],
        "type": "Text_excerpt",
        "value": "When conducting your own experiment using RTCloud, you will need to provide your own projects folder that contains code to analyse DICOMs in real-time. We recommend copying the template project folder and editing its contents. The template.py file is extensively commented such that you can read through it for specific instructions on how to edit it to suit your own experimental needs.\n\n1. Copy the template folder located in rtcloud-projects/template and rename the copied folder to the name of your project\n2. Rename template.py to [your project's name].py and conf/template.toml to conf/[your project's name].toml\n3. Edit [your project's name].py and conf/[your project's name].toml to your desired realtime analysis procedure.\n\nYou can directly run the [your project's name].py file in the terminal (without web browser or connecting different RTCloud components) with the following command (answer yes when asked about continuing using localfiles). Directly running the script this way can be useful for rapid testing and iteration without needing to setup the other RTCloud components.\n\n**Docker**\n\n    PROJ_NAME=<your project's name>\n    PROJ_DIR=<full_path_to_project_folder>\n    DICOM_DIR=<full_path_to_dicom_folder>\n\n    docker run -it --rm -v $PROJ_DIR:/rt-cloud/projects/$PROJ_NAME -v $DICOM_DIR:/rt-cloud/projects/$PROJ_NAME/dicomDir brainiak/rtcloud:latest python projects/$PROJ_NAME/$PROJ_NAME.py\n\n**Local**\n\nYour DICOM directory should be located in /rt-cloud/projects/$PROJ_NAME/dicomDir.\n\n    PROJ_NAME=<your project's name>\n\n    conda activate rtcloud\n    cd /rt-cloud\n    python projects/$PROJ_NAME/$PROJ_NAME.py\n"
      },
      "source": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9976712182496194,
      "result": {
        "original_header": "\"Replaying\" an OpenNeuro dataset",
        "type": "Text_excerpt",
        "value": "The template project (https://github.com/brainiak/rtcloud-projects) mentioned in the installation guide above has code demonstrating how to initialize a BIDS Stream for any OpenNeuro dataset by feeding in the dataset's accession number. Simply modify the very last line of conf/template.toml to specify the accession number of your OpenNeuro dataset:  \n"
      },
      "source": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/Readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8917316632924739,
      "result": {
        "original_header": "Sharing your RT-Cloud pipeline as a Docker image",
        "type": "Text_excerpt",
        "value": "Then in a separate terminal on the same machine as the data_analyser, find the container name associated with your currently running Docker container (the name listed under the \"NAMES\" column): \n    docker run -it docker_image_name bash \n    docker run -it --rm -p 8888:8888 docker_image_name:1.0 scripts/data_analyser.sh -p your_project_name --test  \n"
      },
      "source": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/Readme.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8806694736125483,
      "result": {
        "original_header": "Sharing your RT-Cloud pipeline as a Docker image",
        "type": "Text_excerpt",
        "value": "    docker run -it --rm -p 8888:8888 docker_image_name:1.0 scripts/data_analyser.sh -p your_project_name --test  \n"
      },
      "source": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/Readme.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/brainiak/rt-cloud/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Apache License 2.0",
        "spdx_id": "Apache-2.0",
        "type": "License",
        "url": "https://api.github.com/licenses/apache-2.0",
        "value": "https://api.github.com/licenses/apache-2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
      },
      "source": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "rt-cloud"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "brainiak"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 576250,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "JavaScript",
        "size": 139866,
        "type": "Programming_language",
        "value": "JavaScript"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 18151,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CSS",
        "size": 10977,
        "type": "Programming_language",
        "value": "CSS"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 7114,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/Readme.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "PaulScotti",
          "type": "User"
        },
        "date_created": "2022-10-12T13:53:05Z",
        "date_published": "2022-10-12T14:01:21Z",
        "description": "Major changes made in time for rtFIN2022 conference:\r\n- Template project meant to be used as a template for users to wrap their own projects--heavily commented and walks user through implementing the Mennen et al. 2021 pipeline with BIDS Incrementals and support for OpenNeuro replay\r\n- Separate instructions for Docker vs local conda environment\r\n- Installation instructions and template project tutorial linked together to demonstrate RT-Cloud usage\r\n- Install instructions now correctly account for different operating systems, with caveats for Mac M1s + Windows\r\n- Components have been renamed (data_analyser, data_streamer, analysis_listener) to improve clarity. The corresponding shell scripts have been renamed as well but the original files are untouched so previous users do not need to modify anything; the renamed shell scripts are identical to the original shell scripts aside from the filename.\r\n- New picture depicting the communication of RT-Cloud components in Readme\r\n- Quickstart Docker demo to very quickly get a user to test out the sample project in one line of code\r\n- setResultsDict now conveniently outputs jsons to a default folder (this is demonstrated in the template project)\r\n- More specific instructions now provided in the run-in-docker markdown file\r\n- Replaying OpenNeuro section directs user to try to implement changes to the template project which is built to accommodate such Replay\r\n- New section: Sharing your RT-Cloud pipeline as a Docker image",
        "html_url": "https://github.com/brainiak/rt-cloud/releases/tag/v1.4",
        "name": "Template Project / Revamped Readme (rtFIN)",
        "release_id": 79652570,
        "tag": "v1.4",
        "tarball_url": "https://api.github.com/repos/brainiak/rt-cloud/tarball/v1.4",
        "type": "Release",
        "url": "https://api.github.com/repos/brainiak/rt-cloud/releases/79652570",
        "value": "https://api.github.com/repos/brainiak/rt-cloud/releases/79652570",
        "zipball_url": "https://api.github.com/repos/brainiak/rt-cloud/zipball/v1.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "gdoubleyew",
          "type": "User"
        },
        "date_created": "2021-10-13T16:30:41Z",
        "date_published": "2021-10-20T18:00:25Z",
        "description": "This release adds support for:\r\n- Using BIDS to send and analyze data. The BIDS-Incremental is introduced to convert DICOM images to BIDS format and send across the network.\r\n- Replaying data from the OpenNeuro repository.\r\n- Using JsPsych for subject feedback.",
        "html_url": "https://github.com/brainiak/rt-cloud/releases/tag/v1.3",
        "name": "Add BIDS and OpenNeuro",
        "release_id": 51727485,
        "tag": "v1.3",
        "tarball_url": "https://api.github.com/repos/brainiak/rt-cloud/tarball/v1.3",
        "type": "Release",
        "url": "https://api.github.com/repos/brainiak/rt-cloud/releases/51727485",
        "value": "https://api.github.com/repos/brainiak/rt-cloud/releases/51727485",
        "zipball_url": "https://api.github.com/repos/brainiak/rt-cloud/zipball/v1.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "gdoubleyew",
          "type": "User"
        },
        "date_created": "2021-01-27T17:18:05Z",
        "date_published": "2021-01-27T17:57:46Z",
        "description": "* Add RPC communication (Remote Procedure Call) between experiment script and the projectInterface\r\n\r\n* Separate http handlers into webHandlers.py module\r\n\r\n* Separate webSocketHandlers logic into a separate file\r\n\r\n* Add verbose flag to sample project script\r\n\r\n* Add ability to run experiment scripts without a projectInterface running and to run experiments from any directory\r\n\r\n* Rename experimentRPCService.py and class. Change getDicomFileName to use tags SCAN and TR.",
        "html_url": "https://github.com/brainiak/rt-cloud/releases/tag/v1.2",
        "name": "Release with an RPC client interface for use by experiment scripts",
        "release_id": 36986075,
        "tag": "v1.2",
        "tarball_url": "https://api.github.com/repos/brainiak/rt-cloud/tarball/v1.2",
        "type": "Release",
        "url": "https://api.github.com/repos/brainiak/rt-cloud/releases/36986075",
        "value": "https://api.github.com/repos/brainiak/rt-cloud/releases/36986075",
        "zipball_url": "https://api.github.com/repos/brainiak/rt-cloud/zipball/v1.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "gdoubleyew",
          "type": "User"
        },
        "date_created": "2020-10-06T18:55:19Z",
        "date_published": "2020-11-10T20:36:10Z",
        "description": "This release \r\n- updates the sample and amygActivation sample projects\r\n- adds a feedback receiver for sending classification results\r\n- adds functions to download and upload folders to/from the cloud\r\n- improves plotting functions",
        "html_url": "https://github.com/brainiak/rt-cloud/releases/tag/v1.1",
        "name": "Update release with feedback receiver and improved sample projects",
        "release_id": 33753227,
        "tag": "v1.1",
        "tarball_url": "https://api.github.com/repos/brainiak/rt-cloud/tarball/v1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/brainiak/rt-cloud/releases/33753227",
        "value": "https://api.github.com/repos/brainiak/rt-cloud/releases/33753227",
        "zipball_url": "https://api.github.com/repos/brainiak/rt-cloud/zipball/v1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "gdoubleyew",
          "type": "User"
        },
        "date_created": "2019-09-20T21:19:54Z",
        "date_published": "2019-10-04T19:50:20Z",
        "description": "Initiatial framework release with corresponding Docker Image of same version, brainiak/rtcloud:1.0",
        "html_url": "https://github.com/brainiak/rt-cloud/releases/tag/v1.0",
        "name": "Initial Release with Docker Image",
        "release_id": 20483943,
        "tag": "v1.0",
        "tarball_url": "https://api.github.com/repos/brainiak/rt-cloud/tarball/v1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/brainiak/rt-cloud/releases/20483943",
        "value": "https://api.github.com/repos/brainiak/rt-cloud/releases/20483943",
        "zipball_url": "https://api.github.com/repos/brainiak/rt-cloud/zipball/v1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "4. Run RTCloud experiment: template project",
        "parent_header": [
          "RTCloud Installation &amp; Usage"
        ],
        "type": "Text_excerpt",
        "value": "The following starts up the three RTCloud components and runs through the template project mentioned in step 3. These three components can all be run on the same machine or can be separately started up on different machines. \n\n**If you are running all three components on the same machine within a single terminal for testing purposes** then you can skip steps 4b and 4c, remove the <code>--dataRemote</code> and <code>--subjectRemote</code> arguments, and if using Docker add <code>-v OUT_DIR:/rt-cloud/outDir</code> to the data_analyser command (where OUT_DIR refers to where you want your realtime outputs stored). \n\n**If you are running all three components on the same machine with different terminal windows for testing purposes** then you should only specify \"-p 8888:8888\" in the initial data_analyser command, and you should use \"172.17.0.1\" as your WEB_IP if using Docker.\n"
      },
      "source": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4a. Run data_analyser",
        "parent_header": [
          "RTCloud Installation &amp; Usage",
          "4. Run RTCloud experiment: template project"
        ],
        "type": "Text_excerpt",
        "value": "**Docker**\n\nReplace <full_path_to_template_project_folder> with the path to your template folder (e.g., ~/rtcloud-projects/template). \n\n    PROJ_DIR=<full_path_to_template_project_folder>\n\n    docker run -it --rm -p 8888:8888 -v ~/certs:/rt-cloud/certs -v $PROJ_DIR:/rt-cloud/projects/template brainiak/rtcloud:latest scripts/data_analyser.sh -p template --dataRemote --subjectRemote\n\nYou should eventually see an output in your terminal that says \"Listening on: https://localhost:8888\" (or http://localhost:8888 if not using SSL encryption). Copy this address and paste it into your web browser. You may need to replace \"localhost\" with the IP address of the data_analyser (e.g., the public ip address of the cloud machine, or potentially Docker's network ip \"172.17.0.1\"). Login using the username/password you created in step 2, or using username:test password:test if running in --test mode. \n\nAfter you login, look to the top-right of the web interface and you should see indicators referencing which of the three RT-Cloud components have connected (\"browser\" for data_analyser, \"dataConn\" for data_streamer, \"subjConn\" for analysis_listener). All three of these components must be connected before running RT-Cloud.\n\n<sup>For reference in interpreting the above command, the \"-it\" stands for interactive terminal and prevents your command line from becoming unresponsive, the \"--rm\" will remove the docker container after it finishes running, the \"-p 8888:8888\" opens/connects the machine's port 8888 to the Docker container's port 8888 which allows the RTCloud web browser to work, the \"-v\" stands for volume and will mount the provided folder to the provided Docker container's location, the \"scripts/data_analyser.sh\" executes the shell script located in the scripts folder of the Docker container \"brainiak/rtcloud:latest\", the \"-p template\" informs the shell script the name of the project to run, the \"-ip $IP\" allows the web certificate to be secured to the current IP address, \"--dataRemote\" means that the data_streamer component is running on a different machine, and \"--subjectRemote\" means that the analysis_listener is running on a different machine.</sup>\n\n**Local**\n\nYour project folder (\"/template\") should be located inside of your local rtcloud projects folder (\"/rt-cloud/projects/template\").\n\n    conda activate rtcloud\n    cd rt-cloud/\n    bash scripts/data_analyser.sh -p template --dataRemote --subjectRemote\n\nYou should eventually see an output in your terminal that says \"Listening on: https://localhost:8888\" (or http://localhost:8888 if not using SSL encryption). Copy this address and paste it into your web browser. You may need to replace \"localhost\" with the IP address of the data_analyser (e.g., the public ip address of the cloud machine). Login using the username/password you created in step 2, or using username:test password:test if running in --test mode. \n\nAfter you login, look to the top-right of the web interface and you should see indicators referencing which of the three RT-Cloud components have connected (\"browser\" for data_analyser, \"dataConn\" for data_streamer, \"subjConn\" for analysis_listener). All three of these components must be connected before running RT-Cloud.\n"
      },
      "source": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4b. Run data_streamer",
        "parent_header": [
          "RTCloud Installation &amp; Usage",
          "4. Run RTCloud experiment: template project"
        ],
        "type": "Text_excerpt",
        "value": "The data_streamer component will supply DICOMs to data_analyser. Therefore, you need to provide a path to the folder which contains the DICOMs (<full_path_to_dicom_folder>).\n\nIf this step is successful, after a few seconds you should see that \"dataConn\" is now listed as \"connected\" in the RTCloud web browser at the top right.\n\nReplace \"username\" below with the username you specified in step 2a. You will be asked to provide your password. Replace \"-u username\" with \"--test\" if using test mode (no SSL encryption).\n\n**Docker**\n\nReplace <web_browser_ip_address> below with the WEB_IP of the data_analyser component. This is whatever preceded the \":8888\" in the URL you used to connect to the web interface in your browser in the previous step 4a (e.g., WEB_IP=172.17.0.1).\n\n    DICOM_DIR=<full_path_to_dicom_folder>\n    WEB_IP=<web_browser_ip_address>\n\n    docker run -it --rm -p 8888:8888 -v ~/certs:/rt-cloud/certs -v $DICOM_DIR:/rt-cloud/projects/template/dicomDir brainiak/rtcloud:latest scripts/data_streamer.sh -s $WEB_IP:8888 -d /rt-cloud,/tmp -u username\n\n<sup>For reference, \"-d /rt-cloud,/tmp\" gives access to these folders contained in the Docker container to read/write files.</sup>\n\n**Local**\n\nPlace your DICOMs inside a folder named \"dicomDir\" inside your corresponding projects folder (e.g., /rt-cloud/projects/template/dicomDir).\n\nThis is whatever preceded the \":8888\" in the URL you used to connect to the web interface in your browser in the previous step 4a (e.g., WEB_IP=localhost). \n\n    WEB_IP=<web_browser_ip_address>\n\n    conda activate rtcloud\n    cd rt-cloud/\n    bash scripts/data_streamer.sh -s $WEB_IP:8888 -d $(pwd) -u username\n"
      },
      "source": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4c. Run analysis_listener",
        "parent_header": [
          "RTCloud Installation &amp; Usage",
          "4. Run RTCloud experiment: template project"
        ],
        "type": "Text_excerpt",
        "value": "The analysis_listener component listens for the results output from data_analyser. These results can be used to inform real-time stimulus presentation for the subject in the scanner. \n\nIf this step is successful, after a few seconds you should see that \"subjConn\" is now listed as \"connected\" in the RTCloud web browser at the top right. \n\nReplace \"username\" below with the username you specified in step 2a. You will be asked to provide your password. Replace \"-u username\" with \"--test\" if using test mode (no SSL encryption).\n\n**Docker**\n\n    OUT_DIR=<full_path_where_you_want_results_to_go>\n    WEB_IP=<web_browser_ip_address>\n\n    docker run -it --rm --name listener -v ~/certs:/rt-cloud/certs -v $OUT_DIR:/rt-cloud/outDir brainiak/rtcloud:latest scripts/analysis_listener.sh -s $WEB_IP:8888 -u username\n\n**Local**\n\nResults will be saved to a folder named \"outDir\" in the root of your /rt-cloud folder. If this folder doesn't already exist, the folder will be created.\n\n    WEB_IP=<web_browser_ip_address>\n\n    conda activate rtcloud\n    cd rt-cloud/\n    bash scripts/analysis_listener.sh -s $WEB_IP:8888 -u username\n"
      },
      "source": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "6. Run the template experiment",
        "parent_header": [
          "RTCloud Installation &amp; Usage"
        ],
        "type": "Text_excerpt",
        "value": "Confirm that all RTCloud components are properly connected by looking at the top right of the RTCloud web interface in your browser and ensuring all components are listed as \"connected\".\n\nYou can now click the \"Run\" button to simulate the real-time scanning, analysis, and presentation for the template project. Note that real-time results will be displayed in the \"Data Plots\" tab of the web browser. If you followed step 5a regarding PsychoPy integration, your PsychoPy window will display the realtime analyzed output of each processed brain image.\n"
      },
      "source": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running the Automated Test Suite",
        "parent_header": [
          "Troubleshooting / Common errors"
        ],
        "type": "Text_excerpt",
        "value": "1. Follow the installation instructions detailed above\n2. Activate the conda environment\n    - <code>conda activate rtcloud</code>\n3. Additionally, install bids-validator\n    - <code>npm install -g bids-validator</code>\n4. Run the test suite\n    - <code>python -m pytest -s -v tests/</code>\n    \n"
      },
      "source": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/Readme.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "support",
    "identifier"
  ],
  "somef_provenance": {
    "date": "2024-10-05 23:35:27",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 13
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quickstart Demo: sample project via Docker",
        "type": "Text_excerpt",
        "value": "Assuming that Docker is installed (if not, see instructions below) you can follow these instructions to automatically run a sample project that demonstrates some of RT-Cloud's functionality. The three aforementioned components will be run on a single machine without SSL encryption. Ten DICOM files will be analyzed in real-time and the average brain activation for each TR will be plotted in the RT-Cloud web browser's \"Data Plots\" tab.\n\n**Docker**\n\n    docker run -it --rm -p 8888:8888 brainiak/rtcloud:latest scripts/data_analyser.sh -p sample --test \n\nWait for the terminal to output \"Listening on: http://localhost:8888\" and then open your web browser and go to the url \"localhost:8888\" (if using a cloud machine, replace \"localhost\" to the cloud server's ip address). The login username/password for the web browser are both \"test\". Click the \"Run\" button to run through the simulated real-time scanning example. \n"
      },
      "source": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Making RTCloud secure with SSL encryption",
        "parent_header": [
          "RTCloud Installation &amp; Usage"
        ],
        "type": "Text_excerpt",
        "value": "If you do not care about SSL encryption and simply want to test out RTCloud without security, you can skip this step (you will need to add the \"--test\" flag to all commands in step 4). The RT-Cloud web interface will use \"https\" with SSL encryption and \"http\" without SSL encryption.\n"
      },
      "source": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2a. Create SSL certificate and username/password",
        "parent_header": [
          "RTCloud Installation &amp; Usage",
          "2. Making RTCloud secure with SSL encryption"
        ],
        "type": "Text_excerpt",
        "value": "The following instructions will create a \"certs\" folder on your machine. Do this step only once on one machine. To allow for encrypted communication across RTCloud components, the path to this certs folder needs to be provided every time you run RTCloud components. Replace \"username\" in the below code with the username you want to use to login to the RTCloud web interface. \n\n**Docker**\n\nThe below code will create a certs folder located in your home directory.\n\n    docker run -it --name ssl brainiak/rtcloud:latest bash\n\nYou will now be within the RTCloud docker image in terminal. Replace \"username\" below with the username you want to use to login to the RTCloud web browser.\n\n    IP=`curl https://ifconfig.co/`\n    conda deactivate; conda activate rtcloud\n    openssl genrsa -out certs/rtcloud_private.key 2048\n    bash scripts/make-sslcert.sh -ip $IP\n    bash scripts/add-user.sh -u username\n\nYou will be prompted to enter a password.\n\n    exit\n    docker cp ssl:/rt-cloud/certs ~/certs\n    docker rm -f ssl\n\n\n\n**Local** \n\nThe below code will create a certs folder in your current working directory. Make sure you keep note of the path where this certs folder lives for later.\n\n    IP=`curl https://ifconfig.co/`\n    mkdir certs; openssl genrsa -out certs/rtcloud_private.key 2048\n    bash scripts/make-sslcert.sh -ip $IP\n    bash scripts/add-user.sh -u username\n    # You will be prompted to enter a password.\n"
      },
      "source": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2b. Copy your certs folder to all other machines",
        "parent_header": [
          "RTCloud Installation &amp; Usage",
          "2. Making RTCloud secure with SSL encryption"
        ],
        "type": "Text_excerpt",
        "value": "**If you are using RTCloud across multiple machines, you should only create a certs folder once**. Then, you should copy this certs folder to the other machines. All RTCloud machines must contain identical certs/rtcloud_private.key and certs/passwd files.\n"
      },
      "source": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "5a. PsychoPy example for template project",
        "parent_header": [
          "RTCloud Installation &amp; Usage",
          "5. Setting up adaptive stimulus presentation with analysis_listener"
        ],
        "type": "Text_excerpt",
        "value": "Assuming PsychoPy is installed (https://www.psychopy.org/download.html) you can run the PsychoPy script contained in \"rtcloud-projects/template/psychopy_example/rtcloud_psychopy.py\" to see an example for how the analysis_listener outputs can inform experiment presentation in real-time. You will need to make one edit to rtcloud_psychopy.py to define the variable \"output_directory\" as the full path to your RT-Cloud output directory specified in step 4c above. Run the PsychoPy script before clicking Run in the RT-Cloud web interface.\n"
      },
      "source": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "7. Using RTCloud with your own project",
        "parent_header": [
          "RTCloud Installation &amp; Usage"
        ],
        "type": "Text_excerpt",
        "value": "When conducting your own experiment using RTCloud, you will need to provide your own projects folder that contains code to analyse DICOMs in real-time. We recommend copying the template project folder and editing its contents. The template.py file is extensively commented such that you can read through it for specific instructions on how to edit it to suit your own experimental needs.\n\n1. Copy the template folder located in rtcloud-projects/template and rename the copied folder to the name of your project\n2. Rename template.py to [your project's name].py and conf/template.toml to conf/[your project's name].toml\n3. Edit [your project's name].py and conf/[your project's name].toml to your desired realtime analysis procedure.\n\nYou can directly run the [your project's name].py file in the terminal (without web browser or connecting different RTCloud components) with the following command (answer yes when asked about continuing using localfiles). Directly running the script this way can be useful for rapid testing and iteration without needing to setup the other RTCloud components.\n\n**Docker**\n\n    PROJ_NAME=<your project's name>\n    PROJ_DIR=<full_path_to_project_folder>\n    DICOM_DIR=<full_path_to_dicom_folder>\n\n    docker run -it --rm -v $PROJ_DIR:/rt-cloud/projects/$PROJ_NAME -v $DICOM_DIR:/rt-cloud/projects/$PROJ_NAME/dicomDir brainiak/rtcloud:latest python projects/$PROJ_NAME/$PROJ_NAME.py\n\n**Local**\n\nYour DICOM directory should be located in /rt-cloud/projects/$PROJ_NAME/dicomDir.\n\n    PROJ_NAME=<your project's name>\n\n    conda activate rtcloud\n    cd /rt-cloud\n    python projects/$PROJ_NAME/$PROJ_NAME.py\n"
      },
      "source": "https://raw.githubusercontent.com/brainiak/rt-cloud/master/Readme.md",
      "technique": "header_analysis"
    }
  ]
}