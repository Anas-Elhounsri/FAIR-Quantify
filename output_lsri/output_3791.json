{
  "application_domain": [
    {
      "confidence": 0.8757578826842073,
      "result": {
        "type": "String",
        "value": "Graphs"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Cite",
        "parent_header": [
          "kGCN: a graph-based deep learning framework for life science"
        ],
        "type": "Text_excerpt",
        "value": "```\n@article{Kojima2020,\n  author = \"Ryosuke Kojima and Shoichi Ishida and Masateru Ohta and Hiroaki Iwata and Teruki Honma and Yasushi Okuno\",\n  title = \"{kGCN: a graph-based deep learning framework for chemical structures}\",\n  year = \"2020\",\n  month = \"5\",\n  journal = \"Journal of Cheminformatics\",\n  volume = \"12\",\n  number = \"1\",\n  url = \"https://jcheminf.biomedcentral.com/articles/10.1186/s13321-020-00435-6\",\n  doi = \"10.1186/s13321-020-00435-6\"\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/clinfo/kGCN/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Ryosuke Kojima and Shoichi Ishida and Masateru Ohta and Hiroaki Iwata and Teruki Honma and Yasushi Okuno",
        "doi": "10.1186/s13321-020-00435-6",
        "format": "bibtex",
        "title": "{kGCN: a graph-based deep learning framework for chemical structures}",
        "type": "Text_excerpt",
        "url": "https://jcheminf.biomedcentral.com/articles/10.1186/s13321-020-00435-6",
        "value": "@article{Kojima2020,\n    doi = {10.1186/s13321-020-00435-6},\n    url = {https://jcheminf.biomedcentral.com/articles/10.1186/s13321-020-00435-6},\n    number = {1},\n    volume = {12},\n    journal = {Journal of Cheminformatics},\n    month = {5},\n    year = {2020},\n    title = {{kGCN: a graph-based deep learning framework for chemical structures}},\n    author = {Ryosuke Kojima and Shoichi Ishida and Masateru Ohta and Hiroaki Iwata and Teruki Honma and Yasushi Okuno},\n}"
      },
      "source": "https://raw.githubusercontent.com/clinfo/kGCN/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/clinfo/kGCN"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-06-27T10:31:57Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-12T19:50:31Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A graph-based deep learning framework for life science"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9337376611861498,
      "result": {
        "original_header": "The commands of kgcn",
        "type": "Text_excerpt",
        "value": "- *train_cv* command:\nThe command simplifies cross-validation routines including training stages and estimation(evaluation) stages.\nOnce you execute this command, cross-validation is performed by running a seriese of training and estimation programs.\n \n"
      },
      "source": "https://raw.githubusercontent.com/clinfo/kGCN/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9072553475514589,
      "result": {
        "original_header": "Related library",
        "type": "Text_excerpt",
        "value": "Another PyTorch-based library is also available: \n- kMoL: https://github.com/elix-tech/kmol \nIn the current version of kMoL, it is not completely compatible with kGCN, but we are developing the kMoL library with the aim of compatibility.\n \n"
      },
      "source": "https://raw.githubusercontent.com/clinfo/kGCN/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9439296755156446,
      "result": {
        "original_header": "Directory structure",
        "type": "Text_excerpt",
        "value": "```\n.\n\u251c\u2500\u2500 active_learning/                     :\n\u251c\u2500\u2500 data_generator/                      :\n\u2502\u00a0\u00a0\u00a0 \u251c\u2500\u2500 synth_generator.py              : random graph\n\u2502\u00a0\u00a0\u00a0 \u2514\u2500\u2500 synth_generator_ring.py         : random graph with ring\n\u251c\u2500\u2500 docs/                                : a set of documents\n\u251c\u2500\u2500 example_config/                      : examples of config files\n\u251c\u2500\u2500 example_data/                        : examples of adj. files, label files, etc.\n\u251c\u2500\u2500 example_jbl/                         : examples of jbl. files\n\u251c\u2500\u2500 example_model/                       : examples of model files\n\u251c\u2500\u2500 example_param/                       : examples of parameter domain files\n\u251c\u2500\u2500 example_script/                      : scripts for the examples\n\u251c\u2500\u2500 gcn_modules/                         :\n\u251c\u2500\u2500 gcnvisualizer/                       : kgcn visualization modules\n\u251c\u2500\u2500 graph_kernel/                        : graph kernel SVM\n\u251c\u2500\u2500 hooks/                               : \n\u251c\u2500\u2500 kgcn                                 :\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 legacy                           : duplicated scripts\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 preprocessing/                   : scripts for dataset preparaiton for kgcn \n\u2502\u00a0\u00a0 \u251c\u2500\u2500 core.py                          : a main program files for the GCN model\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 data_util.py                     : utilities for data handling\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 default_model.py                 : \n\u2502\u00a0\u00a0 \u251c\u2500\u2500 error_checker.py                 : error checker\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 feed.py                          : functions to build feed dictionaries\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 feed_index.py                    : functions to build feed dictionaries (index base)\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 layers.py                        : GCN-related layers\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 make_plots.py                    : functions to plot graphs\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 visualization.py                 : functions to visualize trained models\n\u251c\u2500\u2500 kgcn_tf2                             : \n\u251c\u2500\u2500 kgcn_torch                           :\n\u251c\u2500\u2500 KNIME/                               : \n\u251c\u2500\u2500 logs/                                : output directory for exmaples\n\u251c\u2500\u2500 model/                               : output directory for exmaples\n\u251c\u2500\u2500 Notebook/                            : examples of jupyter notebook\n\u251c\u2500\u2500 result/                              : output directory for exmaples\n\u251c\u2500\u2500 sample_kg/                           : \n\u251c\u2500\u2500 sample_chem/                         : \n\u251c\u2500\u2500 sample_nx/                           :\n\u251c\u2500\u2500 script                               : utility sctipts\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 make_dataset.py                  :\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 plot_graph.py                    :\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 show_graph.py                    :\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 show_label_balance.py            :\n\u251c\u2500\u2500 script_cv                            : scripts for parallel cross validation\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 01make_dataset.sh                :\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 02run_fold.sh                    :\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 make_cross_validation_dataset.py : \n\u251c\u2500\u2500 visualization/                       : output directory for exmaples\n\u251c\u2500\u2500 Dockerfile                           :\n\u251c\u2500\u2500 gcn.py                               : the main engin of this project\n\u251c\u2500\u2500 gcn_gen.py                           : an engin for generative models\n\u251c\u2500\u2500 gcn_pair.py                          : an engin for ranking models\n\u251c\u2500\u2500 LICENSE                              : LICENSE file\n\u251c\u2500\u2500 model_functions.py                   :\n\u251c\u2500\u2500 opt_hyperparam.py                    :an engin for optimization of hyper parameters\n\u251c\u2500\u2500 README.md                            : this file\n\u251c\u2500\u2500 setup.py                             :\n\u2514\u2500\u2500 task_sparse_gcn.py                   : \n\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/clinfo/kGCN/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8253603288794575,
      "result": {
        "original_header": "Learning and prediction",
        "type": "Text_excerpt",
        "value": "| command | python file | description |\n| :--     | :--         | :--         |\n| kgcn | gcn.py | a main command of kGCN for learning and prediction |\n| kgcn-gen | gcn_gen.py | a command for generative models (learning, reconstruction, and generation) |\n| kgcn-sparse | task_sparse_gcn.py | a command for on-the-fly learning and prediction using tfrecords |\n \n"
      },
      "source": "https://raw.githubusercontent.com/clinfo/kGCN/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9004193936142446,
      "result": {
        "original_header": "Additional sample1",
        "type": "Text_excerpt",
        "value": "We provide additional example using synthetic data to discriminate 5-node rings and 6-node rings.\nThe following command generates synthetic data as text formats:\n```bash\npython data_generator/synth_generator_ring.py\n``` \nMore information is stored in:\n```\nresult/synth_info.json\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/clinfo/kGCN/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9902745284691541,
      "result": {
        "original_header": "Additional sample2",
        "type": "Text_excerpt",
        "value": "We prepared additional samples for multimodal and multitask learning.\nYou can specify a configuration file (sample_multimodal_config.json/sample_multitask_config.json) as follows:\n```bash\nkgcn --config example_config/multimodal.json train\n```\nFor multimodal, symbolic sequences and graph data are used as the inputs of a neural network.\nThis configuration file specifies the program of model as \"model_multimodal.py\", which includes definition of neural networks for graphs, sequences, and combining them.\nPlease reffer to sample/seq.txt and a coverting program (make_example.py) to prepare sequence data,\n \nIn this sample, \"multitask\" means that multiple labels are allowed for one graph.\nThis configuration file specifies the program of model as \"model_multitask.py\", which includes definition of a loss function for multiple labels.\nPlease reffer to sample_data/multi_label.txt and a coverting program (make_sample.py) to prepare multi labeled data,\n \n"
      },
      "source": "https://raw.githubusercontent.com/clinfo/kGCN/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9875695540987256,
      "result": {
        "original_header": "Generative model",
        "type": "Text_excerpt",
        "value": "gcn_gen.py is an alternative gcn.py for generative models.\nexample_config/vae.json is a setting for VAE (Variational Auto-encoder) that is implemented in example_model/model_vae.py\n \n"
      },
      "source": "https://raw.githubusercontent.com/clinfo/kGCN/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9623477998767473,
      "result": {
        "original_header": "Hyperparamter optimization",
        "type": "Text_excerpt",
        "value": "kgcn-opt (opt_hyperparam.py) is a command for hyperparameter optimization using GPyOpt library (https://github.com/SheffieldML/GPyOpt), a Bayesian optimization libraly.\n./example_config/opt_param.json  is a config file to use gcn.py\n./example_param/domain.json is a domain file to define hyperparameters and their search spaces.\nThe format of this file follows \"domain\" of GPyOpt.\nFor more information for this json file, see the GPyOpt document(http://nbviewer.jupyter.org/github/SheffieldML/GPyOpt/blob/devel/manual/index.ipynb\n). \nWhen you want to change and add hyperparameters, please change domain.json and model file. An example of model file is example_model/opt_param.py in which a hyperparameter is num_gcn_layer. \n"
      },
      "source": "https://raw.githubusercontent.com/clinfo/kGCN/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/clinfo/kGCN/tree/master/docs"
      },
      "technique": "file_exploration"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/clinfo/kGCN/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/clinfo/kGCN/master/Notebook/kGCN_solpred.ipynb"
      },
      "source": "https://raw.githubusercontent.com/clinfo/kGCN/master/Notebook/kGCN_solpred.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/clinfo/kGCN/master/Notebook/kGCN_linkpred.ipynb"
      },
      "source": "https://raw.githubusercontent.com/clinfo/kGCN/master/Notebook/kGCN_linkpred.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 34
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/clinfo/kGCN/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "clinfo/kGCN"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "kGCN: a graph-based deep learning framework for life science"
      },
      "source": "https://raw.githubusercontent.com/clinfo/kGCN/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/clinfo/kGCN/master/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/clinfo/kGCN/master/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/clinfo/kGCN/master/script_cv/01make_dataset.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/clinfo/kGCN/master/script_cv/02run_fold.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/clinfo/kGCN/master/KNIME/python.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/clinfo/kGCN/master/sample_protein/sequence/03run.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/clinfo/kGCN/master/sample_kg/network_prediction/run.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/clinfo/kGCN/master/sample_kg/network_prediction/run_enrichment.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/clinfo/kGCN/master/sample_kg/network_prediction/make_dataset.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/clinfo/kGCN/master/sample_kg/network_prediction/run_plot_Pk_predgraph.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/clinfo/kGCN/master/sample_chem/compound-protein_interaction/run.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/clinfo/kGCN/master/sample_chem/compound-protein_interaction/build_dataset.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/clinfo/kGCN/master/sample_chem/compound-protein_interaction/run_viz.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/clinfo/kGCN/master/sample_chem/compound-protein_interaction/run_viz_conv.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/clinfo/kGCN/master/sample_chem/generative_model/run.single.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/clinfo/kGCN/master/sample_chem/generative_model/run_gen.multi.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/clinfo/kGCN/master/sample_chem/generative_model/run_test.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/clinfo/kGCN/master/sample_chem/generative_model/init_small.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/clinfo/kGCN/master/sample_chem/generative_model/run_gen.single.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/clinfo/kGCN/master/sample_chem/generative_model/init_large.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/clinfo/kGCN/master/sample_chem/generative_model/get_dataset.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/clinfo/kGCN/master/sample_chem/generative_model/init.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/clinfo/kGCN/master/sample_chem/generative_model/run.multi.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/clinfo/kGCN/master/sample_nx/link_prediction/run.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://user-images.githubusercontent.com/1664861/64188778-f9601b00-cead-11e9-8922-da7167fbf9a2.png"
      },
      "source": "https://raw.githubusercontent.com/clinfo/kGCN/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "### Installation (for Ubuntu 18.04)\n\nFirst, please install anaconda by the anaconda instruction.\n```\nwget https://repo.anaconda.com/archive/Anaconda3-2019.07-Linux-x86_64.sh\nsh ./Anaconda3-2019.07-Linux-x86_64.sh\n```\n\nNext, please install following libraries.\n```\nsource ~/.bashrc\nconda update conda\nconda install joblib\n\n# for CPU-only\nconda install tensorflow==1.15.0\n# with GPU support\nconda install tensorflow-gpu==1.15.0\n```\n\nFinally, please install kGCN\n```\npip install --upgrade git+https://github.com/clinfo/kGCN.git\n```\n\nSample programs can be downloaded by git clone from this repositpry:\n```\ngit clone https://github.com/clinfo/kGCN.git\n```\n\nOptional library\n```\nsudo apt install -y libfontconfig1 libxrender1\nconda install rdkit -c rdkit\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/clinfo/kGCN/master/docs/installation_for_ubuntu1804.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "### Installation (for CentOS 7)\n\nFirst, please install anaconda by the anaconda instruction.\n```\ncurl -O  https://repo.anaconda.com/archive/Anaconda3-2019.07-Linux-x86_64.sh\nsh ./Anaconda3-2019.07-Linux-x86_64.sh\n```\n\nNext, please install following libraries.\n```\nsource ~/.bashrc\nconda update conda\nconda install joblib\n\n# for CPU-only\nconda install tensorflow==1.15.0\n# with GPU support\nconda install tensorflow-gpu==1.15.0\n```\n\nFinally, please install kGCN\n```\npip install --upgrade git+https://github.com/clinfo/kGCN.git\n```\n\nSample programs can be downloaded by git clone from this repositpry:\n```\n# if you don't have git \nsudo yum install git\ngit clone https://github.com/clinfo/kGCN.git\n```\n\nOptional library\n```\nsudo yum -y install fontconfig-devel libXrender libXext\nconda install rdkit -c rdkit\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/clinfo/kGCN/master/docs/installation_for_centos7.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "kGCN: a graph-based deep learning framework for life science"
        ],
        "type": "Text_excerpt",
        "value": "A setup script is under construction.\nNow, you have to execute the python codes directly.\n"
      },
      "source": "https://raw.githubusercontent.com/clinfo/kGCN/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "<a href=\"./docs/installation_for_centos7.md\">For CentOS 7</a>",
        "parent_header": [
          "kGCN: a graph-based deep learning framework for life science",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "To install additional modules:\n- Visualizer: please see gcnvisualizer/README.md\n- KNIME: please see KNIME/README.md\n- Jupyter Notebook: please see Notebook/README.md \n- Docker: https://hub.docker.com/r/clinfo/kgcn\n"
      },
      "source": "https://raw.githubusercontent.com/clinfo/kGCN/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9728282780648082,
      "result": {
        "original_header": "kGCN: a graph-based deep learning framework for life science",
        "type": "Text_excerpt",
        "value": "<div align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/1664861/64188778-f9601b00-cead-11e9-8922-da7167fbf9a2.png\" height=\"320px\">\n</div>\n \n"
      },
      "source": "https://raw.githubusercontent.com/clinfo/kGCN/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9888718924022856,
      "result": {
        "original_header": "Sample dataset",
        "type": "Text_excerpt",
        "value": "\nOur sample dataset file (example.jbl) is created by the following command:\n```bash\npython example_script/make_example.py\n```\n \nWhen you create your own dataset, you can refer make_sample.py.\nThis script converts adjacency matrices (example_data/adj.txt), features (example_data/feature.txt), and labels (example_data/label.txt) into the dataset file (example_jbl/sample.jbl) \nFor example, in training phases, you can specify a dataset as follows:\n```bash\nkgcn train --config example_config/sample.json --dataset example_jbl/sample.jbl\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/clinfo/kGCN/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999758287105442,
      "result": {
        "original_header": "Configuration",
        "type": "Text_excerpt",
        "value": "You can specify a configuration file (example_config/sample.json) as follows:\n```bash\nkgcn train --config example_config/sample.json\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/clinfo/kGCN/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9988873485302262,
      "result": {
        "original_header": "Related library",
        "type": "Text_excerpt",
        "value": "Another PyTorch-based library is also available: \n- kMoL: https://github.com/elix-tech/kmol \n"
      },
      "source": "https://raw.githubusercontent.com/clinfo/kGCN/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999621456949607,
      "result": {
        "original_header": "Other",
        "type": "Text_excerpt",
        "value": "| command | python file | description |\n| :--     | :--         | :--         |\n| kgcn-opt | opt_hyperparam.py | a command for hyper parameter optimization using optuna library|\n| gcnv | gcnvisualize/ | a command for visualization (see https://github.com/clinfo/kGCN/tree/master/gcnvisualizer )  \n"
      },
      "source": "https://raw.githubusercontent.com/clinfo/kGCN/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9411280354836313,
      "result": {
        "original_header": "Additional sample1",
        "type": "Text_excerpt",
        "value": "We provide additional example using synthetic data to discriminate 5-node rings and 6-node rings.\nThe following command generates synthetic data as text formats:\n```bash\npython data_generator/synth_generator_ring.py\n``` \nThe following command generates .jbl from text:\n```bash\npython example_script/make_synth.py\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/clinfo/kGCN/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9875494961146861,
      "result": {
        "original_header": "Additional sample2",
        "type": "Text_excerpt",
        "value": "```bash\nkgcn --config example_config/multitask.json train\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/clinfo/kGCN/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9970270451049471,
      "result": {
        "original_header": "Generative model",
        "type": "Text_excerpt",
        "value": "```bash\npython gcn_gen.py --config example_config/vae.json train\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/clinfo/kGCN/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9356202690839314,
      "result": {
        "original_header": "Hyperparamter optimization",
        "type": "Text_excerpt",
        "value": "```bash\nkgcn-opt --config ./example_config/opt_param.json  --domain ./example_param/domain.json\n``` \nkgcn-opt (opt_hyperparam.py) is a command for hyperparameter optimization using GPyOpt library (https://github.com/SheffieldML/GPyOpt), a Bayesian optimization libraly.\n./example_config/opt_param.json  is a config file to use gcn.py\n./example_param/domain.json is a domain file to define hyperparameters and their search spaces.\nThe format of this file follows \"domain\" of GPyOpt.\nFor more information for this json file, see the GPyOpt document(http://nbviewer.jupyter.org/github/SheffieldML/GPyOpt/blob/devel/manual/index.ipynb\n). \nDepending on your environment, it might be necessary to change line 9 (opt_cmd) of opt_hyperparam.py \n"
      },
      "source": "https://raw.githubusercontent.com/clinfo/kGCN/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.9190149252736214,
      "result": {
        "original_header": "Sample dataset",
        "type": "Text_excerpt",
        "value": "\nOur sample dataset file (example.jbl) is created by the following command:\n```bash\npython example_script/make_example.py\n```\n \nWhen you create your own dataset, you can refer make_sample.py.\nThis script converts adjacency matrices (example_data/adj.txt), features (example_data/feature.txt), and labels (example_data/label.txt) into the dataset file (example_jbl/sample.jbl) \nFor example, in training phases, you can specify a dataset as follows:\n```bash\nkgcn train --config example_config/sample.json --dataset example_jbl/sample.jbl\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/clinfo/kGCN/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9348167264468263,
      "result": {
        "original_header": "Configuration",
        "type": "Text_excerpt",
        "value": "You can specify a configuration file (example_config/sample.json) as follows:\n```bash\nkgcn train --config example_config/sample.json\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/clinfo/kGCN/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8366743404311681,
      "result": {
        "original_header": "The commands of kgcn",
        "type": "Text_excerpt",
        "value": "- *infer* command:\nThe script estimates labels of test data using the loaded model. \n"
      },
      "source": "https://raw.githubusercontent.com/clinfo/kGCN/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.933079743807861,
      "result": {
        "original_header": "Directory structure",
        "type": "Text_excerpt",
        "value": "```\n.\n\u251c\u2500\u2500 active_learning/                     :\n\u251c\u2500\u2500 data_generator/                      :\n\u2502\u00a0\u00a0\u00a0 \u251c\u2500\u2500 synth_generator.py              : random graph\n\u2502\u00a0\u00a0\u00a0 \u2514\u2500\u2500 synth_generator_ring.py         : random graph with ring\n\u251c\u2500\u2500 docs/                                : a set of documents\n\u251c\u2500\u2500 example_config/                      : examples of config files\n\u251c\u2500\u2500 example_data/                        : examples of adj. files, label files, etc.\n\u251c\u2500\u2500 example_jbl/                         : examples of jbl. files\n\u251c\u2500\u2500 example_model/                       : examples of model files\n\u251c\u2500\u2500 example_param/                       : examples of parameter domain files\n\u251c\u2500\u2500 example_script/                      : scripts for the examples\n\u251c\u2500\u2500 gcn_modules/                         :\n\u251c\u2500\u2500 gcnvisualizer/                       : kgcn visualization modules\n\u251c\u2500\u2500 graph_kernel/                        : graph kernel SVM\n\u251c\u2500\u2500 hooks/                               : \n\u251c\u2500\u2500 kgcn                                 :\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 legacy                           : duplicated scripts\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 preprocessing/                   : scripts for dataset preparaiton for kgcn \n\u2502\u00a0\u00a0 \u251c\u2500\u2500 core.py                          : a main program files for the GCN model\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 data_util.py                     : utilities for data handling\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 default_model.py                 : \n\u2502\u00a0\u00a0 \u251c\u2500\u2500 error_checker.py                 : error checker\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 feed.py                          : functions to build feed dictionaries\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 feed_index.py                    : functions to build feed dictionaries (index base)\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 layers.py                        : GCN-related layers\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 make_plots.py                    : functions to plot graphs\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 visualization.py                 : functions to visualize trained models\n\u251c\u2500\u2500 kgcn_tf2                             : \n\u251c\u2500\u2500 kgcn_torch                           :\n\u251c\u2500\u2500 KNIME/                               : \n\u251c\u2500\u2500 logs/                                : output directory for exmaples\n\u251c\u2500\u2500 model/                               : output directory for exmaples\n\u251c\u2500\u2500 Notebook/                            : examples of jupyter notebook\n\u251c\u2500\u2500 result/                              : output directory for exmaples\n\u251c\u2500\u2500 sample_kg/                           : \n\u251c\u2500\u2500 sample_chem/                         : \n\u251c\u2500\u2500 sample_nx/                           :\n\u251c\u2500\u2500 script                               : utility sctipts\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 make_dataset.py                  :\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 plot_graph.py                    :\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 show_graph.py                    :\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 show_label_balance.py            :\n\u251c\u2500\u2500 script_cv                            : scripts for parallel cross validation\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 01make_dataset.sh                :\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 02run_fold.sh                    :\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 make_cross_validation_dataset.py : \n\u251c\u2500\u2500 visualization/                       : output directory for exmaples\n\u251c\u2500\u2500 Dockerfile                           :\n\u251c\u2500\u2500 gcn.py                               : the main engin of this project\n\u251c\u2500\u2500 gcn_gen.py                           : an engin for generative models\n\u251c\u2500\u2500 gcn_pair.py                          : an engin for ranking models\n\u251c\u2500\u2500 LICENSE                              : LICENSE file\n\u251c\u2500\u2500 model_functions.py                   :\n\u251c\u2500\u2500 opt_hyperparam.py                    :an engin for optimization of hyper parameters\n\u251c\u2500\u2500 README.md                            : this file\n\u251c\u2500\u2500 setup.py                             :\n\u2514\u2500\u2500 task_sparse_gcn.py                   : \n\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/clinfo/kGCN/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8689201725767498,
      "result": {
        "original_header": "Preprocessing",
        "type": "Text_excerpt",
        "value": "| command | python file | description |\n| :--     | :--         | :--         |\n|kgcn-chem | kgcn/preprocessing/chem.py | a command to preprocess chemical compounds and protein data |\n|kgcn-kg | kgcn/preprocessing/kg.py     | a command to preprocess knowledge graph data |\n|kgcn-cv-splitter | script_cv/cv_splitter | a command to split a dataset file(.jbl) for cross-validation (especially for parallel execution) |\n|kgcn-join | kgcn/data_join               | a command to join dataset files(.jbl) |\n \n"
      },
      "source": "https://raw.githubusercontent.com/clinfo/kGCN/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8719768096734998,
      "result": {
        "original_header": "Additional sample1",
        "type": "Text_excerpt",
        "value": "The following command generates .jbl from text:\n```bash\npython example_script/make_synth.py\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/clinfo/kGCN/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9079404748782921,
      "result": {
        "original_header": "Additional sample2",
        "type": "Text_excerpt",
        "value": "```bash\nkgcn --config example_config/multitask.json train\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/clinfo/kGCN/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9628521700026533,
      "result": {
        "original_header": "Generative model",
        "type": "Text_excerpt",
        "value": "```bash\npython gcn_gen.py --config example_config/vae.json train\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/clinfo/kGCN/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8116982278199122,
      "result": {
        "original_header": "Hyperparamter optimization",
        "type": "Text_excerpt",
        "value": "```bash\nkgcn-opt --config ./example_config/opt_param.json  --domain ./example_param/domain.json\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/clinfo/kGCN/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/clinfo/kGCN/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "cheminformatics, gcn, graph-convolutional-networks, neural-networks"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "LICENSE AGREEMENT OF THE kGCN SYSTEM\n\nCopyright (c) 2019,\nRyosuke Kojima\nAll rights reserved.\n\nPermission is hereby granted, free of charge, to the person who uses this software and\nassociated documentation files (the \"Software\") for evaluation, non-profit research\npurposes, and the registered projects/users only (\"the User\"). The registered projects/users\ncontains profit and non-profit users and projects who obtain the temoporal permission\nfrom the author or copyright holder. The User has rights to use, copy, modify, merge,\npublish,  and/or distribute copies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the conditions described above.\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/clinfo/kGCN/master/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "kGCN: a graph-based deep learning framework for life science"
        ],
        "type": "Text_excerpt",
        "value": "This edition of kGCN is for evaluation, learning, and non-profit\nacademic research purposes only, and a license is needed for any other uses.\nPlease send requests on license or questions to `kojima.ryosuke.8e@kyoto-u.ac.jp`.\n\n"
      },
      "source": "https://raw.githubusercontent.com/clinfo/kGCN/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "kGCN"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "clinfo"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 8139024,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 218015,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Java",
        "size": 212747,
        "type": "Programming_language",
        "value": "Java"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Pawn",
        "size": 15572,
        "type": "Programming_language",
        "value": "Pawn"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 11852,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 11796,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 865,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Batchfile",
        "size": 76,
        "type": "Programming_language",
        "value": "Batchfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/clinfo/kGCN/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "parent_header": [
          "kGCN: a graph-based deep learning framework for life science",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "* python: >3.6\n* tensorflow: >1.12 (partially suporting TensorFlow2 by the compatible mode, but does NOT guarantee working on TensorFlow2)\n* joblib\n* numpy\n* scipy \n* scikit-learn: >0.21\n* matplotlib\n"
      },
      "source": "https://raw.githubusercontent.com/clinfo/kGCN/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Run the demo",
        "parent_header": [
          "kGCN: a graph-based deep learning framework for life science"
        ],
        "type": "Text_excerpt",
        "value": "This is a TensorFlow implementation of Graph Convolutional Networks for the task of classification of graphs.\n\nOur implementation of Graph convolutional layers consulted the following paper:\n\nThomas N. Kipf, Max Welling, [Semi-Supervised Classification with Graph Convolutional Networks](http://arxiv.org/abs/1609.02907) (ICLR 2017)\n\nFor training with a dataset, example_jbl/synthetic.jbl, by using a neural network defined in example_model/model.py\n```bash\nkgcn train --config example_config/sample.json\n```\nwhere sample.json is a config file.\n\nFor testing and inferrence\n```bash\nkgcn infer --config example_config/sample.json --model model/model.sample.last.ckpt\n```\nwhere model/model.sample.last.ckpt is a trained model file.\n\n"
      },
      "source": "https://raw.githubusercontent.com/clinfo/kGCN/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier"
  ],
  "somef_provenance": {
    "date": "2024-10-06 14:04:09",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 114
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Run the demo",
        "parent_header": [
          "kGCN: a graph-based deep learning framework for life science"
        ],
        "type": "Text_excerpt",
        "value": "This is a TensorFlow implementation of Graph Convolutional Networks for the task of classification of graphs.\n\nOur implementation of Graph convolutional layers consulted the following paper:\n\nThomas N. Kipf, Max Welling, [Semi-Supervised Classification with Graph Convolutional Networks](http://arxiv.org/abs/1609.02907) (ICLR 2017)\n\nFor training with a dataset, example_jbl/synthetic.jbl, by using a neural network defined in example_model/model.py\n```bash\nkgcn train --config example_config/sample.json\n```\nwhere sample.json is a config file.\n\nFor testing and inferrence\n```bash\nkgcn infer --config example_config/sample.json --model model/model.sample.last.ckpt\n```\nwhere model/model.sample.last.ckpt is a trained model file.\n\n"
      },
      "source": "https://raw.githubusercontent.com/clinfo/kGCN/master/README.md",
      "technique": "header_analysis"
    }
  ]
}