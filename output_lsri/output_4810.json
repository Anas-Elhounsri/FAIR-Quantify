{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "~ ~ ~ Run LTR_FINDER in parallel ~ ~ ~"
        ],
        "type": "Text_excerpt",
        "value": "If you find LTR_FINDER_parallel helpful, please cite this manuscript:\n\nOu S, Jiang N. LTR_FINDER_parallel: parallelization of LTR_FINDER enabling rapid identification of long terminal repeat retrotransposons. Mob DNA [2019;10(1):48](https://mobilednajournal.biomedcentral.com/articles/10.1186/s13100-019-0193-0).\n\n"
      },
      "source": "https://raw.githubusercontent.com/oushujun/LTR_FINDER_parallel/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/oushujun/LTR_FINDER_parallel"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-05-26T02:31:51Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-26T14:03:12Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A parallel wrapper for LTR_FINDER"
      },
      "technique": "GitHub_API"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation: No need. Just download and run.",
        "parent_header": [
          "~ ~ ~ Run LTR_FINDER in parallel ~ ~ ~"
        ],
        "type": "Text_excerpt",
        "value": "\tUsage: perl LTR_FINDER_parallel -seq [file] -size [int] -threads [int]  \n\tOptions:\n\t\t-seq    [file]  Specify the sequence file.\n\t\t-size   [int]   Specify the size you want to split the genome sequence.\n\t\t\t\tPlease make it large enough to avoid spliting too many LTR elements. Default 5000000 (bp).  \t\t\t \n\t\t-time   [int]   Specify the maximum time to run a subregion (a thread).\n\t\t\t\tThis helps to skip simple repeat regions that take a substantial of time to run. Default: 1500 (seconds).\n\t\t\t\tSuggestion: 300 for -size 1000000. Increase -time when -size increased.  \n\t\t-try1   [0|1]   If a region requires more time than the specified -time (timeout), decide:  \n\t\t\t\t\t0, discard the entire region.\n\t\t\t\t\t1, further split to 50 Kb regions to salvage LTR candidates (default);\n\t\t-harvest_out    Output LTRharvest format if specified. Default: output LTR_FINDER table format.\n\t\t-next           Only summarize the results for previous jobs without rerunning LTR_FINDER (for -v).\n\t\t-verbose|-v     Retain LTR_FINDER outputs for each sequence piece.\n\t\t-finder [file]  The path to the program LTR_FINDER (default v1.0.7, included in this package).\n\t\t-threads|-t     [int]   Indicate how many CPU/threads you want to run LTR_FINDER.\n\t\t-check_dependencies Check if dependencies are fullfiled and quit\n\t\t-help|-h        Display this help information.\n\n"
      },
      "source": "https://raw.githubusercontent.com/oushujun/LTR_FINDER_parallel/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/oushujun/LTR_FINDER_parallel/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "faq": [
    {
      "confidence": 1,
      "result": {
        "original_header": "FAQs and best practices",
        "parent_header": [
          "~ ~ ~ Run LTR_FINDER in parallel ~ ~ ~"
        ],
        "type": "Text_excerpt",
        "value": "1. How to generate output files for [LTR_retriever](https://github.com/oushujun/LTR_retriever)?  \nA: You can use the `-harvest_out` parameter to generate `LTRharvest`-format output, then feed to `LTR_retriever` using `-inharvest`. If you have more than one `LTRharvest` output, simply `cat` them together.\n\n2. How to prepare the genome file?  \nA: It's highly recommended to use short and simple sequence names. For example, use letters, numbers, and _ to generate unique names shorter than 15 bits. This will make your downstream analyses much more easier. If you have delicate sequence names and encounter errors, you may want to simplify them and try again.\n\n3. Do I really need to modify the `-size`, `-time`, and `-try1` parameters?  \nA: Not really. Except when you are 100% sure what you are doing, these parameters are optimized for the best performance in general.\n\n"
      },
      "source": "https://raw.githubusercontent.com/oushujun/LTR_FINDER_parallel/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 12
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/oushujun/LTR_FINDER_parallel/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "oushujun/LTR_FINDER_parallel"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/oushujun/LTR_FINDER_parallel/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation: No need. Just download and run.",
        "parent_header": [
          "~ ~ ~ Run LTR_FINDER in parallel ~ ~ ~"
        ],
        "type": "Text_excerpt",
        "value": "\tUsage: perl LTR_FINDER_parallel -seq [file] -size [int] -threads [int]  \n\tOptions:\n\t\t-seq    [file]  Specify the sequence file.\n\t\t-size   [int]   Specify the size you want to split the genome sequence.\n\t\t\t\tPlease make it large enough to avoid spliting too many LTR elements. Default 5000000 (bp).  \t\t\t \n\t\t-time   [int]   Specify the maximum time to run a subregion (a thread).\n\t\t\t\tThis helps to skip simple repeat regions that take a substantial of time to run. Default: 1500 (seconds).\n\t\t\t\tSuggestion: 300 for -size 1000000. Increase -time when -size increased.  \n\t\t-try1   [0|1]   If a region requires more time than the specified -time (timeout), decide:  \n\t\t\t\t\t0, discard the entire region.\n\t\t\t\t\t1, further split to 50 Kb regions to salvage LTR candidates (default);\n\t\t-harvest_out    Output LTRharvest format if specified. Default: output LTR_FINDER table format.\n\t\t-next           Only summarize the results for previous jobs without rerunning LTR_FINDER (for -v).\n\t\t-verbose|-v     Retain LTR_FINDER outputs for each sequence piece.\n\t\t-finder [file]  The path to the program LTR_FINDER (default v1.0.7, included in this package).\n\t\t-threads|-t     [int]   Indicate how many CPU/threads you want to run LTR_FINDER.\n\t\t-check_dependencies Check if dependencies are fullfiled and quit\n\t\t-help|-h        Display this help information.\n\n"
      },
      "source": "https://raw.githubusercontent.com/oushujun/LTR_FINDER_parallel/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Parameter setting for LTR_FINDER",
        "parent_header": [
          "~ ~ ~ Run LTR_FINDER in parallel ~ ~ ~"
        ],
        "type": "Text_excerpt",
        "value": "Currently there is no parameter settings for LTR_FINDER in this parallel version. I have chose the \"best\" parameters for you:\n\n\t-w 2 -C -D 15000 -d 1000 -L 7000 -l 100 -p 20 -M 0.85\n\nPlease refer to [LTR_FINEDR](https://github.com/xzhub/LTR_Finder) for details of these parameters.\n\nIf you want to use other parameters in LTR_FINDER_parallel, please edit the file `LTR_FINDER_parallel` line 9 to change the preset parameters.\n\n"
      },
      "source": "https://raw.githubusercontent.com/oushujun/LTR_FINDER_parallel/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/oushujun/LTR_FINDER_parallel/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "edta, genome-annotation, ltr-finder, ltr-finder-parallel, ltr-retriever, ltr-retrotransposons"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "The MIT License (MIT)\n\nCopyright 2019 Shujun Ou and Ning Jiang\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/oushujun/LTR_FINDER_parallel/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "LTR_FINDER_parallel"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "oushujun"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 13018,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/oushujun/LTR_FINDER_parallel/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "oushujun",
          "type": "User"
        },
        "date_created": "2020-01-28T20:21:38Z",
        "date_published": "2020-01-28T20:29:49Z",
        "description": "### Introduction\r\n\r\nLTR_FINDER_parallel is an installation-free Perl wrapper for [LTR_FINDER](https://github.com/xzhub/LTR_Finder) and is released under the MIT License. By default, the program will search for `ltr_finder` in the bash `ENV`. If nothing returned, it will use the precompiled binary included in this package (`LTR_FINDER_parallel/bin/LTR_FINDER.x86_64-1.0.7/ltr_finder`).\r\n\r\n### Usage\r\n\r\nPlease refer to the [README](https://github.com/oushujun/LTR_FINDER_parallel).\r\n\r\n### Citation\r\n\r\nOu S, Jiang N. LTR_FINDER_parallel: parallelization of LTR_FINDER enabling rapid identification of long terminal repeat retrotransposons. Mob DNA 2019;10(1):48.",
        "html_url": "https://github.com/oushujun/LTR_FINDER_parallel/releases/tag/v1.1",
        "name": "Official release of LTR_FINDER_parallel",
        "release_id": 23199175,
        "tag": "v1.1",
        "tarball_url": "https://api.github.com/repos/oushujun/LTR_FINDER_parallel/tarball/v1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/oushujun/LTR_FINDER_parallel/releases/23199175",
        "value": "https://api.github.com/repos/oushujun/LTR_FINDER_parallel/releases/23199175",
        "zipball_url": "https://api.github.com/repos/oushujun/LTR_FINDER_parallel/zipball/v1.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "~ ~ ~ Run LTR_FINDER in parallel ~ ~ ~",
        "type": "Text_excerpt",
        "value": "This is a Perl wrapper for [LTR_FINEDR](https://github.com/xzhub/LTR_Finder). All rights reserved to the original author. Both LTR_FINDER and LTR_FINDER_parallel are released under the MIT License.\n\n"
      },
      "source": "https://raw.githubusercontent.com/oushujun/LTR_FINDER_parallel/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation: No need. Just download and run.",
        "parent_header": [
          "~ ~ ~ Run LTR_FINDER in parallel ~ ~ ~"
        ],
        "type": "Text_excerpt",
        "value": "\tUsage: perl LTR_FINDER_parallel -seq [file] -size [int] -threads [int]  \n\tOptions:\n\t\t-seq    [file]  Specify the sequence file.\n\t\t-size   [int]   Specify the size you want to split the genome sequence.\n\t\t\t\tPlease make it large enough to avoid spliting too many LTR elements. Default 5000000 (bp).  \t\t\t \n\t\t-time   [int]   Specify the maximum time to run a subregion (a thread).\n\t\t\t\tThis helps to skip simple repeat regions that take a substantial of time to run. Default: 1500 (seconds).\n\t\t\t\tSuggestion: 300 for -size 1000000. Increase -time when -size increased.  \n\t\t-try1   [0|1]   If a region requires more time than the specified -time (timeout), decide:  \n\t\t\t\t\t0, discard the entire region.\n\t\t\t\t\t1, further split to 50 Kb regions to salvage LTR candidates (default);\n\t\t-harvest_out    Output LTRharvest format if specified. Default: output LTR_FINDER table format.\n\t\t-next           Only summarize the results for previous jobs without rerunning LTR_FINDER (for -v).\n\t\t-verbose|-v     Retain LTR_FINDER outputs for each sequence piece.\n\t\t-finder [file]  The path to the program LTR_FINDER (default v1.0.7, included in this package).\n\t\t-threads|-t     [int]   Indicate how many CPU/threads you want to run LTR_FINDER.\n\t\t-check_dependencies Check if dependencies are fullfiled and quit\n\t\t-help|-h        Display this help information.\n\n"
      },
      "source": "https://raw.githubusercontent.com/oushujun/LTR_FINDER_parallel/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Input",
        "parent_header": [
          "~ ~ ~ Run LTR_FINDER in parallel ~ ~ ~"
        ],
        "type": "Text_excerpt",
        "value": "Genome file in multi-FASTA format.\n\n"
      },
      "source": "https://raw.githubusercontent.com/oushujun/LTR_FINDER_parallel/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Output",
        "parent_header": [
          "~ ~ ~ Run LTR_FINDER in parallel ~ ~ ~"
        ],
        "type": "Text_excerpt",
        "value": "GFF3, LTRharvest (STDOUT) or LTR_FINDER (-w 2) formats of predicted LTR candidates.\n\n"
      },
      "source": "https://raw.githubusercontent.com/oushujun/LTR_FINDER_parallel/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Performance benchmark",
        "parent_header": [
          "~ ~ ~ Run LTR_FINDER in parallel ~ ~ ~"
        ],
        "type": "Text_excerpt",
        "value": "Genome | Arabidopsis | Rice | Maize | Wheat\n------ | ----------- | ---- | ----- | -----\nVersion | TAIR10 | MSU7 | AGPv4 | CS1.0\nSize | 119.7 Mb | 374.5 Mb | 2134.4 Mb\t| 14547.3 Mb\nOriginal memory (1 CPU*)\t| 0.37 Gbyte\t| 0.55 Gbyte\t| 5.00 Gbyte\t| 11.88 Gbyte\nParallel memory (36 CPUs*)\t| 0.10 Gbyte\t| 0.12 Gbyte\t| 0.82 Gbyte\t| 17.67 Gbyte\nOriginal time (1 CPU)\t| 0.58 h\t| 2.1 h\t| 448.5 h\t| 10169.3 h\nParallel time (36 CPUs)\t| 6.4 min\t| 2.6 min\t| 10.3 min\t| 71.8 min\nSpeed up\t| 5.4 x\t| 48.5 x\t| 2,613 x\t| 8,498 x\nNumber of LTR candidates (1 CPU)\t| 226\t| 2,851\t| 60,165\t| 231,043\nNumber of LTR candidates (36 CPUs)\t| 226\t| 2,834\t| 59,658\t| 237,352\n% difference of candidate #\t| 0.00%\t| 0.60%\t| 0.84%\t| -2.73%\n\n \\*Intel(R) Xeon(R) CPU E5-2660 v4 @ 2.00GHz\n\n"
      },
      "source": "https://raw.githubusercontent.com/oushujun/LTR_FINDER_parallel/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Known issues",
        "parent_header": [
          "~ ~ ~ Run LTR_FINDER in parallel ~ ~ ~"
        ],
        "type": "Text_excerpt",
        "value": "1. Currently I am using a non-overlapping way to cut the original sequence. Some LTR elements could be broken due to this. So far the side-effect is minimal (< 1% loss) comparing to the performance boost (up to 8,500X faster). I don't have a plan to update it to a sliding window scheme. Welcome to improve it and request for merge.  \n1. When a single input sequence is longer than 1 Gbp (observed in Gymnosperm genomes), the parallel script may quit with the \"Out of Memory!\" error. I have not found the cause of this error yet, but the memory footprint seems not large. The `cut.pl` script should be fine and you will see the `*.finder` folder with split sequences in it. A workaround is to run `LTR_FINDER` with each split sequence and output to `$seq.finder.scn`, then run `LTR_FINDER_parallel` with an additional parameter `-next` to consolidate these results. Another workaround is to split the sequence to less than 1 Gbp (eg., 900 Mbp) using the `cut.pl` script, then run `LTR_FINDER_parallel` on the split sequences. The same error is observed in [LTR_HARVEST_parallel](https://github.com/oushujun/LTR_HARVEST_parallel), thus you may use the same workaround.\n\nFor any other issues please open a thread and I will be happy to help.\n"
      },
      "source": "https://raw.githubusercontent.com/oushujun/LTR_FINDER_parallel/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 17:45:57",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 49
      },
      "technique": "GitHub_API"
    }
  ]
}