{
  "application_domain": [
    {
      "confidence": 66.92,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/yongzhuang/DeepSVFilter"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact",
        "parent_header": [
          "DeepSVFilter"
        ],
        "type": "Text_excerpt",
        "value": "   yongzhuang.liu@hit.edu.cn\n   "
      },
      "source": "https://raw.githubusercontent.com/yongzhuang/DeepSVFilter/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-07-27T11:56:21Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-28T11:06:57Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "parent_header": [
          "DeepSVFilter"
        ],
        "type": "Text_excerpt",
        "value": "DeepSVFilter is a deep learning based tool designed to filter false positive structural variants (SVs) obtained by any computational approaches from short read whole genome sequencing data. It can be used as either a stand-alone tool to filter SVs or coupled with commonly used SV detection tool (Delly, Lumpy, Manta et al.) to improve specificity.\n"
      },
      "source": "https://raw.githubusercontent.com/yongzhuang/DeepSVFilter/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/yongzhuang/DeepSVFilter/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/yongzhuang/DeepSVFilter/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "yongzhuang/DeepSVFilter"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DeepSVFilter"
      },
      "source": "https://raw.githubusercontent.com/yongzhuang/DeepSVFilter/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/yongzhuang/DeepSVFilter/master/example/predict.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/yongzhuang/DeepSVFilter/master/example/preprocess.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Install from github (requires Python 3.6.* or newer)",
        "parent_header": [
          "DeepSVFilter",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "1. https://github.com/yongzhuang/DeepSVFilter.git\n2. cd DeepSVFilter\n3. pip install .\n"
      },
      "source": "https://raw.githubusercontent.com/yongzhuang/DeepSVFilter/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8154229640621159,
      "result": {
        "original_header": "Input and Output",
        "type": "Text_excerpt",
        "value": "3. The 'train' command will take four SV image path files and output the trained model in the checkpoint directory.   \n"
      },
      "source": "https://raw.githubusercontent.com/yongzhuang/DeepSVFilter/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/yongzhuang/DeepSVFilter/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2019 Yongzhuang  Liu\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/yongzhuang/DeepSVFilter/master/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "DeepSVFilter"
        ],
        "type": "Text_excerpt",
        "value": "[MIT](https://github.com/yongzhuang/TumorCNV/blob/master/LICENSE)\n"
      },
      "source": "https://raw.githubusercontent.com/yongzhuang/DeepSVFilter/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DeepSVFilter"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "yongzhuang"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 354582,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 311,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/yongzhuang/DeepSVFilter/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "parent_header": [
          "DeepSVFilter",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "tensorflow 1.15.0, matplotlib==3.1.0, numpy<2.0,>=1.16.0, opencv-python==3.1.0.4, Pillow==7.2.0, pysam==0.15.4, scikit-learn==0.19.2, scipy"
      },
      "source": "https://raw.githubusercontent.com/yongzhuang/DeepSVFilter/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running Time and Memory Requirements",
        "parent_header": [
          "DeepSVFilter"
        ],
        "type": "Text_excerpt",
        "value": "1. The training time is less than 12 hours for a typical size of training set (about 10,000 positive and negative examples).  \n\n2. The predicting time is less than 1 hour for a typical human genome (about 5000 candidate SVs).  \n\n3. All analysis in the manuscript were run on a 384GB memory server.  \n"
      },
      "source": "https://raw.githubusercontent.com/yongzhuang/DeepSVFilter/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running",
        "parent_header": [
          "DeepSVFilter"
        ],
        "type": "Text_excerpt",
        "value": "usage: DeepSVFilter [OPTIONS]  \n\n**1. preprocess**\n      This option is used to generate SV images for candidate SVs.\n\n\tusage: DeepSVFilter preprocess [OPTIONS]  \n\n\t\t--sv_type\t\t<STR>\tSV type (DEL or DUP) (required)  \n\t\n\t\t--bam_path\t\t<FILE>\tBAM file (required)  \n\t\n\t\t--bed_path\t\t<FILE>\tSV BED file (required)  \n\t\n\t\t--patch_size\t\t<INT>\timage patch size (224 or 299) (required)  \n\t\n\t\t--output_imgs_dir\t<DIR>\toutput image folder (required  \n\t\n\t\t--mean_insert_size\t<INT>\tmean of the insert size (optional)  \n\t\n\t\t--sd_insert_size\t<INT>\tstandard deviation of the insert size (optional)  \n\n**2. augmentate**\n      This option is used to do data augmentation for typical SVs. Note that this step is optional.\n\n\tusage: DeepSVFilter augmentate [OPTIONS]   \n\n\t\t--output_imgs_dir\t<DIR>\toutput image folder (required)\n\t\t\n\t\t--image_path_file\t<FILE>\tinput typical true or false image path file (required)\n\t\t\n\t\t--patch_size\t\t<INT>\timage patch size (224 or 299) (required)  \n\n**3. train**\n      This option is used to train a convolutional neural network (CNN) based SV classification model.  \n\n\tusage: DeepSVFilter train [OPTIONS]   \n\n\t\t--sv_type\t\t<STR>\tSV type (DEL or DUP) (required)  \n\t\t--checkpoint_dir\t<DIR>\tcheckpoint folder (required)  \n\t\t--pos_train_file\t<FILE>\tpath file of positive SV images used for training (required)  \n\t\t--neg_train_file\t<FILE>\tpath file of negative SV images used for training (required)  \n\t\t--pos_eval_file\t\t<FILE>\tpath file of positive SV images used for evaluation (required)  \n\t\t--neg_eval_file\t\t<FILE>\tpath file of negative SV images used for evaluation (required)  \n\t\t--eval_result_dir\t<DIR>\tvalidation result (required)  \n\t\t--summary_dir\t\t<DIR>\ttensorboard summary (required)  \n\t\t--use_gpu\t\t<INT>\tgpu flag, 1 for GPU and 0 for CPU (optional, default 0)  \n\t\t--gpu_idx\t\t<INT>\tGPU idx (optional, default 0)  \n\t\t--gpu_mem\t\t<FLOAT>\tgpu memory usage (0 to 1) (optional, default 0.5)  \n\t\t--model\t\t\t<STR>\tM1(for MobileNet_v1) or M2_1.0(for MobileNet_v2_1.0) or M2_1.4(for MobileNet_v2_1.4) or NAS(for NASNet_A_Mobile) or PNAS(for PNASNet_5_Mobile) or IR_v2(for Inception_ResNet_v2) (optional, default M1)  \n\t\t--epoch \t\t<INT>\tnumber of total epoches (optional, default 13)  \n\t\t--batch_size\t\t<INT>\tnumber of samples in one batch (optinal, default 16)  \n\t\t--start_lr\t\t<INT>\tinitial learning rate for adam (optional, default 0.001)  \n\t\t--eval_every_epoch\t<INT>\tevaluating and saving checkpoints every # epoch (optional, default 1)  \n\t\t--num_cores\t\t<INT>\tmaximum number of CPU cores (optional, default: use all cpu cores)   \n\n**4. predict**\n      This option is used to make predictions for candidate SVs, and the SVs with scores less than the specified threshold (default 0.5) are filtered out.  \n\n\tusage: DeepSVFilter predict [OPTIONS]  \n\n\t\t--sv_type\t\t<STR>\tSV type (DEL or DUP) (required)  \n\t\t--checkpoint_dir\t<DIR>\tcheckpoint folder (required)  \n\t\t--test_file\t\t<FILE>\tSV image path file (required)  \n\t\t--test_result_dir\t<DIR>\tSV filtering results (required)  \n\t\t--use_gpu\t\t<INT>\tgpu flag, 1 for GPU and 0 for CPU (optional, default 0)  \n\t\t--gpu_idx\t\t<INT>\tGPU idx (optional, default 0)  \n\t\t--gpu_mem\t\t<FLOAT>\tgpu memory usage (0 to 1) (optional, default 0.5)  \n\t\t--model\t\t\t<STR>\tM1(for MobileNet_v1) or M2_1.0(for MobileNet_v2_1.0) or M2_1.4(for MobileNet_v2_1.4) or NAS(for NASNet_A_Mobile) or PNAS(for PNASNet_5_Mobile) or IR_v2(for Inception_ResNet_v2) (optional, default M1)   \n\n**5. vcf2bed**\n\tThis option is used to used to convert SV vcf file to bed file.  \n\n\tusage: vcf2bed [OPTIONS]  \n\n\t\t--sv_type\t<STR>\tSV Type (DEL or DUP) (required)  \n\t\t--vcf_file\t<FILE>\tvcf file (required)  \n\t\t--bed_file\t<FILE>\tbed file (required)  \n\t\t--tool_name \t<STR>\tdelly,manta,lumpy or giab (required)  \n\t\t--exclude\t<FILE>\texclude bed file (optional, default NULL)  \n\t\t--length\t<INT>\tSV length (optional, default 100)  \n\n**6. extract_typical_SV**\n\tThis optional is used to extract typical SVs defined in the manuscript.  \n\n\tusage: extract_typical_SV [OPTIONS]  \n\n\t\t--sv_type\t\t<STR>\tSV Type (DEL or DUP) (required)  \n\t\t--vcf_file\t\t<FILE>\tvcf file (required)  \n\t\t--bed_file\t\t<FILE>\tbed file (required)  \n\t\t--ground_truth_file \t<FILE>\tground truth vcf file (required)  \n\t\t--tool_name \t\t<STR>\tdelly,manta,lumpy or giab (required)  \n\t\t--exclude\t\t<FILE>\texclude bed file (optional, default NULL)  \n\t\t--length\t\t<INT>\tSV length (optional, default 100)  \n"
      },
      "source": "https://raw.githubusercontent.com/yongzhuang/DeepSVFilter/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running Time and Memory Requirements",
        "parent_header": [
          "DeepSVFilter"
        ],
        "type": "Text_excerpt",
        "value": "1. The training time is less than 12 hours for a typical size of training set (about 10,000 positive and negative examples).  \n\n2. The predicting time is less than 1 hour for a typical human genome (about 5000 candidate SVs).  \n\n3. All analysis in the manuscript were run on a 384GB memory server.  \n"
      },
      "source": "https://raw.githubusercontent.com/yongzhuang/DeepSVFilter/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 11:56:19",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 17
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Example",
        "parent_header": [
          "DeepSVFilter"
        ],
        "type": "Text_excerpt",
        "value": "**1. run preprocess.sh to get candidate SV images**  \n\n DeepSVFilter preprocess \\  \n        --sv_type=DEL \\  \n        --patch_size=224 \\  \n        --bam_path=./data/example.bam \\  \n        --bed_path=./data/example.bed \\  \n        --output_imgs_dir=./result/images  \n\n**2. run predict.sh to make predictions for candidate SVs**  \n\n DeepSVFilter predict \\  \n \t--sv_type DEL \\  \n \t--test_file ./result/images/IMG_PATH.txt \\  \n \t--checkpoint_dir ./checkpoint \\  \n \t--test_result_dir ./result/filteredSVs\n\t\n**3. augmentate example**\n\n DeepSVFilter augmentate \\   \n    --image_path_file /path/to/IMG_PATH.txt \\    \n    --patch_size 299 \\  \n    --output_imgs_dir /path/to/output_imgs_dir\n    \n**3. train example**\n\n DeepSVFilter train \\   \n        --use_gpu=0 \\   \n        --sv_type=DEL \\   \n        --model=M1 \\  \n        --epoch=13 \\   \n        --batch_size=16 \\     \n        --start_lr=0.001 \\     \n        --eval_every_epoch=1 \\   \n        --checkpoint_dir=/path/to/checkpoint \\   \n        --pos_train_file=/path/to/TP_TRAIN.txt \\   \n        --neg_train_file=/path/to/FP_TRAIN.txt \\  \n        --pos_eval_file=/path/to/TP_EVAL.txt \\   \n        --neg_eval_file=/path/to/FP_EVAL.txt \\    \n        --eval_result_dir=/path/to/eval_PNAS_results \\  \n        --summary_dir=/paht/to/M1_summary/  \n"
      },
      "source": "https://raw.githubusercontent.com/yongzhuang/DeepSVFilter/master/README.md",
      "technique": "header_analysis"
    }
  ]
}