{
  "application_domain": [
    {
      "confidence": 20.61,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/willwx/XDream"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-01-24T16:11:44Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-27T13:45:50Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "gradient-free act max for visual neurons"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "type": "Text_excerpt",
        "value": "XDream (E**x**tending **D**eepDream with **r**eal-time **e**volution\nfor **a**ctivity **m**aximization in real neurons)\nis a package for visualizing the preferred input of\nunits in non-differentiable visual systems\u2014such as\nthe visual cortex\u2014through activation maximization.\n\nWell-known network visualization techniques such as DeepDream\ndepend on the objective function being differentiable down to\nthe input pixels. In cases such as the visual cortext in the brain,\nthese gradients are unavailable.\n\nHowever, visualization without gradients can be framed as a\nblack-box optimization problem. Such a problem can be approached\nby an iterative process where\n1. Images are shown;\n2. Each image receives a scalar \"score\";\n3. Scores are used to optimize the images.   \n\n![OptimizerScorer](./illustrations/OptSco.png)\n\nTwo optimizers are implemented here: a simple genetic algorithm\nand a gradient estimation algorithm based on finite differences.\n\n\nA further component\u2014generative neural networks\u2014is introduced to make\nthe search space diverse yet still tractable. Instead of \noptimizing images, the optimization algorithm manipulates\n\"codes\" used to generate images. Since codes are the learned input\nto a generative network, searching in code space avoids searching\nuninteresting noise images, for example salt-and-pepper noise.\n\nAs an example, we use the DeepSiM generators from\n[Dosovitskiy & Brox, 2016](https://arxiv.org/abs/1602.02644).\nThe interface to DeepSiM generators depends on\n[`caffe`](http://caffe.berkeleyvision.org), but is modular and\ncan be replaced by other generative neural networks and indeed any other\nimage parameterization (e.g.,\n[Yamane et al., 2008](https://www.nature.com/articles/nn.2202),\n[Mordvintsev et al., 2018](https://distill.pub/2018/differentiable-parameterizations/)\n).\n\n![OptimizerScorer](./illustrations/GenOpt.png)\n"
      },
      "source": "https://raw.githubusercontent.com/willwx/XDream/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.930757210975456,
      "result": {
        "original_header": "To extend",
        "type": "Text_excerpt",
        "value": "Experiment modules\n(`EphysExperiment` & `CNNExperiment` in `Experiments.py`)\nand scripts (`experiment.py` & `experiment_CNN.py`) are included\nto exemplify how to define/control an experiment using this package. \nTo extend this package for use with your experimental system,\nat the least you may need to extend the `_get_scores()` method of\n`WithIOScorer`. For example, in `EPhysScorer`, we write online\nrecording data in a .mat file and the `_get_scores()` method\nreads it from disk. \nSome additional tools are included for creating\nthe initial generation of codes (for genetic algorithm) and\nempirically optimizing hyperparameters. \n"
      },
      "source": "https://raw.githubusercontent.com/willwx/XDream/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.990749833259854,
      "result": {
        "original_header": "Change log",
        "type": "Text_excerpt",
        "value": "- Restructure repository\n- Add data and plotting code\n    (characterizing performance in simulated experiments\n    with CNNs)\n- Clean up code\n \n"
      },
      "source": "https://raw.githubusercontent.com/willwx/XDream/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8941442713180806,
      "result": {
        "type": "Text_excerpt",
        "value": "Update (19/4/3): Added rudimentary support for PyTorch.\n    See below for details. \nUpdate (19/5/10): PyTorch can now be used instead of caffe. \nUpdate (merged 20/6/22): Restructured repository; added generators, optimizers, tests, and simulation data \n"
      },
      "source": "https://raw.githubusercontent.com/willwx/XDream/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/willwx/XDream/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/willwx/XDream/master/figure_data/Make%20Plots.ipynb"
      },
      "source": "https://raw.githubusercontent.com/willwx/XDream/master/figure_data/Make%20Plots.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 17
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/willwx/XDream/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "willwx/XDream"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/willwx/XDream/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/willwx/XDream//master/./illustrations/OptSco.png"
      },
      "source": "https://raw.githubusercontent.com/willwx/XDream/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/willwx/XDream//master/./illustrations/GenOpt.png"
      },
      "source": "https://raw.githubusercontent.com/willwx/XDream/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9858619899981468,
      "result": {
        "original_header": "To extend",
        "type": "Text_excerpt",
        "value": "Experiment modules\n(`EphysExperiment` & `CNNExperiment` in `Experiments.py`)\nand scripts (`experiment.py` & `experiment_CNN.py`) are included\nto exemplify how to define/control an experiment using this package. \n"
      },
      "source": "https://raw.githubusercontent.com/willwx/XDream/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9652256514742928,
      "result": {
        "type": "Text_excerpt",
        "value": "Preprint available at https://www.biorxiv.org/content/10.1101/516484v1 \nJournal paper available at https://www.cell.com/cell/fulltext/S0092-8674(19)30391-5 \nUpdate (19/4/3): Added rudimentary support for PyTorch.\n    See below for details. \nUpdate (19/5/10): PyTorch can now be used instead of caffe. \n"
      },
      "source": "https://raw.githubusercontent.com/willwx/XDream/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/willwx/XDream/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2019 willwx\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/willwx/XDream/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "XDream"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "willwx"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 855102,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 190601,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/willwx/XDream/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_papers": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/1602.02644"
      },
      "source": "https://raw.githubusercontent.com/willwx/XDream/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Prerequisites",
        "type": "Text_excerpt",
        "value": "- The [PyTorch](http://pytorch.org) library or\n    the [caffe](http://caffe.berkeleyvision.org) library.\n    Main functionalities are available with both, but\n    some legacy functionalities have not been ported to pytorch.\n    \n    To install PyTorch, please visit the\n    [official website](https://pytorch.org) for instructions.\n  \n    To [install caffe](http://caffe.berkeleyvision.org/install_apt.html),\n    on ubuntu \\> 17.04 you can use\n    > sudo apt install caffe-cpu\n    \n    for CPU-only version, or\n    > sudo apt install caffe-cuda\n    \n    for CUDA version.\n    \n    Caffe can also be installed on Windows using\n    [Anaconda/Minoconda](https://docs.conda.io/en/latest/miniconda.html),\n    with\n    > conda install caffe -c willyd\n    \n    This will install a pre-compiled version of caffe. However, this\n    package seems to depend on some Visual Studio 2015 components.\n    They can be installed with the component \n    \"Programming Languages/Visual C++/Common Tools for Visual C++ 2015\"\n    in Visual Studion Community 2015.\n    \n     Alternatively, caffe can be built from source.\n\n- `local_settings.py`. Copy it from `local_settings.example.py` and \n    modify the contents to match your system.\n\n- Pretrained generative networks.\n    The DeepSiM generators have been converted into pytorch from caffe. \n    They are defined in `torch_nets/deepsim.py`, and the weights are available\n    [here](https://drive.google.com/open?id=1sV54kv5VXvtx4om1c9kBPbdlNuurkGFi).\n    \n    The original caffe models can be downloaded from\n    [here](https://lmb.informatik.uni-freiburg.de/people/dosovits/code.html).\n    The prototxt files (slightly modified from original) are included\n    in the prototxt folder.\n   \n  Please make sure the paths defined in `net_catalogue.py` match\n   the downloaded `.caffemodel`, `.prototxt`, and/or `.pt` files. \n   \n\n- For the demo, the pytorch pretrained alexnet model. It is available\n    [here](https://download.pytorch.org/models/alexnet-owt-4df8aa71.pth).\n    Please save the model files to the paths defined in\n    `net_catalogue.py`. Other vision models, such as CaffeNet for caffe,\n    can also be used.\n\n"
      },
      "source": "https://raw.githubusercontent.com/willwx/XDream/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-06 10:06:58",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 48
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Demo",
        "type": "Text_excerpt",
        "value": "Run\n> python demo.py\n\nThe demo uses pytorch by default.\n\n"
      },
      "source": "https://raw.githubusercontent.com/willwx/XDream/master/README.md",
      "technique": "header_analysis"
    }
  ]
}