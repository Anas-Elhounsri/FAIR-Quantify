{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Cite",
        "parent_header": [
          "ASimulatoR"
        ],
        "type": "Text_excerpt",
        "value": "If you use ASimulatoR, please cite \nQuirin Manz, Olga Tsoy, Amit Fenn, Jan Baumbach, Uwe V\u00f6lker, Markus List, Tim Kacprowski, ASimulatoR: splice-aware RNA-Seq data simulation, Bioinformatics, Volume 37, Issue 18, 15 September 2021, Pages 3008\u20133010, https://doi.org/10.1093/bioinformatics/btab142\n"
      },
      "source": "https://raw.githubusercontent.com/biomedbigdata/ASimulatoR/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "References",
        "parent_header": [
          "ASimulatoR"
        ],
        "type": "Text_excerpt",
        "value": "Alyssa C. Frazee, Andrew E. Jaffe, Ben Langmead, Jeffrey T. Leek,\nPolyester: simulating RNA-seq datasets with differential transcript\nexpression, Bioinformatics, Volume 31, Issue 17, 1 September 2015, Pages\n2778\u20132784, <https://doi.org/10.1093/bioinformatics/btv272>\n"
      },
      "source": "https://raw.githubusercontent.com/biomedbigdata/ASimulatoR/master/README.Rmd",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/daisybio/ASimulatoR"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-08-19T15:25:14Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-02-06T14:59:31Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ASimulatoR: splice-aware RNA-seq data simulation https://doi.org/10.1093/bioinformatics/btab142"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Description",
        "parent_header": [
          "ASimulatoR",
          "The main function: `simulate_alternative_splicing`"
        ],
        "type": "Text_excerpt",
        "value": "Here we describe in more detail the parameters that can be passed to\nthis function for a better control over the simulation.\n\n### Usage\n\n``` r\nsimulate_alternative_splicing(input_dir, outdir, event_probs, ncores = 1L, ...)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/biomedbigdata/ASimulatoR/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9592066234658243,
      "result": {
        "original_header": "ASimulatoR",
        "type": "Text_excerpt",
        "value": "The goal of ASimulatoR is to simulate RNA-seq reads with alternative\nsplicing events. The alternative splicing events are well documented and\nthe true origin of each read is used for exon and juntion coverage via a\nmodified version of the bioconductor polyester package. \nPlease note that we use a custom version of Polyester, that is available\nat <https://github.com/biomedbigdata/polyester>.\n \n"
      },
      "source": "https://raw.githubusercontent.com/biomedbigdata/ASimulatoR/master/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9916199637545863,
      "result": {
        "original_header": "Arguments",
        "type": "Text_excerpt",
        "value": "| Argument      | Description                                                                                                                                                                                                                                                                                                                                                    |\n|---------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `input_dir`   | Character path to directory containing the gtf/gff file from which splice variants are created and genome fasta files with one file per chromosome i.e.\u00a0<chr_name>.fa passed to polyester                                                                                                                                                                      |\n| `outdir`      | character, path to folder where simulated reads and all annotations should be written, with *no* slash at the end. By default, reads are written to current working directory.                                                                                                                                                                                 |\n| `event_probs` | Named list/vector containing numerics corresponding to the probabilites to create the event (combination). If `probs_as_freq` is `TRUE` `event_probs` correspond to the relative frequency of occurences for the event(combination) and in this case the sum of all frequencies has to be &lt;=1. No default, must not be `NULL`, except if `preset` is given. |\n| `preset`      | if you want to use preset parameters one of \u2018event\\_partition\u2019, \u2018experiment\\_bias\u2019, \u2018event\\_combination\\_2\u2019. Check `?presets` for more information                                                                                                                                                                                                             |\n| `ncores`      | the number of cores to be utilized for parallel generation of splice variant creation and read simulation. **This will spawn one process per core! Be aware that a lot of memory might be required for many processes.**                                                                                                                                       |\n| `...`         | any of several other arguments that can be used to add nuance to the simulation and splice variant creation. See section Details.                                                                                                                                                                                                                              |\n \n"
      },
      "source": "https://raw.githubusercontent.com/biomedbigdata/ASimulatoR/master/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9156765930100597,
      "result": {
        "original_header": "Details",
        "type": "Text_excerpt",
        "value": "-   `novel_variants` : Numeric value between 0 and 1 indicating the\n    percentage of splicing variants that will be suppressed in an\n    additional gtf file splicing\\_variants\\_novel.gtf. \n-   `max_genes` : The maximum number of genes/exon supersets to be\n    included in the process of splice variant creation. Default `NULL`\n    which means that all available exon supersets will be used. **This\n    is a computation heavy default and you might want to adjust it!** \n-   `exon_junction_coverage` : Should the real coverage of exons,\n    junctions and retained introns be written into a additional file.\n    Default `TRUE` \n-   `probs_as_freq` : Should `event_probs` be treated as relative\n    frequencies instead of probabilities? Default `FALSE` \n-   `fold_changes` : Currently, ASimulatoR introduces random isoform\n    switches. Those can be retraced in the sim\\_tx\\_info.txt file\n    written by polyester. We plan on improving this in the future. \n-   `strand_specific` : Strand-specific simulation (1st read forward\n    strand, 2nd read reverse strand with respect to transcript\n    sequence). Default `TRUE` . \n-   `meanmodel` : `reads_per_transcripts` as a function of transcript\n    length. Always `TRUE` in ASimulatoR. \n-   `frag_GC_bias`: A sample-specific GC content bias on the fragment\n    level. Currently not supported in ASimulatoR: always \u2018none\u2019. \n-   `exon_junction_coverage` : Should the coverage of exons, junctions\n    and retained introns be determined? Default `TRUE` . \n-   `exon_junction_table` : If `exon_junction_coverage=TRUE` a\n    `data.table` produced by `create_splicing_variants_and_annotation`\n    to determine exon and intron coverage. \n-   `pcr_rate`: Fraction of fragments that will be duplicated. Reads\n    from these fragments will have PCR\\_DUP in the name.\n-   `pcr_lambda`: If `!is.null(pcr_rate)` lambda for the poisson\n    distribution to draw the number of duplicates.\n-   `adapter_contamination`: If the fragment is smaller than the\n    readlength, should we sequence into the `adapter_sequence`?\n-   `adapter_sequence`: If `adapter_contamination`: adapter sequence\n-   `bias`: Positional bias model to use when fragmenting transcripts.\n    By default, all fragments from a transcript are equally likely\n    (`'none'`). Other choices are `'rnaf'` and `'cdnaf'`, which mimic\n    positional bias arising from different fragmentation protocols. See\n    `?generate_fragments` and the polyester manuscript (Frazee et\n    al, 2014) for details. \n"
      },
      "source": "https://raw.githubusercontent.com/biomedbigdata/ASimulatoR/master/README.Rmd",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/biomedbigdata/ASimulatoR/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/daisybio/ASimulatoR/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "daisybio/ASimulatoR"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ASimulatoR"
      },
      "source": "https://raw.githubusercontent.com/biomedbigdata/ASimulatoR/master/README.Rmd",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/biomedbigdata/ASimulatoR/master/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/biomedbigdata/ASimulatoR/master/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/biomedbigdata/ASimulatoR/master/man/figures/README-visualization-1.png"
      },
      "source": "https://raw.githubusercontent.com/biomedbigdata/ASimulatoR/master/README.Rmd",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "ASimulatoR"
        ],
        "type": "Text_excerpt",
        "value": "You can install the current version using the\n[remotes](https://cran.r-project.org/web/packages/remotes/index.html)\npackage:\n\n``` r\n# install.packages(\"remotes\")\nremotes::install_github(\"biomedbigdata/ASimulatoR\")\n\n# for a specific release e.g. v1.0.0 use\nremotes::install_github(\"biomedbigdata/ASimulatoR@v1.0.0\")\n```\n\nIf you want the latest development version, just install from the dev\nbranch:\n\n``` r\nremotes::install_github(\"biomedbigdata/ASimulatoR\", ref = \"dev\")\n```\n\nThis will automatically install all imported R packages.\n\nThere may be system requirements that you have to install manually\ne.g.\u00a0on Ubuntu/Debian:\n\n``` bash\napt-get install -y libxml2-dev libcurl4-openssl-dev\n```\n\nIf you still encounter problems with package versions you can use the\n[renv](https://rstudio.github.io/renv/articles/packages.html) package\nand simply `restore` our [lockfile](renv.lock).\n"
      },
      "source": "https://raw.githubusercontent.com/biomedbigdata/ASimulatoR/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9995881896707466,
      "result": {
        "original_header": "ASimulatoR",
        "type": "Text_excerpt",
        "value": "Please note that we use a custom version of Polyester, that is available\nat <https://github.com/biomedbigdata/polyester>.\n \n"
      },
      "source": "https://raw.githubusercontent.com/biomedbigdata/ASimulatoR/master/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8891636222164241,
      "result": {
        "original_header": "Details",
        "type": "Text_excerpt",
        "value": "Several optional parameters can be defined to adjust the simulation.\nThese parameters are further used by the `simulate_experiment` function\nfrom our [custom polyester R\npackage](https://github.com/biomedbigdata/polyester). \nThe following parameters are specific for the ASimulatoR package: \n"
      },
      "source": "https://raw.githubusercontent.com/biomedbigdata/ASimulatoR/master/README.Rmd",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8040609807185446,
      "result": {
        "original_header": "Details",
        "type": "Text_excerpt",
        "value": "-   `save_exon_superset` : Should the exon supersets be saved to .rda\n    file? Default `TRUE` \n"
      },
      "source": "https://raw.githubusercontent.com/biomedbigdata/ASimulatoR/master/README.Rmd",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/daisybio/ASimulatoR/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "GNU Lesser General Public License v3.0",
        "spdx_id": "LGPL-3.0",
        "type": "License",
        "url": "https://api.github.com/licenses/lgpl-3.0",
        "value": "https://api.github.com/licenses/lgpl-3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "                  GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\n  This version of the GNU Lesser General Public License incorporates\nthe terms and conditions of version 3 of the GNU General Public\nLicense, supplemented by the additional permissions listed below.\n\n  0. Additional Definitions.\n\n  As used herein, \"this License\" refers to version 3 of the GNU Lesser\nGeneral Public License, and the \"GNU GPL\" refers to version 3 of the GNU\nGeneral Public License.\n\n  \"The Library\" refers to a covered work governed by this License,\nother than an Application or a Combined Work as defined below.\n\n  An \"Application\" is any work that makes use of an interface provided\nby the Library, but which is not otherwise based on the Library.\nDefining a subclass of a class defined by the Library is deemed a mode\nof using an interface provided by the Library.\n\n  A \"Combined Work\" is a work produced by combining or linking an\nApplication with the Library.  The particular version of the Library\nwith which the Combined Work was made is also called the \"Linked\nVersion\".\n\n  The \"Minimal Corresponding Source\" for a Combined Work means the\nCorresponding Source for the Combined Work, excluding any source code\nfor portions of the Combined Work that, considered in isolation, are\nbased on the Application, and not on the Linked Version.\n\n  The \"Corresponding Application Code\" for a Combined Work means the\nobject code and/or source code for the Application, including any data\nand utility programs needed for reproducing the Combined Work from the\nApplication, but excluding the System Libraries of the Combined Work.\n\n  1. Exception to Section 3 of the GNU GPL.\n\n  You may convey a covered work under sections 3 and 4 of this License\nwithout being bound by section 3 of the GNU GPL.\n\n  2. Conveying Modified Versions.\n\n  If you modify a copy of the Library, and, in your modifications, a\nfacility refers to a function or data to be supplied by an Application\nthat uses the facility (other than as an argument passed when the\nfacility is invoked), then you may convey a copy of the modified\nversion:\n\n   a) under this License, provided that you make a good faith effort to\n   ensure that, in the event an Application does not supply the\n   function or data, the facility still operates, and performs\n   whatever part of its purpose remains meaningful, or\n\n   b) under the GNU GPL, with none of the additional permissions of\n   this License applicable to that copy.\n\n  3. Object Code Incorporating Material from Library Header Files.\n\n  The object code form of an Application may incorporate material from\na header file that is part of the Library.  You may convey such object\ncode under terms of your choice, provided that, if the incorporated\nmaterial is not limited to numerical parameters, data structure\nlayouts and accessors, or small macros, inline functions and templates\n(ten or fewer lines in length), you do both of the following:\n\n   a) Give prominent notice with each copy of the object code that the\n   Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the object code with a copy of the GNU GPL and this license\n   document.\n\n  4. Combined Works.\n\n  You may convey a Combined Work under terms of your choice that,\ntaken together, effectively do not restrict modification of the\nportions of the Library contained in the Combined Work and reverse\nengineering for debugging such modifications, if you also do each of\nthe following:\n\n   a) Give prominent notice with each copy of the Combined Work that\n   the Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the Combined Work with a copy of the GNU GPL and this license\n   document.\n\n   c) For a Combined Work that displays copyright notices during\n   execution, include the copyright notice for the Library among\n   these notices, as well as a reference directing the user to the\n   copies of the GNU GPL and this license document.\n\n   d) Do one of the following:\n\n       0) Convey the Minimal Corresponding Source under the terms of this\n       License, and the Corresponding Application Code in a form\n       suitable for, and under terms that permit, the user to\n       recombine or relink the Application with a modified version of\n       the Linked Version to produce a modified Combined Work, in the\n       manner specified by section 6 of the GNU GPL for conveying\n       Corresponding Source.\n\n       1) Use a suitable shared library mechanism for linking with the\n       Library.  A suitable mechanism is one that (a) uses at run time\n       a copy of the Library already present on the user's computer\n       system, and (b) will operate properly with a modified version\n       of the Library that is interface-compatible with the Linked\n       Version.\n\n   e) Provide Installation Information, but only if you would otherwise\n   be required to provide such information under section 6 of the\n   GNU GPL, and only to the extent that such information is\n   necessary to install and execute a modified version of the\n   Combined Work produced by recombining or relinking the\n   Application with a modified version of the Linked Version. (If\n   you use option 4d0, the Installation Information must accompany\n   the Minimal Corresponding Source and Corresponding Application\n   Code. If you use option 4d1, you must provide the Installation\n   Information in the manner specified by section 6 of the GNU GPL\n   for conveying Corresponding Source.)\n\n  5. Combined Libraries.\n\n  You may place library facilities that are a work based on the\nLibrary side by side in a single library together with other library\nfacilities that are not Applications and are not covered by this\nLicense, and convey such a combined library under terms of your\nchoice, if you do both of the following:\n\n   a) Accompany the combined library with a copy of the same work based\n   on the Library, uncombined with any other library facilities,\n   conveyed under the terms of this License.\n\n   b) Give prominent notice with the combined library that part of it\n   is a work based on the Library, and explaining where to find the\n   accompanying uncombined form of the same work.\n\n  6. Revised Versions of the GNU Lesser General Public License.\n\n  The Free Software Foundation may publish revised and/or new versions\nof the GNU Lesser General Public License from time to time. Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.\n\n  Each version is given a distinguishing version number. If the\nLibrary as you received it specifies that a certain numbered version\nof the GNU Lesser General Public License \"or any later version\"\napplies to it, you have the option of following the terms and\nconditions either of that published version or of any later version\npublished by the Free Software Foundation. If the Library as you\nreceived it does not specify a version number of the GNU Lesser\nGeneral Public License, you may choose any version of the GNU Lesser\nGeneral Public License ever published by the Free Software Foundation.\n\n  If the Library as you received it specifies that a proxy can decide\nwhether future versions of the GNU Lesser General Public License shall\napply, that proxy's public statement of acceptance of any version is\npermanent authorization for you to choose that version for the\nLibrary.\n"
      },
      "source": "https://raw.githubusercontent.com/biomedbigdata/ASimulatoR/master/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "ASimulatoR"
        ],
        "type": "Text_excerpt",
        "value": "ASimulatoR Copyright (C) 2020 Manz, Quirin\n\nThis program is free software: you can redistribute it and/or modify it\nunder the terms of the GNU General Public License as published by the\nFree Software Foundation, either version 3 of the License, or (at your\noption) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General\nPublic License for more details.\n\nYou should have received a copy of the GNU General Public License along\nwith this program. If not, see <https://www.gnu.org/licenses/>.\n"
      },
      "source": "https://raw.githubusercontent.com/biomedbigdata/ASimulatoR/master/README.Rmd",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ASimulatoR"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "daisybio"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 63695,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 619,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/biomedbigdata/ASimulatoR/master/README.Rmd"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/biomedbigdata/ASimulatoR/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "quirinmanz",
          "type": "User"
        },
        "date_created": "2020-12-16T18:07:56Z",
        "date_published": "2020-12-16T18:25:33Z",
        "description": "ASimulatoR: splice-aware RNA-seq data simulation",
        "html_url": "https://github.com/daisybio/ASimulatoR/releases/tag/v1.0.0",
        "name": "Version 1.0.0",
        "release_id": 35371784,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/daisybio/ASimulatoR/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/daisybio/ASimulatoR/releases/35371784",
        "value": "https://api.github.com/repos/daisybio/ASimulatoR/releases/35371784",
        "zipball_url": "https://api.github.com/repos/daisybio/ASimulatoR/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 07:01:50",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "ASimulatoR",
          "The main function: `simulate_alternative_splicing`"
        ],
        "type": "Text_excerpt",
        "value": "The input directory should contain a gtf/gff3 genome annotation file and\none fasta file per chromosome (e.g.\u00a0derived from the [Ensembl ftp\nserver](https://www.ensembl.org/info/data/ftp/index.html)).\n\nASimulatoR accepts any gtf/gff3 genome annotation and chromosome fasta\nfiles independent of the organism.\n"
      },
      "source": "https://raw.githubusercontent.com/biomedbigdata/ASimulatoR/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick start",
        "parent_header": [
          "ASimulatoR",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "This repository contains a documented example Rscript\n[runASimulatoR.R](runASimulatoR.R). After installation, scripts like\nthis can be run from the command-line with the command:\n\n`Rscript runASimulatoR.R /path/to/input_folder/ /path/to/output_folder/`.\n"
      },
      "source": "https://raw.githubusercontent.com/biomedbigdata/ASimulatoR/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step by step",
        "parent_header": [
          "ASimulatoR",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "For usage in an interactive R-session and to investigate the full\nfunctionality of this package check the following example. The example\nis limited to the chromosome 21 for the runtime purpose. For even more\nflexibility refer to the section [\u201cThe main function:\n`simulate_alternative_splicing`\u201d](##%20The%20main%20function:%20%60simulate_alternative_splicing%60):\n"
      },
      "source": "https://raw.githubusercontent.com/biomedbigdata/ASimulatoR/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Creating exon supersets",
        "parent_header": [
          "ASimulatoR",
          "Usage",
          "Step by step"
        ],
        "type": "Text_excerpt",
        "value": "Firstly, we create exon supersets by joining all exons of a gene from a\ngtf/gff3 file. These supersets are then used to create splice variants.\n\nNote: Since all exons from one gene are used to create the exon\nsuperset, you may find that the term exon superset is used analogously\nto gene.\n\n``` r\nsuppressMessages(library(ASimulatoR))\n\n# create exon superset for genes on chromosome 21 of ensembl release 99\ngtf_file = system.file('extdata', 'Homo_sapiens.GRCh38.99.21.gtf', package = 'ASimulatoR')\n\n# by default the produced superset will be saved as .rda file into the same directory\nexon_superset = get_exon_supersets(gtf_file)\n#> importing gtf/gff...\n#> finished importing gtf/gff\n#> \n#> creating superset...\n#> finished creating superset\n#> \n#> saving superset...\n#> finished saving superset\n#> \nexon_superset[[1]][1:5, ]\n#> GRanges object with 5 ranges and 10 metadata columns:\n#>       seqnames            ranges strand |      source        type       score       phase         gene_id            transcript_id  template gene_exon_number  tr_start    tr_end\n#>          <Rle>         <IRanges>  <Rle> | <character> <character> <character> <character>     <character>              <character> <logical>        <integer> <integer> <integer>\n#>   [1]       21 41879270-41879482      - |  ASimulatoR        exon           .           . ENSG00000141956 ENSG00000141956_template      TRUE                1         1       213\n#>   [2]       21 41878996-41879140      - |  ASimulatoR        exon           .           . ENSG00000141956 ENSG00000141956_template      TRUE                2       214       358\n#>   [3]       21 41878695-41878860      - |  ASimulatoR        exon           .           . ENSG00000141956 ENSG00000141956_template      TRUE                3       359       524\n#>   [4]       21 41871494-41871621      - |  ASimulatoR        exon           .           . ENSG00000141956 ENSG00000141956_template      TRUE                4       525       652\n#>   [5]       21 41867300-41867377      - |  ASimulatoR        exon           .           . ENSG00000141956 ENSG00000141956_template      TRUE                5       653       730\n#>   -------\n#>   seqinfo: 1 sequence from an unspecified genome; no seqlengths\n```\n"
      },
      "source": "https://raw.githubusercontent.com/biomedbigdata/ASimulatoR/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Simulating Alternative Splicing",
        "parent_header": [
          "ASimulatoR",
          "Usage",
          "Step by step"
        ],
        "type": "Text_excerpt",
        "value": "You can find more information about the main function of this package at\nthe [end of the\npage]((##%20The%20main%20function:%20%60simulate_alternative_splicing%60)).\n\nThe simulator supports eight different AS events:\n\n| es           | mes                    | ir               | a3                                  | a5                               | mee                      | afe                    | ale                   |\n|--------------|------------------------|------------------|-------------------------------------|----------------------------------|--------------------------|------------------------|-----------------------|\n| exon skiping | multiple exon skipping | intron retention | alternative 3\u2019/acceptor splice site | alternative 5\u2019/donor splice site | mutually exclusive exons | alternative first exon | alternative last exon |\n\n``` r\n# define your input_dir, where the annotation gtf (or the exon supersets if you have already created them) and the genome fasta files (one per chromosome) are located\n# here we will use the example data\ninput_dir = system.file('extdata', package = 'ASimulatoR')\n\n# define, how many groups and samples per group you analyze. Here we create a small experiment with two groups with one sample per group:\nnum_reps = c(1,1)\n\n# define your outdir with NO slash\noutdir = 'simulation'\n\n# define the number of genes you want to work with. If you want all exons, do not specify this parameter or set it to NULL\n# here we create splice variants from 9 exon supersets:\nmax_genes = 9\n```\n\nThe user could define the distribution of the events by probability or\nrelative frequency.\n\n-   Probability: For each superset we create an event with the\n    probability mentioned in `event_prob`.\n-   Frequency: Set `probs_as_freq = T`. The exon supersets are\n    partitioned corresponding to the `event_prob` parameter.\n\n``` r\n# in this example we use relative frequencies\n# here we produce eight variants with one of each AS events as well as one variant containing every event\n# if probs_as_freq was FALSE, a random number would be drawn for each event-superset combination and only if it was smaller than 1/9 the AS event would be created\nprobs_as_freq = T\nevent_freq = \n    setNames(rep(1/9, 9),\n             c('es', 'mes', 'ir', 'a3', 'a5', 'afe', 'ale', 'mee', 'es,ir,mes,a3,a5,afe,ale,mee'))\n\n\n\n# we use the previously created superset to simulate splice variants from, since it is saved in the same directory as the gtf\n# if no superset is found, a new one will be created\nsimulate_alternative_splicing(input_dir = input_dir,\n                              outdir = outdir, \n                              event_probs = event_freq,\n                              probs_as_freq = probs_as_freq, \n                              max_genes = max_genes,\n                              num_reps = num_reps,\n                              verbose = TRUE)\n#> found the following fasta files: 21.fa\n#> note that splice variants will only be constructed from chromosomes that have a corresponding fasta file\n#> \n#> set data.table threads to 1\n#> loading superset...\n#> finished loading superset\n#> \n#> assign variants to supersets...\n#> create splicing variants and annotation. This may take a while...\n#> finished creating splicing variants and annotation\n#> \n#> exporting gtf for read simulation...\n#> finished exporting gtf\n#> \n#> exporting event_annotation...\n#> finished exporting event_annotation...\n#> \n#> start simulation with polyester:\n#> parsing gtf and sequences...\n#> done parsing\n#> start sequencing... (1m reads per iteration)\n#> sample_01: overall 91608 reads\n#> sample_01: iteration 01\n#> sample_01: fragments generated\n#> sample_01: write read pairs\n#> sample_02: overall 78660 reads\n#> sample_02: iteration 01\n#> sample_02: fragments generated\n#> sample_02: write read pairs\n#> finished sequencing\n```\n\nThe user can also use predefined parameters for common scenarios. More\ninformation is in `?presets`:\n\n``` r\noutdir_preset = 'simulation_preset'\n\n# We will use the preset 'experiment_bias' which includes typical rna-seq biases such as positional bias arising in protocols that use cDNA fragmentation\n# we can still use other arguments such as max_genes to set additional/override existing parameters\nsimulate_alternative_splicing(input_dir = input_dir,\n                              outdir = outdir_preset,\n                              preset = 'experiment_bias',\n                              max_genes = max_genes,\n                              verbose = FALSE)\n#> found the following fasta files: 21.fa\n#> note that splice variants will only be constructed from chromosomes that have a corresponding fasta file\n#> \n#> set data.table threads to 1\n#> loading superset...\n#> finished loading superset\n#> \n#> assign variants to supersets...\n#> create splicing variants and annotation. This may take a while...\n#> finished creating splicing variants and annotation\n#> \n#> exporting gtf for read simulation...\n#> finished exporting gtf\n#> \n#> exporting event_annotation...\n#> finished exporting event_annotation...\n#> \n#> start simulation with polyester:\n#> parsing gtf and sequences...\n#> done parsing\n```\n"
      },
      "source": "https://raw.githubusercontent.com/biomedbigdata/ASimulatoR/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Visualize Splice Variants",
        "parent_header": [
          "ASimulatoR",
          "Usage",
          "Step by step"
        ],
        "type": "Text_excerpt",
        "value": "``` r\n# to visualize the splice variants we will use ggbio\nsuppressMessages(library(ggbio))\n#> Warning: replacing previous import 'lifecycle::last_warnings' by 'rlang::last_warnings' when loading 'tibble'\n\n# firstly, we load the newly created gtf file \ngtf = rtracklayer::import('simulation/splicing_variants.gtf')\n\n# the gene id of the variant with all events\ngene_id = gtf$gene_id[grep('es,ir,mes,a3,a5,afe,ale,mee', gtf$transcript_id, fixed = T)[1]]\nexons = gtf[gtf$type == 'exon' & gtf$gene_id == gene_id]\nsuppressWarnings(ggbio::autoplot(split(exons, exons$transcript_id)))\n#> Constructing graphics...\n```\n\n<img src=\"man/figures/README-visualization-1.png\" width=\"100%\" />\n\n``` r\n# have a look at the event annotation\nevent_anno = read.csv('simulation/event_annotation.tsv', sep = '\\t')\nevent_anno[grepl(gene_id, event_anno$template) | grepl(gene_id, event_anno$variant), ]\n#>    event_annotation                                     variant                                    template                                                                    genomic_start                                                                      genomic_end                         transcriptomic_start                           transcriptomic_end\n#> 1               afe ENSG00000154646_es,ir,mes,a3,a5,afe,ale,mee                    ENSG00000154646_template                                                                         18460572                                                                         18460731                                            1                                          160\n#> 2               afe                    ENSG00000154646_template ENSG00000154646_es,ir,mes,a3,a5,afe,ale,mee                                                                         18485799                                                                         18485879                                            1                                           81\n#> 3               ale ENSG00000154646_es,ir,mes,a3,a5,afe,ale,mee                    ENSG00000154646_template                                                                         18269116                                                                         18270124                                         6950                                         7958\n#> 4               ale                    ENSG00000154646_template ENSG00000154646_es,ir,mes,a3,a5,afe,ale,mee                                                                         18275197                                                                         18275336                                         3018                                         3157\n#> 5               mee ENSG00000154646_es,ir,mes,a3,a5,afe,ale,mee                    ENSG00000154646_template                                                                         18379283                                                                         18379318                                          792                                          827\n#> 6               mee                    ENSG00000154646_template ENSG00000154646_es,ir,mes,a3,a5,afe,ale,mee                                                                         18372193                                                                         18372324                                          786                                          917\n#> 7               mes ENSG00000154646_es,ir,mes,a3,a5,afe,ale,mee                    ENSG00000154646_template 18332084,18329169,18326432,18315146,18312945,18297734,18294603,18294270,18281040 18332173,18329294,18326572,18315256,18313077,18297829,18294652,18294444,18281221 1818,1908,2034,2175,2286,2419,2515,2565,2740 1907,2033,2174,2285,2418,2514,2564,2739,2921\n#> 8                es ENSG00000154646_es,ir,mes,a3,a5,afe,ale,mee                    ENSG00000154646_template                                                                         18352903                                                                         18353052                                         1275                                         1424\n#> 9                ir ENSG00000154646_es,ir,mes,a3,a5,afe,ale,mee                    ENSG00000154646_template                                                                         18359864                                                                         18365139                                         1223                                         6498\n#> 10               a3 ENSG00000154646_es,ir,mes,a3,a5,afe,ale,mee                    ENSG00000154646_template                                                                         18383728                                                                         18383778                                          589                                          639\n#> 11               a5 ENSG00000154646_es,ir,mes,a3,a5,afe,ale,mee                    ENSG00000154646_template                                                                         18398199                                                                         18398220                                          499                                          520\n```\n"
      },
      "source": "https://raw.githubusercontent.com/biomedbigdata/ASimulatoR/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Manuscript Use Case:",
        "parent_header": [
          "ASimulatoR"
        ],
        "type": "Text_excerpt",
        "value": "If you would like to reproduce the use case mentioned in the manuscript\nyou can use the corresponding preset:\n\n``` r\n# this preset uses a sequencing depth of 200 million reads\nsimulate_alternative_splicing('some_input_dir', 'some_output_dir', preset = 'manuscript')\n\n# if you want to adjust the sequencing depth you can easily override it to create a lower coverage\nsimulate_alternative_splicing('some_input_dir', 'some_output_dir', preset = 'manuscript', seq_depth = 5e07)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/biomedbigdata/ASimulatoR/master/README.Rmd",
      "technique": "header_analysis"
    }
  ]
}