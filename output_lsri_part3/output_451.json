{
  "application_domain": [
    {
      "confidence": 32.17,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/YuAirLab/Alpha-Tri"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-08-05T11:54:33Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-05-27T09:53:52Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Using the predicted spectral to calculate the intensity similarity and improve the identification of DIA data "
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9048188432798426,
      "result": {
        "original_header": "Alpha-Tri",
        "type": "Text_excerpt",
        "value": "Alpha-Tri is a deep neural network to score the intensity similarity using all possible fragment ions, resulting in the improvement in peptide detections.\n \n"
      },
      "source": "https://raw.githubusercontent.com/YuAirLab/Alpha-Tri/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/YuAirLab/Alpha-Tri/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/YuAirLab/Alpha-Tri/master/alpha_tri_on_Colab.ipynb"
      },
      "source": "https://raw.githubusercontent.com/YuAirLab/Alpha-Tri/master/alpha_tri_on_Colab.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/YuAirLab/Alpha-Tri/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "YuAirLab/Alpha-Tri"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Alpha-Tri"
      },
      "source": "https://raw.githubusercontent.com/YuAirLab/Alpha-Tri/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/YuAirLab/Alpha-Tri/master/DIA-NN_v1.7.12/MiniDNN/remove_orig_files.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/YuAirLab/Alpha-Tri/master/DIA-NN_v1.7.12/MiniDNN/code_formatter.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.9999999999825491,
      "result": {
        "original_header": "Troubleshooting",
        "type": "Text_excerpt",
        "value": "These may be raised by the version incompatibility of Keras in Prosit (see the discussions in [https://github.com/keras-team/keras/issues/14265](https://github.com/keras-team/keras/issues/14265) and [https://github.com/keras-team/keras/issues/13540](https://github.com/keras-team/keras/issues/13540)). You may have to install the same version of Keras: \n```shell script\nconda install tensorflow-gpu=1.11 keras=2.2.4 pytorch=1.1.0 cudatoolkit=9.0 -c pytorch --yes\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/YuAirLab/Alpha-Tri/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/YuAirLab/Alpha-Tri/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2017 Devin Soni\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
      },
      "source": "https://raw.githubusercontent.com/YuAirLab/Alpha-Tri/master/DIA-NN_v1.7.12/cranium/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Alpha-Tri"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "YuAirLab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 10842314,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 5763154,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 111984,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 89488,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 4718,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 2041,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 694,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/YuAirLab/Alpha-Tri/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://pyteomics.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/YuAirLab/Alpha-Tri/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-06 00:58:42",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Example on a local PC (win10, NVIDIA GPU 1060)",
        "parent_header": [
          "Alpha-Tri"
        ],
        "type": "Text_excerpt",
        "value": "1. Compile the modified DIA-NN: \n    ```shell script\n    cd Alpha-Tri/DIA-NN_v1.7.12/mstoolkit\n    make\n    ```\n   This will generate diann-alpha.exe in the same path.\n   \n2. Make a workspace folder containing:\n    - diann-alpha.exe compiled by step 1\n    - HeLa-1h.mzML, (test data could be downloaded from [figshare](https://figshare.com/projects/Alpha-Tri/128000) \n    or [PXD005573](https://www.ebi.ac.uk/pride/archive/projects/PXD005573))\n    - lib.tsv (this spectral library could be downloaded from [figshare](https://figshare.com/projects/Alpha-Tri/128000)\n    or [Pan-Human library, SAL00023](https://db.systemsbiology.net/sbeams/cgi/PeptideAtlas/GetDIALibs))\n\n3. Configure the operating environment by conda \n    ```shell script\n    conda create -n alpha python=3.6 numpy=1.18 pandas=1.0 numba scikit-learn --yes\n    conda activate alpha \n    conda install -c bioconda pyteomics python=3.6 --yes\n    conda install tensorflow-gpu=1.11 keras=2.2.4 pytorch=1.1.0 cudatoolkit=9.0 -c pytorch --yes\n    ```\n    Of note, as Prosit is trained by tf1.11, advanced version of tf and CUDA may not be compatible. \n    \n4. Run Prosit to predict the MS2 for each precursor in lib\n    ```shell script\n    cd Alpha-Tri/Prosit\n    python prosit.py --lib workspace_dir/lib.tsv\n    ``` \n    This will append the predicted MS2 to each precursor and store the result to lib.pkl.\n    \n4. Run DIA-NN:\n    ```shell script\n    cd workspace\n    ./diann-alpha.exe --f *.mzML --lib lib.tsv --out diann_out.tsv --threads 4 --qvalue 0.01\n    or\n    diann-alpha.exe --f *.mzML --lib lib.tsv --out diann_out.tsv --threads 4 --qvalue 0.01 \n    ```\n   Meanwhile, the modified DIA-NN will generate the scores file in workspace.\n\n5. Run Alpha-Tri:\n    ```shell script\n    cd Alpha-Tri/Alpha-Tri\n    python main.py -ws workspace_dir --tri (post-scoring only by Alpha-Tri)\n    python main.py -ws workspace_dir --xic (post-scoring only by Alpha-XIC)\n    python main.py -ws workspace_dir --tri --xic (post-scoring by Alpha-Tri & Alpha-XIC)\n    ```\n    Finally, we get the identification and quantitative result, alpha_out.tsv, in the workspace folder.\n"
      },
      "source": "https://raw.githubusercontent.com/YuAirLab/Alpha-Tri/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example on Google Colab Pro (linux, NVIDIA GPU P100)",
        "parent_header": [
          "Alpha-Tri"
        ],
        "type": "Text_excerpt",
        "value": "see [alpha_tri_on_Colab.ipynb](https://github.com/YuAirLab/Alpha-Tri/blob/master/alpha_tri_on_Colab.ipynb)\n"
      },
      "source": "https://raw.githubusercontent.com/YuAirLab/Alpha-Tri/master/README.md",
      "technique": "header_analysis"
    }
  ]
}