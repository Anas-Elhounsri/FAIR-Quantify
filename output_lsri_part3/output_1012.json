{
  "application_domain": [
    {
      "confidence": 60.67,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Reference",
        "parent_header": [
          "pcnaDeep: a deep-learning based single-cell cycle profiler with PCNA signal"
        ],
        "type": "Text_excerpt",
        "value": "Please cite our paper if you found this package useful. \n```\npcnaDeep: A Fast and Robust Single-Cell Tracking Method Using Deep-Learning Mediated Cell Cycle Profiling\nYifan Gui, Shuangshuang Xie, Yanan Wang, Ping Wang, Renzhi Yao, Xukai Gao, Yutian Dong, Gaoang Wang, Kuan Yoow Chan\nBioinformatics, Volume 38, Issue 20, 15 October 2022, Pages 4846\u20134847; doi: https://doi.org/10.1093/bioinformatics/btac602\n```\n"
      },
      "source": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_of_conduct": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Code of Conduct\n\nFacebook has adopted a Code of Conduct that we expect project participants to adhere to.\nPlease read the [full text](https://code.fb.com/codeofconduct/)\nso that you can understand what actions will and will not be tolerated.\n"
      },
      "source": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/detectron2-0.4_mod/.github/CODE_OF_CONDUCT.md",
      "technique": "file_exploration"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/chan-labsite/PCNAdeep"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contributing to detectron2\n\n## Issues\nWe use GitHub issues to track public bugs and questions.\nPlease make sure to follow one of the\n[issue templates](https://github.com/facebookresearch/detectron2/issues/new/choose)\nwhen reporting any issues.\n\nFacebook has a [bounty program](https://www.facebook.com/whitehat/) for the safe\ndisclosure of security bugs. In those cases, please go through the process\noutlined on that page and do not file a public issue.\n\n## Pull Requests\nWe actively welcome pull requests.\n\nHowever, if you're adding any significant features (e.g. > 50 lines), please\nmake sure to discuss with maintainers about your motivation and proposals in an issue\nbefore sending a PR. This is to save your time so you don't spend time on a PR that we'll not accept.\n\nWe do not always accept new features, and we take the following\nfactors into consideration:\n\n1. Whether the same feature can be achieved without modifying detectron2.\n   Detectron2 is designed so that you can implement many extensions from the outside, e.g.\n   those in [projects](https://github.com/facebookresearch/detectron2/tree/master/projects).\n   * If some part of detectron2 is not extensible enough, you can also bring up a more general issue to\n     improve it. Such feature request may be useful to more users.\n2. Whether the feature is potentially useful to a large audience (e.g. an impactful detection paper, a popular dataset,\n   a significant speedup, a widely useful utility),\n   or only to a small portion of users (e.g., a less-known paper, an improvement not in the object\n   detection field, a trick that's not very popular in the community, code to handle a non-standard type of data)\n   * Adoption of additional models, datasets, new task are by default not added to detectron2 before they\n     receive significant popularity in the community.\n     We sometimes accept such features in `projects/`, or as a link in `projects/README.md`.\n3. Whether the proposed solution has a good design / interface. This can be discussed in the issue prior to PRs, or\n   in the form of a draft PR.\n4. Whether the proposed solution adds extra mental/practical overhead to users who don't\n   need such feature.\n5. Whether the proposed solution breaks existing APIs.\n\nTo add a feature to an existing function/class `Func`, there are always two approaches:\n(1) add new arguments to `Func`; (2) write a new `Func_with_new_feature`.\nTo meet the above criteria, we often prefer approach (2), because:\n\n1. It does not involve modifying or potentially breaking existing code.\n2. It does not add overhead to users who do not need the new feature.\n3. Adding new arguments to a function/class is not scalable w.r.t. all the possible new research ideas in the future.\n\nWhen sending a PR, please do:\n\n1. If a PR contains multiple orthogonal changes, split it to several PRs.\n2. If you've added code that should be tested, add tests.\n3. For PRs that need experiments (e.g. adding a new model or new methods),\n   you don't need to update model zoo, but do provide experiment results in the description of the PR.\n4. If APIs are changed, update the documentation.\n5. We use the [Google style docstrings](https://www.sphinx-doc.org/en/master/usage/extensions/napoleon.html) in python.\n6. Make sure your code lints with `./dev/linter.sh`.\n\n\n## Contributor License Agreement (\"CLA\")\nIn order to accept your pull request, we need you to submit a CLA. You only need\nto do this once to work on any of Facebook's open source projects.\n\nComplete your CLA here: <https://code.facebook.com/cla>\n\n## License\nBy contributing to detectron2, you agree that your contributions will be licensed\nunder the LICENSE file in the root directory of this source tree.\n"
      },
      "source": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/detectron2-0.4_mod/.github/CONTRIBUTING.md",
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-09-21T02:57:20Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-11-13T18:11:33Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Track single cells and profile the cell cycle with PCNA fluorescence images"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9902621143904005,
      "result": {
        "original_header": "pcnaDeep: a deep-learning based single-cell cycle profiler with PCNA signal",
        "type": "Text_excerpt",
        "value": "Welcome! pcnaDeep integrates cutting-edge detection techniques with tracking and cell cycle resolving models.\nUsing the Mask R-CNN model under FAIR's Detectron2 framework, pcnaDeep is able to detect and resolve very dense cell tracks with __PCNA fluorescence__. \n"
      },
      "source": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/chan-labsite/PCNAdeep/tree/main/detectron2-0.4_mod/docs"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "API Documentation",
        "parent_header": [
          "pcnaDeep: a deep-learning based single-cell cycle profiler with PCNA signal"
        ],
        "type": "Text_excerpt",
        "value": "API documentation is available [here](https://pcnadeep.readthedocs.io/en/latest/index.html).\n"
      },
      "source": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://pcnadeep.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Demo data download",
        "parent_header": [
          "pcnaDeep: a deep-learning based single-cell cycle profiler with PCNA signal"
        ],
        "type": "Text_excerpt",
        "value": "All demo data are stored at [Zenodo](https://zenodo.org/record/5515771#.YqAISRNBxxg).\n"
      },
      "source": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Download pre-trained Mask R-CNN weights",
        "parent_header": [
          "pcnaDeep: a deep-learning based single-cell cycle profiler with PCNA signal",
          "Demo data download"
        ],
        "type": "Text_excerpt",
        "value": "The Mask R-CNN is trained on 60X microscopic images sized 1200X1200 square pixels. [Download here](https://zenodo.org/record/5515771/files/mrcnn_sat_rot_aug.pth?download=1).\n\nYou must download pre-trained weights and save it under `~/models/` for running tutorials.\n"
      },
      "source": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Download example datasets",
        "parent_header": [
          "pcnaDeep: a deep-learning based single-cell cycle profiler with PCNA signal",
          "Demo data download"
        ],
        "type": "Text_excerpt",
        "value": "You may need to download [some example datasets](https://github.com/chan-labsite/PCNAdeep/tree/main/examples) to run tutorials (like the quick-start guide below).\n"
      },
      "source": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/chan-labsite/PCNAdeep/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/tutorial/pcna_config_ref.ipynb"
      },
      "source": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/tutorial/pcna_config_ref.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/tutorial/run_in_batch.ipynb"
      },
      "source": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/tutorial/run_in_batch.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/tutorial/evaluation_with_CTC.ipynb"
      },
      "source": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/tutorial/evaluation_with_CTC.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/tutorial/train_pcna_SVM.ipynb"
      },
      "source": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/tutorial/train_pcna_SVM.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/tutorial/hack_in.ipynb"
      },
      "source": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/tutorial/hack_in.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/tutorial/train_pcna_detectron2.ipynb"
      },
      "source": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/tutorial/train_pcna_detectron2.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/tutorial/correction_interface.ipynb"
      },
      "source": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/tutorial/correction_interface.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/tutorial/getting_started.ipynb"
      },
      "source": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/tutorial/getting_started.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/chan-labsite/PCNAdeep/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "chan-labsite/PCNAdeep"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "pcnaDeep: a deep-learning based single-cell cycle profiler with PCNA signal"
      },
      "source": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "docker_compose",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/detectron2-0.4_mod/docker/docker-compose.yml"
      },
      "source": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/detectron2-0.4_mod/docker/docker-compose.yml",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/detectron2-0.4_mod/docker/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/detectron2-0.4_mod/docker/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/detectron2-0.4_mod/datasets/prepare_for_tests.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/detectron2-0.4_mod/projects/DensePose/dev/run_inference_tests.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/detectron2-0.4_mod/projects/DensePose/dev/run_instant_tests.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/detectron2-0.4_mod/dev/run_inference_tests.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/detectron2-0.4_mod/dev/run_instant_tests.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/detectron2-0.4_mod/dev/parse_results.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/detectron2-0.4_mod/dev/linter.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/detectron2-0.4_mod/dev/packaging/build_all_wheels.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/detectron2-0.4_mod/dev/packaging/build_wheel.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/detectron2-0.4_mod/dev/packaging/gen_wheel_index.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main//tutorial/assets/overview.jpg"
      },
      "source": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "## Installation\n\n### Requirements\n- Linux or macOS with Python \u2265 3.6\n- PyTorch \u2265 1.6 and [torchvision](https://github.com/pytorch/vision/) that matches the PyTorch installation.\n  Install them together at [pytorch.org](https://pytorch.org) to make sure of this\n- OpenCV is optional but needed by demo and visualization\n\n\n### Build Detectron2 from Source\n\ngcc & g++ \u2265 5.4 are required. [ninja](https://ninja-build.org/) is recommended for faster build.\nAfter having them, run:\n```\npython -m pip install 'git+https://github.com/facebookresearch/detectron2.git'\n# (add --user if you don't have permission)\n\n# Or, to install it from a local clone:\ngit clone https://github.com/facebookresearch/detectron2.git\npython -m pip install -e detectron2\n\n# Or if you are on macOS\nCC=clang CXX=clang++ ARCHFLAGS=\"-arch x86_64\" python -m pip install ......\n```\n\nTo __rebuild__ detectron2 that's built from a local clone, use `rm -rf build/ **/*.so` to clean the\nold build first. You often need to rebuild detectron2 after reinstalling PyTorch.\n\n### Install Pre-Built Detectron2 (Linux only)\n\nChoose from this table to install [v0.4 (Mar 2021)](https://github.com/facebookresearch/detectron2/releases):\n\n<table class=\"docutils\"><tbody><th width=\"80\"> CUDA </th><th valign=\"bottom\" align=\"left\" width=\"100\">torch 1.8</th><th valign=\"bottom\" align=\"left\" width=\"100\">torch 1.7</th><th valign=\"bottom\" align=\"left\" width=\"100\">torch 1.6</th> <tr><td align=\"left\">11.1</td><td align=\"left\"><details><summary> install </summary><pre><code>python -m pip install detectron2 -f \\\n  https://dl.fbaipublicfiles.com/detectron2/wheels/cu111/torch1.8/index.html\n</code></pre> </details> </td> <td align=\"left\"> </td> <td align=\"left\"> </td> </tr> <tr><td align=\"left\">11.0</td><td align=\"left\"> </td> <td align=\"left\"><details><summary> install </summary><pre><code>python -m pip install detectron2 -f \\\n  https://dl.fbaipublicfiles.com/detectron2/wheels/cu110/torch1.7/index.html\n</code></pre> </details> </td> <td align=\"left\"> </td> </tr> <tr><td align=\"left\">10.2</td><td align=\"left\"><details><summary> install </summary><pre><code>python -m pip install detectron2 -f \\\n  https://dl.fbaipublicfiles.com/detectron2/wheels/cu102/torch1.8/index.html\n</code></pre> </details> </td> <td align=\"left\"><details><summary> install </summary><pre><code>python -m pip install detectron2 -f \\\n  https://dl.fbaipublicfiles.com/detectron2/wheels/cu102/torch1.7/index.html\n</code></pre> </details> </td> <td align=\"left\"><details><summary> install </summary><pre><code>python -m pip install detectron2 -f \\\n  https://dl.fbaipublicfiles.com/detectron2/wheels/cu102/torch1.6/index.html\n</code></pre> </details> </td> </tr> <tr><td align=\"left\">10.1</td><td align=\"left\"><details><summary> install </summary><pre><code>python -m pip install detectron2 -f \\\n  https://dl.fbaipublicfiles.com/detectron2/wheels/cu101/torch1.8/index.html\n</code></pre> </details> </td> <td align=\"left\"><details><summary> install </summary><pre><code>python -m pip install detectron2 -f \\\n  https://dl.fbaipublicfiles.com/detectron2/wheels/cu101/torch1.7/index.html\n</code></pre> </details> </td> <td align=\"left\"><details><summary> install </summary><pre><code>python -m pip install detectron2 -f \\\n  https://dl.fbaipublicfiles.com/detectron2/wheels/cu101/torch1.6/index.html\n</code></pre> </details> </td> </tr> <tr><td align=\"left\">9.2</td><td align=\"left\"> </td> <td align=\"left\"><details><summary> install </summary><pre><code>python -m pip install detectron2 -f \\\n  https://dl.fbaipublicfiles.com/detectron2/wheels/cu92/torch1.7/index.html\n</code></pre> </details> </td> <td align=\"left\"><details><summary> install </summary><pre><code>python -m pip install detectron2 -f \\\n  https://dl.fbaipublicfiles.com/detectron2/wheels/cu92/torch1.6/index.html\n</code></pre> </details> </td> </tr> <tr><td align=\"left\">cpu</td><td align=\"left\"><details><summary> install </summary><pre><code>python -m pip install detectron2 -f \\\n  https://dl.fbaipublicfiles.com/detectron2/wheels/cpu/torch1.8/index.html\n</code></pre> </details> </td> <td align=\"left\"><details><summary> install </summary><pre><code>python -m pip install detectron2 -f \\\n  https://dl.fbaipublicfiles.com/detectron2/wheels/cpu/torch1.7/index.html\n</code></pre> </details> </td> <td align=\"left\"><details><summary> install </summary><pre><code>python -m pip install detectron2 -f \\\n  https://dl.fbaipublicfiles.com/detectron2/wheels/cpu/torch1.6/index.html\n</code></pre> </details> </td> </tr></tbody></table>\n\n\nNote that:\n1. The pre-built package has to be used with corresponding version of CUDA and the official package of PyTorch.\n   Otherwise, please build detectron2 from source.\n2. New packages are released every few months. Therefore, packages may not contain latest features in the master\n   branch and may not be compatible with the master branch of a research project that uses detectron2\n   (e.g. those in [projects](projects)).\n\n### Common Installation Issues\n\nClick each issue for its solutions:\n\n<details>\n<summary>\nUndefined symbols that contains TH,aten,torch,caffe2; Missing torch dynamic libraries; Segmentation fault immediately when using detectron2.\n</summary>\n<br/>\n\nThis usually happens when detectron2 or torchvision is not\ncompiled with the version of PyTorch you're running.\n\nIf the error comes from a pre-built torchvision, uninstall torchvision and pytorch and reinstall them\nfollowing [pytorch.org](http://pytorch.org). So the versions will match.\n\nIf the error comes from a pre-built detectron2, check [release notes](https://github.com/facebookresearch/detectron2/releases)\nto see the corresponding pytorch version required for each pre-built detectron2.\nOr uninstall and reinstall the correct pre-built detectron2.\n\nIf the error comes from detectron2 or torchvision that you built manually from source,\nremove files you built (`build/`, `**/*.so`) and rebuild it so it can pick up the version of pytorch currently in your environment.\n\nIf you cannot resolve this problem, please include the output of `gdb -ex \"r\" -ex \"bt\" -ex \"quit\" --args python -m detectron2.utils.collect_env`\nin your issue.\n</details>\n\n<details>\n<summary>\nUndefined C++ symbols (e.g. `GLIBCXX`) or C++ symbols not found.\n</summary>\n<br/>\nUsually it's because the library is compiled with a newer C++ compiler but run with an old C++ runtime.\n\nThis often happens with old anaconda.\nTry `conda update libgcc`. Then rebuild detectron2.\n\nThe fundamental solution is to run the code with proper C++ runtime.\nOne way is to use `LD_PRELOAD=/path/to/libstdc++.so`.\n\n</details>\n\n<details>\n<summary>\n\"nvcc not found\" or \"Not compiled with GPU support\" or \"Detectron2 CUDA Compiler: not available\".\n</summary>\n<br/>\nCUDA is not found when building detectron2.\nYou should make sure\n\n```\npython -c 'import torch; from torch.utils.cpp_extension import CUDA_HOME; print(torch.cuda.is_available(), CUDA_HOME)'\n```\n\nprint `(True, a directory with cuda)` at the time you build detectron2.\n\nMost models can run inference (but not training) without GPU support. To use CPUs, set `MODEL.DEVICE='cpu'` in the config.\n</details>\n\n<details>\n<summary>\n\"invalid device function\" or \"no kernel image is available for execution\".\n</summary>\n<br/>\nTwo possibilities:\n\n* You build detectron2 with one version of CUDA but run it with a different version.\n\n  To check whether it is the case,\n  use `python -m detectron2.utils.collect_env` to find out inconsistent CUDA versions.\n  In the output of this command, you should expect \"Detectron2 CUDA Compiler\", \"CUDA_HOME\", \"PyTorch built with - CUDA\"\n  to contain cuda libraries of the same version.\n\n  When they are inconsistent,\n  you need to either install a different build of PyTorch (or build by yourself)\n  to match your local CUDA installation, or install a different version of CUDA to match PyTorch.\n\n* PyTorch/torchvision/Detectron2 is not built for the correct GPU SM architecture (aka. compute capability).\n\n  The architecture included by PyTorch/detectron2/torchvision is available in the \"architecture flags\" in\n  `python -m detectron2.utils.collect_env`. It must include\n  the architecture of your GPU, which can be found at [developer.nvidia.com/cuda-gpus](https://developer.nvidia.com/cuda-gpus).\n\n  If you're using pre-built PyTorch/detectron2/torchvision, they have included support for most popular GPUs already.\n  If not supported, you need to build them from source.\n\n  When building detectron2/torchvision from source, they detect the GPU device and build for only the device.\n  This means the compiled code may not work on a different GPU device.\n  To recompile them for the correct architecture, remove all installed/compiled files,\n  and rebuild them with the `TORCH_CUDA_ARCH_LIST` environment variable set properly.\n  For example, `export TORCH_CUDA_ARCH_LIST=\"6.0;7.0\"` makes it compile for both P100s and V100s.\n</details>\n\n<details>\n<summary>\nUndefined CUDA symbols; Cannot open libcudart.so\n</summary>\n<br/>\nThe version of NVCC you use to build detectron2 or torchvision does\nnot match the version of CUDA you are running with.\nThis often happens when using anaconda's CUDA runtime.\n\nUse `python -m detectron2.utils.collect_env` to find out inconsistent CUDA versions.\nIn the output of this command, you should expect \"Detectron2 CUDA Compiler\", \"CUDA_HOME\", \"PyTorch built with - CUDA\"\nto contain cuda libraries of the same version.\n\nWhen they are inconsistent,\nyou need to either install a different build of PyTorch (or build by yourself)\nto match your local CUDA installation, or install a different version of CUDA to match PyTorch.\n</details>\n\n\n<details>\n<summary>\nC++ compilation errors from NVCC / NVRTC; \"Unsupported gpu architecture\"\n</summary>\n\nA few possibilities:\n\n1. Local CUDA/NVCC version has to match the CUDA version of your PyTorch. Both can be found in `python collect_env.py`.\n   When they are inconsistent, you need to either install a different build of PyTorch (or build by yourself)\n   to match your local CUDA installation, or install a different version of CUDA to match PyTorch.\n\n2. Local CUDA/NVCC version shall support the SM architecture (a.k.a. compute capability) of your GPU.\n   The capability of your GPU can be found at [developer.nvidia.com/cuda-gpus](https://developer.nvidia.com/cuda-gpus).\n   The capability supported by NVCC is listed at [here](https://gist.github.com/ax3l/9489132).\n   If your NVCC version is too old, this can be workaround by setting environment variable\n   `TORCH_CUDA_ARCH_LIST` to a lower, supported capability.\n\n3. The combination of NVCC and GCC you use is incompatible. You need to change one of their versions.\n   See [here](https://gist.github.com/ax3l/9489132) for some valid combinations.\n   Notably, CUDA<=10.1.105 doesn't support GCC>7.3.\n\n   The CUDA/GCC version used by PyTorch can be found by `print(torch.__config__.show())`.\n\n</details>\n\n\n<details>\n<summary>\n\"ImportError: cannot import name '_C'\".\n</summary>\n<br/>\nPlease build and install detectron2 following the instructions above.\n\nOr, if you are running code from detectron2's root directory, `cd` to a different one.\nOtherwise you may not import the code that you installed.\n</details>\n\n\n<details>\n<summary>\nAny issue on windows.\n</summary>\n<br/>\n\nDetectron2 is continuously built on windows with [CircleCI](https://app.circleci.com/pipelines/github/facebookresearch/detectron2?branch=master).\nHowever we do not provide official support for it.\nPRs that improves code compatibility on windows are welcome.\n</details>\n\n<details>\n<summary>\nONNX conversion segfault after some \"TraceWarning\".\n</summary>\n<br/>\nThe ONNX package is compiled with a too old compiler.\n\nPlease build and install ONNX from its source code using a compiler\nwhose version is closer to what's used by PyTorch (available in `torch.__config__.show()`).\n</details>\n\n\n### Installation inside specific environments:\n\n* __Colab__: see our [Colab Tutorial](https://colab.research.google.com/drive/16jcaJoc6bCFAQ96jDe2HwtXj7BMD_-m5)\n  which has step-by-step instructions.\n\n* __Docker__: The official [Dockerfile](docker) installs detectron2 with a few simple commands.\n\n"
      },
      "source": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/detectron2-0.4_mod/INSTALL.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "../../INSTALL.md"
      },
      "source": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/detectron2-0.4_mod/docs/tutorials/install.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "pcnaDeep: a deep-learning based single-cell cycle profiler with PCNA signal"
        ],
        "type": "Text_excerpt",
        "value": "1. PyTorch (torch >= 1.7.1) installation and CUDA GPU support are essential. Visit [PyTorch homepage](https://pytorch.org/) for specific installation schedule.\n\n- Check the GPU and PyTorch are available:\n   ```\n   import torch\n   print(torch.cuda.is_available())\n   ```\n\n2. Install modified __Detectron2 v0.4__ in this directory ([original package homepage](https://github.com/facebookresearch/detectron2))\n\n   ```angular2html\n      cd detectron2-04_mod\n      pip install .\n   ```\n\n   <details>\n   <summary>Building detectron2 on Windows? Click here.\n   </summary>\n\n      - Before building detectron2, you must install <a title=\"Microsoft Visual C++\" href=\"https://visualstudio.microsoft.com/vs/features/cplusplus/\">Microsoft Visual C++</a> (please use the standard installation).\n      After installation, please restart your system.\n      - If your torch version is old, the following changes of the `torch` package may be required. <a title=\"Ref\" href=\"https://blog.csdn.net/weixin_42644340/article/details/109178660\">Reference (Chinese)</a>.\n\n         ```angular2html\n            In torch\\include\\torch\\csrc\\jit\\argument_spec.h,\n            static constexpr size_t DEPTH_LIMIT = 128;\n               change to -->\n            static const size_t DEPTH_LIMIT = 128;\n         ```\n   </details>\n\n   ---\n\n   In pcnaDeep, the detectron2 v0.4 dependency has been modified in two ways:\n      1. To generate confidence score output of the instance classification, the method `detectron2.modeling.roi_heads.fast_rcnn.fast_rcnn_inference_single_image` has been modified.\n      2. A customized dataset mapper function has been implemented as `detectron2.data.dataset_mapper.read_PCNA_training`.\n\n\n3. Install pcnaDeep from source in this directory\n   ```\n   cd bin\n   python setup.py install\n   ```\n4. (optional, for training data annotation only) Download [VGG Image Annotator 2](https://www.robots.ox.ac.uk/~vgg/software/via/) software.\n5. (optional, for visualisation only) Install [Fiji (ImageJ)](https://fiji.sc/) with [TrackMate CSV Importer](https://github.com/tinevez/TrackMate-CSVImporter) plugin.\n\n"
      },
      "source": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8347093379160341,
      "result": {
        "original_header": "pcnaDeep: a deep-learning based single-cell cycle profiler with PCNA signal",
        "type": "Text_excerpt",
        "value": "<img src=\"/tutorial/assets/overview.jpg\" alt=\"overview\" width=\"800\" />\n \n"
      },
      "source": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/chan-labsite/PCNAdeep/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bioimage-analysis, bioimage-tools, bioinformatics-tool, cell-biology, cell-cycle"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Apache License 2.0",
        "spdx_id": "Apache-2.0",
        "type": "License",
        "url": "https://api.github.com/licenses/apache-2.0",
        "value": "https://api.github.com/licenses/apache-2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Apache License\nVersion 2.0, January 2004\nhttp://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n\"License\" shall mean the terms and conditions for use, reproduction,\nand distribution as defined by Sections 1 through 9 of this document.\n\n\"Licensor\" shall mean the copyright owner or entity authorized by\nthe copyright owner that is granting the License.\n\n\"Legal Entity\" shall mean the union of the acting entity and all\nother entities that control, are controlled by, or are under common\ncontrol with that entity. For the purposes of this definition,\n\"control\" means (i) the power, direct or indirect, to cause the\ndirection or management of such entity, whether by contract or\notherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\nexercising permissions granted by this License.\n\n\"Source\" form shall mean the preferred form for making modifications,\nincluding but not limited to software source code, documentation\nsource, and configuration files.\n\n\"Object\" form shall mean any form resulting from mechanical\ntransformation or translation of a Source form, including but\nnot limited to compiled object code, generated documentation,\nand conversions to other media types.\n\n\"Work\" shall mean the work of authorship, whether in Source or\nObject form, made available under the License, as indicated by a\ncopyright notice that is included in or attached to the work\n(an example is provided in the Appendix below).\n\n\"Derivative Works\" shall mean any work, whether in Source or Object\nform, that is based on (or derived from) the Work and for which the\neditorial revisions, annotations, elaborations, or other modifications\nrepresent, as a whole, an original work of authorship. For the purposes\nof this License, Derivative Works shall not include works that remain\nseparable from, or merely link (or bind by name) to the interfaces of,\nthe Work and Derivative Works thereof.\n\n\"Contribution\" shall mean any work of authorship, including\nthe original version of the Work and any modifications or additions\nto that Work or Derivative Works thereof, that is intentionally\nsubmitted to Licensor for inclusion in the Work by the copyright owner\nor by an individual or Legal Entity authorized to submit on behalf of\nthe copyright owner. For the purposes of this definition, \"submitted\"\nmeans any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems,\nand issue tracking systems that are managed by, or on behalf of, the\nLicensor for the purpose of discussing and improving the Work, but\nexcluding communication that is conspicuously marked or otherwise\ndesignated in writing by the copyright owner as \"Not a Contribution.\"\n\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\non behalf of whom a Contribution has been received by Licensor and\nsubsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\ncopyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the\nWork and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\n(except as stated in this section) patent license to make, have made,\nuse, offer to sell, sell, import, and otherwise transfer the Work,\nwhere such license applies only to those patent claims licensable\nby such Contributor that are necessarily infringed by their\nContribution(s) alone or by combination of their Contribution(s)\nwith the Work to which such Contribution(s) was submitted. If You\ninstitute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work\nor a Contribution incorporated within the Work constitutes direct\nor contributory patent infringement, then any patent licenses\ngranted to You under this License for that Work shall terminate\nas of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\nWork or Derivative Works thereof in any medium, with or without\nmodifications, and in Source or Object form, provided that You\nmeet the following conditions:\n\n(a) You must give any other recipients of the Work or\nDerivative Works a copy of this License; and\n\n(b) You must cause any modified files to carry prominent notices\nstating that You changed the files; and\n\n(c) You must retain, in the Source form of any Derivative Works\nthat You distribute, all copyright, patent, trademark, and\nattribution notices from the Source form of the Work,\nexcluding those notices that do not pertain to any part of\nthe Derivative Works; and\n\n(d) If the Work includes a \"NOTICE\" text file as part of its\ndistribution, then any Derivative Works that You distribute must\ninclude a readable copy of the attribution notices contained\nwithin such NOTICE file, excluding those notices that do not\npertain to any part of the Derivative Works, in at least one\nof the following places: within a NOTICE text file distributed\nas part of the Derivative Works; within the Source form or\ndocumentation, if provided along with the Derivative Works; or,\nwithin a display generated by the Derivative Works, if and\nwherever such third-party notices normally appear. The contents\nof the NOTICE file are for informational purposes only and\ndo not modify the License. You may add Your own attribution\nnotices within Derivative Works that You distribute, alongside\nor as an addendum to the NOTICE text from the Work, provided\nthat such additional attribution notices cannot be construed\nas modifying the License.\n\nYou may add Your own copyright statement to Your modifications and\nmay provide additional or different license terms and conditions\nfor use, reproduction, or distribution of Your modifications, or\nfor any such Derivative Works as a whole, provided Your use,\nreproduction, and distribution of the Work otherwise complies with\nthe conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\nany Contribution intentionally submitted for inclusion in the Work\nby You to the Licensor shall be under the terms and conditions of\nthis License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify\nthe terms of any separate license agreement you may have executed\nwith Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\nnames, trademarks, service marks, or product names of the Licensor,\nexcept as required for reasonable and customary use in describing the\norigin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\nagreed to in writing, Licensor provides the Work (and each\nContributor provides its Contributions) on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied, including, without limitation, any warranties or conditions\nof TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\nPARTICULAR PURPOSE. You are solely responsible for determining the\nappropriateness of using or redistributing the Work and assume any\nrisks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\nwhether in tort (including negligence), contract, or otherwise,\nunless required by applicable law (such as deliberate and grossly\nnegligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special,\nincidental, or consequential damages of any character arising as a\nresult of this License or out of the use or inability to use the\nWork (including but not limited to damages for loss of goodwill,\nwork stoppage, computer failure or malfunction, or any and all\nother commercial damages or losses), even if such Contributor\nhas been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\nthe Work or Derivative Works thereof, You may choose to offer,\nand charge a fee for, acceptance of support, warranty, indemnity,\nor other liability obligations and/or rights consistent with this\nLicense. However, in accepting such obligations, You may act only\non Your own behalf and on Your sole responsibility, not on behalf\nof any other Contributor, and only if You agree to indemnify,\ndefend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason\nof your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\nTo apply the Apache License to your work, attach the following\nboilerplate notice, with the fields enclosed by brackets \"[]\"\nreplaced with your own identifying information. (Don't include\nthe brackets!)  The text should be enclosed in the appropriate\ncomment syntax for the file format. We also recommend that a\nfile or class name and description of purpose be included on the\nsame \"printed page\" as the copyright notice for easier\nidentification within third-party archives.\n\nCopyright [yyyy] [name of copyright owner]\n\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
      },
      "source": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Licence",
        "parent_header": [
          "pcnaDeep: a deep-learning based single-cell cycle profiler with PCNA signal"
        ],
        "type": "Text_excerpt",
        "value": "pcnaDeep is released under the [Apache 2.0 license](LICENSE).\n"
      },
      "source": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PCNAdeep"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "chan-labsite"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 2939096,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 1637334,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Cuda",
        "size": 112955,
        "type": "Programming_language",
        "value": "Cuda"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 81143,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 13428,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 3521,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 910,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 630,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier"
  ],
  "somef_provenance": {
    "date": "2024-10-06 03:11:19",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 10
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Demo data download",
        "parent_header": [
          "pcnaDeep: a deep-learning based single-cell cycle profiler with PCNA signal"
        ],
        "type": "Text_excerpt",
        "value": "All demo data are stored at [Zenodo](https://zenodo.org/record/5515771#.YqAISRNBxxg).\n"
      },
      "source": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Download example datasets",
        "parent_header": [
          "pcnaDeep: a deep-learning based single-cell cycle profiler with PCNA signal",
          "Demo data download"
        ],
        "type": "Text_excerpt",
        "value": "You may need to download [some example datasets](https://github.com/chan-labsite/PCNAdeep/tree/main/examples) to run tutorials (like the quick-start guide below).\n"
      },
      "source": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Getting started",
        "parent_header": [
          "pcnaDeep: a deep-learning based single-cell cycle profiler with PCNA signal"
        ],
        "type": "Text_excerpt",
        "value": "See [a quick tutorial](tutorial/getting_started.ipynb) to get familiar with pcnaDeep.\n\nYou may also go through other tutorials for advanced usages.\n"
      },
      "source": "https://raw.githubusercontent.com/chan-labsite/PCNAdeep/main/README.md",
      "technique": "header_analysis"
    }
  ]
}