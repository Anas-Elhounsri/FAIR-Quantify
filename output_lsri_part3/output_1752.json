{
  "application_domain": [
    {
      "confidence": 0.9585853328436288,
      "result": {
        "type": "String",
        "value": "Graphs"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "References:",
        "parent_header": [
          "Bibtex"
        ],
        "type": "Text_excerpt",
        "value": "1. [Pham, Vu VH, Lin Liu, Cameron P. Bracken, Gregory J. Goodall, Qi Long, Jiuyong Li, and Thuc D. Le. \"CBNA: A control theory based method for identifying coding and non-coding cancer drivers.\" PLoS Computational Biology 15, no. 12 (2019).](https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1007538#sec009)\n2. [Wang, Y., Di, Z., & Fan, Y. (2011). Identifying and characterizing nodes important to community structure using the spectrum of the graph. PloS one, 6(11).](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0027418)\n"
      },
      "source": "https://raw.githubusercontent.com/mandarsc/NIBNA/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Chaudhary, Mandar S and Pham, Vu V H and Le, Thuc D",
        "doi": "10.1093/bioinformatics/btab145",
        "format": "bibtex",
        "title": "{NIBNA: A network-based node importance approach for identifying breast cancer drivers}",
        "type": "Text_excerpt",
        "url": "https://doi.org/10.1093/bioinformatics/btab145",
        "value": "@article{10.1093/bioinformatics/btab145,\n    eprint = {https://academic.oup.com/bioinformatics/advance-article-pdf/doi/10.1093/bioinformatics/btab145/36443758/btab145.pdf},\n    note = {btab145},\n    url = {https://doi.org/10.1093/bioinformatics/btab145},\n    doi = {10.1093/bioinformatics/btab145},\n    issn = {1367-4803},\n    abstract = {{Identifying meaningful cancer driver genes in a cohort of tumors is a challenging task in cancer genomics. Although existing studies have identified known cancer drivers, most of them focus on detecting coding drivers with mutations. It is acknowledged that non-coding drivers can regulate driver mutations to promote cancer growth. In this work, we propose a novel node importance based network analysis (NIBNA) framework to detect coding and non-coding cancer drivers. We hypothesize that cancer drivers are crucial to the formation of community structures in cancer network, and removing them from the network greatly perturbs the network structure thereby critically affecting the functioning of the network. NIBNA detects cancer drivers using a three-step process; first, a condition-specific network is built by incorporating gene expression data and gene networks, second, the community structures in the network are estimated and third, a centrality-based metric is applied to compute node importance.We apply NIBNA to the BRCA dataset and it outperforms existing state-of-art methods in detecting coding cancer drivers. NIBNA also predicts 265 miRNA drivers and majority of these drivers have been validated in literature. Further we apply NIBNA to detect cancer subtype-specific drivers and several predicted drivers have been validated to be associated with cancer subtypes. Lastly, we evaluate NIBNA\u2019s performance in detecting epithelial-mesenchymal transition (EMT) drivers, and we confirmed 8 coding and 13 miRNA drivers in the list of known genes.The source code can be accessed at: https://github.com/mandarsc/NIBNA.Supplementary data are available at Bioinformatics online.}},\n    month = {03},\n    year = {2021},\n    journal = {Bioinformatics},\n    title = {{NIBNA: A network-based node importance approach for identifying breast cancer drivers}},\n    author = {Chaudhary, Mandar S and Pham, Vu V H and Le, Thuc D},\n}"
      },
      "source": "https://raw.githubusercontent.com/mandarsc/NIBNA/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/mandarsc/NIBNA"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-02-14T02:46:58Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-07T20:35:38Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9572741606117983,
      "result": {
        "original_header": "Network-based Node Importance Approach for Identifying Cancer Driver Genes",
        "type": "Text_excerpt",
        "value": "This repository contains code for identifying driver genes in the cancer network. In this work, a community detection algorithm is used to partition the cancer network into communities and a centrality-based metric is implemented to compute the importance of each node in the network [2]. Specifically, the well-known Louvain algorithm is used for detecting communities, and a centrality-based metric is used to compute node importance by measuring the distortion in the community structure upon the node's removal from the network.  \nThe following are the main steps involved in computing node importance,\n1. Build a undirected weighted graph G using the edge list of the cancer network.\n2. Partition the graph into communities using the Louvain algorithm.\n3. Compute eigenvectors of the adjancency matrix of graph G.\n4. Compute node importance of each node in graph G using a centrality-based metric.\n5. Sort the coding genes in the cancer network in descending order of their importance score.\n \n"
      },
      "source": "https://raw.githubusercontent.com/mandarsc/NIBNA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8605424058593274,
      "result": {
        "original_header": "Experiments",
        "type": "Text_excerpt",
        "value": "The results are saved in a csv file saved in `Output` directory where each row indicates the number of top-k coding genes found by this approach. \n"
      },
      "source": "https://raw.githubusercontent.com/mandarsc/NIBNA/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/mandarsc/NIBNA/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/mandarsc/NIBNA/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "mandarsc/NIBNA"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/mandarsc/NIBNA/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/mandarsc/NIBNA/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "NIBNA"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "mandarsc"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 39603,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/mandarsc/NIBNA/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Prerequisites",
        "type": "Text_excerpt",
        "value": "1. Make sure you have `python3` installed on your machine before running the experiments.\n2. Update the `DATA_DIR` and `OUT_DIR` variables in `nibna/utils.py` with the local path of your machine.\n3. Install python packages listed in the `requirements.txt` file using the following command,\n    * ```pip install -r requirements.txt```\n"
      },
      "source": "https://raw.githubusercontent.com/mandarsc/NIBNA/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Identify critical nodes in the cancer network: Execute the script `nibna_cancer_driver_script.py` to obtain the list of predicted coding drivers with mutations, coding drivers without mutations and non-coding drivers in the cancer network.",
        "parent_header": [
          "Experiments"
        ],
        "type": "Text_excerpt",
        "value": "## Network-based Node Importance Approach for Identifying Cancer Driver Genes\n\nThis repository contains code for identifying driver genes in the cancer network. In this work, a community detection algorithm is used to partition the cancer network into communities and a centrality-based metric is implemented to compute the importance of each node in the network [2]. Specifically, the well-known Louvain algorithm is used for detecting communities, and a centrality-based metric is used to compute node importance by measuring the distortion in the community structure upon the node's removal from the network. \n\nThe following are the main steps involved in computing node importance,\n1. Build a undirected weighted graph G using the edge list of the cancer network.\n2. Partition the graph into communities using the Louvain algorithm.\n3. Compute eigenvectors of the adjancency matrix of graph G.\n4. Compute node importance of each node in graph G using a centrality-based metric.\n5. Sort the coding genes in the cancer network in descending order of their importance score.\n\n## Prerequisites\n1. Make sure you have `python3` installed on your machine before running the experiments.\n2. Update the `DATA_DIR` and `OUT_DIR` variables in `nibna/utils.py` with the local path of your machine.\n3. Install python packages listed in the `requirements.txt` file using the following command,\n    * ```pip install -r requirements.txt```\n\n## Experiments\n\n* ### Identify critical nodes in the cancer network: Execute the script `nibna_cancer_driver_script.py` to obtain the list of predicted coding drivers with mutations, coding drivers without mutations and non-coding drivers in the cancer network.\n```\npython3 nibna_cancer_driver_script.py\n```\nThe script will load all the input data files and output results under the `NIBNA/Output/CancerDriver/Cancer/` directory. The list of files created by the script are as follows,\n1. `critical_nodes.csv` contains list of all predicted cancer drivers.\n2. `cancer_node_importance.jpg` contains a plot showing the distribution of node importance scores.\n3. `top_k_50_validated_genes.csv` contains top-50 predicted coding cancer drivers. Similarly, the remaining file names with same name convention contain predicted cancer drivers for different values of threshold.\n4. `top_k_validated_genes_weighted.csv` contains the number of predicted coding drivers validated using CGC.\n5. `coding_candidate_drivers_mutations.csv` contains list of predicted coding drivers with mutations.\n6. `coding_candidate_drivers_no_mutations.csv` contains list of predicted coding drivers without mutations.\n7. `noncoding_candidate_drivers.csv` contains list of predicted non-coding drivers.\n8. `performance_metrics.csv` contains precision, recall and f1-score of the predicted coding cancer drivers.\n\nThe results are saved in a csv file saved in `Output` directory where each row indicates the number of top-k coding genes found by this approach.\n\n* ### Cancer subtype analysis: Execute the script `nibna_cancer_subtype_script.py` to obtain list of predicted cancer drivers for each cancer subtype.\n```\npython3 nibna_cancer_subtype_script.py\n```\nThe script will read the subtype-specific datasets and output the following files to the `NIBNA/Output/CancerSubtype/{subtype_name}/` folder,\n1. `critical_nodes.csv` contains list of all predicted cancer drivers.\n2. `coding_candidate_drivers_mutations.csv` contains list of predicted coding drivers with mutations.\n3. `coding_candidate_drivers_no_mutations.csv` contains list of predicted coding drivers without mutations.\n4. `noncoding_candidate_drivers.csv` contains list of predicted non-coding drivers.\n5. `coding_candidate_drivers_no_mutations_no_overlap.csv` contains list of predicted coding drivers without mutations which are only specific to the subtype.\n6. `noncoding_candidate_drivers_no_overlap.csv` contains list of predicted non-coding drivers which are only specific to the subtype.\n\n\n* ### EMT analysis: Execute the script `nibna_emt_script.py` to obtain the list of critical nodes in EMT analysis.\n```\npython3 nibna_emt_script.py\n```\nThe script will output results under the `NIBNA/Output/EMT/Mes/` folder,\n1. `critical_nodes.csv` contains list of all predicted cancer drivers.\n2. `top_20_coding_drivers.csv` contains list of top-20 predicted coding drivers.\n3. `top_20_non_coding_drivers.csv` contains list of top-20 non-coding drivers.\n\n## Bibtex\n```\n@article{10.1093/bioinformatics/btab145,\n    author = {Chaudhary, Mandar S and Pham, Vu V H and Le, Thuc D},\n    title = \"{NIBNA: A network-based node importance approach for identifying breast cancer drivers}\",\n    journal = {Bioinformatics},\n    year = {2021},\n    month = {03},\n    abstract = \"{Identifying meaningful cancer driver genes in a cohort of tumors is a challenging task in cancer genomics. Although existing studies have identified known cancer drivers, most of them focus on detecting coding drivers with mutations. It is acknowledged that non-coding drivers can regulate driver mutations to promote cancer growth. In this work, we propose a novel node importance based network analysis (NIBNA) framework to detect coding and non-coding cancer drivers. We hypothesize that cancer drivers are crucial to the formation of community structures in cancer network, and removing them from the network greatly perturbs the network structure thereby critically affecting the functioning of the network. NIBNA detects cancer drivers using a three-step process; first, a condition-specific network is built by incorporating gene expression data and gene networks, second, the community structures in the network are estimated and third, a centrality-based metric is applied to compute node importance.We apply NIBNA to the BRCA dataset and it outperforms existing state-of-art methods in detecting coding cancer drivers. NIBNA also predicts 265 miRNA drivers and majority of these drivers have been validated in literature. Further we apply NIBNA to detect cancer subtype-specific drivers and several predicted drivers have been validated to be associated with cancer subtypes. Lastly, we evaluate NIBNA\u2019s performance in detecting epithelial-mesenchymal transition (EMT) drivers, and we confirmed 8 coding and 13 miRNA drivers in the list of known genes.The source code can be accessed at: https://github.com/mandarsc/NIBNA.Supplementary data are available at Bioinformatics online.}\",\n    issn = {1367-4803},\n    doi = {10.1093/bioinformatics/btab145},\n    url = {https://doi.org/10.1093/bioinformatics/btab145},\n    note = {btab145},\n    eprint = {https://academic.oup.com/bioinformatics/advance-article-pdf/doi/10.1093/bioinformatics/btab145/36443758/btab145.pdf},\n}\n```\n### References:\n1. [Pham, Vu VH, Lin Liu, Cameron P. Bracken, Gregory J. Goodall, Qi Long, Jiuyong Li, and Thuc D. Le. \"CBNA: A control theory based method for identifying coding and non-coding cancer drivers.\" PLoS Computational Biology 15, no. 12 (2019).](https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1007538#sec009)\n2. [Wang, Y., Di, Z., & Fan, Y. (2011). Identifying and characterizing nodes important to community structure using the spectrum of the graph. PloS one, 6(11).](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0027418)\n"
      },
      "source": "https://raw.githubusercontent.com/mandarsc/NIBNA/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Cancer subtype analysis: Execute the script `nibna_cancer_subtype_script.py` to obtain list of predicted cancer drivers for each cancer subtype.",
        "parent_header": [
          "Experiments"
        ],
        "type": "Text_excerpt",
        "value": "## Network-based Node Importance Approach for Identifying Cancer Driver Genes\n\nThis repository contains code for identifying driver genes in the cancer network. In this work, a community detection algorithm is used to partition the cancer network into communities and a centrality-based metric is implemented to compute the importance of each node in the network [2]. Specifically, the well-known Louvain algorithm is used for detecting communities, and a centrality-based metric is used to compute node importance by measuring the distortion in the community structure upon the node's removal from the network. \n\nThe following are the main steps involved in computing node importance,\n1. Build a undirected weighted graph G using the edge list of the cancer network.\n2. Partition the graph into communities using the Louvain algorithm.\n3. Compute eigenvectors of the adjancency matrix of graph G.\n4. Compute node importance of each node in graph G using a centrality-based metric.\n5. Sort the coding genes in the cancer network in descending order of their importance score.\n\n## Prerequisites\n1. Make sure you have `python3` installed on your machine before running the experiments.\n2. Update the `DATA_DIR` and `OUT_DIR` variables in `nibna/utils.py` with the local path of your machine.\n3. Install python packages listed in the `requirements.txt` file using the following command,\n    * ```pip install -r requirements.txt```\n\n## Experiments\n\n* ### Identify critical nodes in the cancer network: Execute the script `nibna_cancer_driver_script.py` to obtain the list of predicted coding drivers with mutations, coding drivers without mutations and non-coding drivers in the cancer network.\n```\npython3 nibna_cancer_driver_script.py\n```\nThe script will load all the input data files and output results under the `NIBNA/Output/CancerDriver/Cancer/` directory. The list of files created by the script are as follows,\n1. `critical_nodes.csv` contains list of all predicted cancer drivers.\n2. `cancer_node_importance.jpg` contains a plot showing the distribution of node importance scores.\n3. `top_k_50_validated_genes.csv` contains top-50 predicted coding cancer drivers. Similarly, the remaining file names with same name convention contain predicted cancer drivers for different values of threshold.\n4. `top_k_validated_genes_weighted.csv` contains the number of predicted coding drivers validated using CGC.\n5. `coding_candidate_drivers_mutations.csv` contains list of predicted coding drivers with mutations.\n6. `coding_candidate_drivers_no_mutations.csv` contains list of predicted coding drivers without mutations.\n7. `noncoding_candidate_drivers.csv` contains list of predicted non-coding drivers.\n8. `performance_metrics.csv` contains precision, recall and f1-score of the predicted coding cancer drivers.\n\nThe results are saved in a csv file saved in `Output` directory where each row indicates the number of top-k coding genes found by this approach.\n\n* ### Cancer subtype analysis: Execute the script `nibna_cancer_subtype_script.py` to obtain list of predicted cancer drivers for each cancer subtype.\n```\npython3 nibna_cancer_subtype_script.py\n```\nThe script will read the subtype-specific datasets and output the following files to the `NIBNA/Output/CancerSubtype/{subtype_name}/` folder,\n1. `critical_nodes.csv` contains list of all predicted cancer drivers.\n2. `coding_candidate_drivers_mutations.csv` contains list of predicted coding drivers with mutations.\n3. `coding_candidate_drivers_no_mutations.csv` contains list of predicted coding drivers without mutations.\n4. `noncoding_candidate_drivers.csv` contains list of predicted non-coding drivers.\n5. `coding_candidate_drivers_no_mutations_no_overlap.csv` contains list of predicted coding drivers without mutations which are only specific to the subtype.\n6. `noncoding_candidate_drivers_no_overlap.csv` contains list of predicted non-coding drivers which are only specific to the subtype.\n\n\n* ### EMT analysis: Execute the script `nibna_emt_script.py` to obtain the list of critical nodes in EMT analysis.\n```\npython3 nibna_emt_script.py\n```\nThe script will output results under the `NIBNA/Output/EMT/Mes/` folder,\n1. `critical_nodes.csv` contains list of all predicted cancer drivers.\n2. `top_20_coding_drivers.csv` contains list of top-20 predicted coding drivers.\n3. `top_20_non_coding_drivers.csv` contains list of top-20 non-coding drivers.\n\n## Bibtex\n```\n@article{10.1093/bioinformatics/btab145,\n    author = {Chaudhary, Mandar S and Pham, Vu V H and Le, Thuc D},\n    title = \"{NIBNA: A network-based node importance approach for identifying breast cancer drivers}\",\n    journal = {Bioinformatics},\n    year = {2021},\n    month = {03},\n    abstract = \"{Identifying meaningful cancer driver genes in a cohort of tumors is a challenging task in cancer genomics. Although existing studies have identified known cancer drivers, most of them focus on detecting coding drivers with mutations. It is acknowledged that non-coding drivers can regulate driver mutations to promote cancer growth. In this work, we propose a novel node importance based network analysis (NIBNA) framework to detect coding and non-coding cancer drivers. We hypothesize that cancer drivers are crucial to the formation of community structures in cancer network, and removing them from the network greatly perturbs the network structure thereby critically affecting the functioning of the network. NIBNA detects cancer drivers using a three-step process; first, a condition-specific network is built by incorporating gene expression data and gene networks, second, the community structures in the network are estimated and third, a centrality-based metric is applied to compute node importance.We apply NIBNA to the BRCA dataset and it outperforms existing state-of-art methods in detecting coding cancer drivers. NIBNA also predicts 265 miRNA drivers and majority of these drivers have been validated in literature. Further we apply NIBNA to detect cancer subtype-specific drivers and several predicted drivers have been validated to be associated with cancer subtypes. Lastly, we evaluate NIBNA\u2019s performance in detecting epithelial-mesenchymal transition (EMT) drivers, and we confirmed 8 coding and 13 miRNA drivers in the list of known genes.The source code can be accessed at: https://github.com/mandarsc/NIBNA.Supplementary data are available at Bioinformatics online.}\",\n    issn = {1367-4803},\n    doi = {10.1093/bioinformatics/btab145},\n    url = {https://doi.org/10.1093/bioinformatics/btab145},\n    note = {btab145},\n    eprint = {https://academic.oup.com/bioinformatics/advance-article-pdf/doi/10.1093/bioinformatics/btab145/36443758/btab145.pdf},\n}\n```\n### References:\n1. [Pham, Vu VH, Lin Liu, Cameron P. Bracken, Gregory J. Goodall, Qi Long, Jiuyong Li, and Thuc D. Le. \"CBNA: A control theory based method for identifying coding and non-coding cancer drivers.\" PLoS Computational Biology 15, no. 12 (2019).](https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1007538#sec009)\n2. [Wang, Y., Di, Z., & Fan, Y. (2011). Identifying and characterizing nodes important to community structure using the spectrum of the graph. PloS one, 6(11).](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0027418)\n"
      },
      "source": "https://raw.githubusercontent.com/mandarsc/NIBNA/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "EMT analysis: Execute the script `nibna_emt_script.py` to obtain the list of critical nodes in EMT analysis.",
        "parent_header": [
          "Experiments"
        ],
        "type": "Text_excerpt",
        "value": "## Network-based Node Importance Approach for Identifying Cancer Driver Genes\n\nThis repository contains code for identifying driver genes in the cancer network. In this work, a community detection algorithm is used to partition the cancer network into communities and a centrality-based metric is implemented to compute the importance of each node in the network [2]. Specifically, the well-known Louvain algorithm is used for detecting communities, and a centrality-based metric is used to compute node importance by measuring the distortion in the community structure upon the node's removal from the network. \n\nThe following are the main steps involved in computing node importance,\n1. Build a undirected weighted graph G using the edge list of the cancer network.\n2. Partition the graph into communities using the Louvain algorithm.\n3. Compute eigenvectors of the adjancency matrix of graph G.\n4. Compute node importance of each node in graph G using a centrality-based metric.\n5. Sort the coding genes in the cancer network in descending order of their importance score.\n\n## Prerequisites\n1. Make sure you have `python3` installed on your machine before running the experiments.\n2. Update the `DATA_DIR` and `OUT_DIR` variables in `nibna/utils.py` with the local path of your machine.\n3. Install python packages listed in the `requirements.txt` file using the following command,\n    * ```pip install -r requirements.txt```\n\n## Experiments\n\n* ### Identify critical nodes in the cancer network: Execute the script `nibna_cancer_driver_script.py` to obtain the list of predicted coding drivers with mutations, coding drivers without mutations and non-coding drivers in the cancer network.\n```\npython3 nibna_cancer_driver_script.py\n```\nThe script will load all the input data files and output results under the `NIBNA/Output/CancerDriver/Cancer/` directory. The list of files created by the script are as follows,\n1. `critical_nodes.csv` contains list of all predicted cancer drivers.\n2. `cancer_node_importance.jpg` contains a plot showing the distribution of node importance scores.\n3. `top_k_50_validated_genes.csv` contains top-50 predicted coding cancer drivers. Similarly, the remaining file names with same name convention contain predicted cancer drivers for different values of threshold.\n4. `top_k_validated_genes_weighted.csv` contains the number of predicted coding drivers validated using CGC.\n5. `coding_candidate_drivers_mutations.csv` contains list of predicted coding drivers with mutations.\n6. `coding_candidate_drivers_no_mutations.csv` contains list of predicted coding drivers without mutations.\n7. `noncoding_candidate_drivers.csv` contains list of predicted non-coding drivers.\n8. `performance_metrics.csv` contains precision, recall and f1-score of the predicted coding cancer drivers.\n\nThe results are saved in a csv file saved in `Output` directory where each row indicates the number of top-k coding genes found by this approach.\n\n* ### Cancer subtype analysis: Execute the script `nibna_cancer_subtype_script.py` to obtain list of predicted cancer drivers for each cancer subtype.\n```\npython3 nibna_cancer_subtype_script.py\n```\nThe script will read the subtype-specific datasets and output the following files to the `NIBNA/Output/CancerSubtype/{subtype_name}/` folder,\n1. `critical_nodes.csv` contains list of all predicted cancer drivers.\n2. `coding_candidate_drivers_mutations.csv` contains list of predicted coding drivers with mutations.\n3. `coding_candidate_drivers_no_mutations.csv` contains list of predicted coding drivers without mutations.\n4. `noncoding_candidate_drivers.csv` contains list of predicted non-coding drivers.\n5. `coding_candidate_drivers_no_mutations_no_overlap.csv` contains list of predicted coding drivers without mutations which are only specific to the subtype.\n6. `noncoding_candidate_drivers_no_overlap.csv` contains list of predicted non-coding drivers which are only specific to the subtype.\n\n\n* ### EMT analysis: Execute the script `nibna_emt_script.py` to obtain the list of critical nodes in EMT analysis.\n```\npython3 nibna_emt_script.py\n```\nThe script will output results under the `NIBNA/Output/EMT/Mes/` folder,\n1. `critical_nodes.csv` contains list of all predicted cancer drivers.\n2. `top_20_coding_drivers.csv` contains list of top-20 predicted coding drivers.\n3. `top_20_non_coding_drivers.csv` contains list of top-20 non-coding drivers.\n"
      },
      "source": "https://raw.githubusercontent.com/mandarsc/NIBNA/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "installation",
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 06:09:17",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ]
}