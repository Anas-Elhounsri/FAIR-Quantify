{
  "application_domain": [
    {
      "confidence": 53.39,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/mkirchler/transferGWAS"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-09-22T11:28:44Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-18T15:01:01Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Repository for transferGWAS, a deep learning method for performing genome-wide association studies on full medical imaging data."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9647566910912792,
      "result": {
        "original_header": "transferGWAS",
        "type": "Text_excerpt",
        "value": "transferGWAS is a method for performing genome-wide association studies on whole images. This repository provides code to run your own transferGWAS on UK Biobank or your own data. transferGWAS has 3 steps: 1. pretraining, 2. feature condensation, and 3. LMM association analysis. Since the three steps require different compute infrastructure (GPU vs CPU server) and different parts can take longer time (e.g. pretraining can take a few days on a GPU), the parts are kept separate.  \n* **`quickstart:`** helps you create dummy genetic data on which to run a simulation with transferGWAS. \n* **`pretraining`:** provides code for training your own models on retinal fundus scans. This is mostly for reproducibility purposes - we provide our trained models in `models`, and if you want to train on your own data you will probably want to adapt to that data. \n* **`feature_condensation`:** this is a short script to go from trained model to low-dimensional condensed features. If you want to run on your own data, you will maybe need to write a few lines of `pytorch` code to properly read in your data into a `Dataset` (there's no one-size-fits-all here, unfortunately). \n* **`lmm`:** this part is a wrapper for the BOLT-LMM association analysis, including some basic preprocessing steps. If you have experience with running GWAS, you maybe won't need this part. \n* **`simulation`:** This is the code for the simulation study. \n* **`reproducibility`**: This directory contains instructions and data to reproduce results from our paper. \n"
      },
      "source": "https://raw.githubusercontent.com/mkirchler/transferGWAS/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/mkirchler/transferGWAS/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/mkirchler/transferGWAS/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "mkirchler/transferGWAS"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "transferGWAS"
      },
      "source": "https://raw.githubusercontent.com/mkirchler/transferGWAS/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/mkirchler/transferGWAS/master/download_models.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/mkirchler/transferGWAS/master/lmm/preprocessing_imp.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/mkirchler/transferGWAS/master/lmm/preprocessing_ma.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.9718959598274506,
      "result": {
        "original_header": "transferGWAS",
        "type": "Text_excerpt",
        "value": "* **`models`:** here you can find our pretrained models (only after you downloaded them via `./download_models.sh`) \n"
      },
      "source": "https://raw.githubusercontent.com/mkirchler/transferGWAS/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/mkirchler/transferGWAS/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021 Matthias Kirchler\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/mkirchler/transferGWAS/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "transferGWAS"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "mkirchler"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 81295,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 2481,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/mkirchler/transferGWAS/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running a transferGWAS",
        "parent_header": [
          "transferGWAS",
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "If you don't want to train your own network, just:\n\n* start with **`feature_condensation`**, either with ImageNet-pretrained CNN or with the EyePACS CNN in `models`; then\n* run the **`lmm`** on those condensed embeddings.\n\nIf you do want to train your own network, first check out the **`pretraining`** part first.\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/mkirchler/transferGWAS/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 02:44:29",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 11
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Getting started",
        "parent_header": [
          "transferGWAS"
        ],
        "type": "Text_excerpt",
        "value": "This repository requires bash and was written and tested on Ubuntu 18.04.4 LTS.\n\nStart by cloning this repo:\n```bash\ngit clone https://github.com/mkirchler/transferGWAS.git\n```\n\nYou can download pretrained models and BOLT-LMM via\n```bash\n./download_models.sh\n```\nThis includes the CNN pretrained on the EyePACS dataset to predict Diabetic Retinopathy and the StyleGAN2 on retinal fundus images for the simulation study (the ImageNet-pretrained network is included in the pytorch library), as well as BOLT-LMM version 2.3.4.\n"
      },
      "source": "https://raw.githubusercontent.com/mkirchler/transferGWAS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Python",
        "parent_header": [
          "transferGWAS",
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "All parts require python 3.6+, and all deep learning parts are built in `pytorch`. We recommend using some up-to-date version of anaconda and then creating a new environment from the `environment.yml`:\n```bash\nconda env create --file environment.yml\nconda activate transfer_gwas\n```\n\nIf you want to run part of the non-deep learning code (especially the BOLT-LMM) on a CPU-only machine, use the `environment_cpu.yml` file for that:\n```bash\nconda env create --file environment_cpu.yml\nconda activate transfer_gwas_cpu\n```\nNote that this won't install any of the `pytorch` libraries - you can only use it for the `run_bolt` and for stages 1 and 4 in the `simulation`.\n\nInstallation of requirements should not take longer than a few minutes (depending on internet connection).\n"
      },
      "source": "https://raw.githubusercontent.com/mkirchler/transferGWAS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Reproducing paper results",
        "parent_header": [
          "transferGWAS",
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "To reproduce results from our paper, see the `reproducibility` directory.\n"
      },
      "source": "https://raw.githubusercontent.com/mkirchler/transferGWAS/master/README.md",
      "technique": "header_analysis"
    }
  ]
}