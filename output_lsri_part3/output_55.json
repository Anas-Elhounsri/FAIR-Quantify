{
  "application_domain": [
    {
      "confidence": 37.42,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/yangyanli/DO-Conv"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-06-22T05:01:23Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-02T18:49:01Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Depthwise Over-parameterized Convolutional Layer"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "parent_header": [
          "DO-Conv: Depthwise Over-parameterized Convolutional Layer"
        ],
        "type": "Text_excerpt",
        "value": "DO-Conv is a depthwise over-parameterized convolutional layer, which can be used as a replacement of conventional convolutional layer in CNNs in the training phase to achieve higher accuracies. In the inference phase, DO-Conv can be fused into a conventional convolutional layer, resulting in the computation amount that is exactly the same as that of a conventional convolutional layer.\n\nPlease see our <a href=\"https://ieeexplore.ieee.org/document/9779456\" target=\"_blank\">paper</a> for more details, where we demonstrated the advantages of DO-Conv on various benchmark datasets/tasks.\n"
      },
      "source": "https://raw.githubusercontent.com/yangyanli/DO-Conv/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9218130669465607,
      "result": {
        "original_header": "We Highly Welcome Issues",
        "type": "Text_excerpt",
        "value": "Moreover, it would be great if a **minimal reproduciable example code** is provide in the issue.\n \n"
      },
      "source": "https://raw.githubusercontent.com/yangyanli/DO-Conv/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9593032155137646,
      "result": {
        "original_header": "News",
        "type": "Text_excerpt",
        "value": "2 . We provide DOConv for the new pytorch version (pytorch==1.10.2, torchvision==0.11.3). \nReplace this line\uff1a\n````\nfrom do_conv_pytorch import DOConv2d\n````\nwith\nBASH3*`\nto apply this version of DOConv without any other changes.\n \n"
      },
      "source": "https://raw.githubusercontent.com/yangyanli/DO-Conv/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8444875271045672,
      "result": {
        "original_header": "ImageNet Classification Performance",
        "type": "Text_excerpt",
        "value": "We take the <a href=\"https://gluon-cv.mxnet.io/model_zoo/classification.html\" target=\"_blank\">model zoo</a> of <a href=\"https://gluon-cv.mxnet.io/contents.html\" target=\"_blank\">GluonCV</a> as baselines. The settings in the baselines have been tuned to favor baselines, and they are not touched during the switch to DO-Conv. In other words, DO-Conv is the one and only change over baselines, and no hyper-parameter tuning is conducted to favor DO-Conv. We consider GluonCV highly reproducible, but still, to exclude clutter factors as much as possible, we train the baselines ourselves, and compare DO-Conv versions with them, while reporting the performance provided by GluonCV as reference. The results are summarized in this table where the \u201cDO-Conv\u201d column shows the performance gain over the baselines.\n<table>\n<thead>\n  <tr>\n    <th>Network</th>\n    <th>Depth</th>\n    <th>Reference</th>\n    <th>Baseline</th>\n    <th>DO-Conv</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td>Plain</td>\n    <td>18</td>\n    <td>-</td>\n    <td>69.97</td>\n    <td>+1.01</td>\n  </tr>\n  <tr>\n    <td rowspan=\"5\">ResNet-v1</td>\n    <td>18</td>\n    <td>70.93</td>\n    <td>70.87</td>\n    <td>+0.82</td>\n  </tr>\n  <tr>\n    <td>34</td>\n    <td>74.37</td>\n    <td>74.49</td>\n    <td>+0.49</td>\n  </tr>\n  <tr>\n    <td>50</td>\n    <td>77.36</td>\n    <td>77.32</td>\n    <td>+0.08</td>\n  </tr>\n  <tr>\n    <td>101</td>\n    <td>78.34</td>\n    <td>78.16</td>\n    <td>+0.46</td>\n  </tr>\n  <tr>\n    <td>152</td>\n    <td>79.22</td>\n    <td>79.34</td>\n    <td>+0.07</td>\n  </tr>\n  <tr>\n    <td rowspan=\"5\">ResNet-v1b</td>\n    <td>18</td>\n    <td>70.94</td>\n    <td>71.08</td>\n    <td>+0.71</td>\n  </tr>\n  <tr>\n    <td>34</td>\n    <td>74.65</td>\n    <td>74.35</td>\n    <td>+0.77</td>\n  </tr>\n  <tr>\n    <td>50</td>\n    <td>77.67</td>\n    <td>77.56</td>\n    <td>+0.44</td>\n  </tr>\n  <tr>\n    <td>101</td>\n    <td>79.20</td>\n    <td>79.14</td>\n    <td>+0.25</td>\n  </tr>\n  <tr>\n    <td>152</td>\n    <td>79.69</td>\n    <td>79.60</td>\n    <td>+0.10</td>\n  </tr>\n  <tr>\n    <td rowspan=\"5\">ResNet-v2</td>\n    <td>18</td>\n    <td>71.00</td>\n    <td>70.80</td>\n    <td>+0.64</td>\n  </tr>\n  <tr>\n    <td>34</td>\n    <td>74.40</td>\n    <td>74.76</td>\n    <td>+0.22</td>\n  </tr>\n  <tr>\n    <td>50</td>\n    <td>77.17</td>\n    <td>77.17</td>\n    <td>+0.31</td>\n  </tr>\n  <tr>\n    <td>101</td>\n    <td>78.53</td>\n    <td>78.56</td>\n    <td>+0.11</td>\n  </tr>\n  <tr>\n    <td>152</td>\n    <td>79.21</td>\n    <td>79.24</td>\n    <td>+0.14</td>\n  </tr>\n  <tr>\n    <td>ResNext</td>\n    <td>50_32x4d</td>\n    <td>79.32</td>\n    <td>79.21</td>\n    <td>+0.40</td>\n  </tr>\n  <tr>\n    <td>MobileNet-v1</td>\n    <td>-</td>\n    <td>73.28</td>\n    <td>73.30</td>\n    <td>+0.03</td>\n  </tr>\n  <tr>\n    <td>MobileNet-v2</td>\n    <td>-</td>\n    <td>72.04</td>\n    <td>71.89</td>\n    <td>+0.16</td>\n  </tr>\n  <tr>\n    <td>MobileNet-v3</td>\n    <td>-</td>\n    <td>75.32</td>\n    <td>75.16</td>\n    <td>+0.14</td>\n  </tr>\n</tbody>\n</table>\n \n"
      },
      "source": "https://raw.githubusercontent.com/yangyanli/DO-Conv/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/yangyanli/DO-Conv/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 35
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/yangyanli/DO-Conv/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "yangyanli/DO-Conv"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DO-Conv: Depthwise Over-parameterized Convolutional Layer"
      },
      "source": "https://raw.githubusercontent.com/yangyanli/DO-Conv/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9972474342608783,
      "result": {
        "original_header": "News",
        "type": "Text_excerpt",
        "value": "2 . We provide DOConv for the new pytorch version (pytorch==1.10.2, torchvision==0.11.3). \n"
      },
      "source": "https://raw.githubusercontent.com/yangyanli/DO-Conv/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/yangyanli/DO-Conv/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "convolutional-neural-networks, deep-learning, gluoncv, pytorch, tensorflow"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 Yangyan Li\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/yangyanli/DO-Conv/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DO-Conv"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "yangyanli"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 46125,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/yangyanli/DO-Conv/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-05 23:32:56",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 197
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "DO-Conv Usage",
        "parent_header": [
          "DO-Conv: Depthwise Over-parameterized Convolutional Layer"
        ],
        "type": "Text_excerpt",
        "value": "In thie repo, we provide reference implementation of DO-Conv in <a href=\"https://www.tensorflow.org/\" target=\"_blank\">Tensorflow</a> (tensorflow-gpu==2.2.0), <a href=\"https://pytorch.org/\" target=\"_blank\">PyTorch</a> (pytorch==1.4.0, torchvision==0.5.0) and <a href=\"https://gluon-cv.mxnet.io/contents.html\" target=\"_blank\">GluonCV</a> (mxnet-cu100==1.5.1.post0, gluoncv==0.6.0), as replacement to <a href=\"https://www.tensorflow.org/api_docs/python/tf/keras/layers/Conv2D\" target=\"_blank\">tf.keras.layers.Conv2D</a>, <a href=\"https://pytorch.org/docs/master/generated/torch.nn.Conv2d.html\" target=\"_blank\">torch.nn.Conv2d</a> and <a href=\"https://beta.mxnet.io/api/gluon/_autogen/mxnet.gluon.nn.Conv2D.html\" target=\"_blank\">mxnet.gluon.nn.Conv2D</a>, respectively. Please see the code for more details.\n\nWe highly welcome pull requests for adding support for different versions of Pytorch/Tensorflow/GluonCV.\n"
      },
      "source": "https://raw.githubusercontent.com/yangyanli/DO-Conv/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example Usage: Tensorflow (tensorflow-gpu==2.2.0)",
        "parent_header": [
          "DO-Conv: Depthwise Over-parameterized Convolutional Layer"
        ],
        "type": "Text_excerpt",
        "value": "We show how to use DO-Conv based on the examples provided in the <a href=\"https://www.tensorflow.org/tutorials/quickstart/advanced\" target=\"_blank\">Tutorial</a> of TensorFlow with MNIST dataset.\n\n1 . Run the demo example first to get the accuracy of the baseline.\n````\npython sample_tf.py\n````\nIf there is any wrong at this step, please check whether the tensorflow version meets the requirements.\n\n2 . Replace these lines:\n````\nself.conv1 = Conv2D(32, 3, activation='relu')\nself.conv2 = Conv2D(8, 3, activation='relu')\n````\nwith\n````\nself.conv1 = DOConv2D(32, 3, activation='relu')\nself.conv2 = DOConv2D(8, 3, activation='relu')\n````\nto apply DO-Conv without any other changes. \n````\npython sample_tf.py\n````\n3 . We provide the performance improvement in this demo example as follows. (averaged accuracy (%) of five runs)\n\n|          | run1  | run2  | run3  | run4  | run5  | avg    | +     |\n|----------|-------|-------|-------|-------|-------|--------|-------|\n| Baseline | 98.5  | 98.51 | 98.54 | 98.46 | 98.51 | 98.504 | -     |\n| DO-Conv  | 98.71 | 98.62 | 98.67 | 98.75 | 98.66 | 98.682 | 0.178 |\n\n4 . Then you can use DO-Conv in your own network in this way.\n"
      },
      "source": "https://raw.githubusercontent.com/yangyanli/DO-Conv/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example Usage: PyTorch (pytorch==1.4.0, torchvision==0.5.0)",
        "parent_header": [
          "DO-Conv: Depthwise Over-parameterized Convolutional Layer"
        ],
        "type": "Text_excerpt",
        "value": "We show how to use DO-Conv based on the examples provided in the <a href=\"https://pytorch.org/tutorials/beginner/nn_tutorial.html?highlight=mnist\" target=\"_blank\">Tutorial</a> of PyTorch with MNIST dataset.\n\n1 . Run the demo example first to get the accuracy of the baseline.\n````\npython sample_pt.py\n````\nIf there is any wrong at this step, please check whether the pytorch and torchvision versions meets the requirements.\n\n2 . Replace these lines:\n````\nmodel = nn.Sequential(\n    Conv2d(1, 16, kernel_size=3, stride=2, padding=1),\n    nn.ReLU(),\n    Conv2d(16, 16, kernel_size=3, stride=2, padding=1),\n    nn.ReLU(),\n    Conv2d(16, 10, kernel_size=3, stride=2, padding=1),\n    nn.ReLU(),\n    nn.AdaptiveAvgPool2d(1),\n    Lambda(lambda x: x.view(x.size(0), -1)),\n)\n````\nwith\n````\nmodel = nn.Sequential(\n    DOConv2d(1, 16, kernel_size=3, stride=2, padding=1),\n    nn.ReLU(),\n    DOConv2d(16, 16, kernel_size=3, stride=2, padding=1),\n    nn.ReLU(),\n    DOConv2d(16, 10, kernel_size=3, stride=2, padding=1),\n    nn.ReLU(),\n    nn.AdaptiveAvgPool2d(1),\n    Lambda(lambda x: x.view(x.size(0), -1)),\n)\n````\nto apply DO-Conv without any other changes. \n````\npython sample_pt.py\n````\n3 . We provide the performance improvement in this demo example as follows. (averaged accuracy (%) of five runs)\n\n|          | run1  | run2  | run3  | run4  | run5  | avg    | +     |\n|----------|-------|-------|-------|-------|-------|--------|-------|\n| Baseline | 94.63  | 95.31 | 95.23 | 95.24 | 95.37 | 95.156 | -     |\n| DO-Conv  | 95.59 | 95.73 | 95.68 | 95.70 | 95.67 | 95.674 | 0.518 |\n\n4 . Then you can use DO-Conv in your own network in this way.\n"
      },
      "source": "https://raw.githubusercontent.com/yangyanli/DO-Conv/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example Usage: GluonCV (mxnet-cu100==1.5.1.post0, gluoncv==0.6.0)",
        "parent_header": [
          "DO-Conv: Depthwise Over-parameterized Convolutional Layer"
        ],
        "type": "Text_excerpt",
        "value": "We show how to use DO-Conv based on the examples provided in the <a href=\"https://mxnet.apache.org/versions/1.6/api/python/docs/tutorials/packages/gluon/image/mnist.html\" target=\"_blank\">Tutorial</a> of GluonCV with MNIST dataset.\n\n1 . Run the demo example first to get the accuracy of the baseline.\n````\npython sample_gluoncv.py\n````\nIf there is any wrong at this step, please check whether the mxnet and gluoncv versions meets the requirements.\n\n2 . Replace these lines:\n````\nself.conv1 = Conv2D(20, kernel_size=(5,5))\nself.conv2 = Conv2D(50, kernel_size=(5,5))\n````\nwith\n````\nself.conv1 = DOConv2D(1, 20, kernel_size=(5, 5))\nself.conv2 = DOConv2D(20, 50, kernel_size=(5, 5))\n````\nto apply DO-Conv, note that the 'in_channels' in DOConv2D of GluonCV should be set explicitly. \n````\npython sample_gluoncv.py\n````\n3 . We provide the performance improvement in this demo example as follows. (averaged accuracy (%) of five runs)\n\n|          | run1  | run2  | run3  | run4  | run5  | avg    | +     |\n|----------|-------|-------|-------|-------|-------|--------|-------|\n| Baseline | 98.10 | 98.10 | 98.10 | 98.10 | 98.10 | 98.10 | -     |\n| DO-Conv  | 98.26 | 98.26 | 98.26 | 98.26 | 98.26 | 98.26 | 0.16 |\n\n4 . Then you can use DO-Conv in your own network in this way.\n\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/yangyanli/DO-Conv/master/README.md",
      "technique": "header_analysis"
    }
  ]
}