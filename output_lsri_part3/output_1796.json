{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citing smMIP-tools",
        "parent_header": [
          "SmMIP-tools: a computational toolset for processing and analysis of single-molecule molecular inversion probes derived data"
        ],
        "type": "Text_excerpt",
        "value": "Jessie J F Medeiros, Jose-Mario Capo-Chichi, Liran I Shlush, John E Dick, Andrea Arruda, Mark D Minden, Sagi Abelson, SmMIP-tools: a computational toolset for processing and analysis of single-molecule molecular inversion probes-derived data, *Bioinformatics*, Volume 38, Issue 8, 15 April 2022, Pages 2088\u20132095, https://doi.org/10.1093/bioinformatics/btac081\n\n"
      },
      "source": "https://raw.githubusercontent.com/abelson-lab/smMIP-tools/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/abelson-lab/smMIP-tools"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact",
        "parent_header": [
          "SmMIP-tools: a computational toolset for processing and analysis of single-molecule molecular inversion probes derived data"
        ],
        "type": "Text_excerpt",
        "value": "We appreciate any feedback, so please do not hesitate to open an issue in smMIP-tools GitHub page and/or \nemail: sagi.abelson@gmail.com\n"
      },
      "source": "https://raw.githubusercontent.com/abelson-lab/smMIP-tools/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-02-02T18:37:55Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-05T14:08:37Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A computational toolset for processing and analysis of single-molecule molecular inversion probes derived data"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Description",
        "parent_header": [
          "SmMIP-tools: a computational toolset for processing and analysis of single-molecule molecular inversion probes derived data",
          "Calling Mutations"
        ],
        "type": "Text_excerpt",
        "value": "map_smMIPs_extract_UMIs.R takes as an input a paired-end read alignment bam file and a smMIP design file containing information about each probe and its targeted genomic loci. It applys a set of filters on the input bam file to discard hard clipped reads, reads with low mapping quality, paired reads with an unexpected insert size or improper alignment orientations. To validate the proper structure of reads, and to identify corrupted Unique Molecular Identifier (UMI) sequences read-smMIP linkages are being conducted. The final output contains a couple of quality control summary files concerning raw and consensus reads as well as a BAM file containing only high-quality reads. UMIs sequences and smMIPs-of-origin will be included in each read\u2019s header. If you are not familiar with the concept of consensus base calls you may read our Nucleic Acid Research paper ([PMID: 31127310](https://academic.oup.com/nar/article/47/15/e87/5498633)).\n"
      },
      "source": "https://raw.githubusercontent.com/abelson-lab/smMIP-tools/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9962529900249222,
      "result": {
        "original_header": "SmMIP-tools: a computational toolset for processing and analysis of single-molecule molecular inversion probes derived data",
        "type": "Text_excerpt",
        "value": "Here we present an example of how to use smMIP-tools to process and analyze sequencing data obtained from targeted smMIP panels. \nThe pipeline covers the following topics:\n1) Read processing and quality control steps, construction of read-smMIP linkages and retrieval of molecular tags.\n2) smMIP-level base calls summary.\n3) smMIP panel annotation\n4) Mutation calling using a error-aware variant caller capable of detecting both single nucleotide variants and short insertion and deletions.\n \n"
      },
      "source": "https://raw.githubusercontent.com/abelson-lab/smMIP-tools/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9484340319420621,
      "result": {
        "original_header": "Configuration",
        "type": "Text_excerpt",
        "value": "1) Make sure to have a [smMIP-design file](https://github.com/BioSoft/smMIP-tools/blob/main/Example/supplemental_files/Target_MIPgen.txt). We used [MIPgen](http://shendurelab.github.io/MIPGEN) to design the smMIP used in this example. If you designed your smMIPs differently, make sure that your file contain the following columns (case sensitve) and their relavant information: chr, ext_probe_start, ext_probe_stop, ext_probe_sequence, lig_probe_start, lig_probe_stop, lig_probe_sequence, mip_scan_start_position, mip_scan_stop_position, scan_target_sequence, mip_sequence ('N' represent UMIs), probe_strand, mip_name\n2) Please generate a single folder and copy into it all the bam files that you want to analyse. We provide [bam files](https://github.com/BioSoft/smMIP-tools/tree/main/Example/bams) that can be used with this manual.  \n \n"
      },
      "source": "https://raw.githubusercontent.com/abelson-lab/smMIP-tools/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.928573739837471,
      "result": {
        "original_header": "THE FINAL OUTPUT",
        "type": "Text_excerpt",
        "value": "| sample_ID | smMIP |\tchr |\tpos |\tref |\talt |\tgene | protein | cosmic |\tmaf |\tvariant_type | cadd_scaled | P-value | P-value.Bonferroni |\tnum.pval.pass |\tpass.pval.in.pairs |\tnon.ref.counts |\ttotal.depth |\tallele.frequency |\tsamples.with.higher.vaf |\thigher.vaf |\tlower.vaf | SSCS.non.ref.counts |\tSSCS.total.depth |\tSSCS.family.size |\tSSCS.in.family.non.ref.vaf |\tSSCS.allele.frequency | SSCS.overlap | flags |\n| --| --| --|\t--|\t--| --|\t--| --| --|\t--|\t--| --| --| --|\t--|\t--|\t--|\t--|\t--|\t--| --|\t--| --| --|\t--|\t--|\t--|\t--| --|\n| case1_rep1,case1_rep2 |\tJAK2_001 | chr9 |\t5073770 |\tG |\tT |\tJAK2 | ENST00000539801:V617F; ENST00000381652:V617F; ENST00000544510:V468F |\tCOSM12600,haematopoietic and lymphoid tissue,lung,central nervous system | 0.000499393 | missense_variant |\t33 | 8.12E-89 |\t6.14E-86 | 6 | 3 | 575 | 18098 |\t0.031771466 |\t1 |\t0.046512 | 0.029589,0.002016,0.002016 |\t25 | 888 | 38,32,33,15,1,1,1,1:D:38,32,33,15,1,1:R:55,12,17,6,22,1:D:55,12,17,6,22 | 0.973684210526316,1,1,1,1,1,1,1:D:0.973684210526316,1,1,1,1,1:R:1,1,1,1,1,1:D:1,1,1,1,1 |\t0.028153153 |\t12.5,16.67 | |\n| case2_rep1,case2_rep2 |\tJAK2_001 | chr9 | 5073770 |\tG |\tT |\tJAK2 | ENST00000539801:V617F; ENST00000381652:V617F; ENST00000544510:V468F | COSM12600,haematopoietic and lymphoid tissue,lung,central nervous system | 0.000499393 |\tmissense_variant | 33 |\t8.39E-104 |\t6.34E-101 |\t6 |\t3\t| 731 |\t24705 | 0.029589152 | 2 |\t0.031771,0.046512 |\t0.002016,0.002016,0.001827 | 43 | 1073 | 1,37,37,29,13,2,1,2,1:D:1,37,37,29,13,2,1,2,1:R:35,36,31,1,33,1,14,18,2,1,3,1:D:35,36,31,1,33,1,1,14,18,2,1,3,1 |  \t1,1,1,0.96551724137931,0.923076923076923,1,1,1,1:D:1,0.972972972972973,1,1,0.923076923076923,1,1,1,1:R:1,1,1,1,1,1,1,1,1,1,1,1:D:1,1,1,1,1,1,1,1,1,1,1,1,1 | 0.040074557 | 11.11,7.69 | |\n| case3_rep1,case3_rep2\t| JAK2_001 |chr9 | 5073770 | G | T | JAK2 | ENST00000539801:V617F; ENST00000381652:V617F; ENST00000544510:V468F | COSM12600,haematopoietic and lymphoid tissue,lung,central nervous system | 0.000499393 | missense_variant |33 | 8.87E-10 | 6.70E-07 | 6 | 3 | 32 | 688 | 0.046511628 | 0 | NA | \t0.031771,0.029589,0.002016 | 32 | 180 | 1,1,1,1,1,1,1:D:1,1,1,1,1,1,1:R:1,1,1,1,1,1,1,1,1:D:1,1,1,1,1,1,1,1,1 | 1,1,1,1,1,1,1:D:1,1,1,1,1,1,1:R:1,1,1,1,1,1,1,1,1:D:1,1,1,1,1,1,1,1,1 | 0.177777778 | 14.29,0\t| |\n| case3_rep1,case3_rep2 | JAK2_001 | chr9 | 5073769 | T | G | JAK2 | ENST00000539801:C616W; ENST00000381652:C616W; ENST00000544510:C467W | NA | NA |\tmissense_variant | 32 | 5.93E-05 | 0.044824976 | 1 | 1 | 2 | 221 | 0.009049774 | 0 | NA | 0.000283,0.00021,0.000203 | 2 | 50 | NA:D:NA:R:1,1:D:NA | \tNA:D:NA:R:1,1:D:NA | 0.04 | 0,0 | Cannot be supported by both tehcnical replicates. (Low coverage in sample:case3_rep1), Cannot be supported by both Read1 and Read2 generated from smMIP: JAK2_001. (Low coverage in sample: case3_rep2), No SSCS support in one of the replicates | \nBe sure to fully understand the output if you would like to fully use smMIP-tools flags, the generated cohort level information and consensus read concerning data to further rank and prioritize your mutation calls.\nSee below the output column names and their meaning. \n___\n**sample_ID** :  Name of the sample (or samples if technical replicates were used) \n___\n**smMIP** : Name of the smMIP (or smMIPs if overlapping smMIPs present) \n___\n**chr** :  Chromosome\n___\n**pos** :  Genomic position \n___\n**ref** : Reference allele \n___\n**alt** : Alternative allele \n___\n**gene** : Gene ID \n___\n**protein** :  Amino acid change. Ensembl transcripts are indicated if the change is different for different transcripts  \n___\n**cosmic** : Catalogue of Somatic Mutations in Cancer (COSMIC) Identifier \n___\n**maf** : Minor allele frequency \n___\n**variant_type** :  Annotation concerning high level genomic location (e.g, \"intron_variant\", \"splice_donor_variant\") and the consequences of the variant (\"stop_gained\", \"synonymous_variant\") \n___\n**cadd_scaled** : Combined Annotation Dependent Depletion (Scaled). A deleteriousness score. For example, a scaled score of 10 or greater indicates that the variant is among the top 10% deleterious SNVs of all possible reference genome SNVs, and a score of 20 or greater indicates in the top 1%\n___\n**P-value** : Raw P-value, derived from the error-rate model\n___\n**P-value.Bonferroni** : Bonferroni corrected P-value\n___\n**num.pval.pass** : Indicates the number of samples in the cohort with the same allele that received a P-value.Bonferroni that is lower or equal to the user defined threshold. A high value might indicate poor performance for the error rate model for this allele.\n___\n**pass.pval.in.pairs** : Only relevant when technical replicates were used. Indicates the number of sample-duplicates with the same allele that received a P-value.Bonferroni that is lower or equal to the user defined threshold. For example, a pass.pval.in.pairs=1 and a num.pval.pass=30 indicates that there are 28 samples where the allele detected in only one replicate. This might suggest high probability that the allele was called in both the technical replicates in this one sample by chance\n___\n**non.ref.counts** : Number of reads supporting the alternative allele\n___\n**total.depth** : Number of reads covering the genomic position\n___\n**allele.frequency** : non.ref.counts divided by total.depth \n___\n**samples.with.higher.vaf** : Number of samples in the cohort that were observed with allele.frequency that is with higher than in the reported sample. High values reduce the chance that the mutation is authentic. Particularly, when Cosmic IDs are absence\n___\n**higher.vaf** : allele.frequency in the samples in the cohort with the higher allele.frequency (maximum of 3 VAFs are reported)\n___\n**lower.vaf** : allele.frequency in samples in the cohort that were observed with allele.frequency that is lower than in the reported sample (maximum of 3 VAFs are reported). High VAFs values (e.g., higher than 0.01) or those similar to the allele.frequency value increase the chance for a false positive call. The \u201cVAF Warning\u201d flag is generated if the allele.frequency value divided by the second VAF in the lower.vaf string is below the user defined value (default=2). \n___\n**SSCS.non.ref.counts** : Number of single strand consensus reads supporting the alternative allele\n___\n**SSCS.total.depth** : Number of single strand consensus reads covering the genomic position\n___\n**SSCS.family.size** : The number of reads that were used to assemble each consensus sequence (read-families). The separators D,S, and R represent DNA-strand, smMIP and replicate respectively. For example, 24,63:D:24,63:S:1:D:1:R:36:D:36:S:1:D:1 indicates that the allele was detected with consensus reads in both the replicates (...:R:...).  In each replicate consensus reads were detected from each of the two overlapping smMIPs (...:S:...). Moreover, consensus reads derived from both Read1 and Read2 in each smMIP (...:D:...).  Failure to detect an allele with consensus reads in any of the options reduce the chance that the mutation is authentic.\n___\n**SSCS.in.family.non.ref.vaf** : The percentage of raw reads supporting the alternative allele for every matching family reported in SSCS.family.size. Detecting an allele with only low SSCS.in.family.non.ref.vafs reduce the chance that the mutation is real. Moreover, if the sum of SSCS.family.size multiplied by  SSCS.in.family.non.ref.vaf is much lower than the non.ref.counts value it indicates that many reads failed to generate consensus; also reducing the chance that the mutation is real\n___\n**SSCS.allele.frequency** : Variant allele frequency calculated from concensus read support\n___\n**SSCS.overlap** : This column indicates how many of the reads describing the reported variant were also found in other samples in the cohort. Reads are matched based on the variant that they report, their UMI and the smMIP used to generate them.  \n___\n**flags** : Flags to filter and prioritize mutations calls\n___ \n"
      },
      "source": "https://raw.githubusercontent.com/abelson-lab/smMIP-tools/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/abelson-lab/smMIP-tools/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/abelson-lab/smMIP-tools/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "abelson-lab/smMIP-tools"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SmMIP-tools: a computational toolset for processing and analysis of single-molecule molecular inversion probes derived data"
      },
      "source": "https://raw.githubusercontent.com/abelson-lab/smMIP-tools/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/abelson-lab/smMIP-tools/main/R/map_smMIPs_extract_UMIs_MULTIPLE_BAMS.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/abelson-lab/smMIP-tools/main/R/smMIP_level_raw_and_consensus_pileups_MULTIPLE_BAMS.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/abelson-lab/smMIP-tools/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021 Ontario Institute for Cancer Research\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/abelson-lab/smMIP-tools/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "smMIP-tools"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "abelson-lab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 130997,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 4588,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/abelson-lab/smMIP-tools/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "parent_header": [
          "SmMIP-tools: a computational toolset for processing and analysis of single-molecule molecular inversion probes derived data"
        ],
        "type": "Text_excerpt",
        "value": "This pipeline requires the following software and packages:\n| Program | Packages                                       |\n| ------------------------|------------------------- |\n| R (https://www.r-project.org) | optparse, data.table, parallel, Rsamtools, dplyr, IRanges, cellbaseR |               \n\n*You will be prompt to install/update other packages when installing the above packages.\n   \n"
      },
      "source": "https://raw.githubusercontent.com/abelson-lab/smMIP-tools/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running the code",
        "parent_header": [
          "SmMIP-tools: a computational toolset for processing and analysis of single-molecule molecular inversion probes derived data",
          "Calling Mutations"
        ],
        "type": "Text_excerpt",
        "value": "Run map_smMIPs_extract_UMIs.R with the required input parameters:\n```\n-b, --bam.file. Path to bam file. [MANDATORY]\n-p, --panel.file. Path to smMIP design file. [MANDATORY]\n-s, --sample.name. Sample ID that will be used to name the output bam. [MANDATORY]\n-o, --output, Path for output files. A new folder which is named based on the -s parameter will be generated by default. If the path was not supplied, the sample folder will be generated within the folder that contain the bam files\n-c, --code, Path to smMIP tools source functions, smMIPs_Function.R file. If not supplied, it is assumed that the file (smMIPs_Function.R) is located in your working directory\n-f, --filtered.reads,  default=\"n\", options=\"y\" or \"n\". Output a sam file that contain the filtered reads. A sam file for the non-filtered reads will also be generated\n-t, --threads, default=1. Specify the number of threads to use for parallel processing\n-O, --OVERLAP, default=0.95. Fine-tuning the overlap between reads and smMIPs. Used in the map.smip_to_site function\n-M, --MAPQ, default=50. MAPQ cut-off. Used in the filter.on.mappingscore function\n  ```\n\\*map_smMIPs_extract_UMIs.R was built to process one bam file at a time. An example shell script to assign jobs to multiple HPC cluster cores is provided [here](https://github.com/BioSoft/smMIP-tools/blob/main/R/map_smMIPs_extract_UMIs_MULTIPLE_BAMS.sh)\n\n\\*Run the code from the R folder that contains all the R scripts or use the -c parameter to provide the path (dirname only) to the smMIPs_Function.R file\n\n```\nRscript /.mounts/example_github/R/map_smMIPs_extract_UMIs.R -b /.mounts/example_github/Example/bams/control1.bam -p /.mounts/example_github/Example/supplemental_files/Target_MIPgen.txt -s control1\n  ```  \n```\nLoading required package: GenomeInfoDb\nLoading required package: BiocGenerics\nLoading required package: parallel\n\nAttaching package: \u2018BiocGenerics\u2019\n\nThe following objects are masked from \u2018package:parallel\u2019:\n\n    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,\n    clusterExport, clusterMap, parApply, parCapply, parLapply,\n    parLapplyLB, parRapply, parSapply, parSapplyLB\n\nThe following objects are masked from \u2018package:stats\u2019:\n\n    IQR, mad, sd, var, xtabs\n\nThe following objects are masked from \u2018package:base\u2019:\n\n    anyDuplicated, append, as.data.frame, basename, cbind, colnames,\n    dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep,\n    grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget,\n    order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,\n    rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply,\n    union, unique, unsplit, which, which.max, which.min\n\nLoading required package: S4Vectors\nLoading required package: stats4\n\nAttaching package: \u2018S4Vectors\u2019\n\nThe following object is masked from \u2018package:base\u2019:\n\n    expand.grid\n\nLoading required package: IRanges\nLoading required package: GenomicRanges\nLoading required package: Biostrings\nLoading required package: XVector\n\nAttaching package: \u2018Biostrings\u2019\n\nThe following object is masked from \u2018package:base\u2019:\n\n    strsplit\n\n\nAttaching package: \u2018dplyr\u2019\n\nThe following objects are masked from \u2018package:Biostrings\u2019:\n\n    collapse, intersect, setdiff, setequal, union\n\nThe following object is masked from \u2018package:XVector\u2019:\n\n    slice\n\nThe following objects are masked from \u2018package:GenomicRanges\u2019:\n\n    intersect, setdiff, union\n\nThe following object is masked from \u2018package:GenomeInfoDb\u2019:\n\n    intersect\n\nThe following objects are masked from \u2018package:IRanges\u2019:\n\n    collapse, desc, intersect, setdiff, slice, union\n\nThe following objects are masked from \u2018package:S4Vectors\u2019:\n\n    first, intersect, rename, setdiff, setequal, union\n\nThe following objects are masked from \u2018package:BiocGenerics\u2019:\n\n    combine, intersect, setdiff, union\n\nThe following objects are masked from \u2018package:stats\u2019:\n\n    filter, lag\n\nThe following objects are masked from \u2018package:base\u2019:\n\n    intersect, setdiff, setequal, union\n\n\nAttaching package: \u2018data.table\u2019\n\nThe following objects are masked from \u2018package:dplyr\u2019:\n\n    between, first, last\n\nThe following object is masked from \u2018package:GenomicRanges\u2019:\n\n    shift\n\nThe following object is masked from \u2018package:IRanges\u2019:\n\n    shift\n\nThe following objects are masked from \u2018package:S4Vectors\u2019:\n\n    first, second\n\n###############################\n        Run Parameters\n###############################\n$bam.file\n[1] \"/.mounts/example_github/Example/bams/control1.bam\"\n\n$panel.file\n[1] \"/.mounts/example_github/Example/supplemental_files/Target_MIPgen.txt\"\n\n$sample.name\n[1] \"control1\"\n\n$code\n[1] \"/.mounts/example_github/R\"\n\n$filtered.reads\n[1] \"n\"\n\n$threads\n[1] 1\n\n$OVERLAP\n[1] 0.95\n\n$MAPQ\n[1] 50\n\n$help\n[1] FALSE\n\n$output\n[1] \"/.mounts/example_github/Example/bams\"\n\n###############################\n            Running...\n###############################\nLoading bam\nFiltering reads based on low mapping score\nFiltering reads based on bad sam flag\nFiltering reads based on mate distance\nFiltering hard clipped reads\nFiltering reads with missing mates\nMapping smMIPs to reads. Considering overlap and distance measurements :  100%      \nVerifying mapping by local smMIP arms alignment : 100%%     \nExtracting UMIs\nWriting coverage per smMIP and filtered reads summary files\nAdding smMIPs names and UMI sequences to the reads names\nWriting UMIs per smmip summary\nWriting the clean bam file\n[1] \"/.mounts/example_github/Example/bams/control1/control1_clean.bam\"\n\n###############################\n             DONE\n###############################\n  ```\nThe output:\n\n```\nsamtools view /.mounts/example_github/Example/bams/control1/control1_clean.bam | head\n  ```\n```\nA00827:148:HJ7MJDRXX:1:2102:14570:4586||JAK2_001:TATA_ACGC\t163\tchr9\t5073708\t60\t151M\t=\t5073735\t178\tACGCNGCAAGTATGATGAGCAAGCTTTCTCACAAGCATTTGGTTTTAAATTATGGAGTATGTGTCTGTGGAGACGAGAGTAAGTAAAACTACAGGCTTTCTAATGCCTTTCTCAGAGCATCTGTTTTTGTTTATATAGAAAATTCAGTTTC\tFFFF#FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\nA00827:148:HJ7MJDRXX:1:2103:25201:25504||JAK2_001:GTTT_AAGA\t163\tchr9\t5073708\t60\t151M\t=\t5073735\t174\tAAGANGCAAGTATGATGAGCAAGCTTTCTCACAAGCATTTGGTTTTAAATTATGGAGTATGTGTCTGTGGAGACGAGAGTAAGTAAAACTACAGGCTTTCTAATGCCTTTCTCAGAGCATCTGTTTTTGTTTATATAGAAAATTCAGTTTC\tFFFF#FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF:FFFFFFFFF,FFF:FF:FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF:FFFFFFF:FFFF:FF,FFF:FFFFF,FFFFFFF,FFFF:FFFF,FF:,FF:F,,::F::FFF:,\nA00827:148:HJ7MJDRXX:1:2104:5674:18082||JAK2_001:GTTT_AAGA\t163\tchr9\t5073708\t60\t151M\t=\t5073735\t174\tAAGAAGCAAGTATGATGAGCAAGCTTTCTCACAAGCATTTGGTTTTAAATTATGGAGTATGTGTCTGTGGAGACGAGAGTAAGTAAAACTACAGGCTTTCTAATGCCTTTCTCAGAGCATCTGTTTTTGTTTATATAGAAAATTCAGTTTC\tFF,FFFFFFFFFFFFFF:FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF:FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF:FFF:FF:FFFFFFFFFFFFFFFFFFFFFFFFFF\nA00827:148:HJ7MJDRXX:1:2108:2094:10441||JAK2_001:GTTC_AAGA\t163\tchr9\t5073708\t60\t151M\t=\t5073735\t174\tAAGAAGCAAGTATGATGAGCAAGCTTTCTCACAAGCATTTGGTTTTAAATTATGGAGTATGTGTCTGTGGAGACGAGAGTAAGTAAAACTACAGGCTTTCTAATGCCTTTCTCAGAGCATCTGTTTTTGTTTATATAGAAAATTCAGTTTC\t,FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF:F:FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF,FFFF:FFFF:,F:FFFF:F:,FFFFFFFFFF\nA00827:148:HJ7MJDRXX:1:2109:5150:35430||JAK2_001:TTTA_AAGG\t163\tchr9\t5073708\t60\t151M\t=\t5073735\t175\tAAGGAGCAAGTATGATGAGCAAGCTTTCTCACAAGCATTTGGTTTTAAATTATGGAGTATGTGTCTGTGGAGACGAGAGTAAGTAAAACTACAGGCTTTCTAATGCCTTTCTCAGAGCATCTGTTTTTGTTTATATAGAAAATTCAGTTTC\tFFF:FFFFFFFF:FFFFFFFFFFFFFFFFFFFFFFF:FFFFFF,FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF:FFFFFFFF,FFFF:FFF:FFFFFFFFFFFF:FFFFFFF\nA00827:148:HJ7MJDRXX:1:2111:18258:27696||JAK2_001:GTTT_AAGA\t163\tchr9\t5073708\t60\t151M\t=\t5073735\t174\tAAGAAGCAAGTATGATGAGCAAGCTTTCTCACAAGCATTTGGTGTTAAATTATGGAGTATGTGTCTGTGGAGACGAGAGTAAGTACAACTACAGGCTTTCTAATGCCTTTCTCAGAGCATCTGTTTTTGTTTATATAGAAAATTCAGTTTC\t:FFFFFFFF,FFFFFFFFFFFFFFFFF:FFFFFFFFF,:FFF,,:FFFFFFFFFFFFFF,FFFFFFFFFFFFFFFFFFFFFFFFF,FFFFFFFFFFF,FFFFFFF,FF::FFFFFFFFFFFFFFF:F:FF,F:F:FF,FFFF:FF:FFFF,\nA00827:148:HJ7MJDRXX:1:2114:6506:19680||JAK2_001:GTTC_AAGA\t163\tchr9\t5073708\t60\t151M\t=\t5073735\t174\tAAGAAGCAAGTATGATGAGCAAGCTTTCTCACAAGCATTTGGTTTTAAATTATGGAGTATGTGTCTGTGGAGACGAGAGTAAGTAAAACTACAGGCTTTCTAATGCCTTTCTCAGAGCATCTGTTTTTGTTTATATAGAAAATTCAGTTTC\tFF::FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF,FFFFFFFFFFF:FFFFFFF:FFFFFFFFFFFFFF:FF,FFFFFFFF:FFFFFFFFFFF,FF:FFFFFFF,FFFFFF:FFFFFF\nA00827:148:HJ7MJDRXX:1:2127:14705:11240||JAK2_001:TATA_ACGC\t163\tchr9\t5073708\t60\t151M\t=\t5073735\t178\tACGCAGCAAGTATGATGAGCAAGCTTTCTCACAAGCATTTGGTTTTAAATTATGGAGTATGTGTCTGTGGAGACGAGAGTAAGTAAAACTACAGGCTTTCTAATGCCTTTCTCAGAGCATCTGTTTTTGTTTATATAGAAAATTCAGTTTC\tFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF,FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF:FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\nA00827:148:HJ7MJDRXX:1:2128:9588:3192||JAK2_001:GTTT_AAGA\t163\tchr9\t5073708\t60\t151M\t=\t5073735\t174\tAAGAAGCAAGTATGATGAGCAAGCTTTCTCACAAGCATTTGGTTTTAAATTATGGAGTATGTGTCTGTGGAGACGAGAGTAAGTAAAACTACAGGCTTTCTAATGCCTTTCTCAGAGCATCTGTTTTTGTTTATATAGAAAATTCAGTTTC\tFFF:FFFFFFFFFFFFF:FFFFFFFFFFFFFF:FFFFF:FFF,FFFFFFF:FFFFFFFFFFFFFFFFFFFFFFFF,FFFFFFFFFFF:FFFFFFFFFFFFFF:FFFFFFFFFFFFFFFFFFFF:F,FFF::F,FFFFF,:FFFFF,FFFFF\nA00827:148:HJ7MJDRXX:1:2129:8250:25520||JAK2_001:TTTA_AAGG\t163\tchr9\t5073708\t60\t151M\t=\t5073735\t175\tAAGGAGCAAGTATGATGAGCAAGCTTTCTCACAAGCATTTGGTTTTAAATTATGGAGTATGTGTCTGTGGAGACGAGAGTAAGTAAAACTACAGGCTTTCTAATGCCTTTCTCAGAGCATCTGTTTTTGTTTATATAGAAAATTCAGTTTC\tFFFFFFFFFFFFFFFFF:FFFFFFFFFFFFFFFFFFFFFFFFFFFF,:FFFF:FFFFFFFFFFFF:FFFFFFFFFFFFFFFFFFFFF:FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF:FFFFFFFFF:FFFFFFFFFF\n  ```\n"
      },
      "source": "https://raw.githubusercontent.com/abelson-lab/smMIP-tools/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "installation",
    "acknowledgement",
    "download",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 06:19:30",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick Start",
        "parent_header": [
          "SmMIP-tools: a computational toolset for processing and analysis of single-molecule molecular inversion probes derived data"
        ],
        "type": "Text_excerpt",
        "value": "The supplied example data contain sequencing information in the form of aligned bam files. The data derived from a single smMIP that covers a recurrent mutation of which we will attemp to identify.\n  \nsmMIP-tools code can be executed from the terminal. There is no need for installation. Copy the [code files](https://github.com/BioSoft/smMIP-tools/tree/main/R) to your folder of choice.\n"
      },
      "source": "https://raw.githubusercontent.com/abelson-lab/smMIP-tools/main/README.md",
      "technique": "header_analysis"
    }
  ]
}