{
  "application_domain": [
    {
      "confidence": 25.41,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/vfonov/DARQ"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-08-16T19:19:32Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-02-05T05:01:07Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Deep learning of quality control for stereotaxic registration of human brain MRI"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9809852266810409,
      "result": {
        "original_header": "DEEP QC",
        "type": "Text_excerpt",
        "value": "Code for the paper Vladimir S. Fonov, Mahsa Dadar, The PREVENT-AD Research Group, D. Louis Collins **\"DARQ: Deep learning of quality control for stereotaxic registration of human brain MRI\"**. \n"
      },
      "source": "https://raw.githubusercontent.com/vfonov/DARQ/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8726669016708539,
      "result": {
        "original_header": "Files",
        "type": "Text_excerpt",
        "value": "* Shell scripts:\n    * `download_minimal_models.sh`  - download QCResNET-18 with reference pretrained model to run automatic qc (43mb)\n    * `download_all_models.sh`  - download all pretrained models to run automatic qc \n* Directory `python`:\n    * `run_all_experiments.sh` - run experiments with different versions of ResNet and SquezeNet\n    * `aqc_apply.py` - apply pre-trained network\n    * `aqc_convert_to_cpu.py`- helper script to convert network from GPU to CPU\n    * `aqc_data.py` - module to load QC data\n    * `aqc_training.py` - deep nearal net training script\n    * `model/resnet_qc.py` - module with ResNET implementation, based on https://github.com/pytorch/vision/blob/master/torchvision/models/resnet.py\n    * `model/util.py` - various helper functions\n    * `*.R` - R scripts to generete figures for the paper\n* Image files:\n    * `mni_icbm152_t1_tal_nlin_sym_09c_0.jpg`,`mni_icbm152_t1_tal_nlin_sym_09c_1.jpg`,`mni_icbm152_t1_tal_nlin_sym_09c_2.jpg` - reference slices, needed for both training and running pretrained model\n* `results` - figures for the paper\n* `data` - reference images\n \n"
      },
      "source": "https://raw.githubusercontent.com/vfonov/DARQ/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/vfonov/DARQ/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/vfonov/DARQ/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "vfonov/DARQ"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DEEP QC"
      },
      "source": "https://raw.githubusercontent.com/vfonov/DARQ/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vfonov/DARQ/main/download_all_models.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vfonov/DARQ/main/download_minimal_models.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vfonov/DARQ/main/download_all_results_python.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vfonov/DARQ/main/results/make_figures_2_3.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vfonov/DARQ/main/python/train_all_models_cls.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vfonov/DARQ/main/python/run_all_cv_dist.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vfonov/DARQ/main/python/run_r101_freq_experiment.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vfonov/DARQ/main/python/run_r34_freq_experiment.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vfonov/DARQ/main/python/run_r18_freq_experiment_dist.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vfonov/DARQ/main/python/run_r50_freq_experiment.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vfonov/DARQ/main/python/train_all_models_dist.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vfonov/DARQ/main/python/run_all_cv_cls.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vfonov/DARQ/main/python/run_r152_freq_experiment.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vfonov/DARQ/main/python/start_tensorboard.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vfonov/DARQ/main/python/train_all_models_cls_pp.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vfonov/DARQ/main/python/run_r18_freq_experiment.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vfonov/DARQ/main/data/population_stats.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vfonov/DARQ/main/python-tf/run_on_tpu.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vfonov/DARQ/main/python-tf/start_tensorboard_tpu.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vfonov/DARQ/main/python-tf/run_on_tpu_r200_aug.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vfonov/DARQ/main/python-tf/start_tensorboard.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation (Python version) using *conda* for inference",
        "parent_header": [
          "DEEP QC"
        ],
        "type": "Text_excerpt",
        "value": "* CPU version\n\n    ```{shell}\n    conda install pytorch-cpu==1.7.1 torchvision==0.8.2 cpuonly -c pytorch \n    conda install scikit-image\n    ```\n\n* GPU version\n\n    ```{shell}\n    conda install pytorch==1.7.1 torchvision==0.8.2 cudatoolkit=<your cuda version>  -c pytorch \n    conda install scikit-image\n    ```\n\n* (optional) minc toolkit and minc2-simple\n\n   ```{shell}\n   conda install -c vfonov minc-toolkit-v2 minc2-simple\n   ```\n\n* (optional) nibabel (for analyzing Freesurfer output)\n\n   ```{shell}\n   pip install nibabel\n   ```\n"
      },
      "source": "https://raw.githubusercontent.com/vfonov/DARQ/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8736090118249868,
      "result": {
        "original_header": "DEEP QC",
        "type": "Text_excerpt",
        "value": "*Updated version of the previosly available [\"Deep learning of quality control for stereotaxic registration of human brain MRI\"](https://doi.org/10.1101/303487)*\n \n"
      },
      "source": "https://raw.githubusercontent.com/vfonov/DARQ/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999094859711242,
      "result": {
        "original_header": "Validating correct operation on Freesurfer, requires nibabel",
        "type": "Text_excerpt",
        "value": "```{shell}\n# run recon-all on ernie subject from freesurfer installation\nrecon-all -s ernie -i $SUBJECTS_DIR/sample-001.mgz -i $SUBJECTS_DIR/sample-002.mgz -autorecon1\n\n# run automated QC on freesurfer output\n# should pring \"Pass\"\npython python/aqc_apply.py --net r18 --freesurfer $FREESURFER_HOME/subjects/ernie \n\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/vfonov/DARQ/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.9380232097905775,
      "result": {
        "original_header": "Files",
        "type": "Text_excerpt",
        "value": "* Shell scripts:\n    * `download_minimal_models.sh`  - download QCResNET-18 with reference pretrained model to run automatic qc (43mb)\n    * `download_all_models.sh`  - download all pretrained models to run automatic qc \n* Directory `python`:\n    * `run_all_experiments.sh` - run experiments with different versions of ResNet and SquezeNet\n    * `aqc_apply.py` - apply pre-trained network\n    * `aqc_convert_to_cpu.py`- helper script to convert network from GPU to CPU\n    * `aqc_data.py` - module to load QC data\n    * `aqc_training.py` - deep nearal net training script\n    * `model/resnet_qc.py` - module with ResNET implementation, based on https://github.com/pytorch/vision/blob/master/torchvision/models/resnet.py\n    * `model/util.py` - various helper functions\n    * `*.R` - R scripts to generete figures for the paper\n* Image files:\n    * `mni_icbm152_t1_tal_nlin_sym_09c_0.jpg`,`mni_icbm152_t1_tal_nlin_sym_09c_1.jpg`,`mni_icbm152_t1_tal_nlin_sym_09c_2.jpg` - reference slices, needed for both training and running pretrained model\n* `results` - figures for the paper\n* `data` - reference images\n \n"
      },
      "source": "https://raw.githubusercontent.com/vfonov/DARQ/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8440346015154285,
      "result": {
        "original_header": "Validating correct operation (requires minc-toolkit and minc2_simple python module)",
        "type": "Text_excerpt",
        "value": "```{shell}\n# create a file with 30 degree rotation transform\nparam2xfm -rotations 30 0 0  rot_30.xfm\n# apply to a template:\nitk_resample /opt/minc/share/icbm152_model_09c/mni_icbm152_t1_tal_nlin_sym_09c.mnc --transform rot_30.xfm bad.mnc\n\n# run QC script on good scan\n# should print \"Pass\"\npython python/aqc_apply.py --net r18 --volume /opt/minc/share/icbm152_model_09c/mni_icbm152_t1_tal_nlin_sym_09c.mnc\n\n# now on \"bad\"\n# should print \"Fail\"\npython python/aqc_apply.py --net r18 --volume bad.mnc\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/vfonov/DARQ/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8631450089668783,
      "result": {
        "original_header": "Validating correct operation on Freesurfer, requires nibabel",
        "type": "Text_excerpt",
        "value": "```{shell}\n# run recon-all on ernie subject from freesurfer installation\nrecon-all -s ernie -i $SUBJECTS_DIR/sample-001.mgz -i $SUBJECTS_DIR/sample-002.mgz -autorecon1\n\n# run automated QC on freesurfer output\n# should pring \"Pass\"\npython python/aqc_apply.py --net r18 --freesurfer $FREESURFER_HOME/subjects/ernie \n\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/vfonov/DARQ/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/vfonov/DARQ/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "deep-learning, mri, pytorch, qc, registration"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2018 Vladimir S. FONOV\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/vfonov/DARQ/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DARQ"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "vfonov"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 175417,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 35578,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 15248,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vfonov/DARQ/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "vfonov",
          "type": "User"
        },
        "date_created": "2021-08-16T21:10:11Z",
        "date_published": "2021-08-16T21:38:22Z",
        "description": "Version at the moment of the submission of the paper \"DARQ: Deep learning of quality control for stereotaxic registration of human brain MRI\"",
        "html_url": "https://github.com/vfonov/DARQ/releases/tag/v0.1",
        "name": "DARQ Paper submission version",
        "release_id": 47936361,
        "tag": "v0.1",
        "tarball_url": "https://api.github.com/repos/vfonov/DARQ/tarball/v0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/vfonov/DARQ/releases/47936361",
        "value": "https://api.github.com/repos/vfonov/DARQ/releases/47936361",
        "zipball_url": "https://api.github.com/repos/vfonov/DARQ/zipball/v0.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "parent_header": [
          "DEEP QC"
        ],
        "type": "Text_excerpt",
        "value": "* trainig dependencies: `scikit-image tensorboard`,\n* for inference directly on minc files `minc2-simple`\n* for inference on freeserfer files: `nibabel`\n* minc2-simple (optional): https://github.com/vfonov/minc2-simple\n"
      },
      "source": "https://raw.githubusercontent.com/vfonov/DARQ/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Inference",
        "parent_header": [
          "DEEP QC",
          "Running"
        ],
        "type": "Text_excerpt",
        "value": "* Inference using jpeg files generated by `minc_aqc.pl` script: `python3 python/aqc_apply.py --net <network> --image <image base> `\n* Inference using minc files in stereotaxic space: `python3 python/aqc_apply.py --net <network> --volume <input.mnc> `\n* Inference using Freesurfer output: `python3 python/aqc_apply.py  --net <network> --freesurfer <freesurfer subject directory> `\n"
      },
      "source": "https://raw.githubusercontent.com/vfonov/DARQ/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Training",
        "parent_header": [
          "DEEP QC",
          "Running"
        ],
        "type": "Text_excerpt",
        "value": "* Training  in `python` directory `run_all_experiments.sh` - will try to train all networks\n"
      },
      "source": "https://raw.githubusercontent.com/vfonov/DARQ/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 04:00:41",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ]
}