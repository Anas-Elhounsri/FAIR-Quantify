{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "format": "cff",
        "type": "File_dump",
        "value": "cff-version: 1.2.0\nmessage: \"If you use this software, please cite it as below.\"\nauthors:\n- family-names: \"Hartmann\"\n  given-names: \"Till\"\n  orcid: \"https://orcid.org/0000-0002-6993-347X\"\n- family-names: \"Schr\u00f6der\"\n  given-names: \"Christopher\"\n  orcid: \"https://orcid.org/0000-0002-4483-8951\"\n- family-names: \"Kuthe\"\n  given-names: \"Elias\"\n  orcid: \"https://orcid.org/0000-0002-4704-9536\"\n- family-names: \"L\u00e4hnemann\"\n  given-names: \"David\"\n  orcid: \"https://orcid.org/0000-0002-9138-4112\"\n- family-names: \"K\u00f6ster\"\n  given-names: \"Johannes\"\n  orcid: \"https://orcid.org/0000-0001-9818-9320\"\n- family-names: \"Bargull\"\n  given-names: \"Marcel\"\n  orcid: \"https://orcid.org/0000-0002-7185-3508\"\n- family-names: \"Forster\"\n  given-names: \"Jan\"\n  orcid: \"https://orcid.org/0000-0002-1587-7732\"\n- family-names: \"M\u00f6lder\"\n  given-names: \"Felix\"\n  orcid: \"https://orcid.org/0000-0002-3976-9701\"\ntitle: \"vembrane\"\nversion: 0.13.2\ndoi: 10.5281/zenodo.7244278\ndate-released: 2022-10-24\nurl: \"https://github.com/vembrane/vembrane\"\npreferred-citation:\n  type: article\n  authors:\n  - family-names: \"Hartmann\"\n    given-names: \"Till\"\n    orcid: \"https://orcid.org/0000-0002-6993-347X\"\n  - family-names: \"Schr\u00f6der\"\n    given-names: \"Christopher\"\n    orcid: \"https://orcid.org/0000-0002-4483-8951\"\n  - family-names: \"Kuthe\"\n    given-names: \"Elias\"\n    orcid: \"https://orcid.org/0000-0002-4704-9536\"\n  - family-names: \"L\u00e4hnemann\"\n    given-names: \"David\"\n    orcid: \"https://orcid.org/0000-0002-9138-4112\"\n  - family-names: \"K\u00f6ster\"\n    given-names: \"Johannes\"\n    orcid: \"https://orcid.org/0000-0001-9818-9320\"\n  doi: \"10.1093/bioinformatics/btac810\"\n  journal: \"Bioinformatics\"\n  month: 12\n  year: 2022\n  title: \"Insane in the vembrane: filtering and transforming VCF/BCF files\"\n"
      },
      "source": "https://raw.githubusercontent.com/vembrane/vembrane/main/CITATION.cff",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "vembrane: variant filtering using python expressions"
        ],
        "type": "Text_excerpt",
        "value": "Check the \"Cite this repository\" entry in the sidebar for citation options.\n\nAlso, please read [should-I-cite-this-software](https://github.com/mr-c/shouldacite/blob/main/should-I-cite-this-software.md) for background.\n"
      },
      "source": "https://raw.githubusercontent.com/vembrane/vembrane/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/vembrane/vembrane"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-07-01T13:22:22Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-23T13:45:08Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "vembrane filters VCF records using python expressions"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.8549264237556278,
      "result": {
        "original_header": "vembrane: variant filtering using python expressions",
        "type": "Text_excerpt",
        "value": "vembrane allows to simultaneously filter variants based on any `INFO` or `FORMAT` field, `CHROM`, `POS`, `ID`, `REF`, `ALT`, `QUAL`, `FILTER`, and the annotation field `ANN`. When filtering based on `ANN`, annotation entries are filtered first. If no annotation entry remains, the entire variant is deleted. \nvembrane relies on [pysam](https://pysam.readthedocs.io/en/latest/) for reading/writing VCF/BCF files. \n"
      },
      "source": "https://raw.githubusercontent.com/vembrane/vembrane/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8129011372600659,
      "result": {
        "original_header": "Filter expression",
        "type": "Text_excerpt",
        "value": "The filter expression can be any valid python expression that evaluates to a value of *type* `bool`.\nIf you want to use truthy values, you need to wrap the expression in `bool()`, or aggregate multiple values via `any()` or `all()`. \n"
      },
      "source": "https://raw.githubusercontent.com/vembrane/vembrane/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8627792172232222,
      "result": {
        "original_header": "Custom `ANN` types",
        "type": "Text_excerpt",
        "value": "`vembrane` parses entries in the annotation field as outlined in [docs/ann_types.md](docs/ann_types.md).\n \n"
      },
      "source": "https://raw.githubusercontent.com/vembrane/vembrane/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9409399570508633,
      "result": {
        "original_header": "Missing values in annotations",
        "type": "Text_excerpt",
        "value": "For fields with custom types, such as `ANN[\"Protein_position\"]` which is of type `PosRange` with attributes `start`, `end` and `length`, trying to access `ANN[\"Protein_position\"].start` will result in `NA` if there was no value for `\"Protein_position\"` in the annotation of the respective record, i.e. the access will return `NA` instead of raising an `AttributeError`.\nIn general, any attribute access on `NA` will result in `NA` (and issue a warning to stderr). \nSince you may want to use the regex module to search for matches, `NA` also acts as an empty `str`, such that `re.search(\"nothing\", NA)` returns nothing instead of raising an exception. \n*Explicitly* handling missing/optional values in INFO or FORMAT fields can be done by checking for NA, e.g.: `INFO[\"DP\"] is NA`. \nSometimes, multi-valued fields may contain missing values; in this case, the `without_na` function can be convenient, for example: `mean(without_na(FORMAT['DP'][s] for s in SAMPLES)) > 2.3`. It is also possible to replace `NA` with some constant value with the `replace_na` function: `mean(replace_na((FORMAT['DP'][s] for s in SAMPLES), 0.0)) > 2.3`\n \n"
      },
      "source": "https://raw.githubusercontent.com/vembrane/vembrane/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9676350626041422,
      "result": {
        "original_header": "Auxiliary files",
        "type": "Text_excerpt",
        "value": "`vembrane` supports additional files, such as lists of genes or ids with the `--aux NAME=path/to/file` option. The file should contain one item per line and is parsed as a set. For example `vembrane filter --aux genes=genes.txt \"ANN['SYMBOL'] in AUX['genes']\" variants.vcf` will keep only records where the annotated symbol is in the set specified in `genes.txt`. \n"
      },
      "source": "https://raw.githubusercontent.com/vembrane/vembrane/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8971908751345398,
      "result": {
        "original_header": "`vembrane tag`",
        "type": "Text_excerpt",
        "value": "While `vembrane filter` removes/skips records which do not pass the supplied expression,\n`vembrane tag` applies tags to records which do pass the expression.\nIn other words, `tag` is a non-destructive version of `filter`, which only adds tags to records (hence never removes information from the input).\nAs such, multiple tags can be applied to a single record in the same run. \nNote that the VCF specification explicitly defines the `FILTER` field as a \"list of codes for filters that *fail*\" (emphasis by us).\nAs such, `PASS` *should* indicate that all filters have passed, and `.` (missing) *should* indicate that no filters have been applied.\nCustom tags should therefore indicate whether a record failed a certain filter, and not whether it passed. \nHowever, the default behaviour is to tag records which pass the expression, and not those which fail.\nTo toggle between applying tags in a positive (tagging records that *pass*) or negative (tagging records that *fail*) sense, use the `--tag-mode [pass|fail]`/`-m [pass|fail]` flag. \n"
      },
      "source": "https://raw.githubusercontent.com/vembrane/vembrane/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9298849273179269,
      "result": {
        "original_header": "`vembrane table`",
        "type": "Text_excerpt",
        "value": "In addition to the `filter` subcommand, vembrane (`\u2265 0.5`) also supports writing tabular data with the `table` subcommand.\nIn this case, an expression which evaluates to `tuple` is expected, for example:\n```sh\nvembrane table 'CHROM, POS, 10**(-QUAL/10), ANN[\"CLIN_SIG\"]' input.vcf > table.tsv\n``` \nWhen handling **multi-sample VCFs**, you often want to iterate over all samples in a record by looking at a `FORMAT` field for all of them.\nHowever, if you use a standard Python list comprehension (something like `[FORMAT['DP'][sample] for sample in SAMPLES]`), this would yield a single column with a list containing one entry per sample (something like `[25, 32, 22]` for three samples with the respective depths). \nIn order to have a separate column for each sample, you can use the **`for_each_sample()`** function in both the main `vembrane table` expression and the `--header` expression.\nIt should contain one [lambda expression](https://docs.python.org/3/reference/expressions.html#lambda) with exactly one argument, which will be substituted by the sample names in the lambda expression. \nFor example, you could specifiy expressions for the `--header` and the main VCF record evaluation like this:\n```sh\nvembrane table --header 'CHROM, POS, for_each_sample(lambda sample: f\"{sample}_depth\")' 'CHROM, POS, for_each_sample(lambda s: FORMAT[\"DP\"][s])' input.vcf > table.tsv\n```\nGiven a VCF file with samples `Sample_1`, `Sample_2` and `Sample_3`, the header would expand to be printed as:\nBASH3*\nand the expression to evaluate on each VCF record would become:\nBASH4* \nPlease note that, as anywhere in vembrane, you can use arbitrary Python expressions in `for_each_sample()` lambda expressions.\nSo you can for example perform computations on fields or combine multiple fields into one value:\n```sh\nvembrane table 'CHROM, POS, for_each_sample(lambda sample: FORMAT[\"AD\"][sample] / FORMAT[\"DP\"][sample] * QUAL)' input.vcf > table.tsv\n``` \nInstead of using the `for_each_sample` (wide format) machinery, it is also possible to generate the data in long format by specifying the `--long` flag.\nIn this case, the first column will always be called `SAMPLE` and there's an additional variable of the same name available for the expressions.\nFor example:\n```sh\nvembrane table --long 'CHROM, POS, FORMAT[\"AD\"][SAMPLE] / FORMAT[\"DP\"][SAMPLE] * QUAL' input.vcf > long_table.tsv\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/vembrane/vembrane/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9369544367191368,
      "result": {
        "original_header": "`vembrane annotate`",
        "type": "Text_excerpt",
        "value": "vembrane is able to annotate vcf files with a given table-like file. In addition to the vcf and annotation file, the user has to provide a configuration file. \nConfiguration (Example):\n```yaml\n## example.yaml\nannotation:\n    file: \"example.tsv\" # the table-like annotation file column with header\n    columns:\n      chrom: \"chrom\" # column name of the annotation file refering to the chromosome\n      start: \"chromStart\" # column name of the annotation file refering to the chromosome start\n      stop: \"chromEnd\" # column name of the annotation file refering to the chromosome end\n    delimiter: \"\\t\" # delimiter of the columns\n    values:\n    - value: # a new annotation entry in the info field of the vcf\n        vcf_name: \"genehancer_score\" # the name of annotation entry\n        number: \"1\" # number of values for each entry\n        description: \"Score from genehancer.\" # description of this entry in the header\n        type: \"Float\" # type of the values\n        expression: \"DATA['score'][0]\" # any python expression to calculate the value(s)\n                                       # DATA['score'] refers to the 'score' column of the annotation field\n    - value: # a second annotation entry to annotate\n        vcf_name: \"genehancer_score2\"\n        number: \"1\"\n        description: \"Score from genehancer.\"\n        type: \"Float\"\n        expression: \"log(max(DATA['score']) * 2)\"\n```\n \nInternally for each vcf record the overlapping regions of the annotation file are determined and stored in `DATA`. The expression may then access the `DATA` object and its columns by the columns names to generate a single or multiple values of cardinality `number` of type `type`. These values are stored in the new annotation entry under the name `vcf_name` and with header description `description`.\n \n"
      },
      "source": "https://raw.githubusercontent.com/vembrane/vembrane/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/vembrane/vembrane/tree/main/docs"
      },
      "technique": "file_exploration"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/vembrane/vembrane/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/vembrane/vembrane/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "vembrane/vembrane"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "vembrane: variant filtering using python expressions"
      },
      "source": "https://raw.githubusercontent.com/vembrane/vembrane/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "vembrane: variant filtering using python expressions"
        ],
        "type": "Text_excerpt",
        "value": "vembrane is available in [bioconda](https://bioconda.github.io/) and can either be installed into an existing conda environment with `mamba install -c conda-forge -c bioconda vembrane` or into a new named environment `mamba create -n environment_name -c conda-forge -c bioconda vembrane`.\nAlternatively, if you are familiar with git and [poetry](https://python-poetry.org/), clone this repository and run `poetry install`.\nSee [docs/develop.md](docs/develop.md) for further details.\n"
      },
      "source": "https://raw.githubusercontent.com/vembrane/vembrane/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9962599026720206,
      "result": {
        "original_header": "Filter expression",
        "type": "Text_excerpt",
        "value": "The filter expression can be any valid python expression that evaluates to a value of *type* `bool`.\nIf you want to use truthy values, you need to wrap the expression in `bool()`, or aggregate multiple values via `any()` or `all()`. \n"
      },
      "source": "https://raw.githubusercontent.com/vembrane/vembrane/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9549301558139581,
      "result": {
        "original_header": "Missing values in annotations",
        "type": "Text_excerpt",
        "value": "Handling missing/optional values in fields other than INFO or FORMAT can be done by checking for None, e.g `ID is not None`. \n"
      },
      "source": "https://raw.githubusercontent.com/vembrane/vembrane/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9889797498294657,
      "result": {
        "original_header": "`vembrane tag`",
        "type": "Text_excerpt",
        "value": "However, the default behaviour is to tag records which pass the expression, and not those which fail.\nTo toggle between applying tags in a positive (tagging records that *pass*) or negative (tagging records that *fail*) sense, use the `--tag-mode [pass|fail]`/`-m [pass|fail]` flag. \nTag names must neither contain whitespace nor semicolons. Additionally, the tag name must also not be `\"0\"`. \n"
      },
      "source": "https://raw.githubusercontent.com/vembrane/vembrane/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8672518364358288,
      "result": {
        "original_header": "`vembrane annotate`",
        "type": "Text_excerpt",
        "value": "example.tsv (Example):\n```\nchrom\tchromStart\tchromEnd\tname\tscore\nchr10\t76001\t77000\tHJSDHKD\t463\nchr10\t120054\t130024\tHJSJHKD\t463\nchr10\t432627\t492679\tIDASJLD\t327\nchr10\t540227\t872071\tSZAGHSD\t435\nchr10\t654480\t1000200\tHSJKJSD\t12\n``` \nExemplary invocation: `vembrane annotate example.yaml example.bcf > annotated.vcf`. \n"
      },
      "source": "https://raw.githubusercontent.com/vembrane/vembrane/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/vembrane/vembrane/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bioinformatics, filter, filter-expression, vcf, vcf-filtering"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 Till Hartmann\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/vembrane/vembrane/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "vembrane"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "vembrane"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 127544,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/vembrane/vembrane/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://pysam.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/vembrane/vembrane/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "tedil",
          "type": "User"
        },
        "date_created": "2024-09-23T13:11:53Z",
        "date_published": "2024-09-23T13:13:18Z",
        "description": "## What's Changed\r\n* chore: update project deps for 1.x branch by @tedil in https://github.com/vembrane/vembrane/pull/180\r\n* fix: properly handle MATEID presented as single-item by @johanneskoester, @tedil in https://github.com/vembrane/vembrane/pull/179\r\n\r\n\r\n**Full Changelog**: https://github.com/vembrane/vembrane/compare/v1.0.6...v1.0.7",
        "html_url": "https://github.com/vembrane/vembrane/releases/tag/v1.0.7",
        "name": "v1.0.7",
        "release_id": 176395245,
        "tag": "v1.0.7",
        "tarball_url": "https://api.github.com/repos/vembrane/vembrane/tarball/v1.0.7",
        "type": "Release",
        "url": "https://api.github.com/repos/vembrane/vembrane/releases/176395245",
        "value": "https://api.github.com/repos/vembrane/vembrane/releases/176395245",
        "zipball_url": "https://api.github.com/repos/vembrane/vembrane/zipball/v1.0.7"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "tedil",
          "type": "User"
        },
        "date_created": "2024-07-09T14:54:40Z",
        "date_published": "2024-08-08T09:04:26Z",
        "description": "- when `Number=R` but `value=.` (one MISSING value), behave as if `value=.,.` (a list/array of MISSING values) (https://github.com/vembrane/vembrane/issues/171)",
        "html_url": "https://github.com/vembrane/vembrane/releases/tag/v1.0.6",
        "name": "v1.0.6",
        "release_id": 169277380,
        "tag": "v1.0.6",
        "tarball_url": "https://api.github.com/repos/vembrane/vembrane/tarball/v1.0.6",
        "type": "Release",
        "url": "https://api.github.com/repos/vembrane/vembrane/releases/169277380",
        "value": "https://api.github.com/repos/vembrane/vembrane/releases/169277380",
        "zipball_url": "https://api.github.com/repos/vembrane/vembrane/zipball/v1.0.6"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2024-03-26T14:04:12Z",
        "date_published": "2024-03-26T14:06:10Z",
        "description": "## Changes\r\n\r\n- Add parsers for SpliceAI and AlphaMissense VEP plugins @FelixMoelder  (#170)\r\n",
        "html_url": "https://github.com/vembrane/vembrane/releases/tag/v1.0.5",
        "name": "v1.0.5",
        "release_id": 139094315,
        "tag": "v1.0.5",
        "tarball_url": "https://api.github.com/repos/vembrane/vembrane/tarball/v1.0.5",
        "type": "Release",
        "url": "https://api.github.com/repos/vembrane/vembrane/releases/139094315",
        "value": "https://api.github.com/repos/vembrane/vembrane/releases/139094315",
        "zipball_url": "https://api.github.com/repos/vembrane/vembrane/zipball/v1.0.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2023-12-07T15:11:05Z",
        "date_published": "2023-12-07T15:13:30Z",
        "description": "## Changes\r\n\r\n- Custom parser for `INTRON` now also defaults to a range-total, instead of a number-total (#164 ) @christopher-schroeder ",
        "html_url": "https://github.com/vembrane/vembrane/releases/tag/v1.0.4",
        "name": "v1.0.4",
        "release_id": 120957148,
        "tag": "v1.0.4",
        "tarball_url": "https://api.github.com/repos/vembrane/vembrane/tarball/v1.0.4",
        "type": "Release",
        "url": "https://api.github.com/repos/vembrane/vembrane/releases/120957148",
        "value": "https://api.github.com/repos/vembrane/vembrane/releases/120957148",
        "zipball_url": "https://api.github.com/repos/vembrane/vembrane/zipball/v1.0.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2023-07-26T08:20:35Z",
        "date_published": "2023-07-26T08:23:15Z",
        "description": "## Changes\r\n\r\n- fix: For SVTYPE=BND records, check if MATEID and EVENT are specified in the VCF header prior to accessing the fields @tedil (#152)\r\n",
        "html_url": "https://github.com/vembrane/vembrane/releases/tag/v1.0.3",
        "name": "v1.0.3",
        "release_id": 113339384,
        "tag": "v1.0.3",
        "tarball_url": "https://api.github.com/repos/vembrane/vembrane/tarball/v1.0.3",
        "type": "Release",
        "url": "https://api.github.com/repos/vembrane/vembrane/releases/113339384",
        "value": "https://api.github.com/repos/vembrane/vembrane/releases/113339384",
        "zipball_url": "https://api.github.com/repos/vembrane/vembrane/zipball/v1.0.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2023-06-12T16:09:21Z",
        "date_published": "2023-06-12T16:10:51Z",
        "description": "## Changes\r\n\r\n- fix: handle missing `ANN`-field for `vembrane table` @FelixMoelder (#148)\r\n",
        "html_url": "https://github.com/vembrane/vembrane/releases/tag/v1.0.2",
        "name": "v1.0.2",
        "release_id": 108248870,
        "tag": "v1.0.2",
        "tarball_url": "https://api.github.com/repos/vembrane/vembrane/tarball/v1.0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/vembrane/vembrane/releases/108248870",
        "value": "https://api.github.com/repos/vembrane/vembrane/releases/108248870",
        "zipball_url": "https://api.github.com/repos/vembrane/vembrane/zipball/v1.0.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2023-04-27T11:14:18Z",
        "date_published": "2023-04-27T11:19:19Z",
        "description": "## Changes\r\n\r\n- fix: When a record is missing an entry for ANN, replace with ||||\u2026 @tedil (#146)\r\n",
        "html_url": "https://github.com/vembrane/vembrane/releases/tag/v1.0.1",
        "name": "v1.0.1",
        "release_id": 101084640,
        "tag": "v1.0.1",
        "tarball_url": "https://api.github.com/repos/vembrane/vembrane/tarball/v1.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/vembrane/vembrane/releases/101084640",
        "value": "https://api.github.com/repos/vembrane/vembrane/releases/101084640",
        "zipball_url": "https://api.github.com/repos/vembrane/vembrane/zipball/v1.0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2023-03-31T13:07:03Z",
        "date_published": "2023-03-31T13:52:28Z",
        "description": "## Breaking changes\r\n- Command line arguments and options now use `key=value` syntax consistently (where applicable):\r\n  - auxiliary set option `--aux / -a` previously used whitespace to separate `key` and `value` but now uses `=` instead:\r\n    ```sh\r\n     vembrane filter --aux known_genes=known_genes.txt \"ID in AUX['known_genes']\" input.vcf\r\n    ```\r\n  - The same holds for `--overwrite-number-info` and `--overwrite-number-format` options:\r\n     ```sh\r\n     vembrane filter --overwrite-number-format DP=1 \"FORMAT['DP']['Sample'] == 0\" input.vcf\r\n     ```\r\n  - This also holds for the new `tag` subcommand (see below)\r\n- The deprecated `--overwrite-number` option  was removed (#140)\r\n## Features\r\n\r\n- Add `tag` subcommand (#126):\r\n  The tag subcommand allows specifying multiple `--tag name=expression` arguments.\r\n  If a record *passes* an expression, the corresponding tag is added to its `FILTER` field.\r\n  To instead tag records which *fail* an expression, either invert the expressions or use the `--tag-mode fail` option.\r\n  Example:\r\n  ```sh\r\n  vembrane tag --tag quality_at_least_30=\"QUAL >= 30\" input.vcf\r\n  ```\r\n\r\n- Introduce `get(item, default=NA)` methods for `INFO`, `ANN` and `FORMAT[field]`  (#139)\r\n  This is a convenience function for handling missing values (in existing fields), which will be replaced by the provided default value (which itself defaults to `NA`)\r\n  Example:\r\n  ```sh\r\n  vembrane filter \"ANN.get('Impact', 'HIGH')\"\r\n  ```\r\n  Note that this will still `KeyError` when no such field has been defined in the header (e.g. `\"ANN.get('nonexistent_key')\"`)\r\n\r\n- Add '.raw' getter property to custom types to get original annotation string  (#137)\r\n  Because `vembrane` has custom types for certain annotations, their string representation may be different from the string they were parsed from. These types now have a `.raw` property to access the original string, e.g. `ANN[\"EXON\"].raw`\r\n\r\n- Attribute access on `NA` values results in `NA`  (#136)\r\n  Example:\r\n  ```sh\r\n  vembrane table \"ANN['EXON'].range.start\" input.vcf\r\n  ```\r\n  will no longer cause an `AttributeError` when the `ANN['EXON']` field is empty. This is because `NA.arbitrary_attribute` is now equivalent to `NA`.\r\n\r\n- Support `--aux` for vembrane table.  (#142)\r\n  Previously, the `table` subcommand did not support auxiliary files -- now it does!\r\n\r\n- Add support for new-ish gnomADe_* and gnomADg_* entries from VEP  (#134)\r\n  There have been some upstream changes with respect to gnomAD naming conventions, which are now split into exome (e) and genome (g) populations. This simply adds support for the new names.\r\n\r\n## Fixes\r\n- Fix regex for checking tag names, add more help to tag option  (#141)\r\n- Add testcase for `table --aux`  (#144)\r\n- `PosRange` specific fixes  (#138)\r\n\r\n## Housekeeping\r\n\r\n- Update dependencies  (#145)\r\n- Address some mypy errors and hints  (#143)\r\n",
        "html_url": "https://github.com/vembrane/vembrane/releases/tag/v1.0.0",
        "name": "v1.0.0",
        "release_id": 96650673,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/vembrane/vembrane/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/vembrane/vembrane/releases/96650673",
        "value": "https://api.github.com/repos/vembrane/vembrane/releases/96650673",
        "zipball_url": "https://api.github.com/repos/vembrane/vembrane/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2023-03-15T13:00:16Z",
        "date_published": "2023-03-15T13:05:36Z",
        "description": "## Changes\r\n\r\n- No more custom ANN names: always use names from VEP / snpEff as is @tedil (#135). \r\n  If you have expressions making use of `cDNA`, `CDS` or `Protein`, change to `cDNA_position`, `CDS_position` and `Protein_position`(VEP) or `cDNA.pos / cDNA.length`, `CDS.pos / CDS.length` and  `AA.pos / AA.length` (SnpEff).\r\n \r\n## Housekeeping\r\n- Update pre commit hook and poetry tool versions @tedil (#133)\r\n- Add \"Citation\" section with information on how / what to cite @tedil (#132)\r\n",
        "html_url": "https://github.com/vembrane/vembrane/releases/tag/v0.14.0",
        "name": "v0.14.0",
        "release_id": 86925874,
        "tag": "v0.14.0",
        "tarball_url": "https://api.github.com/repos/vembrane/vembrane/tarball/v0.14.0",
        "type": "Release",
        "url": "https://api.github.com/repos/vembrane/vembrane/releases/86925874",
        "value": "https://api.github.com/repos/vembrane/vembrane/releases/86925874",
        "zipball_url": "https://api.github.com/repos/vembrane/vembrane/zipball/v0.14.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2022-10-24T10:43:19Z",
        "date_published": "2022-10-24T10:58:55Z",
        "description": "## Changes\r\n\r\n- Add examples for working with sample specific values and genotypes @tedil, @dlaehnemann (#130)\r\n- Slightly better handling of the `##vembraneCmd=\u2026` VCF meta line @tedil (#131) (should no longer truncate multi-line expressions)\r\n",
        "html_url": "https://github.com/vembrane/vembrane/releases/tag/v0.13.2",
        "name": "v0.13.2",
        "release_id": 80769474,
        "tag": "v0.13.2",
        "tarball_url": "https://api.github.com/repos/vembrane/vembrane/tarball/v0.13.2",
        "type": "Release",
        "url": "https://api.github.com/repos/vembrane/vembrane/releases/80769474",
        "value": "https://api.github.com/repos/vembrane/vembrane/releases/80769474",
        "zipball_url": "https://api.github.com/repos/vembrane/vembrane/zipball/v0.13.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2022-10-13T07:17:34Z",
        "date_published": "2022-10-13T07:20:13Z",
        "description": "## Changes\r\n\r\n- Improve some type annotations @EQt (#127)\r\n- Fix: False `HeaderWrongColumnNumber` error when comma in non-top-level expression @christopher-schroeder (#129)\r\n",
        "html_url": "https://github.com/vembrane/vembrane/releases/tag/v0.13.1",
        "name": "v0.13.1",
        "release_id": 79727769,
        "tag": "v0.13.1",
        "tarball_url": "https://api.github.com/repos/vembrane/vembrane/tarball/v0.13.1",
        "type": "Release",
        "url": "https://api.github.com/repos/vembrane/vembrane/releases/79727769",
        "value": "https://api.github.com/repos/vembrane/vembrane/releases/79727769",
        "zipball_url": "https://api.github.com/repos/vembrane/vembrane/zipball/v0.13.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2022-09-22T10:53:28Z",
        "date_published": "2022-09-22T11:07:11Z",
        "description": "## Changes\r\n\r\n- feat: support for accessing END position @johanneskoester (#128)\r\n",
        "html_url": "https://github.com/vembrane/vembrane/releases/tag/v0.13.0",
        "name": "v0.13.0",
        "release_id": 77866702,
        "tag": "v0.13.0",
        "tarball_url": "https://api.github.com/repos/vembrane/vembrane/tarball/v0.13.0",
        "type": "Release",
        "url": "https://api.github.com/repos/vembrane/vembrane/releases/77866702",
        "value": "https://api.github.com/repos/vembrane/vembrane/releases/77866702",
        "zipball_url": "https://api.github.com/repos/vembrane/vembrane/zipball/v0.13.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2022-08-17T14:06:42Z",
        "date_published": "2022-08-17T14:11:18Z",
        "description": "## Changes\r\n\r\n- Explicitly clear builtins in Environment @tedil (#125)\r\n",
        "html_url": "https://github.com/vembrane/vembrane/releases/tag/v0.12.1",
        "name": "v0.12.1",
        "release_id": 74626953,
        "tag": "v0.12.1",
        "tarball_url": "https://api.github.com/repos/vembrane/vembrane/tarball/v0.12.1",
        "type": "Release",
        "url": "https://api.github.com/repos/vembrane/vembrane/releases/74626953",
        "value": "https://api.github.com/repos/vembrane/vembrane/releases/74626953",
        "zipball_url": "https://api.github.com/repos/vembrane/vembrane/zipball/v0.12.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2022-08-16T09:18:09Z",
        "date_published": "2022-08-16T09:24:41Z",
        "description": "## Changes\r\n\r\n- filter: better support for BNDs without \"EVENTS\" tag but with \"MATEID\" @tedil (#120)\r\n- table: add `--long` option for long format tsv output (e.g. `vembrane table --long \"CHROM, POS, FORMAT['DP'][SAMPLE]\" in.vcf`) @tedil (#114)\r\n\r\n## Maintenance\r\n\r\n- Simplify error types @EQt (#124)\r\n- Mention possibility of `NA` in annotation. @EQt (#123)\r\n- TypeVar instead of Any @EQt (#122)\r\n- Some documentation improvements @EQt (#121)\r\n\r\n",
        "html_url": "https://github.com/vembrane/vembrane/releases/tag/v0.12.0",
        "name": "v0.12.0",
        "release_id": 74411696,
        "tag": "v0.12.0",
        "tarball_url": "https://api.github.com/repos/vembrane/vembrane/tarball/v0.12.0",
        "type": "Release",
        "url": "https://api.github.com/repos/vembrane/vembrane/releases/74411696",
        "value": "https://api.github.com/repos/vembrane/vembrane/releases/74411696",
        "zipball_url": "https://api.github.com/repos/vembrane/vembrane/zipball/v0.12.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2022-08-11T08:50:02Z",
        "date_published": "2022-08-11T08:57:28Z",
        "description": "## Changes\r\n\r\n- return `NA` in case of MISSING (\".\") ALT @tedil (#119)\r\n- print the record itself in addition to the record index when encountering exceptions @tedil (#118)\r\n\r\n## Maintenance\r\n\r\n- Minor formatting/Sort imports @EQt (#116)\r\n- Make black and isort work together nicely @tedil (#117)\r\n",
        "html_url": "https://github.com/vembrane/vembrane/releases/tag/v0.11.2",
        "name": "v0.11.2",
        "release_id": 74109988,
        "tag": "v0.11.2",
        "tarball_url": "https://api.github.com/repos/vembrane/vembrane/tarball/v0.11.2",
        "type": "Release",
        "url": "https://api.github.com/repos/vembrane/vembrane/releases/74109988",
        "value": "https://api.github.com/repos/vembrane/vembrane/releases/74109988",
        "zipball_url": "https://api.github.com/repos/vembrane/vembrane/zipball/v0.11.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2022-08-09T14:46:30Z",
        "date_published": "2022-08-09T14:50:05Z",
        "description": "## Changes\r\n\r\n- Allow comparisons to `InfoTuple` @tedil (#115)\r\n",
        "html_url": "https://github.com/vembrane/vembrane/releases/tag/v0.11.1",
        "name": "v0.11.1",
        "release_id": 73879039,
        "tag": "v0.11.1",
        "tarball_url": "https://api.github.com/repos/vembrane/vembrane/tarball/v0.11.1",
        "type": "Release",
        "url": "https://api.github.com/repos/vembrane/vembrane/releases/73879039",
        "value": "https://api.github.com/repos/vembrane/vembrane/releases/73879039",
        "zipball_url": "https://api.github.com/repos/vembrane/vembrane/zipball/v0.11.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2022-08-08T11:12:23Z",
        "date_published": "2022-08-08T11:19:13Z",
        "description": "## Changes\r\n\r\n- Replace float constants in expressions with IEEE-754-1985 32bit float constants. @tedil (#111)\r\n- `--overwrite-number` deprecated and replaced with `--overwrite-number-info` and `--overwrite-number-format` respectively @tedil (#112)\r\n- Do not output records unconditionally when `--preserve-order` is activated @tedil (#113)\r\n- docs: add `ID` to list of available fields in README.md @dlaehnemann (#109)\r\n",
        "html_url": "https://github.com/vembrane/vembrane/releases/tag/v0.11.0",
        "name": "v0.11.0",
        "release_id": 71784165,
        "tag": "v0.11.0",
        "tarball_url": "https://api.github.com/repos/vembrane/vembrane/tarball/v0.11.0",
        "type": "Release",
        "url": "https://api.github.com/repos/vembrane/vembrane/releases/71784165",
        "value": "https://api.github.com/repos/vembrane/vembrane/releases/71784165",
        "zipball_url": "https://api.github.com/repos/vembrane/vembrane/zipball/v0.11.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2022-07-12T08:54:44Z",
        "date_published": "2022-07-12T08:58:00Z",
        "description": "## Changes\r\n\r\n- pyproject.toml adjustments, bump patch version @tedil (#108)\r\n",
        "html_url": "https://github.com/vembrane/vembrane/releases/tag/v0.10.1",
        "name": "v0.10.1",
        "release_id": 71779286,
        "tag": "v0.10.1",
        "tarball_url": "https://api.github.com/repos/vembrane/vembrane/tarball/v0.10.1",
        "type": "Release",
        "url": "https://api.github.com/repos/vembrane/vembrane/releases/71779286",
        "value": "https://api.github.com/repos/vembrane/vembrane/releases/71779286",
        "zipball_url": "https://api.github.com/repos/vembrane/vembrane/zipball/v0.10.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2022-07-11T12:50:17Z",
        "date_published": "2022-07-11T12:56:57Z",
        "description": "## Changes\r\n\r\n- Update numpy version (to address dependabot warning) @tedil (#107). This requires `python >= 3.8`.\r\n- Also update versions of other dependencies.\r\n\r\n## Chores\r\n\r\n- update github actions to automatically consider all current python versions starting from 3.8 for testing\r\n",
        "html_url": "https://github.com/vembrane/vembrane/releases/tag/v0.10.0",
        "name": "v0.10.0",
        "release_id": 71697234,
        "tag": "v0.10.0",
        "tarball_url": "https://api.github.com/repos/vembrane/vembrane/tarball/v0.10.0",
        "type": "Release",
        "url": "https://api.github.com/repos/vembrane/vembrane/releases/71697234",
        "value": "https://api.github.com/repos/vembrane/vembrane/releases/71697234",
        "zipball_url": "https://api.github.com/repos/vembrane/vembrane/zipball/v0.10.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2022-07-11T12:19:49Z",
        "date_published": "2022-07-11T12:29:58Z",
        "description": "## Changes\r\n\r\n- Add `without_na`, `replace_na` and common functions from python's `statistics` module @tedil (#104)\r\n- Enable `--overwrite-number` option for table subcommand as well @tedil (#106)\r\n",
        "html_url": "https://github.com/vembrane/vembrane/releases/tag/v0.9.0",
        "name": "v0.9.0",
        "release_id": 67997137,
        "tag": "v0.9.0",
        "tarball_url": "https://api.github.com/repos/vembrane/vembrane/tarball/v0.9.0",
        "type": "Release",
        "url": "https://api.github.com/repos/vembrane/vembrane/releases/67997137",
        "value": "https://api.github.com/repos/vembrane/vembrane/releases/67997137",
        "zipball_url": "https://api.github.com/repos/vembrane/vembrane/zipball/v0.9.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2022-05-17T09:52:37Z",
        "date_published": "2022-05-17T13:52:48Z",
        "description": "## Changes\r\n\r\n- In vep's \"EXON\" annotation field, range/totals like `4-6/27` are allowed, where we previously always assumed number/totals like `4/27` only. With this change, both range/total and number/total format are treated as range/total, and the field names on the type are now `range` and `total` , changed from `number` and `total`, possibly breaking existing filter/table expressions (e.g. `5 in ANN[\"EXON\"].range and ANN[\"EXON\"].total == 27`). @dlaehnemann (#103)\r\n",
        "html_url": "https://github.com/vembrane/vembrane/releases/tag/v0.8.0",
        "name": "v0.8.0",
        "release_id": 67056046,
        "tag": "v0.8.0",
        "tarball_url": "https://api.github.com/repos/vembrane/vembrane/tarball/v0.8.0",
        "type": "Release",
        "url": "https://api.github.com/repos/vembrane/vembrane/releases/67056046",
        "value": "https://api.github.com/repos/vembrane/vembrane/releases/67056046",
        "zipball_url": "https://api.github.com/repos/vembrane/vembrane/zipball/v0.8.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2022-03-24T09:40:37Z",
        "date_published": "2022-03-24T09:50:59Z",
        "description": "## Changes\r\n\r\n- Add more annotation types @dlaehnemann (#102)\r\n",
        "html_url": "https://github.com/vembrane/vembrane/releases/tag/v0.7.1",
        "name": "v0.7.1",
        "release_id": 61596087,
        "tag": "v0.7.1",
        "tarball_url": "https://api.github.com/repos/vembrane/vembrane/tarball/v0.7.1",
        "type": "Release",
        "url": "https://api.github.com/repos/vembrane/vembrane/releases/61596087",
        "value": "https://api.github.com/repos/vembrane/vembrane/releases/61596087",
        "zipball_url": "https://api.github.com/repos/vembrane/vembrane/zipball/v0.7.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2021-10-07T11:10:00Z",
        "date_published": "2021-10-07T11:11:11Z",
        "description": "## Changes\r\n\r\n## Features\r\n\r\n- Annotate @christopher-schroeder (#98)\r\n\r\n## Bug Fixes\r\n\r\n- Fix subsequent ALT accesses yielding list not str @mbargull (#101)\r\n- fix and test table args handling @dlaehnemann (#95)\r\n\r\n## Maintenance\r\n\r\n- Fix tests to check all expected entries/headers @mbargull (#100)\r\n",
        "html_url": "https://github.com/vembrane/vembrane/releases/tag/v0.7.0",
        "name": "v0.7.0",
        "release_id": 50946832,
        "tag": "v0.7.0",
        "tarball_url": "https://api.github.com/repos/vembrane/vembrane/tarball/v0.7.0",
        "type": "Release",
        "url": "https://api.github.com/repos/vembrane/vembrane/releases/50946832",
        "value": "https://api.github.com/repos/vembrane/vembrane/releases/50946832",
        "zipball_url": "https://api.github.com/repos/vembrane/vembrane/zipball/v0.7.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2021-03-24T12:43:31Z",
        "date_published": "2021-03-24T12:46:17Z",
        "description": "## Changes\r\n\r\n- Add `__len__` to InfoTuple @tedil (#94)\r\n\r\n## Bug Fixes\r\n\r\n- A flag should be a single boolean value, not a tuple with 1 entry @tedil (#96)\r\n",
        "html_url": "https://github.com/vembrane/vembrane/releases/tag/v0.6.1",
        "name": "v0.6.1",
        "release_id": 38663593,
        "tag": "v0.6.1",
        "tarball_url": "https://api.github.com/repos/vembrane/vembrane/tarball/v0.6.1",
        "type": "Release",
        "url": "https://api.github.com/repos/vembrane/vembrane/releases/38663593",
        "value": "https://api.github.com/repos/vembrane/vembrane/releases/38663593",
        "zipball_url": "https://api.github.com/repos/vembrane/vembrane/zipball/v0.6.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2021-02-23T13:59:15Z",
        "date_published": "2021-02-23T14:00:39Z",
        "description": "## Changes\r\n\r\n- Better handling of Number=1 and NoValue @tedil (#93)\r\n- Implement `hash` for NoValue @tedil (#92)\r\n- Add option for auxiliary files containing sets of symbols @tedil (#91)\r\n",
        "html_url": "https://github.com/vembrane/vembrane/releases/tag/v0.6.0",
        "name": "v0.6.0",
        "release_id": 36463847,
        "tag": "v0.6.0",
        "tarball_url": "https://api.github.com/repos/vembrane/vembrane/tarball/v0.6.0",
        "type": "Release",
        "url": "https://api.github.com/repos/vembrane/vembrane/releases/36463847",
        "value": "https://api.github.com/repos/vembrane/vembrane/releases/36463847",
        "zipball_url": "https://api.github.com/repos/vembrane/vembrane/zipball/v0.6.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2020-11-17T15:50:00Z",
        "date_published": "2020-11-17T16:12:42Z",
        "description": "## Changes\r\n\r\n- Format containment fix @tedil (#90)\r\n",
        "html_url": "https://github.com/vembrane/vembrane/releases/tag/v0.5.3",
        "name": "v0.5.3",
        "release_id": 34065716,
        "tag": "v0.5.3",
        "tarball_url": "https://api.github.com/repos/vembrane/vembrane/tarball/v0.5.3",
        "type": "Release",
        "url": "https://api.github.com/repos/vembrane/vembrane/releases/34065716",
        "value": "https://api.github.com/repos/vembrane/vembrane/releases/34065716",
        "zipball_url": "https://api.github.com/repos/vembrane/vembrane/zipball/v0.5.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2020-11-06T13:30:32Z",
        "date_published": "2020-11-06T13:33:19Z",
        "description": "## Changes\r\n\r\n- Add --version option @tedil (#88)\r\n\r\n## Features\r\n\r\n- Add `INDEX` to available fields for filter/table @christopher-schroeder (#89)\r\n",
        "html_url": "https://github.com/vembrane/vembrane/releases/tag/v0.5.2",
        "name": "v0.5.2",
        "release_id": 33548177,
        "tag": "v0.5.2",
        "tarball_url": "https://api.github.com/repos/vembrane/vembrane/tarball/v0.5.2",
        "type": "Release",
        "url": "https://api.github.com/repos/vembrane/vembrane/releases/33548177",
        "value": "https://api.github.com/repos/vembrane/vembrane/releases/33548177",
        "zipball_url": "https://api.github.com/repos/vembrane/vembrane/zipball/v0.5.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2020-10-22T10:17:13Z",
        "date_published": "2020-10-22T10:43:15Z",
        "description": "## Changes\r\n\r\n- More custom VEP annotation types @tedil (#84)\r\n- Small performance improvement for `keep_unmatched` @tedil (#83)\r\n- make FILTER a list @tedil @christopher-schroeder (#82)\r\n\r\n\r\nWe also added function families for working with genotypes (`FORMAT[\"GT\"]`): `count_hom`, `count_het`, `count_any_ref`, `count_any_var`, `count_hom_ref`, `count_hom_var` and `is_hom`, `is_het`, `is_hom_ref`, `is_hom_var`, `has_ref`, `has_var`. These are similar in semantics to the `countHom` etc functions found in SnpSift with the exception that unknown genotype information (i.e. `.` in VCF notation) is **not** considered to be `REF` (i.e. `0` in VCF notation) but... unknown. Consider the following VCF snippet with 27 triploid samples in all possible combinations of `0` (ref) allele, `1` (first alternative) allele and `.` (missing information):\r\n\r\n```\r\n#CHROM\tPOS\tID\tREF\tALT\tQUAL\tFILTER\tINFO\tFORMAT\tS1\tS2\tS3\tS4\tS5\tS6\tS7\tS8\tS9\tT1\tT2\tT3\tT4\tT5\tT6\tT7\tT8\tT9\tU1\tU2\tU3\tU4\tU5\tU6\tU7\tU8\tU9\r\nchr18\t27963423\t.\tG\tA\t276\tPASS\t\tGT\t././.\t1/1/.\t0/0/.\t0/1/.\t1/0/.\t./0/.\t./1/.\t1/./.\t0/./.\t././0\t1/1/0\t0/0/0\t0/1/0\t1/0/0\t./0/0\t./1/0\t1/./0\t0/./0\t././1\t1/1/1\t0/0/1\t0/1/1\t1/0/1\t./0/1\t./1/1\t1/./1\t0/./1\r\n```\r\nvembrane reports the following counts:\r\n- `count_hom() == 2` (only `0/0/0` and `1/1/1` are considered homozygous)\r\n- `count_het() ==  12`\r\n- `count_any_ref() == 19`\r\n- `count_any_var() == 19`\r\n- `count_hom_ref() == 1`\r\n- `count_hom_var() == 1`\r\n\r\nSnpSift reports the following counts:\r\n- `countHom() == 3` (`././.` is considered homozygous in addition to `0/0/0` and `1/1/1`)\r\n- `countHet() ==  24`\r\n- `countRef() == 8` (since `.` is considered `0`)\r\n- `countVariant() == 19`\r\n",
        "html_url": "https://github.com/vembrane/vembrane/releases/tag/v0.5.1",
        "name": "v0.5.1",
        "release_id": 32099057,
        "tag": "v0.5.1",
        "tarball_url": "https://api.github.com/repos/vembrane/vembrane/tarball/v0.5.1",
        "type": "Release",
        "url": "https://api.github.com/repos/vembrane/vembrane/releases/32099057",
        "value": "https://api.github.com/repos/vembrane/vembrane/releases/32099057",
        "zipball_url": "https://api.github.com/repos/vembrane/vembrane/zipball/v0.5.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2020-09-29T11:58:08Z",
        "date_published": "2020-09-29T12:06:20Z",
        "description": "## Changes\r\n- `vembrane \"expression\" input` is now `vembrane filter \"expression\" input`\r\n\r\n## Features\r\n\r\n- vembrane now supports filtering VCF files with breakends (BNDs). This requires two passes if you wish to keep the order of the input, which can be enabled with the `--preserve-order` option.  @christopher-schroeder (#80)\r\n- since we already evaluate expressions, we might as well use this to write tabular output: `vembrane table \"expression\" input` evaluates the given expression and writes tabular data as tsv, check `vembrane table --help` for more information @christopher-schroeder (#79)\r\n",
        "html_url": "https://github.com/vembrane/vembrane/releases/tag/v0.5.0",
        "name": "v0.5.0",
        "release_id": 29017779,
        "tag": "v0.5.0",
        "tarball_url": "https://api.github.com/repos/vembrane/vembrane/tarball/v0.5.0",
        "type": "Release",
        "url": "https://api.github.com/repos/vembrane/vembrane/releases/29017779",
        "value": "https://api.github.com/repos/vembrane/vembrane/releases/29017779",
        "zipball_url": "https://api.github.com/repos/vembrane/vembrane/zipball/v0.5.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2020-07-28T08:06:10Z",
        "date_published": "2020-07-28T08:06:44Z",
        "description": "## Changes\r\n\r\n- Fix error if there are no INFO/FORMAT entries; add test @christopher-schroeder  @tedil (#77)\r\n",
        "html_url": "https://github.com/vembrane/vembrane/releases/tag/v0.4.1",
        "name": "v0.4.1",
        "release_id": 29017579,
        "tag": "v0.4.1",
        "tarball_url": "https://api.github.com/repos/vembrane/vembrane/tarball/v0.4.1",
        "type": "Release",
        "url": "https://api.github.com/repos/vembrane/vembrane/releases/29017579",
        "value": "https://api.github.com/repos/vembrane/vembrane/releases/29017579",
        "zipball_url": "https://api.github.com/repos/vembrane/vembrane/zipball/v0.4.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 08:40:45",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 56
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "vembrane: variant filtering using python expressions",
          "`vembrane filter`"
        ],
        "type": "Text_excerpt",
        "value": "vembrane takes two positional arguments: The filter expression and the input file; the latter may be omitted to read from `stdin` instead, making it easy to use vembrane in pipe chains.\n```\nusage: vembrane filter [options] expression [input vcf/bcf]\n\noptions:\n  -h, --help            show this help message and exit\n  --output OUTPUT, -o OUTPUT\n                        Output file. If not specified, output is written to STDOUT.\n  --output-fmt {vcf,bcf,uncompressed-bcf}, -O {vcf,bcf,uncompressed-bcf}\n                        Output format.\n  --annotation-key FIELDNAME, -k FIELDNAME\n                        The INFO key for the annotation field. Defaults to \"ANN\".\n  --aux NAME=PATH, -a NAME=PATH\n                        Path to an auxiliary file containing a set of symbols.\n  --keep-unmatched      Keep all annotations of a variant if at least one of them\n                        passes the expression (mimics SnpSift behaviour).\n  --preserve-order      Ensures that the order of the output matches that of the input.\n                        This is only useful if the input contains breakends (BNDs)\n                        since the order of all other variants is preserved anyway.\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/vembrane/vembrane/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Examples",
        "parent_header": [
          "vembrane: variant filtering using python expressions",
          "`vembrane tag`"
        ],
        "type": "Text_excerpt",
        "value": "* Only keep annotations and variants where gene equals \"CDH2\" and its impact is \"HIGH\":\n  ```sh\n  vembrane filter 'ANN[\"Gene_Name\"] == \"CDH2\" and ANN[\"Annotation_Impact\"] == \"HIGH\"' variants.bcf\n  ```\n* Only keep variants with quality at least 30:\n  ```sh\n  vembrane filter 'QUAL >= 30' variants.vcf\n  ```\n* Only keep annotations and variants where feature (transcript) is ENST00000307301:\n  ```sh\n  vembrane filter 'ANN[\"Feature\"] == \"ENST00000307301\"' variants.bcf\n  ```\n* Only keep annotations and variants where protein position is less than 10:\n  ```sh\n  vembrane filter 'ANN[\"Protein_position\"].start < 10' variants.bcf\n  ```\n* Only keep variants where mapping quality is exactly 60:\n  ```sh\n  vembrane filter 'INFO[\"MQ\"] == 60' variants.bcf\n  ```\n* Only keep annotations and variants where consequence contains the word \"stream\" (matching \"upstream\" and \"downstream\"):\n  ```sh\n  vembrane filter 're.search(\"(up|down)stream\", ANN[\"Consequence\"])' variants.vcf\n  ```\n* Only keep annotations and variants where CLIN_SIG contains \"pathogenic\", \"likely_pathogenic\" or \"drug_response\":\n  ```sh\n  vembrane filter \\\n    'any(entry in ANN[\"CLIN_SIG\"]\n         for entry in (\"pathogenic\", \"likely_pathogenic\", \"drug_response\"))' \\\n    variants.vcf\n  ```\n  Using set operations, the same may also be expressed as:\n  ```sh\n  vembrane filter \\\n    'not {\"pathogenic\", \"likely_pathogenic\", \"drug_response\"}.isdisjoint(ANN[\"CLIN_SIG\"])' \\\n    variants.vcf\n  ```\n* Filter on sample specific values:\n  * by sample name:\n    ```sh\n    vembrane filter 'FORMAT[\"DP\"][\"specific_sample_name\"] > 0' variants.vcf\n    ```\n  * by sample index:\n    ```sh\n    vembrane filter 'FORMAT[\"DP\"][0] > 0' variants.vcf\n    ```\n  * by sample name based on the index in the list of `SAMPLES`:\n    ```sh\n    vembrane filter 'FORMAT[\"DP\"][SAMPLES[0]] > 0' variants.vcf\n    ```\n  * using all or a subset of `SAMPLES`:\n      ```sh\n      vembrane filter 'mean(FORMAT[\"DP\"][s] for s in SAMPLES) > 10' variants.vcf\n      ```\n\n* Filter on genotypes for specific samples (named \"kid\", \"mom\", \"dad\"):\n  ```sh\n  vembrane filter \\\n    'is_het(\"kid\") and is_hom_ref(\"mom\") and is_hom_ref(\"dad\") and \\\n     all(FORMAT[\"DP\"][s] > 10 for s in [\"kid\", \"mom\", \"dad\"])' \\\n    variants.vcf\n  ```\n* Explicitly access the `GT` field for the first sample in the file:\n  ```sh\n  vembrane filter 'FORMAT[\"GT\"][0] == (1, 1)' variants.vcf\n  ```\n"
      },
      "source": "https://raw.githubusercontent.com/vembrane/vembrane/main/README.md",
      "technique": "header_analysis"
    }
  ]
}