{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/LiLabAtVT/DeepTE"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-09-24T14:14:34Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-27T09:57:46Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Neural network classification of TE"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "type": "Text_excerpt",
        "value": "Given exclusive TEs of different species type, it can therefore classify seven orders, and 11-24 superframilies towards Plants, Metazoans, Fungi, and Others. This tool successfully leverages convolutional neural network to TE classification, assisting to precisely identify and annotate TEs in a new sequenced eukaryotic genome.\n"
      },
      "source": "https://raw.githubusercontent.com/LiLabAtVT/DeepTE/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9394972873054476,
      "result": {
        "original_header": "DeepTE",
        "type": "Text_excerpt",
        "value": "DeepTE is aimed to classify transposons with unknown classification *via* Convolutional Neural Network.\n \n"
      },
      "source": "https://raw.githubusercontent.com/LiLabAtVT/DeepTE/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8856123238321354,
      "result": {
        "original_header": "Updating",
        "type": "Text_excerpt",
        "value": "**12/25/2020**  \nAdd a proability threshold to annotate TEs. For example, a TE has a probability (0.6) to be ClassI, If users set 0.7 as the threshold, this TE will be labeled as 'unknown', Default: 0.6.   \n**08/15/2020**  \nIn the 'store_temp_opt_dir' of the working_dir, we add information about probability of each family the input TE belongs to.   \n \n"
      },
      "source": "https://raw.githubusercontent.com/LiLabAtVT/DeepTE/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8694020964303457,
      "result": {
        "original_header": "Work flows",
        "type": "Text_excerpt",
        "value": "\n**Figure** A pipeline for classifying unknown TEs and sequences based on trained nine models. The unknown TEs go through eight models to be classified into different families. Two correction steps are conducted during classification. In Class model, TR domain exists in predicted Class I TEs that will be corrected to Class II_sub1 TEs, while RT domain exists in predicted Class II_sub1 TEs that will be corrected to Class I TEs. In ClassI model, EN domain exists in predicted LTR TEs will be correct to nLTR TEs. The unknown sequences go through UNS model to be classified into TEs, coding sequences (CDS), and intergenic sequences (INS).\n \n"
      },
      "source": "https://raw.githubusercontent.com/LiLabAtVT/DeepTE/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/LiLabAtVT/DeepTE/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "faq": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Appendix and FAQ",
        "parent_header": [
          "Work flows"
        ],
        "type": "Text_excerpt",
        "value": ":::info\n**Find this document incomplete?** Leave a comment!\n:::\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/LiLabAtVT/DeepTE/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/LiLabAtVT/DeepTE/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "LiLabAtVT/DeepTE"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DeepTE"
      },
      "source": "https://raw.githubusercontent.com/LiLabAtVT/DeepTE/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://i.imgur.com/RlCZblM.png"
      },
      "source": "https://raw.githubusercontent.com/LiLabAtVT/DeepTE/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Use conda to install required packages (Recommend)",
        "parent_header": [
          "Dependence and requirements",
          "Requirements"
        ],
        "type": "Text_excerpt",
        "value": "conda create -n py36 python=3.6  \nconda activate py36  \nconda install tensorflow-gpu=1.14.0  \nconda install biopython  \nconda install keras=2.2.4  \nconda install numpy=1.16.0  \npip install sklearn\n"
      },
      "source": "https://raw.githubusercontent.com/LiLabAtVT/DeepTE/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Use pip to install required packages",
        "parent_header": [
          "Dependence and requirements",
          "Requirements"
        ],
        "type": "Text_excerpt",
        "value": "Modules can be installed using pip: pip install -r requirements.txt or pip install [module_name]  \n**Module version**  \nbiopython (1.72)  \nkeras (2.2.4)  \ntensorflow (1.14.0)  \nnumpy (1.16.0)  \nsklearn (0.24.2) (It is used for the training example)  \n"
      },
      "source": "https://raw.githubusercontent.com/LiLabAtVT/DeepTE/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8718549899509768,
      "result": {
        "original_header": "Updating",
        "type": "Text_excerpt",
        "value": "**12/25/2020**  \nAdd a proability threshold to annotate TEs. For example, a TE has a probability (0.6) to be ClassI, If users set 0.7 as the threshold, this TE will be labeled as 'unknown', Default: 0.6.   \n"
      },
      "source": "https://raw.githubusercontent.com/LiLabAtVT/DeepTE/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999996857035921,
      "result": {
        "original_header": "Common issues",
        "type": "Text_excerpt",
        "value": "Try python3.7 env and install tensor=2.2.0 + keras=2.3.1.  \nPlease also see this link:\nhttps://stackoverflow.com/questions/62690377/tensorflow-compatibility-with-keras \n"
      },
      "source": "https://raw.githubusercontent.com/LiLabAtVT/DeepTE/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/LiLabAtVT/DeepTE/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "BSD 3-Clause \"New\" or \"Revised\" License",
        "spdx_id": "BSD-3-Clause",
        "type": "License",
        "url": "https://api.github.com/licenses/bsd-3-clause",
        "value": "https://api.github.com/licenses/bsd-3-clause"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "BSD 3-Clause License\n\nCopyright (c) 2020, LiLabAtVT\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
      },
      "source": "https://raw.githubusercontent.com/LiLabAtVT/DeepTE/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DeepTE"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "LiLabAtVT"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 131625,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/LiLabAtVT/DeepTE/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependence and requirements",
        "type": "Text_excerpt",
        "value": "Before running this pipeline, a dependency check should be performed first to make sure every dependency is correctly installed.\n\nFor information about installing the dependencies, please see below. The version numbers listed below represents the version this pipeline is developed with, and using the newest version is recommended.\n"
      },
      "source": "https://raw.githubusercontent.com/LiLabAtVT/DeepTE/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Optional requirements",
        "parent_header": [
          "Dependence and requirements"
        ],
        "type": "Text_excerpt",
        "value": "**Model_dir**  \nDownload the model dir from the cyVerse link  \nPlants:  \nhttps://de.cyverse.org/dl/d/89D2FE7A-41BA-4F64-80E2-B9C26D49E99F/Plants_model.tar.gz  \nMetazoans:  \nhttps://de.cyverse.org/dl/d/441459EF-6DDD-41A5-A9AB-1D5D13049F18/Metazoans_model.tar.gz  \nFungi:  \nhttps://de.cyverse.org/dl/d/8B112733-063A-4DE9-89EC-22A062D8807B/Fungi_model.tar.gz  \nOthers:  \nhttps://de.cyverse.org/dl/d/34CF8ACB-0B1F-4210-8359-366A70539F01/Others_model.tar.gz  \nUNS models:  \nhttps://de.cyverse.org/dl/d/3280369B-030A-4ADF-8B6F-EDD4EC21DC4A/UNS_model.tar.gz  \n\nDownload the model dir from the google link  \nPlants:  \nhttps://drive.google.com/file/d/1voj86STKcQH8lAhvY6yl5E65nzaM6o0B/view?usp=sharing  \nMetazoans:  \nhttps://drive.google.com/file/d/1ExRwC3szJ4XMa3ikxM9Ccu31lY79rdw9/view?usp=sharing  \nFungi:  \nhttps://drive.google.com/file/d/1uvnm99ypauIKtqCxoybdtT-mEMdoupip/view?usp=sharing  \nOthers:  \nhttps://drive.google.com/file/d/1Q6HW1NhNs0a6Ykrw7jGEKKPWxawpWiuM/view?usp=sharing  \nUNS model:  \nhttps://drive.google.com/file/d/1uXTEtNQtJc2DO-JpT0s4Kv1k2ogUjCLr/view?usp=sharing\n\n"
      },
      "source": "https://raw.githubusercontent.com/LiLabAtVT/DeepTE/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 11:56:06",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 82
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Use conda to install required packages (Recommend)",
        "parent_header": [
          "Dependence and requirements",
          "Requirements"
        ],
        "type": "Text_excerpt",
        "value": "conda create -n py36 python=3.6  \nconda activate py36  \nconda install tensorflow-gpu=1.14.0  \nconda install biopython  \nconda install keras=2.2.4  \nconda install numpy=1.16.0  \npip install sklearn\n"
      },
      "source": "https://raw.githubusercontent.com/LiLabAtVT/DeepTE/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Use pip to install required packages",
        "parent_header": [
          "Dependence and requirements",
          "Requirements"
        ],
        "type": "Text_excerpt",
        "value": "Modules can be installed using pip: pip install -r requirements.txt or pip install [module_name]  \n**Module version**  \nbiopython (1.72)  \nkeras (2.2.4)  \ntensorflow (1.14.0)  \nnumpy (1.16.0)  \nsklearn (0.24.2) (It is used for the training example)  \n"
      },
      "source": "https://raw.githubusercontent.com/LiLabAtVT/DeepTE/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "type": "Text_excerpt",
        "value": "usage:\n**DeepTE**\nDeepTE.py [-h] required: [-d working_dir][-o output_dir]\n                         [-i ipt_seq][-sp sp_type]\n                         ([-m model_name]|[-m_dir model_dir])\n               optional: [-modify domain_file]\n                         [-fam te_fam][-UNS yes][-prop_thr value]\n\narguments:\n-h, --help        Show this help message and exit.\n\n-d                Working directory to store intermediate files of each step. \n                  Default: ./.\n\n-o                Output directory to store the output files. \n                  Default: ./.\n\n-i                Input sequences that are unknown TE or DNA sequences.\n\n-sp               P or M or F or O. P:Plants, M:Metazoans, F:Fungi, and O: Others.\n\n-m                Provide one of model names: \n                  '-m P' or '-m M' or '-m F' or '-m O' or '-m U'.\n                  This argument will directly download the model dir.\n                  Users do not need to initiate '-m_dir'.\n                  If users do not want to directly download model, please use '-m_dir', but users need to download model directory by themselves.\n\n-m_dir            Provide model_dir that could be downloaded from website (optional requirements). \n                  If users set -UNS yes, please provide UNS_model directory that can be downlowed in the above link.\n\n-fam              Provide TE family name for the input te sequence\n                  ClassI: the input sequence is ClassI TEs\n                  ClassII: the input sequence is ClassII subclass1 TEs\n                  LTR: the input sequence is LTR TEs\n                  nLTR: the input sequence is nLTR TEs\n                  LINE: the input sequence is LINE TEs\n                  SINE: the input sequence is SINE TEs\n                  Domain: the input sequence is Class II subclass1 TEs with specified super families\n                  If users do not initiate '-fam', DeepTE will regard your input sequences are unknown TEs.\n\n-modify           If set this argument, users need to provide domain file generated from another script: DeepTE_domain.py.\n\n-UNS              If set this argument, users need change the -i to the the DNA sequences; \n                  This function will classify the sequences into TEs, CDS, or Intergenic sequences; -sp and -fam do not need to provide.\n                  Note: this model is used for plants rather than metazoans and fungi.\n\n-prop_thr         Specify a probability threshold to annotate TE.\n                  For example: a TE has a probability (0.6) to be ClassI.\n                  If users set 0.7 as the threshold, \n                  this TE will be labeled as 'unknown', Default: 0.6.\n\n\n**DeepTE_domain**\nDeepTE_domain.py [-h] required: [-d working_dir][-o output_dir]\n                                [-i ipt_seq][-s supfile_dir]\n                                [--hmmscan hmmscan]\narguments:\n-h, --help        Show this help message and exit.\n\n-d                Working directory to store intermediate files of each step. \n                  Default: ./.\n\n-o                Output directory to store the output files. \n                  Default: ./.\n\n-i                Input sequences that are unknown TE sequences.\n\n-s                Provide supplementary dir that contains required files.\n\n--hmmscan         File path to hmmscan executable, Default: /usr/bin/hmmscan\"\n\n\n```\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/LiLabAtVT/DeepTE/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Examples (Predicting)",
        "type": "Text_excerpt",
        "value": "**Input data**  \nSequence data (fasta format)  \n\n**Output data**  \nWorking directory  \na. opt_input_CNN_data.txt (input data that is transfered from user provided input data)  \nb. store_temp_opt_dir (a directory contains prediction results for each TE group; b this directory also contains probability of each family the input TE belongs to)\nc. download_X_model_dir (store downloaded models. X represents P, M, F, O, or U)\n\nOutput directory  \na. opt_DeepTE.txt (a txt file with two columns. first column: original name; second column: predicted name with DeepTE)  \nb. opt_DeepTE.fasta (a fasta file with new predicted TE name)  \n\n**Command**\n- [ ] Classify unknown TEs  \nDeepTE.py -d working_dir -o output_dir -i input_seq.fasta -sp P -m P  \n**Or**  \nDeepTE.py -d working_dir -o output_dir -i input_seq.fasta -sp P -m_dir Plants_model/\n\n- [ ] Classify Class I TEs  \nDeepTE.py -d working_dir -o output_dir -i input_seq.fasta -sp P -m P -fam ClassI  \n**Or**  \nDeepTE.py -d working_dir -o output_dir -i input_seq.fasta -sp P -m_dir Plants_model/ -fam ClassI\n\n- [ ] Classify Class II subclass1 TEs  \nDeepTE.py -d working_dir -o output_dir -i input_seq.fasta -sp P -m P -fam ClassII  \n**Or**  \nDeepTE.py -d working_dir -o output_dir -i input_seq.fasta -sp P -m_dir Plants_model/ -fam ClassII  \n\n- [ ] Classify LTR TEs  \nDeepTE.py -d working_dir -o output_dir -i input_seq.fasta -sp P -m P -fam LTR  \n**Or**  \nDeepTE.py -d working_dir -o output_dir -i input_seq.fasta -sp P -m_dir Plants_model/ -fam LTR\n\n- [ ] Classify nLTR TEs  \nDeepTE.py -d working_dir -o output_dir -i input_seq.fasta -sp P -m P -fam nLTR  \n**Or**  \nDeepTE.py -d working_dir -o output_dir -i input_seq.fasta -sp P -m_dir Plants_model/ -fam nLTR\n\n- [ ] Classify LINE TEs  \nDeepTE.py -d working_dir -o output_dir -i input_seq.fasta -sp P -m P -fam LINE  \n**Or**  \nDeepTE.py -d working_dir -o output_dir -i input_seq.fasta -sp P -m_dir Plants_model/ -fam LINE\n\n- [ ] Classify SINE TEs  \nDeepTE.py -d working_dir -o output_dir -i input_seq.fasta -sp P -m P -fam SINE  \n**Or**  \nDeepTE.py -d working_dir -o output_dir -i input_seq.fasta -sp P -m_dir Plants_model/ -fam SINE\n\n- [ ] Classify TEs into MITEs and nMITEs  \nDeepTE.py -d working_dir -o output_dir -i input_seq.fasta -sp P -m P -fam Domain  \n**Or**  \nDeepTE.py -d working_dir -o output_dir -i input_seq.fasta -sp P -m_dir Plants_model/ -fam Domain  \n\n- [ ] Classify Unknown sequences into TEs, Coding sequences, or Intergenic sequences  \nDeepTE.py -d working_dir -o output_dir -i input_seq.fasta -m U -UNS yes  \n**Or**  \nDeepTE.py -d working_dir -o output_dir -i input_seq.fasta -m_dir UNS_model/ -UNS yes  \n\n**DeepTE_domain.py**  \n**Input data**  \nSequence data (fasta format)  \n**Command**  \nDeepTE_domain.py -d working_dir -o output_dir -i input_seq.fasta -s supfile_dir --hmmscan   Path/to/hmmscan  \n**Output data**  \na. TE domain file. (first column: orignial name; second column: domain information for different open reading frames)\n\n"
      },
      "source": "https://raw.githubusercontent.com/LiLabAtVT/DeepTE/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Examples (Training)",
        "type": "Text_excerpt",
        "value": "**Input data**  \nipt_shuffle_All_CNN_data.txt (TEname,sequence_information)  \ninput_store_class_report_dir (output directory)  \n\n**Command**  \npipeline_example_training.py \\    \ninput_dir/ipt_shuffle_All_CNN_data.txt \\   \ninput_store_class_report_dir  \n\n**Output data**  \na. All_model.h5  \nb. All_class_report.txt  \n\n"
      },
      "source": "https://raw.githubusercontent.com/LiLabAtVT/DeepTE/master/README.md",
      "technique": "header_analysis"
    }
  ]
}