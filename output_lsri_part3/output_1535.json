{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/skalyaanamoorthy/PoseFilter"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-06-22T19:04:16Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-06-06T22:57:03Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Tab 1 Description",
        "parent_header": [
          "PoseFilter User Guide",
          "PoseFilter Use",
          "GUI Input (RMS/Interaction Fingerprints)"
        ],
        "type": "Text_excerpt",
        "value": "![Input Type 1](https://github.com/skalyaanamoorthy/PoseFilter/blob/master/Snapshots/GUITab1.jpg)\n\nThe first tab (File input - type 1) gives the option to process a folder that contains a protein file\nand ligand poses as separate files.\n1. Ensure that only the protein structure and ligand pose files are available in PyMOL compatible formats in this directory. \n2. Choose the receptor/protein structure file using the \u201cChoose a protein file\u201d option.\n3. Provide a filename identifier that corresponds to the ligand poses in the \u201cligand filename identifier\u201d box.\nNote this should match the filename of the ligand files in the folder and not the protein. For example, if the ligand poses\nare available in files named as: pose1.pdb, pose2.pdb, pose3.pdb and the protein file is named as protein.pdb,\nthe keyword \u201cpose\u201d should be used in the \u201cLigand filename identifier\u201d box.  \n4. Users can provide an output suffix for labelling purposes. This could be the protein PDB ID, for example.\nThis is optional and the box can be left blank.\n"
      },
      "source": "https://raw.githubusercontent.com/skalyaanamoorthy/PoseFilter/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Tab 2 Description",
        "parent_header": [
          "PoseFilter User Guide",
          "PoseFilter Use",
          "GUI Input (RMS/Interaction Fingerprints)"
        ],
        "type": "Text_excerpt",
        "value": "![Input Type 2](https://github.com/skalyaanamoorthy/PoseFilter/blob/master/Snapshots/GUITab2.jpg)\n\nThe second tab (File input - type 2) allows the input of protein + ligand complex files.\n\n1. A directory containing only complex files should be selected by the user. \n2. A keyword may be chosen for the files. In the case of protein + ligand complex files labelled as complex1.pdb,\ncomplex2.pdb and complex3.pdb an appropriate keyword to use is \u201ccomplex.\u201d \n3. The ligand residue identifier refers to the three-letter code for the ligand residue name as available in the\ncomplex file. Eg., \"LIG\" or \"UNK.\"\n4. Users can provide a suffix name for labelling purposes. This could be the protein PDB ID, for example.\nThis is optional and the box can be left blank. \n"
      },
      "source": "https://raw.githubusercontent.com/skalyaanamoorthy/PoseFilter/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/skalyaanamoorthy/PoseFilter/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/skalyaanamoorthy/PoseFilter/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "skalyaanamoorthy/PoseFilter"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PoseFilter User Guide"
      },
      "source": "https://raw.githubusercontent.com/skalyaanamoorthy/PoseFilter/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/skalyaanamoorthy/PoseFilter/master/Snapshots/GUITab1.jpg"
      },
      "source": "https://raw.githubusercontent.com/skalyaanamoorthy/PoseFilter/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/skalyaanamoorthy/PoseFilter/master/Snapshots/GUITab2.jpg"
      },
      "source": "https://raw.githubusercontent.com/skalyaanamoorthy/PoseFilter/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "PoseFilter User Guide",
        "type": "Text_excerpt",
        "value": "PoseFilter is a PyMOL plugin and assists in the analysis of docked ligands through identification of unique\noligomeric poses by utilizing RMSD and interaction fingerprint analysis methods.  \n"
      },
      "source": "https://raw.githubusercontent.com/skalyaanamoorthy/PoseFilter/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Windows Installation",
        "parent_header": [
          "PoseFilter User Guide",
          "Installing Open-Source PyMOL"
        ],
        "type": "Text_excerpt",
        "value": "1. Anaconda 3 can be installed from the website: `https://www.anaconda.com/products/individual`. During GUI installation,\nif anaconda is added to the path (through the checkbox), allowing for the `conda` keyword to be used in the command\nprompt, step 2 may be skipped.\n2. To use conda commands in the Windows command prompt, pathways to Anaconda must be added to the path variable. Search\nWindows for \"edit the system environment variables,\" under \"system properties\" one can choose \"Environment Variables\"\nselect \"Path\" then \"Edit...\" and add the following paths.\nAdd the Anaconda3 folder, and Anaconda3\\Scripts to the path variable, which should look similar to:\n`C:\\tools\\Anaconda3\\Scripts`\n`C:\\tools\\Anaconda3`\n3. Close and then open the command prompt again, selecting to \"run as administrator.\" Typing \"conda\" into the command line\nwill give confirmation that Anaconda3 was installed correctly and the paths were added. A menu with commands should appear.\n4. In this command prompt, type the following:\n`conda create -n pymol python=3.7 rdkit=2020.03.3.0 matplotlib seaborn pip numpy conda-forge::pmw tpeulen::pymol-open-source scikit-learn git `\n5. Activate the anaconda environment.\n`conda activate pymol`\n6. Install oddt.\n`pip install git+git://github.com/oddt/oddt`\n\n7. Open source PyMOL can now be opened through the activated anaconda directory. Type pymol into the command line to \nopen the open source program.\n8. If the command line is closed, `conda activate pymol` needs to be typed in again before `pymol` to open the program.\nAfter activating the environment, the paths can be added to the environment variables, as Anaconda3 was. Type `path` into the command\nprompt, and then copy and paste the links into the path environment variable. Once this is done, `pymol` can be used \nin the command prompt to open the program.\n9. If there are any package errors, oddt can be downgraded to the corresponding build:\n\n`pip install git+git://github.com/oddt/oddt.git@88a5481e0a74348df5f2a9b27132148a3d5b94c1`\n\n"
      },
      "source": "https://raw.githubusercontent.com/skalyaanamoorthy/PoseFilter/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Linux Installation",
        "parent_header": [
          "PoseFilter User Guide",
          "Installing Open-Source PyMOL"
        ],
        "type": "Text_excerpt",
        "value": "1. Ensure that Anaconda3 is installed, if not then install it through the following link:\nhttps://docs.anaconda.com/anaconda/install/linux/\n2. Open a terminal in the Anaconda3 directory named \"envs.\" Use the following command to create an environment\nnamed pymol that contains the proper packages:\n   \n`conda create -n pymol python=3.7 rdkit=2020.03.3 matplotlib seaborn pip numpy conda-forge::pmw tpeulen::pymol-open-source scikit-learn git`\n\n2. Activate the anaconda environment.\n`source activate pymol`\n\n3. Install oddt.\n`pip install git+git://github.com/oddt/oddt`\n\n4. Launch pymol by typing `pymol` in the terminal. If an error occurs, try to install some additional requirements.\nEnsure to run as root: https://pymolwiki.org/index.php/Linux_Install. This is done using an activated environment.\nIf the terminal is closed, pymol needs to be reactivated in order to be opened again.\n   \nIf there are any package errors, oddt can be downgraded to the corresponding build:\n   \n`pip install git+git://github.com/oddt/oddt.git@88a5481e0a74348df5f2a9b27132148a3d5b94c1`\n\n"
      },
      "source": "https://raw.githubusercontent.com/skalyaanamoorthy/PoseFilter/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "MacOS Installation",
        "parent_header": [
          "PoseFilter User Guide",
          "Installing Open-Source PyMOL"
        ],
        "type": "Text_excerpt",
        "value": "Installation of all required packages using 'Homebrew' is recommended in MacOS.\n\n1. Install open-source-pymol using homebrew.\n   \n`brew install brewsci/bio/pymol`\n\n2. Need to check version of python that homebrew is using. For the following steps, ensure that the homebrew python path is being referenced.\n   Substitute python3 for the homebrew python pathway (eg., path_to_homebrew_python -m pip install \\<package\\>) or assign homebrew python as an alias to python3 in the bash_profile before installing the\n   additional packages.\n3. Install additional packages:\n   \n    `python3 -m pip install matplotlib`\n   \n    `python3 -m pip install seaborn`\n   \n    `python3 -m pip install git+git://github.com/oddt/oddt`\n   \n\n4. Install rdkit using homebrew:\n   \n    `brew tap rdkit/rdkit`\n   \n    `brew install rdkit`\n   \n5. Launch pymol by typing `pymol` in the terminal.\n6. If there are any package errors, oddt can be downgraded to the corresponding build:\n   \n`pip install git+git://github.com/oddt/oddt.git@88a5481e0a74348df5f2a9b27132148a3d5b94c1`\n   \n7. An alternative is to build using conda and the linux instructions.\nTroubleshooting: ensure that dependencies are installed though the wiki: https://pymolwiki.org/index.php/MAC_Install.\nIf no module named or initialized failed errors occur, try installing through: https://github.com/schrodinger/pymol-open-source\nand running `python setup.py install`.\n"
      },
      "source": "https://raw.githubusercontent.com/skalyaanamoorthy/PoseFilter/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing the PoseFilter Plugin",
        "parent_header": [
          "PoseFilter User Guide"
        ],
        "type": "Text_excerpt",
        "value": "   1. Ensure that open-source PyMOL is installed (as outlined above).\n   2. The PoseFilter files can be obtained from this repository. Download and extract the files. For simplicity, ensure\n      that the extracted folder is named `PoseFilter`\n   3. In PyMOL, click on \"Plugin\" at the top bar, then \"Plugin Manager.\" Select the tab \"Install New Plugin\" and then\n     under \"Install from local file\" select \"choose file...\". Find the downloaded GitHub folder and select the\n      \"\\_\\_init\\_\\_.py\" file from the PoseFilter folder, then \"Open\" and press \"Okay\" twice. \n"
      },
      "source": "https://raw.githubusercontent.com/skalyaanamoorthy/PoseFilter/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "GUI Input (RMS/Interaction Fingerprints)",
        "parent_header": [
          "PoseFilter User Guide",
          "PoseFilter Use"
        ],
        "type": "Text_excerpt",
        "value": "In the PyMOL window, the PoseFilter plugin can be opened from the \u2018Plugins\u2019 tab at the top of the page.\nThere are currently two types of input options are available and are given as two separate tabs in the\nPoseFilter GUI panel.\nPlease use one of these tab options at a time to choose your input files.\n"
      },
      "source": "https://raw.githubusercontent.com/skalyaanamoorthy/PoseFilter/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "RMS Analysis",
        "parent_header": [
          "PoseFilter User Guide",
          "Parameters"
        ],
        "type": "Text_excerpt",
        "value": "1. The RMS similarity cutoff (> 0) is the value used for sorting the poses as \u2018Similar\u2019 and \u2018Unique\u2019. The default\nauto-filled value is 2.0 \u00c5, and this value can be changed by the user.  \n2. The \u201calign only \u03b1 carbon\u201d box can be checked to just align this atom for every rotation. By default, the\nprotein backbone atoms are used for fitting the receptor for every rotation. This option is recommended when\nflexible/multiple receptor docking was used.\n3. There is a checkbox called \"nonidentical chains.\" If this box is checked, the program will find which chains are\n identical (number and order of amino acids), and perform the rotations based on this. This program makes the\n assumption that chains are identical because otherwise one or two amino acid substitutions would result in chains\n labelled\n as \"nonidentical.\" The rotation choice is left up to the user. \n3. The \u201cCalculate pose similarity with RMS\u201d button will run the RMSD-based calculations. The outputs, RMS.csv file\nand RMS.png (the heatmap file) will be placed in a sub-folder named \u2018RMS\u2019. Pose files are initially organized into\n PDBLigand and PDBComplex folders, for organizational purposes. Then pose files are sorted and moved to \u2018Unique\u2019 and\n \u2018Similar\u2019 folders based on the user defined cut-off values. There is also a \u2018Similar.csv\u2019 file that is generated in\n the \u2018Similar\u2019 folder, which shows the similar poses\u2019 relationship to each other. \n4. Depending on the number of folders available, the RMS analysis will take a minute or so, but more time with\nincreasing poses and a larger n-mer. The RMS analysis is finished once \u201cRMS analysis complete\u201d is displayed in the\nPyMOL command window. \n"
      },
      "source": "https://raw.githubusercontent.com/skalyaanamoorthy/PoseFilter/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Interaction Fingerprint Analysis",
        "parent_header": [
          "PoseFilter User Guide",
          "Parameters"
        ],
        "type": "Text_excerpt",
        "value": "1. The Fingerprint similarity cutoff (0-1) is the value used for sorting the files as 'Similar' and 'Unique'.\nThe default auto-filled value is 0.5, but this value can be changed by the user.  \n2. Checkboxes are available to select the type of interaction fingerprints analysis, 'Simple Interaction' and 'SPLIF'.\nBoth or one can be selected from these options. If none are selected, the \u2018Simple Interaction\u2019 fingerprint will be generated. \n3. The \u201cProtein-ligand interaction output\u201d checkbox can be selected, to give a text-based interaction summary, which\nincludes protein and ligand data. \n4. The \u201ccalculate pose similarity with interaction fingerprints\u201d button will run the calculations, and generate the\nanalysis output, which is placed in a sub-folder named \u2018Fingerprint\u2019. \n5. 'Fingerprint.csv' and 'Fingerprint.png' files are generated. Pose files are sorted and moved to 'Unique' and\n'Similar' folders based on the user defined cut-off value.  As mentioned before, \u2018Similar.csv\u2019 file will be\ngenerated in the \u2018Similar\u2019 folder, which shows the similar poses\u2019 relationship to each other. \n6. Once the button has been pressed the calculation will take a few minutes to complete. The \"Fingerprint analysis\ncomplete\u201d will be displayed in the PyMOL command window once this process has finished.\n   \n"
      },
      "source": "https://raw.githubusercontent.com/skalyaanamoorthy/PoseFilter/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Command Line Input",
        "parent_header": [
          "PoseFilter User Guide",
          "Parameters"
        ],
        "type": "Text_excerpt",
        "value": "1. After following the installation instructions, PoseFilter can be used through the command line as well. The following\ncommands should be typed into the command line after a new PyMOL session is opened. The package name can be checked in \"Plugin\" -> \"Plugin Manager.\"\nIf the package name is not \"PoseFilter,\" please use the appropriate keywords in the following commands. \n   \n`from pmg_tk.startup.PoseFilter import LigandRMSProcess`\n\n`from pmg_tk.startup.PoseFilter import ComplexRMSProcess`\n\n`from pmg_tk.startup.PoseFilter import LigandFP`\n\n`from pmg_tk.startup.PoseFilter import ComplexFP`\n\n"
      },
      "source": "https://raw.githubusercontent.com/skalyaanamoorthy/PoseFilter/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Input Type 1 (Ligand)",
        "parent_header": [
          "PoseFilter User Guide",
          "Parameters",
          "Interaction Fingerprint"
        ],
        "type": "Text_excerpt",
        "value": "pfile: the full pathway for the protein file, which is in the same directory as the ligand pose files.\n\nkeyword: keyword matching the ligand files (for pose1.pdb, pose2.pdb, pose3.pdb), keyword would be `pose`.\n\nlabel: PDB code, or any kind of label to label the RMS/Fingerprint files.\n\nRMS_cutoff: The RMS similarity cutoff (> 0) is the value used for sorting the poses as \u2018Similar\u2019 and \u2018Unique\u2019. The default\nauto-filled value is 2.0 \u00c5, and this value can be changed by the user.  \n\nalpha: boolean value (0 or 1), 1 indicating that only the \u03b1 carbon will be aligned for the rotations.\n\nnonidentical: boolean value (0 or 1), 1 indicating that the chains are nonidentical, where a check will be made, and\nrotations will only occur for exactly identical chains (residue count and type being equal).\n\nSyntax:\n\n`LigandRMSProcess(pfile, keyword, label, RMS_Cutoff, alpha, nonidentical)`\n\nExample:\n\n`LigandRMSProcess('/home/.../PoseFilter/Dimer_Example/Tab1_input/1FX9.pdbqt', 'pose', '', 2.0, 0, 0)`\n\n"
      },
      "source": "https://raw.githubusercontent.com/skalyaanamoorthy/PoseFilter/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Input Type 2 (Complex)",
        "parent_header": [
          "PoseFilter User Guide",
          "Parameters",
          "Interaction Fingerprint"
        ],
        "type": "Text_excerpt",
        "value": "folder_dir: The directory that contains the protein complexes.\n\nkeyword: keyword matching the complex files (for complex1.pdb, complex2.pdb, complex3.pdb), keyword would be `complex`.\n\nlabel: PDB code, or any kind of label to label the RMS/Fingerprint files.\n\nResId: The ligand residue identifier refers to the three-letter code for the ligand residue name as available in the\ncomplex file. Eg., \"LIG\" or \"UNK.\"\n\ncrystal_struct: Full pathway of a crystal structure (protein with ligand), which will be included into the analysis.\n\nRMS_cutoff: The RMS similarity cutoff (> 0) is the value used for sorting the poses as \u2018Similar\u2019 and \u2018Unique\u2019. The default\nauto-filled value is 2.0 \u00c5, and this value can be changed by the user.  \n\nalpha: Boolean value (0 or 1), 1 indicating that only the \u03b1 carbon will be aligned for the rotations.\n\nnonidentical: Boolean value (0 or 1), 1 indicating that the chains are nonidentical, where a check will be made, and\nrotations will only occur for exactly identical chains (residue count and type being equal).\n\nSyntax:\n\n`ComplexRMSProcess(folder_dir, keyword, label, ResId, crystal_struct, RMS_Cutoff, alpha, nonidentical)`\n\nExample:\n\n`ComplexRMSProcess('/home/.../PoseFilter/Dimer_Example/Tab2_input', 'pose', '', 'MJI', '', 2.0, 0,0)`\n"
      },
      "source": "https://raw.githubusercontent.com/skalyaanamoorthy/PoseFilter/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/skalyaanamoorthy/PoseFilter/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PoseFilter"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "skalyaanamoorthy"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 57738,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/skalyaanamoorthy/PoseFilter/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 05:22:00",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "GUI Input (RMS/Interaction Fingerprints)",
        "parent_header": [
          "PoseFilter User Guide",
          "PoseFilter Use"
        ],
        "type": "Text_excerpt",
        "value": "In the PyMOL window, the PoseFilter plugin can be opened from the \u2018Plugins\u2019 tab at the top of the page.\nThere are currently two types of input options are available and are given as two separate tabs in the\nPoseFilter GUI panel.\nPlease use one of these tab options at a time to choose your input files.\n"
      },
      "source": "https://raw.githubusercontent.com/skalyaanamoorthy/PoseFilter/master/README.md",
      "technique": "header_analysis"
    }
  ]
}