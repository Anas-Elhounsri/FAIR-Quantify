{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/TearsWaiting/MIMML"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-05-25T08:58:51Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-08-19T10:32:26Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "The implement of MIMML in paper: Accelerating Bioactive Peptides Discovery via Mutual Information based Meta-learning"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9144091208174066,
      "result": {
        "original_header": "MIMML",
        "type": "Text_excerpt",
        "value": "The implement of MIMML in paper: Accelerating Bioactive Peptides Discovery via Mutual Information based Meta-learning. \n"
      },
      "source": "https://raw.githubusercontent.com/TearsWaiting/MIMML/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/TearsWaiting/MIMML/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/TearsWaiting/MIMML/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "TearsWaiting/MIMML"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MIMML"
      },
      "source": "https://raw.githubusercontent.com/TearsWaiting/MIMML/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/TearsWaiting/MIMML/main/main/run.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.9999993023618163,
      "result": {
        "original_header": "MIMML",
        "type": "Text_excerpt",
        "value": "- **We provide the implements of  main experiments of our papers, which could run with the following commands.**\n- **Users can execute the codes using the shell command or execute Python scripts directly. The latter one is recommended since it enable users to customize the hyper-parameters.**\n- **User should download the project and go to the directory: '../MIMML/main/' and run script test to check if the code works properly.** \n"
      },
      "source": "https://raw.githubusercontent.com/TearsWaiting/MIMML/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999994482994724,
      "result": {
        "original_header": "script test",
        "type": "Text_excerpt",
        "value": "shell command:\n```shell\n./run.sh script-test\n```\nor python script:\n```shell\npython run.py -task-type-run=\"script-test\"\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/TearsWaiting/MIMML/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999711949131039,
      "result": {
        "original_header": "pretrain",
        "type": "Text_excerpt",
        "value": "shell command:\n```shell\n./run.sh pretrain\n```\npython script:\n```shell\npython run.py -task-type-run=\"pretrain\"\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/TearsWaiting/MIMML/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999915483354621,
      "result": {
        "original_header": "meta train",
        "type": "Text_excerpt",
        "value": "shell command:\n```shell\n./run.sh meta-train\n```\npython script:\n```shell\npython run.py -task-type-run=\"meta-train\"\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/TearsWaiting/MIMML/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.990825955905394,
      "result": {
        "original_header": "meta train with pretrained backbone",
        "type": "Text_excerpt",
        "value": "shell command:\n```shell\n./run.sh meta-train-with-pretrain\n```\npython script:\n```shell\npython run.py -task-type-run=\"meta-train-with-pretrain\" -path-params='../result/default_pretrain/model/CNN, Epoch[20.000].pt'\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/TearsWaiting/MIMML/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999660173612104,
      "result": {
        "original_header": "meta test",
        "type": "Text_excerpt",
        "value": " shell command:\n```shell\n./run.sh meta-test\n```\npython script:\n```shell\npython run.py -task-type-run=\"meta-test\" -path-params='../result/pretrain_meta_train_BPD_ALL_RT_MIMML/model/MIMML, Epoch[250.000].pt' -path-config='../result/pretrain_meta_train_BPD_ALL_RT_MIMML/config.pkl'\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/TearsWaiting/MIMML/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9975141846422267,
      "result": {
        "original_header": "meta finetune",
        "type": "Text_excerpt",
        "value": " shell command:\n```shell\n./run.sh meta-finetune\n```\npython script:\n```shell\npython run.py -task-type-run=\"meta-finetune\" -path-params=\"../result/pretrain_meta_train_BPD_ALL_RT_MIMML/model/MIMML, Epoch[250.000].pt\"\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/TearsWaiting/MIMML/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9995838717627514,
      "result": {
        "original_header": "transductive inference",
        "type": "Text_excerpt",
        "value": " shell command:\n```shell\n./run.sh meta-inference\n```\npython script:\n```shell\npython run.py -task-type-run=\"meta-inference\" -path-params='../result/pretrain_meta_train_BPD_ALL_RT_MIMML/model/MIMML, Epoch[250.000].pt' -path-config='../result/pretrain_meta_train_BPD_ALL_RT_MIMML/config.pkl'\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/TearsWaiting/MIMML/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999999991896402,
      "result": {
        "original_header": "Optional hyper-parameters",
        "type": "Text_excerpt",
        "value": "We can use run the following code to check almost optional hyper-parameters:\n```shell\npython run.py -h\n```\nUsage:\n```shell\nusage: run.py [-h] [-task-type-run TASK_TYPE_RUN] [-path-config PATH_CONFIG]\n              [-learn-name LEARN_NAME] [-process-name PROCESS_NAME]\n              [-save-best SAVE_BEST] [-cuda CUDA] [-device DEVICE]\n              [-seed SEED] [-num_workers NUM_WORKERS]\n              [-path-train-data PATH_TRAIN_DATA]\n              [-path-test-data PATH_TEST_DATA]\n              [-path-token2index PATH_TOKEN2INDEX]\n              [-path-meta-dataset PATH_META_DATASET]\n              [-path-params PATH_PARAMS] [-path-save PATH_SAVE]\n              [-model-save-name MODEL_SAVE_NAME]\n              [-save-figure-type SAVE_FIGURE_TYPE] [-num-class NUM_CLASS]\n              [-dataset DATASET] [-max-len MAX_LEN]\n              [-interval-log INTERVAL_LOG] [-interval-valid INTERVAL_VALID]\n              [-interval-test INTERVAL_TEST]\n              [-valid-start-epoch VALID_START_EPOCH]\n              [-valid-interval VALID_INTERVAL] [-valid-draw VALID_DRAW]\n              [-mode MODE] [-metric METRIC] [-threshold THRESHOLD]\n              [-backbone BACKBONE] [-if-MIM IF_MIM]\n              [-if-transductive IF_TRANSDUCTIVE]\n              [-train-iteration TRAIN_ITERATION]\n              [-valid-iteration VALID_ITERATION]\n              [-test-iteration TEST_ITERATION]\n              [-adapt-iteration ADAPT_ITERATION] [-adapt-lr ADAPT_LR]\n              [-meta-batch-size META_BATCH_SIZE] [-train-way TRAIN_WAY]\n              [-train-shot TRAIN_SHOT] [-train-query TRAIN_QUERY]\n              [-valid-way VALID_WAY] [-valid-shot VALID_SHOT]\n              [-valid-query VALID_QUERY] [-test-way TEST_WAY]\n              [-test-shot TEST_SHOT] [-test-query TEST_QUERY] [-model MODEL]\n              [-optimizer OPTIMIZER] [-loss-func LOSS_FUNC] [-epoch EPOCH]\n              [-lr LR] [-reg REG] [-alpha ALPHA] [-lamb LAMB] [-temp TEMP]\n              [-num-layer NUM_LAYER] [-num-head NUM_HEAD]\n              [-dim-feedforward DIM_FEEDFORWARD] [-dim-k DIM_K] [-dim-v DIM_V]\n              [-dim-embedding DIM_EMBEDDING] [-dropout DROPOUT]\n              [-static STATIC] [-num-filter NUM_FILTER]\n              [-filter-sizes FILTER_SIZES] [-dim-cnn-out DIM_CNN_OUT]\n              [-output-extend OUTPUT_EXTEND]\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/TearsWaiting/MIMML/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.9586660191839581,
      "result": {
        "original_header": "script test",
        "type": "Text_excerpt",
        "value": "shell command:\n```shell\n./run.sh script-test\n```\nor python script:\n```shell\npython run.py -task-type-run=\"script-test\"\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/TearsWaiting/MIMML/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9323129234497598,
      "result": {
        "original_header": "pretrain",
        "type": "Text_excerpt",
        "value": "shell command:\n```shell\n./run.sh pretrain\n```\npython script:\n```shell\npython run.py -task-type-run=\"pretrain\"\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/TearsWaiting/MIMML/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9566480204163044,
      "result": {
        "original_header": "meta train",
        "type": "Text_excerpt",
        "value": "shell command:\n```shell\n./run.sh meta-train\n```\npython script:\n```shell\npython run.py -task-type-run=\"meta-train\"\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/TearsWaiting/MIMML/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9663531360596445,
      "result": {
        "original_header": "meta train with pretrained backbone",
        "type": "Text_excerpt",
        "value": "shell command:\n```shell\n./run.sh meta-train-with-pretrain\n```\npython script:\n```shell\npython run.py -task-type-run=\"meta-train-with-pretrain\" -path-params='../result/default_pretrain/model/CNN, Epoch[20.000].pt'\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/TearsWaiting/MIMML/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9731655864774218,
      "result": {
        "original_header": "meta test",
        "type": "Text_excerpt",
        "value": " shell command:\n```shell\n./run.sh meta-test\n```\npython script:\n```shell\npython run.py -task-type-run=\"meta-test\" -path-params='../result/pretrain_meta_train_BPD_ALL_RT_MIMML/model/MIMML, Epoch[250.000].pt' -path-config='../result/pretrain_meta_train_BPD_ALL_RT_MIMML/config.pkl'\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/TearsWaiting/MIMML/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.957098958192573,
      "result": {
        "original_header": "meta finetune",
        "type": "Text_excerpt",
        "value": " shell command:\n```shell\n./run.sh meta-finetune\n```\npython script:\n```shell\npython run.py -task-type-run=\"meta-finetune\" -path-params=\"../result/pretrain_meta_train_BPD_ALL_RT_MIMML/model/MIMML, Epoch[250.000].pt\"\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/TearsWaiting/MIMML/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9475628590118934,
      "result": {
        "original_header": "transductive inference",
        "type": "Text_excerpt",
        "value": " shell command:\n```shell\n./run.sh meta-inference\n```\npython script:\n```shell\npython run.py -task-type-run=\"meta-inference\" -path-params='../result/pretrain_meta_train_BPD_ALL_RT_MIMML/model/MIMML, Epoch[250.000].pt' -path-config='../result/pretrain_meta_train_BPD_ALL_RT_MIMML/config.pkl'\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/TearsWaiting/MIMML/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9710247787815321,
      "result": {
        "original_header": "Optional hyper-parameters",
        "type": "Text_excerpt",
        "value": "We can use run the following code to check almost optional hyper-parameters:\n```shell\npython run.py -h\n```\nUsage:\n```shell\nusage: run.py [-h] [-task-type-run TASK_TYPE_RUN] [-path-config PATH_CONFIG]\n              [-learn-name LEARN_NAME] [-process-name PROCESS_NAME]\n              [-save-best SAVE_BEST] [-cuda CUDA] [-device DEVICE]\n              [-seed SEED] [-num_workers NUM_WORKERS]\n              [-path-train-data PATH_TRAIN_DATA]\n              [-path-test-data PATH_TEST_DATA]\n              [-path-token2index PATH_TOKEN2INDEX]\n              [-path-meta-dataset PATH_META_DATASET]\n              [-path-params PATH_PARAMS] [-path-save PATH_SAVE]\n              [-model-save-name MODEL_SAVE_NAME]\n              [-save-figure-type SAVE_FIGURE_TYPE] [-num-class NUM_CLASS]\n              [-dataset DATASET] [-max-len MAX_LEN]\n              [-interval-log INTERVAL_LOG] [-interval-valid INTERVAL_VALID]\n              [-interval-test INTERVAL_TEST]\n              [-valid-start-epoch VALID_START_EPOCH]\n              [-valid-interval VALID_INTERVAL] [-valid-draw VALID_DRAW]\n              [-mode MODE] [-metric METRIC] [-threshold THRESHOLD]\n              [-backbone BACKBONE] [-if-MIM IF_MIM]\n              [-if-transductive IF_TRANSDUCTIVE]\n              [-train-iteration TRAIN_ITERATION]\n              [-valid-iteration VALID_ITERATION]\n              [-test-iteration TEST_ITERATION]\n              [-adapt-iteration ADAPT_ITERATION] [-adapt-lr ADAPT_LR]\n              [-meta-batch-size META_BATCH_SIZE] [-train-way TRAIN_WAY]\n              [-train-shot TRAIN_SHOT] [-train-query TRAIN_QUERY]\n              [-valid-way VALID_WAY] [-valid-shot VALID_SHOT]\n              [-valid-query VALID_QUERY] [-test-way TEST_WAY]\n              [-test-shot TEST_SHOT] [-test-query TEST_QUERY] [-model MODEL]\n              [-optimizer OPTIMIZER] [-loss-func LOSS_FUNC] [-epoch EPOCH]\n              [-lr LR] [-reg REG] [-alpha ALPHA] [-lamb LAMB] [-temp TEMP]\n              [-num-layer NUM_LAYER] [-num-head NUM_HEAD]\n              [-dim-feedforward DIM_FEEDFORWARD] [-dim-k DIM_K] [-dim-v DIM_V]\n              [-dim-embedding DIM_EMBEDDING] [-dropout DROPOUT]\n              [-static STATIC] [-num-filter NUM_FILTER]\n              [-filter-sizes FILTER_SIZES] [-dim-cnn-out DIM_CNN_OUT]\n              [-output-extend OUTPUT_EXTEND]\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/TearsWaiting/MIMML/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/TearsWaiting/MIMML/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MIMML"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "TearsWaiting"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 234692,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 1130,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/TearsWaiting/MIMML/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "dependency",
        "parent_header": [
          "MIMML"
        ],
        "type": "Text_excerpt",
        "value": "The packages that the project depends on are listed in the file `requirements.txt`.\n\n```shell\npandas==1.2.3\ntorch==1.7.1\ntqdm==4.59.0\nseaborn==0.11.1\nnumpy==1.19.5\nlearn2learn==0.1.5\ntorchmeta==1.6.1\npynvml==8.0.4\nmatplotlib==3.3.4\nconfiguration==0.4.2\nscikit_learn==1.0\n```\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/TearsWaiting/MIMML/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 01:14:54",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Example to customize the super parameters",
        "parent_header": [
          "MIMML"
        ],
        "type": "Text_excerpt",
        "value": "We can use different combinations of hyper-parameters to train the model by specifying optional parameters. For example, we can set specific training epochs and learning rate:\n\n```shell\npython run.py -task-type-run=\"meta-train\" -epoch=22 -lr=0.0001\n```\n\n\n\nFor instance, if we run meta-train with customized hyper-parameters and the output path of the model parameters file is:\n\n```\n'../result/default_meta_train_with_pretrain/model/MIMML, Epoch[100.000].pt'\n```\n\n and the corresponding config path is:\n\n```\n'../result/default_meta_train_with_pretrain/config.pkl'\n```\n\n then we should  specify `-path-config` and `-path-params` according to the path of model parameters obtained by meta train to run meta test properly:\n\n```shell\npython run.py -task-type-run=\"meta-test\" -path-config='../result/default_meta_train_with_pretrain/config.pkl' -path-params='../result/default_meta_train_with_pretrain/model/MIMML, Epoch[250.000].pt'\n```\n\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/TearsWaiting/MIMML/main/README.md",
      "technique": "header_analysis"
    }
  ]
}