{
  "application_domain": [
    {
      "confidence": 20.6,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citing this work",
        "parent_header": [
          "EIT-Mesher"
        ],
        "type": "Text_excerpt",
        "value": "If you use this repository please cite the accompanying [JORS article](http://doi.org/10.5334/jors.321)\n\n```text\nDowrick, T., Avery, J., Faulkner, M., Holder, D. and Aristovich, K., 2020. EIT-MESHER \u2013 Segmented FEM Mesh Generation and Refinement. Journal of Open Research Software, 8(1), p.27. DOI: http://doi.org/10.5334/jors.321\n```\n"
      },
      "source": "https://raw.githubusercontent.com/EIT-team/Mesher/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/EIT-team/Mesher"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2015-07-28T15:42:17Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-12-30T11:12:53Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CGAL based FEMs for EIT from segmentation files"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9970682154980014,
      "result": {
        "original_header": "EIT-Mesher",
        "type": "Text_excerpt",
        "value": "EIT-MESHER is C++ software, based on the CGAL library, which generates high quality Finite Element Model tetrahedral meshes from binary masks of 3D volume segmentations. Originally developed for biomedical applications in Electrical Impedance Tomography (EIT) to address the need for custom, non-linear refinement in certain areas (e.g. around electrodes), EIT-MESHER can also be used in other fields where custom FEM refinement is required, such as Diffuse Optical Tomography (DOT). \n"
      },
      "source": "https://raw.githubusercontent.com/EIT-team/Mesher/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9734717941154326,
      "result": {
        "original_header": "Using the Meshes",
        "type": "Text_excerpt",
        "value": "Examples for using the EIT-MESHER outputs with common EIT and DOT solvers are given in [solvers examples](examples/solvers)\n \n"
      },
      "source": "https://raw.githubusercontent.com/EIT-team/Mesher/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/EIT-team/Mesher/wiki"
      },
      "source": "https://raw.githubusercontent.com/EIT-team/Mesher/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/EIT-team/Mesher/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/EIT-team/Mesher/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "EIT-team/Mesher"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "EIT-Mesher"
      },
      "source": "https://raw.githubusercontent.com/EIT-team/Mesher/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/EIT-team/Mesher/master/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/EIT-team/Mesher/master/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/EIT-team/Mesher/master/examples/run_examples.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/EIT-team/Mesher/master/examples/brain/figures/brain_PV.png"
      },
      "source": "https://raw.githubusercontent.com/EIT-team/Mesher/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/EIT-team/Mesher/master/examples/brain/figures/brain_PV.png"
      },
      "source": "https://raw.githubusercontent.com/EIT-team/Mesher/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Install container",
        "parent_header": [
          "EIT-Mesher",
          "Docker instructions (for Ubuntu 19&amp;20+, macOS)"
        ],
        "type": "Text_excerpt",
        "value": "The docker container can be obtained using two different methods:\n\n* Build container from source (`mesher` is a name of your choice):\n\n```bash\ndocker build -t mesher .\n```\n\n* Pull image directly from dockerhub without having to build, renaming the container to `mesher` (or name of your choice) :\n\n```bash\ndocker pull doctorjimbles/eit-mesher\ndocker image tag doctorjimbles/eit-mesher:latest mesher:latest\n```\n"
      },
      "source": "https://raw.githubusercontent.com/EIT-team/Mesher/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1.0,
      "result": {
        "original_header": "Build instructions (tested on Ubuntu 16, 17, 18 and WSL 1&amp;2)",
        "type": "Text_excerpt",
        "value": "* Install dependencies\n```bash\nsudo apt-get install build-essential cmake libcgal-dev libcgal-qt5-dev libglu1-mesa libxi-dev libxmu-dev libglu1-mesa-dev\n```\n* Clone repository\n```bash\ngit clone https://github.com/EIT-team/Mesher.git\n```\n* Make build & output directories\n```bash\ncd Mesher\nmkdir build\nmkdir output\n```\n* Compile\n```bash\ncd build\ncmake ..\nmake\n```\n* Test\n```bash\ncd ../test/\n./run_tests\n```\n* Run mesher ( from /Mesher root directory)\n```bash\nUsage:\n./bin/mesher -i INPUT_INR -e INPUT_ELECTRODES -p INPUT_PARAMETERS\n        -i input image file\n        -e electrode position file\n        -p parameter file\n        -o output mesh name (default = new_mesh)\n        -d output directory (default = output/)\n```\nExample:\n```bash\n./bin/mesher -i inputs/input.inr -e inputs/Electrodes.txt -p inputs/params.txt\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/EIT-team/Mesher/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999766295447079,
      "result": {
        "original_header": "Docker instructions (for Ubuntu 19&amp;20+, macOS)",
        "type": "Text_excerpt",
        "value": "EIT-MESHER can be built in a container to install on newer Linux installations. Windows users require WSL2 for docker to work.\n \n"
      },
      "source": "https://raw.githubusercontent.com/EIT-team/Mesher/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8076223434698551,
      "result": {
        "original_header": "EIT-Mesher",
        "type": "Text_excerpt",
        "value": "<img src = \"./examples/brain/figures/brain_PV_HR.png\" alt=\"Rat Brain Mesh\" width = 600> \n"
      },
      "source": "https://raw.githubusercontent.com/EIT-team/Mesher/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.801784244012295,
      "result": {
        "original_header": "Build instructions (tested on Ubuntu 16, 17, 18 and WSL 1&amp;2)",
        "type": "Text_excerpt",
        "value": "* Install dependencies\n```bash\nsudo apt-get install build-essential cmake libcgal-dev libcgal-qt5-dev libglu1-mesa libxi-dev libxmu-dev libglu1-mesa-dev\n```\n* Clone repository\n```bash\ngit clone https://github.com/EIT-team/Mesher.git\n```\n* Make build & output directories\n```bash\ncd Mesher\nmkdir build\nmkdir output\n```\n* Compile\n```bash\ncd build\ncmake ..\nmake\n```\n* Test\n```bash\ncd ../test/\n./run_tests\n```\n* Run mesher ( from /Mesher root directory)\n```bash\nUsage:\n./bin/mesher -i INPUT_INR -e INPUT_ELECTRODES -p INPUT_PARAMETERS\n        -i input image file\n        -e electrode position file\n        -p parameter file\n        -o output mesh name (default = new_mesh)\n        -d output directory (default = output/)\n```\nExample:\n```bash\n./bin/mesher -i inputs/input.inr -e inputs/Electrodes.txt -p inputs/params.txt\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/EIT-team/Mesher/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/EIT-team/Mesher/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "cgal, electrical-impedance-tomography, meshes, meshing, segmentation"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "BSD 3-Clause \"New\" or \"Revised\" License",
        "spdx_id": "BSD-3-Clause",
        "type": "License",
        "url": "https://api.github.com/licenses/bsd-3-clause",
        "value": "https://api.github.com/licenses/bsd-3-clause"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Mesher"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "EIT-team"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 512443,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "MATLAB",
        "size": 40160,
        "type": "Programming_language",
        "value": "MATLAB"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 10912,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 1446,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/EIT-team/Mesher/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Jimbles",
          "type": "User"
        },
        "date_created": "2020-09-23T18:38:56Z",
        "date_published": "2020-09-30T13:23:42Z",
        "description": "# EIT Mesher\r\n\r\nInitial release with JORS article. Can be built from source or use docker container\r\n",
        "html_url": "https://github.com/EIT-team/Mesher/releases/tag/v1.0",
        "name": "Initial release",
        "release_id": 31991248,
        "tag": "v1.0",
        "tarball_url": "https://api.github.com/repos/EIT-team/Mesher/tarball/v1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/EIT-team/Mesher/releases/31991248",
        "value": "https://api.github.com/repos/EIT-team/Mesher/releases/31991248",
        "zipball_url": "https://api.github.com/repos/EIT-team/Mesher/zipball/v1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running Mesher from container",
        "parent_header": [
          "EIT-Mesher",
          "Docker instructions (for Ubuntu 19&amp;20+, macOS)"
        ],
        "type": "Text_excerpt",
        "value": "To test if it is working run the container with no inputs, this will call the mesher with defaults which runs the single example included in the container:\n\n```bash\ndocker run --rm mesher\n```\n\nThe `--rm` flag removes the container after its done to prevent having lots of unnecessary container IDs.\n\nThe mesher can then be called with the parameter arguments as normal **Note** these are files *inside* the container.\n\n```bash\ndocker run --rm mesher -i inputs/input.inr -e inputs/Electrodes.txt -p inputs/params.txt\n```\n\n* Using your own data - mounting volumes\n\nThe container has two **root** directories `/in` and `/out` which can be mounted as volumes to map to directories on the host using the `-v` flag. So for example, if we had the `MESHER` repository in our home dir we would add the flags:\n\n```bash\n -v ~/Mesher/inputs:/in -v ~/Mesher/output:/out\n```\n\nThe mesher can then finally be called by combining the volume definitions and then directing the mesher at the new input location `/in/`. **Note** Parameters given must be with respect to the container file structure. So for example, to make the default mesh but using the inputs files in the repository on the host machine (assuming it is stored in /home/user/Mesher):\n\n```bash\ndocker run --rm  -v ~/Mesher/inputs:/in -v ~/Mesher/output:/out  mesher -i /in/input.inr -e /in/Electrodes.txt -p /in/params.txt -d /out/ -o dockertest\n```\n\nThis will result in an output mesh `dockertest` in `/home/user/Mesher/output`.\n\nTo run the NN scalp example (still assuming this repository is stored in /home/user/Mesher)\n\n```bash\ndocker run --rm  -v ~/Mesher/examples/neonatescalp/:/in -v ~/Mesher/examples/neonatescalp/output:/out  mesher -i /in/NNscalp.inr -e /in/NNscalp_elecINRpos.txt -p /in/NNscalp_param.txt -d /out/ -o dockertestNN\n```\n\n* Improving slow file write on some systems\n\nIn some systems (reported on macOS 10.15.6, Docker Desktop 2.3.0.4, Docker Engine 19.03.12) it is much slower writing files into the mapped volume. Therefore to improve performance, it is possible to call the mesher and copy the files out afterwards. To do this we remove the `--rm` flag as we want to keep it, and add the `--name` flag to give it a name that makes more sense to us. We also drop the `-v` flag for the `\\out` folder.\n\n```bash\ndocker run --name NNmesher  -v ~/Mesher/examples/neonatescalp/:/in mesher -i /in/NNscalp.inr -e /in/NNscalp_elecINRpos.txt -p /in/NNscalp_param.txt -d /out/ -o dockertestNN\n```\n\nThe mesher files can then be copied outside of the container\n\n```bash\ndocker cp NNmesher:/out ./newoutputdir\n```\n"
      },
      "source": "https://raw.githubusercontent.com/EIT-team/Mesher/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "usage",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 11:24:44",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 11
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}