{
  "application_domain": [
    {
      "confidence": 18.35,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/mhnb/CAMAMED"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-12-01T13:45:23Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-07-27T12:34:52Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A pipeline for composition-aware mapping-based analysis of metagenomic data"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9648888823210157,
      "result": {
        "original_header": "CAMAMED",
        "type": "Text_excerpt",
        "value": "```diff\n-A pipeline for composition-aware mapping-based analysis of metagenomic data\n``` \nThis pipeline can analyze metagenomic samples at both taxonomic \u200eand functional profiling levels. Using this pipeline, metagenome sequences can be mapped to non-\u200eredundant gene catalogs and the gene frequency in the samples are obtained. Cumulative sum-scaling \u200ealgorithm for compositional data analysis is used in our pipeline. Additionally, by mapping the genes to the \u200eKEGG database, annotations related to each gene can be extracted at the level of KEGG ortholog (KO) \u200egroups, Enzyme Commission (EC) numbers, and reactions. Furthermore, the pipeline enables the user to \u200eidentify potential biomarkers in case-control metagenomic samples. Using the CAMAMED pipeline, not \u200eonly one can easily analyze metagenome data at taxonomical (taxon) and functional (gene) level, but also \u200ecan go further by analyzing the potential functional differences at other functional levels, that is, KO, EC \u200enumber and reaction.\n```diff\n-To run CAMAMED, first run the following command\n-     python camamed_init\n```\n \nAlso, this software is available through two Docker images called the camamed_pipeline (without MetaPhlAn2 databases) and the camamed_pipeline_db (with MetaPhlAn2 databases) at www.hub.docker.com.\n(Please refer to https://hub.docker.com/r/camamed/camamed_pipeline_db and https://hub.docker.com/r/camamed/camamed_pipeline).\nNote: There is no need to install any software dependencies if you use the Docker image. \n"
      },
      "source": "https://raw.githubusercontent.com/mhnb/camamed/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/mhnb/camamed/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/mhnb/CAMAMED/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "mhnb/CAMAMED"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CAMAMED"
      },
      "source": "https://raw.githubusercontent.com/mhnb/camamed/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/mhnb/camamed/master/mosaik_read_aligner.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/mhnb/camamed/master/fastqc_samlpe.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/mhnb/camamed/master/metaphlan_samlpe.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/mhnb/camamed/master/sra_samlpe.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/mhnb/camamed/master/mosaik_build_ref.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/mhnb/camamed/master/seqkit_samlpe.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.9995886926106077,
      "result": {
        "original_header": "CAMAMED",
        "type": "Text_excerpt",
        "value": "Also, this software is available through two Docker images called the camamed_pipeline (without MetaPhlAn2 databases) and the camamed_pipeline_db (with MetaPhlAn2 databases) at www.hub.docker.com.\n(Please refer to https://hub.docker.com/r/camamed/camamed_pipeline_db and https://hub.docker.com/r/camamed/camamed_pipeline).\nNote: There is no need to install any software dependencies if you use the Docker image. \n"
      },
      "source": "https://raw.githubusercontent.com/mhnb/camamed/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/mhnb/CAMAMED/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2019 mhnb\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/mhnb/camamed/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CAMAMED"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "mhnb"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 300833,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 6785,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/mhnb/camamed/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 08:43:35",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ]
}