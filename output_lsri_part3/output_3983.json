{
  "application_domain": [
    {
      "confidence": 19.83,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "RippleNet"
        ],
        "type": "Text_excerpt",
        "value": "RippleNet and its application is now described in a peer-reviewed publication, which can be cited as:\n\n**RippleNet: A Recurrent Neural Network for Sharp Wave Ripple (SPW-R) Detection**\nHagen, E., Chambers, A.R., Einevoll, G.T. et al. RippleNet: a Recurrent Neural Network for Sharp Wave Ripple (SPW-R) Detection. *Neuroinform* (2021). https://doi.org/10.1007/s12021-020-09496-2\n\nBitTex format:\n```\n@Article{Hagen_2021,\n  author    = {Espen Hagen and Anna R. Chambers and Gaute T. Einevoll and Klas H. Pettersen and Rune Enger and Alexander J. Stasik},\n  journal   = {Neuroinformatics},\n  title     = {{RippleNet}: a Recurrent Neural Network for Sharp Wave Ripple ({SPW}-R) Detection},\n  year      = {2021},\n  month     = {jan},\n  doi       = {10.1007/s12021-020-09496-2},\n  publisher = {Springer Science and Business Media {LLC}},\n}\n```\n\n\nThe older preprint can be cited as:\n\n**RippleNet: A Recurrent Neural Network for Sharp Wave Ripple (SPW-R) Detection**  \nEspen Hagen, Anna R. Chambers, Gaute T. Einevoll, Klas H. Pettersen, Rune Enger, Alexander J. Stasik  \n*bioRxiv* 2020.05.11.087874; doi: https://doi.org/10.1101/2020.05.11.087874\n\nBibTex format:\n```\n@article {Hagen2020.05.11.087874,\n\tauthor = {Hagen, Espen and Chambers, Anna R. and Einevoll, Gaute T. and Pettersen, Klas H. and Enger, Rune and Stasik, Alexander J.},\n\ttitle = {RippleNet: A Recurrent Neural Network for Sharp Wave Ripple (SPW-R) Detection},\n\telocation-id = {2020.05.11.087874},\n\tyear = {2020},\n\tdoi = {10.1101/2020.05.11.087874},\n\tpublisher = {Cold Spring Harbor Laboratory},\n\tabstract = {Hippocampal sharp wave ripples (SPW-R) have been identified as key bio-markers of important brain functions such as memory consolidation and decision making. SPW-R detection typically relies on hand-crafted feature extraction, and laborious manual curation is often required. In this multidisciplinary study, we propose a novel, self-improving artificial intelligence (AI) method in the form of deep Recurrent Neural Networks (RNN) with Long Short-Term memory (LSTM) layers that can learn features of SPW-R events from raw, labeled input data. The algorithm is trained using supervised learning on hand-curated data sets with SPW-R events. The input to the algorithm is the local field potential (LFP), the low- frequency part of extracellularly recorded electric potentials from the CA1 region of the hippocampus. The output prediction can be interpreted as the time-varying probability of SPW-R events for the duration of the input. A simple thresholding applied to the output probabilities is found to identify times of events with high precision. The reference implementation of the algorithm, named {\\textquoteright}RippleNet{\\textquoteright}, is open source, freely available, and implemented using a common open-source framework for neural networks (tensorflow.keras) and can be easily incorporated into existing data analysis workflows for processing experimental data.Competing Interest StatementThe authors have declared no competing interest.},\n\tURL = {https://www.biorxiv.org/content/early/2020/05/12/2020.05.11.087874},\n\teprint = {https://www.biorxiv.org/content/early/2020/05/12/2020.05.11.087874.full.pdf},\n\tjournal = {bioRxiv}\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/espenhgn/RippleNet/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Espen Hagen and Anna R. Chambers and Gaute T. Einevoll and Klas H. Pettersen and Rune Enger and Alexander J. Stasik",
        "doi": "10.1007/s12021-020-09496-2",
        "format": "bibtex",
        "title": "{RippleNet}: a Recurrent Neural Network for Sharp Wave Ripple ({SPW}-R) Detection",
        "type": "Text_excerpt",
        "value": "@article{Hagen_2021,\n    publisher = {Springer Science and Business Media {LLC}},\n    doi = {10.1007/s12021-020-09496-2},\n    month = {jan},\n    year = {2021},\n    title = {{RippleNet}: a Recurrent Neural Network for Sharp Wave Ripple ({SPW}-R) Detection},\n    journal = {Neuroinformatics},\n    author = {Espen Hagen and Anna R. Chambers and Gaute T. Einevoll and Klas H. Pettersen and Rune Enger and Alexander J. Stasik},\n}"
      },
      "source": "https://raw.githubusercontent.com/espenhgn/RippleNet/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Hagen, Espen and Chambers, Anna R. and Einevoll, Gaute T. and Pettersen, Klas H. and Enger, Rune and Stasik, Alexander J.",
        "doi": "10.1101/2020.05.11.087874",
        "format": "bibtex",
        "title": "RippleNet: A Recurrent Neural Network for Sharp Wave Ripple (SPW-R) Detection",
        "type": "Text_excerpt",
        "url": "https://www.biorxiv.org/content/early/2020/05/12/2020.05.11.087874",
        "value": "@article{Hagen2020.05.11.087874,\n    journal = {bioRxiv},\n    eprint = {https://www.biorxiv.org/content/early/2020/05/12/2020.05.11.087874.full.pdf},\n    url = {https://www.biorxiv.org/content/early/2020/05/12/2020.05.11.087874},\n    abstract = {Hippocampal sharp wave ripples (SPW-R) have been identified as key bio-markers of important brain functions such as memory consolidation and decision making. SPW-R detection typically relies on hand-crafted feature extraction, and laborious manual curation is often required. In this multidisciplinary study, we propose a novel, self-improving artificial intelligence (AI) method in the form of deep Recurrent Neural Networks (RNN) with Long Short-Term memory (LSTM) layers that can learn features of SPW-R events from raw, labeled input data. The algorithm is trained using supervised learning on hand-curated data sets with SPW-R events. The input to the algorithm is the local field potential (LFP), the low- frequency part of extracellularly recorded electric potentials from the CA1 region of the hippocampus. The output prediction can be interpreted as the time-varying probability of SPW-R events for the duration of the input. A simple thresholding applied to the output probabilities is found to identify times of events with high precision. The reference implementation of the algorithm, named {\\textquoteright}RippleNet{\\textquoteright}, is open source, freely available, and implemented using a common open-source framework for neural networks (tensorflow.keras) and can be easily incorporated into existing data analysis workflows for processing experimental data.Competing Interest StatementThe authors have declared no competing interest.},\n    publisher = {Cold Spring Harbor Laboratory},\n    doi = {10.1101/2020.05.11.087874},\n    year = {2020},\n    elocation-id = {2020.05.11.087874},\n    title = {RippleNet: A Recurrent Neural Network for Sharp Wave Ripple (SPW-R) Detection},\n    author = {Hagen, Espen and Chambers, Anna R. and Einevoll, Gaute T. and Pettersen, Klas H. and Enger, Rune and Stasik, Alexander J.},\n}"
      },
      "source": "https://raw.githubusercontent.com/espenhgn/RippleNet/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/CINPLA/RippleNet"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-04-20T08:57:11Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-01-23T09:42:27Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Description",
        "parent_header": [
          "RippleNet"
        ],
        "type": "Text_excerpt",
        "value": "This repository contains files for RippleNet, a recurrent neural network with Long Short-Term Memory (LSTM)\nlayers for detecting sharp-wave ripples in single-channel LFP signals measured\nin hippocampus CA1.\n\nAuthor: Espen Hagen (https://github.com/espenhgn)\n\nLICENSE: https://github.com/CINPLA/RippleNet/blob/master/LICENSE\n\n[![DOI](https://zenodo.org/badge/257224892.svg)](https://zenodo.org/badge/latestdoi/257224892)\n"
      },
      "source": "https://raw.githubusercontent.com/espenhgn/RippleNet/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8166319202198024,
      "result": {
        "original_header": "Binder",
        "type": "Text_excerpt",
        "value": "Retraining networks is not recommended (no GPU access)!\n \n"
      },
      "source": "https://raw.githubusercontent.com/espenhgn/RippleNet/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.97468888077684,
      "result": {
        "original_header": "Files and folders:",
        "type": "Text_excerpt",
        "value": "- `README.md`: This file\n- `LICENSE`: License file\n- `environment.yml`: Conda environment file\n- `RippleNet_training_bidirectional.ipynb`: Jupyter notebook for training bidirectional RippleNet\n- `RippleNet_training_unidirectional.ipynb`: Notebook for training unidirectional RippleNet\n- `RippleNet_manuscript_figures.ipynb`: Notebook for generating figures 2-7 in Hagen E. et al. (2020)\n- `RippleNet_timeseries_prediction.ipynb`: Notebook\tfor generating figures 8-11 in Hagen E. et al. (2020)\n- `RippleNet_interactive_prototype.ipynb`: Notebook with user-interactive detection and rejection of ripple events\n- `trained_networks/`\n    - `ripplenet_*directional_random_seed*.h5`: trained RippleNet instances of uni- or bidirectional types\n    - `ripplenet_*directional_best_random_seed*.h5`: best-performing model on validation set during training\n    - `ripplenet_*directional_history_random_seed*.csv`: training history (.csv format)\n    - `ripplenet_*directional_history_random_seed*.pkl`: training history (.pickle format)\n- `ripplenet/`\n    - `common.py`: shared methods and functions\n    - `models.py`: function declarations for `tensorflow.keras` models\n- `data/`\n    - `train_00.h5`: Training data set (mouse)\n    - `train_tingley_00.h5`: Training data set (rat)\n    - `validation_00.h5`: Validation data set (mouse)\n    - `validation_00.h5`: Validation data set (rat)\n    - `test_00.h5`: Test data set (mouse)\n    - `m4029_session1.h5`: Test data set (mouse, continuous)\n \n"
      },
      "source": "https://raw.githubusercontent.com/espenhgn/RippleNet/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/espenhgn/RippleNet/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/espenhgn/RippleNet/master/RippleNet_training_bidirectional.ipynb"
      },
      "source": "https://raw.githubusercontent.com/espenhgn/RippleNet/master/RippleNet_training_bidirectional.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/espenhgn/RippleNet/master/RippleNet_manuscript_figures.ipynb"
      },
      "source": "https://raw.githubusercontent.com/espenhgn/RippleNet/master/RippleNet_manuscript_figures.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/espenhgn/RippleNet/master/RippleNet_interactive_prototype.ipynb"
      },
      "source": "https://raw.githubusercontent.com/espenhgn/RippleNet/master/RippleNet_interactive_prototype.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/espenhgn/RippleNet/master/RippleNet_timeseries_prediction.ipynb"
      },
      "source": "https://raw.githubusercontent.com/espenhgn/RippleNet/master/RippleNet_timeseries_prediction.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/espenhgn/RippleNet/master/RippleNet_training_unidirectional.ipynb"
      },
      "source": "https://raw.githubusercontent.com/espenhgn/RippleNet/master/RippleNet_training_unidirectional.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://mybinder.org/v2/gh/espenhgn/RippleNet/master"
      },
      "source": "https://raw.githubusercontent.com/espenhgn/RippleNet/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/CINPLA/RippleNet/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CINPLA/RippleNet"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RippleNet"
      },
      "source": "https://raw.githubusercontent.com/espenhgn/RippleNet/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://zenodo.org/badge/latestdoi/257224892"
      },
      "source": "https://raw.githubusercontent.com/espenhgn/RippleNet/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9999999541177371,
      "result": {
        "original_header": "Clone",
        "type": "Text_excerpt",
        "value": "These codes can be downloaded using git (www.git-scm.com): \n    cd <Repositories> # whatever download destination\n    git clone https://github.com/CINPLA/RippleNet\n    cd RippleNet \nSome binary files like `.h5` and `.pkl` may be tracked using Git LFS (https://git-lfs.github.com)\n \n"
      },
      "source": "https://raw.githubusercontent.com/espenhgn/RippleNet/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8772486815586957,
      "result": {
        "original_header": "Binder",
        "type": "Text_excerpt",
        "value": "You may mess around with the RippleNet notebooks on MyBinder.org: [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/espenhgn/RippleNet/master) \nRetraining networks is not recommended (no GPU access)!\n \n"
      },
      "source": "https://raw.githubusercontent.com/espenhgn/RippleNet/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8659650186969431,
      "result": {
        "original_header": "Files and folders:",
        "type": "Text_excerpt",
        "value": "- `README.md`: This file\n- `LICENSE`: License file\n- `environment.yml`: Conda environment file\n- `RippleNet_training_bidirectional.ipynb`: Jupyter notebook for training bidirectional RippleNet\n- `RippleNet_training_unidirectional.ipynb`: Notebook for training unidirectional RippleNet\n- `RippleNet_manuscript_figures.ipynb`: Notebook for generating figures 2-7 in Hagen E. et al. (2020)\n- `RippleNet_timeseries_prediction.ipynb`: Notebook\tfor generating figures 8-11 in Hagen E. et al. (2020)\n- `RippleNet_interactive_prototype.ipynb`: Notebook with user-interactive detection and rejection of ripple events\n- `trained_networks/`\n    - `ripplenet_*directional_random_seed*.h5`: trained RippleNet instances of uni- or bidirectional types\n    - `ripplenet_*directional_best_random_seed*.h5`: best-performing model on validation set during training\n    - `ripplenet_*directional_history_random_seed*.csv`: training history (.csv format)\n    - `ripplenet_*directional_history_random_seed*.pkl`: training history (.pickle format)\n- `ripplenet/`\n    - `common.py`: shared methods and functions\n    - `models.py`: function declarations for `tensorflow.keras` models\n- `data/`\n    - `train_00.h5`: Training data set (mouse)\n    - `train_tingley_00.h5`: Training data set (rat)\n    - `validation_00.h5`: Validation data set (mouse)\n    - `validation_00.h5`: Validation data set (rat)\n    - `test_00.h5`: Test data set (mouse)\n    - `m4029_session1.h5`: Test data set (mouse, continuous)\n \n"
      },
      "source": "https://raw.githubusercontent.com/espenhgn/RippleNet/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/CINPLA/RippleNet/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 Espen Hagen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/espenhgn/RippleNet/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RippleNet"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "CINPLA"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 193072,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 16607,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/espenhgn/RippleNet/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "espenhgn",
          "type": "User"
        },
        "date_created": "2020-05-11T08:25:39Z",
        "date_published": "2020-05-11T08:27:54Z",
        "html_url": "https://github.com/CINPLA/RippleNet/releases/tag/v0.1",
        "name": "RippleNet-v0.1",
        "release_id": 26369612,
        "tag": "v0.1",
        "tarball_url": "https://api.github.com/repos/CINPLA/RippleNet/tarball/v0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/CINPLA/RippleNet/releases/26369612",
        "value": "https://api.github.com/repos/CINPLA/RippleNet/releases/26369612",
        "zipball_url": "https://api.github.com/repos/CINPLA/RippleNet/zipball/v0.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "dependencies",
        "parent_header": [
          "RippleNet"
        ],
        "type": "Text_excerpt",
        "value": "- `python>=3`\n- `numpy`\n- `scipy`\n- `ipympls`\n- `matplotlib`\n- `h5py`\n- `pandas`\n- `seaborn`\n- `notebook`\n- `jupyter`\n- `tensorflow>=2.0`\n- `tensorflow-gpu` (optional)\n\nDependencies can be installed in your existing Python environment using\nthe `requirements.txt` file and the `pip` utility:\n\n    pip install -r requirements.txt\n\nTo install an Anaconda Python (www.anaconda.com) environment with these dependencies, issue\n\n    conda env create -f environment.yml\n    conda activate ripplenet\n\nThis will not install `tensorflow-gpu` for hardware acceleration by default.\n\n"
      },
      "source": "https://raw.githubusercontent.com/espenhgn/RippleNet/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-06 14:47:16",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 11
      },
      "technique": "GitHub_API"
    }
  ]
}