{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/raphaelmourad/DeepG4"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-07-01T12:01:23Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-10-25T08:51:08Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DeepG4: A deep learning approach to predict active G-quadruplexes"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9856692268950947,
      "result": {
        "original_header": "<a href=\"https://journals.plos.org/ploscompbiol/article/comments?id=10.1371/journal.pcbi.1009308\">**DeepG4**: A deep learning approach to predict cell-type specific active G-quadruplex regions</a>",
        "type": "Text_excerpt",
        "value": "The predictions for differents tissues and cancer with DeepG4 is\navailable\n[here](https://github.com/morphos30/DeepG4ToolsComparison/tree/main/prediction_genome/bed/predictions). \n*Vincent Rocher, Matthieu Genais, Elissar Nassereddine and Raphael\nMourad* \n\n**DeepG4** is a deep learning model developed to predict a score of DNA\nsequences to form active G-Guadruplexes (found both in vitro and in\nvivo) using **DNA sequences** and **DNA accessibility**. **DeepG4** is\nbuilt in keras+tensorflow and is wrapped in an R package.\n \n"
      },
      "source": "https://raw.githubusercontent.com/morphos30/DeepG4/master/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9111165021036299,
      "result": {
        "original_header": "Scan DeepG4 DNA motifs from the input sequences",
        "type": "Text_excerpt",
        "value": "Using one-hot encoding of DNA, convolution kernels (first layer of\nDeepG4) can be interpreted as weighted motifs, similar to position\nweight matrices (PWMs) used for DNA motifs. The function\nExtractMotifFromModel detects DeepG4 DNA motifs found in the input\nsequences.\n``` r\nlibrary(Biostrings)\nlibrary(DeepG4)\nlibrary(ggseqlogo)\nlibrary(cowplot)\nsequences <- readDNAStringSet(system.file(\"extdata\", \"test_G4_data.fa\", package = \"DeepG4\"))\nres <- ExtractMotifFromModel(sequences,top_kernel=4)\np.pcm <- lapply(res,function(x){ggseqlogo(as.matrix(x)) + ggplot2::theme_classic(base_size=14)})\nprint(plot_grid(plotlist = p.pcm,ncol=2))\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/morphos30/DeepG4/master/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9052879434963285,
      "result": {
        "original_header": "Using DeepG4 with a new active G4 dataset",
        "type": "Text_excerpt",
        "value": "If you want to use our model architecture, but retrain with your own\ndataset, you can do it by running our function `DeepG4` with\n`retrain = TRUE`\n``` r\nlibrary(Biostrings)\nlibrary(DeepG4)\nlibrary(rsample)\nlibrary(rtracklayer)\nlibrary(BSgenome.Hsapiens.UCSC.hg19)\n\n\nATAC <- system.file(\"extdata\", \"Peaks_BG4_G4seq_HaCaT_GSE76688_hg19_201b_Accessibility.bw\", package = \"DeepG4\")\nATAC <- import.bw(ATAC)\n# Read positive and segative set of sequences \nbed.pos <- import.bed(system.file(\"extdata\", \"Peaks_BG4_G4seq_HaCaT_GSE76688_hg19_201b.bed\", package = \"DeepG4\"))\nbed.neg <- import.bed(system.file(\"extdata\", \"Peaks_BG4_G4seq_HaCaT_GSE76688_hg19_201b_Ctrl_gkmSVM.bed\", package = \"DeepG4\"))\n\n# Generate classes\nY <- c(rep(1,length(bed.pos)),rep(0,length(bed.neg)))\nBED <- c(bed.pos,bed.neg)\nInput_DeepG4 <- DeepG4InputFromBED(BED=BED,ATAC = ATAC,GENOME=BSgenome.Hsapiens.UCSC.hg19)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/morphos30/DeepG4/master/README.Rmd",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/morphos30/DeepG4/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/raphaelmourad/DeepG4/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "raphaelmourad/DeepG4"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/morphos30/DeepG4/master/README.Rmd",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "You can install the development version from\n[GitHub](https://github.com/) with:\n\n``` r\n# install.packages(\"devtools\")\ndevtools::install_github(\"morphos30/DeepG4\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/morphos30/DeepG4/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9983821648452059,
      "result": {
        "original_header": "<a href=\"https://journals.plos.org/ploscompbiol/article/comments?id=10.1371/journal.pcbi.1009308\">**DeepG4**: A deep learning approach to predict cell-type specific active G-quadruplex regions</a>",
        "type": "Text_excerpt",
        "value": "[![Codecov test\ncoverage](https://codecov.io/gh/morphos30/DeepG4/branch/master/graph/badge.svg)](https://codecov.io/gh/morphos30/DeepG4?branch=master) \n"
      },
      "source": "https://raw.githubusercontent.com/morphos30/DeepG4/master/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8679679627144119,
      "result": {
        "original_header": "Using DeepG4 with a new active G4 dataset",
        "type": "Text_excerpt",
        "value": "    # A tibble: 4 x 3\n      .metric     .estimator .estimate\n      <chr>       <chr>          <dbl>\n    1 accuracy    binary        0.987 \n    2 kap         binary        0.973 \n    3 mn_log_loss binary        0.0525\n    4 roc_auc     binary        0.999 \n \n"
      },
      "source": "https://raw.githubusercontent.com/morphos30/DeepG4/master/README.Rmd",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8387150780616685,
      "result": {
        "original_header": "Using DeepG4 with a new active G4 dataset",
        "type": "Text_excerpt",
        "value": "``` r\ntraining <- DeepG4(X=Input_DeepG4[[1]],X.atac=Input_DeepG4[[2]],Y,retrain=TRUE,retrain.path = \"DeepG4_retrained.hdf5\")\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/morphos30/DeepG4/master/README.Rmd",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/raphaelmourad/DeepG4/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DeepG4"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "raphaelmourad"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 57973,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/morphos30/DeepG4/master/README.Rmd"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/morphos30/DeepG4/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "type": "Text_excerpt",
        "value": "DeepG4 was built with `Keras 2.3.1` and `tensorflow 2.1.0`, but it\nshould work with any version of theses libraries.\n"
      },
      "source": "https://raw.githubusercontent.com/morphos30/DeepG4/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Update 30/05/2022",
        "parent_header": [
          "Requirements"
        ],
        "type": "Text_excerpt",
        "value": "It seems that our model cannot be properly load so please install\nkeras/tensorflow using the environment file provided :\n\nOn a terminal:\n\n`conda env create -f environment.yml`\n\nOn R:\n\n``` r\ninstall.packages(\"keras\")\nlibrary(keras)\nreticulate::use_condaenv(\"DeepG4\")\n```\n\nThis will provide you with default CPU installations of Keras and\nTensorFlow python packages (within a virtualenv) that can be used with\nor without R.\n"
      },
      "source": "https://raw.githubusercontent.com/morphos30/DeepG4/master/README.Rmd",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 12:20:21",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 9
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "With accessibility",
        "parent_header": [
          "Advanced usage of DeepG4"
        ],
        "type": "Text_excerpt",
        "value": "Given small regions (bed) and an accessibility file (coverage file from\nATAC-seq/DNAse-seq/MNase-seq), you can predict active G4 regions in a\n**specific cell type**:\n\n``` r\nlibrary(rtracklayer)\nlibrary(BSgenome.Hsapiens.UCSC.hg19)\nlibrary(DeepG4)\n\nBED <- system.file(\"extdata\", \"test_G4_data.bed\", package = \"DeepG4\")\nBED <- import.bed(BED)\nATAC <- system.file(\"extdata\", \"Peaks_BG4_G4seq_HaCaT_GSE76688_hg19_201b_Accessibility.bw\", package = \"DeepG4\")\nATAC <- import.bw(ATAC)\n\nInput_DeepG4 <- DeepG4InputFromBED(BED=BED,ATAC = ATAC,GENOME=BSgenome.Hsapiens.UCSC.hg19)\n\nInput_DeepG4\n```\n\n    [[1]]\n      A DNAStringSet instance of length 100\n          width seq\n      [1]   201 GTTCGGGCCTCGGTCGCGCCGCCGGGTCTTGCAGACGCGAATGTAAACAGAAACA...TGACTCCTGGAGCGACCTTCACGAGGGAAAGCGCGCCCCCCGGCACCCACCCCT\n      [2]   201 TTTCTATAGTTTTCTTTTGTTTCTACCTCATGACTAGATGATTCACTGCTTGAAC...GTCAAATCTGTCCATCTTCACTGCCACCCTTCAGTACCAAATGACCAGTCTCTT\n      [3]   201 GCTTAAAAGCCTGTAAGAAAGATATAATTTGATAGAACTGGCTAGGATTTGTCAG...CGTCAGGGAGGGGGTGGGGCCTCCACGTGGGAGATCTTGCCTGGAGGTGGTGGA\n      [4]   201 TCCCACACCCGGTAGATGTAAGGGAAAAACTGCATTACCCAGAAGGCACTGCCCC...GTGTGACGTCATCTCCGTGGGCCGGTTTGGCCCTGAAACAGTGTGGGGCCTAGA\n      [5]   201 AGTAGCTACAGAGTTCCTGCTCCAGCAACCAGGAGCCTTGAGGCAGCACAAGGAC...ACCACAATGTCTGCCAAGAAAGAGGATGAGTCACCAAGACCCACAGGAAAGAGG\n      ...   ... ...\n     [96]   201 CACATGCCTTCCTTGGGGACGTGTTCACACATGTGGCCCTAGCTGTGAGAGACAG...CATCTCAGAACAGCTGAGCTGGAAGTGGGTGAATAATAATAATAATAATAATAA\n     [97]   201 TGGTGGTCTTTCTCTACCGGGCCTGGTAGCCAAAGACAAAGGTCATAATCACTTG...CTATGTACTCTTCAAAGTGCCACCTCCTGGCTGCAAGCCAACCAACACAAAACC\n     [98]   201 TGACCGTAGACCTCGTGCACTTCTGCTGCGGTCGGGGCCGGAGTCTGGGCTGGAG...GCGATCCAGAGCCAAGCGCCCCGCCCCTGCCCGGGCGCGCTCCCTCCTTAGCCC\n     [99]   201 TTAACGTCATCAGTCGGGAGGACGACAGCTACGCACGCGCGGGGCACCTCCTCTG...GCCACGGTGGAGGCAGCGGCGAGAGGGGGCGGGGACAAGGAGAGGGCACGCACG\n    [100]   201 GTGTCCGGGTGAGAGACCTGGAGGTGGGGCCTAGGTGTCTACCCGGCCAGGTGCG...TAAGGCTCGGGGCCAGTCGTCGTCCATTCCTTCCTAACACCTCCCTATCCTCCC\n\n    [[2]]\n      [1] 0.000000000 0.016287416 0.033261447 0.069375103 0.018520650 0.010934717 0.036308476 0.315843234 0.037658374\n     [10] 0.045887551 0.037320211 0.042853401 0.068908093 0.071774485 0.084947561 0.027456211 0.033915868 0.006912598\n     [19] 0.012604675 0.051405275 0.093813195 0.019288668 0.051228826 0.019520666 0.048686840 0.050116329 0.045801884\n     [28] 0.033079207 0.035834917 0.056326946 0.096531489 0.064706374 0.026422647 0.016979087 0.008512502 0.021891554\n     [37] 0.016688682 0.109472225 0.047901838 0.066676075 0.052591085 0.017467983 0.035541899 0.060001992 0.028878783\n     [46] 0.056284886 0.045126048 0.052469122 0.101620595 0.047741155 0.036925371 0.021645371 0.044472962 0.012457179\n     [55] 0.020373459 0.109529076 0.039006694 0.047824384 0.028752257 0.015437852 0.069926660 0.022213134 0.019726120\n     [64] 0.044609840 0.028773493 0.008077349 0.042587371 0.016502886 0.035757895 0.015023933 0.024181422 0.057516040\n     [73] 0.027492004 0.030316917 0.049878433 0.020105394 0.025934350 0.023845766 0.032338052 0.048007935 0.136436151\n     [82] 0.060423998 0.034617445 0.051958662 0.064664156 0.034518694 0.020277026 0.042060108 0.055335700 0.051632313\n     [91] 0.066588875 0.030586623 0.043823259 0.034947155 0.082091662 0.008496193 0.034567766 0.055516400 0.062191534\n    [100] 0.049011882\n\nThen predict using both **DNA** and **Accessibility** :\n\n``` r\npredictions <- DeepG4(X=Input_DeepG4[[1]],X.atac = Input_DeepG4[[2]])\nhead(predictions)\n```\n\n              [,1]\n    [1,] 0.8414769\n    [2,] 0.5075037\n    [3,] 0.9905243\n    [4,] 0.9991857\n    [5,] 0.9387835\n    [6,] 0.2330312\n"
      },
      "source": "https://raw.githubusercontent.com/morphos30/DeepG4/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Without accessbility",
        "parent_header": [
          "Basic usage of DeepG4"
        ],
        "type": "Text_excerpt",
        "value": "You still can predict active G4 regions using only **DNA** sequences :\n\n``` r\nlibrary(rtracklayer)\nlibrary(BSgenome.Hsapiens.UCSC.hg19)\nlibrary(Biostrings)\nlibrary(DeepG4)\n\nBED <- system.file(\"extdata\", \"test_G4_data.bed\", package = \"DeepG4\")\nBED <- import.bed(BED)\nsequences <- getSeq(BSgenome.Hsapiens.UCSC.hg19,BED)\n\n\npredictions <- DeepG4(X=sequences)\nhead(predictions)\n```\n\n              [,1]\n    [1,] 0.9478214\n    [2,] 0.5868858\n    [3,] 0.9660227\n    [4,] 0.9093548\n    [5,] 0.9119551\n    [6,] 0.2471965\n"
      },
      "source": "https://raw.githubusercontent.com/morphos30/DeepG4/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Advanced usage of DeepG4",
        "type": "Text_excerpt",
        "value": "If you have a large sequence (\\>201bp up to several Mbp), you can scan\nthe sequence and predict the positions of active G4s within the\nsequence.\n\n### With accessibility\n\n``` r\nlibrary(rtracklayer)\nlibrary(BSgenome.Hsapiens.UCSC.hg19)\nlibrary(DeepG4)\n\nBED <- system.file(\"extdata\", \"promoters_seq_example.bed\", package = \"DeepG4\")\nBED <- import.bed(BED)\nATAC <- system.file(\"extdata\", \"Peaks_BG4_G4seq_HaCaT_GSE76688_hg19_201b_Accessibility.bw\", package = \"DeepG4\")\nATAC <- import.bw(ATAC)\n\n\nres <- DeepG4Scan(X = BED,X.ATAC=ATAC,k=20,treshold=0.5,GENOME=BSgenome.Hsapiens.UCSC.hg19)\n```\n\nDeepG4Scan function scans each input sequence with a step of `k=20` and\noutputs for each input sequence the G4 positions (+/- 100bp) and the\ncorresponding DeepG4 probabilities (\\>= treshold).\n\n``` r\nlibrary(dplyr)\nres %>% dplyr::select(-seq) %>% group_by(seqnames) %>% dplyr::slice(1:2) %>%  head\n```\n\n    # A tibble: 6 x 5\n    # Groups:   seqnames [3]\n      seqnames     start       end width score\n      <fct>        <int>     <int> <int> <dbl>\n    1 chr15     63569229  63569429   201 0.690\n    2 chr15     63569249  63569449   201 0.810\n    3 chr2     131850345 131850545   201 0.548\n    4 chr2     131850385 131850585   201 0.671\n    5 chr5      10562715  10562915   201 0.547\n    6 chr5      10562735  10562935   201 0.503\n"
      },
      "source": "https://raw.githubusercontent.com/morphos30/DeepG4/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Without accessibility",
        "parent_header": [
          "Advanced usage of DeepG4"
        ],
        "type": "Text_excerpt",
        "value": "``` r\nlibrary(Biostrings)\nlibrary(rtracklayer)\nlibrary(BSgenome.Hsapiens.UCSC.hg19)\nlibrary(DeepG4)\n\nsequences <- import.bed(system.file(\"extdata\", \"promoters_seq_example.bed\", package = \"DeepG4\"))\nsequences <- getSeq(BSgenome.Hsapiens.UCSC.hg19,sequences)\nres <- DeepG4Scan(X = sequences,k=20,treshold=0.5)\n```\n\nDeepG4Scan function scans each input sequence with a step of `k=20` and\noutputs for each input sequence the G4 positions (+/- 100bp) and the\ncorresponding DeepG4 probabilities (\\>= treshold).\n\n``` r\nlibrary(dplyr)\nres %>% dplyr::select(-seq) %>% group_by(seqnames) %>% dplyr::slice(1:2) %>%  head\n```\n\n    # A tibble: 6 x 5\n    # Groups:   seqnames [3]\n      seqnames     start       end width score\n      <fct>        <int>     <int> <int> <dbl>\n    1 chr15     63569229  63569429   201 0.690\n    2 chr15     63569249  63569449   201 0.810\n    3 chr2     131850345 131850545   201 0.548\n    4 chr2     131850385 131850585   201 0.671\n    5 chr5      10562715  10562915   201 0.547\n    6 chr5      10562735  10562935   201 0.503\n"
      },
      "source": "https://raw.githubusercontent.com/morphos30/DeepG4/master/README.Rmd",
      "technique": "header_analysis"
    }
  ]
}