{
  "application_domain": [
    {
      "confidence": 64.46,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/i-Molecule/bitenet"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-02-07T13:06:57Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-01T08:42:01Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Spatiotemporal identification of druggable binding sites using deep learning"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9414255859596626,
      "result": {
        "original_header": "The web-server version is here : https://sites.skoltech.ru/imolecule/tools/bitenet/",
        "type": "Text_excerpt",
        "value": "If you use or refer to BiteNet please cite: \nIgor Kozlovskii and Petr Popov, \"Spatiotemporal identification of druggable binding sites using deep learning\", Communications Biology, accepted. \n"
      },
      "source": "https://raw.githubusercontent.com/i-Molecule/bitenet/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9760786874720393,
      "result": {
        "original_header": "Abstract",
        "type": "Text_excerpt",
        "value": "Identification of novel protein binding sites expands \u00abdruggable genome\u00bb and opens new opportunities for drug discovery. \nGenerally, presence or absence of a binding site depends on the three-dimensional conformation of a protein, making binding site identification resemble to object detection problem in computer vision.  \nHere we introduce a computational approach for the large-scale detection of protein binding sites, that considers protein conformations as 3D-images, binding sites as objects on these images to detect, and conformational ensembles of proteins as 3D-videos to analyze. \nBiteNet is suitable for spatiotemporal detection of hard-to-spot allosteric binding sites, as we showed for conformation-specific binding site of the epidermal growth factor receptor, oligomer-specific binding site of the ion channel, and binding site in G protein-coupled receptor. \nBiteNet outperforms state-of-the-art methods both in terms of accuracy and speed, taking about 1.5 minutes to analyze 1000 conformations of a protein with ~2000 atoms. \n \n"
      },
      "source": "https://raw.githubusercontent.com/i-Molecule/bitenet/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/i-Molecule/bitenet/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/i-Molecule/bitenet/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "i-Molecule/bitenet"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BiteNet"
      },
      "source": "https://raw.githubusercontent.com/i-Molecule/bitenet/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing",
        "parent_header": [
          "Abstract"
        ],
        "type": "Text_excerpt",
        "value": "BiteNet v1.0 works with tensorflow==1.14, so we advise to make virtual environment first:\n```bash\npython3 -m virtualenv bitenet-env\n```\nand then install tensorflow (it can be non single-line for gpu)\n```bash\npython3 -m pip install tensorflow-gpu==1.14\n```\nor\n```bash\npython3 -m pip install tensorflow==1.14\n```\n\nYou can install BiteNet directly from git\n```\npython3 -m pip install https://github.com/i-Molecule/bitenet.git\n```\n"
      },
      "source": "https://raw.githubusercontent.com/i-Molecule/bitenet/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/i-Molecule/bitenet/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "The default copyright laws apply.\nTo request commercial or academical license please contact : p.popov@skoltech.ru\n"
      },
      "source": "https://raw.githubusercontent.com/i-Molecule/bitenet/master/LICENSE.md",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bitenet"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "i-Molecule"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/i-Molecule/bitenet/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 14:59:19",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 20
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "non-software"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "Abstract"
        ],
        "type": "Text_excerpt",
        "value": "It is possible to run BiteNet inside python or using scripts, visualization using Pymol is also provided.\n"
      },
      "source": "https://raw.githubusercontent.com/i-Molecule/bitenet/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "From python",
        "parent_header": [
          "Abstract",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "For running binding site predictions:\n```python\nfrom bitenet import BiteNet\nbitenet = BiteNet()\n\n# single .pdb file\npredictions, residues = bitenet(\"./examples/temp.pdb\")\n\n# dataset .ds file\nnames, predictions, residues = bitenet(\"./examples/temp.ds\")\n\n# folder \nnames, predictions, residues = bitenet(\"./examples/temp/\")\n\n# alter minibatch size if memory allocation error occurs\nbitenet.minibatch_size = 4\n\n# or other parameters\nbitenet.dataloader.stride = 32  # smaller stride for grid splitting\nbitenet.dataloader.rotation_eval = True # to run rotations during predict\n\nbitenet.prediction_processer.score_threshold = 0.01 # smaller score threshold for more predictions\nbitenet.prediction_processer.distance_threshold = 4 # more predictions as less predictions are filtered in non max suppression\nbitenet.prediction_processer.distance_residues = 4 # distance threshold for protein residues to be considered to be on predictions interface\n```\n\nFor trajectory predictions clustering:\n```python\nfrom bitenet import read_predictions\nfrom bitenet.clustering import Clustering_MeanShift, Clustering_DBSCAN, \\\n    Clustering_Agglomerative, Clustering_Agglomerative_Residues\n\n_, predictions, residues = read_predictions(\"predictions.log\", \n    get_residues=True)\n\n# mean shift\nclustering = Clustering_MeanShift(distance_merge=5)\nclustering.cluster(predictions)\n\n# DBSCAN\nclustering = Clustering_DBSCAN(eps=0.5, min_samples=5)\nclustering.cluster(predictions)\n\n# Agglomerative clustering on predictions coordinates\nclustering = Clustering_Agglomerative()\nclustering.cluster(predictions)\nclustering.refit(n_clusters=10) # to get different number of clusters\n\n# Agglomerative clustering on predictions residues\nclustering = Clustering_Agglomerative_Residues()\nclustering.cluster(predictions, residues)\nclustering.refit(n_clusters=10)\n\n\nprint(clustering.get_summary_str(all=False))    # print clusters info: scores, coordinates, top score frames\nwith open(\"clusters.txt\", \"w\") as file:\n    file.write(clustering.get_summary_str())    # write to file\nclustering.export_summary(\"clusters.csv\", all=False)    # csv with clusters\nclustering.export_summary(\"clusters_all.csv\", all=True) # csv with not filtered clusters\nclustering.plot(\"clusters.png\") # plot cluster scores across trajectory; however better use your custom plotting for more accurate images\n```\n"
      },
      "source": "https://raw.githubusercontent.com/i-Molecule/bitenet/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "From pymol",
        "parent_header": [
          "Abstract",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```python\nfrom bitenet import BiteNet_Draw\ncmd.load(\"temp.pdb\")\nmodel = BiteNet_Draw()\nmodel(\"temp.pdb\") # predict and draw predictions for file\nmodel(\"temp\")     # or for pymol protein object (it will just write the same pdb file)\n\nfrom bitenet import read_predictions\nfrom bitenet.clustering import Clustering_MeanShift\nfrom bitenet.pymol_draw import draw_clusters_predictions, draw_clusters_density\n_, predictions, residues = read_predictions(\"predictions.log\", \n    get_residues=True)  # read predictions\nclustering = Clustering_MeanShift()\nclustering.cluster(predictions) # cluster\ndraw_clusters_predictions(clustering)   # draw colored predictions\ndraw_clusters_density(clustering)       # draw colored densities for clusters\n```\n"
      },
      "source": "https://raw.githubusercontent.com/i-Molecule/bitenet/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Scripts",
        "parent_header": [
          "Abstract",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "*Predict* script runs prediction for single or multiplt pdbs:\n```bash\nbitenet [path] [out]\n```\nwhere *path* can be single *.pdb* file, folder with *.pdb* files or *.ds* file with list of pdbs on separate lines; *out* is path to output file with predictions or folder with separate predictions if *--sep* is provided. More options are available with:\n```bash\nbitenet -h\n```\n\n*Test* script runs prediction and evalutate model accuracy at the same time:\n```bash\nbitenet-test [path]\n```\n\n*Train* script runs training for a new model. Better look at the script itself.\n\n*Clustering* script for getting prediction clusters for predictions run on a trajectory.\n```bash\nbitenet-cluster [path] [out]\n```\nwhere *path* is path to prediction log file output from bitenet predict; *out* is path to new folder to output to. Output files contain clusters scores and coordinates csv files and plot of per frame cluster scores. More options are available:\n```bash\nbitenet-cluster -h\n```\n"
      },
      "source": "https://raw.githubusercontent.com/i-Molecule/bitenet/master/README.md",
      "technique": "header_analysis"
    }
  ]
}