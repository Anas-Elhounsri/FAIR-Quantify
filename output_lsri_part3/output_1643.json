{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ZhaoXM-Lab/metaMIC"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-06-09T05:12:27Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-03-21T13:58:23Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Assessing and Improving the quality of metagenomic assemblies"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9911511263043433,
      "result": {
        "original_header": "metaMIC: Reference-free Misassembly Identification and Correction of metagenomic assemblies",
        "type": "Text_excerpt",
        "value": "metaMIC is a fully automated tool for identifying and correcting misassemblies of (meta)genomic assemblies with the following three steps. Firstly, metaMIC extracts various types of features from the alignment between paired-end sequencing reads and the assembled contigs. Secondly, the features extracted in the first step will be used as input of a random forest classifier for identifying misassembled metagenomic assemblies. Thirdly, metaMIC will localize misassembly breakpoints for each misassembled contig and then correct misassemblies by splitting into parts at the breakpoints. \n"
      },
      "source": "https://raw.githubusercontent.com/ZhaoXM-Lab/metaMIC/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8343131465530991,
      "result": {
        "original_header": "Output",
        "type": "Text_excerpt",
        "value": "The output folder will contain\n1. Misassembly score for each contig: **metaMIC_contig_score.txt** (for only metagenomics)\n2. predicted misassembly breakpoints for misassembled contigs: **misassembly_breakpoint.txt**\n3. Anomaly scores for each position in contigs: **anomaly_score.txt**\n4. Fasta file of corrected contigs: **metaMIC_corrected_contigs.fa**\n5. Some intermediate files \n"
      },
      "source": "https://raw.githubusercontent.com/ZhaoXM-Lab/metaMIC/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.912947234063263,
      "result": {
        "original_header": "Complete option list",
        "type": "Text_excerpt",
        "value": "metaMIC:\n```\nusage: metaMIC [-h]  ...\n\nReference-free Misassembly Identification and Correction of metagenomic\nassemblies\n\noptional arguments:\n  -h, --help       show this help message and exit\n\nmetaMIC subcommands:\n\n    extract_feature\n                   Extract features from inputs.\n    predict        Predict.\n    train          Train model.\n    \n\nusage: metaMIC extract_feature [-h] [-t THREADS] [--bam BAMFILE] [--r1 READ1]\n                               [--r2 READ2] [-p READ] -c ASSEMBLIES -o OUTPUT\n                               --pileup PILEUP -m MODE [-l MIN_LENGTH]\n                               [--samtools SAMTOOLS] [--jellyfish JELLYFISH]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -t THREADS, --threads THREADS\n                        Maximum number of threads [default: 8]\n  --bam BAMFILE         index bam file for alignment\n  --r1 READ1            read1\n  --r2 READ2            read2\n  -p READ, --r READ     smart pairing (ignoring #2 fasta/q)\n  -c ASSEMBLIES, --contig ASSEMBLIES\n                        fasta file of assembled contigs\n  -o OUTPUT, --output OUTPUT\n                        output directory for metaMIC results\n  --pileup PILEUP       path to pileup file [samtools mpileup]\n  -m MODE, --mode MODE  Applied to single genomic/metagenomic assemblies\n                        [meta/single]\n  -l MIN_LENGTH, --mlen MIN_LENGTH\n                        Minimum contig length [default: 5000bp]\n  --samtools SAMTOOLS   path to samtools\n  --jellyfish JELLYFISH\n                        path to jellyfish\n                        \nusage: metaMIC predict [-h] -o OUTPUT -m MODE -c ASSEMBLIES [-a ASSEMBLER]\n                       [-l MIN_LENGTH] [-s SPLIT_LENGTH] [--nb BREAK_COUNT]\n                       [--rb BREAK_RATIO] [--at ANOMALY_THRED]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -o OUTPUT, --output OUTPUT\n                        output directory for metaMIC results\n  -m MODE, --mode MODE  Applied to single genomic/metagenomic assemblies\n                        [meta/single]\n  -c ASSEMBLIES, --contig ASSEMBLIES\n                        fasta file of assembled contigs\n  -a ASSEMBLER, --assembler ASSEMBLER\n                        The assembler-specific model or user-trained model\n                        used for assembled fasta file [MEGAHIT/IDBA_UD/metaSPAdes/[new\n                        training model specified by users]]\n  -l MIN_LENGTH, --mlen MIN_LENGTH\n                        Minimum contig length [default: 5000bp]\n  -s SPLIT_LENGTH, --slen SPLIT_LENGTH\n                        Minimum length of split fragments [default: 1000bp]\n  --nb BREAK_COUNT      Threshold of read breakpoint counts for correcting\n                        misassemblies \n  --rb BREAK_RATIO      Threshold of read breakpoint ratio for correcting\n                        misassemblies \n  --at ANOMALY_THRED    Threshold of anomaly score for correcting\n                        misassemblies \n  --st SCORE_THRED      Threshold of contig score for correcting misassemblies                        \n                        \nusage: metaMIC train [-h] -o OUTPUT [--label LABEL] [-a ASSEMBLER]\n                     [-t THREADS]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -o OUTPUT, --output OUTPUT\n                        output directory for metaMIC results\n  --label LABEL         Misassembly label of contigs for training assemblies\n  -a ASSEMBLER, --assembler ASSEMBLER\n                        The name of the directory of the trained model.\n  -t THREADS, --threads THREADS\n                        Maximum number of CPUs [default: 8]                        \n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/ZhaoXM-Lab/metaMIC/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ZhaoXM-Lab/metaMIC/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ZhaoXM-Lab/metaMIC/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ZhaoXM-Lab/metaMIC"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "metaMIC: Reference-free Misassembly Identification and Correction of metagenomic assemblies"
      },
      "source": "https://raw.githubusercontent.com/ZhaoXM-Lab/metaMIC/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ZhaoXM-Lab/metaMIC/main/example/download.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ZhaoXM-Lab/metaMIC/main/metaMIC/split_sam.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ZhaoXM-Lab/metaMIC/main/metaMIC/model/install_model.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements and Installation",
        "parent_header": [
          "metaMIC: Reference-free Misassembly Identification and Correction of metagenomic assemblies"
        ],
        "type": "Text_excerpt",
        "value": "Make sure you have the dependencies below installed and accessible in your $PATH.\n"
      },
      "source": "https://raw.githubusercontent.com/ZhaoXM-Lab/metaMIC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Prepare dependencies",
        "parent_header": [
          "metaMIC: Reference-free Misassembly Identification and Correction of metagenomic assemblies",
          "Requirements and Installation"
        ],
        "type": "Text_excerpt",
        "value": "- [python 3.6-3.9](https://www.python.org/downloads/)\n- [pandas](https://pandas.pydata.org/)\n- [numpy](https://numpy.org/)\n- [pysam](https://pypi.org/project/pysam/0.8.4/)\n- [biopython](https://pypi.org/project/biopython/)\n- [bwa 0.7.17](https://sourceforge.net/projects/bio-bwa/files/)\n- [samtools 1.9](https://sourceforge.net/projects/samtools/files/samtools/)\n- [jellyfish](http://www.cbcb.umd.edu/software/jellyfish/)\n- [scikit-learn](https://scikit-learn.org/stable/)\n- [scipy](https://www.scipy.org/)\n\n1. install python modules: pandas, numpy, pysam\n```\nconda install -c bioconda pandas numpy pysam biopython  \n```\nor\n\n```\npip install pysam pandas numpy biopython\n```\n\n2. download and install samtools, bwa, jellyfish\n```\nconda install -c bioconda samtools bwa jellyfish  \n```\nor\n\n```\nwget https://github.com/samtools/samtools/releases/download/1.9/samtools-1.9.tar.bz2\ntar -jxvf samtools-1.9.tar.bz2\ncd samtools-1.9\n./configure\nmake\nmake install\nexport PATH=`pwd`:$PATH\n```\n\n```\nwget https://sourceforge.net/projects/bio-bwa/files/latest/download/bwa-0.7.17.tar.bz2\ntar -jxvf bwa-0.7.17.tar.bz2\ncd bwa-0.7.17\nmake\nexport PATH=`pwd`:$PATH\n```\n\n```\nwget http://www.cbcb.umd.edu/software/jellyfish/jellyfish-1.1.10.tar.gz\ntar zxvf jellyfish-1.1.10.tar.gz\ncd jellyfish-1.1.10\n./configure\nmake\nmake install\nexport PATH=`pwd`/bin:$PATH\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ZhaoXM-Lab/metaMIC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Install metaMIC via git",
        "parent_header": [
          "metaMIC: Reference-free Misassembly Identification and Correction of metagenomic assemblies",
          "Requirements and Installation",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "```\ngit clone https://github.com/ZhaoXM-Lab/metaMIC.git\n```\n- install and download [training models](https://zenodo.org/record/4781819#.YKm_omYzZTY) \n\n```\ncd metaMIC\npython setup.py install\nmetaMIC -h\n\n# downloading models\nmetaMIC download_model\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ZhaoXM-Lab/metaMIC/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8812781049337963,
      "result": {
        "original_header": "Complete option list",
        "type": "Text_excerpt",
        "value": "metaMIC:\n```\nusage: metaMIC [-h]  ...\n\nReference-free Misassembly Identification and Correction of metagenomic\nassemblies\n\noptional arguments:\n  -h, --help       show this help message and exit\n\nmetaMIC subcommands:\n\n    extract_feature\n                   Extract features from inputs.\n    predict        Predict.\n    train          Train model.\n    \n\nusage: metaMIC extract_feature [-h] [-t THREADS] [--bam BAMFILE] [--r1 READ1]\n                               [--r2 READ2] [-p READ] -c ASSEMBLIES -o OUTPUT\n                               --pileup PILEUP -m MODE [-l MIN_LENGTH]\n                               [--samtools SAMTOOLS] [--jellyfish JELLYFISH]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -t THREADS, --threads THREADS\n                        Maximum number of threads [default: 8]\n  --bam BAMFILE         index bam file for alignment\n  --r1 READ1            read1\n  --r2 READ2            read2\n  -p READ, --r READ     smart pairing (ignoring #2 fasta/q)\n  -c ASSEMBLIES, --contig ASSEMBLIES\n                        fasta file of assembled contigs\n  -o OUTPUT, --output OUTPUT\n                        output directory for metaMIC results\n  --pileup PILEUP       path to pileup file [samtools mpileup]\n  -m MODE, --mode MODE  Applied to single genomic/metagenomic assemblies\n                        [meta/single]\n  -l MIN_LENGTH, --mlen MIN_LENGTH\n                        Minimum contig length [default: 5000bp]\n  --samtools SAMTOOLS   path to samtools\n  --jellyfish JELLYFISH\n                        path to jellyfish\n                        \nusage: metaMIC predict [-h] -o OUTPUT -m MODE -c ASSEMBLIES [-a ASSEMBLER]\n                       [-l MIN_LENGTH] [-s SPLIT_LENGTH] [--nb BREAK_COUNT]\n                       [--rb BREAK_RATIO] [--at ANOMALY_THRED]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -o OUTPUT, --output OUTPUT\n                        output directory for metaMIC results\n  -m MODE, --mode MODE  Applied to single genomic/metagenomic assemblies\n                        [meta/single]\n  -c ASSEMBLIES, --contig ASSEMBLIES\n                        fasta file of assembled contigs\n  -a ASSEMBLER, --assembler ASSEMBLER\n                        The assembler-specific model or user-trained model\n                        used for assembled fasta file [MEGAHIT/IDBA_UD/metaSPAdes/[new\n                        training model specified by users]]\n  -l MIN_LENGTH, --mlen MIN_LENGTH\n                        Minimum contig length [default: 5000bp]\n  -s SPLIT_LENGTH, --slen SPLIT_LENGTH\n                        Minimum length of split fragments [default: 1000bp]\n  --nb BREAK_COUNT      Threshold of read breakpoint counts for correcting\n                        misassemblies \n  --rb BREAK_RATIO      Threshold of read breakpoint ratio for correcting\n                        misassemblies \n  --at ANOMALY_THRED    Threshold of anomaly score for correcting\n                        misassemblies \n  --st SCORE_THRED      Threshold of contig score for correcting misassemblies                        \n                        \nusage: metaMIC train [-h] -o OUTPUT [--label LABEL] [-a ASSEMBLER]\n                     [-t THREADS]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -o OUTPUT, --output OUTPUT\n                        output directory for metaMIC results\n  --label LABEL         Misassembly label of contigs for training assemblies\n  -a ASSEMBLER, --assembler ASSEMBLER\n                        The name of the directory of the trained model.\n  -t THREADS, --threads THREADS\n                        Maximum number of CPUs [default: 8]                        \n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/ZhaoXM-Lab/metaMIC/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ZhaoXM-Lab/metaMIC/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021 Seny-l\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/ZhaoXM-Lab/metaMIC/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "metaMIC"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "ZhaoXM-Lab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 103400,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 1616,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ZhaoXM-Lab/metaMIC/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements and Installation",
        "parent_header": [
          "metaMIC: Reference-free Misassembly Identification and Correction of metagenomic assemblies"
        ],
        "type": "Text_excerpt",
        "value": "Make sure you have the dependencies below installed and accessible in your $PATH.\n"
      },
      "source": "https://raw.githubusercontent.com/ZhaoXM-Lab/metaMIC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Prepare dependencies",
        "parent_header": [
          "metaMIC: Reference-free Misassembly Identification and Correction of metagenomic assemblies",
          "Requirements and Installation"
        ],
        "type": "Text_excerpt",
        "value": "- [python 3.6-3.9](https://www.python.org/downloads/)\n- [pandas](https://pandas.pydata.org/)\n- [numpy](https://numpy.org/)\n- [pysam](https://pypi.org/project/pysam/0.8.4/)\n- [biopython](https://pypi.org/project/biopython/)\n- [bwa 0.7.17](https://sourceforge.net/projects/bio-bwa/files/)\n- [samtools 1.9](https://sourceforge.net/projects/samtools/files/samtools/)\n- [jellyfish](http://www.cbcb.umd.edu/software/jellyfish/)\n- [scikit-learn](https://scikit-learn.org/stable/)\n- [scipy](https://www.scipy.org/)\n\n1. install python modules: pandas, numpy, pysam\n```\nconda install -c bioconda pandas numpy pysam biopython  \n```\nor\n\n```\npip install pysam pandas numpy biopython\n```\n\n2. download and install samtools, bwa, jellyfish\n```\nconda install -c bioconda samtools bwa jellyfish  \n```\nor\n\n```\nwget https://github.com/samtools/samtools/releases/download/1.9/samtools-1.9.tar.bz2\ntar -jxvf samtools-1.9.tar.bz2\ncd samtools-1.9\n./configure\nmake\nmake install\nexport PATH=`pwd`:$PATH\n```\n\n```\nwget https://sourceforge.net/projects/bio-bwa/files/latest/download/bwa-0.7.17.tar.bz2\ntar -jxvf bwa-0.7.17.tar.bz2\ncd bwa-0.7.17\nmake\nexport PATH=`pwd`:$PATH\n```\n\n```\nwget http://www.cbcb.umd.edu/software/jellyfish/jellyfish-1.1.10.tar.gz\ntar zxvf jellyfish-1.1.10.tar.gz\ncd jellyfish-1.1.10\n./configure\nmake\nmake install\nexport PATH=`pwd`/bin:$PATH\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ZhaoXM-Lab/metaMIC/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 05:43:50",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 27
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick Start",
        "parent_header": [
          "metaMIC: Reference-free Misassembly Identification and Correction of metagenomic assemblies"
        ],
        "type": "Text_excerpt",
        "value": "- First map paired-end reads to assembled contigs\n\n```\nbwa index $contig_file\nbwa mem -a -t 8 $contig_file $read1 $read2 | samtools view -h -q 10 -m 50 -F 4 -b | samtools sort > $bam_file\n```\n- generate pileup file\n\n```\nsamtools mpileup -C 50 -A -f $contig_file $bam_file |  awk '$3 != \"N\"' > $pileup_file\n```\n- run metaMIC\n"
      },
      "source": "https://raw.githubusercontent.com/ZhaoXM-Lab/metaMIC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "For metagenomics",
        "parent_header": [
          "metaMIC: Reference-free Misassembly Identification and Correction of metagenomic assemblies",
          "Quick Start"
        ],
        "type": "Text_excerpt",
        "value": "```\n# Step 1: extract features [output file: feature_matrix/window_fea_matrix.txt,feature_matrix/contig_fea_matrix.txt]\n\nmetaMIC extract_feature --bam $bam_file -c $contig_file -o $output_dir --pileup $pileup_file -m meta\n\n# Step 2: misassembly breakpoint identification and correction;\n# output directory must be same as the above $output_dir\n# [output file: metaMIC_corrected_contigs.fa, misassembly_breakpoint.txt, anomaly_score.txt]\n\nmetaMIC predict -c $contig_file -o $output_dir -a MEGAHIT -m meta\n```"
      },
      "source": "https://raw.githubusercontent.com/ZhaoXM-Lab/metaMIC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "For isolate genomes",
        "parent_header": [
          "metaMIC: Reference-free Misassembly Identification and Correction of metagenomic assemblies",
          "Quick Start"
        ],
        "type": "Text_excerpt",
        "value": "```\n# Step 1: extract features [output file: feature_matrix/window_fea_matrix.txt]\n\nmetaMIC extract_feature --bam $bam_file -c $contig_file -o $output_dir --pileup $pileup_file -m single\n\n# Step 2: misassembly breakpoint identification and correction;\n# output directory must be same as the above $output_dir\n# [output file: metaMIC_corrected_contigs.fa, misassembly_breakpoint.txt, anomaly_score.txt]\n\nmetaMIC predict -c $contig_file -o $output_dir -m single\n```"
      },
      "source": "https://raw.githubusercontent.com/ZhaoXM-Lab/metaMIC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Training on new datasets",
        "parent_header": [
          "metaMIC: Reference-free Misassembly Identification and Correction of metagenomic assemblies",
          "Quick Start"
        ],
        "type": "Text_excerpt",
        "value": "If you want to generate a new training model on a novel dataset. Contig labels and name of new training models should be provided.\nThe Step 1 is the same as above, then the contig_fea_matrix.txt will be used as the training datasets.\n\n\n```\n# Step 1: extract features [output file: feature_matrix/window_fea_matrix.txt,feature_matrix/contig_fea_matrix.txt]\n\nmetaMIC extract_feature --bam $bam_file -c $contig_file -o $output_dir --pileup $pileup_file -m meta\n\n# Step 2: Generating new training models\n# output directory must be same as the above $output_dir\n# format of contig_label file should be:\n# contig1\\t0\n# contig2\\t1\n# contig3\\t0\n# ...\n# contig100\\t0\n\nmetaMIC train -o $output_dir -a $New_model_name --label $contig_label \n```\n\n\nFor more details about the usage of metaMIC, [read the docs](http:)\n"
      },
      "source": "https://raw.githubusercontent.com/ZhaoXM-Lab/metaMIC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "example data",
        "parent_header": [
          "metaMIC: Reference-free Misassembly Identification and Correction of metagenomic assemblies",
          "Example"
        ],
        "type": "Text_excerpt",
        "value": "- R.sphaeroides_pileup.out\n- R.sphaeroides.bam\n- velvet_ctg.fasta\n\n```\ncd example\nsh download.sh\nmetaMIC extract_feature --pileup R.sphaeroides_pileup.out --bam R.sphaeroides.bam -c velvet_ctg.fasta -m single -o test\nmetaMIC predict -c velvet_ctg.fasta -o test -m single\n```\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/ZhaoXM-Lab/metaMIC/main/README.md",
      "technique": "header_analysis"
    }
  ]
}