{
  "application_domain": [
    {
      "confidence": 46.52,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/odb9402/CNNPeaks"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-02-02T07:36:47Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-12-07T16:38:01Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "The ChIP-Seq peak calling algorithm using convolution neural networks"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9758638466735867,
      "result": {
        "original_header": "Labeled data",
        "type": "Text_excerpt",
        "value": "CNN-peaks uses labeled data which has its format. All these approaches that use labeled data for marking are from [1]. Examples of labeled data are as the below. (It based on ASCII) \nIn line 1, **peaks**, this means that cell K562 at least has one peak in a region (chr1:1,000,000-1,100,000). In line 2, 3,**peakStart, peakEnd**,  it means that cell K562 just only one peak in the regions. In line 4, there is no peak in those regions about K562 or other cells because there is no matched cell line name at this raw. If you want to use this label data on other cells,  all these line 1-4 mean **noPeak** because there is no cell name in the lines.  If you want to know specific rules or methods of this labeling work, please look [here.](https://academic.oup.com/bioinformatics/article/33/4/491/2608653/Optimizing-ChIP-seq-peak-detectors-using-visual)\n \n"
      },
      "source": "https://raw.githubusercontent.com/odb9402/CNNPeaks/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9481318437455742,
      "result": {
        "original_header": "Output format of CNN-Peaks",
        "type": "Text_excerpt",
        "value": "The output format of CNN-Peaks follows regular .bed format which is tab delimited. 1 to 5`th columns is same with a regular bed file format that can be displayed in an annotation track for visualization tools such as UCSC genome browser and IGV. \nField of CNN-Peaks output format is: \n1. **Chromosome** \u2013 The name of chromosome\n2. **Chromosome Start** \u2013 The starting position of features in the chromosome.\n3. **Chromosome End** \u2013 The ending position of the feature in the chromosome.\n4. **Name** \u2013 The randomly generated string of the peak.\n5. **Score** \u2013 The score of peak signals determined by column 6 and 9.\n6. **Score2** \u2013 The score of peak signals determined by column 6 and 8.\n7. **Sigmoid activation value** \u2013 The sigmoid activation value of the peak from CNN-Peaks model output.\n8. **P-value (Avg)** \u2013 Average p-value in the peak region on Poisson distribution with a window.\n9. **P-value (Min)** \u2013 Minimum p-value in the peak region on Poisson distribution with a window. \n"
      },
      "source": "https://raw.githubusercontent.com/odb9402/CNNPeaks/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9527044536761492,
      "result": {
        "original_header": "Using pre-trained models",
        "type": "Text_excerpt",
        "value": "The pre-trained CNN-Peaks model is available.  You do not have to train your model if you use this well-tuned model. To use the model, you just have to move \"models\" directory into your CNN-Peaks working directory which is outer most directory of CNN-Peaks. \n"
      },
      "source": "https://raw.githubusercontent.com/odb9402/CNNPeaks/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9212006780730773,
      "result": {
        "original_header": "1. <a href=\"http://pnumlb.ml:8080/alphaModel_.tar\">Alpha</a>",
        "type": "Text_excerpt",
        "value": "The Alpha model had been trained with 2997 genomic segments with narrow histone modifications such as H3K4me3 and small amounts of transcription factors such as MAX. Note that it has 50 threshold outputs.\n \n"
      },
      "source": "https://raw.githubusercontent.com/odb9402/CNNPeaks/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.97566795222378,
      "result": {
        "original_header": "2. <a href=\"http://pnumlb.ml:8080/betaModel_.tar\">Beta</a>",
        "type": "Text_excerpt",
        "value": "The Beta model had been trained with 3294 genomic segments with narrow histone modifications such as H3K4me3 and small amounts of transcription factors such as MAX. In addition, to give variaty for the model, it contains 297 ATAC-Seq genomic segments. Note that it has 10 threshold outputs. \n"
      },
      "source": "https://raw.githubusercontent.com/odb9402/CNNPeaks/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/odb9402/CNNPeaks/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/odb9402/CNNPeaks/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "odb9402/CNNPeaks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/odb9402/CNNPeaks/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/odb9402/CNNPeaks/master/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/odb9402/CNNPeaks/master/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/odb9402/CNNPeaks/master/install.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/odb9402/CNNPeaks/master/build.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/odb9402/CNNPeaks/master/scripts/filteringPeaks.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/odb9402/CNNPeaks/master/peakCalling/bamdepth/build.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/odb9402/CNNPeaks/master/dependencies/install_samtools.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/odb9402/CNNPeaks/master/dependencies/nvidia-docker_install.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/odb9402/ConvPeaks/master/CNNpeaks.png"
      },
      "source": "https://raw.githubusercontent.com/odb9402/CNNPeaks/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "0. Overview",
        "parent_header": [
          "Install"
        ],
        "type": "Text_excerpt",
        "value": "You can prepare to use CNN-Peaks via running a script \"install.sh\" in the CNN-Peaks directory.\n\n> ```\n> chmod 775 install.sh\n> ./install.sh\n> ```\n\nIf you want to GPU-accelerated CNN-Peaks, please check [\"GPU-accelerated CNN-Peaks\"](https://github.com/odb9402/ConvPeaks#4-gpu-accelerated-cnn-peaks)\n\nDetails of the install are below ( you do not have to follow these descriptions since install.sh work well ):\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/odb9402/CNNPeaks/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Python packages",
        "parent_header": [
          "Install"
        ],
        "type": "Text_excerpt",
        "value": "CNN-Peaks needs Python higher than 3.x. CNN-Peaks requires several Python packages including Tensorflow. \n\n> **Required Python packages:**\n>\n> - numpy\n> - scipy\n> - sklearn\n> - tensorflow==1.X.X\n> - pandas\n> - progressbar2\n> - pysam\n>\n> **Install with pip**\n>\n> ```\n> pip install numpy scipy sklearn tensorflow pandas progressbar2 pysam tensorflow-gpu\n> ```\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/odb9402/CNNPeaks/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Samtools (htslib)",
        "parent_header": [
          "Install"
        ],
        "type": "Text_excerpt",
        "value": "If you do not have samtools which is higher than 1.7 version you should install it.\n\n> **Install samtools 1.8 :**\n>\n> ```\n> cd dependencies\n> ./install_samtools.sh\n> ```\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/odb9402/CNNPeaks/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3. Extern modules of CNN-Peaks",
        "parent_header": [
          "Install"
        ],
        "type": "Text_excerpt",
        "value": "After installing required Python packages and samtools ( htslib ) with above scripts, CNN-Peaks have to compile C, Cython extern modules using the below script:\n\n> ```\n> ./build.sh\n> ```\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/odb9402/CNNPeaks/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4. GPU-accelerated CNN-Peaks",
        "parent_header": [
          "Install"
        ],
        "type": "Text_excerpt",
        "value": "Note that if you want to GPU accelerated CNN-Peaks, your tensorflow should be configured to use GPU. Please check [here](https://www.tensorflow.org/install/gpu) for a description to configure GPU support for CNN-Peaks.\n\n\n\n\n\n## Install with Docker\n\nYou can build Docker image if you want to run CNN-peaks on your Docker container. However, you might use Nvidia-docker as long as you use our Dockerfile.\n\n------\n"
      },
      "source": "https://raw.githubusercontent.com/odb9402/CNNPeaks/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8493844938427485,
      "result": {
        "original_header": "Filtering the peak calling result",
        "type": "Text_excerpt",
        "value": "> ```\n> [filteringPeaks.sh -o<options> -t <threshold> -i <input> > <output>]\n> ``` \n"
      },
      "source": "https://raw.githubusercontent.com/odb9402/CNNPeaks/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/odb9402/CNNPeaks/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "atac-seq, bioinformatics, chip-seq, cnn-model, convolutional-neural-network, docker-image, gpu, ngs-analysis, nvidia-docker, peak-calling, progressbar2, samtools, tensorflow"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2019 Dongpin Oh\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/odb9402/CNNPeaks/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CNNPeaks"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "odb9402"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 123735,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 13320,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 4662,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 2449,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Batchfile",
        "size": 24,
        "type": "Programming_language",
        "value": "Batchfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/odb9402/CNNPeaks/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 13:47:21",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 13
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick start",
        "type": "Text_excerpt",
        "value": "Install for CNN-Peaks:\n\n\n\n\n\nExamples of CNN-peaks command:\n\n> **preprocessing:**\n>\n> `python CNNpeaks -m preprocess -i testdir/`\n>\n> **CNN model building:**\n>\n> `python CNNpeaks -m buildModel -i testdir/`\n>\n> **peak calling with trained model:**\n>\n> `python CNNpeaks -m peakCall -i myOwnChIPSeq.bam`\n\n\n\nNote that you can use pre-trained models for CNN-Peaks calling.  Please check [\"Using pre-trained models\"](https://github.com/odb9402/ConvPeaks#using-pre-trained-models) for details. \n\n> **peak calling with trained model:**\n>\n> `python CNNpeaks -m peakCall -i myOwnChIPSeq.bam`\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/odb9402/CNNPeaks/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "**1. Training data to build a CNN-peaks model.**",
        "parent_header": [
          "Usage of CNN-peaks"
        ],
        "type": "Text_excerpt",
        "value": "Before you try to call peaks with your ChIP-Seq Data, CNN-peaks model should be trained by the internal module in CNN-peaks. CNN-peaks gives **preprocessing** module for generating actual training data samples with labeled data and bam alignment files of them. You can use our labeled data sample or use your own labeled data to generate training data. When you use its preprocessing module, the input of the module is a single directory which includes labeled data and bam files. For example, a directory which has name \"./TestPreProcess\" includes these files:\n\n> **preprocessing:**\n>\n> python CNNpeaks -m preprocess -i TestPreProcess\n\n> **./TestPreProcess:**\n\n> - H3K36me3_None.txt \n> - H3K36me3_K562.bam\n> - H3K36me3_A549.bam\n\nEach file must follow a format of the filename that is **Target_CellName.bam**. The case of labeled data, it must be like this: **Target_AnyString.txt**. The labeled data of this example H3K36me3_None.txt has data which includes both K562 and A549.\nAs a result, directories that include labeled data, reference gene data and read depth data are generated.\n\n> **./TestPreProcess:**\n\n> - H3K36me3_None.txt \n> - H3K36me3_K562.bam\n> - H3K36me3_A549.bam\n> - H3K36me3_K562 (directory)\n> - H3K36me3_A549 (directory)\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/odb9402/CNNPeaks/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "**2. Build CNN-peaks model with preprocessed data**",
        "parent_header": [
          "Usage of CNN-peaks"
        ],
        "type": "Text_excerpt",
        "value": "After you created your training data with our **preprocess** module, you can build CNN-peaks model by using our **buildModel** module. Results of running the module include visualization of peak predictions about test data, train and test sensitivity and specificity during the training process and trained models in a \"models\" directory. You can check those visualization results and saved tensorflow variables at the \"models\" directory in a path of CNNpeaks.\n\n\n\n> **CNN model building:**\n>\n> python CNNpeaks -m buildModel -i testdir/\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/odb9402/CNNPeaks/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "**3. Peak calling with the trained model**",
        "parent_header": [
          "Usage of CNN-peaks"
        ],
        "type": "Text_excerpt",
        "value": "If you finish building your CNNpeaks model, **buildModel** module generated 'k' numbers of saved tensorflow variables. All you have to do is just pick your saved model number and bam alignment file as an input of peak calling.\n\n> **peak calling with trained model**\n>\n> python CNNpeaks -m peakCall -i myOwnChIPSeq.bam\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/odb9402/CNNPeaks/master/README.md",
      "technique": "header_analysis"
    }
  ]
}