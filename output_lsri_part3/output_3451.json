{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "sraX"
        ],
        "type": "Text_excerpt",
        "value": "Panunzi LG, [sraX: a novel comprehensive resistome analysis tool](https://www.frontiersin.org/articles/10.3389/fmicb.2020.00052/abstract), submitted to _Frontiers in Microbiology_ for publication.\n"
      },
      "source": "https://raw.githubusercontent.com/lgpdevtools/srax/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "References.",
        "parent_header": [
          "sraX"
        ],
        "type": "Text_excerpt",
        "value": "[1] Altschul SF _et al._ (1990). Basic local alignment search tool. _JMB_, 215, 403\u2013410.\n\n[2] Buchfink B, Xie C & Huson DH (2015). Fast and sensitive protein alignment using DIAMOND. _Nature Methods_ 12, 59-60.\n\n[3] Edgar RC (2004) MUSCLE: multiple sequence alignment with high accuracy and high throughput. _Nucleic Acids Res._ 32(5):1792-1797.\n\n[4] Katoh _et al._ (2002). Mafft: a novel method for rapid multiple sequence alignment based on fast fourier transform. _Nucleic acids research_ 30, 3059\u20133066.\n\n[5] Sievers F. _et al._ (2011). Fast, scalable generation of high-quality protein multiple sequence alignments using clustal omega. _Molecular systems biology_ 7, 539.\n\n[6] R Core Team (2013). R: A Language and Environment for Statistical Computing.\n\n[7] Wickham H, Romain Francois R, Henry L and M\u00fcller K (2017). dplyr: A Grammar of Data Manipulation.\n\n[8] Wickham H (2016). ggplot2: Elegant Graphics for Data Analysis. _Springer-Verlag New York_.\n\n[9] Auguie B, Antonov A and Auguie MB (2016).\n\n"
      },
      "source": "https://raw.githubusercontent.com/lgpdevtools/srax/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/lgpdevtools/sraX"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-12-15T20:18:22Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-07-17T09:56:24Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Systematic resistome analysis"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "parent_header": [
          "sraX"
        ],
        "type": "Text_excerpt",
        "value": "__sraX__ is designed to read assembled sequence files in FASTA format and\nsystematically detect the presence of AMR determinants and, ultimately, describe\nthe repertoire of antibiotic resistance genes (ARGs) within a collection of\ngenomes (the __\u201cresistome\u201d analysis__). The following assignments are fully\nautomated:\n- creation and compilation of a local AMR database (DB) using public or\n  proprietary repositories\n- accurate identification of AMR determinants (ARGs or SNPs presence) in a non-redundant manner\n- detection of putative new variants through the SNP analysis\n- calculation and graphical representation of drug classes and type of mutated loci\n- in-depth gene context exploration\n\nThe results are presented in fully navigable HTML-formatted files with embedded\nplots of previously mentioned analysis.\n\nWorkflow schematic:\n\n<p align=\"center\">\n\t<img src=\"https://zenodo.org/record/3582769/files/workflow.png?download=1\" alt=\"sraX's workflow\" width=\"650\"/>\n</p>\n"
      },
      "source": "https://raw.githubusercontent.com/lgpdevtools/srax/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9873992054753409,
      "result": {
        "original_header": "sraX",
        "type": "Text_excerpt",
        "value": "The proposed tool constitutes a Perl package, composed of functional modules, that allows performing a one-step accurate resistome analysis of assembled sequence data from FASTA files. \n"
      },
      "source": "https://raw.githubusercontent.com/lgpdevtools/srax/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8847763135077538,
      "result": {
        "original_header": "Content",
        "type": "Text_excerpt",
        "value": "  * [Introduction](#introduction)\n  * [Installation](#installation)\n    * [Required dependencies](#required-dependencies)\n  * [Usage](#usage) --> Follow this comprehensive [Tutorial](https://github.com/lgpdevtools/sraX/blob/master/Tutorial.md)\n    * [Minimal command](#minimal-command)\n    * [Extended options](#extended-options)\n  * [License](#license)\n  * [Feedback/Issues](#feedbackissues)\n  * [Citation](#citation)\n \n"
      },
      "source": "https://raw.githubusercontent.com/lgpdevtools/srax/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8915832382670306,
      "result": {
        "original_header": "About",
        "type": "Text_excerpt",
        "value": "**sraX** is developed by Leonardo G. Panunzi.\n \n"
      },
      "source": "https://raw.githubusercontent.com/lgpdevtools/srax/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/lgpdevtools/srax/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/lgpdevtools/sraX/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "lgpdevtools/sraX"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "sraX"
      },
      "source": "https://raw.githubusercontent.com/lgpdevtools/srax/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lgpdevtools/srax/master/install_srax.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://zenodo.org/record/3582769/files/workflow.png?download=1"
      },
      "source": "https://raw.githubusercontent.com/lgpdevtools/srax/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "sraX"
        ],
        "type": "Text_excerpt",
        "value": "***A) Bioconda / [Conda package](https://anaconda.org/lgpdevtools/srax) package:***\n\nExecute the following command:\n\n```\nconda install srax\n```\nor\n\n```\nconda install -c lgpdevtools srax\n```\n\nVerify the appropriate installation by running:\n\n```\nsraX -v\n```\n\n\n***B) [Docker image](https://hub.docker.com/r/lgpdevtools/srax):***\n\nExecute the following command:\n\n```\ndocker pull lgpdevtools/srax\n```\n\nIn order to check the appropriate running state of the image file:  \n\n```\nsudo docker run -it lgpdevtools/srax -v\n```\n\n***C) Local installation:***\n\n**sraX** has the following dependencies:\n\n"
      },
      "source": "https://raw.githubusercontent.com/lgpdevtools/srax/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9868196396397897,
      "result": {
        "original_header": "Feedback/Issues",
        "type": "Text_excerpt",
        "value": "Please report any issues to the [issues page](https://github.com/lgpdevtools/sraX/issues) or email lgpanunzi@gmail.com\n \n"
      },
      "source": "https://raw.githubusercontent.com/lgpdevtools/srax/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/lgpdevtools/sraX/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "GNU General Public License v3.0",
        "spdx_id": "GPL-3.0",
        "type": "License",
        "url": "https://api.github.com/licenses/gpl-3.0",
        "value": "https://api.github.com/licenses/gpl-3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "sraX"
        ],
        "type": "Text_excerpt",
        "value": "**sraX** is free software, licensed under [GPLv3](https://github.com/lgpdevtools/sraX/blob/master/LICENSE).\n"
      },
      "source": "https://raw.githubusercontent.com/lgpdevtools/srax/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://zenodo.org/record/3582769/files/sraX_logo_v2.png?download=1"
      },
      "source": "https://raw.githubusercontent.com/lgpdevtools/srax/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "sraX"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "lgpdevtools"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 117309,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 29703,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 15407,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lgpdevtools/srax/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "lgpdevtools",
          "type": "User"
        },
        "date_created": "2020-02-05T15:14:06Z",
        "date_published": "2020-02-05T15:48:47Z",
        "html_url": "https://github.com/lgpdevtools/sraX/releases/tag/1.5",
        "release_id": 23414927,
        "tag": "1.5",
        "tarball_url": "https://api.github.com/repos/lgpdevtools/sraX/tarball/1.5",
        "type": "Release",
        "url": "https://api.github.com/repos/lgpdevtools/sraX/releases/23414927",
        "value": "https://api.github.com/repos/lgpdevtools/sraX/releases/23414927",
        "zipball_url": "https://api.github.com/repos/lgpdevtools/sraX/zipball/1.5"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "*Dependencies*",
        "parent_header": [
          "sraX",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "**1.** Though **sraX** is fully written in Perl and should work with any OS, it\nhas only been tested with a 64-bit Linux distribution.\n\n**2.** Perl version 5.26.x or higher. You can verify on your own computer by\ntyping the following command in a bash terminal:\n```\nperl -h\n```\nThe latest version of Perl can be obtained from the [official\nwebsite](http://www.perl.org). Consult the installation guide.\n\n- The following Perl libraries are also required and can be installed using [CPAN](http://www.cpan.org):\n\t- LWP::Simple\n\t- Data::Dumper\n\t- JSON\n\t- File::Slurp\n\t- FindBin\n\t- Cwd\n\n **3.** Third-party software\n * [BLAST (v2.9.0)](https://blast.ncbi.nlm.nih.gov/Blast.cgi?CMD=Web&PAGE_TYPE=BlastDocs&DOC_TYPE=Download) [[1]](#references)\n * [DIAMOND (v0.9.29)](http://github.com/bbuchfink/diamond/) [[2]](#references)\n * [MUSCLE](http://www.drive5.com/muscle/) [[3]](#references)\n * [MAFFT (v7.450)](https://mafft.cbrc.jp/alignment/software/) [[4]](#references)\n * [CLUSTAL \u03a9 (v1.2.4)](http://www.clustal.org/omega/) [[5]](#references) \n * [R (v.3.6.1)](http://www.r-project.org/) [[6]](#references), plus the following packages:\n * [`dplyr`](https://cran.r-project.org/web/packages/dplyr/) [[7]](#references)\n * [`ggplot2`](https://cran.r-project.org/web/packages/ggplot2/) [[8]](#references)\n * [`gridExtra`](https://cran.r-project.org/web/packages/gridExtra/) [[9]](#references)\n \n__NOTE:__ The bash script '`install_srax.sh`' is provided, in order to confirm\nthe existence of these dependencies in your computer. If any of them would be\nmissing, the bash script will guide you for a proper installation.\n\nTo successfully install **sraX**, please see the details provided below. If you\nencounter an issue during the process, please contact your local system\nadministrator. If you encounter a bug please log it\n[here](https://github.com/lgpdevtools/sraX/issues) or email me at\nlgpanunzi@gmail.com\n\nOpen a bash terminal and clone the repository:\n```\ngit clone https://github.com/lgpdevtools/sraX.git\n```\nTo verify the existence of required dependencies and ultimately install the perl\nmodules composing sraX, inside the cloned repository run:\n```\nsudo bash install_srax.sh\n```"
      },
      "source": "https://raw.githubusercontent.com/lgpdevtools/srax/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 12:48:27",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 10
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage:",
        "parent_header": [
          "sraX"
        ],
        "type": "Text_excerpt",
        "value": "**sraX** effectively operates as one-step application. It means that just a\nsingle command is required to obtain the totality of results and their\nvisualization.   \n\n__NOTE:__ For a detailed explanation and examples from real datasets, please\nfollow the\n[Tutorial.](https://github.com/lgpdevtools/sraX/blob/master/Tutorial.md)\n"
      },
      "source": "https://raw.githubusercontent.com/lgpdevtools/srax/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Parameters",
        "parent_header": [
          "sraX",
          "Usage:"
        ],
        "type": "Text_excerpt",
        "value": "```\nUsage:\n  -i|input\t<Mandatory: input genome directory>\n  -o|output\t<Optional: name of output folder>\n  -db|dbsearch\t<Optional: the level of the ARG search, based on the employed reference AMR DBs (default: basic)>\n  -s|seqal  \t<Optional: algorithm for aligning the query genome to the reference AMR DB (default: dblastx)>\n  -a|msa\t<Optional: algorithm for producing the MSA files (default: muscle)>\n  -e|eval    \t<Optional: evalue cut-off to filter false positives (default: 1e-05)>\n  -c|aln_cov    <Optional: fraction of aligned query to the reference sequence (default: 60)>\n  -id      \t<Optional: sequence identity percentage cut-off to filter false positives (default: 85)>\n  -u|user_sq\t<Optional: input private AMR DB>\n  -t|threads    <Optional: number of threads to use (default: 6)>\n  -v|version\t<print current version>\n  -d|debug\t<Optional: print verbose output for debugging (default: No)>\n  -h|help       <print this message>\n```"
      },
      "source": "https://raw.githubusercontent.com/lgpdevtools/srax/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Minimal command",
        "parent_header": [
          "sraX",
          "Usage:"
        ],
        "type": "Text_excerpt",
        "value": "Example usage:\n```\nsraX -i [/path/to/input_genome_directory]\n```\nWhere:\n```\n-i\tFull path to the mandatory directory containing the input sequence data, which must\n\tbe in FASTA format and consisting of individual assembled genome sequences.\n```\n"
      },
      "source": "https://raw.githubusercontent.com/lgpdevtools/srax/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Extended options",
        "parent_header": [
          "sraX",
          "Usage:"
        ],
        "type": "Text_excerpt",
        "value": "Example usage:\n```\nsraX -a mafft -db ext -s blastx -id 95 -c 90 -t 12 -o [/path/to/output_results_directory] -i [/path/to/input_genome_directory]\n```\n\n**Docker-based:**\n\n```\nsudo docker run --rm -v $(pwd)/[/path/to/input_genome_directory]:/IN lgpdevtools/srax -i IN\n```\n\nWith further options:\n```\nsudo docker run --rm -v $(pwd)/[/path/to/input_genome_directory]:/IN \\\n-v $(pwd)/[/path/to/output_results_directory]:/OUT \\\nlgpdevtools/srax -a mafft -db ext -s blastx -id 95 -c 90 -t 12 -i IN -o OUT\n```\n\nWhere:\n```\n  Mandatory:\n  ----------\n\n  -i|input\tInput directory [/path/to/input_dir] containing the input file(s), which\n\t\tmust be in FASTA format and consisting of individual assembled genome sequences.\n\n  Optional:\n  ---------\n\n  -o|output\tDirectory to store obtained results [/path/to/output_dir]. While not\n\t\tprovided, the following default name will be taken:\n\n\t\t'input_directory'_'sraX'_'id'_'aln_cov'_'seqal'\n\n\t\tExample:\n\t\t--------\n\t\t\tInput directory: 'Test'\n\t\t\tOptions: -id 85; -c 95; -p dblastx\n\t\t\tOutput directory: 'Test_sraX_85_95_dblastx'\n\n  -s|seqal\tThe preferred algorithm for aligning the assembled genome(s) to a locally\n\t\tcompiled AMR DB. The possible choices are: 'dblastx' (DIAMOND blastx) or 'blastx'\n\t\t(NCBI blastx). In any case, the process is parallelized (up to 100 genome files are\n\t\trun simultaneously) for reducing computing times. [string] Default: dblastx\n\n  -a|msa\tThe preferred algorithm for producing the alignment of clustered homologous\n\t\tsequences (multiple-sequence files). The possible choices are: 'muscle', 'clustalo'\n\t\tor 'mafft'. [string] Default: muscle\n\t\tNote: The accuracy and computing times are both dependent on the selected algorithm.\n\n  -e|eval\tMinimum evalue cut-off to filter false positives. [number] Default: 1e-05\n\n  -id\t\tMinimum identity cut-off to filter false positives. [number] Default: 85\n\n  -c|aln_cov\tMinimum length of the query which must align to the reference sequence.\n\t\t[number] Default: 60\n\n  -db|dbsearch\tThe level of the ARG search, on account of the number and type of employed AMR DB.\n\t\tThe possible choices are: 'basic' or 'ext' / 'extensive'. The\n\t\t'basic' option only applies 'CARD', while the 'ext' option utilizes as well the\n\t\t'ARGminer' (compilation of multiple AMR DBs) and 'BACMET'\n\t\t(biocides and metal resistance) repositories. [string] Default: basic\n\n\t\tNote: In operational terms, the extensive search ('ext' option) takes much longer\n\t\tcomputing times. \n\n  -u|user_sq    Customary AMR DB provided by the user. The sequences must be in FASTA format.\n\n  -t|threads\tNumber of threads when running sraX. [number] Default: 6\n\n  -h|help\tDisplays this help information and exits.\n\n  -v|version\tDisplays version information and exits.\n\n  -d|debug\tVerbose output (for debugging).\n\n```\n"
      },
      "source": "https://raw.githubusercontent.com/lgpdevtools/srax/master/README.md",
      "technique": "header_analysis"
    }
  ]
}