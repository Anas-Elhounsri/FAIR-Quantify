{
  "application_domain": [
    {
      "confidence": 4.87,
      "result": {
        "type": "String",
        "value": "Audio"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "3. Generate index files for reference genome (FASTA) files",
        "parent_header": [
          "Step by step tutorial"
        ],
        "type": "Text_excerpt",
        "value": "```\ncd T03_build_bowtie2_index\nbowtie2-build --threads 8 ../data/bowtie2_index_2.3.5.1/GRCh38.primary_assembly.genome.fa GRCh38.primary_assembly.genome\n```\n"
      },
      "source": "https://raw.githubusercontent.com/shengqh/cpdseqer/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "13. Compare UV radiation damage of sample(s) against the reference genome background",
        "parent_header": [
          "Step by step tutorial"
        ],
        "type": "Text_excerpt",
        "value": "```\nusage: cpdseqer uv_comp_genome [-h] -i [INPUT] [--count_type [{rCnt,sCnt}]] -o\n                               [OUTPUT] [-g [GENOME]] [-s [SIZE_FACTOR_FILE]]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i [INPUT], --input [INPUT]\n                        Input count list file, first column is file location,\n                        second column is file name\n  --count_type [{rCnt,sCnt}]\n                        Input count type, rCnt/sCnt (read count/site count,\n                        default rCnt)\n  -o [OUTPUT], --output [OUTPUT]\n                        Output file prefix\n  -g [GENOME], --genome [GENOME]\n                        Input reference genome, hg38/hg19/saccer3 (default\n                        hg38)\n  -s [SIZE_FACTOR_FILE], --size_factor_file [SIZE_FACTOR_FILE]\n                        Input size factor file for normalization\n```\n\nFor example, \n\n```\ncd T13_uv_comp_genome\ncpdseqer uv_comp_genome -i count.list -o uv_comp_genome -g hg38 --count_type sCnt -s ../data/chrom_dinucleotide.sizefactor.txt\n```\n\nThe [count.list](https://cqsweb.app.vumc.org/Data/cpdseqer/T13_uv_comp_genome/count.list) contains two columns indicate dinucleotide count file and sample name (separated by tab).\n\n|||\n|---|---|\n|../data/Control.count|Control|\n|../data/UV.count|UV|\n"
      },
      "source": "https://raw.githubusercontent.com/shengqh/cpdseqer/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "14. Compare UV damage of sample(s) against reference genome background within a  specific region type",
        "parent_header": [
          "Step by step tutorial"
        ],
        "type": "Text_excerpt",
        "value": "```\nusage: cpdseqer uv_comp_genome_region [-h] -i [INPUT] [-c [COORDINATE_FILE]]\n                                      [--space] [--add_chr] [-f [FASTA]]\n                                      [--count_type [{rCnt,sCnt}]] -o [OUTPUT]\n                                      [-s [SIZE_FACTOR_FILE]]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i [INPUT], --input [INPUT]\n                        Input dinucleotide list file, first column is file\n                        location, second column is file name\n  -c [COORDINATE_FILE], --coordinate_file [COORDINATE_FILE]\n                        Input coordinate bed file (can use short name\n                        hg38/hg19 as default nucleosome file)\n  --space               Use space rather than tab in coordinate file\n  --add_chr             Add chr to chromosome name in coordinate file\n  -f [FASTA], --fasta [FASTA]\n                        Input reference genome fasta file\n  --count_type [{rCnt,sCnt}]\n                        Input count type, rCnt/sCnt (read count/site count,\n                        default rCnt)\n  -o [OUTPUT], --output [OUTPUT]\n                        Output file prefix\n  -s [SIZE_FACTOR_FILE], --size_factor_file [SIZE_FACTOR_FILE]\n                        Input size factor file for normalization\n```\n\nFor example,\n\n```\ncd T14_uv_comp_genome_region\ncpdseqer uv_comp_genome_region \\\n  -i dinucleotide.list \\\n  -f ../data/bowtie2_index_2.3.5.1/GRCh38.primary_assembly.genome.fa \\\n  -c ../data/nucleosome_hg38_interval.txt \\\n  -o uv_comp_genome_region \\\n  --space  \\\n  -s ../data/chrom_dinucleotide.sizefactor.txt\n```\n"
      },
      "source": "https://raw.githubusercontent.com/shengqh/cpdseqer/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/shengqh/cpdseqer"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-11-21T19:45:24Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-07-27T08:55:22Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CPD sequencing data analysis"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9961537545735405,
      "result": {
        "original_header": "CPDSeqer",
        "type": "Text_excerpt",
        "value": "This package is used to do CPD sequence data analysis.\n \n"
      },
      "source": "https://raw.githubusercontent.com/shengqh/cpdseqer/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/shengqh/cpdseqer/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/shengqh/cpdseqer/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "shengqh/cpdseqer"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CPDSeqer"
      },
      "source": "https://raw.githubusercontent.com/shengqh/cpdseqer/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/shengqh/cpdseqer/master/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/shengqh/cpdseqer/master/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/shengqh/cpdseqer/master/scripts/debug_uv_comp_genome.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/shengqh/cpdseqer/master/scripts/debug_multiqc.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/shengqh/cpdseqer/master/scripts/debug_dinucleotide2bincount.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/shengqh/cpdseqer/master/scripts/debug_report.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/shengqh/cpdseqer/master/scripts/debug_uv_comp_genome_region.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/shengqh/cpdseqer/master/scripts/upload.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/shengqh/cpdseqer/master/scripts/debug_position.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/shengqh/cpdseqer/master/scripts/test.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/shengqh/cpdseqer/master/scripts/debug_singleqc.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/shengqh/cpdseqer/master/scripts/debug_fasta2count.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/shengqh/cpdseqer/master/scripts/uninstall.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "Install CPD-seq protocol package in Ubuntu with the following command:\n\n```\nsudo pip3 install git+git://github.com/shengqh/cpdseqer.git\n```\n\nIf you don't have pip installed, you need to install pip first.\n\n```\ncurl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\nsudo python get-pip.py\n```\n"
      },
      "source": "https://raw.githubusercontent.com/shengqh/cpdseqer/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8373104327994562,
      "result": {
        "original_header": "Table of Contents",
        "type": "Text_excerpt",
        "value": "1. [Prerequisites](#Prerequisites)\n2. [Installation](#Installation)\n3. [Step by step tutorial](#step-by-step-tutorial)\n    1. [(Optional) Demultiplex fastq file](#1-optional-demultiplex-fastq-file)\n    2. [General QC](#2-general-qc)\n    3. [Generate index files for reference genome (FASTA) files](#3-generate-index-files-for-reference-genome-fasta-files)\n    4. [Align reads to genome using bowtie2](#4-align-reads-to-genome-using-bowtie2)\n    5. [(Optional) Correct GC content bias](#5-optional-correct-gc-content-bias)\n    6. [Count UV radiation induced DNA damage](#6-count-uv-radiation-induced-dna-damage)\n    7. [(Optional) Generate text files to inform estimated lesions along chromosomes](#7-optional-generate-text-files-to-inform-estimated-lesions-along-chromosomes)\n    8. [(Optional) Subtract out short tandem repeat regions or narrow down to the interested gnomic regions](#8-optional-subtract-out-short-tandem-repeat-regions-or-narrow-down-to-the-interested-gnomic-regions)\n    9. [(Optional) Estimate sample-wise normalization factors](#9-optional-estimate-sample-wise-normalization-factors)\n    10. [Quality control](#10-quality-control)\n    11. [Generate a genome-wide UV damage distribution map](#11-generate-a-genome-wide-uv-damage-distribution-map)\n    12. [Draw dinucleotide pileup figure in a specific genomic region type](#12-draw-dinucleotide-pileup-figure-in-a-specific-genomic-region-type)\n    13. [Compare UV radiation damage of sample(s) against the reference genome background](#13-compare-uv-radiation-damage-of-samples-against-the-reference-genome-background)\n    14. [Compare UV damage of sample(s) against reference genome background within a specific region type](#14-compare-uv-damage-of-samples-against-reference-genome-background-within-a--specific-region-type)\n    15. [Compare UV damage between two regions for one or multiple samples](#15-compare-uv-damage-between-two-regions-for-one-or-multiple-samples)\n    16. [Compare genome-wide UV damage between two groups of samples](#16-compare-genome-wide-uv-damage-between-two-groups-of-samples)\n    17. [Compare UV damage between two groups of samples within a specific region type](#17-compare-uv-damage-between-two-groups-of-samples-within-a-specific-region-type)\n4. [Running cpdseqer using singularity](#running-cpdseqer-using-singularity)\n \n"
      },
      "source": "https://raw.githubusercontent.com/shengqh/cpdseqer/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/shengqh/cpdseqer/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2019 Quanhu Sheng\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/shengqh/cpdseqer/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "cpdseqer"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "shengqh"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 97855,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 40938,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 1874,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 1039,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/shengqh/cpdseqer/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "shengqh",
          "type": "User"
        },
        "date_created": "2020-03-03T18:42:50Z",
        "date_published": "2020-03-03T18:58:18Z",
        "html_url": "https://github.com/shengqh/cpdseqer/releases/tag/v0.1.3",
        "name": "cpdseqer",
        "release_id": 24183300,
        "tag": "v0.1.3",
        "tarball_url": "https://api.github.com/repos/shengqh/cpdseqer/tarball/v0.1.3",
        "type": "Release",
        "url": "https://api.github.com/repos/shengqh/cpdseqer/releases/24183300",
        "value": "https://api.github.com/repos/shengqh/cpdseqer/releases/24183300",
        "zipball_url": "https://api.github.com/repos/shengqh/cpdseqer/zipball/v0.1.3"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Prerequisites",
        "type": "Text_excerpt",
        "value": "Install Bowtie2 in Ubuntu with the following command: \n\n```\nsudo apt-get install -y bowtie2\n```\n\nInstall tabix in Ubuntu with the following command: \n\n```\nsudo apt-get install \u2013y tabix\n```\n\nInstall Samtools in Ubuntu with the following command:\n\n```\nwget https://github.com/samtools/samtools/releases/download/1.10/samtools-1.10.tar.bz2\ntar -jxvf samtools-1.10.tar.bz2\ncd samtools-1.10\n./configure\nmake\nsudo make install\n```\n\nInstall bedtools in Ubuntu with the following command:\n\n```\nsudo apt-get install -y bedtools\n```\n\nInstall Python 3.7 in Ubuntu. Most factory versions of Ubuntu18.04 and later come with python pre-installed.  To check if Python is installed and the Python version, use the following command: \n\n```\npython -version\n```\n\nIf Python is not installed or version is lower than 3.7, use the following commands in sequential order to install Python 3.7:\n\n```\nsudo apt update\nsudo apt install software-properties-common\nsudo add-apt-repository ppa:deadsnakes/ppa\nsudo apt update\nsudo apt install python3.7\n```\n\nInstall R packages in R\n\n```\ninstall.packages(c(\"knitr\",\"rmarkdown\", \"data.table\", \"R.utils\", \"ggplot2\", \"reshape2\"))\n\nif (!requireNamespace(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\n\nBiocManager::install(\"edgeR\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/shengqh/cpdseqer/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running cpdseqer using singularity",
        "type": "Text_excerpt",
        "value": "We also build docker container for cpdseqer which can be used by singularity.\n"
      },
      "source": "https://raw.githubusercontent.com/shengqh/cpdseqer/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running directly",
        "parent_header": [
          "Running cpdseqer using singularity"
        ],
        "type": "Text_excerpt",
        "value": "```\nsingularity exec -e docker://shengqh/cpdseqer bowtie2 -h\nsingularity exec -e docker://shengqh/cpdseqer cpdseqer -h\n```\n"
      },
      "source": "https://raw.githubusercontent.com/shengqh/cpdseqer/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Convert docker image to singularity image first",
        "parent_header": [
          "Running cpdseqer using singularity"
        ],
        "type": "Text_excerpt",
        "value": "```\nsingularity build cpdseqer.simg docker://shengqh/cpdseqer\nsingularity exec -e cpdseqer.simg bowtie2 -h\nsingularity exec -e cpdseqer.simg cpdseqer -h\n```\n"
      },
      "source": "https://raw.githubusercontent.com/shengqh/cpdseqer/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 07:28:44",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Step by step tutorial",
        "type": "Text_excerpt",
        "value": "We provide example data and code for test. It requires 34G for downloading and additional 20G for testing. Remember to come back to folder cpdseqer after each step.\n\n```\nwget -r --no-parent --reject \"index.html*\" --reject-regex \"bed_files\" https://cqsweb.app.vumc.org/Data/cpdseqer/\ncd cqsweb.app.vumc.org/Data/cpdseqer/\n```\n"
      },
      "source": "https://raw.githubusercontent.com/shengqh/cpdseqer/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1. (Optional) Demultiplex fastq file",
        "parent_header": [
          "Step by step tutorial"
        ],
        "type": "Text_excerpt",
        "value": "If raw sequencing data in FASTQ format is multiplexed, it needs to be first de-multiplexed based on barcode sequence. Otherwise, skip to the next step. To de-multiplex a multiplexed FASTQ file, use the following command:\n\n```\nusage: cpdseqer demultiplex [-h] -i [INPUT] -o [OUTPUT] -b [BARCODE_FILE]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i [INPUT], --input [INPUT]\n                        Input fastq file (gzipped supported)\n  -o [OUTPUT], --output [OUTPUT]\n                        Output folder\n  -b [BARCODE_FILE], --barcode_file [BARCODE_FILE]\n                        Tab-delimited file, first column is barcode, second column is sample name\n```\n\nFor example:\n\n```\ncd T01_demultiplex/\ncpdseqer demultiplex -i ../data/example.fastq.gz -o . -b barcode.txt\n```\n\nThe [barcode.txt](https://cqsweb.app.vumc.org/Data/cpdseqer/data/barcode.txt) contains two columns indicate barcode and sample name (separated by tab).\n\n|||\n|---|---|\n|ATCGCGAT|Control|\n|GAACTGAT|UV|\n\nAn alternative method to perform demultiplex is using [Je](https://gbcs.embl.de/portal/tiki-index.php?page=Je).\n\n```\ncd T01_demultiplex/je\nje demultiplex F1=../../data/example.fastq.gz BF=barcode_je.txt O=.\n```\n\nThe [JE_BARCODEFILE](https://cqsweb.app.vumc.org/Data/cpdseqer/T01_demultiplex/je/barcode_je.txt) contains three columns indicate sample name, barcode and sample filename (separated by tab).\n\n||||\n|---|---|---|\n|Control|ATCGCGAT|Control.fastq.gz|\n|UV|GAACTGAT|UV.fastq.gz|\n"
      },
      "source": "https://raw.githubusercontent.com/shengqh/cpdseqer/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2. General QC",
        "parent_header": [
          "Step by step tutorial"
        ],
        "type": "Text_excerpt",
        "value": "Without going into detail, we recommend previously established methods such as FASTQC and QC3 for this general QC step.\n\n```\ncd T02_fastqc/\nfastqc -o . -t 1 --extract ../data/Control.fastq.gz\n```\n"
      },
      "source": "https://raw.githubusercontent.com/shengqh/cpdseqer/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4. Align reads to genome using bowtie2",
        "parent_header": [
          "Step by step tutorial"
        ],
        "type": "Text_excerpt",
        "value": "(A)\tIf sequencing data is single-end, use the following command:\n\n```\nbowtie2 -p [THREADS] -x [INDEX] -U [FASTQ] -S [SAM] | samtools sort \u2013o [OUTPUT] \u2013T [TEMP_PREFIX] [-@ [THREADS]] [\u2013m [MAX_MEMORY]]\n```\n(B)\tIf sequencing data is pair-end, use the following command:\n```\nbowtie2 -p [THREADS] -x [INDEX] -1 [FASTQ1] -2 [FASTQ2] \u2013S [SAM] | samtools sort \u2013o [OUTPUT] \u2013T [TEMP_PREFIX] [-@ [THREADS]] [\u2013m [MAX_MEMORY]]\n```\n\nFor example,\n\n```\ncd T04_bowtie2\nbowtie2 -p 8 -x ../data/bowtie2_index_2.3.5.1/GRCh38.primary_assembly.genome -U ../data/Control.fastq.gz | samtools sort -@ 8 -m 4G -o Control.bam -\nsamtools index Control.bam\n```\n"
      },
      "source": "https://raw.githubusercontent.com/shengqh/cpdseqer/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "5. (Optional) Correct GC content bias",
        "parent_header": [
          "Step by step tutorial"
        ],
        "type": "Text_excerpt",
        "value": "deepTools can be used to correct GC bias on bam file.\n```\n(i)\tcomputeGCBias -b [IN_BAM] \u2013g [GENOME] --effectiveGenomeSize [GENOME_SIZE] \u2013GCbiasFrequenciesFile [TEXT_OUT] [-p [THREADS]]\n(ii)\tcorrectGCBias -b [IN_BAM] \u2013o [OUT_BAM] \u2013g [GENOME] --effectiveGenomeSize [GENOME_SIZE]\u2013GCbiasFrequenciesFile [TEXT_OUT] [-p [THREADS]]\n```\n\nFor example,\n\n```\ncd T05_Correct_GC/T05_01_calc\ncomputeGCBias -p 8 -b ../../data/Control.bam --effectiveGenomeSize 2913022398 -g ../../data/hg38.2bit -l 200 --GCbiasFrequenciesFile control_freq.txt --biasPlot control.png\n\ncd ../T05_02_correct/\ncorrectGCBias -p 8 -b ../../data/Control.bam --effectiveGenomeSize 2913022398 -g ../../data/hg38.2bit --GCbiasFrequenciesFile ../T05_01_calc/control_freq.txt -o control.corrected.bam\n```\n"
      },
      "source": "https://raw.githubusercontent.com/shengqh/cpdseqer/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "6. Count UV radiation induced DNA damage",
        "parent_header": [
          "Step by step tutorial"
        ],
        "type": "Text_excerpt",
        "value": "This step completes raw data processing and generates important output files that will be required in multiple steps in the following workflow. \n\n```\nusage: cpdseqer bam2dinucleotide [-h] -i [INPUT] -g [FASTA] [-q [MAPPING_QUALITY]] [-m [MIN_COVERAGE]] [-u] [-t] -o [OUTPUT]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i [INPUT], --input [INPUT]\n                        Input BAM file\n  -g [FASTA], --fasta [FASTA]\n                        Input genome fasta file\n  -q [MAPPING_QUALITY], --mapping_quality [MAPPING_QUALITY]\n                        Minimum mapping quality of read (default 20)\n  -m MIN_COVERAGE, --min_coverage MIN_COVERAGE\n                        The minimum coverage of dinucleotide for counting (default 1)\n  -u, --unique_only     Use uniquely mapped read only\n  -t, --test            Test the first 1000000 reads only\n  -o [OUTPUT], --output [OUTPUT]\n                        Output file prefix\n```\n\nFor example:\n\n```\ncd T06_bam2dinucleotide\n\ncpdseqer bam2dinucleotide -i ../data/Control.bam -g ../data/bowtie2_index_2.3.5.1/GRCh38.primary_assembly.genome.fa -o Control\n```\n"
      },
      "source": "https://raw.githubusercontent.com/shengqh/cpdseqer/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "7. (Optional) Generate text files to inform estimated lesions along chromosomes",
        "parent_header": [
          "Step by step tutorial"
        ],
        "type": "Text_excerpt",
        "value": "(i)\tGenerate a binwise dinucleotide site summary based on the reference genome\n```\ncpdseqer fasta2bincount -i [INPUT_FA] [-b [BLOCK]] -o [OUTPUT]\n```\n(ii)\tGenerate a binwise dinucleotide read-count summary based on CPD read count information\n```\ncpdseqer dinucleotide2bincount -i [INPUT_DI] [-g [GENOME]] [-b [BLOCK]] -o [OUTPUT] \n```\n\nFor example,\n\n```\ncd T07_bincount/T07_01_fasta2bincount/\ncpdseqer fasta2bincount -i ../../data/bowtie2_index_2.3.5.1/GRCh38.primary_assembly.genome.fa -b 100000 -o GRCh38.b100000.txt\n```\n\nOnce you come back to cpdseqer folder,\n\n```\ncd T07_bincount/T07_02_dinucleotide2bincount/\ncpdseqer dinucleotide2bincount -i ../../data/Control.bed.bgz -g hg38 -b 100000 -o Control.b100000.txt\n```\n"
      },
      "source": "https://raw.githubusercontent.com/shengqh/cpdseqer/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "8. (Optional) Subtract out short tandem repeat regions or narrow down to the interested gnomic regions",
        "parent_header": [
          "Step by step tutorial"
        ],
        "type": "Text_excerpt",
        "value": "``` \ncpdseqer filter \u2013i [INPUT] \u2013c [COORDINATE] \u2013o [OUTPUT_PREFIX] [-m {subtract,intersect}]\n```\n\nFor example,\n\n```\ncd T08_filter\ncpdseqer filter -i ../data/Control.bed.bgz -c ../data/hg38_UTR3.bed.gz -m intersect -o Control.UTR3\ncpdseqer filter -i ../data/Control.bed.bgz -c ../data/hg38_UTR3.bed.gz -m subtract -o Control.noUTR3\n```\n"
      },
      "source": "https://raw.githubusercontent.com/shengqh/cpdseqer/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "9. (Optional) Estimate sample-wise normalization factors",
        "parent_header": [
          "Step by step tutorial"
        ],
        "type": "Text_excerpt",
        "value": "```\ncpdseqer size_factor -i [INPUT] -o [OUTPUT_PREFIX] [--calc_type {site_union,chrom_dinucleotide} }]\n```\n\nFor example,\n\n```\ncd T09_sizefactor\ncpdseqer size_factor -i dinucleotide.list --calc_type chrom_dinucleotide -o sf\n```\n"
      },
      "source": "https://raw.githubusercontent.com/shengqh/cpdseqer/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "10. Quality control",
        "parent_header": [
          "Step by step tutorial"
        ],
        "type": "Text_excerpt",
        "value": "QC based on dinucleotide count results can be performed using the following command:\n```\ncpdseqer qc [-h] -i [INPUT] -o [OUTPUT] [-n [NAME]] [--count_type {rCnt,sCnt}}] [-g [GENOME]] [-s [SIZE_FACTOR_FILE]]\n```\n```\nusage: cpdseqer qc [-h] -i [INPUT] [-n [NAME]] [--count_type [COUNT_TYPE]] -o [OUTPUT]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i [INPUT], --input [INPUT]\n                        Input list file, first column is file name, second column is count file path, third column is dinucleotide file path\n  -n [NAME], --name [NAME]\n                        Input project name\n  --count_type [COUNT_TYPE]\n                        Input count type, rCnt/sCnt (read count/site count, default rCnt)\n  -o [OUTPUT], --output [OUTPUT]\n                        Output file prefix\n```\n\nFor example:\n\n```\ncd T10_qc\ncpdseqer qc -i single_file.list -n single -o output_single\ncpdseqer qc -i multi_file.list -n multi -o output_multi\n```\n"
      },
      "source": "https://raw.githubusercontent.com/shengqh/cpdseqer/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "11. Generate a genome-wide UV damage distribution map",
        "parent_header": [
          "Step by step tutorial"
        ],
        "type": "Text_excerpt",
        "value": "```\nusage: cpdseqer fig_genome [-h] -i [INPUT] [-b [BLOCK]]\n                           [-n [{None,Total,LocalGC}]] -o [OUTPUT]\n                           [-g [GENOME]]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i [INPUT], --input [INPUT]\n                        Input dinucleotide list file, first column is file\n                        location, second column is file name\n  -b [BLOCK], --block [BLOCK]\n                        Block size for summerize dinucleotide count (default\n                        100000)\n  -n [{None,Total,LocalGC}], --norm_type [{None,Total,LocalGC}]\n                        Normalization type\n  -o [OUTPUT], --output [OUTPUT]\n                        Output file prefix\n  -g [GENOME], --genome [GENOME]\n                        Input reference genome, hg38/hg19 (default hg38) or\n                        chromosome length file\n```\n\nFor example:\n\n```\ncd T11_fig_genome\ncpdseqer fig_genome -i dinucleotide.list -g hg38 -o cpd_genome -n LocalGC -b 1000000\n```\n\nThe [dinucleotide.list](https://cqsweb.app.vumc.org/Data/cpdseqer/T11_fig_genome/dinucleotide.list) contains two columns indicate dinucleotide file and sample name (separated by tab).\n\n|||\n|---|---|\n|../data/Control.bed.bgz|Control|\n|../data/UV.dinucleotide.bed.bgz|UV|\n"
      },
      "source": "https://raw.githubusercontent.com/shengqh/cpdseqer/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "12. Draw dinucleotide pileup figure in a specific genomic region type",
        "parent_header": [
          "Step by step tutorial"
        ],
        "type": "Text_excerpt",
        "value": "```\nusage: cpdseqer fig_position [-h] -i [INPUT] -c [COORDINATE_FILE]\n                             [-b [BACKGROUND_FILE]] [--space] [--add_chr] [-t]\n                             -o [OUTPUT]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i [INPUT], --input [INPUT]\n                        Input dinucleotide list file, first column is file\n                        location, second column is file name\n  -c [COORDINATE_FILE], --coordinate_file [COORDINATE_FILE]\n                        Input coordinate bed file (can use short name\n                        hg38/hg19 as default nucleosome file)\n  -b [BACKGROUND_FILE], --background_file [BACKGROUND_FILE]\n                        Background dinucleotide file\n  --space               Use space rather than tab in coordinate files\n  --add_chr             Add chr in chromosome name in coordinate file\n  -t, --test            Test the first 10000 coordinates only\n  -o [OUTPUT], --output [OUTPUT]\n                        Output file prefix\n```\n\nFor example, we will calculate the dinucleotide position in 3'UTR:\n\n```\ncd T12_fig_position\ncpdseqer fig_position -c ../data/hg38_UTR3.bed.gz -b ../data/hg38_Naked.bed.bgz -i dinucleotide.list -o position\n```\n\nHere, you can input absolute coordinate file, or hg38/hg19. hg38 and hg19 indicates the nucleosome coordinate files which can also be downloaded by:\n\n```\nwget https://github.com/shengqh/cpdseqer/raw/master/cpdseqer/data/nucleosome_hg19_interval.zip\nwget https://github.com/shengqh/cpdseqer/raw/master/cpdseqer/data/nucleosome_hg38_interval.zip\n\n```\n"
      },
      "source": "https://raw.githubusercontent.com/shengqh/cpdseqer/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "15. Compare UV damage between two regions for one or multiple samples",
        "parent_header": [
          "Step by step tutorial"
        ],
        "type": "Text_excerpt",
        "value": "```\nusage: cpdseqer uv_comp_regions [-h] -i [INPUT] [-c1 [COORDINATE_FILE1]]\n                                [-c2 [COORDINATE_FILE2]] [--space] [--add_chr]\n                                [-f [FASTA]] [--count_type [{rCnt,sCnt}]] -o\n                                [OUTPUT]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i [INPUT], --input [INPUT]\n                        Input dinucleotide list file, first column is file\n                        location, second column is file name\n  -c1 [COORDINATE_FILE1], --coordinate_file1 [COORDINATE_FILE1]\n                        Input coordinate bed file 1\n  -c2 [COORDINATE_FILE2], --coordinate_file2 [COORDINATE_FILE2]\n                        Input coordinate bed file 2\n  --space               Use space rather than tab in coordinate file\n  --add_chr             Add chr to chromosome name in coordinate file\n  -f [FASTA], --fasta [FASTA]\n                        Input reference genome fasta file\n  --count_type [{rCnt,sCnt}]\n                        Input count type, rCnt/sCnt (read count/site count,\n                        default rCnt)\n  -o [OUTPUT], --output [OUTPUT]\n                        Output file prefix\n```\n\nFor example,\n\n```\ncd T15_uv_comp_regions\ncpdseqer uv_comp_regions \\\n  -i dinucleotide.list \\\n  -f ../data/bowtie2_index_2.3.5.1/GRCh38.primary_assembly.genome.fa \\\n  -c1 hg38_promoter.bed \\\n  -c2 hg38_tf.bed \\\n  -o uv_comp_regions\n```\n"
      },
      "source": "https://raw.githubusercontent.com/shengqh/cpdseqer/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "16. Compare genome-wide UV damage between two groups of samples",
        "parent_header": [
          "Step by step tutorial"
        ],
        "type": "Text_excerpt",
        "value": "```\nusage: cpdseqer uv_comp_groups [-h] -i1 [INPUT1] -i2 [INPUT2]\n                               [--count_type [{rCnt,sCnt}]] -o [OUTPUT]\n                               [-s [SIZE_FACTOR_FILE]]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i1 [INPUT1], --input1 [INPUT1]\n                        Input CPD count list file 1, first column is file\n                        location, second column is file name\n  -i2 [INPUT2], --input2 [INPUT2]\n                        Input CPD count list file 2, first column is file\n                        location, second column is file name\n  --count_type [{rCnt,sCnt}]\n                        Input count type, rCnt/sCnt (read count/site count,\n                        default rCnt)\n  -o [OUTPUT], --output [OUTPUT]\n                        Output file prefix\n  -s [SIZE_FACTOR_FILE], --size_factor_file [SIZE_FACTOR_FILE]\n                        Input size factor file for normalization\n```\n\nFor example,\n\n```\ncd T16_uv_comp_groups\ncpdseqer uv_comp_groups \\\n  -i1 control.list \\\n  -i2 case.list \\\n  -o uv_comp_groups \\\n  --count_type sCnt \\\n  -s ../data/chrom_dinucleotide.sizefactor.txt\n```\n"
      },
      "source": "https://raw.githubusercontent.com/shengqh/cpdseqer/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "17. Compare UV damage between two groups of samples within a specific region type",
        "parent_header": [
          "Step by step tutorial"
        ],
        "type": "Text_excerpt",
        "value": "```\ncpdseqer uv_comp_groups_region [-h] -i1 [INPUT1] -i2 [INPUT2] -o [OUTPUT] -c [COORDINATE_FILE] [--add_chr] [--space] [--count_type [COUNT_TYPE]] [-s [SIZE_FACTOR_FILE]]\n```\n\nFor example,\n\n```\ncd T17_uv_comp_groups_region\ncpdseqer uv_comp_groups_region \\\n  -i1 control.list \\\n  -i2 case.list \\\n  -c ../data/nucleosome_hg38_interval.txt \\\n  -o uv_comp_groups_region \\\n  --count_type sCnt \\\n  --space \\\n  -s ../data/chrom_dinucleotide.sizefactor.txt\n```\n"
      },
      "source": "https://raw.githubusercontent.com/shengqh/cpdseqer/master/README.md",
      "technique": "header_analysis"
    }
  ]
}