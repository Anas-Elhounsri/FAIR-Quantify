{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "Binnacle - estimates coverage for graph scaffolds and integrates with existing metagenome binning tools"
        ],
        "type": "Text_excerpt",
        "value": "Please cite Muralidharan HS, Shah N, Meisel JS and Pop M (2021) Binnacle: Using Scaffolds to Improve the Contiguity and Quality of Metagenomic Bins. Front. Microbiol. 12:638561. [doi: 10.3389/fmicb.2021.638561](https://www.frontiersin.org/articles/10.3389/fmicb.2021.638561/).\n\nThis tool is still under development. Please open issue here on Github or contact us if you have any questions. <br/>\nHarihara Muralidharan: hsmurali@cs.umd.edu<br/>\nNidhi Shah: nidhi@cs.umd.edu\n"
      },
      "source": "https://raw.githubusercontent.com/marbl/binnacle/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/marbl/binnacle"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-12-01T03:11:18Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-06-07T16:49:12Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Binnacle: Using Scaffolds to Improve the Contiguity and Quality of Metagenomic Bins"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9980099402880719,
      "result": {
        "original_header": "Binnacle - estimates coverage for graph scaffolds and integrates with existing metagenome binning tools",
        "type": "Text_excerpt",
        "value": "Binnacle accurately computes coverage of graph scaffolds and seamlessly integrates with leading binning methods such as MetaBAT2, MaxBin 2.0, and CONCOCT. Using graph scaffolds, as opposed to contigs (most common approach) for binning improves the contiguity and quality of metagenomic bins and can capture a broader set of the accessory elements of the reconstructed genomes.\n<tr> \n    <p align=\"center\"><img src=\"img/Figure1.png\" width=750 /></p>\n</tr>\n \n"
      },
      "source": "https://raw.githubusercontent.com/marbl/binnacle/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9550209104526184,
      "result": {
        "original_header": "Binning metagenomic data",
        "type": "Text_excerpt",
        "value": "Generally, when you have one or multiple metagenomic samples, we need to assemble, scaffold, and bin contigs/scaffolds from each sample to generate metagenomic bins. We recommend using Megahit for assembly, and MetaCarvel for scaffolding. We provide a helper guide to work through assembly, scaffolding, and per-base coverage estimation steps [here](https://github.com/marbl/binnacle/wiki/2.-Preparing-the-Data).  \nFollow these steps to generate files for running binning methods with graph scaffolds:\n* Generate accurate scaffolds (mis-scaffolding module), and estimate scaffold span and coverage. <br/>\n  This step takes graph scaffolds from MetaCarvel output directory, and coverage estimated for contigs using reads from the same sample as input. It outputs coverage estimates for accurate set of graph scaffolds along with other necessary information about its coordinates, orientation, etc in the output directory.\nContig level coverages can be presented to binnacle either as a text file describing the perbase coverage or bam and bed files of the read alignments.\n```\npython Estimate_Abundances.py -g [ORIENTED.gml] -a [COVERAGE_SORTED.txt] -c [CONTIGS.fa] -d [OUTPUT_DIRECTORY]\nusage: Estimate_Abundances.py [-h] [-g ASSEMBLY] [-a COVERAGE] [-bam BAMFILE]\n                              [-bed BEDFILE] [-c CONTIGS] -d DIR [-o COORDS]\n                              [-w WINDOW_SIZE] [-t THRESHOLD]\n                              [-n NEIGHBOR_CUTOFF] [-p POSCUTOFF]\n                              [-pre PREFIX]\n\nbinnacle: A tool for binning metagenomic datasets using assembly graphs and\nscaffolds generated by metacarvel. Estimate_Abundances.py estimates abundance\nfor scaffolds generated by MetaCarvel. If the coordinates computed by binnacle\nis specified then the abundance for each scaffold is estimated based on the\ncontig abundances and the coordinates. If the coordinates are not specified\nthen binnacle etimates the abundance from scratch. While calculating all vs\nall abundances please specify the coordinates(Coordinates_After_Delinking.txt)\nthrough the \"coords\" parameter. The abundances can be provided as a bed file,\nbam file or a text file describing the per base coverage obtained by running\nthe genomeCoverageBed program of the bedtools suite.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -g ASSEMBLY, --assembly ASSEMBLY\n                        Assembly Graph generated by Metacarvel\n  -a COVERAGE, --coverage COVERAGE\n                        Output generated by running genomecov -d on the bed\n                        file generated by MetaCarvel.\n  -bam BAMFILE, --bamfile BAMFILE\n                        Bam file from aligning reads to contigs\n  -bed BEDFILE, --bedfile BEDFILE\n                        Bed file from aligning reads to contigs. If bed file\n                        is provided please provide a fasta file of the contigs\n  -c CONTIGS, --contigs CONTIGS\n                        Contigs generated by the assembler, contigs.fasta\n  -d DIR, --dir DIR     output directory for results\n  -o COORDS, --coords COORDS\n                        Coordinate file generated by Binnacle\n  -w WINDOW_SIZE, --window_size WINDOW_SIZE\n                        Size of the sliding window for computing test\n                        statistic to identify changepoints in coverages\n                        (Default=1500)\n  -t THRESHOLD, --threshold THRESHOLD\n                        Threshold to identify outliers (Default=99)\n  -n NEIGHBOR_CUTOFF, --neighbor_cutoff NEIGHBOR_CUTOFF\n                        Filter size to identify outliers within (Defualt=100)\n  -p POSCUTOFF, --poscutoff POSCUTOFF\n                        Position cutoff to consider delinking (Default=100)\n  -pre PREFIX, --prefix PREFIX\n                        Prefix to be attached to all outputs\n```\n* If you want to estimate coverage of graph scaffolds of a sample from its reads  you will run Estimate_Abundances.py with the following parameters, \n \n* When working with multiple samples, we use reads from the same sample to \"correct\" graph scaffolds and estimate its span. But, we can use reads from all other samples to estimate coverage of graph scaffolds across samples. Using information from multiple samples can help reduce noise in the binnning phase, and we highly recommennt it. \nSo, if you want to estimate coverage of graph scaffolds (Sample 1) from the reads of another sample (Sample 2), you will run Estimate_Abundances.py with these modifications.\n```\n-a Coverage of contigs in Sample 1 by mapping reads of Sample 2 -- See Wiki for how to calculate coverage information\n-o Coordinates of scaffolds from Sample 1 that you would have generated from the previous step.\n-d Same output directory as Sample 1\n```\n* Once you have coverage estimated for graph scaffolds from all samples (all vs. all), we need to combine this information and generate files for running metagenome binning methods. We provide files that can be easily used with MetaBAT2, CONCOCT, and MaxBin2.0. <br/><br/>\nTo generate the feature matrix for clustering, we will use Collate.py program from Binnacle. It takes the path to the output directory where all the summary information generated by the previous steps are placed and the binning method that you would like to run next.\n```\npython Collate.py -h                        \nusage: Collate.py [-h] -d DIR [-m METHOD] [-k KEEP]\n\nbinnacle: A tool for binning metagenomic datasets using assembly graphs and\nscaffolds generated by metacarvel.Estimate_Abundances.py estimates abundance\nfor scaffolds generated by MetaCarvel. The program Collate.py collects the\nsummary files generated by Estimate_Abundances.py\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -d DIR, --dir DIR     Output directory that contains the summary files\n                        generated by running Estimate_Abundances.py\n  -m METHOD, --method METHOD\n                        Binning method to format the output to. Presently we\n                        support 1. Metabat 2. Maxbin 3. Concoct 4. Binnacle\n                        (Default)\n  -k KEEP, --keep KEEP  Retain the summary files generated by\n                        Estimate_Abundances.py. Defaults to True \n```\n \n* Using the abundances.txt file based on the method selected (-m) in the previous step, you can run that binning method to generate bins for your graph scaffolds. \nPlease checkout the [wiki](https://github.com/marbl/binnacle/wiki) for a detailed description on setting up the python environment, methods to calculate coverage and a typical workflow to run binnacle.  \nTo visualize the graph scaffolds we recommend using  [MetagenomeScope](https://github.com/marbl/MetagenomeScope) which is a web-based browser. The input to metagenomescope is Assembly_Graph_Filtered.gml. Detailed documentation on installing and running MetagenomeScope is given [here](https://github.com/marbl/MetagenomeScope/wiki).\n \n"
      },
      "source": "https://raw.githubusercontent.com/marbl/binnacle/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/marbl/MetaCarvel/wiki"
      },
      "source": "https://raw.githubusercontent.com/marbl/binnacle/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/marbl/binnacle/wiki"
      },
      "source": "https://raw.githubusercontent.com/marbl/binnacle/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/marbl/MetagenomeScope/wiki"
      },
      "source": "https://raw.githubusercontent.com/marbl/binnacle/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/marbl/binnacle/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/marbl/binnacle/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "marbl/binnacle"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Binnacle - estimates coverage for graph scaffolds and integrates with existing metagenome binning tools"
      },
      "source": "https://raw.githubusercontent.com/marbl/binnacle/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/marbl/binnacle/master/img/Figure1.png"
      },
      "source": "https://raw.githubusercontent.com/marbl/binnacle/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "Binnacle - estimates coverage for graph scaffolds and integrates with existing metagenome binning tools"
        ],
        "type": "Text_excerpt",
        "value": "To run Binnacle, you will need Python 3.7.x, Bedtools, Samtools, BioPython, networkx, numpy, and Pandas. <br/>\nAn Environment.yml file is available and this can be used to create a conda environment that is suitable to run binnacle. \nThe detailed documentation about how to install these packages is given [here](https://github.com/marbl/binnacle/wiki/1.-Package-Dependencies).\nWe use graph scaffolds that are output of MetaCarvel scaffolding tool, so you will also need to download and install MetaCarvel. There is a step by step [installation guide](https://github.com/marbl/MetaCarvel/wiki) for MetaCarvel. \n"
      },
      "source": "https://raw.githubusercontent.com/marbl/binnacle/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.809029768967127,
      "result": {
        "original_header": "Binning metagenomic data",
        "type": "Text_excerpt",
        "value": "Please checkout the [wiki](https://github.com/marbl/binnacle/wiki) for a detailed description on setting up the python environment, methods to calculate coverage and a typical workflow to run binnacle.  \n"
      },
      "source": "https://raw.githubusercontent.com/marbl/binnacle/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/marbl/binnacle/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "binning, changepoint-detection, metagenome-assembled-genomes, metagenome-assembly, metagenomics, scaffolding"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "binnacle"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "marbl"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 50740,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/marbl/binnacle/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 07:43:25",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 10
      },
      "technique": "GitHub_API"
    }
  ]
}