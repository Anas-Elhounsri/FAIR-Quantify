{
  "application_domain": [
    {
      "confidence": 16.12,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "Retrosynthetic Accessibility (RA) score"
        ],
        "type": "Text_excerpt",
        "value": "The models have been published in Chemical Science\n\nThakkar, A.; Chadimov\u00e1, V.; Bjerrum, E. J.; Engkvist, O.; Reymond, J.-L. Retrosynthetic Accessibility Score (RAscore) \u2013 Rapid Machine Learned Synthesizability Classification from AI Driven Retrosynthetic Planning. Chem. Sci. 2021. https://doi.org/10.1039/d0sc05401a\n\n"
      },
      "source": "https://raw.githubusercontent.com/reymond-group/RAscore/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/reymond-group/RAscore"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-08-13T11:11:48Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-16T20:51:15Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Retrosynthetic Accessibility (RA) score learned from computer aided synthesis planning"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9739538036448482,
      "result": {
        "original_header": "Retrosynthetic Accessibility (RA) score",
        "type": "Text_excerpt",
        "value": " * RAscore is a score learned from the predictions of a computer aided synthesis planning tool (AiZynthfinder: https://github.com/MolecularAI/aizynthfinder). \n * **RAscore is intended to be a binary score, indicating whether the underlying computer aided synthesis planning tool can find a route (1) or not (0) to a given compound.** \n * The tool has been trained on 200,000 compounds from ChEMBL and so is limited to compounds within similar regions of chemical space. It is intended to predict the retrosynthetic accessibility of bioactive molecules. (Data can be found in `data.zip`)\n * Attempts to use the score on more exotic compounds such as those found in the GDB databases will not work: \n    * In this case the model will need to be switched to `GDBscore`, the corresponding models can be found in the models folder or downloaded from the pre-print server. \n"
      },
      "source": "https://raw.githubusercontent.com/reymond-group/RAscore/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9969882227709354,
      "result": {
        "original_header": "Known Issues",
        "type": "Text_excerpt",
        "value": "* The models may not generalise well in regions of chemical space that deviate from the training domains (ChEMBL and GDB subsets in this case), this is a problem inherent to ML based classifiers.\n* The models have not been tested for the use case of molecular generation.\n* **We highly recommend retraining the models on a sample of compounds representing your particular use case, the included data may be used to augment the data you generate**\n \n"
      },
      "source": "https://raw.githubusercontent.com/reymond-group/RAscore/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/reymond-group/RAscore/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/reymond-group/RAscore/master/rascore_usage.ipynb"
      },
      "source": "https://raw.githubusercontent.com/reymond-group/RAscore/master/rascore_usage.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 30
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/reymond-group/RAscore/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "reymond-group/RAscore"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Retrosynthetic Accessibility (RA) score"
      },
      "source": "https://raw.githubusercontent.com/reymond-group/RAscore/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/reymond-group/RAscore/master/RAscore/images/TOC.png"
      },
      "source": "https://raw.githubusercontent.com/reymond-group/RAscore/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/reymond-group/RAscore/master/RAscore/images/RA_Score_histogram.png"
      },
      "source": "https://raw.githubusercontent.com/reymond-group/RAscore/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/reymond-group/RAscore/master/RAscore/images/average_linkage.png"
      },
      "source": "https://raw.githubusercontent.com/reymond-group/RAscore/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "Retrosynthetic Accessibility (RA) score"
        ],
        "type": "Text_excerpt",
        "value": "Follow the steps in the defined order to avoid conflicts.\n\n1. Create an environment (**note: the python version must be == 3.7, 3.8**):\n```\nconda create --name myenv python=3.7\nconda activate myenv\n```\n\nor use an existing environment with python >= 3.7\n\n2. Install rdkit 2020.03 (if already installed skip this step)\n```\nconda install -c rdkit rdkit -y\n```\n\n3. Install RAscore \n```\npip install git+https://github.com/reymond-group/RAscore.git@master\n```\nThe models.zip file will have to be downloaded and after unzipping the path to the relevant model will need to be specified on model instantiation.\n\nor \n\nClone and install the repository using (models should be included):\n```\ngit clone https://github.com/reymond-group/RAscore.git\npip install --editable .\n```\nIf the models are not automatically included check that the models.zip file exists and unzip it into the desired location.\n"
      },
      "source": "https://raw.githubusercontent.com/reymond-group/RAscore/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Known Installation Issues",
        "parent_header": [
          "Retrosynthetic Accessibility (RA) score",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "**The following versions must be used in order to use the pretrained models:**\n* python == 3.7\n* scikit-learn == 0.22.1\n* xgboost == 1.0.2\n* tensorflow-gpu == 2.5.0\n\nThese requirements arise becuase of the pickling method used to save the model and compatibility issues arising between different versions.\n"
      },
      "source": "https://raw.githubusercontent.com/reymond-group/RAscore/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Performance on Test Set",
        "parent_header": [
          "Retrosynthetic Accessibility (RA) score"
        ],
        "type": "Text_excerpt",
        "value": "* Test set contains ca. 20,000 compounds from ChEMBL\n* The model was able to separate clusters of solved/unsolved compounds as found by computing the average linkage\n* RAscore can better differentiate between solved/unsolved compounds than existing methods.\n![alt text](RAscore/images/RA_Score_histogram.png)\n"
      },
      "source": "https://raw.githubusercontent.com/reymond-group/RAscore/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999999636812915,
      "result": {
        "original_header": "Retraining",
        "type": "Text_excerpt",
        "value": "If you want to retrain models, or train your own models using the hyperparameter optimisation framework found in the 'model_building' folder, then the following should be installed in the environemnt aswell:\\\n`pip install -e .[retraining]` \nThe SYBA, SCscore and SAscore should also be downloaded for descriptor calculations and training scripts modified to reflect the locations of the models:\n* https://github.com/lich-uct/syba\n* https://github.com/connorcoley/scscore\n* https://github.com/rdkit/rdkit/tree/master/Contrib/SA_Score \n"
      },
      "source": "https://raw.githubusercontent.com/reymond-group/RAscore/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/reymond-group/RAscore/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 Reymond Research Group, University of Bern\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
      },
      "source": "https://raw.githubusercontent.com/reymond-group/RAscore/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RAscore"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "reymond-group"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 45030,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 2282,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/reymond-group/RAscore/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-06 15:10:33",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 78
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Importing in Python",
        "parent_header": [
          "Retrosynthetic Accessibility (RA) score",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Depending on if you would like to use the XGB based or Tensorflow based models you can import different modules. \n\nTo walk through the example in a jupyter notebook refer to `rascore_usage.ipynb`\n\n```\nfrom RAscore import RAscore_NN #For tensorflow and keras based models\nfrom RAscore import RAscore_XGB #For XGB based models\n\nnn_scorer = RAscore_NN.RAScorerNN() \nxgb_scorer = RAscore_XGB.RAScorerXGB()\n\n#Imatinib mesylate\nimatinib_mesylate = 'CC1=C(C=C(C=C1)NC(=O)C2=CC=C(C=C2)CN3CCN(CC3)C)NC4=NC=CC(=N4)C5=CN=CC=C5.CS(=O)(=O)O'\nnn_scorer.predict(imatinib_mesylate)\n0.99522984\n\nxgb_scorer.predict(imatinib_mesylate)\n0.99259007\n\n#Omeprazole\nomeprazole = 'CC1=CN=C(C(=C1OC)C)CS(=O)C2=NC3=C(N2)C=C(C=C3)OC'\nnn_scorer.predict(omeprazole)\n0.99999106\n\nxgb_scorer.predict(omeprazole)\n0.9556329\n\n#Morphine - Illustrates problem synthesis planning tools face with complex ring systems\nmorphine = 'CN1CC[C@]23c4c5ccc(O)c4O[C@H]2[C@@H](O)C=C[C@H]3[C@H]1C5'\nnn_scorer.predict(morphine)\n8.316945e-07\n\nxgb_scorer.predict(morphine)\n0.0028359715\n```\n"
      },
      "source": "https://raw.githubusercontent.com/reymond-group/RAscore/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Command Line Interface",
        "parent_header": [
          "Retrosynthetic Accessibility (RA) score",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "A command line interface is provided which allows batch processing and enables the flexibility of specifying models.\\\n```\nUsage: RAscore [OPTIONS]\n\nExample: A set of smiles `test.smi` are provided\n\n`RAscore -f test.smi -c SMILES -o test.csv`\n\nDefault Model: XGBoost using ChEMBL and ECFP4 counts with features\n\nOptions:\n  -f, --file_path TEXT      Absolute path to input file containing one SMILES\n                            on each line. The column should be labelled\n                            \"SMILES\" or if another header is used, specify it\n                            as an option\n\n  -c, --column_header TEXT  The name given to the singular column in the file\n                            which contains the SMILES. The column must be\n                            named.\n\n  -o, --output_path TEXT    Output file path\n  -m, --model_path TEXT     Absolute path to the model to use, if .h5 file\n                            neural network in tensorflow/keras, if .pkl then\n                            XGBoost\n\n  --help                    Show this message and exit.\n```\nFurther RAscore models are contained in the `RAscore/models/models.zip` folder if you wish to specify a different model than the default:\n* RAscore\n    * DNN_chembl_fcfp_counts\n    * XGB_chembl_ecfp_counts\n* GDBscore\n    * DNN_gdbchembl_fcfp_counts\n    * XGB_gdbchembl_ecfp_counts\n"
      },
      "source": "https://raw.githubusercontent.com/reymond-group/RAscore/master/README.md",
      "technique": "header_analysis"
    }
  ]
}