{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "RCK <br/> <sub>Reconstruction of clone- and haplotype-specific Cancer Karyotypes</sub>",
          "RCK data processing recipe"
        ],
        "type": "Text_excerpt",
        "value": "When using RCK's cancer karyotype reconstruction algorithm or any of RCK's utilities, please cite the following paper: \n\n[Sergey Aganezov and Benjamin J. Raphael, 2019](https://www.biorxiv.org/content/10.1101/560839v1)\n"
      },
      "source": "https://raw.githubusercontent.com/raphael-group/RCK/RCK-pub/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/raphael-group/RCK"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-01-31T01:24:47Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-04-28T06:32:27Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RCK: Reconstruction of clone- and haplotype-specific Cancer Karyotypes"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.949013809220591,
      "result": {
        "original_header": "**NOTE**: this repository contains only the initial version of RCK at the time of its publication.",
        "type": "Text_excerpt",
        "value": "Further development, bug fixing, new releases, etc. of RCK is conducted a the https://github.com/aganezov/RCK repository. \n**RCK** - is a method for **R**econstruction of clone- and haplotype-specific **C**ancer **K**aryotypes from tumor mixtures, distributed both as a standalone software package and as a Python library  under the MIT licence. \nRCK has been initially designed and developed by Sergey Aganezov in the group of prof. Ben Raphael at Princeton University ([group site](http://compbio.cs.brown.edu/)).\nCurrent development of RCK is continued by Sergey Aganezov in the group of prof. Michael Schatz at Johns Hopkins University ([group site](http://schatz-lab.org/)). \nThe full description of the algorithm and its application on published cancer datasets are described in: \n"
      },
      "source": "https://raw.githubusercontent.com/raphael-group/RCK/RCK-pub/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9901552280060194,
      "result": {
        "original_header": "Algorithm Overview",
        "type": "Text_excerpt",
        "value": "RCK assumes that:\n* the reference human genome is diploid (except for sex chromosomes)\n* somatic evolution is propagated by large scale rearrangements (any type, quantity, etc) that respect the infinite sites assumption (i.e., no genomic location, on either copy of the homologous chromosome, prticipates in the double-stranded breakage, which are requried for a rearrangement to happen, more than once thgoughout the entire somatic evolutionary history of the tumor); \n    this can be relaxed for extremity-exclusivity constraint, if in the high confident input novel adjacencies some genomic location is shared.   \n* no novel genomic locations (unless explicitly specified) can play a role of telomeres in the derived chromosomes\n* (approximate) clone- and allele-specific fragment/segment copy numbers are inferred by 3rd-party tools and are part of the input (see more in the [segments docs](docs/Segments.md))\n* (noisy) unlabeled (i.e.,  without haplotype labels) novel adjacencies (aka structural variants) are inferred by 3rd-party tools and are part of the input (see more in the [adjacencies docs](docs/Adjacencies.md)) \nRCK uses a Diploid Interval Adjacency Graph to represent all possible segments and transitions between them (across all clones and the reference). \nRCK then solves an optimization problem of inferring clone- and haplotype-specific karyotypes (i.e., finding clone-specific edge multiplicity functions in the constructed DIAG) as an MILP program.\nSeveral constraints are taken into consideration (some of which are listed below) during the inference:\n* infinite sites complience (across all clones in the tumor)\n* adjacencies grouping (is part of the input, optional)\n* false positive for novel adjacencies presence in reconstructed karyotypes\n* maximum divergence from input (approximate) allele-specific segment/fragment copy number profile\n* preservatino of allele-separation across clones in tumor\n* telomere locations \nWe note, that in contrast to some other cancer karyotype inference methods, RCK model has several advantages, that all work in q unifying computation framework and some/all of which differentiate RCK from other methods:\n* any level of sample heterogeneity (on the karyotype level): from homogeneous samples with a single derived clone, to tumor samples comprised of `n` derived genomes\n* support for any type of novel adjacencies signature (SV types), including copy-number-neutral ones, as well as the complicated ones arising from chromoplexy/chromothripsis events\n* model of diploid reference/non-haploid derived genomes\n* explicit control over telomere location during the inference\n* explicit fine-grain control over false positive in the novel adjacencies in the input and respectively their utilization in the inference\n* haplotype-specific (aka phased) inference both for segments and adjacencies across all clones in the tumor sample\n* support for (optional) 3rd-generation sequencing additional information \n \n"
      },
      "source": "https://raw.githubusercontent.com/raphael-group/RCK/RCK-pub/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9847224392826588,
      "result": {
        "original_header": "Input (preprocessing)",
        "type": "Text_excerpt",
        "value": "The minimum input for RCK is comprised of two parts:\n1. Unlabeled novel adjacencies (aka structural variations in the tumor sample)\n2. Clone- and allele-specific segment copy numbers \nAdditional input can contain:\n* Additional telomere locations\n* Segment-, clone-, and allele-specific boundaries (both lower and upper) on inferred copy numbers \n* Grouping information about clone-specific novel adjacencies (usually informed by 3rd-generation sequencing data), with individual False Positive rates per each group\n* False Positive rates for any subgroup of input novel adjacencies.  \nRCK expects the input data to be in a (C/T)SV (Coma/Tab Separated Values) format.\nWe provide a set of utility tools to convert input data obtained from a lot of state-of-the-atr methods outputs into the RCK suitable format. \n \n"
      },
      "source": "https://raw.githubusercontent.com/raphael-group/RCK/RCK-pub/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9823019759528826,
      "result": {
        "original_header": "Novel Adjacencies",
        "type": "Text_excerpt",
        "value": "Obtaining unlabeled (i.e., without allele-information) novel adjacencies (aka Structural Variants) is not a part of the RCK workflow, as there exist a lot of tools for obtaining those. \nWe provide a `rck-adj-x2rck` utility to convert output from output format of SV detection tools to the RCK suitable format. \nWe currently support converting the output of the following 3rd-party SV detection tools: \n* *short-reads*\n    * **Delly** [[paper](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3436805/) | [code](https://github.com/dellytools/delly)] \n    * **Manta** [[paper](https://www.ncbi.nlm.nih.gov/pubmed/26647377) | [code](https://github.com/Illumina/manta)] \n    * **Lumpy** [[paper](https://genomebiology.biomedcentral.com/articles/10.1186/gb-2014-15-6-r84) | [code](https://github.com/arq5x/lumpy-sv)]\n    * **BreakDancer** [[paper](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4138716/) | [code](https://github.com/genome/breakdancer)] \n* *linked/barcode reads* \n    * **LongRanger** [[paper](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4786454/) | [code](https://github.com/10XGenomics/longranger)] \n    * **GROC-SVs** [[paper](https://www.ncbi.nlm.nih.gov/pubmed/28714986) | [code](https://github.com/grocsvs/grocsvs)]\n    * **NAIBR** [[paper](https://www.ncbi.nlm.nih.gov/pubmed/29112732) | [code](https://github.com/raphael-group/NAIBR)]\n* *long reads*\n    * **Sniffles** [[paper](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5990442/) | [code](https://github.com/fritzsedlazeck/Sniffles)]\n    * **PBSV** [paper | [code](https://github.com/PacificBiosciences/pbsv)]\n* *generic*\n    * **SURVIVOR** [[paper](https://www.nature.com/articles/ncomms14061) | [code](https://github.com/fritzsedlazeck/SURVIVOR)] \n"
      },
      "source": "https://raw.githubusercontent.com/raphael-group/RCK/RCK-pub/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.985413095553772,
      "result": {
        "original_header": "Segment copy numbers",
        "type": "Text_excerpt",
        "value": "Obtaining clone- and allele-specific segment copy numbers is not a part of the RCK workflow, as there exist a lof of tools for obtaining those.\nWe provide a `rck-scnt-x2rck` utility to convert output from output format of other tools that infer clone- and allele-specific segment copy numbers to the RCK suitable format.\nWe currently support converting the output of the following 3rd-party tools:\n* **HATCHet** [[paper](https://www.biorxiv.org/content/early/2018/12/17/496174) | [code](https://github.com/raphael-group/hatchet)] (*recommended* as it has fewest limitation w.r.t. tumor heterogeneity)\n* **TitanCNA** [[paper](https://www.ncbi.nlm.nih.gov/pubmed/25060187) | [code](https://github.com/gavinha/TitanCNA)]\n* **Battenberg** [[paper](https://www.ncbi.nlm.nih.gov/pubmed/22608083) | [code](https://github.com/cancerit/cgpBattenberg)]\n* **ReMixT** [[paper](https://www.ncbi.nlm.nih.gov/pubmed/28750660) | [code](https://bitbucket.org/dranew/remixt)]\n* **Ginkgo** [[paper](https://www.nature.com/articles/nmeth.3578) | [code](https://github.com/robertaboukhalil/ginkgo)] (Attention! *haploid* mode only)\n \n"
      },
      "source": "https://raw.githubusercontent.com/raphael-group/RCK/RCK-pub/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9888641900373982,
      "result": {
        "original_header": "RCK data processing recipe",
        "type": "Text_excerpt",
        "value": "For the most cases the cancer sample of interest is initially represented via a set `cancer.sr.fastq` of reads obtained via a sequencer. \nAdditionally, a sequenced reads `normal.sr.fastq` from a matching normal sample need to be available.   \nMost often case of analysis consists of having a standard Illumina paired-end sequenced reads for both the tumor and the matching normal.\nIncreasingly 3rd-generation sequencing technologies are being utilized in cancer analysis. \nLet us assume that there may optionally be a set `cancer.lr.fastq` of reads for the cancer sample in question obtained via 3rd-generation sequencing technology. \n1. Align sequenced reads (with you aligner of choice) `cancer.sr.fastq` and `normal.sr.fastq` for cancer and a matching normal samples to obtain `cancer.sr.bam` and `normal.sr.bam`\n    1. Optionally align sequenced long reads `cancer.lr.fastq` to obtain `cancer.lr.bam`\n2. Run a tool of you choosing on `cancer.sr.fastq` to obtain a novel adjacencies VCF file `cancer.sr.vcf`\n    1. Optionally infer novel adjacencies on long-read dataset obtaining `cancer.lr.vcf`\n    2. Merge short- and long-read novel adjacencies into a unified set `cancer.vcf` (we suggest using SURVIVOR tool [[code](https://github.com/fritzsedlazeck/SURVIVOR) | [paper](https://www.nature.com/articles/ncomms14061)] for this task)\n3. Convert novel adjacencies from VCF file `cancer.vcf` to the `RCK` input format via `rck-adj-x2rck x cancer.vcf -o input.rck.adj.tsv`, where `x` stands for the novel adjacency inference tool. \nPlease, see [adjacencies docs](docs/Adjacencies.md) for list of supported tools and more detailed instructions on comparison.\n4. Run any of the supported tools (HATCHet, TitanCNA, Battenberg, ReMixT) of choice to infer large-scale clone- and allele-specific fragment copy numbers `CN.data` (generic name of the tool-specific result)\n5. Convert tool-specific copy-number data `CN.data` into `RCK` format via `rck-scnt-x2rck x CN-data -o input.rck.scnt.tsv`, where `x` stands for copy number inference tool.\nPlease, see [segments docs](docs/Segments.md) for link to specific methods, as well as details on how to run conversion.\n6. Run `RCK` \n \n"
      },
      "source": "https://raw.githubusercontent.com/raphael-group/RCK/RCK-pub/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9081380292465289,
      "result": {
        "original_header": "Results",
        "type": "Text_excerpt",
        "value": "Here is the description of the results produced by `rck` main method for cancer karyotype reconstruction. \nFor results on segment/adjacency conversion/processing, please refer to respective [segment](docs/Segments.md)/[adjacency](docs/Adjacencies.md) documentations. \nRCK's cancer karyotype reconstruction is stored in the `output` subdirectory in the working directory (the `--workdir`). \nThe following two files depict the inferred clone- and haplotype-specific karyotypes:\n* `rck.scnt.tsv` - clone- and haplotype-specific segments copy numbers;\n* `rck.acnt.tsv` - clone- and haplotype-specific adjacencies copy numbers; \nFor information about the format of the inferred clone- and haplotype-specific copy numbers on segments/adjacencies please refer to [segment](docs/Segments.md)/[adjacency](docs/Adjacencies.md) documentations \n"
      },
      "source": "https://raw.githubusercontent.com/raphael-group/RCK/RCK-pub/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.919686095079679,
      "result": {
        "original_header": "Issues",
        "type": "Text_excerpt",
        "value": "If you experience any issues with RCK installation, usage, or results or want to see RCK enhanced in any way, shape or form, please create an issue on RCK [issue tracker](https://github.com/aganezov/RCK/issues).\nPlease, make sure to specify the RCK's, Python's, and Gurobi's versions in question, and, if possible, provide (minimized) data, on which the issue(s) occur(s).     \n"
      },
      "source": "https://raw.githubusercontent.com/raphael-group/RCK/RCK-pub/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/raphael-group/RCK/tree/RCK-pub/docs"
      },
      "technique": "file_exploration"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/raphael-group/RCK/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/raphael-group/RCK/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "raphael-group/RCK"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RCK  Reconstruction of clone- and haplotype-specific Cancer Karyotypes"
      },
      "source": "https://raw.githubusercontent.com/raphael-group/RCK/RCK-pub/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/raphael-group/RCK/RCK-pub/.travis/install.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Installation\n\n\n### Contents: \n* [Virtual environment](#virtual-environment)\n* [conda](#conda-recommended)\n* [pip](#pip)\n* [source](#source)\n* [Gurobi](#gurobi)\n    * [Python bindings for Gurobi](#python-bindings-for-gurobi)\n* [Executables](#executables)\n\n### virtual environment\nWe recommend that RCK is installed in the isolated virtual environments.\nVirtual environments can be created via `anaconda` and `python` (w.r.t. RCK, which is written in Python).\n\nTo create a virtual environment (named `rck-env`) with anaconda, run the following command:\n````bash\nconda create --name rck-env python=3.7\n```` \n\nTo create a virtual environment (named `rck-env`) with python, run the following command:\n````bash\npython -m venv rck-env\n````\n\nIf virtual environments are used (which, again, we recommend), we assume that the environment is activated.\n\n### conda (recommended)\nRun the following conda command, to install RCK:\n````bash\nconda install -c aganezov rck\n````\n\nInstallation via conda automatically takes care of Gurobi python bindings (refer to respective [subsection](#python-bindings-for-gurobi)), and everything shall work from this part (assuming that Gurobi is correctly installed and working).\n\n### pip\n\nRun the following command, to install RCK:\n````bash\npip install rck\n````\n\n**WARNING**: this installation does take care of python bindings for Gurobi. Please, refer to respective [subsection](#python-bindings-for-gurobi) on how that can be addressed.\n\n### source\n\nFirst, download the source code. Example is shown below:\n````bash\ngit clone https://github.com/aganezov/RCK.git\n````\n\nthen run the following command from the RCK source folder:\n````bash\npython setup.py install\n```` \n\n**WARNING**: this installation does take care of python bindings for Gurobi. Please, refer to respective [subsection](#python-bindings-for-gurobi) on how that can be addressed.\n\n### Gurobi \n[Gurobi](http://www.gurobi.com/) solver can be obtained from the official web site and installation procedure is also described there.\nGurobi requires a valid license to run. \nLicensing [information](http://www.gurobi.com/downloads/licenses/license-center) is provided on the official website, and is available for free for individual academic users.\nMore complicated setups with multi-user and cluster licenses are also available (and described on the official Gurobi website).\nContact your university IT support for more information about any complication with Gurobi licensing and setup.\n\nRCK expects that Gurobi is installed on the machine in question.\nRCK requires python bindings be installed (in the virtual environment, if you use it (which we recommend)). \nRefer to the next [subsection](#python-bindings-for-gurobi) for details on how this can be addressed.\n\n##### Python bindings for Gurobi \nRCK requires python bindings be installed (in the virtual environment, if you use it (which we recommend)).\nThe following [documentation](https://www.gurobi.com/documentation/8.1/quickstart_windows/the_gurobi_python_interfac.html) of the Gurobi website explains how an installation of such bindings can be done.\n\nRecommended way is via anaconda.\nRegardless of whether conda is used for virtual environment, os just in general, the following command will install Python Guorbi bindings:\n````bash\nconda install -c gurobi gurobi\n````\n\nIf not using conda, one needs to go to the Gurobi installation dir and locate the `setup.py` file and run the following command:\n````bash\npython setup.py install\n````\nNote that this way is deprecated by Gurobi.\n \n\n### Executables\nInstallation of RCK adds several executables to your `PATH` (if using virtual environment, this executables will be accessible only when the environment is activated):\n* `rck` - main executable that runs the RCK inference algorithm\n* `rck-adj-x2rck` - conversion of SV prediction from several 3rd-party SV prediction tools (refer to respective [docs section](Adjacencies.md#converting-to-rck-format-from-sv-detection-tools) for more details)\n* `rck-adj-process` - various processing options for RCK formatted adjacencies\n* `rck-scnt-x2rck` - conversion of the clone- and allele-specific segment copy number predictions by 3rd-party tools (refer to respective [docs section](Segments.md#converting-to-rck-format-from-clone--and-allele-specific-inference-tools) for more details)\n* `rck-scnt-process` - various processing options for RCK formatted segments, copy number, boundaries, etc. "
      },
      "source": "https://raw.githubusercontent.com/raphael-group/RCK/RCK-pub/docs/Installation.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "RCK <br/> <sub>Reconstruction of clone- and haplotype-specific Cancer Karyotypes</sub>"
        ],
        "type": "Text_excerpt",
        "value": "RCK shall work on latest macOS, and main Linux distribution. \nRCK is implemented in Python and designed to work with Python 3.7+.\nWe highly recommend creating an independent python virtual environment for RCK usage.\n\nRCK itself can be installed in three different ways: \n* [conda](https://conda.io/docs/user-guide/overview.html)   `conda install -c aganezov rck`\n* [pip (PyPI)](https://pip.pypa.io/en/stable/)    `pip install rck`\n* source    `python setup.py install`\n\nRCK requires an ILP solver installed on the system, as well as python bindings for it.\nCurrently only Gurobi ILP solver is supported.\n\nFor more details about installation please refer to the [installation documentation](docs/Installation.md).\n"
      },
      "source": "https://raw.githubusercontent.com/raphael-group/RCK/RCK-pub/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9995642260515107,
      "result": {
        "original_header": "**NOTE**: this repository contains only the initial version of RCK at the time of its publication.",
        "type": "Text_excerpt",
        "value": "Further development, bug fixing, new releases, etc. of RCK is conducted a the https://github.com/aganezov/RCK repository. \n"
      },
      "source": "https://raw.githubusercontent.com/raphael-group/RCK/RCK-pub/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9866927246690955,
      "result": {
        "original_header": "Algorithm Overview",
        "type": "Text_excerpt",
        "value": "RCK infers clone- and haplotype-speicifc cancer genome karyotypes from tumor mixtures. \n"
      },
      "source": "https://raw.githubusercontent.com/raphael-group/RCK/RCK-pub/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999865758977152,
      "result": {
        "original_header": "Results",
        "type": "Text_excerpt",
        "value": "RCK's cancer karyotype reconstruction is stored in the `output` subdirectory in the working directory (the `--workdir`). \nThe following two files depict the inferred clone- and haplotype-specific karyotypes:\n* `rck.scnt.tsv` - clone- and haplotype-specific segments copy numbers;\n* `rck.acnt.tsv` - clone- and haplotype-specific adjacencies copy numbers; \n"
      },
      "source": "https://raw.githubusercontent.com/raphael-group/RCK/RCK-pub/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9606823743599819,
      "result": {
        "original_header": "Issues",
        "type": "Text_excerpt",
        "value": "If you experience any issues with RCK installation, usage, or results or want to see RCK enhanced in any way, shape or form, please create an issue on RCK [issue tracker](https://github.com/aganezov/RCK/issues).\nPlease, make sure to specify the RCK's, Python's, and Gurobi's versions in question, and, if possible, provide (minimized) data, on which the issue(s) occur(s).     \nIf you want to discuss any avenues of collaboration, custom RCK applications, etc, please contact Sergey Aganezov at *aganezov(at)jhu.edu* or *sergeyaganezovjr(at)gmail.com*\n \n"
      },
      "source": "https://raw.githubusercontent.com/raphael-group/RCK/RCK-pub/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/raphael-group/RCK/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "The MIT License\n\nCopyright (c) 2010-2017 Raphael Research Group, Princeton University, Princeton, NJ, USA.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."
      },
      "source": "https://raw.githubusercontent.com/raphael-group/RCK/RCK-pub/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/raphael-group/RCK/RCK-pub/docs/img/RCK_Overview_vertical.png"
      },
      "source": "https://raw.githubusercontent.com/raphael-group/RCK/RCK-pub/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RCK"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "raphael-group"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 625442,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 947,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/raphael-group/RCK/RCK-pub/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running RCK",
        "parent_header": [
          "RCK <br/> <sub>Reconstruction of clone- and haplotype-specific Cancer Karyotypes</sub>",
          "RCK data processing recipe"
        ],
        "type": "Text_excerpt",
        "value": "We provide the the `rck` tool to run the main RCK algorithm for clone- and haplotype specific cancer karyotypes reconstruction.\n\nWith the minimum input for RCK the following is the example of running RCK:\n\n````bash\nrck --scnt input.rck.scnt.tsv --adjacecnies input.rck.adj.tsv\n````\n\nwhere: \n* `--scnt` corresponds to the clone- and allele-specific segments copy number input\n* `--adjacencies` corresponds to the unlabeled novel adjacencies input\n\nAdditionally one can specify the `--workdir` working directory, where the input, preprocessing, and the output will be stored.\nFor more on the `rck` command usage please refer to [usage documentation](docs/Usage.md).\n"
      },
      "source": "https://raw.githubusercontent.com/raphael-group/RCK/RCK-pub/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 15:02:48",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ]
}