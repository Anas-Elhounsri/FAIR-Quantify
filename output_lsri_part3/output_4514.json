{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "References",
        "parent_header": [
          "GEM"
        ],
        "type": "Text_excerpt",
        "value": "If you use GEM in your analysis, please cite\r\n* Westerman KE, Pham DT, Hong L, Chen Y, Sevilla-Gonz\u00e1lez M, Sung YJ, Sun YV, Morrison AC, Chen H, Manning AK. (2021) GEM: scalable and flexible gene-environment interaction analysis in millions of samples. Bioinformatics 37(20):3514-3520. PubMed PMID: [**34695175**](https://www.ncbi.nlm.nih.gov/pubmed/34695175). PMCID: [**PMC8545347**](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC8545347/). DOI: [**10.1093/bioinformatics/btab223**](https://doi.org/10.1093/bioinformatics/btab223). \r\n \r\n\r\n<br />\r\n<br />\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/large-scale-gxe-methods/GEM/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_of_conduct": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Code of Conduct\n\nFacebook has adopted a Code of Conduct that we expect project participants to adhere to.\nPlease read the [full text](https://code.fb.com/codeofconduct/)\nso that you can understand what actions will and will not be tolerated.\n"
      },
      "source": "https://raw.githubusercontent.com/large-scale-gxe-methods/GEM/master/thirdparty/zstd-1.5.5/CODE_OF_CONDUCT.md",
      "technique": "file_exploration"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/large-scale-gxe-methods/GEM"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact",
        "parent_header": [
          "GEM"
        ],
        "type": "Text_excerpt",
        "value": "For comments, suggestions, bug reports and questions, please contact Han Chen (Han.Chen.2@uth.tmc.edu), Alisa Manning (AKMANNING@mgh.harvard.edu), Kenny Westerman (KEWESTERMAN@mgh.harvard.edu) or Samaneh Salehi Nasab (Samaneh.SalehiNasab@uth.tmc.edu). For bug reports, please include an example to reproduce the problem without having to access your confidential data.\r\n\r\n<br />\r\n<br />\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/large-scale-gxe-methods/GEM/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contributing to Zstandard\nWe want to make contributing to this project as easy and transparent as\npossible.\n\n## Our Development Process\nNew versions are being developed in the \"dev\" branch,\nor in their own feature branch.\nWhen they are deemed ready for a release, they are merged into \"release\".\n\nAs a consequence, all contributions must stage first through \"dev\"\nor their own feature branch.\n\n## Pull Requests\nWe actively welcome your pull requests.\n\n1. Fork the repo and create your branch from `dev`.\n2. If you've added code that should be tested, add tests.\n3. If you've changed APIs, update the documentation.\n4. Ensure the test suite passes.\n5. Make sure your code lints.\n6. If you haven't already, complete the Contributor License Agreement (\"CLA\").\n\n## Contributor License Agreement (\"CLA\")\nIn order to accept your pull request, we need you to submit a CLA. You only need\nto do this once to work on any of Facebook's open source projects.\n\nComplete your CLA here: <https://code.facebook.com/cla>\n\n## Workflow\nZstd uses a branch-based workflow for making changes to the codebase. Typically, zstd\nwill use a new branch per sizable topic. For smaller changes, it is okay to lump multiple\nrelated changes into a branch.\n\nOur contribution process works in three main stages:\n1. Local development\n    * Update:\n        * Checkout your fork of zstd if you have not already\n        ```\n        git checkout https://github.com/<username>/zstd\n        cd zstd\n        ```\n        * Update your local dev branch\n        ```\n        git pull https://github.com/facebook/zstd dev\n        git push origin dev\n        ```\n    * Topic and development:\n        * Make a new branch on your fork about the topic you're developing for\n        ```\n        # branch names should be concise but sufficiently informative\n        git checkout -b <branch-name>\n        git push origin <branch-name>\n        ```\n        * Make commits and push\n        ```\n        # make some changes =\n        git add -u && git commit -m <message>\n        git push origin <branch-name>\n        ```\n        * Note: run local tests to ensure that your changes didn't break existing functionality\n            * Quick check\n            ```\n            make shortest\n            ```\n            * Longer check\n            ```\n            make test\n            ```\n2. Code Review and CI tests\n    * Ensure CI tests pass:\n        * Before sharing anything to the community, create a pull request in your own fork against the dev branch\n        and make sure that all GitHub Actions CI tests pass. See the Continuous Integration section below for more information.\n        * Ensure that static analysis passes on your development machine. See the Static Analysis section\n        below to see how to do this.\n    * Create a pull request:\n        * When you are ready to share you changes to the community, create a pull request from your branch\n        to facebook:dev. You can do this very easily by clicking 'Create Pull Request' on your fork's home\n        page.\n        * From there, select the branch where you made changes as your source branch and facebook:dev\n        as the destination.\n        * Examine the diff presented between the two branches to make sure there is nothing unexpected.\n    * Write a good pull request description:\n        * While there is no strict template that our contributors follow, we would like them to\n        sufficiently summarize and motivate the changes they are proposing. We recommend all pull requests,\n        at least indirectly, address the following points.\n            * Is this pull request important and why?\n            * Is it addressing an issue? If so, what issue? (provide links for convenience please)\n            * Is this a new feature? If so, why is it useful and/or necessary?\n            * Are there background references and documents that reviewers should be aware of to properly assess this change?\n        * Note: make sure to point out any design and architectural decisions that you made and the rationale behind them.\n        * Note: if you have been working with a specific user and would like them to review your work, make sure you mention them using (@<username>)\n    * Submit the pull request and iterate with feedback.\n3. Merge and Release\n    * Getting approval:\n        * You will have to iterate on your changes with feedback from other collaborators to reach a point\n        where your pull request can be safely merged.\n        * To avoid too many comments on style and convention, make sure that you have a\n        look at our style section below before creating a pull request.\n        * Eventually, someone from the zstd team will approve your pull request and not long after merge it into\n        the dev branch.\n    * Housekeeping:\n        * Most PRs are linked with one or more Github issues. If this is the case for your PR, make sure\n        the corresponding issue is mentioned. If your change 'fixes' or completely addresses the\n        issue at hand, then please indicate this by requesting that an issue be closed by commenting.\n        * Just because your changes have been merged does not mean the topic or larger issue is complete. Remember\n        that the change must make it to an official zstd release for it to be meaningful. We recommend\n        that contributors track the activity on their pull request and corresponding issue(s) page(s) until\n        their change makes it to the next release of zstd. Users will often discover bugs in your code or\n        suggest ways to refine and improve your initial changes even after the pull request is merged.\n\n## Static Analysis\nStatic analysis is a process for examining the correctness or validity of a program without actually\nexecuting it. It usually helps us find many simple bugs. Zstd uses clang's `scan-build` tool for\nstatic analysis. You can install it by following the instructions for your OS on https://clang-analyzer.llvm.org/scan-build.\n\nOnce installed, you can ensure that our static analysis tests pass on your local development machine\nby running:\n```\nmake staticAnalyze\n```\n\nIn general, you can use `scan-build` to static analyze any build script. For example, to static analyze\njust `contrib/largeNbDicts` and nothing else, you can run:\n\n```\nscan-build make -C contrib/largeNbDicts largeNbDicts\n```\n\n### Pitfalls of static analysis\n`scan-build` is part of our regular CI suite. Other static analyzers are not.\n\nIt can be useful to look at additional static analyzers once in a while (and we do), but it's not a good idea to multiply the nb of analyzers run continuously at each commit and PR. The reasons are :\n\n- Static analyzers are full of false positive. The signal to noise ratio is actually pretty low.\n- A good CI policy is \"zero-warning tolerance\". That means that all issues must be solved, including false positives. This quickly becomes a tedious workload.\n- Multiple static analyzers will feature multiple kind of false positives, sometimes applying to the same code but in different ways leading to :\n   + tortuous code, trying to please multiple constraints, hurting readability and therefore maintenance. Sometimes, such complexity introduce other more subtle bugs, that are just out of scope of the analyzers.\n   + sometimes, these constraints are mutually exclusive : if one try to solve one, the other static analyzer will complain, they can't be both happy at the same time.\n- As if that was not enough, the list of false positives change with each version. It's hard enough to follow one static analyzer, but multiple ones with their own update agenda, this quickly becomes a massive velocity reducer.\n\nThis is different from running a static analyzer once in a while, looking at the output, and __cherry picking__ a few warnings that seem helpful, either because they detected a genuine risk of bug, or because it helps expressing the code in a way which is more readable or more difficult to misuse. These kinds of reports can be useful, and are accepted.\n\n## Continuous Integration\nCI tests run every time a pull request (PR) is created or updated. The exact tests\nthat get run will depend on the destination branch you specify. Some tests take\nlonger to run than others. Currently, our CI is set up to run a short\nseries of tests when creating a PR to the dev branch and a longer series of tests\nwhen creating a PR to the release branch. You can look in the configuration files\nof the respective CI platform for more information on what gets run when.\n\nMost people will just want to create a PR with the destination set to their local dev\nbranch of zstd. You can then find the status of the tests on the PR's page. You can also\nre-run tests and cancel running tests from the PR page or from the respective CI's dashboard.\n\nAlmost all of zstd's CI runs on GitHub Actions (configured at `.github/workflows`), which will automatically run on PRs to your\nown fork. A small number of tests run on other services (e.g. Travis CI, Circle CI, Appveyor).\nThese require work to set up on your local fork, and (at least for Travis CI) cost money.\nTherefore, if the PR on your local fork passes GitHub Actions, feel free to submit a PR\nagainst the main repo.\n\n### Third-party CI\nA small number of tests cannot run on GitHub Actions, or have yet to be migrated.\nFor these, we use a variety of third-party services (listed below). It is not necessary to set\nthese up on your fork in order to contribute to zstd; however, we do link to instructions for those\nwho want earlier signal.\n\n| Service   | Purpose                                                                                                    | Setup Links                                                                                                                                            | Config Path            |\n|-----------|------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------|\n| Travis CI | Used for testing on non-x86 architectures such as PowerPC                                                  | https://docs.travis-ci.com/user/tutorial/#to-get-started-with-travis-ci-using-github <br> https://github.com/marketplace/travis-ci                     | `.travis.yml`          |\n| AppVeyor  | Used for some Windows testing (e.g. cygwin, mingw)                                                         | https://www.appveyor.com/blog/2018/10/02/github-apps-integration/ <br> https://github.com/marketplace/appveyor                                         | `appveyor.yml`         |\n| Cirrus CI | Used for testing on FreeBSD                                                                                | https://github.com/marketplace/cirrus-ci/                                                                                                              | `.cirrus.yml`          |\n| Circle CI | Historically was used to provide faster signal,<br/> but we may be able to migrate these to Github Actions | https://circleci.com/docs/2.0/getting-started/#setting-up-circleci <br> https://youtu.be/Js3hMUsSZ2c <br> https://circleci.com/docs/2.0/enable-checks/ | `.circleci/config.yml` |\n\nNote: the instructions linked above mostly cover how to set up a repository with CI from scratch. \nThe general idea should be the same for setting up CI on your fork of zstd, but you may have to \nfollow slightly different steps. In particular, please ignore any instructions related to setting up\nconfig files (since zstd already has configs for each of these services).\n\n## Performance\nPerformance is extremely important for zstd and we only merge pull requests whose performance\nlandscape and corresponding trade-offs have been adequately analyzed, reproduced, and presented.\nThis high bar for performance means that every PR which has the potential to\nimpact performance takes a very long time for us to properly review. That being said, we\nalways welcome contributions to improve performance (or worsen performance for the trade-off of\nsomething else). Please keep the following in mind before submitting a performance related PR:\n\n1. Zstd isn't as old as gzip but it has been around for time now and its evolution is\nvery well documented via past Github issues and pull requests. It may be the case that your\nparticular performance optimization has already been considered in the past. Please take some\ntime to search through old issues and pull requests using keywords specific to your\nwould-be PR. Of course, just because a topic has already been discussed (and perhaps rejected\non some grounds) in the past, doesn't mean it isn't worth bringing up again. But even in that case,\nit will be helpful for you to have context from that topic's history before contributing.\n2. The distinction between noise and actual performance gains can unfortunately be very subtle\nespecially when microbenchmarking extremely small wins or losses. The only remedy to getting\nsomething subtle merged is extensive benchmarking. You will be doing us a great favor if you\ntake the time to run extensive, long-duration, and potentially cross-(os, platform, process, etc)\nbenchmarks on your end before submitting a PR. Of course, you will not be able to benchmark\nyour changes on every single processor and os out there (and neither will we) but do that best\nyou can:) We've added some things to think about when benchmarking below in the Benchmarking\nPerformance section which might be helpful for you.\n3. Optimizing performance for a certain OS, processor vendor, compiler, or network system is a perfectly\nlegitimate thing to do as long as it does not harm the overall performance health of Zstd.\nThis is a hard balance to strike but please keep in mind other aspects of Zstd when\nsubmitting changes that are clang-specific, windows-specific, etc.\n\n## Benchmarking Performance\nPerformance microbenchmarking is a tricky subject but also essential for Zstd. We value empirical\ntesting over theoretical speculation. This guide it not perfect but for most scenarios, it\nis a good place to start.\n\n### Stability\nUnfortunately, the most important aspect in being able to benchmark reliably is to have a stable\nbenchmarking machine. A virtual machine, a machine with shared resources, or your laptop\nwill typically not be stable enough to obtain reliable benchmark results. If you can get your\nhands on a desktop, this is usually a better scenario.\n\nOf course, benchmarking can be done on non-hyper-stable machines as well. You will just have to\ndo a little more work to ensure that you are in fact measuring the changes you've made not and\nnoise. Here are some things you can do to make your benchmarks more stable:\n\n1. The most simple thing you can do to drastically improve the stability of your benchmark is\nto run it multiple times and then aggregate the results of those runs. As a general rule of\nthumb, the smaller the change you are trying to measure, the more samples of benchmark runs\nyou will have to aggregate over to get reliable results. Here are some additional things to keep in\nmind when running multiple trials:\n    * How you aggregate your samples are important. You might be tempted to use the mean of your\n    results. While this is certainly going to be a more stable number than a raw single sample\n    benchmark number, you might have more luck by taking the median. The mean is not robust to\n    outliers whereas the median is. Better still, you could simply take the fastest speed your\n    benchmark achieved on each run since that is likely the fastest your process will be\n    capable of running your code. In our experience, this (aggregating by just taking the sample\n    with the fastest running time) has been the most stable approach.\n    * The more samples you have, the more stable your benchmarks should be. You can verify\n    your improved stability by looking at the size of your confidence intervals as you\n    increase your sample count. These should get smaller and smaller. Eventually hopefully\n    smaller than the performance win you are expecting.\n    * Most processors will take some time to get `hot` when running anything. The observations\n    you collect during that time period will very different from the true performance number. Having\n    a very large number of sample will help alleviate this problem slightly but you can also\n    address is directly by simply not including the first `n` iterations of your benchmark in\n    your aggregations. You can determine `n` by simply looking at the results from each iteration\n    and then hand picking a good threshold after which the variance in results seems to stabilize.\n2. You cannot really get reliable benchmarks if your host machine is simultaneously running\nanother cpu/memory-intensive application in the background. If you are running benchmarks on your\npersonal laptop for instance, you should close all applications (including your code editor and\nbrowser) before running your benchmarks. You might also have invisible background applications\nrunning. You can see what these are by looking at either Activity Monitor on Mac or Task Manager\non Windows. You will get more stable benchmark results of you end those processes as well.\n    * If you have multiple cores, you can even run your benchmark on a reserved core to prevent\n    pollution from other OS and user processes. There are a number of ways to do this depending\n    on your OS:\n        * On linux boxes, you have use https://github.com/lpechacek/cpuset.\n        * On Windows, you can \"Set Processor Affinity\" using https://www.thewindowsclub.com/processor-affinity-windows\n        * On Mac, you can try to use their dedicated affinity API https://developer.apple.com/library/archive/releasenotes/Performance/RN-AffinityAPI/#//apple_ref/doc/uid/TP40006635-CH1-DontLinkElementID_2\n3. To benchmark, you will likely end up writing a separate c/c++ program that will link libzstd.\nDynamically linking your library will introduce some added variation (not a large amount but\ndefinitely some). Statically linking libzstd will be more stable. Static libraries should\nbe enabled by default when building zstd.\n4. Use a profiler with a good high resolution timer. See the section below on profiling for\ndetails on this.\n5. Disable frequency scaling, turbo boost and address space randomization (this will vary by OS)\n6. Try to avoid storage. On some systems you can use tmpfs. Putting the program, inputs and outputs on\ntmpfs avoids touching a real storage system, which can have a pretty big variability.\n\nAlso check our LLVM's guide on benchmarking here: https://llvm.org/docs/Benchmarking.html\n\n### Zstd benchmark\nThe fastest signal you can get regarding your performance changes is via the in-build zstd cli\nbench option. You can run Zstd as you typically would for your scenario using some set of options\nand then additionally also specify the `-b#` option. Doing this will run our benchmarking pipeline\nfor that options you have just provided. If you want to look at the internals of how this\nbenchmarking script works, you can check out programs/benchzstd.c\n\nFor example: say you have made a change that you believe improves the speed of zstd level 1. The\nvery first thing you should use to assess whether you actually achieved any sort of improvement\nis `zstd -b`. You might try to do something like this. Note: you can use the `-i` option to\nspecify a running time for your benchmark in seconds (default is 3 seconds).\nUsually, the longer the running time, the more stable your results will be.\n\n```\n$ git checkout <commit-before-your-change>\n$ make && cp zstd zstd-old\n$ git checkout <commit-after-your-change>\n$ make && cp zstd zstd-new\n$ zstd-old -i5 -b1 <your-test-data>\n 1<your-test-data>         :      8990 ->      3992 (2.252), 302.6 MB/s , 626.4 MB/s\n$ zstd-new -i5 -b1 <your-test-data>\n 1<your-test-data>         :      8990 ->      3992 (2.252), 302.8 MB/s , 628.4 MB/s\n```\n\nUnless your performance win is large enough to be visible despite the intrinsic noise\non your computer, benchzstd alone will likely not be enough to validate the impact of your\nchanges. For example, the results of the example above indicate that effectively nothing\nchanged but there could be a small <3% improvement that the noise on the host machine\nobscured. So unless you see a large performance win (10-15% consistently) using just\nthis method of evaluation will not be sufficient.\n\n### Profiling\nThere are a number of great profilers out there. We're going to briefly mention how you can\nprofile your code using `instruments` on mac, `perf` on linux and `visual studio profiler`\non Windows.\n\nSay you have an idea for a change that you think will provide some good performance gains\nfor level 1 compression on Zstd. Typically this means, you have identified a section of\ncode that you think can be made to run faster.\n\nThe first thing you will want to do is make sure that the piece of code is actually taking up\na notable amount of time to run. It is usually not worth optimizing something which accounts for less than\n0.0001% of the total running time. Luckily, there are tools to help with this.\nProfilers will let you see how much time your code spends inside a particular function.\nIf your target code snippet is only part of a function, it might be worth trying to\nisolate that snippet by moving it to its own function (this is usually not necessary but\nmight be).\n\nMost profilers (including the profilers discussed below) will generate a call graph of\nfunctions for you. Your goal will be to find your function of interest in this call graph\nand then inspect the time spent inside of it. You might also want to look at the annotated\nassembly which most profilers will provide you with.\n\n#### Instruments\nWe will once again consider the scenario where you think you've identified a piece of code\nwhose performance can be improved upon. Follow these steps to profile your code using\nInstruments.\n\n1. Open Instruments\n2. Select `Time Profiler` from the list of standard templates\n3. Close all other applications except for your instruments window and your terminal\n4. Run your benchmarking script from your terminal window\n    * You will want a benchmark that runs for at least a few seconds (5 seconds will\n    usually be long enough). This way the profiler will have something to work with\n    and you will have ample time to attach your profiler to this process:)\n    * I will just use benchzstd as my benchmarmking script for this example:\n```\n$ zstd -b1 -i5 <my-data> # this will run for 5 seconds\n```\n5. Once you run your benchmarking script, switch back over to instruments and attach your\nprocess to the time profiler. You can do this by:\n    * Clicking on the `All Processes` drop down in the top left of the toolbar.\n    * Selecting your process from the dropdown. In my case, it is just going to be labeled\n    `zstd`\n    * Hitting the bright red record circle button on the top left of the toolbar\n6. You profiler will now start collecting metrics from your benchmarking script. Once\nyou think you have collected enough samples (usually this is the case after 3 seconds of\nrecording), stop your profiler.\n7. Make sure that in toolbar of the bottom window, `profile` is selected.\n8. You should be able to see your call graph.\n    * If you don't see the call graph or an incomplete call graph, make sure you have compiled\n    zstd and your benchmarking script using debug flags. On mac and linux, this just means\n    you will have to supply the `-g` flag alone with your build script. You might also\n    have to provide the `-fno-omit-frame-pointer` flag\n9. Dig down the graph to find your function call and then inspect it by double clicking\nthe list item. You will be able to see the annotated source code and the assembly side by\nside.\n\n#### Perf\n\nThis wiki has a pretty detailed tutorial on getting started working with perf so we'll\nleave you to check that out of you're getting started:\n\nhttps://perf.wiki.kernel.org/index.php/Tutorial\n\nSome general notes on perf:\n* Use `perf stat -r # <bench-program>` to quickly get some relevant timing and\ncounter statistics. Perf uses a high resolution timer and this is likely one\nof the first things your team will run when assessing your PR.\n* Perf has a long list of hardware counters that can be viewed with `perf --list`.\nWhen measuring optimizations, something worth trying is to make sure the hardware\ncounters you expect to be impacted by your change are in fact being so. For example,\nif you expect the L1 cache misses to decrease with your change, you can look at the\ncounter `L1-dcache-load-misses`\n* Perf hardware counters will not work on a virtual machine.\n\n#### Visual Studio\n\nTODO\n\n## Issues\nWe use GitHub issues to track public bugs. Please ensure your description is\nclear and has sufficient instructions to be able to reproduce the issue.\n\nFacebook has a [bounty program](https://www.facebook.com/whitehat/) for the safe\ndisclosure of security bugs. In those cases, please go through the process\noutlined on that page and do not file a public issue.\n\n## Coding Style\nIt's a pretty long topic, which is difficult to summarize in a single paragraph.\nAs a rule of thumbs, try to imitate the coding style of\nsimilar lines of codes around your contribution.\nThe following is a non-exhaustive list of rules employed in zstd code base:\n\n### C90\nThis code base is following strict C90 standard,\nwith 2 extensions : 64-bit `long long` types, and variadic macros.\nThis rule is applied strictly to code within `lib/` and `programs/`.\nSub-project in `contrib/` are allowed to use other conventions.\n\n### C++ direct compatibility : symbol mangling\nAll public symbol declarations must be wrapped in `extern \u201cC\u201d { \u2026 }`,\nso that this project can be compiled as C++98 code,\nand linked into C++ applications.\n\n### Minimal Frugal\nThis design requirement is fundamental to preserve the portability of the code base.\n#### Dependencies\n- Reduce dependencies to the minimum possible level.\n  Any dependency should be considered \u201cbad\u201d by default,\n  and only tolerated because it provides a service in a better way than can be achieved locally.\n  The only external dependencies this repository tolerates are\n  standard C libraries, and in rare cases, system level headers.\n- Within `lib/`, this policy is even more drastic.\n  The only external dependencies allowed are `<assert.h>`, `<stdlib.h>`, `<string.h>`,\n  and even then, not directly.\n  In particular, no function shall ever allocate on heap directly,\n  and must use instead `ZSTD_malloc()` and equivalent.\n  Other accepted non-symbol headers are `<stddef.h>` and `<limits.h>`.\n- Within the project, there is a strict hierarchy of dependencies that must be respected.\n  `programs/` is allowed to depend on `lib/`, but only its public API.\n  Within `lib/`, `lib/common` doesn't depend on any other directory.\n  `lib/compress` and `lib/decompress` shall not depend on each other.\n  `lib/dictBuilder` can depend on `lib/common` and `lib/compress`, but not `lib/decompress`.\n#### Resources\n- Functions in `lib/` must use very little stack space,\n  several dozens of bytes max.\n  Everything larger must use the heap allocator,\n  or require a scratch buffer to be emplaced manually.\n\n### Naming\n* All public symbols are prefixed with `ZSTD_`\n  + private symbols, with a scope limited to their own unit, are free of this restriction.\n    However, since `libzstd` source code can be amalgamated,\n    each symbol name must attempt to be (and remain) unique.\n    Avoid too generic names that could become ground for future collisions.\n    This generally implies usage of some form of prefix.\n* For symbols (functions and variables), naming convention is `PREFIX_camelCase`.\n  + In some advanced cases, one can also find :\n    - `PREFIX_prefix2_camelCase`\n    - `PREFIX_camelCase_extendedQualifier`\n* Multi-words names generally consist of an action followed by object:\n  - for example : `ZSTD_createCCtx()`\n* Prefer positive actions\n  - `goBackward` rather than `notGoForward`\n* Type names (`struct`, etc.) follow similar convention,\n  except that they are allowed and even invited to start by an Uppercase letter.\n  Example : `ZSTD_CCtx`, `ZSTD_CDict`\n* Macro names are all Capital letters.\n  The same composition rules (`PREFIX_NAME_QUALIFIER`) apply.\n* File names are all lowercase letters.\n  The convention is `snake_case`.\n  File names **must** be unique across the entire code base,\n  even when they stand in clearly separated directories.\n\n### Qualifiers\n* This code base is `const` friendly, if not `const` fanatical.\n  Any variable that can be `const` (aka. read-only) **must** be `const`.\n  Any pointer which content will not be modified must be `const`.\n  This property is then controlled at compiler level.\n  `const` variables are an important signal to readers that this variable isn't modified.\n  Conversely, non-const variables are a signal to readers to watch out for modifications later on in the function.\n* If a function must be inlined, mention it explicitly,\n  using project's own portable macros, such as `FORCE_INLINE_ATTR`,\n  defined in `lib/common/compiler.h`.\n\n### Debugging\n* **Assertions** are welcome, and should be used very liberally,\n  to control any condition the code expects for its correct execution.\n  These assertion checks will be run in debug builds, and disabled in production.\n* For traces, this project provides its own debug macros,\n  in particular `DEBUGLOG(level, ...)`, defined in `lib/common/debug.h`.\n\n### Code documentation\n* Avoid code documentation that merely repeats what the code is already stating.\n  Whenever applicable, prefer employing the code as the primary way to convey explanations.\n  Example 1 : `int nbTokens = n;` instead of `int i = n; /* i is a nb of tokens *./`.\n  Example 2 : `assert(size > 0);` instead of `/* here, size should be positive */`.\n* At declaration level, the documentation explains how to use the function or variable\n  and when applicable why it's needed, of the scenarios where it can be useful.\n* At implementation level, the documentation explains the general outline of the algorithm employed,\n  and when applicable why this specific choice was preferred.\n\n### General layout\n* 4 spaces for indentation rather than tabs\n* Code documentation shall directly precede function declaration or implementation\n* Function implementations and its code documentation should be preceded and followed by an empty line\n\n\n## License\nBy contributing to Zstandard, you agree that your contributions will be licensed\nunder both the [LICENSE](LICENSE) file and the [COPYING](COPYING) file in the root directory of this source tree.\n"
      },
      "source": "https://raw.githubusercontent.com/large-scale-gxe-methods/GEM/master/thirdparty/zstd-1.5.5/CONTRIBUTING.md",
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-09-12T02:54:16Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-05-30T13:31:23Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9945599758662856,
      "result": {
        "original_header": "GEM",
        "type": "Text_excerpt",
        "value": "\r\nGEM (Gene-Environment interaction analysis for Millions of samples) is a software program for large-scale gene-environment interaction testing in samples from unrelated individuals. It enables genome-wide association studies in up to millions of samples while allowing for multiple exposures, control for genotype-covariate interactions, and robust inference.  \r\n\r\n\r\n<br />\r\nCurrent version: 1.5.3 \r\n\r\n<br />\r\nAdditional documentation:  \r\nhttps://large-scale-gxe-methods.github.io/GEMShowcaseWorkspace\r\n\r\n<br />\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/large-scale-gxe-methods/GEM/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9949580136754789,
      "result": {
        "original_header": "Recent Updates",
        "type": "Text_excerpt",
        "value": "[Version 1.5.3](https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.5.3) - May 20, 2024:\r\n* Included stratified values for binary outcomes\r\n\r\n[Version 1.5.2](https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.5.2) - August 16, 2023:\r\n* Fixed the output when there is no exposure\r\n\r\n[Version 1.5.1](https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.5.1) - April 20, 2023:\r\n* Treated empty strings as missing values \r\n* Fixed a bug for empty strings at the end of each line\r\n* Minor changes to messages printed to stdout\r\n* Error out if the sample size is not greater than the number of predictors (intercept, exposures, interaction covariates, and covariates) in the null model fitting\r\n\r\n\r\n[Version 1.5](https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.5) - March 9, 2023:\r\n\r\n* Changed the default of the --center flag to 2 to center all the interaction covariates only\r\n\r\n[Version 1.4.5](https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.4.5) - November 11, 2022:\r\n\r\n* Added collinearity check of the covariates before fitting the null model\r\n\r\n[Version 1.4.4](https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.4.4) - October 5, 2022:\r\n\r\n* Fixed the bugs of include-snp-file\r\n* Removed the default value of flag \"--center\" \r\n\r\n[Version 1.4.3](https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.4.3) - March 23, 2022:\r\n\r\n* Sorted the output headers of categorical variables\r\n\r\n[Version 1.4.2](https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.4.2) - November 22, 2021:\r\n\r\n* Add math.h library to install GEM through Docker desktop\r\n* Added a binary executable file\r\n\r\n[Version 1.4.1](https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.4.1) - September 14, 2021:\r\n\r\n* Added to read phenotype files created from the Windows system\r\n\r\n[Version 1.4](https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.4) - July 2, 2021:\r\n\r\n* Remove --pheno-type flag. If the number of levels (unique observations) is 2, the phenotype is treated as binary; otherwise it is assumed to be continuous\r\n* Check for categorical exposures and interaction covariates\r\n* Output number of non-missing samples (N) and allele frequency (AF) for effect allele for each combination of strata for all\r\n\u2003 exposures and interaction covariates\r\n* Add two additional flags --categorical-names and --cat-threshold for user definition of categorical variables\r\n* Output the SE instead of variance for the coefficient estimates\r\n* Output only the lower triangle of the covariance matrix instead of the full matrix\r\n* For robust analysis and \"meta\"/\"full\" output style, include model-based summary statistics in the output file\r\n* Column names for the robust summary statistics will include the prefix \"robust_\"\r\n* For \"full\" output style, an initial header line with the dispersion is included in the output file\r\n* The V matrix no longer included in the output file for \"full\" output style\r\n\r\n[Version 1.3](https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.3) - April 7, 2021:\r\n\r\n* Add a new flag (--output-style) to modify which summary statistics should be included in the the output file\r\n\u2003\u2003\u2003\u2003\u2003    Column names now include the exposure and interaction covariate names instead of numbers.\r\n* The --exposure-names flag is now optional. If no exposures are specified, GEM will run a G-only model.\r\n\u2003\u2003\u2003\u2003\u2003    Covariates (not of interest) can still be adjusted for using --covar-names flag.\r\n\r\n[Version 1.2](https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.2) - January 22, 2021:\r\n\r\n* Fix issue to allow for space and tab delimited phenotype files.\r\n* Allow for centering and scaling of exposures and covariates.\r\n* Update calculations for model-based joint test\r\n* Update calculations for robust joint test\r\n* Output covariance, coefficients and standard errors to the log.\r\n* Change Allele1 and Allele2 in outfile file to Non_Effect_Allele and Effect_Allele.\r\n* Fix bug when phenotype is binary and there are missing genotypes.\r\n* Support PGEN/BED files.\r\n\r\n[Version 1.1](https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.1) - July 21, 2020:\r\n\r\n* Allow GEM to subset the BGEN file based on a list of variants to include for analysis. --include-snp-file\r\n* Use matrix operation to adjust for covariates instead of for-loop. Use the libdeflate package for faster zlib decompression of BGEN genotype blocks. Compile GEM with -O2 (optimizer flag). Prioritize BGEN sample file over the BGEN sample identifier block. Error if phenotype (--pheno-name) is also included as an exposoure or covariate\r\n* Support BGEN v1.1, v1.2 and v1.3 uncompressed genotype blocks.\r\n* Fix major printing bug.\r\n* Handle missing genotypes in BGEN files.\r\n\r\n<br />\r\n<br />\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/large-scale-gxe-methods/GEM/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/large-scale-gxe-methods/GEM/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/large-scale-gxe-methods/GEM/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "large-scale-gxe-methods/GEM"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "GEM"
      },
      "source": "https://raw.githubusercontent.com/large-scale-gxe-methods/GEM/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick Installation",
        "parent_header": [
          "GEM"
        ],
        "type": "Text_excerpt",
        "value": "\r\nOption 1: Use the binary executable file for Linux\r\n* Download the binary file from: [v1.5.3 Release](https://github.com/large-scale-gxe-methods/GEM/releases/download/v1.5.3/GEM_1.5.3_Intel)\r\n* Change the permission: chmod a+x GEM_1.5.3\r\n\r\nOption 2: Build GEM Library Dependencies  \r\n   * C++11 compiler or later \r\n   * BLAS/LAPACK. For Intel processors, we recommend that GEM be compiled with an optimized math routine library such as the Intel oneAPI Math Kernal Library to replace BLAS/LAPACK for optimal performance.\r\n   * Boost C++ libraries. GEM links to the following Boost libraries:  ```boost_program_options, boost_thread, boost_system, and boost_filesystem```  \r\n   * Eigen Library. GEM links to the header files of Eigen. \r\n\r\n<br />\r\n\r\nTo install GEM, run the following lines of code:\r\n ```\r\n git clone https://github.com/large-scale-gxe-methods/GEM\r\n cd GEM/\r\n cd src/  \r\n make  \r\n ```\r\n\r\n<br />\r\n<br />\r\n<br />\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/large-scale-gxe-methods/GEM/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/large-scale-gxe-methods/GEM/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "*****************************************************************************\n* Contents                                                                  *    \n*   License for GEM                                                         *\n*   Third-Party Licenses for Source Code Bundled in GEM                     * \n*      Libdeflate 1.18                                                      * \n*      Plink 2.0                                                            *\n*      Zstandard (zstd) 1.5.5                                               *\n*   Third-Party Licenses for Libraries Linked in the Binary Release of GEM  *\n*      Boost                                                                *\n*      Eigen                                                                *\n*      Intel oneAPI Math Kernel Library (oneMKL)                            *\n*****************************************************************************\n\n*******************\n*License for GEM  *\n*******************\nGEM : Gene-Environment interaction analysis for Millions of samples\nCopyright (C) 2018-2024  Liang Hong, Han Chen, Duy Pham, Cong Pan, Samaneh Salehi Nasab\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\n*******************************************************\n*Third-Party Licenses for Source Code Bundled in GEM  *\n*******************************************************\n\n*****************************************************************\nLibdeflate 1.18\n\nLibdeflate is MIT-licensed \n(<https://github.com/ebiggers/libdeflate/blob/master/COPYING>)\n*****************************************************************\n\nCopyright 2016 Eric Biggers\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation files\n(the \"Software\"), to deal in the Software without restriction,\nincluding without limitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of the Software,\nand to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\nBE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\nACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n**************************************************************\nPlink 2.0\n\nPlink is LGPLv3+-licensed \n(https://www.cog-genomics.org/plink/2.0/dev)\n\nCopyright (C) 2005-2023 Shaun Purcell, Christopher Chang\n**************************************************************\n\n                   GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\n  This version of the GNU Lesser General Public License incorporates\nthe terms and conditions of version 3 of the GNU General Public\nLicense, supplemented by the additional permissions listed below.\n\n  0. Additional Definitions.\n\n  As used herein, \"this License\" refers to version 3 of the GNU Lesser\nGeneral Public License, and the \"GNU GPL\" refers to version 3 of the GNU\nGeneral Public License.\n\n  \"The Library\" refers to a covered work governed by this License,\nother than an Application or a Combined Work as defined below.\n\n  An \"Application\" is any work that makes use of an interface provided\nby the Library, but which is not otherwise based on the Library.\nDefining a subclass of a class defined by the Library is deemed a mode\nof using an interface provided by the Library.\n\n  A \"Combined Work\" is a work produced by combining or linking an\nApplication with the Library.  The particular version of the Library\nwith which the Combined Work was made is also called the \"Linked\nVersion\".\n\n  The \"Minimal Corresponding Source\" for a Combined Work means the\nCorresponding Source for the Combined Work, excluding any source code\nfor portions of the Combined Work that, considered in isolation, are\nbased on the Application, and not on the Linked Version.\n\n  The \"Corresponding Application Code\" for a Combined Work means the\nobject code and/or source code for the Application, including any data\nand utility programs needed for reproducing the Combined Work from the\nApplication, but excluding the System Libraries of the Combined Work.\n\n  1. Exception to Section 3 of the GNU GPL.\n\n  You may convey a covered work under sections 3 and 4 of this License\nwithout being bound by section 3 of the GNU GPL.\n\n  2. Conveying Modified Versions.\n\n  If you modify a copy of the Library, and, in your modifications, a\nfacility refers to a function or data to be supplied by an Application\nthat uses the facility (other than as an argument passed when the\nfacility is invoked), then you may convey a copy of the modified\nversion:\n\n   a) under this License, provided that you make a good faith effort to\n   ensure that, in the event an Application does not supply the\n   function or data, the facility still operates, and performs\n   whatever part of its purpose remains meaningful, or\n\n   b) under the GNU GPL, with none of the additional permissions of\n   this License applicable to that copy.\n\n  3. Object Code Incorporating Material from Library Header Files.\n\n  The object code form of an Application may incorporate material from\na header file that is part of the Library.  You may convey such object\ncode under terms of your choice, provided that, if the incorporated\nmaterial is not limited to numerical parameters, data structure\nlayouts and accessors, or small macros, inline functions and templates\n(ten or fewer lines in length), you do both of the following:\n\n   a) Give prominent notice with each copy of the object code that the\n   Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the object code with a copy of the GNU GPL and this license\n   document.\n\n  4. Combined Works.\n\n  You may convey a Combined Work under terms of your choice that,\ntaken together, effectively do not restrict modification of the\nportions of the Library contained in the Combined Work and reverse\nengineering for debugging such modifications, if you also do each of\nthe following:\n\n   a) Give prominent notice with each copy of the Combined Work that\n   the Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the Combined Work with a copy of the GNU GPL and this license\n   document.\n\n   c) For a Combined Work that displays copyright notices during\n   execution, include the copyright notice for the Library among\n   these notices, as well as a reference directing the user to the\n   copies of the GNU GPL and this license document.\n\n   d) Do one of the following:\n\n       0) Convey the Minimal Corresponding Source under the terms of this\n       License, and the Corresponding Application Code in a form\n       suitable for, and under terms that permit, the user to\n       recombine or relink the Application with a modified version of\n       the Linked Version to produce a modified Combined Work, in the\n       manner specified by section 6 of the GNU GPL for conveying\n       Corresponding Source.\n\n       1) Use a suitable shared library mechanism for linking with the\n       Library.  A suitable mechanism is one that (a) uses at run time\n       a copy of the Library already present on the user's computer\n       system, and (b) will operate properly with a modified version\n       of the Library that is interface-compatible with the Linked\n       Version.\n\n   e) Provide Installation Information, but only if you would otherwise\n   be required to provide such information under section 6 of the\n   GNU GPL, and only to the extent that such information is\n   necessary to install and execute a modified version of the\n   Combined Work produced by recombining or relinking the\n   Application with a modified version of the Linked Version. (If\n   you use option 4d0, the Installation Information must accompany\n   the Minimal Corresponding Source and Corresponding Application\n   Code. If you use option 4d1, you must provide the Installation\n   Information in the manner specified by section 6 of the GNU GPL\n   for conveying Corresponding Source.)\n\n  5. Combined Libraries.\n\n  You may place library facilities that are a work based on the\nLibrary side by side in a single library together with other library\nfacilities that are not Applications and are not covered by this\nLicense, and convey such a combined library under terms of your\nchoice, if you do both of the following:\n\n   a) Accompany the combined library with a copy of the same work based\n   on the Library, uncombined with any other library facilities,\n   conveyed under the terms of this License.\n\n   b) Give prominent notice with the combined library that part of it\n   is a work based on the Library, and explaining where to find the\n   accompanying uncombined form of the same work.\n\n  6. Revised Versions of the GNU Lesser General Public License.\n\n  The Free Software Foundation may publish revised and/or new versions\nof the GNU Lesser General Public License from time to time. Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.\n\n  Each version is given a distinguishing version number. If the\nLibrary as you received it specifies that a certain numbered version\nof the GNU Lesser General Public License \"or any later version\"\napplies to it, you have the option of following the terms and\nconditions either of that published version or of any later version\npublished by the Free Software Foundation. If the Library as you\nreceived it does not specify a version number of the GNU Lesser\nGeneral Public License, you may choose any version of the GNU Lesser\nGeneral Public License ever published by the Free Software Foundation.\n\n  If the Library as you received it specifies that a proxy can decide\nwhether future versions of the GNU Lesser General Public License shall\napply, that proxy's public statement of acceptance of any version is\npermanent authorization for you to choose that version for the\nLibrary.\n\n\n**************************************************************\nZstandard (zstd) 1.5.5\n\nZstandard (zstd) is under the 3-Clause BSD License \n(<https://github.com/facebook/zstd/blob/dev/LICENSE>)\n**************************************************************\n\nBSD License\n\nFor Zstandard software\n\nCopyright (c) Meta Platforms, Inc. and affiliates. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n * Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n * Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n * Neither the name Facebook, nor Meta, nor the names of its contributors may\n   be used to endorse or promote products derived from this software without\n   specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n************************************************************************************************\n*Third-Party Licenses for Libraries Linked in the Binary Release of GEM                        *\n*                                                                                              *  \n*Libraries in the section are not bundled in GEM, but they are linked in the binary release.   * \n************************************************************************************************\n\n***********************************************************************\nBoost\n\nCopyright Joe Coder 2004 - 2006.\nDistributed under the Boost Software License, Version 1.0.\n(See accompanying file LICENSE_1_0.txt or copy at\nhttps://www.boost.org/LICENSE_1_0.txt)\n***********************************************************************\n\nBoost Software License - Version 1.0 - August 17th, 2003\n\nPermission is hereby granted, free of charge, to any person or organization\nobtaining a copy of the software and accompanying documentation covered by\nthis license (the \"Software\") to use, reproduce, display, distribute,\nexecute, and transmit the Software, and to prepare derivative works of the\nSoftware, and to permit third-parties to whom the Software is furnished to\ndo so, all subject to the following:\n\nThe copyright notices in the Software and this entire statement, including\nthe above license grant, this restriction and the following disclaimer,\nmust be included in all copies of the Software, in whole or in part, and\nall derivative works of the Software, unless such copies or derivative\nworks are solely in the form of machine-executable object code generated by\na source language processor.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT\nSHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE\nFOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n\n\n****************************************************************************\nEigen\nThe following is the copyright information of Eigen from \nhttps://github.com/bolderflight/eigen/tree/main/src. \n\nThe following is the copyright information from file Householder.h\n\nCopyright (C) 2010 Benoit Jacob jacob.benoit.1@gmail.com\n\nCopyright (C) 2009 Gael Guennebaud gael.guennebaud@inria.fr\n\nThe following is the copyright information from file TriangularMatrix.h\n\nCopyright (C) 2008 Benoit Jacob <jacob.benoit.1@gmail.com>\n\nCopyright (C) 2008-2009 Gael Guennebaud gael.guennebaud@inria.fr\n\nThe following is the copyright information from file Matrix.h\n\nCopyright (C) 2006-2010 Benoit Jacob <jacob.benoit.1@gmail.com>\n\nCopyright (C) 2008-2009 Gael Guennebaud <gael.guennebaud@inria.fr>\n****************************************************************************\n\nMozilla Public License Version 2.0\n==================================\n\n1. Definitions\n--------------\n\n1.1. \"Contributor\"\n    means each individual or legal entity that creates, contributes to\n    the creation of, or owns Covered Software.\n\n1.2. \"Contributor Version\"\n    means the combination of the Contributions of others (if any) used\n    by a Contributor and that particular Contributor's Contribution.\n\n1.3. \"Contribution\"\n    means Covered Software of a particular Contributor.\n\n1.4. \"Covered Software\"\n    means Source Code Form to which the initial Contributor has attached\n    the notice in Exhibit A, the Executable Form of such Source Code\n    Form, and Modifications of such Source Code Form, in each case\n    including portions thereof.\n\n1.5. \"Incompatible With Secondary Licenses\"\n    means\n\n    (a) that the initial Contributor has attached the notice described\n        in Exhibit B to the Covered Software; or\n\n    (b) that the Covered Software was made available under the terms of\n        version 1.1 or earlier of the License, but not also under the\n        terms of a Secondary License.\n\n1.6. \"Executable Form\"\n    means any form of the work other than Source Code Form.\n\n1.7. \"Larger Work\"\n    means a work that combines Covered Software with other material, in \n    a separate file or files, that is not Covered Software.\n\n1.8. \"License\"\n    means this document.\n\n1.9. \"Licensable\"\n    means having the right to grant, to the maximum extent possible,\n    whether at the time of the initial grant or subsequently, any and\n    all of the rights conveyed by this License.\n\n1.10. \"Modifications\"\n    means any of the following:\n\n    (a) any file in Source Code Form that results from an addition to,\n        deletion from, or modification of the contents of Covered\n        Software; or\n\n    (b) any new file in Source Code Form that contains any Covered\n        Software.\n\n1.11. \"Patent Claims\" of a Contributor\n    means any patent claim(s), including without limitation, method,\n    process, and apparatus claims, in any patent Licensable by such\n    Contributor that would be infringed, but for the grant of the\n    License, by the making, using, selling, offering for sale, having\n    made, import, or transfer of either its Contributions or its\n    Contributor Version.\n\n1.12. \"Secondary License\"\n    means either the GNU General Public License, Version 2.0, the GNU\n    Lesser General Public License, Version 2.1, the GNU Affero General\n    Public License, Version 3.0, or any later versions of those\n    licenses.\n\n1.13. \"Source Code Form\"\n    means the form of the work preferred for making modifications.\n\n1.14. \"You\" (or \"Your\")\n    means an individual or a legal entity exercising rights under this\n    License. For legal entities, \"You\" includes any entity that\n    controls, is controlled by, or is under common control with You. For\n    purposes of this definition, \"control\" means (a) the power, direct\n    or indirect, to cause the direction or management of such entity,\n    whether by contract or otherwise, or (b) ownership of more than\n    fifty percent (50%) of the outstanding shares or beneficial\n    ownership of such entity.\n\n2. License Grants and Conditions\n--------------------------------\n\n2.1. Grants\n\nEach Contributor hereby grants You a world-wide, royalty-free,\nnon-exclusive license:\n\n(a) under intellectual property rights (other than patent or trademark)\n    Licensable by such Contributor to use, reproduce, make available,\n    modify, display, perform, distribute, and otherwise exploit its\n    Contributions, either on an unmodified basis, with Modifications, or\n    as part of a Larger Work; and\n\n(b) under Patent Claims of such Contributor to make, use, sell, offer\n    for sale, have made, import, and otherwise transfer either its\n    Contributions or its Contributor Version.\n\n2.2. Effective Date\n\nThe licenses granted in Section 2.1 with respect to any Contribution\nbecome effective for each Contribution on the date the Contributor first\ndistributes such Contribution.\n\n2.3. Limitations on Grant Scope\n\nThe licenses granted in this Section 2 are the only rights granted under\nthis License. No additional rights or licenses will be implied from the\ndistribution or licensing of Covered Software under this License.\nNotwithstanding Section 2.1(b) above, no patent license is granted by a\nContributor:\n\n(a) for any code that a Contributor has removed from Covered Software;\n    or\n\n(b) for infringements caused by: (i) Your and any other third party's\n    modifications of Covered Software, or (ii) the combination of its\n    Contributions with other software (except as part of its Contributor\n    Version); or\n\n(c) under Patent Claims infringed by Covered Software in the absence of\n    its Contributions.\n\nThis License does not grant any rights in the trademarks, service marks,\nor logos of any Contributor (except as may be necessary to comply with\nthe notice requirements in Section 3.4).\n\n2.4. Subsequent Licenses\n\nNo Contributor makes additional grants as a result of Your choice to\ndistribute the Covered Software under a subsequent version of this\nLicense (see Section 10.2) or under the terms of a Secondary License (if\npermitted under the terms of Section 3.3).\n\n2.5. Representation\n\nEach Contributor represents that the Contributor believes its\nContributions are its original creation(s) or it has sufficient rights\nto grant the rights to its Contributions conveyed by this License.\n\n2.6. Fair Use\n\nThis License is not intended to limit any rights You have under\napplicable copyright doctrines of fair use, fair dealing, or other\nequivalents.\n\n2.7. Conditions\n\nSections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted\nin Section 2.1.\n\n3. Responsibilities\n-------------------\n\n3.1. Distribution of Source Form\n\nAll distribution of Covered Software in Source Code Form, including any\nModifications that You create or to which You contribute, must be under\nthe terms of this License. You must inform recipients that the Source\nCode Form of the Covered Software is governed by the terms of this\nLicense, and how they can obtain a copy of this License. You may not\nattempt to alter or restrict the recipients' rights in the Source Code\nForm.\n\n3.2. Distribution of Executable Form\n\nIf You distribute Covered Software in Executable Form then:\n\n(a) such Covered Software must also be made available in Source Code\n    Form, as described in Section 3.1, and You must inform recipients of\n    the Executable Form how they can obtain a copy of such Source Code\n    Form by reasonable means in a timely manner, at a charge no more\n    than the cost of distribution to the recipient; and\n\n(b) You may distribute such Executable Form under the terms of this\n    License, or sublicense it under different terms, provided that the\n    license for the Executable Form does not attempt to limit or alter\n    the recipients' rights in the Source Code Form under this License.\n\n3.3. Distribution of a Larger Work\n\nYou may create and distribute a Larger Work under terms of Your choice,\nprovided that You also comply with the requirements of this License for\nthe Covered Software. If the Larger Work is a combination of Covered\nSoftware with a work governed by one or more Secondary Licenses, and the\nCovered Software is not Incompatible With Secondary Licenses, this\nLicense permits You to additionally distribute such Covered Software\nunder the terms of such Secondary License(s), so that the recipient of\nthe Larger Work may, at their option, further distribute the Covered\nSoftware under the terms of either this License or such Secondary\nLicense(s).\n\n3.4. Notices\n\nYou may not remove or alter the substance of any license notices\n(including copyright notices, patent notices, disclaimers of warranty,\nor limitations of liability) contained within the Source Code Form of\nthe Covered Software, except that You may alter any license notices to\nthe extent required to remedy known factual inaccuracies.\n\n3.5. Application of Additional Terms\n\nYou may choose to offer, and to charge a fee for, warranty, support,\nindemnity or liability obligations to one or more recipients of Covered\nSoftware. However, You may do so only on Your own behalf, and not on\nbehalf of any Contributor. You must make it absolutely clear that any\nsuch warranty, support, indemnity, or liability obligation is offered by\nYou alone, and You hereby agree to indemnify every Contributor for any\nliability incurred by such Contributor as a result of warranty, support,\nindemnity or liability terms You offer. You may include additional\ndisclaimers of warranty and limitations of liability specific to any\njurisdiction.\n\n4. Inability to Comply Due to Statute or Regulation\n---------------------------------------------------\n\nIf it is impossible for You to comply with any of the terms of this\nLicense with respect to some or all of the Covered Software due to\nstatute, judicial order, or regulation then You must: (a) comply with\nthe terms of this License to the maximum extent possible; and (b)\ndescribe the limitations and the code they affect. Such description must\nbe placed in a text file included with all distributions of the Covered\nSoftware under this License. Except to the extent prohibited by statute\nor regulation, such description must be sufficiently detailed for a\nrecipient of ordinary skill to be able to understand it.\n\n5. Termination\n--------------\n\n5.1. The rights granted under this License will terminate automatically\nif You fail to comply with any of its terms. However, if You become\ncompliant, then the rights granted under this License from a particular\nContributor are reinstated (a) provisionally, unless and until such\nContributor explicitly and finally terminates Your grants, and (b) on an\nongoing basis, if such Contributor fails to notify You of the\nnon-compliance by some reasonable means prior to 60 days after You have\ncome back into compliance. Moreover, Your grants from a particular\nContributor are reinstated on an ongoing basis if such Contributor\nnotifies You of the non-compliance by some reasonable means, this is the\nfirst time You have received notice of non-compliance with this License\nfrom such Contributor, and You become compliant prior to 30 days after\nYour receipt of the notice.\n\n5.2. If You initiate litigation against any entity by asserting a patent\ninfringement claim (excluding declaratory judgment actions,\ncounter-claims, and cross-claims) alleging that a Contributor Version\ndirectly or indirectly infringes any patent, then the rights granted to\nYou by any and all Contributors for the Covered Software under Section\n2.1 of this License shall terminate.\n\n5.3. In the event of termination under Sections 5.1 or 5.2 above, all\nend user license agreements (excluding distributors and resellers) which\nhave been validly granted by You or Your distributors under this License\nprior to termination shall survive termination.\n\n************************************************************************\n*                                                                      *\n*  6. Disclaimer of Warranty                                           *\n*  -------------------------                                           *\n*                                                                      *\n*  Covered Software is provided under this License on an \"as is\"       *\n*  basis, without warranty of any kind, either expressed, implied, or  *\n*  statutory, including, without limitation, warranties that the       *\n*  Covered Software is free of defects, merchantable, fit for a        *\n*  particular purpose or non-infringing. The entire risk as to the     *\n*  quality and performance of the Covered Software is with You.        *\n*  Should any Covered Software prove defective in any respect, You     *\n*  (not any Contributor) assume the cost of any necessary servicing,   *\n*  repair, or correction. This disclaimer of warranty constitutes an   *\n*  essential part of this License. No use of any Covered Software is   *\n*  authorized under this License except under this disclaimer.         *\n*                                                                      *\n************************************************************************\n\n************************************************************************\n*                                                                      *\n*  7. Limitation of Liability                                          *\n*  --------------------------                                          *\n*                                                                      *\n*  Under no circumstances and under no legal theory, whether tort      *\n*  (including negligence), contract, or otherwise, shall any           *\n*  Contributor, or anyone who distributes Covered Software as          *\n*  permitted above, be liable to You for any direct, indirect,         *\n*  special, incidental, or consequential damages of any character      *\n*  including, without limitation, damages for lost profits, loss of    *\n*  goodwill, work stoppage, computer failure or malfunction, or any    *\n*  and all other commercial damages or losses, even if such party      *\n*  shall have been informed of the possibility of such damages. This   *\n*  limitation of liability shall not apply to liability for death or   *\n*  personal injury resulting from such party's negligence to the       *\n*  extent applicable law prohibits such limitation. Some               *\n*  jurisdictions do not allow the exclusion or limitation of           *\n*  incidental or consequential damages, so this exclusion and          *\n*  limitation may not apply to You.                                    *\n*                                                                      *\n************************************************************************\n\n8. Litigation\n-------------\n\nAny litigation relating to this License may be brought only in the\ncourts of a jurisdiction where the defendant maintains its principal\nplace of business and such litigation shall be governed by laws of that\njurisdiction, without reference to its conflict-of-law provisions.\nNothing in this Section shall prevent a party's ability to bring\ncross-claims or counter-claims.\n\n9. Miscellaneous\n----------------\n\nThis License represents the complete agreement concerning the subject\nmatter hereof. If any provision of this License is held to be\nunenforceable, such provision shall be reformed only to the extent\nnecessary to make it enforceable. Any law or regulation which provides\nthat the language of a contract shall be construed against the drafter\nshall not be used to construe this License against a Contributor.\n\n10. Versions of the License\n---------------------------\n\n10.1. New Versions\n\nMozilla Foundation is the license steward. Except as provided in Section\n10.3, no one other than the license steward has the right to modify or\npublish new versions of this License. Each version will be given a\ndistinguishing version number.\n\n10.2. Effect of New Versions\n\nYou may distribute the Covered Software under the terms of the version\nof the License under which You originally received the Covered Software,\nor under the terms of any subsequent version published by the license\nsteward.\n\n10.3. Modified Versions\n\nIf you create software not governed by this License, and you want to\ncreate a new license for such software, you may create and use a\nmodified version of this License if you rename the license and remove\nany references to the name of the license steward (except to note that\nsuch modified license differs from this License).\n\n10.4. Distributing Source Code Form that is Incompatible With Secondary\nLicenses\n\nIf You choose to distribute Source Code Form that is Incompatible With\nSecondary Licenses under the terms of this version of the License, the\nnotice described in Exhibit B of this License must be attached.\n\nExhibit A - Source Code Form License Notice\n-------------------------------------------\n\n  This Source Code Form is subject to the terms of the Mozilla Public\n  License, v. 2.0. If a copy of the MPL was not distributed with this\n  file, You can obtain one at http://mozilla.org/MPL/2.0/.\n\nIf it is not possible or desirable to put the notice in a particular\nfile, then You may include the notice in a location (such as a LICENSE\nfile in a relevant directory) where a recipient would be likely to look\nfor such a notice.\n\nYou may add additional accurate notices of copyright ownership.\n\nExhibit B - \"Incompatible With Secondary Licenses\" Notice\n---------------------------------------------------------\n\n  This Source Code Form is \"Incompatible With Secondary Licenses\", as\n  defined by the Mozilla Public License, v. 2.0.\n\n\n\n*****************************************************************************\nIntel oneAPI Math Kernel Library (oneMKL)\nThe Intel oneAPI Math Kernel Library (oneMKL) is licensed under \nthe Intel Simplified Software License (Version October 2022 or later)\n*****************************************************************************\n \nIntel Simplified Software License (Version October 2022)\n\nPIN: Copyright (C) Intel Corporation\n\nUse and Redistribution. You may use and redistribute the software, which is provided in binary form only, (the \"Software\"), without modification, provided the following conditions are met:\n\n* \tRedistributions must reproduce the above copyright notice and these terms of use in the Software and in the documentation and/or other materials provided with the distribution.\n* \tNeither the name of Intel nor the names of its suppliers may be used to endorse or promote products derived from this Software without specific prior written permission.\n* \tNo reverse engineering, decompilation, or disassembly of the Software is permitted, nor any modification or alteration of the Software or its operation at any time, including during execution.\n\nNo other licenses. Except as provided in the preceding section, Intel grants no licenses or other rights by implication, estoppel or otherwise to, patent, copyright, trademark, trade name, service mark \nor other intellectual property licenses or rights of Intel.\n\nThird party software.  \"Third Party Software\" means the files (if any) listed in the \"third-party-software.txt\" or other similarly-named text file that may be included with the Software. \nThird Party Software, even if included with the distribution of the Software, may be governed by separate license terms, including without limitation, third party license terms, open source software notices and terms,\nand/or other Intel software license terms. These separate license terms solely govern Your use of the Third Party Software.\n\nDISCLAIMER. THIS SOFTWARE IS PROVIDED \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT ARE DISCLAIMED. \nTHIS SOFTWARE IS NOT INTENDED FOR USE IN SYSTEMS OR APPLICATIONS WHERE FAILURE OF THE SOFTWARE MAY CAUSE PERSONAL INJURY OR DEATH AND YOU AGREE THAT YOU ARE FULLY RESPONSIBLE FOR ANY CLAIMS, COSTS, DAMAGES, EXPENSES, AND ATTORNEYS FEES \nARISING OUT OF ANY SUCH USE, EVEN IF ANY CLAIM ALLEGES THAT INTEL WAS NEGLIGENT REGARDING THE DESIGN OR MANUFACTURE OF THE SOFTWARE.\n\nLIMITATION OF LIABILITY. IN NO EVENT WILL INTEL BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\nOR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nNo support.  Intel may make changes to the Software, at any time without notice, and is not obligated to support, update or provide training for the Software. \n\nTermination. Your right to use the Software is terminated in the event of your breach of this license.\n\nFeedback.  Should you provide Intel with comments, modifications, corrections, enhancements or other input (\"Feedback\") related to the Software, Intel will be free to use, disclose, reproduce, license or otherwise distribute or exploit the Feedback in \nits sole discretion without any obligations or restrictions of any kind, including without limitation, intellectual property rights or licensing obligations.\n\nCompliance with laws.  You agree to comply with all relevant laws and regulations governing your use, transfer, import or export (or prohibition thereof) of the Software.\n\nGoverning law.  All disputes will be governed by the laws of the United States of America and the State of Delaware without reference to conflict of law principles and subject to the exclusive jurisdiction \nof the state or federal courts sitting in the State of Delaware, and each party agrees that it submits to the personal jurisdiction and venue of those courts and waives any objections. \nTHE UNITED NATIONS CONVENTION ON CONTRACTS FOR THE INTERNATIONAL SALE OF GOODS (1980) IS SPECIFICALLY EXCLUDED AND WILL NOT APPLY TO THE SOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/large-scale-gxe-methods/GEM/master/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "GEM"
        ],
        "type": "Text_excerpt",
        "value": "\r\n ```\r\n GEM : Gene-Environment interaction analysis for Millions of samples\r\n Copyright (C) 2018-2024  Liang Hong, Han Chen, Duy Pham, Cong Pan, Samaneh Salehi Nasab\r\n \r\n This program is free software: you can redistribute it and/or modify\r\n it under the terms of the GNU General Public License as published by\r\n the Free Software Foundation, either version 3 of the License, or\r\n (at your option) any later version.\r\n\r\n This program is distributed in the hope that it will be useful,\r\n but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n GNU General Public License for more details.\r\n\r\n You should have received a copy of the GNU General Public License\r\n along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n ```\r\n The GEM package is distributed under GPL (>= 3). It includes source code from open source third-party software:\r\n\r\n* libdeflate: MIT\r\n* Plink: LGPLv3+\r\n* Zstandard (zstd): BSD_3_clause | GPL-2\r\n\r\n The binary release of GEM also links to third-party libraries:\r\n \r\n* Boost: Boost Software License, Version 1.0\r\n* Eigen: Mozilla Public License, Version 2.0\r\n* Intel oneAPI Math Kernel Library (oneMKL): Intel Simplified Software License (Version October 2022 or later)\r\n\r\n Full copies of license agreements for GEM, third-party source code, linked libraries can be found <a href=\"https://github.com/large-scale-gxe-methods/GEM/blob/master/LICENSE\">here</a>.\r\n"
      },
      "source": "https://raw.githubusercontent.com/large-scale-gxe-methods/GEM/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "GEM"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "large-scale-gxe-methods"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 252803,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 1648,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 902,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/large-scale-gxe-methods/GEM/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "samanehsalehi",
          "type": "User"
        },
        "date_created": "2024-05-22T00:29:03Z",
        "date_published": "2024-05-22T01:13:04Z",
        "description": "Update checkBinaryCovariates function to  include stratified values for binary outcome",
        "html_url": "https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.5.3",
        "name": "GEM V1.5.3",
        "release_id": 156782176,
        "tag": "v1.5.3",
        "tarball_url": "https://api.github.com/repos/large-scale-gxe-methods/GEM/tarball/v1.5.3",
        "type": "Release",
        "url": "https://api.github.com/repos/large-scale-gxe-methods/GEM/releases/156782176",
        "value": "https://api.github.com/repos/large-scale-gxe-methods/GEM/releases/156782176",
        "zipball_url": "https://api.github.com/repos/large-scale-gxe-methods/GEM/zipball/v1.5.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "pancong419",
          "type": "User"
        },
        "date_created": "2023-08-16T21:54:03Z",
        "date_published": "2023-08-16T22:01:14Z",
        "description": "Fixed the output when there is no exposure.",
        "html_url": "https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.5.2",
        "name": "GEM V1.5.2",
        "release_id": 117527387,
        "tag": "v1.5.2",
        "tarball_url": "https://api.github.com/repos/large-scale-gxe-methods/GEM/tarball/v1.5.2",
        "type": "Release",
        "url": "https://api.github.com/repos/large-scale-gxe-methods/GEM/releases/117527387",
        "value": "https://api.github.com/repos/large-scale-gxe-methods/GEM/releases/117527387",
        "zipball_url": "https://api.github.com/repos/large-scale-gxe-methods/GEM/zipball/v1.5.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "pancong419",
          "type": "User"
        },
        "date_created": "2023-04-20T17:00:21Z",
        "date_published": "2023-04-20T17:34:26Z",
        "description": "1. Treated empty strings as missing values\r\n2. Fixed a bug for empty strings at the end of each line\r\n3. Minor changes to messages printed to stdout\r\n4. Error out if the sample size is not greater than the number of predictors (intercept, exposures, interaction covariates, and covariates) in the null model fitting",
        "html_url": "https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.5.1",
        "name": "GEM V1.5.1",
        "release_id": 100238594,
        "tag": "v1.5.1",
        "tarball_url": "https://api.github.com/repos/large-scale-gxe-methods/GEM/tarball/v1.5.1",
        "type": "Release",
        "url": "https://api.github.com/repos/large-scale-gxe-methods/GEM/releases/100238594",
        "value": "https://api.github.com/repos/large-scale-gxe-methods/GEM/releases/100238594",
        "zipball_url": "https://api.github.com/repos/large-scale-gxe-methods/GEM/zipball/v1.5.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "pancong419",
          "type": "User"
        },
        "date_created": "2023-03-09T17:47:26Z",
        "date_published": "2023-03-09T18:05:48Z",
        "description": "Changed the default option of the Center function to center the interaction covariates only.",
        "html_url": "https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.5",
        "name": "GEM V1.5",
        "release_id": 95111404,
        "tag": "v1.5",
        "tarball_url": "https://api.github.com/repos/large-scale-gxe-methods/GEM/tarball/v1.5",
        "type": "Release",
        "url": "https://api.github.com/repos/large-scale-gxe-methods/GEM/releases/95111404",
        "value": "https://api.github.com/repos/large-scale-gxe-methods/GEM/releases/95111404",
        "zipball_url": "https://api.github.com/repos/large-scale-gxe-methods/GEM/zipball/v1.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "pancong419",
          "type": "User"
        },
        "date_created": "2022-11-11T18:15:16Z",
        "date_published": "2022-11-11T18:21:19Z",
        "description": "Added collinearity check of the covariates before fitting the null model",
        "html_url": "https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.4.5",
        "name": "GEM V1.4.5",
        "release_id": 82833256,
        "tag": "v1.4.5",
        "tarball_url": "https://api.github.com/repos/large-scale-gxe-methods/GEM/tarball/v1.4.5",
        "type": "Release",
        "url": "https://api.github.com/repos/large-scale-gxe-methods/GEM/releases/82833256",
        "value": "https://api.github.com/repos/large-scale-gxe-methods/GEM/releases/82833256",
        "zipball_url": "https://api.github.com/repos/large-scale-gxe-methods/GEM/zipball/v1.4.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "pancong419",
          "type": "User"
        },
        "date_created": "2022-10-05T14:47:22Z",
        "date_published": "2022-10-05T14:51:22Z",
        "description": "Fixed the bugs of include-snp-file\r\nRemoved the default value of flag \"--center\"",
        "html_url": "https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.4.4",
        "name": "GEM V1.4.4",
        "release_id": 79067703,
        "tag": "v1.4.4",
        "tarball_url": "https://api.github.com/repos/large-scale-gxe-methods/GEM/tarball/v1.4.4",
        "type": "Release",
        "url": "https://api.github.com/repos/large-scale-gxe-methods/GEM/releases/79067703",
        "value": "https://api.github.com/repos/large-scale-gxe-methods/GEM/releases/79067703",
        "zipball_url": "https://api.github.com/repos/large-scale-gxe-methods/GEM/zipball/v1.4.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "pancong419",
          "type": "User"
        },
        "date_created": "2022-02-16T18:42:06Z",
        "date_published": "2022-03-23T13:52:43Z",
        "description": "Sorted the output headers of categorical variables.",
        "html_url": "https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.4.3",
        "name": "GEM V1.4.3",
        "release_id": 62579487,
        "tag": "v1.4.3",
        "tarball_url": "https://api.github.com/repos/large-scale-gxe-methods/GEM/tarball/v1.4.3",
        "type": "Release",
        "url": "https://api.github.com/repos/large-scale-gxe-methods/GEM/releases/62579487",
        "value": "https://api.github.com/repos/large-scale-gxe-methods/GEM/releases/62579487",
        "zipball_url": "https://api.github.com/repos/large-scale-gxe-methods/GEM/zipball/v1.4.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "pancong419",
          "type": "User"
        },
        "date_created": "2021-11-22T16:56:14Z",
        "date_published": "2022-01-26T16:26:25Z",
        "description": "1. Added math.h library for installation using Docker\r\n2. Added a binary executable file",
        "html_url": "https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.4.2",
        "name": "GEM V1.4.2",
        "release_id": 58025822,
        "tag": "v1.4.2",
        "tarball_url": "https://api.github.com/repos/large-scale-gxe-methods/GEM/tarball/v1.4.2",
        "type": "Release",
        "url": "https://api.github.com/repos/large-scale-gxe-methods/GEM/releases/58025822",
        "value": "https://api.github.com/repos/large-scale-gxe-methods/GEM/releases/58025822",
        "zipball_url": "https://api.github.com/repos/large-scale-gxe-methods/GEM/zipball/v1.4.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "pancong419",
          "type": "User"
        },
        "date_created": "2021-10-25T19:54:00Z",
        "date_published": "2021-10-25T20:14:26Z",
        "description": "fixed carriage return character of Windows files\r\n",
        "html_url": "https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.4.1",
        "name": "GEM V1.4.1",
        "release_id": 52005499,
        "tag": "v1.4.1",
        "tarball_url": "https://api.github.com/repos/large-scale-gxe-methods/GEM/tarball/v1.4.1",
        "type": "Release",
        "url": "https://api.github.com/repos/large-scale-gxe-methods/GEM/releases/52005499",
        "value": "https://api.github.com/repos/large-scale-gxe-methods/GEM/releases/52005499",
        "zipball_url": "https://api.github.com/repos/large-scale-gxe-methods/GEM/zipball/v1.4.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "duytpm16",
          "type": "User"
        },
        "date_created": "2021-07-02T18:26:15Z",
        "date_published": "2021-07-02T18:33:55Z",
        "description": "1. Remove --pheno-type flag.\r\n   If the number of levels (unique observations) is 2, the phenotype is treated as binary; otherwise it is assumed to be continuous.\r\n2. Check for categorical exposures and interaction covariates.  \r\n3. Output number of non-missing samples (N) and allele frequency (AF) for effect allele for each combination of strata for all exposures and interaction covariates.  \r\n4. Add two additional flags --categorical-names and --cat-threshold for user definition of categorical variables.  \r\n5. Output the SE instead of variance for the coefficient estimates.  \r\n6. Output only the lower triangle of the covariance matrix instead of the full matrix.  \r\n7. For robust analysis and \"meta\"/\"full\" output style, include model-based summary statistics in the output file.  \r\n8. Column names for the robust summary statistics will include the prefix \"robust_\".  \r\n9. For \"full\" output style, an initial header line with the dispersion is included in the output file.  \r\n10. The V matrix no longer included in the output file for \"full\" output style.\r\n\r\n",
        "html_url": "https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.4",
        "name": "GEMv1.4",
        "release_id": 45639601,
        "tag": "v1.4",
        "tarball_url": "https://api.github.com/repos/large-scale-gxe-methods/GEM/tarball/v1.4",
        "type": "Release",
        "url": "https://api.github.com/repos/large-scale-gxe-methods/GEM/releases/45639601",
        "value": "https://api.github.com/repos/large-scale-gxe-methods/GEM/releases/45639601",
        "zipball_url": "https://api.github.com/repos/large-scale-gxe-methods/GEM/zipball/v1.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "duytpm16",
          "type": "User"
        },
        "date_created": "2021-04-07T04:48:55Z",
        "date_published": "2021-04-07T05:07:19Z",
        "description": "Major Changes:\r\n1. Input for --exposure-names is now optional. Only the marginal test is performed when there are no inputs to --exposure-names.  \r\n2. Change some of the column headers in the output file to use the names in --exposure-names and any --int-covar-names instead of numbers.\r\n3. Additional option (--output-style) to include more or less summary statistics in the output file.  ",
        "html_url": "https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.3",
        "name": "GEMv1.3",
        "release_id": 39878028,
        "tag": "v1.3",
        "tarball_url": "https://api.github.com/repos/large-scale-gxe-methods/GEM/tarball/v1.3",
        "type": "Release",
        "url": "https://api.github.com/repos/large-scale-gxe-methods/GEM/releases/39878028",
        "value": "https://api.github.com/repos/large-scale-gxe-methods/GEM/releases/39878028",
        "zipball_url": "https://api.github.com/repos/large-scale-gxe-methods/GEM/zipball/v1.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "duytpm16",
          "type": "User"
        },
        "date_created": "2021-01-22T19:05:45Z",
        "date_published": "2021-01-22T19:19:28Z",
        "description": "Major Changes:\r\n 1. Support for plink2 PGEN files.\r\n 2. Support for plink BED files.\r\n 3. Fix bug when the phenotype is binary and there are missing genotypes.\r\n 4. Update calculations for model-based/robust joint test statistics\r\n 5. Allow for centering (default) and scaling of all exposure and covariates.\r\n\r\nMinor Changes:\r\n 1. Error checks for output file.\r\n 2. Print which allele is being used in association testing.\r\n 3. Change Allele1 and Allele2 in output file to Non_Effect_Allele and Effect_Allele. Effect_Allele is the allele used in association testing.",
        "html_url": "https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.2",
        "name": "GEMv1.2",
        "release_id": 32503231,
        "tag": "v1.2",
        "tarball_url": "https://api.github.com/repos/large-scale-gxe-methods/GEM/tarball/v1.2",
        "type": "Release",
        "url": "https://api.github.com/repos/large-scale-gxe-methods/GEM/releases/32503231",
        "value": "https://api.github.com/repos/large-scale-gxe-methods/GEM/releases/32503231",
        "zipball_url": "https://api.github.com/repos/large-scale-gxe-methods/GEM/zipball/v1.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "duytpm16",
          "type": "User"
        },
        "date_created": "2020-07-22T03:52:29Z",
        "date_published": "2020-07-22T03:55:38Z",
        "description": "Major Changes:\r\n 1. Adjust for covariates using matrix operations instead of for-loop\r\n 2. Compile GEM with -O2 (optimizer flag)\r\n 3. Use libdeflate for faster decompression of BGEN genotype block\r\n 4. GEM can now analyze a subset of variants passed to the --include-snp-file parameter\r\n 5. Prioritize BGEN sample file over the BGEN sample identifier block\r\n 6. Support for BGEN v1.1, v1.2 and v1.3 uncompressed genotype blocks\r\n 7. Support missing genotypes in BGEN files.\r\n 8. Fix printing bug.\r\n\r\nMinor Changes:\r\n 1. Print out first 5 sample ids if ID matching with phenotype file and BGEN sample identifier block fails\r\n 2. Errors out if the phenotype (--pheno-name) is also included in --exposure-names, --int-covar-names or --covar-names parameters.\r\n 3. Modify a bit how GEM parses the BGEN genotype block\r\n 5. Modify GEM output log\r\n 6. Add and extra column N_samples in output file\r\n 7. Update makefile",
        "html_url": "https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.1",
        "name": "GEM v1.1",
        "release_id": 27970122,
        "tag": "v1.1",
        "tarball_url": "https://api.github.com/repos/large-scale-gxe-methods/GEM/tarball/v1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/large-scale-gxe-methods/GEM/releases/27970122",
        "value": "https://api.github.com/repos/large-scale-gxe-methods/GEM/releases/27970122",
        "zipball_url": "https://api.github.com/repos/large-scale-gxe-methods/GEM/zipball/v1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "duytpm16",
          "type": "User"
        },
        "date_created": "2020-05-08T23:01:51Z",
        "date_published": "2020-05-11T22:06:06Z",
        "description": "<br />\r\n\r\nMajor Changes:\r\n 1. Minor allele frequency filtering option\r\n 2. Read bi-allelic phased BGEN genotype\r\n 3. Multi-threading feature across SNPs\r\n 4. Command-line only and removed parameter file\r\n 5. Allow interaction covariate adjustments\r\n 6. Fix how GEM parses BGEN v1.1 genotype block\r\n 7. Support BGEN v1.3 ZSTD compression type\r\n\r\nMinor Changes: \r\n  1. GEM Defaults -\r\n       Number of threads: `\u2308number of detected threads / 2\u2309`\r\n       Stream SNPs: 1 \r\n       Missing Value: NA\r\n       Phenotype file delimiter:  , (comma-separated)\r\n       Non-robust/Robust: 0 (non-robust)\r\n       Logistic tolerance convergence: 0.0000001\r\n       MAF threshold: 0.001\r\n\r\n  2. GEM output messages\r\n  3. Change temporary bin file names\r\n  4. Change outputs with 'Main' to 'Marginal'",
        "html_url": "https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.0",
        "name": "GEM v1.0",
        "release_id": 25053491,
        "tag": "v1.0",
        "tarball_url": "https://api.github.com/repos/large-scale-gxe-methods/GEM/tarball/v1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/large-scale-gxe-methods/GEM/releases/25053491",
        "value": "https://api.github.com/repos/large-scale-gxe-methods/GEM/releases/25053491",
        "zipball_url": "https://api.github.com/repos/large-scale-gxe-methods/GEM/zipball/v1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "parent_header": [
          "GEM"
        ],
        "type": "Text_excerpt",
        "value": "C/C++ Compiler\r\n * A compiler with C++11 (or later) support is required.\r\n \r\nLAPACK and BLAS\r\n * The LAPACK (Linear Algebra PACKage) and BLAS (Basic Linear Algebra Subprograms) libraries are used for matrix operations in GEM.\r\n\r\nIntel processors:\r\n * We recommend linking GEM to the Intel oneAPI Math Kernal Library (oneMKL), instead of classical BLAS/LAPACK, for a greater performance boost. This can be done by replacing -llapack and -lblas in the makefile with -lmkl_gf_lp64 -lmkl_sequential -lmkl_core before compiling.\r\n  * It is important to compile with -lmkl_sequential since GEM already does multi-threading across SNPs.\r\n\r\nAMD processors:\r\n * For AMD processors, OpenBLAS (-lopenblas) may be a better alternative.\r\n \r\nBoost C++ Libraries\r\n * The Boost C++ libraries are used for command-line, file management and multi-threading purposes.\r\n * The following Boost libraries are required :\r\n      1. libboost_system\r\n      2. libboost_program_options\r\n      3. libboost_filesystem\r\n      4. libboost_thread\r\n\r\nEigen Library\r\n* The Eigen library is used for linear algebra of dense and sparse matrices.\r\n* Download the source code from https://eigen.tuxfamily.org/index.php?title=Main_Page and add the directory of Eigen header files in the include path when compiling.\r\n \r\n\r"
      },
      "source": "https://raw.githubusercontent.com/large-scale-gxe-methods/GEM/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running GEM",
        "parent_header": [
          "GEM",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "\r\n1. [Command Line Options](#command-line-options)  \r\n1. [Input Files](#input-files)\r\n1. [Output File Format](#output-file-format)\r\n1. [Examples](#examples)\r\n\r\n<br /> \r\n<br />\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/large-scale-gxe-methods/GEM/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 16:42:20",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 10
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Command Line Options",
        "parent_header": [
          "GEM",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "\r\nOnce GEM is installed, the executable ```./GEM``` can be used to run the program.  \r\nFor a list of options, use ```./GEM --help```.  \r\n\r\n<details>\r\n     <summary> <b>List of Options</b> </summary>\r\n\r\n```\r\nGeneral Options:\r\n\r\n--help\r\n    Prints the available options of GEM and exits.  \r\n   \r\n--version\r\n    Prints the version of GEM and exits.\r\n  \r\n  \r\n  \r\nInput/Output File Options:  \r\n\r\n--pheno-file  \r\n     Path to the phenotype file.  \r\n\r\n--bgen  \r\n     Path to the BGEN file.  \r\n\r\n--sample  \r\n     Path to the sample file.  \r\n     Required when the BGEN file does not contain sample identifiers.  \r\n  \r\n--pfile  \r\n     Path and prefix to the .pgen, .pvar, and .psam files.  \r\n     If this flag is used, then --pgen/--pvar/--psam don't need to be specified.\r\n  \r\n--pgen  \r\n     Path to the pgen file.  \r\n  \r\n--pvar  \r\n     Path to the pvar file.  \r\n  \r\n--psam  \r\n     Path to the psam file.  \r\n  \r\n--bfile  \r\n     Path and prefix to the .bed, .bim and .fam files.  \r\n     If this flag is used, then --bed/--bim/--fam don't need to be specified.\r\n  \r\n--bed  \r\n     Path to the bed file.  \r\n  \r\n--bim  \r\n     Path to the bim file.  \r\n  \r\n--fam  \r\n     Path to the fam file.  \r\n  \r\n--out  \r\n     Full path and extension to where GEM output results.  \r\n     Default: gem.out\r\n  \r\n--output-style  \r\n     Modifies the output of GEM. Must be one of the following:\r\n\tminimum: Output the summary statistics for only the GxE and marginal G terms.\r\n        meta: 'minimum' output plus additional fields for the main G and any GxCovariate terms.\r\n               For a robust analysis, additional columns for the model-based summary statistics will be included.\r\n        full: 'meta' output plus additional fields needed for re-analyses of a subset of interactions.\r\n\tDefault: minimum   \r\n\r\n\r\n\r\nPhenotype File Options:\r\n\r\n--sampleid-name  \r\n     Column name in the phenotype file that contains sample identifiers.  \r\n\r\n--pheno-name  \r\n     Column name in the phenotype file that contains the phenotype of interest. \r\n     If the number of levels (unique observations) is 2, the phenotype is treated as binary; otherwise it is assumed to be continuous.\r\n\r\n--exposure-names  \r\n     One or more column names in the phenotype file naming the exposure(s) to be included in interaction tests.  \r\n     If no exposures are included, GEM will only perform the marginal test.  \r\n\r\n--int-covar-names  \r\n     Any column names in the phenotype file naming the covariate(s) for which interactions should be included \r\n     for adjustment (do not include with --exposure-names).  \r\n\r\n--covar-names  \r\n     Any column names in the phenotype file naming the covariates for which only main effects should be included\r\n     for adjustment (do not include with --exposure-names or --int-covar-names).  \r\n\r\n--robust\r\n     0 for model-based standard errors and 1 for robust standard errors.\r\n        Default: 0  \r\n\r\n--tol \r\n     Convergence tolerance for logistic regression.  \r\n        Default: 0.0000001  \r\n\r\n--delim  \r\n     Delimiter separating values in the phenotype file. Tab delimiter should be represented as \\t and space delimiter as \\0.\r\n        Default: , (comma-separated)  \r\n\r\n--missing-value  \r\n     Indicates how missing values in the phenotype file are stored.  \r\n        Default: NA\r\n  \r\n--center \r\n     0 for no centering to be done, 1 to center ALL exposures and covariates, and 2 to center all the interaction covariates only.\r\n     \tDefault: 2\r\n\r\n--scale\r\n     0 for no scaling to be done and 1 to scale ALL exposures and covariates by the standard deviation.\r\n        Default: 0\r\n\r\n--categorical-names\r\n     Names of the exposure or interaction covariate that should be treated as categorical.\r\n        Default: None\r\n\r\n--cat-threshold\r\n     A cut-off to determine which exposure or interaction covariate not specified using --categorical-names \r\n     should be automatically treated as categorical based on the number of levels (unique observations).\r\n        Default: 20\r\n   \r\n\r\n\r\nFiltering Options:  \r\n\r\n--maf\r\n     Minimum threshold value [0, 0.5] to exclude variants based on the minor allele frequency.\r\n        Default: 0.001\r\n  \r\n--miss-geno-cutoff\r\n     Maximum threshold value [0, 1.0] to filter variants based on the missing genotype rate.  \r\n        Default: 0.05  \r\n  \r\n--include-snp-file  \r\n     Path to file containing a subset of variants in the specified genotype file to be used for analysis. \r\n     The first line in this file is the header that specifies which variant identifier in the genotype file  \r\n     is used for ID matching. This must be 'snpid' (PLINK or BGEN) or 'rsid' (BGEN only). There should be one variant \r\n     identifier per line after the header.\r\n  \r\n  \r\n\r\nPerformance Options:  \r\n\r\n--threads\r\n     Set number of compute threads.\r\n    \t  Default: ceiling(detected threads / 2)  \r\n\r\n--stream-snps \r\n     Number of SNPs to analyze in a batch. Memory consumption will increase for larger values of stream-snps.  \r\n        Default: 1\r\n\r\n```\r\n</details>\r\n\r\n<br /> \r\n\r"
      },
      "source": "https://raw.githubusercontent.com/large-scale-gxe-methods/GEM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Input Files",
        "parent_header": [
          "GEM",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "\r\n* #### Phenotype File\r\n    A file which should contain a sample identifier column and columns for the phenotypes, exposures, and covariates. The ordering of the columns does not matter.\r\n    All inputs should be coded numerically (e.g., males/females as 0/1)\r\n\r\n<br />\r\n\r\n* #### Genotype Files  \r\n\r\n  [**BGEN**](https://www.well.ox.ac.uk/~gav/bgen_format/spec/latest.html)  \r\nVariants that are non-biallelic should be filtered from the BGEN file. Note that since there are no indication of a REF/ALT allele in the BGEN file, the second allele is the effect allele counted in association testing.   \r\n\r\n  A [.sample file](https://www.well.ox.ac.uk/~gav/qctool_v2/documentation/sample_file_formats.html) is required as input when the .bgen file does not contain a sample identifier block. <br /><br /> \r\n     \r\n  [**Plink BED**](https://www.cog-genomics.org/plink/1.9/)  \r\n\r\n  [**.fam**](https://www.cog-genomics.org/plink/2.0/formats#fam) - The .fam file can be space or tab-delimited and must contain at least 2 columns where the first column is the family ID (FID) and the second column is the individual ID (IID). \r\nGEM will use the IID column for sample identifier matching with the phenotype file.  \r\n\r\n  [**.bim**](https://www.cog-genomics.org/plink/2.0/formats#bim) - The .bim file can also be space or tab-delimited and should be in the following order: the chromosome, variant id, cM (optional), base-pair coordinate, ALT allele, and REF allele.  \r\n\r\n  [**.bed**](https://www.cog-genomics.org/plink/2.0/formats#bed) - A bed file must be stored in variant-major form. The ALT allele specified in the .bim file is the effect allele counted in association testing. <br /><br />  \r\n\r\n  [**Plink 2.0 PGEN**](https://www.cog-genomics.org/plink/2.0/)  \r\n  \r\n  [**.psam**](https://www.cog-genomics.org/plink/2.0/formats#psam) - The .psam file is a tab-delimited text file containing the sample information. If header lines are present, the last header line should contain a column with the name #IID (if the first column is not #FID) or IID (if the first column is #FID) that holds the individual ID for sample identifier matching with the phenotype file. All previous header lines will be ignored. If no header line beginning with #IID or #FID is present, then the columns are assumed to be in .fam file order.  \r\n\r\n  [**.pvar**](https://www.cog-genomics.org/plink/2.0/formats#pvar) - The .pvar file is a tab-delimited text file containing the variant information. If header lines are present, the last header line should start with #CHROM. If #CHROM is present, then the columns POS, ID, REF, and ALT must also be present. All previous header lines will be ignored. If the .pvar file contain no header lines beginning with #CHROM, it is assumed that the columns are in .bim file order.  \r\n\r\n  [**.pgen**](https://www.cog-genomics.org/plink/2.0/formats#pgen) - The .pgen file should be filtered for non-biallelic variants. The ALT allele specified in the .pvar file is the effect allele counted in association testing.\r\n     \r\n\r\n    \r\n<br /> \r\n<br />\r\n\r\n### Output File Format  \r\n\r\nGEM will write results to the output file specified with the --out parameter (or 'gem.out' if no output file is specified).  \r\nBelow are details of the possible column headers in the output file.  \r\n\r\n```diff \r\nSNPID              - The SNP identifier as retrieved from the genotype file.\r\nRSID               - The reference SNP ID number. (BGEN only)\r\nCHR                - The chromosome of the SNP.\r\nPOS                - The physical position of the SNP.\r\nNon_Effect_Allele  - The allele not counted in association testing.  \r\nEffect_Allele      - The allele that is counted in association testing.  \r\nN_Samples          - The number of samples without missing genotypes.\r\nAF                 - The allele frequency of the effect allele.\r\nN_catE_*           - The number of non-missing samples in each combination of strata for all of the categorical exposures and interaction covariates.\r\nAF_catE_*          - The allele frequency of the effect allele for each combination of strata for all of the catgorical exposure or interaction covariate.\r\n\r\nBeta_Marginal           - The coefficient estimate for the marginal genetic effect (i.e., from a model with no interaction terms).\r\nSE_Beta_Marginal        - The model-based SE associated with the marginal genetic effect estimate.\r\nrobust_SE_Beta_Marginal - The robust SE associated with the marginal genetic effect estimate.\r\n\r\nBeta_G             - The coefficient estimate for the genetic main effect (G).\r\nBeta_G-*           - The coefficient estimate for the interaction or interaction covariate terms.\r\nSE_Beta_G          - Model-based SE associated with the the genetic main effect (G).  \r\nSE_Beta_G-*        - Model-based SE associated with any GxE or interaction covariate terms.\r\nrobust_SE_Beta_G   - Robust SE associated with the the genetic main effect (G).  \r\nrobust_SE_Beta_G-* - Robust SE associated with any GxE or interaction covariate terms.\r\nCov_Beta_G_G-*          - Model-based covariance between the genetic main effect (G) and any GxE or interaction covariate terms.\r\nCov_Beta_G-*_G-*        - Model-based covariance between any GxE or interaction covariate terms.\r\nrobust_Cov_Beta_G_G-*   - Robust covariance between the genetic main effect (G) and any GxE or interaction covariate terms.\r\nrobust_Cov_Beta_G-*_G-* - Robust covariance between any GxE or interaction covariate terms.\r\n\r\nP_Value_Marginal           - Marginal genetic effect p-value from model-based SE.\r\nP_Value_Interaction        - Interaction effect p-value (K degrees of freedom test of interaction effect) from model-based SE. (K is number of major exposures)\r\nP_Value_Joint              - Joint test p-value (K+1 degrees of freedom test of genetic and interaction effect) from model-based SE.\r\nrobust_P_Value_Marginal    - Marginal genetic effect p-value from robust SE.\r\nrobust_P_Value_Interaction - Interaction effect p-value from robust SE.\r\nrobust_P_Value_Joint       - Joint test p-value (K+1 degrees of freedom test of genetic and interaction effect) from robust SE.\r\n```\r\n\r\n<br />\r\nThe --output-style flag can be used to specify which columns should be included in the output file:  \r\n\r\n#### minimum:  \r\nIncludes the variant information, Beta_Marginal, SE_Beta_Marginal, coefficient estimates for only the GxE terms, and depending on the --robust option, SE and covariance for only the GxE terms.\r\n\r\n#### meta:  \r\nIncludes each of the possible outputs listed above when applicable. For a model-based analysis (--robust 0), the columns containing the \"robust\" prefix (robust_*) are excluded in the output file.\r\n\r\n#### full:  \r\nIncludes, in addition to \"meta\", an initial header line with the residual variance estimate necessary for re-analysis of a subset of interactions using only summary statistics (for example, switching an exposure and interaction covariate).\r\n\r\n<br />\r\n<br />\r\n\r\n### Examples  \r\n<br />\r\n\r\nTo run GEM using the example data, execute GEM with the following code.\r\n```unix\r\n./GEM --bgen example.bgen --sample example.sample --pheno-file example.pheno --sampleid-name sampleid --pheno-name pheno2 --covar-names cov3 --exposure-names cov1 --robust 1 --center 0 --missing-value NaN --out my_example.out\r\n```\r\nThe results should look like the following output file [my_example.out](https://github.com/large-scale-gxe-methods/GEM/blob/master/example/my_example.out).  \r\n\r\n<br />\r\n\r\n## Recent Updates \r\n[Version 1.5.3](https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.5.3) - May 20, 2024:\r\n* Included stratified values for binary outcomes\r\n\r\n[Version 1.5.2](https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.5.2) - August 16, 2023:\r\n* Fixed the output when there is no exposure\r\n\r\n[Version 1.5.1](https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.5.1) - April 20, 2023:\r\n* Treated empty strings as missing values \r\n* Fixed a bug for empty strings at the end of each line\r\n* Minor changes to messages printed to stdout\r\n* Error out if the sample size is not greater than the number of predictors (intercept, exposures, interaction covariates, and covariates) in the null model fitting\r\n\r\n\r\n[Version 1.5](https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.5) - March 9, 2023:\r\n\r\n* Changed the default of the --center flag to 2 to center all the interaction covariates only\r\n\r\n[Version 1.4.5](https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.4.5) - November 11, 2022:\r\n\r\n* Added collinearity check of the covariates before fitting the null model\r\n\r\n[Version 1.4.4](https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.4.4) - October 5, 2022:\r\n\r\n* Fixed the bugs of include-snp-file\r\n* Removed the default value of flag \"--center\" \r\n\r\n[Version 1.4.3](https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.4.3) - March 23, 2022:\r\n\r\n* Sorted the output headers of categorical variables\r\n\r\n[Version 1.4.2](https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.4.2) - November 22, 2021:\r\n\r\n* Add math.h library to install GEM through Docker desktop\r\n* Added a binary executable file\r\n\r\n[Version 1.4.1](https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.4.1) - September 14, 2021:\r\n\r\n* Added to read phenotype files created from the Windows system\r\n\r\n[Version 1.4](https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.4) - July 2, 2021:\r\n\r\n* Remove --pheno-type flag. If the number of levels (unique observations) is 2, the phenotype is treated as binary; otherwise it is assumed to be continuous\r\n* Check for categorical exposures and interaction covariates\r\n* Output number of non-missing samples (N) and allele frequency (AF) for effect allele for each combination of strata for all\r\n\u2003 exposures and interaction covariates\r\n* Add two additional flags --categorical-names and --cat-threshold for user definition of categorical variables\r\n* Output the SE instead of variance for the coefficient estimates\r\n* Output only the lower triangle of the covariance matrix instead of the full matrix\r\n* For robust analysis and \"meta\"/\"full\" output style, include model-based summary statistics in the output file\r\n* Column names for the robust summary statistics will include the prefix \"robust_\"\r\n* For \"full\" output style, an initial header line with the dispersion is included in the output file\r\n* The V matrix no longer included in the output file for \"full\" output style\r\n\r\n[Version 1.3](https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.3) - April 7, 2021:\r\n\r\n* Add a new flag (--output-style) to modify which summary statistics should be included in the the output file\r\n\u2003\u2003\u2003\u2003\u2003    Column names now include the exposure and interaction covariate names instead of numbers.\r\n* The --exposure-names flag is now optional. If no exposures are specified, GEM will run a G-only model.\r\n\u2003\u2003\u2003\u2003\u2003    Covariates (not of interest) can still be adjusted for using --covar-names flag.\r\n\r\n[Version 1.2](https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.2) - January 22, 2021:\r\n\r\n* Fix issue to allow for space and tab delimited phenotype files.\r\n* Allow for centering and scaling of exposures and covariates.\r\n* Update calculations for model-based joint test\r\n* Update calculations for robust joint test\r\n* Output covariance, coefficients and standard errors to the log.\r\n* Change Allele1 and Allele2 in outfile file to Non_Effect_Allele and Effect_Allele.\r\n* Fix bug when phenotype is binary and there are missing genotypes.\r\n* Support PGEN/BED files.\r\n\r\n[Version 1.1](https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.1) - July 21, 2020:\r\n\r\n* Allow GEM to subset the BGEN file based on a list of variants to include for analysis. --include-snp-file\r\n* Use matrix operation to adjust for covariates instead of for-loop. Use the libdeflate package for faster zlib decompression of BGEN genotype blocks. Compile GEM with -O2 (optimizer flag). Prioritize BGEN sample file over the BGEN sample identifier block. Error if phenotype (--pheno-name) is also included as an exposoure or covariate\r\n* Support BGEN v1.1, v1.2 and v1.3 uncompressed genotype blocks.\r\n* Fix major printing bug.\r\n* Handle missing genotypes in BGEN files.\r\n\r\n<br />\r\n<br />\r\n\r\n## Contact \r\nFor comments, suggestions, bug reports and questions, please contact Han Chen (Han.Chen.2@uth.tmc.edu), Alisa Manning (AKMANNING@mgh.harvard.edu), Kenny Westerman (KEWESTERMAN@mgh.harvard.edu) or Samaneh Salehi Nasab (Samaneh.SalehiNasab@uth.tmc.edu). For bug reports, please include an example to reproduce the problem without having to access your confidential data.\r\n\r\n<br />\r\n<br />\r\n\r\n## References\r\nIf you use GEM in your analysis, please cite\r\n* Westerman KE, Pham DT, Hong L, Chen Y, Sevilla-Gonz\u00e1lez M, Sung YJ, Sun YV, Morrison AC, Chen H, Manning AK. (2021) GEM: scalable and flexible gene-environment interaction analysis in millions of samples. Bioinformatics 37(20):3514-3520. PubMed PMID: [**34695175**](https://www.ncbi.nlm.nih.gov/pubmed/34695175). PMCID: [**PMC8545347**](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC8545347/). DOI: [**10.1093/bioinformatics/btab223**](https://doi.org/10.1093/bioinformatics/btab223). \r\n \r\n\r\n<br />\r\n<br />\r\n\r\n## License \r\n\r\n ```\r\n GEM : Gene-Environment interaction analysis for Millions of samples\r\n Copyright (C) 2018-2024  Liang Hong, Han Chen, Duy Pham, Cong Pan, Samaneh Salehi Nasab\r\n \r\n This program is free software: you can redistribute it and/or modify\r\n it under the terms of the GNU General Public License as published by\r\n the Free Software Foundation, either version 3 of the License, or\r\n (at your option) any later version.\r\n\r\n This program is distributed in the hope that it will be useful,\r\n but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n GNU General Public License for more details.\r\n\r\n You should have received a copy of the GNU General Public License\r\n along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n ```\r\n The GEM package is distributed under GPL (>= 3). It includes source code from open source third-party software:\r\n\r\n* libdeflate: MIT\r\n* Plink: LGPLv3+\r\n* Zstandard (zstd): BSD_3_clause | GPL-2\r\n\r\n The binary release of GEM also links to third-party libraries:\r\n \r\n* Boost: Boost Software License, Version 1.0\r\n* Eigen: Mozilla Public License, Version 2.0\r\n* Intel oneAPI Math Kernel Library (oneMKL): Intel Simplified Software License (Version October 2022 or later)\r\n\r\n Full copies of license agreements for GEM, third-party source code, linked libraries can be found <a href=\"https://github.com/large-scale-gxe-methods/GEM/blob/master/LICENSE\">here</a>.\r\n"
      },
      "source": "https://raw.githubusercontent.com/large-scale-gxe-methods/GEM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Phenotype File",
        "parent_header": [
          "GEM",
          "Usage",
          "Input Files"
        ],
        "type": "Text_excerpt",
        "value": "# GEM  \r\n\r\nGEM (Gene-Environment interaction analysis for Millions of samples) is a software program for large-scale gene-environment interaction testing in samples from unrelated individuals. It enables genome-wide association studies in up to millions of samples while allowing for multiple exposures, control for genotype-covariate interactions, and robust inference.  \r\n\r\n\r\n<br />\r\nCurrent version: 1.5.3 \r\n\r\n<br />\r\nAdditional documentation:  \r\nhttps://large-scale-gxe-methods.github.io/GEMShowcaseWorkspace\r\n\r\n<br />\r\n\r\n## Contents\r\n- [Quick Installation](#quick-installation)\r\n- [Dependencies](#dependencies)\r\n- [Usage](#usage)\r\n- [Contact](#contact)\r\n- [License](#license)\r\n- [Recent Updates](#recent-updates)\r\n\r\n<br />\r\n\r\n\r\n## Quick Installation \r\n\r\nOption 1: Use the binary executable file for Linux\r\n* Download the binary file from: [v1.5.3 Release](https://github.com/large-scale-gxe-methods/GEM/releases/download/v1.5.3/GEM_1.5.3_Intel)\r\n* Change the permission: chmod a+x GEM_1.5.3\r\n\r\nOption 2: Build GEM Library Dependencies  \r\n   * C++11 compiler or later \r\n   * BLAS/LAPACK. For Intel processors, we recommend that GEM be compiled with an optimized math routine library such as the Intel oneAPI Math Kernal Library to replace BLAS/LAPACK for optimal performance.\r\n   * Boost C++ libraries. GEM links to the following Boost libraries:  ```boost_program_options, boost_thread, boost_system, and boost_filesystem```  \r\n   * Eigen Library. GEM links to the header files of Eigen. \r\n\r\n<br />\r\n\r\nTo install GEM, run the following lines of code:\r\n ```\r\n git clone https://github.com/large-scale-gxe-methods/GEM\r\n cd GEM/\r\n cd src/  \r\n make  \r\n ```\r\n\r\n<br />\r\n<br />\r\n<br />\r\n\r\n## Dependencies\r\nC/C++ Compiler\r\n * A compiler with C++11 (or later) support is required.\r\n \r\nLAPACK and BLAS\r\n * The LAPACK (Linear Algebra PACKage) and BLAS (Basic Linear Algebra Subprograms) libraries are used for matrix operations in GEM.\r\n\r\nIntel processors:\r\n * We recommend linking GEM to the Intel oneAPI Math Kernal Library (oneMKL), instead of classical BLAS/LAPACK, for a greater performance boost. This can be done by replacing -llapack and -lblas in the makefile with -lmkl_gf_lp64 -lmkl_sequential -lmkl_core before compiling.\r\n  * It is important to compile with -lmkl_sequential since GEM already does multi-threading across SNPs.\r\n\r\nAMD processors:\r\n * For AMD processors, OpenBLAS (-lopenblas) may be a better alternative.\r\n \r\nBoost C++ Libraries\r\n * The Boost C++ libraries are used for command-line, file management and multi-threading purposes.\r\n * The following Boost libraries are required :\r\n      1. libboost_system\r\n      2. libboost_program_options\r\n      3. libboost_filesystem\r\n      4. libboost_thread\r\n\r\nEigen Library\r\n* The Eigen library is used for linear algebra of dense and sparse matrices.\r\n* Download the source code from https://eigen.tuxfamily.org/index.php?title=Main_Page and add the directory of Eigen header files in the include path when compiling.\r\n \r\n\r\n## Usage\r\n\r\n### Running GEM\r\n\r\n1. [Command Line Options](#command-line-options)  \r\n1. [Input Files](#input-files)\r\n1. [Output File Format](#output-file-format)\r\n1. [Examples](#examples)\r\n\r\n<br /> \r\n<br />\r\n\r\n### Command Line Options\r\n\r\nOnce GEM is installed, the executable ```./GEM``` can be used to run the program.  \r\nFor a list of options, use ```./GEM --help```.  \r\n\r\n<details>\r\n     <summary> <b>List of Options</b> </summary>\r\n\r\n```\r\nGeneral Options:\r\n\r\n--help\r\n    Prints the available options of GEM and exits.  \r\n   \r\n--version\r\n    Prints the version of GEM and exits.\r\n  \r\n  \r\n  \r\nInput/Output File Options:  \r\n\r\n--pheno-file  \r\n     Path to the phenotype file.  \r\n\r\n--bgen  \r\n     Path to the BGEN file.  \r\n\r\n--sample  \r\n     Path to the sample file.  \r\n     Required when the BGEN file does not contain sample identifiers.  \r\n  \r\n--pfile  \r\n     Path and prefix to the .pgen, .pvar, and .psam files.  \r\n     If this flag is used, then --pgen/--pvar/--psam don't need to be specified.\r\n  \r\n--pgen  \r\n     Path to the pgen file.  \r\n  \r\n--pvar  \r\n     Path to the pvar file.  \r\n  \r\n--psam  \r\n     Path to the psam file.  \r\n  \r\n--bfile  \r\n     Path and prefix to the .bed, .bim and .fam files.  \r\n     If this flag is used, then --bed/--bim/--fam don't need to be specified.\r\n  \r\n--bed  \r\n     Path to the bed file.  \r\n  \r\n--bim  \r\n     Path to the bim file.  \r\n  \r\n--fam  \r\n     Path to the fam file.  \r\n  \r\n--out  \r\n     Full path and extension to where GEM output results.  \r\n     Default: gem.out\r\n  \r\n--output-style  \r\n     Modifies the output of GEM. Must be one of the following:\r\n\tminimum: Output the summary statistics for only the GxE and marginal G terms.\r\n        meta: 'minimum' output plus additional fields for the main G and any GxCovariate terms.\r\n               For a robust analysis, additional columns for the model-based summary statistics will be included.\r\n        full: 'meta' output plus additional fields needed for re-analyses of a subset of interactions.\r\n\tDefault: minimum   \r\n\r\n\r\n\r\nPhenotype File Options:\r\n\r\n--sampleid-name  \r\n     Column name in the phenotype file that contains sample identifiers.  \r\n\r\n--pheno-name  \r\n     Column name in the phenotype file that contains the phenotype of interest. \r\n     If the number of levels (unique observations) is 2, the phenotype is treated as binary; otherwise it is assumed to be continuous.\r\n\r\n--exposure-names  \r\n     One or more column names in the phenotype file naming the exposure(s) to be included in interaction tests.  \r\n     If no exposures are included, GEM will only perform the marginal test.  \r\n\r\n--int-covar-names  \r\n     Any column names in the phenotype file naming the covariate(s) for which interactions should be included \r\n     for adjustment (do not include with --exposure-names).  \r\n\r\n--covar-names  \r\n     Any column names in the phenotype file naming the covariates for which only main effects should be included\r\n     for adjustment (do not include with --exposure-names or --int-covar-names).  \r\n\r\n--robust\r\n     0 for model-based standard errors and 1 for robust standard errors.\r\n        Default: 0  \r\n\r\n--tol \r\n     Convergence tolerance for logistic regression.  \r\n        Default: 0.0000001  \r\n\r\n--delim  \r\n     Delimiter separating values in the phenotype file. Tab delimiter should be represented as \\t and space delimiter as \\0.\r\n        Default: , (comma-separated)  \r\n\r\n--missing-value  \r\n     Indicates how missing values in the phenotype file are stored.  \r\n        Default: NA\r\n  \r\n--center \r\n     0 for no centering to be done, 1 to center ALL exposures and covariates, and 2 to center all the interaction covariates only.\r\n     \tDefault: 2\r\n\r\n--scale\r\n     0 for no scaling to be done and 1 to scale ALL exposures and covariates by the standard deviation.\r\n        Default: 0\r\n\r\n--categorical-names\r\n     Names of the exposure or interaction covariate that should be treated as categorical.\r\n        Default: None\r\n\r\n--cat-threshold\r\n     A cut-off to determine which exposure or interaction covariate not specified using --categorical-names \r\n     should be automatically treated as categorical based on the number of levels (unique observations).\r\n        Default: 20\r\n   \r\n\r\n\r\nFiltering Options:  \r\n\r\n--maf\r\n     Minimum threshold value [0, 0.5] to exclude variants based on the minor allele frequency.\r\n        Default: 0.001\r\n  \r\n--miss-geno-cutoff\r\n     Maximum threshold value [0, 1.0] to filter variants based on the missing genotype rate.  \r\n        Default: 0.05  \r\n  \r\n--include-snp-file  \r\n     Path to file containing a subset of variants in the specified genotype file to be used for analysis. \r\n     The first line in this file is the header that specifies which variant identifier in the genotype file  \r\n     is used for ID matching. This must be 'snpid' (PLINK or BGEN) or 'rsid' (BGEN only). There should be one variant \r\n     identifier per line after the header.\r\n  \r\n  \r\n\r\nPerformance Options:  \r\n\r\n--threads\r\n     Set number of compute threads.\r\n    \t  Default: ceiling(detected threads / 2)  \r\n\r\n--stream-snps \r\n     Number of SNPs to analyze in a batch. Memory consumption will increase for larger values of stream-snps.  \r\n        Default: 1\r\n\r\n```\r\n</details>\r\n\r\n<br /> \r\n\r\n### Input Files\r\n\r\n* #### Phenotype File\r\n    A file which should contain a sample identifier column and columns for the phenotypes, exposures, and covariates. The ordering of the columns does not matter.\r\n    All inputs should be coded numerically (e.g., males/females as 0/1)\r\n\r\n<br />\r\n\r\n* #### Genotype Files  \r\n\r\n  [**BGEN**](https://www.well.ox.ac.uk/~gav/bgen_format/spec/latest.html)  \r\nVariants that are non-biallelic should be filtered from the BGEN file. Note that since there are no indication of a REF/ALT allele in the BGEN file, the second allele is the effect allele counted in association testing.   \r\n\r\n  A [.sample file](https://www.well.ox.ac.uk/~gav/qctool_v2/documentation/sample_file_formats.html) is required as input when the .bgen file does not contain a sample identifier block. <br /><br /> \r\n     \r\n  [**Plink BED**](https://www.cog-genomics.org/plink/1.9/)  \r\n\r\n  [**.fam**](https://www.cog-genomics.org/plink/2.0/formats#fam) - The .fam file can be space or tab-delimited and must contain at least 2 columns where the first column is the family ID (FID) and the second column is the individual ID (IID). \r\nGEM will use the IID column for sample identifier matching with the phenotype file.  \r\n\r\n  [**.bim**](https://www.cog-genomics.org/plink/2.0/formats#bim) - The .bim file can also be space or tab-delimited and should be in the following order: the chromosome, variant id, cM (optional), base-pair coordinate, ALT allele, and REF allele.  \r\n\r\n  [**.bed**](https://www.cog-genomics.org/plink/2.0/formats#bed) - A bed file must be stored in variant-major form. The ALT allele specified in the .bim file is the effect allele counted in association testing. <br /><br />  \r\n\r\n  [**Plink 2.0 PGEN**](https://www.cog-genomics.org/plink/2.0/)  \r\n  \r\n  [**.psam**](https://www.cog-genomics.org/plink/2.0/formats#psam) - The .psam file is a tab-delimited text file containing the sample information. If header lines are present, the last header line should contain a column with the name #IID (if the first column is not #FID) or IID (if the first column is #FID) that holds the individual ID for sample identifier matching with the phenotype file. All previous header lines will be ignored. If no header line beginning with #IID or #FID is present, then the columns are assumed to be in .fam file order.  \r\n\r\n  [**.pvar**](https://www.cog-genomics.org/plink/2.0/formats#pvar) - The .pvar file is a tab-delimited text file containing the variant information. If header lines are present, the last header line should start with #CHROM. If #CHROM is present, then the columns POS, ID, REF, and ALT must also be present. All previous header lines will be ignored. If the .pvar file contain no header lines beginning with #CHROM, it is assumed that the columns are in .bim file order.  \r\n\r\n  [**.pgen**](https://www.cog-genomics.org/plink/2.0/formats#pgen) - The .pgen file should be filtered for non-biallelic variants. The ALT allele specified in the .pvar file is the effect allele counted in association testing.\r\n     \r\n\r\n    \r\n<br /> \r\n<br />\r\n\r\n### Output File Format  \r\n\r\nGEM will write results to the output file specified with the --out parameter (or 'gem.out' if no output file is specified).  \r\nBelow are details of the possible column headers in the output file.  \r\n\r\n```diff \r\nSNPID              - The SNP identifier as retrieved from the genotype file.\r\nRSID               - The reference SNP ID number. (BGEN only)\r\nCHR                - The chromosome of the SNP.\r\nPOS                - The physical position of the SNP.\r\nNon_Effect_Allele  - The allele not counted in association testing.  \r\nEffect_Allele      - The allele that is counted in association testing.  \r\nN_Samples          - The number of samples without missing genotypes.\r\nAF                 - The allele frequency of the effect allele.\r\nN_catE_*           - The number of non-missing samples in each combination of strata for all of the categorical exposures and interaction covariates.\r\nAF_catE_*          - The allele frequency of the effect allele for each combination of strata for all of the catgorical exposure or interaction covariate.\r\n\r\nBeta_Marginal           - The coefficient estimate for the marginal genetic effect (i.e., from a model with no interaction terms).\r\nSE_Beta_Marginal        - The model-based SE associated with the marginal genetic effect estimate.\r\nrobust_SE_Beta_Marginal - The robust SE associated with the marginal genetic effect estimate.\r\n\r\nBeta_G             - The coefficient estimate for the genetic main effect (G).\r\nBeta_G-*           - The coefficient estimate for the interaction or interaction covariate terms.\r\nSE_Beta_G          - Model-based SE associated with the the genetic main effect (G).  \r\nSE_Beta_G-*        - Model-based SE associated with any GxE or interaction covariate terms.\r\nrobust_SE_Beta_G   - Robust SE associated with the the genetic main effect (G).  \r\nrobust_SE_Beta_G-* - Robust SE associated with any GxE or interaction covariate terms.\r\nCov_Beta_G_G-*          - Model-based covariance between the genetic main effect (G) and any GxE or interaction covariate terms.\r\nCov_Beta_G-*_G-*        - Model-based covariance between any GxE or interaction covariate terms.\r\nrobust_Cov_Beta_G_G-*   - Robust covariance between the genetic main effect (G) and any GxE or interaction covariate terms.\r\nrobust_Cov_Beta_G-*_G-* - Robust covariance between any GxE or interaction covariate terms.\r\n\r\nP_Value_Marginal           - Marginal genetic effect p-value from model-based SE.\r\nP_Value_Interaction        - Interaction effect p-value (K degrees of freedom test of interaction effect) from model-based SE. (K is number of major exposures)\r\nP_Value_Joint              - Joint test p-value (K+1 degrees of freedom test of genetic and interaction effect) from model-based SE.\r\nrobust_P_Value_Marginal    - Marginal genetic effect p-value from robust SE.\r\nrobust_P_Value_Interaction - Interaction effect p-value from robust SE.\r\nrobust_P_Value_Joint       - Joint test p-value (K+1 degrees of freedom test of genetic and interaction effect) from robust SE.\r\n```\r\n\r\n<br />\r\nThe --output-style flag can be used to specify which columns should be included in the output file:  \r\n\r\n#### minimum:  \r\nIncludes the variant information, Beta_Marginal, SE_Beta_Marginal, coefficient estimates for only the GxE terms, and depending on the --robust option, SE and covariance for only the GxE terms.\r\n\r\n#### meta:  \r\nIncludes each of the possible outputs listed above when applicable. For a model-based analysis (--robust 0), the columns containing the \"robust\" prefix (robust_*) are excluded in the output file.\r\n\r\n#### full:  \r\nIncludes, in addition to \"meta\", an initial header line with the residual variance estimate necessary for re-analysis of a subset of interactions using only summary statistics (for example, switching an exposure and interaction covariate).\r\n\r\n<br />\r\n<br />\r\n\r\n### Examples  \r\n<br />\r\n\r\nTo run GEM using the example data, execute GEM with the following code.\r\n```unix\r\n./GEM --bgen example.bgen --sample example.sample --pheno-file example.pheno --sampleid-name sampleid --pheno-name pheno2 --covar-names cov3 --exposure-names cov1 --robust 1 --center 0 --missing-value NaN --out my_example.out\r\n```\r\nThe results should look like the following output file [my_example.out](https://github.com/large-scale-gxe-methods/GEM/blob/master/example/my_example.out).  \r\n\r\n<br />\r\n\r\n## Recent Updates \r\n[Version 1.5.3](https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.5.3) - May 20, 2024:\r\n* Included stratified values for binary outcomes\r\n\r\n[Version 1.5.2](https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.5.2) - August 16, 2023:\r\n* Fixed the output when there is no exposure\r\n\r\n[Version 1.5.1](https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.5.1) - April 20, 2023:\r\n* Treated empty strings as missing values \r\n* Fixed a bug for empty strings at the end of each line\r\n* Minor changes to messages printed to stdout\r\n* Error out if the sample size is not greater than the number of predictors (intercept, exposures, interaction covariates, and covariates) in the null model fitting\r\n\r\n\r\n[Version 1.5](https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.5) - March 9, 2023:\r\n\r\n* Changed the default of the --center flag to 2 to center all the interaction covariates only\r\n\r\n[Version 1.4.5](https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.4.5) - November 11, 2022:\r\n\r\n* Added collinearity check of the covariates before fitting the null model\r\n\r\n[Version 1.4.4](https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.4.4) - October 5, 2022:\r\n\r\n* Fixed the bugs of include-snp-file\r\n* Removed the default value of flag \"--center\" \r\n\r\n[Version 1.4.3](https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.4.3) - March 23, 2022:\r\n\r\n* Sorted the output headers of categorical variables\r\n\r\n[Version 1.4.2](https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.4.2) - November 22, 2021:\r\n\r\n* Add math.h library to install GEM through Docker desktop\r\n* Added a binary executable file\r\n\r\n[Version 1.4.1](https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.4.1) - September 14, 2021:\r\n\r\n* Added to read phenotype files created from the Windows system\r\n\r\n[Version 1.4](https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.4) - July 2, 2021:\r\n\r\n* Remove --pheno-type flag. If the number of levels (unique observations) is 2, the phenotype is treated as binary; otherwise it is assumed to be continuous\r\n* Check for categorical exposures and interaction covariates\r\n* Output number of non-missing samples (N) and allele frequency (AF) for effect allele for each combination of strata for all\r\n\u2003 exposures and interaction covariates\r\n* Add two additional flags --categorical-names and --cat-threshold for user definition of categorical variables\r\n* Output the SE instead of variance for the coefficient estimates\r\n* Output only the lower triangle of the covariance matrix instead of the full matrix\r\n* For robust analysis and \"meta\"/\"full\" output style, include model-based summary statistics in the output file\r\n* Column names for the robust summary statistics will include the prefix \"robust_\"\r\n* For \"full\" output style, an initial header line with the dispersion is included in the output file\r\n* The V matrix no longer included in the output file for \"full\" output style\r\n\r\n[Version 1.3](https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.3) - April 7, 2021:\r\n\r\n* Add a new flag (--output-style) to modify which summary statistics should be included in the the output file\r\n\u2003\u2003\u2003\u2003\u2003    Column names now include the exposure and interaction covariate names instead of numbers.\r\n* The --exposure-names flag is now optional. If no exposures are specified, GEM will run a G-only model.\r\n\u2003\u2003\u2003\u2003\u2003    Covariates (not of interest) can still be adjusted for using --covar-names flag.\r\n\r\n[Version 1.2](https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.2) - January 22, 2021:\r\n\r\n* Fix issue to allow for space and tab delimited phenotype files.\r\n* Allow for centering and scaling of exposures and covariates.\r\n* Update calculations for model-based joint test\r\n* Update calculations for robust joint test\r\n* Output covariance, coefficients and standard errors to the log.\r\n* Change Allele1 and Allele2 in outfile file to Non_Effect_Allele and Effect_Allele.\r\n* Fix bug when phenotype is binary and there are missing genotypes.\r\n* Support PGEN/BED files.\r\n\r\n[Version 1.1](https://github.com/large-scale-gxe-methods/GEM/releases/tag/v1.1) - July 21, 2020:\r\n\r\n* Allow GEM to subset the BGEN file based on a list of variants to include for analysis. --include-snp-file\r\n* Use matrix operation to adjust for covariates instead of for-loop. Use the libdeflate package for faster zlib decompression of BGEN genotype blocks. Compile GEM with -O2 (optimizer flag). Prioritize BGEN sample file over the BGEN sample identifier block. Error if phenotype (--pheno-name) is also included as an exposoure or covariate\r\n* Support BGEN v1.1, v1.2 and v1.3 uncompressed genotype blocks.\r\n* Fix major printing bug.\r\n* Handle missing genotypes in BGEN files.\r\n\r\n<br />\r\n<br />\r\n\r\n## Contact \r\nFor comments, suggestions, bug reports and questions, please contact Han Chen (Han.Chen.2@uth.tmc.edu), Alisa Manning (AKMANNING@mgh.harvard.edu), Kenny Westerman (KEWESTERMAN@mgh.harvard.edu) or Samaneh Salehi Nasab (Samaneh.SalehiNasab@uth.tmc.edu). For bug reports, please include an example to reproduce the problem without having to access your confidential data.\r\n\r\n<br />\r\n<br />\r\n\r\n## References\r\nIf you use GEM in your analysis, please cite\r\n* Westerman KE, Pham DT, Hong L, Chen Y, Sevilla-Gonz\u00e1lez M, Sung YJ, Sun YV, Morrison AC, Chen H, Manning AK. (2021) GEM: scalable and flexible gene-environment interaction analysis in millions of samples. Bioinformatics 37(20):3514-3520. PubMed PMID: [**34695175**](https://www.ncbi.nlm.nih.gov/pubmed/34695175). PMCID: [**PMC8545347**](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC8545347/). DOI: [**10.1093/bioinformatics/btab223**](https://doi.org/10.1093/bioinformatics/btab223). \r\n \r\n\r\n<br />\r\n<br />\r\n\r\n## License \r\n\r\n ```\r\n GEM : Gene-Environment interaction analysis for Millions of samples\r\n Copyright (C) 2018-2024  Liang Hong, Han Chen, Duy Pham, Cong Pan, Samaneh Salehi Nasab\r\n \r\n This program is free software: you can redistribute it and/or modify\r\n it under the terms of the GNU General Public License as published by\r\n the Free Software Foundation, either version 3 of the License, or\r\n (at your option) any later version.\r\n\r\n This program is distributed in the hope that it will be useful,\r\n but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n GNU General Public License for more details.\r\n\r\n You should have received a copy of the GNU General Public License\r\n along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n ```\r\n The GEM package is distributed under GPL (>= 3). It includes source code from open source third-party software:\r\n\r\n* libdeflate: MIT\r\n* Plink: LGPLv3+\r\n* Zstandard (zstd): BSD_3_clause | GPL-2\r\n\r\n The binary release of GEM also links to third-party libraries:\r\n \r\n* Boost: Boost Software License, Version 1.0\r\n* Eigen: Mozilla Public License, Version 2.0\r\n* Intel oneAPI Math Kernel Library (oneMKL): Intel Simplified Software License (Version October 2022 or later)\r\n\r\n Full copies of license agreements for GEM, third-party source code, linked libraries can be found <a href=\"https://github.com/large-scale-gxe-methods/GEM/blob/master/LICENSE\">here</a>.\r\n"
      },
      "source": "https://raw.githubusercontent.com/large-scale-gxe-methods/GEM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Genotype Files",
        "parent_header": [
          "GEM",
          "Usage",
          "Input Files"
        ],
        "type": "Text_excerpt",
        "value": "# GEM  \r\n\r\nGEM (Gene-Environment interaction analysis for Millions of samples) is a software program for large-scale gene-environment interaction testing in samples from unrelated individuals. It enables genome-wide association studies in up to millions of samples while allowing for multiple exposures, control for genotype-covariate interactions, and robust inference.  \r\n\r\n\r\n<br />\r\nCurrent version: 1.5.3 \r\n\r\n<br />\r\nAdditional documentation:  \r\nhttps://large-scale-gxe-methods.github.io/GEMShowcaseWorkspace\r\n\r\n<br />\r\n\r\n## Contents\r\n- [Quick Installation](#quick-installation)\r\n- [Dependencies](#dependencies)\r\n- [Usage](#usage)\r\n- [Contact](#contact)\r\n- [License](#license)\r\n- [Recent Updates](#recent-updates)\r\n\r\n<br />\r\n\r\n\r\n## Quick Installation \r\n\r\nOption 1: Use the binary executable file for Linux\r\n* Download the binary file from: [v1.5.3 Release](https://github.com/large-scale-gxe-methods/GEM/releases/download/v1.5.3/GEM_1.5.3_Intel)\r\n* Change the permission: chmod a+x GEM_1.5.3\r\n\r\nOption 2: Build GEM Library Dependencies  \r\n   * C++11 compiler or later \r\n   * BLAS/LAPACK. For Intel processors, we recommend that GEM be compiled with an optimized math routine library such as the Intel oneAPI Math Kernal Library to replace BLAS/LAPACK for optimal performance.\r\n   * Boost C++ libraries. GEM links to the following Boost libraries:  ```boost_program_options, boost_thread, boost_system, and boost_filesystem```  \r\n   * Eigen Library. GEM links to the header files of Eigen. \r\n\r\n<br />\r\n\r\nTo install GEM, run the following lines of code:\r\n ```\r\n git clone https://github.com/large-scale-gxe-methods/GEM\r\n cd GEM/\r\n cd src/  \r\n make  \r\n ```\r\n\r\n<br />\r\n<br />\r\n<br />\r\n\r\n## Dependencies\r\nC/C++ Compiler\r\n * A compiler with C++11 (or later) support is required.\r\n \r\nLAPACK and BLAS\r\n * The LAPACK (Linear Algebra PACKage) and BLAS (Basic Linear Algebra Subprograms) libraries are used for matrix operations in GEM.\r\n\r\nIntel processors:\r\n * We recommend linking GEM to the Intel oneAPI Math Kernal Library (oneMKL), instead of classical BLAS/LAPACK, for a greater performance boost. This can be done by replacing -llapack and -lblas in the makefile with -lmkl_gf_lp64 -lmkl_sequential -lmkl_core before compiling.\r\n  * It is important to compile with -lmkl_sequential since GEM already does multi-threading across SNPs.\r\n\r\nAMD processors:\r\n * For AMD processors, OpenBLAS (-lopenblas) may be a better alternative.\r\n \r\nBoost C++ Libraries\r\n * The Boost C++ libraries are used for command-line, file management and multi-threading purposes.\r\n * The following Boost libraries are required :\r\n      1. libboost_system\r\n      2. libboost_program_options\r\n      3. libboost_filesystem\r\n      4. libboost_thread\r\n\r\nEigen Library\r\n* The Eigen library is used for linear algebra of dense and sparse matrices.\r\n* Download the source code from https://eigen.tuxfamily.org/index.php?title=Main_Page and add the directory of Eigen header files in the include path when compiling.\r\n \r\n\r\n## Usage\r\n\r\n### Running GEM\r\n\r\n1. [Command Line Options](#command-line-options)  \r\n1. [Input Files](#input-files)\r\n1. [Output File Format](#output-file-format)\r\n1. [Examples](#examples)\r\n\r\n<br /> \r\n<br />\r\n\r\n### Command Line Options\r\n\r\nOnce GEM is installed, the executable ```./GEM``` can be used to run the program.  \r\nFor a list of options, use ```./GEM --help```.  \r\n\r\n<details>\r\n     <summary> <b>List of Options</b> </summary>\r\n\r\n```\r\nGeneral Options:\r\n\r\n--help\r\n    Prints the available options of GEM and exits.  \r\n   \r\n--version\r\n    Prints the version of GEM and exits.\r\n  \r\n  \r\n  \r\nInput/Output File Options:  \r\n\r\n--pheno-file  \r\n     Path to the phenotype file.  \r\n\r\n--bgen  \r\n     Path to the BGEN file.  \r\n\r\n--sample  \r\n     Path to the sample file.  \r\n     Required when the BGEN file does not contain sample identifiers.  \r\n  \r\n--pfile  \r\n     Path and prefix to the .pgen, .pvar, and .psam files.  \r\n     If this flag is used, then --pgen/--pvar/--psam don't need to be specified.\r\n  \r\n--pgen  \r\n     Path to the pgen file.  \r\n  \r\n--pvar  \r\n     Path to the pvar file.  \r\n  \r\n--psam  \r\n     Path to the psam file.  \r\n  \r\n--bfile  \r\n     Path and prefix to the .bed, .bim and .fam files.  \r\n     If this flag is used, then --bed/--bim/--fam don't need to be specified.\r\n  \r\n--bed  \r\n     Path to the bed file.  \r\n  \r\n--bim  \r\n     Path to the bim file.  \r\n  \r\n--fam  \r\n     Path to the fam file.  \r\n  \r\n--out  \r\n     Full path and extension to where GEM output results.  \r\n     Default: gem.out\r\n  \r\n--output-style  \r\n     Modifies the output of GEM. Must be one of the following:\r\n\tminimum: Output the summary statistics for only the GxE and marginal G terms.\r\n        meta: 'minimum' output plus additional fields for the main G and any GxCovariate terms.\r\n               For a robust analysis, additional columns for the model-based summary statistics will be included.\r\n        full: 'meta' output plus additional fields needed for re-analyses of a subset of interactions.\r\n\tDefault: minimum   \r\n\r\n\r\n\r\nPhenotype File Options:\r\n\r\n--sampleid-name  \r\n     Column name in the phenotype file that contains sample identifiers.  \r\n\r\n--pheno-name  \r\n     Column name in the phenotype file that contains the phenotype of interest. \r\n     If the number of levels (unique observations) is 2, the phenotype is treated as binary; otherwise it is assumed to be continuous.\r\n\r\n--exposure-names  \r\n     One or more column names in the phenotype file naming the exposure(s) to be included in interaction tests.  \r\n     If no exposures are included, GEM will only perform the marginal test.  \r\n\r\n--int-covar-names  \r\n     Any column names in the phenotype file naming the covariate(s) for which interactions should be included \r\n     for adjustment (do not include with --exposure-names).  \r\n\r\n--covar-names  \r\n     Any column names in the phenotype file naming the covariates for which only main effects should be included\r\n     for adjustment (do not include with --exposure-names or --int-covar-names).  \r\n\r\n--robust\r\n     0 for model-based standard errors and 1 for robust standard errors.\r\n        Default: 0  \r\n\r\n--tol \r\n     Convergence tolerance for logistic regression.  \r\n        Default: 0.0000001  \r\n\r\n--delim  \r\n     Delimiter separating values in the phenotype file. Tab delimiter should be represented as \\t and space delimiter as \\0.\r\n        Default: , (comma-separated)  \r\n\r\n--missing-value  \r\n     Indicates how missing values in the phenotype file are stored.  \r\n        Default: NA\r\n  \r\n--center \r\n     0 for no centering to be done, 1 to center ALL exposures and covariates, and 2 to center all the interaction covariates only.\r\n     \tDefault: 2\r\n\r\n--scale\r\n     0 for no scaling to be done and 1 to scale ALL exposures and covariates by the standard deviation.\r\n        Default: 0\r\n\r\n--categorical-names\r\n     Names of the exposure or interaction covariate that should be treated as categorical.\r\n        Default: None\r\n\r\n--cat-threshold\r\n     A cut-off to determine which exposure or interaction covariate not specified using --categorical-names \r\n     should be automatically treated as categorical based on the number of levels (unique observations).\r\n        Default: 20\r\n   \r\n\r\n\r\nFiltering Options:  \r\n\r\n--maf\r\n     Minimum threshold value [0, 0.5] to exclude variants based on the minor allele frequency.\r\n        Default: 0.001\r\n  \r\n--miss-geno-cutoff\r\n     Maximum threshold value [0, 1.0] to filter variants based on the missing genotype rate.  \r\n        Default: 0.05  \r\n  \r\n--include-snp-file  \r\n     Path to file containing a subset of variants in the specified genotype file to be used for analysis. \r\n     The first line in this file is the header that specifies which variant identifier in the genotype file  \r\n     is used for ID matching. This must be 'snpid' (PLINK or BGEN) or 'rsid' (BGEN only). There should be one variant \r\n     identifier per line after the header.\r\n  \r\n  \r\n\r\nPerformance Options:  \r\n\r\n--threads\r\n     Set number of compute threads.\r\n    \t  Default: ceiling(detected threads / 2)  \r\n\r\n--stream-snps \r\n     Number of SNPs to analyze in a batch. Memory consumption will increase for larger values of stream-snps.  \r\n        Default: 1\r\n\r\n```\r\n</details>\r\n\r\n<br /> \r\n\r\n### Input Files\r\n\r\n* #### Phenotype File\r\n    A file which should contain a sample identifier column and columns for the phenotypes, exposures, and covariates. The ordering of the columns does not matter.\r\n    All inputs should be coded numerically (e.g., males/females as 0/1)\r\n\r\n<br />\r\n\r\n* #### Genotype Files  \r\n\r\n  [**BGEN**](https://www.well.ox.ac.uk/~gav/bgen_format/spec/latest.html)  \r\nVariants that are non-biallelic should be filtered from the BGEN file. Note that since there are no indication of a REF/ALT allele in the BGEN file, the second allele is the effect allele counted in association testing.   \r\n\r\n  A [.sample file](https://www.well.ox.ac.uk/~gav/qctool_v2/documentation/sample_file_formats.html) is required as input when the .bgen file does not contain a sample identifier block. <br /><br /> \r\n     \r\n  [**Plink BED**](https://www.cog-genomics.org/plink/1.9/)  \r\n\r\n  [**.fam**](https://www.cog-genomics.org/plink/2.0/formats#fam) - The .fam file can be space or tab-delimited and must contain at least 2 columns where the first column is the family ID (FID) and the second column is the individual ID (IID). \r\nGEM will use the IID column for sample identifier matching with the phenotype file.  \r\n\r\n  [**.bim**](https://www.cog-genomics.org/plink/2.0/formats#bim) - The .bim file can also be space or tab-delimited and should be in the following order: the chromosome, variant id, cM (optional), base-pair coordinate, ALT allele, and REF allele.  \r\n\r\n  [**.bed**](https://www.cog-genomics.org/plink/2.0/formats#bed) - A bed file must be stored in variant-major form. The ALT allele specified in the .bim file is the effect allele counted in association testing. <br /><br />  \r\n\r\n  [**Plink 2.0 PGEN**](https://www.cog-genomics.org/plink/2.0/)  \r\n  \r\n  [**.psam**](https://www.cog-genomics.org/plink/2.0/formats#psam) - The .psam file is a tab-delimited text file containing the sample information. If header lines are present, the last header line should contain a column with the name #IID (if the first column is not #FID) or IID (if the first column is #FID) that holds the individual ID for sample identifier matching with the phenotype file. All previous header lines will be ignored. If no header line beginning with #IID or #FID is present, then the columns are assumed to be in .fam file order.  \r\n\r\n  [**.pvar**](https://www.cog-genomics.org/plink/2.0/formats#pvar) - The .pvar file is a tab-delimited text file containing the variant information. If header lines are present, the last header line should start with #CHROM. If #CHROM is present, then the columns POS, ID, REF, and ALT must also be present. All previous header lines will be ignored. If the .pvar file contain no header lines beginning with #CHROM, it is assumed that the columns are in .bim file order.  \r\n\r\n  [**.pgen**](https://www.cog-genomics.org/plink/2.0/formats#pgen) - The .pgen file should be filtered for non-biallelic variants. The ALT allele specified in the .pvar file is the effect allele counted in association testing.\r\n     \r\n\r\n    \r\n<br /> \r\n<br />\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/large-scale-gxe-methods/GEM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Output File Format",
        "parent_header": [
          "GEM",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "\r\nGEM will write results to the output file specified with the --out parameter (or 'gem.out' if no output file is specified).  \r\nBelow are details of the possible column headers in the output file.  \r\n\r\n```diff \r\nSNPID              - The SNP identifier as retrieved from the genotype file.\r\nRSID               - The reference SNP ID number. (BGEN only)\r\nCHR                - The chromosome of the SNP.\r\nPOS                - The physical position of the SNP.\r\nNon_Effect_Allele  - The allele not counted in association testing.  \r\nEffect_Allele      - The allele that is counted in association testing.  \r\nN_Samples          - The number of samples without missing genotypes.\r\nAF                 - The allele frequency of the effect allele.\r\nN_catE_*           - The number of non-missing samples in each combination of strata for all of the categorical exposures and interaction covariates.\r\nAF_catE_*          - The allele frequency of the effect allele for each combination of strata for all of the catgorical exposure or interaction covariate.\r\n\r\nBeta_Marginal           - The coefficient estimate for the marginal genetic effect (i.e., from a model with no interaction terms).\r\nSE_Beta_Marginal        - The model-based SE associated with the marginal genetic effect estimate.\r\nrobust_SE_Beta_Marginal - The robust SE associated with the marginal genetic effect estimate.\r\n\r\nBeta_G             - The coefficient estimate for the genetic main effect (G).\r\nBeta_G-*           - The coefficient estimate for the interaction or interaction covariate terms.\r\nSE_Beta_G          - Model-based SE associated with the the genetic main effect (G).  \r\nSE_Beta_G-*        - Model-based SE associated with any GxE or interaction covariate terms.\r\nrobust_SE_Beta_G   - Robust SE associated with the the genetic main effect (G).  \r\nrobust_SE_Beta_G-* - Robust SE associated with any GxE or interaction covariate terms.\r\nCov_Beta_G_G-*          - Model-based covariance between the genetic main effect (G) and any GxE or interaction covariate terms.\r\nCov_Beta_G-*_G-*        - Model-based covariance between any GxE or interaction covariate terms.\r\nrobust_Cov_Beta_G_G-*   - Robust covariance between the genetic main effect (G) and any GxE or interaction covariate terms.\r\nrobust_Cov_Beta_G-*_G-* - Robust covariance between any GxE or interaction covariate terms.\r\n\r\nP_Value_Marginal           - Marginal genetic effect p-value from model-based SE.\r\nP_Value_Interaction        - Interaction effect p-value (K degrees of freedom test of interaction effect) from model-based SE. (K is number of major exposures)\r\nP_Value_Joint              - Joint test p-value (K+1 degrees of freedom test of genetic and interaction effect) from model-based SE.\r\nrobust_P_Value_Marginal    - Marginal genetic effect p-value from robust SE.\r\nrobust_P_Value_Interaction - Interaction effect p-value from robust SE.\r\nrobust_P_Value_Joint       - Joint test p-value (K+1 degrees of freedom test of genetic and interaction effect) from robust SE.\r\n```\r\n\r\n<br />\r\nThe --output-style flag can be used to specify which columns should be included in the output file:  \r\n\r"
      },
      "source": "https://raw.githubusercontent.com/large-scale-gxe-methods/GEM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "minimum:",
        "parent_header": [
          "GEM",
          "Usage",
          "Output File Format"
        ],
        "type": "Text_excerpt",
        "value": "Includes the variant information, Beta_Marginal, SE_Beta_Marginal, coefficient estimates for only the GxE terms, and depending on the --robust option, SE and covariance for only the GxE terms.\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/large-scale-gxe-methods/GEM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "meta:",
        "parent_header": [
          "GEM",
          "Usage",
          "Output File Format"
        ],
        "type": "Text_excerpt",
        "value": "Includes each of the possible outputs listed above when applicable. For a model-based analysis (--robust 0), the columns containing the \"robust\" prefix (robust_*) are excluded in the output file.\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/large-scale-gxe-methods/GEM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "full:",
        "parent_header": [
          "GEM",
          "Usage",
          "Output File Format"
        ],
        "type": "Text_excerpt",
        "value": "Includes, in addition to \"meta\", an initial header line with the residual variance estimate necessary for re-analysis of a subset of interactions using only summary statistics (for example, switching an exposure and interaction covariate).\r\n\r\n<br />\r\n<br />\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/large-scale-gxe-methods/GEM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Examples",
        "parent_header": [
          "GEM",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "<br />\r\n\r\nTo run GEM using the example data, execute GEM with the following code.\r\n```unix\r\n./GEM --bgen example.bgen --sample example.sample --pheno-file example.pheno --sampleid-name sampleid --pheno-name pheno2 --covar-names cov3 --exposure-names cov1 --robust 1 --center 0 --missing-value NaN --out my_example.out\r\n```\r\nThe results should look like the following output file [my_example.out](https://github.com/large-scale-gxe-methods/GEM/blob/master/example/my_example.out).  \r\n\r\n<br />\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/large-scale-gxe-methods/GEM/master/README.md",
      "technique": "header_analysis"
    }
  ]
}