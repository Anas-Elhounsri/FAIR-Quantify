{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/horsedayday/eQTLsingle"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-04-02T13:29:38Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-19T00:51:56Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "type": "Text_excerpt",
        "value": "**`eQTLsingle`** is an R package for **discovering eQTLs only with single cell RNA-seq (scRNA-seq) data, without genomic data**. It detects mutations from scRNA-seq data and models gene\nexpression of different genotypes with the zero-inflated negative\nbinomial (ZINB) model to find associations between genotypes and\nphenotypes at single-cell level.\n\n**`eQTLsingle`** has two modes.\n\n-   Cleaned-data mode: take input as SNV matrix and expression matrix\n    from single cells. If you have had SNV and expression information of\n    the same cell before, you can use this mode to discover eQTLs\n\n-   Raw-data mode: take input as raw scRNA-seq data (fastq data).\n    eQTLsingle can generate both SNV matrix and gene matrix, and\n    discovers eQTLs based them\n"
      },
      "source": "https://raw.githubusercontent.com/horsedayday/eQTLsingle/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9278274373307258,
      "result": {
        "original_header": "Mode 1: Cleaned-data mode",
        "type": "Text_excerpt",
        "value": "This mode takes input as cleaned SNV matrix and expression matrix (the\nright part shown in the figure above).\n \n"
      },
      "source": "https://raw.githubusercontent.com/horsedayday/eQTLsingle/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9356081497861658,
      "result": {
        "original_header": "Input",
        "type": "Text_excerpt",
        "value": "**`eQTLsingle`** takes two inputs: `snvMatrix` and `expressionMatrix`. \n-   `snvMatrix`: A dataframe, describes genotype of SNVs (loci by\n    cells), rownames of this dataframe are SNVid, colnames of this\n    dataframe are Cell ids. (1) -1 indicates missing data (no sufficient\n    reads covered); (2) 0 indicates genotype of this locus is REF\n    (non-mutated); (3) 1 indicates genotype of this locus is ALT\n    (mutated) \n-   `expressionMatrix`: A dataframe, describes gene expressions (gene\n    expressions by cells), rownames of this dataframe are Geneid,\n    colnames of this dataframe are CellId.\n \n"
      },
      "source": "https://raw.githubusercontent.com/horsedayday/eQTLsingle/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9282422096636207,
      "result": {
        "original_header": "Mode 2: Raw-data mode",
        "type": "Text_excerpt",
        "value": "If you only have FASTQ data and want to use our script to generate\nexpression matrix and SNV matrix (the left part shown in the figure\nabove), you can run shell scripts stored in `./inst/`. You can execute\nthese scripts from R environment directly, but we recommend you to use\nit in shell. There are two parts, \n1.  *Pre-processing*: generate both mutation profile and expression\n    profiles from FASTQ data \n2.  *SNV quality control*: count read number over selected SNVs and\n    confirm valid mutations for further eQTL analysis \nYou need to install some dependencies for pre-processing and SNV quality\ncontrol,\n \n"
      },
      "source": "https://raw.githubusercontent.com/horsedayday/eQTLsingle/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/horsedayday/eQTLsingle/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/horsedayday/eQTLsingle/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "horsedayday/eQTLsingle"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/horsedayday/eQTLsingle/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/horsedayday/eQTLsingle/main/inst/shell/eQTLsingle-SNVPostAnalysis.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/horsedayday/eQTLsingle/main/inst/shell/eQTLsingle-Preprocessing.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/horsedayday/eQTLsingle/main/inst/shell/utilities/quantify.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/horsedayday/eQTLsingle/main/inst/shell/utilities/check_command.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/horsedayday/eQTLsingle/main/inst/shell/utilities/make_matrix.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/horsedayday/eQTLsingle/main/inst/shell/utilities/SNV_calling.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/horsedayday/eQTLsingle/main/inst/shell/utilities/mapping.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/horsedayday/eQTLsingle/main/./vignettes/visualization_plot.png"
      },
      "source": "https://raw.githubusercontent.com/horsedayday/eQTLsingle/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "To install the **`eQTLsingle`** from\n[**GitHub**](https://github.com/horsedayday/eQTLsingle/):\n\n``` r\nif(!require(devtools)) install.packages(\"devtools\")\ndevtools::install_github(\"horsedayday/eQTLsingle\", build_vignettes = TRUE)\n```\n\nTo load the installed **`eQTLsingle`** in R:\n\n``` r\nlibrary(eQTLsingle)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/horsedayday/eQTLsingle/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9901561081800829,
      "result": {
        "original_header": "Mode 2: Raw-data mode",
        "type": "Text_excerpt",
        "value": "You need to install some dependencies for pre-processing and SNV quality\ncontrol,\n \n"
      },
      "source": "https://raw.githubusercontent.com/horsedayday/eQTLsingle/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/horsedayday/eQTLsingle/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/horsedayday/eQTLsingle/main/./vignettes/eQTLsingle_overview.png"
      },
      "source": "https://raw.githubusercontent.com/horsedayday/eQTLsingle/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "eQTLsingle"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "horsedayday"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 43873,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 32874,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 1508,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/horsedayday/eQTLsingle/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "parent_header": [
          "Mode 2: Raw-data mode"
        ],
        "type": "Text_excerpt",
        "value": "-   `samtools`\n-   `featureCounts`\n-   `GATK`\n-   `picard`\n-   `java`\n-   `bam-readcount`\n-   `Python3`\n-   `Pandas`\n\n### Usage\n"
      },
      "source": "https://raw.githubusercontent.com/horsedayday/eQTLsingle/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 05:44:49",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 13
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Step1: Build SNV-gene pairs",
        "parent_header": [
          "Mode 1: Cleaned-data mode",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "We only conduct eQTL analysis on valid mutations and genes. So we need\nto select high reliable SNV-gene pairs first (both SNV and genes cover\nenough cells).\n\n``` r\n# Load eQTLsingle and test data (SNV matrix and expression matrix)\nlibrary(eQTLsingle)\ndata(\"toy_snvMatrix\")\ndata(\"toy_expressionMatrix\")\n# select valid SNV-gene pairs\n# each genotype at least covers 30 cells\n# each gene (expression level > 1) at least covers 30 cells\nsnv.gene.pair.metadata <- eQTLsingle_build_metadata(snvMatrix = toy_snvMatrix,\n                                                    expressionMatrix = toy_expressionMatrix, \n                                                    snv.number.of.cells = 30, \n                                                    expression.min = 1, \n                                                    expression.number.of.cells = 30)\n```\n\nFormat of `snv.gene.pair.metadata`,\n\n-   `SNVid`: Id of SNV, represented as CHR\\_\\_POS\n-   `Num_cells_ref`: Num\\_cells\\_ref: number of cells in REF group\n-   `Num_cells_alt`: Num\\_cells\\_alt: number of cells in ALT group\n-   `Ref_cells`: cell list of REF group\n-   `Alt_cells`: cell list of ALT group\n-   `GeneList`: gene list, these genes will be tested with the SNV in\n    this row\n-   `Num_gene`: number of genes in gene list\n-   `CellList`: whole cell list of REF and ALT group\n"
      },
      "source": "https://raw.githubusercontent.com/horsedayday/eQTLsingle/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 2: Conduct eQTL analysis on valid SNV-gene pairs.",
        "parent_header": [
          "Mode 1: Cleaned-data mode",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "``` r\n# conduct eQTL analysis on valid SNV-gene pairs\neQTL.result <- eQTLsingle(toy_expressionMatrix,\n                          snv.gene.pair.metadata)\n```\n\nFormat of `eQTL.result`,\n\n-   `SNVid`: Id of SNV, represented as CHR\\_\\_POS\n-   `Geneid`: gene id of target gene\n-   `sample_size_Ref`, `sample_size_Alt`: number of cells in REF and ALT\n    group\n-   `theta_Ref`, `theta_Alt`, `mu_Ref`, `mu_Alt`, `size_Ref`,\n    `size_Alt`, `prob_Ref`, `prob_Alt`: estimated parameters of ZINB for\n    REF group and ALT group\n-   `total_mean_Ref`, `total_mean_Alt`: mean of the REF group and ALT\n    group\n-   `foldChange`: fold change of mean of REF group (`total_mean_Ref`)\n    with respect to mean of ALT group (`total_mean_Alt`)\n-   `chi2LR1`: chi square statistic for the test\n-   `pvalue`, `adjusted_pvalue`: pvalue and adjusted pvalue of the test.\n    If adjusted p-value is smaller than some threshold, this SNV shows\n    significant eQTL effect on the target gene\n-   `Remark`: to record abnormity\n"
      },
      "source": "https://raw.githubusercontent.com/horsedayday/eQTLsingle/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "[Optional] Step 3: Visualize eQTL effect",
        "parent_header": [
          "Mode 1: Cleaned-data mode",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "``` r\n# Suppose we are interested at the pair between \n# SNV with snvid \"SNV_3\" \n# gene with geneid \"gene_16\"\n\n# select out a SNV-gene pair\neQTL.result.target <- eQTL.result[(eQTL.result$SNVid == \"SNV_3\") &\n                                    (eQTL.result$Geneid == \"gene_16\"),]\n\n# to draw violin plots of gene expression in both REF group and ALT group\neQTLsingle_visualization(eQTL.result.target,toy_expressionMatrix, snv.gene.pair.metadata)\n```\n\n<figure>\n<img src=\"./vignettes/visualization_plot.png\" width=\"500\" alt=\"\" /><figcaption>visualization_plot</figcaption>\n</figure>\n"
      },
      "source": "https://raw.githubusercontent.com/horsedayday/eQTLsingle/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 1: Pre-processing (generating SNV matrix and expression matrix)",
        "parent_header": [
          "Mode 2: Raw-data mode",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "You can get the help document by running following command in *shell*\n\n    ./eQTLsingle-Preprocessing.sh --help\n\nDefault operations are:\n\n1.  Build index for mapping software STAR\n\n2.  Mapping from Fastq files to Bam files; Building gene expression\n    matrix\n\n3.  SNV calling from Bam files\n\n-   If you want to use the full function, i.e., (1)(2)(3), you need to\n    set the following arguments:\n\n\n\n        --ref <file>                    Reference genome\n        \n        --gtf <file>                    Genome annotation\n        \n        --input-fastq-dir <folder>      Folder of Fastq files\n        \n        --output-dir <folder>           Output folder to store index of STAR, Bam files, gene expression matrix, SNV calling results, etc.\n        \n        --picard <file>                 Path to picard.jar file\n        \n        --refsnp <file>                 Path to reference on SNP, e.g., dbsnp_138.hg19.vcf\n        \n        --refindel <file>               Path to reference on indel, e.g., 1000G_phase1.indels.hg19.sites.vcf\n        \n        [--parallel <num>]              Number of files processed in parallel, optional argument, default value is 1\n\n-   If you only want to use part of utilities, you can use ignore\n    argument to ignore specific operation:\n\n\n\n        --ignore-build-index            To ignore the index building step\n        --ignore-mapping                To ignore the mapping and quantification step\n        --ignore-SNV-calling            To ignore the SNV calling step\n\nFor example,\n\n-   If you want to get full results including both gene expression\n    matrix and SNV matrix from raw reads (fastq files), your command is\n    like:\n\n\n\n    ./eQTLsingle-Preprocessing.sh --ref ref_file --gtf gtf_file --input-fastq-dir fastq_folder --outut-dir output_folder --picard picard_file --refsnp ref_snp_file --refindel ref_indel_file --parallel 2\n\n-   If you just want to mapping (including building index), your command\n    is like:\n\n\n\n    ./eQTLsingle-Preprocessing.sh --ref ref_file --gtf gtf_file --input-fastq-dir fastq_folder --outut-dir output_folder --ignore-SNV-calling\n\n-   If you just want to do SNV calling, your command is like the command\n    below. Note that, you need to put bam files in output\\_folder/bam\n\n\n\n    ./eQTLsingle-Preprocessing.sh --ref ref_file --gtf gtf_file --outut-dir output_folder --picard picard_file --refsnp ref_snp_file --refindel ref_indel_file --ignore-build-index --ignore-mapping\n\nThe structure of output is\n\n    output_folder\n    \u2502   \n    \u2502\n    \u2514\u2500\u2500\u2500 bam\n    \u2502   \u2502   cell_1_Aligned.sortedByCoord.out.bam\n    |   |   cell_1_Log.final.out\n    \u2502   \u2502   cell_2_Aligned.sortedByCoord.out.bam\n    |   |   cell_2_Log.final.out\n    |   |   ...\n    \u2502   \n    \u2514\u2500\u2500\u2500 mapping_stat\n    |   \u2502   mapping_stat.csv\n    |    \n    |\u2500\u2500\u2500 quantification_stats\n    |   \u2502\u2500\u2500\u2500 cell_level_files\n    |   |   \u2502  cell_1.featurecounts\n    |   |   \u2502  cell_1.featurecounts.summary\n    |   |   \u2502  cell_2.featurecounts\n    |   |   \u2502  cell_2.featurecounts.summary\n    |   |   | ...\n    |   |\u2500\u2500\u2500 gene_expression_matrix\n    |   |   |  gene_expression_matrix.csv\n    |   |   |  featurecounts_summary_matrix.csv\n    |   \n    |\u2500\u2500\u2500 snv\n    |   \u2502\u2500\u2500\u2500 cell_level_snv\n    |   |   \u2502  cell_1_filtered_pass.vcf\n    |   |   \u2502  cell_1_gatk.bam\n    |   |   \u2502  cell_2_filtered_pass.vcf\n    |   |   \u2502  cell_2_gatk.bam\n    |   |   |  ...\n    |   |\u2500\u2500\u2500 snv_matrix\n    |   |   \u2502  SNV_matrix.csv\n    |    \n    |\u2500\u2500\u2500 star_index\n    |   |   |  SA\n    |   |   |  SAindex\n    |   |   |  ...\n    |   \n    |\u2500\u2500\u2500 time_stats\n    |   |  time_featurecounts.csv\n    |   |  time_GATK.csv\n    |   |  time_STAR.csv\n\n-   *bam* : mapping result\n\n-   *mapping\\_stat*: details on mapping, like unique mapped reads,\n    mapping rate \u2026\n\n-   *quantification\\_stats*: two sub-folders on quantification results\n\n    -   *cell\\_level\\_files* : cell-level feature counting results,\n        generated by software featureCounts\n\n    -   *gene\\_expression\\_matrix* : expression matrix\n        `gene_expression_matrix.csv`. You can also use your preferred\n        normalization method, like CPM, TPM, or DESeq on this matrix\n        further.\n\n-   *snv*: two sub-folders on SNV calling results\n\n    -   *cell\\_level\\_files* : cell-level calling result, such as VCF\n        files;\n\n    -   *snv\\_matrix* : SNV matrix, where 0 means non-mutation-reported\n        loci, 1 means mutation detected loci. non-mutation-reported loci\n        may due to either real-mutation or no-efficient-coverage, we\n        need to further distinguish these two conditions with\n        `eQTLsingle-SNVPostAnalysis.sh`\n\n-   *star\\_index*: index for the mapping software *STAR*\n\n-   *time\\_stats*: time log on mapping, SNV calling, and feature\n    counting\n"
      },
      "source": "https://raw.githubusercontent.com/horsedayday/eQTLsingle/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 2: SNV quality control",
        "parent_header": [
          "Mode 2: Raw-data mode",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "In scRNA-seq data, loci without mutation reported by the SNV-calling\nprogram may be truly with no mutation but also may be due to low read\ncoverage at the loci. We need to further distinguish these two\nconditions by counting the number of reads over these loci. Because the\noriginal SNV matrix is very sparse, users can first filter invalid SNVs\nout (e.g., the SNV only occur in a few cells), and then count number of\nreads over the remained SNV loci with the *shell* function\n`eQTLsingle-SNVPostAnalysis.sh`. You need to format the loci you want to\ncheck into \\[chromosome position position\\] in each row. For example,\nyou want to check the loci (Chromosome:chr1, POS:12345), you need to\nsupply a file containing one row like: chr1 12345 12345. In addition,\nyou also need to supply the name list of valid cells. If not, the script\nwill do analysis on all bam files in the bam file folder.\n\nYou can get the following document by running following command in\n*shell*\n\n    ./eQTLsingle-SNVPostAnalysis.sh --help\n\nArguments:\n\n    --input-dir <folder>            Folder of GATK Bam files (output_folder/snv/cell_level_snv)\n    --output-dir <folder>           Output folder for read counts result on given locations\n    --SNV-list <file>               SNV locations needed to analysis. Format: chromosome locus locus; Suppose we select the SNV (Chromosome:chr1, POS:12345), then there is one row in this file: chr1 12345 12345\n    [--valid-cell-list <file>]      Cells we need to analyze. Each line represents the name for a cell. If you don't set it, the code will do analysis on all files in the given input folder\n    [--parallel <num>]              Number of files processed in parallel, optional argument, default value is 1\n\nYour command is like:\n\n    ./eQTLsingle-SNVPostAnalysis.sh --input-dir input_dir --output-dir output_dir --SNV-list SNV_list_file --valid-cell-list valid_cell_list_file --parallel 2\n\nYou will get output result `selected_SNV_readcounts_matrix.txt`,\ndescribing number of reads belonging to different types of bases (A, C,\nG, T) in each cell. You can further build these information into a SNV\nmatrix with functions `snv_readcounts_tidy` and `snv_matrix` in our R\npackage.\n"
      },
      "source": "https://raw.githubusercontent.com/horsedayday/eQTLsingle/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 3: Generate highly reliable SNV matrix",
        "parent_header": [
          "Mode 2: Raw-data mode",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "You can tidy `selected_SNV_readcounts_matrix.txt` into a SNV matrix with\nfollowing steps. In this SNV matrix, (1) -1 indicates missing data (no\nsufficient reads covered); (2) 0 indicates genotype of this locus is REF\n(non-mutated); (3) 1 indicates genotype of this locus is ALT (mutated);\n\n``` r\n# Tidy read counts over mutations. Only keep loci with at least 5 reads covered\nreadcountProfile <- snv_readcounts_tidy(readcounts.result = 'selected_SNV_readcounts_matrix.txt',\n                                        minimal.read.num = 5)\n\n# Generate SNV matrix\nsnvMatrix <- snv_matrix(readcountProfile)\n\n# You can also generate a reference table of SNVs (base types of reference allele and alternative allele of each SNV)\nreadcountProfile.reference_table <- snv_reference(readcountProfile = readcountProfile)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/horsedayday/eQTLsingle/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 4: eQTL analysis",
        "parent_header": [
          "Mode 2: Raw-data mode",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "After getting valid SNV matrix and expression matrix, you can do eQTL\nanalysis with the tutorial above, i.e.\u00a0the steps introduced in the\nsection of `Cleaned-data mode`.\n"
      },
      "source": "https://raw.githubusercontent.com/horsedayday/eQTLsingle/main/README.md",
      "technique": "header_analysis"
    }
  ]
}