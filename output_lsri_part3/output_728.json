{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/dunhamlab/PacRAT"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-10-04T18:43:25Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-03-18T13:57:12Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Improving long-read barcode-variant mapping using multiple sequence alignment. "
      },
      "technique": "GitHub_API"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/dunhamlab/PacRAT/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/dunhamlab/PacRAT/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "dunhamlab/PacRAT"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PacBio Read Alignment Tool (PacRAT)"
      },
      "source": "https://raw.githubusercontent.com/dunhamlab/PacRAT/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dunhamlab/PacRAT/master/driver_pacrat.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://user-images.githubusercontent.com/50029049/129951417-ef55a258-e6ba-40c8-8e97-eb1aca1e8d01.png"
      },
      "source": "https://raw.githubusercontent.com/dunhamlab/PacRAT/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9999550206203683,
      "result": {
        "original_header": "Implementation",
        "type": "Text_excerpt",
        "value": "To use, git clone or download and unzip the PacRAT code.  \n`git clone https://github.com/dunhamlab/PacRAT.git`\n \n"
      },
      "source": "https://raw.githubusercontent.com/dunhamlab/PacRAT/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/dunhamlab/PacRAT/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bioinformatics, multiple-sequence-alignment, pacbio"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021 Chiann-Ling C. Yeh, Clara J. Amorosi, Soyeon Showman, Maitreya J. Dunham\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/dunhamlab/PacRAT/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PacRAT"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "dunhamlab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 18830,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 2760,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dunhamlab/PacRAT/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running on UW GS Cluster",
        "parent_header": [
          "PacBio Read Alignment Tool (PacRAT)",
          "Implementation"
        ],
        "type": "Text_excerpt",
        "value": "From the PacRAT directory, run: \n\n`qsub ./driver_pacrat.sh`\n\nto run PacRAT with the example data provided in this repository. To run with different data, update the `driver_pacrat.sh` script with the location of the input and output files, described below. \n"
      },
      "source": "https://raw.githubusercontent.com/dunhamlab/PacRAT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running locally",
        "parent_header": [
          "PacBio Read Alignment Tool (PacRAT)",
          "Implementation"
        ],
        "type": "Text_excerpt",
        "value": "Scripts can run locally, although we recommend using a cluster/job submission system to optimize memory usage. \nTo set up your environment, install [Anaconda](https://docs.conda.io/projects/conda/en/latest/user-guide/install/) and ensure it is working on your computer. Once Anaconda is installed, you should be able to run the `driver_pacrat.sh` script. If you run the Python script on its own (without using the `driver_pacrat.sh` script, be sure to load the environment `conda env create --file pacrat_env.yml` and `conda activate pacrat_env` beforehand to ensure all packages are installed, compatible, and activated.\n\nIn your driver script (you can use `driver_pacrat.sh` to run your program; be sure to comment out the appropriate sections), specify the location of the input files (`--highQual` and `--inputSeqs`), as well as your working directory (`-d`) and output file (`-o`).\n\n**Parameter Descriptions**\n  \n| Option | Description |\n|--------|-------------|\n| **-d**,**--directory**\t| Specify working directory where intermediate and output files will be located |\n| **-o**,**--out** |\tSpecify the name of the final output file  (default = H2B_barcode_variant_map_msa.txt) |\n| **--highQual** | File of barcode-variant association, where the variant is the highest quality read  |\n| **--inputSeqs** | Raw barcode, variant, and quality of sequences |\n| **-c**,**--cutoff** |\tMinimum number of CCS reads needed in order to retain reads associated with specific barcodes (default = 1) |\n| **-t**,**--threshold** |\tMinimum frequency threshold for calling consensus reads (default = 0.6) |\n| **-s**,**--stats**  | Option to generate alignment stats. Currently outputs below_threshold_Ncount.txt, barcodes_below_cutoff.txt files, and ccs_count_per_barcode.txt; see below for details |\n| **-v**,**--verbose** |\tPrint verbose debug output |\n| **--cont** | If program is disrupted or aborts, enabling this feature will allow user to continue with unprocessed reads. Previously processed reads will not be reprocessed |\n| **-r**,**--rmint** | Removes intermediate alignment files |\n\n**Input files:**\n\nThis script requires two input files. The input files for both `--highQual` and `--inputSeqs` file should be tab-delimited file, where the first column is the barcode and the second column is the associated read. You can generate both these files following the pipeline described in the [AssemblyByPacBio repository](https://github.com/shendurelab/AssemblyByPacBio). The `--inputSeqs` file will be generated from the `extractBarcodeInsertPairs_moreQC.py` script, and the `--highQual` file will be generated from the `unifyAssignment.py` script.\n\n**Output files:**\n  * The output file, dictated by the file name you specify for `--out`, is a tab-delimited file, where the first column is the barcode and the second column is the aligned associated read. \n  * The script will also produce a file called `progress_file.txt`. This file is generated when a barcode is finished being processed. If your script is killed in the middle of a run, you can include the `--cont` option the next time you run the driver script, and it will not reprocess barcodes that were already processed in the last run.\n  * The `barcodes_below_cutoff.txt` file lists barcodes that were not processed because they did not meet the read cutoff specified by `--cutoff`, if the `--stats` option is included. You can double check that the script is working properly by adding together the number of barcodes in your output file (from `--out`) and the number of barcodes in the `barcodes_below_cutoff.txt` file. If the `--stats` option is not included, the `barcodes_below_cutoff.txt` file will not be generated.\n  * The `below_threshold_Ncount.txt` file returns the number of barcodes that contained ambiguous sites if the `--stats` option is included. Sites are determined to be ambiguous if nucleotides in the same position do not pass the majority threshold specified by the `--threshold` parameter. If the `--stats` option is not included, the `below_threshold_Ncount.txt` file will not be generated.\n  * The `ccs_count_per_barcode.txt` file returns the number of CCS reads associated with each barcode. File is created if the `--stats` option is included. If the `--stats` option is not included, the `ccs_count_per_barcode.txt` file will not be generated.\n \n **Example input/output files:**\n \n The example input files provided are located in the `input` folder and hold the `--highQual` and `--inputSeqs` files from a subset (1000 barcodes) of the simulated H2B library. These example files run in ~ 1 min on the GS cluster. \n"
      },
      "source": "https://raw.githubusercontent.com/dunhamlab/PacRAT/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 02:07:56",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ]
}