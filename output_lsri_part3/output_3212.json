{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "author": "Li, Yu and Wang, Sheng and Bi, Chongwei and Qiu, Zhaowen and Li, Mo and Gao, Xin",
        "doi": "10.1093/bioinformatics/btz963",
        "format": "bibtex",
        "title": "DeepSimulator1. 5: a more powerful, quicker and lighter simulator for Nanopore sequencing",
        "type": "Text_excerpt",
        "value": "@article{li2020deepsimulator,\n    doi = {10.1093/bioinformatics/btz963},\n    year = {2020},\n    pages = {2578--2580},\n    number = {8},\n    volume = {36},\n    journal = {Bioinformatics},\n    author = {Li, Yu and Wang, Sheng and Bi, Chongwei and Qiu, Zhaowen and Li, Mo and Gao, Xin},\n    title = {DeepSimulator1. 5: a more powerful, quicker and lighter simulator for Nanopore sequencing},\n}"
      },
      "source": "https://raw.githubusercontent.com/lykaust15/DeepSimulator/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Li, Yu and Han, Renmin and Bi, Chongwei and Li, Mo and Wang, Sheng and Gao, Xin",
        "doi": "10.1093/bioinformatics/bty223",
        "format": "bibtex",
        "title": "DeepSimulator: a deep simulator for Nanopore sequencing",
        "type": "Text_excerpt",
        "value": "@article{deepsimulator,\n    doi = {10.1093/bioinformatics/bty223},\n    year = {2018},\n    pages = {2899-2908},\n    number = {17},\n    volume = {34},\n    journal = {Bioinformatics},\n    title = {DeepSimulator: a deep simulator for Nanopore sequencing},\n    author = {Li, Yu and Han, Renmin and Bi, Chongwei and Li, Mo and Wang, Sheng and Gao, Xin},\n}"
      },
      "source": "https://raw.githubusercontent.com/lykaust15/DeepSimulator/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/liyu95/DeepSimulator"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Simulate the signal and read for a given sequence",
        "parent_header": [
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "```\n./deep_simulator.sh -i example/001c577a-a502-43ef-926a-b883f94d157b.true_fasta -n -1\n```\n"
      },
      "source": "https://raw.githubusercontent.com/lykaust15/DeepSimulator/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Run a test to generate simulated signals and reads for a given genome",
        "parent_header": [
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "```\n./deep_simulator.sh -i example/artificial_human_chr22.fasta\n```\n"
      },
      "source": "https://raw.githubusercontent.com/lykaust15/DeepSimulator/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2017-12-07T19:00:14Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-29T03:21:44Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "The first deep learning based Nanopore simulator which can simulate the process of Nanopore sequencing."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.8822883013026231,
      "result": {
        "original_header": "Overview",
        "type": "Text_excerpt",
        "value": "Here we propose a deep learning based simulator, DeepSimulator, to mimic the entire pipeline of Nanopore sequencing. Starting from a given reference genome or assembled contigs, we simulate the electrical current signals by a context-dependent deep learning model, followed by a base-calling procedure to yield simulated reads. This workflow mimics the sequencing procedure more naturally. The thorough experiments performed across four species show that the signals generated by our context-dependent model are more similar to the experimentally obtained signals than the ones generated by the official context-independent pore model. In terms of the simulated reads, we provide a parameter interface to users so that they can obtain the reads with different accuracies ranging from 83 to 97%. The reads generated by the default parameter have almost the same properties as the real data. \n"
      },
      "source": "https://raw.githubusercontent.com/lykaust15/DeepSimulator/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8482636427089766,
      "result": {
        "original_header": "Explanation of the content in the output folder",
        "type": "Text_excerpt",
        "value": "Within the output folder, there are several folders and files. If you run\n```\n./deep_simulator.sh -i example/artificial_human_chr22.fasta\n```\nthen, within the folder 'artificial_human_chr22_DeepSimu/', there are six files: 'processed_genome', 'sampled_read.fasta', 'pass.fastq', 'fail.fastq', 'mapping.paf', and 'accuracy'. There is one folder: 'fast5/'. Let us explain all of them in chronological order. \nAfter receiving the original input genome file, we first perform some essential preprocessing, resulting in the file 'processed_genome'. After that, we run the first module, sampling reads from the processed genome, resulting in 'sampled_read.fasta'. Then, the 'sampled_read.fasta' will go through the pore model, resulting in 'fast5/' folder, where we store the simulated signals in FAST5 file. If option '-O 1' is specified, then we create the 'align/' folder to store the repeat times for each position in each read. If option '-G 1' is specified, then we create the 'signal/' folder to store the simulated signal in txt format for each read. \nAfterward, the 'fast5/' folder can be the input of the base-caller (e.g., we use Guppy_GPU by default). We collect the results from the base-caller into the two file 'pass.fastq' and 'fail.fastq' to record the passed and failed reads. Finally, we check the accuracy using minimap2, whose output is 'mapping.paf'. File 'accuracy' stores the accuracy for later reference.\n \n"
      },
      "source": "https://raw.githubusercontent.com/lykaust15/DeepSimulator/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9978198127435087,
      "result": {
        "original_header": "Advanced",
        "type": "Text_excerpt",
        "value": "*This tool is for academic purposes and research use only. Any commercial use is subject for authorization from King Abdullah University of Science and technology \u201cKAUST\u201d. Please contact us at ip@kaust.edu.sa.*\n \n"
      },
      "source": "https://raw.githubusercontent.com/lykaust15/DeepSimulator/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Download the DeepSimulator package",
        "parent_header": [
          "Install"
        ],
        "type": "Text_excerpt",
        "value": "```\ngit clone https://github.com/lykaust15/DeepSimulator.git\ncd ./DeepSimulator/\n```\n"
      },
      "source": "https://raw.githubusercontent.com/lykaust15/DeepSimulator/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/lykaust15/DeepSimulator/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 40
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/liyu95/DeepSimulator/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "liyu95/DeepSimulator"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Overview"
      },
      "source": "https://raw.githubusercontent.com/lykaust15/DeepSimulator/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lykaust15/DeepSimulator/master/pore_model.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lykaust15/DeepSimulator/master/train_pore_model.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lykaust15/DeepSimulator/master/install.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lykaust15/DeepSimulator/master/case_study.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lykaust15/DeepSimulator/master/deep_simulator.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lykaust15/DeepSimulator/master/readlinkf.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lykaust15/DeepSimulator/master/base_caller/guppy_3.1.5/download_and_install.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lykaust15/DeepSimulator/master/base_caller/albacore_2.3.1/download_and_install.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lykaust15/DeepSimulator/master/pore_model/data/trainingdata_generate.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lykaust15/DeepSimulator/master/pore_model/data/cwDTW_nano_src/install.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/realbigws/DeepSimulator/master/example/main_graph.png"
      },
      "source": "https://raw.githubusercontent.com/lykaust15/DeepSimulator/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lykaust15/DeepSimulator/master/example/simulated_signal.png"
      },
      "source": "https://raw.githubusercontent.com/lykaust15/DeepSimulator/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lykaust15/DeepSimulator/master/example/original_signal.png"
      },
      "source": "https://raw.githubusercontent.com/lykaust15/DeepSimulator/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Install all required modules",
        "parent_header": [
          "Install"
        ],
        "type": "Text_excerpt",
        "value": "```\n./install.sh\n```\n"
      },
      "source": "https://raw.githubusercontent.com/lykaust15/DeepSimulator/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9969608769514032,
      "result": {
        "original_header": "Overview",
        "type": "Text_excerpt",
        "value": "<p align=\"center\">\n<img src=\"https://github.com/realbigws/DeepSimulator/blob/master/example/main_graph.png\" width=\"600\"/>\n</p>\n \n"
      },
      "source": "https://raw.githubusercontent.com/lykaust15/DeepSimulator/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9969608769514032,
      "result": {
        "original_header": "Simulated signal",
        "type": "Text_excerpt",
        "value": "<p align=\"center\">\n<img src=\"https://github.com/lykaust15/DeepSimulator/blob/master/example/simulated_signal.png\" width=\"600\"/>\n</p> \n"
      },
      "source": "https://raw.githubusercontent.com/lykaust15/DeepSimulator/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9969608769514032,
      "result": {
        "original_header": "Original signal",
        "type": "Text_excerpt",
        "value": "<p align=\"center\">\n<img src=\"https://github.com/lykaust15/DeepSimulator/blob/master/example/original_signal.png\" width=\"600\"/>\n</p> \n"
      },
      "source": "https://raw.githubusercontent.com/lykaust15/DeepSimulator/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999800959652445,
      "result": {
        "original_header": "Advanced",
        "type": "Text_excerpt",
        "value": "The above example only uses CPU, which would take years to train a model. To accelerate the training process and take advantage the computational power of GPU, users can consider using the GPU version of Tensorflow. User should make sure the following dependencies are installed correctly before running the training code on a workstation with GPU card. \n1. CUDA (http://docs.nvidia.com/cuda/cuda-installation-guide-linux/#axzz4VZnqTJ2A)\n2. cuDNN (https://developer.nvidia.com/cudnn)\n3. Tensorflow-gpu (https://www.tensorflow.org/install/install_linux) \nUsers can refer to the Tensorflow website (https://www.tensorflow.org/) for more detailed instruction of setting up the environment. \n"
      },
      "source": "https://raw.githubusercontent.com/lykaust15/DeepSimulator/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/liyu95/DeepSimulator/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "deep-learning, nanopore-sequencing, nanopore-simulator"
      },
      "technique": "GitHub_API"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lykaust15/DeepSimulator/master/example/DS_logo.png"
      },
      "source": "https://raw.githubusercontent.com/lykaust15/DeepSimulator/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DeepSimulator"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "liyu95"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 388604,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 66977,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 24866,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 20426,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 3573,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lykaust15/DeepSimulator/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "liyu95",
          "type": "User"
        },
        "date_created": "2019-06-16T18:07:24Z",
        "date_published": "2019-06-16T18:17:55Z",
        "description": "The following things have been updated:\r\n1. Add low-pass filter to the signal processing. \r\n2. Interface optimized: we provided a more easy-to-understand interface and parameter control.\r\n3. Incorporate the Nanopore features released in LC2019.\r\n4. Add the support for Guppy basecaller. Since this version, Guppy will be the default basecaller.\r\n5. Multiprocess control.\r\n6. Memory optimization. There won't be memory problem even simulating a large number of reads.\r\n7. Storage management optimization. There won't be storage problem even simulating a large number of reads.\r\n8. Add the interface to control the average length of the reads, which still satisfies the read length distribution.\r\n9. Add a case_study.sh file, which is more easy-to-understand and shows the three-step pipeline of our tool clearly.\r\n10. Add the option to output signal file in txt format and alignment files.\r\n11. Multiple bugs fixed.",
        "html_url": "https://github.com/liyu95/DeepSimulator/releases/tag/v1.5",
        "name": "DeepSimulator1.5 released. ",
        "release_id": 18023862,
        "tag": "v1.5",
        "tarball_url": "https://api.github.com/repos/liyu95/DeepSimulator/tarball/v1.5",
        "type": "Release",
        "url": "https://api.github.com/repos/liyu95/DeepSimulator/releases/18023862",
        "value": "https://api.github.com/repos/liyu95/DeepSimulator/releases/18023862",
        "zipball_url": "https://api.github.com/repos/liyu95/DeepSimulator/zipball/v1.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "liyu95",
          "type": "User"
        },
        "date_created": "2019-05-06T17:45:02Z",
        "date_published": "2019-06-01T10:43:20Z",
        "description": "The first release of DeepSimulator. After the full testing of DeepSimulator, we will release v1.0. The v2.0 is on the way, which is more convenient and slim.",
        "html_url": "https://github.com/liyu95/DeepSimulator/releases/tag/v0.98",
        "name": "The first release of DeepSimulator",
        "release_id": 17721292,
        "tag": "v0.98",
        "tarball_url": "https://api.github.com/repos/liyu95/DeepSimulator/tarball/v0.98",
        "type": "Release",
        "url": "https://api.github.com/repos/liyu95/DeepSimulator/releases/17721292",
        "value": "https://api.github.com/repos/liyu95/DeepSimulator/releases/17721292",
        "zipball_url": "https://api.github.com/repos/liyu95/DeepSimulator/zipball/v0.98"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Prerequisites",
        "parent_header": [
          "Install"
        ],
        "type": "Text_excerpt",
        "value": "Anaconda2 (https://www.anaconda.com/distribution/) or Minoconda2 (https://conda.io/miniconda.html).\nFor example, users may download and install the following Anaconda2 package:\n```\nwget https://repo.anaconda.com/archive/Anaconda2-2018.12-Linux-x86_64.sh\nbash Anaconda2-2018.12-Linux-x86_64.sh\n```\n"
      },
      "source": "https://raw.githubusercontent.com/lykaust15/DeepSimulator/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Run a test to generate simulated signals and reads for a given genome",
        "parent_header": [
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "```\n./deep_simulator.sh -i example/artificial_human_chr22.fasta\n```\n"
      },
      "source": "https://raw.githubusercontent.com/lykaust15/DeepSimulator/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 11:56:47",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 115
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Case study (case_study.sh file shows the three-step pipeline of our tool clearly)",
        "parent_header": [
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "```\n./case_study.sh -f example/artificial_human_chr22.fasta\n```\n"
      },
      "source": "https://raw.githubusercontent.com/lykaust15/DeepSimulator/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "The main parameters of DeepSimulator.",
        "parent_header": [
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "The main parameters of DeepSimulator can be referred to the Wiki: https://github.com/lykaust15/DeepSimulator/wiki/Parameters-of-DS1.5. Alternatively, the users can use the following command to print out the parameters:\n```\n./deep_simulator.sh\n```\n"
      },
      "source": "https://raw.githubusercontent.com/lykaust15/DeepSimulator/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Context-dependent pore model",
        "parent_header": [
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "```\n./pore_model.sh example/001c577a-a502-43ef-926a-b883f94d157b.true_fasta 0\n```\n"
      },
      "source": "https://raw.githubusercontent.com/lykaust15/DeepSimulator/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Context-independent kmer pore model (using official 6mer)",
        "parent_header": [
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "```\n./pore_model.sh example/001c577a-a502-43ef-926a-b883f94d157b.true_fasta 1\n```\n"
      },
      "source": "https://raw.githubusercontent.com/lykaust15/DeepSimulator/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Case study (case_study.sh file shows the three-step pipeline of our tool clearly)",
        "parent_header": [
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "```\n./case_study.sh -f example/artificial_human_chr22.fasta\n```\n"
      },
      "source": "https://raw.githubusercontent.com/lykaust15/DeepSimulator/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Simple example",
        "parent_header": [
          "Train customized model"
        ],
        "type": "Text_excerpt",
        "value": "Our simulator supports training a pore model using a customized dataset. An simple example, which only used the CPU resource, would be like this:\n```\n./train_pore_model.sh -i example/customerized_data/\n```\nWithin the data folder, there are two kinds of data should be provided. The first kind of data is the sequence, and the second kind of data is the corresponding nanopore raw signal. Users can find an example of each file in the 'customized_data' folder.\nAfter training, an model (three files, named \"model_customized.ckpt\\*\") would be generated in the folder 'pore_model/model'. The user can rename the build-in model (named \"model_reg_seqs_gn179.ckpt\\*\"\") to a backup name and the customized model as \"model_reg_seqs_gn179.ckpt\\*\" (all the three files need to be changed accordingly) so that the user do not have to change the code of simulator to use the customized model.\n\n**Notice**: Generally, we do not recommend user to train a customized pore model because the data preparation and model training are quite time consuming and there might be some unexpected errors because  of the update of Tensorflow and the dependencies, such as CUDA and cuDNN, which notoriously annoying. We would make the model updated to the Nanopore technology development.\n"
      },
      "source": "https://raw.githubusercontent.com/lykaust15/DeepSimulator/master/README.md",
      "technique": "header_analysis"
    }
  ]
}