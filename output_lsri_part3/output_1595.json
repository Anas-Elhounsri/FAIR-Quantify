{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "Example usages"
        ],
        "type": "Text_excerpt",
        "value": "If you use `titan` in your projects, please cite the following:\n\n```bib\n@article{weber2021titan\n    author = {Weber, Anna and Born, Jannis and Rodriguez Martinez, Maria},\n    title = \"{TITAN: T-cell receptor specificity prediction with bimodal attention networks}\",\n    journal = {Bioinformatics},\n    volume = {37},\n    number = {Supplement_1},\n    pages = {i237-i244},\n    year = {2021},\n    month = {07},\n    issn = {1367-4803},\n    doi = {10.1093/bioinformatics/btab294},\n    url = {https://doi.org/10.1093/bioinformatics/btab294}\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/PaccMann/TITAN/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/PaccMann/TITAN"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-03-22T14:39:43Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-01-23T14:43:02Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Code for \"T Cell Receptor Specificity Prediction with Bimodal Attention Networks\" (https://doi.org/10.1093/bioinformatics/btab294, ISMB 2021)"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9495071016594832,
      "result": {
        "original_header": "Data structure",
        "type": "Text_excerpt",
        "value": "For data handling, we make use of the `pytoda` [package](https://github.com/PaccMann/paccmann_datasets).\nIf you bring your own data, it needs to adhere to the following format:\n- `tcrs.csv`        A `.csv` file containing two columns, one for the tcr sequences and one for their IDs.\n- `epitopes.csv`    A `.csv` file containing two columns, one for the epitope sequences and one for their IDs.\n    This can optionally also be a `.smi` file (tab-separated) with the SMILES seuqences of the eptiopes.\n- `train.csv`       A `.csv` file containing three columns, one for TCR IDs, one for epitope IDs and one for the labels. This data is used for training.\n- `test.csv`       A `.csv` file containing three columns, one for TCR IDs, one for epitope IDs and one for the labels. This data is used for testing. \nNOTE: `tcrs.csv` and `epitopes.csv` need to contain **all** TCRs and epitopes used during training and testing. No duplicates in both sequence and IDs are allowed.\nAll data can be found in https://ibm.box.com/v/titan-dataset . \n"
      },
      "source": "https://raw.githubusercontent.com/PaccMann/TITAN/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/PaccMann/TITAN/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/PaccMann/TITAN/main/tutorial/tutorial.ipynb"
      },
      "source": "https://raw.githubusercontent.com/PaccMann/TITAN/main/tutorial/tutorial.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/PaccMann/TITAN/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PaccMann/TITAN"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "TITAN"
      },
      "source": "https://raw.githubusercontent.com/PaccMann/TITAN/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/PaccMann/TITAN/main/tutorial/tutorial_training.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "TITAN"
        ],
        "type": "Text_excerpt",
        "value": "The library itself has few dependencies (see [setup.py](setup.py)) with loose requirements. \n\nCreate a virtual environment and install dependencies\n\n```console\npython -m venv --system-site-packages venv\nsource venv/bin/activate\npip install -r requirements.txt\n```\nInstall in editable mode for development:\n```console\npip install -e .\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/PaccMann/TITAN/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/PaccMann/TITAN/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "compound-protein-interaction, deep-learning, immunology, protein-ligand, tcr-epitope"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Copyright 2021 Anna Weber, Jannis Born\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/PaccMann/TITAN/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "TITAN"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "PaccMann"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 75958,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 74660,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 199,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/PaccMann/TITAN/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Run trained TITAN model on data",
        "parent_header": [
          "Example usages"
        ],
        "type": "Text_excerpt",
        "value": "A trained model is provided in trained_model. The model is pretrained on BindingDB and finetuned using the semifrozen setting, on full TCR sequences and with SMILES encoding of epitopes. All parameters can be found in the parameter files provided. \n\n```console\npython3 scripts/flexible_model_eval.py \\\nname_of_test_data_file.csv \\\npath_to_tcr_file.csv \\\npath_to_epitope_file.smi \\\npath_to_trained_model_folder \\\nbimodal_mca \\\nsave_name\n```\n"
      },
      "source": "https://raw.githubusercontent.com/PaccMann/TITAN/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-06 05:34:03",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 27
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Train a TITAN model",
        "parent_header": [
          "Example usages"
        ],
        "type": "Text_excerpt",
        "value": "The TITAN model uses the architecture published as 'paccmann_predictor' [package](https://github.com/PaccMann/paccmann_predictor). Example parameter files are given in the params folder.\n\n\n```console\npython3 scripts/flexible_training.py \\\nname_of_training_data_files.csv \\\nname_of_testing_data_files.csv \\\npath_to_tcr_file.csv \\\npath_to_epitope_file.csv/.smi \\\npath_to_store_trained_model \\\npath_to_parameter_file \\\ntraining_name \\\nbimodal_mca\n```\n"
      },
      "source": "https://raw.githubusercontent.com/PaccMann/TITAN/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Finetune an existing TITAN model",
        "parent_header": [
          "Example usages"
        ],
        "type": "Text_excerpt",
        "value": "To load a TITAN model after pretraining and finetune it on another dataset, use the `semifrozen_finetuning.py` script. Use the parameter `number_of_tunable_layers` to control the number of layers which will be tuned, the rest will be frozen. Model will freeze epitope input channel first and the final dense layers last. Do not change the input data type (i.e. SMILES or amino acids) between pretraining and finetuning.\n\n\n```console\npython3 scripts/semifrozen_finetuning.py \\\nname_of_training_data_files.csv \\\nname_of_testing_data_files.csv \\\npath_to_tcr_file.csv \\\npath_to_epitope_file.smi \\\npath_to_pretrained_model \\\npath_to_store_model \\\ntraining_name \\\npath_to_parameter_file \\\nbimodal_mca\n```\n"
      },
      "source": "https://raw.githubusercontent.com/PaccMann/TITAN/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Evaluate K-NN baseline on cross validation",
        "parent_header": [
          "Example usages"
        ],
        "type": "Text_excerpt",
        "value": "The script `scripts/knn_cv.py` uses the KNN baseline model of the paper and performs a cross validation.\nThe script can be used in two modes, *shared* and *separate*. *Shared* is the default mode as specified [above](#Data-structure). In *separate* mode, the TCRs and epitope sequences for training and testing dont need to be in the same file, but can be split across two files. To use this mode, simply provide additional paths to `-test_tcr` and `test_ep` arguments.\n\n\n```console\npython3 scripts/knn_cv.py \\\n-d path_to_data_folder \\\n-tr name_of_training_data_files.csv \\\n-te name_of_testing_data_files.csv \\\n-f 10 \\\n-ep path_to_epitope_file.ccsv \\\n-tcr path_to_tcr_file.csv \\\n-r path_to_result_folder \\\n-k 25\n```\ntype `python3 scripts/knn_cv.py -h` for help.\nThe data in `data_folder` needs to be structured as:\n\n```console\ndata_path\n\u251c\u2500\u2500 fold0\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 name_of_training_data_files.csv\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 name_of_testing_data_files.csv\n...\n\u251c\u2500\u2500 fold9\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 name_of_training_data_files.csv\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 name_of_testing_data_files.csv\n```\n"
      },
      "source": "https://raw.githubusercontent.com/PaccMann/TITAN/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Data Handling",
        "parent_header": [
          "Example usages"
        ],
        "type": "Text_excerpt",
        "value": "To generate full sequences of TCRs from CDR3 sequence and V and J segment names, the `cdr3_to_full_seq.py` script can be used. The script relies on the user having downloaded a fasta files containing the Names of V and J segments with their respecive sequences called `V_segment_sequences.fasta` and `J_segment_sequences.fasta`. These can be downloaded from IMGT.org. Header names must be provided to the script to adapt to different format of the input file.\n\n```console\npython3 scripts/cdr3_to_full_seq.py \\\ndirectoy_with_VJ_segment_fasta_files \\\npath_to_file_with_input_sequences.csv \\\nv_seq_header \\\nj_seq_header \\\ncdr3_header \\\npath_to_output_file.csv\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/PaccMann/TITAN/main/README.md",
      "technique": "header_analysis"
    }
  ]
}