{
  "application_domain": [
    {
      "confidence": 83.89,
      "result": {
        "type": "String",
        "value": "Natural Language Processing"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "DNABERT"
        ],
        "type": "Text_excerpt",
        "value": "If you have used DNABERT in your research, please kindly cite the following publications:\n\n```\n@article{ji2021dnabert,\n    author = {Ji, Yanrong and Zhou, Zhihan and Liu, Han and Davuluri, Ramana V},\n    title = \"{DNABERT: pre-trained Bidirectional Encoder Representations from Transformers model for DNA-language in genome}\",\n    journal = {Bioinformatics},\n    volume = {37},\n    number = {15},\n    pages = {2112-2120},\n    year = {2021},\n    month = {02},\n    issn = {1367-4803},\n    doi = {10.1093/bioinformatics/btab083},\n    url = {https://doi.org/10.1093/bioinformatics/btab083},\n    eprint = {https://academic.oup.com/bioinformatics/article-pdf/37/15/2112/50578892/btab083.pdf},\n}\n\n\n@misc{zhou2023dnabert2,\n      title={DNABERT-2: Efficient Foundation Model and Benchmark For Multi-Species Genome}, \n      author={Zhihan Zhou and Yanrong Ji and Weijian Li and Pratik Dutta and Ramana Davuluri and Han Liu},\n      year={2023},\n      eprint={2306.15006},\n      archivePrefix={arXiv},\n      primaryClass={q-bio.GN}\n}\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/jerryji1993/DNABERT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Ji, Yanrong and Zhou, Zhihan and Liu, Han and Davuluri, Ramana V",
        "doi": "10.1093/bioinformatics/btab083",
        "format": "bibtex",
        "title": "{DNABERT: pre-trained Bidirectional Encoder Representations from Transformers model for DNA-language in genome}",
        "type": "Text_excerpt",
        "url": "https://doi.org/10.1093/bioinformatics/btab083",
        "value": "@article{ji2021dnabert,\n    eprint = {https://academic.oup.com/bioinformatics/article-pdf/37/15/2112/50578892/btab083.pdf},\n    url = {https://doi.org/10.1093/bioinformatics/btab083},\n    doi = {10.1093/bioinformatics/btab083},\n    issn = {1367-4803},\n    month = {02},\n    year = {2021},\n    pages = {2112-2120},\n    number = {15},\n    volume = {37},\n    journal = {Bioinformatics},\n    title = {{DNABERT: pre-trained Bidirectional Encoder Representations from Transformers model for DNA-language in genome}},\n    author = {Ji, Yanrong and Zhou, Zhihan and Liu, Han and Davuluri, Ramana V},\n}"
      },
      "source": "https://raw.githubusercontent.com/jerryji1993/DNABERT/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Zhihan Zhou and Yanrong Ji and Weijian Li and Pratik Dutta and Ramana Davuluri and Han Liu",
        "format": "bibtex",
        "title": "DNABERT-2: Efficient Foundation Model and Benchmark For Multi-Species Genome",
        "type": "Text_excerpt",
        "value": "@misc{zhou2023dnabert2,\n    primaryclass = {q-bio.GN},\n    archiveprefix = {arXiv},\n    eprint = {2306.15006},\n    year = {2023},\n    author = {Zhihan Zhou and Yanrong Ji and Weijian Li and Pratik Dutta and Ramana Davuluri and Han Liu},\n    title = {DNABERT-2: Efficient Foundation Model and Benchmark For Multi-Species Genome},\n}"
      },
      "source": "https://raw.githubusercontent.com/jerryji1993/DNABERT/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jerryji1993/DNABERT"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-06-11T14:41:54Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-04T15:31:19Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DNABERT: pre-trained Bidirectional Encoder Representations from Transformers model for DNA-language in genome"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.993593854114373,
      "result": {
        "original_header": "DNABERT",
        "type": "Text_excerpt",
        "value": "This repository includes the implementation of 'DNABERT: pre-trained Bidirectional Encoder Representations from Transformers model for DNA-language in genome'. Please cite our paper if you use the models or codes. The repo is still actively under development, so please kindly report if there is any issue encountered. \n In this package, we provides resources including: source codes of the DNABERT model, usage examples, pre-trained models, fine-tuned models and visulization tool. This package is still under development, as more features will be included gradually. Training of DNABERT consists of general-purposed pre-training and task-specific fine-tuning. As a contribution of our project, we released the pre-trained models in this repository. We extended codes from [huggingface](https://github.com/huggingface/transformers) and adapted them to the DNA scenario.\n \n"
      },
      "source": "https://raw.githubusercontent.com/jerryji1993/DNABERT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9968259350796381,
      "result": {
        "original_header": "Update 2023/06/26",
        "type": "Text_excerpt",
        "value": "The second generation of DNABERT, named [DNABERT-2](https://arxiv.org/abs/2306.15006), is publically available at https://github.com/Zhihan1996/DNABERT_2. DNABERT-2 is trained on multi-species genomes and is more efficient, powerful, and easy to use than its first generation. We also provide simpler usage of DNABERT in the new package. A comprehensive benchmark Genome Understanding Evaluation (GUE), which contains $28$ datasets on $7$ tasks, is also published. Please check out DNABERT-2 if you are interested in our work. Thanks! \n"
      },
      "source": "https://raw.githubusercontent.com/jerryji1993/DNABERT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9732052529047012,
      "result": {
        "original_header": "2.1 Data processing",
        "type": "Text_excerpt",
        "value": "Please see the template data at `/example/sample_data/pre`. If you are trying to pre-train DNABERT with your own data, please process you data into the same format as it. Note that the sequences are in kmer format, so you will need to convert your sequences into that. We also provide a custom function `seq2kmer`in `motif/motif_utils.py` for this conversion. \n"
      },
      "source": "https://raw.githubusercontent.com/jerryji1993/DNABERT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9815281283140371,
      "result": {
        "original_header": "5. Visualization",
        "type": "Text_excerpt",
        "value": "Visualiazation of DNABERT consists of 2 steps. Calcualate attention scores and Plot.\n \n"
      },
      "source": "https://raw.githubusercontent.com/jerryji1993/DNABERT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9775522411145959,
      "result": {
        "original_header": "7. Genomic variants analysis",
        "type": "Text_excerpt",
        "value": "To perform genomic variants analysis (e.g. SNPs), we need to first ensure the predictions for the sequences were generated. Then, create a file (template in `SNP/example_mut_file.txt`) specifying for which sequences in `dev.tsv` and start and end indices where we need to perform the mutation. The first column indicates the index of sequence in `dev.tsv` to be mutated. Second and third columns are the start and end indices while the fourth column is the target of mutation (can be substitution, insertion, deletion, etc.) \nOnce such a file is created, we can perform mutation on the sequences:\n```\ncd ../SNP\npython mutate_seqs.py ./../examples/sample_data/ft/6/dev.tsv ./examples/ --mut_file ./example_mut_file.txt --k 6\n```\nAlternatively, we can choose to leave the `--mut_file` argument blank, where the program would try to perform substitution of all bases to the four possible nucleotides ('A', 'T', 'C', or 'G') for all sequences. This would be useful for plotting a mutation heatmap as included in the paper. **Note that this would be slow if the `dev.tsv` contains a lot of sequences or the input sequences are very long, as the command would try to perform mutation on all possible locations of them**.\n \nThis would save a `mutations.tsv` file under `save_file_dir`, that contains index of original sequence (in original `dev.tsv`), original sequence and predictions, mutated sequence and predictions, as well as the difference score and log odds ratio of the change in every case. \n"
      },
      "source": "https://raw.githubusercontent.com/jerryji1993/DNABERT/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "3.2 Download pre-trained DNABERT",
        "parent_header": [
          "DNABERT",
          "3. Fine-tune (Skip this section if you use fine-tuned model)"
        ],
        "type": "Text_excerpt",
        "value": "[DNABERT3](https://drive.google.com/file/d/1nVBaIoiJpnwQxiz4dSq6Sv9kBKfXhZuM/view?usp=sharing)\n\n[DNABERT4](https://drive.google.com/file/d/1V7CChcC6KgdJ7Gwdyn73OS6dZR_J-Lrs/view?usp=sharing)\n\n[DNABERT5](https://drive.google.com/file/d/1KMqgXYCzrrYD1qxdyNWnmUYPtrhQqRBM/view?usp=sharing)\n\n[DNABERT6](https://drive.google.com/file/d/1BJjqb5Dl2lNMg2warsFQ0-Xvn1xxfFXC/view?usp=sharing)\n\nDownload the pre-trained model in to a directory. (If you would like to replicate the following examples, please download DNABERT 6). Then unzip the package by running:\n\n```\nunzip 6-new-12w-0.zip\n```\n\nWe also provide a model with `KMER=6` that is fine-tuned on the sample dataset for prediction/visulization/motif_analysis. If you use the fine-tuned model instead of fine-tuning a model by your self, please download the fine-tuned and put it under `examples/ft/6`. \n\n[Fine-tuned Model](https://drive.google.com/drive/folders/15wFcukTv3ecPw9_25dcOv-bZmj-8d_-6?usp=sharing)\n\n"
      },
      "source": "https://raw.githubusercontent.com/jerryji1993/DNABERT/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jerryji1993/DNABERT/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 156
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jerryji1993/DNABERT/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "jerryji1993/DNABERT"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DNABERT"
      },
      "source": "https://raw.githubusercontent.com/jerryji1993/DNABERT/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jerryji1993/DNABERT/master/examples/scripts/uce.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jerryji1993/DNABERT/master/examples/scripts/run_mut.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Environment setup",
        "parent_header": [
          "DNABERT"
        ],
        "type": "Text_excerpt",
        "value": "We recommend you to build a python virtual environment with [Anaconda](https://docs.anaconda.com/anaconda/install/linux/). Also, please make sure you have at least one NVIDIA GPU with Linux x86_64 Driver Version >= 410.48 (compatible with CUDA 10.0). We applied distributed training on 8 NVIDIA GeForce RTX 2080 Ti with 11 GB graphic memory, and the batch size corresponds to it. If you use GPU with other specifications and memory sizes, consider adjusting your batch size accordingly.\n"
      },
      "source": "https://raw.githubusercontent.com/jerryji1993/DNABERT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1.1 Create and activate a new virtual environment",
        "parent_header": [
          "DNABERT",
          "1. Environment setup"
        ],
        "type": "Text_excerpt",
        "value": "```\nconda create -n dnabert python=3.6\nconda activate dnabert\n```\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/jerryji1993/DNABERT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1.2 Install the package and other requirements",
        "parent_header": [
          "DNABERT",
          "1. Environment setup"
        ],
        "type": "Text_excerpt",
        "value": "(Required)\n\n```\nconda install pytorch torchvision cudatoolkit=10.0 -c pytorch\n\ngit clone https://github.com/jerryji1993/DNABERT\ncd DNABERT\npython3 -m pip install --editable .\ncd examples\npython3 -m pip install -r requirements.txt\n```\n\n\n\n(Optional, install apex for fp16 training)\n\nchange to a desired directory by `cd PATH_NAME`\n\n```\ngit clone https://github.com/NVIDIA/apex\ncd apex\npip install -v --no-cache-dir --global-option=\"--cpp_ext\" --global-option=\"--cuda_ext\" ./\n```\n\n\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/jerryji1993/DNABERT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1. I cannot start training the model/I have installation issues for the dependencies.",
        "parent_header": [
          "DNABERT",
          "Q&amp;A"
        ],
        "type": "Text_excerpt",
        "value": "Please kindly make sure that you satisfied all system requirements for DNABERT, and that you have a conda environment properly set up. We have recently successfully tested our pipeline on Amazon EC2 Deep Learning AMI (Ubuntu 18.04). As an option, you could compare your system/environment setup with this AMI.\n"
      },
      "source": "https://raw.githubusercontent.com/jerryji1993/DNABERT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999999868728083,
      "result": {
        "original_header": "2.2 Model Training",
        "type": "Text_excerpt",
        "value": "```\ncd examples\n\nexport KMER=6\nexport TRAIN_FILE=sample_data/pre/6_3k.txt\nexport TEST_FILE=sample_data/pre/6_3k.txt\nexport SOURCE=PATH_TO_DNABERT_REPO\nexport OUTPUT_PATH=output$KMER\n\npython run_pretrain.py \\\n    --output_dir $OUTPUT_PATH \\\n    --model_type=dna \\\n    --tokenizer_name=dna$KMER \\\n    --config_name=$SOURCE/src/transformers/dnabert-config/bert-config-$KMER/config.json \\\n    --do_train \\\n    --train_data_file=$TRAIN_FILE \\\n    --do_eval \\\n    --eval_data_file=$TEST_FILE \\\n    --mlm \\\n    --gradient_accumulation_steps 25 \\\n    --per_gpu_train_batch_size 10 \\\n    --per_gpu_eval_batch_size 6 \\\n    --save_steps 500 \\\n    --save_total_limit 20 \\\n    --max_steps 200000 \\\n    --evaluate_during_training \\\n    --logging_steps 500 \\\n    --line_by_line \\\n    --learning_rate 4e-4 \\\n    --block_size 512 \\\n    --adam_epsilon 1e-6 \\\n    --weight_decay 0.01 \\\n    --beta1 0.9 \\\n    --beta2 0.98 \\\n    --mlm_probability 0.025 \\\n    --warmup_steps 10000 \\\n    --overwrite_output_dir \\\n    --n_process 24\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/jerryji1993/DNABERT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9883631646731195,
      "result": {
        "original_header": "5.1 Calculate attention scores",
        "type": "Text_excerpt",
        "value": "Add --fp16 tag if you want to perfrom mixed precision. (You have to install the 'apex' from source first).\n \ncalculate with only one model (For example, DNABERT6)\n```\nexport KMER=6\nexport MODEL_PATH=./ft/$KMER\nexport DATA_PATH=sample_data/ft/$KMER\nexport PREDICTION_PATH=./result/$KMER\n\npython run_finetune.py \\\n    --model_type dna \\\n    --tokenizer_name=dna$KMER \\\n    --model_name_or_path $MODEL_PATH \\\n    --task_name dnaprom \\\n    --do_visualize \\\n    --visualize_data_dir $DATA_PATH \\\n    --visualize_models $KMER \\\n    --data_dir $DATA_PATH \\\n    --max_seq_length 81 \\\n    --per_gpu_pred_batch_size=16   \\\n    --output_dir $MODEL_PATH \\\n    --predict_dir $PREDICTION_PATH \\\n    --n_process 96\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/jerryji1993/DNABERT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9997800656651744,
      "result": {
        "original_header": "6. Motif analysis",
        "type": "Text_excerpt",
        "value": "Once the attention scores are generated, we can proceed further to perform motif analysis using `motif/find_motifs.py`:\n```\ncd ../motif\n\nexport KMER=6\nexport DATA_PATH=../examples/sample_data/ft/$KMER\nexport PREDICTION_PATH=../examples/result/$KMER\nexport MOTIF_PATH=./result/$KMER\n\npython find_motifs.py \\\n    --data_dir $DATA_PATH \\\n    --predict_dir $PREDICTION_PATH \\\n    --window_size 24 \\\n    --min_len 5 \\\n    --pval_cutoff 0.005 \\\n    --min_n_motif 3 \\\n    --align_all_ties \\\n    --save_file_dir $MOTIF_PATH \\\n    --verbose\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/jerryji1993/DNABERT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9970726573434856,
      "result": {
        "original_header": "7. Genomic variants analysis",
        "type": "Text_excerpt",
        "value": "Once such a file is created, we can perform mutation on the sequences:\n```\ncd ../SNP\npython mutate_seqs.py ./../examples/sample_data/ft/6/dev.tsv ./examples/ --mut_file ./example_mut_file.txt --k 6\n```\nAlternatively, we can choose to leave the `--mut_file` argument blank, where the program would try to perform substitution of all bases to the four possible nucleotides ('A', 'T', 'C', or 'G') for all sequences. This would be useful for plotting a mutation heatmap as included in the paper. **Note that this would be slow if the `dev.tsv` contains a lot of sequences or the input sequences are very long, as the command would try to perform mutation on all possible locations of them**.\n \n```\ncd ../SNP\npython mutate_seqs.py ./../examples/sample_data/ft/6/dev.tsv ./examples/ --k 6\n``` \nAfter that, we can again predict on the generated sequences. **Note: if you have insertion/deletions in your `mut_file.txt`, consider changing the `max_seq_length` we use when making predictions.**\n```\nexport KMER=6\nexport MODEL_PATH=../examples/ft/$KMER\nexport DATA_PATH=examples\nexport PREDICTION_PATH=examples\n\npython ../examples/run_finetune.py \\\n    --model_type dna \\\n    --tokenizer_name=dna$KMER \\\n    --model_name_or_path $MODEL_PATH \\\n    --task_name dnaprom \\\n    --do_predict \\\n    --data_dir $DATA_PATH  \\\n    --max_seq_length 75 \\\n    --per_gpu_pred_batch_size=128   \\\n    --output_dir $MODEL_PATH \\\n    --predict_dir $PREDICTION_PATH \\\n    --n_process 48\n```\nThis will again create `pred_results.npy` file under the `$PREDICTION_PATH`. Once we have all the above, we can compute the effect of these mutations by:\n```\npython SNP.py \\\n    --orig_seq_file ../examples/sample_data/ft/6/dev.tsv \\\n    --orig_pred_file ../examples/result/6/pred_results.npy \\\n    --mut_seq_file examples/dev.tsv \\\n    --mut_pred_file examples/pred_results.npy \\\n    --save_file_dir examples\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/jerryji1993/DNABERT/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8504896254884938,
      "result": {
        "original_header": "2.2 Model Training",
        "type": "Text_excerpt",
        "value": "```\ncd examples\n\nexport KMER=6\nexport TRAIN_FILE=sample_data/pre/6_3k.txt\nexport TEST_FILE=sample_data/pre/6_3k.txt\nexport SOURCE=PATH_TO_DNABERT_REPO\nexport OUTPUT_PATH=output$KMER\n\npython run_pretrain.py \\\n    --output_dir $OUTPUT_PATH \\\n    --model_type=dna \\\n    --tokenizer_name=dna$KMER \\\n    --config_name=$SOURCE/src/transformers/dnabert-config/bert-config-$KMER/config.json \\\n    --do_train \\\n    --train_data_file=$TRAIN_FILE \\\n    --do_eval \\\n    --eval_data_file=$TEST_FILE \\\n    --mlm \\\n    --gradient_accumulation_steps 25 \\\n    --per_gpu_train_batch_size 10 \\\n    --per_gpu_eval_batch_size 6 \\\n    --save_steps 500 \\\n    --save_total_limit 20 \\\n    --max_steps 200000 \\\n    --evaluate_during_training \\\n    --logging_steps 500 \\\n    --line_by_line \\\n    --learning_rate 4e-4 \\\n    --block_size 512 \\\n    --adam_epsilon 1e-6 \\\n    --weight_decay 0.01 \\\n    --beta1 0.9 \\\n    --beta2 0.98 \\\n    --mlm_probability 0.025 \\\n    --warmup_steps 10000 \\\n    --overwrite_output_dir \\\n    --n_process 24\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/jerryji1993/DNABERT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8610938077504662,
      "result": {
        "original_header": "4. Prediction",
        "type": "Text_excerpt",
        "value": "After the model is fine-tuned, we can get predictions by running\n```$\nexport KMER=6\nexport MODEL_PATH=./ft/$KMER\nexport DATA_PATH=sample_data/ft/$KMER\nexport PREDICTION_PATH=./result/$KMER\n\npython run_finetune.py \\\n    --model_type dna \\\n    --tokenizer_name=dna$KMER \\\n    --model_name_or_path $MODEL_PATH \\\n    --task_name dnaprom \\\n    --do_predict \\\n    --data_dir $DATA_PATH  \\\n    --max_seq_length 75 \\\n    --per_gpu_pred_batch_size=128   \\\n    --output_dir $MODEL_PATH \\\n    --predict_dir $PREDICTION_PATH \\\n    --n_process 48\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/jerryji1993/DNABERT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8835576875390136,
      "result": {
        "original_header": "5.1 Calculate attention scores",
        "type": "Text_excerpt",
        "value": "calculate with only one model (For example, DNABERT6)\n```\nexport KMER=6\nexport MODEL_PATH=./ft/$KMER\nexport DATA_PATH=sample_data/ft/$KMER\nexport PREDICTION_PATH=./result/$KMER\n\npython run_finetune.py \\\n    --model_type dna \\\n    --tokenizer_name=dna$KMER \\\n    --model_name_or_path $MODEL_PATH \\\n    --task_name dnaprom \\\n    --do_visualize \\\n    --visualize_data_dir $DATA_PATH \\\n    --visualize_models $KMER \\\n    --data_dir $DATA_PATH \\\n    --max_seq_length 81 \\\n    --per_gpu_pred_batch_size=16   \\\n    --output_dir $MODEL_PATH \\\n    --predict_dir $PREDICTION_PATH \\\n    --n_process 96\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/jerryji1993/DNABERT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8640628040666877,
      "result": {
        "original_header": "6. Motif analysis",
        "type": "Text_excerpt",
        "value": "Once the attention scores are generated, we can proceed further to perform motif analysis using `motif/find_motifs.py`:\n```\ncd ../motif\n\nexport KMER=6\nexport DATA_PATH=../examples/sample_data/ft/$KMER\nexport PREDICTION_PATH=../examples/result/$KMER\nexport MOTIF_PATH=./result/$KMER\n\npython find_motifs.py \\\n    --data_dir $DATA_PATH \\\n    --predict_dir $PREDICTION_PATH \\\n    --window_size 24 \\\n    --min_len 5 \\\n    --pval_cutoff 0.005 \\\n    --min_n_motif 3 \\\n    --align_all_ties \\\n    --save_file_dir $MOTIF_PATH \\\n    --verbose\n```\n \nThe script will generate a .txt file and a weblogo .png file for each motif under `MOTIF_PATH`.\n \n"
      },
      "source": "https://raw.githubusercontent.com/jerryji1993/DNABERT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9008473648963036,
      "result": {
        "original_header": "7. Genomic variants analysis",
        "type": "Text_excerpt",
        "value": "```\ncd ../SNP\npython mutate_seqs.py ./../examples/sample_data/ft/6/dev.tsv ./examples/ --k 6\n``` \nAfter that, we can again predict on the generated sequences. **Note: if you have insertion/deletions in your `mut_file.txt`, consider changing the `max_seq_length` we use when making predictions.**\n```\nexport KMER=6\nexport MODEL_PATH=../examples/ft/$KMER\nexport DATA_PATH=examples\nexport PREDICTION_PATH=examples\n\npython ../examples/run_finetune.py \\\n    --model_type dna \\\n    --tokenizer_name=dna$KMER \\\n    --model_name_or_path $MODEL_PATH \\\n    --task_name dnaprom \\\n    --do_predict \\\n    --data_dir $DATA_PATH  \\\n    --max_seq_length 75 \\\n    --per_gpu_pred_batch_size=128   \\\n    --output_dir $MODEL_PATH \\\n    --predict_dir $PREDICTION_PATH \\\n    --n_process 48\n```\nThis will again create `pred_results.npy` file under the `$PREDICTION_PATH`. Once we have all the above, we can compute the effect of these mutations by:\n```\npython SNP.py \\\n    --orig_seq_file ../examples/sample_data/ft/6/dev.tsv \\\n    --orig_pred_file ../examples/result/6/pred_results.npy \\\n    --mut_seq_file examples/dev.tsv \\\n    --mut_pred_file examples/pred_results.npy \\\n    --save_file_dir examples\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/jerryji1993/DNABERT/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jerryji1993/DNABERT/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "deep-learning, dnabert-model, genome, gpu, kmer, kmer-format, machine-learning, natural-language-processing, nlp, sequence"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Apache License 2.0",
        "spdx_id": "Apache-2.0",
        "type": "License",
        "url": "https://api.github.com/licenses/apache-2.0",
        "value": "https://api.github.com/licenses/apache-2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
      },
      "source": "https://raw.githubusercontent.com/jerryji1993/DNABERT/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DNABERT"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "jerryji1993"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 2102113,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jerryji1993/DNABERT/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_papers": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/2306.15006"
      },
      "source": "https://raw.githubusercontent.com/jerryji1993/DNABERT/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "1.2 Install the package and other requirements",
        "parent_header": [
          "DNABERT",
          "1. Environment setup"
        ],
        "type": "Text_excerpt",
        "value": "(Required)\n\n```\nconda install pytorch torchvision cudatoolkit=10.0 -c pytorch\n\ngit clone https://github.com/jerryji1993/DNABERT\ncd DNABERT\npython3 -m pip install --editable .\ncd examples\npython3 -m pip install -r requirements.txt\n```\n\n\n\n(Optional, install apex for fp16 training)\n\nchange to a desired directory by `cd PATH_NAME`\n\n```\ngit clone https://github.com/NVIDIA/apex\ncd apex\npip install -v --no-cache-dir --global-option=\"--cpp_ext\" --global-option=\"--cuda_ext\" ./\n```\n\n\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/jerryji1993/DNABERT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1. I cannot start training the model/I have installation issues for the dependencies.",
        "parent_header": [
          "DNABERT",
          "Q&amp;A"
        ],
        "type": "Text_excerpt",
        "value": "Please kindly make sure that you satisfied all system requirements for DNABERT, and that you have a conda environment properly set up. We have recently successfully tested our pipeline on Amazon EC2 Deep Learning AMI (Ubuntu 18.04). As an option, you could compare your system/environment setup with this AMI.\n"
      },
      "source": "https://raw.githubusercontent.com/jerryji1993/DNABERT/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 09:16:39",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 577
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "3.1 Data processing",
        "parent_header": [
          "DNABERT",
          "3. Fine-tune (Skip this section if you use fine-tuned model)"
        ],
        "type": "Text_excerpt",
        "value": "Please see the template data at `/example/sample_data/ft/`. If you are trying to fine-tune DNABERT with your own data, please process you data into the same format as it. Note that the sequences are in kmer format, so you will need to convert your sequences into that. We also provide a custom function `seq2kmer`in `motif/motif_utils.py` for this conversion.\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/jerryji1993/DNABERT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.3 Fine-tune with pre-trained model",
        "parent_header": [
          "DNABERT",
          "3. Fine-tune (Skip this section if you use fine-tuned model)"
        ],
        "type": "Text_excerpt",
        "value": "In the following example,  we use DNABERT with kmer=6 as example. We use `prom-core`, a 2-class classification task as example.\n\n```\ncd examples\n\nexport KMER=6\nexport MODEL_PATH=PATH_TO_THE_PRETRAINED_MODEL\nexport DATA_PATH=sample_data/ft/$KMER\nexport OUTPUT_PATH=./ft/$KMER\n\npython run_finetune.py \\\n    --model_type dna \\\n    --tokenizer_name=dna$KMER \\\n    --model_name_or_path $MODEL_PATH \\\n    --task_name dnaprom \\\n    --do_train \\\n    --do_eval \\\n    --data_dir $DATA_PATH \\\n    --max_seq_length 100 \\\n    --per_gpu_eval_batch_size=32   \\\n    --per_gpu_train_batch_size=32   \\\n    --learning_rate 2e-4 \\\n    --num_train_epochs 5.0 \\\n    --output_dir $OUTPUT_PATH \\\n    --evaluate_during_training \\\n    --logging_steps 100 \\\n    --save_steps 4000 \\\n    --warmup_percent 0.1 \\\n    --hidden_dropout_prob 0.1 \\\n    --overwrite_output \\\n    --weight_decay 0.01 \\\n    --n_process 8\n```\n\nAdd --fp16 tag if you want to perfrom mixed precision. (You have to install the 'apex' from source first).\n\nWe also provide a model with `KMER=6` that is fine-tuned on the sample dataset for prediction/visulization/motif_analysis. If you use the fine-tuned model instead of fine-tuning a model by your self, please download the fine-tuned and put it under `examples/ft/6`. \n\n[Fine-tuned Model](https://drive.google.com/drive/folders/15wFcukTv3ecPw9_25dcOv-bZmj-8d_-6?usp=sharing)\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/jerryji1993/DNABERT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1. I cannot start training the model/I have installation issues for the dependencies.",
        "parent_header": [
          "DNABERT",
          "Q&amp;A"
        ],
        "type": "Text_excerpt",
        "value": "Please kindly make sure that you satisfied all system requirements for DNABERT, and that you have a conda environment properly set up. We have recently successfully tested our pipeline on Amazon EC2 Deep Learning AMI (Ubuntu 18.04). As an option, you could compare your system/environment setup with this AMI.\n"
      },
      "source": "https://raw.githubusercontent.com/jerryji1993/DNABERT/master/README.md",
      "technique": "header_analysis"
    }
  ]
}