{
  "acknowledgement": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Acknowledgements",
        "parent_header": [
          "sysSVM2"
        ],
        "type": "Text_excerpt",
        "value": "Hrvoje Misetic\\\nChristopher Yau\\\nThanos Mourikis\\\nDamjan Temelkovski\n\n"
      },
      "source": "https://raw.githubusercontent.com/ciccalab/sysSVM2/dev/README.md",
      "technique": "header_analysis"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Reference",
        "parent_header": [
          "sysSVM2"
        ],
        "type": "Text_excerpt",
        "value": "1. B. Shoelkopf, J. Platt, J. Shawe-Taylor, A. Smola and R. Williamson. Estimating the support of a high-dimensional distribution. *Neural Comput.* **13** (2001). \n2. K. Wang, M. Li, H. Hakonarson. ANNOVAR: Functional annotation of genetic variants from next-generation sequencing data. *Nucleic Acids Research* **38** (2010). [Webpage](https://doc-openbio.readthedocs.io/projects/annovar/en/latest/)\n\n[//]: # (end list)\n\n"
      },
      "source": "https://raw.githubusercontent.com/ciccalab/sysSVM2/dev/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ciccalab/sysSVM2"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-09-01T13:22:28Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-27T13:15:03Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "New version of sysSVM, for pan-cancer use"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Description",
        "parent_header": [
          "sysSVM2"
        ],
        "type": "Text_excerpt",
        "value": "sysSMV2 is a computational tool for patient-specific cancer driver gene prioritisation. It is based on the principle that driver genes are characterised by particular molecular properties (*e.g.* mutations, copy number variants) and systems-level properties (*e.g.* evolutionary origin, breadth of expression). It works by identifying genes with similar properties to canonical drivers, using a one-class Support Vector Machine framework<sup>1</sup>.\n\\\n\\\nModels that have been trained on data from TCGA are available to download from the appropriate [directory](trained_models). For smaller TCGA cohorts (N <200 samples), we recommend using the model trained on pan-cancer data. \n\\\n\\\nUsers may also train their own sysSVM2 models. \n"
      },
      "source": "https://raw.githubusercontent.com/ciccalab/sysSVM2/dev/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9922768141072537,
      "result": {
        "original_header": "Download/installation",
        "type": "Text_excerpt",
        "value": "To download sysSVM2, clone this repository. sysSVM2 is implemented in R. In this guide, we assume that the user's working directory corresponds to a clone of this repository.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ciccalab/sysSVM2/dev/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9580353999340547,
      "result": {
        "original_header": "Training a new sysSVM2 model",
        "type": "Text_excerpt",
        "value": "Training sysSVM2 requires a cohort of cancer samples. There are four broad steps to the algorithm: \n1. **Feature mapping**: identify the molecular and systems-level properties of damaged genes in the cohort; mark canonical drivers as a training set\n1. **Model selection**: tune SVM parameters to optimise performance, based on the sensitivity on the training set. This step can also be skipped if you want to use the default kernel parameters.\n1. **Training**: train the model with the selected parameters\n1. **Prediction**: predict on new samples/genes, assigning a score to each. If necessary, extract a list of the canonical drivers in each sample, 'topped up' with the highest-scoring predictions from the algorithm. \nIn this guide, we assume that the user's working directory corresponds to a clone of this repository. We also assume that results are output to a directory called ```~/test_sysSVM2```.  \n"
      },
      "source": "https://raw.githubusercontent.com/ciccalab/sysSVM2/dev/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9460451503245999,
      "result": {
        "original_header": "1. Feature mapping",
        "type": "Text_excerpt",
        "value": "To complete the feature mapping of the cohort, the systems-level properties of the genes are also required. A compendium of 25 of these properties, each of which distinguish cancer genes from the rest of human genes, is provided: \n```\nsystemsLevel_data = read_tsv(\"example_data/systemsLevel_features_allGenes.tsv\")\n``` \nFinally, join the two tables to create the sysSVM2 input file: \nBASH13* \n"
      },
      "source": "https://raw.githubusercontent.com/ciccalab/sysSVM2/dev/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8174591070639294,
      "result": {
        "original_header": "3. Training",
        "type": "Text_excerpt",
        "value": "After model selection, the entire training set is used to train the final sysSVM2 model:\n```\ntrained_sysSVM2 = train_sysSVM2(model_parameters = model_selection$best_model_final, \n                                training_set = sysSVM_data$training_set, \n                                scaling_factors = sysSVM_data$scaling_factors,\n                                output_dir = \"~/test_sysSVM2\")\n```\nIf you want to use the default SVM parameters learned from simulated pan-cancer data, simply do not provide a BASH2* argument. \n"
      },
      "source": "https://raw.githubusercontent.com/ciccalab/sysSVM2/dev/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9811739856822586,
      "result": {
        "original_header": "4. Prediction",
        "type": "Text_excerpt",
        "value": "The trained model can now be used to make predictions, either on the same cohort or on new samples. To use the prediction set from the same cohort used for training:\n```\npredictions = predict_sysSVM2(trained_sysSVM, \n                              prediction_set = sysSVM_data$prediction_set, \n                              prediction_set_ns = sysSVM_data$prediction_set_ns, \n                              output_dir = \"~/test_sysSVM2\")\n```\nThe output is a ranked list of damaged genes in each patient, with high scores/ranks corresponding to putative driver genes. Using the above code, it will also be saved in a file called BASH2*.\n\\\nIt may be desirable to extract a list of predicted drivers in each sample, rather than a scored/rankded list of all damaged genes. This can be achieved using a 'top-up' procedure, in which (1) all canonical drivers are considered to be predicted drivers, and (2) the highest-scored predictions from sysSVM2 are used to top up the predictions in each sample, up to a specified minimum number of genes per sample. In this example, we can obtain lists of at least five predicted drivers per sample as follows:\nBASH3*\nThe output will be saved in a file called BASH4*. \n"
      },
      "source": "https://raw.githubusercontent.com/ciccalab/sysSVM2/dev/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ciccalab/sysSVM2/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ciccalab/sysSVM2/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ciccalab/sysSVM2"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "sysSVM2"
      },
      "source": "https://raw.githubusercontent.com/ciccalab/sysSVM2/dev/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9994334103255818,
      "result": {
        "original_header": "Download/installation",
        "type": "Text_excerpt",
        "value": "To download sysSVM2, clone this repository. sysSVM2 is implemented in R. In this guide, we assume that the user's working directory corresponds to a clone of this repository.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ciccalab/sysSVM2/dev/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.98838066391758,
      "result": {
        "original_header": "Training a new sysSVM2 model",
        "type": "Text_excerpt",
        "value": "In this guide, we assume that the user's working directory corresponds to a clone of this repository. We also assume that results are output to a directory called ```~/test_sysSVM2```.  \n"
      },
      "source": "https://raw.githubusercontent.com/ciccalab/sysSVM2/dev/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ciccalab/sysSVM2/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "sysSVM2"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "ciccalab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 108989,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ciccalab/sysSVM2/dev/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://doc-openbio.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/ciccalab/sysSVM2/dev/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://bedtools.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/ciccalab/sysSVM2/dev/README.md",
      "technique": "regular_expression"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running a pre-trained sysSVM2 model on your data",
        "parent_header": [
          "sysSVM2"
        ],
        "type": "Text_excerpt",
        "value": "If you have your own data and want to predict driver genes without training a new model, there are two steps:\n1. **Data annotation**: sysSVM2 requires mutation and copy number data in a particular format\n1. **Prediction**: use one of the [pre-trained models](trained_models) to identify drivers in individual samples.\n[//]: # (end list)\n"
      },
      "source": "https://raw.githubusercontent.com/ciccalab/sysSVM2/dev/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Data annotation",
        "parent_header": [
          "sysSVM2",
          "Running a pre-trained sysSVM2 model on your data"
        ],
        "type": "Text_excerpt",
        "value": "sysSVM2 uses somatic mutation and CNV data summarised at the gene-level (molecular properties). These gene-level summaries can be produced from standard variant call file formats using the annotation functions provided in this repository. In R, first source these functions:\n```\nsource(\"R/annotation_functions.R\")\n```\nAnnotation of small somatic mutations (SSMs, *i.e.* SNVs and indels) requires [ANNOVAR](https://doc-openbio.readthedocs.io/projects/annovar/en/latest/) to be installed. A single-sample VCF file (aligned to  hg19 in this example) can be converted to annotated SSMs as follows:\n```\nssms_annotated = annotate_ssms(\n  vcf_fn, sample = \"my_sample\", annovar_dir, \n  genome_version = \"hg19\", \n  gene_aliases_entrez = \"annotation_reference_files/gene_aliases_entrez.tsv\", \n  hotspots = \"annotation_reference_files/tcga_pancancer_hotspots_oncodriveclust.tsv\"\n)\n```\nNote that, by default, mutation hotspots identified in TCGA pan-cancer data are mapped to SSMs in order to identify gain-of-function mutations.\n\\\n\\\nAnnotation of CNV segments requires [bedtools](https://bedtools.readthedocs.io/en/latest/) to be installed. If available, sample ploidy values can be used to filter copy number gains. To intersect CNV segments with gene coordinates and identify gene gains and losses, run the following:\n```\ncnvs_annotated = annotate_cnvs(\n  cnv_segments, bedtools_bin_dir,\n  ploidy, \n  gene_coords = \"annotation_reference_files/gene_coords_hg19.tsv\"\n)\n```\nFinally, the annotated SSMs and CNVs can be combined into a unified format for sysSVM2:\n```\nmolecular_data = make_totalTable(\n  ssms_annotated, cnvs_annotated, \n  canonical_drivers = \"example_data/canonical_drivers.rds\"\n)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ciccalab/sysSVM2/dev/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Prediction",
        "parent_header": [
          "sysSVM2",
          "Running a pre-trained sysSVM2 model on your data"
        ],
        "type": "Text_excerpt",
        "value": "A pre-trained model can now be used to make predictions on your annotated data. First, load one of the provided pre-trained models. For example, the model trained on pan-cancer data:\n```\ntrained_sysSVM = readRDS(\"trained_models/PANCAN_trained_sysSVM.rds\")\n```\nTo run an example without annotating variant call data, you can use the provided (annotated) small cohort:\n```\nmolecular_data = read_tsv(\"example_data/molecular_features_100samples.tsv\")\n```\nThen simply run the trained model on the annotated data:\n```\npredictions = predict_sysSVM2(\n  trained_sysSVM, \n  molecular_data = molecular_data, \n  systemsLevel_data = \"example_data/systemsLevel_features_allGenes.tsv\"\n)\n```\nThe output is a ranked list of damaged genes in each patient, with high scores/ranks corresponding to putative driver genes. You can 'top up' the canonical driver genes using the highest-ranked sysSVM2 predictions, e.g. to a minimum of five drivers per patient, by running:\n```\ndrivers_toppedUp = topUp_drivers(\n  gene_scores = predictions,\n  canonical_drivers = \"example_data/canonical_drivers.rds\",\n  n_drivers_per_sample = 5\n)\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/ciccalab/sysSVM2/dev/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 12:19:19",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ]
}