{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "8. Citations",
        "parent_header": [
          "MitoHiFi"
        ],
        "type": "Text_excerpt",
        "value": "When using MitoHiFi, please cite our preprint: \n\nMitoHiFi: a python pipeline for mitochondrial genome assembly from PacBio High Fidelity reads\nMarcela Uliano-Silva, Jo\u00e3o Gabriel R. N. Ferreira, Ksenia Krasheninnikova, Darwin Tree of Life Consortium, Giulio Formenti, Linelle Abueg, James Torrance, Eugene W. Myers, Richard Durbin, Mark Blaxter, Shane A. McCarthy\nbioRxiv 2022.12.23.521667; doi: https://doi.org/10.1101/2022.12.23.521667\n \nand\n\nPlease cite MitoFinder if you use the default annotation tool:\n\n- Allio, R, Schomaker\u2010Bastos, A, Romiguier, J, Prosdocimi, F, Nabholz, B, Delsuc, F. MitoFinder: Efficient automated large\u2010scale extraction of mitogenomic data in target enrichment phylogenomics. Mol Ecol Resour. 2020; 00: 1\u2013 14. https://doi.org/10.1111/1755-0998.13160\n\nor MITOS:\n- M. Bernt, A. Donath, F. J\u00fchling, F. Externbrink, C. Florentz, G. Fritzsch, J. P\u00fctz, M. Middendorf, P. F. Stadler MITOS: Improved de novo Metazoan Mitochondrial Genome Annotation Molecular Phylogenetics and Evolution 2013, 69(2):313-319. \n\nAnd for tRNAs annotation:\n\n- Laslett, D., & Canb\u00e4ck, B. (2008). ARWEN: a program to detect tRNA genes in metazoan mitochondrial nucleotide sequences. Bioinformatics, 24(2), 172-175.\n\n-------------------\n \n For more information on python code and pipeline: mu2@sanger.ac.uk and jf18@sanger.ac.uk\n \n Questions about the Docker container: Marcela Uliano-Silva mu2@sanger.ac.uk\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/marcelauliano/MitoHiFi/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/marcelauliano/MitoHiFi"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-08-18T14:19:33Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-20T08:55:35Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Find, circularise and annotate mitogenome from PacBio assemblies"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9513485758655418,
      "result": {
        "original_header": "MitoHiFi",
        "type": "Text_excerpt",
        "value": "------ This is v3.2.2 ------ \nMitoHiFi v3.2.2 is a python pipeline distributed under [MIT License](LICENSE) ! \n\nMitoHiFi was first developed to assemble the mitogenomes for a wide range of species in the Darwin Tree of Life Project (DToL)  \n"
      },
      "source": "https://raw.githubusercontent.com/marcelauliano/MitoHiFi/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9413203634379231,
      "result": {
        "original_header": "1. Background",
        "type": "Text_excerpt",
        "value": "**MitoHiFi is a python workflow that assembles mitogenomes from Pacbio HiFi reads.** \nWith MitoHiFi v3.2 you can start from the raw Pacbio HiFi reads (flag **-r**) or from the assembled contigs (flag **-c**). You also need a reference mitochondria sequence in FASTA and [GenBank format](https://www.ncbi.nlm.nih.gov/Sitemap/samplerecord.html). We provide an internal script (findMitoReference.py) that can be used to find and download the most closely-related reference genome for your species from NCBI.. \n*The availability of high-quality long reads, such as PacBio HiFi, greatly simplifies the assembly of accurate mitogenomes. However, due to the circular nature of the molecule, mitogenomes are typically assembled redundantly, resulting in multicopy mitogenome contigs. To address this, we have developed a pipeline specifically designed to finalize the assembly and the annotation of the mitogenome. Our pipeline takes into account heteroplasmy, aiming to assemble and annotate all mtDNA variants present in your sample. Among these variants, MitoHiFi selects a representative as the final genome assembly based on several criteria including circularization and gene completeness. Additionally, MitoHiFi provides multiple intermediate outputs such as coverage and annotation plots and a multiple sequence alignment (MSA) of all the variants, which facilitates the analysis of mitochondrial heteroplasmy.* \n(ii) Identify and separate NUMTS (Nuclear Mitochondrial DNA Sequences) from genuine mitogenome contigs. \n(iii) Generate a circularized, non-redundant, and annotated version of all mitochondrial variants present in your sample. \n(v) Plot an annotation image and a coverage plot of the reads (if initiated with the -r flag). \nYou can view a diagram illustrating the general MitoHiFi workflow [here](./docs/Figure1.png). For documentation on the behaviour of each script visit [here](./docs/scripts_documentation.pdf).  \n"
      },
      "source": "https://raw.githubusercontent.com/marcelauliano/MitoHiFi/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9878204556047735,
      "result": {
        "original_header": "3. Parameter list",
        "type": "Text_excerpt",
        "value": "```\nusage: MitoHiFi [-h] (-r <reads>.fasta | -c <contigs>.fasta) -f\n                <relatedMito>.fasta -g <relatedMito>.gbk -t <THREADS> [-d]\n                [-a {animal,plant,fungi}] [-p <PERC>] [-m <BLOOM FILTER>]\n                [--max-read-len MAX_READ_LEN] [--mitos]\n                [--circular-size CIRCULAR_SIZE]\n                [--circular-offset CIRCULAR_OFFSET] [-winSize WINSIZE]\n                [-covMap COVMAP] [-v] [-o <GENETIC CODE>]\n\nrequired arguments:\n  -r <reads>.fasta      -r: Pacbio Hifi Reads from your species\n  -c <contigs>.fasta    -c: Assembled fasta contigs/scaffolds to be searched\n                        to find mitogenome\n  -f <relatedMito>.fasta\n                        -f: Close-related Mitogenome is fasta format\n  -g <relatedMito>.gbk  -k: Close-related species Mitogenome in genebank\n                        format\n  -t <THREADS>          -t: Number of threads for (i) hifiasm and (ii) the\n                        blast search\n\noptional arguments:\n  -d                    -d: debug mode to output additional info on log\n  -a {animal,plant,fungi}\n                        -a: Choose between animal (default) or plant\n  -p <PERC>             -p: Percentage of query in the blast match with close-\n                        related mito\n  -m <BLOOM FILTER>     -m: Number of bits for HiFiasm bloom filter [it maps\n                        to -f in HiFiasm] (default = 0)\n  --max-read-len MAX_READ_LEN\n                        Maximum lenght of read relative to related mito\n                        (default = 1.0x related mito length)\n  --mitos               Use MITOS2 for annotation (opposed to default\n                        MitoFinder\n  --circular-size CIRCULAR_SIZE\n                        Size to consider when checking for circularization\n  --circular-offset CIRCULAR_OFFSET\n                        Offset from start and finish to consider when looking\n                        for circularization\n  -winSize WINSIZE      Size of windows to calculate coverage over the\n                        final_mitogenom\n  -covMap COVMAP        Minimum mapping quality to filter reads when building\n                        final coverage plot\n  -v, --version         show program's version number and exit\n  -o <GENETIC CODE>     -o: Organism genetic code following NCBI table (for\n                        mitogenome annotation): 1. The Standard Code 2. The\n                        Vertebrate MitochondrialCode 3. The Yeast\n                        Mitochondrial Code 4. The Mold,Protozoan, and\n                        Coelenterate Mitochondrial Code and the\n                        Mycoplasma/Spiroplasma Code 5. The Invertebrate\n                        Mitochondrial Code 6. The Ciliate, Dasycladacean and\n                        Hexamita Nuclear Code 9. The Echinoderm and Flatworm\n                        Mitochondrial Code 10. The Euplotid Nuclear Code 11.\n                        The Bacterial, Archaeal and Plant Plastid Code 12. The\n                        Alternative Yeast Nuclear Code 13. The Ascidian\n                        Mitochondrial Code 14. The Alternative Flatworm\n                        Mitochondrial Code 16. Chlorophycean Mitochondrial\n                        Code 21. Trematode Mitochondrial Code 22. Scenedesmus\n                        obliquus Mitochondrial Code 23. Thraustochytrium\n                        Mitochondrial Code 24. Pterobranchia Mitochondrial\n                        Code 25. Candidate Division SR1 and Gracilibacteria\n                        Code\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/marcelauliano/MitoHiFi/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9479840643322158,
      "result": {
        "original_header": "5.1 Main Outputs",
        "type": "Text_excerpt",
        "value": "MitoHifi will produce a series of folders with the results. The main results will be in your working folder and they are:\n- **final_mitogenome.fasta** - the final mitochondria circularized and rotated to start at tRNA-Phe\n- **final_mitogenome.gb** - the final mitochondria annotated in GenBank format.  \n- **final_mitogenome.coverage.png** - the sequencing coverage throughout the final mitogenome  \n- **final_mitogenome.annotation.png** - the predicted genes throughout the final mitogenome\n- **contigs_annotations.png** - annotation plots for all potential contigs\n- **coverage_plot.png** - reads coverage plot of filtered reads mapped to all potential contigs\n- **contigs_stats.tsv** - containing the statistics of your assembled mitos such as the number of genes, size, whether it was circularized or not, if the sequence has frameshifts and etc...\n- **shared_genes.tsv** - show comparison of annotation between close-related mitogenome and all potential contigs assembled\n \n"
      },
      "source": "https://raw.githubusercontent.com/marcelauliano/MitoHiFi/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9474742921345506,
      "result": {
        "original_header": "5.2 Further outputs",
        "type": "Text_excerpt",
        "value": "    - qseqid - the ID of your input contigs\n    - %q_in_match - a percentage of the length of your contig in a blast match with the close related species reference\n    - leng_query - length of your contig\n    - s_length - lenght of the close-related mitogenome given\n    - perc - how much percente the leng_query is in relation to s_length\n \n* Folder **contigs_circularization** will contain files related to the circularization of the mito contigs. The most important file is  \n  - all_contigs.circularisationCheck.txt - describes the points of circularization for all contigs. The script is run iteratively until no more circularizatin is found, which will happen when you meet (*False, -1, -1*). The columns are: the contig id, if it circularises or not (*True* or *False*), start coordinate of circularisation, end coordinate of circularisation. \n  - all_mitogenomes.rotated.aligned.fa - this is an aligment of all the mithocondrial sequences assembled by the pipeline. It is possible you will find heteroplasmy in your sample, in which case you will have more than one version of the final mito presented. The pipeline chooses a final representative by a majority rule, using cdhit-est to cluster sequenvces at a 80% identitty and chosing the largest one in that cluster as the final. If you want to study heteroplasmy of your sample, please investigate the *all_mitogenomes.rotated.aligned.fa* file further, and all the results in the **potential_contigs** folder. \n\n* Folder **coverage_mapping** will contain bam files for a quick inspection on IGV-like softwares, the most important are:  \n  - HiFi-vs-final_mitogenome.sorted.bam - contains mapping information of filtered HiFi reads against the final mitogenome \n  - HiFi-vs-potential_contigs.sorted.bam - contains mapping information of HiFi reads against all potential contigs \n  - gbk.HiFiMapped.bam.fasta - all reads that mapped to the closely-related mito\n  - gbk.HiFiMapped.bam.filtered.fasta - mapped reads filtered by size. We remove any reads that are larger than the size of the close-related mito (or as specified by **--max-read-len** ) as a rough way to filter out numpts\n  - hifiasm.contigs.fasta - final hifiasm primary and alternate contigs concatenated. This is the file used to find your mitos.\n \n"
      },
      "source": "https://raw.githubusercontent.com/marcelauliano/MitoHiFi/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9213281375875397,
      "result": {
        "original_header": "6. New parameter for plants!!",
        "type": "Text_excerpt",
        "value": "MitoHiFi is still not optmized to assemble a plant mitochondria or chloroplast. But if you have a contig you consider to be one of those, you can use MitoHiFi with the flag **-c** to finalize your organelle! It will circularize (if that is the case) and annotate, and output statistics for you. To do this, you need to use the parameter **-a plant** when calling the main script mitohifi.py . \nAlso, the script findMitoReference.py can now search for a chloroplast instead of a mitochondria. Use flag **-t chloroplast** \n \n"
      },
      "source": "https://raw.githubusercontent.com/marcelauliano/MitoHiFi/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9973621224461621,
      "result": {
        "original_header": "7.1 (-p)",
        "type": "Text_excerpt",
        "value": "Mitohifi is going to pull possible mito contigs by blasting your contigs with the closely-related mito reference genome. The Default parameter **-p** is going to chose any contig which has 50% or more of its length in the blast match. This is the default because with invertebrate taxa from the Darwin Tree of Life project we have been seeing that the repetitive portion of the mitogenomes is not very conserved between some taxa. In these cases, a more stringent **-p** ends up excluding real mito sequences. Nevertheless, if you are working with more conserved taxa - such as mammals and other vertebrates - use higher **-p** (such as 80 or 90) for better results.\n \n"
      },
      "source": "https://raw.githubusercontent.com/marcelauliano/MitoHiFi/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/marcelauliano/MitoHiFi/tree/master/docs"
      },
      "technique": "file_exploration"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/marcelauliano/MitoHiFi/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 27
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/marcelauliano/MitoHiFi/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "marcelauliano/MitoHiFi"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MitoHiFi"
      },
      "source": "https://raw.githubusercontent.com/marcelauliano/MitoHiFi/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/marcelauliano/MitoHiFi/master/environment/base/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/marcelauliano/MitoHiFi/master/environment/base/Dockerfile",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/marcelauliano/MitoHiFi/master/environment/code/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/marcelauliano/MitoHiFi/master/environment/code/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/marcelauliano/MitoHiFi/master/scripts_paper/run_MitoHiFi_funghi.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/marcelauliano/MitoHiFi/master/scripts_paper/runMitoHiFi_default.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/marcelauliano/MitoHiFi/master/environment/base/mitofinder_wrapper.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/marcelauliano/MitoHiFi/master/environment/base/mitos_wrapper.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Installation",
        "parent_header": [
          "MitoHiFi"
        ],
        "type": "Text_excerpt",
        "value": "Below, we describe the three different ways to install MitoHiFi.\n"
      },
      "source": "https://raw.githubusercontent.com/marcelauliano/MitoHiFi/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2.1 Using Docker and Singularity",
        "parent_header": [
          "MitoHiFi",
          "2. Installation"
        ],
        "type": "Text_excerpt",
        "value": "We provide a Docker container for MitoHiFi. The container is built using GitHub Actions and can be obtained by running the following command:\n\n```\ndocker pull ghcr.io/marcelauliano/mitohifi:master\n```\n\nOnce the container is pulled, you can execute MitoHiFi within [Docker](https://docs.sylabs.io/guides/2.6/user-guide/singularity_and_docker.html). If Docker is not available on your cluster computer, you can use Singularity instead. Different environments may require slightly different Singularity parameters, but a generic Singularity command would be as follows:\n\n```\nsingularity exec --bind /path/to/container_directory:/path/to/container_directory docker://ghcr.io/marcelauliano/mitohifi:master mitohifi.py -h\n```\n"
      },
      "source": "https://raw.githubusercontent.com/marcelauliano/MitoHiFi/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2.2 Conda: Partially Installing Dependencies with Conda",
        "parent_header": [
          "MitoHiFi",
          "2. Installation"
        ],
        "type": "Text_excerpt",
        "value": "We are unable to create a complete Conda recipe for MitoHiFi due to conflicting Python versions required by different dependencies, making it impossible to coexist within the same Conda environment. However, we provide a partial Conda recipe that installs most of the dependencies. To complete the installation, follow these steps:\n\n1. Install MitoFinder and/or MITOS outside of Conda.\n2. Ensure MitoFinder and/or MITOS are added to the PATH before starting the run.\nPlease note that MitoFinder and/or MITOS should be installed separately and made accessible via the PATH environment variable to ensure their proper integration with MitoHiFi. Once those are installed, do:\n```\n#Clone MitoHiFi git repo\ngit clone https://github.com/marcelauliano/MitoHiFi.git\n\n#create a conda environment with our yml file that is inside MitoHiFi/environment\nconda env create -n mitohifi_env -f MitoHiFi/environment/mitohifi_env.yml \n```\n\nAdd MitoFinder and/or MITOS to the PATH and then activate your mitohifi_env conda environment.\n\nTo run MitoHiFi, do:\n\n```\n(mitohifi_env) python MitoHiFi/src/mitohifi.py -h\n```\n"
      },
      "source": "https://raw.githubusercontent.com/marcelauliano/MitoHiFi/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2.3 Manually install all dependencies",
        "parent_header": [
          "MitoHiFi",
          "2. Installation"
        ],
        "type": "Text_excerpt",
        "value": "This is the least recommended way to install MitoHiFi, but below you will find a list of software that needs to be installed and added to your PATH before installing MitoHiFi. The software versions provided are the latest ones we have tested and confirmed to be working:\n\n  - python=3.7\n  - samtools=1.11\n  - cd-hit=4.8.1\n  - minimap2=2.19\n  - hifiasm=0.19.5\n  - mafft=7.520\n  - biopython=1.79\n  - matplotlib=3.2.2\n  - dna_features_viewer=3.1.2\n  - pandas=1.3.5\n  - bedtools=2.31.0\n  - pillow=6.2.1\n  - bcbio-gff=0.7.0\n  - MitoFinder=v1.4.0\n  - MITOS=2.1.0\n  - ncbi-blast+\n\nOnce all dependencies are installed and in your PATH, git clone MitoHiFi and execute it:\n\n```\ngit clone https://github.com/marcelauliano/MitoHiFi.git\npython MitoHiFi/src/mitohifi.py -h\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/marcelauliano/MitoHiFi/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9984723888103628,
      "result": {
        "original_header": "1. Background",
        "type": "Text_excerpt",
        "value": "With MitoHiFi v3.2 you can start from the raw Pacbio HiFi reads (flag **-r**) or from the assembled contigs (flag **-c**). You also need a reference mitochondria sequence in FASTA and [GenBank format](https://www.ncbi.nlm.nih.gov/Sitemap/samplerecord.html). We provide an internal script (findMitoReference.py) that can be used to find and download the most closely-related reference genome for your species from NCBI.. \n"
      },
      "source": "https://raw.githubusercontent.com/marcelauliano/MitoHiFi/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.980022066734462,
      "result": {
        "original_header": "5.2 Further outputs",
        "type": "Text_excerpt",
        "value": "* Folder **contigs_filtering** will contain three outputs:\n \n  - parsed_blast.txt \n  - parsed_blast_all.txt\n  - contigs_ids.txt\n  - contigs.blastn - outfmt 6 blast output plus 2 extra columns containing respectively length_of_query and length_of_subject \n \nColumns descriptions of <b>parsed_blast.txt</b> and <b>parsed_blast_all.txt</b>: tab separated files with 4 columns as follows \n* Folder **final_mitogenome_choice** will contain a few files, the most important one is \n* If you run the pipeline with flag **-r** you will have a further folder called **reads_mapping_and_assembly** which will contain \n"
      },
      "source": "https://raw.githubusercontent.com/marcelauliano/MitoHiFi/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9744203808223271,
      "result": {
        "original_header": "6. New parameter for plants!!",
        "type": "Text_excerpt",
        "value": "MitoHiFi is still not optmized to assemble a plant mitochondria or chloroplast. But if you have a contig you consider to be one of those, you can use MitoHiFi with the flag **-c** to finalize your organelle! It will circularize (if that is the case) and annotate, and output statistics for you. To do this, you need to use the parameter **-a plant** when calling the main script mitohifi.py . \nAlso, the script findMitoReference.py can now search for a chloroplast instead of a mitochondria. Use flag **-t chloroplast** \n \n"
      },
      "source": "https://raw.githubusercontent.com/marcelauliano/MitoHiFi/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9977637623151177,
      "result": {
        "original_header": "9. Watch a lecture on MitoHiFi",
        "type": "Text_excerpt",
        "value": "Want to know everything about how to run MitoHiFi for animals, funghi and plants? Why the pipeline stops sometimes? Caveats and best practices? Have a watch here: https://youtube.com/watch?v=1NWHC2zkRmg  \n"
      },
      "source": "https://raw.githubusercontent.com/marcelauliano/MitoHiFi/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/marcelauliano/MitoHiFi/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n \nCopyright (c) [year] Genome Research Ltd.\n \nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n \nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n \nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/marcelauliano/MitoHiFi/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/marcelauliano/MitoHiFi/master/./docs/dtol-logo-round-300x132.png"
      },
      "source": "https://raw.githubusercontent.com/marcelauliano/MitoHiFi/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MitoHiFi"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "marcelauliano"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 164577,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 5235,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 3094,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/marcelauliano/MitoHiFi/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "marcelauliano",
          "type": "User"
        },
        "date_created": "2024-03-18T16:25:26Z",
        "date_published": "2024-03-19T07:52:56Z",
        "description": "1-) mitohifi.py No longer modify input contig file when fixing headers\r\n2-) findMitoReference.py: Updated mito reference script to accept the ncbi api key",
        "html_url": "https://github.com/marcelauliano/MitoHiFi/releases/tag/v3.2.2",
        "name": "MitoHiFi_v3.2.2",
        "release_id": 147183818,
        "tag": "v3.2.2",
        "tarball_url": "https://api.github.com/repos/marcelauliano/MitoHiFi/tarball/v3.2.2",
        "type": "Release",
        "url": "https://api.github.com/repos/marcelauliano/MitoHiFi/releases/147183818",
        "value": "https://api.github.com/repos/marcelauliano/MitoHiFi/releases/147183818",
        "zipball_url": "https://api.github.com/repos/marcelauliano/MitoHiFi/zipball/v3.2.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "marcelauliano",
          "type": "User"
        },
        "date_created": "2024-01-23T11:25:19Z",
        "date_published": "2024-01-23T13:14:32Z",
        "description": "1-) When using flag -a funghi, accept contigs larger than reference used, as done for plants.\r\n2-) No extra code change, just changed how to represent contigs_stats.tsv. Now the second line of the file presents the final_mitogenome stats again, but if its original name(contig id). And if MitoHiFi is ran from Hicanu contigs, contigs_stats.tsv will show if the contigs were Hicanu linear or circular by attaching a \"l\" or \"c\" to the contig name. Nothing on the True of False logic was changed.",
        "html_url": "https://github.com/marcelauliano/MitoHiFi/releases/tag/v3.2.1",
        "name": "MitoHiFi_v3.2.1",
        "release_id": 138145238,
        "tag": "v3.2.1",
        "tarball_url": "https://api.github.com/repos/marcelauliano/MitoHiFi/tarball/v3.2.1",
        "type": "Release",
        "url": "https://api.github.com/repos/marcelauliano/MitoHiFi/releases/138145238",
        "value": "https://api.github.com/repos/marcelauliano/MitoHiFi/releases/138145238",
        "zipball_url": "https://api.github.com/repos/marcelauliano/MitoHiFi/zipball/v3.2.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "marcelauliano",
          "type": "User"
        },
        "date_created": "2023-05-10T13:09:06Z",
        "date_published": "2023-05-10T13:34:09Z",
        "description": "MitoHiFi_v3.2: (i) fixed --mitos run bug on Docker container by calling to install specifically mitos v2.1.0 on Dockerfile recipe, (ii) structured MitoHiFi code in folders (src, tests..), (iii) created a base Docker image and a code Docker image to update code Docker and build it quicker without needing to install all the dependencies each time, (iv) implemented a integration test to make sure changes on the code don't alter end results, (v) included a badge \"passing\" for integration test.",
        "html_url": "https://github.com/marcelauliano/MitoHiFi/releases/tag/v3.2",
        "name": "MitoHiFi_v3.2",
        "release_id": 102495828,
        "tag": "v3.2",
        "tarball_url": "https://api.github.com/repos/marcelauliano/MitoHiFi/tarball/v3.2",
        "type": "Release",
        "url": "https://api.github.com/repos/marcelauliano/MitoHiFi/releases/102495828",
        "value": "https://api.github.com/repos/marcelauliano/MitoHiFi/releases/102495828",
        "zipball_url": "https://api.github.com/repos/marcelauliano/MitoHiFi/zipball/v3.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "marcelauliano",
          "type": "User"
        },
        "date_created": "2023-04-04T09:03:31Z",
        "date_published": "2023-04-05T08:17:48Z",
        "description": "MitoHiFi current release (v3.01). Run within a singularity container or install each dependency. All that is included on v2.2 plus (i) flag --mitos for annotation to be run with MITOS instead of MitoFinder, (ii) shared_genes.tsv file showing comparisons of genes annotated in relation to genes on reference genome, (iii) plots gene annotations for final mito and all potential contigs, (iv) plots coverage mapping, (v) outputs mapped files to be upload to IGV to the folder coverage_mapping, (vi) cdhit allows clustering of large sequences with MAX_SEQ=10000000.\r\n\r\n  ",
        "html_url": "https://github.com/marcelauliano/MitoHiFi/releases/tag/v3.01",
        "name": "MitoHiFi_v3.01",
        "release_id": 98154021,
        "tag": "v3.01",
        "tarball_url": "https://api.github.com/repos/marcelauliano/MitoHiFi/tarball/v3.01",
        "type": "Release",
        "url": "https://api.github.com/repos/marcelauliano/MitoHiFi/releases/98154021",
        "value": "https://api.github.com/repos/marcelauliano/MitoHiFi/releases/98154021",
        "zipball_url": "https://api.github.com/repos/marcelauliano/MitoHiFi/zipball/v3.01"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "marcelauliano",
          "type": "User"
        },
        "date_created": "2022-05-03T09:18:21Z",
        "date_published": "2022-05-03T09:30:59Z",
        "description": "MitoHiFi current release. Run within a singularity container or install each dependency. It uses the latest version of Hifiasm 0.16.1-r375 and the output contigs_stats.tsv gives you more detailed statistics. It's possible to use this release to circularise, rotate and annotate plant mitochondrion or chloroplast using the flat -a plant (and the flag -t chloroplast for the script findMitoreference.py).",
        "html_url": "https://github.com/marcelauliano/MitoHiFi/releases/tag/v2.2",
        "name": "MitoHiFi_v2.2",
        "release_id": 65213053,
        "tag": "v2.2",
        "tarball_url": "https://api.github.com/repos/marcelauliano/MitoHiFi/tarball/v2.2",
        "type": "Release",
        "url": "https://api.github.com/repos/marcelauliano/MitoHiFi/releases/65213053",
        "value": "https://api.github.com/repos/marcelauliano/MitoHiFi/releases/65213053",
        "zipball_url": "https://api.github.com/repos/marcelauliano/MitoHiFi/zipball/v2.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "marcelauliano",
          "type": "User"
        },
        "date_created": "2022-04-12T13:28:39Z",
        "date_published": "2022-04-12T13:30:25Z",
        "description": "Dockerfile to create a singularity image for MitoHiFi version 2.1. ATTENTION: This is NOT the most updated version of MitoHiFi. Please go to the master branch and download the latest one there.",
        "html_url": "https://github.com/marcelauliano/MitoHiFi/releases/tag/v2.1",
        "name": "MitoHiFi_v2.1",
        "release_id": 64243648,
        "tag": "v2.1",
        "tarball_url": "https://api.github.com/repos/marcelauliano/MitoHiFi/tarball/v2.1",
        "type": "Release",
        "url": "https://api.github.com/repos/marcelauliano/MitoHiFi/releases/64243648",
        "value": "https://api.github.com/repos/marcelauliano/MitoHiFi/releases/64243648",
        "zipball_url": "https://api.github.com/repos/marcelauliano/MitoHiFi/zipball/v2.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "marcelauliano",
          "type": "User"
        },
        "date_created": "2021-06-10T10:15:35Z",
        "date_published": "2021-08-16T10:31:54Z",
        "description": "MitoHifi v1 is based in python and bash. Strongly recommend users to go for v2 as it is much more stable and has many more functionalities. ",
        "html_url": "https://github.com/marcelauliano/MitoHiFi/releases/tag/v1.0",
        "name": "MitoHiFi_v1",
        "release_id": 47899779,
        "tag": "v1.0",
        "tarball_url": "https://api.github.com/repos/marcelauliano/MitoHiFi/tarball/v1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/marcelauliano/MitoHiFi/releases/47899779",
        "value": "https://api.github.com/repos/marcelauliano/MitoHiFi/releases/47899779",
        "zipball_url": "https://api.github.com/repos/marcelauliano/MitoHiFi/zipball/v1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "marcelauliano",
          "type": "User"
        },
        "date_created": "2021-06-01T09:28:59Z",
        "date_published": "2021-08-16T11:57:45Z",
        "description": "MitoHiFi current release. Run within a singularity container or install each dependency.",
        "html_url": "https://github.com/marcelauliano/MitoHiFi/releases/tag/v2.0",
        "name": "MitoHiFi_v2.0",
        "release_id": 47904261,
        "tag": "v2.0",
        "tarball_url": "https://api.github.com/repos/marcelauliano/MitoHiFi/tarball/v2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/marcelauliano/MitoHiFi/releases/47904261",
        "value": "https://api.github.com/repos/marcelauliano/MitoHiFi/releases/47904261",
        "zipball_url": "https://api.github.com/repos/marcelauliano/MitoHiFi/zipball/v2.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "2.2 Conda: Partially Installing Dependencies with Conda",
        "parent_header": [
          "MitoHiFi",
          "2. Installation"
        ],
        "type": "Text_excerpt",
        "value": "We are unable to create a complete Conda recipe for MitoHiFi due to conflicting Python versions required by different dependencies, making it impossible to coexist within the same Conda environment. However, we provide a partial Conda recipe that installs most of the dependencies. To complete the installation, follow these steps:\n\n1. Install MitoFinder and/or MITOS outside of Conda.\n2. Ensure MitoFinder and/or MITOS are added to the PATH before starting the run.\nPlease note that MitoFinder and/or MITOS should be installed separately and made accessible via the PATH environment variable to ensure their proper integration with MitoHiFi. Once those are installed, do:\n```\n#Clone MitoHiFi git repo\ngit clone https://github.com/marcelauliano/MitoHiFi.git\n\n#create a conda environment with our yml file that is inside MitoHiFi/environment\nconda env create -n mitohifi_env -f MitoHiFi/environment/mitohifi_env.yml \n```\n\nAdd MitoFinder and/or MITOS to the PATH and then activate your mitohifi_env conda environment.\n\nTo run MitoHiFi, do:\n\n```\n(mitohifi_env) python MitoHiFi/src/mitohifi.py -h\n```\n"
      },
      "source": "https://raw.githubusercontent.com/marcelauliano/MitoHiFi/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2.3 Manually install all dependencies",
        "parent_header": [
          "MitoHiFi",
          "2. Installation"
        ],
        "type": "Text_excerpt",
        "value": "This is the least recommended way to install MitoHiFi, but below you will find a list of software that needs to be installed and added to your PATH before installing MitoHiFi. The software versions provided are the latest ones we have tested and confirmed to be working:\n\n  - python=3.7\n  - samtools=1.11\n  - cd-hit=4.8.1\n  - minimap2=2.19\n  - hifiasm=0.19.5\n  - mafft=7.520\n  - biopython=1.79\n  - matplotlib=3.2.2\n  - dna_features_viewer=3.1.2\n  - pandas=1.3.5\n  - bedtools=2.31.0\n  - pillow=6.2.1\n  - bcbio-gff=0.7.0\n  - MitoFinder=v1.4.0\n  - MITOS=2.1.0\n  - ncbi-blast+\n\nOnce all dependencies are installed and in your PATH, git clone MitoHiFi and execute it:\n\n```\ngit clone https://github.com/marcelauliano/MitoHiFi.git\npython MitoHiFi/src/mitohifi.py -h\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/marcelauliano/MitoHiFi/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "4. Running MitoHiFi with the test data",
        "parent_header": [
          "MitoHiFi"
        ],
        "type": "Text_excerpt",
        "value": "To run MitoHiFi, you first need a closely related mitochondrial sequence in both FASTA and GenBank formats. We provide a script that can assist you in retrieving this data from the NCBI database. When provided with the species name you are assembling, the script will search for the nearest available mitochondrial assembly on NCBI. By default, the script looks for an exact match of the species for an available mitochondrial assembly. If an exact match is not found, it continues the search for a phylogenetically close candidate based on NCBI taxonomy.\n"
      },
      "source": "https://raw.githubusercontent.com/marcelauliano/MitoHiFi/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4.1 Running MitoHiFi with test dataset starting from reads (-r)",
        "parent_header": [
          "MitoHiFi",
          "4. Running MitoHiFi with the test data"
        ],
        "type": "Text_excerpt",
        "value": "Using the file ilDeiPorc1.reads.100.fa in our test data as an input example, you would do:\n\n```\nfindMitoReference.py --species \"Deilephila porcellus\" --outfolder /path/to/outputdir --min_length 14000\n```\nThis command will download OQ694980.1.fasta and OQ694980.1.gb that you should use for flags **-f** and **-g** in the main pipeline. Attention: once the NCBI is updated with more mitogenomes, findMitoReference.py might download something else. \n\nNow run MitoHiFi with 4 CPUs (change -t to change CPU numbers):\n\n```\npython mitohifi.py -r MitoHiFi/tests/ilDeiPorc1.reads.100.fa -f OQ694980.1.fasta -g OQ694980.1.gb -t 4 -o 5 \n```\n"
      },
      "source": "https://raw.githubusercontent.com/marcelauliano/MitoHiFi/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4.1 Running MitoHiFi with test dataset starting from contigs (-c)",
        "parent_header": [
          "MitoHiFi",
          "4. Running MitoHiFi with the test data"
        ],
        "type": "Text_excerpt",
        "value": "To test starting from contigs, you are going to use the file MitoHiFi/test/ilPhaBuce1_contig.fa . For that, first you need to download a reference close to that species. For that, do:\n\n```\nfindMitoReference.py --species \"Phalera bucephala\" --outfolder /path/to/outputdir --min_length 14000\n```\n\nOnce the close reference is downloaded, run MitoHiFi:\n\n```\npython mitohifi.py -c MitoHiFi/tests/ilPhaBuce1_contig.fa -f NC_072273.1.fasta -g NC_072273.1.fasta -t 4 -o 5 \n```\n\n "
      },
      "source": "https://raw.githubusercontent.com/marcelauliano/MitoHiFi/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "7.2. Annotation run with MITOS",
        "parent_header": [
          "MitoHiFi",
          "7. Important parameter to change and test"
        ],
        "type": "Text_excerpt",
        "value": "The default annotator for MitoHiFi is MitoFinder, but the user can annotate with MITOS by flagging **--mitos** while starting a MitoHiFi run.\n"
      },
      "source": "https://raw.githubusercontent.com/marcelauliano/MitoHiFi/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-05 23:42:23",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 168
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "4.1 Running MitoHiFi with test dataset starting from reads (-r)",
        "parent_header": [
          "MitoHiFi",
          "4. Running MitoHiFi with the test data"
        ],
        "type": "Text_excerpt",
        "value": "Using the file ilDeiPorc1.reads.100.fa in our test data as an input example, you would do:\n\n```\nfindMitoReference.py --species \"Deilephila porcellus\" --outfolder /path/to/outputdir --min_length 14000\n```\nThis command will download OQ694980.1.fasta and OQ694980.1.gb that you should use for flags **-f** and **-g** in the main pipeline. Attention: once the NCBI is updated with more mitogenomes, findMitoReference.py might download something else. \n\nNow run MitoHiFi with 4 CPUs (change -t to change CPU numbers):\n\n```\npython mitohifi.py -r MitoHiFi/tests/ilDeiPorc1.reads.100.fa -f OQ694980.1.fasta -g OQ694980.1.gb -t 4 -o 5 \n```\n"
      },
      "source": "https://raw.githubusercontent.com/marcelauliano/MitoHiFi/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4.1 Running MitoHiFi with test dataset starting from contigs (-c)",
        "parent_header": [
          "MitoHiFi",
          "4. Running MitoHiFi with the test data"
        ],
        "type": "Text_excerpt",
        "value": "To test starting from contigs, you are going to use the file MitoHiFi/test/ilPhaBuce1_contig.fa . For that, first you need to download a reference close to that species. For that, do:\n\n```\nfindMitoReference.py --species \"Phalera bucephala\" --outfolder /path/to/outputdir --min_length 14000\n```\n\nOnce the close reference is downloaded, run MitoHiFi:\n\n```\npython mitohifi.py -c MitoHiFi/tests/ilPhaBuce1_contig.fa -f NC_072273.1.fasta -g NC_072273.1.fasta -t 4 -o 5 \n```\n\n "
      },
      "source": "https://raw.githubusercontent.com/marcelauliano/MitoHiFi/master/README.md",
      "technique": "header_analysis"
    }
  ]
}