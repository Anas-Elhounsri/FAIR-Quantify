{
  "application_domain": [
    {
      "confidence": 42.02,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/grev-uv/hpg-dhunter"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact",
        "parent_header": [
          "HPG-Dhunter"
        ],
        "type": "Text_excerpt",
        "value": "Contact any of the following developers for any enquiry:\n- Juanma Ordu\u00f1a (juan.orduna@uv.es). \n- Mariano P\u00e9rez (mariano.perez@uv.es). \n- Lisardo Fern\u00e1ndez (lisardo.fernandez@uv.es). \n"
      },
      "source": "https://raw.githubusercontent.com/grev-uv/hpg-dhunter/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-06-13T08:50:13Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-07-09T10:47:18Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A real-time DNA methylation visualizer based on Discrete Wavelet Transform (DWT) analyzer as a Differentially Methylated Regions (DMRs) finder"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9790459567911685,
      "result": {
        "original_header": "HPG-Dhunter",
        "type": "Text_excerpt",
        "value": "If you want to use this tool just now, there is an executable file for Linux x86_64 systems. This compressed file is available at [releases page](../../releases). But, previously, CUDA and Nvidia drivers must be installed in your system. For that, you can go to System requirements section \n**HPG-Dhunter** is an interactive tool for detecting Differentially Methylathed Regions (DMRs) and  visualizing DNA methylation signals. It is based on building a methylation signal from the information yielded by HPG-HMapper, and using a NVidia GPU and the CUDA programming model to compute the Discrete Wavelet Transform (DWT) of this methylation signal. The transformation of the signals in turn allows the comparison of different signals at low resolution levels, easily identifying DMRs with a low workload, when compared to other strategies. **HPG-Dhunter** is part of the **HPG-MSuite**.\n \n"
      },
      "source": "https://raw.githubusercontent.com/grev-uv/hpg-dhunter/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9573521725872819,
      "result": {
        "original_header": "Handling",
        "type": "Text_excerpt",
        "value": "**HPG-Dhunter** shows a user interface (UI) whose design has been developed according to the indications of the INCLIVA researchers in genome biology team. HPG-Dhunter background has been developed from the research about the use of wavelet transform over the methylated files treated like a signal as you can read in this [paper](https://link.springer.com/article/10.1007%2Fs11227-018-2670-5) and this [paper](https://bmcbioinformatics.biomedcentral.com/articles/10.1186/s12859-020-03634-y). \nThe visualization and DMR detection process follows a pipeline that begins selecting the cases and control files. After that, the ratio between the methylated coverage and the total coverage over each chromosome position is calculated and upload to the global memory of the GPU device. With all the data at the GPU, it is possible to draw the wavelet transform signal and to find the DMRs in real-time. \nThis is the UI:\n![](images/numeracion_interface_v4.png) \nwhere:\n1. Display area of the methylated signal at the selected region.\n2. Shows:\n   - Pointer position inside the chromosome selected region.\n   - Maximum coverage per sample at the pointer position zone.\n3. Displacement of the selected region displaying the new signal region\n4. Modify the width of the displayed signal (number of displayed positions)\n5. Select the kind of signal to analyze (mC / hmC)\n6. Select the direction to analyze (forward and/or reverse).\n7. Select the chromosome to analyze.\n8. Select the chromosome to analyze by number (if the number is bigger than 25).\n9. Open the batch DMR finder.\n10. Application message.\n11. List of selected files to analyze and display\n  - cold colors (blue) for cases files.\n  - hot colors (red) for control files.\n12. Shows the number of DMRs found.\n13. List of DMRs identified with:\n  - initial position .\n  - end position.\n  - the closest gen name1.\n  - the closest gen name2.\n  - distance to the nearest gen.\n  - \u2018+\u2019 number of positions from the beginning of the gen.\n  - \u2018-\u2019 number of positions until the beginning of the gen.\n  - \u2018++\u2019 number of positions from the end of the gen until the begining of the DMR.\n  - \u2018--\u2019 number of positions from the end of the DMR until the begining of the gen.\n  - shows about \u2018hipo\u2019methylation or \u2018hyper\u2019methylation of the controls against the cases.\n14. List of data from each sample of the DMR selected in 13\n  - number of detected position at sequencing process.\n  - minimum, mean and maximum coverage.\n  - number of positions with C, no C, mC y hmC.\n  - minimum, mean and maximum distance between positions.\n15. Filter of detected DMRs, selecting only the areas with one or more position inside the nearest gen region (select \u2018+\u2019 and \u2018-\u2019, discard \u2018++\u2019 y \u2018--\u2019).\n16. Load the selected files to the RAM of PC computing the ratios and coverages.\n17. Load the computed data to the GPU global memory, previously filtered by the minimum coverage of dial 22.\n18. Find the DMRs filtered by the threshold of dial 19 and the wavelet transform level of dial 20.\n19. Dial to select the threshold for DMR detection.\n20. Dial to select the wavelet transform level for signal comparison at DMR detection.\n21. Open the file explorer to select folder and file name to save the DMRs founded.\n22. Dial to select the minimum coverage of signal.\n23. Select directly the minimum coverage of signal.\n24. Fine width modification of displayed signal\n25. Positions of the gen and display\n  - lowest gen position of the samples.\n  - left position of displayed signal (hand selectable).\n  - number of gen position displayed.\n  - right position of displayed gen (hand selectable)\n  - highest gen position of the samples.\n26. Slider to select the level wavelet transformation of the visualized signal (by the number of positions per region).\n27. Dial to select the minimum ratio of methylated positions by region. \n28. Open directory browser to select the directory of each sample.\n29. Delete the selected file.\n30. Climb one position the selected file.\n31. Low one position the selected file\n32. Select the chromosome of reference \nIf the left mouse button is clicked and released over a position in the displayed signal, a new tab is open at the default web navigator addressing the url https://grch37.ensembl.org/Homo_sapiens/Location_with_the_clicked_position_(\u00b1 500 positions) \n"
      },
      "source": "https://raw.githubusercontent.com/grev-uv/hpg-dhunter/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8968438686486033,
      "result": {
        "original_header": "Build",
        "type": "Text_excerpt",
        "value": "The way to build HPG-Dhunter in your system is opening the software as a project inside an installed QtCreator (> v4.5, Qt > v5.8, GCC 5) IDE and build it from there. \nAs you can see, a QtCreator installation is needed. If you don\u2019t have it, it can be downloaded and installed as an OpenSource user following the QtCreator [instructions](https://www.qt.io/download-qt-installer?hsCtaTracking=9f6a2170-a938-42df-a8e2-a9f0b1d6cdce|6cb0de4f-9bb5-4778-ab02-bfb62735f3e5). \nBut, if you want to use this suite without compilation and QT installation, there is an executable file for Linux x86_64 systems. This compressed file is available at [releases page](../../releases). \nIn the next future, another available way will be to handling this software as a cloud service.\n \n"
      },
      "source": "https://raw.githubusercontent.com/grev-uv/hpg-dhunter/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9548032172770244,
      "result": {
        "original_header": "Issues",
        "type": "Text_excerpt",
        "value": "**HPG-Dhunter** - Copyright (C) 2018 - grev-uv\nThis program comes with ABSOLUTELY NO WARRANTY.\nThis is free software, and you are welcome to redistribute it under certain conditions; visit https://www.gnu.org/copyleft/gpl.html for details.\nHowever, if you find any bugs, issues, want a specific feature added or need help, feel free to add an issue or extend an existing one. Pull requests are welcome.\n \n"
      },
      "source": "https://raw.githubusercontent.com/grev-uv/hpg-dhunter/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/grev-uv/hpg-dhunter/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/grev-uv/hpg-dhunter/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "grev-uv/hpg-dhunter"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "HPG-Dhunter"
      },
      "source": "https://raw.githubusercontent.com/grev-uv/hpg-dhunter/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/grev-uv/hpg-dhunter/master/images/numeracion_interface_v4.png"
      },
      "source": "https://raw.githubusercontent.com/grev-uv/hpg-dhunter/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9999993837050932,
      "result": {
        "original_header": "HPG-Dhunter",
        "type": "Text_excerpt",
        "value": "If you want to use this tool just now, there is an executable file for Linux x86_64 systems. This compressed file is available at [releases page](../../releases). But, previously, CUDA and Nvidia drivers must be installed in your system. For that, you can go to System requirements section \n"
      },
      "source": "https://raw.githubusercontent.com/grev-uv/hpg-dhunter/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999138003617275,
      "result": {
        "original_header": "Handling",
        "type": "Text_excerpt",
        "value": "There is an important change to do before launch the compilation. The file [hpg_dhunter.pro](src/hpg_dhunter.pro#L59) needs the path to cuda sdk installation at line 58:\n```\nCUDA_DIR = /path/to/cuda/sdk/cuda\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/grev-uv/hpg-dhunter/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9871894975869199,
      "result": {
        "original_header": "Build",
        "type": "Text_excerpt",
        "value": "The way to build HPG-Dhunter in your system is opening the software as a project inside an installed QtCreator (> v4.5, Qt > v5.8, GCC 5) IDE and build it from there. \nAs you can see, a QtCreator installation is needed. If you don\u2019t have it, it can be downloaded and installed as an OpenSource user following the QtCreator [instructions](https://www.qt.io/download-qt-installer?hsCtaTracking=9f6a2170-a938-42df-a8e2-a9f0b1d6cdce|6cb0de4f-9bb5-4778-ab02-bfb62735f3e5). \nBut, if you want to use this suite without compilation and QT installation, there is an executable file for Linux x86_64 systems. This compressed file is available at [releases page](../../releases). \n"
      },
      "source": "https://raw.githubusercontent.com/grev-uv/hpg-dhunter/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9992556404421999,
      "result": {
        "original_header": "Issues",
        "type": "Text_excerpt",
        "value": "**HPG-Dhunter** - Copyright (C) 2018 - grev-uv\nThis program comes with ABSOLUTELY NO WARRANTY.\nThis is free software, and you are welcome to redistribute it under certain conditions; visit https://www.gnu.org/copyleft/gpl.html for details.\nHowever, if you find any bugs, issues, want a specific feature added or need help, feel free to add an issue or extend an existing one. Pull requests are welcome.\n \n"
      },
      "source": "https://raw.githubusercontent.com/grev-uv/hpg-dhunter/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/grev-uv/hpg-dhunter/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "dmr-detection, dmrs-visualization, dna-dmrs, methylation-signal"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "GNU Lesser General Public License v3.0",
        "spdx_id": "LGPL-3.0",
        "type": "License",
        "url": "https://api.github.com/licenses/lgpl-3.0",
        "value": "https://api.github.com/licenses/lgpl-3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "                   GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\n  This version of the GNU Lesser General Public License incorporates\nthe terms and conditions of version 3 of the GNU General Public\nLicense, supplemented by the additional permissions listed below.\n\n  0. Additional Definitions.\n\n  As used herein, \"this License\" refers to version 3 of the GNU Lesser\nGeneral Public License, and the \"GNU GPL\" refers to version 3 of the GNU\nGeneral Public License.\n\n  \"The Library\" refers to a covered work governed by this License,\nother than an Application or a Combined Work as defined below.\n\n  An \"Application\" is any work that makes use of an interface provided\nby the Library, but which is not otherwise based on the Library.\nDefining a subclass of a class defined by the Library is deemed a mode\nof using an interface provided by the Library.\n\n  A \"Combined Work\" is a work produced by combining or linking an\nApplication with the Library.  The particular version of the Library\nwith which the Combined Work was made is also called the \"Linked\nVersion\".\n\n  The \"Minimal Corresponding Source\" for a Combined Work means the\nCorresponding Source for the Combined Work, excluding any source code\nfor portions of the Combined Work that, considered in isolation, are\nbased on the Application, and not on the Linked Version.\n\n  The \"Corresponding Application Code\" for a Combined Work means the\nobject code and/or source code for the Application, including any data\nand utility programs needed for reproducing the Combined Work from the\nApplication, but excluding the System Libraries of the Combined Work.\n\n  1. Exception to Section 3 of the GNU GPL.\n\n  You may convey a covered work under sections 3 and 4 of this License\nwithout being bound by section 3 of the GNU GPL.\n\n  2. Conveying Modified Versions.\n\n  If you modify a copy of the Library, and, in your modifications, a\nfacility refers to a function or data to be supplied by an Application\nthat uses the facility (other than as an argument passed when the\nfacility is invoked), then you may convey a copy of the modified\nversion:\n\n   a) under this License, provided that you make a good faith effort to\n   ensure that, in the event an Application does not supply the\n   function or data, the facility still operates, and performs\n   whatever part of its purpose remains meaningful, or\n\n   b) under the GNU GPL, with none of the additional permissions of\n   this License applicable to that copy.\n\n  3. Object Code Incorporating Material from Library Header Files.\n\n  The object code form of an Application may incorporate material from\na header file that is part of the Library.  You may convey such object\ncode under terms of your choice, provided that, if the incorporated\nmaterial is not limited to numerical parameters, data structure\nlayouts and accessors, or small macros, inline functions and templates\n(ten or fewer lines in length), you do both of the following:\n\n   a) Give prominent notice with each copy of the object code that the\n   Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the object code with a copy of the GNU GPL and this license\n   document.\n\n  4. Combined Works.\n\n  You may convey a Combined Work under terms of your choice that,\ntaken together, effectively do not restrict modification of the\nportions of the Library contained in the Combined Work and reverse\nengineering for debugging such modifications, if you also do each of\nthe following:\n\n   a) Give prominent notice with each copy of the Combined Work that\n   the Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the Combined Work with a copy of the GNU GPL and this license\n   document.\n\n   c) For a Combined Work that displays copyright notices during\n   execution, include the copyright notice for the Library among\n   these notices, as well as a reference directing the user to the\n   copies of the GNU GPL and this license document.\n\n   d) Do one of the following:\n\n       0) Convey the Minimal Corresponding Source under the terms of this\n       License, and the Corresponding Application Code in a form\n       suitable for, and under terms that permit, the user to\n       recombine or relink the Application with a modified version of\n       the Linked Version to produce a modified Combined Work, in the\n       manner specified by section 6 of the GNU GPL for conveying\n       Corresponding Source.\n\n       1) Use a suitable shared library mechanism for linking with the\n       Library.  A suitable mechanism is one that (a) uses at run time\n       a copy of the Library already present on the user's computer\n       system, and (b) will operate properly with a modified version\n       of the Library that is interface-compatible with the Linked\n       Version.\n\n   e) Provide Installation Information, but only if you would otherwise\n   be required to provide such information under section 6 of the\n   GNU GPL, and only to the extent that such information is\n   necessary to install and execute a modified version of the\n   Combined Work produced by recombining or relinking the\n   Application with a modified version of the Linked Version. (If\n   you use option 4d0, the Installation Information must accompany\n   the Minimal Corresponding Source and Corresponding Application\n   Code. If you use option 4d1, you must provide the Installation\n   Information in the manner specified by section 6 of the GNU GPL\n   for conveying Corresponding Source.)\n\n  5. Combined Libraries.\n\n  You may place library facilities that are a work based on the\nLibrary side by side in a single library together with other library\nfacilities that are not Applications and are not covered by this\nLicense, and convey such a combined library under terms of your\nchoice, if you do both of the following:\n\n   a) Accompany the combined library with a copy of the same work based\n   on the Library, uncombined with any other library facilities,\n   conveyed under the terms of this License.\n\n   b) Give prominent notice with the combined library that part of it\n   is a work based on the Library, and explaining where to find the\n   accompanying uncombined form of the same work.\n\n  6. Revised Versions of the GNU Lesser General Public License.\n\n  The Free Software Foundation may publish revised and/or new versions\nof the GNU Lesser General Public License from time to time. Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.\n\n  Each version is given a distinguishing version number. If the\nLibrary as you received it specifies that a certain numbered version\nof the GNU Lesser General Public License \"or any later version\"\napplies to it, you have the option of following the terms and\nconditions either of that published version or of any later version\npublished by the Free Software Foundation. If the Library as you\nreceived it does not specify a version number of the GNU Lesser\nGeneral Public License, you may choose any version of the GNU Lesser\nGeneral Public License ever published by the Free Software Foundation.\n\n  If the Library as you received it specifies that a proxy can decide\nwhether future versions of the GNU Lesser General Public License shall\napply, that proxy's public statement of acceptance of any version is\npermanent authorization for you to choose that version for the\nLibrary.\n"
      },
      "source": "https://raw.githubusercontent.com/grev-uv/hpg-dhunter/master/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "HPG-Dhunter"
        ],
        "type": "Text_excerpt",
        "value": "HPG-Dhunter is free software and licensed under the GNU General Public License version 3.\n\nHPG-Dhunter was developed under Qt as a platform application development framework for linux/ubuntu desktop, using a free software LGPL v3 license.\n"
      },
      "source": "https://raw.githubusercontent.com/grev-uv/hpg-dhunter/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "hpg-dhunter"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "grev-uv"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 181644,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Cuda",
        "size": 29687,
        "type": "Programming_language",
        "value": "Cuda"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "QMake",
        "size": 4575,
        "type": "Programming_language",
        "value": "QMake"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/grev-uv/hpg-dhunter/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "nosexybot",
          "type": "User"
        },
        "date_created": "2021-07-09T10:47:15Z",
        "date_published": "2021-07-09T10:49:06Z",
        "description": "Adaptation of improved output file information by separating the mapping of unmethylated Cs from non-hydroxymethylated Cs in HPG-Hmapper.",
        "html_url": "https://github.com/grev-uv/hpg-dhunter/releases/tag/v1.2-beta",
        "name": "HPG-Dhunter Version 1.2",
        "release_id": 45960115,
        "tag": "v1.2-beta",
        "tarball_url": "https://api.github.com/repos/grev-uv/hpg-dhunter/tarball/v1.2-beta",
        "type": "Release",
        "url": "https://api.github.com/repos/grev-uv/hpg-dhunter/releases/45960115",
        "value": "https://api.github.com/repos/grev-uv/hpg-dhunter/releases/45960115",
        "zipball_url": "https://api.github.com/repos/grev-uv/hpg-dhunter/zipball/v1.2-beta"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "nosexybot",
          "type": "User"
        },
        "date_created": "2021-02-08T09:38:21Z",
        "date_published": "2021-02-08T09:43:35Z",
        "description": "Several improvements in memory usage, file access and DMR identification, making the application faster and more reliable\r\n\r\n",
        "html_url": "https://github.com/grev-uv/hpg-dhunter/releases/tag/v1.1-beta",
        "name": "HPG-Dhunter Version 1.1",
        "release_id": 37729683,
        "tag": "v1.1-beta",
        "tarball_url": "https://api.github.com/repos/grev-uv/hpg-dhunter/tarball/v1.1-beta",
        "type": "Release",
        "url": "https://api.github.com/repos/grev-uv/hpg-dhunter/releases/37729683",
        "value": "https://api.github.com/repos/grev-uv/hpg-dhunter/releases/37729683",
        "zipball_url": "https://api.github.com/repos/grev-uv/hpg-dhunter/zipball/v1.1-beta"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "nosexybot",
          "type": "User"
        },
        "date_created": "2019-11-22T08:31:19Z",
        "date_published": "2019-11-22T08:39:50Z",
        "description": "First release version of hpg-dhunter-batch for linux systems with nvidia graphic device (micro-architecture Pascal version 6.1) installed.\r\n\r\nThis package was deployed with [linuxdeployqt](https://github.com/probonopd/linuxdeployqt) software as static package independent of system libraries.",
        "html_url": "https://github.com/grev-uv/hpg-dhunter/releases/tag/v1.0-beta",
        "name": "HPG-Dhunter Version 1.0",
        "release_id": 21678541,
        "tag": "v1.0-beta",
        "tarball_url": "https://api.github.com/repos/grev-uv/hpg-dhunter/tarball/v1.0-beta",
        "type": "Release",
        "url": "https://api.github.com/repos/grev-uv/hpg-dhunter/releases/21678541",
        "value": "https://api.github.com/repos/grev-uv/hpg-dhunter/releases/21678541",
        "zipball_url": "https://api.github.com/repos/grev-uv/hpg-dhunter/zipball/v1.0-beta"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "System requirements",
        "parent_header": [
          "HPG-Dhunter"
        ],
        "type": "Text_excerpt",
        "value": "The HPG-Dhunter visualizer is the next step after HPG-HMapper detector and mapper of the methylated and hidroximethylated regions in the work-flow of HPG-suite. \nHPG-Dhunter should work properly in a station with the following set-up:\n- A 64 bit Intel CPU compatible with SSE4.2.\n- The DNA data for DMR tasks needs as adjacent memory as the number of samples by the length of the largest chromosome to be analized. This parameter has a direct relation with the global memory available of the GPU device. The test was done with 32 MB of RAM.\n- The amount of samples that HPG-Dhunter can analize at the same time is directly dependent with the amount of the device memory. Working with a Nvidia GeForce GTX 1080 with 8 GB of GRAM, is possible to analyze and visualize up to six samples of chromosome-21 or up to four chromosome-10 or up to two chromosome-1 at the same time.\n- The CUDA compilation is configured to a single device with Nvidia Pascal GPU architecture. So, the devices that will work properly are Titan XP and X models, Tesla P40, P6 and P4 models, Quadro P6000, P5000, P4000 models, GeForce GTX 1080Ti, 1080, 1070Ti, 1070 models, and others easy to find here.\n- The Nvidia driver is needed (v384 or higher).\n- The CUDA API is needed(v9 or higher).\n- For a complete installation of Nvidia drivers and CUDA, it can download just one file from [here](https://developer.nvidia.com/cuda-downloads?target_os=Linux&target_arch=x86_64) and follow the instructions, that appear in the same page after select the distribution and version, for a pretty installation.\n"
      },
      "source": "https://raw.githubusercontent.com/grev-uv/hpg-dhunter/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 15:39:02",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ]
}