{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "PART 2: MAPPING TO THE REFERENCE",
        "parent_header": [
          "Pooled CRISPR Inverse PCR sequencing"
        ],
        "type": "Text_excerpt",
        "value": "Detection of new integration sites (IS) requires a [Pairwise mApping Format \\(PAF\\)](https://github.com/lh3/miniasm/blob/master/PAF.md) alignment file produced by minimap2 as input. \n\n```\nminimap2 -cx map-ont -t $THREAD $TARGETHOSTINDEX $FASTQ > \"$NAME\"_minimap2_TARGETHOST.paf\n```\n\nIf you want to visualize the alignment results using [Integrated Genome Viewer \\(IGV\\)](http://software.broadinstitute.org/software/igv/) a [SAM](https://en.wikipedia.org/wiki/SAM_(file_format)) file needs to be created as well.\n\n```\nminimap2 -ax map-ont -t $THREAD $TARGETHOSTINDEX $FASTQ > \"$NAME\"_minimap2_TARGETHOST.sam\nsamtools view -@ $THREAD -Sb \"$NAME\"_minimap2_TARGETHOST.sam > \"$NAME\"_minimap2_TARGETHOST.bam\nsamtools sort -@ $THREAD \"$NAME\"_minimap2_TARGETHOST.bam -o \"$NAME\"_minimap2_TARGETHOST.sorted.bam\nsamtools index -@ $THREAD \"$NAME\"_minimap2_TARGETHOST.sorted.bam\n```\n"
      },
      "source": "https://raw.githubusercontent.com/GIGA-AnimalGenomics-BLV/PCIP/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/GIGA-AnimalGenomics-BLV/PCIP"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-09-13T15:16:18Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-22T12:39:53Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "original_header": "SUMMARY: Analysis",
        "parent_header": [
          "Pooled CRISPR Inverse PCR sequencing"
        ],
        "type": "Text_excerpt",
        "value": "**DISCLAIMER:** Given the extreme diversity of proviruses, potential genomic alterations and the noisiness of nanopore sequencing technologies, the following pipeline should not be considered as universal. It can be used to prioritize interesting integration sites (IS) but will have to be adapted to your specific needs. \n\n* **1.** Basecalling (.fast5 to .fastq).\n* **2.** Mapping Reads to the TARGET-HOST Reference.\n* **3.** Calling Integration Sites (IS).\n* **4.** Calling Integration Sites Specific Variants.\n"
      },
      "source": "https://raw.githubusercontent.com/GIGA-AnimalGenomics-BLV/PCIP/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9940938083541407,
      "result": {
        "original_header": "Pooled CRISPR Inverse PCR sequencing",
        "type": "Text_excerpt",
        "value": "Pooled CRISPR Inverse PCR sequencing (PCIP-seq) is a method that leverages selective cleavage of circularized DNA fragments carrying proviral DNA with a pool of CRISPR guide RNAs, followed by inverse long-range PCR and multiplexed sequencing on the Oxford Nanopore MinION platform. A detailled description of the protocol and its applications can be found at [PCIP-seq](https://www.biorxiv.org/content/10.1101/558130v2). \n"
      },
      "source": "https://raw.githubusercontent.com/GIGA-AnimalGenomics-BLV/PCIP/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9743807403987932,
      "result": {
        "original_header": "PART 3: EXTRACTING INTEGRATION SITES",
        "type": "Text_excerpt",
        "value": "* **1.** ``-insertionSites.txt``: The integration site position table and estimation of the clone abundances. \n* **2.** ``-BEST_splitFASTQ.txt``: A table reporting the read IDs supporting each IS with an estimated abundance \u226510 reads. Only the best quality reads (01, 01, 101, 1001) are reported in this table.\n* **3.** ``-ALL_splitFASTQ.txt``: A table reporting the read IDs supporting each IS. This table is generated by attributing to each IS with an estimated abundance \u226510 reads the IDs of any reads from the ``PAF.path`` file located within ``distance_report`` (i.e., 1000 bp up/downstream).  \n"
      },
      "source": "https://raw.githubusercontent.com/GIGA-AnimalGenomics-BLV/PCIP/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8042138007556995,
      "result": {
        "original_header": "PART 4: VIRAL/HOST ALTERATIONS",
        "type": "Text_excerpt",
        "value": "For each unique IS, extract the target-specific and the host mutations (within +/- 20Kb).\n```\n# For every unique integration sites (>10 non-PCR duplicated reads)\nawk -F'\\t' 'NR>1 {print $2}' path/to/mySample-BEST_splitFASTQ.txt | sort | uniq > mySample_uniqueIS.txt\n\nwhile IFS=$'\\t' read -r -a line\ndo\n  ## 1. Create an IS specific folder:\n  # ID = chr_start_end\n  ID=`echo \"${line[0]}\" | sed 's/\\:/_/g' | sed 's/\\-/_/g'`\n  mkdir $ID\n  cd $ID\n  \n  ## 2. Extract reads belonging to that particular IS:\n  grep -F \"${line[0]}\" mySample-BEST_splitFASTQ.txt | awk -F'\\t' '{print \"@\"$1}' > \"$ID\"_readID.txt\n  grep -w -A 3 -f \"$ID\"_readID.txt -F <(gzip -dc $FASTQ) > \"$ID\".all.fastq\n  \n  ## 3. To reduce computation time a downsampling of the reads can be performed:\n  seqtk sample -s100 \"$ID\".all.fastq 500 > \"$ID\".fastq\n  \n  ## 4. Remap the reads to the target-host reference:\n  minimap2 -ax map-ont -t $THREAD $TARGETHOSTINDEX \"$ID\".fastq > \"$ID\"_extracted.sam\n  samtools view -@ $THREAD -Sb \"$ID\"_extracted.sam > \"$ID\"_extracted.bam\n  samtools sort -@ $THREAD \"$ID\"_extracted.bam -o \"$ID\"_extracted.sorted.bam\n  samtools index -@ $THREAD \"$ID\"_extracted.sorted.bam\n\n  ## 5. Call single-nucleotide polymorphisms:\n  \n  ### 5.1. Create a .bed file containing the position to call. A 20Kb window is added upstream and downstream:\n  win=20000\n  IFS=_ read chr start end <<< $ID\n  echo -e $chr'\\t'`expr $start - $win`'\\t'`expr $end + $win` > GENOME.bed\n  echo -e $TARGETNAME'\\t'1'\\t'$LENGTHTARGET > TARGET.bed\n\n  ## 5.2. Variant calling: HOST GENOME\n  loFreq call-parallel --pp-threads $THREAD -f $GENOME -l GENOME.bed \"$ID\"_extracted.sorted.bam > mySample_\"$ID\"_LoFreq_GENOME.vcf\n  \n  ## 5.3. Variant calling: TARGET GENOME\n  loFreq call-parallel --pp-threads $THREAD -f $TARGET -l TARGET.bed \"$ID\"_extracted.sorted.bam > mySample_\"$ID\"_LoFreq_TARGET.vcf\n  \n  ## 6. Call genomic rearrangements\n  # Custom scripts or [NGLMR + Sniffles](https://github.com/fritzsedlazeck/Sniffles) can be used to call genomic rearrangements.\n\n  cd ..\n  \ndone < mySample_uniqueIS.txt\n\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/GIGA-AnimalGenomics-BLV/PCIP/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/GIGA-AnimalGenomics-BLV/PCIP/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/GIGA-AnimalGenomics-BLV/PCIP/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "GIGA-AnimalGenomics-BLV/PCIP"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Pooled CRISPR Inverse PCR sequencing"
      },
      "source": "https://raw.githubusercontent.com/GIGA-AnimalGenomics-BLV/PCIP/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.8438821414464969,
      "result": {
        "original_header": "PART 1: BASECALLING",
        "type": "Text_excerpt",
        "value": "Basecalling has been performed using Guppy in high-accuracy mode.\n```\n# Basecalling\nread_fast5_basecaller.py -f FLO-MIN106 -k SQK-LSK108 --recursive --output_format fastq --input $RAW --save_path /path/to/mySample.fastq -t $THREAD\n\n# Adapter trimming\nporechop --discard_middle -i /path/to/mySample.fastq -b /path/to/mySample_trimmed.fastq\n\nFASTQ=\"/path/to/mySample_trimmed.fastq\"\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/GIGA-AnimalGenomics-BLV/PCIP/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9998487729697932,
      "result": {
        "original_header": "PART 3: EXTRACTING INTEGRATION SITES",
        "type": "Text_excerpt",
        "value": "R functions to extract integration sites and the estimation of the corresponding clone abundances can be downloaded from this repository (PCIP_1.0.tar.gz). After installing R prerequisites, run the following command in your terminal to install PCIP package:\n```\nR CMD INSTALL PCIP_1.0.tar.gz\n```\nAlternatively, the raw functions can be sourced into R. These functions are located in: [PCIP R functions](https://github.com/GIGA-AnimalGenomics-BLV/PCIP/tree/master/RPackage/PCIP/R)\n```\nsource(\"~/Github/GIGA/PCIP/RPackage/PCIP/R/PCIP_filter.R\")\nsource(\"~/Github/GIGA/PCIP/RPackage/PCIP/R/PCIP_getBreakPoints.R\")\nsource(\"~/Github/GIGA/PCIP/RPackage/PCIP/R/PCIP_summarise.R\")\nsource(\"~/Github/GIGA/PCIP/RPackage/PCIP/R/readPairwiseAlignmentFile.R\")\n```\n \nTo test the R function, a small pairwise-alignment file generated from HIV-1 U1 cell line can be found in the [example folder](https://github.com/GIGA-AnimalGenomics-BLV/PCIP/tree/master/example) of this Github. Using R, run the following commands:\n```\n# 0. Load Vackages \nlibrary(PCIP)\nlibrary(tidyverse)\nlibrary(GenomicRanges)\n\n# 1. Initialize Variables:\nPAF.path = \"PCIP/example/HIV_U1.paf.gz\"\ntargetName = \"HIV_U1\"\nlengthTarget = 9656\nout.prefix = \"~/Desktop/U1_results\"\n\n# 2. Read PAF File:\nPAF <- readPairwiseAlignmentFile(alignFile = PAF.path)\n\n# 3. Filter The Data To keep Only Chimeric Reads:\n# Only the best quality reads are retained here (01, 10, 101, 1001).\nPAF.filter <- PCIP_filter(minimap2PAF = PAF, targetName = targetName)\n\n# 4. Get The Read Target-Host Junctions And Shear Sites.\nPAF.breakpoints <- PCIP_getBreakPoints(PAF = PAF.filter, lengthTarget = lengthTarget, targetName = targetName)\n\n# 5. Group Target-Host Junctions Into Integration Site Units:\nPAF.integrationSite <- PCIP_summarise(PCIPbreakpoints = PAF.breakpoints, align = PAF, targetName = targetName, mergeISdistance = 200)\n\n# 6. Save:\nwrite.table(PAF.integrationSite[[1]], paste0(out.prefix, \"-insertionSites.txt\"), sep = \"\\t\", row.names = F, quote = F)\nwrite.table(PAF.integrationSite[[2]], paste0(out.prefix, \"-BEST_splitFASTQ.txt\"), sep = \"\\t\", row.names = F, quote = F)\nwrite.table(PAF.integrationSite[[3]], paste0(out.prefix, \"-ALL_splitFASTQ.txt\"), sep = \"\\t\", row.names = F, quote = F)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/GIGA-AnimalGenomics-BLV/PCIP/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8477208106215326,
      "result": {
        "original_header": "PART 3: EXTRACTING INTEGRATION SITES",
        "type": "Text_excerpt",
        "value": "To test the R function, a small pairwise-alignment file generated from HIV-1 U1 cell line can be found in the [example folder](https://github.com/GIGA-AnimalGenomics-BLV/PCIP/tree/master/example) of this Github. Using R, run the following commands:\n```\n# 0. Load Vackages \nlibrary(PCIP)\nlibrary(tidyverse)\nlibrary(GenomicRanges)\n\n# 1. Initialize Variables:\nPAF.path = \"PCIP/example/HIV_U1.paf.gz\"\ntargetName = \"HIV_U1\"\nlengthTarget = 9656\nout.prefix = \"~/Desktop/U1_results\"\n\n# 2. Read PAF File:\nPAF <- readPairwiseAlignmentFile(alignFile = PAF.path)\n\n# 3. Filter The Data To keep Only Chimeric Reads:\n# Only the best quality reads are retained here (01, 10, 101, 1001).\nPAF.filter <- PCIP_filter(minimap2PAF = PAF, targetName = targetName)\n\n# 4. Get The Read Target-Host Junctions And Shear Sites.\nPAF.breakpoints <- PCIP_getBreakPoints(PAF = PAF.filter, lengthTarget = lengthTarget, targetName = targetName)\n\n# 5. Group Target-Host Junctions Into Integration Site Units:\nPAF.integrationSite <- PCIP_summarise(PCIPbreakpoints = PAF.breakpoints, align = PAF, targetName = targetName, mergeISdistance = 200)\n\n# 6. Save:\nwrite.table(PAF.integrationSite[[1]], paste0(out.prefix, \"-insertionSites.txt\"), sep = \"\\t\", row.names = F, quote = F)\nwrite.table(PAF.integrationSite[[2]], paste0(out.prefix, \"-BEST_splitFASTQ.txt\"), sep = \"\\t\", row.names = F, quote = F)\nwrite.table(PAF.integrationSite[[3]], paste0(out.prefix, \"-ALL_splitFASTQ.txt\"), sep = \"\\t\", row.names = F, quote = F)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/GIGA-AnimalGenomics-BLV/PCIP/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8049252656152266,
      "result": {
        "original_header": "PART 4: VIRAL/HOST ALTERATIONS",
        "type": "Text_excerpt",
        "value": "For each unique IS, extract the target-specific and the host mutations (within +/- 20Kb).\n```\n# For every unique integration sites (>10 non-PCR duplicated reads)\nawk -F'\\t' 'NR>1 {print $2}' path/to/mySample-BEST_splitFASTQ.txt | sort | uniq > mySample_uniqueIS.txt\n\nwhile IFS=$'\\t' read -r -a line\ndo\n  ## 1. Create an IS specific folder:\n  # ID = chr_start_end\n  ID=`echo \"${line[0]}\" | sed 's/\\:/_/g' | sed 's/\\-/_/g'`\n  mkdir $ID\n  cd $ID\n  \n  ## 2. Extract reads belonging to that particular IS:\n  grep -F \"${line[0]}\" mySample-BEST_splitFASTQ.txt | awk -F'\\t' '{print \"@\"$1}' > \"$ID\"_readID.txt\n  grep -w -A 3 -f \"$ID\"_readID.txt -F <(gzip -dc $FASTQ) > \"$ID\".all.fastq\n  \n  ## 3. To reduce computation time a downsampling of the reads can be performed:\n  seqtk sample -s100 \"$ID\".all.fastq 500 > \"$ID\".fastq\n  \n  ## 4. Remap the reads to the target-host reference:\n  minimap2 -ax map-ont -t $THREAD $TARGETHOSTINDEX \"$ID\".fastq > \"$ID\"_extracted.sam\n  samtools view -@ $THREAD -Sb \"$ID\"_extracted.sam > \"$ID\"_extracted.bam\n  samtools sort -@ $THREAD \"$ID\"_extracted.bam -o \"$ID\"_extracted.sorted.bam\n  samtools index -@ $THREAD \"$ID\"_extracted.sorted.bam\n\n  ## 5. Call single-nucleotide polymorphisms:\n  \n  ### 5.1. Create a .bed file containing the position to call. A 20Kb window is added upstream and downstream:\n  win=20000\n  IFS=_ read chr start end <<< $ID\n  echo -e $chr'\\t'`expr $start - $win`'\\t'`expr $end + $win` > GENOME.bed\n  echo -e $TARGETNAME'\\t'1'\\t'$LENGTHTARGET > TARGET.bed\n\n  ## 5.2. Variant calling: HOST GENOME\n  loFreq call-parallel --pp-threads $THREAD -f $GENOME -l GENOME.bed \"$ID\"_extracted.sorted.bam > mySample_\"$ID\"_LoFreq_GENOME.vcf\n  \n  ## 5.3. Variant calling: TARGET GENOME\n  loFreq call-parallel --pp-threads $THREAD -f $TARGET -l TARGET.bed \"$ID\"_extracted.sorted.bam > mySample_\"$ID\"_LoFreq_TARGET.vcf\n  \n  ## 6. Call genomic rearrangements\n  # Custom scripts or [NGLMR + Sniffles](https://github.com/fritzsedlazeck/Sniffles) can be used to call genomic rearrangements.\n\n  cd ..\n  \ndone < mySample_uniqueIS.txt\n\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/GIGA-AnimalGenomics-BLV/PCIP/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/GIGA-AnimalGenomics-BLV/PCIP/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/GIGA-AnimalGenomics-BLV/PCIP/master/WORKFLOW/PCIPSEQ.jpg"
      },
      "source": "https://raw.githubusercontent.com/GIGA-AnimalGenomics-BLV/PCIP/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PCIP"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "GIGA-AnimalGenomics-BLV"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 67384,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/GIGA-AnimalGenomics-BLV/PCIP/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "vincenthahaut",
          "type": "User"
        },
        "date_created": "2020-09-27T12:12:20Z",
        "date_published": "2021-02-16T12:30:36Z",
        "description": "**PCIP-seq: simultaneous sequencing of integrated viral genomes and their insertion sites with long reads**\r\n\r\nCode Release v1.0.0\r\n\r\n**Authors:** \r\n\r\nMaria Artesi; Vincent Hahaut; Basiel Cole; Laurens Lambrechts; Fereshteh Ashrafi; Ambroise Mar\u00e7ais; Olivier Hermine; Philip Griebel; Natasa Arsic; Frank van der Meer; Ars\u00e8ne Burny; Dominique Bron; Elettra Bianchi; Philippe Delvenne; Vincent Bours; Carole Charlier; Michel Georges; Linos Vandekerckhove; Anne Van den Broeke; Keith Durkin\t\r\n",
        "html_url": "https://github.com/GIGA-AnimalGenomics-BLV/PCIP/releases/tag/v1.0.0",
        "name": "PCIP-seq: simultaneous sequencing of integrated viral genomes and their insertion sites with long reads",
        "release_id": 38105708,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/GIGA-AnimalGenomics-BLV/PCIP/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/GIGA-AnimalGenomics-BLV/PCIP/releases/38105708",
        "value": "https://api.github.com/repos/GIGA-AnimalGenomics-BLV/PCIP/releases/38105708",
        "zipball_url": "https://api.github.com/repos/GIGA-AnimalGenomics-BLV/PCIP/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "PREREQUISITES",
        "parent_header": [
          "Pooled CRISPR Inverse PCR sequencing"
        ],
        "type": "Text_excerpt",
        "value": "* albacore (\u2265 2.3.1) or guppy (\u2265 3.1.5.)\n* [porechops (\u2265 0.2.4.)](https://github.com/rrwick/Porechop) \n* [samtools (\u2265 1.9.)](http://samtools.sourceforge.net/) \n* [minimap2 (\u2265 2.10.)](https://github.com/lh3/minimap2) \n* [seqkt (\u2265 1.3-r106)](https://github.com/lh3/seqtk)\n* [loFreq (\u2265 2.1.2.)](http://csb5.github.io/lofreq/) \n* [R \u22653.5.1](https://www.r-project.org/)\n  - [Bioconductor (\u2265 3.7.)](https://www.bioconductor.org/install/) \n  - [Rsamtools (\u2265 1.32.3.)](https://bioconductor.org/packages/release/bioc/html/Rsamtools.html) \n  - [GenomicRanges (\u2265 1.32.7.)](https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html)\n  - [changepoint (\u2265 2.2.2.)](https://cran.r-project.org/web/packages/changepoint/index.html)\n  - [tidyverse (\u2265 1.3.0)](https://cran.r-project.org/web/packages/changepoint/index.html)\n  \n    - [dplyr (\u2265 0.7.8.)](https://cran.r-project.org/web/packages/dplyr/index.html)\n    - [ggplot2 (\u2265 2.3.1.)](https://cran.r-project.org/web/packages/ggplot2/index.html)\n    - [magrittr (\u2265 1.5.)](https://cran.r-project.org/web/packages/magrittr/index.html)\n    - [purrr (\u2265 0.2.5.)](https://cran.r-project.org/web/packages/purrr/index.html)\n    - [readr (\u2265 1.3.1.)](https://cran.r-project.org/web/packages/readr/index.html)\n    - [tibble (\u2265 2.0.1.)](https://cran.r-project.org/web/packages/tibble/index.html)\n    - [tidyr (\u2265 0.8.2.)](https://cran.r-project.org/web/packages/tidyr/index.html)\n\n\nMost required R libraries can be obtained by installing the R package [tidyverse](https://cran.r-project.org/web/packages/tidyverse/index.html). \n\nAll codes were tested on a Linux fedora 7.2 ('Nitrogen') and macOS 'Mojave'. \n"
      },
      "source": "https://raw.githubusercontent.com/GIGA-AnimalGenomics-BLV/PCIP/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Genome:",
        "parent_header": [
          "Pooled CRISPR Inverse PCR sequencing",
          "PREREQUISITES"
        ],
        "type": "Text_excerpt",
        "value": "PCIP-Seq pipeline is based on the detection of chimeric TARGET-HOST reads using a chimeric viral-host reference genome. This reference can be created as follows:\n\n```\nGENOME=\"/path/to/TARGETHOST_INDEX/Bos_taurus.UMD3.1.dna.chromosome.fa\"\nTARGET=\"/path/to/psp344.fa\"\n\nmkdir TARGETHOST_INDEX\ncd TARGETHOST_INDEX\n\ncat $GENOME $TARGET > BTA_BLV.fa\n\nTARGETHOST=\"/path/to/TARGETHOST_INDEX/BTA_BLV.fa\"\n```\n"
      },
      "source": "https://raw.githubusercontent.com/GIGA-AnimalGenomics-BLV/PCIP/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Variables",
        "parent_header": [
          "Pooled CRISPR Inverse PCR sequencing",
          "PREREQUISITES"
        ],
        "type": "Text_excerpt",
        "value": "- RAW - nanopore data generated as described in [PCIP-seq](https://www.biorxiv.org/content/10.1101/558130v2) in FAST5 format.\n- NAME - Sample name.\n- TARGETNAME - Name of the TARGET chromosome as the FASTA reference (i.e., HTLV_ATK, HIV_U1, psp344, ...). \n- OUTDIR - Path to the output directory. \n- THREAD - Number of threads.\n\n```\nRAW=\"/path/to/raw.fast5\"\nNAME=\"mySample\"\nTARGETNAME=\"psp344\"\nOUTDIR=\"/path/to/output/mySample\"\nTHREAD=4\nLENGTHTARGET=8720 #base-pairs\nFASTQ=\"/path/to/reads.fastq\"\n```\n"
      },
      "source": "https://raw.githubusercontent.com/GIGA-AnimalGenomics-BLV/PCIP/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Indexing:",
        "parent_header": [
          "Pooled CRISPR Inverse PCR sequencing",
          "PREREQUISITES"
        ],
        "type": "Text_excerpt",
        "value": "Both Minimap2 and LoFreq require an indexed FASTA file:\n\n```\nminimap2 -d /path/to/TARGETHOST_INDEX/BTA_BLV.mni $TARGETHOST\nsamtools faidx $TARGETHOST\n\nTARGETHOSTINDEX=\"/path/to/TARGETHOST_INDEX/BTA_BLV.mni\"\n```\n"
      },
      "source": "https://raw.githubusercontent.com/GIGA-AnimalGenomics-BLV/PCIP/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 05:55:18",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ]
}