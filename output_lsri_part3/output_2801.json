{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/bcgsc/ntHits"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-06-15T19:47:02Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-05-02T04:05:48Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Identifying repeats in high-throughput sequencing data "
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9748277730822179,
      "result": {
        "original_header": "ntHits",
        "type": "Text_excerpt",
        "value": "ntHits is a tool for efficiently counting and filtering k-mers based on their frequencies.\n \n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/ntHits/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/bcgsc/ntHits/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/bcgsc/ntHits/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bcgsc/ntHits"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ntHits"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/ntHits/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "**NOTE:** If you are installing btllib from its source, run its `./compile` script and add the following environment variables:\n```\nexport CPPFLAGS=\"-isystem /path/to/btllib/install/include $CPPFLAGS\"\nexport LDFLAGS=\"-L/path/to/btllib/install/lib -lbtllib $LDFLAGS\"\n```\n\nDownload the latest release and run the following command in the project's root directory to create a buildsystem in the `build` folder:\n\n```shell\nmeson setup build\n```\n\nThen, `cd` into the `build` folder and compile ntHits using:\n\n```shell\nninja\n```\n\nThis will generate two binary files in the `build` folder: `nthits` for generating the desired data structure containing the k-mers and if possible, their counts; and `nthits-bfq` for querying the output if it's a (counting) Bloom filter.\n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/ntHits/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/bcgsc/ntHits/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2018 Hamid Mohamadi\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/ntHits/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bcgsc/nthits/master/nthits-logo.png"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/ntHits/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ntHits"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "bcgsc"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 52103,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Meson",
        "size": 1572,
        "type": "Programming_language",
        "value": "Meson"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 1276,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bcgsc/ntHits/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "parham-k",
          "type": "User"
        },
        "date_created": "2024-04-12T21:13:13Z",
        "date_published": "2024-04-12T21:20:44Z",
        "description": "- Output CBF counts now represent true counts",
        "html_url": "https://github.com/bcgsc/ntHits/releases/tag/v1.0.3",
        "name": "ntHits v1.0.3",
        "release_id": 150993320,
        "tag": "v1.0.3",
        "tarball_url": "https://api.github.com/repos/bcgsc/ntHits/tarball/v1.0.3",
        "type": "Release",
        "url": "https://api.github.com/repos/bcgsc/ntHits/releases/150993320",
        "value": "https://api.github.com/repos/bcgsc/ntHits/releases/150993320",
        "zipball_url": "https://api.github.com/repos/bcgsc/ntHits/zipball/v1.0.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "parham-k",
          "type": "User"
        },
        "date_created": "2023-05-09T15:50:15Z",
        "date_published": "2023-05-09T15:59:20Z",
        "description": "- Fixed empty output when detecting unique k-mers (`cmin=1 cmax=1`)",
        "html_url": "https://github.com/bcgsc/ntHits/releases/tag/v1.0.2",
        "name": "ntHits v1.0.2",
        "release_id": 102371708,
        "tag": "v1.0.2",
        "tarball_url": "https://api.github.com/repos/bcgsc/ntHits/tarball/v1.0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/bcgsc/ntHits/releases/102371708",
        "value": "https://api.github.com/repos/bcgsc/ntHits/releases/102371708",
        "zipball_url": "https://api.github.com/repos/bcgsc/ntHits/zipball/v1.0.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "parham-k",
          "type": "User"
        },
        "date_created": "2023-03-11T06:35:11Z",
        "date_published": "2023-03-11T06:44:01Z",
        "description": "- Fixed a minor bug when using `--solid` mode\r\n- Fixed CI and requirements for macOS\r\n- Added new logo to verbose mode",
        "html_url": "https://github.com/bcgsc/ntHits/releases/tag/v1.0.1",
        "name": "ntHits v1.0.1",
        "release_id": 95276103,
        "tag": "v1.0.1",
        "tarball_url": "https://api.github.com/repos/bcgsc/ntHits/tarball/v1.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/bcgsc/ntHits/releases/95276103",
        "value": "https://api.github.com/repos/bcgsc/ntHits/releases/95276103",
        "zipball_url": "https://api.github.com/repos/bcgsc/ntHits/zipball/v1.0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "parham-k",
          "type": "User"
        },
        "date_created": "2023-03-03T21:40:06Z",
        "date_published": "2023-03-03T21:41:18Z",
        "html_url": "https://github.com/bcgsc/ntHits/releases/tag/v1.0.0",
        "name": "ntHits v1.0.0",
        "release_id": 94473684,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/bcgsc/ntHits/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/bcgsc/ntHits/releases/94473684",
        "value": "https://api.github.com/repos/bcgsc/ntHits/releases/94473684",
        "zipball_url": "https://api.github.com/repos/bcgsc/ntHits/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mohamadi",
          "type": "User"
        },
        "date_created": "2019-02-21T23:41:34Z",
        "date_published": "2019-02-21T23:43:20Z",
        "html_url": "https://github.com/bcgsc/ntHits/releases/tag/ntHits-v0.0.1",
        "name": "ntHits v0.0.1",
        "release_id": 15707184,
        "tag": "ntHits-v0.0.1",
        "tarball_url": "https://api.github.com/repos/bcgsc/ntHits/tarball/ntHits-v0.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/bcgsc/ntHits/releases/15707184",
        "value": "https://api.github.com/repos/bcgsc/ntHits/releases/15707184",
        "zipball_url": "https://api.github.com/repos/bcgsc/ntHits/zipball/ntHits-v0.0.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "type": "Text_excerpt",
        "value": "- C++ compiler with c++17 and OpenMP support\n- [Meson](https://mesonbuild.com/)\n- [btllib](https://github.com/bcgsc/btllib) (>=1.7.2)\n- [Catch2](https://github.com/catchorg/Catch2), only for running tests\n\nntHits uses [argparse](https://github.com/p-ranav/argparse) for command-line argument parsing which is built-in as a submodule (no further installation required).\n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/ntHits/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 10:21:31",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 15
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "type": "Text_excerpt",
        "value": "```\nUsage: nthits --frequencies VAR [--min-count VAR] [--max-count VAR] [--kmer-length VAR] [-h] [--error-rate VAR] [--seeds VAR] [--threads VAR] [--solid] [--long-mode] --out-file VAR out_type files\n\nFilters k-mers based on counts (cmin <= count <= cmax) in input files\n\nPositional arguments:\n  out_type              Output format: Bloom filter 'bf', counting Bloom filter ('cbf'), or table ('table') [required]\n  files                 Input files [nargs: 0 or more] [required]\n\nOptional arguments:\n  -f, --frequencies     Frequency histogram file (e.g. from ntCard) [required]\n  -cmin, --min-count    Minimum k-mer count (>=1), ignored if using --solid [default: 1]\n  -cmax, --max-count    Maximum k-mer count (<=254) [default: 254]\n  -k, --kmer-length     k-mer length, ignored if using spaced seeds (-s) [default: 64]\n  -h, --num-hashes      Number of hashes to generate per k-mer/spaced seed [default: 3]\n  -p, --error-rate      Target Bloom filter error rate [default: 0.0001]\n  -s, --seeds           If specified, use spaced seeds (separate with commas, e.g. 10101,11011) \n  -t, --threads         Number of parallel threads [default: 4]\n  --solid               Automatically tune 'cmin' to filter out erroneous k-mers \n  --long-mode           Optimize data reader for long sequences (>5kbp) \n  -v                    Level of details printed to stdout (-v: normal, -vv detailed) \n  -o, --out-file        Output file's name [required]\n\nCopyright 2022 Canada's Michael Smith Genome Science Centre\n```\n\nIf the output data structure is a Bloom filter (or CBF), it can be queried by either using the `nthits-bfq` tool, or using btllib's API.\n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/ntHits/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "ntHits Bloom Filter Query Tool",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```none\nUsage: nthits-bfq [-h] [--cbf] [--seeds VAR] [--silent] bf_path\n\nQuery tool for ntHits' output Bloom filter\n\nPositional arguments:\n  bf_path       Input Bloom filter file [required]\n\nOptional arguments:\n  -h, --help    shows help message and exits \n  -v, --version prints version information and exits \n  --cbf         Treat input file as a counting Bloom filter and output k-mer counts \n  -s, --seeds   Spaced seed patterns separated with commas (e.g. 10101,11011) \n  --silent      Don't print logs to stdout \n\nCopyright 2022 Canada's Michael Smith Genome Science Centre\n```\n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/ntHits/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "btllib's Bloom Filter API",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "C++ example:\n\n```c++\n#include <btllib/bloom_filter.hpp>\n#include <btllib/counting_bloom_filter.hpp>\n#include <string>\n\nint main() {\n  btllib::KmerBloomFilter bf(path_to_bloom_filter);\n  // or btllib::KmerCountingBloomFilter8 \n  std::string kmer = \"AGCTATCAGTCGA\";\n  std::cout << bf.contains(kmer) << std::endl;\n  return 0;\n}\n\n```\n\nPython example:\n\n```python\nimport btllib\n\nbf = btllib.KmerBloomFilter(path_to_bloom_filter)\n# or btllib.KmerCountingBloomFilter8\nkmer = \"AGCTATCAGTCGA\"\nprint(bf.contains(kmer))\n```\n\nIf using spaced seeds, btllib's `BloomFilter` and `CountingBloomFilter` classes should be used instead. In this case, refer to [btllib's docs](https://bcgsc.github.io/btllib/) and examples to query the Bloom filters using hashes generated from a `SeedNtHash` object.\n"
      },
      "source": "https://raw.githubusercontent.com/bcgsc/ntHits/master/README.md",
      "technique": "header_analysis"
    }
  ]
}