{
  "application_domain": [
    {
      "confidence": 0.9940619327547674,
      "result": {
        "type": "String",
        "value": "Graphs"
      },
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9966205620709239,
      "result": {
        "type": "String",
        "value": "Semantic web"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/qBioTurin/grapes-dd"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-03-24T07:54:29Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-02-12T10:45:15Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Description",
        "parent_header": [
          "GRAPES-DD"
        ],
        "type": "Text_excerpt",
        "value": "GRAPES-DD is developed in C++ under GNU\\Linux using POSIX Threads programming.\nIt requires the MEDDLY Library 0.15.1 available at https://github.com/asminer/meddly/releases\n\nThe GRAPES-DD workflow is composed by two main phases:\n1. the indexing building phase in which an MTMDD indexing the collection of target graphs is created;\n2. the filtering phase in which, given a query graph, the set of target graphs is potentially restricted to those sub-graphs probably containing the query.\n\nThe GRAPES-DD verification phase remains as in the original version of the software.\n\n<hr/>\n"
      },
      "source": "https://raw.githubusercontent.com/qBioTurin/grapes-dd/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8702786976108637,
      "result": {
        "original_header": "GRAPES-DD",
        "type": "Text_excerpt",
        "value": "> GRAPES-DD is a modified version of GRAPES (available at https://github.com/InfOmics/GRAPES ) in which the trie indexing structure has been replaced with a multi-terminal multiway decision diagram (MTMDD).  \nGRAPES-DD research paper has been published on BMC Bioinformatics: it is available [here](https://bmcbioinformatics.biomedcentral.com/articles/10.1186/s12859-021-04129-0).\n<hr/>\n \n"
      },
      "source": "https://raw.githubusercontent.com/qBioTurin/grapes-dd/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9279413800127245,
      "result": {
        "original_header": "Datasets",
        "type": "Text_excerpt",
        "value": "The directory ```example/graphs``` provides the collections of graphs. \nThe directory BASH2* provides both the collections of graphs and the query graphs.\nInside these directory there are two subdirectories: \n* BASH3* directory contains the biochemical graphs: PDBS, PCM and PPI, as well as the single PPI networks (C. elegans, D. melanogaster, H. sapiens, M. musculus and S. cerevisiae).  \n* BASH4* directory contains the synthetic Barabasi and Forestfire graphs. \n    * Barabasi folder structure is the following: BASH5* where:\n        * num_nodes is the number of vertices of the graph\n        * degree is the average degree of a vertex \n        * P is the exponent of the power-law \n        * LabelRange is the percentage of distinct labels respect to the number of vertices. \n    * ForestFire folder structure is the following: BASH6* where:\n        * num_nodes is the number of vertices of the graph\n        * p is the probability of a link between two vertices\n        * LabelRange is the percentage of distinct labels respect to the numer of vertices.  \nEach target graph presents in the ```queries``` folder has a dedicated subfolder containing the query graphs extracted from it. Query folder names represent the number of vertices of the query graph. Query graph names are BASH8*. \n \n"
      },
      "source": "https://raw.githubusercontent.com/qBioTurin/grapes-dd/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/qBioTurin/grapes-dd/tree/master/src/meddly/docs"
      },
      "technique": "file_exploration"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/qBioTurin/grapes-dd/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/qBioTurin/grapes-dd/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "qBioTurin/grapes-dd"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "GRAPES-DD"
      },
      "source": "https://raw.githubusercontent.com/qBioTurin/grapes-dd/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/qBioTurin/grapes-dd/master/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/qBioTurin/grapes-dd/master/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/qBioTurin/grapes-dd/master/build_docker.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/qBioTurin/grapes-dd/master/build_all.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/qBioTurin/grapes-dd/master/src/meddly/autogen.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/qBioTurin/grapes-dd/master/src/meddly/ltmain.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/qBioTurin/grapes-dd/master/src/meddly/visual/TermView/autogen.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/qBioTurin/grapes-dd/master/docker/start.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.9841677260772416,
      "result": {
        "original_header": "GRAPES-DD",
        "type": "Text_excerpt",
        "value": "> GRAPES-DD is a modified version of GRAPES (available at https://github.com/InfOmics/GRAPES ) in which the trie indexing structure has been replaced with a multi-terminal multiway decision diagram (MTMDD).  \n"
      },
      "source": "https://raw.githubusercontent.com/qBioTurin/grapes-dd/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/qBioTurin/grapes-dd/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/qBioTurin/grapes-dd/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "grapes-dd"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "qBioTurin"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 3705630,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Roff",
        "size": 1454770,
        "type": "Programming_language",
        "value": "Roff"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 1445067,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 822674,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 345194,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Java",
        "size": 79871,
        "type": "Programming_language",
        "value": "Java"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 54550,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "M4",
        "size": 41119,
        "type": "Programming_language",
        "value": "M4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 8456,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "TeX",
        "size": 3945,
        "type": "Programming_language",
        "value": "TeX"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CSS",
        "size": 3317,
        "type": "Programming_language",
        "value": "CSS"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 628,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "QMake",
        "size": 551,
        "type": "Programming_language",
        "value": "QMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Ruby",
        "size": 126,
        "type": "Programming_language",
        "value": "Ruby"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/qBioTurin/grapes-dd/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 07:02:40",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "GRAPES-DD"
        ],
        "type": "Text_excerpt",
        "value": "GRAPES-DD is developed in C++ under GNU\\Linux using POSIX Threads programming.\nIt requires the MEDDLY Library 0.15.1 available at https://github.com/asminer/meddly/releases\n\nThe executable *grapes_dd* allows you to both build the database index and to run a query. \n\nYou can try and compare GRAPES-DD and GRAPES performances by using the runTest.py python script. \nTests will be run through Docker if it is installed.\n\nIndex building phase: \n\n```./runTest.py [-i folder_database/graph_database.gfd] -l lp -t num_threads```\n\nIndex building + query matching phase:\n\n```./runTest.py [-i folder_database/graph_database.gfd -q folder_database/folder_query/query_graph.gff] -l lp -t nt```\n\n\n| Parameter | Description |\n|-----------------------|-------------|\n|**-i db_file**| path of the textual graphs database file|\n|**-q query_file**|path of the textual graph query file |\n|**-l lp**     | specify feature paths length, namely the depth of the DFS which extract paths. lp must be greather than 1, eg -lp 3. Default value is 4.\n|**-t nt**   | number of threads to be used during matching phase. Default value is 1. \n\nWe recommend you to run the software via Docker. See https://www.docker.com/\n\n<span style=\"color:red\">ATTENTION:</span> the query graph file must be located in a subdirectory of the graph database file. Query graphs are graph database specific. \n"
      },
      "source": "https://raw.githubusercontent.com/qBioTurin/grapes-dd/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Build from source code",
        "parent_header": [
          "GRAPES-DD",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Executables are available only after building source code on your system. \nUse the build_all.sh script to build the grapes_dd executable. \n\n```\n./build_all.sh \n```\n"
      },
      "source": "https://raw.githubusercontent.com/qBioTurin/grapes-dd/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Database Index Construction",
        "parent_header": [
          "GRAPES-DD",
          "Use containerized GRAPES-DD"
        ],
        "type": "Text_excerpt",
        "value": "Build the index of the given database of graphs.\n```\n./grapes_dd -i db_file -l lp -d bool \n```\n\n| Parameter | Description |\n|-----------------------|-------------|\n|**-i db_file**| textual graphs database file|\n|**-l lp**     | specify feature paths length, namely the depth of the DFS which extract paths. lp must be greather than 1, eg -lp 3. Default value is 4.\n|**-d bool**   | flag indicating if the graphs are directed (true) or undirected (false). Default value is true.\n\nThe indexing phase  produces the *db_file.index.lp.mtdd* file in which the database index is stored.\n"
      },
      "source": "https://raw.githubusercontent.com/qBioTurin/grapes-dd/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Querying",
        "parent_header": [
          "GRAPES-DD",
          "Use containerized GRAPES-DD"
        ],
        "type": "Text_excerpt",
        "value": "```\n./grapes_dd -i db_file -q query_file -l lp -d bool -t nthreads\n```\n\n| Attribute | Description |\n|-----------------------|-------------|\n|**-i db_file**    | textual graphs database file\n|**-q query_file** | textual query graph file. It must contain just one graph \n|**-l lp**         | specify feature paths length, namely the depth of the DFS which extract paths. lp must be greather than 1, eg -lp 3. Default value is 4. \n|**-d bool**       | flag indicating if the graphs are directed (true) or undirected (false). Default value is true. \n|**-t nthreads**   | number of threads to be used during matching phase \n\n<span style=\"color:red\">ATTENTION:</span> before run a query, the database index must have been computed and the resultant file must be maintained in the same directory of the database textual file.\n\n\n<hr/>\n"
      },
      "source": "https://raw.githubusercontent.com/qBioTurin/grapes-dd/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Use containerized GRAPES-DD",
        "parent_header": [
          "GRAPES-DD"
        ],
        "type": "Text_excerpt",
        "value": "We built a Docker image containing both GRAPES-DD and GRAPES. \nIn the folder where the Dockerfile is located, run the following command to build the image:\n"
      },
      "source": "https://raw.githubusercontent.com/qBioTurin/grapes-dd/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Build the docker image",
        "parent_header": [
          "GRAPES-DD",
          "Use containerized GRAPES-DD"
        ],
        "type": "Text_excerpt",
        "value": "```docker build -t \"grapes_dd\" .```\n\n##### Database Index Construction \n\nYou have to mount the folder containing the graph database in ```/data/db_folder```.\n\n```docker run -v db_folder:/data/db_file grapes_dd [mode] -i db_file -l lp -d bool```\n\n\n| Parameter | Description |\n|-----------------------|-------------|\n|**mode**      | specify the tool to be used (grapes or grapes_dd). \n|**-i db_file**| textual graphs database file|\n|**-l lp**     | specify feature paths length, namely the depth of the DFS which extract paths. lp must be greather than 1, eg -lp 3. Default value is 4.\n|**-d bool**   | flag indicating if the graphs are directed (true) or undirected (false). Default value is true.\n\n\n##### Querying\n\nYou have to mount the folders containing the graph database and the query file in ```/data/db_file``` and ```/data/query_file```, respectively. \n\n```docker run -v db_folder:/data/db_file -v query_folder:/data/query_file grapes_dd [grapes|grapes_dd] -i db_file -l lp -d bool -t nthreads```\n\n\n| Parameter | Description |\n|-----------------------|-------------|\n|**mode**          | specify the tool to be used (grapes or grapes_dd). \n|**-i db_file**    | textual graphs database file|\n|**-q query_file** | textual query graph file. It must contain just one graph \n|**-l lp**         | specify feature paths length, namely the depth of the DFS which extract paths. lp must be greather than 1, eg -lp 3. Default value is 4.\n|**-d bool**       | flag indicating if the graphs are directed (true) or undirected (false). Default value is true.\n|**-t nthreads**   | number of threads to be used during matching phase \n"
      },
      "source": "https://raw.githubusercontent.com/qBioTurin/grapes-dd/master/README.md",
      "technique": "header_analysis"
    }
  ]
}