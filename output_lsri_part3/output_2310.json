{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Prunoideae/MitoFlex"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-12-10T02:28:39Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-23T04:28:47Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A mitogenome toolkit inspired by MitoZ, while being more effective, precise and flexible."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9949500040545446,
      "result": {
        "original_header": "MitoFlex",
        "type": "Text_excerpt",
        "value": "MitoFlex is a Python3 based toolkit designated for mitochondrial genome assembling, it's inspired from [MitoZ](https://github.com/linzhi2013/MitoZ), but with improved performance and result quality. And also it implemented a both easy and flexible mechanism to extend the program feature. It accepts both single-end and pair-end data, and follows an already set workflow to output results. Working mechanism is highly flexible and can be easily reconfigured here.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9908448727572226,
      "result": {
        "original_header": "4 Specifying parameters in configuration file",
        "type": "Text_excerpt",
        "value": "MitoFlex uses a very flexible argument catching and processing mechanism, which is aimed to make it easier for further developing. [An example configuration file](example.config.py) is created under the main directory.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9258450895442017,
      "result": {
        "original_header": "5 Modules provided by MitoFlex",
        "type": "Text_excerpt",
        "value": "Most modules of MitoFlex are just the same as MitoZ. But some of the methods are rewritten and optimized.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.934767572277363,
      "result": {
        "original_header": "5.1 all",
        "type": "Text_excerpt",
        "value": "Run the whole workflow, including methods listed below. Some part of module can be disabled to meet a certain usage, `all2` command is removed, and replaced with `--disable-filter` option, check the help for a more detailed usage.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9972485619987952,
      "result": {
        "original_header": "5.2 filter",
        "type": "Text_excerpt",
        "value": "Filter out fastq sequences of low quality, binary is written in Rust to ensure speed and data safety. The method will not output compressed clean data by default, and most workflow is designed to directly process with plain data format, clean data will be deleted after the `all` command is done if `--keep-temp` option is not set.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9464861469628569,
      "result": {
        "original_header": "5.3 assemble",
        "type": "Text_excerpt",
        "value": "Assemble the fastq file to output contigs. This method use megahit for faster and better results, but since megahit itself implemented a multi-kmer strategy to assemble data, it might take long (average 20min for a 5Gbps dataset, ranging from 1min to 1.5h if filtered correctly with 8 threads, will be much more faster if more processors specified) to assemble. Reducing kmer steps, or disabling local assembly could shorten the time, but it's not recommended since it also may output more fragmentized contigs. Also, assemble process depends much more on data quality than the size of dataset, because it will take much more resources to process more contigs in each iteration, if final sequence itself is fragmentized. \nTo eliminate this problem and make the assembler stay focus on the mitogenome sequences, MitoFlex tweaked how the megahit's original pipeline works, inserted a filter method to filter out sequence of not enough depth - which is considered to be nuclear genome or contamination, since mitogenome should possess a much higher copy number in the reads. This strategy can be configured via `--depth-list` option. If you need to disable the option to find out some sequence, like NUMTs, please check out `configurations.py`.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9954819961936375,
      "result": {
        "original_header": "5.4 findmitoscaf",
        "type": "Text_excerpt",
        "value": "To pick out candidate sequences which likely to be mitochondrial sequences. This process firstly drop sequences which is obviously too low for searching, then will search the data with nhmmer and tblastn. The two step of process, nhmmer and tblastn, depends highly on the parallel processing power of the environment, in our testing environment (80 threads), this takes 5-10min for any dataset to finish.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8804844678607034,
      "result": {
        "original_header": "5.5 annotate",
        "type": "Text_excerpt",
        "value": "To annotate sequences using tblastn and infernal.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8938338563652607,
      "result": {
        "original_header": "5.6 visualize",
        "type": "Text_excerpt",
        "value": "To generate PNG and SVG file representing current mitogenome in a more direct way.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9540019538347604,
      "result": {
        "original_header": "7 Adding new profile data to MitoFlex",
        "type": "Text_excerpt",
        "value": "MitoFlex has already integrated protein and nucleic acid data into the profile, but it can't cover all the species for sure. So it's necessary to add data of other taxonomy classes if current MitoFlex doesn't have it for better assemble and annotation performance.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8902509638154106,
      "result": {
        "original_header": "7.1 Building nhmmer profile",
        "type": "Text_excerpt",
        "value": "For official documentation refers to [here](http://www.csb.yale.edu/userguides/seq/hmmer/docs/node19.html). \nBuilding HMM profile needs the access of `hmmbuild`, which is included in the HMMER package, the command requires a Multiple Sequence Alignment (MSA) file, which is obtained from aligning sequences you want to build profile with by serveral alignment program like MAFFT or ClustalW. The `hmmbuild` in installed version supports most file format, like FASTA, Stockholm or ClustalW.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9885311866053136,
      "result": {
        "original_header": "7.2 Adding profile data",
        "type": "Text_excerpt",
        "value": "MitoFlex has its internal profile for basic mitogenome assembly and annotation, but it comes to be inaccurate if a specific speciemen is required. You can implement your own set of profile of the specific speciemen you want if feeling like MitoFlex is not giving good results.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9956689554713084,
      "result": {
        "original_header": "7.2.1 Adding or modifying clade protein database",
        "type": "Text_excerpt",
        "value": "MitoFlex uses a given set of protein sequences to do tblastn, for picking up most possible sequences and for annotating the genes, if you found the species you requested is not quite covered in the database (Like Rhabditophora in Playthelminthes), you can of course add your sequences into the profile. The set of sequences can be found in `profile/MT_database/{clade}.fa`, written in FASTA file format, the id of the sequence must be in `gi_NC_{record id}_{gene}_{genus}_{species}_{length}_aa`, only gene, genus and species were taken into recognition of sequences and clades, but please keep underscores in place for the program to detect and parse the information.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9963808065687252,
      "result": {
        "original_header": "7.2.2 Adding a new clade",
        "type": "Text_excerpt",
        "value": "To add a new clade, these three files should be noticed: `{clade}.hmm` and `required_cds.json` in `profile/CDS_HMM` and `{clade}.fa` in `profile/MT_database`. The hmm file is used for nhmmer to search out possible sequences, and the fasta file is for tblastn to mark the potential sequence with genes, and the `required_cds.json` is for telling MitoFlex what gene should be taken into count, because some gene is rarely reported in several species, so it would be better for users to tell how MitoFlex will judge the gene is missing or not. MitoFlex requires all these three to be set properly in order to be functional.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8579274225946475,
      "result": {
        "original_header": "8 Things that will effect MitoFlex's overall performance",
        "type": "Text_excerpt",
        "value": "There are mainly two factors influencing result quality : 1. The quality of rawdata itself. 2. The size of genome profile that MitoFlex currently have in the profile folder.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9916211101219197,
      "result": {
        "original_header": "8.1 Data quality",
        "type": "Text_excerpt",
        "value": "MitoFlex doesn't depends on the size of data too much, since only a portion of total reads is filtered and extracted, resulted to be the clean data, the data actually used in the workflow is small, no more than 5Gbps(can be adjusted if needed). The speed of assembly is then depends on the data quality, which is mainly representing how filtered reads are concentrated on your final sequence, this is quite obvious, if the reads are aparted and have no linkage, the assembler will have to retain them at each iteration because you can't actually concat them into a single sequence, which leads to a slower iteration, and a bigger contig file. So, the findmitoscaf will have to pick out mitogenome sequences from a much larger contig file, where it could also be quite slow. \nThe other part of data quality, is how much mitogenome is covered in the raw data, this could be varied a lot, if the input data is small, or just because the filter module extracted too much nuclear genomic sequences. Since the mitogenome is really small and possess a high depth number over the nuclear genome, the latter is rarely happened. But if you ensures that your dataset is of enough size and quality, you can increase the truncation threshold by specifing `--trimming <INT>` to X Gbps you want.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9909107087704696,
      "result": {
        "original_header": "8.2 Genome profile",
        "type": "Text_excerpt",
        "value": "MitoFlex uses `nhmmer` and `tblastn` to search for mitogenome candidates, where `nhmmer` is used to identify how a region on a sequence is related to some PCG, which is quite remote but accurate enough. This process is of high tolerance and profile can be used across phylums. BUT, the accuracy, and the average length of alignment, will be then severely reduced, where it may be difficult for MitoFlex to identify the fragments of contigs, or to determine where the sequence is belong to. \nThe `tblastn` is used for a more closely related homology search, and used to determine and filter out the sequences not belonging to the taxanomy clade expected, which is categorized as contamination. But if none of the gene related to the clade annotated by searching through `tblastn`, the program will remove it incorrectly. Also it will affect the `annotation` module, so there may be a mismatch for the `findmitoscaf` and the `annotation` results, where mainly indicates the protein database currently have is of not enough records, and an additional search using other methods of annotation, for example a `MITOS` web server is recommended. \n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9491617666509004,
      "result": {
        "original_header": "9 Extending the function of MitoFlex",
        "type": "Text_excerpt",
        "value": "Although MitoFlex has already implemented a full workflow to filter, assemble and annotate the mitogenome, and all of this can be done in one-click, it also support to modify some behaviour if you want to do. This section is for extending MitoFlex for your own usage, though most users may not have the need to do this. \nMitoFlex is designed for extendability and readability, to make users to extend it if they find the tools used by MitoFlex are not good enough or the workflow could be even optimized. Extending the function should not be an hard task as MitoZ. \nMitoFlex is written in Python 3.6, so modifying the original workflow of MitoFlex requires a basic knowledge of the Python programming language.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.942480975942865,
      "result": {
        "original_header": "9.0 Calling the MitoFlex from other ways",
        "type": "Text_excerpt",
        "value": "Bash is not always the solution, in a certain circumstances an call from python inside could be better because it allows deeper profiling and monitoring, and controlling. For example deploying and integrating the MitoFlex with environments like `Jupyter` or web servers like `Django` or `Flask`. \nSince the only goal of decorators is to expose the original methods of Python to the command line, calling the methods could be easy, but should be catious because a raw calling could bypass some of the fuse methods of MitoFlex, which could make the arguments parsed and processed not correctly, or even leads to an unknown end. \nAll MitoFlex function takes an Argument object as the only arguments, it's from the [parser.py](utility/parser.py), working like a context argumentin certain CLI builder like `invoke` or others, it's very simple because actually it's just a wrapper of `**kwargs` to reduce coding and improve code redability.\nCasting and passing the Argument instance is easy:\n```python\nfrom utility.parser import Arguments\nargs = Arguments({'foo':'bar', 'lorem':'ipsum'})\nprint(args.foo) # prints 'bar'\n```\nOnce you obtain an Argument instance, you can directly call the function like this:\n```python\nimport MitoFlex\nMitoFlex.all(args)\n```\n \nBut this is strongly NOT recommended, because it didn't follow the parser mechanism of MitoFlex, which makes the raw arguments to be passed to the function. \n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9059317143664726,
      "result": {
        "original_header": "9.1 Creating more subcommands",
        "type": "Text_excerpt",
        "value": "MitoFlex mainly use two decorators, `@parse_func` and `@arg_prop` from [parser.py](utility/parser.py), to profile and collect functions needed to be a subcommand of MitoFlex runtime, which means that  attaching the `@parse_func` decorator will expose the function to commandline, and using a `@arg_prop` decorator will add a argument to it.\n```python\n# Using a parse_func decorator will make this function 'visible' from command line.\n# Also you can specify the parser groups to it.\n@parse_func(func_help='example help', parents=[universal_parser])\n# Using a arg_prop decorator will make this function tries to acquire an argument\n# from command line, you can set many of the properties as you wish.\n# By default you don't need to explicitly specify the type of variables, the MitoFlex\n# will tried to use the type of default value at first, then turns to the str as\n# it can accepts other types without losing data.\n@arg_prop(dest='bar', help='fun args', default=1, type=float, required=True)\n# An exception is the type bool, types or metavars will be disposed if the default\n# value is a boolean, which makes the MitoFlex converts it to an action switch without\n# considering other things. 'store_true' will be applied to variables with a False\n# default value and vise versa.\n@arg_prop(dest='switch', help='switchy', default=False)\n# Another exception is the choices arguments, which will also disable specifying\n# the type and metavar because all the type should be determined through the list.\n@arg_prop(dest='list', help='of choices', choices=['foo', 'bar'], default='foo')\n# The commandline underscore conversion is not applied here for the consistency\n# of code.\n@arg_prop(dest='under_score', help='haha')\n# The function requires and only requires a object, Arguments, from the\n# utility/parser.py, arguments will be passed as attributes of the object.\ndef foo(args):\n    print(args.bar)\n    print(args.under_score)\n    print(args.switch)\n\n    # For further consideration, attributes are modifiable in the object, and\n    # this will not be dropped outside the scope because it's actually accessing\n    # the class data. This could be powerful, but it needs you to take it\n    # carefully.\n    def bar(args):\n        args.c = 1\n    bar(args)\n    print(args.c)\n```\nCalling the new added method from bash will be just like this and with output:\n```bash\npython3 MitoFlex.py foo --bar 2.0 --switch --under-score fun\n\n2.0     # print(args.bar)\nfun     # print(args.under_score)\nTrue    # print(args.switch)\n1       # print(args.c)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8531427485218727,
      "result": {
        "original_header": "9.2 Creating parameter groups",
        "type": "Text_excerpt",
        "value": "Most methods shares a set of parameters, like thread numbers or input fastq file. Specifying the parameters repeatedly could be a problem, and validation will be difficult. So MitoFlex implements a parameter group processing mechanism to make this progress easier to be defined.\nTo create a argument group, you need to import and execute the method `register_group` from the module [parser.py](utility/parser.py):\n```python\nfrom utility.parser import register_group\n\n# Argument groups support a callback function to reduce the code repeatence.\n# You can modify and read the attributes straightforward and it will pass to the\n# every downstream processors.(e.g. other handlers or the main function)\ndef handler(args):\n    try:\n        args.arglist = args.str_list.split(',')\n    except Exception:\n        print('Error occured when parsing the argument str-list!')\n    # Returning value tells MitoFlex whether to run the process or not, returning\n    # True means the processed arguments are valid, and vise versa.\n        return False\n    return True\n\nfoo_parser, foo_group = register_group('Test parser', [\n    # Group arguments have almost the same options like the arg_prop function,\n    # please refer to the arguments.py to check it out.\n    {\n        # The conversion rule applies here, because the arguments are quite\n        # separated from the processing codes.\n        # I much prefer - to _ because _ needs Shift + -, but - only needs one.\n        'name':'str-list',\n        'default':'1,2,3,4,5',\n        'help':'input a set of numbers separated by comma(,)'\n    }\n], func=handler) # Specify the needed processor here.\n\n# When multiple parser are specified, they follows an order of list parents to\n# execute, this is important if there's a parser relies on other parser.\n@parse_func(func_help='test func', parents=[universal_parser, foo_parser])\ndef bar(args):\n    # Here we can use the argument directly created and processed by the handler.\n    print(args.arglist)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9732227202539855,
      "result": {
        "original_header": "10 Reusing my code",
        "type": "Text_excerpt",
        "value": "I'm very glad to see that my code is used in other fields, even in non-bioinformatic way. But sadly this toolkit is done in a hurry, and lacks detailed utilization of design patterns, so some part of it may look ugly, and even confusing to understand. This toolkit have incubated many other repositories that I've found something worth to deal with, but they all require some time before being developed, since I have to finish my courses as a undergraduate in SZU. \nThe [utility](utility/) folder contains most helper classes and methods used in the program development. If you want to directly reuse the code I wrote in related research field(mitogenome analyzing, for example), please cite my paper if you will publish one, if you want to implement a similar workflow yourself, please cite the MitoZ's paper since this program is inspired from the former toolkit. \nThe argument [parser](utility/parser.py) of this software is quite useful, but sadly I strongly not recommend you to use it directly in the program, since it was a temporarily made argparse wrapper just in three days, much code here is neither clean, nor easy to use, though already suitable for MitoFlex's current need and hard to rewrite one in short time. If you want to implement a workflow into a similar framework without having too much coding(like directly facing the argparse module), better integration of other caller besides bash or command prompt, for example a `Jupyter` web notebook or a `Django` or `Flask` server, and more flexible, modularized, clean code and code structure, please refer to the `ArgWraps`, a [repo](https://github.com/Prunoideae/ArgWraps) pinned on my GitHub page. \nFor the analyzer of Washington University Secondary Structure (WUSS), any rewriting is welcomed, since the output format of Infernal is quite messy, the parser of this can only accept annotations in one line (though it can parse any structure if sequence and fold string are given directly), and I have no idea on how to parse the file since it seems to have no actual format for me to write the parser. Any help on this is gratefully welcomed.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Prunoideae/MitoFlex/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "faq": [
    {
      "confidence": 1,
      "result": {
        "original_header": "6.2 Mitogenome sequences not found in `findmitoscaf`, or not outputting enough sequences in assembly",
        "parent_header": [
          "6 Frequently occured problems"
        ],
        "type": "Text_excerpt",
        "value": "There are several possible problems to make this happen. Check if your run is :\n\n1. of low bps? Like only 1.5Gbps of the data, if so, please specify a more tolerant depth list, less reads decrease the overall depth of sequences, your result may be filtered out during the iteration.\n2. of low quality? It could be happened sometimes, if your raw data is of too many other sequences, like contaminated or just because it's poor, then it will happens as above.\n3. specified a too strict depth list? In most test cases, target sequence depths varies from 300 to 1000, in dedicated result it can go even up to 10000, result sequences will just be dropped out if your sequences is of not enough depth.\n4. analysing species of small database? `findmitoscaf` module depends on database much, if the species you want to assemble is having too few data, it could make MitoFlex fail to detect mitogenome sequences, if so, please extend the database by adding more profile.\n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "6.3 \"Iteration broke at kmer = x, since no no valid contig in kmer = y is done!\"",
        "parent_header": [
          "6 Frequently occured problems"
        ],
        "type": "Text_excerpt",
        "value": "This is because no sequences is output during the last iteration, no any of the contig will output if the iteration continues, so MitoFlex terminate the assembly. It's similar to problem `6.2`.\n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "6.4 Input file 1 and 2 have different sizes! This could cause loss on rawdata, or even crash the program",
        "parent_header": [
          "6 Frequently occured problems"
        ],
        "type": "Text_excerpt",
        "value": "Your input PE reads are not of the same size, it indicates a mismatch between two file, and it will likely stop the programs like `bwa` from starting, halting the pipeline, or have some graph element missing. In most of time maybe this will work fine, but there maybe times that later program refuse to startup.\n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "6.5 Module XXX is not found! / Cannot import helper module XXX",
        "parent_header": [
          "6 Frequently occured problems"
        ],
        "type": "Text_excerpt",
        "value": "You have an invalid installation, or environment setup, please check if your installation is good, and you have switched to a proper conda environment.\n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "6.6 Cannot validate folder / Folder X already exists",
        "parent_header": [
          "6 Frequently occured problems"
        ],
        "type": "Text_excerpt",
        "value": "MitoFlex failed to create a folder, or a previous folder exists so MitoFlex can't make sure if the folder is removable or not. Please check your permission or try to investigate the files in the folder and remove it if it's safe to remove.\n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "6.7 I'm using MitoFlex on flatworms, but the closely-related species is in Echinodermata",
        "parent_header": [
          "6 Frequently occured problems"
        ],
        "type": "Text_excerpt",
        "value": "MitoFlex doesn't know what species you are processing, the only thing it has just a local protein database, which contains many protein records of different species.\n\nSince then, such a species-judging method is not driven by something that so accurate, MitoFlex can only check out the numbers of PCGs that certain species contains, if a species contributed the most PCGs during the annotation, then it's the closet-related progress, and if two or more species contributed the same amount, only a random *one* of them can be selected.\n\nSo, the accuracy is neither guaranteed nor possible. If you want to use MitoFlex to aid your classification of species, I would suggest you to check out the `wise.csv` under the `workname/temp/annotation` folder, it contains a full list of PCGs and corresponding species that are thought to be the mitogenome's hit, you may find something more in this.\n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "6.8 Running Circos error",
        "parent_header": [
          "6 Frequently occured problems"
        ],
        "type": "Text_excerpt",
        "value": "Your genome sequences is oversized, even after some deduplication it still have over 25000 points to draw, which is too many for drawing a good and clean plot.\n\nSuch a large genome should not occur commonly, if you can sure about this genome is what you want, please change your `max_points_per_track` in Circos settings to a larger number to make Circos actually draw this.\n\nSuch a problem only affects visualization, no effect on previous methods.\n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "6.9 Processing species not included in database",
        "parent_header": [
          "6 Frequently occured problems"
        ],
        "type": "Text_excerpt",
        "value": "If there's enough support data, you can refer to chapter 7 to add data to build a taxonomy database for the species. Any pull requests to add new taxonomy clade is gracefully welcomed.\n\nOr, you can just use a clade close to the species you have. In this way, filtering, assembling and mitogenome scaffolding merging and finding will not be influenced much, while annotation could have problem since it depends heavily on the local database. External usage of annotation tools, like `MITOS` or others is then recommended in this situation.\n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Prunoideae/MitoFlex/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Prunoideae/MitoFlex"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MitoFlex"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "2.2 From git repository (Conda required)",
        "parent_header": [
          "2 Installation"
        ],
        "type": "Text_excerpt",
        "value": "For certain conditions, like if you don't have a sudo permission or root command, you can deploy MitoFlex from git directly.\n\nTo download MitoFlex from Github, simply type:\n\n``` bash\ngit clone --depth=1 https://github.com/Prunoideae/MitoFlex\n```\n\nAnd git will pull the MitoFlex into your current directory, downloading the repo as zip and extract it to installation folder is also ok.\n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2.2.1 Installing Conda",
        "parent_header": [
          "2 Installation",
          "2.2 From git repository (Conda required)"
        ],
        "type": "Text_excerpt",
        "value": "Conda is required to create the environment MitoFlex needed instead, or you can install all the packages manually. Both [Anaconda](https://anaconda.org/anaconda/python) and [Miniconda](https://conda.io/miniconda.html) could be useful, but Miniconda is recommended if you don't need a big environment.\n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2.2.2 Setting up channels",
        "parent_header": [
          "2 Installation",
          "2.2 From git repository (Conda required)"
        ],
        "type": "Text_excerpt",
        "value": "These three channels should be the universal solution for any conda package installing.\n\n```bash\nconda config --add channels defaults\nconda config --add channels bioconda\nconda config --add channels conda-forge\n```\n\nAs the network situation varies, mirror channels, or other alternative channels could be setup instead of the channels above for a better querying speed.\n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2.2.3 Creating environment for MitoFlex",
        "parent_header": [
          "2 Installation",
          "2.2 From git repository (Conda required)"
        ],
        "type": "Text_excerpt",
        "value": "Though you actually can setup the environment from the ground, using conda for creating virtual environment is recommended, as there may be other tools requiring different environment, and even requirements that are conflict to MitoFlex's, is actually a better choice.\n\nMitoFlex requires a bunch of packages to run, you can install them in one line like:\n\n```bash\nconda create -n {environment name here} --file requirements.txt\n```\n\nAll directly required packages are listed, if you don't want to use conda to install them:\n\n```text\nnumpy pandas ete3 biopython psutil\nmegahit blast infernal circos hmmer wise2 bwa samtools infernal\n```\n\nYou will have to solve the dependencies of required packages if not using conda. The upper 4 are python modules, and the lower ones are programs.\n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2.2.4 Setting up NCBI taxanomy database",
        "parent_header": [
          "2 Installation",
          "2.2 From git repository (Conda required)"
        ],
        "type": "Text_excerpt",
        "value": "Running `ncbi.py` from command line automatically updates the local database from NCBI taxanomy database.\n\n```bash\n./ncbi.py\n```\n\nUpdating database from network is not always stable. `ncbi.py` will fall back to the local `taxdump.tar.gz` if any error occurs in the process.\n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9136944910652048,
      "result": {
        "original_header": "4.1 Configuration file structure",
        "type": "Text_excerpt",
        "value": "MitoFlex's configuration file is more like a independent python file than a traditional configuration file (\\*.cfg or \\*.json or something).\n```python\n\n# Most arguments are just the same like it's brother in commandline.\nthreads = 8\n\n# The sub commands are specified by a recessive variable \"command\".\ncommand = 'all'\n\n# Also, you don't need to worry about the parameter order here.\n# MitoFlex will just update everything correctly.\n\n# Be aware: as the - character is not a valid character in the variables\n# of Python, all the - are translated into _ in the scripts.\ninsert_size = 150\n\n# Not specified parameters will use the default parameter, or parameters\n# passed through commandline.\n\n# MitoFlex first execute the configuration file as a independent python script,\n# then collects all the variables under the global scope as parameters. So\n# flexible parameter processing could be a possibility.\nfrom os import path\nfastq1 = path.abspath(\n    path.join('~', 'data_folder', 'seq_paucumara_falcata', 'data.1.gz'))\n\n# Also, MitoFlex will NOT check additional parameters passed through this way,\n# only update and merge the parameters in config file with the commandline\n# parameters. Temp variables will be passed but not processed.\nfoo = 'bar'\n\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9905794488745954,
      "result": {
        "original_header": "4.2 Generating configuration file",
        "type": "Text_excerpt",
        "value": "Besides creating a highly customized configuration file from the earth, you can also generates a configuration file from the commandline by specifying the option `--generate-config`, or `-g` in short. Then the MitoFlex will create a configuration file named `generated_config.py` under your current working directory. \nConfiguration generated in this way will have all the arguments needed by the specified subcommand (e.g. all or filter) in place, arguments passed latter will also be written into the config, overrides the default values predefined in scripts.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9987137366786455,
      "result": {
        "original_header": "7.1 Building nhmmer profile",
        "type": "Text_excerpt",
        "value": "Building HMM profile needs the access of `hmmbuild`, which is included in the HMMER package, the command requires a Multiple Sequence Alignment (MSA) file, which is obtained from aligning sequences you want to build profile with by serveral alignment program like MAFFT or ClustalW. The `hmmbuild` in installed version supports most file format, like FASTA, Stockholm or ClustalW.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9162519595893349,
      "result": {
        "original_header": "7.2.3 Adding Covariance Models for tRNA search",
        "type": "Text_excerpt",
        "value": "Please put your cm file into the [tRNA_CM](profile/tRNA_CM) folder, MitoFlex will automatically use files under this directory for tRNA searching.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8361112032576806,
      "result": {
        "original_header": "9 Extending the function of MitoFlex",
        "type": "Text_excerpt",
        "value": "Although MitoFlex has already implemented a full workflow to filter, assemble and annotate the mitogenome, and all of this can be done in one-click, it also support to modify some behaviour if you want to do. This section is for extending MitoFlex for your own usage, though most users may not have the need to do this. \n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8122498771883491,
      "result": {
        "original_header": "4.2 Generating configuration file",
        "type": "Text_excerpt",
        "value": "Besides creating a highly customized configuration file from the earth, you can also generates a configuration file from the commandline by specifying the option `--generate-config`, or `-g` in short. Then the MitoFlex will create a configuration file named `generated_config.py` under your current working directory. \n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8382963714149527,
      "result": {
        "original_header": "9.0 Calling the MitoFlex from other ways",
        "type": "Text_excerpt",
        "value": "In here, a process function `process_arguments` is required from the [parser.py](utility/parser.py), it emulates how all the processer works and returns a processed Argument object, then you can call the subcommands in MitoFlex safely.\n```python\nfrom utility.parser import Arguments, process_arguments\nimport MitoFlex\n# Assuming the groups and the handlers are all registered here.\nargs = Arguments({'foo':'bar'})\nprocess_arguments(command='test', args=args)\nMitoFlex.test(args)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Prunoideae/MitoFlex/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "GNU General Public License v3.0",
        "spdx_id": "GPL-3.0",
        "type": "License",
        "url": "https://api.github.com/licenses/gpl-3.0",
        "value": "https://api.github.com/licenses/gpl-3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<https://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<https://www.gnu.org/licenses/why-not-lgpl.html>.\n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MitoFlex"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "Prunoideae"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 206729,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Grammatical Framework",
        "size": 51383,
        "type": "Programming_language",
        "value": "Grammatical Framework"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Rust",
        "size": 26617,
        "type": "Programming_language",
        "value": "Rust"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Gnuplot",
        "size": 9059,
        "type": "Programming_language",
        "value": "Gnuplot"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "QMake",
        "size": 2650,
        "type": "Programming_language",
        "value": "QMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Genero Forms",
        "size": 2115,
        "type": "Programming_language",
        "value": "Genero Forms"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Roff",
        "size": 703,
        "type": "Programming_language",
        "value": "Roff"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Prunoideae",
          "type": "User"
        },
        "date_created": "2020-09-18T13:09:31Z",
        "date_published": "2020-09-23T09:13:37Z",
        "description": "Rewritten much of the code relating to the merging, improved the speed of merging by about 10 times.\r\n\r\nFixed most of the bug and crashes in previous build. Stabled after tests.\r\n\r\nThis is a version still far from perfection, please stick to git clone for the newest version. Since most of the updates will ensure a increment in safety, performance and quality.",
        "html_url": "https://github.com/Prunoideae/MitoFlex/releases/tag/v0.2.9",
        "name": "v0.2.9",
        "release_id": 31410602,
        "tag": "v0.2.9",
        "tarball_url": "https://api.github.com/repos/Prunoideae/MitoFlex/tarball/v0.2.9",
        "type": "Release",
        "url": "https://api.github.com/repos/Prunoideae/MitoFlex/releases/31410602",
        "value": "https://api.github.com/repos/Prunoideae/MitoFlex/releases/31410602",
        "zipball_url": "https://api.github.com/repos/Prunoideae/MitoFlex/zipball/v0.2.9"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "1.1 Platform",
        "parent_header": [
          "1 System requirements"
        ],
        "type": "Text_excerpt",
        "value": "MitoFlex is developed under `Ubuntu 18.04.3 LTS on Windows Subsystem of Linux(WSL2)`, compiled and tested under `CentOS release 7.3.1611`. Unix like system should work fine, but since some part of the program is compiled in `Ubuntu` or `CentOS`, MitoFlex may have risk to fail if running on other OS, like MacOS, Windows system is obviously not suitable to run MitoFlex, but `WSL` can, though there will be some performance loss.\n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1.2 File system",
        "parent_header": [
          "1 System requirements"
        ],
        "type": "Text_excerpt",
        "value": "Installing MitoFlex requires about 1GB of space (Including dependency packages). Assembling needs about 50% to 200% of raw data's size to create and store temp files each run. Temp files could be deleted after the run, which will reduce the result to about 100MB size.\n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1.3 Memory",
        "parent_header": [
          "1 System requirements"
        ],
        "type": "Text_excerpt",
        "value": "It takes about 5-30G to assemble the genome from a 5Gbps pair-end rawdata sample with thread number set to 80 (`--thread_number 80`). The memory consumption is highly varied, mainly depends on the fragmentation and the quality of rawdata, a dataset with more focused reads on mitogenome will absolutely takes much lesser memory since the contigs are limited. It takes much lower memory space in comparison to MitoZ, as MitoFlex uses the succinct de Brujin Graph (sDBG), a succinct representation of de Brujin Graph. Improving the data quality could reduce the memory usage. Also, more threads requires more memory in steps, since the data being processed is larger in the same time.\n\nThe average RAM consumption of MitoFlex is usually at 5G or even lower at 8 threads or 80 threads, but there are a few points that will consume much resource, the first one is the graph construction of megahit, which takes from 5G to 20G, but assembly will then only takes 1-3G to be done, the second one is the nhmmer search part explicitly in findmitoscaf module, where it takes about 15G or higher for searching against all the profiles. The steps are not parallelly processed, so 20GB or so is enough to deal with any type of data, or even less if the sample is small.\n\nSo, a machine with over 32 GB spare RAM is recommended, giving more could be more robust to deal with samples which are quite messy. As the workflow develops even further, some part of the module may requires even more or less RAM.\n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1.4 CPU",
        "parent_header": [
          "1 System requirements"
        ],
        "type": "Text_excerpt",
        "value": "MitoFlex uses [megahit](https://github.com/voutcn/megahit) as assembler, thus requires more calculate power because multiple iteration of the graph is needed. The speed of assembly is mainly depends on how fragmentized the input reads are.\n\nA recent modification enables MitoFlex to shorten the process time by over 75%, and improved the accuracy and sensitivity of the assembly. Using a dataset of 5Gbps ([Run browser](https://trace.ncbi.nlm.nih.gov/Traces/sra/?run=SRR1946581)), MitoFlex took 15min to finish the whole pipeline with 8 threads of Intel 9700KF and 20GB RAM usage on my laptop for developing.\n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1.5 GPU",
        "parent_header": [
          "1 System requirements"
        ],
        "type": "Text_excerpt",
        "value": "MitoFlex does not explicitly requires GPU in the work, but a GPU will accelerate the process of sDBG building. The server I'm testing MitoFlex on has no GPU, so I can't tell much at this part.\n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3 Data requirement",
        "type": "Text_excerpt",
        "value": "MitoFlex depends on the quality more than the size of data, it will not throw any error if your input fastq file is too small or something, but the result may be of low quality or nothing if the raw dataset is too small or unqualified to assemble a genome.\n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "2.2.5 Run MitoFlex",
        "parent_header": [
          "2 Installation",
          "2.2 From git repository (Conda required)"
        ],
        "type": "Text_excerpt",
        "value": "To test if MitoFlex is installed correctly, type :\n\n```bash\n./MitoFlex.py load_modules\n```\n\nIf all modules are appeared to be correctly loaded, it indicates that you have all the required python modules installed, to have a test run on MitoFlex, please extract the files to somewhere from the `test.tar.gz` (in this [repository](https://github.com/Prunoideae/Samples)), and run :\n\n```bash\n/path/to/MitoFlex.py all workname test --use-list --fastq1 /path/to/fastq1 --fastq2 /path/to/fastq2\n```\n\nor you can use the `test_config.py` config file in the directory to test if the things are running correctly, just run:\n\n```bash\n/path/to/MitoFlex.py --config /path/to/config\n```\n\nthis config assumes that the sample fastq is under the same directory as config does.\n\nThe test sample is done in 3min on my computer (Intel i7-9700KF, WSL2 Ubuntu) with 8 threads. 1-2 GB of spare RAM is required to run the sample.\n\nResult will be the similar as that in `test.tar.gz` if there's no error in your installation, sequence should be cicular, PCGs and rRNAs should all be founded, otherwise you need to check the whole progress.\n\nExporting the directory to `PATH` environment variable is recommended for calling it more easily.\n\n```bash\necho 'export $PATH=\"/path/to/installation/directory:$PATH\"' >> '/path/to/rc'\n```\n\nWhere rc stands for the .*rc file used by your terminal to load a certain set of commands at logging. Like `.bashrc` or `.zshrc`.\n\nFor a more detailed explanation of MitoFlex's arguments, please check out the program's help :\n\n```bash\nMitoFlex.py [module] <-h or --help>\n```\n\nThis helps you better understand how MitoFlex will work, and so you can tune MitoFlex to meet your need in mitogenome assembly.\n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "6.8 Running Circos error",
        "parent_header": [
          "6 Frequently occured problems"
        ],
        "type": "Text_excerpt",
        "value": "Your genome sequences is oversized, even after some deduplication it still have over 25000 points to draw, which is too many for drawing a good and clean plot.\n\nSuch a large genome should not occur commonly, if you can sure about this genome is what you want, please change your `max_points_per_track` in Circos settings to a larger number to make Circos actually draw this.\n\nSuch a problem only affects visualization, no effect on previous methods.\n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "documentation",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 08:29:34",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 19
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "6.1 \"Killed\" or showing not enough memory, or something like that",
        "parent_header": [
          "6 Frequently occured problems"
        ],
        "type": "Text_excerpt",
        "value": "Your machine is running out of memory, please add more. This is not a code bug or something, it's necessary for MitoFlex to use some memory, to assemble from GBs of reads, or picking up candidate from millions of contigs.\n"
      },
      "source": "https://raw.githubusercontent.com/Prunoideae/MitoFlex/master/README.md",
      "technique": "header_analysis"
    }
  ]
}