{
  "application_domain": [
    {
      "confidence": 10.63,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/BenNordick/HiLoop"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-08-22T21:07:17Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-05-10T23:17:55Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9313597795513431,
      "result": {
        "original_header": "HiLoop",
        "type": "Text_excerpt",
        "value": "Toolbox for exploring high-feedback motifs in gene regulatory networks.  \nIf you use HiLoop in your work, please cite: \n> Benjamin Nordick and Tian Hong (2021). Identification, visualization, statistical analysis and mathematical modeling of high-feedback loops in gene regulatory networks.\n> *BMC Bioinformatics* **22**, 481. https://doi.org/10.1186/s12859-021-04405-z\n \n"
      },
      "source": "https://raw.githubusercontent.com/BenNordick/HiLoop/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9303392711278532,
      "result": {
        "original_header": "Obtaining a network",
        "type": "Text_excerpt",
        "value": "This repository contains several ready-to-use transcriptional regulatory networks: \n* `trrust.gxml`: [TRRUST](https://www.grnpedia.org/trrust/) version 2 full human network\n* `huang_emt.gxml`: Epithelial-mesenchymal transition control network examined by [Huang *et al.* 2017](https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1005456) (includes miRNA)\n* `tcell.gxml`: T cell development network curated by [Kueh & Rothenberg 2011](https://onlinelibrary.wiley.com/doi/abs/10.1002/wsbm.162)\n* `ye_tcell.gxml`: Alternative interpretation of a smaller part of the T cell development network used by [Ye *et al.* 2019](https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1006855) \nSimilar files suffixed with `_scc` are the main strongly connected components of the respective network.\nNone of the other, minor strongly connected components in any of these networks contain more than one cycle. \nIf you would like to examine only a *specific* part of a network, you can extract the subnetwork induced by a set of nodes (with either HiLoop virtual environment activated): \n`omnipath.gxml` is a very large network containing transcriptional, miRNA post-transcriptional, and protein destabilization post-translational interactions from the\n[OmniPath database](https://omnipathdb.org/) ([T\u00fcrei *et al.* 2021](https://www.embopress.org/doi/full/10.15252/msb.20209923)).\nYou would likely want to take a subnetwork rather than using it directly. \n**Note:** The common networks whose data is provided in HiLoop format are not necessarily under the same license (MIT) as HiLoop.\nThey may have restrictions on e.g. commercial use. \n"
      },
      "source": "https://raw.githubusercontent.com/BenNordick/HiLoop/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9212528736225838,
      "result": {
        "original_header": "Counting high-feedback topologies",
        "type": "Text_excerpt",
        "value": "For even moderately large networks, computing all cycles is infeasible.\nTherefore, you usually must decide on a maximum cycle length to consider.\nFor example, 5 is the limit of feasibility for the TRRUST2 network.\nYou may also set an upper limit on the size of topology you would consider interesting.\nBecause nodes outside the main strongly connected component cannot be involved in any cycle that is fused with a cycle in the SCC, they cannot be involved in any high-feedback topologies.\nTherefore, counting the SCC of any of the provided networks produces the same count of motif instances (except PFLs) as the full network, but is modestly more efficient. \nTo count high-feedback motifs of at most 10 nodes in the TRRUST2 network: \n    (hiloop_pypy) $ python countmotifs.py trrust_scc.gxml --maxcycle 5 --maxnodes 10 --checknfl\n    Finding cycles\n    Creating cycle intersection graphs\n    843 cycles, 154968 node sharings\n    Searching for Type I and mixed-sign high-feedback motifs\n    Checking fused pairs\n    Searching for Type II and MISA motifs\n    PFL     399         \n    Type1   378454\n    Type2   337621\n    MISA    142931\n    MISSA   5185\n    uMISSA  224\n    MixHF   2058336\n    Excite  77426 \nHiLoop reports counts of these motifs: \n|Code    |Name                                    |Definition                                                                                   |\n|--------|----------------------------------------|---------------------------------------------------------------------------------------------|\n|`PFL`   |Positive feedback loop                  |Cycle with an even number of represssions                                                    |\n|`Type1` |Type-I motif                            |Three fused PFLs (i.e. all sharing at least one node)                                        |\n|`Type2` |Type-II motif                           |Two non-overlapping PFLs each sharing at least one node with a third PFL                     |\n|`MISA`  |Mutual inhibition self-activation       |Subtype of Type-II in which both \"bridging\" segments of the connecting PFL are net-repressive|\n|`MISSA` |Mutual inhibition single-self-activation|Two fused PFLs, exactly one of which contains any repression edges                           |\n|`uMISSA`|Mini-MISSA                              |Subtype of MISSA in which the pure-activation cycle is a self-loop                           |\n|`MixHF` |Mixed-sign high-feedback                |Three fused cycles, of which at least one is positive and at least one is negative           |\n|`Excite`|Excitable                               |A positive feedback loop fused to a negative feedback loop                                   | \n"
      },
      "source": "https://raw.githubusercontent.com/BenNordick/HiLoop/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9747532425636318,
      "result": {
        "original_header": "Testing for enrichment",
        "type": "Text_excerpt",
        "value": "`sampledpvalue.py` (PyPy virtual environment recommended) rapidly computes the enrichment of feedback-rich topologies in a network by generating random permutations and estimating the quantity of high-feedback topologies in each with a cycle tuple sampling approach. \nYou must again consider the maximum cycle length and motif instance size that you would like to test for.\nUse the full, original network as input so that the space of possible alternative networks can be more thoroughly explored, providing a more conservative enrichment report.\nSpecify the number of permutations to consider and how many samples to take from each.\nTo reduce noise in the estimate of the input network's metrics, use `--basetrials` to specify how many sampling runs of the input to average together.\nIf the sign of regulations performed by some species should remain constant&mdash;e.g. miRNAs can only repress&mdash;provide a regex to `--fixedsign` to match those species' names. \n`FracLE` gives the empirical p-value, specifically the proportion of permuted networks that match or exceed the input network in each metric.\nHiLoop computes enrichment of the below metrics, including some ratios; you should determine in advance which are meaningful to you. \n|Code     |Description                                                                             |\n|---------|----------------------------------------------------------------------------------------|\n|`PFLs`   |Number of positive feedback loops                                                       |\n|`PFL/FL` |Ratio of positive feedback loops to cycles                                              |\n|`Type 1` |Number of Type-I topologies                                                             |\n|`Type 2` |Number of Type-II topologies                                                            |\n|`MISA`   |Number of mutual inhibition self-activation Type-II topologies                          |\n|`MixHF`  |Number of mixed-sign high-feedback topologies                                           |\n|`T1/Fus3`|Ratio of Type-I topologies to fused cycle triplets                                      |\n|`T2/Brdg`|Ratio of Type-II topologies to arrangements of 2 independent cycles \"bridged\" by a third|\n|`Excite` |Number of excitable topologies                                                          |\n|`MISSA`  |Number of mutual inhibition single-self-activation topologies                           |\n|`MISSA/F`|Ratio of MISSA topologies to fused pairs of PFLs                                        |\n|`uMISSA` |Number of mini-MISSA topologies                                                         | \nYou can specify an output CSV file with `--saveraw` to record each permutation's metrics for further analysis (e.g. histogram plotting).\nTo only consider strongly connected permutations, use the `--scc` switch and provide a strongly connected network as input.\n \n"
      },
      "source": "https://raw.githubusercontent.com/BenNordick/HiLoop/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9240058852542514,
      "result": {
        "original_header": "Searching for multiattractor or oscillatory dynamics",
        "type": "Text_excerpt",
        "value": "`multistability.py` (CPython virtual environment required) tests random parameterizations of a model determined by the small input network.\nIt saves multistable and/or oscillatory systems, as requested, to a JSON report for further analysis.\n`summarizemultistability.py` creates hexbin plots, scatter-line plots, or heatmaps from such reports. \nFirst, run the parameter sampling and modeling script.\nSpecify an input GraphML file (of a small network like an extracted example, not a large original network) and an output JSON file.\n`--attractors` (default 2) sets the minimum number of distinct attractors for systems you are interested in.\n`--psets` specifies how many parameterizations to test. \nConsole output can be suppressed with `--quiet`.\nThe number of initial concentrations per species can be set with `--concs`.\nYou may want to decrease this from the default of 5 if your network has more than four nodes/species.\nIf you are interested in oscillations, set the reporting timestep `--dt` to less than 1.0 and the simulation length `--time` to at least 200.\nThe default reporting timestep of 5.0 provides better performance and high accuracy for point attractors, and can sometimes detect oscillatory attractors, but the oscillatory orbits will be poorly resolved.\nOscillations are unlikely to be consistently detected with the default simulation length of 50 time units.\n`--oscillators` allows reporting parameterizations that produce at least your specified number of oscillatory attractors, regardless of whether the total number of attractors meets the `--attractors` setting. \nOnce a dynamics report has been produced, visualizations can be created.\nFor all visualizations, specify the input JSON report and the output image file.\nIf your network is capable of generating oscillations, but you are not interested in them, you can pass the `--pointonly` switch to ignore all systems containing oscillations. \nFor cluster-heatmaps, use the `heatmap` command.\nTo add a colorbar for the heatmap concentration values, pass `--colorbar`.\nArc (connector) columns, indicating which attractors are part of the same system, can be added with `--connect arc`.\nIf you would like to remove a connector column or reduce the number of connectors, use `--connect-downsample` to specify the limit or retention probability for each kind of system.\nEach downsampling directive takes the form `systemtype:probability%` or `systemtype:count`.\nFor example, `3:50%` shows connectors for only 50% of all 3-attractor systems, `3att4ms:10%` shows connectors for only 10% of 3-attractor 4-monotonically-correlated-species systems, and `3att2ms:5` shows connectors for exactly five 3-attractor 2-monotonically-correlated-species systems.\nThis heatmap displays all connectors for 4-attractor systems, but no connectors for other kinds: \nTo cluster species as well as attractors, use the `--bicluster` switch.\nTo merge similar attractors from different systems, use the `--fold` option to specify the minimum distance between displayed attractors. \n"
      },
      "source": "https://raw.githubusercontent.com/BenNordick/HiLoop/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/BenNordick/HiLoop/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/BenNordick/HiLoop/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BenNordick/HiLoop"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "HiLoop"
      },
      "source": "https://raw.githubusercontent.com/BenNordick/HiLoop/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Setup",
        "parent_header": [
          "HiLoop"
        ],
        "type": "Text_excerpt",
        "value": "HiLoop is provided as a collection of Python scripts.\nIt is platform-agnostic, but its dependencies are generally easier to set up on Linux.\nIf you use Windows 10, you can install the convenient [Windows Subsystem for Linux](https://docs.microsoft.com/en-us/windows/wsl/install-win10).\n\nVirtual environments are strongly recommended for managing PyPI package dependencies.\nFor best performance, set up two virtual environments, one using standard Python (CPython) and the other using [PyPy](https://www.pypy.org/).\nCPython is required for the modeling/simulation library Tellurium, but PyPy is significantly faster for pure Python code.\n\nFor example, to set up the PyPy environment used for most HiLoop functionality:\n\n    $ /PYPY3_EXTRACTION_PATH/bin/pypy3 -m venv ~/venv/hiloop_pypy\n    $ source ~/venv/hiloop_pypy/bin/activate\n    (hiloop_pypy) $ pip install -r requirements.txt \n\nIf you encounter difficulties installing SciPy for PyPy, you may be missing system packages such as C/C++ or Fortran compilers, or the development resources for OpenBLAS, LAPACK, or Python.\nIt may be helpful to upgrade or install the pip packages `pip`, `setuptools`, `wheel`, or `pybind11` before attempting to install all packages listed in the requirements file.\n\nTo set up the CPython environment used for modeling (`deactivate` any previously activated virtual environment first):\n\n    $ python3 -m venv ~/venv/hiloop_cpy\n    $ source ~/venv/hiloop_cpy/bin/activate\n    (hiloop_cpy) $ pip install -r requirements_modeling.txt \n\nDrawing network diagrams requires Graphviz; install `graphviz` with your package manager (or from [its website](https://graphviz.org/download/)).\n"
      },
      "source": "https://raw.githubusercontent.com/BenNordick/HiLoop/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9887620393099731,
      "result": {
        "original_header": "Common Tasks",
        "type": "Text_excerpt",
        "value": "All common tasks can be accomplished by invoking a script from the command line.\nEnsure that you have an appropriate virtual environment (indicated in each subsection) activated first.\nYou can pass `--help` to a script for more details than are covered in this overview.\n \n"
      },
      "source": "https://raw.githubusercontent.com/BenNordick/HiLoop/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.808940144778939,
      "result": {
        "original_header": "Obtaining a network",
        "type": "Text_excerpt",
        "value": "    (hiloop_pypy) $ python subnetwork.py trrust.gxml my_small_network.gxml GATA1 CEBPA MYC WT1 \n"
      },
      "source": "https://raw.githubusercontent.com/BenNordick/HiLoop/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9474268881933751,
      "result": {
        "original_header": "Counting high-feedback topologies",
        "type": "Text_excerpt",
        "value": "If you are not interested in any motifs that involve negative feedback loops, you can omit `--checknfl` to significantly accelerate the process.\nProgress logging can be suppressed with `--quiet`.\n \n"
      },
      "source": "https://raw.githubusercontent.com/BenNordick/HiLoop/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9416815649327268,
      "result": {
        "original_header": "Searching for multiattractor or oscillatory dynamics",
        "type": "Text_excerpt",
        "value": "    (hiloop_cpy) $ mkdir -p modeling\n    (hiloop_cpy) $ python multistability.py ye_tcell.gxml modeling/ye_tcell.json --attractors 3 --psets 20000 \n"
      },
      "source": "https://raw.githubusercontent.com/BenNordick/HiLoop/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.9169068710902528,
      "result": {
        "original_header": "Obtaining a network",
        "type": "Text_excerpt",
        "value": "    (hiloop_pypy) $ python subnetwork.py trrust.gxml my_small_network.gxml GATA1 CEBPA MYC WT1 \n"
      },
      "source": "https://raw.githubusercontent.com/BenNordick/HiLoop/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8589581641173868,
      "result": {
        "original_header": "Testing for enrichment",
        "type": "Text_excerpt",
        "value": "    (hiloop_pypy) $ python sampledpvalue.py huang_emt.gxml 100000 1000 --basetrials 100 --maxcycle 5 --maxmotifsize 10 --fixedsign miR\n            FracLE\n    PFLs    0.02008\n    PFL/FL  0.0\n    Type 1  0.09939\n    Type 2  0.00062\n    MISA    0.08177\n    MixHF   1.0\n    T1/Fus3 0.0\n    T2/Brdg 0.0\n    Excite  1.0\n    MISSA   0.58516\n    MISSA/F 0.92578\n    uMISSA  0.16399  \n"
      },
      "source": "https://raw.githubusercontent.com/BenNordick/HiLoop/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8398077117780233,
      "result": {
        "original_header": "Searching for multiattractor or oscillatory dynamics",
        "type": "Text_excerpt",
        "value": "    (hiloop_cpy) $ python summarizemultistability.py modeling/ye_tcell.json modeling/ye_tcell_hex.png scatterplot --reduction TCF1/PU1 \n    (hiloop_cpy) $ python summarizemultistability.py modeling/ye_tcell.json modeling/ye_tcell_scatter.png scatterplot --reduction TCF1/PU1 --line --focus 4 \n    (hiloop_cpy) $ python summarizemultistability.py modeling/ye_tcell.json modeling/ye_tcell_heatmap.png heatmap --colorbar --connect arc --connect-downsample 4:100% else:0 \n"
      },
      "source": "https://raw.githubusercontent.com/BenNordick/HiLoop/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/BenNordick/HiLoop/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bioinformatics, enrichment-analysis, network-analysis"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "HiLoop"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "BenNordick"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 131132,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BenNordick/HiLoop/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 01:45:56",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Extracting example topologies",
        "parent_header": [
          "HiLoop",
          "Common Tasks"
        ],
        "type": "Text_excerpt",
        "value": "`examplemotifs.py` (PyPy virtual environment recommended) randomly selects instances of high-feedback topologies from a larger network.\nIt can save the selected subnetworks to GraphML files for dynamics investigations and/or render network diagrams highlighting the interconnected cycles.\n\nOnce again, a maximum cycle length must be set for large networks; subnetwork size may also be limited.\nThe `--images` (to save network diagram images) and `--networks` (to save networks as GraphML) options take Python format strings specifying the file name in terms of the motif type and a numeric ID.\nFor example, `{1}_{0}.png` would save the first Type-II example as `type2_1.png`.\nThe script runs until the requested number of examples for each requested motif have been found.\n\nFor example, to find 5 small (5 nodes at most) examples of Type-I and Type-II motifs in the TRRUST2 network, saving both images and networks:\n\n    (hiloop_pypy) $ mkdir -p examples\n    (hiloop_pypy) $ python examplemotifs.py trrust.gxml --find1 5 --find2 5 --maxcycle 5 --maxnodes 5 --images examples/{1}_{0}.png --networks examples/{1}_{0}.gxml\n\nThe `--logo` switch adds a summary diagram of the cycle interconnection pattern.\nThe `--reduceedges` switch allows using the same set of nodes multiple times by dropping some edges not involved in the selected cycles, thereby making the edge sets distinct.\nPress Ctrl+C to interrupt the script if it is progressing too slowly with the limitations you applied.\n"
      },
      "source": "https://raw.githubusercontent.com/BenNordick/HiLoop/master/README.md",
      "technique": "header_analysis"
    }
  ]
}