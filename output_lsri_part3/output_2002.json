{
  "application_domain": [
    {
      "confidence": 39.37,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "format": "cff",
        "type": "File_dump",
        "value": "cff-version: 1.2.0\nmessage: \"If you use this software, please cite it as below.\"\nauthors:\n- family-names: \"Laszuk\"\n  given-names: \"Dawid\"\n  orcid: \"https://orcid.org/0000-0001-6811-3253\"\ntitle: \"Python implementation of Empirical Mode Decomposition algorithm\"\nversion: 1.0.1\ndate-released: 2017-01-01\ndoi: 10.5281/zenodo.5459184\nurl: \"https://github.com/laszukdawid/PyEMD\""
      },
      "source": "https://raw.githubusercontent.com/laszukdawid/PyEMD/master/CITATION.cff",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "PyEMD",
          "Contact"
        ],
        "type": "Text_excerpt",
        "value": "If you found this package useful and would like to cite it in your work\nplease use the following structure:\n\n```latex\n@misc{pyemd,\n  author = {Laszuk, Dawid},\n  title = {Python implementation of Empirical Mode Decomposition algorithm},\n  year = {2017},\n  publisher = {GitHub},\n  journal = {GitHub Repository},\n  howpublished = {\\url{https://github.com/laszukdawid/PyEMD}},\n  doi = {10.5281/zenodo.5459184}\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/laszukdawid/PyEMD/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Laszuk, Dawid",
        "doi": "10.5281/zenodo.5459184",
        "format": "bibtex",
        "title": "Python implementation of Empirical Mode Decomposition algorithm",
        "type": "Text_excerpt",
        "value": "@misc{pyemd,\n    doi = {10.5281/zenodo.5459184},\n    howpublished = {\\url{https://github.com/laszukdawid/PyEMD}},\n    journal = {GitHub Repository},\n    publisher = {GitHub},\n    year = {2017},\n    title = {Python implementation of Empirical Mode Decomposition algorithm},\n    author = {Laszuk, Dawid},\n}"
      },
      "source": "https://raw.githubusercontent.com/laszukdawid/PyEMD/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/laszukdawid/PyEMD"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact",
        "parent_header": [
          "PyEMD"
        ],
        "type": "Text_excerpt",
        "value": "Feel free to contact me with any questions, requests or simply to say *hi*.\nIt's always nice to know that I've helped someone or made their work easier. \nContributing to the project is also acceptable and warmly welcomed.\n"
      },
      "source": "https://raw.githubusercontent.com/laszukdawid/PyEMD/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2016-08-09T20:02:34Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-01T15:44:15Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Python implementation of Empirical Mode Decompoisition (EMD) method"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "parent_header": [
          "PyEMD"
        ],
        "type": "Text_excerpt",
        "value": "Python implementation of the Empirical Mode\nDecomposition (EMD). The package contains multiple EMD variations and\nintends to deliver more in time.\n"
      },
      "source": "https://raw.githubusercontent.com/laszukdawid/PyEMD/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "EMD variations",
        "parent_header": [
          "PyEMD",
          "Introduction"
        ],
        "type": "Text_excerpt",
        "value": "-  Ensemble EMD (EEMD),\n-  \"Complete Ensemble EMD\" (CEEMDAN)\n-  different settings and configurations of vanilla EMD.\n-  Image decomposition (EMD2D & BEMD) (experimental, no support)\n-  Just-in-time compiled EMD (JitEMD)\n\n*PyEMD* allows you to use different splines for envelopes, stopping criteria\nand extrema interpolations.\n"
      },
      "source": "https://raw.githubusercontent.com/laszukdawid/PyEMD/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Available splines",
        "parent_header": [
          "PyEMD",
          "Introduction"
        ],
        "type": "Text_excerpt",
        "value": "-  Natural cubic (**default**)\n-  Pointwise cubic\n-  Hermite cubic\n-  Akima\n-  PChip\n-  Linear\n"
      },
      "source": "https://raw.githubusercontent.com/laszukdawid/PyEMD/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Available stopping criteria",
        "parent_header": [
          "PyEMD",
          "Introduction"
        ],
        "type": "Text_excerpt",
        "value": "-  Cauchy convergence (**default**)\n-  Fixed number of iterations\n-  Number of consecutive proto-imfs\n"
      },
      "source": "https://raw.githubusercontent.com/laszukdawid/PyEMD/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Extrema detection",
        "parent_header": [
          "PyEMD",
          "Introduction"
        ],
        "type": "Text_excerpt",
        "value": "-  Discrete extrema (**default**)\n-  Parabolic interpolation\n"
      },
      "source": "https://raw.githubusercontent.com/laszukdawid/PyEMD/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9440028399805191,
      "result": {
        "original_header": "JitEMD",
        "type": "Text_excerpt",
        "value": "Just-in-time (JIT) compiled EMD is a version of EMD which exceed on very large signals\nor reusing the same instance multiple times. It's strongly sugested to be used in\nJupyter notebooks when experimenting by modifyig input rather than the method itself. \nThe problem with JIT is that the compilation happens on the first execution and it can be\nquite costly. With small signals, or performing decomposition just once, the extra time\nfor compilation will be significantly larger than the decomposition, making it less performant. \nPlease see documentation for more information or [examples](./example/) for how to use the code.\nThis is experimental as it's value is still questionable, and the author (me) isn't proficient\nin JIT optimization so mistakes could've been made. \nAny feedback is welcomed. Happy to improve if there's intrest. Please open tickets with questions\nand suggestions. \n"
      },
      "source": "https://raw.githubusercontent.com/laszukdawid/PyEMD/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9811118896536583,
      "result": {
        "original_header": "EMD2D/BEMD",
        "type": "Text_excerpt",
        "value": "*Unfortunately, this is Experimental and we can't guarantee that the output is meaningful.*\nThe simplest use is to pass image as monochromatic numpy 2D array. Sample as\nwith the other modules one can use the default setting of an instance or, more explicitly,\nuse the `emd2d()` method.\n```python\nfrom PyEMD.EMD2d import EMD2D  #, BEMD\nimport numpy as np\n\nx, y = np.arange(128), np.arange(128).reshape((-1,1))\nimg = np.sin(0.1*x)*np.cos(0.2*y)\nemd2d = EMD2D()  # BEMD() also works\nIMFs_2D = emd2d(img)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/laszukdawid/PyEMD/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://pyemd.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/laszukdawid/PyEMD/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/laszukdawid/PyEMD/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "faq": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Why is EEMD/CEEMDAN so slow?",
        "parent_header": [
          "PyEMD",
          "F.A.Q"
        ],
        "type": "Text_excerpt",
        "value": "Unfortunately, that's their nature. They execute EMD multiple times every time with slightly modified version. Added noise can cause a creation of many extrema which will decrease performance of the natural cubic spline. For some tweaks on how to deal with that please see [Speedup tricks](https://pyemd.readthedocs.io/en/latest/speedup.html) in the documentation.\n"
      },
      "source": "https://raw.githubusercontent.com/laszukdawid/PyEMD/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 224
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/laszukdawid/PyEMD/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "laszukdawid/PyEMD"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PyEMD"
      },
      "source": "https://raw.githubusercontent.com/laszukdawid/PyEMD/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://zenodo.org/badge/latestdoi/65324353"
      },
      "source": "https://raw.githubusercontent.com/laszukdawid/PyEMD/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/laszukdawid/PyEMD/raw/master/example/simple_example.png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/laszukdawid/PyEMD/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "PyPi (recommended)",
        "parent_header": [
          "PyEMD",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "The quickest way to install package is through `pip`.\n\n> \\$ pip install EMD-signal\n\nIn this way you install the latest stable release of PyEMD hosted on PyPi\n"
      },
      "source": "https://raw.githubusercontent.com/laszukdawid/PyEMD/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "From source",
        "parent_header": [
          "PyEMD",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "In case, if you only want to *use* EMD and its variations, the best way to install PyEMD is through `pip`.\nHowever, if you want the latest version of PyEMD, anyhow you might want to download the code and build package yourself.\nThe source is publicaly available and hosted on [GitHub](https://github.com/laszukdawid/PyEMD).\nTo download the code you can either go to the source code page and click `Code -> Download ZIP`, or use **git** command line\n\n> \\$ git clone <https://github.com/laszukdawid/PyEMD>\n\nInstalling package from source is done using command line:\n\n> \\$ python3 -m pip install .\n\nafter entering the PyEM directory created by `git`.\n\nA quicker way to install PyEMD from source is done using `pip` and `git` in the same command:\n\n>\\$ python3 -m pip install git+https://github.com/laszukdawid/PyEMD.git\n\n**Note**, however, that this will install it in your current environment. If you are working on many projects, or sharing reources with others, we suggest using [virtual environments](https://docs.python.org/3/library/venv.html).\nIf you want to make your installation editable use the `-e` flag for [pip](https://packaging.python.org/en/latest/tutorials/installing-packages/)"
      },
      "source": "https://raw.githubusercontent.com/laszukdawid/PyEMD/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999999976613481,
      "result": {
        "original_header": "Links",
        "type": "Text_excerpt",
        "value": "- Online documentation: <https://pyemd.readthedocs.org>\n- Issue tracker: <https://github.com/laszukdawid/pyemd/issues>\n- Source code repository: <https://github.com/laszukdawid/pyemd>\n \n"
      },
      "source": "https://raw.githubusercontent.com/laszukdawid/PyEMD/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9997851476151249,
      "result": {
        "original_header": "JitEMD",
        "type": "Text_excerpt",
        "value": "To enable JIT in your PyEMD, please install with `jit` option, i.e. \n> \\$ pip install EMD-signal[jit]\n \n"
      },
      "source": "https://raw.githubusercontent.com/laszukdawid/PyEMD/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/laszukdawid/PyEMD/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "decomposition, signal-processing, time-series"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Apache License 2.0",
        "spdx_id": "Apache-2.0",
        "type": "License",
        "url": "https://api.github.com/licenses/apache-2.0",
        "value": "https://api.github.com/licenses/apache-2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   Copyright 2017 Dawid Laszuk \n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
      },
      "source": "https://raw.githubusercontent.com/laszukdawid/PyEMD/master/LICENSE.md",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PyEMD"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "laszukdawid"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 239636,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 580,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/laszukdawid/PyEMD/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "laszukdawid",
          "type": "User"
        },
        "date_created": "2021-12-28T21:23:59Z",
        "date_published": "2021-12-05T23:23:02Z",
        "description": "## v1.2.1\r\nLooses dependency versions for NumPy and SciPy.\r\n\r\n## v1.2.0\r\nAdds Whitenoise checks and other stuff.",
        "html_url": "https://github.com/laszukdawid/PyEMD/releases/tag/v1.2.1",
        "name": "PyEMD v1.2.1",
        "release_id": 54670932,
        "tag": "v1.2.1",
        "tarball_url": "https://api.github.com/repos/laszukdawid/PyEMD/tarball/v1.2.1",
        "type": "Release",
        "url": "https://api.github.com/repos/laszukdawid/PyEMD/releases/54670932",
        "value": "https://api.github.com/repos/laszukdawid/PyEMD/releases/54670932",
        "zipball_url": "https://api.github.com/repos/laszukdawid/PyEMD/zipball/v1.2.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "laszukdawid",
          "type": "User"
        },
        "date_created": "2021-08-12T21:57:20Z",
        "date_published": "2021-08-12T22:07:23Z",
        "description": "Someone on the internet shared something about someone making fun of something I did. That's it! No one makes fun a few times removed and completely removed from what I'm doing. Let's show this (presumably) person that we can do better.\r\n\r\nOut with v1!\r\n\r\nZeroVer: https://0ver.org/",
        "html_url": "https://github.com/laszukdawid/PyEMD/releases/tag/v1.0.0",
        "name": "Enough is enough. Bump to v1.",
        "release_id": 47777548,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/laszukdawid/PyEMD/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/laszukdawid/PyEMD/releases/47777548",
        "value": "https://api.github.com/repos/laszukdawid/PyEMD/releases/47777548",
        "zipball_url": "https://api.github.com/repos/laszukdawid/PyEMD/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contributors",
    "support",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 07:12:00",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 864
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Example",
        "parent_header": [
          "PyEMD"
        ],
        "type": "Text_excerpt",
        "value": "More detailed examples are included in the\n[documentation](https://pyemd.readthedocs.io/en/latest/examples.html) or\nin the\n[PyEMD/examples](https://github.com/laszukdawid/PyEMD/tree/master/example).\n"
      },
      "source": "https://raw.githubusercontent.com/laszukdawid/PyEMD/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "EMD",
        "parent_header": [
          "PyEMD",
          "Example"
        ],
        "type": "Text_excerpt",
        "value": "In most cases default settings are enough. Simply import `EMD` and pass\nyour signal to instance or to `emd()` method.\n\n```python\nfrom PyEMD import EMD\nimport numpy as np\n\ns = np.random.random(100)\nemd = EMD()\nIMFs = emd(s)\n```\n\nThe Figure below was produced with input:\n$S(t) = cos(22 \\pi t^2) + 6t^2$\n\n![simpleExample](https://github.com/laszukdawid/PyEMD/raw/master/example/simple_example.png?raw=true)\n"
      },
      "source": "https://raw.githubusercontent.com/laszukdawid/PyEMD/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "EEMD",
        "parent_header": [
          "PyEMD",
          "Example"
        ],
        "type": "Text_excerpt",
        "value": "Simplest case of using Ensemble EMD (EEMD) is by importing `EEMD` and\npassing your signal to the instance or `eemd()` method.\n\n**Windows**: Please don't skip the `if __name__ == \"__main__\"` section. \n\n```python\nfrom PyEMD import EEMD\nimport numpy as np\n\nif __name__ == \"__main__\":\n    s = np.random.random(100)\n    eemd = EEMD()\n    eIMFs = eemd(s)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/laszukdawid/PyEMD/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "CEEMDAN",
        "parent_header": [
          "PyEMD",
          "Example"
        ],
        "type": "Text_excerpt",
        "value": "As with previous methods, also there is a simple way to use `CEEMDAN`.\n\n**Windows**: Please don't skip the `if __name__ == \"__main__\"` section. \n\n```python\nfrom PyEMD import CEEMDAN\nimport numpy as np\n\nif __name__ == \"__main__\":\n    s = np.random.random(100)\n    ceemdan = CEEMDAN()\n    cIMFs = ceemdan(s)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/laszukdawid/PyEMD/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Visualisation",
        "parent_header": [
          "PyEMD",
          "Example"
        ],
        "type": "Text_excerpt",
        "value": "The package contains a simple visualisation helper that can help, e.g., with time series and instantaneous frequencies.\n\n```python\nimport numpy as np\nfrom PyEMD import EMD, Visualisation\n\nt = np.arange(0, 3, 0.01)\nS = np.sin(13*t + 0.2*t**1.4) - np.cos(3*t)\n\n# Extract imfs and residue\n# In case of EMD\nemd = EMD()\nemd.emd(S)\nimfs, res = emd.get_imfs_and_residue()\n\n# In general:\n#components = EEMD()(S)\n#imfs, res = components[:-1], components[-1]\n\nvis = Visualisation()\nvis.plot_imfs(imfs=imfs, residue=res, t=t, include_residue=True)\nvis.plot_instant_freq(t, imfs=imfs)\nvis.show()\n```\n"
      },
      "source": "https://raw.githubusercontent.com/laszukdawid/PyEMD/master/README.md",
      "technique": "header_analysis"
    }
  ]
}