{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/computational-biology/bpnet"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-01-17T09:52:44Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-12-21T13:04:55Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "This software is for computing base pair networks found in DNA/RNA. The software also calculates the overlap based network computations."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9076089642673745,
      "result": {
        "type": "Text_excerpt",
        "value": "\tThis program is for calculating the overlap between \n\ttwo bases in a nucluic acid for RNA. The output is\n\tstored in a .rob file with the same name of the .cor\n\tfile name.  \n\tBPNet uses several files for its work. These are kept in 'sysfiles' directory.\n\tcopy all of them and paste them in a folder. We prefer the following. \n\tBPNet can run in parallel mode. But for this OpenMP library should be installed\n\tin your machine.\n\t\tPARALLEL-MODE COMPILE\n\t\t\tcd src\n\t\t\tmake clean\n\t\t\tmake -f Makefileprll\n\t\n\t\tPARALLEL-MODE SETUP\n\t\t\tIn parallel mode, you have to do all the setup and path settings\n\t\t\tof the serial mode. In addition you have to set the OpenMP\n\t\t\tenvironment variable. If our machine has 4 cores and each having\n\t\t\t4 hyperthreads, i.e. 2x4 = 8 cpu. Then to achieve maximum from\n\t\t\tthe system, set the path as, \n\tA full list of output files are listed below. \n\t\txxxx_rna.pdb \n\t\t\tThis file stores the RNA part only in PDB format.\n\t\txxxx.out\n\t\t\tThis file stores all the base-pair information.\n\t\txxxx.adj\n\t\t\tIt stores the adjacency information.\n\t\txxxx.fasta\n\t\t\tThis file stores the nucleic acid primary sequence in fasta format.\n\t\txxxx.dbn\n\t\t\tThis file is the base pair information in dot-bracket notation.\n\t\txxxx.bpseq\n\t\t\tThis file is the base pair information in bpseq notation.\n\t\txxxx.dat\n\t\t\tThis file stores the secondary structure information in fasta format. \n\t\t\tThe sequence here will look like, HHHHCCLLL, in this way. Here H means \n\t\t\tthe corresponding base is in helix, C represent that the residue is in \n\t\t\tCoil, L Stands for Loop etc.\n\t\txxxx.hlx \n\t\t\tThis files stores the helix, loop and pseudo helix information.\n\t\txxxx_rna.pml \n\t\t\tThis one is to visualize the networks in RNA part only.\n\t\txxxx_cif.pml\n\t\t\tThis file is to visualize the same on the entire mmCIF file's context.\n\t\t\tThis program is an applet file ready for visualization using VARNA [Ref??] software.\n\t\t\tThis file stores all helix information.\n\t\t\tA postscript file is generated to visualize the base base interaction.\n\t\t\tThe program also generates two secondary structure file namely dbn and bpseq file.\n\t\txxxx.ps\n\t\t\tA postscript file to show the contact-map distribution.\n\t\txxxx_helix.pml\n\t\t\tTo visualize the networks in the context of other functional units like base pairs,\n\t\t\thelix, loops etc.\n\t\txxxx.html\n\t\t\tAn applet file is generated to visualize the secondary structures in a better way.\n\t\t\tThe applet is compatible with VARNA (http://varna.lri.fr).  \n\t\t-nettype=[basepair/contact]\n\t\t\tThis option indicates base pair or contact based network.\n\t\t\tDefault is 'contact' based network. \n\t\t-netzise=from-to    or   -netsize=size\n\t\t\tThis option generates the network of the mentioned size.\n\t\t\tdefault is 3-999999. \n\t\t-numexdeg=number\n\t\t\tThis one considers those networks where the total nodes with specific \n\t\t\tdegree is required. \n\t\t-cycles=number\n\t\t\tThis option generates the networks where there is at least two cycles. \n\t\t-wttype=[c1p-c1p]\n\t\t\tDefault BPNet considers E-val (Ref: https://doi.org/10.1080/07391102.2006.10507108)\n\t\t\tfor base pairs and surface overlap for contact based network. But these can be changed\n\t\t\tto C1'-C1' distance. \n\t\n\t\t\tEXAMPLE\n\t\t\t\tbpnet.linux xxxx.cif -wttype=c1p-c1p\n\t\t\t\tbpnet.linux xxxx.cif -wttype=c1p-c1p -nettype= basepair \n\t\t-wtcutoff=value\n\t\t\tDefault the contact based network considers any bases whose surface\n\t\t\tcontact greater than 0. But the user bay change it to a desired positive\n\t\t\tvalue. In that case all contacts greater ot equal to that value will be\n\t\t\tconsidered for contact based network. \n\n\tBASEPAIR RELATED OPTIONS\n\t\tBPNet accepts several options for base pair generations.\n\t\t\n\t\t-hbdist=value\n\t\t\tBPNet program uses 3.8A as the default distance of donor-acceptor\n\t\t\tatoms for Hydrogen bond. User may change the same using this option. \n"
      },
      "source": "https://raw.githubusercontent.com/computational-biology/bpnet/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/computational-biology/bpnet/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/computational-biology/bpnet/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "computational-biology/bpnet"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/computational-biology/bpnet/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9294673738259999,
      "result": {
        "type": "Text_excerpt",
        "value": "\t\tbpnet.linux [OPTIONS] [FILE...] \n      \tEASY-METHOD\n\t\tDownload the binary executable 'bpnet.linux' and place it to some suitable folder.\n\t\tDone. \n\tHARD-METHOD\n\t\tIf that does not work for you for any reason, then download the src folder \n\t\tand compile the same following the instructions given below. \n\t\tCOMPILE:\n\t\t\tcd src\n\t\t\tmake clean\n\t\t\tmake\n\t\t\n\t\tThen move the binary executable 'bpnet.linux' to your suitable path. \nSETUP \n\tBPNet uses several files for its work. These are kept in 'sysfiles' directory.\n\tcopy all of them and paste them in a folder. We prefer the following. \n\t\t/usr/local/bin \nPATH-SETTING \n\tBPNet reads system files through an environment variable called NUCLEIC_ACID_DIR. \n\tSuppose you have put all the files of 'sysfiles' directory in the /usr/local/bin, \n\tthen put the following line in your '.bashrc' file. \n\t\texport NUCLEIC_ACID_DIR=/usr/local/bin/\n\t\nPARALLEL-MODE \n\tBPNet can run in parallel mode. But for this OpenMP library should be installed\n\tin your machine.\n\t\tPARALLEL-MODE COMPILE\n\t\t\tcd src\n\t\t\tmake clean\n\t\t\tmake -f Makefileprll\n\t\n\t\tPARALLEL-MODE SETUP\n\t\t\tIn parallel mode, you have to do all the setup and path settings\n\t\t\tof the serial mode. In addition you have to set the OpenMP\n\t\t\tenvironment variable. If our machine has 4 cores and each having\n\t\t\t4 hyperthreads, i.e. 2x4 = 8 cpu. Then to achieve maximum from\n\t\t\tthe system, set the path as, \n\tTo run the program, go to the directory where the structure files are stored.\n\tThen run as follows.\n\t\t\n\t\tbpnet.linux xxxx.cif \n\t\t--version\n\t\t\tPrints the version of the program. \n\t\t\tEXAMPLE\n\t\t\t\tbpnet.linux  xxxx.cif -netsize=4-5\n\t\t\t\tbpnet.linux  xxxx.cif -netsize=3 \nBUG REPORT \n\t\tEmail bug reports to the bug-reporting address \n\t\t\u27e8roy.parthajit@gmail.com\u27e9  or \n\t\t\u27e8dhananjay.bhattacharyya@saha.ac.in\u27e9 \n"
      },
      "source": "https://raw.githubusercontent.com/computational-biology/bpnet/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.807888785448807,
      "result": {
        "type": "Text_excerpt",
        "value": "\t\tbpnet.linux [OPTIONS] [FILE...] \n\nRUN \n\t\t\tEXAMPLE\n\t\t\t\tbpnet.linux xxxx.cif -sugmed=false \n\t\t\tEXAMPLE\n\t\t\t\tbpnet.linux xxxx.cif -chgmed=false \n"
      },
      "source": "https://raw.githubusercontent.com/computational-biology/bpnet/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/computational-biology/bpnet/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bpnet"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "computational-biology"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 273822,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Fortran",
        "size": 164081,
        "type": "Programming_language",
        "value": "Fortran"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 95646,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 1343,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 249,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/computational-biology/bpnet/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 00:54:02",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}