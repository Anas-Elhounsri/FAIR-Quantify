{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citing",
        "parent_header": [
          "Hierarchical Alignment (HAL) Format API (v2.3)"
        ],
        "type": "Text_excerpt",
        "value": "Glenn Hickey, Benedict Paten, Dent Earl, Daniel Zerbino, and David\nHaussler.  HAL: A Hierarchical Format for Storing and Analyzing\nMultiple Genome Alignments. Bioinformatics. 2013. [Advance Online Access](http://bioinformatics.oxfordjournals.org/content/early/2013/03/16/bioinformatics.btt128.abstract)\n"
      },
      "source": "https://raw.githubusercontent.com/ComparativeGenomicsToolkit/hal/master/synteny/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ComparativeGenomicsToolkit/hal"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributors": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Code Contributors",
        "parent_header": [
          "Hierarchical Alignment (HAL) Format API (v2.3)"
        ],
        "type": "Text_excerpt",
        "value": "* Glenn Hickey (UCSC)\n* Joel Armstrong (UCSC)\n* Ngan Nguyen (UCSC)\n* Benedict Paten (UCSC)\n* Melissa Jane Hubisz (Cornell)\n* Mark Diekhans (UCSC)\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/ComparativeGenomicsToolkit/hal/master/synteny/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2012-03-20T17:58:31Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-29T19:06:01Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Hierarchical Alignment Format"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "halValidate",
        "parent_header": [
          "Hierarchical Alignment (HAL) Format API (v2.3)",
          "HAL Tools",
          "Summary Information"
        ],
        "type": "Text_excerpt",
        "value": "It is a good idea to check if a hal file is valid after creating it.\n\n\thalValidate mammals.hal\n"
      },
      "source": "https://raw.githubusercontent.com/ComparativeGenomicsToolkit/hal/master/synteny/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "halStats",
        "parent_header": [
          "Hierarchical Alignment (HAL) Format API (v2.3)",
          "HAL Tools",
          "Summary Information"
        ],
        "type": "Text_excerpt",
        "value": "Some global information from a HAL file can be quickly obtained using `halStats`.  It will return the number of genomes, their phylogenetic tree, and the size of each array in each genome.\n\n\t  halStats mammals.hal\n\nThe `--tree`, `--sequences`, and `--genomes` options can be used to print out only specific information to simplify iterating over the alignment in shell or Python scripts.\n"
      },
      "source": "https://raw.githubusercontent.com/ComparativeGenomicsToolkit/hal/master/synteny/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "halSummarizeMtuations",
        "parent_header": [
          "Hierarchical Alignment (HAL) Format API (v2.3)",
          "HAL Tools",
          "Summary Information"
        ],
        "type": "Text_excerpt",
        "value": "A count of each type of mutation (Insertions, Deletions, Inversions, Duplications, Transpositions, Gap Insertions, Gap Deletions) in each branch of the alignment can be printed out in a table.\n\n     halSummarizeMutations mammals.hal\n\nSubtrees can be specified using the `--targetGenomes` or `--rootGenome` option.  The `--maxGap` option is used to distinguish from small, 'gap' indels and larger indels.  This distinction is somewhat arbitrary (but conventional).  HAL allows gap indels to be nested within larger rearrangements:  ex. an inversion with a gap deletion inside would be counted as a single inversion, but an inversion containing a non-gap event would be identified as multiple independent inversions.\n\n     halSummarizeMutations mammals.hal --maxNFraction 0\n\nwill prevent rearrangements with missing data as being identified as such.  More generally, if an insertion of length 50 contains c N-characters, it will be labeled as missing data (rather than an insertion) if c/N > `maxNFraction`.\n"
      },
      "source": "https://raw.githubusercontent.com/ComparativeGenomicsToolkit/hal/master/synteny/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Levels of Detail",
        "parent_header": [
          "Hierarchical Alignment (HAL) Format API (v2.3)",
          "HAL Tools",
          "Summary Information"
        ],
        "type": "Text_excerpt",
        "value": "Some applications such as genome browsers my need to quickly access high-level information about the alignment without scanning every segment.  We provide tools to resample a HAL graph to compute a coarser-grained levels of detail to speed up subsequent analysis at different scales.  To generate an output hal file based on a sampling of every `100` bases:\n\n     halLodExtract mammals.hal mammals_100.hal 100\n\nTo generate a series of levels of details, such that each level of detail is 5x coarser than the previous, and that there are at most (approx.) 100 segments at the lowest level, use the following script:\n\n     halLodInterpolate.py mammals.hal lod_summary.txt --scale 5 --maxBlock 100\n\nNote that both tools have a `--keepSequences` option to specify whether or not the DNA sequences are stored in the output files.\n"
      },
      "source": "https://raw.githubusercontent.com/ComparativeGenomicsToolkit/hal/master/synteny/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9928135758366625,
      "result": {
        "original_header": "Hierarchical Alignment (HAL) Format API (v2.3)",
        "type": "Text_excerpt",
        "value": "HAL is a structure to efficiently store and index multiple genome alignments and ancestral reconstructions.  HAL is a graph-based representation which provides several advantages over matrix/block-based formats such as MAF, such as improved scalability and the ability to perform queries with respect to an arbitrary reference or subtree. \nThis package includes the HAL API and several analysis and  conversion tools which are described below.  HAL files are presently stored in either [HDF5](http://www.hdfgroup.org/HDF5/) or `mmap` format, but we note that the tools and most of the API are format-independent, so other databases could be implemented in the future.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ComparativeGenomicsToolkit/hal/master/synteny/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9452012982826123,
      "result": {
        "original_header": "General Options",
        "type": "Text_excerpt",
        "value": "\nTwo stored formats are included with HAL: `HDF5` and `mmap`.  HDF5 is standard container format for larger data sets with good compression characteristics .  The `mmap` format stores the raw data structures in a file, which is access by mapping in into memory using the `mmap` system call.  HAL files in the `mmap` format a considerably bigger but often much faster to access.  The `halExtract` command can be used to copy between formats. \n\nAll HAL tools compiled with HDF5 support expose some caching parameters.  Tools that create HAL files also include chunking and compression parameters.  In most cases, the default values of these options will suffice. \n`--cacheBytes <value>:`    The maximum size of each array cache.  3 such caches can be allocated per genome in the alignment. \n`--cacheRDC <value>:`    The number of slots in each cache.  This number should be set to a prime number that is roughly 50 x [cacheBytes / chunk]. \n`--cacheMDC <value>:`    Size of the metadata cache.  There is presently no reason to touch this. \n`--inMemory:`   Load all data in memory (and disable hdf5 cache). [default = False]\n \n"
      },
      "source": "https://raw.githubusercontent.com/ComparativeGenomicsToolkit/hal/master/synteny/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9139614453389898,
      "result": {
        "original_header": "MAF Import",
        "type": "Text_excerpt",
        "value": "[MAF](http://genome.ucsc.edu/FAQ/FAQformat.html#format5) is a text format used at UCSC to store genome alignments.  MAFs are typically stored with respect to a reference genome.  MAFs can be imported into HAL as subtrees using the `maf2hal` command. \nThe more the underlying tree looks like a star tree, the less efficient HAL is as all genomes will be fragmented with respect to each other.  If ancestral (or multiple reference) sequences are available, or if it is acceptable to use a non-reference species as a reference proxy, then trees of arbitrary typologies can be constructed using the `--append` option. \n"
      },
      "source": "https://raw.githubusercontent.com/ComparativeGenomicsToolkit/hal/master/synteny/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9943961570776422,
      "result": {
        "original_header": "Cactus Import",
        "type": "Text_excerpt",
        "value": "HAL is most beneficial when consensus reference or ancestral sequences are available at the internal nodes of the tree.  This is the type of information generated by progressive alignment pipelines.  Cactus is our implementation of such a pipeline.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ComparativeGenomicsToolkit/hal/master/synteny/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8532159618715032,
      "result": {
        "original_header": "MAF Export",
        "type": "Text_excerpt",
        "value": "Please see the Maf Export / `cactus-hal2maf` documentation in the [Progressive Cactus Manual](https://github.com/ComparativeGenomicsToolkit/cactus/blob/master/doc/progressive.md).  `hal2mafMP.py` is deprecated and we strongly recommend against running `hal2maf` directly.  Use `cactus-hal2maf` instead. \n \n"
      },
      "source": "https://raw.githubusercontent.com/ComparativeGenomicsToolkit/hal/master/synteny/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9142574449400824,
      "result": {
        "original_header": "Pangenome Graph Export (GFA and VG)",
        "type": "Text_excerpt",
        "value": "It is also possible to go through PAF and [seqwish](https://github.com/ekg/seqwish) as follows.  **But beware:**  [This approach will currently miss alignments between snps](https://github.com/ekg/seqwish/issues/60):\n```\nhal2fasta mammals.hal $(halStats --root mammals.hal) --subtree --upper --ucscSequenceNames > mammals.fa\nhal2paf mammals.hal --inMemory > mammals.paf\nseqwish -p mammals.paf -s mammals.fa -g mammals.gfa\n\n# Note, in the above, genome names are prepended to fasta sequence names when exporting paths to the graph.\n# To turn this off, remove --ucscSequenceNames from hal2fasta and add --onlySequenceNames to hal2paf\n```\n \nThis graph can then be imported into a compressed format to work with [vg](https://github.com/vgteam/vg)\n```\nvg convert -g mammals.gfa -p > mammals.pg\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/ComparativeGenomicsToolkit/hal/master/synteny/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9577678461533394,
      "result": {
        "original_header": "Displaying in the UCSC Genome Browser using Assembly Hubs",
        "type": "Text_excerpt",
        "value": "Larger alignments require the use of the `--lod` option to generate precomputed levels of detail. `./jobStore` here is just a location for Toil to use for temporary files. \nNote that this process is presently dependent on having UCSC's faToTwoBit installed.  The `outputDirectory` must be accessible as a URL in order to load the hub. More details are available at [hal2assemblyHub Manual](assemblyHub#comparative-assembly-hub-manual).\n \n"
      },
      "source": "https://raw.githubusercontent.com/ComparativeGenomicsToolkit/hal/master/synteny/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8880422217327307,
      "result": {
        "original_header": "Liftover",
        "type": "Text_excerpt",
        "value": "can be lifted over between genomes using `halLiftover`.  halLiftover does a base-by-base mapping between any two sequences in the alignment (following paralogy relations as well).  The output is written in BED (default) or PSL format. \nhalLiftover attempts to autodetect the BED version of the input.  This can be overried with the `--inVedVersion` option.   Columns that are not described in the official BED specs can be optionally mapped as-is using the `--keepExtra` option. \nBy default, halLiftover uses spaces and/or tabs to separate columns. To use only tabs (ie to allow spaces within names), use the `--tab` option. \nSee also the [Comparative Annotation Toolkit](https://github.com/ComparativeGenomicsToolkit/Comparative-Annotation-Toolkit) for generating and working with HAL annotations.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ComparativeGenomicsToolkit/hal/master/synteny/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8833862063034288,
      "result": {
        "original_header": "halSynteny",
        "type": "Text_excerpt",
        "value": "`halSynteny` applies some additional chaining after `halLiftover` to give syntenic blocks as described in [the halSynteny paper](https://doi.org/10.1093%2Fgigascience%2Fgiaa047).\n \n"
      },
      "source": "https://raw.githubusercontent.com/ComparativeGenomicsToolkit/hal/master/synteny/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.973825727157601,
      "result": {
        "original_header": "Alignment Depth",
        "type": "Text_excerpt",
        "value": "The number of distinct genomes different bases of a set of target genomes align to can be computed using the `halAlignmentDepth` tool.  The output is in `.wig` format.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ComparativeGenomicsToolkit/hal/master/synteny/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.947631525789528,
      "result": {
        "original_header": "SNPs",
        "type": "Text_excerpt",
        "value": "To compute the point mutations (SNPs) between a given pair of genomes in the HAL graph, `halSnps` can be used: \nwill produce a BED files listing the SNPs in human coordinates between human and duck.  A count of the number of snps and the total aligned columns are printed to stdout.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ComparativeGenomicsToolkit/hal/master/synteny/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9415252870600542,
      "result": {
        "original_header": "General mutations along branches",
        "type": "Text_excerpt",
        "value": "Annotation files, as described above, can be generated from the alignment to provide the locations of substitutions and rearrangements.  Annotations are done on a branch-by-branch basis, but can be mapped back to arbitrary references using `halLiftover` if so desired.  The produced annotation files have the format \nThe ID's refer to the types of mutations described above, and are explained in the header of each generated file.   To generate tables of rearrangement mutations between human and its most recent ancestor in the alignment, run \nTwo bed files must be specified because the coordinates of inserted (and by convention inverted and transposed) segments are with respect to bases in the human genome (reference), where as deleted bases are in ancestral coordinates (parent). \n"
      },
      "source": "https://raw.githubusercontent.com/ComparativeGenomicsToolkit/hal/master/synteny/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9305073604337069,
      "result": {
        "original_header": "Constrained Element Prediction",
        "type": "Text_excerpt",
        "value": "PhyloP is part of the [Phast Package](http://compgen.bscb.cornell.edu/phast/), and can be used to test for genomic positions that are under selective pressure.  We are working on prototype support for running PhyloP on HAL files. \nSpecial thanks to Melissa Jane Hubiz and Adam Siepel from Cornell University for their work on extending their tools to work with HAL. \n"
      },
      "source": "https://raw.githubusercontent.com/ComparativeGenomicsToolkit/hal/master/synteny/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9648115865894765,
      "result": {
        "original_header": "Cactus",
        "type": "Text_excerpt",
        "value": "[Cactus](https://github.com/ComparativeGenomicsToolkit/cactus) is the alignment software for generating hal alignments for both progressive and pangenome alignments. It includes `cactus-hal2maf`, which is the recommended way of exporting to MAF.  Cactus releases are also the easiest way to install HAL.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ComparativeGenomicsToolkit/hal/master/synteny/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9653859584069171,
      "result": {
        "original_header": "hal2vg",
        "type": "Text_excerpt",
        "value": "[hal2vg](https://github.com/ComparativeGenomicsToolkit/hal2vg) is a converter for pangenome alignments.  Note that it does not work reliably for large progressive alignments. \n"
      },
      "source": "https://raw.githubusercontent.com/ComparativeGenomicsToolkit/hal/master/synteny/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.986485500480595,
      "result": {
        "original_header": "HALPER",
        "type": "Text_excerpt",
        "value": "[HALPER](https://github.com/pfenninglab/halLiftover-postprocessing) is a tool for making continuous orthologs from outputs of `halLiftover`.  \n"
      },
      "source": "https://raw.githubusercontent.com/ComparativeGenomicsToolkit/hal/master/synteny/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Downloading HAL",
        "parent_header": [
          "Hierarchical Alignment (HAL) Format API (v2.3)",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "From the parent directory of where you want HAL installed:\n\n\t git clone https://github.com/ComparativeGenomicsToolkit/hal.git\n"
      },
      "source": "https://raw.githubusercontent.com/ComparativeGenomicsToolkit/hal/master/synteny/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ComparativeGenomicsToolkit/hal/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 40
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ComparativeGenomicsToolkit/hal/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ComparativeGenomicsToolkit/hal"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Hierarchical Alignment (HAL) Format API (v2.3)"
      },
      "source": "https://raw.githubusercontent.com/ComparativeGenomicsToolkit/hal/master/synteny/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "Hierarchical Alignment (HAL) Format API (v2.3)"
        ],
        "type": "Text_excerpt",
        "value": "> **Note**\n> HAL is included in Cactus, which is released as [pre-built binaries and Docker images](https://github.com/ComparativeGenomicsToolkit/cactus/releases)\n"
      },
      "source": "https://raw.githubusercontent.com/ComparativeGenomicsToolkit/hal/master/synteny/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "HDF5 1.10.1 with C++ API enabled",
        "parent_header": [
          "Hierarchical Alignment (HAL) Format API (v2.3)",
          "Installation",
          "Installing Dependencies"
        ],
        "type": "Text_excerpt",
        "value": "* Using apt (Ubuntu 18.04)\n\n    sudo apt install libhdf5-dev\n\n* Using [MacPorts](http://www.macports.org/):\n\n    sudo port install hdf5 @1.10.1 +cxx\n\n* From [Source](http://www.hdfgroup.org/ftp/HDF5/releases/hdf5-1.10/hdf5-1.10.1/src/):\n\n     `wget http://www.hdfgroup.org/ftp/HDF5/releases/hdf5-1.10/hdf5-1.10.1/src/hdf5-1.10.1.tar.gz`\n\t  `tar xzf  hdf5-1.10.1.tar.gz`\n     `cd hdf5-1.10.1`\n\t  `./configure --enable-cxx`\n\t  `make && make install`\n\n* Local install from source into DIR (do not need root password)\n\n     `mkdir DIR/hdf5`\n     `wget http://www.hdfgroup.org/ftp/HDF5/releases/hdf5-1.10/hdf5-1.10.1/src/hdf5-1.10.1.tar.gz`\n\t  `tar xzf  hdf5-1.10.1.tar.gz`\n     `cd hdf5-1.10.1`\n     `./configure --enable-cxx --prefix DIR/hdf5`\n     `make && make install`\n\n     Before building HAL, update the following environment variables:\n\n     `export PATH=DIR/hdf5/bin:${PATH}`\n     `export h5prefix=-prefix=DIR/hdf5`\n\n     or set these in include.local.mk.\n\n    If you are using older version of HDF5, such as installed on Centos,\n    you may need to set\n\n    `export CXX_ABI_DEF=-D_GLIBCXX_USE_CXX11_ABI=1`\n\n    If you get undefined functions base on string type with errors about\n    `std::__cxx11::basic_string` vs `std::basic_string`.\n"
      },
      "source": "https://raw.githubusercontent.com/ComparativeGenomicsToolkit/hal/master/synteny/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "sonLib",
        "parent_header": [
          "Hierarchical Alignment (HAL) Format API (v2.3)",
          "Installation",
          "Installing Dependencies"
        ],
        "type": "Text_excerpt",
        "value": "From the same parent directory where you downloaded HAL:\n\n\t  git clone https://github.com/ComparativeGenomicsToolkit/sonLib.git\n\t  pushd sonLib && make && popd\n\nIf sonLib and HAL are not sister directories, set the sonLibRootDir `make` variable to reflect the absolute pathname of the directory where you installed sonLib:\n\n    sonLibRootDir=/path/to/sonLib\n\neither in an include.local.mk file top level hal/ directory, or as a `make` command argument, e.g.:\n\n    pushd sonLib && make sonLibRootDir=/path/to/sonLib && popd\n"
      },
      "source": "https://raw.githubusercontent.com/ComparativeGenomicsToolkit/hal/master/synteny/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Building HAL",
        "parent_header": [
          "Hierarchical Alignment (HAL) Format API (v2.3)",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "From the hal/ directory:\n\n\t  make\n\nBefore using HAL, add it to your path:\n\n\t  export PATH=<path to hal>/bin:${PATH}\n\nThe parent directory of hal/ should be in your PYTHONPATH in order to use any of the Python functionality.  This includes running `make test`\n\t\n\t  export PYTHONPATH=<parent of hal>:${PYTHONPATH}\n"
      },
      "source": "https://raw.githubusercontent.com/ComparativeGenomicsToolkit/hal/master/synteny/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9157792014228829,
      "result": {
        "original_header": "Hierarchical Alignment (HAL) Format API (v2.3)",
        "type": "Text_excerpt",
        "value": "Copyright (C) 2012 - 2014 by Glenn Hickey (hickey@soe.ucsc.edu)\nCopyright (C) 2012-2023 by UCSC Computational Genomics Lab\nReleased under the MIT license, see LICENSE.txt \n"
      },
      "source": "https://raw.githubusercontent.com/ComparativeGenomicsToolkit/hal/master/synteny/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9025097207489652,
      "result": {
        "original_header": "General Options",
        "type": "Text_excerpt",
        "value": "*Detailed command line options can be obtained by running each tool with the `--help` option.* \n"
      },
      "source": "https://raw.githubusercontent.com/ComparativeGenomicsToolkit/hal/master/synteny/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9876012116610304,
      "result": {
        "original_header": "MAF Export",
        "type": "Text_excerpt",
        "value": "Please see the Maf Export / `cactus-hal2maf` documentation in the [Progressive Cactus Manual](https://github.com/ComparativeGenomicsToolkit/cactus/blob/master/doc/progressive.md).  `hal2mafMP.py` is deprecated and we strongly recommend against running `hal2maf` directly.  Use `cactus-hal2maf` instead. \n \n"
      },
      "source": "https://raw.githubusercontent.com/ComparativeGenomicsToolkit/hal/master/synteny/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9176766096527723,
      "result": {
        "original_header": "Pangenome Graph Export (GFA and VG)",
        "type": "Text_excerpt",
        "value": "A HAL file can be converted into a pangenome using [hal2vg](https://github.com/ComparativeGenomicsToolkit/hal2vg), which can be downloaded as a standalone binary [here](https://github.com/ekg/seqwish/issues/60). \nThis graph can then be imported into a compressed format to work with [vg](https://github.com/vgteam/vg)\n```\nvg convert -g mammals.gfa -p > mammals.pg\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/ComparativeGenomicsToolkit/hal/master/synteny/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9495445343862489,
      "result": {
        "original_header": "Liftover",
        "type": "Text_excerpt",
        "value": "By default, halLiftover uses spaces and/or tabs to separate columns. To use only tabs (ie to allow spaces within names), use the `--tab` option. \n"
      },
      "source": "https://raw.githubusercontent.com/ComparativeGenomicsToolkit/hal/master/synteny/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.910606180821003,
      "result": {
        "original_header": "Cactus",
        "type": "Text_excerpt",
        "value": "[Cactus](https://github.com/ComparativeGenomicsToolkit/cactus) is the alignment software for generating hal alignments for both progressive and pangenome alignments. It includes `cactus-hal2maf`, which is the recommended way of exporting to MAF.  Cactus releases are also the easiest way to install HAL.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ComparativeGenomicsToolkit/hal/master/synteny/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.804296398462081,
      "result": {
        "original_header": "General Options",
        "type": "Text_excerpt",
        "value": "*Detailed command line options can be obtained by running each tool with the `--help` option.* \n"
      },
      "source": "https://raw.githubusercontent.com/ComparativeGenomicsToolkit/hal/master/synteny/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9019229624171622,
      "result": {
        "original_header": "Displaying in the UCSC Genome Browser using Assembly Hubs",
        "type": "Text_excerpt",
        "value": "\thal2assemblyHub.py ./jobStore mammals.hal outputDirectory \n"
      },
      "source": "https://raw.githubusercontent.com/ComparativeGenomicsToolkit/hal/master/synteny/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8266002611916798,
      "result": {
        "original_header": "Constrained Element Prediction",
        "type": "Text_excerpt",
        "value": "* Train a neutral model \n     See `halPhyloPTrain.py` \n     See `halPhyloPMP.py` \n* Examples: \n"
      },
      "source": "https://raw.githubusercontent.com/ComparativeGenomicsToolkit/hal/master/synteny/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ComparativeGenomicsToolkit/hal/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.travis-ci.org/ComparativeGenomicsToolkit/hal.svg?branch=master"
      },
      "source": "https://raw.githubusercontent.com/ComparativeGenomicsToolkit/hal/master/synteny/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "hal"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "ComparativeGenomicsToolkit"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 1698842,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 455221,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 124215,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 34442,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 2779,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 1286,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "AMPL",
        "size": 534,
        "type": "Programming_language",
        "value": "AMPL"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Emacs Lisp",
        "size": 205,
        "type": "Programming_language",
        "value": "Emacs Lisp"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ComparativeGenomicsToolkit/hal/master/synteny/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "glennhickey",
          "type": "User"
        },
        "date_created": "2023-08-31T15:13:36Z",
        "date_published": "2023-08-31T15:17:36Z",
        "description": "## What's Changed\r\n* patch halReplaceGenomes so dimensions always set *before* segments by @glennhickey in https://github.com/ComparativeGenomicsToolkit/hal/pull/236\r\n* Fix PAF so snps and gaps included in cols 10 and 11, resp. by @glennhickey in https://github.com/ComparativeGenomicsToolkit/hal/pull/237\r\n* fix typo that was hidden by NDEBUG by @glennhickey in https://github.com/ComparativeGenomicsToolkit/hal/pull/238\r\n* patch halAddToBranch so dimensions always set *before* segments by @glennhickey in https://github.com/ComparativeGenomicsToolkit/hal/pull/239\r\n* fix UDC build by @glennhickey in https://github.com/ComparativeGenomicsToolkit/hal/pull/243\r\n* use --bedType instead of --outBedVersion by @glennhickey in https://github.com/ComparativeGenomicsToolkit/hal/pull/248\r\n* remove --tab option from halLiftover by @glennhickey in https://github.com/ComparativeGenomicsToolkit/hal/pull/249\r\n* Add jobstore arg to hal2assemblyHub doc+examples by @glennhickey in https://github.com/ComparativeGenomicsToolkit/hal/pull/251\r\n* Allow halAppendSubtree to be run with --inMemory by @glennhickey in https://github.com/ComparativeGenomicsToolkit/hal/pull/252\r\n* More memory fixes for halAppendSubtree by @glennhickey in https://github.com/ComparativeGenomicsToolkit/hal/pull/253\r\n* Close neighbors in halExtract to better work with --inMemory by @glennhickey in https://github.com/ComparativeGenomicsToolkit/hal/pull/254\r\n* add halRemoveSubtree by @glennhickey in https://github.com/ComparativeGenomicsToolkit/hal/pull/255\r\n* Adjust default HDF5 caching behaviour by @glennhickey in https://github.com/ComparativeGenomicsToolkit/hal/pull/256\r\n* Avoid reading all genome's sequences when possible by @glennhickey in https://github.com/ComparativeGenomicsToolkit/hal/pull/257\r\n* add halCloseGenome to C interface by @glennhickey in https://github.com/ComparativeGenomicsToolkit/hal/pull/258\r\n* patch halAppendSubtree so dimensions always set *before* segments by @thiagogenez in https://github.com/ComparativeGenomicsToolkit/hal/pull/260\r\n* Don't skip already-seen reference positions in hal2maf unless (--unique used). by @glennhickey in https://github.com/ComparativeGenomicsToolkit/hal/pull/261\r\n* fix off-by-1 bug when resizing name array by @glennhickey in https://github.com/ComparativeGenomicsToolkit/hal/pull/267\r\n* Fix bug where hdf5 genome internal caches get out of sync and crash by @glennhickey in https://github.com/ComparativeGenomicsToolkit/hal/pull/275\r\n* Cleaner Snakes by @glennhickey in https://github.com/ComparativeGenomicsToolkit/hal/pull/279\r\n\r\n## New Contributors\r\n* @thiagogenez made their first contribution in https://github.com/ComparativeGenomicsToolkit/hal/pull/260\r\n\r\n**Full Changelog**: https://github.com/ComparativeGenomicsToolkit/hal/compare/release-V2.2...release-V2.3",
        "html_url": "https://github.com/ComparativeGenomicsToolkit/hal/releases/tag/release-V2.3",
        "name": "Release V2.3",
        "release_id": 119465782,
        "tag": "release-V2.3",
        "tarball_url": "https://api.github.com/repos/ComparativeGenomicsToolkit/hal/tarball/release-V2.3",
        "type": "Release",
        "url": "https://api.github.com/repos/ComparativeGenomicsToolkit/hal/releases/119465782",
        "value": "https://api.github.com/repos/ComparativeGenomicsToolkit/hal/releases/119465782",
        "zipball_url": "https://api.github.com/repos/ComparativeGenomicsToolkit/hal/zipball/release-V2.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "glennhickey",
          "type": "User"
        },
        "date_created": "2022-01-04T16:53:21Z",
        "date_published": "2022-01-04T16:54:51Z",
        "description": "* misc bug fixes",
        "html_url": "https://github.com/ComparativeGenomicsToolkit/hal/releases/tag/release-V2.2",
        "name": "Release V2.2",
        "release_id": 56393505,
        "tag": "release-V2.2",
        "tarball_url": "https://api.github.com/repos/ComparativeGenomicsToolkit/hal/tarball/release-V2.2",
        "type": "Release",
        "url": "https://api.github.com/repos/ComparativeGenomicsToolkit/hal/releases/56393505",
        "value": "https://api.github.com/repos/ComparativeGenomicsToolkit/hal/releases/56393505",
        "zipball_url": "https://api.github.com/repos/ComparativeGenomicsToolkit/hal/zipball/release-V2.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "diekhans",
          "type": "User"
        },
        "date_created": "2019-05-19T23:34:00Z",
        "date_published": "2019-05-19T23:37:08Z",
        "description": "* Added reserved fields to some mmap structures to make it easier to expand in the future\r\n* update README to remove stale information",
        "html_url": "https://github.com/ComparativeGenomicsToolkit/hal/releases/tag/release-V2.1",
        "name": "Release V2..1",
        "release_id": 17450932,
        "tag": "release-V2.1",
        "tarball_url": "https://api.github.com/repos/ComparativeGenomicsToolkit/hal/tarball/release-V2.1",
        "type": "Release",
        "url": "https://api.github.com/repos/ComparativeGenomicsToolkit/hal/releases/17450932",
        "value": "https://api.github.com/repos/ComparativeGenomicsToolkit/hal/releases/17450932",
        "zipball_url": "https://api.github.com/repos/ComparativeGenomicsToolkit/hal/zipball/release-V2.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "diekhans",
          "type": "User"
        },
        "date_created": "2019-05-11T20:20:44Z",
        "date_published": "2019-05-11T20:33:59Z",
        "description": "Numerous changes including:\r\n  - Addition of mmap format as an alternative to HDF5.  The mmap format improves performance at the cost of size in many cases.\r\n  - Various optimizations and code simplification.\r\n  - Optimization of UCSC browser UDC interface.",
        "html_url": "https://github.com/ComparativeGenomicsToolkit/hal/releases/tag/release-V2.0",
        "name": "Release V2.0",
        "release_id": 17294179,
        "tag": "release-V2.0",
        "tarball_url": "https://api.github.com/repos/ComparativeGenomicsToolkit/hal/tarball/release-V2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/ComparativeGenomicsToolkit/hal/releases/17294179",
        "value": "https://api.github.com/repos/ComparativeGenomicsToolkit/hal/releases/17294179",
        "zipball_url": "https://api.github.com/repos/ComparativeGenomicsToolkit/hal/zipball/release-V2.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "parent_header": [
          "Hierarchical Alignment (HAL) Format API (v2.3)",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "* git\n"
      },
      "source": "https://raw.githubusercontent.com/ComparativeGenomicsToolkit/hal/master/synteny/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "HDF5 1.10.1 with C++ API enabled",
        "parent_header": [
          "Hierarchical Alignment (HAL) Format API (v2.3)",
          "Installation",
          "Installing Dependencies"
        ],
        "type": "Text_excerpt",
        "value": "* Using apt (Ubuntu 18.04)\n\n    sudo apt install libhdf5-dev\n\n* Using [MacPorts](http://www.macports.org/):\n\n    sudo port install hdf5 @1.10.1 +cxx\n\n* From [Source](http://www.hdfgroup.org/ftp/HDF5/releases/hdf5-1.10/hdf5-1.10.1/src/):\n\n     `wget http://www.hdfgroup.org/ftp/HDF5/releases/hdf5-1.10/hdf5-1.10.1/src/hdf5-1.10.1.tar.gz`\n\t  `tar xzf  hdf5-1.10.1.tar.gz`\n     `cd hdf5-1.10.1`\n\t  `./configure --enable-cxx`\n\t  `make && make install`\n\n* Local install from source into DIR (do not need root password)\n\n     `mkdir DIR/hdf5`\n     `wget http://www.hdfgroup.org/ftp/HDF5/releases/hdf5-1.10/hdf5-1.10.1/src/hdf5-1.10.1.tar.gz`\n\t  `tar xzf  hdf5-1.10.1.tar.gz`\n     `cd hdf5-1.10.1`\n     `./configure --enable-cxx --prefix DIR/hdf5`\n     `make && make install`\n\n     Before building HAL, update the following environment variables:\n\n     `export PATH=DIR/hdf5/bin:${PATH}`\n     `export h5prefix=-prefix=DIR/hdf5`\n\n     or set these in include.local.mk.\n\n    If you are using older version of HDF5, such as installed on Centos,\n    you may need to set\n\n    `export CXX_ABI_DEF=-D_GLIBCXX_USE_CXX11_ABI=1`\n\n    If you get undefined functions base on string type with errors about\n    `std::__cxx11::basic_string` vs `std::basic_string`.\n"
      },
      "source": "https://raw.githubusercontent.com/ComparativeGenomicsToolkit/hal/master/synteny/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "sonLib",
        "parent_header": [
          "Hierarchical Alignment (HAL) Format API (v2.3)",
          "Installation",
          "Installing Dependencies"
        ],
        "type": "Text_excerpt",
        "value": "From the same parent directory where you downloaded HAL:\n\n\t  git clone https://github.com/ComparativeGenomicsToolkit/sonLib.git\n\t  pushd sonLib && make && popd\n\nIf sonLib and HAL are not sister directories, set the sonLibRootDir `make` variable to reflect the absolute pathname of the directory where you installed sonLib:\n\n    sonLibRootDir=/path/to/sonLib\n\neither in an include.local.mk file top level hal/ directory, or as a `make` command argument, e.g.:\n\n    pushd sonLib && make sonLibRootDir=/path/to/sonLib && popd\n"
      },
      "source": "https://raw.githubusercontent.com/ComparativeGenomicsToolkit/hal/master/synteny/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "contact",
    "documentation",
    "faq",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 10:07:27",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 160
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Optional support of reading HAL files over HTTP via UCSC's URL Data Cache (UDC)",
        "parent_header": [
          "Hierarchical Alignment (HAL) Format API (v2.3)",
          "Installation",
          "Installing Dependencies"
        ],
        "type": "Text_excerpt",
        "value": "Define ENABLE_UDC before making, and specify the path of the Kent source tree using KENTSRC.  When built with this enabled, all HAL files opened read-only will be accessed using UDC which supports both local files and URLs.\n\n\t  export  ENABLE_UDC=1\n\t  export  KENTSRC=<path to top level of Kent source tree>\n\nThose without the UCSC genome browser already installed locally will probably find it simpler to first mount URLs with [HTTPFS](http://httpfs.sourceforge.net/) before opening with HAL.\n"
      },
      "source": "https://raw.githubusercontent.com/ComparativeGenomicsToolkit/hal/master/synteny/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Optional support of PhyloP evolutionary constraint annotation",
        "parent_header": [
          "Hierarchical Alignment (HAL) Format API (v2.3)",
          "Installation",
          "Installing Dependencies"
        ],
        "type": "Text_excerpt",
        "value": "PhyloP is part of the [Phast Package](http://compgen.bscb.cornell.edu/phast/), and can be used to test for genomic positions that are under selective pressure.  We are working on prototype support for running PhyloP on HAL files.  In order to enable this support, Phast must be installed.  We recommend downloading the latest source using Subversion.\n\nFrom the same parent directory where you downloaded HAL:\n\n* First install CLAPACK (Linux only)\n\n    `wget http://www.netlib.org/clapack/clapack.tgz`\n    `tar -xvzf clapack.tgz`\n    `mv CLAPACK-3.2.1 clapack`\n    `cd clapack`\n    `cp make.inc.example make.inc && make f2clib && make blaslib && make lib`\n    `export CLAPACKPATH=$(pwd)` `\n    `cd ..`\n\n*  Install Phast (Mac or Linux)\n\n     `git clone https://github.com/CshlSiepelLab/phast.git`\n     `cd phast`\n     `git checkout 85f7ed179dd097a86ba4added22d571785cc3e1d`\n     `cd src && make`\n     `cd ../..`\n\n* Before building HAL\n\n     `export ENABLE_PHYLOP=1`\n\nSpecial thanks to Melissa Jane Hubiz and Adam Siepel from Cornell University for their work on extending their tools to work with HAL.\n"
      },
      "source": "https://raw.githubusercontent.com/ComparativeGenomicsToolkit/hal/master/synteny/README.md",
      "technique": "header_analysis"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Example of HAL Genome Representation",
        "parent_header": [
          "Hierarchical Alignment (HAL) Format API (v2.3)"
        ],
        "type": "Text_excerpt",
        "value": "The following is obtained by running h5ls -v -r (included with hdf5) on an ancestral genome, in this case a small simulated human-chimp ancestor named sHuman-sChimp.  The genome itself is stored as a group.  It contains four important 1-dimensional arrays:\n\n* BOTTOM_ARRAY: The bottom segments of the genome (containing alignment mapping to the descendants).  The size of each entry is dependent on the number of descendants.\n* DNA_ARRAY: The DNA bases, stored as two bases / byte\n* SEQUENCE_ARRAY: The names and lengths of subsequences (ie chromosomes or scaffolds in the genome)\n* TOP_ARRAY: The top segments in the genome (containing alignment mapping to the parent).  Paralogous top segments are presently stored in a circular linked list.\n\nMore information can be found in the manuscript:\n\nGlenn Hickey, Benedict Paten, Dent Earl, Daniel Zerbino, and David\nHaussler.  HAL: A Hierarchical Format for Storing and Analyzing\nMultiple Genome Alignments. Bioinformatics, Volume 29, Issue 10, 15 May 2013, Pages 1341\u20131342,\n[https://doi.org/10.1093/bioinformatics/btt128](https://doi.org/10.1093/bioinformatics/btt128)\n"
      },
      "source": "https://raw.githubusercontent.com/ComparativeGenomicsToolkit/hal/master/synteny/README.md",
      "technique": "header_analysis"
    }
  ]
}