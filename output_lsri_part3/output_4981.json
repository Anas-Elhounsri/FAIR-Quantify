{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ChuanyiZ/vef"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-07-05T17:45:52Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-06-30T03:18:44Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Variant Ensemble Filter, an ensemble based filter for VCF files."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9664592714724589,
      "result": {
        "original_header": "VEF",
        "type": "Text_excerpt",
        "value": "Variant Ensemble Filter, an ensemble based filter for VCF files. \nVEF is designed for filtering variants of single non-cancerous samples. \n"
      },
      "source": "https://raw.githubusercontent.com/ChuanyiZ/vef/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ChuanyiZ/vef/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ChuanyiZ/vef/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ChuanyiZ/vef"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "VEF"
      },
      "source": "https://raw.githubusercontent.com/ChuanyiZ/vef/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ChuanyiZ/vef/master/example/test.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "VEF"
        ],
        "type": "Text_excerpt",
        "value": "Installation in a virtual environment is recommended, e.g., [conda](https://conda.io/projects/conda/en/latest/user-guide/getting-started.html).\nIf you're not using a virtual environment and encounter permission issues when installing packages, please try installing with `--user` option, e.g., `pip install --user -r requirement.txt`.\n\n1. Download\n\n    ```bash\n    git clone https://github.com/ChuanyiZ/vef.git\n    ```\n\n2. install requirements\n\n    ```bash\n    cd vef\n    pip install -r requirements.txt\n    ```\n\n3. install scikit-allel\n\n    ```bash\n    pip install scikit-allel\n    ```\n\n4. install VEF using pip\n\n    ```bash\n    pip install ./\n    ```\n"
      },
      "source": "https://raw.githubusercontent.com/ChuanyiZ/vef/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ChuanyiZ/vef/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2018 Chuanyi Zhang\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/ChuanyiZ/vef/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "vef"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "ChuanyiZ"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 27273,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 1542,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ChuanyiZ/vef/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 18:18:24",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Example scripts",
        "parent_header": [
          "VEF"
        ],
        "type": "Text_excerpt",
        "value": "Example python scripts are located in the `example/` directory. There's a `test.sh` script to run them. VCF files for testing are located in `example/data`, including chromosome 11 and 20 of Human sample NA12878 (HG001) (SNPs and INDELs are already separated). You can also download the corresponding BAM files from [ftp://ftp-trace.ncbi.nlm.nih.gov/giab/ftp/data/NA12878/10XGenomics/](ftp://ftp-trace.ncbi.nlm.nih.gov/giab/ftp/data/NA12878/10XGenomics/) and generate the VCF files on your own by running GATK's [best practice pipeline](https://software.broadinstitute.org/gatk/best-practices/).\n\n```bash\ncd example\n./test.sh\n```\n\nThis bash script calls example script `vef_clf.py` and `vef_apl.py` located in the `example/` directory to train and apply the filter, respectively. After running `test.sh`, there will be 2 filter models in `example/data` with the `.clf` extension, along with 2 filtered VCF files with the `.vef.vcf` extension.\n\nThe generated `*.vef.vcf` files include a `VEF` score in the INFO field for each variant. This score represents the probability of the variant being correct, calculated by the model. In particular, if $P$ is the probability of being correct, VEF reports the score $\\ln(P)$ as `VEF` score. VEF also specifies `VEF_FILTERED` in the FILTER field of the variants that VEF estimates are incorrectly called.\n"
      },
      "source": "https://raw.githubusercontent.com/ChuanyiZ/vef/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Splitting VCF file into SNPs and INDELs",
        "parent_header": [
          "VEF",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Use GATK SelectVariants tool to split the target VCF file into two files containing SNPs and INDELs separately. For example, if we have a target VCF file `specimen.vcf`:\n\n```bash\njava -jar GenomeAnalysisTK.jar -T SelectVariants -R reference.fasta -V specimen.vcf -selectType SNP -o specimen.snp.vcf\njava -jar GenomeAnalysisTK.jar -T SelectVariants -R reference.fasta -V specimen.vcf -selectType INDEL -o specimen.indel.vcf\n```\n\nFor detailed documentation of `SelectVariants`, please go to [GATK's site](https://software.broadinstitute.org/gatk/documentation/tooldocs/3.8-0/org_broadinstitute_gatk_tools_walkers_variantutils_SelectVariants.php)\n"
      },
      "source": "https://raw.githubusercontent.com/ChuanyiZ/vef/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Training",
        "parent_header": [
          "VEF",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Input files:\n\n- `gold_standard.vcf`, `gold_standard.bed`, `reference.fasta`: for example, GIAB's NA12878 Gold Standard's VCF and BED files, and the corresponding reference file.\n- `specimen.snp.vcf` or `specimen.indel.vcf`: for example, a VCF file from sample NA12878 produced by the sequencing technology and analysis pipeline of interest.\n\nSteps:\n\n1. Use [hap.py](https://github.com/Illumina/hap.py) to compare `specimen.snp.vcf` (or `specimen.indel.vcf`) against the `gold_standard.vcf`, and output `compare.snp.vcf` (or `compare.indel.vcf`). Example:\n\n    ```bash\n    python2 hap.py gold_standard.vcf specimen.snp.vcf -f gold_standard.bed -o compare.snp.vcf -r reference.fasta --no-roc\n    ```\n\n2. Use `vef_clf.py` in the `example/` folder (recommended), where you can specify *number of trees* (default 150) and the *ensemble method* (default RF).\n\n    ```bash\n    python vef_clf.py --happy compare.snp.vcf --target specimen.snp.vcf --mode SNP --kind <MODEL_NAME> --n <NUM_TREES>\n\n    required named arguments:\n      --happy HAPPY         annotated training VCF file (from hap.py)\n      --target TARGET       training VCF file\n      --mode {SNP,INDEL}    mode: SNP or INDEL\n\n    optional arguments:\n      -n NUM_TREES, --num_trees NUM_TREES\n                              number of trees, default = 150\n      --kind {RF,RandomForest,AB,AdaBoost,GB,GradientBoost}\n                              kind of ensemble method, available options:\n                              RandomForest (RF), AdaBoost (AB), GradientBoost(GB);\n                              default = RF\n      -h, --help            show this help message and exit\n    ```\n\n    MODE must be either SNP or INDEL, model is RF (Random Forest), AB (AdaBoost), or GB (GradientBoost), and NUM_TREES should be an integer. By default, RF with 150 base learners is used. See help message for details.\n\nOtherwise you can directly write your own Python script, example snippet as follows.\n\n```python\nfrom vef import VCFDataset, Classifier\ndataset = VCFDataset(path_to_compare_vcf, path_to_specimen_vcf, 'SNP')\nX, y = dataset.get_dataset('*')\n\nclf = Classifier(dataset.features, num_trees, \"RF\")\nclf.fit(X, y)\nclf.save(path_to_specimen_vcf + \".vef_snp.clf\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ChuanyiZ/vef/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Applying",
        "parent_header": [
          "VEF",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Input files:\n\n- `classifier.clf`: pre-trained classifier.\n- `target.snp.vcf` or `target.indel.vcf`: target VCF file.\n\nUse `vef_apl.py` in `example/` folder (recommended).\n\n```bash\npython vef_apl.py --clf_file classifier.clf --subject target.snp.vcf --suffix vef --mode SNP\n\noptional arguments:\n  -h, --help           show this help message and exit\n\nrequired named arguments:\n  --clf_file CLF_FILE  VEF filter pre-trained model\n  --subject SUBJECT    target VCF file\n  --suffix SUFFIX      suffix of filtered VCF file\n  --mode {SNP,INDEL}   mode: SNP or INDEL\n\n```\n\nMODE must be either SNP or INDEL.\n\nAlternatively, use the VEF package to apply the pre-trained model on the target VCF file. Example snippet as follows.\n\n```python\nfrom vef import VCFApply, Classifier\nclf = Classifier.load(clf_file)\napply = VCFApply(target_vcf, clf, 'SNP')\napply.apply()\napply.write_filtered(target_vcf + \".vef_snp.vcf\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ChuanyiZ/vef/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Grid Search of Hyperparameters",
        "parent_header": [
          "VEF",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "See example script `vef_grid_search.py` in the `example/` folder.\nThis script will run K-fold cross-validation on the given VCF files and determine the best number of trees and learning rate.\n\nInput files: (same as training)\n\n- `gold_standard.vcf`, `gold_standard.bed`, `reference.fasta`: for example, GIAB's NA12878 Gold Standard's VCF and BED files, and the corresponding reference file.\n- `specimen.snp.vcf` or `specimen.indel.vcf`: for example, a VCF file from sample NA12878 produced by the sequencing technology and analysis pipeline of interest.\n\nSteps: (similar to training)\n\n1. Use [hap.py](https://github.com/Illumina/hap.py) to compare `specimen.snp.vcf` (or `specimen.indel.vcf`) against `gold_standard.vcf`, output `compare.snp.vcf` (or `compare.indel.vcf`).\n\n    ```bash\n    python2 hap.py gold_standard.vcf specimen.vcf -f gold_standard.bed -o compare.vcf -r reference.fasta --no-roc\n    ```\n\n2. Use `vef_grid_search.py` in `example/` folder, where you can specify the *ensemble method* (default RF).\n\n    ```bash\n    python vef_grid_search.py --happy compare.snp.vcf --target specimen.snp.vcf --mode SNP --fold 5 --jobs 2 --kind <MODEL_NAME>\n\n    optional arguments:\n    -h, --help            show this help message and exit\n\n    required named arguments:\n    --happy HAPPY         annotated training VCF file (by hap.py)\n    --target TARGET       training VCF file\n    --mode MODE           mode: SNP or INDEL\n\n    optional arguments:\n    --fold FOLD           number of k-fold cross validation, default = 5\n    --jobs JOBS           number of parallel processes, default = 1\n    --kind {RF,RandomForest,AB,AdaBoost,GB,GradientBoost}\n                            kind of ensemble method, available options:\n                            RandomForest (RF), AdaBoost (AB), GradientBoost(GB);\n                            default = RF\n    ```\n\n    MODE must be either SNP or INDEL; FOLD and JOBS are integers, and the number of parallel jobs (processes) should be less than or equal to the number of virtual cores on your computer.\n\n"
      },
      "source": "https://raw.githubusercontent.com/ChuanyiZ/vef/master/README.md",
      "technique": "header_analysis"
    }
  ]
}