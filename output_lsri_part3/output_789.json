{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ratschlab/secedo"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-11-12T09:55:06Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-04-02T03:14:33Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Clustering tumor cells based on SNVs from single-cell sequencing data"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9888913199587805,
      "result": {
        "original_header": "SECEDO (SinglE CEll Data tumOr clusterer)",
        "type": "Text_excerpt",
        "value": "`SECEDO` is able to cluster cells and perform variant calling based on information obtained from single-cell DNA \nsequencing. `SECEDO` takes as input `BAM` files containing the aligned data for each cell and provides as output a \nclustering of the cells and, optionally, VCF files pinpointing the changes relative to a reference genome. \n`SECEDO` is descirbed in detail in the following paper: [Clustering cells based on single-cell DNA-sequencing data \nwithultra-low coverage](coming soon)\n \n"
      },
      "source": "https://raw.githubusercontent.com/ratschlab/secedo/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ratschlab/secedo/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ratschlab/secedo/main/scripts/SBMCloneVsSecdo.ipynb"
      },
      "source": "https://raw.githubusercontent.com/ratschlab/secedo/main/scripts/SBMCloneVsSecdo.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ratschlab/secedo/main/scripts/explore_similarity_scores.ipynb"
      },
      "source": "https://raw.githubusercontent.com/ratschlab/secedo/main/scripts/explore_similarity_scores.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ratschlab/secedo/main/scripts/spectral_clustering.ipynb"
      },
      "source": "https://raw.githubusercontent.com/ratschlab/secedo/main/scripts/spectral_clustering.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ratschlab/secedo/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ratschlab/secedo"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SECEDO (SinglE CEll Data tumOr clusterer)"
      },
      "source": "https://raw.githubusercontent.com/ratschlab/secedo/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ratschlab/secedo/main/third_party/gflags/src/gflags_completions.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ratschlab/secedo/main/third_party/spdlog/scripts/format.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Installing a binary distribution package\n\nNo official binary distribution packages are provided by the gflags developers.\nThere may, however, be binary packages available for your operating system.\nPlease consult also the package repositories of your Linux distribution.\n\nOn Debian/Ubuntu Linux, gflags can be installed using the following command:\n\n    sudo apt-get install libgflags-dev\n\nOn macOS, [Homebrew](https://brew.sh/) includes a formula for gflags:\n\n    brew install gflags\n\n\n# Compiling the source code with Bazel\n\nTo use gflags in a [Bazel](http://bazel.io) project, map it in as an external\ndependency by editing your WORKSPACE file:\n\n    git_repository(\n        name = \"com_github_gflags_gflags\",\n        commit = \"<INSERT COMMIT SHA HERE>\",\n        remote = \"https://github.com/gflags/gflags.git\",\n    )\n\nYou can then add `@com_github_gflags_gflags//:gflags` to the `deps` section of a\n`cc_binary` or `cc_library` rule, and `#include <gflags/gflags.h>` to include it\nin your source code.\n\n\n# Compiling the source code with vcpkg\n\nYou can download and install gflags using the [vcpkg](https://github.com/Microsoft/vcpkg) dependency manager:\n\n    git clone https://github.com/Microsoft/vcpkg.git\n    cd vcpkg\n    ./bootstrap-vcpkg.sh\n    ./vcpkg integrate install\n    vcpkg install gflags\n\nThe gflags port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please [create an issue or pull request](https://github.com/Microsoft/vcpkg) on the vcpkg repository.\n\n\n# Compiling the source code with CMake\n\nThe build system of gflags is since version 2.1 based on [CMake](http://cmake.org).\nThe common steps to build, test, and install software are therefore:\n\n1. Extract source files.\n2. Create build directory and change to it.\n3. Run CMake to configure the build tree.\n4. Build the software using selected build tool.\n5. Test the built software.\n6. Install the built files.\n\nOn Unix-like systems with GNU Make as build tool, these build steps can be\nsummarized by the following sequence of commands executed in a shell,\nwhere ```$package``` and ```$version``` are shell variables which represent\nthe name of this package and the obtained version of the software.\n\n    $ tar xzf gflags-$version-source.tar.gz\n    $ cd gflags-$version\n    $ mkdir build && cd build\n    $ ccmake ..\n    \n      - Press 'c' to configure the build system and 'e' to ignore warnings.\n      - Set CMAKE_INSTALL_PREFIX and other CMake variables and options.\n      - Continue pressing 'c' until the option 'g' is available.\n      - Then press 'g' to generate the configuration files for GNU Make.\n    \n    $ make\n    $ make test    (optional)\n    $ make install (optional)\n\nIn the following, only gflags-specific CMake settings available to\nconfigure the build and installation are documented. Note that most of these\nvariables are for advanced users and binary package maintainers only.\nThey usually do not have to be modified.\n\n\nCMake Option                | Description\n--------------------------- | -------------------------------------------------------\nCMAKE_INSTALL_PREFIX        | Installation directory, e.g., \"/usr/local\" on Unix and \"C:\\Program Files\\gflags\" on Windows.\nBUILD_SHARED_LIBS           | Request build of dynamic link libraries.\nBUILD_STATIC_LIBS           | Request build of static link libraries. Implied if BUILD_SHARED_LIBS is OFF.\nBUILD_PACKAGING             | Enable binary package generation using CPack.\nBUILD_TESTING               | Build tests for execution by CTest.\nBUILD_NC_TESTS              | Request inclusion of negative compilation tests (requires Python).\nBUILD_CONFIG_TESTS          | Request inclusion of package configuration tests (requires Python).\nBUILD_gflags_LIBS           | Request build of multi-threaded gflags libraries (if threading library found).\nBUILD_gflags_nothreads_LIBS | Request build of single-threaded gflags libraries.\nGFLAGS_NAMESPACE            | Name of the C++ namespace to be used by the gflags library. Note that the public source header files are installed in a subdirectory named after this namespace. To maintain backwards compatibility with the Google Commandline Flags, set this variable to \"google\". The default is \"gflags\".\nGFLAGS_INTTYPES_FORMAT      | String identifying format of built-in integer types.\nGFLAGS_INCLUDE_DIR          | Name of headers installation directory relative to CMAKE_INSTALL_PREFIX.\nLIBRARY_INSTALL_DIR         | Name of library installation directory relative to CMAKE_INSTALL_PREFIX.\nINSTALL_HEADERS             | Request installation of public header files.\n"
      },
      "source": "https://raw.githubusercontent.com/ratschlab/secedo/main/third_party/gflags/INSTALL.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "Evaluation",
          "FAQ"
        ],
        "type": "Text_excerpt",
        "value": "## Using bioconda"
      },
      "source": "https://raw.githubusercontent.com/ratschlab/secedo/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Using bioconda",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "If you don't have conda/bioconda installed on your system yet, follow [these instructions](https://bioconda.github.\nio/user/install.html) to set it up. You can then install secedo using:\n```console\nconda install -c conda-forge -c bioconda secedo\n```"
      },
      "source": "https://raw.githubusercontent.com/ratschlab/secedo/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Creating the input pileup files",
        "parent_header": [
          "Installation",
          "Usage examples"
        ],
        "type": "Text_excerpt",
        "value": "If you have a bunch of BAM files, the first step is to create a pileup (a file that contains all the sequenced bases for each locus) file. You can either split the BAM files by chromosome and then distribute the pileup creation to 23 jobs, or you can just go the easy way and pile up all the data in one go. This step doesn't require much RAM, as the pileup is streamed to disk while being created - 35GB should suffice even when processing 8000 cells at coverage 0.5x (~1.4TB of data):\n```\n./pileup -i <BAM_DIR> -o <OUT_DIR>/chromosome --chromosomes 1 --num_threads 20 --log_level=trace --min_base_quality 30 --max_coverage 1000\n```\nThe command above will create a pileup for the first chromosome. If you ommit the `--chromosome` parameter, `pileup` will create 24 pileup files, one for each chromosome.\n\nThe pileup files are created in SECEDO's binary format (extension .bin) and in the `samtools` compatible textual format \n(extension .txt), which is useful for debugging and manual inspection.\n"
      },
      "source": "https://raw.githubusercontent.com/ratschlab/secedo/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Clustering and variant calling",
        "parent_header": [
          "Installation",
          "Usage examples"
        ],
        "type": "Text_excerpt",
        "value": "```\n./secedo -i <PILEUP_DIR> -o <OUT_DIR> --num_threads 20 --log_level=trace \\\n             --homozygous_filtered_rate=0.5 --seq_error_rate=0.01 \\\n             --reference_genome=OPTIONAL_REFERENCE_GENOME_FASTA \\\n             --max_coverage 1000 --min_cluster_size 500\n```\n\nThis will run the clustering and variant calling on the pileup files available in `PILEUP_DIR` and write the clustering information to `OUT_DIR/clustering`. If a reference genome was provided via `--reference_genome`, the VCF files for each cluster will be written to `OUT_DIR/cluster_<cluster_no>.vcf`. Make sure that the chromosomes in your reference genome are ordered from 1,2,3, to 22, X, Y (some grch37 reference genomes come ordered lexicographically by chromosome!, e.g. 1, 10, 11, etc.).\n\nYou will need enough RAM to fit the pileups and a bit of extra - we were able to process 8K cells in 32GB of RAM, so this shouldn't be an issue. \n\nTake a look at [breast_cancer/variant_call.sh](https://github.com/ratschlab/secedo/blob/main/experiments/breast_cancer/variant_call.sh) for inspiration on how to use `SECEDO`.\n"
      },
      "source": "https://raw.githubusercontent.com/ratschlab/secedo/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ratschlab/secedo/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bioinformatics, genomics, single-cell, somatic-variants, tumor-heterogeneity"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "The MIT License\n\nCopyright (c) 2009-2010 Derek Barnett, Erik Garrison, Gabor Marth, Michael Stromberg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n"
      },
      "source": "https://raw.githubusercontent.com/ratschlab/secedo/main/third_party/bamtools/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "secedo"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "ratschlab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 239432,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 20228,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 10922,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 4471,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 2812,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ratschlab/secedo/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "danieldanciu",
          "type": "User"
        },
        "date_created": "2022-05-04T08:54:21Z",
        "date_published": "2022-05-04T09:01:44Z",
        "description": "Changes:\r\n  - using the flag `tumor_purity` can be used to specify an estimated tumor purity, if available. Valid values are 1:10-90, 2:20-80, 3:30-70, 4:40-60, 5:50-50 split.\r\n\r\n**Full Changelog**: https://github.com/ratschlab/secedo/compare/v1.0.6...v.1.0.7",
        "html_url": "https://github.com/ratschlab/secedo/releases/tag/v1.0.7",
        "name": "Minor release: support for specifying an estimated tumor purity",
        "release_id": 65995475,
        "tag": "v1.0.7",
        "tarball_url": "https://api.github.com/repos/ratschlab/secedo/tarball/v1.0.7",
        "type": "Release",
        "url": "https://api.github.com/repos/ratschlab/secedo/releases/65995475",
        "value": "https://api.github.com/repos/ratschlab/secedo/releases/65995475",
        "zipball_url": "https://api.github.com/repos/ratschlab/secedo/zipball/v1.0.7"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "danieldanciu",
          "type": "User"
        },
        "date_created": "2022-05-02T20:19:50Z",
        "date_published": "2022-05-03T10:19:13Z",
        "html_url": "https://github.com/ratschlab/secedo/releases/tag/v1.0.6",
        "name": "Updated values of p_het and p_mut to better reflect priors from the literature.",
        "release_id": 65897112,
        "tag": "v1.0.6",
        "tarball_url": "https://api.github.com/repos/ratschlab/secedo/tarball/v1.0.6",
        "type": "Release",
        "url": "https://api.github.com/repos/ratschlab/secedo/releases/65897112",
        "value": "https://api.github.com/repos/ratschlab/secedo/releases/65897112",
        "zipball_url": "https://api.github.com/repos/ratschlab/secedo/zipball/v1.0.6"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "danieldanciu",
          "type": "User"
        },
        "date_created": "2022-03-07T10:20:31Z",
        "date_published": "2022-03-07T10:22:00Z",
        "description": "Fixes a missing library in the pileup binary installation.",
        "html_url": "https://github.com/ratschlab/secedo/releases/tag/v1.0.5",
        "name": "Secedo with working pileup installation",
        "release_id": 61129170,
        "tag": "v1.0.5",
        "tarball_url": "https://api.github.com/repos/ratschlab/secedo/tarball/v1.0.5",
        "type": "Release",
        "url": "https://api.github.com/repos/ratschlab/secedo/releases/61129170",
        "value": "https://api.github.com/repos/ratschlab/secedo/releases/61129170",
        "zipball_url": "https://api.github.com/repos/ratschlab/secedo/zipball/v1.0.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "danieldanciu",
          "type": "User"
        },
        "date_created": "2022-02-16T10:52:40Z",
        "date_published": "2022-02-16T10:55:05Z",
        "html_url": "https://github.com/ratschlab/secedo/releases/tag/v1.0.4",
        "name": "Fixes warnings in command lines",
        "release_id": 59689140,
        "tag": "v1.0.4",
        "tarball_url": "https://api.github.com/repos/ratschlab/secedo/tarball/v1.0.4",
        "type": "Release",
        "url": "https://api.github.com/repos/ratschlab/secedo/releases/59689140",
        "value": "https://api.github.com/repos/ratschlab/secedo/releases/59689140",
        "zipball_url": "https://api.github.com/repos/ratschlab/secedo/zipball/v1.0.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "danieldanciu",
          "type": "User"
        },
        "date_created": "2022-02-15T09:35:04Z",
        "date_published": "2022-02-15T09:36:38Z",
        "html_url": "https://github.com/ratschlab/secedo/releases/tag/v1.0.3",
        "name": "Binary used in the SECEDO paper",
        "release_id": 59586267,
        "tag": "v1.0.3",
        "tarball_url": "https://api.github.com/repos/ratschlab/secedo/tarball/v1.0.3",
        "type": "Release",
        "url": "https://api.github.com/repos/ratschlab/secedo/releases/59586267",
        "value": "https://api.github.com/repos/ratschlab/secedo/releases/59586267",
        "zipball_url": "https://api.github.com/repos/ratschlab/secedo/zipball/v1.0.3"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Prerequisites",
        "parent_header": [
          "Installation",
          "Building from source (Mac or Linux)"
        ],
        "type": "Text_excerpt",
        "value": "* GNU GCC with C++17 (gcc-8.0.1 or higher), LLVM Clang (clang-7 or higher), or AppleClang\n* cmake 3.13 or newer\n* omp\n* openblas\n\nClone the latest version of the code from the git repository:\n```console\ngit clone https://github.com/ratschlab/secedo.git\n```\n* `sudo apt-get install libblas-dev` (Linux) or `brew install cmake gcc@9 libomp openblas` (for Mac, for M1 Macs remove gcc@9)\n* `mkdir secedo/build; cd secedo/build` \n* `cmake .. -DCMAKE_BUILD_TYPE=Release` (Linux and M1 Macs) or `cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=/usr/local/bin/gcc-9 -DCMAKE_CXX_COMPILER=/usr/local/bin/g++-9 ..` (for Intel-based Macs)\n* `make -j`\n* `./tests`\n"
      },
      "source": "https://raw.githubusercontent.com/ratschlab/secedo/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-06 02:21:57",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Creating the input pileup files",
        "parent_header": [
          "Installation",
          "Usage examples"
        ],
        "type": "Text_excerpt",
        "value": "If you have a bunch of BAM files, the first step is to create a pileup (a file that contains all the sequenced bases for each locus) file. You can either split the BAM files by chromosome and then distribute the pileup creation to 23 jobs, or you can just go the easy way and pile up all the data in one go. This step doesn't require much RAM, as the pileup is streamed to disk while being created - 35GB should suffice even when processing 8000 cells at coverage 0.5x (~1.4TB of data):\n```\n./pileup -i <BAM_DIR> -o <OUT_DIR>/chromosome --chromosomes 1 --num_threads 20 --log_level=trace --min_base_quality 30 --max_coverage 1000\n```\nThe command above will create a pileup for the first chromosome. If you ommit the `--chromosome` parameter, `pileup` will create 24 pileup files, one for each chromosome.\n\nThe pileup files are created in SECEDO's binary format (extension .bin) and in the `samtools` compatible textual format \n(extension .txt), which is useful for debugging and manual inspection.\n"
      },
      "source": "https://raw.githubusercontent.com/ratschlab/secedo/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Clustering and variant calling",
        "parent_header": [
          "Installation",
          "Usage examples"
        ],
        "type": "Text_excerpt",
        "value": "```\n./secedo -i <PILEUP_DIR> -o <OUT_DIR> --num_threads 20 --log_level=trace \\\n             --homozygous_filtered_rate=0.5 --seq_error_rate=0.01 \\\n             --reference_genome=OPTIONAL_REFERENCE_GENOME_FASTA \\\n             --max_coverage 1000 --min_cluster_size 500\n```\n\nThis will run the clustering and variant calling on the pileup files available in `PILEUP_DIR` and write the clustering information to `OUT_DIR/clustering`. If a reference genome was provided via `--reference_genome`, the VCF files for each cluster will be written to `OUT_DIR/cluster_<cluster_no>.vcf`. Make sure that the chromosomes in your reference genome are ordered from 1,2,3, to 22, X, Y (some grch37 reference genomes come ordered lexicographically by chromosome!, e.g. 1, 10, 11, etc.).\n\nYou will need enough RAM to fit the pileups and a bit of extra - we were able to process 8K cells in 32GB of RAM, so this shouldn't be an issue. \n\nTake a look at [breast_cancer/variant_call.sh](https://github.com/ratschlab/secedo/blob/main/experiments/breast_cancer/variant_call.sh) for inspiration on how to use `SECEDO`.\n"
      },
      "source": "https://raw.githubusercontent.com/ratschlab/secedo/main/README.md",
      "technique": "header_analysis"
    }
  ]
}