{
  "application_domain": [
    {
      "confidence": 27.92,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/harbourlab/PieParty"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-06-08T02:25:24Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-04-23T13:32:19Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "represent each cell in UMAP plots as a pie chart"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9380323413821706,
      "result": {
        "original_header": "PieParty is a visualization tool allowing to represent every cell in single-cell sequencing plots (UMAP, tSNE, ect.) as a pie chart. Each slice in a pie chart represents the expression of a single gene. Custom gene lists and coloring can be applied.",
        "type": "Text_excerpt",
        "value": "Please cite:\nKurtenbach, S., Dollar, J. J., Cruz, A. M., Durante, M. A., Decatur, C. L., and Harbour, J. W.; PieParty: visualizing cells from scRNA-seq data as pie charts; Life Sci Alliance; 5 4 2021 \nPieParty plots depict every cell in single cell plots such as UMAP and tSNE as pie charts, where every slice of the pie chart corresponds to the relative gene expression of one gene. A set of genes can be defined to be plotted, and custom coloring can be defined. Different sets of genes can be used, e.g. one list with macrophage markers, and one list with cancer cell markers. Every list can be assigned a unique color or color palette, e.g. macrophage markers in yellow, and cancer cells in red. \nNote:\nWhile running the PieParty script the command line will issue a warning, as the generated PNG file is very large. The warning is normal and can be ignored. \"DecompressionBombWarning: Image size (169000000 pixels) exceeds limit of\n89478485 pixels, could be decompression bomb DOS attack.\"\n \n"
      },
      "source": "https://raw.githubusercontent.com/harbourlab/PieParty/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9328856957857985,
      "result": {
        "original_header": "Options (required):",
        "type": "Text_excerpt",
        "value": "-g _gene expression file.csv_<br>\nFor the expression matrix, you will need a matrix of RNA counts with the cell IDs as columns and           gene names as rows.    The expression matrix column names should match the cell IDs in the UMAP/tSNE coordinate table. In Seurat, this count matrix can be generated from accessing the data under Seurat_Object@assays$RNA@data. \n-c _cell coordinates.csv_ <br>\nFor the UMAP/tSNE coordinate table, you will need a column for each reduction (UMAP or tSNE) dimension (column 1 = UMAP_1, column 2 = UMAP_2). Row names should be the cell IDs, matching the expression matrix. In Seurat, this data can be accessed under Seurat_Object@reductions$umap@cell.embeddings. \n-l _genelist.csv_ <br>\nlists of genes that should be plotted (csv). One list is minimum. If more lists are provided, separate coloring can be applied. Gene lists need to be csv files with one column, and one gene per row. \n"
      },
      "source": "https://raw.githubusercontent.com/harbourlab/PieParty/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9516665028761608,
      "result": {
        "original_header": "Options (not required):",
        "type": "Text_excerpt",
        "value": "-color _(hex colors or matplotlib colormaps)_ <br>\nIf multiple gene lists are used same amount of colors should be provided. e.g. \"-color autumn\" for one gene list, or \"-color @FF00FF @FFFF00\" for two gene lists. The latter example are hex codes. Colormap names can be found here https://matplotlib.org/tutorials/colors/colormaps.html. Default is \"viridis\". In case a colormap is chosen, PieParty will auto-assign colors in order according to the genes in the gene lists provided. \n-p proportionalize (True or False) <br>\nIf two or more gene lists are provided, PieParty can normalize for difference in gene amounts in the lists. This is useful in many cases, as lists of e.g. 4 macrophage markers, and 102 keratinocyte markers will produce pie charts that are predomonatelly filled with slices from the keratinocyte markers, although overall each individual marker may be expressed less as the 4 macrophage markers. The normalized expression value is calculated by multiplication of the expression value with the number of total genes in all lists, divided by the number of genes in the list of the respective gene (N_(gene_list)). Default is True. \n-ct percentage cutoff (float) <br>\nCutoff percentage of expression in a pie chart a gene has to meet to be included. Default is 1%, meaning if a gene is not expressed at least 1% of the summed expression of all other genes in the pie it is excluded. \n-lc lighten colors (True or False) <br>\nThis setting will lighten the colors of the pie slices according to their expression value. Default is True. \n-gc lighten colors based on global (True or False) <br>\nIf multiple gene lists are used as inputs, it might be desired that PieParty does not use the same scale to lighten the colors of pie slices. For instance, if gene list A has high expressing genes, and gene list B has only low expressing genes, the colors will be very faint for the second list in general. In this case -gc can be set to False, to increase color saturation. PieParty will then use the maximum gene expression value for each list to determinte color saturation. However, be aware that if this is set to False a direct comparison of gene expression is not possible. Default is True. \n-pr plot resolution (int) <br>\nDefault is 13000, which results in high-resolution plots and reccomended. 2400 is still good enough in most cases and decreases computation time if wished. \n-gp plot giant pies (True, False) <br>\nSet this to \"True\" to plot one giant pie per cell cluster. The size of the pie chart will correlate with the number of cells in the cluster. \nPlotting giant pies requires a csv file defining which cell (1st column) is in which cluster (2nd column). The cluster file has to be defined with \"-cf\". I reccoment trying this without the lighten colors function \"-lc False\", as depending on your dataset the giant pies will be light in color.\nThe coordinates file can be exported as a csv file in R with \u201cwrite.csv(SeuratObject@reductions$umap@cell.embeddings, file = \"SeuratObject_UMAPcoordinates.csv\u201d)\u201d \n"
      },
      "source": "https://raw.githubusercontent.com/harbourlab/PieParty/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/harbourlab/PieParty/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/harbourlab/PieParty/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "harbourlab/PieParty"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PieParty v1.7.3 - Visualizing cells from scRNA-seq data as pie charts"
      },
      "source": "https://raw.githubusercontent.com/harbourlab/PieParty/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/harbourlab/PieParty/master/testis.png"
      },
      "source": "https://raw.githubusercontent.com/harbourlab/PieParty/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/harbourlab/PieParty/master/Screen Shot 2020-09-18 at 8.03.00 PM.png"
      },
      "source": "https://raw.githubusercontent.com/harbourlab/PieParty/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/harbourlab/PieParty/master/Screen Shot 2020-09-18 at 8.03.17 PM.png"
      },
      "source": "https://raw.githubusercontent.com/harbourlab/PieParty/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/harbourlab/PieParty/master/2_t6_giant_pies.png"
      },
      "source": "https://raw.githubusercontent.com/harbourlab/PieParty/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/harbourlab/PieParty/master/example_output.png"
      },
      "source": "https://raw.githubusercontent.com/harbourlab/PieParty/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9984470650129709,
      "result": {
        "original_header": "PieParty is a visualization tool allowing to represent every cell in single-cell sequencing plots (UMAP, tSNE, ect.) as a pie chart. Each slice in a pie chart represents the expression of a single gene. Custom gene lists and coloring can be applied.",
        "type": "Text_excerpt",
        "value": "<img src=\"https://github.com/harbourlab/PieParty/blob/master/testis.png\" width=\"300\"> \n<img src=\"https://github.com/harbourlab/PieParty/blob/master/Screen Shot 2020-09-18 at 8.03.00 PM.png\" width=\"800\"> \n<img src=\"https://github.com/harbourlab/PieParty/blob/master/Screen Shot 2020-09-18 at 8.03.17 PM.png\" width=\"800\"> \n<img src=\"https://github.com/harbourlab/PieParty/blob/master/2_t6_giant_pies.png\" width=\"300\"> \n_Requirements: Python 3. Please do not use Python 2.<br>\nPython packages required: matplotlib_ \n"
      },
      "source": "https://raw.githubusercontent.com/harbourlab/PieParty/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9902062241652039,
      "result": {
        "original_header": "Options (not required):",
        "type": "Text_excerpt",
        "value": "-color _(hex colors or matplotlib colormaps)_ <br>\nIf multiple gene lists are used same amount of colors should be provided. e.g. \"-color autumn\" for one gene list, or \"-color @FF00FF @FFFF00\" for two gene lists. The latter example are hex codes. Colormap names can be found here https://matplotlib.org/tutorials/colors/colormaps.html. Default is \"viridis\". In case a colormap is chosen, PieParty will auto-assign colors in order according to the genes in the gene lists provided. \n"
      },
      "source": "https://raw.githubusercontent.com/harbourlab/PieParty/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.9142793322856724,
      "result": {
        "original_header": "PieParty is a visualization tool allowing to represent every cell in single-cell sequencing plots (UMAP, tSNE, ect.) as a pie chart. Each slice in a pie chart represents the expression of a single gene. Custom gene lists and coloring can be applied.",
        "type": "Text_excerpt",
        "value": "Usage: \n<pre>\npython PieParty.py -g expression_file.csv -c cell_coordinates.csv -l genelist1.csv genelist2.csv\n</pre> \n"
      },
      "source": "https://raw.githubusercontent.com/harbourlab/PieParty/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8690230635864102,
      "result": {
        "original_header": "Options (not required):",
        "type": "Text_excerpt",
        "value": "-o _output_file_name.png_ <br> Default = \"output.png\" \n-gp plot giant pies (True, False) <br>\nSet this to \"True\" to plot one giant pie per cell cluster. The size of the pie chart will correlate with the number of cells in the cluster. \nPlotting giant pies requires a csv file defining which cell (1st column) is in which cluster (2nd column). The cluster file has to be defined with \"-cf\". I reccoment trying this without the lighten colors function \"-lc False\", as depending on your dataset the giant pies will be light in color.\nThe coordinates file can be exported as a csv file in R with \u201cwrite.csv(SeuratObject@reductions$umap@cell.embeddings, file = \"SeuratObject_UMAPcoordinates.csv\u201d)\u201d \n\nUsage example:\n<pre>\npython PieParty.py -g expression_file.csv -c cell_coordinates.csv -l genelist1.csv genelist2.csv -gp True -cf clusters.csv -lc False\n</pre> \n"
      },
      "source": "https://raw.githubusercontent.com/harbourlab/PieParty/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/harbourlab/PieParty/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "seurat, single-cell-analysis, umap"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PieParty"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "harbourlab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 21904,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/harbourlab/PieParty/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "harbourlab",
          "type": "User"
        },
        "date_created": "2021-02-18T16:20:14Z",
        "date_published": "2021-02-26T21:25:49Z",
        "html_url": "https://github.com/harbourlab/PieParty/releases/tag/PiePartyv1.7",
        "name": "PieParty_v1.7",
        "release_id": 38824127,
        "tag": "PiePartyv1.7",
        "tarball_url": "https://api.github.com/repos/harbourlab/PieParty/tarball/PiePartyv1.7",
        "type": "Release",
        "url": "https://api.github.com/repos/harbourlab/PieParty/releases/38824127",
        "value": "https://api.github.com/repos/harbourlab/PieParty/releases/38824127",
        "zipball_url": "https://api.github.com/repos/harbourlab/PieParty/zipball/PiePartyv1.7"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "harbourlab",
          "type": "User"
        },
        "date_created": "2020-09-15T15:52:10Z",
        "date_published": "2020-09-15T15:52:36Z",
        "html_url": "https://github.com/harbourlab/PieParty/releases/tag/v1.5-2",
        "name": "Pieparty v1.5",
        "release_id": 31339431,
        "tag": "v1.5-2",
        "tarball_url": "https://api.github.com/repos/harbourlab/PieParty/tarball/v1.5-2",
        "type": "Release",
        "url": "https://api.github.com/repos/harbourlab/PieParty/releases/31339431",
        "value": "https://api.github.com/repos/harbourlab/PieParty/releases/31339431",
        "zipball_url": "https://api.github.com/repos/harbourlab/PieParty/zipball/v1.5-2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "harbourlab",
          "type": "User"
        },
        "date_created": "2020-09-14T18:40:33Z",
        "date_published": "2020-09-14T18:52:47Z",
        "description": "Added functionality",
        "html_url": "https://github.com/harbourlab/PieParty/releases/tag/v1.5",
        "name": "Pieparty v1.5",
        "release_id": 31279551,
        "tag": "v1.5",
        "tarball_url": "https://api.github.com/repos/harbourlab/PieParty/tarball/v1.5",
        "type": "Release",
        "url": "https://api.github.com/repos/harbourlab/PieParty/releases/31279551",
        "value": "https://api.github.com/repos/harbourlab/PieParty/releases/31279551",
        "zipball_url": "https://api.github.com/repos/harbourlab/PieParty/zipball/v1.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "harbourlab",
          "type": "User"
        },
        "date_created": "2020-08-25T19:39:40Z",
        "date_published": "2020-08-25T19:41:24Z",
        "description": "First stable build",
        "html_url": "https://github.com/harbourlab/PieParty/releases/tag/1.2",
        "name": "PieParty v1.2",
        "release_id": 30120967,
        "tag": "1.2",
        "tarball_url": "https://api.github.com/repos/harbourlab/PieParty/tarball/1.2",
        "type": "Release",
        "url": "https://api.github.com/repos/harbourlab/PieParty/releases/30120967",
        "value": "https://api.github.com/repos/harbourlab/PieParty/releases/30120967",
        "zipball_url": "https://api.github.com/repos/harbourlab/PieParty/zipball/1.2"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 16:25:47",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 16
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Example data files:",
        "parent_header": [
          "PieParty v1.7.3 - Visualizing cells from scRNA-seq data as pie charts"
        ],
        "type": "Text_excerpt",
        "value": "You can download a small example dataset from this github page (example dataset folder), which includes three files neccessary to run PieParty. Execute PieParty with:\n<pre>\npython PieParty.py -c coordinates_anon.csv -l example_gene_list.csv -g expression_anon.csv\n</pre>\nThis should run in about 5 minutes and produce the following output png containing 183 cells:\n\n<img src=\"https://github.com/harbourlab/PieParty/blob/master/example_output.png\" width=\"300\">\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/harbourlab/PieParty/master/README.md",
      "technique": "header_analysis"
    }
  ]
}