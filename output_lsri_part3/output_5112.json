{
  "application_domain": [
    {
      "confidence": 25.79,
      "result": {
        "type": "String",
        "value": "Natural Language Processing"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/regulomics/expansion-network"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-03-23T10:35:19Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-04-07T10:35:17Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Description",
        "type": "Text_excerpt",
        "value": "\n\n- *examples* Example models and test files.\n\n- *Python* Contains the code for the network inference procedure.\n\n- *R* Contains code related to the model expansion procedure, boolean function simplification and decomposition, conversion from SBML model to IGRAPH object/REIN model, and regulatory module analysis.\n\n"
      },
      "source": "https://raw.githubusercontent.com/regulomics/expansion-network/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.980114676953775,
      "result": {
        "original_header": "Automated Inference of Gene Regulatory Networks Using Explicit Regulatory Modules",
        "type": "Text_excerpt",
        "value": "This GitHub project provides the code for the network inference and model expansion procedures, along with all the related scripts used in the paper *Automated Inference of Gene Regulatory Networks Using Explicit Regulatory Modules* (non published). \n"
      },
      "source": "https://raw.githubusercontent.com/regulomics/expansion-network/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8987861755200477,
      "result": {
        "original_header": "Network Inference Procedure",
        "type": "Text_excerpt",
        "value": "Method similar to **RE:IN** (**reference:** *Yordanov, B., Dunn, S. J., Kugler, H., Smith, A., Martello, G., & Emmott, S. (2016). A method to identify and analyze biological programs through automated reasoning. NPJ systems biology and applications, 2, 16010.*). \nThis code can be used for *regular* or *expanded* Boolean models, with some slight modifications in the format of the model file compared to **RE:IN**-formatted files: \nIn the line that describes the nodes, instead of: \n\nCompared to **RE:IN**, two types of constraints have been added: \n- If an interaction of type \"TF to RM\" is selected, then the interaction \"RM -> gene\" must be selected. \n- If an interaction of type \"RM to gene\" is not selected, then no associated interaction of type \"TF to RM\" can be selected. \n\nResults from the solver are stored in the folder \"results/\" located in the folder related to the solver, and models should be present in the subdirectory \"models\" of the folder \"examples\". This can be modified in file `global_paths.py`.\n \n"
      },
      "source": "https://raw.githubusercontent.com/regulomics/expansion-network/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9536649427879057,
      "result": {
        "original_header": "Specifications",
        "type": "Text_excerpt",
        "value": "\n- Obtained from a text file (such as GRF output of RE:IN) with function \"readModel\" in *boolean_reducer.R* \n"
      },
      "source": "https://raw.githubusercontent.com/regulomics/expansion-network/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8097219812795752,
      "result": {
        "original_header": "Regulatory Module Analysis",
        "type": "Text_excerpt",
        "value": "\nBuild a graph (in DOT) associated with a RE:IN model called \"model.net\": \n"
      },
      "source": "https://raw.githubusercontent.com/regulomics/expansion-network/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9414118801655298,
      "result": {
        "original_header": "SBML to IGRAPH/REIN",
        "type": "Text_excerpt",
        "value": "\nTo convert a SBML model \"model.xml\" into a RE:IN file with \"sync\" or \"async\" updates, maximum length of experiments *n*, uniqueness condition \"interactions\"/\"full\"/\"paths\", etc.: \n"
      },
      "source": "https://raw.githubusercontent.com/regulomics/expansion-network/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/regulomics/expansion-network/tree/master/docs"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/regulomics/expansion-network/wiki"
      },
      "source": "https://raw.githubusercontent.com/regulomics/expansion-network/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/regulomics/expansion-network/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/regulomics/expansion-network/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "regulomics/expansion-network"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/regulomics/expansion-network/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/regulomics/expansion-network/master/vignette.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements &amp; Installation",
        "type": "Text_excerpt",
        "value": "**Python:** Packages **Z3** (SMT solver) and **igraph** (GRN visualization).\n\nFor Debian Linux:\n\n`sudo apt install python-pip`\n\n`sudo python -m pip install z3-solver`\n\n`sudo python -m pip install python-igraph`\n\n\n**R:** Packages **QCA** (for boolean function simplification), **XML** (parsing of SBML/XML files) and **igraph** (GRN visualization).\n\nFor Debian Linux:\n\n`R`\n\n`> install.packages(\"QCA\")`\n\n`> install.packages(\"XML\")`\n\n`> install.packages(\"igraph\")`\n\n"
      },
      "source": "https://raw.githubusercontent.com/regulomics/expansion-network/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8776473979619881,
      "result": {
        "original_header": "Network Inference Procedure",
        "type": "Text_excerpt",
        "value": "- `Name[perturbations]{}(regulation functions)` (if the node `Name` is NOT a regulatory module). \n- `Name[perturbations]{gene}(regulation functions)` (otherwise: `gene` is the gene regulated by module `Name`). \n"
      },
      "source": "https://raw.githubusercontent.com/regulomics/expansion-network/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8196704688713842,
      "result": {
        "original_header": "Regulatory Module Analysis",
        "type": "Text_excerpt",
        "value": "`> build_graph(name=\"model\")` \n`> build_matrix(name=\"model\")` \n"
      },
      "source": "https://raw.githubusercontent.com/regulomics/expansion-network/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8676447682393231,
      "result": {
        "original_header": "SBML to IGRAPH/REIN",
        "type": "Text_excerpt",
        "value": "To convert a SBML model \"model.xml\" into a igraph object: \n`> igraph_object <- sbml2rein(filename=\"model.xml\", igraph=TRUE)` \n`> generic_model_object <- sbml2rein(filename=\"model.xml\", updates=\"async\", length=n, ...)` \n"
      },
      "source": "https://raw.githubusercontent.com/regulomics/expansion-network/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/regulomics/expansion-network/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "expansion-network"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "regulomics"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 106623,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 44350,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 1597,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/regulomics/expansion-network/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements &amp; Installation",
        "type": "Text_excerpt",
        "value": "**Python:** Packages **Z3** (SMT solver) and **igraph** (GRN visualization).\n\nFor Debian Linux:\n\n`sudo apt install python-pip`\n\n`sudo python -m pip install z3-solver`\n\n`sudo python -m pip install python-igraph`\n\n\n**R:** Packages **QCA** (for boolean function simplification), **XML** (parsing of SBML/XML files) and **igraph** (GRN visualization).\n\nFor Debian Linux:\n\n`R`\n\n`> install.packages(\"QCA\")`\n\n`> install.packages(\"XML\")`\n\n`> install.packages(\"igraph\")`\n\n"
      },
      "source": "https://raw.githubusercontent.com/regulomics/expansion-network/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 18:49:41",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Test files",
        "parent_header": [
          "Network Inference Procedure",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "To test functions from *filename* in {*shortcuts* | *utils* | *grn_inference* | *launch_model*}, type in the terminal (in the \"Python\" folder):\n\n`python tests.py filename`\n\n"
      },
      "source": "https://raw.githubusercontent.com/regulomics/expansion-network/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Network inference from an abstract model and an experiments file",
        "parent_header": [
          "Network Inference Procedure",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "`python solve.py run [--simplify] [--visualize] model experiments`\n\n\n- Option *--simplify* uses the boolean reducer to simplify the expression of the resulting GRFs.\n\n- Option *--visualize* build each graph image corresponding to each model candidate found.\n\n\n\"model\" and \"experiments\" are the respective names of the model and the experiments files, that must contain the file extension.\n\n**Example:** To test the **Toy** model from RE:IN (located at \"../examples/models/toy\"), and visualize all the GRNs corresponding to the model solutions, type the following command:\n\n`python solve.py run --visualize toy/model_expanded.net toy/observations.spec`\n\n"
      },
      "source": "https://raw.githubusercontent.com/regulomics/expansion-network/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Get trajectory from a candidate model and an initial state",
        "parent_header": [
          "Network Inference Procedure",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "By default, the model file and the experiments files are respectively named \"model.net\" and \"observations.spec\". This can be modified in file `global_paths.py`. They are stored in the models folder in a subdirectory called \"model_name\". \n\n`python solve.py launch model_name [igraph] [--model (default:model_expanded)] [--experiments (default:observations)]\u00a0[--modelID (default:0)] [--q0 (default:111...11)] [--nstep (default:20)] [--solmax (default:10)] [--steadyStates (default:0)] [--expnames condition1 condition2 ...]`\n\n\n- if *igraph* is present then it returns the igraph associated with model solution number *modelID* (or the full abstract model if no non-empty model solution list is provided, see `solve.py`)\n\n- *model* is the model file name (without the extension \".net\").\n\n- *experiments* is the experiments file name (without the extension \".spec\").\n\n- *modelID* is the index of the model candidate on which the function should be applied.\n\n- *q0* is the initial state (a sequence of 0's and 1's of size #nodes or a condition name that appears in the experiments file).\n\n- *nstep* is the length of the trajectories to generate.\n\n- *solmax* is the maximum number of trajectories to generate.\n\n- *steadyStates*, if equal to 1, adds a fix point constraint at step *nstep* to find steady states.\n\n- *expnames* checks at each step of the trajectories if the conditions (which should appear in the experiments file) appear.\n\n\nAll the arguments between brackets are optional. The optional arguments following a double dash can be given in any order, **except for** argument list associated with \"--expnames\" that must be last.\n\n**Example:** \n\nTo use the regular **Collombet** model (located at \"../examples/models/collombet/model_expanded.net\"), and get the GRN corresponding to the abstract model (in PNG format), type the following command:\n\n`python solve.py launch collombet igraph`\n\n\nTo use an expanded **Collombet** model (located at \"../examples/models/collombet/expanded.net\"), and get the GRN corresponding to the abstract model (in PNG format), type the following command:\n\n`python solve.py launch collombet igraph --model expanded`\n\n\nTo use the regular **Collombet** model (located at \"../examples/models/collombet/model_expanded.net\"), and generate at most 5 trajectories of length 40 using the first model solution found by the solver, from initial state *LymphoidMyeloidPP* (available in the \"observations.spec\" file associated with the Collombet model), with the fix point condition applied at states of step 40, and look for condition *FinalStateMac*, type the following command:\n\n`python solve.py launch collombet --q0 LymphoidMyeloidPP --nstep 40 --solmax 5 --steadyStates 1 --expnames FinalStateMac`\n\n"
      },
      "source": "https://raw.githubusercontent.com/regulomics/expansion-network/master/README.md",
      "technique": "header_analysis"
    }
  ]
}