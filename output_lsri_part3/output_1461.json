{
  "application_domain": [
    {
      "confidence": 31.58,
      "result": {
        "type": "String",
        "value": "Natural Language Processing"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Reference for Application:",
        "parent_header": [
          "RENET2: High-Performance Full-text Gene-Disease Relation Extraction with Iterative Training Data Expansion"
        ],
        "type": "Text_excerpt",
        "value": "- Microsoft's [BiomedNLP-PubMedBERT](https://huggingface.co/jambo/BiomedNLP-PubMedBERT-base-uncased-abstract-fulltext-finetuned-renet), from [James Morrill](https://github.com/jambo6). It achieves an F1 score of 0.8 at the abstract dataset.\n\n"
      },
      "source": "https://raw.githubusercontent.com/sujunhao/RENET2/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/sujunhao/RENET2"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-03-13T14:12:34Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-06-07T09:47:42Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RENET2: High-Performance Full-text Gene-Disease Relation Extraction with Iterative Training Data Expansion"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "parent_header": [
          "RENET2: High-Performance Full-text Gene-Disease Relation Extraction with Iterative Training Data Expansion"
        ],
        "type": "Text_excerpt",
        "value": "Relation extraction (RE) is a fundamental task for extracting gene\u2013disease associations from biomedical text. Many state-of-the-art tools have limited capacity, as they can extract gene\u2013disease associations only from single sentences or abstract texts. A few studies have explored extracting gene\u2013disease associations from full-text articles, but there exists a large room for improvements. In this work, we propose RENET2, a deep learning-based RE method, which implements Section Filtering and ambiguous relations modeling to extract gene\u2013disease associations from full-text articles. We designed a novel iterative training data expansion strategy to build an annotated full-text dataset to resolve the scarcity of labels on full-text articles. In our experiments, RENET2 achieved an F1-score of 72.13% for extracting gene\u2013disease associations from an annotated full-text dataset, which was 27.22, 30.30, 29.24 and 23.87% higher than BeFree, DTMiner, BioBERT and RENET, respectively. We applied RENET2 to (i) \u223c1.89M full-text articles from PubMed Central and found \u223c3.72M gene\u2013disease associations; and (ii) the LitCovid articles and ranked the top 15 proteins associated with COVID-19, supported by recent articles. RENET2 is an efficient and accurate method for full-text gene\u2013disease association extraction. The source-code, manually curated abstract/full-text training data, and results of RENET2 are available at this repo.\n\n\nRENET2 is published in [*NAR Genomics and Bioinformatics*](https://academic.oup.com/nargab/article/3/3/lqab062/6315218).\n\n\n---\n"
      },
      "source": "https://raw.githubusercontent.com/sujunhao/RENET2/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Modules Descriptions",
        "parent_header": [
          "RENET2: High-Performance Full-text Gene-Disease Relation Extraction with Iterative Training Data Expansion"
        ],
        "type": "Text_excerpt",
        "value": "Modules in `renet2` are for model training/testing.\n\n*For the Modules listed below, please use the `-h` or `--help` option for checking available options.*\n\n`renet2` | renet2 program\n---: | ---\n`train` | Module for training RENET2 models.\n`predict` | Using RENET2 models to predict gene-disease associations.\n`evaluate_renet2_ft_cv` | Evaluating trained RENET2 models and using cross-validation.\n`download_data` | Downloading articles from PMC/PTC with provided PMID/PMCID list. (please check example an RENET2/src/nb_scripts/pre_precoss/ for full-text dataset)\n`parse_data` | Parsing articles from RENET2. (please check example an RENET2/src/nb_scripts/pre_precoss/ for full-text dataset)\n`normalize_ann` | Normlize the annotation ID\n`install_geniass` | Install geniass for parse_data module, if fail, please try `conda install ruby` to install ruby first\n\n"
      },
      "source": "https://raw.githubusercontent.com/sujunhao/RENET2/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9728885865962479,
      "result": {
        "original_header": "What's new?",
        "type": "Text_excerpt",
        "value": "- 20210716\n    \n    The paper of RENET2 is published. We updated and fixed the empty parsed dataset problem, and updated the parsed full-text dataset in data/ft_data.\n    \n- 20210514 \n    Update README with data link: [http://www.bio8.cs.hku.hk/RENET2/renet2_data_models.tar.gz](http://www.bio8.cs.hku.hk/RENET2/renet2_data_models.tar.gz). The full-test annotated dataset is available at `/data/ft_info folder` in the download files. Please check this [link1](#download-data-and-trained-models) and [link2](#annotated-gene-disease-associations-based-on-iterative-training-data-expansion) for more detail.\n    \n    Add RENET testing script for full-text dataset \n    We can install RENET2 via bioconda now! and the code for the RENET2 is refined as a python package.\n     \n"
      },
      "source": "https://raw.githubusercontent.com/sujunhao/RENET2/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9824436014504422,
      "result": {
        "original_header": "Understand Output File",
        "type": "Text_excerpt",
        "value": "where `pmid` is Article PubMed Id, `geneId` is the Entrez Gene ID (Entrez), `diseaseId` is the Disease Id (MESH), `g_name` is the gene name (a ID with multiple names will be seperated by '|'), `d_name` is the disease name (a ID with multiple names is seperated by '|'), `prob_avg` is the predicted mean GDP (gene-disease probability) of all 10 models, \n`prob_X` is the predicted GDP of each models.\n \n"
      },
      "source": "https://raw.githubusercontent.com/sujunhao/RENET2/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9234999701712583,
      "result": {
        "original_header": "Annotated Gene-disease Associations Based on Iterative Training Data Expansion",
        "type": "Text_excerpt",
        "value": "    .\n    \u251c\u2500\u2500 data                    \n    \u2502   \u251c\u2500\u2500 ft_info             \n    \u2502   \u2502   \u2514\u2500\u2500 ft_500_n.tsv    # annotated full-text GDA (fisrt and second round)\n    \u2502   \u251c\u2500\u2500 ann_table          \n    \u2502   \u2502   \u251c\u2500\u2500 ann_1st.tsv     # annotated abstract GDA (fisrt round)\n    \u2502   \u2502   \u2514\u2500\u2500 ann_2nd.tsv     # annotated abstract GDA (second round)\n    \u2502   \u2514\u2500\u2500 ...                 \n    \u2514\u2500\u2500 ... \n"
      },
      "source": "https://raw.githubusercontent.com/sujunhao/RENET2/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8135433589098869,
      "result": {
        "original_header": "Found Gene-disease Associations from PMC &amp; LitCovid",
        "type": "Text_excerpt",
        "value": "    .\n    \u251c\u2500\u2500 data                    \n    \u2502   \u251c\u2500\u2500 pmc \n    \u2502   \u2502   \u2514\u2500\u2500gda_rst.tsv    # GDA from PMC\n    \u2502   \u251c\u2500\u2500 litcovid \n    \u2502   \u2502   \u2514\u2500\u2500gda_rst.tsv    # GDA from LitCovid\n    \u2502   \u2514\u2500\u2500 ...                 \n    \u2514\u2500\u2500 ...\n \n"
      },
      "source": "https://raw.githubusercontent.com/sujunhao/RENET2/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9162821697212366,
      "result": {
        "original_header": "Benchmark (Using RENET2 Cross-validation to Evalutate RENET2/BeFree/DTMiner/BioBERT Results)",
        "type": "Text_excerpt",
        "value": "```\nrenet2 evaluate_renet2_ft_cv --epochs 10 --raw_data_dir ${R2_DIR}/data/ft_data/ --annotation_info_dir ${R2_DIR}/data/ft_info/ --rst_file_prefix ft_base --have_SiDa ${R2_DIR}/data/ft_info/ft_base/ft_base --pretrained_model_p ${R2_DIR}/models/Bst_abs_10 --no_cache_file --use_cuda\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/sujunhao/RENET2/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9658507538495853,
      "result": {
        "original_header": "(Optional) Visualization",
        "type": "Text_excerpt",
        "value": "Found and visualze a pair of gene-disease annotation obtrained from Pubtar Central. \n"
      },
      "source": "https://raw.githubusercontent.com/sujunhao/RENET2/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Download Data and Trained Models",
        "parent_header": [
          "RENET2: High-Performance Full-text Gene-Disease Relation Extraction with Iterative Training Data Expansion"
        ],
        "type": "Text_excerpt",
        "value": "Download all required files\n\nAll data and models are available at this link: [http://www.bio8.cs.hku.hk/RENET2/renet2_data_models.tar.gz](http://www.bio8.cs.hku.hk/RENET2/renet2_data_models.tar.gz), please using the following scripts to download data for RENET2.\n\n```\n### if RENET2 is installed from Bioconda\nmkdir RENET2\ncd RENET2\nRENET2_DATA_S_URL=https://raw.githubusercontent.com/sujunhao/RENET2/main/src/renet2/download_renet2_data.sh\ncurl -s ${RENET2_DATA_S_URL} | bash -s .\nR2_DIR=$(pwd)\n\n### if RENET2 is installed from GitHub\n#### make sure you are in the root dir of RENET2\nbash src/renet2/download_renet2_data.sh .\nR2_DIR=$(pwd)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/sujunhao/RENET2/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick test after downloaded all required files",
        "parent_header": [
          "RENET2: High-Performance Full-text Gene-Disease Relation Extraction with Iterative Training Data Expansion",
          "Download Data and Trained Models"
        ],
        "type": "Text_excerpt",
        "value": "```\n# quick testing\n# R2_DIR=\"[DATA/MODEL_PATH]\"                                     # e.g. ~/git/RENET2, check 'Download Data and Trained Models'\nrenet2 predict --raw_data_dir ${R2_DIR}/data/ft_data/ --gda_fn_d ${R2_DIR}/data/ft_gda/ --models_number 4 --batch_size 8 --max_doc_num 10 --no_cache_file  --model_dir ${R2_DIR}/models/ft_models/\n\n# check predicted results\n# predicted gene-disease associations\nless ${R2_DIR}/data/ft_gda/gda_rst.tsv\n```\n"
      },
      "source": "https://raw.githubusercontent.com/sujunhao/RENET2/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/sujunhao/RENET2/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sujunhao/RENET2/main/src/nb_scripts/stat_covid.ipynb"
      },
      "source": "https://raw.githubusercontent.com/sujunhao/RENET2/main/src/nb_scripts/stat_covid.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sujunhao/RENET2/main/src/nb_scripts/exp_ft.ipynb"
      },
      "source": "https://raw.githubusercontent.com/sujunhao/RENET2/main/src/nb_scripts/exp_ft.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sujunhao/RENET2/main/src/nb_scripts/parse_COVID_data.ipynb"
      },
      "source": "https://raw.githubusercontent.com/sujunhao/RENET2/main/src/nb_scripts/parse_COVID_data.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sujunhao/RENET2/main/src/nb_scripts/build_best_model_abs.ipynb"
      },
      "source": "https://raw.githubusercontent.com/sujunhao/RENET2/main/src/nb_scripts/build_best_model_abs.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sujunhao/RENET2/main/src/nb_scripts/vis_text.ipynb"
      },
      "source": "https://raw.githubusercontent.com/sujunhao/RENET2/main/src/nb_scripts/vis_text.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sujunhao/RENET2/main/src/nb_scripts/exp_abs.ipynb"
      },
      "source": "https://raw.githubusercontent.com/sujunhao/RENET2/main/src/nb_scripts/exp_abs.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sujunhao/RENET2/main/src/nb_scripts/pre_process/preparing_ft_data.ipynb"
      },
      "source": "https://raw.githubusercontent.com/sujunhao/RENET2/main/src/nb_scripts/pre_process/preparing_ft_data.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sujunhao/RENET2/main/benchmark/Generate_DTMiner_Input.ipynb"
      },
      "source": "https://raw.githubusercontent.com/sujunhao/RENET2/main/benchmark/Generate_DTMiner_Input.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sujunhao/RENET2/main/benchmark/Generate_BeFree_Input.ipynb"
      },
      "source": "https://raw.githubusercontent.com/sujunhao/RENET2/main/benchmark/Generate_BeFree_Input.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sujunhao/RENET2/main/benchmark/Generate_BioBERT_Input.ipynb"
      },
      "source": "https://raw.githubusercontent.com/sujunhao/RENET2/main/benchmark/Generate_BioBERT_Input.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sujunhao/RENET2/main/benchmark/Generate_RENET_Input.ipynb"
      },
      "source": "https://raw.githubusercontent.com/sujunhao/RENET2/main/benchmark/Generate_RENET_Input.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/sujunhao/RENET2/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "sujunhao/RENET2"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RENET2: High-Performance Full-text Gene-Disease Relation Extraction with Iterative Training Data Expansion"
      },
      "source": "https://raw.githubusercontent.com/sujunhao/RENET2/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sujunhao/RENET2/main/src/renet2/download_renet2_data_bal_v.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sujunhao/RENET2/main/src/renet2/download_renet2_data.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sujunhao/RENET2/main/src/renet2/tools/geniass/run_geniass.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sujunhao/RENET2/main/benchmark/DTMiner/benchmark_DTMiner.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sujunhao/RENET2/main/benchmark/BioBERT/run_bert.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sujunhao/RENET2/main/benchmark/BioBERT/run_bert_e.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sujunhao/RENET2/main/benchmark/BeFree/benchmark_befree.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sujunhao/RENET2/main//repo_f/RENET2_vis.png"
      },
      "source": "https://raw.githubusercontent.com/sujunhao/RENET2/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Option 1: Install RENET2 from Bioconda",
        "parent_header": [
          "RENET2: High-Performance Full-text Gene-Disease Relation Extraction with Iterative Training Data Expansion",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "```bash\n\nconda config --add channels defaults\nconda config --add channels bioconda\nconda config --add channels conda-forge\n# create conda environment named \"renet2-env\"\nconda create -n renet2-env -c bioconda renet2\nconda activate renet2-env\n\n# run renet2 like this afterwards\nrenet2 --help\n```\n"
      },
      "source": "https://raw.githubusercontent.com/sujunhao/RENET2/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Option 2: Install RENET2 from GitHub",
        "parent_header": [
          "RENET2: High-Performance Full-text Gene-Disease Relation Extraction with Iterative Training Data Expansion",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "```bash\n# create renet2 env\nconda create -n renet2-env python=3.7\nconda activate renet2-env\n\n# install required package\nconda install -c conda-forge ruby scikit-learn=0.22.2.post1 pandas=1.0.1 numpy=1.18.1 tqdm=4.42.1\nconda install pytorch==1.2.0 cudatoolkit=10.0 -c pytorch\n\ngit clone https://github.com/sujunhao/RENET2.git\ncd RENET2 \npip install . --no-deps --ignore-installed\n\n# run renet2 like this afterwards\nrenet2 --help\n```\n"
      },
      "source": "https://raw.githubusercontent.com/sujunhao/RENET2/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Setup variables for renet2",
        "parent_header": [
          "RENET2: High-Performance Full-text Gene-Disease Relation Extraction with Iterative Training Data Expansion",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```\nR2_DIR=\"[DATA_MODEL_PATH]\"                                     # e.g. ~/git/RENET2, check 'Download Data and Trained Models'\n```\n"
      },
      "source": "https://raw.githubusercontent.com/sujunhao/RENET2/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9998561311330124,
      "result": {
        "original_header": "What's new?",
        "type": "Text_excerpt",
        "value": "    We can install RENET2 via bioconda now! and the code for the RENET2 is refined as a python package.\n     \n"
      },
      "source": "https://raw.githubusercontent.com/sujunhao/RENET2/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8944859498814433,
      "result": {
        "original_header": "Parsed Dataset for RENET2",
        "type": "Text_excerpt",
        "value": "Make sure you downloaded data at the [Download Data and Trained Models] section. \n    .\n    \u251c\u2500\u2500 data                    \n    \u2502   \u251c\u2500\u2500 ft_data             # full-text dataset\n    \u2502   \u2502   \u251c\u2500\u2500 docs.txt        # articles with ID/title/abstract/main text\n    \u2502   \u2502   \u251c\u2500\u2500 sentences.txt   # sentences from articles [collected from geniass]\n    \u2502   \u2502   \u251c\u2500\u2500 anns.txt        # gene/disease annotations [collected from PubTator Central]\n    \u2502   \u2502   \u251c\u2500\u2500 anns_n.txt      # gene/disease annotations with normalize annotated ID \n    \u2502   \u2502   \u251c\u2500\u2500 labels.txt      # gene-disease assoications table \n    \u2502   \u2502   \u2514\u2500\u2500 s_docs.txt      # articles with section's ID (for visualization of annotated results)\n    \u2502   \u251c\u2500\u2500 abs_data            # abstract dataset\n    \u2502   \u2502   \u251c\u2500\u2500 1st_ann         # abstract dataset, first round\n    \u2502   \u2502   \u2502   \u2514\u2500\u2500 ...                 \n    \u2502   \u2502   \u251c\u2500\u2500 2nd_ann         # abstract dataset, second round [Abstract-exp in paper]\n    \u2502   \u2502   \u2502   \u2514\u2500\u2500 ...                 \n    \u2502   \u2502   \u251c\u2500\u2500 ori             # training dataset from RENET\n    \u2502   \u2502   \u2502   \u2514\u2500\u2500 ...                 \n    \u2502   \u2502   \u2514\u2500\u2500 ori_test        # testing dataset from RENET\n    \u2502   \u2502       \u2514\u2500\u2500 ...                 \n    \u2502   \u2514\u2500\u2500 ...                 \n    \u2514\u2500\u2500 ...\n \n"
      },
      "source": "https://raw.githubusercontent.com/sujunhao/RENET2/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.994439193998609,
      "result": {
        "original_header": "Benchmark RENET2 on Abstract Data",
        "type": "Text_excerpt",
        "value": "```\n# training RENET2 model on abstract data\nrun ./src/nb_scripts/build_best_model_abs.ipynb on jupyter notebook\n# Using cross-validation to benchmarking RENET2 on abstract data\nrun ./src/nb_scripts/exp_abs.ipynb on jupyter notebook\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/sujunhao/RENET2/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9962764706973197,
      "result": {
        "original_header": "(Optional) Visualization",
        "type": "Text_excerpt",
        "value": "\n```\nrun ./src/nb_scripts/vis_text.ipynb on jupyter notebook\n```\n![RENET2 vis](/repo_f/RENET2_vis.png \"RENET2 vis\") \n"
      },
      "source": "https://raw.githubusercontent.com/sujunhao/RENET2/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8193802537250792,
      "result": {
        "original_header": "Parsed Dataset for RENET2",
        "type": "Text_excerpt",
        "value": "    .\n    \u251c\u2500\u2500 data                    \n    \u2502   \u251c\u2500\u2500 ft_data             # full-text dataset\n    \u2502   \u2502   \u251c\u2500\u2500 docs.txt        # articles with ID/title/abstract/main text\n    \u2502   \u2502   \u251c\u2500\u2500 sentences.txt   # sentences from articles [collected from geniass]\n    \u2502   \u2502   \u251c\u2500\u2500 anns.txt        # gene/disease annotations [collected from PubTator Central]\n    \u2502   \u2502   \u251c\u2500\u2500 anns_n.txt      # gene/disease annotations with normalize annotated ID \n    \u2502   \u2502   \u251c\u2500\u2500 labels.txt      # gene-disease assoications table \n    \u2502   \u2502   \u2514\u2500\u2500 s_docs.txt      # articles with section's ID (for visualization of annotated results)\n    \u2502   \u251c\u2500\u2500 abs_data            # abstract dataset\n    \u2502   \u2502   \u251c\u2500\u2500 1st_ann         # abstract dataset, first round\n    \u2502   \u2502   \u2502   \u2514\u2500\u2500 ...                 \n    \u2502   \u2502   \u251c\u2500\u2500 2nd_ann         # abstract dataset, second round [Abstract-exp in paper]\n    \u2502   \u2502   \u2502   \u2514\u2500\u2500 ...                 \n    \u2502   \u2502   \u251c\u2500\u2500 ori             # training dataset from RENET\n    \u2502   \u2502   \u2502   \u2514\u2500\u2500 ...                 \n    \u2502   \u2502   \u2514\u2500\u2500 ori_test        # testing dataset from RENET\n    \u2502   \u2502       \u2514\u2500\u2500 ...                 \n    \u2502   \u2514\u2500\u2500 ...                 \n    \u2514\u2500\u2500 ...\n \n"
      },
      "source": "https://raw.githubusercontent.com/sujunhao/RENET2/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8578010518092295,
      "result": {
        "original_header": "Benchmark RENET2 on Abstract Data",
        "type": "Text_excerpt",
        "value": "```\n# training RENET2 model on abstract data\nrun ./src/nb_scripts/build_best_model_abs.ipynb on jupyter notebook\n# Using cross-validation to benchmarking RENET2 on abstract data\nrun ./src/nb_scripts/exp_abs.ipynb on jupyter notebook\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/sujunhao/RENET2/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8306322796380243,
      "result": {
        "original_header": "(Optional) Visualization",
        "type": "Text_excerpt",
        "value": "\n```\nrun ./src/nb_scripts/vis_text.ipynb on jupyter notebook\n```\n![RENET2 vis](/repo_f/RENET2_vis.png \"RENET2 vis\") \n"
      },
      "source": "https://raw.githubusercontent.com/sujunhao/RENET2/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/sujunhao/RENET2/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bioinformatics, deep-learning, gene-disease-associations, relation-extraction"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "BSD 3-Clause \"New\" or \"Revised\" License",
        "spdx_id": "BSD-3-Clause",
        "type": "License",
        "url": "https://api.github.com/licenses/bsd-3-clause",
        "value": "https://api.github.com/licenses/bsd-3-clause"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Copyright 2021 The University of Hong Kong, Department of Computer Science\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\n   may be used to endorse or promote products derived from this software without\n   specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
      },
      "source": "https://raw.githubusercontent.com/sujunhao/RENET2/main/LICENSE.md",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sujunhao/RENET2/main//repo_f/RENET2_logo.png"
      },
      "source": "https://raw.githubusercontent.com/sujunhao/RENET2/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RENET2"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "sujunhao"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 4110199,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 358314,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 48467,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 15029,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Roff",
        "size": 11341,
        "type": "Programming_language",
        "value": "Roff"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 6410,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Ruby",
        "size": 4481,
        "type": "Programming_language",
        "value": "Ruby"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 478,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sujunhao/RENET2/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sujunhao",
          "type": "User"
        },
        "date_created": "2021-03-20T02:12:50Z",
        "date_published": "2021-03-26T07:31:32Z",
        "description": "Bioconda version",
        "html_url": "https://github.com/sujunhao/RENET2/releases/tag/v1.2",
        "name": "RENET2 v1.2",
        "release_id": 40523645,
        "tag": "v1.2",
        "tarball_url": "https://api.github.com/repos/sujunhao/RENET2/tarball/v1.2",
        "type": "Release",
        "url": "https://api.github.com/repos/sujunhao/RENET2/releases/40523645",
        "value": "https://api.github.com/repos/sujunhao/RENET2/releases/40523645",
        "zipball_url": "https://api.github.com/repos/sujunhao/RENET2/zipball/v1.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sujunhao",
          "type": "User"
        },
        "date_created": "2021-03-20T02:12:50Z",
        "date_published": "2021-03-20T02:20:29Z",
        "description": "used to create the resource in the paper",
        "html_url": "https://github.com/sujunhao/RENET2/releases/tag/v1.0",
        "name": "RENET2 v1.0",
        "release_id": 40094340,
        "tag": "v1.0",
        "tarball_url": "https://api.github.com/repos/sujunhao/RENET2/tarball/v1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/sujunhao/RENET2/releases/40094340",
        "value": "https://api.github.com/repos/sujunhao/RENET2/releases/40094340",
        "zipball_url": "https://api.github.com/repos/sujunhao/RENET2/zipball/v1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sujunhao",
          "type": "User"
        },
        "date_created": "2021-03-20T02:12:50Z",
        "date_published": "2021-03-25T15:30:03Z",
        "html_url": "https://github.com/sujunhao/RENET2/releases/tag/v1.1-alpha",
        "name": "RENET2 v1.1-alpha",
        "release_id": 40423451,
        "tag": "v1.1-alpha",
        "tarball_url": "https://api.github.com/repos/sujunhao/RENET2/tarball/v1.1-alpha",
        "type": "Release",
        "url": "https://api.github.com/repos/sujunhao/RENET2/releases/40423451",
        "value": "https://api.github.com/repos/sujunhao/RENET2/releases/40423451",
        "zipball_url": "https://api.github.com/repos/sujunhao/RENET2/zipball/v1.1-alpha"
      },
      "technique": "GitHub_API"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Run RENET2 Model",
        "parent_header": [
          "RENET2: High-Performance Full-text Gene-Disease Relation Extraction with Iterative Training Data Expansion",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```\n## for using RENET2, please make sure that -\n## 1. in RENET2-env environment (using 'conda activate RENET2-env' to setup RENET2 environment)\n## 2. follow the 'Download Data and Trained Models' to download RENET2 dataset and trained models first\n## 3. setup the `R2_DIR` variable as in 'Setup variables for renet2'\n## use --use_cuda if you have GPUs and want to use GPUs\n\n# set RENET2's models dir, noted that trained model already in this dir\nMODEL_DIR=${R2_DIR}/models/ft_models\n\n# train 10 RENET2 models (optional, trained model already in the models dir)\nMODEL_DIR=${R2_DIR}/models/ft_models_test\nrenet2 train --raw_data_dir ${R2_DIR}/data/ft_data/ --annotation_info_dir ${R2_DIR}/data/ft_info --model_dir ${MODEL_DIR} --pretrained_model_p ${R2_DIR}/models/Bst_abs_10  --epochs 10 --models_number 10 --batch_size 60 --have_SiDa ${R2_DIR}/data/ft_info/ft_base/ft_base --gda_fn_d ${R2_DIR}/data/ft_gda/ --use_cuda\n\n# use trained RENET2 models to predict GDAs (using --is_sensitive_mode to enable RENET2-Sensitive mode)\n# maximum using 10 models to predict\nrenet2 predict --raw_data_dir ${R2_DIR}/data/ft_data/ --model_dir ${MODEL_DIR} --models_number 2 --batch_size 60 --gda_fn_d ${R2_DIR}/data/ft_gda/ --use_cuda\n\n# check predicted GDAs\nless ${R2_DIR}/data/ft_gda/gda_rst.tsv\n\n# apply 5-fold cross-validation to test RENET2 performance\nrenet2 evaluate_renet2_ft_cv --epochs 10 --raw_data_dir ${R2_DIR}/data/ft_data/ --annotation_info_dir ${R2_DIR}/data/ft_info/ --rst_file_prefix ft_base --have_SiDa ${R2_DIR}/data/ft_info/ft_base/ft_base --pretrained_model_p ${R2_DIR}/models/Bst_abs_10 --no_cache_file --use_cuda\n```\n"
      },
      "source": "https://raw.githubusercontent.com/sujunhao/RENET2/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example of running RENET2 Model on abstract data",
        "parent_header": [
          "RENET2: High-Performance Full-text Gene-Disease Relation Extraction with Iterative Training Data Expansion",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "to try run RENET2 on abstract, you can using the code as:\n```\nrenet2 predict --raw_data_dir ${R2_DIR}/data/abs_data/2nd_ann/ \\\n--model_dir ${R2_DIR}/models/ \\\n--gda_fn_d ${R2_DIR}/data/test_data/ \\\n--models_number 1 \\\n--model_name Bst_abs_10 \\\n--batch_size 8 \\\n--no_cache_file \\\n--fix_snt_n 32 \\\n--file_name_ann anns.txt\n\n# then go to benchmark folder and run the following to checked the trained models\npython calculate_metrics_with_input.py ${R2_DIR}/data/abs_data/2nd_ann/labels.txt ${R2_DIR}/data/test_data/gda_rst.tsv\n\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/sujunhao/RENET2/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Run BeFree",
        "parent_header": [
          "RENET2: High-Performance Full-text Gene-Disease Relation Extraction with Iterative Training Data Expansion",
          "Benchmark"
        ],
        "type": "Text_excerpt",
        "value": "```\npip install pymongo\npip install regex\ncd benchmark/BeFree\ngit clone git@bitbucket.org:ibi_group/befree.git\n\nwget http://www.bio8.cs.hku.hk/RENET2/renet2_bm_befree.tar.gz\ntar -xf renet2_bm_befree.tar.gz\n# get BeFree input\nrun Generate_BeFree_Input.ipynb on python jypyter notebook to genrate BeFree input\nsh benchmark_befree.sh\n```\n"
      },
      "source": "https://raw.githubusercontent.com/sujunhao/RENET2/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Run DTMiner",
        "parent_header": [
          "RENET2: High-Performance Full-text Gene-Disease Relation Extraction with Iterative Training Data Expansion",
          "Benchmark"
        ],
        "type": "Text_excerpt",
        "value": "```\ncd benchmark/DTMiner\nwget http://www.bio8.cs.hku.hk/RENET2/renet2_bm_dtminer.tar.gz\ntar -xf renet2_bm_dtminer.tar.gz\n# get DTMiner input\nrun Generate_DTMiner_Input.ipynb on python jypyter notebook to genrate BeFree input\nsh benchmark_DTMiner.sh \n```\n"
      },
      "source": "https://raw.githubusercontent.com/sujunhao/RENET2/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Run BioBERT",
        "parent_header": [
          "RENET2: High-Performance Full-text Gene-Disease Relation Extraction with Iterative Training Data Expansion",
          "Benchmark"
        ],
        "type": "Text_excerpt",
        "value": "```\ncd benchmark/BioBERT\ngit clone https://github.com/dmis-lab/biobert\ncd biobert; pip install -r requirements.txt\n./download.sh\n\n# generate BioBERT input\nrun Generate_BioBERT_Input.ipynb on python jypyter notebook\n\n# run BioBERT\nsh run_bert.sh\n```\n"
      },
      "source": "https://raw.githubusercontent.com/sujunhao/RENET2/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Run RENET (on full-text)",
        "parent_header": [
          "RENET2: High-Performance Full-text Gene-Disease Relation Extraction with Iterative Training Data Expansion",
          "Benchmark"
        ],
        "type": "Text_excerpt",
        "value": "```\ncd benchmark\n\nrun Generate_RENET_Input.ipynb on python jypyter notebook\n```\n"
      },
      "source": "https://raw.githubusercontent.com/sujunhao/RENET2/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-06 05:05:38",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 27
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "General usage",
        "parent_header": [
          "RENET2: High-Performance Full-text Gene-Disease Relation Extraction with Iterative Training Data Expansion",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```\n# help page for renet2\nrenet2 --help\n\n# to run a submodule using python\nrenet2 [submodule] [options]\n```\n"
      },
      "source": "https://raw.githubusercontent.com/sujunhao/RENET2/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Pipeline: Use RENET2 to predict Gene-Disease Associations from articles ID",
        "parent_header": [
          "RENET2: High-Performance Full-text Gene-Disease Relation Extraction with Iterative Training Data Expansion",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "    Input: PMID and PMCID list          [example: RENET2/test/test_download_pmcid_list.csv]\n    Output: Gene-Disease Assoications   [example: will generate at RENET2/data/test_data/gda_rst.tsv]\n    \npipeline with example \n\nInput data: PMID and PMCID list `${R2_DIR}/test/test_download_pmcid_list.csv`\n\n1. download text and NER annotations  \n```\n# download abstract and its annotations\n# (download abstract is required for the full-text case, as some full-text at PTC did not have an abstract section, should download separately)\nrenet2 download_data --process_n 3 --id_f ${R2_DIR}/test/test_download_pmcid_list.csv --type abs --dir ${R2_DIR}/data/raw_data/abs/ --tmp_hit_f ${R2_DIR}/data/test_data/hit_id_l.csv\n\n# download full-text and its annotations\nrenet2 download_data --process_n 3 --id_f ${R2_DIR}/test/test_download_pmcid_list.csv --type ft --dir ${R2_DIR}/data/raw_data/ft/ --tmp_hit_f ${R2_DIR}/data/test_data/hit_id_l.csv\n```\n\n2. parse text and enetities annotations to RENET2 input format\n```\n# parse data\nrenet2 install_geniass          # install geniass, only run one time\nconda install ruby              # install ruby\nrenet2 parse_data --id_f ${R2_DIR}/test/test_download_pmcid_list.csv --type 'ft' --in_abs_dir ${R2_DIR}/data/raw_data/abs/  --in_ft_dir ${R2_DIR}/data/raw_data/ft/ --out_dir ${R2_DIR}/data/test_data/\n\n# normalize NET ID\nrenet2 normalize_ann  --in_f ${R2_DIR}/data/test_data/anns.txt  --out_f ${R2_DIR}/data/test_data/anns_n.txt\n```\n3. run RENET2 on parsed data\n```\nMODEL_DIR=${R2_DIR}/models/ft_models          # using the pretrained 10 models at ft_models\nrenet2 predict --raw_data_dir ${R2_DIR}/data/test_data/ --model_dir ${R2_DIR}/models/ft_models/ --gda_fn_d ${R2_DIR}/data/test_data/ --models_number 4 --batch_size 8 --max_doc_num 10 --no_cache_file \n```\nOutput data: predicted Gene-Disease Associations are stored in `${R2_DIR}/data/test_data/gda_rst.tsv`\n"
      },
      "source": "https://raw.githubusercontent.com/sujunhao/RENET2/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example of running RENET2 Model on abstract data",
        "parent_header": [
          "RENET2: High-Performance Full-text Gene-Disease Relation Extraction with Iterative Training Data Expansion",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "to try run RENET2 on abstract, you can using the code as:\n```\nrenet2 predict --raw_data_dir ${R2_DIR}/data/abs_data/2nd_ann/ \\\n--model_dir ${R2_DIR}/models/ \\\n--gda_fn_d ${R2_DIR}/data/test_data/ \\\n--models_number 1 \\\n--model_name Bst_abs_10 \\\n--batch_size 8 \\\n--no_cache_file \\\n--fix_snt_n 32 \\\n--file_name_ann anns.txt\n\n# then go to benchmark folder and run the following to checked the trained models\npython calculate_metrics_with_input.py ${R2_DIR}/data/abs_data/2nd_ann/labels.txt ${R2_DIR}/data/test_data/gda_rst.tsv\n\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/sujunhao/RENET2/main/README.md",
      "technique": "header_analysis"
    }
  ]
}