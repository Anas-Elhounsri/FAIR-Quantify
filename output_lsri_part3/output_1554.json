{
  "application_domain": [
    {
      "confidence": 0.8667153115768007,
      "result": {
        "type": "String",
        "value": "Graphs"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/gtStyLab/SCOUR"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-02-25T00:35:53Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-06-03T17:06:27Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SCOUR: Stepwise Classification Of Unknown Regulation"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Folder Descriptions",
        "type": "Text_excerpt",
        "value": "BiggerModelData: contains files to generate ODE data for bigger synthetic model.\r\n\r\nChassData: contains files to generate ODE data for E. coli model.\r\n\r\ncreateRegSchemes: contains files to create lists of regulatory interactions tested within SCOUR.\r\n\r\ndataPreparationFiles: contains files to autogenerate training data and generate triplicate noisy ODE data. The noisy data is smoothed and the median is taken from the triplicates.\r\n\r\nextraFiles: contains extra files necessary for some features and plots\r\n\r\nfeatureGeneration: contains files to create feature matrices and calculate their features\r\n\r\nHynneData: contains files to generate ODE data for yeast model.\r\n\r\nplotFigures: contains files to plot figures found in the manuscript\r\n\r\nresults: contains compact results (large datasets (e.g. training datasets) removed) found in the manuscript and used for plotting\r\n\r\nSmallerModelData: contains files to generate ODE data for smaller synthetic model.\r\n\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/gtStyLab/SCOUR/main/README.txt",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Main File Descriptions",
        "type": "Text_excerpt",
        "value": "SCOUR_Ecoli_noiseless.m: Predicts interactions in the E. coli model using SCOUR with noiseless datasets.\r\nSCOUR_Ecoli_noisy.m: Predicts interactions in the E. coli model using SCOUR with noisy datasets.\r\nSCOUR_Ecoli_random.m: Predicts interactions in the E. coli model using a random classifier with noisy datasets.\r\nSCOUR_Synthetic_noiseless.m: Predicts interactions in the synthetic models using SCOUR with noiseless datasets.\r\nSCOUR_Synthetic_noisy.m: Predicts interactions in the synthetic models using SCOUR with noisy datasets.\r\nSCOUR_Synthetic_random.m: Predicts interactions in the synthetic models using a random classifier with noisy datasets.\r\nSCOUR_Yeast_noiseless.m: Predicts interactions in the yeast model using SCOUR with noiseless datasets.\r\nSCOUR_Yeast_noisy.m: Predicts interactions in the yeast model using SCOUR with noisy datasets.\r\nSCOUR_Yeast_random.m: Predicts interactions in the yeast model using a random classifier with noisy datasets.\r\n\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/gtStyLab/SCOUR/main/README.txt",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.877150245697971,
      "result": {
        "original_header": "Instructions to reproduce noiseless results in SCOUR manuscript",
        "type": "Text_excerpt",
        "value": "1) Generate noiseless autogenerated training data by running dataPreparationFiles/dataPreparation_autogeneration_noiseless.m with num_IC = 15 (for 15 different initial conditions) and reps = 30 (for 30 different repetitions).\r\n2) Generate noiseless testing data using either: SmallerModelData/driver_genDatasets_SmallerModel.m, BiggerModelData/driver_genDatasets_BiggerModel.m, ChassData/driver_genDatasets_chassV.m, or HynneData/driver_genDatasets_hynne.m.\r\n3) Run SCOUR_*_noiseless.m where num_IC = 15 and rep = 1 to 30 for each repetition.\r\n4) Run plotFigures/plot_Fig3.m to reproduce Fig. 3.\r\nNote: results may vary slightly due to random autogenerated training data.\r\n\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/gtStyLab/SCOUR/main/README.txt",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8546095734389388,
      "result": {
        "original_header": "Instructions to reproduce noisy results in SCOUR manuscript",
        "type": "Text_excerpt",
        "value": "1) Generate noisy autogenerated training data by running dataPreparationFiles/dataPreparation_autogeneration_noisy.m with nT = 50 or 15, cov = 5 or 15, num_IC = 15 (for 15 different initial conditions), and reps = 30 (for 30 different repetitions).\r\n2) Generate noisy testing data using dataPreparationFiles/dataPreparation_*_noisy.m with nT = 50 or 15, cov = 5 or 15, num_IC = 15 (for 15 different initial conditions), and reps = 30 (for 30 different repetitions).\r\n3) Run SCOUR_*_noisy.m and SCOUR_*_random where num_IC = 15 and rep = 1 to 30 for each repetition.\r\n4) Run plotFigures/plot_Fig4.m to reproduce Fig. 4.\r\nNote: results may vary slightly due to random autogenerated training data and random noise added to the testing data.\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/gtStyLab/SCOUR/main/README.txt",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9896409212839906,
      "result": {
        "original_header": "Instructions for using SCOUR on other systems",
        "type": "Text_excerpt",
        "value": "Information needed:\r\n-Stoichiometric matrix of system in a file named modelSTM.mat.\r\n-Either single or triplicate samples for metabolomics and fluxomics data contained in modelData folder. Each sample file should contain similar information found in the simulated biological data (found in HynneData/odeData or ChassData/odeData).\r\n\r\n1) Generate noisy autogenerated training data by running dataPreparationFiles/dataPreparation_autogeneration_noisy.m with nT = 50 or 15, cov = 5 or 15, num_IC = 15 (for 15 different initial conditions), and reps = 30 (for 30 different repetitions).\r\n2) Prepare user data using dataPreparationFiles/dataPreparation_framework.m. User data should be located in modelData folder and be named sprintf('model_k-%02d_nT-%03d_cov-%02d_s%01d_rep-0%02d.mat',IC,nT,cov,s,rep), where num_IC is the number of initial conditions, nT and cov are the values used in step 1, s is the sample number of the triplicates (i.e. 1 to 3), and rep is the repetition number if there are multiple repetitions. If there are only single samples, the filenames should be labeled as sprintf('model_k-%02d_nT-%03d_cov-%02d_rep-0%02d.mat',IC,nT,cov,rep).\r\n3) Run SCOUR_framework where nT and cov are the values used in step 1, num_IC is the number of initial conditions, and rep is the repetition number if there are multiple repetitions. Results will be saved as sprintf('model_results_IC-%02d_nT-%03d_cov-%02d_rep-%02d.mat',num_IC,nT,cov,rep) in the main folder. \n"
      },
      "source": "https://raw.githubusercontent.com/gtStyLab/SCOUR/main/README.txt",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/gtStyLab/SCOUR/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/gtStyLab/SCOUR/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "gtStyLab/SCOUR"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/gtStyLab/SCOUR/main/README.txt",
      "technique": "regular_expression"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/gtStyLab/SCOUR/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SCOUR"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "gtStyLab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "MATLAB",
        "size": 636752,
        "type": "Programming_language",
        "value": "MATLAB"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gtStyLab/SCOUR/main/README.txt"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "installation",
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 05:26:20",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "non-software"
      },
      "technique": "software_type_heuristics"
    }
  ]
}