{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/marbl/MetaCarvel"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2016-09-01T18:12:22Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-17T02:29:21Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MetaCarvel: A scaffolder for metagenomes"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9632384555403808,
      "result": {
        "original_header": "MetaCarvel - Scaffolder for metagenomes",
        "type": "Text_excerpt",
        "value": "MetaCarvel is an updated version of previous metagenome scaffolder Bambus 2. To run MetaCarvel, you will need [Python 3.7.x](https://www.python.org/downloads/), [Samtools](http://samtools.sourceforge.net), [Bedtools](http://bedtools.readthedocs.io/en/latest/), [Networkx](https://networkx.github.io/)(Version >= 2.5), [NumPy](http://www.numpy.org/),and [OGDF](http://amber-v7.cs.tu-dortmund.de/lib/exe/fetch.php/tech:ogdf-snapshot-2015-05-30.zip). \n"
      },
      "source": "https://raw.githubusercontent.com/marbl/MetaCarvel/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "The detailed documentation and tutorial to install and run MetaCarvel can be found on <a href=\"https://github.com/marbl/MetaCarvel/wiki\">Wiki</a>.",
        "parent_header": [
          "MetaCarvel - Scaffolder for metagenomes"
        ],
        "type": "Text_excerpt",
        "value": "\nTo run MetaCarvel, run the following;\n\n```\npython run.py -h\nusage: run.py [-h] -a ASSEMBLY -m MAPPING -d DIR [-r REPEATS] [-k KEEP]\n              [-l LENGTH] [-b BSIZE] [-v VISUALIZATION]\n\nMetaCarvel: A scaffolding tool for metagenomic assemblies\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -a ASSEMBLY, --assembly ASSEMBLY\n                        assembled contigs\n  -m MAPPING, --mapping MAPPING\n                        mapping of read to contigs in bam format\n  -d DIR, --dir DIR     output directory for results\n  -r REPEATS, --repeats REPEATS\n                        To turn repeat detection on\n  -k KEEP, --keep KEEP  Set this to keep temporary files in output directory\n  -l LENGTH, --length LENGTH\n                        Minimum length of contigs to consider for scaffolding\n                        in base pairs (bp)\n  -b BSIZE, --bsize BSIZE\n                        Minimum mate pair support between contigs to consider\n                        for scaffolding\n  -v VISUALIZATION, --visualization VISUALIZATION\n                        To generate .db file for AsmViz visualization program\n```\n\nThis will generate a bunch of files in the output directory. If you are interested in output of each step of the scaffolding process, these files can \nbe useful. The final output files are scaffolds.fasta - which contains sequences of scaffolds  and scaffolds.agp is an agp style information for assignment of contigs to scaffolds. \n\nPlease cite MetaCarvel as follows: Ghurye, J., Treangen, T., Fedarko, M., Hervey, W. J., & Pop, M. (2019). MetaCarvel: linking assembly graph motifs to biological variants. Genome biology, 20(1), 1-14.\n\nNOTE: This tool is still under active development and may produce errors while running. Please report these as github issues so that we can fix them as we develop the software. For any questions, please email jayg@cs.umd.edu. \n"
      },
      "source": "https://raw.githubusercontent.com/marbl/MetaCarvel/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "http://bedtools.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/marbl/MetaCarvel/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/marbl/MetaCarvel/wiki"
      },
      "source": "https://raw.githubusercontent.com/marbl/MetaCarvel/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/marbl/MetaCarvel/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 16
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/marbl/MetaCarvel/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "marbl/MetaCarvel"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MetaCarvel - Scaffolder for metagenomes"
      },
      "source": "https://raw.githubusercontent.com/marbl/MetaCarvel/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/marbl/MetaCarvel/master/install.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/marbl/MetaCarvel/master/OGDF/makeMakefile.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/marbl/MetaCarvel/master/OGDF/doc/build-ogdf-docs.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "The detailed documentation and tutorial to install and run MetaCarvel can be found on <a href=\"https://github.com/marbl/MetaCarvel/wiki\">Wiki</a>.",
        "parent_header": [
          "MetaCarvel - Scaffolder for metagenomes"
        ],
        "type": "Text_excerpt",
        "value": "\nTo run MetaCarvel, run the following;\n\n```\npython run.py -h\nusage: run.py [-h] -a ASSEMBLY -m MAPPING -d DIR [-r REPEATS] [-k KEEP]\n              [-l LENGTH] [-b BSIZE] [-v VISUALIZATION]\n\nMetaCarvel: A scaffolding tool for metagenomic assemblies\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -a ASSEMBLY, --assembly ASSEMBLY\n                        assembled contigs\n  -m MAPPING, --mapping MAPPING\n                        mapping of read to contigs in bam format\n  -d DIR, --dir DIR     output directory for results\n  -r REPEATS, --repeats REPEATS\n                        To turn repeat detection on\n  -k KEEP, --keep KEEP  Set this to keep temporary files in output directory\n  -l LENGTH, --length LENGTH\n                        Minimum length of contigs to consider for scaffolding\n                        in base pairs (bp)\n  -b BSIZE, --bsize BSIZE\n                        Minimum mate pair support between contigs to consider\n                        for scaffolding\n  -v VISUALIZATION, --visualization VISUALIZATION\n                        To generate .db file for AsmViz visualization program\n```\n\nThis will generate a bunch of files in the output directory. If you are interested in output of each step of the scaffolding process, these files can \nbe useful. The final output files are scaffolds.fasta - which contains sequences of scaffolds  and scaffolds.agp is an agp style information for assignment of contigs to scaffolds. \n\nPlease cite MetaCarvel as follows: Ghurye, J., Treangen, T., Fedarko, M., Hervey, W. J., & Pop, M. (2019). MetaCarvel: linking assembly graph motifs to biological variants. Genome biology, 20(1), 1-14.\n\nNOTE: This tool is still under active development and may produce errors while running. Please report these as github issues so that we can fix them as we develop the software. For any questions, please email jayg@cs.umd.edu. \n"
      },
      "source": "https://raw.githubusercontent.com/marbl/MetaCarvel/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9974015576106119,
      "result": {
        "original_header": "MetaCarvel - Scaffolder for metagenomes",
        "type": "Text_excerpt",
        "value": "MetaCarvel is an updated version of previous metagenome scaffolder Bambus 2. To run MetaCarvel, you will need [Python 3.7.x](https://www.python.org/downloads/), [Samtools](http://samtools.sourceforge.net), [Bedtools](http://bedtools.readthedocs.io/en/latest/), [Networkx](https://networkx.github.io/)(Version >= 2.5), [NumPy](http://www.numpy.org/),and [OGDF](http://amber-v7.cs.tu-dortmund.de/lib/exe/fetch.php/tech:ogdf-snapshot-2015-05-30.zip). \nYou can install Networkx as described [here](https://pypi.org/project/networkx/).\nMetCarvel can work with the latest NetworkX version 2.5\nBriefly, you need to run following:\n```\npip install numpy (tested with version 1.20)\npip install networkx>=2.5\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/marbl/MetaCarvel/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/marbl/MetaCarvel/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "genome-assembly, metagenomes, scaffolder"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2018 MarBL\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/marbl/MetaCarvel/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MetaCarvel"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "marbl"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 21194466,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 307590,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Game Maker Language",
        "size": 85905,
        "type": "Programming_language",
        "value": "Game Maker Language"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 79091,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "NASL",
        "size": 50479,
        "type": "Programming_language",
        "value": "NASL"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CSS",
        "size": 22563,
        "type": "Programming_language",
        "value": "CSS"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 4685,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 3851,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 1759,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 314,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Batchfile",
        "size": 50,
        "type": "Programming_language",
        "value": "Batchfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/marbl/MetaCarvel/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "The detailed documentation and tutorial to install and run MetaCarvel can be found on <a href=\"https://github.com/marbl/MetaCarvel/wiki\">Wiki</a>.",
        "parent_header": [
          "MetaCarvel - Scaffolder for metagenomes"
        ],
        "type": "Text_excerpt",
        "value": "\nTo run MetaCarvel, run the following;\n\n```\npython run.py -h\nusage: run.py [-h] -a ASSEMBLY -m MAPPING -d DIR [-r REPEATS] [-k KEEP]\n              [-l LENGTH] [-b BSIZE] [-v VISUALIZATION]\n\nMetaCarvel: A scaffolding tool for metagenomic assemblies\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -a ASSEMBLY, --assembly ASSEMBLY\n                        assembled contigs\n  -m MAPPING, --mapping MAPPING\n                        mapping of read to contigs in bam format\n  -d DIR, --dir DIR     output directory for results\n  -r REPEATS, --repeats REPEATS\n                        To turn repeat detection on\n  -k KEEP, --keep KEEP  Set this to keep temporary files in output directory\n  -l LENGTH, --length LENGTH\n                        Minimum length of contigs to consider for scaffolding\n                        in base pairs (bp)\n  -b BSIZE, --bsize BSIZE\n                        Minimum mate pair support between contigs to consider\n                        for scaffolding\n  -v VISUALIZATION, --visualization VISUALIZATION\n                        To generate .db file for AsmViz visualization program\n```\n\nThis will generate a bunch of files in the output directory. If you are interested in output of each step of the scaffolding process, these files can \nbe useful. The final output files are scaffolds.fasta - which contains sequences of scaffolds  and scaffolds.agp is an agp style information for assignment of contigs to scaffolds. \n\nPlease cite MetaCarvel as follows: Ghurye, J., Treangen, T., Fedarko, M., Hervey, W. J., & Pop, M. (2019). MetaCarvel: linking assembly graph motifs to biological variants. Genome biology, 20(1), 1-14.\n\nNOTE: This tool is still under active development and may produce errors while running. Please report these as github issues so that we can fix them as we develop the software. For any questions, please email jayg@cs.umd.edu. \n"
      },
      "source": "https://raw.githubusercontent.com/marbl/MetaCarvel/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 18:58:43",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 13
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "The detailed documentation and tutorial to install and run MetaCarvel can be found on <a href=\"https://github.com/marbl/MetaCarvel/wiki\">Wiki</a>.",
        "parent_header": [
          "MetaCarvel - Scaffolder for metagenomes"
        ],
        "type": "Text_excerpt",
        "value": "\nTo run MetaCarvel, run the following;\n\n```\npython run.py -h\nusage: run.py [-h] -a ASSEMBLY -m MAPPING -d DIR [-r REPEATS] [-k KEEP]\n              [-l LENGTH] [-b BSIZE] [-v VISUALIZATION]\n\nMetaCarvel: A scaffolding tool for metagenomic assemblies\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -a ASSEMBLY, --assembly ASSEMBLY\n                        assembled contigs\n  -m MAPPING, --mapping MAPPING\n                        mapping of read to contigs in bam format\n  -d DIR, --dir DIR     output directory for results\n  -r REPEATS, --repeats REPEATS\n                        To turn repeat detection on\n  -k KEEP, --keep KEEP  Set this to keep temporary files in output directory\n  -l LENGTH, --length LENGTH\n                        Minimum length of contigs to consider for scaffolding\n                        in base pairs (bp)\n  -b BSIZE, --bsize BSIZE\n                        Minimum mate pair support between contigs to consider\n                        for scaffolding\n  -v VISUALIZATION, --visualization VISUALIZATION\n                        To generate .db file for AsmViz visualization program\n```\n\nThis will generate a bunch of files in the output directory. If you are interested in output of each step of the scaffolding process, these files can \nbe useful. The final output files are scaffolds.fasta - which contains sequences of scaffolds  and scaffolds.agp is an agp style information for assignment of contigs to scaffolds. \n\nPlease cite MetaCarvel as follows: Ghurye, J., Treangen, T., Fedarko, M., Hervey, W. J., & Pop, M. (2019). MetaCarvel: linking assembly graph motifs to biological variants. Genome biology, 20(1), 1-14.\n\nNOTE: This tool is still under active development and may produce errors while running. Please report these as github issues so that we can fix them as we develop the software. For any questions, please email jayg@cs.umd.edu. \n"
      },
      "source": "https://raw.githubusercontent.com/marbl/MetaCarvel/master/README.md",
      "technique": "header_analysis"
    }
  ]
}