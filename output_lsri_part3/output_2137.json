{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Yoniming/ACO"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-04-06T12:20:02Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-05-18T09:35:40Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "code/decode with RangeCoder"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9941590967976337,
      "result": {
        "original_header": "ACO",
        "type": "Text_excerpt",
        "value": "ACO is a lossless quality scores compression algorithm based on adaptive coding order and this software can be used for both encoding and decoding. \n"
      },
      "source": "https://raw.githubusercontent.com/Yoniming/code/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9568209503094354,
      "result": {
        "original_header": "Algorithm",
        "type": "Text_excerpt",
        "value": "The main objective of ACO is to traverse the quality scores along the most relative directions, which can be regarded as a reorganization of the stack of independent 1D quality scores vectors into highly related 2D matrices. Another improvement of the proposed ACO technique over the existing techniques is the compound context modeling strategy. Instead of the adjacent QS values, the ACO context models consists of two additional aspects: 1) the global average of every reads; 2) the variant of DNA bases. The compound context model not only benefits the probability estimation and arithmetic coding, more importantly, in the implementation, it prevents ACO from multiple random access of the input FASTQ file:  the compressing process can be accomplished in only one-path, at the cost of some context dilution and side-information. \n"
      },
      "source": "https://raw.githubusercontent.com/Yoniming/code/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8780240408460794,
      "result": {
        "original_header": "Compile project",
        "type": "Text_excerpt",
        "value": "This program is a command line program based on the Linux operating system. In fact, it only calls functions related to the Linux system when the command line is parsed. If you want to be cross-platform, you only need a few modifications to run on the window 10 platform.\nThis project is a CMake project. In order to run the program, there are the following steps: \n"
      },
      "source": "https://raw.githubusercontent.com/Yoniming/code/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.934637729574621,
      "result": {
        "original_header": "Declaration",
        "type": "Text_excerpt",
        "value": "In our C++ project, \n1. ``ProgressBar.h/ProgressBar.cc``  For the implement of the progress bar, we refer to the following link: [How to implement a command line progress bar in C++](https://github.com/HaoKunT/blog-hugo/blob/b6d3a55edc7ab858350445c44ea44cad369468c0/content/post/%E7%94%A8C%2B%2B%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BF%9B%E5%BA%A6%E6%9D%A1.md) and modify a little details in order to better adopt to Linux system and run correctly as we expected. \n"
      },
      "source": "https://raw.githubusercontent.com/Yoniming/code/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Yoniming/code/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Yoniming/ACO/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Yoniming/ACO"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ACO"
      },
      "source": "https://raw.githubusercontent.com/Yoniming/code/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Yoniming/code/master/compress.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing",
        "type": "Text_excerpt",
        "value": "ACO can be used on Windows,Linux or Mac. We only provide a source distribution and allow users to test or improve. In particular, ACO has no external dependencies so that it is easy to implement its function.\n\nThe distribution is configured out of the box for linux. To build on a Mac, change the setting parameters of the command line to work properly\n\nThere is currently no makefile for Windows. A visual studio project can be made (and testing has been done on windows to verify compatibility) but the steps are beyond the scope of this guide, because you must take several additional steps to guarantee a sane environment on windows (such as replacing stdint and inttypes with correct versions). For this reason we also currently do not distribute a windows build script."
      },
      "source": "https://raw.githubusercontent.com/Yoniming/code/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999997173311446,
      "result": {
        "original_header": "Compile project",
        "type": "Text_excerpt",
        "value": "This program is a command line program based on the Linux operating system. In fact, it only calls functions related to the Linux system when the command line is parsed. If you want to be cross-platform, you only need a few modifications to run on the window 10 platform.\nThis project is a CMake project. In order to run the program, there are the following steps: \n1. Download the source code from the github repository to your local computer\n    ```\n    git clone https://github.com/Yoniming/code.git\n    ```   \n2. Enter the `code/` directory, create a new directory `build/`, enter the directory\n   BASH2*\n3. Compile this project\n   BASH3*\nIf you complete the above steps correctly, you will find a executable file named `code` in `build` directory, and then you can run the program. \n"
      },
      "source": "https://raw.githubusercontent.com/Yoniming/code/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8628139253920577,
      "result": {
        "original_header": "Bugs and Feedback",
        "type": "Text_excerpt",
        "value": "Please use GitHub issues to open bug reports or provide feedback about ACO.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Yoniming/code/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Yoniming/ACO/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "The MIT License (MIT)\n\nCopyright (c) 2021 BaoYixing MaMingming\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
      },
      "source": "https://raw.githubusercontent.com/Yoniming/code/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ACO"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "Yoniming"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 54509,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 4543,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 2125,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 815,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 164,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Yoniming/code/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "yixingbao",
          "type": "User"
        },
        "date_created": "2021-07-25T04:16:35Z",
        "date_published": "2021-07-25T04:42:58Z",
        "html_url": "https://github.com/Yoniming/ACO/releases/tag/v1.0.2",
        "name": "ACO1.0.2",
        "release_id": 46724572,
        "tag": "v1.0.2",
        "tarball_url": "https://api.github.com/repos/Yoniming/ACO/tarball/v1.0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/Yoniming/ACO/releases/46724572",
        "value": "https://api.github.com/repos/Yoniming/ACO/releases/46724572",
        "zipball_url": "https://api.github.com/repos/Yoniming/ACO/zipball/v1.0.2"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 07:49:52",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How to use",
        "parent_header": [
          "Algorithm"
        ],
        "type": "Text_excerpt",
        "value": "Run this program:\n```\n./code [options] [abs_path_to_src ...] [abs_path_to_dst] \n```\nFor this program, the following options are necessary:\n1. `-c/-d` : must choose at most one of them.\n2. `-m` : When `-m` is `0`, it means to use the model without mean value, when it is `1`, it means to use the model with mean value\n\nFor example\uff0ccompress `ERR174324_1.fastq` to `ERR174324_1_c.out`:\n```\n./code -m 0 -c path/ERR174324_1.fastq path/ERR174324_1_c.out\n```\nOn the contrary, decompress file:\n```\n./code -m 0 -d path/ERR174324_1_c.out path/ERR174324_1.fastq path/ERR174324_1_r.fastq\n```\nYou can see more usage by optional argument `-h`:\n```\n./code -h\n```\nthen, usage is shown:\n```\n\nNAME\n                code - code and decode\nSYNOPSIS\n                Usage: code [OPTION]... INPUT FILE... [FASTA_FILE] OUTPUT FILE... \n\nDESCRIPTION\n                code and decode ...\n\n                -c, --code\n                                code input file into output file.\n\n                -d, --decode\n                                decode input file into output file.\n\n                -t, --time\n                                record time of coding/decoding process.\n\n                -h, --help\n                                display this help and exit\n\n                -v, --version\n                                output version information and exit.\n\n\n```\nNote:\n> + *Options `-c` and `-d`* \uff1a are mutually ***exclusive*** and cannot be used at the same time.\n> + *Option `-t`* \uff1a The time measured with the option `-t` means the total time which the program has been executed ***except for command line parsing***.\n> + *Option `-m`* : The same mode should be maintained when compressing and decompressing the same files.\n> + when decompressing file, the content of the second position argument fastq file is identical to output file. But, we only use the base line (2th line) to restore quality line(4th line) in our algorithm.\n"
      },
      "source": "https://raw.githubusercontent.com/Yoniming/code/master/README.md",
      "technique": "header_analysis"
    }
  ]
}