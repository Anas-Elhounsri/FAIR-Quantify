{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Cite us",
        "parent_header": [
          "BRAvo - Biological netwoRk Assembly <a href=\"https://travis-ci.org/albangaignard/pyBravo\"><img alt=\"Build Status\" src=\"https://travis-ci.org/albangaignard/pyBravo.svg?branch=master\" /></a>"
        ],
        "type": "Text_excerpt",
        "value": "M Lefebvre, A Gaignard, M Folschette, J Bourdon, C Guziolowski, Large-scale regulatory and signaling network assembly through linked open data, Database, Volume 2021, 2021, baaa113, https://doi.org/10.1093/database/baaa113"
      },
      "source": "https://raw.githubusercontent.com/pyBRAvo/pyBRAvo/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/pyBRAvo/pyBRAvo"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-04-09T11:43:09Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-07-07T09:08:58Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.8367174350448773,
      "result": {
        "original_header": "pyBRAvo",
        "type": "Text_excerpt",
        "value": "This tool is a Python implementation of BRAvo. It generates an upstream regulation network from the PathwayCommons knowledge base.\npyBRAvo can be used through either a Jupyter notebook, or a command line interface.\n \n"
      },
      "source": "https://raw.githubusercontent.com/pyBRAvo/pyBRAvo/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/pyBRAvo/pyBRAvo/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pyBRAvo/pyBRAvo/master/regulation-demo/BRAvo-regulation-demo-PC12.ipynb"
      },
      "source": "https://raw.githubusercontent.com/pyBRAvo/pyBRAvo/master/regulation-demo/BRAvo-regulation-demo-PC12.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pyBRAvo/pyBRAvo/master/regulation-demo/BRAvo-regulation-demo-PC12-Fast.ipynb"
      },
      "source": "https://raw.githubusercontent.com/pyBRAvo/pyBRAvo/master/regulation-demo/BRAvo-regulation-demo-PC12-Fast.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pyBRAvo/pyBRAvo/master/src/BRAvo-python-API-tutorial.ipynb"
      },
      "source": "https://raw.githubusercontent.com/pyBRAvo/pyBRAvo/master/src/BRAvo-python-API-tutorial.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pyBRAvo/pyBRAvo/master/drugbank-usecase/Notebook/drugbank-metabolism.ipynb"
      },
      "source": "https://raw.githubusercontent.com/pyBRAvo/pyBRAvo/master/drugbank-usecase/Notebook/drugbank-metabolism.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pyBRAvo/pyBRAvo/master/drugbank-usecase/Notebook/Drugs%20having%20a%20putative%20effect%20on%20a%20given%20metabolism.ipynb"
      },
      "source": "https://raw.githubusercontent.com/pyBRAvo/pyBRAvo/master/drugbank-usecase/Notebook/Drugs%20having%20a%20putative%20effect%20on%20a%20given%20metabolism.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pyBRAvo/pyBRAvo/master/drugbank-usecase/old/DrugBank-UseCase.ipynb"
      },
      "source": "https://raw.githubusercontent.com/pyBRAvo/pyBRAvo/master/drugbank-usecase/old/DrugBank-UseCase.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pyBRAvo/pyBRAvo/master/pypath-evaluation/pypath-sign-up.ipynb"
      },
      "source": "https://raw.githubusercontent.com/pyBRAvo/pyBRAvo/master/pypath-evaluation/pypath-sign-up.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/pyBRAvo/pyBRAvo/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "pyBRAvo/pyBRAvo"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BRAvo - Biological netwoRk Assembly "
      },
      "source": "https://raw.githubusercontent.com/pyBRAvo/pyBRAvo/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pyBRAvo/pyBRAvo/master/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/pyBRAvo/pyBRAvo/master/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pyBRAvo/pyBRAvo/master/regulation-demo/scripts/get-genes-from-sif.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pyBRAvo/pyBRAvo/master/regulation-demo/scripts/extract-inputs.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pyBRAvo/pyBRAvo/master/regulation-demo/scripts/pybravo-provenances.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pyBRAvo/pyBRAvo/master/regulation-demo/scripts/extract-genes-from-predictions.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pyBRAvo/pyBRAvo/master/regulation-demo/scripts/post-processing-iggy.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pyBRAvo/pyBRAvo/master/regulation-demo/scripts/stats-2.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pyBRAvo/pyBRAvo/master/regulation-demo/scripts/stats-result.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pyBRAvo/pyBRAvo/master/regulation-demo/scripts/format-iggy.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pyBRAvo/pyBRAvo/master/regulation-demo/scripts/remove-missing.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pyBRAvo/pyBRAvo/master/regulation-demo/scripts/construct-inputs.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pyBRAvo/pyBRAvo/master/regulation-demo/scripts/workflow-iggy.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pyBRAvo/pyBRAvo/master/regulation-demo/scripts/iggy-to-cytoscape.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "BRAvo - Biological netwoRk Assembly <a href=\"https://travis-ci.org/albangaignard/pyBravo\"><img alt=\"Build Status\" src=\"https://travis-ci.org/albangaignard/pyBravo.svg?branch=master\" /></a>"
        ],
        "type": "Text_excerpt",
        "value": "The first step consists in creating a software environment and **pull the required python packages**:\n```\nconda create --name pybravo python=3.7 rdflib requests matplotlib jupyter networkx flask -c conda-forge -c bioconda\nconda activate pybravo\npip install nxpd\n```\nThen just **clone** this repository:\n```\ngit clone https://github.com/pyBRAvo/pyBRAvo.git\ncd pyBRAvo/src\n```\nThen **test** that everything is fine:\n```\npython pyBravo.py --regulation --fast --input_genes JUN/FOS SCN5A -md 2 -co -su -sy -excl mirtarbase\n```\nYou should obtain something like:\n```\nExplored 84 regulators\nExplored 92 regulators\n...\nExplored 398 regulators\n\n--- Upstream regulation network in 72.77 seconds ---\nNumber of nodes = 458\nNumber of edges = 1683\nSIF network written to out.sif\nBasic regulation reaction provenance written to out-provenance.csv\n\n| Node | Degree Centrality |\n|------|------|\n| NOG | 0.162 |\n| POU2F1 | 0.144 |\n| FOS | 0.144 |\n| EGR2 | 0.133 |\n| TNF | 0.133 |\n| JUN | 0.127 |\n| SP1 | 0.125 |\n| MAZ | 0.12 |\n| LEF1 | 0.114 |\n| HNF1A | 0.109 |\n\n--- Network simplification in 0.24 seconds ---\nSIF network written to out-unified.sif\nBasic regulation reaction provenance written to out-unified-provenance.csv\nNodes after simplification = 436\nEdges after simplification = 1657\n\n| Node | Degree Centrality |\n|------|------|\n| NOG | 0.159 |\n| TNF | 0.156 |\n| POU2F1 | 0.152 |\n| HNF1A | 0.147 |\n| FOS | 0.147 |\n| EGR2 | 0.14 |\n| JUN | 0.136 |\n| DAND5 | 0.129 |\n| GDNF | 0.129 |\n| FGF13 | 0.12 |\n\n```\n\nFor signaling networks :\n```\npython pyBravo.py --signaling --input_genes SCN5A -md 2 -co -su -sy -excl mirtarbase --fast\n```\nYou should obtain something like:\n```\nExplored 26 regulators\nExplored 3181 regulators\nExplored 3197 regulators\nExplored 3197 regulators\nExplored 3198 regulators\nExplored 3198 regulators\nExplored 3199 regulators\nExplored 3199 regulators\nExplored 3199 regulators\n--- Upstream regulation network in 95.63 seconds ---\nNumber of nodes = 3341\nNumber of edges = 4614\nSIF network written to out.sif\nBasic regulation reaction provenance written to out-provenance.csv\n\n| Node | Degree Centrality |\n|------|------|\n| TGF-beta1 | 0.268 |\n| HER2 | 0.258 |\n| angiotensin II | 0.136 |\n| CDK2 | 0.136 |\n| DNMT1 | 0.1 |\n| L-FoxO1 | 0.096 |\n| CLOCK | 0.096 |\n| Id | 0.072 |\n| LIF | 0.055 |\n| Forkhead | 0.013 |\n\n--- Network simplification in 5.39 seconds ---\nSIF network written to out-unified.sif\nBasic regulation reaction provenance written to out-unified-provenance.csv\nNodes after simplification = 3311\nEdges after simplification = 4601\n\n| Node | Degree Centrality |\n|------|------|\n| TGF-beta1 | 0.269 |\n| ERBB2 | 0.26 |\n| CDK2 | 0.137 |\n| angiotensin II | 0.136 |\n| DNMT1 | 0.101 |\n| CLOCK | 0.097 |\n| L-FoxO1 | 0.096 |\n| Id | 0.073 |\n| LIF | 0.063 |\n| Forkhead | 0.013 |\n```"
      },
      "source": "https://raw.githubusercontent.com/pyBRAvo/pyBRAvo/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/pyBRAvo/pyBRAvo/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "The MIT License (MIT)\n\nCopyright (c) 2017 Alban GAIGNARD\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/pyBRAvo/pyBRAvo/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "pyBRAvo"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "pyBRAvo"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 8316133,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 62670,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 24782,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 968,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/pyBRAvo/pyBRAvo/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier"
  ],
  "somef_provenance": {
    "date": "2024-10-06 01:07:27",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick Start with Docker",
        "parent_header": [
          "BRAvo - Biological netwoRk Assembly <a href=\"https://travis-ci.org/albangaignard/pyBravo\"><img alt=\"Build Status\" src=\"https://travis-ci.org/albangaignard/pyBravo.svg?branch=master\" /></a>"
        ],
        "type": "Text_excerpt",
        "value": "A `Dockerfile` is available to build an image and install the required software environment.\n\nBuild the docker container with\n```docker build -t pybravo .```\n\nRun the docker container with\n```docker run -p 8888:8888 -i pybravo```\n"
      },
      "source": "https://raw.githubusercontent.com/pyBRAvo/pyBRAvo/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage from a Jupyter notebook",
        "parent_header": [
          "BRAvo - Biological netwoRk Assembly <a href=\"https://travis-ci.org/albangaignard/pyBravo\"><img alt=\"Build Status\" src=\"https://travis-ci.org/albangaignard/pyBravo.svg?branch=master\" /></a>"
        ],
        "type": "Text_excerpt",
        "value": "Inside the src directory, just run the `jupyter-notebook BRAvo-python-API-tutorial.ipynb` command.\n\nThe notebook can be browsed [here](https://github.com/albangaignard/pyBravo/blob/master/src/BRAvo-python-API-tutorial.ipynb).\n"
      },
      "source": "https://raw.githubusercontent.com/pyBRAvo/pyBRAvo/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage from a terminal",
        "parent_header": [
          "BRAvo - Biological netwoRk Assembly <a href=\"https://travis-ci.org/albangaignard/pyBravo\"><img alt=\"Build Status\" src=\"https://travis-ci.org/albangaignard/pyBravo.svg?branch=master\" /></a>"
        ],
        "type": "Text_excerpt",
        "value": "Here is the help message for the command line when running `python pyBravo.py`:\n```\nPlease specify one of -reg (--regulation), -sig (--signaling), or -w (--web) option\n\nusage: pyBravo.py [-h] [-w] [-reg] [-sig] [-sigd] [-md MD] [-sy] [-su] [-co] [-fa] [-i I [I ...]] [-f F] [-o O] [-incl INCL [INCL ...]]\n                  [-excl EXCL [EXCL ...]] [-e ENDPOINT] [-unk] [-v]\n\nBRAvo upstream regulation network reconstruction.\nHere are some possible command lines :\n    python pyBravo.py --web\n    python pyBravo.py --regulation --input_genes JUN/FOS SCN5A -md 2 -co -su -sy\n    python pyBravo.py --regulation --input_genes JUN/FOS SCN5A -md 2 -excl mirtarbase -co -su -sy\n    python pyBravo.py --regulation --input_file myGenes.csv -md 2 -incl pid panther msigdb kegg -co -su -sy\n\nPlease report any issue to alban.gaignard@univ-nantes.fr.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -w, --web             to launch pyBravo as a web server\n  -reg, --regulation    to assemble a regulation network\n  -sig, --signaling     to assemble a signaling network\n  -sigd, --signaling-detailed\n                        to assemble a signaling network with detailed reactions\n  -md MD, --max_depth MD\n                        the maximum exploration depth\n  -sy, --extend_with_synonyms\n                        if specified, explore also synonyms\n  -su, --extend_with_rna_protein_suffixes\n                        if specified, explore also names suffixed with \" rna\" or \" protein\"\n  -co, --decompose_complexes\n                        if specified, decompose protein complexes\n  -fa, --fast           if specified, only explore biopax display names\n  -i I [I ...], --input_genes I [I ...]\n                        the input gene list\n  -f F, --input_file F  the input file, one gene per line\n  -o O, --output_file O\n                        the output files path and prefix\n  -incl INCL [INCL ...], --include_sources INCL [INCL ...]\n                        the data sources to include\n  -excl EXCL [EXCL ...], --exclude_sources EXCL [EXCL ...]\n                        the data sources to exclude\n  -e ENDPOINT, --endpoint ENDPOINT\n                        the endpoint to query (default: http://rdf.pathwaycommons.org/sparql/)\n  -unk, --unknown       if specified, do not consider unsigned edges\n  -v, --verbose         print debug information\n```\n"
      },
      "source": "https://raw.githubusercontent.com/pyBRAvo/pyBRAvo/master/README.md",
      "technique": "header_analysis"
    }
  ]
}