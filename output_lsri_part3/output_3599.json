{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/GKieslich/crystIT"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-09-16T11:52:33Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-29T08:39:16Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Description, readme and source-files for crystIT, a python based program to calculated complexity measures for crystal structures based on *.cif files."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9925582583661408,
      "result": {
        "type": "Text_excerpt",
        "value": "<!DOCTYPE html>\r\n<html>\r\n\t<head>\r\n\t\t<meta charset=\"utf-8\">\r\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n\t\t<link rel=\"stylesheet\" href=\"https://stackedit.io/style.css\" />\r\n\t</head>\r\n\t<body class=\"stackedit\">\r\n\t\t<div class=\"stackedit__html\">\r\n\t\t\t<h1 id=\"crystIT\">crystIT - Quick Start Guide</h1>\r\n\t\t\t\t<h5 id=\"authors-clemens-kaussler-gregor-kieslich\">Authors: Clemens Kau\u00dfler, Gregor Kieslich*</h5>\r\n\t\t\t\t<p>* <a href=\"mailto:gregor.kieslich@tum.de\">gregor.kieslich@tum.de</a></p>\r\n\t\t\t\t<p>This is the README file to the python-based crystIT script, which calculates information theoretical complexity parameters as proposed by S. Krivovichev (2014) and extended by W. Hornfeck (2020). Modifications for partially occupied crystallographic orbits are included as well, based on the work by S. Krivovichev (2022). It provides an accessible user interface, requiring no programming experience.</p>\r\n\t\t\t<h1 id=\"usage\">Usage</h1>\r\n\t\t\t\t<p>crystIT is written in Python and uses standardized crystallographic information files (CIFs) as input. In the following, the script's package dependencies, the operation of the script and the output modes are explained.</p>\r\n\t\t\t\t<h2 id=\"package-dependencies\">Package Dependencies</h2>\r\n\t\t\t\t\t<p>In addition to standard libraries such as numpy, crystIT was developed and tested in the following Python environment:</p>\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t<li> Python 3.8.3 (available at <a href=\"http://www.python.org\">http://www.python.org</a>) </li>\r\n\t\t\t\t\t\t<li> ASE 3.19.1 (Atomic Simulation Environment, more information at <a href=\"https://wiki.fysik.dtu.dk/ase/\">https://wiki.fysik.dtu.dk/ase/</a>)</li>\r\n\t\t\t\t\t\t<li> Spglib 1.15.0 (more information at <a href=\"https://spglib.github.io/spglib/\">https://spglib.github.io/spglib/</a>)</li>\r\n\t\t\t\t\t\t<li> PyXtal 0.0.7 (more information at <a href=\"https://github.com/qzhu2017/PyXtal\">https://github.com/qzhu2017/PyXtal</a>)</li>\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t<h2 id=\"starting-the-script\">Starting the Script</h2>\r\n\t\t\t\t\t<p>Open the command window of your computer and navigate to the directory containing <code>crystIT.py</code>. Write in command line:</p>\r\n\t\t\t\t\t<pre><code>$ python crystIT.py</code></pre>\r\n\t\t\t\t\t<p>Successful startup is confirmed by crystIT's welcome message:</p>\r\n\t\t\t\t\t<pre><code>Welcome to crystIT -- A Crystal Structure Complexity Analyzer Based on Information Theory\r\nVersion 0.1, release date: 2020-09-22\r\nWritten by Clemens Kau\u00dfler and Gregor Kieslich (Technical University of Munich)\r\nPlease cite the following paper if crystIT is utilized in your work:\r\n\t\tKau\u00dfler, Kieslich (2021). J. Appl. Cryst. 54, DOI: 10.1107/S1600576720016386\t\t\r\n<br/>\r\nInput path of .cif file or directory for complexity analysis. 's' for settings. 'e' to exit.</code></pre>\r\n\t\t\t\t<h2 id=\"output\">Output</h2>\r\n\t\t\t\t\t<p>There are two modes of operation: Either, CIFs can be processed one by one in <i>single file mode</i>, or directories - possibly containing multiple CIFs - may be passed to the script in <i>batch mode</i>.</p>\r\n\t\t\t\t\t<h3 id=\"single-file-mode\">Single File Mode</h3>\r\n\t\t\t\t\t\t<p>In <i>single file mode</i>, the path to a CIF is simply typed into the bash and confirmed with enter. All results are displayed in the bash after calculation, whereby the complexity nomenclature introduced by Hornfeck (2020) is applied. A sample output for K<sub>3</sub>C<sub>60</sub> is presented here:</p>\r\n\t\t\t\t\t\t<pre><code>------------ C:\\K3C60.cif ------------\r\nassumed formula  C20K\r\nassumed SG       Fm-3m (225)\r\nSG from CIF      F m -3 m (225)\r\nlattice [A]      a: 14.24, b: 14.24, c: 14.24\r\nangles [\u00b0]       b,c: 90.00, a,c: 90.00, a,b: 90.00\r\n---\r\n252.000000 \t atoms / unit cell\r\n63.000000 \t atoms / reduced unit cell\r\n123.000000 \t positions / reduced unit cell\r\n5.000000 \t crystallographic orbits\r\n8.000000 \t unique species\r\n8.000000 \t coordinational degrees of freedom (arities)\r\n--- combinatorial (extended Krivovichev) ---\r\n0.697023 \t I_comb \t\t [bit / position]\r\n0.975610 \t I_comb_mix \t\t [bit / position]\r\n3.000000 \t I_comb_max \t\t [bit / position]\r\n0.232341 \t I_comb_norm \t\t [-]\r\n85.733784 \t I_comb_tot \t\t [bit / reduced unit cell]\r\n0.118763 \t I_comb_dens \t\t [bit / A^3]\r\n--- coordinational (Hornfeck) ---\r\n1.561278 \t I_coor \t\t [bit / freedom]\r\n2.321928 \t I_coor_max \t\t [bit / freedom]\r\n0.672406 \t I_coor_norm \t\t [-]\r\n12.490225 \t I_coor_tot \t\t [bit / reduced unit cell]\r\n0.017302 \t I_coor_dens \t\t [bit / A^3]\r\n--- configurational (extended Hornfeck) ---\r\n1.081474 \t I_conf \t\t [bit / (position + freedom)]\r\n3.700440 \t I_conf_max \t\t [bit / (position + freedom)]\r\n0.292256 \t I_conf_norm \t\t [-]\r\n141.673138 \t I_conf_tot \t\t [bit / reduced unit cell]\r\n0.196254 \t I_conf_dens \t\t [bit / A^3]</code></pre>\r\n\t\t\t\t\t<h3 id=\"batch-mode\">Batch Mode</h3>\r\n\t\t\t\t\t\t<p>In <i>batch mode</i>, the path of a CIF-containing directory is typed into the bash and confirmed with enter. The results as well as warnings and error messages are compiled into a character-separated values (.csv) file which is saved as <code>batch_TIMESTAMP.csv</code> into the processed directory. Attention! With default settings, only CIFs directly present in the folder passed to crystIT are considered, subfolders are ignored.</p>\r\n\t\t\t\t<h2 id=\"settings\">Settings</h2>\r\n\t\t\t\t\t<p>The settings menu is accessed by typing <code>s</code> and hitting enter.</p>\r\n\t\t\t\t\t<pre><code>Input float as symmetry tolerance 0 < x < 1      (currently 0.005).\r\nInput int as maximum number of threads           (currently 12)\r\n'd' to toggle between decimal separators         (currently '.').\r\n'o' to toggle occupancy editing options          (currently False).\r\n'r' to toggle recursive subdir scan              (currently False).\r\n's' to toggle entropy calculation                (currently False).\r\n'e' exit to main menu:</code></pre>\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t<li>Input of a decimal number between zero and one changes <i>symprec</i> which defines the tolerance in cartesian coordinates for Spglib to find symmetry and simultaneously is the threshold cartesian coordinate value for identification of duplicate atom entries in the CIF: <code>|x\u2032 \u2212 x| &lt; symprec</code>. Always use <code>.</code> as decimal separator to change <i>symprec</i>! This value should be adjusted in the event of wrong space-group assignement which can help in some cases; however, an error message is returned if the assignment in space-group discrepancy still exists.</li>\r\n\t\t\t\t\t\t<li>The maximum number of threads for multiprocessing in batch mode is automatically set to the maximum number of available threads but can be adjusted by integer input.</li>\r\n\t\t\t\t\t\t<li><code>d</code> toggles the decimal separator between dot and comma, especially useful for German Excel users.</li>\r\n\t\t\t\t\t\t<li>The occupancy options, accessible by typing <code>o</code>, allow for on-the-fly occupancy editing in single file processing.</li>\r\n\t\t\t\t\t\t<li>By activating the recursive subdirectory scan with <code>r</code>, subfolders are scanned in batch mode.</li>\r\n\t\t\t\t\t\t<li><code>s</code> toggles the calculation of entropy values from information content values, according to Krivovichev (2016, 2022).</li>\r\n\t\t\t\t\t\t<li>Finally, the settings menu is exited with <code>e</code>.</li>\r\n\t\t\t\t\t</ul>\r\n\t</body>\r\n</html>\r\n \n"
      },
      "source": "https://raw.githubusercontent.com/GKieslich/crystIT/master/readme.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/GKieslich/crystIT/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/GKieslich/crystIT/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "GKieslich/crystIT"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/GKieslich/crystIT/master/readme.md",
      "technique": "regular_expression"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/GKieslich/crystIT/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 GKieslich\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/GKieslich/crystIT/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "crystIT"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "GKieslich"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 179833,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Roff",
        "size": 1150,
        "type": "Programming_language",
        "value": "Roff"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/GKieslich/crystIT/master/readme.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "installation",
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 13:21:37",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 12
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}