{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/OSU-BMBL/IDAM"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact",
        "parent_header": [
          "IDAM"
        ],
        "type": "Text_excerpt",
        "value": "Any questions, problems, or bugs are welcome and should be dumped to [Qin Ma](Qin.Ma@osumc.edu).\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"
      },
      "source": "https://raw.githubusercontent.com/OSU-BMBL/IDAM/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-09-12T01:44:02Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-01-09T15:05:50Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Inference of disease-associated microbial gene modules based on metagenomic and metatranscriptomic data"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Brief Description",
        "parent_header": [
          "IDAM"
        ],
        "type": "Text_excerpt",
        "value": "IDAM provides a framework for the identification of microbial disease-associated gene modules based on metagenomic and metatranscriptomic data. The raw sequencing data (matched metagenomic and metatranscriptomic data) or the expression matrix is required. The output is gene modules consisting of gene and sample subsets.\r"
      },
      "source": "https://raw.githubusercontent.com/OSU-BMBL/IDAM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Parameter description",
        "parent_header": [
          "IDAM",
          "Usage",
          "5. Other"
        ],
        "type": "Text_excerpt",
        "value": "-i : the input matrix must be one of two tab-delimited formats;\r\n\r\n-n : the blast result file must be of -outfmt 6 format (BLAST+);\r\n\r\n-w : the parameter in the combined function, default: 0.3;\r\n\r\n-q : use quantile discretization for continuous data, default: 0.01;\r\n\r\n-r : the number of ranks used to discrete data, default: 1;\r\n\r\n-o : number of modules to report, default: 300;\r\n\r\n-f : filtering overlapping modules, default: 0.1;\r\n\r\n-k : minimum column width of the module,default: 5% of columns, minimum 2 columns.\r\n\r\n\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/OSU-BMBL/IDAM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8762868312343418,
      "result": {
        "original_header": "Environment",
        "type": "Text_excerpt",
        "value": "IDAM is an integrated C package that requires a basic UNIX/Linux environment. The gcc compiler with version 4.8.5 or higher is required to be prior installed. More details can be found [here](https://gcc.gnu.org/wiki/InstallingGCC). Currently, IDAM does not support Mac or Windows systems.\r \n"
      },
      "source": "https://raw.githubusercontent.com/OSU-BMBL/IDAM/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/OSU-BMBL/IDAM/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/OSU-BMBL/IDAM/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "OSU-BMBL/IDAM"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "IDAM"
      },
      "source": "https://raw.githubusercontent.com/OSU-BMBL/IDAM/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OSU-BMBL/IDAM/master/example.png"
      },
      "source": "https://raw.githubusercontent.com/OSU-BMBL/IDAM/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Installation",
        "parent_header": [
          "IDAM",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "# IDAM #\r\n## Brief Description ##\r\nIDAM provides a framework for the identification of microbial disease-associated gene modules based on metagenomic and metatranscriptomic data. The raw sequencing data (matched metagenomic and metatranscriptomic data) or the expression matrix is required. The output is gene modules consisting of gene and sample subsets.\r\n## Environment ##\r\nIDAM is an integrated C package that requires a basic UNIX/Linux environment. The gcc compiler with version 4.8.5 or higher is required to be prior installed. More details can be found [here](https://gcc.gnu.org/wiki/InstallingGCC). Currently, IDAM does not support Mac or Windows systems.\r\n## Usage ##\r\n### 1. Dependencies ###\r\nDependencies of IDAM are listed below. You can click the software name to navigate to its website. Note that after installing each dependency, you should [add it to path](https://unix.stackexchange.com/questions/26047/how-to-correctly-add-a-path-to-path) to ensure a successful run.\r\n#### 1) [HUMAnN2](https://huttenhower.sph.harvard.edu/humann2) (>=2.8.1)\r\nHUMAnN2 is used to process the raw sequencing file and obtain the relative expression of each sample.\r\n#### 2) [BLAST+](https://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/) (>=2.10.0) \r\nBLAST is used for sequence alignment between the sequences from UniRef90 gene families and the gene sequences of uber-operons.\r\n\r\n\r\n### 2. Installation ###\r\nThe source code of IDAM is freely available at https://github.com/OSU-BMBL/IDAM. To install IDAM, you can download the zip file manually from GitHub, or use the code below in Linux.\r\n   \t \r\n\tcd /your/working/path/ \r\n\twget https://bmblx.bmi.osumc.edu/downloadFiles/idam/idam_master.zip\r\n\r\nThen, unzip the file:\r\n\r\n\tunzip idam_master.zip && rm idam_master.zip\r\n\r\nCompile codes:\r\n\r\n\tcd ./idam_master\r\n\tmake\r\n\r\n\r\n### 3. Data preparation ###\r\nTo run the tutorial, first download the data [here](https://bmblx.bmi.osumc.edu/downloadFiles/idam/meta_data.tar.gz) (1.0G) into the folder ./idam_master, or use wget code in the Linux system.\t\r\n\t\r\n\twget https://bmblx.bmi.osumc.edu/downloadFiles/idam/meta_data.tar.gz\r\n\r\nThen unzip the file.\r\n\t\r\n\ttar -xvzf meta_data.tar.gz && rm meta_data.tar.gz\r\n\r\nIn this way, you can obtain three subfolders including the data prepared for input, the data used for an example of HUMAnN2, and the sequence data used for an example of alignment.\r\n#### 3.1 The example data prepared for input:  ./meta_data/input/\r\nTwo files are included in this folder, matrix.tsv and tblastx.tsv. \r\nThe first is an expression matrix obtained from 734 metagenomic and metatranscriptomic datasets in this paper. It is a tab-separated matrix, in which each row represents a gene, each column represents a sample, and the entry is the expression value of a gene in the corresponding sample. An example of the input matrix with five genes and three samples is as follows:\r\n\r\n<div style=\"text-align:center;\">\r\n  <img src=\"example.png\" alt=\"\" width=\"250\" height=\"90\">\r\n</div>\r\n\r\n\r\n\r\nThe second is the alignment result between genes within the matrix mentioned above and genes in uber-operons.\r\n#### 3.2 The example data used for HUMAnN2: ./meta_data/humann2/\r\nTwo files are included in this folder, metagenome.fastq.gz and metatranscriptome.fastq.gz. They correspond to the metagenomic and metatranscriptomic data from one sample, respectively. \r\n#### 3.3 The example data used for alignment: ./meta_data/sequence/\r\nThe file, uniref.fasta,  consists of all sequences corresponding to genes (UniRef90 identifiers). You can extract the sequences of genes from your matrix by NCBI (for gene names) or the UniProt database (for UniRef identifiers).\r\n\r\n**Note 1:** You can run the code in 4.3 using the two files in ./meta_data/input/ and get the results in this paper (**This can be used for testing successful run**). Or, change these two files into your own data.   \r\n\r\n**Note 2:** If your data is raw sequencing data, you have to run 4.1 for the expression matrix. Then, do an alignment between the sequences of genes and the sequence files (sequence_output.fa) via 4.2.  \r\n\r\n**Note 3:** If you have a well-formatted expression matrix, you can skip 4.1 and do an alignment between the sequences of genes and the sequence files (sequence_output.fa, used as the aligned database) via 4.2.  \r\n\r\n### 4. Running ###\r\n#### 4.1 The expression matrix construction ####\r\nThis step is to obtain an expression matrix from raw sequencing reads. If you have matched metagenomic and metatranscriptomic data of multiple samples, you can first run HUMAnN2 for gene relative abundance of each sample.  Here, we use the data in *./meta_data/sequence/* as an example.\r\n\r\n\thumann2 --input  ./meta_data/humann2/metagenome.fastq.gz --output ./meta_data/humann2/metagenome_result\r\n\thumann2 --input  ./meta_data/humann2/metatranscriptome.fastq.gz --taxonomic-profile ./meta_data/humann2/metagenome_result/metagenome_humann2_temp/metagenome_metaphlan_bugs_list.tsv --output ./meta_data/humann2/metatranscriptome_result\r\n\thumann2_rna_dna_norm --input_dna ./meta_data/humann2/metagenome_result/metagenome_genefamilies.tsv --input_rna ./meta_data/humann2/metatranscriptome_result/metatranscriptome_genefamilies.tsv --example \r\n\r\nThen, you can merge the community-level gene expression of each sample based on gene family file and obtain a matrix, in which each row represents a gene and each column is a sample.\r\n\r\n \r\n#### 4.2 The alignment with uber-operon sequences ####\r\nThis step is to obtain the sequence alignment result for the relationships between genes and uber-operons. \r\n\r\nFirst, the gene (UniRef identifiers) sequence can be extracted from the UniProt database via the [Retrieve/ID mapping tool](https://www.uniprot.org/uploadlists/). When you input the ID within the matrix from the previous step, you can get all sequences. Put them into one file, as shown in the file ./meta_data/sequence/uniref.fasta. Then, run the command.\r\n\r\n\tmakeblastdb -in ./sequence_output.fa -dbtype nucl -out gene -parse_seqids\r\n\ttblastn -query ./meta_data/sequence/uniref.fasta -db gene -soft_masking true -outfmt 6 -out ./meta_data/input/tblastx.tsv -evalue 0.001 -num_threads 8 -max_hsps 1\r\n\r\nYou can obtain a result file named tblastx.tsv in the folder ./meta_data/input/.\r\n\r\n\r\n\r\n#### 4.3 Module generation ####\r\nThis step is to output gene modules. The data in the folder ./meta_data/input/ can be run as follows. \r\n\r\n\t./idam -i ./meta_data/input/matrix.tsv -n ./meta_data/input/tblastx.tsv -k 20\r\n\t\r\n\r\n**Note:** This will output three files: 1) The file ./matrix.tsv.rules records the discretization rules; 2) The file ./matrix.tsv.chars records the discretization data; 3) The file **./matrix.tsv.modules** records the output modules.  \r\n\r\n\r\n### 5. Other ###\r\n#### Parameter description ####\r\n-i : the input matrix must be one of two tab-delimited formats;\r\n\r\n-n : the blast result file must be of -outfmt 6 format (BLAST+);\r\n\r\n-w : the parameter in the combined function, default: 0.3;\r\n\r\n-q : use quantile discretization for continuous data, default: 0.01;\r\n\r\n-r : the number of ranks used to discrete data, default: 1;\r\n\r\n-o : number of modules to report, default: 300;\r\n\r\n-f : filtering overlapping modules, default: 0.1;\r\n\r\n-k : minimum column width of the module,default: 5% of columns, minimum 2 columns.\r\n\r\n\r\n\r\n## Contact ##\r\nAny questions, problems, or bugs are welcome and should be dumped to [Qin Ma](Qin.Ma@osumc.edu).\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"
      },
      "source": "https://raw.githubusercontent.com/OSU-BMBL/IDAM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3. Data preparation",
        "parent_header": [
          "IDAM",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "# IDAM #\r\n## Brief Description ##\r\nIDAM provides a framework for the identification of microbial disease-associated gene modules based on metagenomic and metatranscriptomic data. The raw sequencing data (matched metagenomic and metatranscriptomic data) or the expression matrix is required. The output is gene modules consisting of gene and sample subsets.\r\n## Environment ##\r\nIDAM is an integrated C package that requires a basic UNIX/Linux environment. The gcc compiler with version 4.8.5 or higher is required to be prior installed. More details can be found [here](https://gcc.gnu.org/wiki/InstallingGCC). Currently, IDAM does not support Mac or Windows systems.\r\n## Usage ##\r\n### 1. Dependencies ###\r\nDependencies of IDAM are listed below. You can click the software name to navigate to its website. Note that after installing each dependency, you should [add it to path](https://unix.stackexchange.com/questions/26047/how-to-correctly-add-a-path-to-path) to ensure a successful run.\r\n#### 1) [HUMAnN2](https://huttenhower.sph.harvard.edu/humann2) (>=2.8.1)\r\nHUMAnN2 is used to process the raw sequencing file and obtain the relative expression of each sample.\r\n#### 2) [BLAST+](https://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/) (>=2.10.0) \r\nBLAST is used for sequence alignment between the sequences from UniRef90 gene families and the gene sequences of uber-operons.\r\n\r\n\r\n### 2. Installation ###\r\nThe source code of IDAM is freely available at https://github.com/OSU-BMBL/IDAM. To install IDAM, you can download the zip file manually from GitHub, or use the code below in Linux.\r\n   \t \r\n\tcd /your/working/path/ \r\n\twget https://bmblx.bmi.osumc.edu/downloadFiles/idam/idam_master.zip\r\n\r\nThen, unzip the file:\r\n\r\n\tunzip idam_master.zip && rm idam_master.zip\r\n\r\nCompile codes:\r\n\r\n\tcd ./idam_master\r\n\tmake\r\n\r\n\r\n### 3. Data preparation ###\r\nTo run the tutorial, first download the data [here](https://bmblx.bmi.osumc.edu/downloadFiles/idam/meta_data.tar.gz) (1.0G) into the folder ./idam_master, or use wget code in the Linux system.\t\r\n\t\r\n\twget https://bmblx.bmi.osumc.edu/downloadFiles/idam/meta_data.tar.gz\r\n\r\nThen unzip the file.\r\n\t\r\n\ttar -xvzf meta_data.tar.gz && rm meta_data.tar.gz\r\n\r\nIn this way, you can obtain three subfolders including the data prepared for input, the data used for an example of HUMAnN2, and the sequence data used for an example of alignment.\r"
      },
      "source": "https://raw.githubusercontent.com/OSU-BMBL/IDAM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.1 The example data prepared for input:  ./meta_data/input/",
        "parent_header": [
          "IDAM",
          "Usage",
          "3. Data preparation"
        ],
        "type": "Text_excerpt",
        "value": "Two files are included in this folder, matrix.tsv and tblastx.tsv. \r\nThe first is an expression matrix obtained from 734 metagenomic and metatranscriptomic datasets in this paper. It is a tab-separated matrix, in which each row represents a gene, each column represents a sample, and the entry is the expression value of a gene in the corresponding sample. An example of the input matrix with five genes and three samples is as follows:\r\n\r\n<div style=\"text-align:center;\">\r\n  <img src=\"example.png\" alt=\"\" width=\"250\" height=\"90\">\r\n</div>\r\n\r\n\r\n\r\nThe second is the alignment result between genes within the matrix mentioned above and genes in uber-operons.\r"
      },
      "source": "https://raw.githubusercontent.com/OSU-BMBL/IDAM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999999458466974,
      "result": {
        "original_header": "Environment",
        "type": "Text_excerpt",
        "value": "IDAM is an integrated C package that requires a basic UNIX/Linux environment. The gcc compiler with version 4.8.5 or higher is required to be prior installed. More details can be found [here](https://gcc.gnu.org/wiki/InstallingGCC). Currently, IDAM does not support Mac or Windows systems.\r \n"
      },
      "source": "https://raw.githubusercontent.com/OSU-BMBL/IDAM/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/OSU-BMBL/IDAM/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "IDAM"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "OSU-BMBL"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 82845,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 631,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OSU-BMBL/IDAM/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Dependencies",
        "parent_header": [
          "IDAM",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "# IDAM #\r\n## Brief Description ##\r\nIDAM provides a framework for the identification of microbial disease-associated gene modules based on metagenomic and metatranscriptomic data. The raw sequencing data (matched metagenomic and metatranscriptomic data) or the expression matrix is required. The output is gene modules consisting of gene and sample subsets.\r\n## Environment ##\r\nIDAM is an integrated C package that requires a basic UNIX/Linux environment. The gcc compiler with version 4.8.5 or higher is required to be prior installed. More details can be found [here](https://gcc.gnu.org/wiki/InstallingGCC). Currently, IDAM does not support Mac or Windows systems.\r\n## Usage ##\r\n### 1. Dependencies ###\r\nDependencies of IDAM are listed below. You can click the software name to navigate to its website. Note that after installing each dependency, you should [add it to path](https://unix.stackexchange.com/questions/26047/how-to-correctly-add-a-path-to-path) to ensure a successful run.\r"
      },
      "source": "https://raw.githubusercontent.com/OSU-BMBL/IDAM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1) <a href=\"https://huttenhower.sph.harvard.edu/humann2\">HUMAnN2</a> (&gt;=2.8.1)",
        "parent_header": [
          "IDAM",
          "Usage",
          "1. Dependencies"
        ],
        "type": "Text_excerpt",
        "value": "HUMAnN2 is used to process the raw sequencing file and obtain the relative expression of each sample.\r"
      },
      "source": "https://raw.githubusercontent.com/OSU-BMBL/IDAM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2) <a href=\"https://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/\">BLAST+</a> (&gt;=2.10.0)",
        "parent_header": [
          "IDAM",
          "Usage",
          "1. Dependencies"
        ],
        "type": "Text_excerpt",
        "value": "BLAST is used for sequence alignment between the sequences from UniRef90 gene families and the gene sequences of uber-operons.\r\n\r\n\r\n### 2. Installation ###\r\nThe source code of IDAM is freely available at https://github.com/OSU-BMBL/IDAM. To install IDAM, you can download the zip file manually from GitHub, or use the code below in Linux.\r\n   \t \r\n\tcd /your/working/path/ \r\n\twget https://bmblx.bmi.osumc.edu/downloadFiles/idam/idam_master.zip\r\n\r\nThen, unzip the file:\r\n\r\n\tunzip idam_master.zip && rm idam_master.zip\r\n\r\nCompile codes:\r\n\r\n\tcd ./idam_master\r\n\tmake\r\n\r\n\r\n### 3. Data preparation ###\r\nTo run the tutorial, first download the data [here](https://bmblx.bmi.osumc.edu/downloadFiles/idam/meta_data.tar.gz) (1.0G) into the folder ./idam_master, or use wget code in the Linux system.\t\r\n\t\r\n\twget https://bmblx.bmi.osumc.edu/downloadFiles/idam/meta_data.tar.gz\r\n\r\nThen unzip the file.\r\n\t\r\n\ttar -xvzf meta_data.tar.gz && rm meta_data.tar.gz\r\n\r\nIn this way, you can obtain three subfolders including the data prepared for input, the data used for an example of HUMAnN2, and the sequence data used for an example of alignment.\r\n#### 3.1 The example data prepared for input:  ./meta_data/input/\r\nTwo files are included in this folder, matrix.tsv and tblastx.tsv. \r\nThe first is an expression matrix obtained from 734 metagenomic and metatranscriptomic datasets in this paper. It is a tab-separated matrix, in which each row represents a gene, each column represents a sample, and the entry is the expression value of a gene in the corresponding sample. An example of the input matrix with five genes and three samples is as follows:\r\n\r\n<div style=\"text-align:center;\">\r\n  <img src=\"example.png\" alt=\"\" width=\"250\" height=\"90\">\r\n</div>\r\n\r\n\r\n\r\nThe second is the alignment result between genes within the matrix mentioned above and genes in uber-operons.\r\n#### 3.2 The example data used for HUMAnN2: ./meta_data/humann2/\r\nTwo files are included in this folder, metagenome.fastq.gz and metatranscriptome.fastq.gz. They correspond to the metagenomic and metatranscriptomic data from one sample, respectively. \r\n#### 3.3 The example data used for alignment: ./meta_data/sequence/\r\nThe file, uniref.fasta,  consists of all sequences corresponding to genes (UniRef90 identifiers). You can extract the sequences of genes from your matrix by NCBI (for gene names) or the UniProt database (for UniRef identifiers).\r\n\r\n**Note 1:** You can run the code in 4.3 using the two files in ./meta_data/input/ and get the results in this paper (**This can be used for testing successful run**). Or, change these two files into your own data.   \r\n\r\n**Note 2:** If your data is raw sequencing data, you have to run 4.1 for the expression matrix. Then, do an alignment between the sequences of genes and the sequence files (sequence_output.fa) via 4.2.  \r\n\r\n**Note 3:** If you have a well-formatted expression matrix, you can skip 4.1 and do an alignment between the sequences of genes and the sequence files (sequence_output.fa, used as the aligned database) via 4.2.  \r\n\r\n### 4. Running ###\r\n#### 4.1 The expression matrix construction ####\r\nThis step is to obtain an expression matrix from raw sequencing reads. If you have matched metagenomic and metatranscriptomic data of multiple samples, you can first run HUMAnN2 for gene relative abundance of each sample.  Here, we use the data in *./meta_data/sequence/* as an example.\r\n\r\n\thumann2 --input  ./meta_data/humann2/metagenome.fastq.gz --output ./meta_data/humann2/metagenome_result\r\n\thumann2 --input  ./meta_data/humann2/metatranscriptome.fastq.gz --taxonomic-profile ./meta_data/humann2/metagenome_result/metagenome_humann2_temp/metagenome_metaphlan_bugs_list.tsv --output ./meta_data/humann2/metatranscriptome_result\r\n\thumann2_rna_dna_norm --input_dna ./meta_data/humann2/metagenome_result/metagenome_genefamilies.tsv --input_rna ./meta_data/humann2/metatranscriptome_result/metatranscriptome_genefamilies.tsv --example \r\n\r\nThen, you can merge the community-level gene expression of each sample based on gene family file and obtain a matrix, in which each row represents a gene and each column is a sample.\r\n\r\n \r\n#### 4.2 The alignment with uber-operon sequences ####\r\nThis step is to obtain the sequence alignment result for the relationships between genes and uber-operons. \r\n\r\nFirst, the gene (UniRef identifiers) sequence can be extracted from the UniProt database via the [Retrieve/ID mapping tool](https://www.uniprot.org/uploadlists/). When you input the ID within the matrix from the previous step, you can get all sequences. Put them into one file, as shown in the file ./meta_data/sequence/uniref.fasta. Then, run the command.\r\n\r\n\tmakeblastdb -in ./sequence_output.fa -dbtype nucl -out gene -parse_seqids\r\n\ttblastn -query ./meta_data/sequence/uniref.fasta -db gene -soft_masking true -outfmt 6 -out ./meta_data/input/tblastx.tsv -evalue 0.001 -num_threads 8 -max_hsps 1\r\n\r\nYou can obtain a result file named tblastx.tsv in the folder ./meta_data/input/.\r\n\r\n\r\n\r\n#### 4.3 Module generation ####\r\nThis step is to output gene modules. The data in the folder ./meta_data/input/ can be run as follows. \r\n\r\n\t./idam -i ./meta_data/input/matrix.tsv -n ./meta_data/input/tblastx.tsv -k 20\r\n\t\r\n\r\n**Note:** This will output three files: 1) The file ./matrix.tsv.rules records the discretization rules; 2) The file ./matrix.tsv.chars records the discretization data; 3) The file **./matrix.tsv.modules** records the output modules.  \r\n\r\n\r\n### 5. Other ###\r\n#### Parameter description ####\r\n-i : the input matrix must be one of two tab-delimited formats;\r\n\r\n-n : the blast result file must be of -outfmt 6 format (BLAST+);\r\n\r\n-w : the parameter in the combined function, default: 0.3;\r\n\r\n-q : use quantile discretization for continuous data, default: 0.01;\r\n\r\n-r : the number of ranks used to discrete data, default: 1;\r\n\r\n-o : number of modules to report, default: 300;\r\n\r\n-f : filtering overlapping modules, default: 0.1;\r\n\r\n-k : minimum column width of the module,default: 5% of columns, minimum 2 columns.\r\n\r\n\r\n\r\n## Contact ##\r\nAny questions, problems, or bugs are welcome and should be dumped to [Qin Ma](Qin.Ma@osumc.edu).\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"
      },
      "source": "https://raw.githubusercontent.com/OSU-BMBL/IDAM/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "4.1 The expression matrix construction",
        "parent_header": [
          "IDAM",
          "Usage",
          "4. Running"
        ],
        "type": "Text_excerpt",
        "value": "This step is to obtain an expression matrix from raw sequencing reads. If you have matched metagenomic and metatranscriptomic data of multiple samples, you can first run HUMAnN2 for gene relative abundance of each sample.  Here, we use the data in *./meta_data/sequence/* as an example.\r\n\r\n\thumann2 --input  ./meta_data/humann2/metagenome.fastq.gz --output ./meta_data/humann2/metagenome_result\r\n\thumann2 --input  ./meta_data/humann2/metatranscriptome.fastq.gz --taxonomic-profile ./meta_data/humann2/metagenome_result/metagenome_humann2_temp/metagenome_metaphlan_bugs_list.tsv --output ./meta_data/humann2/metatranscriptome_result\r\n\thumann2_rna_dna_norm --input_dna ./meta_data/humann2/metagenome_result/metagenome_genefamilies.tsv --input_rna ./meta_data/humann2/metatranscriptome_result/metatranscriptome_genefamilies.tsv --example \r\n\r\nThen, you can merge the community-level gene expression of each sample based on gene family file and obtain a matrix, in which each row represents a gene and each column is a sample.\r\n\r\n \r"
      },
      "source": "https://raw.githubusercontent.com/OSU-BMBL/IDAM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4.2 The alignment with uber-operon sequences",
        "parent_header": [
          "IDAM",
          "Usage",
          "4. Running"
        ],
        "type": "Text_excerpt",
        "value": "This step is to obtain the sequence alignment result for the relationships between genes and uber-operons. \r\n\r\nFirst, the gene (UniRef identifiers) sequence can be extracted from the UniProt database via the [Retrieve/ID mapping tool](https://www.uniprot.org/uploadlists/). When you input the ID within the matrix from the previous step, you can get all sequences. Put them into one file, as shown in the file ./meta_data/sequence/uniref.fasta. Then, run the command.\r\n\r\n\tmakeblastdb -in ./sequence_output.fa -dbtype nucl -out gene -parse_seqids\r\n\ttblastn -query ./meta_data/sequence/uniref.fasta -db gene -soft_masking true -outfmt 6 -out ./meta_data/input/tblastx.tsv -evalue 0.001 -num_threads 8 -max_hsps 1\r\n\r\nYou can obtain a result file named tblastx.tsv in the folder ./meta_data/input/.\r\n\r\n\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/OSU-BMBL/IDAM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4.3 Module generation",
        "parent_header": [
          "IDAM",
          "Usage",
          "4. Running"
        ],
        "type": "Text_excerpt",
        "value": "This step is to output gene modules. The data in the folder ./meta_data/input/ can be run as follows. \r\n\r\n\t./idam -i ./meta_data/input/matrix.tsv -n ./meta_data/input/tblastx.tsv -k 20\r\n\t\r\n\r\n**Note:** This will output three files: 1) The file ./matrix.tsv.rules records the discretization rules; 2) The file ./matrix.tsv.chars records the discretization data; 3) The file **./matrix.tsv.modules** records the output modules.  \r\n\r\n\r\n### 5. Other ###\r\n#### Parameter description ####\r\n-i : the input matrix must be one of two tab-delimited formats;\r\n\r\n-n : the blast result file must be of -outfmt 6 format (BLAST+);\r\n\r\n-w : the parameter in the combined function, default: 0.3;\r\n\r\n-q : use quantile discretization for continuous data, default: 0.01;\r\n\r\n-r : the number of ranks used to discrete data, default: 1;\r\n\r\n-o : number of modules to report, default: 300;\r\n\r\n-f : filtering overlapping modules, default: 0.1;\r\n\r\n-k : minimum column width of the module,default: 5% of columns, minimum 2 columns.\r\n\r\n\r\n\r\n## Contact ##\r\nAny questions, problems, or bugs are welcome and should be dumped to [Qin Ma](Qin.Ma@osumc.edu).\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"
      },
      "source": "https://raw.githubusercontent.com/OSU-BMBL/IDAM/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 02:58:26",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "1) <a href=\"https://huttenhower.sph.harvard.edu/humann2\">HUMAnN2</a> (&gt;=2.8.1)",
        "parent_header": [
          "IDAM",
          "Usage",
          "1. Dependencies"
        ],
        "type": "Text_excerpt",
        "value": "HUMAnN2 is used to process the raw sequencing file and obtain the relative expression of each sample.\r"
      },
      "source": "https://raw.githubusercontent.com/OSU-BMBL/IDAM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2) <a href=\"https://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/\">BLAST+</a> (&gt;=2.10.0)",
        "parent_header": [
          "IDAM",
          "Usage",
          "1. Dependencies"
        ],
        "type": "Text_excerpt",
        "value": "BLAST is used for sequence alignment between the sequences from UniRef90 gene families and the gene sequences of uber-operons.\r\n\r\n\r\n### 2. Installation ###\r\nThe source code of IDAM is freely available at https://github.com/OSU-BMBL/IDAM. To install IDAM, you can download the zip file manually from GitHub, or use the code below in Linux.\r\n   \t \r\n\tcd /your/working/path/ \r\n\twget https://bmblx.bmi.osumc.edu/downloadFiles/idam/idam_master.zip\r\n\r\nThen, unzip the file:\r\n\r\n\tunzip idam_master.zip && rm idam_master.zip\r\n\r\nCompile codes:\r\n\r\n\tcd ./idam_master\r\n\tmake\r\n\r\n\r\n### 3. Data preparation ###\r\nTo run the tutorial, first download the data [here](https://bmblx.bmi.osumc.edu/downloadFiles/idam/meta_data.tar.gz) (1.0G) into the folder ./idam_master, or use wget code in the Linux system.\t\r\n\t\r\n\twget https://bmblx.bmi.osumc.edu/downloadFiles/idam/meta_data.tar.gz\r\n\r\nThen unzip the file.\r\n\t\r\n\ttar -xvzf meta_data.tar.gz && rm meta_data.tar.gz\r\n\r\nIn this way, you can obtain three subfolders including the data prepared for input, the data used for an example of HUMAnN2, and the sequence data used for an example of alignment.\r\n#### 3.1 The example data prepared for input:  ./meta_data/input/\r\nTwo files are included in this folder, matrix.tsv and tblastx.tsv. \r\nThe first is an expression matrix obtained from 734 metagenomic and metatranscriptomic datasets in this paper. It is a tab-separated matrix, in which each row represents a gene, each column represents a sample, and the entry is the expression value of a gene in the corresponding sample. An example of the input matrix with five genes and three samples is as follows:\r\n\r\n<div style=\"text-align:center;\">\r\n  <img src=\"example.png\" alt=\"\" width=\"250\" height=\"90\">\r\n</div>\r\n\r\n\r\n\r\nThe second is the alignment result between genes within the matrix mentioned above and genes in uber-operons.\r\n#### 3.2 The example data used for HUMAnN2: ./meta_data/humann2/\r\nTwo files are included in this folder, metagenome.fastq.gz and metatranscriptome.fastq.gz. They correspond to the metagenomic and metatranscriptomic data from one sample, respectively. \r\n#### 3.3 The example data used for alignment: ./meta_data/sequence/\r\nThe file, uniref.fasta,  consists of all sequences corresponding to genes (UniRef90 identifiers). You can extract the sequences of genes from your matrix by NCBI (for gene names) or the UniProt database (for UniRef identifiers).\r\n\r\n**Note 1:** You can run the code in 4.3 using the two files in ./meta_data/input/ and get the results in this paper (**This can be used for testing successful run**). Or, change these two files into your own data.   \r\n\r\n**Note 2:** If your data is raw sequencing data, you have to run 4.1 for the expression matrix. Then, do an alignment between the sequences of genes and the sequence files (sequence_output.fa) via 4.2.  \r\n\r\n**Note 3:** If you have a well-formatted expression matrix, you can skip 4.1 and do an alignment between the sequences of genes and the sequence files (sequence_output.fa, used as the aligned database) via 4.2.  \r\n\r\n### 4. Running ###\r\n#### 4.1 The expression matrix construction ####\r\nThis step is to obtain an expression matrix from raw sequencing reads. If you have matched metagenomic and metatranscriptomic data of multiple samples, you can first run HUMAnN2 for gene relative abundance of each sample.  Here, we use the data in *./meta_data/sequence/* as an example.\r\n\r\n\thumann2 --input  ./meta_data/humann2/metagenome.fastq.gz --output ./meta_data/humann2/metagenome_result\r\n\thumann2 --input  ./meta_data/humann2/metatranscriptome.fastq.gz --taxonomic-profile ./meta_data/humann2/metagenome_result/metagenome_humann2_temp/metagenome_metaphlan_bugs_list.tsv --output ./meta_data/humann2/metatranscriptome_result\r\n\thumann2_rna_dna_norm --input_dna ./meta_data/humann2/metagenome_result/metagenome_genefamilies.tsv --input_rna ./meta_data/humann2/metatranscriptome_result/metatranscriptome_genefamilies.tsv --example \r\n\r\nThen, you can merge the community-level gene expression of each sample based on gene family file and obtain a matrix, in which each row represents a gene and each column is a sample.\r\n\r\n \r\n#### 4.2 The alignment with uber-operon sequences ####\r\nThis step is to obtain the sequence alignment result for the relationships between genes and uber-operons. \r\n\r\nFirst, the gene (UniRef identifiers) sequence can be extracted from the UniProt database via the [Retrieve/ID mapping tool](https://www.uniprot.org/uploadlists/). When you input the ID within the matrix from the previous step, you can get all sequences. Put them into one file, as shown in the file ./meta_data/sequence/uniref.fasta. Then, run the command.\r\n\r\n\tmakeblastdb -in ./sequence_output.fa -dbtype nucl -out gene -parse_seqids\r\n\ttblastn -query ./meta_data/sequence/uniref.fasta -db gene -soft_masking true -outfmt 6 -out ./meta_data/input/tblastx.tsv -evalue 0.001 -num_threads 8 -max_hsps 1\r\n\r\nYou can obtain a result file named tblastx.tsv in the folder ./meta_data/input/.\r\n\r\n\r\n\r\n#### 4.3 Module generation ####\r\nThis step is to output gene modules. The data in the folder ./meta_data/input/ can be run as follows. \r\n\r\n\t./idam -i ./meta_data/input/matrix.tsv -n ./meta_data/input/tblastx.tsv -k 20\r\n\t\r\n\r\n**Note:** This will output three files: 1) The file ./matrix.tsv.rules records the discretization rules; 2) The file ./matrix.tsv.chars records the discretization data; 3) The file **./matrix.tsv.modules** records the output modules.  \r\n\r\n\r\n### 5. Other ###\r\n#### Parameter description ####\r\n-i : the input matrix must be one of two tab-delimited formats;\r\n\r\n-n : the blast result file must be of -outfmt 6 format (BLAST+);\r\n\r\n-w : the parameter in the combined function, default: 0.3;\r\n\r\n-q : use quantile discretization for continuous data, default: 0.01;\r\n\r\n-r : the number of ranks used to discrete data, default: 1;\r\n\r\n-o : number of modules to report, default: 300;\r\n\r\n-f : filtering overlapping modules, default: 0.1;\r\n\r\n-k : minimum column width of the module,default: 5% of columns, minimum 2 columns.\r\n\r\n\r\n\r\n## Contact ##\r\nAny questions, problems, or bugs are welcome and should be dumped to [Qin Ma](Qin.Ma@osumc.edu).\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"
      },
      "source": "https://raw.githubusercontent.com/OSU-BMBL/IDAM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.1 The example data prepared for input:  ./meta_data/input/",
        "parent_header": [
          "IDAM",
          "Usage",
          "3. Data preparation"
        ],
        "type": "Text_excerpt",
        "value": "Two files are included in this folder, matrix.tsv and tblastx.tsv. \r\nThe first is an expression matrix obtained from 734 metagenomic and metatranscriptomic datasets in this paper. It is a tab-separated matrix, in which each row represents a gene, each column represents a sample, and the entry is the expression value of a gene in the corresponding sample. An example of the input matrix with five genes and three samples is as follows:\r\n\r\n<div style=\"text-align:center;\">\r\n  <img src=\"example.png\" alt=\"\" width=\"250\" height=\"90\">\r\n</div>\r\n\r\n\r\n\r\nThe second is the alignment result between genes within the matrix mentioned above and genes in uber-operons.\r"
      },
      "source": "https://raw.githubusercontent.com/OSU-BMBL/IDAM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.2 The example data used for HUMAnN2: ./meta_data/humann2/",
        "parent_header": [
          "IDAM",
          "Usage",
          "3. Data preparation"
        ],
        "type": "Text_excerpt",
        "value": "Two files are included in this folder, metagenome.fastq.gz and metatranscriptome.fastq.gz. They correspond to the metagenomic and metatranscriptomic data from one sample, respectively. \r"
      },
      "source": "https://raw.githubusercontent.com/OSU-BMBL/IDAM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.3 The example data used for alignment: ./meta_data/sequence/",
        "parent_header": [
          "IDAM",
          "Usage",
          "3. Data preparation"
        ],
        "type": "Text_excerpt",
        "value": "The file, uniref.fasta,  consists of all sequences corresponding to genes (UniRef90 identifiers). You can extract the sequences of genes from your matrix by NCBI (for gene names) or the UniProt database (for UniRef identifiers).\r\n\r\n**Note 1:** You can run the code in 4.3 using the two files in ./meta_data/input/ and get the results in this paper (**This can be used for testing successful run**). Or, change these two files into your own data.   \r\n\r\n**Note 2:** If your data is raw sequencing data, you have to run 4.1 for the expression matrix. Then, do an alignment between the sequences of genes and the sequence files (sequence_output.fa) via 4.2.  \r\n\r\n**Note 3:** If you have a well-formatted expression matrix, you can skip 4.1 and do an alignment between the sequences of genes and the sequence files (sequence_output.fa, used as the aligned database) via 4.2.  \r\n\r\n### 4. Running ###\r\n#### 4.1 The expression matrix construction ####\r\nThis step is to obtain an expression matrix from raw sequencing reads. If you have matched metagenomic and metatranscriptomic data of multiple samples, you can first run HUMAnN2 for gene relative abundance of each sample.  Here, we use the data in *./meta_data/sequence/* as an example.\r\n\r\n\thumann2 --input  ./meta_data/humann2/metagenome.fastq.gz --output ./meta_data/humann2/metagenome_result\r\n\thumann2 --input  ./meta_data/humann2/metatranscriptome.fastq.gz --taxonomic-profile ./meta_data/humann2/metagenome_result/metagenome_humann2_temp/metagenome_metaphlan_bugs_list.tsv --output ./meta_data/humann2/metatranscriptome_result\r\n\thumann2_rna_dna_norm --input_dna ./meta_data/humann2/metagenome_result/metagenome_genefamilies.tsv --input_rna ./meta_data/humann2/metatranscriptome_result/metatranscriptome_genefamilies.tsv --example \r\n\r\nThen, you can merge the community-level gene expression of each sample based on gene family file and obtain a matrix, in which each row represents a gene and each column is a sample.\r\n\r\n \r\n#### 4.2 The alignment with uber-operon sequences ####\r\nThis step is to obtain the sequence alignment result for the relationships between genes and uber-operons. \r\n\r\nFirst, the gene (UniRef identifiers) sequence can be extracted from the UniProt database via the [Retrieve/ID mapping tool](https://www.uniprot.org/uploadlists/). When you input the ID within the matrix from the previous step, you can get all sequences. Put them into one file, as shown in the file ./meta_data/sequence/uniref.fasta. Then, run the command.\r\n\r\n\tmakeblastdb -in ./sequence_output.fa -dbtype nucl -out gene -parse_seqids\r\n\ttblastn -query ./meta_data/sequence/uniref.fasta -db gene -soft_masking true -outfmt 6 -out ./meta_data/input/tblastx.tsv -evalue 0.001 -num_threads 8 -max_hsps 1\r\n\r\nYou can obtain a result file named tblastx.tsv in the folder ./meta_data/input/.\r\n\r\n\r\n\r\n#### 4.3 Module generation ####\r\nThis step is to output gene modules. The data in the folder ./meta_data/input/ can be run as follows. \r\n\r\n\t./idam -i ./meta_data/input/matrix.tsv -n ./meta_data/input/tblastx.tsv -k 20\r\n\t\r\n\r\n**Note:** This will output three files: 1) The file ./matrix.tsv.rules records the discretization rules; 2) The file ./matrix.tsv.chars records the discretization data; 3) The file **./matrix.tsv.modules** records the output modules.  \r\n\r\n\r\n### 5. Other ###\r\n#### Parameter description ####\r\n-i : the input matrix must be one of two tab-delimited formats;\r\n\r\n-n : the blast result file must be of -outfmt 6 format (BLAST+);\r\n\r\n-w : the parameter in the combined function, default: 0.3;\r\n\r\n-q : use quantile discretization for continuous data, default: 0.01;\r\n\r\n-r : the number of ranks used to discrete data, default: 1;\r\n\r\n-o : number of modules to report, default: 300;\r\n\r\n-f : filtering overlapping modules, default: 0.1;\r\n\r\n-k : minimum column width of the module,default: 5% of columns, minimum 2 columns.\r\n\r\n\r\n\r\n## Contact ##\r\nAny questions, problems, or bugs are welcome and should be dumped to [Qin Ma](Qin.Ma@osumc.edu).\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"
      },
      "source": "https://raw.githubusercontent.com/OSU-BMBL/IDAM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4.1 The expression matrix construction",
        "parent_header": [
          "IDAM",
          "Usage",
          "4. Running"
        ],
        "type": "Text_excerpt",
        "value": "This step is to obtain an expression matrix from raw sequencing reads. If you have matched metagenomic and metatranscriptomic data of multiple samples, you can first run HUMAnN2 for gene relative abundance of each sample.  Here, we use the data in *./meta_data/sequence/* as an example.\r\n\r\n\thumann2 --input  ./meta_data/humann2/metagenome.fastq.gz --output ./meta_data/humann2/metagenome_result\r\n\thumann2 --input  ./meta_data/humann2/metatranscriptome.fastq.gz --taxonomic-profile ./meta_data/humann2/metagenome_result/metagenome_humann2_temp/metagenome_metaphlan_bugs_list.tsv --output ./meta_data/humann2/metatranscriptome_result\r\n\thumann2_rna_dna_norm --input_dna ./meta_data/humann2/metagenome_result/metagenome_genefamilies.tsv --input_rna ./meta_data/humann2/metatranscriptome_result/metatranscriptome_genefamilies.tsv --example \r\n\r\nThen, you can merge the community-level gene expression of each sample based on gene family file and obtain a matrix, in which each row represents a gene and each column is a sample.\r\n\r\n \r"
      },
      "source": "https://raw.githubusercontent.com/OSU-BMBL/IDAM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4.2 The alignment with uber-operon sequences",
        "parent_header": [
          "IDAM",
          "Usage",
          "4. Running"
        ],
        "type": "Text_excerpt",
        "value": "This step is to obtain the sequence alignment result for the relationships between genes and uber-operons. \r\n\r\nFirst, the gene (UniRef identifiers) sequence can be extracted from the UniProt database via the [Retrieve/ID mapping tool](https://www.uniprot.org/uploadlists/). When you input the ID within the matrix from the previous step, you can get all sequences. Put them into one file, as shown in the file ./meta_data/sequence/uniref.fasta. Then, run the command.\r\n\r\n\tmakeblastdb -in ./sequence_output.fa -dbtype nucl -out gene -parse_seqids\r\n\ttblastn -query ./meta_data/sequence/uniref.fasta -db gene -soft_masking true -outfmt 6 -out ./meta_data/input/tblastx.tsv -evalue 0.001 -num_threads 8 -max_hsps 1\r\n\r\nYou can obtain a result file named tblastx.tsv in the folder ./meta_data/input/.\r\n\r\n\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/OSU-BMBL/IDAM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4.3 Module generation",
        "parent_header": [
          "IDAM",
          "Usage",
          "4. Running"
        ],
        "type": "Text_excerpt",
        "value": "This step is to output gene modules. The data in the folder ./meta_data/input/ can be run as follows. \r\n\r\n\t./idam -i ./meta_data/input/matrix.tsv -n ./meta_data/input/tblastx.tsv -k 20\r\n\t\r\n\r\n**Note:** This will output three files: 1) The file ./matrix.tsv.rules records the discretization rules; 2) The file ./matrix.tsv.chars records the discretization data; 3) The file **./matrix.tsv.modules** records the output modules.  \r\n\r\n\r\n### 5. Other ###\r\n#### Parameter description ####\r\n-i : the input matrix must be one of two tab-delimited formats;\r\n\r\n-n : the blast result file must be of -outfmt 6 format (BLAST+);\r\n\r\n-w : the parameter in the combined function, default: 0.3;\r\n\r\n-q : use quantile discretization for continuous data, default: 0.01;\r\n\r\n-r : the number of ranks used to discrete data, default: 1;\r\n\r\n-o : number of modules to report, default: 300;\r\n\r\n-f : filtering overlapping modules, default: 0.1;\r\n\r\n-k : minimum column width of the module,default: 5% of columns, minimum 2 columns.\r\n\r\n\r\n\r\n## Contact ##\r\nAny questions, problems, or bugs are welcome and should be dumped to [Qin Ma](Qin.Ma@osumc.edu).\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"
      },
      "source": "https://raw.githubusercontent.com/OSU-BMBL/IDAM/master/README.md",
      "technique": "header_analysis"
    }
  ]
}