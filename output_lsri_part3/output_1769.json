{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/SCBB-LAB/RBPSpot"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-06-07T09:02:08Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-31T16:31:33Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Learning on Appropriate Contextual Information for RBP Binding Sites Discovery"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9291548009364503,
      "result": {
        "type": "Text_excerpt",
        "value": "This script contain two modules:\n1. For model building (This module requires CLIP-Seq peak data in bed file format) \nbedfile contains peak data for CLIP-seq data, bedfile can be given with any name, but it's name will be used as prefix for all the files generated in this step. And also some of the file will be used in next step. \nFolder contaiining the model file in .pb format and it's assets and variable. \nbedfile name must be the same name used in last step at the time of Model_building step.\nInput_sequence file must be in single line fasta and sequence length must be >=160 bases.\nwindow_size must be the same number used in Model_building step. As different window size will generate different number of feature vector, hence model will not be able to test any feature vector. \n"
      },
      "source": "https://raw.githubusercontent.com/SCBB-LAB/RBPSpot/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/SCBB-LAB/RBPSpot/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/SCBB-LAB/RBPSpot/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SCBB-LAB/RBPSpot"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/SCBB-LAB/RBPSpot/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/SCBB-LAB/RBPSpot/main/Model_Scan/parallel.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.9197759239802972,
      "result": {
        "type": "Text_excerpt",
        "value": "\n*Requirements* \n1. Python3\n2. Numpy\n3. Pandas\n4. perl\n5. sklearn\n6. xgboost\n7. bedtools\n8. keras\n9. tensorflow\n10. gcc\n11. Download hg19.fa file from UCSC and put it into \"Model_building\" directory with \"hg19.fa\" name. \nTo run the script: \npython3 xgb_model.py Example.bed_train Example.bed_test \n*Running script [Scanning module]* \n./scan <bed_file> <Input_sequence>  <window_size>\n  \n  For parallel:\n  sh parallel.sh <#Processors> <Input_sequence> <bed_file>  <window_size>\n  \n  E.g.\n  Shift \"Example.bed_model\" directory into Model_Scan directory along with Example.bed_penta_Prob_value, Example.bed_penta_Prob_value and Example.bed_primary_motif files.\n  Then run:\n  ./scan Example.bed Example_sequence.fa 17 \n"
      },
      "source": "https://raw.githubusercontent.com/SCBB-LAB/RBPSpot/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8672831088293375,
      "result": {
        "type": "Text_excerpt",
        "value": "1. Python3\n2. Numpy\n3. Pandas\n4. perl\n5. sklearn\n6. xgboost\n7. bedtools\n8. keras\n9. tensorflow\n10. gcc\n11. Download hg19.fa file from UCSC and put it into \"Model_building\" directory with \"hg19.fa\" name. \n*Running script[model building]* \npython3 xgb_model.py Example.bed_train Example.bed_test \nbedfile_model\n  \n  E.g.\n  Example.bed_model \n*Running script [Scanning module]* \n./scan <bed_file> <Input_sequence>  <window_size>\n  \n  For parallel:\n  sh parallel.sh <#Processors> <Input_sequence> <bed_file>  <window_size>\n  \n  E.g.\n  Shift \"Example.bed_model\" directory into Model_Scan directory along with Example.bed_penta_Prob_value, Example.bed_penta_Prob_value and Example.bed_primary_motif files.\n  Then run:\n  ./scan Example.bed Example_sequence.fa 17 \n"
      },
      "source": "https://raw.githubusercontent.com/SCBB-LAB/RBPSpot/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/SCBB-LAB/RBPSpot/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RBPSpot"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "SCBB-LAB"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 42545,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 7347,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 5072,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Raku",
        "size": 2408,
        "type": "Programming_language",
        "value": "Raku"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 190,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/SCBB-LAB/RBPSpot/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 06:14:05",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ]
}