{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Unzipped the example file and reference sequences",
        "parent_header": [
          "VCF2Prot",
          "Execution Logic and Requirements",
          "Usage",
          "Change directory to the vcf2prot"
        ],
        "type": "Text_excerpt",
        "value": "```bash\ngunzip examples/*\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ikmb/vcf2prot"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact",
        "parent_header": [
          "VCF2Prot"
        ],
        "type": "Text_excerpt",
        "value": "For further questions, please feel free to open an issue here or send an email to the developers at h.elabd@ikmb.uni-kiel.de or through twitter @HeshamElAbd16\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-06-18T13:02:30Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-04-30T09:09:17Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Accelerate the generation of personalized proteomes from a Variant calling format (VCF) file and a reference proteome using graphical processing units (GPUs)."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.8337122626886718,
      "result": {
        "original_header": "Project Aim",
        "type": "Text_excerpt",
        "value": "Generating sample-specific FASTA files from a consequence called VCF-file and a reference proteome.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9746866231529087,
      "result": {
        "original_header": "Note",
        "type": "Text_excerpt",
        "value": "A pre-compiled versions of VCF2Prot for MacOS and Linux can be found at the bins directory, choose the correct version for your operator system, *i.e.* Linux and MacOS, and then call VCF2Prot accordingly.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8485215829748181,
      "result": {
        "original_header": "**Note**",
        "type": "Text_excerpt",
        "value": "<p> Compiling the following code will be produce a CPU only version, that means that providing the code will panic if the GPU is specified as an engine, i.e. the parameter -g is set to gpu. </p> \n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9702983011732704,
      "result": {
        "original_header": "solution",
        "type": "Text_excerpt",
        "value": "<p> This problem will be encountered in case any of the two environmental variable, CUDA_HOME and LD_LIBRARY_PATH, are not defined or set. For a permanent solution please update your .bashrc to have these two variables exported.</p> \n<p> This problem usually happens when there is problem with access permission and can solved with by: </p> \n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8311957680195229,
      "result": {
        "original_header": "using DockerHub",
        "type": "Text_excerpt",
        "value": "VCF2Prot is currently available at [DockerHub](https://hub.docker.com) [Here](https://hub.docker.com/r/ikmb/vcf2prot). This image can be build locally using docker as follow:\n```bash\ndocker pull ikmb/vcf2prot\n```\nThis automatically, download the latest version, to use a specific version, the following command shall be used:\n```bash\ndocker pull ikmb/vcf2prot:0.1.4\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9628181054796606,
      "result": {
        "original_header": "Output format",
        "type": "Text_excerpt",
        "value": "1. Header: which is made up of the transcript name and either '_1' to represent transcript containing alterations arising from the first haplotype or '_2' to represent alterations arising from the second haplotype. \n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ikmb/vcf2prot/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "faq": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Problem",
        "parent_header": [
          "VCF2Prot",
          "Troubleshooting"
        ],
        "type": "Text_excerpt",
        "value": "<p> error while loading shared libraries: libcudart.so.11.0: cannot open shared object file: No such file or directory </p>\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only/README.md",
      "technique": "header_analysis"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ikmb/vcf2prot/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ikmb/vcf2prot"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "VCF2Prot"
      },
      "source": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only//media/RTG1743.png"
      },
      "source": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Is vcf2prot installed ?",
        "parent_header": [
          "VCF2Prot",
          "Execution Logic and Requirements",
          "Usage",
          "Change directory to the vcf2prot"
        ],
        "type": "Text_excerpt",
        "value": "To follow along, make sure the executable vcf2prot has been installed on your system and is available on your PATH. Incase it is not installed, check the installation guideline below.\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9997748986436868,
      "result": {
        "original_header": "Note",
        "type": "Text_excerpt",
        "value": "A pre-compiled versions of VCF2Prot for MacOS and Linux can be found at the bins directory, choose the correct version for your operator system, *i.e.* Linux and MacOS, and then call VCF2Prot accordingly.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9957054026375824,
      "result": {
        "original_header": "**Note**",
        "type": "Text_excerpt",
        "value": "<p> Compiling the following code will be produce a CPU only version, that means that providing the code will panic if the GPU is specified as an engine, i.e. the parameter -g is set to gpu. </p> \n1. Install Rust from the <a href= \"https://www.rust-lang.org \"> official website </a>   \n2. Clone the current repository\n```bash\ngit clone https://github.com/ikmb/vcf2prot\n```\n3. Change the directory to vcf2prot\n```bash\ncd vcf2prot\n```\n4. Change to the cpu_only branch\n```bash\ngit checkout cpu_only\n```\n5. build the project\n```bash\ncargo build --release \n```\n6. Access the binary executable from the target directory\n```bash\ncd target/release\n./vcf2prot -h # This print the help statement \n```\n \n7. add the binary to your PATH\n \n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9540510020825022,
      "result": {
        "original_header": "solution",
        "type": "Text_excerpt",
        "value": "<p> This problem will be encountered in case any of the two environmental variable, CUDA_HOME and LD_LIBRARY_PATH, are not defined or set. For a permanent solution please update your .bashrc to have these two variables exported.</p> \n<p> Calling Cargo build produce, error: Permission denied (os error 13) </p> \n```bash\ncargo clean && cargo build --release\n``` \n```bash\nsudo chown -R $(whoami) PATH_TO_PROJECT\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999999431770749,
      "result": {
        "original_header": "using DockerHub",
        "type": "Text_excerpt",
        "value": "VCF2Prot is currently available at [DockerHub](https://hub.docker.com) [Here](https://hub.docker.com/r/ikmb/vcf2prot). This image can be build locally using docker as follow:\n```bash\ndocker pull ikmb/vcf2prot\n```\nThis automatically, download the latest version, to use a specific version, the following command shall be used:\n```bash\ndocker pull ikmb/vcf2prot:0.1.4\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9687487543202272,
      "result": {
        "original_header": "Building locally",
        "type": "Text_excerpt",
        "value": "The container for VCF2Prot can be build as follow \n1. make sure the docker is installed and it running using, the installation details is available [here](https://docs.docker.com/get-docker/)\n```bash\ndocker run --rm hello-world\n```\nIf this worked out correctly and printed the help \"Hello from Docker!\" then feel free to jump to step number 2, otherwise, depending on the error message two things can be done. First, the error message was permission denied then try running the same command above as a sudo user, i.e.\n```bash\nsudo docker run --rm hello-world\n```\nOtherwise if the message was unable to connect to the daemon and you are working on a mac OS then start first docker image and then start first the docker desktop application from the application pad then try again using\n```bash\ndocker run --rm hello-world\n```\n2. Clone the repository\n```bash\ngit clone https://github.com/ikmb/vcf2prot\n```\n3. Change the directory to vcf2prot\n```bash\ncd vcf2prot\n```\n4. Build the container\n```bash\ndocker build -t vcf2prot . \n```\n5. Run the container\n```bash\ndocker run vcf2prot -h \n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ikmb/vcf2prot/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "genetics, protein-sequences, proteomics, rust-lang, rust-library, vcf-converter, vcf-files"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Copyright 2021-2022 Institute of Clinical Molecular Biology\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"),\n to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only/LICENCE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only//media/IKMB_LOGO.png"
      },
      "source": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "vcf2prot"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "ikmb"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Rust",
        "size": 383277,
        "type": "Programming_language",
        "value": "Rust"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 18960,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 420,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "HeshamElAbd",
          "type": "User"
        },
        "date_created": "2022-07-25T15:41:11Z",
        "date_published": "2022-08-15T08:14:08Z",
        "description": "Version 0.1.4 stable release, correcting small bugs in parsing small INDELS  ",
        "html_url": "https://github.com/ikmb/vcf2prot/releases/tag/v0.1.4s",
        "name": "Version 0.1.4 stable ",
        "release_id": 74407340,
        "tag": "v0.1.4s",
        "tarball_url": "https://api.github.com/repos/ikmb/vcf2prot/tarball/v0.1.4s",
        "type": "Release",
        "url": "https://api.github.com/repos/ikmb/vcf2prot/releases/74407340",
        "value": "https://api.github.com/repos/ikmb/vcf2prot/releases/74407340",
        "zipball_url": "https://api.github.com/repos/ikmb/vcf2prot/zipball/v0.1.4s"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "HeshamElAbd",
          "type": "User"
        },
        "date_created": "2021-08-11T21:06:20Z",
        "date_published": "2021-08-11T21:09:45Z",
        "description": "A multi-platform release of the code current three executables are available, a cpu-only version for Mac OS and Linux and a GPU version for Linux with CUDA. ",
        "html_url": "https://github.com/ikmb/vcf2prot/releases/tag/0.1.4beta_mp",
        "release_id": 47703405,
        "tag": "0.1.4beta_mp",
        "tarball_url": "https://api.github.com/repos/ikmb/vcf2prot/tarball/0.1.4beta_mp",
        "type": "Release",
        "url": "https://api.github.com/repos/ikmb/vcf2prot/releases/47703405",
        "value": "https://api.github.com/repos/ikmb/vcf2prot/releases/47703405",
        "zipball_url": "https://api.github.com/repos/ikmb/vcf2prot/zipball/0.1.4beta_mp"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "HeshamElAbd",
          "type": "User"
        },
        "date_created": "2021-08-11T14:59:35Z",
        "date_published": "2021-08-11T15:30:18Z",
        "description": "Major upgrades over the previous release:\r\n1- Improved safety of execution by adding inspector code to inspect the input to GPUs, the translation of mutation into instructions and the generation of tasks.\r\n2- More control over the execution of the tool using environmental variables \r\n3- Support for writing of compressed fasta file \r\n4- More control of the writer threads \r\n5- Support for the conditional writing of files that contain the mutated and the reference fasta files ",
        "html_url": "https://github.com/ikmb/vcf2prot/releases/tag/0.1.4",
        "name": "0.1.4-beta",
        "release_id": 47683054,
        "tag": "0.1.4",
        "tarball_url": "https://api.github.com/repos/ikmb/vcf2prot/tarball/0.1.4",
        "type": "Release",
        "url": "https://api.github.com/repos/ikmb/vcf2prot/releases/47683054",
        "value": "https://api.github.com/repos/ikmb/vcf2prot/releases/47683054",
        "zipball_url": "https://api.github.com/repos/ikmb/vcf2prot/zipball/0.1.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "HeshamElAbd",
          "type": "User"
        },
        "date_created": "2021-08-04T16:50:32Z",
        "date_published": "2021-08-04T16:57:17Z",
        "description": "Version 0.1.2, nickname ThunderRays, build on top of previous versions, parsing has been redesigned to improve multithreading and minimise memory utilisation.  ",
        "html_url": "https://github.com/ikmb/vcf2prot/releases/tag/0.1.2",
        "name": "Thunder Rays",
        "release_id": 47309014,
        "tag": "0.1.2",
        "tarball_url": "https://api.github.com/repos/ikmb/vcf2prot/tarball/0.1.2",
        "type": "Release",
        "url": "https://api.github.com/repos/ikmb/vcf2prot/releases/47309014",
        "value": "https://api.github.com/repos/ikmb/vcf2prot/releases/47309014",
        "zipball_url": "https://api.github.com/repos/ikmb/vcf2prot/zipball/0.1.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "HeshamElAbd",
          "type": "User"
        },
        "date_created": "2021-08-03T17:56:19Z",
        "date_published": "2021-08-03T18:00:59Z",
        "description": "First stable release of PPGG, major enhancement in performance and an improved error handling mechanism. \r\nCurrent release requires CUDA to run ",
        "html_url": "https://github.com/ikmb/vcf2prot/releases/tag/0.1.1.beta",
        "name": "Version 0.1. beta release",
        "release_id": 47244693,
        "tag": "0.1.1.beta",
        "tarball_url": "https://api.github.com/repos/ikmb/vcf2prot/tarball/0.1.1.beta",
        "type": "Release",
        "url": "https://api.github.com/repos/ikmb/vcf2prot/releases/47244693",
        "value": "https://api.github.com/repos/ikmb/vcf2prot/releases/47244693",
        "zipball_url": "https://api.github.com/repos/ikmb/vcf2prot/zipball/0.1.1.beta"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "HeshamElAbd",
          "type": "User"
        },
        "date_created": "2021-07-26T09:26:31Z",
        "date_published": "2021-07-26T09:28:30Z",
        "html_url": "https://github.com/ikmb/vcf2prot/releases/tag/0.1.2-gpu_alpha",
        "name": "Minor bugs corrected and adding support for automation scripts",
        "release_id": 46755855,
        "tag": "0.1.2-gpu_alpha",
        "tarball_url": "https://api.github.com/repos/ikmb/vcf2prot/tarball/0.1.2-gpu_alpha",
        "type": "Release",
        "url": "https://api.github.com/repos/ikmb/vcf2prot/releases/46755855",
        "value": "https://api.github.com/repos/ikmb/vcf2prot/releases/46755855",
        "zipball_url": "https://api.github.com/repos/ikmb/vcf2prot/zipball/0.1.2-gpu_alpha"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "HeshamElAbd",
          "type": "User"
        },
        "date_created": "2021-07-09T09:55:54Z",
        "date_published": "2021-07-09T10:01:13Z",
        "description": "the alpha version of PPG with GPU code include ",
        "html_url": "https://github.com/ikmb/vcf2prot/releases/tag/0.1.1-gpu_alpha",
        "name": "PPGG, GPU accelerated version ",
        "release_id": 45957860,
        "tag": "0.1.1-gpu_alpha",
        "tarball_url": "https://api.github.com/repos/ikmb/vcf2prot/tarball/0.1.1-gpu_alpha",
        "type": "Release",
        "url": "https://api.github.com/repos/ikmb/vcf2prot/releases/45957860",
        "value": "https://api.github.com/repos/ikmb/vcf2prot/releases/45957860",
        "zipball_url": "https://api.github.com/repos/ikmb/vcf2prot/zipball/0.1.1-gpu_alpha"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "HeshamElAbd",
          "type": "User"
        },
        "date_created": "2021-07-06T15:31:22Z",
        "date_published": "2021-07-06T18:28:11Z",
        "html_url": "https://github.com/ikmb/vcf2prot/releases/tag/0.1.2-alpha",
        "release_id": 45790485,
        "tag": "0.1.2-alpha",
        "tarball_url": "https://api.github.com/repos/ikmb/vcf2prot/tarball/0.1.2-alpha",
        "type": "Release",
        "url": "https://api.github.com/repos/ikmb/vcf2prot/releases/45790485",
        "value": "https://api.github.com/repos/ikmb/vcf2prot/releases/45790485",
        "zipball_url": "https://api.github.com/repos/ikmb/vcf2prot/zipball/0.1.2-alpha"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "HeshamElAbd",
          "type": "User"
        },
        "date_created": "2021-07-06T10:43:05Z",
        "date_published": "2021-07-06T10:48:09Z",
        "html_url": "https://github.com/ikmb/vcf2prot/releases/tag/0.1.1-alpha",
        "release_id": 45762344,
        "tag": "0.1.1-alpha",
        "tarball_url": "https://api.github.com/repos/ikmb/vcf2prot/tarball/0.1.1-alpha",
        "type": "Release",
        "url": "https://api.github.com/repos/ikmb/vcf2prot/releases/45762344",
        "value": "https://api.github.com/repos/ikmb/vcf2prot/releases/45762344",
        "zipball_url": "https://api.github.com/repos/ikmb/vcf2prot/zipball/0.1.1-alpha"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "HeshamElAbd",
          "type": "User"
        },
        "date_created": "2021-06-25T12:43:40Z",
        "date_published": "2021-06-25T12:49:31Z",
        "description": "The complete program is ready for real datasets testing, all features have been implemented ",
        "html_url": "https://github.com/ikmb/vcf2prot/releases/tag/0.1-alpha",
        "release_id": 45233182,
        "tag": "0.1-alpha",
        "tarball_url": "https://api.github.com/repos/ikmb/vcf2prot/tarball/0.1-alpha",
        "type": "Release",
        "url": "https://api.github.com/repos/ikmb/vcf2prot/releases/45233182",
        "value": "https://api.github.com/repos/ikmb/vcf2prot/releases/45233182",
        "zipball_url": "https://api.github.com/repos/ikmb/vcf2prot/zipball/0.1-alpha"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "HeshamElAbd",
          "type": "User"
        },
        "date_created": "2021-06-18T13:42:12Z",
        "date_published": "2021-06-18T13:49:23Z",
        "description": "The pre-alpha version of the tool, functional and ready for testing",
        "html_url": "https://github.com/ikmb/vcf2prot/releases/tag/0.1-pre-alpha",
        "release_id": 44867070,
        "tag": "0.1-pre-alpha",
        "tarball_url": "https://api.github.com/repos/ikmb/vcf2prot/tarball/0.1-pre-alpha",
        "type": "Release",
        "url": "https://api.github.com/repos/ikmb/vcf2prot/releases/44867070",
        "value": "https://api.github.com/repos/ikmb/vcf2prot/releases/44867070",
        "zipball_url": "https://api.github.com/repos/ikmb/vcf2prot/zipball/0.1-pre-alpha"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Input Requirements",
        "parent_header": [
          "VCF2Prot",
          "Execution Logic and Requirements"
        ],
        "type": "Text_excerpt",
        "value": "1. A reference fasta file containing transcript ids as sequence identifiers and the protein sequences of each transcript, for example,\n\n```FASTA\n>TRANS_ID\nTRANS_SEQ_LINE1\nTRANS_SEQ_LINE2 \n>TRANS_ID\nTRANS_SEQ_LINE1\n.\n.\n.\n```\n\n<p> That is, the parser expects every char between > and '\\n' to be the transcript name. Also, make sure that the ids used in the file are the same as in the VCF file. Otherwise, the program will not be able to function properly. </p>\n\n2. A VCF file containing the variants observed in the study population. The VCF file should be generated by  <a href= \"https://academic.oup.com/bioinformatics/article/33/13/2037/3000373\"> BCF/csq </a> as vcf2prot has been optimized to decode it's bit-mask and to parse it's consequence field. The file should also be phased and in a flat-VCF not BCF format.\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Notes",
        "parent_header": [
          "VCF2Prot",
          "Execution Logic and Requirements",
          "Input Requirements"
        ],
        "type": "Text_excerpt",
        "value": "1. The only exception is when the python wrapper is used which work directly with BCF tabix indexed files.\n\n2. You can decode a BCF file into a VCF using the following command:\n\n```bash\nbcftools view PATH_TO_BCF -O v -o PATH_TO_VCF\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "GPU version",
        "parent_header": [
          "VCF2Prot",
          "Execution Logic and Requirements",
          "Hardware Requirements"
        ],
        "type": "Text_excerpt",
        "value": "<p> The GPU version of vcf2prot expects Nvidia-GPU to be accessible on the system. During the development we utilized Tesla V100 SXM2 32GB. </p>\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "CPU version",
        "parent_header": [
          "VCF2Prot",
          "Execution Logic and Requirements",
          "Hardware Requirements"
        ],
        "type": "Text_excerpt",
        "value": "<p> Expects a modern multi-core CPU with a big enough RAM to hold the whole file in memory. During development a compute node with 512 GB of RAM and a twin intel Xeon CPU were used. </p>\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Software Requirements",
        "parent_header": [
          "VCF2Prot",
          "Execution Logic and Requirements"
        ],
        "type": "Text_excerpt",
        "value": "The GPU version of the code can be compiled on a Linux-system with an available NVCC compiler and an Nvidia GPU.\n\nThe CPU version of the code can be compiled on a Linux and Mac OS system with Cargo.\n\nTo ensure a correct code compilation, make sure you are using Rust version 1.65.0 or higher.\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Execution Logic",
        "parent_header": [
          "VCF2Prot",
          "Execution Logic and Requirements"
        ],
        "type": "Text_excerpt",
        "value": "vcf2prot execution logic can be separate into the following main steps:\n\n1. Reading and parsing the input VCF file where the file is read as a UTF-8 encoded string, patients' names are extracted, and records are filtered where only records with a supported protein coding effect are included into the next step. List of alterations supported by the current version can be found at file list_supported_alterations.txt.\n\n2. Once the VCF records have been filtered, bit-masks are decoded and combined with the consequence mutation to generate a hash-table linking each patient to a collection of mutation observed in both of the patients haplotypes.\n\n3. For each patient, mutations are grouped by the transcript id, i.e. all mutations occurring on a specific transcript are combined together.\n\n4. For each collection of mutations, mutations are translated into instructions, at that stage mutations are checked for logical errors, e.g.  Mutational Engulfment, Where one mutation is a subset of another mutation, or Multiple annotations, where for the same position is annotated with more than one mutation. Also semantic-equivalence where two mutations are different at the genetic level but are equivalent at the protein level is taken place leading to a much smaller and a more consistence definition of alterations at the protein-level. In case any logical error was encountered, a waring message is printed to the standard output descriptor and the transcript is filtered out. Finally, instructions are interpreted and a simple representation for the sequence transcript is generated, internally, this is represented as a vector of Tasks.  \n\n5. After encoding each transcript into tasks, all transcripts are concatenated end-to-end to generate a vector of tasks describing the generation of all sequences in the haplotype.\n\n6. Next, a backend engine is used to execute the tasks and generate the sequences. This engine can be a collection of CPU-threads or an execution stream on the GPU.\n\n7. Finally, the generated personalized proteomes are written to the Desk either as a flat FASTA files or in a compressed format.\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Clone the project",
        "parent_header": [
          "VCF2Prot",
          "Execution Logic and Requirements",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```bash\ngit clone https://github.com/ikmb/vcf2prot\n```\n\n<p> Please note that git usually comes  pre-installed on most Mac OS and Linux systems. If git is not available at your system, you can install it from <a href= \"https://git-scm.com/book/en/v2/Getting-Started-Installing-Git\"> here </a>   </p>\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Change directory to the vcf2prot",
        "parent_header": [
          "VCF2Prot",
          "Execution Logic and Requirements",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```bash\ncd vcf2prot \n```\n\n<p> Please notice that after calling git, a directory named vcf2prot in the directory from which git has been called will be available.</p>\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Export Env variables",
        "parent_header": [
          "VCF2Prot",
          "Execution Logic and Requirements",
          "Usage",
          "Change directory to the vcf2prot"
        ],
        "type": "Text_excerpt",
        "value": "<p> Let's  Inspect the SIR on the CPU before execution, instruction's generation and the Task's arrays </p>\n\n```bash\nexport DEBUG_CPU_EXEC=TRUE\nexport INSPECT_TXP=TRUE\nexport INSPECT_INS_GEN=TRUE\n```\n\n<p> for more details about the meaning of the exported variables, check the Environment Variables section below </p>\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Create a new directory to store the results",
        "parent_header": [
          "VCF2Prot",
          "Execution Logic and Requirements",
          "Usage",
          "Change directory to the vcf2prot"
        ],
        "type": "Text_excerpt",
        "value": "```bash\nmkdir results \n```\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Pre-compiled Linux version",
        "parent_header": [
          "VCF2Prot",
          "Execution Logic and Requirements",
          "Usage",
          "Change directory to the vcf2prot",
          "Call vcf2prot with some example data"
        ],
        "type": "Text_excerpt",
        "value": "```bash\n./bins/Linux/vcf2prot -f examples/example.vcf -r examples/reference_sequences.fasta -v -g st -o results\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Pre-compiled MacOS version",
        "parent_header": [
          "VCF2Prot",
          "Execution Logic and Requirements",
          "Usage",
          "Change directory to the vcf2prot",
          "Call vcf2prot with some example data"
        ],
        "type": "Text_excerpt",
        "value": "```bash\n./bins/MacOS/vcf2prot -f examples/example.vcf -r examples/reference_sequences.fasta -v -g st -o results\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Locally-built version",
        "parent_header": [
          "VCF2Prot",
          "Execution Logic and Requirements",
          "Usage",
          "Change directory to the vcf2prot",
          "Call vcf2prot with some example data"
        ],
        "type": "Text_excerpt",
        "value": "```bash\n./target/release/vcf2prot -f examples/example.vcf -r examples/reference_sequences.fasta -v -g st -o results\n```\n\n<p> Where the o flag determines the path to write the FASTA files, and the v for printing log statement. </p>\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Environment Variables ####",
        "parent_header": [
          "VCF2Prot",
          "Execution Logic and Requirements",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "vcf2prot also utilizes environmental variable heavily to customize its behavior, the list of environmental variable utilized by the  vcf2prot is shown below:\n\n1. DEBUG_GPU => the input arrays to the GPU are inspected for indexing error, incase of an indexing error the full input table is printed and the index\nof the row with the first indexing error is also printed to the standard output descriptor.\n\n2. DEBUG_CPU_EXEC => Inspect the vector of tasks provided to the input CPU execution engine, incase of an indexing error the full input table is printed and index\nof the row with the first indexing error is also printed to the standard output descriptor.\n\n3. DEBUG_TXP=\"Transcript_ID\" => This flag exports a transcript id that will be used for debugging, while the IR for the transcript is being created different infos will be logged to the output descriptor.\n\n4. INSPECT_TXP => If set, after each transcript is translated into instruction an inspection function will be called to check the correctness of translation, if the translation failed then the code will panic and error will be printed to the output descriptor.\n\n5. INSPECT_INS_GEN => Inspect the translation process from mutations to instructions, as of version 0.1.3 two logical errors are inspected, first,\n multiple annotations, where more than one mutation are observed at the same position in the protein backbone, or through mutational overlap and engulfment where two mutations overlap in length, for example, insertion at position 60 with 7 amino acids and then a missense mutation at position 64.\n\n6. PANIC_INSPECT_ERR => If set the code will panic if inspecting the translation from mutation to instruction failed. This is an override of the default behavior were an error message is generated and printed to the output stream.\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contributors",
    "documentation",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 00:12:16",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 13
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "VCF2Prot",
          "Execution Logic and Requirements"
        ],
        "type": "Text_excerpt",
        "value": "<p> Two mandatory inputs are needed by the tool, the first is the VCF containing the consequences calling and the second is a FASTA file containing reference sequences. </p>\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Clone the project",
        "parent_header": [
          "VCF2Prot",
          "Execution Logic and Requirements",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```bash\ngit clone https://github.com/ikmb/vcf2prot\n```\n\n<p> Please note that git usually comes  pre-installed on most Mac OS and Linux systems. If git is not available at your system, you can install it from <a href= \"https://git-scm.com/book/en/v2/Getting-Started-Installing-Git\"> here </a>   </p>\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Change directory to the vcf2prot",
        "parent_header": [
          "VCF2Prot",
          "Execution Logic and Requirements",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```bash\ncd vcf2prot \n```\n\n<p> Please notice that after calling git, a directory named vcf2prot in the directory from which git has been called will be available.</p>\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Export Env variables",
        "parent_header": [
          "VCF2Prot",
          "Execution Logic and Requirements",
          "Usage",
          "Change directory to the vcf2prot"
        ],
        "type": "Text_excerpt",
        "value": "<p> Let's  Inspect the SIR on the CPU before execution, instruction's generation and the Task's arrays </p>\n\n```bash\nexport DEBUG_CPU_EXEC=TRUE\nexport INSPECT_TXP=TRUE\nexport INSPECT_INS_GEN=TRUE\n```\n\n<p> for more details about the meaning of the exported variables, check the Environment Variables section below </p>\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Unzipped the example file and reference sequences",
        "parent_header": [
          "VCF2Prot",
          "Execution Logic and Requirements",
          "Usage",
          "Change directory to the vcf2prot"
        ],
        "type": "Text_excerpt",
        "value": "```bash\ngunzip examples/*\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Create a new directory to store the results",
        "parent_header": [
          "VCF2Prot",
          "Execution Logic and Requirements",
          "Usage",
          "Change directory to the vcf2prot"
        ],
        "type": "Text_excerpt",
        "value": "```bash\nmkdir results \n```\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Pre-compiled Linux version",
        "parent_header": [
          "VCF2Prot",
          "Execution Logic and Requirements",
          "Usage",
          "Change directory to the vcf2prot",
          "Call vcf2prot with some example data"
        ],
        "type": "Text_excerpt",
        "value": "```bash\n./bins/Linux/vcf2prot -f examples/example.vcf -r examples/reference_sequences.fasta -v -g st -o results\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Pre-compiled MacOS version",
        "parent_header": [
          "VCF2Prot",
          "Execution Logic and Requirements",
          "Usage",
          "Change directory to the vcf2prot",
          "Call vcf2prot with some example data"
        ],
        "type": "Text_excerpt",
        "value": "```bash\n./bins/MacOS/vcf2prot -f examples/example.vcf -r examples/reference_sequences.fasta -v -g st -o results\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Locally-built version",
        "parent_header": [
          "VCF2Prot",
          "Execution Logic and Requirements",
          "Usage",
          "Change directory to the vcf2prot",
          "Call vcf2prot with some example data"
        ],
        "type": "Text_excerpt",
        "value": "```bash\n./target/release/vcf2prot -f examples/example.vcf -r examples/reference_sequences.fasta -v -g st -o results\n```\n\n<p> Where the o flag determines the path to write the FASTA files, and the v for printing log statement. </p>\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Environment Variables ####",
        "parent_header": [
          "VCF2Prot",
          "Execution Logic and Requirements",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "vcf2prot also utilizes environmental variable heavily to customize its behavior, the list of environmental variable utilized by the  vcf2prot is shown below:\n\n1. DEBUG_GPU => the input arrays to the GPU are inspected for indexing error, incase of an indexing error the full input table is printed and the index\nof the row with the first indexing error is also printed to the standard output descriptor.\n\n2. DEBUG_CPU_EXEC => Inspect the vector of tasks provided to the input CPU execution engine, incase of an indexing error the full input table is printed and index\nof the row with the first indexing error is also printed to the standard output descriptor.\n\n3. DEBUG_TXP=\"Transcript_ID\" => This flag exports a transcript id that will be used for debugging, while the IR for the transcript is being created different infos will be logged to the output descriptor.\n\n4. INSPECT_TXP => If set, after each transcript is translated into instruction an inspection function will be called to check the correctness of translation, if the translation failed then the code will panic and error will be printed to the output descriptor.\n\n5. INSPECT_INS_GEN => Inspect the translation process from mutations to instructions, as of version 0.1.3 two logical errors are inspected, first,\n multiple annotations, where more than one mutation are observed at the same position in the protein backbone, or through mutational overlap and engulfment where two mutations overlap in length, for example, insertion at position 60 with 7 amino acids and then a missense mutation at position 64.\n\n6. PANIC_INSPECT_ERR => If set the code will panic if inspecting the translation from mutation to instruction failed. This is an override of the default behavior were an error message is generated and printed to the output stream.\n"
      },
      "source": "https://raw.githubusercontent.com/ikmb/vcf2prot/cpu_only/README.md",
      "technique": "header_analysis"
    }
  ]
}