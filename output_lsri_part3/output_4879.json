{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citing Ped-sim and related papers",
        "parent_header": [
          "Pedigree Simulator"
        ],
        "type": "Text_excerpt",
        "value": "If you use Ped-sim in your work, please cite [Caballero et al. (2019)](https://journals.plos.org/plosgenetics/article?id=10.1371/journal.pgen.1007979);\nif you use the Refined genetic map (named `refined_mf.simmap` in the example\ncode), please cite [Bh\u00e9rer et al. (2017)](http://dx.doi.org/10.1038/ncomms14994);\nand if you use the `interfere/nu_p_campbell.tsv` interference parameters, please\ncite [Campbell et al. (2015)](https://www.nature.com/articles/ncomms7260).\n\n------------------------------------------------------\n"
      },
      "source": "https://raw.githubusercontent.com/williamslab/ped-sim/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/williamslab/ped-sim"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2017-06-28T02:46:39Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-30T22:08:32Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Pedigree simulator"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9561066526793154,
      "result": {
        "original_header": "Pedigree Simulator",
        "type": "Text_excerpt",
        "value": "Program to simulate pedigree structures. The method can use sex-specific\ngenetic maps and randomly assigns the sex of each parent (or uses user-specified\nsexes) when using such maps.\n \n"
      },
      "source": "https://raw.githubusercontent.com/williamslab/ped-sim/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9677249733769333,
      "result": {
        "original_header": "Recent updates",
        "type": "Text_excerpt",
        "value": "Version 1.3 now supports branch-specific sex assignments in the\n[def file](#def-file). \n"
      },
      "source": "https://raw.githubusercontent.com/williamslab/ped-sim/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8148139275735004,
      "result": {
        "original_header": "Crossover interference model: `--intf &lt;file&gt;`",
        "type": "Text_excerpt",
        "value": "Version 1.2 now supports simulating the X chromosome. See the [map\nfile](#map-file) section for code to generate a map file that includes X\nchromosome positions from the [Bh\u00e9rer et al.\n(2017)](http://dx.doi.org/10.1038/ncomms14994) map. To simulate genetic data\n(i.e., output a VCF file) that includes the X chromosome, [specify sexes of\nthe input VCF using `--sexes`](#specifying-sexes-of-samples-in-the-input-vcf).\nTo change the name Ped-sim considers as the X chromosome [use the `-X`\noption](#x-chromosome-name--x-string). \n"
      },
      "source": "https://raw.githubusercontent.com/williamslab/ped-sim/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9055413646906117,
      "result": {
        "original_header": "Compiling",
        "type": "Text_excerpt",
        "value": "Ped-sim requires **either** the [boost](https://www.boost.org/) developmental\nlibraries _or_ [GSL](https://www.gnu.org/software/gsl/) (see below regarding\nGSL). With one of these libraries in place (and an update to the Makefile for\nGSL), most Linux/Unix-based users should simply be able to compile by running \nOther systems may require editing of the Makefile or alternate means of\ncompiling. \n**GSL**: our analyses suggest that Ped-sim runs a bit faster with GSL (although\nthe component that uses boost/GSL is quite fast regardless). Use the following\nto compile with the GSL library: \n"
      },
      "source": "https://raw.githubusercontent.com/williamslab/ped-sim/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9133163440167869,
      "result": {
        "original_header": "Def file",
        "type": "Text_excerpt",
        "value": "`[name]` gives the name of the pedigree, which must be unique for each pedigree\nstructure in a given simulation run (i.e., a given def file). The simulator\nuses this to generate the simulated individuals' sample ids (details in\n[Sample ids for simulated individuals](#samp-ids)). \n`[#copies]` gives the number of replicate simulations of the given pedigree\nstructure to produce. While the replicates all have the same structure, they\nwill descend from different founders and will have different randomized sex\nassignments (when using sex specific maps and assuming sexes are not assigned),\nand so are independent. \n`[#generations]` indicates the number of generations in the pedigree. \n`<sex of i1>` is an optional field giving the sex (F for female, M for male) of\nthe individual with id `i1` (the reproducing individual) in each branch. See\n[Sample ids for simulated individuals](#samp-ids). \n`[generation#]` gives an integer value for the pedigree generation number. This\nvalue can range from 1 (the earliest generation) to the total number of\ngenerations included in the pedigree, as listed on the first line of the\ndefinition (`[#generations]` just above). \n`[#samples_to_print]` indicates how many samples the simulator should print for\neach branch (see below for a definition of \"branch\") in the indicated\ngeneration; it defaults to 0 so that Ped-sim prints no individuals in\ngenerations not explicitly listed. All individuals in a given branch and given\ngeneration have the same parents and so are full siblings of one another.\nBecause only one member of each branch can have children, setting this to a\nvalue greater than 1 generates data for individuals that do not have any\noffspring. **To simulate a pedigree in which multiple full siblings each have\nchildren, increase the number of branches in the third `<#branches>` field.**\nNote that _founder_ spouses in a branch will be printed if this field is\ngreater than 0. These spouses do not count in the value of this field: the\nfield gives the number of full siblings to generate for each branch. Also note\nthat if a branch contains a founder individual (such as in generation 1), it\nwill only ever contain one individual (and any spouses of that person): the\n`[#samples_to_print]` value only controls whether (if it is greater than 0) or\nnot (if it is 0) Ped-sim prints that founder and his/her spouse(s).\n**Note: it is possible to print the members of specific branches (instead of\nall individuals) in a given generation. See the \"no-print\" branch specification\ndescribed below.** \n`<#branches>` is an optional field. By default: \n* Generation 1 has one branch that contains a founder individual, and\ngeneration 2 has two branches that are both children of the founder individual\nand his/her spouse from generation 1; thus they are full siblings. \n* Other than generations 1 and 2, every generation includes the same number of\nbranches as the previous generation. In consequence, not all generations need\nan explicit listing in the def file. \nFor generation 1, multiple branches are allowed, and all such branches contain\nonly founder individuals. For all other generations, if the\n`branch_specifications` field (described below) is empty, the parents of each\nbranch are as follows: \n* If the number of branches is *an integer multiple* n *times the number of\nbranches in the previous generation*, individuals in branch *i* in the previous\ngeneration are the parents of branches *n\\*(i-1)+1* through *n\\*i* in the\ncurrent generation. (Thus, *if the number of branches is the same*, individuals\nin each branch *i* in the previous generation are the parents of branch *i* in\nthe current generation.) \n* If the number of branches is *less than the number of branches in the\nprevious generation*, individuals in each branch *i* in the previous generation\nare the parents of branch *i* in the current generation. (Thus some branches in\nthe previous generation do not have children.) \n* If the number of branches is *greater than but not divisible by the number of\nbranches in the previous generation*, branches 1 through *n\\*p* have parents\nassigned according to the integer multiple case above; here *p* is the branch\nnumber in the previous generation and *n* is the largest integer divisor by\n*p* of the number of branches in the current generation. The remaining branches\n*n\\*p+1* through *n\\*p+r* contain founder individuals (as in generation 1),\nwhere *r* is the remainder branch number after integer division. \nThe above are defaults, and the parents of a branch can be assigned in the\nbranch specifications. \n`<branch_specifications>` is an optional set of one or more fields containing\n(a) no-print branches, (b) sex assignments, and/or (c) non-default parent\nassignments for a set of branches. By default, all branches have the same\nnumber of individuals printed (given in the `[#samples_to_print]` field), and\nthe sexes are assigned randomly. \nMembers of `[current_branches]` will not be printed. \n**Sex assignments** have two possible formats for males and females,\nrespectively: \nFor example, `2sM` says that branch 2 in the current generation should contain\na male as the `i1` individual and `1,3-5sF` indicates that the `i1` individual\nin branches 1, 3, 4, and 5 should be female. (See just below for more detail on\n`[current_branches]`.) _Note_ these branch-specific sex assignments override\nthe `<sex of i1>` field that appears on the `def` line (see above). \nIn all three cases, `[current_branches]` contains a range of branches from the\ncurrent generation who should either not be printed, should have their sex\nassigned or whose parents are assigned after the `:` character. This can be a\nsingle branch or comma separated list of branches such as `1,2,3` or, for a\ncontiguous range, you can use a hyphen as in `1-3`. Any combination of\ncontiguous ranges and comma separated sets of branches are allowed such as\n`2-5,7,9-10`. \nFor parent assignments: \nIf only `[parent_branch1]` is listed, the reproducing parent (`i1`) from that\nbranch in the previous generation has children with a founder spouse. So for\nexample, `1,7:2` indicates that branches 1 and 7 will be the children of an\nindividual from branch 2 in the previous generation and a founder spouse.\nBecause these branches are listed together, they will contain full siblings.\nTo generate these branches as half-sibling children of branch 2, the\nspecification should be `1:2 7:2`. Here, branch 2 contains the parent of both\nindividuals, but the separate specifications for branches 1 and 7 ensures that\nthat parent has children with two different founder spouses, making the\nchildren in the branches half-siblings. \nIf two parent branches are listed as in `[parent_branch1]_[parent_branch2]`,\nthe two parents are from the indicated branches in the previous generation.\nThus, for example, `2,4:1_3` indicates that branches 2 and 4 from the current\ngeneration are to be the children of the reproducing (`i1`) individuals in\nbranches 1 and 3 in the previous generation. \nTo have parents from different generations, the format is\n`[parent_branch1]_[parent_branch2]^[parent_branch2_generation]`. Here, one\nparent (the first one listed) is required to be in the previous generation and\nthe second parent comes from some other generation. Because the children are in\nthe current generation, the generation of both parents must be earlier than the\ncurrent one. As an example `2:1_3^2` indicates that branch 2 in the current\ngeneration has parents from branch 1 in the previous generation and branch\n3 from generation 2. \n"
      },
      "source": "https://raw.githubusercontent.com/williamslab/ped-sim/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9662592610742388,
      "result": {
        "original_header": "Crossover interference model: `--intf &lt;file&gt;`",
        "type": "Text_excerpt",
        "value": "The simulator keeps track of the constraints on the sex of the parents implied\nby the requested matings and will give an error if it is not possible to assign\nsexes necessary to have offspring. For example, `1:1_3 2:1_4 3:3_4` is\nimpossible since the reproducing individuals in branches 3 and 4 must be the\nsame sex in order to both have children with the individual in branch 1. \n"
      },
      "source": "https://raw.githubusercontent.com/williamslab/ped-sim/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9508114573156924,
      "result": {
        "original_header": "Map file <a name=\"map-file\"></a>",
        "type": "Text_excerpt",
        "value": "The genetic map file contains three columns for a sex-averaged map and four\ncolumns for male and female maps. The format of this file is: \n`[map_position0]` is genetic position in centiMorgans, and should either be the\nsex-averaged genetic position if using only one map, or should be the male\ngenetic position if using two maps. When using only one map, the simulator\nsamples all crossovers from that one map and does not distinguish male and\nfemale parents. \n`<map_position1>` is likewise a genetic position in centiMorgans and should\ncorrespond to the female genetic position if given. \nA high resolution human sex-specific genetic map is available [here](https://github.com/cbherer/Bherer_etal_SexualDimorphismRecombination),\nand is described in [Bh\u00e9rer et al. (2017)](http://dx.doi.org/10.1038/ncomms14994).\nTo generate an autosomal map file in the format the simulator requires with\nboth male and female genetic positions, run the following bash commands:\n```bash\nwget https://github.com/cbherer/Bherer_etal_SexualDimorphismRecombination/raw/master/Refined_genetic_map_b37.tar.gz\ntar xvzf Refined_genetic_map_b37.tar.gz\nprintf \"#chr\\tpos\\tmale_cM\\tfemale_cM\\n\" > refined_mf.simmap\nfor chr in {1..22}; do\n  paste Refined_genetic_map_b37/male_chr$chr.txt Refined_genetic_map_b37/female_chr$chr.txt \\\n    | awk -v OFS=\"\\t\" 'NR > 1 && $2 == $6 {print $1,$2,$4,$8}' \\\n    | sed 's/^chr//' >> refined_mf.simmap;\ndone\n```\n \n**Note:** to output X chromosome data when using an input VCF, [the `--sexes`\noption is required, as described below](#specifying-sexes-of-samples-in-the-input-vcf). \n"
      },
      "source": "https://raw.githubusercontent.com/williamslab/ped-sim/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9785230664773998,
      "result": {
        "original_header": "Input VCF file",
        "type": "Text_excerpt",
        "value": "When genetic data are needed, an input VCF is required to be provided with the\n`-i` option. Given such a VCF, Ped-sim randomly samples individuals from this\ndata and uses them as founders. The VCF must contain phased data for all\nindividuals, with no missing data for any site. As most phasers automatically\nimpute missing data, the latter requirement should be to easy to meet. \nThe input VCF file can be gzipped, and if it is, Ped-sim prints the output VCF\nin gzipped format (but this output VCF is not bgzipped). \n"
      },
      "source": "https://raw.githubusercontent.com/williamslab/ped-sim/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8992692114779373,
      "result": {
        "original_header": "Specifying sexes of samples in the input VCF",
        "type": "Text_excerpt",
        "value": "By default, Ped-sim treats the input samples as asexual, assigns them to\nfounders uniformly at random, and will only output autosomal genotypes. To\neither respect the sexes of the input samples for autosomal data or to\ngenerate output VCF data for the X chromosome, the sexes of the input VCF\nsamples must be specified. Use the `--sexes <file>` option to supply this\ninformation. It should have one line per sample of the form: \nNote that to simulate data on the X chromosome, the genetic map must contain\npositions for the X. \n"
      },
      "source": "https://raw.githubusercontent.com/williamslab/ped-sim/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.938735060101721,
      "result": {
        "original_header": "Crossover model",
        "type": "Text_excerpt",
        "value": "Ped-sim performs simulation from either of two crossover models: one that\nincorporates crossover interference, or a Poisson model. When the necessary\nparameters for crossover interference are available, we recommend using this\nmodel, as it is motivated by biological data and produces quite different\nresults than a Poisson model. The two options for crossover models that Ped-sim\nsupports are below. \nThe `--intf <file>` option simulates from the [Housworth and Stahl (2003)](http://www.cell.com/ajhg/fulltext/S0002-9297%2807%2963904-4)\ncrossover model. This model requires specification of `nu` and `p`\nparameters for each chromosome. The `interference` subdirectory in the\nrepository contains a file `nu_p_campbell.tsv` with estimates of these\nparameters for the human autosomes from [Campbell et al. (2015)](https://www.nature.com/articles/ncomms7260).\nIt also contains `nu_p_campbell_X.tsv` which includes the X chromosome. \nAs with the VCF, the interference file must list chromosomes in the same order\nas the genetic map, and the chromosome names must be identical to the genetic\nmap. The `--intf` file requires parameters to be given for both sexes and\nrequires a genetic map for both males and females. Ped-sim will print an error\nwhen running with `--intf` if the genetic map only has one set of map\npositions. \nThe format of the interference file is: \nThe `[nu_0]` and `[p_0]` parameters correspond to the first genetic map given\n(see [Map file](#map-file)), which is assumed to be male, and the `[nu_1]`\nand `[p_1]` parameters correspond to the second genetic map, which is assumed\nto be female. \nPed-sim generates a list of all simulated IBD segments among relative pairs\nwhenever both samples have been requested to be printed. This file has nine\nfields: \nThe IBD type is one of `IBD1`, `IBD2` or `HBD`. `IBD1` indicates the pair shares\none IBD segment (on one of their two haplotypes) in the interval, and `IBD2`\nindicates the pair shares two segments IBD in the region. `HBD` stands for\nhomozygous by descent, also called a run of homozygosity (ROH), which is a\nregion where an individual is IBD with themselves. The latter only occurs in\nthe presence of inbreeding. \nThe output VCF contains the simulated individuals, including only those samples\nrequested to be printed in the def file. For any generation in which there is a\nrequest to print one or more samples, the simulator prints any spouses in that\ngeneration as well as the primary branch individuals. See below for a\ndescription of the sample ids of the simulated individuals. \nInformation about the simulation run appears in the log file and is a copy of\nwhat is printed to the console during execution. Notably this includes the\nrandom seed used for a given simulation. Supplying the same input files with\nthe same random seed (assignable with the `--seed` option) will produce the\nsame simulation results. \nThe simulated individuals' sample ids have the format\n`[name][#]_g[#]-b[#]-i[#]`, or for spouses of reproducing individuals,\n`[name][#]_g[#]-b[#]-s[#]`. Here, `[name]` is the pedigree name given in the\ndef file. The first number `[#]` is the copy (i.e., replicate) number of the\npedigree which ranges from 1 to the number of copies of the given pedigree\nstructure requested in the def file (i.e., `[#copies]` above). The `g[#]`\nportion of the id gives the generation number of the individual, which ranges\nfrom 1 to the total number of generations in the pedigree. `b[#]` gives the\nbranch number the sample is contained in in the indicated generation; this\nranges from 1 to the total number of branches in that generation. Finally,\n`i[#]` gives the individual number in the given branch and generation. This\nranges from 1 to the total number of samples requested to be simulated in the\ngeneration. Individual `i1` is the reproducing individual that is the parent of\nany descendant branches. When `i1` does have children, his/her founder spouse(s)\nhave the same prefix id but end in `s[#]`, with the number ranging from 1 to\nthe total number of spouses of the `i1` individual. The number of spouses will\nonly be 1 unless parent specifications appear in the def file that indicate more\nfounder spouses should be used. \nBecause the fam file contains all simulated samples, including those that are\nnot requested to be printed, it is for reference only (and to visualize\nstructures with [plot-fam.R](#plotting-pedigree-structures-plot-famr).\n**It should not be used as a replacement for PLINK fam files with PLINK bed,\nbim, and fam data:** use one converted to from the VCF. (Running plink 1.9\nwith `--vcf [out_prefix].vcf --out [out_prefix] --make-bed` generates data\nin PLINK format.) \nThe intended purpose of this option is to visualize the simulated pedigrees\nwith [plot-fam.R](#plotting-pedigree-structures-plot-famr). That script\nproduces a plot for every pedigree in the fam file it is given, and `--dry_run`\nensures that there is only one copy of each pedigree in the fam file Ped-sim\ngenerates regardless of the number of copies specified in the def file. \nWhen using the `--bp` option, Ped-sim prints a break points (BP) file that lists\ncomplete information about each sample's haplotypes. All founders have a unique\nnumerical id for each of their two haplotypes, starting from 0 and ranging to\n2\\**F*-1, where *F* is the total number of founders in all simulated pedigrees.\nWithin the BP file, there are two lines for every sample requested to be printed\n(according to the def file). Each line begins with the sample id (described\nabove) of the simulated individual, the sex of that person, either `s0` for male\nor `s1` for female, the haplotype that line describes, `h0` or `h1`, and then a\nvariable number of segments for each chromosome. \nFor each simulated chromosome, there is starting physical position and one or\nmore break points. The start description is listed as \nThis line describes the haplotypes and break points inherited by an individual\nwith id `grandparent2_g3-b1-i1`. That individual is simulated as male (`s0`),\nand the description is for their first haplotype (`h0`). Only chromosome 22 is\nlisted, and it begins at position `17178586`. Note that the start and end\npositions -- the last break point position on any chromosome -- are dictated by\nthe input genetic map. The first break point `9:25639567` indicates that this\nindividual inherited haplotype 9 from position 17,178,586 through 25,639,567,\ninclusive. The next break point `8:45864504` designates that the individual\ninherited haplotype 8 from position 25,639,568 through 45,864,504. And the final\nbreak point of `6:51039778` says that the individual received haplotype 6 from\nposition 45,864,505 through 51,039,778, the latter of which ends the chromosome. \nWhen simulating with sex-specific maps, it is necessary to include data for all\nchromosomes in one run. This is because sex is assigned randomly, but only once\nper run. Thus, to maintain consistency of the sex of each individual in a\ngiven pedigree (and across chromosomes), all chromosomes need to be included\nin the same run. \nIf you use Ped-sim in your work, please cite [Caballero et al. (2019)](https://journals.plos.org/plosgenetics/article?id=10.1371/journal.pgen.1007979);\nif you use the Refined genetic map (named `refined_mf.simmap` in the example\ncode), please cite [Bh\u00e9rer et al. (2017)](http://dx.doi.org/10.1038/ncomms14994);\nand if you use the `interfere/nu_p_campbell.tsv` interference parameters, please\ncite [Campbell et al. (2015)](https://www.nature.com/articles/ncomms7260). \nThe `--seed <#>` option enables specification of the random seed to be used.\nWithout this option, the simulator generates a random seed using the current\ntime (including microseconds). \nPed-sim ignores any extra fields that follow these four. The first field can\nbe any string (with no white space), and field two must be either `M` or `P`.\nFor a given meiosis, the proband id and the maternal/paternal meiosis type must\nbe the same for each crossover. The simulator randomly assigns crossovers from\na given proband and maternal/paternal type to each meiosis, matching the sex of\nthe parent undergoing meiosis to the maternal/paternal type. It uses all\ncrossovers from a given meiosis except those outside the range of the input\ngenetic map. \n**The crossovers must be sorted,** first by proband id, second by\nmaternal/paternal type (so that all the crossovers from a given meiosis appear\nin succession), third by chromosome name, and last by physical position. As with\nother files, the chromosomes must be listed in the same order as the input VCF\n(or genetic map if not using a VCF), and the chromosome names must also be\nidentical to those other files. \nTo more accurately mimic real data, the simulator introduces genotyping errors\nat a specified rate, defaulting to 1e-3. Set this value to 0 to keep the\nallelic values identical to those in the founder haplotypes (from the input\nVCF). \n### Rate of opposite homozygote errors: `--err_hom_rate <#>` \nSNP array genotype calling works by clustering allele intensities among a set\nof samples. So if an individual is truly homozygous, its intensities are more\nlikely to fall in either the correct cluster or the heterozygous cluster, with\na lower probability of being called homozygous for the opposite allele.  While\nwe are unaware of a study that looks at error rates by \"true\" genotype class in\nSNP array data, the `--err_hom_rate` option provides the ability to produce\ndifferent rates of errors for genotypes that are truly homozygous. The default\nrate for generating an erroneous genotype that is homozygous for the opposite\nalleles relative to the truth is 0, so errors in homozygous genotypes produce a\nheterozygote. If set to, say, .1, whenever Ped-sim is changing a homozygous\ngenotype to an erroneous value, 10% of the time it assigns the genotype as\nhomozygous for the opposite allele, and 90% of the time it uses a heterozygous\ngenotype. For equal rates of both these classes, set the rate for this option\nto .5. Values even as high as .1 are likely to be fairly unrealistic (based on\nsome internal analyses) and so the default rate is 0. \nAs real data includes missingness, the simulator introduces missing genotype\ncalls at a rate specified by this parameter, with a default of 1e-3. Set this\nvalue to 0 for no missing genotypes. \nThe `--pseudo_hap` option generates pseudo-haploid data with mean pseudo-haploid\ncoverage given by the argument (e.g., `--pseudo_hap .1` will randomly select\nsites with data at a rate of .1, and the remaining sites will be missing data).\nSites that do have data are all haploid for random allele sampled from the two\noriginal ones and are coded as homozygous. \nBy default, all chromosomes are simulated as if they are autosomal with the\nexception of the X chromosome. Any input chromosome in the genetic map whose\nname is (by default) 'X' is modeled as an X chromosome within males: they\ninherit only one copy from their mothers and only transmitting their X to their\nfemale offspring. (To prevent recombination, the genetic map file should have\n0.0 length in males, as generated by the [bash code above for a map in humans](#map-file).)\nThe `-X` option allows this name to be changed in case your map and VCF\n(if using) have a different label such as `chrX`. \nPed-sim assigns input samples as founders in the pedigrees it simulates. The\n`--founder_ids` option prints a file called `[out_prefix].ids` that contains\ntwo columns listing each founder sample id followed by the corresponding input\nsample id Ped-sim assigned to that founder. \n**Be mindful of the number of files this will produce:** it generates a pdf for\neach *copy* of all the family structures in the file. Using the Ped-sim\n`--dry_run` option sets the number of copies of each structure to 1 (whereas\n`--fam` produces a `.fam` file with _all_ family copies included). \n    Error in pedigree(dat[sel, 2], dat[sel, 3], dat[sel, 4], dat[sel, 5],  :\n    Invalid code for affected status\n    Execution halted \n"
      },
      "source": "https://raw.githubusercontent.com/williamslab/ped-sim/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9672723304701467,
      "result": {
        "original_header": "Plotting pedigree structures: `plot-fam.R`",
        "type": "Text_excerpt",
        "value": "This is caused by having the 'affected' status be the same for all samples. A\nworkaround is to edit the fam file and set the affected (column 6) status for\nat least one individual to something different, e.g., -9.\n \n"
      },
      "source": "https://raw.githubusercontent.com/williamslab/ped-sim/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9243936891623232,
      "result": {
        "original_header": "Crossover model",
        "type": "Text_excerpt",
        "value": "**Please note:** at present it is not possible to specify the sexes of\nindividuals using `fam2def.py`.\n \n"
      },
      "source": "https://raw.githubusercontent.com/williamslab/ped-sim/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9685325152291837,
      "result": {
        "original_header": "Crossover interference model: `--intf &lt;file&gt;`",
        "type": "Text_excerpt",
        "value": "==================\nProgram to simulate pedigree structures. The method can use sex-specific\ngenetic maps and randomly assigns the sex of each parent (or uses user-specified\nsexes) when using such maps. \nTable of Contents\n-----------------\n   * Pedigree Simulator\n      * [Basic usage](#basic-usage)\n         * [Quick start](#quick-start)\n      * [Compiling](#compiling)\n      * [Def file (with examples)](#def-file)\n      * [Map file](#map-file)\n      * [Input VCF file](#input-vcf-file)\n      * [Specifying sexes of samples in the input VCF](#specifying-sexes-of-samples-in-the-input-vcf)\n      * [Crossover model](#crossover-model)\n      * [Output IBD segments file](#output-ibd-segments-file)\n      * [Output VCF file](#output-vcf-file)\n      * [Output log file](#output-log-file)\n      * [Sample ids for simulated individuals](#samp-ids)\n      * [Output fam file](#output-fam-file)\n      * [Dry run for visualizing pedigrees](#dry-run-for-visualizing-pedigrees)\n      * [Output BP file](#output-bp-file)\n      * [Output MRCA file](#output-mrca-file)\n      * [Extra notes: sex-specific maps](#extra-notes-sex-specific-maps)\n      * [Citing Ped-sim](#citing-ped-sim-and-related-papers)\n      * [Other optional arguments](#other-optional-arguments)\n         * [Specifying random seed](#specifying-random-seed---seed-)\n         * [Using specified crossovers](#using-specified-set-of-crossovers---fixed_co-filename)\n         * [Genotyping error rate](#genotyping-error-rate---err_rate-)\n         * [Rate of opposite homozygote errors](#rate-of-opposite-homozygote-errors---err_hom_rate-)\n         * [Missingness rate](#missingness-rate---miss_rate-)\n         * [Pseudo-haploid rate](#pseudo-haploid-rate---pseudo_hap-)\n         * [X chromosome name](#x-chromosome-name--x-string)\n         * [Maintaining phase in output](#maintaining-phase-in-output---keep_phase)\n         * [Listing input sample ids used as founders](#listing-input-sample-ids-used-as-founders---founder_ids)\n         * [Retaining extra input samples](#retaining-extra-input-samples---retain_extra-)\n   * [Extraneous tools](#extraneous-tools)\n      * [Plotting pedigree structures: plot-fam.R](#plotting-pedigree-structures-plot-famr)\n      * [Converting fam to def file: fam2def.py](#converting-fam-to-def-file-fam2defpy) \n"
      },
      "source": "https://raw.githubusercontent.com/williamslab/ped-sim/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9363119050357952,
      "result": {
        "original_header": "Basic usage:",
        "type": "Text_excerpt",
        "value": "The above both produce a file `[out_prefix].seg` containing IBD segments and\n`[out_prefix].log`, a log of what Ped-sim printed to stdout. \nWith the above input options, Ped-sim does not produce genetic data, but only\nIBD segments for artificial (ungenotyped) relatives. To simulate relatives with\ngenetic data (and using crossover interference modeling), run: \nWhich will generate a third output file, `[out_prefix].vcf` (or\n`[out_prefix].vcf.gz`),\n \nRun `ped-sim` without arguments to see a summary of options. This document\ngives a detailed description of the input and output files and all options. \n"
      },
      "source": "https://raw.githubusercontent.com/williamslab/ped-sim/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9660705729839761,
      "result": {
        "original_header": "Quick start",
        "type": "Text_excerpt",
        "value": "1. Obtain a genetic map. For humans, links and code to generate a sex-specific\nmap in Ped-sim format are [below](#map-file).\n2. Run Ped-sim: \nThis uses the [below](#map-file) genetic map, and [human crossover interference\nparameters](https://www.nature.com/articles/ncomms7260) stored in `interfere/`.\nThe `output.seg` file is the primary result of this run and lists the IBD\nsegments the samples share. This example does not include any input genetic\ndata and so does not produce any output genetic data. \n"
      },
      "source": "https://raw.githubusercontent.com/williamslab/ped-sim/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9535936985652301,
      "result": {
        "original_header": "Example def file: `example/cousins-1st_half_to_3rd.def`",
        "type": "Text_excerpt",
        "value": "The following is a plot of the `full-1cousin` pedigree, with generations\nlabeled and outlined in red, branches labeled and outlined in blue, and `i1`\nindividuals circled in purple (in generations 1 and 2). Only the individuals in\ngeneration 3 are printed, and these individuals' shapes are filled in black;\nnon-printed individuals are unfilled. The sexes of these individuals are\nrandom. (Use the [plot-fam.R](#plotting-pedigree-structures-plot-famr) script\nto generate black and white portions of this plot for your def file.) \nThis definition does not mention generations 1 and 2 (the line that reads\n`3 1` refers to generation 3), so those generations have the default number of\nbranches and do not have data printed for the individuals in them. By default,\ngeneration 1 has one branch that contains one random individual (the `i1`\nindividual) and all spouses of this person. (For this pedigree, the generation\n1 branch contains only one couple.) \nGeneration 2 has the default two branches, with the `i1` individuals in these\nbranches being the children of the branch in generation 1 (strictly speaking,\nof the couple in that branch). This means that the `i1` individuals in these\nbranches are full siblings of each other. \nThe def line `3 1` says that in generation 3, 1 sample per branch should be\nprinted, and it does not specify the number of branches in this generation.\nThis means that generation 3 also has the default branch count, which is\nassigned to be the same as the previous generation, or two branches. These\nbranches contain the children of the `i1` individuals in the corresponding\nbranches in the previous generation, so generation 2, branch 1's child is in\ngeneration 3, branch 1, and generation 2, branch 2's child is in generation 3,\nbranch 2. \nThese pedigrees differ from the first cousin pedigree in their names and\nnumbers of generations: 4 and 5 for second and third cousins, respectively.\nLike the first cousin pedigree, they use the default branch counts for all\ngenerations. This means that generation 1 contains one branch, and all other\ngenerations have two branches. When successive generations have the same number\nof branches, branch _i_ in one generation contains the parents of branch _i_ in\nthe next generation. (So branch 2's parents are in the previous generation's\nbranch 2.) \nThe `4 1` and `5 1` lines specify that one sample per branch should be printed\nin these generations, and lead to the production of the second and third\ncousins as needed. \nThese two-line def entries are perhaps the simplest type and generate pairs of\nfull cousins of any distance (determined by the number of generations). \nThis specifies a pedigree with the name `half-1cousin` with 10 replicate copies\nto be produced and 3 generations in the pedigree. As with the full first cousin\ncase, generation 1 uses the default of one branch. \nThe first part of the generation 2 definition reads `2 0 2`. The 0 indicates\nthat no samples from generation 2 should be printed, and the third column says\nthat this generation has 2 branches. These are in fact the default settings,\nbut must be explicitly listed ahead of the second, non-default part of this\nline. \nThe latter half of the generation 2 definition reads `1:1  2:1`. Here, `1:1`\nsays that the current generation's branch 1 should contain a child of the\nprevious generation's (generation 1's) branch 1. Similarly, `2:1` says that the\ncurrent generation's branch 2 should contain a child of the previous\ngeneration's branch 1. So both branches in generation 2 are children of the\nsame person, but because the specifications are separated, they are children of\ntwo different spouses, so produce half-siblings. In contrast, if this line\nspecified `1,2:1`, the branches would contain full siblings. \nWith the two branches in generation 2 containing half-siblings, the remainder\nof the definition is the same as for full cousins, with `3 1` indicating that\nin generation 3, 1 sample per branch should be printed. This line leaves the\nbranch count as the default, meaning that it has two branches with the default\nparents from the previous generation. \nThe half-second cousin definition is: \n"
      },
      "source": "https://raw.githubusercontent.com/williamslab/ped-sim/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9748601062113117,
      "result": {
        "original_header": "Crossover interference model: `--intf &lt;file&gt;`",
        "type": "Text_excerpt",
        "value": "This has the same behavior in generation 2 as in the `half-1cousin` definition,\nyielding two branches with half-siblings in them. It keeps default behavior for\ngeneration 3, with two branches that descend from generation 2. The `4 1` line\nagain calls the printing of 1 person per branch (with a default of two\nbranches) in generation 4. The printed pair are half-second cousins, as desired. \n"
      },
      "source": "https://raw.githubusercontent.com/williamslab/ped-sim/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9808422686247225,
      "result": {
        "original_header": "Example def file: `example/second_deg.def`",
        "type": "Text_excerpt",
        "value": "This indicates that the founder individual (and therefore his/her spouse) from\nthe branch in generation 1 (note: the default is one branch in generation 1)\nshould have data printed. Generation 2 has a default of two branches, but since\nwe only want one grandchild, we explicitly set this to one branch and do not\nprint individuals from that generation. Generation 3 prints one individual, and\nit has only one branch since unspecified branch numbers are the same as the\nprevious generation and that previous generation (2) has only one branch. \nHere, generation 1 has the default of one branch with no data printed.\nGeneration 2 has two branches that are the full sibling children of the\nfounders in generation 1. The sibling in branch 2 gets printed, but because of\nthe no-print `1n` branch specification, neither member of branch 1 (i.e.,\nthe `i1` individual [who is branch 2's full sibling] and his/her spouse) get\nprinted. Finally, generation 3 has one branch with one individual (the child\nof generation 2's branch 1) that gets printed. Thus, for each replicate\npedigree, the program produces a pair of samples with an avuncular relationship. \nHere, generation 1 has the default of one branch with no data printed.\nGeneration 2 has two branches, and with the parent specification of `1:1 2:1`,\nboth these branches have the reproducing individual from branch 1 as a parent.\nThey are both also children of two distinct founders and are therefore\nhalf-siblings. This prints two individuals per pedigree, one from each of the\nbranches in generation 2. \n"
      },
      "source": "https://raw.githubusercontent.com/williamslab/ped-sim/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9879198928115648,
      "result": {
        "original_header": "Crossover interference model: `--intf &lt;file&gt;`",
        "type": "Text_excerpt",
        "value": "Generation 1 has two branches, both containing founders. Generation 2 has four\nbranches: branches 1 and 2 are full sibling children of generation 1, branch 1;\nbranches 3 and 4 are also full siblings and the children of generation 1,\nbranch 2. In generation 3, there are only 2 branches: branch 1 contains the\nchild of individuals from generation 2, branches 1 and 3; branch 2 contains the\nchild of individuals from generation 2, branches 2 and 4. As the individuals in\nbranches 1 and 2 are full siblings and those in branches 3 and 4 are also full\nsiblings, the third generation samples are \"double cousins.\" Only these\ntwo double cousin individuals from the last generation are printed. \n"
      },
      "source": "https://raw.githubusercontent.com/williamslab/ped-sim/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.943577018404933,
      "result": {
        "original_header": "Example def file: `example/full_half_1st_2nd_cousins.def`",
        "type": "Text_excerpt",
        "value": "Because the first two generations are not explicitly listed, they have the\ndefault number of branches: one and two for generations 1 and 2, respectively.\nSince the number of samples to print is 0 by default, no samples are printed\nfrom these generations. In generation 3, there are four branches, with\ngeneration 2, branch 1 containing the parents of branches 1 and 2, and\ngeneration 2, branch 2 containing the parents of branches 3 and 4. No samples\nfrom generation 3 are printed. Finally, generation 4 has four branches, the\nsame as the previous generation, with one sample printed per branch, or a total\nof four individuals printed. Because the four branches in generation 3 included\ntwo sets of full siblings, two pairs of the four samples in generation 4 are\nfirst cousins. The other pairs are second cousins, and their most recent common\nancestors are in generation 1. \nThe second entry in this file is very similar to the first: \n"
      },
      "source": "https://raw.githubusercontent.com/williamslab/ped-sim/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9734792681912996,
      "result": {
        "original_header": "Crossover interference model: `--intf &lt;file&gt;`",
        "type": "Text_excerpt",
        "value": "The only difference between this pedigree and the one above is in generation 2.\nThis generation once again has two branches, and each branch has the\nreproducing individual from generation 1, branch 1 as one of their parents.\nHowever, because the specification is separated for the two branches and\nincludes only branch number 1, these branches are the offspring of two\ndifferent founder spouses and thus contain half-siblings. In consequence, the\nultimate descendants in generation 4 are a mix of (full) first cousins and\nhalf-second cousins. \nAs in other example pedigrees for cousins, generation two contains two branches\nand these default to having generation 1, branch 1 as their parent branch (and\nthey are therefore full siblings). The sex assignments are the last two fields\non the generation 2 line: `1sF` indicates that the reproducing (`i1`)\nindividual in branch 1 should be female and `2sF` similarly says that\nbranch 2's `i1` individual needs to be female. \nSpecifying sexes of samples in the input VCF\n-------------------------------------------- \n"
      },
      "source": "https://raw.githubusercontent.com/williamslab/ped-sim/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/williamslab/ped-sim/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "faq": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Genotyping error rate: `--err_rate &lt;#&gt;`",
        "parent_header": [
          "Pedigree Simulator",
          "Other optional arguments"
        ],
        "type": "Text_excerpt",
        "value": "==================\nProgram to simulate pedigree structures. The method can use sex-specific\ngenetic maps and randomly assigns the sex of each parent (or uses user-specified\nsexes) when using such maps.\n\nRecent updates\n--------------\n\nVersion 1.4.2 introduces the [`--dry_run`](#dry-run-for-visualizing-pedigrees)\noption.\n\nVersion 1.4 chooses alleles from the first haplotype if males are input with\nheterozygous genotypes. Formerly Ped-sim picked an allele at random, but this\neffectively introduces switch errors into the transmitted haplotypes.\n\nVersion 1.3 now supports branch-specific sex assignments in the\n[def file](#def-file).\n\nVersion 1.2 now supports simulating the X chromosome. See the [map\nfile](#map-file) section for code to generate a map file that includes X\nchromosome positions from the [Bh\u00e9rer et al.\n(2017)](http://dx.doi.org/10.1038/ncomms14994) map. To simulate genetic data\n(i.e., output a VCF file) that includes the X chromosome, [specify sexes of\nthe input VCF using `--sexes`](#specifying-sexes-of-samples-in-the-input-vcf).\nTo change the name Ped-sim considers as the X chromosome [use the `-X`\noption](#x-chromosome-name--x-string).\n\nTable of Contents\n-----------------\n   * Pedigree Simulator\n      * [Basic usage](#basic-usage)\n         * [Quick start](#quick-start)\n      * [Compiling](#compiling)\n      * [Def file (with examples)](#def-file)\n      * [Map file](#map-file)\n      * [Input VCF file](#input-vcf-file)\n      * [Specifying sexes of samples in the input VCF](#specifying-sexes-of-samples-in-the-input-vcf)\n      * [Crossover model](#crossover-model)\n      * [Output IBD segments file](#output-ibd-segments-file)\n      * [Output VCF file](#output-vcf-file)\n      * [Output log file](#output-log-file)\n      * [Sample ids for simulated individuals](#samp-ids)\n      * [Output fam file](#output-fam-file)\n      * [Dry run for visualizing pedigrees](#dry-run-for-visualizing-pedigrees)\n      * [Output BP file](#output-bp-file)\n      * [Output MRCA file](#output-mrca-file)\n      * [Extra notes: sex-specific maps](#extra-notes-sex-specific-maps)\n      * [Citing Ped-sim](#citing-ped-sim-and-related-papers)\n      * [Other optional arguments](#other-optional-arguments)\n         * [Specifying random seed](#specifying-random-seed---seed-)\n         * [Using specified crossovers](#using-specified-set-of-crossovers---fixed_co-filename)\n         * [Genotyping error rate](#genotyping-error-rate---err_rate-)\n         * [Rate of opposite homozygote errors](#rate-of-opposite-homozygote-errors---err_hom_rate-)\n         * [Missingness rate](#missingness-rate---miss_rate-)\n         * [Pseudo-haploid rate](#pseudo-haploid-rate---pseudo_hap-)\n         * [X chromosome name](#x-chromosome-name--x-string)\n         * [Maintaining phase in output](#maintaining-phase-in-output---keep_phase)\n         * [Listing input sample ids used as founders](#listing-input-sample-ids-used-as-founders---founder_ids)\n         * [Retaining extra input samples](#retaining-extra-input-samples---retain_extra-)\n   * [Extraneous tools](#extraneous-tools)\n      * [Plotting pedigree structures: plot-fam.R](#plotting-pedigree-structures-plot-famr)\n      * [Converting fam to def file: fam2def.py](#converting-fam-to-def-file-fam2defpy)\n\n------------------------------------------------------\n\nBasic usage:\n------------\n\n    ./ped-sim -d <in.def> -m <map file> -o <out_prefix> --intf <filename>\n\nTo use a non-interference crossover model, i.e., a Poisson model, use:\n\n    ./ped-sim -d <in.def> -m <map file> -o <out_prefix> --pois\n\nThe above both produce a file `[out_prefix].seg` containing IBD segments and\n`[out_prefix].log`, a log of what Ped-sim printed to stdout.\n\nWith the above input options, Ped-sim does not produce genetic data, but only\nIBD segments for artificial (ungenotyped) relatives. To simulate relatives with\ngenetic data (and using crossover interference modeling), run:\n\n    ./ped-sim -d <in.def> -m <map file> -i <in.vcf/in.vcf.gz> -o <out_prefix> --intf <filename>\n\nWhich will generate a third output file, `[out_prefix].vcf` (or\n`[out_prefix].vcf.gz`),\n \nRun `ped-sim` without arguments to see a summary of options. This document\ngives a detailed description of the input and output files and all options.\n\n \n### Quick start\n\nTo use Ped-sim to simulate from the def file `example/second_deg.def`:\n\n1. Obtain a genetic map. For humans, links and code to generate a sex-specific\nmap in Ped-sim format are [below](#map-file).\n2. Run Ped-sim:\n\n    ./ped-sim -d example/second_deg.def -m refined_mf.simmap \\\n      -o output --intf interfere/nu_p_campbell.tsv\n\nThis uses the [below](#map-file) genetic map, and [human crossover interference\nparameters](https://www.nature.com/articles/ncomms7260) stored in `interfere/`.\nThe `output.seg` file is the primary result of this run and lists the IBD\nsegments the samples share. This example does not include any input genetic\ndata and so does not produce any output genetic data.\n\n------------------------------------------------------\n\nCompiling\n---------\n\nPed-sim requires **either** the [boost](https://www.boost.org/) developmental\nlibraries _or_ [GSL](https://www.gnu.org/software/gsl/) (see below regarding\nGSL). With one of these libraries in place (and an update to the Makefile for\nGSL), most Linux/Unix-based users should simply be able to compile by running\n\n    make\n\nOther systems may require editing of the Makefile or alternate means of\ncompiling.\n\n**GSL**: our analyses suggest that Ped-sim runs a bit faster with GSL (although\nthe component that uses boost/GSL is quite fast regardless). Use the following\nto compile with the GSL library:\n\n    cp Makefile-gsl Makefile\n    make\n\n------------------------------------------------------\n\nDef file\n--------\n\nThe def file defines the pedigree structure(s) to be simulated. Comments are\nallowed on a line by themselves beginning with `#`. Example def files are in the\n`example/` directory, and\n[descriptions of the example files are below](#example-def-file-examplecousins-1st_half_to_3rddef).\n**The specification below is perhaps best for more advanced users. The\nexamples are a good place to start.**\n\nThe first line of a pedigree definition contains four (or five) columns:\n\n    def [name] [#copies] [#generations] <sex of i1>\n\n`[name]` gives the name of the pedigree, which must be unique for each pedigree\nstructure in a given simulation run (i.e., a given def file). The simulator\nuses this to generate the simulated individuals' sample ids (details in\n[Sample ids for simulated individuals](#samp-ids)).\n\n`[#copies]` gives the number of replicate simulations of the given pedigree\nstructure to produce. While the replicates all have the same structure, they\nwill descend from different founders and will have different randomized sex\nassignments (when using sex specific maps and assuming sexes are not assigned),\nand so are independent.\n\n`[#generations]` indicates the number of generations in the pedigree.\n\n`<sex of i1>` is an optional field giving the sex (F for female, M for male) of\nthe individual with id `i1` (the reproducing individual) in each branch. See\n[Sample ids for simulated individuals](#samp-ids).\n\nAfter this first line, the def file lists simulation details corresponding to\nvarious generations in the pedigree. Each such line has the following format:\n\n    [generation#] [#samples_to_print] <#branches> <branch_specifications>\n\n`[generation#]` gives an integer value for the pedigree generation number. This\nvalue can range from 1 (the earliest generation) to the total number of\ngenerations included in the pedigree, as listed on the first line of the\ndefinition (`[#generations]` just above).\n\n`[#samples_to_print]` indicates how many samples the simulator should print for\neach branch (see below for a definition of \"branch\") in the indicated\ngeneration; it defaults to 0 so that Ped-sim prints no individuals in\ngenerations not explicitly listed. All individuals in a given branch and given\ngeneration have the same parents and so are full siblings of one another.\nBecause only one member of each branch can have children, setting this to a\nvalue greater than 1 generates data for individuals that do not have any\noffspring. **To simulate a pedigree in which multiple full siblings each have\nchildren, increase the number of branches in the third `<#branches>` field.**\nNote that _founder_ spouses in a branch will be printed if this field is\ngreater than 0. These spouses do not count in the value of this field: the\nfield gives the number of full siblings to generate for each branch. Also note\nthat if a branch contains a founder individual (such as in generation 1), it\nwill only ever contain one individual (and any spouses of that person): the\n`[#samples_to_print]` value only controls whether (if it is greater than 0) or\nnot (if it is 0) Ped-sim prints that founder and his/her spouse(s).\n**Note: it is possible to print the members of specific branches (instead of\nall individuals) in a given generation. See the \"no-print\" branch specification\ndescribed below.**\n\n`<#branches>` is an optional field. By default:\n\n* Generation 1 has one branch that contains a founder individual, and\ngeneration 2 has two branches that are both children of the founder individual\nand his/her spouse from generation 1; thus they are full siblings.\n\n* Other than generations 1 and 2, every generation includes the same number of\nbranches as the previous generation. In consequence, not all generations need\nan explicit listing in the def file.\n\nFor generation 1, multiple branches are allowed, and all such branches contain\nonly founder individuals. For all other generations, if the\n`branch_specifications` field (described below) is empty, the parents of each\nbranch are as follows:\n\n* If the number of branches is *an integer multiple* n *times the number of\nbranches in the previous generation*, individuals in branch *i* in the previous\ngeneration are the parents of branches *n\\*(i-1)+1* through *n\\*i* in the\ncurrent generation. (Thus, *if the number of branches is the same*, individuals\nin each branch *i* in the previous generation are the parents of branch *i* in\nthe current generation.)\n\n* If the number of branches is *less than the number of branches in the\nprevious generation*, individuals in each branch *i* in the previous generation\nare the parents of branch *i* in the current generation. (Thus some branches in\nthe previous generation do not have children.)\n\n* If the number of branches is *greater than but not divisible by the number of\nbranches in the previous generation*, branches 1 through *n\\*p* have parents\nassigned according to the integer multiple case above; here *p* is the branch\nnumber in the previous generation and *n* is the largest integer divisor by\n*p* of the number of branches in the current generation. The remaining branches\n*n\\*p+1* through *n\\*p+r* contain founder individuals (as in generation 1),\nwhere *r* is the remainder branch number after integer division.\n\nThe above are defaults, and the parents of a branch can be assigned in the\nbranch specifications.\n\n`<branch_specifications>` is an optional set of one or more fields containing\n(a) no-print branches, (b) sex assignments, and/or (c) non-default parent\nassignments for a set of branches. By default, all branches have the same\nnumber of individuals printed (given in the `[#samples_to_print]` field), and\nthe sexes are assigned randomly.\n\n**No-print branches** have the format:\n\n    [current_branches]n\n\nMembers of `[current_branches]` will not be printed.\n\n**Sex assignments** have two possible formats for males and females,\nrespectively:\n\n    [current_branches]sM\n    [current_branches]sF\n\nFor example, `2sM` says that branch 2 in the current generation should contain\na male as the `i1` individual and `1,3-5sF` indicates that the `i1` individual\nin branches 1, 3, 4, and 5 should be female. (See just below for more detail on\n`[current_branches]`.) _Note_ these branch-specific sex assignments override\nthe `<sex of i1>` field that appears on the `def` line (see above).\n\n**Parent assignments** have any of the following formats:\n\n    [current_branches]:\n    [current_branches]:[parent_branch1]\n    [current_branches]:[parent_branch1]_[parent_branch2]\n    [current_branches]:[parent_branch1]_[parent_branch2]^[parent_branch2_generation]\n\nIn all three cases, `[current_branches]` contains a range of branches from the\ncurrent generation who should either not be printed, should have their sex\nassigned or whose parents are assigned after the `:` character. This can be a\nsingle branch or comma separated list of branches such as `1,2,3` or, for a\ncontiguous range, you can use a hyphen as in `1-3`. Any combination of\ncontiguous ranges and comma separated sets of branches are allowed such as\n`2-5,7,9-10`.\n\nFor parent assignments:\n\nIf no text appears after the ':', the indicated branches will contain founder\nindividuals. For example, `1-3,5:` specifies that branches 1 through 3 and 5\nshould contain founders.\n\nIf only `[parent_branch1]` is listed, the reproducing parent (`i1`) from that\nbranch in the previous generation has children with a founder spouse. So for\nexample, `1,7:2` indicates that branches 1 and 7 will be the children of an\nindividual from branch 2 in the previous generation and a founder spouse.\nBecause these branches are listed together, they will contain full siblings.\nTo generate these branches as half-sibling children of branch 2, the\nspecification should be `1:2 7:2`. Here, branch 2 contains the parent of both\nindividuals, but the separate specifications for branches 1 and 7 ensures that\nthat parent has children with two different founder spouses, making the\nchildren in the branches half-siblings.\n\nIf two parent branches are listed as in `[parent_branch1]_[parent_branch2]`,\nthe two parents are from the indicated branches in the previous generation.\nThus, for example, `2,4:1_3` indicates that branches 2 and 4 from the current\ngeneration are to be the children of the reproducing (`i1`) individuals in\nbranches 1 and 3 in the previous generation.\n\nTo have parents from different generations, the format is\n`[parent_branch1]_[parent_branch2]^[parent_branch2_generation]`. Here, one\nparent (the first one listed) is required to be in the previous generation and\nthe second parent comes from some other generation. Because the children are in\nthe current generation, the generation of both parents must be earlier than the\ncurrent one. As an example `2:1_3^2` indicates that branch 2 in the current\ngeneration has parents from branch 1 in the previous generation and branch\n3 from generation 2.\n\nThe simulator keeps track of the constraints on the sex of the parents implied\nby the requested matings and will give an error if it is not possible to assign\nsexes necessary to have offspring. For example, `1:1_3 2:1_4 3:3_4` is\nimpossible since the reproducing individuals in branches 3 and 4 must be the\nsame sex in order to both have children with the individual in branch 1.\n\n### Example def file: `example/cousins-1st_half_to_3rd.def`\n\nThe first def entry in `example/cousins-1st_half_to_3rd.def` is\n\n    def full-1cousin 10 3\n    3 1\n\nThe first line names the pedigree `full-1cousin`, and calls for 10 replicate\npedigrees to be generated. The last column, 3, says that the `full-1cousin`\npedigree spans three generations.\n\nThe following is a plot of the `full-1cousin` pedigree, with generations\nlabeled and outlined in red, branches labeled and outlined in blue, and `i1`\nindividuals circled in purple (in generations 1 and 2). Only the individuals in\ngeneration 3 are printed, and these individuals' shapes are filled in black;\nnon-printed individuals are unfilled. The sexes of these individuals are\nrandom. (Use the [plot-fam.R](#plotting-pedigree-structures-plot-famr) script\nto generate black and white portions of this plot for your def file.)\n\n![Pedigree plot of full-1cousin](example/full-1cousin1.png?raw=true \"Pedigree plot of full-1cousin\")\n\nThis definition does not mention generations 1 and 2 (the line that reads\n`3 1` refers to generation 3), so those generations have the default number of\nbranches and do not have data printed for the individuals in them. By default,\ngeneration 1 has one branch that contains one random individual (the `i1`\nindividual) and all spouses of this person. (For this pedigree, the generation\n1 branch contains only one couple.)\n\nGeneration 2 has the default two branches, with the `i1` individuals in these\nbranches being the children of the branch in generation 1 (strictly speaking,\nof the couple in that branch). This means that the `i1` individuals in these\nbranches are full siblings of each other.\n\nThe def line `3 1` says that in generation 3, 1 sample per branch should be\nprinted, and it does not specify the number of branches in this generation.\nThis means that generation 3 also has the default branch count, which is\nassigned to be the same as the previous generation, or two branches. These\nbranches contain the children of the `i1` individuals in the corresponding\nbranches in the previous generation, so generation 2, branch 1's child is in\ngeneration 3, branch 1, and generation 2, branch 2's child is in generation 3,\nbranch 2.\n\nThis completes the definition of the pedigree, which will print a pair of\nfirst cousins.\n\nThe next two definitions are for second and third cousins:\n\n    def full-2cousin 10 4\n    4 1\n    \n    def full-3cousin 10 5\n    5 1\n\nThese pedigrees differ from the first cousin pedigree in their names and\nnumbers of generations: 4 and 5 for second and third cousins, respectively.\nLike the first cousin pedigree, they use the default branch counts for all\ngenerations. This means that generation 1 contains one branch, and all other\ngenerations have two branches. When successive generations have the same number\nof branches, branch _i_ in one generation contains the parents of branch _i_ in\nthe next generation. (So branch 2's parents are in the previous generation's\nbranch 2.)\n\nThe `4 1` and `5 1` lines specify that one sample per branch should be printed\nin these generations, and lead to the production of the second and third\ncousins as needed.\n\nThese two-line def entries are perhaps the simplest type and generate pairs of\nfull cousins of any distance (determined by the number of generations).\n\nPed-sim also generates half-cousins, and the def file contains two more entries\nfor printing half-first and half-second cousins. These involve a few more\ninstructions:\n\n    def half-1cousin 10 3\n    2 0 2   1:1  2:1\n    3 1\n\nThis specifies a pedigree with the name `half-1cousin` with 10 replicate copies\nto be produced and 3 generations in the pedigree. As with the full first cousin\ncase, generation 1 uses the default of one branch.\n\nThe first part of the generation 2 definition reads `2 0 2`. The 0 indicates\nthat no samples from generation 2 should be printed, and the third column says\nthat this generation has 2 branches. These are in fact the default settings,\nbut must be explicitly listed ahead of the second, non-default part of this\nline.\n\nThe latter half of the generation 2 definition reads `1:1  2:1`. Here, `1:1`\nsays that the current generation's branch 1 should contain a child of the\nprevious generation's (generation 1's) branch 1. Similarly, `2:1` says that the\ncurrent generation's branch 2 should contain a child of the previous\ngeneration's branch 1. So both branches in generation 2 are children of the\nsame person, but because the specifications are separated, they are children of\ntwo different spouses, so produce half-siblings. In contrast, if this line\nspecified `1,2:1`, the branches would contain full siblings.\n\nWith the two branches in generation 2 containing half-siblings, the remainder\nof the definition is the same as for full cousins, with `3 1` indicating that\nin generation 3, 1 sample per branch should be printed. This line leaves the\nbranch count as the default, meaning that it has two branches with the default\nparents from the previous generation.\n\nThe half-second cousin definition is:\n\n    def half-2cousin 10 4\n    2 0 2   1:1  2:1\n    4 1\n\nThis has the same behavior in generation 2 as in the `half-1cousin` definition,\nyielding two branches with half-siblings in them. It keeps default behavior for\ngeneration 3, with two branches that descend from generation 2. The `4 1` line\nagain calls the printing of 1 person per branch (with a default of two\nbranches) in generation 4. The printed pair are half-second cousins, as desired.\n\n### Example def file: `example/second_deg.def`\n\nThe first entry in the `example/second_deg.def` file simulates 10 pedigrees\nnamed `grandparent`, with data printed for two grandparents and one grandchild.\n\n    def grandparent 10 3\n    1 1\n    2 0 1\n    3 1\n\nThis indicates that the founder individual (and therefore his/her spouse) from\nthe branch in generation 1 (note: the default is one branch in generation 1)\nshould have data printed. Generation 2 has a default of two branches, but since\nwe only want one grandchild, we explicitly set this to one branch and do not\nprint individuals from that generation. Generation 3 prints one individual, and\nit has only one branch since unspecified branch numbers are the same as the\nprevious generation and that previous generation (2) has only one branch.\n\nThe second entry simulates 10 pedigrees named `avuncular`:\n\n    def avuncular 10 3\n    2 1 2  1n\n    3 1 1\n\nHere, generation 1 has the default of one branch with no data printed.\nGeneration 2 has two branches that are the full sibling children of the\nfounders in generation 1. The sibling in branch 2 gets printed, but because of\nthe no-print `1n` branch specification, neither member of branch 1 (i.e.,\nthe `i1` individual [who is branch 2's full sibling] and his/her spouse) get\nprinted. Finally, generation 3 has one branch with one individual (the child\nof generation 2's branch 1) that gets printed. Thus, for each replicate\npedigree, the program produces a pair of samples with an avuncular relationship.\n\nThe third entry simulates 10 pedigrees named `hs` for half-sibling:\n\n    def hs 10 2\n    2 1 2 1:1 2:1\n\nHere, generation 1 has the default of one branch with no data printed.\nGeneration 2 has two branches, and with the parent specification of `1:1 2:1`,\nboth these branches have the reproducing individual from branch 1 as a parent.\nThey are both also children of two distinct founders and are therefore\nhalf-siblings. This prints two individuals per pedigree, one from each of the\nbranches in generation 2.\n\nThe last entry simulates 10 pedigrees named `dc` for double cousins:\n\n    def dc 10 3\n    1 0 2\n    2 0 4\n    3 1 2  1:1_3  2:2_4\n\nGeneration 1 has two branches, both containing founders. Generation 2 has four\nbranches: branches 1 and 2 are full sibling children of generation 1, branch 1;\nbranches 3 and 4 are also full siblings and the children of generation 1,\nbranch 2. In generation 3, there are only 2 branches: branch 1 contains the\nchild of individuals from generation 2, branches 1 and 3; branch 2 contains the\nchild of individuals from generation 2, branches 2 and 4. As the individuals in\nbranches 1 and 2 are full siblings and those in branches 3 and 4 are also full\nsiblings, the third generation samples are \"double cousins.\" Only these\ntwo double cousin individuals from the last generation are printed.\n\n### Example def file: `example/full_half_1st_2nd_cousins.def`\n\nThe first entry in the `example/full_half_1st_2nd_cousin.def` file simulates\na single pedigree that has four generations:\n\n    def full1-2-cous 1 4\n    3 0 4\n    4 1\n\nBecause the first two generations are not explicitly listed, they have the\ndefault number of branches: one and two for generations 1 and 2, respectively.\nSince the number of samples to print is 0 by default, no samples are printed\nfrom these generations. In generation 3, there are four branches, with\ngeneration 2, branch 1 containing the parents of branches 1 and 2, and\ngeneration 2, branch 2 containing the parents of branches 3 and 4. No samples\nfrom generation 3 are printed. Finally, generation 4 has four branches, the\nsame as the previous generation, with one sample printed per branch, or a total\nof four individuals printed. Because the four branches in generation 3 included\ntwo sets of full siblings, two pairs of the four samples in generation 4 are\nfirst cousins. The other pairs are second cousins, and their most recent common\nancestors are in generation 1.\n\nThe second entry in this file is very similar to the first:\n\n    def half1-2-cous 1 4\n    2 0 2 1:1 2:1\n    3 0 4\n    4 1\n\nThe only difference between this pedigree and the one above is in generation 2.\nThis generation once again has two branches, and each branch has the\nreproducing individual from generation 1, branch 1 as one of their parents.\nHowever, because the specification is separated for the two branches and\nincludes only branch number 1, these branches are the offspring of two\ndifferent founder spouses and thus contain half-siblings. In consequence, the\nultimate descendants in generation 4 are a mix of (full) first cousins and\nhalf-second cousins.\n\n### Example def file: `example/cousins-parent-sex-assign.def`\n\nExample pedigrees with sex assignments are in\n`example/cousins-parent-sex-assign.def`, which includes the three possible ways\nthat full first cousins can be related: through two brothers, two sisters, or a\nsister and brother. Taking the second definition as an example:\n\n    def sis-1cousin 10 3\n    2 0 2  1sF  2sF\n    3 1\n\nAs in other example pedigrees for cousins, generation two contains two branches\nand these default to having generation 1, branch 1 as their parent branch (and\nthey are therefore full siblings). The sex assignments are the last two fields\non the generation 2 line: `1sF` indicates that the reproducing (`i1`)\nindividual in branch 1 should be female and `2sF` similarly says that\nbranch 2's `i1` individual needs to be female.\n\n### Other example def files\n\nThe `example/once-removed.def` def file includes three pedigrees that make use\nof the `no-print` branch specification in order to print relative pairs from\ndifferent generations (including first cousins once removed).\n\n------------------------------------------------------\n\nMap file <a name=\"map-file\"></a>\n--------\n\nThe genetic map file contains three columns for a sex-averaged map and four\ncolumns for male and female maps. The format of this file is:\n\n    [chromosome] [physical_position] [map_position0] <map_position1>\n\nThe chromosomes are expected to be listed in the same order as they are in\nany input VCF file, with the physical positions in increasing order. The\nchromosome names must also match the names in the input VCF file, and \n_all_ chromosome names present in the map must also have corresponding\nrecords in the VCF.\n\n`[map_position0]` is genetic position in centiMorgans, and should either be the\nsex-averaged genetic position if using only one map, or should be the male\ngenetic position if using two maps. When using only one map, the simulator\nsamples all crossovers from that one map and does not distinguish male and\nfemale parents.\n\n`<map_position1>` is likewise a genetic position in centiMorgans and should\ncorrespond to the female genetic position if given.\n\nA high resolution human sex-specific genetic map is available [here](https://github.com/cbherer/Bherer_etal_SexualDimorphismRecombination),\nand is described in [Bh\u00e9rer et al. (2017)](http://dx.doi.org/10.1038/ncomms14994).\nTo generate an autosomal map file in the format the simulator requires with\nboth male and female genetic positions, run the following bash commands:\n\n```bash\nwget https://github.com/cbherer/Bherer_etal_SexualDimorphismRecombination/raw/master/Refined_genetic_map_b37.tar.gz\ntar xvzf Refined_genetic_map_b37.tar.gz\nprintf \"#chr\\tpos\\tmale_cM\\tfemale_cM\\n\" > refined_mf.simmap\nfor chr in {1..22}; do\n  paste Refined_genetic_map_b37/male_chr$chr.txt Refined_genetic_map_b37/female_chr$chr.txt \\\n    | awk -v OFS=\"\\t\" 'NR > 1 && $2 == $6 {print $1,$2,$4,$8}' \\\n    | sed 's/^chr//' >> refined_mf.simmap;\ndone\n```\n\nThis generates a file called `refined_mf.simmap` that can be passed to the\nsimulator.\n\nTo include the X chromosome from the Bh\u00e9rer et al. map, run the above plus\nthe following commands (to retain both maps, change the first command to `cp`\ninstead of `mv`):\n\n```bash\nmv refined_mf.simmap refined_mf_X.simmap\nawk 'NR > 1 { print $1,$2,\"0.0\",$4 }' Refined_genetic_map_b37/female_chrX.txt \\\n    | sed 's/^chr//' >> refined_mf_X.simmap\n```\n\nThis produces a file called `refined_mf_X.simmap`. If simulating with\ninterference the `interfere/nu_p_campbell_X.tsv` file includes parameters for\nthe X chromosome.\n\n**Note:** to output X chromosome data when using an input VCF, [the `--sexes`\noption is required, as described below](#specifying-sexes-of-samples-in-the-input-vcf).\n\n------------------------------------------------------\n\nInput VCF file\n--------------\n\nWhen genetic data are needed, an input VCF is required to be provided with the\n`-i` option. Given such a VCF, Ped-sim randomly samples individuals from this\ndata and uses them as founders. The VCF must contain phased data for all\nindividuals, with no missing data for any site. As most phasers automatically\nimpute missing data, the latter requirement should be to easy to meet.\n\nThe input VCF file can be gzipped, and if it is, Ped-sim prints the output VCF\nin gzipped format (but this output VCF is not bgzipped).\n\n------------------------------------------------------\n\nSpecifying sexes of samples in the input VCF\n--------------------------------------------\n\nBy default, Ped-sim treats the input samples as asexual, assigns them to\nfounders uniformly at random, and will only output autosomal genotypes. To\neither respect the sexes of the input samples for autosomal data or to\ngenerate output VCF data for the X chromosome, the sexes of the input VCF\nsamples must be specified. Use the `--sexes <file>` option to supply this\ninformation. It should have one line per sample of the form:\n\n    [sample id] [sex (M/F)]\n\nNote that to simulate data on the X chromosome, the genetic map must contain\npositions for the X.\n\n------------------------------------------------------\n\nCrossover model\n---------------\n\nPed-sim performs simulation from either of two crossover models: one that\nincorporates crossover interference, or a Poisson model. When the necessary\nparameters for crossover interference are available, we recommend using this\nmodel, as it is motivated by biological data and produces quite different\nresults than a Poisson model. The two options for crossover models that Ped-sim\nsupports are below.\n\n### Crossover interference model: `--intf <file>`\n\nThe `--intf <file>` option simulates from the [Housworth and Stahl (2003)](http://www.cell.com/ajhg/fulltext/S0002-9297%2807%2963904-4)\ncrossover model. This model requires specification of `nu` and `p`\nparameters for each chromosome. The `interference` subdirectory in the\nrepository contains a file `nu_p_campbell.tsv` with estimates of these\nparameters for the human autosomes from [Campbell et al. (2015)](https://www.nature.com/articles/ncomms7260).\nIt also contains `nu_p_campbell_X.tsv` which includes the X chromosome.\n\nAs with the VCF, the interference file must list chromosomes in the same order\nas the genetic map, and the chromosome names must be identical to the genetic\nmap. The `--intf` file requires parameters to be given for both sexes and\nrequires a genetic map for both males and females. Ped-sim will print an error\nwhen running with `--intf` if the genetic map only has one set of map\npositions.\n\nThe format of the interference file is:\n\n    [chromosome] [nu_0] [p_0] [nu_1] [p_1]\n\nThe `[nu_0]` and `[p_0]` parameters correspond to the first genetic map given\n(see [Map file](#map-file)), which is assumed to be male, and the `[nu_1]`\nand `[p_1]` parameters correspond to the second genetic map, which is assumed\nto be female.\n\n### Poisson crossover model: `--pois`\n\nUse the `--pois` option to simulate using a Poisson crossover model.\n\n------------------------------------------------------\n\nOutput IBD segments file\n------------------------\n\nPed-sim generates a list of all simulated IBD segments among relative pairs\nwhenever both samples have been requested to be printed. This file has nine\nfields:\n\n    [sample 1] [sample 2] [chromosome] [physical position start] [physical position end] [IBD type] [genetic position start] [genetic position end] [genetic length (end - start)]\n\nThe IBD type is one of `IBD1`, `IBD2` or `HBD`. `IBD1` indicates the pair shares\none IBD segment (on one of their two haplotypes) in the interval, and `IBD2`\nindicates the pair shares two segments IBD in the region. `HBD` stands for\nhomozygous by descent, also called a run of homozygosity (ROH), which is a\nregion where an individual is IBD with themselves. The latter only occurs in\nthe presence of inbreeding.\n\n------------------------------------------------------\n\nOutput VCF file\n---------------\n\nThe output VCF contains the simulated individuals, including only those samples\nrequested to be printed in the def file. For any generation in which there is a\nrequest to print one or more samples, the simulator prints any spouses in that\ngeneration as well as the primary branch individuals. See below for a\ndescription of the sample ids of the simulated individuals.\n\nBy default, the output VCF file is gzipped (Note: **not** bgzip'd) if the input\nis gzipped. To make the output non-gzipped, use `--nogz`.\n\n------------------------------------------------------\n\nOutput log file\n---------------\n\nInformation about the simulation run appears in the log file and is a copy of\nwhat is printed to the console during execution. Notably this includes the\nrandom seed used for a given simulation. Supplying the same input files with\nthe same random seed (assignable with the `--seed` option) will produce the\nsame simulation results.\n\n------------------------------------------------------\n\nSample ids for simulated individuals <a name=\"samp-ids\"></a>\n------------------------------------\n\nThe simulated individuals' sample ids have the format\n`[name][#]_g[#]-b[#]-i[#]`, or for spouses of reproducing individuals,\n`[name][#]_g[#]-b[#]-s[#]`. Here, `[name]` is the pedigree name given in the\ndef file. The first number `[#]` is the copy (i.e., replicate) number of the\npedigree which ranges from 1 to the number of copies of the given pedigree\nstructure requested in the def file (i.e., `[#copies]` above). The `g[#]`\nportion of the id gives the generation number of the individual, which ranges\nfrom 1 to the total number of generations in the pedigree. `b[#]` gives the\nbranch number the sample is contained in in the indicated generation; this\nranges from 1 to the total number of branches in that generation. Finally,\n`i[#]` gives the individual number in the given branch and generation. This\nranges from 1 to the total number of samples requested to be simulated in the\ngeneration. Individual `i1` is the reproducing individual that is the parent of\nany descendant branches. When `i1` does have children, his/her founder spouse(s)\nhave the same prefix id but end in `s[#]`, with the number ranging from 1 to\nthe total number of spouses of the `i1` individual. The number of spouses will\nonly be 1 unless parent specifications appear in the def file that indicate more\nfounder spouses should be used.\n\n------------------------------------------------------\n\nOutput fam file\n---------------\n\nWhen using the `--fam` (or `--dry_run`) option, the simulator produces a PLINK\nformat fam file called `[out_prefix]-everyone.fam` with the simulated pedigree\nstructures. This fam file contains **all** generated samples, including those\nthat are not requested to be printed in the def file. This enables the\nrelationships between all samples to be determined from the fam file alone.\n\nBecause the fam file contains all simulated samples, including those that are\nnot requested to be printed, it is for reference only (and to visualize\nstructures with [plot-fam.R](#plotting-pedigree-structures-plot-famr).\n**It should not be used as a replacement for PLINK fam files with PLINK bed,\nbim, and fam data:** use one converted to from the VCF. (Running plink 1.9\nwith `--vcf [out_prefix].vcf --out [out_prefix] --make-bed` generates data\nin PLINK format.)\n\n------------------------------------------------------\n\nDry run for visualizing pedigrees\n---------------------------------\n\nThe `--dry_run` option does several things:\n1. Enables `--fam`.\n2. Only produces one replicate copy of each pedigree.\n3. Disables all other outputs regardless of the options given to Ped-sim\n(so Ped-sim will _not_ print IBD segments, a VCF, BP file, or an MRCA file).\n\nThe intended purpose of this option is to visualize the simulated pedigrees\nwith [plot-fam.R](#plotting-pedigree-structures-plot-famr). That script\nproduces a plot for every pedigree in the fam file it is given, and `--dry_run`\nensures that there is only one copy of each pedigree in the fam file Ped-sim\ngenerates regardless of the number of copies specified in the def file.\n\n------------------------------------------------------\n\nOutput BP file\n--------------\n\nWhen using the `--bp` option, Ped-sim prints a break points (BP) file that lists\ncomplete information about each sample's haplotypes. All founders have a unique\nnumerical id for each of their two haplotypes, starting from 0 and ranging to\n2\\**F*-1, where *F* is the total number of founders in all simulated pedigrees.\nWithin the BP file, there are two lines for every sample requested to be printed\n(according to the def file). Each line begins with the sample id (described\nabove) of the simulated individual, the sex of that person, either `s0` for male\nor `s1` for female, the haplotype that line describes, `h0` or `h1`, and then a\nvariable number of segments for each chromosome.\n\nFor each simulated chromosome, there is starting physical position and one or\nmore break points. The start description is listed as\n\n    [chromosome]|[start physical position]\n\nFollowing this, break points where crossovers occurred are indicated as\n\n    [founder haplotype]:[physical position]\n\nThe range of physical positions between the previous break point (or start\nphysical position for the first segment) descend from `[founder haplotype]`\nnumber. For example, consider:\n\n    grandparent2_g3-b1-i1 s0 h0 22|17178586 9:25639567 8:45864504 6:51039778\n\nThis line describes the haplotypes and break points inherited by an individual\nwith id `grandparent2_g3-b1-i1`. That individual is simulated as male (`s0`),\nand the description is for their first haplotype (`h0`). Only chromosome 22 is\nlisted, and it begins at position `17178586`. Note that the start and end\npositions -- the last break point position on any chromosome -- are dictated by\nthe input genetic map. The first break point `9:25639567` indicates that this\nindividual inherited haplotype 9 from position 17,178,586 through 25,639,567,\ninclusive. The next break point `8:45864504` designates that the individual\ninherited haplotype 8 from position 25,639,568 through 45,864,504. And the final\nbreak point of `6:51039778` says that the individual received haplotype 6 from\nposition 45,864,505 through 51,039,778, the latter of which ends the chromosome.\n\n------------------------------------------------------\n\nOutput MRCA file\n----------------\n\nWith the `--mrca` option, Ped-sim prints a file with the id of the founder in\nwhich every IBD/HBD segment coalesces in. The file has the same line count as\nthe IBD segment file, with entries in each file corresponding to each other.\n\n**Note:** this _may_ lead to more IBD segments being printed. When printing\nsegments, Ped-sim merges adjacent segments, but with `--mrca` this merging\nonly takes place if the adjacent segments descend from the same founder.\n\n------------------------------------------------------\n\nExtra notes: sex-specific maps\n------------------------------\n\nWhen simulating with sex-specific maps, it is necessary to include data for all\nchromosomes in one run. This is because sex is assigned randomly, but only once\nper run. Thus, to maintain consistency of the sex of each individual in a\ngiven pedigree (and across chromosomes), all chromosomes need to be included\nin the same run.\n\n------------------------------------------------------\n\nCiting Ped-sim and related papers\n---------------------------------\n\nIf you use Ped-sim in your work, please cite [Caballero et al. (2019)](https://journals.plos.org/plosgenetics/article?id=10.1371/journal.pgen.1007979);\nif you use the Refined genetic map (named `refined_mf.simmap` in the example\ncode), please cite [Bh\u00e9rer et al. (2017)](http://dx.doi.org/10.1038/ncomms14994);\nand if you use the `interfere/nu_p_campbell.tsv` interference parameters, please\ncite [Campbell et al. (2015)](https://www.nature.com/articles/ncomms7260).\n\n------------------------------------------------------\n\nOther optional arguments\n------------------------\n\n### Specifying random seed: `--seed <#>`\n\nThe `--seed <#>` option enables specification of the random seed to be used.\nWithout this option, the simulator generates a random seed using the current\ntime (including microseconds).\n\n### Using specified set of crossovers: `--fixed_co <filename>`\n\nThe `--fixed_co <filename>` option simulates from crossovers provided in the\nindicated file, which may be from real crossover data. The format of the file\nis one row per crossover, with the following information on each line:\n\n    [proband id] [maternal or paternal] [chromosome] [crossover physical position]\n\nPed-sim ignores any extra fields that follow these four. The first field can\nbe any string (with no white space), and field two must be either `M` or `P`.\nFor a given meiosis, the proband id and the maternal/paternal meiosis type must\nbe the same for each crossover. The simulator randomly assigns crossovers from\na given proband and maternal/paternal type to each meiosis, matching the sex of\nthe parent undergoing meiosis to the maternal/paternal type. It uses all\ncrossovers from a given meiosis except those outside the range of the input\ngenetic map.\n\n**The crossovers must be sorted,** first by proband id, second by\nmaternal/paternal type (so that all the crossovers from a given meiosis appear\nin succession), third by chromosome name, and last by physical position. As with\nother files, the chromosomes must be listed in the same order as the input VCF\n(or genetic map if not using a VCF), and the chromosome names must also be\nidentical to those other files.\n\n### Genotyping error rate: `--err_rate <#>`\n\nTo more accurately mimic real data, the simulator introduces genotyping errors\nat a specified rate, defaulting to 1e-3. Set this value to 0 to keep the\nallelic values identical to those in the founder haplotypes (from the input\nVCF).\n\n**Note: only pedigree samples have genotyping errors introduced;\n`--retain_extra` samples maintain their original calls**\n\n### Rate of opposite homozygote errors: `--err_hom_rate <#>`\n\nSNP array genotype calling works by clustering allele intensities among a set\nof samples. So if an individual is truly homozygous, its intensities are more\nlikely to fall in either the correct cluster or the heterozygous cluster, with\na lower probability of being called homozygous for the opposite allele.  While\nwe are unaware of a study that looks at error rates by \"true\" genotype class in\nSNP array data, the `--err_hom_rate` option provides the ability to produce\ndifferent rates of errors for genotypes that are truly homozygous. The default\nrate for generating an erroneous genotype that is homozygous for the opposite\nalleles relative to the truth is 0, so errors in homozygous genotypes produce a\nheterozygote. If set to, say, .1, whenever Ped-sim is changing a homozygous\ngenotype to an erroneous value, 10% of the time it assigns the genotype as\nhomozygous for the opposite allele, and 90% of the time it uses a heterozygous\ngenotype. For equal rates of both these classes, set the rate for this option\nto .5. Values even as high as .1 are likely to be fairly unrealistic (based on\nsome internal analyses) and so the default rate is 0.\n\n### Missingness rate: `--miss_rate <#>`\n\nAs real data includes missingness, the simulator introduces missing genotype\ncalls at a rate specified by this parameter, with a default of 1e-3. Set this\nvalue to 0 for no missing genotypes.\n\nPed-sim allows either `--miss_rate` or `--pseudo_hap`, but not both.\n\n**Note: only pedigree samples have sites set to missing; `--retain_extra`\nsamples maintain their original calls**\n\n### Pseudo-haploid rate: `--pseudo_hap <#>`\n\nThe `--pseudo_hap` option generates pseudo-haploid data with mean pseudo-haploid\ncoverage given by the argument (e.g., `--pseudo_hap .1` will randomly select\nsites with data at a rate of .1, and the remaining sites will be missing data).\nSites that do have data are all haploid for random allele sampled from the two\noriginal ones and are coded as homozygous.\n\nPed-sim allows either `--miss_rate` or `--pseudo_hap`, but not both.\n\n**Note: only pedigree samples have sites set to missing or pseudo-haploid;\n`--retain_extra` samples maintain their original calls**\n\n### Maintaining phase in output: `--keep_phase`\n\nBy default the simulator produces a VCF with unphased genotypes. The\n`--keep_phase` option will instead generate a VCF in which the samples are\nphased.\n\n### X chromosome name: `-X <string>`\n\nBy default, all chromosomes are simulated as if they are autosomal with the\nexception of the X chromosome. Any input chromosome in the genetic map whose\nname is (by default) 'X' is modeled as an X chromosome within males: they\ninherit only one copy from their mothers and only transmitting their X to their\nfemale offspring. (To prevent recombination, the genetic map file should have\n0.0 length in males, as generated by the [bash code above for a map in humans](#map-file).)\nThe `-X` option allows this name to be changed in case your map and VCF\n(if using) have a different label such as `chrX`.\n\n### Listing input sample ids used as founders: `--founder_ids`\n\nPed-sim assigns input samples as founders in the pedigrees it simulates. The\n`--founder_ids` option prints a file called `[out_prefix].ids` that contains\ntwo columns listing each founder sample id followed by the corresponding input\nsample id Ped-sim assigned to that founder.\n\n### Retaining extra input samples: `--retain_extra <#>`\n\nThe simulator uses samples from the input VCF as founder individuals and will\nexit if there are too few samples in the VCF to do the simulation. If requested\nusing `--retain_extra`, the program will also print a specified number of input\nsamples that were not used as founders in the simulations. If the number is\nless than 0 (e.g., `--retain_extra -1`), the simulator prints all unused input\nsamples. If the value is greater than 0, say 100, but fewer than this number of\nunused samples exist, the simulator prints all the available samples. When the\nrequested number to print is less than the number available, the simulator\nrandomly selects the samples to print from among all that were not used as\nfounders.\n\n------------------------------------------------------\n\nExtraneous tools\n================\n\nPlotting pedigree structures: `plot-fam.R`\n------------------------------------------\n\nThe `plot-fam.R` script plots the pedigree structures produced by Ped-sim (or\nindeed for any PLINK format fam file). It requires the\n[kinship2](https://cran.r-project.org/web/packages/kinship2/index.html)\nR package and works by running\n\n    ./plot-fam.R [base name]\n\nThis plots all pedigree structures given in the `[base name].fam` file. The\noutput files are named `[base name]-[family id].pdf`, with a file for each\nfamily id (first column) in the fam file. Use either the `--dry_run` or\n`--fam` Ped-sim option to get a `.fam` file.\n\n**Be mindful of the number of files this will produce:** it generates a pdf for\neach *copy* of all the family structures in the file. Using the Ped-sim\n`--dry_run` option sets the number of copies of each structure to 1 (whereas\n`--fam` produces a `.fam` file with _all_ family copies included).\n\n**Known bug:** If the def file calls for all individuals to be printed, the\n`plot-fam.R` script will give the error\n\n    Error in pedigree(dat[sel, 2], dat[sel, 3], dat[sel, 4], dat[sel, 5],  :\n    Invalid code for affected status\n    Execution halted\n\nThis is caused by having the 'affected' status be the same for all samples. A\nworkaround is to edit the fam file and set the affected (column 6) status for\nat least one individual to something different, e.g., -9.\n\nConverting fam to def file: `fam2def.py`\n----------------------------------------\n\nWith thanks to [Sara Mathieson](https://smathieson.sites.haverford.edu/),\nconversion from PLINK fam format to Ped-sim's def format is possible with\n`fam2def.py`. Simply run\n\n    ./fam2def.py -i [filename.fam] -o [out.def]\n\nto convert `[filename.fam]` to `[out.def]`.\n\n**Please note:** at present it is not possible to specify the sexes of\nindividuals using `fam2def.py`.\n"
      },
      "source": "https://raw.githubusercontent.com/williamslab/ped-sim/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Rate of opposite homozygote errors: `--err_hom_rate &lt;#&gt;`",
        "parent_header": [
          "Pedigree Simulator",
          "Other optional arguments"
        ],
        "type": "Text_excerpt",
        "value": "==================\nProgram to simulate pedigree structures. The method can use sex-specific\ngenetic maps and randomly assigns the sex of each parent (or uses user-specified\nsexes) when using such maps.\n\nRecent updates\n--------------\n\nVersion 1.4.2 introduces the [`--dry_run`](#dry-run-for-visualizing-pedigrees)\noption.\n\nVersion 1.4 chooses alleles from the first haplotype if males are input with\nheterozygous genotypes. Formerly Ped-sim picked an allele at random, but this\neffectively introduces switch errors into the transmitted haplotypes.\n\nVersion 1.3 now supports branch-specific sex assignments in the\n[def file](#def-file).\n\nVersion 1.2 now supports simulating the X chromosome. See the [map\nfile](#map-file) section for code to generate a map file that includes X\nchromosome positions from the [Bh\u00e9rer et al.\n(2017)](http://dx.doi.org/10.1038/ncomms14994) map. To simulate genetic data\n(i.e., output a VCF file) that includes the X chromosome, [specify sexes of\nthe input VCF using `--sexes`](#specifying-sexes-of-samples-in-the-input-vcf).\nTo change the name Ped-sim considers as the X chromosome [use the `-X`\noption](#x-chromosome-name--x-string).\n\nTable of Contents\n-----------------\n   * Pedigree Simulator\n      * [Basic usage](#basic-usage)\n         * [Quick start](#quick-start)\n      * [Compiling](#compiling)\n      * [Def file (with examples)](#def-file)\n      * [Map file](#map-file)\n      * [Input VCF file](#input-vcf-file)\n      * [Specifying sexes of samples in the input VCF](#specifying-sexes-of-samples-in-the-input-vcf)\n      * [Crossover model](#crossover-model)\n      * [Output IBD segments file](#output-ibd-segments-file)\n      * [Output VCF file](#output-vcf-file)\n      * [Output log file](#output-log-file)\n      * [Sample ids for simulated individuals](#samp-ids)\n      * [Output fam file](#output-fam-file)\n      * [Dry run for visualizing pedigrees](#dry-run-for-visualizing-pedigrees)\n      * [Output BP file](#output-bp-file)\n      * [Output MRCA file](#output-mrca-file)\n      * [Extra notes: sex-specific maps](#extra-notes-sex-specific-maps)\n      * [Citing Ped-sim](#citing-ped-sim-and-related-papers)\n      * [Other optional arguments](#other-optional-arguments)\n         * [Specifying random seed](#specifying-random-seed---seed-)\n         * [Using specified crossovers](#using-specified-set-of-crossovers---fixed_co-filename)\n         * [Genotyping error rate](#genotyping-error-rate---err_rate-)\n         * [Rate of opposite homozygote errors](#rate-of-opposite-homozygote-errors---err_hom_rate-)\n         * [Missingness rate](#missingness-rate---miss_rate-)\n         * [Pseudo-haploid rate](#pseudo-haploid-rate---pseudo_hap-)\n         * [X chromosome name](#x-chromosome-name--x-string)\n         * [Maintaining phase in output](#maintaining-phase-in-output---keep_phase)\n         * [Listing input sample ids used as founders](#listing-input-sample-ids-used-as-founders---founder_ids)\n         * [Retaining extra input samples](#retaining-extra-input-samples---retain_extra-)\n   * [Extraneous tools](#extraneous-tools)\n      * [Plotting pedigree structures: plot-fam.R](#plotting-pedigree-structures-plot-famr)\n      * [Converting fam to def file: fam2def.py](#converting-fam-to-def-file-fam2defpy)\n\n------------------------------------------------------\n\nBasic usage:\n------------\n\n    ./ped-sim -d <in.def> -m <map file> -o <out_prefix> --intf <filename>\n\nTo use a non-interference crossover model, i.e., a Poisson model, use:\n\n    ./ped-sim -d <in.def> -m <map file> -o <out_prefix> --pois\n\nThe above both produce a file `[out_prefix].seg` containing IBD segments and\n`[out_prefix].log`, a log of what Ped-sim printed to stdout.\n\nWith the above input options, Ped-sim does not produce genetic data, but only\nIBD segments for artificial (ungenotyped) relatives. To simulate relatives with\ngenetic data (and using crossover interference modeling), run:\n\n    ./ped-sim -d <in.def> -m <map file> -i <in.vcf/in.vcf.gz> -o <out_prefix> --intf <filename>\n\nWhich will generate a third output file, `[out_prefix].vcf` (or\n`[out_prefix].vcf.gz`),\n \nRun `ped-sim` without arguments to see a summary of options. This document\ngives a detailed description of the input and output files and all options.\n\n \n### Quick start\n\nTo use Ped-sim to simulate from the def file `example/second_deg.def`:\n\n1. Obtain a genetic map. For humans, links and code to generate a sex-specific\nmap in Ped-sim format are [below](#map-file).\n2. Run Ped-sim:\n\n    ./ped-sim -d example/second_deg.def -m refined_mf.simmap \\\n      -o output --intf interfere/nu_p_campbell.tsv\n\nThis uses the [below](#map-file) genetic map, and [human crossover interference\nparameters](https://www.nature.com/articles/ncomms7260) stored in `interfere/`.\nThe `output.seg` file is the primary result of this run and lists the IBD\nsegments the samples share. This example does not include any input genetic\ndata and so does not produce any output genetic data.\n\n------------------------------------------------------\n\nCompiling\n---------\n\nPed-sim requires **either** the [boost](https://www.boost.org/) developmental\nlibraries _or_ [GSL](https://www.gnu.org/software/gsl/) (see below regarding\nGSL). With one of these libraries in place (and an update to the Makefile for\nGSL), most Linux/Unix-based users should simply be able to compile by running\n\n    make\n\nOther systems may require editing of the Makefile or alternate means of\ncompiling.\n\n**GSL**: our analyses suggest that Ped-sim runs a bit faster with GSL (although\nthe component that uses boost/GSL is quite fast regardless). Use the following\nto compile with the GSL library:\n\n    cp Makefile-gsl Makefile\n    make\n\n------------------------------------------------------\n\nDef file\n--------\n\nThe def file defines the pedigree structure(s) to be simulated. Comments are\nallowed on a line by themselves beginning with `#`. Example def files are in the\n`example/` directory, and\n[descriptions of the example files are below](#example-def-file-examplecousins-1st_half_to_3rddef).\n**The specification below is perhaps best for more advanced users. The\nexamples are a good place to start.**\n\nThe first line of a pedigree definition contains four (or five) columns:\n\n    def [name] [#copies] [#generations] <sex of i1>\n\n`[name]` gives the name of the pedigree, which must be unique for each pedigree\nstructure in a given simulation run (i.e., a given def file). The simulator\nuses this to generate the simulated individuals' sample ids (details in\n[Sample ids for simulated individuals](#samp-ids)).\n\n`[#copies]` gives the number of replicate simulations of the given pedigree\nstructure to produce. While the replicates all have the same structure, they\nwill descend from different founders and will have different randomized sex\nassignments (when using sex specific maps and assuming sexes are not assigned),\nand so are independent.\n\n`[#generations]` indicates the number of generations in the pedigree.\n\n`<sex of i1>` is an optional field giving the sex (F for female, M for male) of\nthe individual with id `i1` (the reproducing individual) in each branch. See\n[Sample ids for simulated individuals](#samp-ids).\n\nAfter this first line, the def file lists simulation details corresponding to\nvarious generations in the pedigree. Each such line has the following format:\n\n    [generation#] [#samples_to_print] <#branches> <branch_specifications>\n\n`[generation#]` gives an integer value for the pedigree generation number. This\nvalue can range from 1 (the earliest generation) to the total number of\ngenerations included in the pedigree, as listed on the first line of the\ndefinition (`[#generations]` just above).\n\n`[#samples_to_print]` indicates how many samples the simulator should print for\neach branch (see below for a definition of \"branch\") in the indicated\ngeneration; it defaults to 0 so that Ped-sim prints no individuals in\ngenerations not explicitly listed. All individuals in a given branch and given\ngeneration have the same parents and so are full siblings of one another.\nBecause only one member of each branch can have children, setting this to a\nvalue greater than 1 generates data for individuals that do not have any\noffspring. **To simulate a pedigree in which multiple full siblings each have\nchildren, increase the number of branches in the third `<#branches>` field.**\nNote that _founder_ spouses in a branch will be printed if this field is\ngreater than 0. These spouses do not count in the value of this field: the\nfield gives the number of full siblings to generate for each branch. Also note\nthat if a branch contains a founder individual (such as in generation 1), it\nwill only ever contain one individual (and any spouses of that person): the\n`[#samples_to_print]` value only controls whether (if it is greater than 0) or\nnot (if it is 0) Ped-sim prints that founder and his/her spouse(s).\n**Note: it is possible to print the members of specific branches (instead of\nall individuals) in a given generation. See the \"no-print\" branch specification\ndescribed below.**\n\n`<#branches>` is an optional field. By default:\n\n* Generation 1 has one branch that contains a founder individual, and\ngeneration 2 has two branches that are both children of the founder individual\nand his/her spouse from generation 1; thus they are full siblings.\n\n* Other than generations 1 and 2, every generation includes the same number of\nbranches as the previous generation. In consequence, not all generations need\nan explicit listing in the def file.\n\nFor generation 1, multiple branches are allowed, and all such branches contain\nonly founder individuals. For all other generations, if the\n`branch_specifications` field (described below) is empty, the parents of each\nbranch are as follows:\n\n* If the number of branches is *an integer multiple* n *times the number of\nbranches in the previous generation*, individuals in branch *i* in the previous\ngeneration are the parents of branches *n\\*(i-1)+1* through *n\\*i* in the\ncurrent generation. (Thus, *if the number of branches is the same*, individuals\nin each branch *i* in the previous generation are the parents of branch *i* in\nthe current generation.)\n\n* If the number of branches is *less than the number of branches in the\nprevious generation*, individuals in each branch *i* in the previous generation\nare the parents of branch *i* in the current generation. (Thus some branches in\nthe previous generation do not have children.)\n\n* If the number of branches is *greater than but not divisible by the number of\nbranches in the previous generation*, branches 1 through *n\\*p* have parents\nassigned according to the integer multiple case above; here *p* is the branch\nnumber in the previous generation and *n* is the largest integer divisor by\n*p* of the number of branches in the current generation. The remaining branches\n*n\\*p+1* through *n\\*p+r* contain founder individuals (as in generation 1),\nwhere *r* is the remainder branch number after integer division.\n\nThe above are defaults, and the parents of a branch can be assigned in the\nbranch specifications.\n\n`<branch_specifications>` is an optional set of one or more fields containing\n(a) no-print branches, (b) sex assignments, and/or (c) non-default parent\nassignments for a set of branches. By default, all branches have the same\nnumber of individuals printed (given in the `[#samples_to_print]` field), and\nthe sexes are assigned randomly.\n\n**No-print branches** have the format:\n\n    [current_branches]n\n\nMembers of `[current_branches]` will not be printed.\n\n**Sex assignments** have two possible formats for males and females,\nrespectively:\n\n    [current_branches]sM\n    [current_branches]sF\n\nFor example, `2sM` says that branch 2 in the current generation should contain\na male as the `i1` individual and `1,3-5sF` indicates that the `i1` individual\nin branches 1, 3, 4, and 5 should be female. (See just below for more detail on\n`[current_branches]`.) _Note_ these branch-specific sex assignments override\nthe `<sex of i1>` field that appears on the `def` line (see above).\n\n**Parent assignments** have any of the following formats:\n\n    [current_branches]:\n    [current_branches]:[parent_branch1]\n    [current_branches]:[parent_branch1]_[parent_branch2]\n    [current_branches]:[parent_branch1]_[parent_branch2]^[parent_branch2_generation]\n\nIn all three cases, `[current_branches]` contains a range of branches from the\ncurrent generation who should either not be printed, should have their sex\nassigned or whose parents are assigned after the `:` character. This can be a\nsingle branch or comma separated list of branches such as `1,2,3` or, for a\ncontiguous range, you can use a hyphen as in `1-3`. Any combination of\ncontiguous ranges and comma separated sets of branches are allowed such as\n`2-5,7,9-10`.\n\nFor parent assignments:\n\nIf no text appears after the ':', the indicated branches will contain founder\nindividuals. For example, `1-3,5:` specifies that branches 1 through 3 and 5\nshould contain founders.\n\nIf only `[parent_branch1]` is listed, the reproducing parent (`i1`) from that\nbranch in the previous generation has children with a founder spouse. So for\nexample, `1,7:2` indicates that branches 1 and 7 will be the children of an\nindividual from branch 2 in the previous generation and a founder spouse.\nBecause these branches are listed together, they will contain full siblings.\nTo generate these branches as half-sibling children of branch 2, the\nspecification should be `1:2 7:2`. Here, branch 2 contains the parent of both\nindividuals, but the separate specifications for branches 1 and 7 ensures that\nthat parent has children with two different founder spouses, making the\nchildren in the branches half-siblings.\n\nIf two parent branches are listed as in `[parent_branch1]_[parent_branch2]`,\nthe two parents are from the indicated branches in the previous generation.\nThus, for example, `2,4:1_3` indicates that branches 2 and 4 from the current\ngeneration are to be the children of the reproducing (`i1`) individuals in\nbranches 1 and 3 in the previous generation.\n\nTo have parents from different generations, the format is\n`[parent_branch1]_[parent_branch2]^[parent_branch2_generation]`. Here, one\nparent (the first one listed) is required to be in the previous generation and\nthe second parent comes from some other generation. Because the children are in\nthe current generation, the generation of both parents must be earlier than the\ncurrent one. As an example `2:1_3^2` indicates that branch 2 in the current\ngeneration has parents from branch 1 in the previous generation and branch\n3 from generation 2.\n\nThe simulator keeps track of the constraints on the sex of the parents implied\nby the requested matings and will give an error if it is not possible to assign\nsexes necessary to have offspring. For example, `1:1_3 2:1_4 3:3_4` is\nimpossible since the reproducing individuals in branches 3 and 4 must be the\nsame sex in order to both have children with the individual in branch 1.\n\n### Example def file: `example/cousins-1st_half_to_3rd.def`\n\nThe first def entry in `example/cousins-1st_half_to_3rd.def` is\n\n    def full-1cousin 10 3\n    3 1\n\nThe first line names the pedigree `full-1cousin`, and calls for 10 replicate\npedigrees to be generated. The last column, 3, says that the `full-1cousin`\npedigree spans three generations.\n\nThe following is a plot of the `full-1cousin` pedigree, with generations\nlabeled and outlined in red, branches labeled and outlined in blue, and `i1`\nindividuals circled in purple (in generations 1 and 2). Only the individuals in\ngeneration 3 are printed, and these individuals' shapes are filled in black;\nnon-printed individuals are unfilled. The sexes of these individuals are\nrandom. (Use the [plot-fam.R](#plotting-pedigree-structures-plot-famr) script\nto generate black and white portions of this plot for your def file.)\n\n![Pedigree plot of full-1cousin](example/full-1cousin1.png?raw=true \"Pedigree plot of full-1cousin\")\n\nThis definition does not mention generations 1 and 2 (the line that reads\n`3 1` refers to generation 3), so those generations have the default number of\nbranches and do not have data printed for the individuals in them. By default,\ngeneration 1 has one branch that contains one random individual (the `i1`\nindividual) and all spouses of this person. (For this pedigree, the generation\n1 branch contains only one couple.)\n\nGeneration 2 has the default two branches, with the `i1` individuals in these\nbranches being the children of the branch in generation 1 (strictly speaking,\nof the couple in that branch). This means that the `i1` individuals in these\nbranches are full siblings of each other.\n\nThe def line `3 1` says that in generation 3, 1 sample per branch should be\nprinted, and it does not specify the number of branches in this generation.\nThis means that generation 3 also has the default branch count, which is\nassigned to be the same as the previous generation, or two branches. These\nbranches contain the children of the `i1` individuals in the corresponding\nbranches in the previous generation, so generation 2, branch 1's child is in\ngeneration 3, branch 1, and generation 2, branch 2's child is in generation 3,\nbranch 2.\n\nThis completes the definition of the pedigree, which will print a pair of\nfirst cousins.\n\nThe next two definitions are for second and third cousins:\n\n    def full-2cousin 10 4\n    4 1\n    \n    def full-3cousin 10 5\n    5 1\n\nThese pedigrees differ from the first cousin pedigree in their names and\nnumbers of generations: 4 and 5 for second and third cousins, respectively.\nLike the first cousin pedigree, they use the default branch counts for all\ngenerations. This means that generation 1 contains one branch, and all other\ngenerations have two branches. When successive generations have the same number\nof branches, branch _i_ in one generation contains the parents of branch _i_ in\nthe next generation. (So branch 2's parents are in the previous generation's\nbranch 2.)\n\nThe `4 1` and `5 1` lines specify that one sample per branch should be printed\nin these generations, and lead to the production of the second and third\ncousins as needed.\n\nThese two-line def entries are perhaps the simplest type and generate pairs of\nfull cousins of any distance (determined by the number of generations).\n\nPed-sim also generates half-cousins, and the def file contains two more entries\nfor printing half-first and half-second cousins. These involve a few more\ninstructions:\n\n    def half-1cousin 10 3\n    2 0 2   1:1  2:1\n    3 1\n\nThis specifies a pedigree with the name `half-1cousin` with 10 replicate copies\nto be produced and 3 generations in the pedigree. As with the full first cousin\ncase, generation 1 uses the default of one branch.\n\nThe first part of the generation 2 definition reads `2 0 2`. The 0 indicates\nthat no samples from generation 2 should be printed, and the third column says\nthat this generation has 2 branches. These are in fact the default settings,\nbut must be explicitly listed ahead of the second, non-default part of this\nline.\n\nThe latter half of the generation 2 definition reads `1:1  2:1`. Here, `1:1`\nsays that the current generation's branch 1 should contain a child of the\nprevious generation's (generation 1's) branch 1. Similarly, `2:1` says that the\ncurrent generation's branch 2 should contain a child of the previous\ngeneration's branch 1. So both branches in generation 2 are children of the\nsame person, but because the specifications are separated, they are children of\ntwo different spouses, so produce half-siblings. In contrast, if this line\nspecified `1,2:1`, the branches would contain full siblings.\n\nWith the two branches in generation 2 containing half-siblings, the remainder\nof the definition is the same as for full cousins, with `3 1` indicating that\nin generation 3, 1 sample per branch should be printed. This line leaves the\nbranch count as the default, meaning that it has two branches with the default\nparents from the previous generation.\n\nThe half-second cousin definition is:\n\n    def half-2cousin 10 4\n    2 0 2   1:1  2:1\n    4 1\n\nThis has the same behavior in generation 2 as in the `half-1cousin` definition,\nyielding two branches with half-siblings in them. It keeps default behavior for\ngeneration 3, with two branches that descend from generation 2. The `4 1` line\nagain calls the printing of 1 person per branch (with a default of two\nbranches) in generation 4. The printed pair are half-second cousins, as desired.\n\n### Example def file: `example/second_deg.def`\n\nThe first entry in the `example/second_deg.def` file simulates 10 pedigrees\nnamed `grandparent`, with data printed for two grandparents and one grandchild.\n\n    def grandparent 10 3\n    1 1\n    2 0 1\n    3 1\n\nThis indicates that the founder individual (and therefore his/her spouse) from\nthe branch in generation 1 (note: the default is one branch in generation 1)\nshould have data printed. Generation 2 has a default of two branches, but since\nwe only want one grandchild, we explicitly set this to one branch and do not\nprint individuals from that generation. Generation 3 prints one individual, and\nit has only one branch since unspecified branch numbers are the same as the\nprevious generation and that previous generation (2) has only one branch.\n\nThe second entry simulates 10 pedigrees named `avuncular`:\n\n    def avuncular 10 3\n    2 1 2  1n\n    3 1 1\n\nHere, generation 1 has the default of one branch with no data printed.\nGeneration 2 has two branches that are the full sibling children of the\nfounders in generation 1. The sibling in branch 2 gets printed, but because of\nthe no-print `1n` branch specification, neither member of branch 1 (i.e.,\nthe `i1` individual [who is branch 2's full sibling] and his/her spouse) get\nprinted. Finally, generation 3 has one branch with one individual (the child\nof generation 2's branch 1) that gets printed. Thus, for each replicate\npedigree, the program produces a pair of samples with an avuncular relationship.\n\nThe third entry simulates 10 pedigrees named `hs` for half-sibling:\n\n    def hs 10 2\n    2 1 2 1:1 2:1\n\nHere, generation 1 has the default of one branch with no data printed.\nGeneration 2 has two branches, and with the parent specification of `1:1 2:1`,\nboth these branches have the reproducing individual from branch 1 as a parent.\nThey are both also children of two distinct founders and are therefore\nhalf-siblings. This prints two individuals per pedigree, one from each of the\nbranches in generation 2.\n\nThe last entry simulates 10 pedigrees named `dc` for double cousins:\n\n    def dc 10 3\n    1 0 2\n    2 0 4\n    3 1 2  1:1_3  2:2_4\n\nGeneration 1 has two branches, both containing founders. Generation 2 has four\nbranches: branches 1 and 2 are full sibling children of generation 1, branch 1;\nbranches 3 and 4 are also full siblings and the children of generation 1,\nbranch 2. In generation 3, there are only 2 branches: branch 1 contains the\nchild of individuals from generation 2, branches 1 and 3; branch 2 contains the\nchild of individuals from generation 2, branches 2 and 4. As the individuals in\nbranches 1 and 2 are full siblings and those in branches 3 and 4 are also full\nsiblings, the third generation samples are \"double cousins.\" Only these\ntwo double cousin individuals from the last generation are printed.\n\n### Example def file: `example/full_half_1st_2nd_cousins.def`\n\nThe first entry in the `example/full_half_1st_2nd_cousin.def` file simulates\na single pedigree that has four generations:\n\n    def full1-2-cous 1 4\n    3 0 4\n    4 1\n\nBecause the first two generations are not explicitly listed, they have the\ndefault number of branches: one and two for generations 1 and 2, respectively.\nSince the number of samples to print is 0 by default, no samples are printed\nfrom these generations. In generation 3, there are four branches, with\ngeneration 2, branch 1 containing the parents of branches 1 and 2, and\ngeneration 2, branch 2 containing the parents of branches 3 and 4. No samples\nfrom generation 3 are printed. Finally, generation 4 has four branches, the\nsame as the previous generation, with one sample printed per branch, or a total\nof four individuals printed. Because the four branches in generation 3 included\ntwo sets of full siblings, two pairs of the four samples in generation 4 are\nfirst cousins. The other pairs are second cousins, and their most recent common\nancestors are in generation 1.\n\nThe second entry in this file is very similar to the first:\n\n    def half1-2-cous 1 4\n    2 0 2 1:1 2:1\n    3 0 4\n    4 1\n\nThe only difference between this pedigree and the one above is in generation 2.\nThis generation once again has two branches, and each branch has the\nreproducing individual from generation 1, branch 1 as one of their parents.\nHowever, because the specification is separated for the two branches and\nincludes only branch number 1, these branches are the offspring of two\ndifferent founder spouses and thus contain half-siblings. In consequence, the\nultimate descendants in generation 4 are a mix of (full) first cousins and\nhalf-second cousins.\n\n### Example def file: `example/cousins-parent-sex-assign.def`\n\nExample pedigrees with sex assignments are in\n`example/cousins-parent-sex-assign.def`, which includes the three possible ways\nthat full first cousins can be related: through two brothers, two sisters, or a\nsister and brother. Taking the second definition as an example:\n\n    def sis-1cousin 10 3\n    2 0 2  1sF  2sF\n    3 1\n\nAs in other example pedigrees for cousins, generation two contains two branches\nand these default to having generation 1, branch 1 as their parent branch (and\nthey are therefore full siblings). The sex assignments are the last two fields\non the generation 2 line: `1sF` indicates that the reproducing (`i1`)\nindividual in branch 1 should be female and `2sF` similarly says that\nbranch 2's `i1` individual needs to be female.\n\n### Other example def files\n\nThe `example/once-removed.def` def file includes three pedigrees that make use\nof the `no-print` branch specification in order to print relative pairs from\ndifferent generations (including first cousins once removed).\n\n------------------------------------------------------\n\nMap file <a name=\"map-file\"></a>\n--------\n\nThe genetic map file contains three columns for a sex-averaged map and four\ncolumns for male and female maps. The format of this file is:\n\n    [chromosome] [physical_position] [map_position0] <map_position1>\n\nThe chromosomes are expected to be listed in the same order as they are in\nany input VCF file, with the physical positions in increasing order. The\nchromosome names must also match the names in the input VCF file, and \n_all_ chromosome names present in the map must also have corresponding\nrecords in the VCF.\n\n`[map_position0]` is genetic position in centiMorgans, and should either be the\nsex-averaged genetic position if using only one map, or should be the male\ngenetic position if using two maps. When using only one map, the simulator\nsamples all crossovers from that one map and does not distinguish male and\nfemale parents.\n\n`<map_position1>` is likewise a genetic position in centiMorgans and should\ncorrespond to the female genetic position if given.\n\nA high resolution human sex-specific genetic map is available [here](https://github.com/cbherer/Bherer_etal_SexualDimorphismRecombination),\nand is described in [Bh\u00e9rer et al. (2017)](http://dx.doi.org/10.1038/ncomms14994).\nTo generate an autosomal map file in the format the simulator requires with\nboth male and female genetic positions, run the following bash commands:\n\n```bash\nwget https://github.com/cbherer/Bherer_etal_SexualDimorphismRecombination/raw/master/Refined_genetic_map_b37.tar.gz\ntar xvzf Refined_genetic_map_b37.tar.gz\nprintf \"#chr\\tpos\\tmale_cM\\tfemale_cM\\n\" > refined_mf.simmap\nfor chr in {1..22}; do\n  paste Refined_genetic_map_b37/male_chr$chr.txt Refined_genetic_map_b37/female_chr$chr.txt \\\n    | awk -v OFS=\"\\t\" 'NR > 1 && $2 == $6 {print $1,$2,$4,$8}' \\\n    | sed 's/^chr//' >> refined_mf.simmap;\ndone\n```\n\nThis generates a file called `refined_mf.simmap` that can be passed to the\nsimulator.\n\nTo include the X chromosome from the Bh\u00e9rer et al. map, run the above plus\nthe following commands (to retain both maps, change the first command to `cp`\ninstead of `mv`):\n\n```bash\nmv refined_mf.simmap refined_mf_X.simmap\nawk 'NR > 1 { print $1,$2,\"0.0\",$4 }' Refined_genetic_map_b37/female_chrX.txt \\\n    | sed 's/^chr//' >> refined_mf_X.simmap\n```\n\nThis produces a file called `refined_mf_X.simmap`. If simulating with\ninterference the `interfere/nu_p_campbell_X.tsv` file includes parameters for\nthe X chromosome.\n\n**Note:** to output X chromosome data when using an input VCF, [the `--sexes`\noption is required, as described below](#specifying-sexes-of-samples-in-the-input-vcf).\n\n------------------------------------------------------\n\nInput VCF file\n--------------\n\nWhen genetic data are needed, an input VCF is required to be provided with the\n`-i` option. Given such a VCF, Ped-sim randomly samples individuals from this\ndata and uses them as founders. The VCF must contain phased data for all\nindividuals, with no missing data for any site. As most phasers automatically\nimpute missing data, the latter requirement should be to easy to meet.\n\nThe input VCF file can be gzipped, and if it is, Ped-sim prints the output VCF\nin gzipped format (but this output VCF is not bgzipped).\n\n------------------------------------------------------\n\nSpecifying sexes of samples in the input VCF\n--------------------------------------------\n\nBy default, Ped-sim treats the input samples as asexual, assigns them to\nfounders uniformly at random, and will only output autosomal genotypes. To\neither respect the sexes of the input samples for autosomal data or to\ngenerate output VCF data for the X chromosome, the sexes of the input VCF\nsamples must be specified. Use the `--sexes <file>` option to supply this\ninformation. It should have one line per sample of the form:\n\n    [sample id] [sex (M/F)]\n\nNote that to simulate data on the X chromosome, the genetic map must contain\npositions for the X.\n\n------------------------------------------------------\n\nCrossover model\n---------------\n\nPed-sim performs simulation from either of two crossover models: one that\nincorporates crossover interference, or a Poisson model. When the necessary\nparameters for crossover interference are available, we recommend using this\nmodel, as it is motivated by biological data and produces quite different\nresults than a Poisson model. The two options for crossover models that Ped-sim\nsupports are below.\n\n### Crossover interference model: `--intf <file>`\n\nThe `--intf <file>` option simulates from the [Housworth and Stahl (2003)](http://www.cell.com/ajhg/fulltext/S0002-9297%2807%2963904-4)\ncrossover model. This model requires specification of `nu` and `p`\nparameters for each chromosome. The `interference` subdirectory in the\nrepository contains a file `nu_p_campbell.tsv` with estimates of these\nparameters for the human autosomes from [Campbell et al. (2015)](https://www.nature.com/articles/ncomms7260).\nIt also contains `nu_p_campbell_X.tsv` which includes the X chromosome.\n\nAs with the VCF, the interference file must list chromosomes in the same order\nas the genetic map, and the chromosome names must be identical to the genetic\nmap. The `--intf` file requires parameters to be given for both sexes and\nrequires a genetic map for both males and females. Ped-sim will print an error\nwhen running with `--intf` if the genetic map only has one set of map\npositions.\n\nThe format of the interference file is:\n\n    [chromosome] [nu_0] [p_0] [nu_1] [p_1]\n\nThe `[nu_0]` and `[p_0]` parameters correspond to the first genetic map given\n(see [Map file](#map-file)), which is assumed to be male, and the `[nu_1]`\nand `[p_1]` parameters correspond to the second genetic map, which is assumed\nto be female.\n\n### Poisson crossover model: `--pois`\n\nUse the `--pois` option to simulate using a Poisson crossover model.\n\n------------------------------------------------------\n\nOutput IBD segments file\n------------------------\n\nPed-sim generates a list of all simulated IBD segments among relative pairs\nwhenever both samples have been requested to be printed. This file has nine\nfields:\n\n    [sample 1] [sample 2] [chromosome] [physical position start] [physical position end] [IBD type] [genetic position start] [genetic position end] [genetic length (end - start)]\n\nThe IBD type is one of `IBD1`, `IBD2` or `HBD`. `IBD1` indicates the pair shares\none IBD segment (on one of their two haplotypes) in the interval, and `IBD2`\nindicates the pair shares two segments IBD in the region. `HBD` stands for\nhomozygous by descent, also called a run of homozygosity (ROH), which is a\nregion where an individual is IBD with themselves. The latter only occurs in\nthe presence of inbreeding.\n\n------------------------------------------------------\n\nOutput VCF file\n---------------\n\nThe output VCF contains the simulated individuals, including only those samples\nrequested to be printed in the def file. For any generation in which there is a\nrequest to print one or more samples, the simulator prints any spouses in that\ngeneration as well as the primary branch individuals. See below for a\ndescription of the sample ids of the simulated individuals.\n\nBy default, the output VCF file is gzipped (Note: **not** bgzip'd) if the input\nis gzipped. To make the output non-gzipped, use `--nogz`.\n\n------------------------------------------------------\n\nOutput log file\n---------------\n\nInformation about the simulation run appears in the log file and is a copy of\nwhat is printed to the console during execution. Notably this includes the\nrandom seed used for a given simulation. Supplying the same input files with\nthe same random seed (assignable with the `--seed` option) will produce the\nsame simulation results.\n\n------------------------------------------------------\n\nSample ids for simulated individuals <a name=\"samp-ids\"></a>\n------------------------------------\n\nThe simulated individuals' sample ids have the format\n`[name][#]_g[#]-b[#]-i[#]`, or for spouses of reproducing individuals,\n`[name][#]_g[#]-b[#]-s[#]`. Here, `[name]` is the pedigree name given in the\ndef file. The first number `[#]` is the copy (i.e., replicate) number of the\npedigree which ranges from 1 to the number of copies of the given pedigree\nstructure requested in the def file (i.e., `[#copies]` above). The `g[#]`\nportion of the id gives the generation number of the individual, which ranges\nfrom 1 to the total number of generations in the pedigree. `b[#]` gives the\nbranch number the sample is contained in in the indicated generation; this\nranges from 1 to the total number of branches in that generation. Finally,\n`i[#]` gives the individual number in the given branch and generation. This\nranges from 1 to the total number of samples requested to be simulated in the\ngeneration. Individual `i1` is the reproducing individual that is the parent of\nany descendant branches. When `i1` does have children, his/her founder spouse(s)\nhave the same prefix id but end in `s[#]`, with the number ranging from 1 to\nthe total number of spouses of the `i1` individual. The number of spouses will\nonly be 1 unless parent specifications appear in the def file that indicate more\nfounder spouses should be used.\n\n------------------------------------------------------\n\nOutput fam file\n---------------\n\nWhen using the `--fam` (or `--dry_run`) option, the simulator produces a PLINK\nformat fam file called `[out_prefix]-everyone.fam` with the simulated pedigree\nstructures. This fam file contains **all** generated samples, including those\nthat are not requested to be printed in the def file. This enables the\nrelationships between all samples to be determined from the fam file alone.\n\nBecause the fam file contains all simulated samples, including those that are\nnot requested to be printed, it is for reference only (and to visualize\nstructures with [plot-fam.R](#plotting-pedigree-structures-plot-famr).\n**It should not be used as a replacement for PLINK fam files with PLINK bed,\nbim, and fam data:** use one converted to from the VCF. (Running plink 1.9\nwith `--vcf [out_prefix].vcf --out [out_prefix] --make-bed` generates data\nin PLINK format.)\n\n------------------------------------------------------\n\nDry run for visualizing pedigrees\n---------------------------------\n\nThe `--dry_run` option does several things:\n1. Enables `--fam`.\n2. Only produces one replicate copy of each pedigree.\n3. Disables all other outputs regardless of the options given to Ped-sim\n(so Ped-sim will _not_ print IBD segments, a VCF, BP file, or an MRCA file).\n\nThe intended purpose of this option is to visualize the simulated pedigrees\nwith [plot-fam.R](#plotting-pedigree-structures-plot-famr). That script\nproduces a plot for every pedigree in the fam file it is given, and `--dry_run`\nensures that there is only one copy of each pedigree in the fam file Ped-sim\ngenerates regardless of the number of copies specified in the def file.\n\n------------------------------------------------------\n\nOutput BP file\n--------------\n\nWhen using the `--bp` option, Ped-sim prints a break points (BP) file that lists\ncomplete information about each sample's haplotypes. All founders have a unique\nnumerical id for each of their two haplotypes, starting from 0 and ranging to\n2\\**F*-1, where *F* is the total number of founders in all simulated pedigrees.\nWithin the BP file, there are two lines for every sample requested to be printed\n(according to the def file). Each line begins with the sample id (described\nabove) of the simulated individual, the sex of that person, either `s0` for male\nor `s1` for female, the haplotype that line describes, `h0` or `h1`, and then a\nvariable number of segments for each chromosome.\n\nFor each simulated chromosome, there is starting physical position and one or\nmore break points. The start description is listed as\n\n    [chromosome]|[start physical position]\n\nFollowing this, break points where crossovers occurred are indicated as\n\n    [founder haplotype]:[physical position]\n\nThe range of physical positions between the previous break point (or start\nphysical position for the first segment) descend from `[founder haplotype]`\nnumber. For example, consider:\n\n    grandparent2_g3-b1-i1 s0 h0 22|17178586 9:25639567 8:45864504 6:51039778\n\nThis line describes the haplotypes and break points inherited by an individual\nwith id `grandparent2_g3-b1-i1`. That individual is simulated as male (`s0`),\nand the description is for their first haplotype (`h0`). Only chromosome 22 is\nlisted, and it begins at position `17178586`. Note that the start and end\npositions -- the last break point position on any chromosome -- are dictated by\nthe input genetic map. The first break point `9:25639567` indicates that this\nindividual inherited haplotype 9 from position 17,178,586 through 25,639,567,\ninclusive. The next break point `8:45864504` designates that the individual\ninherited haplotype 8 from position 25,639,568 through 45,864,504. And the final\nbreak point of `6:51039778` says that the individual received haplotype 6 from\nposition 45,864,505 through 51,039,778, the latter of which ends the chromosome.\n\n------------------------------------------------------\n\nOutput MRCA file\n----------------\n\nWith the `--mrca` option, Ped-sim prints a file with the id of the founder in\nwhich every IBD/HBD segment coalesces in. The file has the same line count as\nthe IBD segment file, with entries in each file corresponding to each other.\n\n**Note:** this _may_ lead to more IBD segments being printed. When printing\nsegments, Ped-sim merges adjacent segments, but with `--mrca` this merging\nonly takes place if the adjacent segments descend from the same founder.\n\n------------------------------------------------------\n\nExtra notes: sex-specific maps\n------------------------------\n\nWhen simulating with sex-specific maps, it is necessary to include data for all\nchromosomes in one run. This is because sex is assigned randomly, but only once\nper run. Thus, to maintain consistency of the sex of each individual in a\ngiven pedigree (and across chromosomes), all chromosomes need to be included\nin the same run.\n\n------------------------------------------------------\n\nCiting Ped-sim and related papers\n---------------------------------\n\nIf you use Ped-sim in your work, please cite [Caballero et al. (2019)](https://journals.plos.org/plosgenetics/article?id=10.1371/journal.pgen.1007979);\nif you use the Refined genetic map (named `refined_mf.simmap` in the example\ncode), please cite [Bh\u00e9rer et al. (2017)](http://dx.doi.org/10.1038/ncomms14994);\nand if you use the `interfere/nu_p_campbell.tsv` interference parameters, please\ncite [Campbell et al. (2015)](https://www.nature.com/articles/ncomms7260).\n\n------------------------------------------------------\n\nOther optional arguments\n------------------------\n\n### Specifying random seed: `--seed <#>`\n\nThe `--seed <#>` option enables specification of the random seed to be used.\nWithout this option, the simulator generates a random seed using the current\ntime (including microseconds).\n\n### Using specified set of crossovers: `--fixed_co <filename>`\n\nThe `--fixed_co <filename>` option simulates from crossovers provided in the\nindicated file, which may be from real crossover data. The format of the file\nis one row per crossover, with the following information on each line:\n\n    [proband id] [maternal or paternal] [chromosome] [crossover physical position]\n\nPed-sim ignores any extra fields that follow these four. The first field can\nbe any string (with no white space), and field two must be either `M` or `P`.\nFor a given meiosis, the proband id and the maternal/paternal meiosis type must\nbe the same for each crossover. The simulator randomly assigns crossovers from\na given proband and maternal/paternal type to each meiosis, matching the sex of\nthe parent undergoing meiosis to the maternal/paternal type. It uses all\ncrossovers from a given meiosis except those outside the range of the input\ngenetic map.\n\n**The crossovers must be sorted,** first by proband id, second by\nmaternal/paternal type (so that all the crossovers from a given meiosis appear\nin succession), third by chromosome name, and last by physical position. As with\nother files, the chromosomes must be listed in the same order as the input VCF\n(or genetic map if not using a VCF), and the chromosome names must also be\nidentical to those other files.\n\n### Genotyping error rate: `--err_rate <#>`\n\nTo more accurately mimic real data, the simulator introduces genotyping errors\nat a specified rate, defaulting to 1e-3. Set this value to 0 to keep the\nallelic values identical to those in the founder haplotypes (from the input\nVCF).\n\n**Note: only pedigree samples have genotyping errors introduced;\n`--retain_extra` samples maintain their original calls**\n\n### Rate of opposite homozygote errors: `--err_hom_rate <#>`\n\nSNP array genotype calling works by clustering allele intensities among a set\nof samples. So if an individual is truly homozygous, its intensities are more\nlikely to fall in either the correct cluster or the heterozygous cluster, with\na lower probability of being called homozygous for the opposite allele.  While\nwe are unaware of a study that looks at error rates by \"true\" genotype class in\nSNP array data, the `--err_hom_rate` option provides the ability to produce\ndifferent rates of errors for genotypes that are truly homozygous. The default\nrate for generating an erroneous genotype that is homozygous for the opposite\nalleles relative to the truth is 0, so errors in homozygous genotypes produce a\nheterozygote. If set to, say, .1, whenever Ped-sim is changing a homozygous\ngenotype to an erroneous value, 10% of the time it assigns the genotype as\nhomozygous for the opposite allele, and 90% of the time it uses a heterozygous\ngenotype. For equal rates of both these classes, set the rate for this option\nto .5. Values even as high as .1 are likely to be fairly unrealistic (based on\nsome internal analyses) and so the default rate is 0.\n\n### Missingness rate: `--miss_rate <#>`\n\nAs real data includes missingness, the simulator introduces missing genotype\ncalls at a rate specified by this parameter, with a default of 1e-3. Set this\nvalue to 0 for no missing genotypes.\n\nPed-sim allows either `--miss_rate` or `--pseudo_hap`, but not both.\n\n**Note: only pedigree samples have sites set to missing; `--retain_extra`\nsamples maintain their original calls**\n\n### Pseudo-haploid rate: `--pseudo_hap <#>`\n\nThe `--pseudo_hap` option generates pseudo-haploid data with mean pseudo-haploid\ncoverage given by the argument (e.g., `--pseudo_hap .1` will randomly select\nsites with data at a rate of .1, and the remaining sites will be missing data).\nSites that do have data are all haploid for random allele sampled from the two\noriginal ones and are coded as homozygous.\n\nPed-sim allows either `--miss_rate` or `--pseudo_hap`, but not both.\n\n**Note: only pedigree samples have sites set to missing or pseudo-haploid;\n`--retain_extra` samples maintain their original calls**\n\n### Maintaining phase in output: `--keep_phase`\n\nBy default the simulator produces a VCF with unphased genotypes. The\n`--keep_phase` option will instead generate a VCF in which the samples are\nphased.\n\n### X chromosome name: `-X <string>`\n\nBy default, all chromosomes are simulated as if they are autosomal with the\nexception of the X chromosome. Any input chromosome in the genetic map whose\nname is (by default) 'X' is modeled as an X chromosome within males: they\ninherit only one copy from their mothers and only transmitting their X to their\nfemale offspring. (To prevent recombination, the genetic map file should have\n0.0 length in males, as generated by the [bash code above for a map in humans](#map-file).)\nThe `-X` option allows this name to be changed in case your map and VCF\n(if using) have a different label such as `chrX`.\n\n### Listing input sample ids used as founders: `--founder_ids`\n\nPed-sim assigns input samples as founders in the pedigrees it simulates. The\n`--founder_ids` option prints a file called `[out_prefix].ids` that contains\ntwo columns listing each founder sample id followed by the corresponding input\nsample id Ped-sim assigned to that founder.\n\n### Retaining extra input samples: `--retain_extra <#>`\n\nThe simulator uses samples from the input VCF as founder individuals and will\nexit if there are too few samples in the VCF to do the simulation. If requested\nusing `--retain_extra`, the program will also print a specified number of input\nsamples that were not used as founders in the simulations. If the number is\nless than 0 (e.g., `--retain_extra -1`), the simulator prints all unused input\nsamples. If the value is greater than 0, say 100, but fewer than this number of\nunused samples exist, the simulator prints all the available samples. When the\nrequested number to print is less than the number available, the simulator\nrandomly selects the samples to print from among all that were not used as\nfounders.\n\n------------------------------------------------------\n\nExtraneous tools\n================\n\nPlotting pedigree structures: `plot-fam.R`\n------------------------------------------\n\nThe `plot-fam.R` script plots the pedigree structures produced by Ped-sim (or\nindeed for any PLINK format fam file). It requires the\n[kinship2](https://cran.r-project.org/web/packages/kinship2/index.html)\nR package and works by running\n\n    ./plot-fam.R [base name]\n\nThis plots all pedigree structures given in the `[base name].fam` file. The\noutput files are named `[base name]-[family id].pdf`, with a file for each\nfamily id (first column) in the fam file. Use either the `--dry_run` or\n`--fam` Ped-sim option to get a `.fam` file.\n\n**Be mindful of the number of files this will produce:** it generates a pdf for\neach *copy* of all the family structures in the file. Using the Ped-sim\n`--dry_run` option sets the number of copies of each structure to 1 (whereas\n`--fam` produces a `.fam` file with _all_ family copies included).\n\n**Known bug:** If the def file calls for all individuals to be printed, the\n`plot-fam.R` script will give the error\n\n    Error in pedigree(dat[sel, 2], dat[sel, 3], dat[sel, 4], dat[sel, 5],  :\n    Invalid code for affected status\n    Execution halted\n\nThis is caused by having the 'affected' status be the same for all samples. A\nworkaround is to edit the fam file and set the affected (column 6) status for\nat least one individual to something different, e.g., -9.\n\nConverting fam to def file: `fam2def.py`\n----------------------------------------\n\nWith thanks to [Sara Mathieson](https://smathieson.sites.haverford.edu/),\nconversion from PLINK fam format to Ped-sim's def format is possible with\n`fam2def.py`. Simply run\n\n    ./fam2def.py -i [filename.fam] -o [out.def]\n\nto convert `[filename.fam]` to `[out.def]`.\n\n**Please note:** at present it is not possible to specify the sexes of\nindividuals using `fam2def.py`.\n"
      },
      "source": "https://raw.githubusercontent.com/williamslab/ped-sim/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 11
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/williamslab/ped-sim/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "williamslab/ped-sim"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Pedigree Simulator"
      },
      "source": "https://raw.githubusercontent.com/williamslab/ped-sim/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/williamslab/ped-sim/master/example/full-1cousin1.png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/williamslab/ped-sim/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Using specified set of crossovers: `--fixed_co &lt;filename&gt;`",
        "parent_header": [
          "Pedigree Simulator",
          "Other optional arguments"
        ],
        "type": "Text_excerpt",
        "value": "==================\nProgram to simulate pedigree structures. The method can use sex-specific\ngenetic maps and randomly assigns the sex of each parent (or uses user-specified\nsexes) when using such maps.\n\nRecent updates\n--------------\n\nVersion 1.4.2 introduces the [`--dry_run`](#dry-run-for-visualizing-pedigrees)\noption.\n\nVersion 1.4 chooses alleles from the first haplotype if males are input with\nheterozygous genotypes. Formerly Ped-sim picked an allele at random, but this\neffectively introduces switch errors into the transmitted haplotypes.\n\nVersion 1.3 now supports branch-specific sex assignments in the\n[def file](#def-file).\n\nVersion 1.2 now supports simulating the X chromosome. See the [map\nfile](#map-file) section for code to generate a map file that includes X\nchromosome positions from the [Bh\u00e9rer et al.\n(2017)](http://dx.doi.org/10.1038/ncomms14994) map. To simulate genetic data\n(i.e., output a VCF file) that includes the X chromosome, [specify sexes of\nthe input VCF using `--sexes`](#specifying-sexes-of-samples-in-the-input-vcf).\nTo change the name Ped-sim considers as the X chromosome [use the `-X`\noption](#x-chromosome-name--x-string).\n\nTable of Contents\n-----------------\n   * Pedigree Simulator\n      * [Basic usage](#basic-usage)\n         * [Quick start](#quick-start)\n      * [Compiling](#compiling)\n      * [Def file (with examples)](#def-file)\n      * [Map file](#map-file)\n      * [Input VCF file](#input-vcf-file)\n      * [Specifying sexes of samples in the input VCF](#specifying-sexes-of-samples-in-the-input-vcf)\n      * [Crossover model](#crossover-model)\n      * [Output IBD segments file](#output-ibd-segments-file)\n      * [Output VCF file](#output-vcf-file)\n      * [Output log file](#output-log-file)\n      * [Sample ids for simulated individuals](#samp-ids)\n      * [Output fam file](#output-fam-file)\n      * [Dry run for visualizing pedigrees](#dry-run-for-visualizing-pedigrees)\n      * [Output BP file](#output-bp-file)\n      * [Output MRCA file](#output-mrca-file)\n      * [Extra notes: sex-specific maps](#extra-notes-sex-specific-maps)\n      * [Citing Ped-sim](#citing-ped-sim-and-related-papers)\n      * [Other optional arguments](#other-optional-arguments)\n         * [Specifying random seed](#specifying-random-seed---seed-)\n         * [Using specified crossovers](#using-specified-set-of-crossovers---fixed_co-filename)\n         * [Genotyping error rate](#genotyping-error-rate---err_rate-)\n         * [Rate of opposite homozygote errors](#rate-of-opposite-homozygote-errors---err_hom_rate-)\n         * [Missingness rate](#missingness-rate---miss_rate-)\n         * [Pseudo-haploid rate](#pseudo-haploid-rate---pseudo_hap-)\n         * [X chromosome name](#x-chromosome-name--x-string)\n         * [Maintaining phase in output](#maintaining-phase-in-output---keep_phase)\n         * [Listing input sample ids used as founders](#listing-input-sample-ids-used-as-founders---founder_ids)\n         * [Retaining extra input samples](#retaining-extra-input-samples---retain_extra-)\n   * [Extraneous tools](#extraneous-tools)\n      * [Plotting pedigree structures: plot-fam.R](#plotting-pedigree-structures-plot-famr)\n      * [Converting fam to def file: fam2def.py](#converting-fam-to-def-file-fam2defpy)\n\n------------------------------------------------------\n\nBasic usage:\n------------\n\n    ./ped-sim -d <in.def> -m <map file> -o <out_prefix> --intf <filename>\n\nTo use a non-interference crossover model, i.e., a Poisson model, use:\n\n    ./ped-sim -d <in.def> -m <map file> -o <out_prefix> --pois\n\nThe above both produce a file `[out_prefix].seg` containing IBD segments and\n`[out_prefix].log`, a log of what Ped-sim printed to stdout.\n\nWith the above input options, Ped-sim does not produce genetic data, but only\nIBD segments for artificial (ungenotyped) relatives. To simulate relatives with\ngenetic data (and using crossover interference modeling), run:\n\n    ./ped-sim -d <in.def> -m <map file> -i <in.vcf/in.vcf.gz> -o <out_prefix> --intf <filename>\n\nWhich will generate a third output file, `[out_prefix].vcf` (or\n`[out_prefix].vcf.gz`),\n \nRun `ped-sim` without arguments to see a summary of options. This document\ngives a detailed description of the input and output files and all options.\n\n \n### Quick start\n\nTo use Ped-sim to simulate from the def file `example/second_deg.def`:\n\n1. Obtain a genetic map. For humans, links and code to generate a sex-specific\nmap in Ped-sim format are [below](#map-file).\n2. Run Ped-sim:\n\n    ./ped-sim -d example/second_deg.def -m refined_mf.simmap \\\n      -o output --intf interfere/nu_p_campbell.tsv\n\nThis uses the [below](#map-file) genetic map, and [human crossover interference\nparameters](https://www.nature.com/articles/ncomms7260) stored in `interfere/`.\nThe `output.seg` file is the primary result of this run and lists the IBD\nsegments the samples share. This example does not include any input genetic\ndata and so does not produce any output genetic data.\n\n------------------------------------------------------\n\nCompiling\n---------\n\nPed-sim requires **either** the [boost](https://www.boost.org/) developmental\nlibraries _or_ [GSL](https://www.gnu.org/software/gsl/) (see below regarding\nGSL). With one of these libraries in place (and an update to the Makefile for\nGSL), most Linux/Unix-based users should simply be able to compile by running\n\n    make\n\nOther systems may require editing of the Makefile or alternate means of\ncompiling.\n\n**GSL**: our analyses suggest that Ped-sim runs a bit faster with GSL (although\nthe component that uses boost/GSL is quite fast regardless). Use the following\nto compile with the GSL library:\n\n    cp Makefile-gsl Makefile\n    make\n\n------------------------------------------------------\n\nDef file\n--------\n\nThe def file defines the pedigree structure(s) to be simulated. Comments are\nallowed on a line by themselves beginning with `#`. Example def files are in the\n`example/` directory, and\n[descriptions of the example files are below](#example-def-file-examplecousins-1st_half_to_3rddef).\n**The specification below is perhaps best for more advanced users. The\nexamples are a good place to start.**\n\nThe first line of a pedigree definition contains four (or five) columns:\n\n    def [name] [#copies] [#generations] <sex of i1>\n\n`[name]` gives the name of the pedigree, which must be unique for each pedigree\nstructure in a given simulation run (i.e., a given def file). The simulator\nuses this to generate the simulated individuals' sample ids (details in\n[Sample ids for simulated individuals](#samp-ids)).\n\n`[#copies]` gives the number of replicate simulations of the given pedigree\nstructure to produce. While the replicates all have the same structure, they\nwill descend from different founders and will have different randomized sex\nassignments (when using sex specific maps and assuming sexes are not assigned),\nand so are independent.\n\n`[#generations]` indicates the number of generations in the pedigree.\n\n`<sex of i1>` is an optional field giving the sex (F for female, M for male) of\nthe individual with id `i1` (the reproducing individual) in each branch. See\n[Sample ids for simulated individuals](#samp-ids).\n\nAfter this first line, the def file lists simulation details corresponding to\nvarious generations in the pedigree. Each such line has the following format:\n\n    [generation#] [#samples_to_print] <#branches> <branch_specifications>\n\n`[generation#]` gives an integer value for the pedigree generation number. This\nvalue can range from 1 (the earliest generation) to the total number of\ngenerations included in the pedigree, as listed on the first line of the\ndefinition (`[#generations]` just above).\n\n`[#samples_to_print]` indicates how many samples the simulator should print for\neach branch (see below for a definition of \"branch\") in the indicated\ngeneration; it defaults to 0 so that Ped-sim prints no individuals in\ngenerations not explicitly listed. All individuals in a given branch and given\ngeneration have the same parents and so are full siblings of one another.\nBecause only one member of each branch can have children, setting this to a\nvalue greater than 1 generates data for individuals that do not have any\noffspring. **To simulate a pedigree in which multiple full siblings each have\nchildren, increase the number of branches in the third `<#branches>` field.**\nNote that _founder_ spouses in a branch will be printed if this field is\ngreater than 0. These spouses do not count in the value of this field: the\nfield gives the number of full siblings to generate for each branch. Also note\nthat if a branch contains a founder individual (such as in generation 1), it\nwill only ever contain one individual (and any spouses of that person): the\n`[#samples_to_print]` value only controls whether (if it is greater than 0) or\nnot (if it is 0) Ped-sim prints that founder and his/her spouse(s).\n**Note: it is possible to print the members of specific branches (instead of\nall individuals) in a given generation. See the \"no-print\" branch specification\ndescribed below.**\n\n`<#branches>` is an optional field. By default:\n\n* Generation 1 has one branch that contains a founder individual, and\ngeneration 2 has two branches that are both children of the founder individual\nand his/her spouse from generation 1; thus they are full siblings.\n\n* Other than generations 1 and 2, every generation includes the same number of\nbranches as the previous generation. In consequence, not all generations need\nan explicit listing in the def file.\n\nFor generation 1, multiple branches are allowed, and all such branches contain\nonly founder individuals. For all other generations, if the\n`branch_specifications` field (described below) is empty, the parents of each\nbranch are as follows:\n\n* If the number of branches is *an integer multiple* n *times the number of\nbranches in the previous generation*, individuals in branch *i* in the previous\ngeneration are the parents of branches *n\\*(i-1)+1* through *n\\*i* in the\ncurrent generation. (Thus, *if the number of branches is the same*, individuals\nin each branch *i* in the previous generation are the parents of branch *i* in\nthe current generation.)\n\n* If the number of branches is *less than the number of branches in the\nprevious generation*, individuals in each branch *i* in the previous generation\nare the parents of branch *i* in the current generation. (Thus some branches in\nthe previous generation do not have children.)\n\n* If the number of branches is *greater than but not divisible by the number of\nbranches in the previous generation*, branches 1 through *n\\*p* have parents\nassigned according to the integer multiple case above; here *p* is the branch\nnumber in the previous generation and *n* is the largest integer divisor by\n*p* of the number of branches in the current generation. The remaining branches\n*n\\*p+1* through *n\\*p+r* contain founder individuals (as in generation 1),\nwhere *r* is the remainder branch number after integer division.\n\nThe above are defaults, and the parents of a branch can be assigned in the\nbranch specifications.\n\n`<branch_specifications>` is an optional set of one or more fields containing\n(a) no-print branches, (b) sex assignments, and/or (c) non-default parent\nassignments for a set of branches. By default, all branches have the same\nnumber of individuals printed (given in the `[#samples_to_print]` field), and\nthe sexes are assigned randomly.\n\n**No-print branches** have the format:\n\n    [current_branches]n\n\nMembers of `[current_branches]` will not be printed.\n\n**Sex assignments** have two possible formats for males and females,\nrespectively:\n\n    [current_branches]sM\n    [current_branches]sF\n\nFor example, `2sM` says that branch 2 in the current generation should contain\na male as the `i1` individual and `1,3-5sF` indicates that the `i1` individual\nin branches 1, 3, 4, and 5 should be female. (See just below for more detail on\n`[current_branches]`.) _Note_ these branch-specific sex assignments override\nthe `<sex of i1>` field that appears on the `def` line (see above).\n\n**Parent assignments** have any of the following formats:\n\n    [current_branches]:\n    [current_branches]:[parent_branch1]\n    [current_branches]:[parent_branch1]_[parent_branch2]\n    [current_branches]:[parent_branch1]_[parent_branch2]^[parent_branch2_generation]\n\nIn all three cases, `[current_branches]` contains a range of branches from the\ncurrent generation who should either not be printed, should have their sex\nassigned or whose parents are assigned after the `:` character. This can be a\nsingle branch or comma separated list of branches such as `1,2,3` or, for a\ncontiguous range, you can use a hyphen as in `1-3`. Any combination of\ncontiguous ranges and comma separated sets of branches are allowed such as\n`2-5,7,9-10`.\n\nFor parent assignments:\n\nIf no text appears after the ':', the indicated branches will contain founder\nindividuals. For example, `1-3,5:` specifies that branches 1 through 3 and 5\nshould contain founders.\n\nIf only `[parent_branch1]` is listed, the reproducing parent (`i1`) from that\nbranch in the previous generation has children with a founder spouse. So for\nexample, `1,7:2` indicates that branches 1 and 7 will be the children of an\nindividual from branch 2 in the previous generation and a founder spouse.\nBecause these branches are listed together, they will contain full siblings.\nTo generate these branches as half-sibling children of branch 2, the\nspecification should be `1:2 7:2`. Here, branch 2 contains the parent of both\nindividuals, but the separate specifications for branches 1 and 7 ensures that\nthat parent has children with two different founder spouses, making the\nchildren in the branches half-siblings.\n\nIf two parent branches are listed as in `[parent_branch1]_[parent_branch2]`,\nthe two parents are from the indicated branches in the previous generation.\nThus, for example, `2,4:1_3` indicates that branches 2 and 4 from the current\ngeneration are to be the children of the reproducing (`i1`) individuals in\nbranches 1 and 3 in the previous generation.\n\nTo have parents from different generations, the format is\n`[parent_branch1]_[parent_branch2]^[parent_branch2_generation]`. Here, one\nparent (the first one listed) is required to be in the previous generation and\nthe second parent comes from some other generation. Because the children are in\nthe current generation, the generation of both parents must be earlier than the\ncurrent one. As an example `2:1_3^2` indicates that branch 2 in the current\ngeneration has parents from branch 1 in the previous generation and branch\n3 from generation 2.\n\nThe simulator keeps track of the constraints on the sex of the parents implied\nby the requested matings and will give an error if it is not possible to assign\nsexes necessary to have offspring. For example, `1:1_3 2:1_4 3:3_4` is\nimpossible since the reproducing individuals in branches 3 and 4 must be the\nsame sex in order to both have children with the individual in branch 1.\n\n### Example def file: `example/cousins-1st_half_to_3rd.def`\n\nThe first def entry in `example/cousins-1st_half_to_3rd.def` is\n\n    def full-1cousin 10 3\n    3 1\n\nThe first line names the pedigree `full-1cousin`, and calls for 10 replicate\npedigrees to be generated. The last column, 3, says that the `full-1cousin`\npedigree spans three generations.\n\nThe following is a plot of the `full-1cousin` pedigree, with generations\nlabeled and outlined in red, branches labeled and outlined in blue, and `i1`\nindividuals circled in purple (in generations 1 and 2). Only the individuals in\ngeneration 3 are printed, and these individuals' shapes are filled in black;\nnon-printed individuals are unfilled. The sexes of these individuals are\nrandom. (Use the [plot-fam.R](#plotting-pedigree-structures-plot-famr) script\nto generate black and white portions of this plot for your def file.)\n\n![Pedigree plot of full-1cousin](example/full-1cousin1.png?raw=true \"Pedigree plot of full-1cousin\")\n\nThis definition does not mention generations 1 and 2 (the line that reads\n`3 1` refers to generation 3), so those generations have the default number of\nbranches and do not have data printed for the individuals in them. By default,\ngeneration 1 has one branch that contains one random individual (the `i1`\nindividual) and all spouses of this person. (For this pedigree, the generation\n1 branch contains only one couple.)\n\nGeneration 2 has the default two branches, with the `i1` individuals in these\nbranches being the children of the branch in generation 1 (strictly speaking,\nof the couple in that branch). This means that the `i1` individuals in these\nbranches are full siblings of each other.\n\nThe def line `3 1` says that in generation 3, 1 sample per branch should be\nprinted, and it does not specify the number of branches in this generation.\nThis means that generation 3 also has the default branch count, which is\nassigned to be the same as the previous generation, or two branches. These\nbranches contain the children of the `i1` individuals in the corresponding\nbranches in the previous generation, so generation 2, branch 1's child is in\ngeneration 3, branch 1, and generation 2, branch 2's child is in generation 3,\nbranch 2.\n\nThis completes the definition of the pedigree, which will print a pair of\nfirst cousins.\n\nThe next two definitions are for second and third cousins:\n\n    def full-2cousin 10 4\n    4 1\n    \n    def full-3cousin 10 5\n    5 1\n\nThese pedigrees differ from the first cousin pedigree in their names and\nnumbers of generations: 4 and 5 for second and third cousins, respectively.\nLike the first cousin pedigree, they use the default branch counts for all\ngenerations. This means that generation 1 contains one branch, and all other\ngenerations have two branches. When successive generations have the same number\nof branches, branch _i_ in one generation contains the parents of branch _i_ in\nthe next generation. (So branch 2's parents are in the previous generation's\nbranch 2.)\n\nThe `4 1` and `5 1` lines specify that one sample per branch should be printed\nin these generations, and lead to the production of the second and third\ncousins as needed.\n\nThese two-line def entries are perhaps the simplest type and generate pairs of\nfull cousins of any distance (determined by the number of generations).\n\nPed-sim also generates half-cousins, and the def file contains two more entries\nfor printing half-first and half-second cousins. These involve a few more\ninstructions:\n\n    def half-1cousin 10 3\n    2 0 2   1:1  2:1\n    3 1\n\nThis specifies a pedigree with the name `half-1cousin` with 10 replicate copies\nto be produced and 3 generations in the pedigree. As with the full first cousin\ncase, generation 1 uses the default of one branch.\n\nThe first part of the generation 2 definition reads `2 0 2`. The 0 indicates\nthat no samples from generation 2 should be printed, and the third column says\nthat this generation has 2 branches. These are in fact the default settings,\nbut must be explicitly listed ahead of the second, non-default part of this\nline.\n\nThe latter half of the generation 2 definition reads `1:1  2:1`. Here, `1:1`\nsays that the current generation's branch 1 should contain a child of the\nprevious generation's (generation 1's) branch 1. Similarly, `2:1` says that the\ncurrent generation's branch 2 should contain a child of the previous\ngeneration's branch 1. So both branches in generation 2 are children of the\nsame person, but because the specifications are separated, they are children of\ntwo different spouses, so produce half-siblings. In contrast, if this line\nspecified `1,2:1`, the branches would contain full siblings.\n\nWith the two branches in generation 2 containing half-siblings, the remainder\nof the definition is the same as for full cousins, with `3 1` indicating that\nin generation 3, 1 sample per branch should be printed. This line leaves the\nbranch count as the default, meaning that it has two branches with the default\nparents from the previous generation.\n\nThe half-second cousin definition is:\n\n    def half-2cousin 10 4\n    2 0 2   1:1  2:1\n    4 1\n\nThis has the same behavior in generation 2 as in the `half-1cousin` definition,\nyielding two branches with half-siblings in them. It keeps default behavior for\ngeneration 3, with two branches that descend from generation 2. The `4 1` line\nagain calls the printing of 1 person per branch (with a default of two\nbranches) in generation 4. The printed pair are half-second cousins, as desired.\n\n### Example def file: `example/second_deg.def`\n\nThe first entry in the `example/second_deg.def` file simulates 10 pedigrees\nnamed `grandparent`, with data printed for two grandparents and one grandchild.\n\n    def grandparent 10 3\n    1 1\n    2 0 1\n    3 1\n\nThis indicates that the founder individual (and therefore his/her spouse) from\nthe branch in generation 1 (note: the default is one branch in generation 1)\nshould have data printed. Generation 2 has a default of two branches, but since\nwe only want one grandchild, we explicitly set this to one branch and do not\nprint individuals from that generation. Generation 3 prints one individual, and\nit has only one branch since unspecified branch numbers are the same as the\nprevious generation and that previous generation (2) has only one branch.\n\nThe second entry simulates 10 pedigrees named `avuncular`:\n\n    def avuncular 10 3\n    2 1 2  1n\n    3 1 1\n\nHere, generation 1 has the default of one branch with no data printed.\nGeneration 2 has two branches that are the full sibling children of the\nfounders in generation 1. The sibling in branch 2 gets printed, but because of\nthe no-print `1n` branch specification, neither member of branch 1 (i.e.,\nthe `i1` individual [who is branch 2's full sibling] and his/her spouse) get\nprinted. Finally, generation 3 has one branch with one individual (the child\nof generation 2's branch 1) that gets printed. Thus, for each replicate\npedigree, the program produces a pair of samples with an avuncular relationship.\n\nThe third entry simulates 10 pedigrees named `hs` for half-sibling:\n\n    def hs 10 2\n    2 1 2 1:1 2:1\n\nHere, generation 1 has the default of one branch with no data printed.\nGeneration 2 has two branches, and with the parent specification of `1:1 2:1`,\nboth these branches have the reproducing individual from branch 1 as a parent.\nThey are both also children of two distinct founders and are therefore\nhalf-siblings. This prints two individuals per pedigree, one from each of the\nbranches in generation 2.\n\nThe last entry simulates 10 pedigrees named `dc` for double cousins:\n\n    def dc 10 3\n    1 0 2\n    2 0 4\n    3 1 2  1:1_3  2:2_4\n\nGeneration 1 has two branches, both containing founders. Generation 2 has four\nbranches: branches 1 and 2 are full sibling children of generation 1, branch 1;\nbranches 3 and 4 are also full siblings and the children of generation 1,\nbranch 2. In generation 3, there are only 2 branches: branch 1 contains the\nchild of individuals from generation 2, branches 1 and 3; branch 2 contains the\nchild of individuals from generation 2, branches 2 and 4. As the individuals in\nbranches 1 and 2 are full siblings and those in branches 3 and 4 are also full\nsiblings, the third generation samples are \"double cousins.\" Only these\ntwo double cousin individuals from the last generation are printed.\n\n### Example def file: `example/full_half_1st_2nd_cousins.def`\n\nThe first entry in the `example/full_half_1st_2nd_cousin.def` file simulates\na single pedigree that has four generations:\n\n    def full1-2-cous 1 4\n    3 0 4\n    4 1\n\nBecause the first two generations are not explicitly listed, they have the\ndefault number of branches: one and two for generations 1 and 2, respectively.\nSince the number of samples to print is 0 by default, no samples are printed\nfrom these generations. In generation 3, there are four branches, with\ngeneration 2, branch 1 containing the parents of branches 1 and 2, and\ngeneration 2, branch 2 containing the parents of branches 3 and 4. No samples\nfrom generation 3 are printed. Finally, generation 4 has four branches, the\nsame as the previous generation, with one sample printed per branch, or a total\nof four individuals printed. Because the four branches in generation 3 included\ntwo sets of full siblings, two pairs of the four samples in generation 4 are\nfirst cousins. The other pairs are second cousins, and their most recent common\nancestors are in generation 1.\n\nThe second entry in this file is very similar to the first:\n\n    def half1-2-cous 1 4\n    2 0 2 1:1 2:1\n    3 0 4\n    4 1\n\nThe only difference between this pedigree and the one above is in generation 2.\nThis generation once again has two branches, and each branch has the\nreproducing individual from generation 1, branch 1 as one of their parents.\nHowever, because the specification is separated for the two branches and\nincludes only branch number 1, these branches are the offspring of two\ndifferent founder spouses and thus contain half-siblings. In consequence, the\nultimate descendants in generation 4 are a mix of (full) first cousins and\nhalf-second cousins.\n\n### Example def file: `example/cousins-parent-sex-assign.def`\n\nExample pedigrees with sex assignments are in\n`example/cousins-parent-sex-assign.def`, which includes the three possible ways\nthat full first cousins can be related: through two brothers, two sisters, or a\nsister and brother. Taking the second definition as an example:\n\n    def sis-1cousin 10 3\n    2 0 2  1sF  2sF\n    3 1\n\nAs in other example pedigrees for cousins, generation two contains two branches\nand these default to having generation 1, branch 1 as their parent branch (and\nthey are therefore full siblings). The sex assignments are the last two fields\non the generation 2 line: `1sF` indicates that the reproducing (`i1`)\nindividual in branch 1 should be female and `2sF` similarly says that\nbranch 2's `i1` individual needs to be female.\n\n### Other example def files\n\nThe `example/once-removed.def` def file includes three pedigrees that make use\nof the `no-print` branch specification in order to print relative pairs from\ndifferent generations (including first cousins once removed).\n\n------------------------------------------------------\n\nMap file <a name=\"map-file\"></a>\n--------\n\nThe genetic map file contains three columns for a sex-averaged map and four\ncolumns for male and female maps. The format of this file is:\n\n    [chromosome] [physical_position] [map_position0] <map_position1>\n\nThe chromosomes are expected to be listed in the same order as they are in\nany input VCF file, with the physical positions in increasing order. The\nchromosome names must also match the names in the input VCF file, and \n_all_ chromosome names present in the map must also have corresponding\nrecords in the VCF.\n\n`[map_position0]` is genetic position in centiMorgans, and should either be the\nsex-averaged genetic position if using only one map, or should be the male\ngenetic position if using two maps. When using only one map, the simulator\nsamples all crossovers from that one map and does not distinguish male and\nfemale parents.\n\n`<map_position1>` is likewise a genetic position in centiMorgans and should\ncorrespond to the female genetic position if given.\n\nA high resolution human sex-specific genetic map is available [here](https://github.com/cbherer/Bherer_etal_SexualDimorphismRecombination),\nand is described in [Bh\u00e9rer et al. (2017)](http://dx.doi.org/10.1038/ncomms14994).\nTo generate an autosomal map file in the format the simulator requires with\nboth male and female genetic positions, run the following bash commands:\n\n```bash\nwget https://github.com/cbherer/Bherer_etal_SexualDimorphismRecombination/raw/master/Refined_genetic_map_b37.tar.gz\ntar xvzf Refined_genetic_map_b37.tar.gz\nprintf \"#chr\\tpos\\tmale_cM\\tfemale_cM\\n\" > refined_mf.simmap\nfor chr in {1..22}; do\n  paste Refined_genetic_map_b37/male_chr$chr.txt Refined_genetic_map_b37/female_chr$chr.txt \\\n    | awk -v OFS=\"\\t\" 'NR > 1 && $2 == $6 {print $1,$2,$4,$8}' \\\n    | sed 's/^chr//' >> refined_mf.simmap;\ndone\n```\n\nThis generates a file called `refined_mf.simmap` that can be passed to the\nsimulator.\n\nTo include the X chromosome from the Bh\u00e9rer et al. map, run the above plus\nthe following commands (to retain both maps, change the first command to `cp`\ninstead of `mv`):\n\n```bash\nmv refined_mf.simmap refined_mf_X.simmap\nawk 'NR > 1 { print $1,$2,\"0.0\",$4 }' Refined_genetic_map_b37/female_chrX.txt \\\n    | sed 's/^chr//' >> refined_mf_X.simmap\n```\n\nThis produces a file called `refined_mf_X.simmap`. If simulating with\ninterference the `interfere/nu_p_campbell_X.tsv` file includes parameters for\nthe X chromosome.\n\n**Note:** to output X chromosome data when using an input VCF, [the `--sexes`\noption is required, as described below](#specifying-sexes-of-samples-in-the-input-vcf).\n\n------------------------------------------------------\n\nInput VCF file\n--------------\n\nWhen genetic data are needed, an input VCF is required to be provided with the\n`-i` option. Given such a VCF, Ped-sim randomly samples individuals from this\ndata and uses them as founders. The VCF must contain phased data for all\nindividuals, with no missing data for any site. As most phasers automatically\nimpute missing data, the latter requirement should be to easy to meet.\n\nThe input VCF file can be gzipped, and if it is, Ped-sim prints the output VCF\nin gzipped format (but this output VCF is not bgzipped).\n\n------------------------------------------------------\n\nSpecifying sexes of samples in the input VCF\n--------------------------------------------\n\nBy default, Ped-sim treats the input samples as asexual, assigns them to\nfounders uniformly at random, and will only output autosomal genotypes. To\neither respect the sexes of the input samples for autosomal data or to\ngenerate output VCF data for the X chromosome, the sexes of the input VCF\nsamples must be specified. Use the `--sexes <file>` option to supply this\ninformation. It should have one line per sample of the form:\n\n    [sample id] [sex (M/F)]\n\nNote that to simulate data on the X chromosome, the genetic map must contain\npositions for the X.\n\n------------------------------------------------------\n\nCrossover model\n---------------\n\nPed-sim performs simulation from either of two crossover models: one that\nincorporates crossover interference, or a Poisson model. When the necessary\nparameters for crossover interference are available, we recommend using this\nmodel, as it is motivated by biological data and produces quite different\nresults than a Poisson model. The two options for crossover models that Ped-sim\nsupports are below.\n\n### Crossover interference model: `--intf <file>`\n\nThe `--intf <file>` option simulates from the [Housworth and Stahl (2003)](http://www.cell.com/ajhg/fulltext/S0002-9297%2807%2963904-4)\ncrossover model. This model requires specification of `nu` and `p`\nparameters for each chromosome. The `interference` subdirectory in the\nrepository contains a file `nu_p_campbell.tsv` with estimates of these\nparameters for the human autosomes from [Campbell et al. (2015)](https://www.nature.com/articles/ncomms7260).\nIt also contains `nu_p_campbell_X.tsv` which includes the X chromosome.\n\nAs with the VCF, the interference file must list chromosomes in the same order\nas the genetic map, and the chromosome names must be identical to the genetic\nmap. The `--intf` file requires parameters to be given for both sexes and\nrequires a genetic map for both males and females. Ped-sim will print an error\nwhen running with `--intf` if the genetic map only has one set of map\npositions.\n\nThe format of the interference file is:\n\n    [chromosome] [nu_0] [p_0] [nu_1] [p_1]\n\nThe `[nu_0]` and `[p_0]` parameters correspond to the first genetic map given\n(see [Map file](#map-file)), which is assumed to be male, and the `[nu_1]`\nand `[p_1]` parameters correspond to the second genetic map, which is assumed\nto be female.\n\n### Poisson crossover model: `--pois`\n\nUse the `--pois` option to simulate using a Poisson crossover model.\n\n------------------------------------------------------\n\nOutput IBD segments file\n------------------------\n\nPed-sim generates a list of all simulated IBD segments among relative pairs\nwhenever both samples have been requested to be printed. This file has nine\nfields:\n\n    [sample 1] [sample 2] [chromosome] [physical position start] [physical position end] [IBD type] [genetic position start] [genetic position end] [genetic length (end - start)]\n\nThe IBD type is one of `IBD1`, `IBD2` or `HBD`. `IBD1` indicates the pair shares\none IBD segment (on one of their two haplotypes) in the interval, and `IBD2`\nindicates the pair shares two segments IBD in the region. `HBD` stands for\nhomozygous by descent, also called a run of homozygosity (ROH), which is a\nregion where an individual is IBD with themselves. The latter only occurs in\nthe presence of inbreeding.\n\n------------------------------------------------------\n\nOutput VCF file\n---------------\n\nThe output VCF contains the simulated individuals, including only those samples\nrequested to be printed in the def file. For any generation in which there is a\nrequest to print one or more samples, the simulator prints any spouses in that\ngeneration as well as the primary branch individuals. See below for a\ndescription of the sample ids of the simulated individuals.\n\nBy default, the output VCF file is gzipped (Note: **not** bgzip'd) if the input\nis gzipped. To make the output non-gzipped, use `--nogz`.\n\n------------------------------------------------------\n\nOutput log file\n---------------\n\nInformation about the simulation run appears in the log file and is a copy of\nwhat is printed to the console during execution. Notably this includes the\nrandom seed used for a given simulation. Supplying the same input files with\nthe same random seed (assignable with the `--seed` option) will produce the\nsame simulation results.\n\n------------------------------------------------------\n\nSample ids for simulated individuals <a name=\"samp-ids\"></a>\n------------------------------------\n\nThe simulated individuals' sample ids have the format\n`[name][#]_g[#]-b[#]-i[#]`, or for spouses of reproducing individuals,\n`[name][#]_g[#]-b[#]-s[#]`. Here, `[name]` is the pedigree name given in the\ndef file. The first number `[#]` is the copy (i.e., replicate) number of the\npedigree which ranges from 1 to the number of copies of the given pedigree\nstructure requested in the def file (i.e., `[#copies]` above). The `g[#]`\nportion of the id gives the generation number of the individual, which ranges\nfrom 1 to the total number of generations in the pedigree. `b[#]` gives the\nbranch number the sample is contained in in the indicated generation; this\nranges from 1 to the total number of branches in that generation. Finally,\n`i[#]` gives the individual number in the given branch and generation. This\nranges from 1 to the total number of samples requested to be simulated in the\ngeneration. Individual `i1` is the reproducing individual that is the parent of\nany descendant branches. When `i1` does have children, his/her founder spouse(s)\nhave the same prefix id but end in `s[#]`, with the number ranging from 1 to\nthe total number of spouses of the `i1` individual. The number of spouses will\nonly be 1 unless parent specifications appear in the def file that indicate more\nfounder spouses should be used.\n\n------------------------------------------------------\n\nOutput fam file\n---------------\n\nWhen using the `--fam` (or `--dry_run`) option, the simulator produces a PLINK\nformat fam file called `[out_prefix]-everyone.fam` with the simulated pedigree\nstructures. This fam file contains **all** generated samples, including those\nthat are not requested to be printed in the def file. This enables the\nrelationships between all samples to be determined from the fam file alone.\n\nBecause the fam file contains all simulated samples, including those that are\nnot requested to be printed, it is for reference only (and to visualize\nstructures with [plot-fam.R](#plotting-pedigree-structures-plot-famr).\n**It should not be used as a replacement for PLINK fam files with PLINK bed,\nbim, and fam data:** use one converted to from the VCF. (Running plink 1.9\nwith `--vcf [out_prefix].vcf --out [out_prefix] --make-bed` generates data\nin PLINK format.)\n\n------------------------------------------------------\n\nDry run for visualizing pedigrees\n---------------------------------\n\nThe `--dry_run` option does several things:\n1. Enables `--fam`.\n2. Only produces one replicate copy of each pedigree.\n3. Disables all other outputs regardless of the options given to Ped-sim\n(so Ped-sim will _not_ print IBD segments, a VCF, BP file, or an MRCA file).\n\nThe intended purpose of this option is to visualize the simulated pedigrees\nwith [plot-fam.R](#plotting-pedigree-structures-plot-famr). That script\nproduces a plot for every pedigree in the fam file it is given, and `--dry_run`\nensures that there is only one copy of each pedigree in the fam file Ped-sim\ngenerates regardless of the number of copies specified in the def file.\n\n------------------------------------------------------\n\nOutput BP file\n--------------\n\nWhen using the `--bp` option, Ped-sim prints a break points (BP) file that lists\ncomplete information about each sample's haplotypes. All founders have a unique\nnumerical id for each of their two haplotypes, starting from 0 and ranging to\n2\\**F*-1, where *F* is the total number of founders in all simulated pedigrees.\nWithin the BP file, there are two lines for every sample requested to be printed\n(according to the def file). Each line begins with the sample id (described\nabove) of the simulated individual, the sex of that person, either `s0` for male\nor `s1` for female, the haplotype that line describes, `h0` or `h1`, and then a\nvariable number of segments for each chromosome.\n\nFor each simulated chromosome, there is starting physical position and one or\nmore break points. The start description is listed as\n\n    [chromosome]|[start physical position]\n\nFollowing this, break points where crossovers occurred are indicated as\n\n    [founder haplotype]:[physical position]\n\nThe range of physical positions between the previous break point (or start\nphysical position for the first segment) descend from `[founder haplotype]`\nnumber. For example, consider:\n\n    grandparent2_g3-b1-i1 s0 h0 22|17178586 9:25639567 8:45864504 6:51039778\n\nThis line describes the haplotypes and break points inherited by an individual\nwith id `grandparent2_g3-b1-i1`. That individual is simulated as male (`s0`),\nand the description is for their first haplotype (`h0`). Only chromosome 22 is\nlisted, and it begins at position `17178586`. Note that the start and end\npositions -- the last break point position on any chromosome -- are dictated by\nthe input genetic map. The first break point `9:25639567` indicates that this\nindividual inherited haplotype 9 from position 17,178,586 through 25,639,567,\ninclusive. The next break point `8:45864504` designates that the individual\ninherited haplotype 8 from position 25,639,568 through 45,864,504. And the final\nbreak point of `6:51039778` says that the individual received haplotype 6 from\nposition 45,864,505 through 51,039,778, the latter of which ends the chromosome.\n\n------------------------------------------------------\n\nOutput MRCA file\n----------------\n\nWith the `--mrca` option, Ped-sim prints a file with the id of the founder in\nwhich every IBD/HBD segment coalesces in. The file has the same line count as\nthe IBD segment file, with entries in each file corresponding to each other.\n\n**Note:** this _may_ lead to more IBD segments being printed. When printing\nsegments, Ped-sim merges adjacent segments, but with `--mrca` this merging\nonly takes place if the adjacent segments descend from the same founder.\n\n------------------------------------------------------\n\nExtra notes: sex-specific maps\n------------------------------\n\nWhen simulating with sex-specific maps, it is necessary to include data for all\nchromosomes in one run. This is because sex is assigned randomly, but only once\nper run. Thus, to maintain consistency of the sex of each individual in a\ngiven pedigree (and across chromosomes), all chromosomes need to be included\nin the same run.\n\n------------------------------------------------------\n\nCiting Ped-sim and related papers\n---------------------------------\n\nIf you use Ped-sim in your work, please cite [Caballero et al. (2019)](https://journals.plos.org/plosgenetics/article?id=10.1371/journal.pgen.1007979);\nif you use the Refined genetic map (named `refined_mf.simmap` in the example\ncode), please cite [Bh\u00e9rer et al. (2017)](http://dx.doi.org/10.1038/ncomms14994);\nand if you use the `interfere/nu_p_campbell.tsv` interference parameters, please\ncite [Campbell et al. (2015)](https://www.nature.com/articles/ncomms7260).\n\n------------------------------------------------------\n\nOther optional arguments\n------------------------\n\n### Specifying random seed: `--seed <#>`\n\nThe `--seed <#>` option enables specification of the random seed to be used.\nWithout this option, the simulator generates a random seed using the current\ntime (including microseconds).\n\n### Using specified set of crossovers: `--fixed_co <filename>`\n\nThe `--fixed_co <filename>` option simulates from crossovers provided in the\nindicated file, which may be from real crossover data. The format of the file\nis one row per crossover, with the following information on each line:\n\n    [proband id] [maternal or paternal] [chromosome] [crossover physical position]\n\nPed-sim ignores any extra fields that follow these four. The first field can\nbe any string (with no white space), and field two must be either `M` or `P`.\nFor a given meiosis, the proband id and the maternal/paternal meiosis type must\nbe the same for each crossover. The simulator randomly assigns crossovers from\na given proband and maternal/paternal type to each meiosis, matching the sex of\nthe parent undergoing meiosis to the maternal/paternal type. It uses all\ncrossovers from a given meiosis except those outside the range of the input\ngenetic map.\n\n**The crossovers must be sorted,** first by proband id, second by\nmaternal/paternal type (so that all the crossovers from a given meiosis appear\nin succession), third by chromosome name, and last by physical position. As with\nother files, the chromosomes must be listed in the same order as the input VCF\n(or genetic map if not using a VCF), and the chromosome names must also be\nidentical to those other files.\n\n### Genotyping error rate: `--err_rate <#>`\n\nTo more accurately mimic real data, the simulator introduces genotyping errors\nat a specified rate, defaulting to 1e-3. Set this value to 0 to keep the\nallelic values identical to those in the founder haplotypes (from the input\nVCF).\n\n**Note: only pedigree samples have genotyping errors introduced;\n`--retain_extra` samples maintain their original calls**\n\n### Rate of opposite homozygote errors: `--err_hom_rate <#>`\n\nSNP array genotype calling works by clustering allele intensities among a set\nof samples. So if an individual is truly homozygous, its intensities are more\nlikely to fall in either the correct cluster or the heterozygous cluster, with\na lower probability of being called homozygous for the opposite allele.  While\nwe are unaware of a study that looks at error rates by \"true\" genotype class in\nSNP array data, the `--err_hom_rate` option provides the ability to produce\ndifferent rates of errors for genotypes that are truly homozygous. The default\nrate for generating an erroneous genotype that is homozygous for the opposite\nalleles relative to the truth is 0, so errors in homozygous genotypes produce a\nheterozygote. If set to, say, .1, whenever Ped-sim is changing a homozygous\ngenotype to an erroneous value, 10% of the time it assigns the genotype as\nhomozygous for the opposite allele, and 90% of the time it uses a heterozygous\ngenotype. For equal rates of both these classes, set the rate for this option\nto .5. Values even as high as .1 are likely to be fairly unrealistic (based on\nsome internal analyses) and so the default rate is 0.\n\n### Missingness rate: `--miss_rate <#>`\n\nAs real data includes missingness, the simulator introduces missing genotype\ncalls at a rate specified by this parameter, with a default of 1e-3. Set this\nvalue to 0 for no missing genotypes.\n\nPed-sim allows either `--miss_rate` or `--pseudo_hap`, but not both.\n\n**Note: only pedigree samples have sites set to missing; `--retain_extra`\nsamples maintain their original calls**\n\n### Pseudo-haploid rate: `--pseudo_hap <#>`\n\nThe `--pseudo_hap` option generates pseudo-haploid data with mean pseudo-haploid\ncoverage given by the argument (e.g., `--pseudo_hap .1` will randomly select\nsites with data at a rate of .1, and the remaining sites will be missing data).\nSites that do have data are all haploid for random allele sampled from the two\noriginal ones and are coded as homozygous.\n\nPed-sim allows either `--miss_rate` or `--pseudo_hap`, but not both.\n\n**Note: only pedigree samples have sites set to missing or pseudo-haploid;\n`--retain_extra` samples maintain their original calls**\n\n### Maintaining phase in output: `--keep_phase`\n\nBy default the simulator produces a VCF with unphased genotypes. The\n`--keep_phase` option will instead generate a VCF in which the samples are\nphased.\n\n### X chromosome name: `-X <string>`\n\nBy default, all chromosomes are simulated as if they are autosomal with the\nexception of the X chromosome. Any input chromosome in the genetic map whose\nname is (by default) 'X' is modeled as an X chromosome within males: they\ninherit only one copy from their mothers and only transmitting their X to their\nfemale offspring. (To prevent recombination, the genetic map file should have\n0.0 length in males, as generated by the [bash code above for a map in humans](#map-file).)\nThe `-X` option allows this name to be changed in case your map and VCF\n(if using) have a different label such as `chrX`.\n\n### Listing input sample ids used as founders: `--founder_ids`\n\nPed-sim assigns input samples as founders in the pedigrees it simulates. The\n`--founder_ids` option prints a file called `[out_prefix].ids` that contains\ntwo columns listing each founder sample id followed by the corresponding input\nsample id Ped-sim assigned to that founder.\n\n### Retaining extra input samples: `--retain_extra <#>`\n\nThe simulator uses samples from the input VCF as founder individuals and will\nexit if there are too few samples in the VCF to do the simulation. If requested\nusing `--retain_extra`, the program will also print a specified number of input\nsamples that were not used as founders in the simulations. If the number is\nless than 0 (e.g., `--retain_extra -1`), the simulator prints all unused input\nsamples. If the value is greater than 0, say 100, but fewer than this number of\nunused samples exist, the simulator prints all the available samples. When the\nrequested number to print is less than the number available, the simulator\nrandomly selects the samples to print from among all that were not used as\nfounders.\n\n------------------------------------------------------\n\nExtraneous tools\n================\n\nPlotting pedigree structures: `plot-fam.R`\n------------------------------------------\n\nThe `plot-fam.R` script plots the pedigree structures produced by Ped-sim (or\nindeed for any PLINK format fam file). It requires the\n[kinship2](https://cran.r-project.org/web/packages/kinship2/index.html)\nR package and works by running\n\n    ./plot-fam.R [base name]\n\nThis plots all pedigree structures given in the `[base name].fam` file. The\noutput files are named `[base name]-[family id].pdf`, with a file for each\nfamily id (first column) in the fam file. Use either the `--dry_run` or\n`--fam` Ped-sim option to get a `.fam` file.\n\n**Be mindful of the number of files this will produce:** it generates a pdf for\neach *copy* of all the family structures in the file. Using the Ped-sim\n`--dry_run` option sets the number of copies of each structure to 1 (whereas\n`--fam` produces a `.fam` file with _all_ family copies included).\n\n**Known bug:** If the def file calls for all individuals to be printed, the\n`plot-fam.R` script will give the error\n\n    Error in pedigree(dat[sel, 2], dat[sel, 3], dat[sel, 4], dat[sel, 5],  :\n    Invalid code for affected status\n    Execution halted\n\nThis is caused by having the 'affected' status be the same for all samples. A\nworkaround is to edit the fam file and set the affected (column 6) status for\nat least one individual to something different, e.g., -9.\n\nConverting fam to def file: `fam2def.py`\n----------------------------------------\n\nWith thanks to [Sara Mathieson](https://smathieson.sites.haverford.edu/),\nconversion from PLINK fam format to Ped-sim's def format is possible with\n`fam2def.py`. Simply run\n\n    ./fam2def.py -i [filename.fam] -o [out.def]\n\nto convert `[filename.fam]` to `[out.def]`.\n\n**Please note:** at present it is not possible to specify the sexes of\nindividuals using `fam2def.py`.\n"
      },
      "source": "https://raw.githubusercontent.com/williamslab/ped-sim/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8941170550454947,
      "result": {
        "original_header": "Recent updates",
        "type": "Text_excerpt",
        "value": "Version 1.4.2 introduces the [`--dry_run`](#dry-run-for-visualizing-pedigrees)\noption. \nVersion 1.3 now supports branch-specific sex assignments in the\n[def file](#def-file). \n"
      },
      "source": "https://raw.githubusercontent.com/williamslab/ped-sim/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9417504572357404,
      "result": {
        "original_header": "Compiling",
        "type": "Text_excerpt",
        "value": "Ped-sim requires **either** the [boost](https://www.boost.org/) developmental\nlibraries _or_ [GSL](https://www.gnu.org/software/gsl/) (see below regarding\nGSL). With one of these libraries in place (and an update to the Makefile for\nGSL), most Linux/Unix-based users should simply be able to compile by running \n    cp Makefile-gsl Makefile\n    make \n"
      },
      "source": "https://raw.githubusercontent.com/williamslab/ped-sim/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9941449488570019,
      "result": {
        "original_header": "Map file <a name=\"map-file\"></a>",
        "type": "Text_excerpt",
        "value": "A high resolution human sex-specific genetic map is available [here](https://github.com/cbherer/Bherer_etal_SexualDimorphismRecombination),\nand is described in [Bh\u00e9rer et al. (2017)](http://dx.doi.org/10.1038/ncomms14994).\nTo generate an autosomal map file in the format the simulator requires with\nboth male and female genetic positions, run the following bash commands:\n```bash\nwget https://github.com/cbherer/Bherer_etal_SexualDimorphismRecombination/raw/master/Refined_genetic_map_b37.tar.gz\ntar xvzf Refined_genetic_map_b37.tar.gz\nprintf \"#chr\\tpos\\tmale_cM\\tfemale_cM\\n\" > refined_mf.simmap\nfor chr in {1..22}; do\n  paste Refined_genetic_map_b37/male_chr$chr.txt Refined_genetic_map_b37/female_chr$chr.txt \\\n    | awk -v OFS=\"\\t\" 'NR > 1 && $2 == $6 {print $1,$2,$4,$8}' \\\n    | sed 's/^chr//' >> refined_mf.simmap;\ndone\n```\n \nTo include the X chromosome from the Bh\u00e9rer et al. map, run the above plus\nthe following commands (to retain both maps, change the first command to `cp`\ninstead of `mv`):\n```bash\nmv refined_mf.simmap refined_mf_X.simmap\nawk 'NR > 1 { print $1,$2,\"0.0\",$4 }' Refined_genetic_map_b37/female_chrX.txt \\\n    | sed 's/^chr//' >> refined_mf_X.simmap\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/williamslab/ped-sim/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8617933996976622,
      "result": {
        "original_header": "Crossover model",
        "type": "Text_excerpt",
        "value": "Other optional arguments\n------------------------ \nWith thanks to [Sara Mathieson](https://smathieson.sites.haverford.edu/),\nconversion from PLINK fam format to Ped-sim's def format is possible with\n`fam2def.py`. Simply run \n**Please note:** at present it is not possible to specify the sexes of\nindividuals using `fam2def.py`.\n \n"
      },
      "source": "https://raw.githubusercontent.com/williamslab/ped-sim/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8884209247570347,
      "result": {
        "original_header": "Crossover model",
        "type": "Text_excerpt",
        "value": "### Crossover interference model: `--intf <file>` \nOutput IBD segments file\n------------------------ \nOutput VCF file\n--------------- \nOutput log file\n--------------- \nOutput fam file\n--------------- \nOutput BP file\n-------------- \nOutput MRCA file\n---------------- \n    ./plot-fam.R [base name] \nConverting fam to def file: `fam2def.py`\n---------------------------------------- \n    ./fam2def.py -i [filename.fam] -o [out.def] \n"
      },
      "source": "https://raw.githubusercontent.com/williamslab/ped-sim/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8358056564454527,
      "result": {
        "original_header": "Basic usage:",
        "type": "Text_excerpt",
        "value": "    ./ped-sim -d <in.def> -m <map file> -o <out_prefix> --intf <filename> \n"
      },
      "source": "https://raw.githubusercontent.com/williamslab/ped-sim/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.872247804468413,
      "result": {
        "original_header": "Quick start",
        "type": "Text_excerpt",
        "value": "    ./ped-sim -d example/second_deg.def -m refined_mf.simmap \\\n      -o output --intf interfere/nu_p_campbell.tsv \n"
      },
      "source": "https://raw.githubusercontent.com/williamslab/ped-sim/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8603249716052425,
      "result": {
        "original_header": "Crossover interference model: `--intf &lt;file&gt;`",
        "type": "Text_excerpt",
        "value": "Def file\n-------- \n### Example def file: `example/cousins-1st_half_to_3rd.def` \n### Example def file: `example/second_deg.def` \n### Example def file: `example/full_half_1st_2nd_cousins.def` \n### Example def file: `example/cousins-parent-sex-assign.def` \nMap file <a name=\"map-file\"></a>\n-------- \nInput VCF file\n-------------- \n"
      },
      "source": "https://raw.githubusercontent.com/williamslab/ped-sim/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/williamslab/ped-sim/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "GNU General Public License v3.0",
        "spdx_id": "GPL-3.0",
        "type": "License",
        "url": "https://api.github.com/licenses/gpl-3.0",
        "value": "https://api.github.com/licenses/gpl-3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    {one line to give the program's name and a brief idea of what it does.}\n    Copyright (C) {year}  {name of author}\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    {project}  Copyright (C) {year}  {fullname}\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n"
      },
      "source": "https://raw.githubusercontent.com/williamslab/ped-sim/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ped-sim"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "williamslab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 186664,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 14022,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 1943,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 1387,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 743,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/williamslab/ped-sim/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "williamslab",
          "type": "User"
        },
        "date_created": "2024-08-25T04:10:14Z",
        "date_published": "2024-08-25T04:16:29Z",
        "description": "Add the `--dry_run` option to more smoothly visualize the pedigrees Ped-sim generates for a given def file.",
        "html_url": "https://github.com/williamslab/ped-sim/releases/tag/v1.4.2",
        "name": "Version 1.4.2",
        "release_id": 171817962,
        "tag": "v1.4.2",
        "tarball_url": "https://api.github.com/repos/williamslab/ped-sim/tarball/v1.4.2",
        "type": "Release",
        "url": "https://api.github.com/repos/williamslab/ped-sim/releases/171817962",
        "value": "https://api.github.com/repos/williamslab/ped-sim/releases/171817962",
        "zipball_url": "https://api.github.com/repos/williamslab/ped-sim/zipball/v1.4.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "williamslab",
          "type": "User"
        },
        "date_created": "2024-07-31T19:32:50Z",
        "date_published": "2024-07-31T19:38:07Z",
        "description": "Print the Ped-sim founder ids to the .ids file when using `--founder_ids` (regardless of their print status in the def file).",
        "html_url": "https://github.com/williamslab/ped-sim/releases/tag/v1.4.1",
        "name": "Version 1.4.1",
        "release_id": 168110841,
        "tag": "v1.4.1",
        "tarball_url": "https://api.github.com/repos/williamslab/ped-sim/tarball/v1.4.1",
        "type": "Release",
        "url": "https://api.github.com/repos/williamslab/ped-sim/releases/168110841",
        "value": "https://api.github.com/repos/williamslab/ped-sim/releases/168110841",
        "zipball_url": "https://api.github.com/repos/williamslab/ped-sim/zipball/v1.4.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "williamslab",
          "type": "User"
        },
        "date_created": "2022-01-20T20:13:52Z",
        "date_published": "2022-01-20T20:15:21Z",
        "description": "If males have heterozygous genotypes on the X chromosome, Ped-sim now always picks alleles from the first haplotype.",
        "html_url": "https://github.com/williamslab/ped-sim/releases/tag/v1.4",
        "name": "Version 1.4",
        "release_id": 57609880,
        "tag": "v1.4",
        "tarball_url": "https://api.github.com/repos/williamslab/ped-sim/tarball/v1.4",
        "type": "Release",
        "url": "https://api.github.com/repos/williamslab/ped-sim/releases/57609880",
        "value": "https://api.github.com/repos/williamslab/ped-sim/releases/57609880",
        "zipball_url": "https://api.github.com/repos/williamslab/ped-sim/zipball/v1.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "williamslab",
          "type": "User"
        },
        "date_created": "2022-01-02T01:27:01Z",
        "date_published": "2022-01-02T01:31:16Z",
        "description": "Remove unnecessary memcpy.c.",
        "html_url": "https://github.com/williamslab/ped-sim/releases/tag/v1.3.5",
        "name": "Version 1.3.5",
        "release_id": 56260648,
        "tag": "v1.3.5",
        "tarball_url": "https://api.github.com/repos/williamslab/ped-sim/tarball/v1.3.5",
        "type": "Release",
        "url": "https://api.github.com/repos/williamslab/ped-sim/releases/56260648",
        "value": "https://api.github.com/repos/williamslab/ped-sim/releases/56260648",
        "zipball_url": "https://api.github.com/repos/williamslab/ped-sim/zipball/v1.3.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "williamslab",
          "type": "User"
        },
        "date_created": "2021-11-25T18:18:23Z",
        "date_published": "2021-12-07T23:52:27Z",
        "description": "## What's Changed\r\n* clarify docs re #13 by @stephenturner in https://github.com/williamslab/ped-sim/pull/14\r\n* include stdint.h  by @stephenturner in https://github.com/williamslab/ped-sim/pull/17\r\n\r\n## New Contributors\r\n* @stephenturner made their first contribution in https://github.com/williamslab/ped-sim/pull/14\r\n\r\n**Full Changelog**: https://github.com/williamslab/ped-sim/commits/v1.3.4",
        "html_url": "https://github.com/williamslab/ped-sim/releases/tag/v1.3.4",
        "name": "Version 1.3.4",
        "release_id": 54833344,
        "tag": "v1.3.4",
        "tarball_url": "https://api.github.com/repos/williamslab/ped-sim/tarball/v1.3.4",
        "type": "Release",
        "url": "https://api.github.com/repos/williamslab/ped-sim/releases/54833344",
        "value": "https://api.github.com/repos/williamslab/ped-sim/releases/54833344",
        "zipball_url": "https://api.github.com/repos/williamslab/ped-sim/zipball/v1.3.4"
      },
      "technique": "GitHub_API"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dry run for visualizing pedigrees",
        "parent_header": [
          "Pedigree Simulator"
        ],
        "type": "Text_excerpt",
        "value": "The `--dry_run` option does several things:\n1. Enables `--fam`.\n2. Only produces one replicate copy of each pedigree.\n3. Disables all other outputs regardless of the options given to Ped-sim\n(so Ped-sim will _not_ print IBD segments, a VCF, BP file, or an MRCA file).\n\nThe intended purpose of this option is to visualize the simulated pedigrees\nwith [plot-fam.R](#plotting-pedigree-structures-plot-famr). That script\nproduces a plot for every pedigree in the fam file it is given, and `--dry_run`\nensures that there is only one copy of each pedigree in the fam file Ped-sim\ngenerates regardless of the number of copies specified in the def file.\n\n------------------------------------------------------\n"
      },
      "source": "https://raw.githubusercontent.com/williamslab/ped-sim/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 17:57:55",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 25
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Basic usage:",
        "parent_header": [
          "Pedigree Simulator"
        ],
        "type": "Text_excerpt",
        "value": "    ./ped-sim -d <in.def> -m <map file> -o <out_prefix> --intf <filename>\n\nTo use a non-interference crossover model, i.e., a Poisson model, use:\n\n    ./ped-sim -d <in.def> -m <map file> -o <out_prefix> --pois\n\nThe above both produce a file `[out_prefix].seg` containing IBD segments and\n`[out_prefix].log`, a log of what Ped-sim printed to stdout.\n\nWith the above input options, Ped-sim does not produce genetic data, but only\nIBD segments for artificial (ungenotyped) relatives. To simulate relatives with\ngenetic data (and using crossover interference modeling), run:\n\n    ./ped-sim -d <in.def> -m <map file> -i <in.vcf/in.vcf.gz> -o <out_prefix> --intf <filename>\n\nWhich will generate a third output file, `[out_prefix].vcf` (or\n`[out_prefix].vcf.gz`),\n \nRun `ped-sim` without arguments to see a summary of options. This document\ngives a detailed description of the input and output files and all options.\n\n "
      },
      "source": "https://raw.githubusercontent.com/williamslab/ped-sim/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick start",
        "parent_header": [
          "Pedigree Simulator",
          "Basic usage:"
        ],
        "type": "Text_excerpt",
        "value": "To use Ped-sim to simulate from the def file `example/second_deg.def`:\n\n1. Obtain a genetic map. For humans, links and code to generate a sex-specific\nmap in Ped-sim format are [below](#map-file).\n2. Run Ped-sim:\n\n    ./ped-sim -d example/second_deg.def -m refined_mf.simmap \\\n      -o output --intf interfere/nu_p_campbell.tsv\n\nThis uses the [below](#map-file) genetic map, and [human crossover interference\nparameters](https://www.nature.com/articles/ncomms7260) stored in `interfere/`.\nThe `output.seg` file is the primary result of this run and lists the IBD\nsegments the samples share. This example does not include any input genetic\ndata and so does not produce any output genetic data.\n\n------------------------------------------------------\n"
      },
      "source": "https://raw.githubusercontent.com/williamslab/ped-sim/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example def file: `example/cousins-1st_half_to_3rd.def`",
        "parent_header": [
          "Pedigree Simulator",
          "Def file"
        ],
        "type": "Text_excerpt",
        "value": "The first def entry in `example/cousins-1st_half_to_3rd.def` is\n\n    def full-1cousin 10 3\n    3 1\n\nThe first line names the pedigree `full-1cousin`, and calls for 10 replicate\npedigrees to be generated. The last column, 3, says that the `full-1cousin`\npedigree spans three generations.\n\nThe following is a plot of the `full-1cousin` pedigree, with generations\nlabeled and outlined in red, branches labeled and outlined in blue, and `i1`\nindividuals circled in purple (in generations 1 and 2). Only the individuals in\ngeneration 3 are printed, and these individuals' shapes are filled in black;\nnon-printed individuals are unfilled. The sexes of these individuals are\nrandom. (Use the [plot-fam.R](#plotting-pedigree-structures-plot-famr) script\nto generate black and white portions of this plot for your def file.)\n\n![Pedigree plot of full-1cousin](example/full-1cousin1.png?raw=true \"Pedigree plot of full-1cousin\")\n\nThis definition does not mention generations 1 and 2 (the line that reads\n`3 1` refers to generation 3), so those generations have the default number of\nbranches and do not have data printed for the individuals in them. By default,\ngeneration 1 has one branch that contains one random individual (the `i1`\nindividual) and all spouses of this person. (For this pedigree, the generation\n1 branch contains only one couple.)\n\nGeneration 2 has the default two branches, with the `i1` individuals in these\nbranches being the children of the branch in generation 1 (strictly speaking,\nof the couple in that branch). This means that the `i1` individuals in these\nbranches are full siblings of each other.\n\nThe def line `3 1` says that in generation 3, 1 sample per branch should be\nprinted, and it does not specify the number of branches in this generation.\nThis means that generation 3 also has the default branch count, which is\nassigned to be the same as the previous generation, or two branches. These\nbranches contain the children of the `i1` individuals in the corresponding\nbranches in the previous generation, so generation 2, branch 1's child is in\ngeneration 3, branch 1, and generation 2, branch 2's child is in generation 3,\nbranch 2.\n\nThis completes the definition of the pedigree, which will print a pair of\nfirst cousins.\n\nThe next two definitions are for second and third cousins:\n\n    def full-2cousin 10 4\n    4 1\n    \n    def full-3cousin 10 5\n    5 1\n\nThese pedigrees differ from the first cousin pedigree in their names and\nnumbers of generations: 4 and 5 for second and third cousins, respectively.\nLike the first cousin pedigree, they use the default branch counts for all\ngenerations. This means that generation 1 contains one branch, and all other\ngenerations have two branches. When successive generations have the same number\nof branches, branch _i_ in one generation contains the parents of branch _i_ in\nthe next generation. (So branch 2's parents are in the previous generation's\nbranch 2.)\n\nThe `4 1` and `5 1` lines specify that one sample per branch should be printed\nin these generations, and lead to the production of the second and third\ncousins as needed.\n\nThese two-line def entries are perhaps the simplest type and generate pairs of\nfull cousins of any distance (determined by the number of generations).\n\nPed-sim also generates half-cousins, and the def file contains two more entries\nfor printing half-first and half-second cousins. These involve a few more\ninstructions:\n\n    def half-1cousin 10 3\n    2 0 2   1:1  2:1\n    3 1\n\nThis specifies a pedigree with the name `half-1cousin` with 10 replicate copies\nto be produced and 3 generations in the pedigree. As with the full first cousin\ncase, generation 1 uses the default of one branch.\n\nThe first part of the generation 2 definition reads `2 0 2`. The 0 indicates\nthat no samples from generation 2 should be printed, and the third column says\nthat this generation has 2 branches. These are in fact the default settings,\nbut must be explicitly listed ahead of the second, non-default part of this\nline.\n\nThe latter half of the generation 2 definition reads `1:1  2:1`. Here, `1:1`\nsays that the current generation's branch 1 should contain a child of the\nprevious generation's (generation 1's) branch 1. Similarly, `2:1` says that the\ncurrent generation's branch 2 should contain a child of the previous\ngeneration's branch 1. So both branches in generation 2 are children of the\nsame person, but because the specifications are separated, they are children of\ntwo different spouses, so produce half-siblings. In contrast, if this line\nspecified `1,2:1`, the branches would contain full siblings.\n\nWith the two branches in generation 2 containing half-siblings, the remainder\nof the definition is the same as for full cousins, with `3 1` indicating that\nin generation 3, 1 sample per branch should be printed. This line leaves the\nbranch count as the default, meaning that it has two branches with the default\nparents from the previous generation.\n\nThe half-second cousin definition is:\n\n    def half-2cousin 10 4\n    2 0 2   1:1  2:1\n    4 1\n\nThis has the same behavior in generation 2 as in the `half-1cousin` definition,\nyielding two branches with half-siblings in them. It keeps default behavior for\ngeneration 3, with two branches that descend from generation 2. The `4 1` line\nagain calls the printing of 1 person per branch (with a default of two\nbranches) in generation 4. The printed pair are half-second cousins, as desired.\n"
      },
      "source": "https://raw.githubusercontent.com/williamslab/ped-sim/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example def file: `example/second_deg.def`",
        "parent_header": [
          "Pedigree Simulator",
          "Def file"
        ],
        "type": "Text_excerpt",
        "value": "The first entry in the `example/second_deg.def` file simulates 10 pedigrees\nnamed `grandparent`, with data printed for two grandparents and one grandchild.\n\n    def grandparent 10 3\n    1 1\n    2 0 1\n    3 1\n\nThis indicates that the founder individual (and therefore his/her spouse) from\nthe branch in generation 1 (note: the default is one branch in generation 1)\nshould have data printed. Generation 2 has a default of two branches, but since\nwe only want one grandchild, we explicitly set this to one branch and do not\nprint individuals from that generation. Generation 3 prints one individual, and\nit has only one branch since unspecified branch numbers are the same as the\nprevious generation and that previous generation (2) has only one branch.\n\nThe second entry simulates 10 pedigrees named `avuncular`:\n\n    def avuncular 10 3\n    2 1 2  1n\n    3 1 1\n\nHere, generation 1 has the default of one branch with no data printed.\nGeneration 2 has two branches that are the full sibling children of the\nfounders in generation 1. The sibling in branch 2 gets printed, but because of\nthe no-print `1n` branch specification, neither member of branch 1 (i.e.,\nthe `i1` individual [who is branch 2's full sibling] and his/her spouse) get\nprinted. Finally, generation 3 has one branch with one individual (the child\nof generation 2's branch 1) that gets printed. Thus, for each replicate\npedigree, the program produces a pair of samples with an avuncular relationship.\n\nThe third entry simulates 10 pedigrees named `hs` for half-sibling:\n\n    def hs 10 2\n    2 1 2 1:1 2:1\n\nHere, generation 1 has the default of one branch with no data printed.\nGeneration 2 has two branches, and with the parent specification of `1:1 2:1`,\nboth these branches have the reproducing individual from branch 1 as a parent.\nThey are both also children of two distinct founders and are therefore\nhalf-siblings. This prints two individuals per pedigree, one from each of the\nbranches in generation 2.\n\nThe last entry simulates 10 pedigrees named `dc` for double cousins:\n\n    def dc 10 3\n    1 0 2\n    2 0 4\n    3 1 2  1:1_3  2:2_4\n\nGeneration 1 has two branches, both containing founders. Generation 2 has four\nbranches: branches 1 and 2 are full sibling children of generation 1, branch 1;\nbranches 3 and 4 are also full siblings and the children of generation 1,\nbranch 2. In generation 3, there are only 2 branches: branch 1 contains the\nchild of individuals from generation 2, branches 1 and 3; branch 2 contains the\nchild of individuals from generation 2, branches 2 and 4. As the individuals in\nbranches 1 and 2 are full siblings and those in branches 3 and 4 are also full\nsiblings, the third generation samples are \"double cousins.\" Only these\ntwo double cousin individuals from the last generation are printed.\n"
      },
      "source": "https://raw.githubusercontent.com/williamslab/ped-sim/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example def file: `example/full_half_1st_2nd_cousins.def`",
        "parent_header": [
          "Pedigree Simulator",
          "Def file"
        ],
        "type": "Text_excerpt",
        "value": "The first entry in the `example/full_half_1st_2nd_cousin.def` file simulates\na single pedigree that has four generations:\n\n    def full1-2-cous 1 4\n    3 0 4\n    4 1\n\nBecause the first two generations are not explicitly listed, they have the\ndefault number of branches: one and two for generations 1 and 2, respectively.\nSince the number of samples to print is 0 by default, no samples are printed\nfrom these generations. In generation 3, there are four branches, with\ngeneration 2, branch 1 containing the parents of branches 1 and 2, and\ngeneration 2, branch 2 containing the parents of branches 3 and 4. No samples\nfrom generation 3 are printed. Finally, generation 4 has four branches, the\nsame as the previous generation, with one sample printed per branch, or a total\nof four individuals printed. Because the four branches in generation 3 included\ntwo sets of full siblings, two pairs of the four samples in generation 4 are\nfirst cousins. The other pairs are second cousins, and their most recent common\nancestors are in generation 1.\n\nThe second entry in this file is very similar to the first:\n\n    def half1-2-cous 1 4\n    2 0 2 1:1 2:1\n    3 0 4\n    4 1\n\nThe only difference between this pedigree and the one above is in generation 2.\nThis generation once again has two branches, and each branch has the\nreproducing individual from generation 1, branch 1 as one of their parents.\nHowever, because the specification is separated for the two branches and\nincludes only branch number 1, these branches are the offspring of two\ndifferent founder spouses and thus contain half-siblings. In consequence, the\nultimate descendants in generation 4 are a mix of (full) first cousins and\nhalf-second cousins.\n"
      },
      "source": "https://raw.githubusercontent.com/williamslab/ped-sim/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example def file: `example/cousins-parent-sex-assign.def`",
        "parent_header": [
          "Pedigree Simulator",
          "Def file"
        ],
        "type": "Text_excerpt",
        "value": "Example pedigrees with sex assignments are in\n`example/cousins-parent-sex-assign.def`, which includes the three possible ways\nthat full first cousins can be related: through two brothers, two sisters, or a\nsister and brother. Taking the second definition as an example:\n\n    def sis-1cousin 10 3\n    2 0 2  1sF  2sF\n    3 1\n\nAs in other example pedigrees for cousins, generation two contains two branches\nand these default to having generation 1, branch 1 as their parent branch (and\nthey are therefore full siblings). The sex assignments are the last two fields\non the generation 2 line: `1sF` indicates that the reproducing (`i1`)\nindividual in branch 1 should be female and `2sF` similarly says that\nbranch 2's `i1` individual needs to be female.\n"
      },
      "source": "https://raw.githubusercontent.com/williamslab/ped-sim/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Other example def files",
        "parent_header": [
          "Pedigree Simulator",
          "Def file"
        ],
        "type": "Text_excerpt",
        "value": "The `example/once-removed.def` def file includes three pedigrees that make use\nof the `no-print` branch specification in order to print relative pairs from\ndifferent generations (including first cousins once removed).\n\n------------------------------------------------------\n"
      },
      "source": "https://raw.githubusercontent.com/williamslab/ped-sim/master/README.md",
      "technique": "header_analysis"
    }
  ]
}