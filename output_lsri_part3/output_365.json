{
  "application_domain": [
    {
      "confidence": 40.75,
      "result": {
        "type": "String",
        "value": "Natural Language Processing"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/samtools/htscodecs"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-05-23T13:30:23Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-04T15:25:50Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Custom compression for CRAM and others."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9330997334691457,
      "result": {
        "original_header": "Htscodecs",
        "type": "Text_excerpt",
        "value": "See the NEWS file for a list of updates and version details. \nThis repository implements the custom CRAM codecs used for \"EXTERNAL\"\nblock types.  These consist of two variants of the rANS codec (8-bit\nand 16-bit renormalisation, with run-length encoding and bit-packing\nalso supported in the latter), a dynamic arithmetic coder, and custom\ncodecs for name/ID compression and quality score compression derived\nfrom fqzcomp. \n\nThey come with small command line test tools to act as both\ncompression exploration programs and as part of the test harness. \n"
      },
      "source": "https://raw.githubusercontent.com/samtools/htscodecs/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.990485831585704,
      "result": {
        "original_header": "Building",
        "type": "Text_excerpt",
        "value": "The library can be used as a git sub-module or as a completely\nseparate entity.  If you are attempting to make use of these codecs\nwithin your own library, such as we do within Staden io_lib, it may be\nuseful to configure this with `--disable-shared --with-pic'.\n \n"
      },
      "source": "https://raw.githubusercontent.com/samtools/htscodecs/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.92247640276282,
      "result": {
        "original_header": "Intel GDS/Downfall",
        "type": "Text_excerpt",
        "value": "The new Intel microcode to patch the Gather Data Sampling (GDS) bug\nhas severely impacted the performance of the AVX2 and AVX512 gather\nSIMD intrinsics.  So much so that simulating vector gather\ninstructions using traditional scalar code is now more performant.\nDue to the slower AVX512 gathers on AMD Zen4, the simulated gather\ncode is faster there too, even without having a Downfall mitigation. \nUnfortunately this simulated code is slower than the original gather\ncode when run on an unpatched CPUs.  Without the GDS microcode patch\non Intel CPUs, the simulated gathers slows the rate of decode by\n10-30% and the rate of encode for AVX512 by up to 50%.  The GDS\nmicrocode patch however can slow AVX2 decode and AVX512 encode by\n2-3x. \nIdeally we would auto-detect and select the optimal algorithm, but the\neasy solution is simply to pick the method with the most uniform\nperformance without having bad worst-case rates. \nHence by default the simulated gather implementation is now the\ndefault.  The old code can be reenabled by building with: \n"
      },
      "source": "https://raw.githubusercontent.com/samtools/htscodecs/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8835937965778893,
      "result": {
        "original_header": "Testing",
        "type": "Text_excerpt",
        "value": "There is a \"make check\" rule.  If you're using a modern clang you can\nalso cd to the tests directory and do \"make fuzz\" to build some fuzz\ntesting targets, but you'll likely need to modify Makefile.am first as\nthis has some hard-coded local paths. \nWe also provide test data and some command line tools to demonstrate\nusage of the compression codecs.  These are in the tests directory\nalso. Example usage: \nThe fqzcomp test format is one quality values per line, with an\noptional additional parameter (0 or 1) to indicate READ1 or READ2 flag\nstatus. \nThere is a larger set of test data in the htscodecs-corpus repository\n(https://github.com/jkbonfield/htscodecs-corpus).  If this is cloned\ninto the tests subdirectory of htscodecs then the htscodecs \"make\ncheck\" will also use that larger data set for testing purposes. \n"
      },
      "source": "https://raw.githubusercontent.com/samtools/htscodecs/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9650641011690062,
      "result": {
        "original_header": "API",
        "type": "Text_excerpt",
        "value": "Many functions just take an input buffer and size and return an output\nbuffer, setting *out_size with the decoded size.  NULL is returned for\nerror.  This buffer is malloced and is expected to be freed by the\ncaller.  These are the *`compress` and *`uncompress` functions. \nA second variant sometimes exists where the output buffer is\noptionally allocated by the caller (it may be NULL in which case it\nhas the same operation as above).  If specified, `*out_size` must also\nbe set to the allocated size of `out`.  These are the `compress_to`\nand `uncompress_to` functions. \nThe compress size sometimes needs additional options.  For the rANS\nand arithmetic coder this is the \"order\".  Values of 0 and 1 are\nsimple order-0 and order-1 entropy encoder, but this is a bit field\nand the more advanced codecs have additional options to pass in order\n(so it should really be renamed to flags).  See below.  Fqzcomp\nrequires more input data - also see below.  In all cases, sufficient\ninformation is stored in the compressed byte stream such that the\ndecompression will work without needing these input paramaters. \nFinally the various `compress_bound` functions give the size of buffer\nneeded to be allocated when compressing a block of data. \n"
      },
      "source": "https://raw.githubusercontent.com/samtools/htscodecs/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9786493444351846,
      "result": {
        "original_header": "Static rANS 4x8 (introduced in CRAM v3.0)",
        "type": "Text_excerpt",
        "value": "This is the earlier rANS entropy encoder using 4 rANS states and 8-bit\nrenormalisation, with Order-0 and Order-1 entropy models. \n"
      },
      "source": "https://raw.githubusercontent.com/samtools/htscodecs/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9905059939296258,
      "result": {
        "original_header": "Static rANS 4x16 and 32x16 with bit-pack/RLE (CRAM v3.1):",
        "type": "Text_excerpt",
        "value": "This is a faster version with 16-bit renormalisation and optional\ntransforms (RLE, small alphabet bit-packing, and interleaving of N\nstreams for e.g. 32-bit integer compression).  Additionally the\n`order` field may include bit `RANS_ORDER_X32` in which case a 32-way\nunrolled version will be used instead, with automatic CPU detection\nand dispatching to an appropriate SIMD implementation if available.\n \n"
      },
      "source": "https://raw.githubusercontent.com/samtools/htscodecs/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9927757483301942,
      "result": {
        "original_header": "Adaptive arithmetic coding (CRAM v3.1):",
        "type": "Text_excerpt",
        "value": "These reuse the same `RANS_ORDER` bit fields and abilities above with\nthe exception of X32 as there is currently no unrolling of this code.\n \n"
      },
      "source": "https://raw.githubusercontent.com/samtools/htscodecs/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9711770776017503,
      "result": {
        "original_header": "Name tokeniser (CRAM v3.1):",
        "type": "Text_excerpt",
        "value": "This differs to the general purpose entropy encoders as it takes a\nspecific type of data.  The names should be newline or nul separated\nfor `encode_names`.  `decode_names` will alway return nul terminated\nnames, so you may need to swap these to newlines if you do round-trip\ntests. \nIf non-NULL, last_start_p can be used to point to a partial name if an\narbitrary block of names were supplied that don't end of a whole read\nname. (Is this useful?  Probably not.) \n"
      },
      "source": "https://raw.githubusercontent.com/samtools/htscodecs/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9450876374077737,
      "result": {
        "original_header": "FQZComp Qual (CRAM v3.1):",
        "type": "Text_excerpt",
        "value": "This is derived from the quality compression in fqzcomp.  The input\nbuffer is a concatenated block of quality strings, without any\nseparator.  In order to achieve maximum compression it needs to know\nwhere these separators are, so they must be passed in via the\n`fqz_slice` struct. \nThe fqz_gparams will normally be passed in as NULL and the encoder\nwill automatically select parameters.  If you wish to fine tune the\ncompression methods, see the fqz_params and fqz_gparams structures in\nthe header file.  You may also find the fqz_qual_stats() utility\nfunction helpful for gathering statistics on your quality values. \nFor decompression, the lengths array is optional and may be specified\nas NULL.  If passed in, it must be of size nlengths and it will be\nfilled out with the decoded length of each quality string.  Note\nregardless of whether lengths is NULL or not, the buffer returned will\nbe concatenated values so there is no way to tell where one record\nfinishes and the next starts.  (CRAM itself knows this via other means.)\n \n"
      },
      "source": "https://raw.githubusercontent.com/samtools/htscodecs/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/samtools/htscodecs/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 18
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/samtools/htscodecs/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "samtools/htscodecs"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Htscodecs"
      },
      "source": "https://raw.githubusercontent.com/samtools/htscodecs/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9985329928349328,
      "result": {
        "original_header": "Building",
        "type": "Text_excerpt",
        "value": "If building from git, you'll need to recreate the configure script\nusing autoconf.  \"autoreconf -i\" should work if you have the\nappropriate tools. \nFrom then on, it follows the normal \"./configure; make\" or\n\"mkdir build; cd build; ../configure; make\" rule. \nThe library can be used as a git sub-module or as a completely\nseparate entity.  If you are attempting to make use of these codecs\nwithin your own library, such as we do within Staden io_lib, it may be\nuseful to configure this with `--disable-shared --with-pic'.\n \n"
      },
      "source": "https://raw.githubusercontent.com/samtools/htscodecs/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9501872047847476,
      "result": {
        "original_header": "Testing",
        "type": "Text_excerpt",
        "value": "There is a \"make check\" rule.  If you're using a modern clang you can\nalso cd to the tests directory and do \"make fuzz\" to build some fuzz\ntesting targets, but you'll likely need to modify Makefile.am first as\nthis has some hard-coded local paths. \n    ./fqzcomp_qual -s 1 < dat/q40+dir > /tmp/q40.comp\n    ./fqzcomp_qual  -d < /tmp/q40.comp > /tmp/q40.uncomp\n    awk '{print $1}' dat/q40+dir | md5sum;    # f91473032dd6942e72abec0868f17161\n    awk '{print $1}' /tmp/q40.uncomp | md5sum;# f91473032dd6942e72abec0868f17161 \nThere is a larger set of test data in the htscodecs-corpus repository\n(https://github.com/jkbonfield/htscodecs-corpus).  If this is cloned\ninto the tests subdirectory of htscodecs then the htscodecs \"make\ncheck\" will also use that larger data set for testing purposes. \n"
      },
      "source": "https://raw.githubusercontent.com/samtools/htscodecs/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8675378987125221,
      "result": {
        "original_header": "Testing",
        "type": "Text_excerpt",
        "value": "    ./fqzcomp_qual -s 1 < dat/q40+dir > /tmp/q40.comp\n    ./fqzcomp_qual  -d < /tmp/q40.comp > /tmp/q40.uncomp\n    awk '{print $1}' dat/q40+dir | md5sum;    # f91473032dd6942e72abec0868f17161\n    awk '{print $1}' /tmp/q40.uncomp | md5sum;# f91473032dd6942e72abec0868f17161 \n"
      },
      "source": "https://raw.githubusercontent.com/samtools/htscodecs/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/samtools/htscodecs/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "All files except those explicitly listed below are copyright Genome\nResearch Limited and are made available under the BSD license.\n\n> Redistribution and use in source and binary forms, with or without\n> modification, are permitted provided that the following conditions\n> are met:\n> \n>     (1) Redistributions of source code must retain the above copyright\n>     notice, this list of conditions and the following disclaimer. \n> \n>     (2) Redistributions in binary form must reproduce the above copyright\n>     notice, this list of conditions and the following disclaimer in\n>     the documentation and/or other materials provided with the distribution.  \n>     \n>     (3)The name of the author may not be used to endorse or promote\n>     products derived from this software without specific prior written\n>     permission.\n> \n> THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n> IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n> WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n> DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,\n> INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n> (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n> SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n> HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n> STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\n> IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n> POSSIBILITY OF SUCH DAMAGE. \n\nc_range_coder.h is Public Domain, derived from work by Eugene\nShelwien.\n\nrANS_byte.h and rANS_word.h are derived from Fabien Giesen's work and\nis Public Domain.  https://github.com/rygorous/ryg_rans This work was\nin turn based on the ANS family of entropy encoders as described by\nJarek Duda's paper: http://arxiv.org/abs/1311.2540\n\n> To the extent possible under law, Fabian Giesen has waived all\n> copyright and related or neighboring rights to ryg_rans, as\n> per the terms of the CC0 license:\n> \n>   https://creativecommons.org/publicdomain/zero/1.0\n> \n> This work is published from the United States.\n"
      },
      "source": "https://raw.githubusercontent.com/samtools/htscodecs/master/LICENSE.md",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.cirrus-ci.com/github/jkbonfield/htscodecs.svg?branch=master"
      },
      "source": "https://raw.githubusercontent.com/samtools/htscodecs/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "htscodecs"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "samtools"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 791432,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "JavaScript",
        "size": 123183,
        "type": "Programming_language",
        "value": "JavaScript"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 17860,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "M4",
        "size": 16615,
        "type": "Programming_language",
        "value": "M4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 7728,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/samtools/htscodecs/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jkbonfield",
          "type": "User"
        },
        "date_created": "2024-08-22T13:06:13Z",
        "date_published": "2024-08-22T13:09:56Z",
        "description": "Release 1.6.1: 22nd August 2024\r\n-------------------------------\r\n\r\nThis release is primarily portability and minor bug fixes.\r\n\r\nChanges\r\n\r\n- Improve warning levels by the compiler in CI. (#125)\r\n\r\n- Switch to GitHub actions for some CI builds. (#121, #123)\r\n\r\n- Add configure check for cpuid systems. (#115, #116.  Reported by\r\n  Ryan Carsten Schmidt)\r\n\r\nBug fixes\r\n\r\n- Use unsigned chars for ctype macros in the name tokeniser.\r\n  On many systems this was already mitigated against, but on some OSes\r\n  a char > 128 could trigger a buffer underrun. (#124)\r\n\r\n- Fix interaction between _XOPEN_SOURCE and FreeBSD.\r\n  (#119, John Marshall)\r\n\r\n- Improve AVX512 compiler support, notably MacOS El Capitan's XCode.\r\n  (#118, Rob Davies)\r\n\r\n- Fix -std=c99 -pendantic pedantry (#117)\r\n",
        "html_url": "https://github.com/samtools/htscodecs/releases/tag/v1.6.1",
        "name": "Release v1.6.1",
        "release_id": 171473644,
        "tag": "v1.6.1",
        "tarball_url": "https://api.github.com/repos/samtools/htscodecs/tarball/v1.6.1",
        "type": "Release",
        "url": "https://api.github.com/repos/samtools/htscodecs/releases/171473644",
        "value": "https://api.github.com/repos/samtools/htscodecs/releases/171473644",
        "zipball_url": "https://api.github.com/repos/samtools/htscodecs/zipball/v1.6.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jkbonfield",
          "type": "User"
        },
        "date_created": "2023-12-07T15:53:52Z",
        "date_published": "2023-12-07T16:09:28Z",
        "description": "This release is primarily bug fixes, mostly spotted through improved fuzz testing.\r\n\r\nOne big change however is the SIMD rANS codecs are now performant on Intel CPUs with the DownFall mitigation microcode applied.\r\n\r\nChanges\r\n\r\n- Replaced the rANS codec SIMD gathers with simulated gathers via scalar memory fetches.  This helps AMD Zen4, but importantly it also fixes a disastrous performance regression caused by Intel's DownFall microcode fix.\r\n\r\n  There is an impact on pre-DownFall speeds, but we should focus on patched CPUs as a priority.\r\n\r\n- A small speed up to the rans_F_to_s3 function used by order-0 rans decode.\r\n\r\n- Small speed up to SIMD rans32x16 order-1 encoder by reducing cache misses.  Also sped up the rans4x8 order-1 encoder, particularly on AMD Zen4.\r\n\r\n- Now supports building with \"zig cc\"\r\n  (Issue #109, reported by David Jackson)\r\n\r\nBug fixes\r\n\r\n- Improve robustness of name tokeniser when given non 7-bit ASCII and on machines where \"char\" defaults to unsigned.\r\n  (Issue #105, reported by Shubham Chandak)\r\n\r\n- Also fixed a 1 byte buffer read-overrun in name tokeniser.\r\n\r\n- Fix name tokeniser encoder failure with some duplicated streams.\r\n\r\n- Fixed rans_set_cpu to work multiple times, as well as reinstating the ability to change decode and encode side independently (accidentally lost in commit 958032c).  No effect on usage, but it improves the test coverage.\r\n\r\n- Added a round-trip fuzz tester to test the ability to encode.  The old fuzz testing was decode streams only.\r\n\r\n- Fixed bounds checking in rans_uncompress_O0_32x16_avx2, fixing buffer read overruns.\r\n\r\n- Removed undefined behaviour in transpose_and_copy(), fixing zig cc builds.\r\n",
        "html_url": "https://github.com/samtools/htscodecs/releases/tag/v1.6.0",
        "name": "HTScodecs release 1.6.0, 7th December 2023",
        "release_id": 133049156,
        "tag": "v1.6.0",
        "tarball_url": "https://api.github.com/repos/samtools/htscodecs/tarball/v1.6.0",
        "type": "Release",
        "url": "https://api.github.com/repos/samtools/htscodecs/releases/133049156",
        "value": "https://api.github.com/repos/samtools/htscodecs/releases/133049156",
        "zipball_url": "https://api.github.com/repos/samtools/htscodecs/zipball/v1.6.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jkbonfield",
          "type": "User"
        },
        "date_created": "2023-10-06T09:23:45Z",
        "date_published": "2023-10-06T10:32:42Z",
        "description": "Release 1.5.2: 6th October 2023\r\n-------------------------------\r\n\r\n*** **SECURITY FIXES** ***\r\n\r\nThis release contains multiple bug fixes, including a couple buffer overruns that could corrupt memory when used in specific scenarios.  These have not been observed with real data, but could represent an attack vector for a malicious user.  (We know of no exploit.)\r\n\r\n\r\nChanges\r\n\r\n- The range coder has been extended to do bounds checking if the new RC_SetOutputEnd() is called.  This has a small performance hit for the encoder, depending on compiler, but tests showed within 10% at worst.\r\n\r\nBug fixes\r\n\r\n- Fix write-buffer overruns in fqzcomp and name tokeniser.  **SECURITY ISSUE**: FQZComp could overflow the computed maximum growth size, causing writes beyond the ends of the allocated memory.  This is triggered by many very small 1bp reads.  Fixed the maximum bounds for compressed data.\r\n\r\n  **SECURITY ISSUE**: The name tokeniser using the maximum number of tokens (128) would erroneously write a 129th token.  This is a restricted overflow of a few bytes.  (PR#97, reported by Shubham Chandak)\r\n\r\n- Fix an maximum 8-byte read overflow in the AVX2 rans decoder.  **SECURITY ISSUE**: This was only present when using gcc.\r\n  (PR#100, reported by Rob Davies)\r\n\r\n- The rANS Order-1 SSE4 decoder could decode incorrectly.  When a single symbol only occurs and we're using 12-bit freqs, the frequency of 4096 was interpreted as freq 0.  This only happens in the non-SIMD tidy-up stage at the end of the decode, so at worst the final 31 bytes may be incorrect. (PR#102)\r\n\r\n- Fixed a 1-byte heap read-buffer overflow. Existed since 6a87ead2 (Oct 2021).  Low severity security due to size and high likelihood it's just malloc meta-data. (PR#95; OSS-Fuzz 62270)\r\n\r\n- rans_compress_4x16 now works on zero length input.  Previously this was giving divide-by-zero errors.  (PR#101, reported by Shubham Chandak)\r\n\r\n- Remove asserts which caused warnings about unused variables when building with -DNDEBUG.\r\n\r\n- Fix ARM builds when HWCAP_ASIMD is missing (on Conda) (PR#91)\r\n\r\n- Improve FreeBSD CI testing\r\n\r\n- Fix undefined behaviour from signed bit-shifting (PR#90).\r\n",
        "html_url": "https://github.com/samtools/htscodecs/releases/tag/v1.5.2",
        "name": "HTSscodecs 1.5.2",
        "release_id": 124016143,
        "tag": "v1.5.2",
        "tarball_url": "https://api.github.com/repos/samtools/htscodecs/tarball/v1.5.2",
        "type": "Release",
        "url": "https://api.github.com/repos/samtools/htscodecs/releases/124016143",
        "value": "https://api.github.com/repos/samtools/htscodecs/releases/124016143",
        "zipball_url": "https://api.github.com/repos/samtools/htscodecs/zipball/v1.5.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jkbonfield",
          "type": "User"
        },
        "date_created": "2023-07-20T10:26:47Z",
        "date_published": "2023-07-20T10:32:53Z",
        "description": "This release is mainly small updates and bug fixes focusing on specific platforms, with no new features added.\r\n\r\nChanges\r\n\r\n- Be more selective in use of AVX512 on AMD Zen4 processors.  This can be faster (e.g. with 64-way unrolling), but in the current rANS codec implementations AVX2 is faster for certain operations (PR#85).\r\n\r\n- Add config.h to test programs to help them pick up definitions such as XOPEN_SOURCE (PR#84)\r\n\r\n- Add FreeBSD to CI testing (PR#83)\r\n\r\nBug fixes\r\n\r\n- Trivial bug fix to the rans4x16pr test harness when given incompressible data (PR#86).\r\n\r\n- Make ARM NEON checks specific to AArch64 and exclude AArch32 systems. (PR#82 to fix issue#81, reported by Robert Clausecker)\r\n",
        "html_url": "https://github.com/samtools/htscodecs/releases/tag/v1.5.1",
        "name": "Release 1.5.1: 20th July 2023",
        "release_id": 112944055,
        "tag": "v1.5.1",
        "tarball_url": "https://api.github.com/repos/samtools/htscodecs/tarball/v1.5.1",
        "type": "Release",
        "url": "https://api.github.com/repos/samtools/htscodecs/releases/112944055",
        "value": "https://api.github.com/repos/samtools/htscodecs/releases/112944055",
        "zipball_url": "https://api.github.com/repos/samtools/htscodecs/zipball/v1.5.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jkbonfield",
          "type": "User"
        },
        "date_created": "2023-04-14T11:32:35Z",
        "date_published": "2023-04-14T11:37:01Z",
        "description": "Release 1.5.0: 14th April 2023\r\n------------------------------\r\n\r\nChanges\r\n\r\n- Significant speed ups to the fqzcomp codec via code restructuring\r\n  and use of memory prefetch instructions.  Encode is 30-40% faster\r\n  and decode 5-8% faster. (PR#75 James Bonfield)\r\n\r\n- Improve multiarch builds on MacOS, fixing issues with getting the\r\n  various SIMD implementations integrated. (Issue#76 John Marshall,\r\n  PR#77/#78 Rob Davies)\r\n\r\n- Remove unused ax_with_libdeflate.m4 file from build system.\r\n",
        "html_url": "https://github.com/samtools/htscodecs/releases/tag/v1.5.0",
        "name": "Htscodecs 1.5.0",
        "release_id": 99534587,
        "tag": "v1.5.0",
        "tarball_url": "https://api.github.com/repos/samtools/htscodecs/tarball/v1.5.0",
        "type": "Release",
        "url": "https://api.github.com/repos/samtools/htscodecs/releases/99534587",
        "value": "https://api.github.com/repos/samtools/htscodecs/releases/99534587",
        "zipball_url": "https://api.github.com/repos/samtools/htscodecs/zipball/v1.5.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jkbonfield",
          "type": "User"
        },
        "date_created": "2023-02-15T15:42:31Z",
        "date_published": "2023-02-15T15:23:29Z",
        "description": "Release 1.4.0: 15th Februrary 2023\r\n-----------------------------\r\n\r\nThis is almost entirely minor bug fixing with a few small updates.\r\n\r\nChanges\r\n\r\n- Optimise compression / speed of the name tokeniser.\r\n  - In arithmetic coding mode, it can now utilise bzip2 at higher levels.\r\n  - For both rans / arith entropy encoders, the choice of method / order\r\n    is now optimised per token type, giving faster compression.\r\n  - Culled a pointless zlib check in the configure script.\r\n  - Made lack of bzip2 a hard failure in configure, unless an explicit\r\n    --disable-bz2 option is given.\r\n  (#72, #73)\r\n\r\n- Switch CI to use ARM for MacOS builds\r\n  (#69, thanks to Rob Davies)\r\n\r\nBug fixes\r\n\r\n- Remove some newer compiler warnings (#61)\r\n\r\n- Improvements for Intel -m32 builds, including better AVX2 validation\r\n  (m32 misses _mm256_extract_epi64) and improved data alignment.\r\n  (#62. See also samtools/htslib#1500)\r\n\r\n- Detect Neon capability at runtime via operating system APIs.\r\n  (#63, thanks to John Marshall)\r\n\r\n- Improve FreeBSD diagnostics when neglecting to use -lpthread / -lthr. \r\n  Plus additional extra error checking too.\r\n  (#68, #64, thanks to John Marshall)\r\n\r\n- Update hts_pack to operate in line with CRAMcodecs spec, where the\r\n  number of symbols > 16.\r\n  (#65/#66, reported by Michael Macias)\r\n\r\n- Fixed too-stringent buffer overflow checking in O1 rans decoder.\r\n  (#71, reported by Divon Lan)\r\n",
        "html_url": "https://github.com/samtools/htscodecs/releases/tag/v1.4.0",
        "name": "Htscodecs 1.4.0",
        "release_id": 92568014,
        "tag": "v1.4.0",
        "tarball_url": "https://api.github.com/repos/samtools/htscodecs/tarball/v1.4.0",
        "type": "Release",
        "url": "https://api.github.com/repos/samtools/htscodecs/releases/92568014",
        "value": "https://api.github.com/repos/samtools/htscodecs/releases/92568014",
        "zipball_url": "https://api.github.com/repos/samtools/htscodecs/zipball/v1.4.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jkbonfield",
          "type": "User"
        },
        "date_created": "2022-08-09T09:34:15Z",
        "date_published": "2022-08-09T10:23:50Z",
        "description": "Release 1.3.0: 9th August 2022\r\n------------------------------\r\n\r\nThe primary change in this release is a new SIMD enabled rANS codec.\r\n\r\nChanges\r\n\r\n- There is a 32-way unrolled rANS implementation.  This is accessed using the existing rans 4x16 API with the RANS_ORDER_X32 bit set.\r\n  Implementations exist for SSE4.1, AVX2, AVX512 and ARM Neon, as well as traditional non-SIMD scalar code in C and JavaScript. See\r\n  the commit logs for benchmarks.\r\n\r\n- Improved memory allocation via a new htscodecs_tls_alloc function. This uses Thread Local Storage (TLS) to avoid multiple malloc/free calls, reducing system CPU time.\r\n\r\n- Some external functions have been renamed, with the old ones still existing in a deprecated fashion.  Every symbol should now start hts_, rans_, arith_, fqz_ or tok3_*.\r\n\r\n- Improved test framework with an \"entropy\" tool that iterates over all entropy encoders.\r\n\r\n- Updated the Appveyor CI image to user a newer gcc.  Also added ARM to the list of processors to test on.\r\n\r\n- Tab vs space code changes.  Use \"git diff -w\" to see through these.\r\n\r\n- Reworked fuzzing infrastructure.\r\n\r\n- Small speed improvements to various rANS encoders and decoders. These were tested on a broad range of compilers, versions and systems.  The new code may be slightly slower with some combinations,  but is faster overall and removes a few outliers with considerably degraded performance.\r\n\r\n- Substantial memory reduction to the name tokeniser (tok3).\r\n\r\nBug fixes\r\n\r\n- Fixed undefined behaviour in our use of _builtin_clz().\r\n\r\n- Fixed a few redundant #includes.\r\n\r\n- Work around strict aliasing bugs, uncovered with gcc -O2.\r\n\r\n- Fixed an issue with encoding data blocks close to 2GB in size.  (Additionally blocks above 2GB now error, rather than crashing or returning incorrect results.)\r\n\r\n- Fix encode error with large blocks using RANS_ORDER_STRIPE.\r\n\r\n",
        "html_url": "https://github.com/samtools/htscodecs/releases/tag/v1.3.0",
        "name": "Htscodecs 1.3.0",
        "release_id": 73975370,
        "tag": "v1.3.0",
        "tarball_url": "https://api.github.com/repos/samtools/htscodecs/tarball/v1.3.0",
        "type": "Release",
        "url": "https://api.github.com/repos/samtools/htscodecs/releases/73975370",
        "value": "https://api.github.com/repos/samtools/htscodecs/releases/73975370",
        "zipball_url": "https://api.github.com/repos/samtools/htscodecs/zipball/v1.3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jkbonfield",
          "type": "User"
        },
        "date_created": "2022-04-01T11:22:58Z",
        "date_published": "2022-04-01T14:15:06Z",
        "description": "Release 1.2.2: 1st April 2022\r\n-----------------------------\r\n\r\nThis release contains some fixes found during fuzzing with Clang's memory-sanitizer.  None of these are involving writing memory so there\r\nis no possibility for code execution vulnerabilities.  However some do could access uninitialised elements in locally allocated memory, which\r\ncould leak private data if the library was used in conjunction with other tools which don't zero sensitive data before freeing.\r\n\r\nBug fixes:\r\n\r\n- The name tokeniser now validates the stored length in the data  stream matches the actual decoded length.  Discovered by Taotao Gu.\r\n\r\n- Fixed an endless loop in arith_dynamic and rans4x16pr involving  X_STRIPE with 0 stripes.\r\n\r\n- Avoid a harmless (and wrong?) undefined behaviour sanitizer error  when calling memcpy(ptr, NULL, 0) in the name tokeniser.\r\n\r\n- Fixed possible uninitialised memory access in rans_uncompress_O1_4x16.  If the frequency table didn't add up to\r\n  the correct amount, parts of the \"fb\" table were left unpopulated.  It was then possible to use these array elements in some of the rANS\r\n  calculations.\r\n\r\n- Similarly rans_uncompress_O0 could access an uninitialised element 4095 of the decoder tables if the frequencies summed to 4095 instead\r\n  of the expected 4096.\r\n\r\n- Improved error detection from fqzcomp's read_array function.\r\n\r\n- Reject fqzcomp parameters with inconsistent \"sel\" parameters, which could lead to uninitialised access to the model.sel range coder.\r\n",
        "html_url": "https://github.com/samtools/htscodecs/releases/tag/v1.2.2",
        "name": "Htscodecs 1.2.2",
        "release_id": 63369368,
        "tag": "v1.2.2",
        "tarball_url": "https://api.github.com/repos/samtools/htscodecs/tarball/v1.2.2",
        "type": "Release",
        "url": "https://api.github.com/repos/samtools/htscodecs/releases/63369368",
        "value": "https://api.github.com/repos/samtools/htscodecs/releases/63369368",
        "zipball_url": "https://api.github.com/repos/samtools/htscodecs/zipball/v1.2.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jkbonfield",
          "type": "User"
        },
        "date_created": "2022-02-15T09:32:23Z",
        "date_published": "2022-02-21T15:07:52Z",
        "description": "This release contains the following minor changes.  Please see the \"git log\" for the full details.\r\n\r\nImprovements / changes:\r\n\r\n- Speed up of rANS4x16 order-0.  We now use a branchless encoder renormalisation step.  For complex data it's between 13 and 50% speed up depending on compiler.\r\n\r\n- Improve rANS4x16 compute_shift estimates.  The entropy calculation is now more accurate.  This leads to more frequent use of the 10-bit frequency mode, at an expense of up to 1% size growth.\r\n\r\n- Speed improvements to the striped rANS mode, both encoding and decoding.  Encoder gains ~8% and decoder ~5%, but varies considerably by compiler and data.\r\n\r\n- Added new var_put_u64_safe and var_put_u32_safe interfaces.  These are automatically used by var_put_u64 and var_put_u32 when near the end of the buffer, but may also be called directly.\r\n\r\n- Small speed ups to the hist8 and hist1_4 functions.\r\n\r\n- Minor speed up to RLE decoding.\r\n\r\nBug fixes:\r\n\r\n- Work around an icc-2021 compiler bug, but also speed up the varint encoding too (#29).\r\n\r\n- Fix an off-by-one error in the initial size check in arith_dynamic.  This meant the very smallest of blocks could fail to decode.  Reported by Divon Lan.\r\n\r\n- Fixed hist1_4 to also count the last byte when computing T0 array.\r\n\r\n- Fixed overly harsh bounds checking in the fqzcomp read_array function, which meant it failed to decode some configurations.\r\n",
        "html_url": "https://github.com/samtools/htscodecs/releases/tag/v1.2.1",
        "name": "Htscodecs 1.2.1",
        "release_id": 60055909,
        "tag": "v1.2.1",
        "tarball_url": "https://api.github.com/repos/samtools/htscodecs/tarball/v1.2.1",
        "type": "Release",
        "url": "https://api.github.com/repos/samtools/htscodecs/releases/60055909",
        "value": "https://api.github.com/repos/samtools/htscodecs/releases/60055909",
        "zipball_url": "https://api.github.com/repos/samtools/htscodecs/zipball/v1.2.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jkbonfield",
          "type": "User"
        },
        "date_created": "2021-07-06T16:37:39Z",
        "date_published": "2021-07-06T16:39:41Z",
        "description": "Release 1.1.1: 6th July 2021\r\n----------------------------\r\n\r\nThis release contains the following minoring changes.\r\nPlease see the \"git log\" for the full details.\r\n\r\nImprovements / changes:\r\n\r\n- Modernised autoconf usage to avoid warnings with newer versions.\r\n  (John Marshall)\r\n\r\n- Avoid using awk with large records, due to some systems\r\n  (e.g. Solaris / OpenIndiana) with line length limits .\r\n  (John Marshall)\r\n\r\n- Applied Debian patch to make the library link against -lm.\r\n\r\nBug fixes:\r\n\r\n- Fixed an issue with the name tokeniser when a slice (name_context)\r\n  has exactly 1 more name than the previous call. (James Bonfield)\r\n\r\n- Removed access to an uninitialised variable in the name tokeniser\r\n  decode when given malformed data.  This occurs when we use delta\r\n  encoding for the very first name. (James Bonfield, OSS-Fuzz)\r\n\r\n- Minor fixes to distcheck and distclean targets",
        "html_url": "https://github.com/samtools/htscodecs/releases/tag/v1.1.1",
        "name": "htscodecs 1.1.1",
        "release_id": 45785023,
        "tag": "v1.1.1",
        "tarball_url": "https://api.github.com/repos/samtools/htscodecs/tarball/v1.1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/samtools/htscodecs/releases/45785023",
        "value": "https://api.github.com/repos/samtools/htscodecs/releases/45785023",
        "zipball_url": "https://api.github.com/repos/samtools/htscodecs/zipball/v1.1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jkbonfield",
          "type": "User"
        },
        "date_created": "2021-02-26T09:13:39Z",
        "date_published": "2021-02-26T09:21:34Z",
        "description": "Release 1.0: 23rd Feb 2021\r\n--------------------------\r\n\r\nThis marks the first non-beta release of htscodecs, following a perioid of integration with Htslib and automated fuzzing by Google's OSS-Fuzz program.\r\n\r\n[Note this testing only applies to the C implementation.  The JavaScript code should still be considered as examples of the codecs, more for purposes of understanding and clarity than as a fully optimised and tested release.]\r\n\r\nSince the last release (0.5) the key changes are:\r\n\r\n- Improved support for big endian platforms\r\n\r\n- Speed improvements to CRAM 3.0 4x8 rANS order-1 encoding.   It's between 10 and 50% faster at encoding, based on input data.\r\n\r\n- Improved autoconf bzip2 checks and tidy up \"make test\" output.\r\n\r\n- Added some more files into \"make install\", so that \"make distcheck\"   now passes.\r\n\r\n- Replaced Travis with Cirrus-CI testing.\r\n\r\n- Removed various C undefined behaviour, such as left shifting of   negative values and integer overflows.  As far as we know these were   currently harmless on the supported platforms, but may break future   compiler optimisations.\r\n\r\n- Fixed numerous OSS-Fuzz identified flaws.  Some of these were   potential security issues such as small buffer overruns.\r\n\r\n- Tidied up some code to prevent warnings.\r\n\r\n- The name tokeniser now has a limit on the size of data it can encode  (10 million records).  This may still be too high given the memory   it will require, so it may be reduced again.\r\n",
        "html_url": "https://github.com/samtools/htscodecs/releases/tag/v1.0",
        "name": "htscodecs 1.0",
        "release_id": 38788439,
        "tag": "v1.0",
        "tarball_url": "https://api.github.com/repos/samtools/htscodecs/tarball/v1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/samtools/htscodecs/releases/38788439",
        "value": "https://api.github.com/repos/samtools/htscodecs/releases/38788439",
        "zipball_url": "https://api.github.com/repos/samtools/htscodecs/zipball/v1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jkbonfield",
          "type": "User"
        },
        "date_created": "2020-01-30T12:36:23Z",
        "date_published": "2020-01-30T12:48:24Z",
        "description": "This release has a few renamed functions (the variable sized integer encoding functions) and thus is incompatible with v0.4.  The test tools now also incorporate a \"raw\" mode (`-r`) for purposes of creating un-wrapped byte streams without data sizing information.  These now match the CRAMcodecs specification.\r\n\r\nFull changes:\r\n\r\n- Renamed the varint functions and also added signed versions.\r\n\r\n- Rans 4x16 order-1 frequency tables are now configurable (within the byte stream) to 10 or 12 bit totals.  Previously it was 10, but this is too small for efficient compression of extreme distributions.\r\n\r\n- rANS 4x16 X4 has been renamed STRIPE and can now interleave other quantities than just 4 streams.\r\n\r\n- Sped up the C rans 4x16 order-1 decoder, often by around 30% or so if SSE4 is permitted. (Try `-march=native`)\r\n\r\n- Sped up the C RLE decoding function.  Also refactored this code into it's own rle.c file.\r\n\r\n- Bug fix to name tokeniser so it can handle blank lines.\r\n\r\n- Fixed RLE encoding in the rANS 4x16 JavaScript implementation.  It no longer can generate invalid streams when it doesn't find anything worthy of doing RLE on.\r\n\r\n- Fixed JavaScript rans 4x16 frequency renormalisation.  Occasionally it'd generate very suboptimal frequency distributions.  Also used this revised algorithm in C (which didn't have that problem, but was still improved.)\r\n\r\n- Fixed JavaScript exception handling in tok3.js (with thanks to Chris Norman).\r\n\r\n- Bug fixed the JavaScript rans.js to correctly allocate data size.  It could fail on tiny inputs.",
        "html_url": "https://github.com/samtools/htscodecs/releases/tag/v0.5",
        "name": "htscodecs-0.5",
        "release_id": 23253021,
        "tag": "v0.5",
        "tarball_url": "https://api.github.com/repos/samtools/htscodecs/tarball/v0.5",
        "type": "Release",
        "url": "https://api.github.com/repos/samtools/htscodecs/releases/23253021",
        "value": "https://api.github.com/repos/samtools/htscodecs/releases/23253021",
        "zipball_url": "https://api.github.com/repos/samtools/htscodecs/zipball/v0.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jkbonfield",
          "type": "User"
        },
        "date_created": "2019-09-23T13:45:21Z",
        "date_published": "2019-09-23T13:51:36Z",
        "description": "There are no new features in this release; simply improvements in portability and robustness.\r\n\r\nCode portability for MacOS and Windows.\r\n-  On both of these platforms, as well as on Linux, memory management has been improved to avoid requiring large stack sizes.  We use thread local storage to perform one malloc call and reuse this same block for each subsequent function call for the duration of that thread.  This has the benefits of a large stack without penalties of repeated use of malloc/free.\r\n\r\nFixes\r\n- Bug fixed name tokeniser when there are a variable number of tokens.\r\n- Removed some compilation warnings.\r\n- Javascript demonstration code is more complete, with DO_REV support in fqzcomp.js.",
        "html_url": "https://github.com/samtools/htscodecs/releases/tag/v0.4",
        "name": "htscodecs-0.4",
        "release_id": 20180954,
        "tag": "v0.4",
        "tarball_url": "https://api.github.com/repos/samtools/htscodecs/tarball/v0.4",
        "type": "Release",
        "url": "https://api.github.com/repos/samtools/htscodecs/releases/20180954",
        "value": "https://api.github.com/repos/samtools/htscodecs/releases/20180954",
        "zipball_url": "https://api.github.com/repos/samtools/htscodecs/zipball/v0.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jkbonfield",
          "type": "User"
        },
        "date_created": "2019-06-28T13:35:24Z",
        "date_published": "2019-06-28T13:40:40Z",
        "description": "Bug fixes and updates to C code.  Note this includes some incompatibilities (see commits).\r\n\r\nImproved testing.\r\n\r\nAdded first draft of the javascript implementation.  This isn't intended for production use, but is instead a reference implementation to be used along side the codec specification document (currently a work in progress, over at https://github.com/jkbonfield/hts-specs/blob/CRAMv4/CRAMv4.tex).\r\n",
        "html_url": "https://github.com/samtools/htscodecs/releases/tag/v0.3",
        "name": "htscodecs-0.3",
        "release_id": 18294222,
        "tag": "v0.3",
        "tarball_url": "https://api.github.com/repos/samtools/htscodecs/tarball/v0.3",
        "type": "Release",
        "url": "https://api.github.com/repos/samtools/htscodecs/releases/18294222",
        "value": "https://api.github.com/repos/samtools/htscodecs/releases/18294222",
        "zipball_url": "https://api.github.com/repos/samtools/htscodecs/zipball/v0.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jkbonfield",
          "type": "User"
        },
        "date_created": "2019-05-28T13:45:09Z",
        "date_published": "2019-05-28T13:47:30Z",
        "description": "Mainly portability (MacOSX) and fuzz testing fixes.",
        "html_url": "https://github.com/samtools/htscodecs/releases/tag/v0.2",
        "name": "htscodecs-0.2",
        "release_id": 17629294,
        "tag": "v0.2",
        "tarball_url": "https://api.github.com/repos/samtools/htscodecs/tarball/v0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/samtools/htscodecs/releases/17629294",
        "value": "https://api.github.com/repos/samtools/htscodecs/releases/17629294",
        "zipball_url": "https://api.github.com/repos/samtools/htscodecs/zipball/v0.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jkbonfield",
          "type": "User"
        },
        "date_created": "2019-05-23T15:16:51Z",
        "date_published": "2019-05-23T15:19:05Z",
        "description": "First test release of the htscodecs package.\r\n\r\nSee README.md for the minimal amount of documentation, or look at the test programs in the tests directory.",
        "html_url": "https://github.com/samtools/htscodecs/releases/tag/v0.1",
        "name": "htscodecs-0.1",
        "release_id": 17546728,
        "tag": "v0.1",
        "tarball_url": "https://api.github.com/repos/samtools/htscodecs/tarball/v0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/samtools/htscodecs/releases/17546728",
        "value": "https://api.github.com/repos/samtools/htscodecs/releases/17546728",
        "zipball_url": "https://api.github.com/repos/samtools/htscodecs/zipball/v0.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 00:39:48",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 27
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}