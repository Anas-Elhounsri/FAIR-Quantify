{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Credits",
        "type": "Text_excerpt",
        "value": "The software is an implementation of the method UNIFAN, jointly developed by [Dongshunyi \"Dora\" Li](https://github.com/doraadong) and Ziv Bar-Joseph from [System Biology Group @ Carnegie Mellon University](http://sb.cs.cmu.edu/) and [Jun Ding](https://github.com/phoenixding) from McGill University.\n"
      },
      "source": "https://raw.githubusercontent.com/doraadong/UNIFAN/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/doraadong/UNIFAN"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contacts",
        "type": "Text_excerpt",
        "value": "* dongshul at andrew.cmu.edu \n"
      },
      "source": "https://raw.githubusercontent.com/doraadong/UNIFAN/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-11-04T04:54:13Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-05-16T20:11:20Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Unsupervised cell functional annotation for single-cell RNA-Seq"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "type": "Text_excerpt",
        "value": "UNIFAN (**Un**supervised S**i**ngle-cell **F**unctional **An**notation) simultaneously clusters and annotates cells with known biological processes (including pathways). For each single cell, UNIFAN first infers gene set activity scores (denoted by r in the figure below) associated with this cell using the input gene sets. \n\n![flowchart](./unifan-pretrain.png)\n\nNext, UNIFAN clusters cells by using the learned gene set activity scores (r) and a reduced dimension representation of the expression of genes in the cell. The gene set activity scores are used by an \u201cannotator\u201d to guide the clustering such that cells sharing similar biological processes are more likely to be grouped together. Such design allows the method to focus on the key processes when clustering cells and so can overcome issues related to noise and dropout while simultaneously selecting marker gene sets which can be used to annotate clusters. To allow the selection of marker genes for each cluster, we also add a subset of the most variable genes selected using Seuratv3 (Stuart et al., [2019](https://doi.org/10.1016/j.cell.2019.05.031)) as features for the annotator. \n\n![flowchart](./unifan-main.png)\n"
      },
      "source": "https://raw.githubusercontent.com/doraadong/UNIFAN/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Table of Contents",
        "parent_header": [
          "Introduction"
        ],
        "type": "Text_excerpt",
        "value": "- [Get started](#Get-started)\n- [Command-line tools](#Command-line)\n- [Tutorials](#Tutorials)\n- [Updates log](#Updates-log)\n- [Learn-more](#Learn-more)\n- [Credits](#Credits)\n"
      },
      "source": "https://raw.githubusercontent.com/doraadong/UNIFAN/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8647152566507399,
      "result": {
        "original_header": "Command-line",
        "type": "Text_excerpt",
        "value": "You may import UNIFAN as an package and use it in your code (See [Tutorials](#Tutorials) for details). Or you may train models using the following command-line tool. \n \n"
      },
      "source": "https://raw.githubusercontent.com/doraadong/UNIFAN/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Download and Preprocess the Input Data",
        "parent_header": [
          "Tutorials",
          "Run UNIFAN on example data"
        ],
        "type": "Text_excerpt",
        "value": "You may download the gene sets in [gene_sets](gene_sets). As default, we use the GO terms for biological processes (c5.go.bp.v7.4.symbols.gmt), canonical pathways (c2.cp.v7.4.symbols.gmt) and the TF-DNA interacitons data (Mouse_TF_targets.txt). \n\nUNIFAN takes AnnData files as input. See [AnnData](https://anndata.readthedocs.io/en/latest/) for details. To prepare the example data (Limb_Muscle in Tabula Muris), first download the [Tabula Muris senis data](https://figshare.com/ndownloader/files/24351086). Then run the Python script [getExample.py](tutorails/getExample.py) to preprocess the count data using the following command: \n\n```shell\npython getExample.py -p ./facs.h5ad -i ../example/input -t Limb_Muscle\n\n```\nThe usage of this command is listed as follows:\n\n```shell\nusage: getExample.py [-h] -p PATH -i FOLDER -t TISSUE [-k TOPK]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -p PATH, --path PATH  string, path to the downloaded data, default\n                        './facs.h5ad'\n  -i FOLDER, --folder FOLDER\n                        string, path to the folder to save the data, default\n                        '../example/input'\n  -t TISSUE, --tissue TISSUE\n                        string, specify the output tissue; if using the\n                        default None, then all tissues will be outputted and\n                        saved separately in the folder; default None\n  -k TOPK, --topk TOPK  integer, optional, number of most variable genes,\n                        default 2000\n                        \n```\n\nWe also provide [Data preprocessing](tutorails/Data_preprocessing.ipynb) showing how we preprocessed the other datasets we used in the manuscript. \n"
      },
      "source": "https://raw.githubusercontent.com/doraadong/UNIFAN/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/doraadong/UNIFAN/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/doraadong/UNIFAN/main/tutorails/UNIFAN_example.ipynb"
      },
      "source": "https://raw.githubusercontent.com/doraadong/UNIFAN/main/tutorails/UNIFAN_example.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/doraadong/UNIFAN/main/tutorails/UNIFAN_cluster_annotations.ipynb"
      },
      "source": "https://raw.githubusercontent.com/doraadong/UNIFAN/main/tutorails/UNIFAN_cluster_annotations.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/doraadong/UNIFAN/main/tutorails/Data_preprocessing.ipynb"
      },
      "source": "https://raw.githubusercontent.com/doraadong/UNIFAN/main/tutorails/Data_preprocessing.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/doraadong/UNIFAN/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "doraadong/UNIFAN"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Introduction"
      },
      "source": "https://raw.githubusercontent.com/doraadong/UNIFAN/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/doraadong/UNIFAN/main/./unifan-pretrain.png"
      },
      "source": "https://raw.githubusercontent.com/doraadong/UNIFAN/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/doraadong/UNIFAN/main/./unifan-main.png"
      },
      "source": "https://raw.githubusercontent.com/doraadong/UNIFAN/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Install within a virtual environment",
        "parent_header": [
          "Get-started",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "It is recommended to use a virtural environment/pacakges manager such as [Anaconda](https://www.anaconda.com/). After successfully installing Anaconda/Miniconda, create an environment by the following: \n\n```shell\nconda create -n myenv python=3.6\n```\n\nYou can then install and run the package in the virtual environment. Activate the virtural environment by: \n\n```shell\nconda activate myenv\n```\n\nMake sure you have **pip** installed in your environment. You may check by \n\n```shell\nconda list\n```\n\nIf not installed, then: \n\n```shell\nconda install pip\n```"
      },
      "source": "https://raw.githubusercontent.com/doraadong/UNIFAN/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Install Pytorch",
        "parent_header": [
          "Get-started",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "UNIFAN is built based on Pytorch and supporting both CPU or GPU. Make sure you have Pytorch (>= 1.9.0) installed in your virtual environment. If not, please visist [Pytorch](https://pytorch.org/) and install the appropriate version.  \n"
      },
      "source": "https://raw.githubusercontent.com/doraadong/UNIFAN/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Install UNIFAN",
        "parent_header": [
          "Get-started",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Install by: \n\n```shell\npip install git+https://github.com/doraadong/UNIFAN.git\n```\n\nIf you want to upgrade UNIFAN to the latest version, then first uninstall it by:\n\n```shell\npip uninstall unifan\n```\n\nAnd then just run the pip install command again. \n"
      },
      "source": "https://raw.githubusercontent.com/doraadong/UNIFAN/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9996027497329628,
      "result": {
        "original_header": "Command-line",
        "type": "Text_excerpt",
        "value": "You may import UNIFAN as an package and use it in your code (See [Tutorials](#Tutorials) for details). Or you may train models using the following command-line tool. \n \n"
      },
      "source": "https://raw.githubusercontent.com/doraadong/UNIFAN/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/doraadong/UNIFAN/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021 Dora Li\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/doraadong/UNIFAN/main/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "type": "Text_excerpt",
        "value": "This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/doraadong/UNIFAN/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "UNIFAN"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "doraadong"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 2525701,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 82726,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/doraadong/UNIFAN/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://anndata.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/doraadong/UNIFAN/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Prerequisites",
        "parent_header": [
          "Get-started"
        ],
        "type": "Text_excerpt",
        "value": "* Python >= 3.6\n* Python side-packages:   \n-- pytorch >= 1.9.0  \n-- numpy >= 1.19.2     \n-- pandas>=1.1.5   \n-- scanpy >= 1.7.2  \n-- leidenalg>=0.8.4  \n-- tqdm >= 4.61.1  \n-- scikit-learn>=0.24.2  \n-- umap-learn>=0.5.1  \n-- matplotlib >= 3.3.4   \n-- seaborn >= 0.11.0   \n"
      },
      "source": "https://raw.githubusercontent.com/doraadong/UNIFAN/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Run UNIFAN",
        "parent_header": [
          "Command-line"
        ],
        "type": "Text_excerpt",
        "value": "Run UNIFAN by (arguments are taken for example): \n\n```shell\nmain.py -i ../example/input/Limb_Muscle.h5ad -o ../example/output -p tabula_muris -t Limb_Muscle -l cell_ontology_class -e ../gene_sets/\n```\nThe usage of this command is listed as follows. Note only the first 5 inputs are required:\n\n```shell\nusage: main.py [-h] -i INPUT -o OUTPUT -p PROJECT -t TISSUE [-e GENESETSPATH]\n               [-l LABEL] [-v VARIABLE] [-r PRIOR]\n               [-f {gene_sets,gene,gene_gene_sets}] [-a ALPHA] [-b BETA]\n               [-g GAMMA] [-u TAU] [-d DIM] [-s BATCH] [-na NANNO]\n               [-ns NSCORE] [-nu NAUTO] [-nc NCLUSTER] [-nze NZENCO]\n               [-nzd NZDECO] [-dze DIMZENCO] [-dzd DIMZDECO] [-nre NRENCO]\n               [-dre DIMRENCO] [-drd DIMRDECO]\n               [-n {sigmoid,non-negative,gaussian}] [-m SEED] [-c CUDA]\n               [-w NWORKERS]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i INPUT, --input INPUT\n                        string, path to the input expression data, default\n                        '../input/data.h5ad'\n  -o OUTPUT, --output OUTPUT\n                        string, path to the output folder, default\n                        '../output/'\n  -p PROJECT, --project PROJECT\n                        string, identifier for the project, e.g., tabula_muris\n  -t TISSUE, --tissue TISSUE\n                        string, tissue where the input data is sampled from\n  -e GENESETSPATH, --geneSetsPath GENESETSPATH\n                        string, path to the folder where gene sets can be\n                        found, default='../gene_sets/'\n  -l LABEL, --label LABEL\n                        string, optional, the column / field name of the\n                        ground truth label, if available; used for evaluation\n                        only; default None\n  -v VARIABLE, --variable VARIABLE\n                        string, optional, the column / field name of the\n                        highly variable genes; default 'highly_variable'\n  -r PRIOR, --prior PRIOR\n                        string, optional, gene set file names used to learn\n                        the gene set activity scores, use '+' to separate\n                        multiple gene set names, default\n                        c5.go.bp.v7.4.symbols.gmt+c2.cp.v7.4.symbols.gmt+TF-\n                        DNA\n  -f {gene_sets,gene,gene_gene_sets}, --features {gene_sets,gene,gene_gene_sets}\n                        string, optional, features used for the annotator, any\n                        of 'gene_sets', 'gene' or 'gene_gene_sets', default\n                        'gene_gene_sets'\n  -a ALPHA, --alpha ALPHA\n                        float, optional, hyperparameter for the L1 term in the\n                        set cover loss, default 1e-2\n  -b BETA, --beta BETA  float, optional, hyperparameter for the set cover term\n                        in the set cover loss, default 1e-5\n  -g GAMMA, --gamma GAMMA\n                        float, optional, hyperparameter for the exclusive L1\n                        term, default 1e-3\n  -u TAU, --tau TAU     float, optional, hyperparameter for the annotator\n                        loss, default 10\n  -d DIM, --dim DIM     integer, optional, dimension for the low-dimensional\n                        representation, default 32\n  -s BATCH, --batch BATCH\n                        integer, optional, batch size for training except for\n                        pretraining annotator (fixed at 32), default 128\n  -na NANNO, --nanno NANNO\n                        integer, optional, number of epochs to pretrain the\n                        annotator, default 50\n  -ns NSCORE, --nscore NSCORE\n                        integer, optional, number of epochs to train the gene\n                        set activity model, default 70\n  -nu NAUTO, --nauto NAUTO\n                        integer, optional, number of epochs to pretrain the\n                        annocluster model, default 50\n  -nc NCLUSTER, --ncluster NCLUSTER\n                        integer, optional, number of epochs to train the\n                        annocluster model, default 25\n  -nze NZENCO, --nzenco NZENCO\n                        float, optional, number of hidden layers for encoder\n                        of annocluster, default 3\n  -nzd NZDECO, --nzdeco NZDECO\n                        float, optional, number of hidden layers for decoder\n                        of annocluster, default 2\n  -dze DIMZENCO, --dimzenco DIMZENCO\n                        integer, optional, number of nodes for hidden layers\n                        for encoder of annocluster, default 128\n  -dzd DIMZDECO, --dimzdeco DIMZDECO\n                        integer, optional, number of nodes for hidden layers\n                        for decoder of annocluster, default 128\n  -nre NRENCO, --nrenco NRENCO\n                        integer, optional, number of hidden layers for the\n                        encoder of gene set activity scores model, default 5\n  -dre DIMRENCO, --dimrenco DIMRENCO\n                        integer, optional, number of nodes for hidden layers\n                        for encoder of gene set activity scores model, default\n                        128\n  -drd DIMRDECO, --dimrdeco DIMRDECO\n                        integer, optional, number of nodes for hidden layers\n                        for decoder of gene set activity scores model, default\n                        128\n  -n {sigmoid,non-negative,gaussian}, --network {sigmoid,non-negative,gaussian}\n                        string, optional, the encoder for the gene set\n                        activity model, any of 'sigmoid', 'non-negative' or\n                        'gaussian', default 'non-negative'\n  -m SEED, --seed SEED  integer, optional, random seed for the initialization,\n                        default 0\n  -c CUDA, --cuda CUDA  boolean, optional, if use GPU for neural network\n                        training, default False\n  -w NWORKERS, --nworkers NWORKERS\n                        integer, optional, number of workers for dataloader,\n                        default 8\n\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/doraadong/UNIFAN/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Run UNIFAN on example data",
        "parent_header": [
          "Tutorials"
        ],
        "type": "Text_excerpt",
        "value": "In [UNIFAN training tutorial](tutorails/UNIFAN_example.ipynb), we illustrate how to run UNIFAN step-by-step on the example data: Limb_Muscle from Tabula Muris. \n"
      },
      "source": "https://raw.githubusercontent.com/doraadong/UNIFAN/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-06 02:47:53",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 22
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Tutorials",
        "type": "Text_excerpt",
        "value": "Github rendering disables some functionalities of Jupyter notebooks. We recommend using [nbviewer](https://nbviewer.jupyter.org/) to view the following tutorials. \n"
      },
      "source": "https://raw.githubusercontent.com/doraadong/UNIFAN/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Run UNIFAN on example data",
        "parent_header": [
          "Tutorials"
        ],
        "type": "Text_excerpt",
        "value": "In [UNIFAN training tutorial](tutorails/UNIFAN_example.ipynb), we illustrate how to run UNIFAN step-by-step on the example data: Limb_Muscle from Tabula Muris. \n"
      },
      "source": "https://raw.githubusercontent.com/doraadong/UNIFAN/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Analyze results and annotate clusters",
        "parent_header": [
          "Tutorials"
        ],
        "type": "Text_excerpt",
        "value": "In [cluster annotating tutorial](tutorails/UNIFAN_cluster_annotations.ipynb), we illustrate how to use the coefficients learned by UNIFAN to annotate clusters. Particularly, we show how to select representing gene sets / genes for each cluster, evaluate if selected genes are likely marker genes and visualize the annotations. \n"
      },
      "source": "https://raw.githubusercontent.com/doraadong/UNIFAN/main/README.md",
      "technique": "header_analysis"
    }
  ]
}