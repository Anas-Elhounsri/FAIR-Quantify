{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "2.4. Reference files (database)",
        "parent_header": [
          "ORTHOSKIM: *in silico* sequence capture from genomic and transcriptomic libraries",
          "2. Input files"
        ],
        "type": "Text_excerpt",
        "value": "\r\nORTHOSKIM uses a multi-taxa bank of reference sequences to capture targeted markers into assemblies.\r\n\r\nThe reference input files required for each type of the target sequences are displayed by yellow boxes in the flowchart (Fig.1.) and summarized in this table:\r\n\r\n| Targets - types (AA/NT) | capture targets (-t) | input ref. | input seeds | additional files |\r\n|---|---|---|---|---|\r\n| cpDNA - coding CDS (AA)  | chloroplast_CDS | cpDNA annotation file (multiple accessions) | CDS fasta file | mtDNA: annotation file + seeds (CDS, rRNA);  rDNA: annotation file |\r\n| cpDNA - coding rRNA (NT) | chloroplast_rRNA | cpDNA annotation file (multiple accessions) | rRNA fasta file | mtDNA: annotation file + seeds (CDS, rRNA);  rDNA: annotation file |\r\n| cpDNA - trnL-UAA (NT) | chloroplast_tRNA | cpDNA annotation file (multiple accessions) | trnL fasta file | mtDNA: annotation file + seeds (CDS, rRNA);  rDNA: annotation file |\r\n| cpDNA - custom (NT) | chloroplast_nt | custom reference fasta file | NA | mtDNA: annotation file + seeds (CDS, rRNA);  rDNA: annotation file |\r\n| mtDNA - coding CDS (AA) | mitochondrion_CDS | mtDNA annotation file (multiple accessions) | CDS fasta file | cpDNA (only for plants): annotation file + seeds (CDS, rRNA); rDNA: annotation file |\r\n| mtDNA - rRNA (NT) | mitochondrion_rRNA | mtDNA annotation file (multiple accessions) | rRNA fasta file | cpDNA (only for plants): annotation file + seeds (CDS, rRNA); rDNA: annotation file |\r\n| mtDNA - custom (NT) | mitochondrion_nt | custom reference fasta file | NA | cpDNA (only for plants): annotation file + seeds (CDS, rRNA); rDNA: annotation file |\r\n| rDNA - rRNA + ITS (NT) | nucrdna | rDNA annotation file (multiple accessions) | rRNA fasta file | cpDNA (only for plants): annotation file; mtDNA: annotation file |\r\n| nuDNA - coding (AA) | nucleus_aa | custom reference fasta file | NA | NA |\r\n| nuDNA - non-coding/custom (NT) | nucleus_nt | custom reference fasta file | NA | NA |\r\n| BUSCO (AA) | busco | BUSCO fasta file of ancestral variants | NA | NA |\r\n\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/cpouchon/ORTHOSKIM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2.4.1. nuDNA targets",
        "parent_header": [
          "ORTHOSKIM: *in silico* sequence capture from genomic and transcriptomic libraries",
          "2. Input files",
          "2.4. Reference files (database)"
        ],
        "type": "Text_excerpt",
        "value": "\r\nUser has to provide their own reference sequence database, consisting on a multi-fasta file of the queried regions with amino-acid sequences (AA) for the \u2018nucleus_aa\u2019 target of the capture mode (suitable for coding sequences), or nucleotide sequences (NT) for the \u2018nucleus_nt\u2019 target (for non-coding sequences).\r\n\r\nSequence names need to be compliant with the ORTHOSKIM nomenclature: `>genename_taxid_Genus_species_other-arguments\"` (*e.g.* *>cox1_3702_Arabidopsis_thaliana* for cox1 gene)\r\n\r\n\r\n**Examples of *nucleus_aa***:\r\n```\r\n>LFY_3317_Thuja_occidentalis\r\nPRSIAAPQVQRGGYEFPLPNTAAILMTNGMNGNNRKELSCLEELFKNYGVRCITLTKMVEMGFTANTLVNLTEQELDDVVRILAEIYSLDLLVGEKYGIKSAIRAERRRLDEAERKKHMELFAIMDGKQRKSDENALDTLSQEGLSVEEPNGDNTMILSQNNTYALNLNTGTDPVLLLQNSGHLSTAVSGLMTLPDNNYCSDQQLKACKKQKRRRSKESGEDGEDRQREHPFIVTEPGELARGKKNGLDYLFDLYEQCGKFLLDVQHIAKERGEKCPTKVTNQVFRHAKHSGAGYINKPKMRHYVHCYALHCLDEQSNRLRRTYKERGENVGAWRQACYYPLVDMAKENGWDIEGVFNK\r\n>LFY_62752_Pinus_sibirica\r\nAAFFKWDQRPPALAPPQMQRTAGLEAQRVFHDFGVPNAAAMAASNNSSSCRKELNCLEELFRNYGVRYITLTKMVDMGFTVNTLVNMTEQELDDLVRTLVEIYRVELLVGEKYGIKSAIRAEKRRLEEAERKRMEQLFVDVDGKRKIDENALDTLSQEGLSVEEPQGDNAIILSQNNTSATFPLNLNAGMDPVLILQNSGHLGTTVSGLIGMPDTNYGSEQTKACKKQKRRRSKDSGEDGEERQREHPFIVTEPGELARGKKNGLDYLFDLYEQCGKFLLDVQHIAKERGEKCPTKVTNQVFRHAKHSGAGYINKPKMRHYVHCYALHCLDVEQSNRLRRAYKERGENVGAWRQACYYPLVAMAKDNGWDIEGVFNKHEKL\r\n>AG_45171_Paeonia_suffruticosa\r\nMKTWDLATGKPTTQFASMELTNDPSREESPQRKNGRGKIEIKRIENTNNRQVTFCKRRNGLLKKAYELSVLCDAEVALIVFSTRGRLFEYANNSVRATIERYKKASADSSGTGSVSEANQYYQQEASKLRSQIRNLQNTNRQMLGETISSMNPRDLKNLEAKIEKGIRNIRSKKNELLFSEIEDMQKREIDLHNNNQYLRARIAENERAQQMNLMPGGTNYELLPSQPFDSRNFFQVDALQPNHNYSRQDQIALQLV\r\n```\r\n**Examples of *nucleus_nt***:\r\n\r\n```\r\n>6176_49702_Blandfordia_punicea\r\nTCTTTCCAGGAACTAGAACAAATGAAGGAACGAGCAAAACAGATGCAGCTGCCACCAGTATATACAGGAAAGTGGGCCAGTGCTTCAGATGAAGAAGTTCAGGAAGAGCTGGCAAAGGGTACACCTTATACTTACCGATTTCGTGTACCAAAGGAAGGGAACTTGAAAATTGATGACCTTATTCGTGGTGAAGTAAGATTGTCATTGAATTGTATAAATAAC\r\n>6176_4341_Cyrilla_racemiflora\r\nCTTTTTTTTAATGCAGGTCCTGGTATTGGTGGAGACTATGGTCCGTATCGGCAATCTGAAAGAAATATCTTGTACAAACAATATGCTGAGAAGCTTTTAAAGTCTGGTCATGTTTATCGTTGCTTTTGTTCTAATGAGGAACTGGAAAAAATGAAGGAGATTGCAAAGTTAAAACAACTGCCTCCAGTGTACACTGGGAAGTGGGCCAACGCCACAGATGAGGAAGTGGAAGAAAAACTGGAGGAGGGAACCCCTTACACATACCGATTTCGAGTGCCCAATGAAGGAAGGTTGCAGATTGATGACCTTATTCGGGGAGAGGTTAGTTGGAGCTTGGACACACTTGGGGATTTTGTGATAATGAGAAGCAATGGACAACCCGTTTACAACTTTTGTGTCACCATTGATGATGCTACCATGGCTATCTCGCATGTTATAAGAGCAGAAGAGCATTTACCAAATACACTAAGGCAAGCACTAATATATAAGGCTCTTGGATTCCAAATGCCTTACTTTGCACATGTTTCTTTAATTCTTGCACCTGATCGGAGCAAACTTTCTAAACGGCATGGTGCAACTTCAGTGGGTCAGTTCAGGGAGATGGGATATCTGCCCCAGGCAATGGTGAACTATCTAGCACTGCTGGGTTGGGGTGATGGTACCGAAAATGAGTTCTTTACTCTAGATCAACTGGTTGAAAAGTTTTCAATTGACCGCGTCAACAAGAGTGGAGCCATTTTTGATTCAACCAAATTAAGGTGGATGAATGGTCAGCATTTAAGAGCTCTTTCCTCAGAAGAATTGACCAAGCTTATTGGTCAGCGCTGGAAGAGC\r\n```\r\n\r\nPaths to these reference sequences are set in the **config** file at lines **37-38**:\r\n\r\n```\r\nNUC_NT_REF=~/ORTHOSKIM-v.1.6/data/nucleusNT_unaligned.fa                            ## [37] nuclear reference sequences FASTA file (nucleotide sequences required). Please check restrictions for the sequence names.\r\nNUC_AA_REF=~/ORTHOSKIM-v.1.6/data/nucleusAA_unaligned.fa                            ## [38] nuclear reference sequences FASTA file (amino-acid sequences required). Please check restrictions for the sequence names.\r\n```\r\n\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/cpouchon/ORTHOSKIM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2.4.2. BUSCO targets",
        "parent_header": [
          "ORTHOSKIM: *in silico* sequence capture from genomic and transcriptomic libraries",
          "2. Input files",
          "2.4. Reference files (database)"
        ],
        "type": "Text_excerpt",
        "value": "\r\nFor the *busco* target, ORTHOSKIM uses the [BUSCO](https://busco.ezlab.org) dataset of amino acid ancestral sequences variants, called *ancestral_variants* in the BUSCO sets. The location of the reference busco sequences has to be set in the line **35** of the **config** file.\r\n\r\n```\r\nBUSCO_REF=~/ORTHOSKIM-v.1.6/data/BUSCO_viridiplantae.fa                             ## [35] BUSCO reference sequences FASTA file.\r\n```\r\n\r\nHere, an overview of the busco sequences needed:\r\n```\r\nuser$: head ~/OrthoSkim/data/BUSCO_viridiplantae.fa\r\n>10018_0\r\nIASVVSEIGLGSEPAFKVPEYDFRSPVDKLQKATGIPKAVFPVLGGLAVGLIALAYPEVLYWGFENVDILLESRPKGLSADLLLQLVAVKIVATSLCRASGLVGGYYAPSLFIGAATGMAYGKLILAEADPLLHLSILEVASPQAYGLVGMAATLAGVCQVPLTAVLLLFELTQDYRIVLPLLGAVGLSSWITSGQTKKELCKLESSLCLEDILVSEAMRTRYVTVLMSTLLVEAVSLMLAEKQSCALIVDEDNLLIGLLTLEDIQEFSKTVTPDMDLLSAEKIMGLSQLPVVVGLLDRECISL\r\n>10018_1\r\nVASVVSEIGLGSEPAFKVPEYDFRSAVDSLKKTLGLPKAVLPALGGLIVGLIALAYPEVLYWGFENVDILLESRPRGLSAELLLQLVAVKVVATSLCRASGLVGGYYAPSLFIGAATGMAYGKLIIAKADSLFDLEILEVASPQAYGLVGMAATLAGVCQVPLTAVLLLFELTQDYRIVLPLLGAVGLSSWISSKKTSKELCQLESSLCLKDVLVAEAMRTRYVTVLVTTSLAEALSLMLVEKQSLAVIVDEEDSLIGLLTLSDIQEYSKTVTPQLDLTKAEAIMELDRLAVVVGVLDRESIAL\r\n...\r\n```\r\n\r\nThe different BUSCO datasets can be downloaded at: https://busco-data.ezlab.org/v4/data/lineages/.\r\n\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/cpouchon/ORTHOSKIM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2.4.2. cpDNA, mtDNA, rDNA targets",
        "parent_header": [
          "ORTHOSKIM: *in silico* sequence capture from genomic and transcriptomic libraries",
          "2. Input files",
          "2.4. Reference files (database)"
        ],
        "type": "Text_excerpt",
        "value": "\r\nFor all cpDNA, mtDNA and rDNA target sequences, the database is built (using the `-m database` mode) from annotated genome files and corresponding \u2018seeds\u2019 sequences, which have to be provided by the user. ORTHOSKIM extracts all gene sequences from the annotated genomes and maps them onto the given seed sequences to correctly identify targeted reference genes and to create references sequence files.\r\n\r\n\r\n> **Note:** It is important to note that each of the three annotation files has to be collected for plant models, or both mtDNA and rDNA annotation files for other organisms, even if a single region is targeted (*e.g.* cpDNA sequences), as such files are also used to assign the genomic assemblies to the cpDNA, mtDNA or rDNA regions.\r\n\r\nBy default, ORTHOSKIM is supplied with a large enough reference sequence database for the study of green plants (i.e. Viridiplantaeae) genome skimming datasets: the BUSCO plant set (viridiplantaeae_odb10), 353 ultra-conserved elements set designed for angiosperms (UCE, Johnson et al., 2018; McLay et al. 2021), which can be used as \u2018nucleus_nt\u2019 references, and a collection of annotations for plant cpDNA, mtDNA and rDNA genomic regions collected from the NCBI. For any other eukaryotic taxa, please respect the input file formats and requirements.\r\n\r\n**Annotation files:**\r\n\r\nAs a taxonomic selection is done according to the queried taxon, we recommend including as many divergent taxa as possible in the annotation files. These files, in *EMBL* or *GENBANK* format, can be collected directly from the [NCBI](https://www.ncbi.nlm.nih.gov/genbank/). Please see the section [How to collect annotations (cpDNA, mtDNA, rDNA)](#4-how-to-collect-annotations-(cpdna,-mtdna,-rdna).\r\n\r\nAnnotations files, and their formats, are given in the **config** files at lines **14-19**:\r\n```\r\nMITO_ANNOTATIONS=~/ORTHOSKIM-v.1.6/data/mitochondrion_viridiplantae.gb              ## [14] input mtDNA Annotations file (in .gb or .embl)\r\nNRDNA_ANNOTATIONS=~/ORTHOSKIM-v.1.6/data/nucrdna_viridiplantae.gb                   ## [15] input rDNA annotations file (in .gb or .embl)\r\nCHLORO_ANNOTATIONS=~/ORTHOSKIM-v.1.6/data/chloroplast_viridiplantae.gb              ## [16] input cpDNA annotations file (in .gb or .embl)\r\nMITO_DB_FMT=genbank                                                                  ## [17] database format: [genbank,embl]\r\nNRDNA_DB_FMT=genbank                                                                 ## [18] database format: [genbank,embl]\r\nCHLORO_DB_FMT=genbank                                                                ## [19] database format: [genbank,embl]\r\n```\r\n\r\n\r\n**Seed files:**\r\n\r\nFor both cpDNA and mtDNA, seed files are given separately for the targeted coding (CDS) genes, with amino-acid sequences, and for the non-coding RNA genes, with nucleotide sequences. Moreover, the user has to provide a seed sequence file for the chloroplast trnL-UAA gene, a traditional plant barcode, as it is also captured for plant models. Concerning the rDNA, the three rRNA genes sequences (*i.e.* rrn18S, rrn5.8S and rrn26S) have to be included on the corresponding seed file. ORTHOSKIM next designs probes from these rRNA genes for both seeds and references, allowing the identification and the capture of the two internal transcribed spacer regions (ITS1 and ITS2).\r\nPlease see the section [How to collect seeds for annotations](#3-pipeline-description).\r\n\r\nSeeds are given in config file lines **40-41**,**46-48**,**54**:\r\n\r\n```\r\nSEEDS_MITO_CDS=~/ORTHOSKIM-v.1.6/resources/mitoCDS.seeds                           ## [40] mtDNA CDS seeds sequences FASTA file (amino-acid sequences required). Please check restrictions for the sequence names.\r\nSEEDS_MITO_rRNA=~/ORTHOSKIM-v.1.6/resources/mitorRNA.seeds                         ## [41] mtDNA rRNA seeds sequences FASTA file (nucleotide sequences required). Please check restrictions for the sequence names.\r\n...\r\nSEEDS_CHLORO_CDS=~/ORTHOSKIM-v.1.6/resources/chloroCDS.seeds                       ## [46] cpDNA CDS seeds sequences FASTA file (amino-acid sequences required). Please check restrictions for the sequence names.\r\nSEEDS_CHLORO_rRNA=~/ORTHOSKIM-v.1.6/resources/chlororRNA.seeds                     ## [47] cpDNA rRNA seeds sequences FASTA file (nucleotide sequences required). Please check restrictions for the sequence names.\r\nSEEDS_CHLORO_tRNA=~/ORTHOSKIM-v.1.6/resources/chlorotRNA.seeds                     ## [48] cpDNA tRNA seeds sequences FASTA file (nucleotide sequences required). Please check restrictions for the sequence names, with the anticodon in the name (e.g. trnL-UAA_taxid_genus_species)\r\n...\r\nSEEDS_NRDNA=~/ORTHOSKIM-v.1.6/resources/nucrdna.seeds                              ## [54] rDNA rRNA seeds sequences FASTA file (nucleotide sequences required). Please check restrictions for the sequence names.\r\n```\r\n\r\n\r\n\r\n\r\nExample of required cpDNA seeds for CDS targets:\r\n```\r\nuser$: (orthoskim-env) head chloroCDS.seeds\r\n>infA_4232_Helianthus_annuus\r\nMKEQKWIHEGLITESLPNGMFRVRLDNEDMILGYVSGKIRRSFIRILPGDRVKIEVSRYDSTRGRIIYRLRNKDSKD\r\n>psbA_3702_Arabidopsis_thaliana\r\nMTAILERRESESLWGRFCNWITSTENRLYIGWFGVLMIPTLLTATSVFIIAFIAAPPVDIDGIREPVSGSLLYGNNIISGAIIPTSAAIGLHFYPIWEAASVDEWLYNGGPYELIVLHFLLGVACYMGREWELSFRLGMRPWIAVAYSAPVAAATAVFLIYPIGQGSFSDGMPLGISGTFNFMIVFQAEHNILMHPFHMLGVAGVFGGSLFSAMHGSLVTSSLIRETTENESANEGYRFGQEEETYNIVAAHGYFGRLIFQYASFNNSRSLHFFLAAWPVVGIWFTALGISTMAFNLNGFNFNQSVVDSQGRVINTWADIINRANLGMEVMHERNAHNFPLDLAAVEAPSTNG\r\n>matK_3702_Arabidopsis_thaliana\r\nMCHFRTQENKDFTFSSNRISIQMDKFQGYLEFDGARQQSFLYPLFFREYIYVLAYDHGLNRLNRNRYIFLENADYDKKYSSLITKRLILRMYEQNRLIIPTKDVNQNSFLGHTSLFYYQMISVLFAVIVEIPFSLRLGSSFQGKQLKKSYNLQSIHSIFPFLEDKLGHFNYVLDVLIPYPIHLEILVQTLRYRVKDASSLHFFRFCLYEYCNWKNFYIKKKSILNPRFFLFLYNSHVCEYESIFFFLRKRSSHLRSTSYEVLFERIVFYGKIHHFFKVFVNNFPAILGLLKDPFIHYVRYHGRCILATKDTPLLMNKWKYYFVNLWQCYFSVWFQSQKVNINQLSKDNLEFLGYLSSLRLNPLVVRSQMLENSFLIDNVRIKLDSKIPISSIIGSLAKDKFCNVLGHPISKATWTDSSDSDILNRFVRICRNISHYYSGSSKKKNLYRIKYILRLCCVKTLARKHKSTVRTFLKRLGSGLLEEFLTGEDQVLSLIFPRSYYASKRLYRVRIWYLDILYLNDLVNHE\r\n```\r\n\r\nThe resulting reference sequence database consists of a multi-FASTA file for each type of gene sequence (*i.e.* CDS, rRNA and tRNA), generated with amino-acid sequences for CDS and nucleotide sequences for rRNA and tRNA genes.\r\n\r\nOutput files are given in the **config** file at lines :\r\n\r\n```\r\nMITO_REF_CDS=~/ORTHOSKIM-v.1.6/data/mit_CDS_unaligned.fa                            ## [42] mtDNA CDS reference sequences FASTA file (amino-acid sequences required). Please check restrictions for the sequence names.\r\nMITO_REF_rRNA=~/ORTHOSKIM-v.1.6/data/mit_rRNA_unaligned.fa                          ## [43] mtDNA rRNA reference sequences FASTA file (nucleotide sequences required). Please check restrictions for the sequence names.\r\n...\r\nCHLORO_REF_CDS=~/ORTHOSKIM-v.1.6/data/chloro_CDS_unaligned.fa                       ## [49] cpDNA CDS reference sequences FASTA file (amino-acid sequences required). Please check restrictions for the sequence names.\r\nCHLORO_REF_rRNA=~/ORTHOSKIM-v.1.6/data/chloro_rRNA_unaligned.fa                     ## [50] cpDNA rRNA gene reference sequences FASTA file (nucleotide sequences required). Please check restrictions for the sequence names.\r\nCHLORO_REF_tRNA=~/ORTHOSKIM-v.1.6/data/chloro_tRNA_unaligned.fa                     ## [51] cpDNA tRNA gene reference sequences FASTA file (nucleotide sequences required). Please check restrictions for the sequence names.\r\n...\r\nNRDNA_REF=~/ORTHOSKIM-v.1.6/data/nucrdna_rRNA_unaligned.fa                          ## [55] rDNA rRNA reference sequences FASTA file (nucleotide sequences required). Please check restrictions for the sequence names.\r\n```\r\n\r\nHere, an output example of CDS bank generated from the mitochondrial annotations (*i.e.* using the mode `-m database` and the target `-t mitochondrion`).\r\n```\r\nuser$: (orthoskim-env) head ~/OrthoSkim/data/mit_CDS_unaligned.fa\r\n>cox2_103999_Codonopsis_lanceolata\r\nMRELEKKNTHDFILPAPADAAEPWQLGFQDGATPIMQGIIDLHHDIFFFLIMILVLVLWILVRALWLFSSKRNPIPQRIVHGTTIEILRTIFPSIILMFIAIPSFALLYSMDEVVVDPAITIKAIGHQWYWTYEYSDYNSSDEESLTFDSYMIPEDDLELGQLRLLEVDNRVVVPANCHLRLIVTSADVPHSWAVPSLGVKCDAVPGRLNQVSISVLREGVYYGQCSEICGTNHAFMPIVVEAVSMKDYASRVSNQLIPQTGH\r\n>cox2_104537_Roya_obtusa\r\nMILKSLFQVVYCDAAEPWQLGFQDAATPMMQGIIDLHHDIMFFITIIITFVLWMLVRVLWHFHYKKNPIPQRFVHGTTIEIIWTIIPSIILMFIAIPSFALLYSMDEVVDPAITIKAIGHQWYWSYEYSDYSTSDEESLAFDSYMIPEDDLELGQLRLLEVDNRVVVPAKTHLRFIITSADVLHSWAVPSLGVKCDAVPGRLNQTSIFIKREGVYYGQCSEICGTNHAFMPIVVEAVSLDDYVSWVSNKME\r\n>cox1_112509_Hordeum_vulgare_subsp._vulgare\r\nMTNLVRWLFSTNHKDIGTLYFIFGAIAGVMGTCFSVLIRMELARPGDQILGGNHQLYNVLITAHAFLMIFFMVMPAMIGGFGNWFVPILIGAPDMAFPRLNNISFWLLPPSLLLLLSSALVEVGSGTGWTVYPPLSGITSHSGGAVDLAIFSLHLSGISSILGSINFITTIFNMRGPGMTMHRLPLFVWSVLVTAFLLLLSLPVLAGAITMLLTDRNFNTTFFDPAGGGDPILYQHLFWFFGHPEVYILILPGFGIISHIVSTFSRKPVFGYLGMVYAMISIGVLGFLVWAHHMFTVGLDVDTRAYFTAATMIIAVPTGIKIFSWIATMWGGSIQYKTPMLFAVGFIFLFTIGGLTGIVLANSGLDIALHDTYYVVAHFHYVLSMGAVFALFAGFYYWVGKIFGRTYPETLGQIHFWITFFGVNLTFFPMHFLGLSGMPRRIPDYPDAYAGWNALSSFGSYISVVGIRRFFVVVAITSSSGKNKKCAESPWAVEQNPTTLEWLVQSPPAFHTFGELPAVKETKNLS\r\n>nad1_119543_Anomodon_attenuatus\r\nMRLYIIGILAKILGIIIPLLLGVAFLVLAERKIMASMQRRKGPNVVGLFGLLQPLADGLKLMIKEPILPSSANLFIFLMAPVMTFMLSLVAWAVIPFDYGMVLSDLNVGILYLFAISSLGVYGIITAGWSSNSKYAFLGALRSAAQMVSYEVSIGLIIITVLICVGSRNFSEIVIAQKQIWFAAPLFPVFIMFFISCLAETNRAPFDLPEAEAESVAGYNVEYSSMGFALFFLGEYANMILMSSLCTLLFLGGWLPILDIPIFYVIPGSIRFSIKVLFFLFVYIWVRAAFPRYRYDQLMRLGWKVFLPLSLAWVVFVSGVLVAFDWLP\r\n```\r\n\r\n> **Note:** User may also supply their own reference FASTA files for each type of sequences (CDS, rRNA and tRNA) in the config file without running the *database* function, but needs to collect annotations for cpDNA, mtDNA and rDNA for the contig selection step.\r\n\r\n**Custom modes:**\r\n\r\nTwo free capture modes, working with any reference sequences, were also implemented for cpDNA and mtDNA (`-t chloroplast_nt` and `-t mitochondrion_nt` capture targets) that can be easily used to capture intergenic regions. For this purpose, a custom reference database has to be supplied in the **config** file for each of two modes (lines **44** and **52**), consisting of a multi-taxon FASTA file with nucleotide sequences of targeting regions and sequence names compliant with the ORTHOSKIM nomenclature.\r\n\r\n```\r\nMITO_REF_NT=~/ORTHOSKIM-v.1.6/data/mit_nt_custom.fa                                 ## [44] mtDNA custom reference sequences FASTA file (nucleotide sequences required). Please check restrictions for the sequence names.\r\n...\r\nCHLORO_REF_NT=~/ORTHOSKIM-v.1.6/data/chloro_nt_custom.fa                            ## [52] cpDNA custom reference sequences FASTA file (nucleotide sequences required). Please check restrictions for the sequence names.\r\n```\r\n\r\n\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/cpouchon/ORTHOSKIM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "8.3. phyloDB database of references",
        "parent_header": [
          "ORTHOSKIM: *in silico* sequence capture from genomic and transcriptomic libraries",
          "8. Additional modes for PhyloDB users"
        ],
        "type": "Text_excerpt",
        "value": "\r\nORTHOSKIM provides a mode to create a database from the all annotations performed within the project by using the `-m phyloskim_database` mode. For such purpose, all genes found in these annotations files are extracted following the ORTHOSKIM nomenclature. Output files are created according to the path-files set in the **config** file:\r\n```\r\nCHLORO_REF_CDS=~/ORTHOSKIM-v.1.6/data/chloro_CDS_unaligned.fa                       ## [48] cpDNA CDS reference sequences FASTA file (amino-acid sequences required). Please check restrictions for the sequence names.\r\nCHLORO_REF_rRNA=~/ORTHOSKIM-v.1.6/data/chloro_rRNA_unaligned.fa                     ## [49] cpDNA rRNA gene reference sequences FASTA file (nucleotide sequences required). Please check restrictions for the sequence names.\r\nCHLORO_REF_tRNA=~/ORTHOSKIM-v.1.6/data/chloro_tRNA_unaligned.fa                     ## [50] cpDNA tRNA gene reference sequences FASTA file (nucleotide sequences required). Please check restrictions for the sequence names.\r\n...\r\nNRDNA_REF=~/ORTHOSKIM-v.1.6/data/nucrdna_rRNA_unaligned.fa                          ## [54] rDNA rRNA reference sequences FASTA file (nucleotide sequences required). Please check restrictions for the sequence names.\r\n```\r\n\r\n>**Note:** For chloroplast annotations, only genes found in single and circular contig will be extracted to avoid the capture of mitochondrial contigs that can be annotated as chloroplast one.   \r\n\r"
      },
      "source": "https://raw.githubusercontent.com/cpouchon/ORTHOSKIM/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/cpouchon/ORTHOSKIM"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-06-13T12:47:21Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-03-29T12:52:18Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ORTHOSKIM allows in silico capture of targeted sequences in genomic or transcriptomic libraries."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.5.1. get summary statistics over assemblies",
        "parent_header": [
          "ORTHOSKIM: *in silico* sequence capture from genomic and transcriptomic libraries",
          "3. How to run ORTHOSKIM",
          "3.5. Additional modes"
        ],
        "type": "Text_excerpt",
        "value": "\r\nORTHOSKIM allows outputting summary statistic over assemblies by using the `-m statistic_assembly` mode once contigs were cleaned.\r\n\r\n`>` **list of commands**\r\n\r\n```\r\nuser$: (orthoskim-env) ./orthoskim -m statistic_assembly -c config_orthoskim.txt\r\n```\r\n\r\n`>` **output files**\r\n\r\nThe output *assemblies_statistics.txt* file is generated in `/Working_directory/Statistics/` folder, including:\r\n+ the library name\r\n+ the number of cleaned contigs\r\n+ the total reconstructed size\r\n+ the N50 (*i.e.* the sequence length of the shortest contig at 50% of the total genome length)\r\n+ the L50 (*i.e.* the smallest number of contigs whose length sum makes up half of genome size)\r\n+ the GC content\r\n\r\n```\r\nuser$: (orthoskim-env) head /Working_directory/Statistics/assemblies_statistics.txt\r\nActinidia_sp_1927898_FAM000131_BGN_MGF  14691   4768612 600.0   14691   38.05\r\nAdenophora_liliifolia_361368_PHA000132_BGN_NR   106586  17274304        231.0   106586  41.05\r\nAgrostis_canina_218142_TROM_V_92449_BXA_ASB     672     197898  2941.0  672     44.07\r\nAgrostis_vinealis_247443_TROM_V_47532_BXA_ARG   24475   6458884 278.0   24475   36.29\r\n```\r\n\r\nMoreover, statistics over contaminants in assemblies are generated in the *contaminant_full_statistics.txt* file, with the name of the library, the database name used, the total reconstructed size of the corresponding contaminant contigs removed and the taxonomy for these contaminant contigs.\r\n\r\n```\r\nuser$: (orthoskim-env) head /Working_directory/Statistics/contaminant_full_statistics.txt\r\nAnagallis_arvensis_4337_PHA000447_BGN_NS\tSILVA\t232\troot,eukaryota,fungi,ascomycota\r\nAnagallis_arvensis_4337_PHA000447_BGN_NS\tSILVA\t208\troot,eukaryota,eumetazoa,arthropoda\r\nAnagallis_arvensis_4337_PHA000447_BGN_NS\tDBFAM_chloroplast\t1603\troot,eukaryota,chlorophyta,hydrodictyaceae\r\nAnagallis_arvensis_4337_PHA000447_BGN_NS\tDBFAM_chloroplast\t546\troot,eukaryota,rhodophyta,ceramiales\r\nAnagallis_arvensis_4337_PHA000447_BGN_NS\tDBFAM_mitochondrion\t1294\troot,eukaryota,oomycetes,peronosporales\r\nAnagallis_arvensis_4337_PHA000447_BGN_NS\tDBFAM_mitochondrion\t786\troot,eukaryota,oomycetes,peronosporales\r\nAnagallis_arvensis_4337_PHA000447_BGN_NS\tDBFAM_mitochondrion\t227\troot,eukaryota,fungi,ascomycota\r\n```\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/cpouchon/ORTHOSKIM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.5.2. get summary statistics over capture",
        "parent_header": [
          "ORTHOSKIM: *in silico* sequence capture from genomic and transcriptomic libraries",
          "3. How to run ORTHOSKIM",
          "3.5. Additional modes"
        ],
        "type": "Text_excerpt",
        "value": "\r\nORTHOSKIM allows getting statistic from the sequence captured by using the `-m statistic_capture` mode for the different targets.\r\n\r\n\r\n`>` **list of commands**\r\n\r\n```\r\nuser$: (orthoskim-env) ./orthoskim -m statistic_capture -t chloroplast_CDS -c config_orthoskim.txt\r\n```\r\n>**Note:** multiple targets can be supplied, *e.g.* `-t chloroplast_CDS -t chloroplast_rRNA`.\r\n\r\n`>` **output files**\r\n\r\nThe pipeline generates a table (*report.tab*) within the `/Working_directory/Statistics/` folder, containing:\r\n+ the targeted sequence name (gene_name)\r\n+ the number of library having the targeted sequence (taxa)\r\n+ the mean length of the sequence (mean)\r\n+ the minimal length of sequence found across libraries (minlen)\r\n+ the maximal length of sequence found across libraries (maxlen)\r\n+ the standard deviation (std)\r\n+ the 25th percentil (pct25)\r\n+ the 50th percentil (pct50)\r\n+ the 75th percentil (pct75)\r\n\r\n```\r\nuser$: (orthoskim-env) head /Working_directory/Statistics/chloroplast_CDS_report.log\r\ngene\ttaxa  mean  min   max   std   pct25   pct50   pct75\r\nrpoC2\t7\t3316  1831  4152  880   2743\t3561\t4093\r\nrps19\t7\t280   273   309   11\t276     276     276\r\nycf1\t 6\t2026  378   5607  1769  820     1346\t2462\r\nrpoC1\t7\t1842  945   2121  413   1795\t2058\t2092\r\npsbA\t 7\t1059  1059  1059  0     1059\t1059\t1059\r\natpI\t 7\t741   741   744   1     741     741     741\r\nrpl2\t 7\t763   483   828   115   792     801     825\r\nndhH\t 7\t1179  1179  1179  0     1179\t1179\t1179\r\nrbcL\t 7\t1425  1425  1425  0     1425\t1425\t1425\r\n```\r\n<br>\r\n\r\n> **Note**: The full summary statistics of sequence capture, as shown in our paper, can be obtained by using the *FullStat.py* function provided in the src/ directory as following:\r\n```\r\nuser$: (orthoskim-env) ~/ORTHOSKIM-v.1.6/src/FullStat.py -pfind -p /Working_directory/Extraction/chloroplast_CDS/ -t chloroplast_CDS_done.log > stat_cp.txt\r\n```  \r\nwith -p: path where genes are extracted and -t: list of taxa to compute statistics (here all the libraries for which the capture was successfully done)\r\n\r\n<br>\r\n\r\n\r\nMoreover, when analyzing genome skimming libraries (*i.e.* by targeting chloroplast, mitochondrion or ribosomal sequences in the genomic libraries), we also strongly recommend investigating the summary statistics of the contigs for which sequences were captured once the capture is done, by using the function *StatContigs.py* as indicated:\r\n\r\n```\r\nuser$: (orthoskim-env) ~/ORTHOSKIM-v.1.6/src/StatContigs.py --path /Working_directory/Mapping/ --taxa taxalist --mode [all,chloroplast,mitochondrion,nucrdna] > statistics_captured_contigs.log\r\n```\r\n\r\nThis function generates a table with, for each library and each genomic compartment (according to the `--mode`), the number of contigs assembled, along with the total reconstructed size and the mean coverage. By using the `--mode all`, the first three columns of the output table correspond to the chloroplast, the next three to the mitochondrion and the last three to the nucrdna.\r\n\r\nHere is an example of such table generating with `--mode chloroplast`:\r\n\r\n```\r\nhead statistics_captured_contigs.log\r\nPrimula_acaulis_175104_PHA007169_RSZ_RSZAXPI000864-106\t26\t141628\t614.67\r\nPrimula_integrifolia_175074_PHA007216_BGN_LG\t6\t125017\t125.8\r\nPrimula_kitaibeliana_184184_CLA007221_BGN_MQI\t6\t126871\t309.78\r\nPrimula_kitaibeliana_184184_CLA007222_BGN_NND\t5\t126339\t117.18\r\nPrimula_latifolia_152139_PHA007223_BGN_LS\t5\t125006\t139.46\r\nPrimula_magellanica_175079_CLA010550_GWM_1236\t5\t126155\t172.52\r\nPrimula_marginata_175080_PHA007227_BGN_ID\t5\t124986\t192.91\r\n```\r\n\r\nThis can provide an indication about contaminant that can not be identified during the assembly cleaning (*e.g.* plant-plant contaminants, host-parasite DNA contaminant, chimeric contigs). For a 150kb chloroplast genome, we expect to have a reconstructed size over 125Kb (*i.e.* with only one inverted repeat). In the above example, `Primula_acaulis_175104_PHA007169_RSZ_RSZAXPI000864-106` is doubtful as it shows a higher reconstructed size and number of chloroplast contigs thant expected. In such case, user can check all genes captured for this sample before to include it on the alignment procedure if chloroplast sequences from another organism were captured, or if it can correspond to a chimeric contig. Users can choose the *COVCUTOFF* option during the capture.\r\n\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/cpouchon/ORTHOSKIM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "7.2 Database creation from annotations",
        "parent_header": [
          "ORTHOSKIM: *in silico* sequence capture from genomic and transcriptomic libraries",
          "7. Tutorial"
        ],
        "type": "Text_excerpt",
        "value": "\r\nOnce all reads have been downloaded and all config, tools files completed, we compute the database from the annotations and seed files giving in ORTHOSKIM. Reference sequences for CDS, rRNA and tRNA will be output according to the given path-files of the config file.\r\n\r\n```\r\n(orthoskim-env) ./orthoskim -m database -t chloroplast -c config_orthoskim.txt\r\n(orthoskim-env) ./orthoskim -m database -t mitochondrion -c config_orthoskim.txt\r\n(orthoskim-env) ./orthoskim -m database -t nucrdna -c config_orthoskim.txt\r\n```\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/cpouchon/ORTHOSKIM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9934753983984547,
      "result": {
        "original_header": "ORTHOSKIM: *in silico* sequence capture from genomic and transcriptomic libraries",
        "type": "Text_excerpt",
        "value": "\r\nORTHOSKIM is a pipeline providing different tools to  capture targeted sequences from genomic (*e.g.* genome skimming or hybrid capture libraries) and transcriptomic libraries, and to produce phylogenetic matrices for these sequences.\r\n\r\nThe sequence capture strategy can be aimed to chloroplast (cpDNA), mitochondrial (mtDNA), ribosomal (rDNA), nuclear (nuDNA) or BUSCO-type markers on any coding or non-coding sequences.\r\n\r\n ORTHOSKIM is a command-line program that needs to be run from a terminal/console, by calling different tasks, called 'modes', along with another parameter corresponding to specific 'targets' (see Figure 1). ORTHOSKIM can be parameterized in order to:\r\n 1. produce the sequence references databases (purple arrows in Figure 1) for cpDNA, mtDNA and rDNA targets\r\n 2. perform the contigs assemblies and cleaning from whole sequencing reads (green arrows)\r\n 3. capture the targeted sequences from mapping of contigs on the closest reference (step 3, blue arrows)\r\n 4. get multiple alignment of these sequences between libraries, suitable for phylogenetic inferences (orange arrows).\r\n\r\n<b>ORTHOSKIM flowchart</b>\r\n![Fig.1. ORTHOSKIM worflow](./resources/img/orthoskim_workflow.png)\r\n>**Fig. 1. ORTHOSKIM workflow**. Yellow boxes represent data that needs to be provided by users. To capture any of the chloroplast, ribosomal or mitochondrial sequences, users have to provide each of the three/two annotation genome files if plant/non-plant models are analyzed (see Pipeline description section).\r\n\r\n\r\n**Citation:**\r\n<br/>Pouchon, C., Boyer, F., Roquet, C., Denoeud, F., Chave, J., Coissac, E., Alsos, I.G., Consortium, T.P., Consortium, T.P., & Lavergne, S. 2022. [ORTHOSKIM](https://doi.org/10.1111/1755-0998.13584): In silico sequence capture from genomic and transcriptomic libraries for phylogenomic and barcoding applications. Molecular Ecology Resources n/a. https://doi.org/10.1111/1755-0998.13584.</font>  \r\n\r\n\r\nLicense: GPL https://www.gnu.org/licenses/gpl-3.0.html\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/cpouchon/ORTHOSKIM/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9439786998626555,
      "result": {
        "original_header": "4.1 Using the NCBI",
        "type": "Text_excerpt",
        "value": "1. Go to the [NCBI](https://www.ncbi.nlm.nih.gov/genbank/).\r\n2. Select `Nucleotide` database in the search bar\r\n3. Search for `mitochondrion complete genome`,`chloroplast complete genome` or `ribosomal RNA genes and internal transcribed spacers complete sequence ` with specific taxa e.g. `Viridiplantae`:\r\n + Select RefSeq (for cpDNA and mtDNA)\r\n + Select a sequence length\r\n + Select the right genomic compartment (for cpDNA and mtDNA)\r\n4. Download complete record in GenBank format\r\n\r\nExample for mtDNA annotations\r\n\r\n![mtdna](./resources/img/mtDNA_NCBI_annotation.png)\r\n\r\nExample for rDNA annotations\r\n\r\n![rdna](./resources/img/rDNA_NCBI_annotations.png)\r\n\r\n> **Note:** Please check that the three rRNA genes are included in the FEATURES\r\n![rdna2](./resources/img/rDNA_NCBI_annotations2.png)\r\n\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/cpouchon/ORTHOSKIM/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9109895095017463,
      "result": {
        "original_header": "8. Additional modes for PhyloDB users",
        "type": "Text_excerpt",
        "value": "\r\nAdditional modes were implemented for PhyloDB users (*i.e.* for PHA, PHN, PHC member project) to use ORTHOSKIM along with annotations performed under these projects with [Org.Asm](https://git.metabarcoding.org/org-asm/org-asm) assembler. Users can easily use all modes supplied in ORTHOSKIM in complement.\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/cpouchon/ORTHOSKIM/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9896981441330658,
      "result": {
        "original_header": "8.4. phyloDB extraction from annotations",
        "type": "Text_excerpt",
        "value": "\r\nFor each library of the sample file, ORTHOSKIM will perform genes extraction directly from annotation with `-m phyloskim_extraction_targeted` mode, according to a list of genes for `-t [chloroplast, nucrdna]` targets.\r\n\r\nMuli-FASTA files are generated per gene in the `/Working_directory/Extraction/` directory for each compartment and gene type.\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/cpouchon/ORTHOSKIM/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "7.1 Load environment, download sequences",
        "parent_header": [
          "ORTHOSKIM: *in silico* sequence capture from genomic and transcriptomic libraries",
          "7. Tutorial"
        ],
        "type": "Text_excerpt",
        "value": "\r\nWe set the ORTHOSKIM environment\r\n\r\n```\r\nconda activate orthoskim-env\r\n```\r\nand we download reads of each four taxa (*Lysimachia nummularia*, *Primula vulgaris*, *Pyrola americana* and *Vaccinium corymbosum*)\r\n\r\n```\r\nwget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR643/004/SRR6434984/SRR6434984_*.fastq.gz\r\nwget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR157/005/SRR1578145/SRR1578145_*.fastq.gz\r\nwget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR119/023/SRR11994223/SRR11994223_*.fastq.gz\r\nwget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR647/004/SRR6472974/SRR6472974_*.fastq.gz\r\n```\r\n\r\nhere an example of the sample file required with sample names following the ORTHOSKIM's nomenclature:\r\n\r\n```\r\nLysimachia_nummularia_175113_SRR6434984_leaf    /path/to/download/SRA_reads/SRR6434984_1.fastq.gz /path/to/download/SRA_reads/SRR6434984_2.fastq.gz\r\nPrimula_vulgaris_175104_SRR1578145_pin_leaf     /path/to/download/SRA_reads/SRR1578145_1.fastq.gz /path/to/download/SRA_reads/SRR1578145_2.fastq.gz\r\nPyrola_americana_93820_SRR11994223      /path/to/download/SRA_reads/SRR11994223_1.fastq.gz        /path/to/download/SRA_reads/SRR11994223_2.fastq.gz\r\nVaccinium_corymbosum_69266_SRR6472974_cv-Arlen_leaf     /path/to/download/SRA_reads/SRR6472974_1.fastq.gz /path/to/download/SRA_reads/SRR6472974_2.fastq.gz\r\n```\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/cpouchon/ORTHOSKIM/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/cpouchon/ORTHOSKIM/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/cpouchon/ORTHOSKIM/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "cpouchon/ORTHOSKIM"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ORTHOSKIM: in silico sequence capture from genomic and transcriptomic libraries"
      },
      "source": "https://raw.githubusercontent.com/cpouchon/ORTHOSKIM/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/cpouchon/ORTHOSKIM/master/Annotation_extraction.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/cpouchon/ORTHOSKIM/master/tools.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/cpouchon/ORTHOSKIM/master/./resources/img/orthoskim_workflow.png"
      },
      "source": "https://raw.githubusercontent.com/cpouchon/ORTHOSKIM/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/cpouchon/ORTHOSKIM/master/./resources/img/mtDNA_NCBI_annotation.png"
      },
      "source": "https://raw.githubusercontent.com/cpouchon/ORTHOSKIM/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/cpouchon/ORTHOSKIM/master/./resources/img/rDNA_NCBI_annotations.png"
      },
      "source": "https://raw.githubusercontent.com/cpouchon/ORTHOSKIM/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/cpouchon/ORTHOSKIM/master/./resources/img/rDNA_NCBI_annotations2.png"
      },
      "source": "https://raw.githubusercontent.com/cpouchon/ORTHOSKIM/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Installation",
        "parent_header": [
          "ORTHOSKIM: *in silico* sequence capture from genomic and transcriptomic libraries"
        ],
        "type": "Text_excerpt",
        "value": "\r\nORTHOSKIM is tested on Unix environment and downloaded from the source code:\r\n\r\n```\r\nuser$: wget https://github.com/cpouchon/ORTHOSKIM/archive/refs/tags/v.1.6.zip\r\nuser$: unzip v.1.6.zip\r\n```\r\n\r\nORTHOSKIM is packaged with all required dependencies in a [conda](https://conda.io/projects/conda/en/latest/user-guide/install/index.html) environment, which has to be installed (see https://conda.io/projects/conda/en/latest/user-guide/install/index.html).\r\n\r\nORTHOSKIM package is created within the following conda environment:\r\n\r\n```\r\nuser$: conda config --add channels defaults\r\nuser$: conda config --add channels bioconda\r\nuser$: conda config --add channels conda-forge\r\nuser$: conda config --set channel_priority strict\r\n```\r\n```\r\nuser$: conda create --prefix /your_path_to_install/orthoskim-env\r\nuser$: conda activate /your_path_to_install/orthoskim-env\r\nuser$: conda install -c conda-forge python ete3 biopython -y\r\nuser$: conda install -c bioconda spades exonerate diamond blast mafft trimal numpy joblib scipy -y\r\nuser$: conda deactivate\r\n```\r\n\r\nThis environment has then to be activated/deactivated when running ORTHOSKIM:\r\n\r\n```\r\nuser$: conda activate /your_path_to_install/orthoskim-env\r\nuser$: (orthoskim-env) ./ORTHOSKIM-v.1.6/orthoskim\r\nuser$: conda deactivate\r\n```\r\n\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/cpouchon/ORTHOSKIM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999669436130983,
      "result": {
        "original_header": "4.2 Using entrez-direct utilities (for cpDNA and mtDNA)",
        "type": "Text_excerpt",
        "value": "\r\n1. Install the Entrez-direct utilities\r\n\r\n```\r\nconda -c bioconda entrez-direct\r\n```\r\n\r\n2. Download all mtDNA or cpDNA genomes associated with your taxa (*e.g.* here Viridiplantae):\r\n\r\nBASH2*\r\n\r\n\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/cpouchon/ORTHOSKIM/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.999997299893103,
      "result": {
        "original_header": "4.3 Using local NCBI database (for cpDNA and mtDNA)",
        "type": "Text_excerpt",
        "value": "\r\n1. Download the `plastid` or `mitochondrion` NCBI database:\r\n```\r\nwget -m -np -nd 'ftp://ftp.ncbi.nlm.nih.gov/refseq/release/plastid/' -A.genomic.gbff.gz\r\ngunzip *.genomic.gbff.gz\r\ncat *.genomic.gbff >> plastid.genomic.gb\r\nrm *.genomic.gbff\r\n```\r\n2. Extract queried taxa from the database using the *AnnotFilter.py* python script supplied with ORTHOSKIM to filter annotations according to a queried taxonomy (*e.g.* viridiplantae)\r\nBASH2*\r\n>**NOTE:** the output (given with **-o**) has to be the same which is set in the config file (line 16: <font size=\"2\">**CHLORO_ANNOTATIONS**</font>). Morevover, multiple taxonomic levels can be given in -l with a coma separator (*e.g.* -l asteraceae,helianthae).\r\n\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/cpouchon/ORTHOSKIM/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/cpouchon/ORTHOSKIM/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "GNU General Public License v3.0",
        "spdx_id": "GPL-3.0",
        "type": "License",
        "url": "https://api.github.com/licenses/gpl-3.0",
        "value": "https://api.github.com/licenses/gpl-3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<https://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<https://www.gnu.org/licenses/why-not-lgpl.html>.\n"
      },
      "source": "https://raw.githubusercontent.com/cpouchon/ORTHOSKIM/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ORTHOSKIM"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "cpouchon"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 767195,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 761340,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/cpouchon/ORTHOSKIM/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "cpouchon",
          "type": "User"
        },
        "date_created": "2024-02-13T20:07:53Z",
        "date_published": "2024-02-13T20:23:36Z",
        "html_url": "https://github.com/cpouchon/ORTHOSKIM/releases/tag/v.1.6",
        "release_id": 141874567,
        "tag": "v.1.6",
        "tarball_url": "https://api.github.com/repos/cpouchon/ORTHOSKIM/tarball/v.1.6",
        "type": "Release",
        "url": "https://api.github.com/repos/cpouchon/ORTHOSKIM/releases/141874567",
        "value": "https://api.github.com/repos/cpouchon/ORTHOSKIM/releases/141874567",
        "zipball_url": "https://api.github.com/repos/cpouchon/ORTHOSKIM/zipball/v.1.6"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "2.2. Dependencies",
        "parent_header": [
          "ORTHOSKIM: *in silico* sequence capture from genomic and transcriptomic libraries",
          "2. Input files"
        ],
        "type": "Text_excerpt",
        "value": "\r\nThe path to all dependencies which are required in ORTHOSKIM must be supplied in the *tools.sh* file.\r\n\r\nTo retrieve dependencies, once the orthoskim-env is activated, please use:\r\n\r\n```\r\nuser$: conda activate orthoskim-env\r\nuser$: (orthoskim-env) which spades.py exonerate makeblastdb blastn mafft trimal tblastn\r\n/home/charles/.conda/envs/orthoskim-env/bin/spades.py\r\n/home/charles/.conda/envs/orthoskim-env/bin/exonerate\r\n/home/charles/.conda/envs/orthoskim-env/bin/makeblastdb\r\n/home/charles/.conda/envs/orthoskim-env/bin/blastn\r\n/home/charles/.conda/envs/orthoskim-env/bin/mafft\r\n/home/charles/.conda/envs/orthoskim-env/bin/trimal\r\n/home/charles/.conda/envs/orthoskim-env/bin/tblastn\r\n```\r\n\r\nPaths to dependencies are then filled on the *tools.sh* file using the following command:\r\n\r\n```\r\nuser$: nano tools.sh\r\n```\r\n```\r\n#!/bin/bash\r\n\r\nSPADES=/home/charles/.conda/envs/orthoskim-env/bin/spades.py\r\nEXONERATE=/home/charles/.conda/envs/orthoskim-env/bin/exonerate\r\nBLASTDB=/home/charles/.conda/envs/orthoskim-env/bin/makeblastdb\r\nBLASTN=/home/charles/.conda/envs/orthoskim-env/bin/blastn\r\nMAFFT=/home/charles/.conda/envs/orthoskim-env/bin/mafft\r\nTRIMAL=/home/charles/.conda/envs/orthoskim-env/bin/trimal\r\nTBLASTN=/home/charles/.conda/envs/orthoskim-env/bin/tblastn\r\n```\r\n\r\n\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/cpouchon/ORTHOSKIM/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "3. How to run ORTHOSKIM",
        "parent_header": [
          "ORTHOSKIM: *in silico* sequence capture from genomic and transcriptomic libraries"
        ],
        "type": "Text_excerpt",
        "value": "\r\nORTHOSKIM uses a command line interface (CLI) that can be accessed through a terminal. Please use the -help (-h) flag to see a description of the main arguments.\r\n\r\n```\r\nuser$: (orthoskim-env) ./orthoskim -h\r\n```\r\n\r\n\r\nAfter editing the *tools.sh* and *config_orthoskim.txt* files (with all required files and formats), ORTHOSKIM is called step by step within the conda environment with a `-m mode`, `-c config_file.txt` and specific `-t targets`.\r\n\r\nWe provide detail instructions through the description of arguments and the tutorials below.\r\n\r\n`>` **general parameter used**\r\n```\r\nTOOLS=~/ORTHOSKIM-v.1.6/tools.sh                                                    ## [1] file with dependencies aliases\r\nRES=~/run_orthoskim                                                                  ## [2] working directory for all ORTHOSKIM outputs\r\nEVALUE=0.00001                                                                       ## [3] evalue threshold for mapping steps\r\nTHREADS=15                                                                           ## [4] number of threads to use for multithreading steps\r\nVERBOSE=0                                                                            ## [5] set verbose to TRUE (1) or FALSE (0)\r\nPLANT_MODEL=yes                                                                      ## [6] plant model analyzed (yes/no)\r\nGENETIC_CODE=1                                                                       ## [7] NCBI genetic code number used for DNA translation (eg. 1: standard genetic code, 2: Vertebrate Mitochondrial Code...). Codes are available at https://www.ncbi.nlm.nih.gov/Taxonomy/Utils/wprintgc.cgi\r\nSAMPLES=~/ORTHOSKIM-v.1.6/resources/listSamples.tab                                ## [8] samples table. Specific format required:  (1) sample name with Genus_species_(subsp)_taxid_attributes; (2) path to forward reads; (3) path to reverse reads; (4) [additional for phyloskims users] chloroplast annotations\r\n```\r\n\r\n> **NOTE**: The NCBI genetic code number, which is used during the capture to find ORF, has to be set according to study model and the target sequence. By default the standard genetic code is used (here GENETIC_CODE=1). But for vertebrates, if mitochondrial sequences are targeted please set GENETIC_CODE=2. All code numbers are available [here](https://www.ncbi.nlm.nih.gov/Taxonomy/Utils/wprintgc.cgi).\r\n\r\n> **NOTE**: A *mode_done.log* file is created during the pipeline containing the list of sample libraries that were correctly processed, whereas unprocessed libraries were added into *mode_error.log* file. This file could be used to remove processed libraries from the initial sample file if the script has to be re-run. Command lines are also print if users want to re-run specific commands on some libraries.\r\n\r\n\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/cpouchon/ORTHOSKIM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.1. Database construction for cpDNA, mtDNA and rDNA targets (optional)",
        "parent_header": [
          "ORTHOSKIM: *in silico* sequence capture from genomic and transcriptomic libraries",
          "3. How to run ORTHOSKIM"
        ],
        "type": "Text_excerpt",
        "value": "\r\nORTHOSKIM provides a mode to create the gene reference database for the cpDNA, mtDNA and rDNA regions with `-m database` mode and the `-t mitochondrion`, `-t chloroplast`,`-t nucrdna` targets (purple arrows in Fig. 1).\r\n\r\nFor such purpose, annotations of genomic compartments has to be collected for different taxa in a single file (file location set into the config file). Only genes given in the seeds will be included on the reference sequences.\r\n\r\n`>` **list of commands**\r\n\r\n```\r\nuser$: (orthoskim-env) ./orthoskim -m database -t chloroplast -c config_orthoskim.txt\r\nuser$: (orthoskim-env) ./orthoskim -m database -t mitochondrion -c config_orthoskim.txt\r\nuser$: (orthoskim-env) ./orthoskim -m database -t nucrdna -c config_orthoskim.txt\r\n```\r\n\r\n`>` **parameters used**\r\n+ annotation files and respective formats\r\n```\r\nMITO_ANNOTATIONS=~/ORTHOSKIM-v.1.6/data/mitochondrion_viridiplantae.gb              ## [14] input mtDNA Annotations file (in .gb or .embl)\r\nNRDNA_ANNOTATIONS=~/ORTHOSKIM-v.1.6/data/nucrdna_viridiplantae.gb                   ## [15] input rDNA annotations file (in .gb or .embl)\r\nCHLORO_ANNOTATIONS=~/ORTHOSKIM-v.1.6/data/chloroplast_viridiplantae.gb              ## [16] input cpDNA annotations file (in .gb or .embl)\r\nMITO_DB_FMT=genbank                                                                  ## [17] database format: [genbank,embl]\r\nNRDNA_DB_FMT=genbank                                                                 ## [18] database format: [genbank,embl]\r\nCHLORO_DB_FMT=genbank                                                                ## [19] database format: [genbank,embl]\r\n```\r\n+ minimal coverage to the seed sequences to extract target sequences from the annotations\r\n```\r\nSEEDS_THRESHOLD=0.8                                                                  ## [26] minimal percent of seed coverage to keep genes in references. For example, if rrn28S in seeds is 3375bp longer, only rrn28S genes with length >= 0.8*3375bp will be considered in the final references list.\r\n```\r\n+ respective output files\r\n```\r\nMITO_REF_CDS=~/ORTHOSKIM-v.1.6/data/mit_CDS_unaligned.fa                            ## [42] mtDNA CDS reference sequences FASTA file (amino-acid sequences required). Please check restrictions for the sequence names.\r\nMITO_REF_rRNA=~/ORTHOSKIM-v.1.6/data/mit_rRNA_unaligned.fa                          ## [43] mtDNA rRNA reference sequences FASTA file (nucleotide sequences required). Please check restrictions for the sequence names.\r\n...\r\nCHLORO_REF_CDS=~/ORTHOSKIM-v.1.6/data/chloro_CDS_unaligned.fa                       ## [49] cpDNA CDS reference sequences FASTA file (amino-acid sequences required). Please check restrictions for the sequence names.\r\nCHLORO_REF_rRNA=~/ORTHOSKIM-v.1.6/data/chloro_rRNA_unaligned.fa                     ## [50] cpDNA rRNA gene reference sequences FASTA file (nucleotide sequences required). Please check restrictions for the sequence names.\r\nCHLORO_REF_tRNA=~/ORTHOSKIM-v.1.6/data/chloro_tRNA_unaligned.fa                     ## [51] cpDNA tRNA gene reference sequences FASTA file (nucleotide sequences required). Please check restrictions for the sequence names.\r\n...\r\nNRDNA_REF=~/ORTHOSKIM-v.1.6/data/nucrdna_rRNA_unaligned.fa                          ## [55] rDNA rRNA reference sequences FASTA file (nucleotide sequences required). Please check restrictions for the sequence names.\r\n```\r\n\r\n`>` **output files**\r\n\r\nDatabase mode generates references files for cpDNA, mtDNA and rDNA sequences separately according to the type of sequence: CDS, rRNA and tRNA.\r\n\r\n\r\n\r\n\r\n**NOTE:** We also supplied with ORTHOSKIM two python functions *SortDB_family.py* and *SortDB_lineages.py*\r\n+ ***SortDB_family.py*** allows selecting a subset of lineages by family in sequence or annotations databases. This allows to reduce the computational time of capture steps by reducing the number of sequences by families and keeping a taxonomic diversity within the database.\r\n+ ***SortDB_lineages.py*** allows extracting within the reference sequences databases all sequences corresponding to the queried phylum. These function can be run directly on outputs as indicated:\r\n```\r\nSortDB_family.py -i chloroplast_CDS.fa -f fasta -l 3 -o selected_chloroplast_CDS.fa -m gene\r\nSortDB_family.py -i chloroplast_ncbi.gb -f genbank -l 5 -o selected_chloroplast_CDS.embl -m genome\r\nSortDB_lineages.py -i chloroplast_CDS.fa --phylum Ericales --rank order\r\n```\r\nwith -i input genes/genomes file; -l number of queried lineages by family; -f input file format (embl/ genbank/fasta); -o output name (format fasta for genes or embl for genomes); -m mode (gene/genome)\r\n\r\n\r\n\r\n\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/cpouchon/ORTHOSKIM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.2.1. Genomic/transcriptomic assembly",
        "parent_header": [
          "ORTHOSKIM: *in silico* sequence capture from genomic and transcriptomic libraries",
          "3. How to run ORTHOSKIM",
          "3.2. Global assemblies and cleaning"
        ],
        "type": "Text_excerpt",
        "value": "\r\nGlobal assemblies are performed for each library given in the sample file (l.7) by using [SPAdes](http://cab.spbu.ru/software/spades/). The user has to use the `-m assembly -t spades` or `-m assembly -t rnaspades` commands to run the assemblies according to the type of library (green arrows in Fig. 1). After [SPAdes](http://cab.spbu.ru/software/spades/) runs, ORTHOSKIM has to preprocess scaffolding contigs by formatting the output files according to the library names provided in sample file. For such purpose, the user has to run the `-m format` mode with `-t spades` or `-t rnaspades` targets according to the type of library that were processed.\r\n\r\n\r\n`>` **list of commands**\r\n+ for genomic libraries\r\n\r\n```\r\nuser$: (orthoskim-env) ./orthoskim -m assembly -t spades -c config_orthoskim.txt\r\nuser$: (orthoskim-env) ./orthoskim -m format -t spades -c config_orthoskim.txt\r\n```\r\n+ for transcriptomic libraries\r\n\r\n```\r\nuser$: (orthoskim-env) ./orthoskim -m assembly -t rnaspades -c config_orthoskim.txt\r\nuser$: (orthoskim-env) ./orthoskim -m format -t rnaspades -c config_orthoskim.txt\r\n```\r\n\r\n\r\n`>` **parameters used**\r\n\r\n+ [SPAdes](http://cab.spbu.ru/software/spades/) is run by using different assembly options\r\n\r\n```\r\nTHREADS=15                                                                           ## [4] number of threads to use for multithreading steps\r\n...\r\nMEMORY=30                                                                            ## [9] max memory used in assembly\r\nKMER=55                                                                              ## [10] K-mer size used in assembly with single (here 55) or range values (as 21,33,55). Note: less than 128\r\n```\r\n\r\n`>` **output files**\r\n\r\nORTHOSKIM creates an `/Working_directory/Assembly/` directory including two subdirectories:\r\n+ `/Working_directory/Assembly/SPADES/` or `/Working_directory/Assembly/RNASPADES/` directory with all assemblies produced by SPAdes ordered by libraries (with the given sample names)\r\n+ `/Working_directory/Assembly/Samples/` directory with formatted unfiltered assemblies\r\n\r\n\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/cpouchon/ORTHOSKIM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.2.2. Assemblies cleaning",
        "parent_header": [
          "ORTHOSKIM: *in silico* sequence capture from genomic and transcriptomic libraries",
          "3. How to run ORTHOSKIM",
          "3.2. Global assemblies and cleaning"
        ],
        "type": "Text_excerpt",
        "value": "\r\nBefore the capture of target sequences, all assemblies are cleaned using the `-m cleaning` mode. This step identifies and removes  potential contaminant contigs in the final assemblies by mapping the assemblies on different databases including RNA, cpDNA, mtDNA and rDNA sequences for a wide range of taxa.  \r\n\r\n\r\nThe taxonomic level of the best hit is next identified for each contig of each library, and compared onto an expected taxonomy, defined by the user.\r\n\r\n\r\n`>` **list of commands**\r\n\r\n```\r\nuser$: (orthoskim-env) ./orthoskim -m cleaning -c config_orthoskim.txt\r\n```\r\n\r\n\r\n\r\n`>` **parameters used**\r\n\r\n\r\n```\r\nSIMILARITY_CONTA_THSLD=65                                                            ## [11] similarity threshold (%) used to check contaminants. We recommend to keep a low threshold as sequence are filtered according to their taxId (e.g. 65, meaning that only hits with a least 65% of similarity are used).\r\nMAPPING_CONTA_LENGTH=50                                                              ## [12] minimal mapping length. As for the threshold, we recommend to keep a low value here (e.g. 50).\r\nTAXONOMIC_PHYLUM_EXPECTED=Embryophyta                                                ## [13] taxonomic phylum expected for contigs (e.g. \"Embryophyta\",\"Viridiplantae\" for plants, otherwise \"Eumetazoa\",\"Arthropoda\",\"Annelida\",\"Mollusca\" etc); Note: \"Animalia\" is not allowed. Please check the taxonomy provided in the ~/ORTHOSKIM-v.1.6/resources/rRNA_database_taxonomy.txt file.\r\n```\r\n> **NOTE:** Please check the taxonomy provided in the ~/ORTHOSKIM-v.1.6/resources/rRNA_database_taxonomy.txt file to set a correct phylum (*e.g.* \"Embryophyta\", \"Eumetazoa\",\"Arthropoda\",\"Annelida\" etc).\r\n\r\n`>` **output files**\r\n\r\nCleaned assemblies are generated within the `/Working_directory/Assembly/Samples/filtered/` subdirectory. Contaminant contigs which were filtered out are listed in the `Assembly/Samples/log/` subdirectory\r\n\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/cpouchon/ORTHOSKIM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.3. Sequence capture",
        "parent_header": [
          "ORTHOSKIM: *in silico* sequence capture from genomic and transcriptomic libraries",
          "3. How to run ORTHOSKIM"
        ],
        "type": "Text_excerpt",
        "value": "\r\nThe capture of targeted sequence is achieved with the `-m capture` mode by following different steps:\r\n1. selection of the closest reference from the database according to the NCBI taxonomy.\r\n>**Note:** For BUSCO targets, this step is skipped as ancestral variants sequences are used as references.  \r\n2. pre-selection of contigs with a first mapping of assemblies\r\n> **Note:** For cpDNA, mtDNA and rDNA targets, this step is done by mapping the contigs onto the three annotation files provided for the database mode for plant models, or both mtDNA and rDNA annotation files for other models. This step is crucial to take into account transfers of genetic materials between these regions. Users have thus to collect all of these annotation files even if a single region is targeted (*e.g.* only the cpDNA CDS). For other targets, contigs are mapped directly on the closest references.\r\n3. exon/intron prediction and extraction of target sequences from a secondary mapping between the pre-selected contigs and the closest selected references\r\n> **Note:** Concerning plant models, a second control is performed during the capture to ensure the correct origin of reconstructed organelle genes. To do so, the extracted sequences are aligned against the cpDNA and mtDNA seeds. All cpDNA and mtDNA seeds have consequently to be collected by users even if only chloroplast genes will be captured.     \r\n\r\n\r\n`>` **list of commands**\r\n\r\nThe capture mode is running with specific targets according to the queried targeted sequences:\r\n\r\n```\r\nuser$: (orthoskim-env) ./orthoskim -m capture -t chloroplast_CDS -c config_orthoskim.txt\r\nuser$: (orthoskim-env) ./orthoskim -m capture -t chloroplast_rRNA -c config_orthoskim.txt\r\nuser$: (orthoskim-env) ./orthoskim -m capture -t chloroplast_tRNA -c config_orthoskim.txt\r\nuser$: (orthoskim-env) ./orthoskim -m capture -t chloroplast_nt -c config_orthoskim.txt\r\nuser$: (orthoskim-env) ./orthoskim -m capture -t mitochondrion_CDS -c config_orthoskim.txt\r\nuser$: (orthoskim-env) ./orthoskim -m capture -t mitochondrion_rRNA -c config_orthoskim.txt\r\nuser$: (orthoskim-env) ./orthoskim -m capture -t mitochondrion_nt-c config_orthoskim.txt\r\nuser$: (orthoskim-env) ./orthoskim -m capture -t nucrdna -c config_orthoskim.txt\r\nuser$: (orthoskim-env) ./orthoskim -m capture -t busco -c config_orthoskim.txt\r\nuser$: (orthoskim-env) ./orthoskim -m capture -t nucleus_aa -c config_orthoskim.txt\r\nuser$: (orthoskim-env) ./orthoskim -m capture -t nucleus_nt -c config_orthoskim.txt\r\n```\r\n\r\n`>` **parameters used**\r\n\r\n+ for the pre-selection of contigs for cpDNA, mtDNA and rDNA targets\r\n```\r\nMITO_ANNOTATIONS=~/ORTHOSKIM-v.1.6/data/mitochondrion_viridiplantae.gb              ## [14] input mtDNA Annotations file (in .gb or .embl)\r\nNRDNA_ANNOTATIONS=~/ORTHOSKIM-v.1.6/data/nucrdna_viridiplantae.gb                   ## [15] input rDNA annotations file (in .gb or .embl)\r\nCHLORO_ANNOTATIONS=~/ORTHOSKIM-v.1.6/data/chloroplast_viridiplantae.gb              ## [16] input cpDNA annotations file (in .gb or .embl)\r\nMITO_DB_FMT=genbank                                                                  ## [17] database format: [genbank,embl]\r\nNRDNA_DB_FMT=genbank                                                                 ## [18] database format: [genbank,embl]\r\nCHLORO_DB_FMT=genbank                                                                ## [19] database format: [genbank,embl]\r\nMITO_SIZE_MIN=200000                                                                 ## [20] minimal size of mtDNA genomes required for the pre-selection of contigs\r\nMITO_SIZE_MAX=1000000                                                                ## [21] maximal size of mtDNA genomes required for the pre-selection of contigs\r\nNRDNA_SIZE_MIN=2000                                                                  ## [22] minimal size of rDNA complex required for the pre-selection of contigs\r\nNRDNA_SIZE_MAX=9000                                                                  ## [23] maximal size of rDNA complex required for the pre-selection of contigs\r\nCHLORO_SIZE_MIN=140000                                                               ## [24] minimal size of cpDNA genomes required for the pre-selection of contigs\r\nCHLORO_SIZE_MAX=200000                                                               ## [25] maximal size of cpDNA genomes required for the pre-selection of contigs\r\nSEEDS_THRESHOLD=0.8                                                                  ## [26] minimal percent of seed coverage to keep genes in references. For example, if rrn28S in seeds is 3375bp longer, only rrn28S genes with length >= 0.8*3375bp will be considered in the final references list.\r\n```\r\n+ for the pre-selection of nuclear contigs (nucleus and busco targets)\r\n```\r\nMAX_SEQS=2                                                                           ## [34] maximal number of contigs per reference used in BLAST for the pre-selection of contigs in the nucleus and busco modes. To speed up the capture in these modes, only one or two contig(s) can be preselected for each reference.\r\n```\r\n>**Note:** This parameter can be set to 1 or 2 to keep only 1 or 2 contig(s) for each reference, which can greatly reduce the capture time.\r\n+ global parameters\r\n```\r\nGENETIC_CODE=1                                                                       ## [7] NCBI genetic code number used for DNA translation (eg. 1: standard genetic code, 2: Vertebrate Mitochondrial Code...). Codes are available at https://www.ncbi.nlm.nih.gov/Taxonomy/Utils/wprintgc.cgi\r\nMINLENGTH=90                                                                         ## [27] minimal length of captured sequence\r\nREFPCT=0.4                                                                           ## [28] minimal coverage fraction of the reference exon(s) (e.g. 0.4 means that at least 40% of reference exon(s) has to be captured).\r\nCOVERAGE=3                                                                           ## [29] minimal contig coverage (in k-mer coverage) allowed for the capture\r\nMINCONTLENGTH=500                                                                    ## [30] minimal contig length allowed for the capture\r\nEXO_SCORE=50                                                                         ## [31] minimal mapping score. We recommend to not set too high values (if the targeted sequence length is short) as a selection is done for the best alignments.\r\nCOVCUTOFF=on                                                                         ## [32] coverage cut-off option for organelles (cpDNA, mtDNA): [on/off] - cut-off done according to a standard deviations approach from the mean contig coverage weighted by the reconstructed size of the organelles.\r\nORFCOV=0.8                                                                           ## [33] minimal fraction of captured sequences covered by the longest open reading frame (ORF). For example, 0.8 means that 80% of the captured sequence has to be covered by an ORF.\r\n```\r\n>**Note:** For vertebrates, if mitochondrial sequences are targeted please set GENETIC_CODE=2. All code numbers are available [here](https://www.ncbi.nlm.nih.gov/Taxonomy/Utils/wprintgc.cgi).\r\n>**Note:** Filtering on ORF size can be set to 0.0 when the filtering option for paralogs is chosen during the alignment mode.\r\n\r\n+ references used, and specific regions of the target sequences to capture (TYPE=exon/intron/both)\r\n  + busco\r\n  ```\r\n  BUSCO_REF=~/ORTHOSKIM-v.1.6/data/BUSCO_viridiplantae.fa                             ## [35] BUSCO reference sequences FASTA file.\r\n  BUSCO_TYPE=exon                                                                      ## [36] region of reference captured: [exon,intron,all]\r\n  ```\r\n  + nucleus targets\r\n  ```\r\n  NUC_NT_REF=~/ORTHOSKIM-v.1.6/data/nucleusNT_unaligned.fa                            ## [37] nuclear reference sequences FASTA file (nucleotide sequences required). Please check restrictions for the sequence names.\r\n  NUC_AA_REF=~/ORTHOSKIM-v.1.6/data/nucleusAA_unaligned.fa                            ## [38] nuclear reference sequences FASTA file (amino-acid sequences required). Please check restrictions for the sequence names.\r\n  NUC_TYPE=exon                                                                        ## [39] region of reference captured: [exon,intron,all]\r\n  ```\r\n  + mtDNA targets\r\n  ```\r\n  SEEDS_MITO_CDS=~/ORTHOSKIM-v.1.6/resources/mitoCDS.seeds                           ## [40] mtDNA CDS seeds sequences FASTA file (amino-acid sequences required). Please check restrictions for the sequence names.\r\n  SEEDS_MITO_rRNA=~/ORTHOSKIM-v.1.6/resources/mitorRNA.seeds                         ## [41] mtDNA rRNA seeds sequences FASTA file (nucleotide sequences required). Please check restrictions for the sequence names.\r\n  MITO_REF_CDS=~/ORTHOSKIM-v.1.6/data/mit_CDS_unaligned.fa                            ## [42] mtDNA CDS reference sequences FASTA file (amino-acid sequences required). Please check restrictions for the sequence names.\r\n  MITO_REF_rRNA=~/ORTHOSKIM-v.1.6/data/mit_rRNA_unaligned.fa                          ## [43] mtDNA rRNA reference sequences FASTA file (nucleotide sequences required). Please check restrictions for the sequence names.\r\n  MITO_REF_NT=~/ORTHOSKIM-v.1.6/data/mit_nt_custom.fa                                 ## [44] mtDNA custom reference sequences FASTA file (nucleotide sequences required). Please check restrictions for the sequence names.\r\n  MITO_TYPE=exon                                                                       ## [45] region of reference captured: [exon,intron,all]\r\n  ```\r\n  >**Note:** for plant models, cpDNA seeds needs also to be supplied\r\n  + cpDNA targets\r\n  ```\r\n  SEEDS_CHLORO_CDS=~/ORTHOSKIM-v.1.6/resources/chloroCDS.seeds                       ## [46] cpDNA CDS seeds sequences FASTA file (amino-acid sequences required). Please check restrictions for the sequence names.\r\n  SEEDS_CHLORO_rRNA=~/ORTHOSKIM-v.1.6/resources/chlororRNA.seeds                     ## [47] cpDNA rRNA seeds sequences FASTA file (nucleotide sequences required). Please check restrictions for the sequence names.\r\n  SEEDS_CHLORO_tRNA=~/ORTHOSKIM-v.1.6/resources/chlorotRNA.seeds                     ## [48] cpDNA tRNA seeds sequences FASTA file (nucleotide sequences required). Please check restrictions for the sequence names, with the anticodon in the name (e.g. trnL-UAA_taxid_genus_species)\r\n  CHLORO_REF_CDS=~/ORTHOSKIM-v.1.6/data/chloro_CDS_unaligned.fa                       ## [49] cpDNA CDS reference sequences FASTA file (amino-acid sequences required). Please check restrictions for the sequence names.\r\n  CHLORO_REF_rRNA=~/ORTHOSKIM-v.1.6/data/chloro_rRNA_unaligned.fa                     ## [50] cpDNA rRNA gene reference sequences FASTA file (nucleotide sequences required). Please check restrictions for the sequence names.\r\n  CHLORO_REF_tRNA=~/ORTHOSKIM-v.1.6/data/chloro_tRNA_unaligned.fa                     ## [51] cpDNA tRNA gene reference sequences FASTA file (nucleotide sequences required). Please check restrictions for the sequence names.\r\n  CHLORO_REF_NT=~/ORTHOSKIM-v.1.6/data/chloro_nt_custom.fa                            ## [52] cpDNA custom reference sequences FASTA file (nucleotide sequences required). Please check restrictions for the sequence names.\r\n  CHLORO_TYPE=exon                                                                     ## [53] region of reference captured: [exon,intron,all]\r\n  ```\r\n  >**Note:** mtDNA seeds needs also to be supplied\r\n  + rDNA targets\r\n  ```\r\n  SEEDS_NRDNA=~/ORTHOSKIM-v.1.6/resources/nucrdna.seeds                              ## [54] rDNA rRNA seeds sequences FASTA file (nucleotide sequences required). Please check restrictions for the sequence names.\r\n  NRDNA_REF=~/ORTHOSKIM-v.1.6/data/nucrdna_rRNA_unaligned.fa                          ## [55] rDNA rRNA reference sequences FASTA file (nucleotide sequences required). Please check restrictions for the sequence names.\r\n  NRDNA_TYPE=exon                                                                      ## [56] region of reference captured: [exon,intron,all]\r\n  ```\r\n\r\n\r\n`>` **output files**\r\n\r\nCaptured sequences are generated in multi-FASTA files within the `/Working_directory/Extraction/` subdirectory and ordered by the targets used (*e.g.* `/Working_directory/Extraction/chloroplast_CDS/` subdirectory). One FASTA file is produced per targeted sequence (*e.g.* ycf1.fa). For CDS targets using amino-acid reference sequences, a control is performed by checking that the longest open reading frame (ORF) from the extracted exons of each targeted sequences covers at least a minimal fraction of the capture sequence set by users (*e.g.* ORFCOV=0.8). This step allows taking into account for variations or errors in gene predictions like alternative start codon in protein sequence of the reference. If such condition is not filled (*e.g.* due to pseudogenes or prediction errors), the sequence is tagged as a gene-like sequence (*e.g.* ycf1-like), and stored apart (*e.g.* ycf1-like.fa file).\r\n\r\nHere is an example of the produced sequences:\r\n\r\n```\r\nuser$: (orthoskim-env) ls -l /Working_directory/Extraction/chloroplast_CDS/\r\n-rw-r--r--  1 pouchonc  staff  1663 24 f\u00e9v  2021 accD.fa\r\n-rw-r--r--  1 pouchonc  staff  1680 24 f\u00e9v  2021 atpA.fa\r\n-rw-r--r--  1 pouchonc  staff  1653 24 f\u00e9v  2021 atpB.fa\r\n-rw-r--r--  1 pouchonc  staff   558 24 f\u00e9v  2021 atpE.fa\r\n-rw-r--r--  1 pouchonc  staff   790 24 f\u00e9v  2021 atpF-like.fa\r\n-rw-r--r--  1 pouchonc  staff   401 24 f\u00e9v  2021 atpH.fa\r\n-rw-r--r--  1 pouchonc  staff   896 24 f\u00e9v  2021 atpI.fa\r\n-rw-r--r--  1 pouchonc  staff  1136 24 f\u00e9v  2021 ccsA.fa\r\n-rw-r--r--  1 pouchonc  staff   836 24 f\u00e9v  2021 cemA.fa\r\n-rw-r--r--  1 pouchonc  staff   801 24 f\u00e9v  2021 clpP.fa\r\n-rw-r--r--  1 pouchonc  staff   395 24 f\u00e9v  2021 infA-like.fa\r\n-rw-r--r--  1 pouchonc  staff  1681 24 f\u00e9v  2021 matK.fa\r\n-rw-r--r--  1 pouchonc  staff  1260 24 f\u00e9v  2021 ndhA.fa\r\n-rw-r--r--  1 pouchonc  staff  1689 24 f\u00e9v  2021 ndhB.fa\r\n```\r\n\r\nFASTA sequences are ordered per library with the given library name:\r\n\r\n```\r\nuser$: (orthoskim-env) head /Working_directory/Extraction/chloroplast_CDS/accD.fa\r\n>Anagallis_minima_306292_PHA000451_BGN_IRD; gene=accD; info=exon; type=chloroplast_CDS; length=1503; match_contigs=1; ref_percent=0.96; n_exons=1; n_introns=0\r\nAATAGGGGGCAAGAAAACTCTATGGAAAAATGGCAGTTCAATTCGATATTGTCTAATAAGGAGTTAGAACACAGGTGTGAATTAAGTAAATCAATGGGCAATCTTGGTCCTATTGATGAAAATATCAGTGAAGATCCGAATCGAAATGATACGGCTCATCATAGTTGGAGTTATAGTGACAGTTCCACTTACAGTAATATTGATCCTTTATTTGACGTCAAGGACATTTTGAATTTCATCTCTGATGACACTTTTCTAGTTAGGGATAGGAATGGGGACAGCTATTCCATATATTTTGATATTGAAAATAATCTTTTTGAGATTCAAAATGATCATTCTTTTCTGAGTGAACTCGAAAGCCCTTTTTCTAGTTATCTGAAGTCTGGTTATCTGACTAATAGATCTAATAGTGACGATCCTTACTATGATCGTTACATGTATGATACTCAATATAGTTGGAATAATCACATTAATAGTTGCATTGACAGTTATCTTGATTCTCAACTCCGCATTAATGCTTACATTGTAAATAGTAGTGACAATTATAGTGAAAGTTACCTTTTTCGTTCCATTTATGGTGAAAGTCGAAATAGTATTGAAAGTGAAAGTTCTCGTATAAGGACTATGGGTGATTTAACTCTAAGAGAAAGTTCTAATAATCTAGATGTAACTCAAAAATACAGACATTTGTGGGTTCAATGCGAAAAGTGTTATGGATTAAATTATAAGAAAATTTTGAAGTCAAAAATGAATATTTGTGAACAATGCGGATATTATTTGAAAATGAATAGTTCAGATAGAATAGAACTTTTGATTGATCCAGGCACTTGGGATCCTATGGATGAAGACATGGTCTCCCTGGATCCCATTGAATTTCATTCGGAGGAGGAGCCTTATAAAGATCGTATTGATTCGTATCAAAGAAAGACAGGGTTAACTGAGGCTGTTCAAACAGGCATAGGACAATTAAACGGTATTCCCGTAGCAATTGGGGTTATGGATTTTCAATTTATGGGGGGTAGTATGGGATCTGTAGTTGGTGAAAAAATTACCCGTTTGATCGAGTATGCTACCAAAAATTTTCTACCTCTTATTCTAGTGTGTGCTTCTGGGGGTGCACGTATGCAAGAAGGAAGTTTGAGCTTGATGCAAATGGCTAAAATATCTTCTGCTTTATACGATTATCAATCAAATAAAAAACTCTTTTATGTACCAATTCTTACATCTCCGACTACGGGTGGGGTGACAGCTAGTTTCGGTATGTTGGGAGATATTATTATTGCCGAACCAAATGCCTACATTGCATTTGCGGGTAAAAGAGTAATTGAACAAACATTAAATAAAACAGTACCCGAAGGGTCACAAGCGGCCGAATATTTATTCCAGAAAGGCTTATTAGATCTAATCGTACCACGTAATCTTTTAAGAAGCGTTCTGAGTGAATTATTTCAACTCCACGCTTTCTTTCCTTTGAATCAAAATTCAAAGAGTATTAAGTTTAAT\r\n```\r\n> **Note:** Each sequence header includes: the gene name (gene=accD), the captured region of the target (info=exon), the target of the capture mode (type=chloroplast_CDS), the length of the sequence (length=1503), the number of contigs mapping on the reference of the target sequence (match_contigs=1), the part of the reference sequence covered by the captured sequence (ref_percent=0.96) and the number of exons/introns found (n_exons=1; n_introns=0).\r\n\r\nORTHOSKIM generates also a `/Working_directory/Mapping/` subdirectory, including the *gff* output tables for each library used for the capture but also the list of contigs for which targeted sequences were captured in case the user prefers to use the contig sequences directly (*e.g.* *Mapping/mitochondrion/library_name.cont_mtdna.log*).\r\n\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/cpouchon/ORTHOSKIM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.4. Alignment of taxa",
        "parent_header": [
          "ORTHOSKIM: *in silico* sequence capture from genomic and transcriptomic libraries",
          "3. How to run ORTHOSKIM"
        ],
        "type": "Text_excerpt",
        "value": "\r\nORTHOSKIM provides a mode to align each captured sequences across the libraries by using the `-m alignment` mode and by choosing which sequences and taxa to align. Alignments can be filtered using [TRIMAL](http://TRIMAL.cgenomics.org/) if the option is chosen by users (*on/off* at line 58 of the config file). In addition, users has to choose which libraries will be aligned (list of libraries stated in l. 58 of the config file).\r\n\r\nWe also developed an optional mode to identify and remove putative paralogous sequences using a sliding window approach (*on/off* at line 61 of the config file). To do this, for each gene, a simple consensus sequence is first created at the genus and the family level. Each sequence is next compared to the genus-level consensus within the sliding window and removed if the amount of polymorphic sites exceeds the given level. A minimal number of taxa is also required to generate the consensus sequences. If there is not enough sequences to get a genus-level consensus, each sequence is compared to the family-level consensus. The sliding window length and the maximum number of variable sites within this window can be modified at both genus and family levels.\r\n\r\nAn option can be used to export the produced consensus sequences at this step (*on/off* l.68). These sequences may thus be used in reads mapping pipelines.\r\n\r\n`>` **list of commands**\r\n\r\n```\r\nuser$: (orthoskim-env) ./orthoskim -m alignment -t chloroplast_CDS -t chloroplast_rRNA -t chloroplast_tRNA -c config_orthoskim.txt\r\n```\r\n>**Note:** Here, we used multiple targets with the `-t option` to align CDS, rRNA and tRNA sequences in a single run.\r\n\r\n`>` **parameters used**\r\n\r\n```\r\nTAXA_ALN=~/ORTHOSKIM-v.1.6/resources/selTaxa_Primulaceae.tab                        ## [58] file with selected taxa (file with each line corresponding to one taxon)\r\nTRIMMING=on                                                                          ## [59] alignment trimming option using trimAl: [on/off]\r\nTRIMMODE=automated1                                                                  ## [60] trimming mode of trimAl: [automated1,gappyout,strictplus]. See trimAl documentation.\r\nPARALOG_FILT=on                                                                      ## [61] filtering paralogs mode: [on,off]\r\nGENUS_WINDOW_SIZE=100                                                                ## [62] Genus level - sliding window size (e.g. 20 nt)\r\nGENUS_WINDOW_PSITE=20                                                                ## [63] Genus level - maximal number of polymorphic sites within the sliding window allowed. All sequences with more than <GENUS_WINDOW_PSITE> will be removed.\r\nFAMILY_WINDOW_SIZE=150                                                               ## [64] Family level - sliding window size (e.g. 20 nt)\r\nFAMILY_WINDOW_PSITE=30                                                               ## [65] Family level - maximal number of polymorphic sites within the sliding window allowed. All sequences with more than <FAMILY_WINDOW_PSITE> will be removed.\r\nGENUS_TAXA=3                                                                         ## [66] Genus level - minimal number of taxa required for the consensus\r\nFAMILY_TAXA=5                                                                        ## [67] Family level - minimal number of taxa required for the consensus\r\nEXPORT=on                                                                            ## [68] option to export the consensus sequences used at both genus and family levels\r\nMISSING_RATIO=1.0                                                                    ## [69] maximal threshold of missing data allowed in the final matrix (e.g. 0.5 means that final sequence has fewer than 50% of missing data). Taxa that not passed this threshold are removed.\r\nGENES_TO_CONCAT=~/ORTHOSKIM-v.1.6/resources/listGenes_To_Concat.tab                 ## [70] file with selected genes for the alignment (each line corresponds to one gene)\r\n```\r\n\r\n`>` **output files**\r\n\r\nORTHOSKIM produces a concatenated alignment of sequences along with a partition file under a RAxML-style format suitable for phylogenetic inferences within the `/Working_directory/Alignment/` subdirectory. For such needs, users have to choose which sequences will be concatenated from a given list (list stated in l. 66 of the config file). A file with information about gappy or missing data is also produced by library.\r\n\r\n```\r\nuser$: (orthoskim-env) ls -l /Working_directory/Alignment/\r\n-rw-r--r--    1 pouchonc  staff        1341  5 mai 10:41 concatenated.fa\r\n-rw-r--r--    1 pouchonc  staff          21  5 mai 10:41 concatenated.info\r\n-rw-r--r--    1 pouchonc  staff         101  5 mai 10:41 concatenated.missingdata\r\n-rw-r--r--    1 pouchonc  staff          19  5 mai 10:41 concatenated.partitions\r\n```\r\n\r\nHere are some examples of these files:\r\n```\r\nhead /Working_directory/Alignment/concatenated.fa\r\n>Carex_elongata_240685_PHA001842_BGN_MAS\r\nCTTACTATAAATTTCATTGTTGTCGATATTGACATGTAGAAT-GGACTCTCTCTTTATTCTCGTTTGATTTATCA-TCATTTTTTCAATCTAACAAACTCTAAAATGAATAAAATAAATAGAATAAATGGATTATTCAAAATTGAGTTTTTTCTCATTAAATTTCATATTTAAATCAATTCACCAAAAATAATTCATAATTTATGGAATTCATCGAAATTCCTGAATTTGCTATTCCATAATCATTATTAATTTATTTATTGACATGAATAAT-ATGATTTGATTGTTATTATGATTAATAATTTAATCAATTATTATATATACGTACGTCTTTGTTTGGTATAAAGCGCTATCCTTTCTCTTATTTCGATAGAGAAATTTTAGTATTGCAACATAATAAATTCTATTCGTTAGAAAAGCTTCCATCGAGTCTCTGCACCTATCTTTAATATTAGATAAGAAATATTATTCTTTCTTATCTGAAATAAGAAATATTTTCTATATTTCTTTTTCTCAAAAAGAAGATTTGGCTCAGGATTGCCCATTT---TTAATTCCAGGGTTTCTCTGAATTTGGAAGTTAACACTTAGCAAGTTTCCATACCAAGGCTCAATCCAATGCAAG\r\n>Dipsacus_fullonum_183561_TROM_V_159792_CDM_BFO\r\nCTTACTAAAAATTTCATTGTTGCCGGTATTGACATGTAGAATGGGACTCTATCTTTATTCTCGTCCGATTAATCAGTTCTTCAAAAGATCTATCAGACTATGGAGT--------------GAATGATTTGATCAATGAGTATTCGATTCTTTC---------TTCAATATAGAATCACTTCACAA---------------------------------------------CCATTCTCCCATTTTGATATATATCAATATAGATTCGGGTCGTCATTAATCATTTGGTAGAGTATATAGTATTTCAATACCTATCTCTATGGTTATAGGTTTATCCTT--------------TCTTTTCTGAAGTTTCTATAGAAGGATTCT-TTCTACCAACACAGTCAACCCCATTTGTTAGAACAGCTTCCATTGAGTCTCTGCACCTATCCTTTTTTTTGA--------------TTTTAGCTTTCTGAA---------------CCCTTGTTTGTTTTCGGAAAACTGGATTTGGCTCAGGATTGCCCGTTTTTATTAATTCCGGGGTTTCTCTGAATTTGAAAGTTCTCACTTAGTAGGTTTCCATACCAAGGCTCAATCCAAT-TAAG\r\n```\r\n```\r\nhead /Working_directory/Alignment/concatenated.partition\r\nDNA, part1 = 1-625\r\n```\r\n```\r\nhead /Working_directory/Alignment/concatenated.info\r\n1\t625\ttrnL-UAA\tpart1\r\n```\r\n```\r\nhead /Working_directory/Alignment/concatenated.missingdata\r\nCarex_elongata_240685_PHA001842_BGN_MAS\t0.0096\r\nDipsacus_fullonum_183561_TROM_V_159792_CDM_BFO\t0.1808\r\n```\r\n\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/cpouchon/ORTHOSKIM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.5.3. checking of captured sequences",
        "parent_header": [
          "ORTHOSKIM: *in silico* sequence capture from genomic and transcriptomic libraries",
          "3. How to run ORTHOSKIM",
          "3.5. Additional modes"
        ],
        "type": "Text_excerpt",
        "value": "\r\nOnce sequence were captured, users can use the `-m checking` mode on some sequences to check the family rank found for each library. A BLAST is processed on NCBI database, and a taxonomic comparison is made according to the given taxID of the library.\r\n\r\n`>` **list of commands**\r\n\r\n```\r\nuser$: (orthoskim-env) ./orthoskim -m checking -c config_orthoskim.txt\r\n```\r\n\r\n`>` **parameters used**\r\n\r\n```\r\nBARCODES=( matK rbcL )                                                               ## [71] list of sequences used for the taxonomic checking. Users have to respect spaces between sequence names. If only one gene, set BARCODES=( matK ). We recommend to use only genes that are widely represented in the NCBI database (e.g. traditional barcodes).\r\nBARCODES_TYPE=chloroplast_CDS                                                        ## [72] ORTHOSKIM targets including these genes [chloroplast_CDS, chloroplast_rRNA, chloroplast_tRNA, chloroplast_nt, mitochondrion_CDS, mitochondrion_rRNA, mitochondrion_nt,nuleus_aa, nucleus_nt, busco, nucrdna]\r\nDB_LOCAL=off                                                                         ## [73] option to run BLAST locally by using the NCBI nt database, which has previously to be downloaded: [on/off]. Otherwise, NCBI server will be used.\r\nBLAST_NT_DB=~/path_to_ntdb/nt                                                        ## [74] local NCBI nt database files if DB_LOCAL=on\r\nTAXA_CHECK=~/ORTHOSKIM-v.1.6/resources/selTaxa_Primulaceae.tab                      ## [75] file with selected taxa for the taxonomic checking (each line corresponding to one taxon)\r\nFAMILIES_LOCAL=off                                                                   ## [76] option to use a local list of taxonomic families, when query taxIDs are not yet included in the NBCI taxonomy: [on/off]. If this option is used, the CORRESPONDING_FAMILIES file needs to be given.\r\nCORRESPONDING_FAMILIES=ecofind_out.tab                                               ## [77] table with query taxID and corresponding family (with space separator)\r\n```\r\n\r\n`>` **output files**\r\n\r\nORTHOSKIM generates a `/Working_directory/Errors/` subdirectory with a *ValidationSamples.out* file. This file gives for each library and for each sequence analyzed (*e.g.* matK and rbcL genes) if the taxonomic checking is TRUE, FALSE or NA (*i.e.* missing), as following:\r\n```\r\nAbies_alba_45372_PHA000002_RSZ_RSZAXPI000687-79\tTRUE\tTRUE\r\nAbies_balsamea_90345_TROM_V_43901_CDM_AOZ\tTRUE\tTRUE\r\nAbies_sibirica_97169_TROM_V_97238_CDM_AVE\tTRUE\tTRUE\r\n```\r\n> If users want to combine chloroplast_tRNA (*e.g.* trnL-UAA) and CDS genes (*e.g.* matK and rbcL), a new directory must be created in the `/Working_directory/Extraction/` folder including all the queried sequences for the checking step; users have next to set the name of this directory in the config file.\r\n\r\nWe also recommend investigating the reconstructed size and the number of contigs for which targeted sequences were captured to identify spurious taxa (see following section 3.5.2.).\r\n\r\n\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/cpouchon/ORTHOSKIM/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 00:38:46",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "10. Support",
        "parent_header": [
          "ORTHOSKIM: *in silico* sequence capture from genomic and transcriptomic libraries"
        ],
        "type": "Text_excerpt",
        "value": "For questions and comments, please contact: [contact@orthoskim.org](mailto:contact@orthoskim.org?subject=[GitHub]%20Support)\r\n"
      },
      "source": "https://raw.githubusercontent.com/cpouchon/ORTHOSKIM/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "3.5.1. get summary statistics over assemblies",
        "parent_header": [
          "ORTHOSKIM: *in silico* sequence capture from genomic and transcriptomic libraries",
          "3. How to run ORTHOSKIM",
          "3.5. Additional modes"
        ],
        "type": "Text_excerpt",
        "value": "\r\nORTHOSKIM allows outputting summary statistic over assemblies by using the `-m statistic_assembly` mode once contigs were cleaned.\r\n\r\n`>` **list of commands**\r\n\r\n```\r\nuser$: (orthoskim-env) ./orthoskim -m statistic_assembly -c config_orthoskim.txt\r\n```\r\n\r\n`>` **output files**\r\n\r\nThe output *assemblies_statistics.txt* file is generated in `/Working_directory/Statistics/` folder, including:\r\n+ the library name\r\n+ the number of cleaned contigs\r\n+ the total reconstructed size\r\n+ the N50 (*i.e.* the sequence length of the shortest contig at 50% of the total genome length)\r\n+ the L50 (*i.e.* the smallest number of contigs whose length sum makes up half of genome size)\r\n+ the GC content\r\n\r\n```\r\nuser$: (orthoskim-env) head /Working_directory/Statistics/assemblies_statistics.txt\r\nActinidia_sp_1927898_FAM000131_BGN_MGF  14691   4768612 600.0   14691   38.05\r\nAdenophora_liliifolia_361368_PHA000132_BGN_NR   106586  17274304        231.0   106586  41.05\r\nAgrostis_canina_218142_TROM_V_92449_BXA_ASB     672     197898  2941.0  672     44.07\r\nAgrostis_vinealis_247443_TROM_V_47532_BXA_ARG   24475   6458884 278.0   24475   36.29\r\n```\r\n\r\nMoreover, statistics over contaminants in assemblies are generated in the *contaminant_full_statistics.txt* file, with the name of the library, the database name used, the total reconstructed size of the corresponding contaminant contigs removed and the taxonomy for these contaminant contigs.\r\n\r\n```\r\nuser$: (orthoskim-env) head /Working_directory/Statistics/contaminant_full_statistics.txt\r\nAnagallis_arvensis_4337_PHA000447_BGN_NS\tSILVA\t232\troot,eukaryota,fungi,ascomycota\r\nAnagallis_arvensis_4337_PHA000447_BGN_NS\tSILVA\t208\troot,eukaryota,eumetazoa,arthropoda\r\nAnagallis_arvensis_4337_PHA000447_BGN_NS\tDBFAM_chloroplast\t1603\troot,eukaryota,chlorophyta,hydrodictyaceae\r\nAnagallis_arvensis_4337_PHA000447_BGN_NS\tDBFAM_chloroplast\t546\troot,eukaryota,rhodophyta,ceramiales\r\nAnagallis_arvensis_4337_PHA000447_BGN_NS\tDBFAM_mitochondrion\t1294\troot,eukaryota,oomycetes,peronosporales\r\nAnagallis_arvensis_4337_PHA000447_BGN_NS\tDBFAM_mitochondrion\t786\troot,eukaryota,oomycetes,peronosporales\r\nAnagallis_arvensis_4337_PHA000447_BGN_NS\tDBFAM_mitochondrion\t227\troot,eukaryota,fungi,ascomycota\r\n```\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/cpouchon/ORTHOSKIM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.5.2. get summary statistics over capture",
        "parent_header": [
          "ORTHOSKIM: *in silico* sequence capture from genomic and transcriptomic libraries",
          "3. How to run ORTHOSKIM",
          "3.5. Additional modes"
        ],
        "type": "Text_excerpt",
        "value": "\r\nORTHOSKIM allows getting statistic from the sequence captured by using the `-m statistic_capture` mode for the different targets.\r\n\r\n\r\n`>` **list of commands**\r\n\r\n```\r\nuser$: (orthoskim-env) ./orthoskim -m statistic_capture -t chloroplast_CDS -c config_orthoskim.txt\r\n```\r\n>**Note:** multiple targets can be supplied, *e.g.* `-t chloroplast_CDS -t chloroplast_rRNA`.\r\n\r\n`>` **output files**\r\n\r\nThe pipeline generates a table (*report.tab*) within the `/Working_directory/Statistics/` folder, containing:\r\n+ the targeted sequence name (gene_name)\r\n+ the number of library having the targeted sequence (taxa)\r\n+ the mean length of the sequence (mean)\r\n+ the minimal length of sequence found across libraries (minlen)\r\n+ the maximal length of sequence found across libraries (maxlen)\r\n+ the standard deviation (std)\r\n+ the 25th percentil (pct25)\r\n+ the 50th percentil (pct50)\r\n+ the 75th percentil (pct75)\r\n\r\n```\r\nuser$: (orthoskim-env) head /Working_directory/Statistics/chloroplast_CDS_report.log\r\ngene\ttaxa  mean  min   max   std   pct25   pct50   pct75\r\nrpoC2\t7\t3316  1831  4152  880   2743\t3561\t4093\r\nrps19\t7\t280   273   309   11\t276     276     276\r\nycf1\t 6\t2026  378   5607  1769  820     1346\t2462\r\nrpoC1\t7\t1842  945   2121  413   1795\t2058\t2092\r\npsbA\t 7\t1059  1059  1059  0     1059\t1059\t1059\r\natpI\t 7\t741   741   744   1     741     741     741\r\nrpl2\t 7\t763   483   828   115   792     801     825\r\nndhH\t 7\t1179  1179  1179  0     1179\t1179\t1179\r\nrbcL\t 7\t1425  1425  1425  0     1425\t1425\t1425\r\n```\r\n<br>\r\n\r\n> **Note**: The full summary statistics of sequence capture, as shown in our paper, can be obtained by using the *FullStat.py* function provided in the src/ directory as following:\r\n```\r\nuser$: (orthoskim-env) ~/ORTHOSKIM-v.1.6/src/FullStat.py -pfind -p /Working_directory/Extraction/chloroplast_CDS/ -t chloroplast_CDS_done.log > stat_cp.txt\r\n```  \r\nwith -p: path where genes are extracted and -t: list of taxa to compute statistics (here all the libraries for which the capture was successfully done)\r\n\r\n<br>\r\n\r\n\r\nMoreover, when analyzing genome skimming libraries (*i.e.* by targeting chloroplast, mitochondrion or ribosomal sequences in the genomic libraries), we also strongly recommend investigating the summary statistics of the contigs for which sequences were captured once the capture is done, by using the function *StatContigs.py* as indicated:\r\n\r\n```\r\nuser$: (orthoskim-env) ~/ORTHOSKIM-v.1.6/src/StatContigs.py --path /Working_directory/Mapping/ --taxa taxalist --mode [all,chloroplast,mitochondrion,nucrdna] > statistics_captured_contigs.log\r\n```\r\n\r\nThis function generates a table with, for each library and each genomic compartment (according to the `--mode`), the number of contigs assembled, along with the total reconstructed size and the mean coverage. By using the `--mode all`, the first three columns of the output table correspond to the chloroplast, the next three to the mitochondrion and the last three to the nucrdna.\r\n\r\nHere is an example of such table generating with `--mode chloroplast`:\r\n\r\n```\r\nhead statistics_captured_contigs.log\r\nPrimula_acaulis_175104_PHA007169_RSZ_RSZAXPI000864-106\t26\t141628\t614.67\r\nPrimula_integrifolia_175074_PHA007216_BGN_LG\t6\t125017\t125.8\r\nPrimula_kitaibeliana_184184_CLA007221_BGN_MQI\t6\t126871\t309.78\r\nPrimula_kitaibeliana_184184_CLA007222_BGN_NND\t5\t126339\t117.18\r\nPrimula_latifolia_152139_PHA007223_BGN_LS\t5\t125006\t139.46\r\nPrimula_magellanica_175079_CLA010550_GWM_1236\t5\t126155\t172.52\r\nPrimula_marginata_175080_PHA007227_BGN_ID\t5\t124986\t192.91\r\n```\r\n\r\nThis can provide an indication about contaminant that can not be identified during the assembly cleaning (*e.g.* plant-plant contaminants, host-parasite DNA contaminant, chimeric contigs). For a 150kb chloroplast genome, we expect to have a reconstructed size over 125Kb (*i.e.* with only one inverted repeat). In the above example, `Primula_acaulis_175104_PHA007169_RSZ_RSZAXPI000864-106` is doubtful as it shows a higher reconstructed size and number of chloroplast contigs thant expected. In such case, user can check all genes captured for this sample before to include it on the alignment procedure if chloroplast sequences from another organism were captured, or if it can correspond to a chimeric contig. Users can choose the *COVCUTOFF* option during the capture.\r\n\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/cpouchon/ORTHOSKIM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "7. Tutorial",
        "parent_header": [
          "ORTHOSKIM: *in silico* sequence capture from genomic and transcriptomic libraries"
        ],
        "type": "Text_excerpt",
        "value": "\r\nIn this section, we provide a short tutorial to run ORTHOSKIM on the four RNAseq libraries used in the original paper to capture chloroplast, mitochondrial and ribosomal genes. This tutorial assumes that users have created the sample file, edited the config and the tools files and collect annotations files for the targeted compartments. By default, subsets of genomic annotations are given for Viridiplantae with ORTHOSKIM to quickly run the software. Here we use these annotations and keep the standard genetic code (GENETIC_CODE=1) in the config file, as this tutorial is focussed on plant model.\r\n\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/cpouchon/ORTHOSKIM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "7.3 contig assembly and cleaning",
        "parent_header": [
          "ORTHOSKIM: *in silico* sequence capture from genomic and transcriptomic libraries",
          "7. Tutorial"
        ],
        "type": "Text_excerpt",
        "value": "\r\nWe next perform global assemblies of our samples and formate the outputs. After that, assemblies were cleaned by removing all potential contaminants.\r\n\r\n```\r\n(orthoskim-env) ./orthoskim -m assembly -t rnaspades -c config_orthoskim.txt\r\n(orthoskim-env) ./orthoskim -m format -t rnaspades -c config_orthoskim.txt\r\n(orthoskim-env) ./orthoskim -m cleaning -c config_orthoskim.txt\r\n```\r\n\r\n> **Note:** Here, -t rnaspades is set according to type of the library produced. For the cleaning step, we set the expected phyllum at \"Embryophyta\"\r\n\r\nIf you want to get summary statistics of assemblies, users can run the following command:\r\n\r\n```\r\n(orthoskim-env) ./orthoskim -m statistic_assembly -c config_orthoskim.txt\r\n```\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/cpouchon/ORTHOSKIM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "7.4 sequences capture",
        "parent_header": [
          "ORTHOSKIM: *in silico* sequence capture from genomic and transcriptomic libraries",
          "7. Tutorial"
        ],
        "type": "Text_excerpt",
        "value": "\r\nThe next step consists on capture all targeted sequences into these assemblies. To do this, we run the `capture` mode with our different targets.\r\n\r\n```\r\n(orthoskim-env) ./orthoskim -m capture -t chloroplast_CDS -c config_orthoskim.txt\r\n(orthoskim-env) ./orthoskim -m capture -t chloroplast_rRNA -c config_orthoskim.txt\r\n(orthoskim-env) ./orthoskim -m capture -t chloroplast_tRNA -c config_orthoskim.txt\r\n(orthoskim-env) ./orthoskim -m capture -t mitochondrion_CDS -c config_orthoskim.txt\r\n(orthoskim-env) ./orthoskim -m capture -t mitochondrion_rRNA -c config_orthoskim.txt\r\n(orthoskim-env) ./orthoskim -m capture -t nucrdna -c config_orthoskim.txt\r\n```\r\n\r\n>**Note**: in this example for the chloroplast tRNA, we change the CHLORO_TYPE from \"exon\" to \"intron\" before to run the command in order to capture the intron of the trnL-UAA.\r\n\r\nSummary statistics about the capture can be obtained by using the following mode:\r\n\r\n```\r\n(orthoskim-env) ./orthoskim -m statistic_capture -t chloroplast_CDS -t chloroplast_rRNA -t chloroplast_tRNA -t mitochondrion_CDS -t mitochondrion_rRNA -t nucrdna -c config_orthoskim.txt\r\n```\r\n> **NOTE:** Here, multiple targets (-t) are given in the command same line.\r\n\r\n\r\nFinally, we compute a supermatrix by aligning captured sequences (here chloroplast CDS and rRNA sequences).\r\n\r\n```\r\n(orthoskim-env) ./orthoskim -m alignment -t chloroplast_CDS -t chloroplast_rRNA -c config_orthoskim\r\n```\r\n\r\n\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/cpouchon/ORTHOSKIM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "8.1. get a sample file",
        "parent_header": [
          "ORTHOSKIM: *in silico* sequence capture from genomic and transcriptomic libraries",
          "8. Additional modes for PhyloDB users"
        ],
        "type": "Text_excerpt",
        "value": "\r\nSample file can be created directly from libraries available on the [GriCAD](https://gricad-doc.univ-grenoble-alpes.fr/hpc/description/) infrastructures on the */bettik/LECA/phyloskims/release/* folder. This sample file is produced by the `-m phyloskim_indexing` mode, by screening each library available in the given `-p path/to/seek/files/` path. Unwanted libraries can be removed from the generated list before processing other modes.\r\n\r\n```\r\nuser$: (orthoskim-env) ./orthoskim -m indexing -c config_orthoskim.txt -p /bettik/LECA/phyloskims/release/\r\n```\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/cpouchon/ORTHOSKIM/master/README.md",
      "technique": "header_analysis"
    }
  ]
}