{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/daifengwanglab/Varmole"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-02-18T19:38:47Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-10-09T22:57:43Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Description",
        "parent_header": [
          "Varmole"
        ],
        "type": "Text_excerpt",
        "value": "Varmole is a Python script that uses the precompiled and pretrained a DropConnect-like Deep Neural Network in \norder to predict the disease outcome of the input SNPs and gene expressions, and to interpret the importance\nof input features as well as the SNP-gene eQTL and gene-gene GRN connections.\n"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/Varmole/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.99847912020807,
      "result": {
        "original_header": "Abstract",
        "type": "Text_excerpt",
        "value": "Population studies such as GWAS have identified a variety of genomic variants associated with human diseases. To further understand potential mechanisms of disease variants, recent statistical methods associate functional omic data (e.g., gene expression) with genotype and phenotype and link variants to individual genes. However, how to interpret molecular mechanisms from such associations, especially across omics is still challenging. To address this, we develop an interpretable deep learning method, Varmole to simultaneously reveal genomic functions and mechanisms while predicting phenotype from genotype. In particular, Varmole embeds multi-omic networks into a deep neural network architecture and prioritizes variants, genes and regulatory linkages via drop-connect without needing prior feature selections.\n \n"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/Varmole/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/daifengwanglab/Varmole/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/daifengwanglab/Varmole/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "daifengwanglab/Varmole"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Varmole"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/Varmole/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "Varmole"
        ],
        "type": "Text_excerpt",
        "value": "This script need no installation, but has the following requirements:\n* PyTorch 0.4.1 or above\n* Python3.6.5 or above\n\n"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/Varmole/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/daifengwanglab/Varmole/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "Varmole"
        ],
        "type": "Text_excerpt",
        "value": "MIT License\n\nCopyright (c) 2020\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/Varmole/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Varmole"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "daifengwanglab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 16104,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/daifengwanglab/Varmole/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 10:38:01",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Command Line Tool",
        "parent_header": [
          "Varmole",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "`python Varmole.py /path/to/input/file.csv`\n\nThe input file `file.csv` is the concatenation of genotype and gene expression over the samples.\n\nThe script will compute and output 4 output files:\n\n* file_Predictions.csv: the disease prediction outcomes\n* file_FeatureImportance.csv: the importance of SNPs and TFs input that gives rise to the prediction outcomes\n* file_GeneImportance.csv: the importance of gene expressions that gives rise to the prediction outcomes\n* file_ConnectionImportance.csv: the importance of eQTL/GRN connections that gives rise to the prediction outcomes\n\nFor more information:\n    python Varmole.py -h\n"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/Varmole/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Varmole Library",
        "parent_header": [
          "Varmole",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Users can use a wrapping function `train_Varmole()` to train a Varmole model with 5 input data:\n\n* genotype\n* gene expression\n* phenotype\n* gene regulatory network\n* eQTL\n\nUsers can also set the learning parameters as listed below:\n\n* H2: the number of neurons in the first hidden layer,\n* H3: the number of neurons in the second hidden layer, \n* BS: the training batch size, \n* L1REG: the L1 regularization parameter,\n* Opt: the optimization method using to learn (from torch.optim), \n* LR: learning rate,\n* L2REG: the L2 regularization (if supported by the the optimization method); default is None, \n* epoch: number of the training epoch, \n* device: device for training, i.e., 'cpu' or 'cuda' (if GPU is available); default value is 'cpu'.\n\nThe output will be the test balanced accuracy score.\n\n```python\nimport torch\nfrom Varmole.train import *\n\nopt = torch.optim.Adam\ntest_score = train_Varmole('snp.csv', 'gene.csv', 'phenotype.txt', 'grn.csv', 'eqtl.csv', 1000, 500, 60, 0.0001, opt, 0.001, 0.1, 60, 'cuda')\n```\n\nThis will print out the test balanced accuracy score:\n`Test Accuracy 0.76`\n\nThe Varmole architecture is also provided in the repository. It is the Biologically DropConnect Layer that users can import to use with his/her own model. The usage is as follow:\n\n```python\nimport torch\nimport torch.nn as nn\nfrom torch.utils.data import Dataset, TensorDataset, DataLoader\n\nfrom Varmole.model import GRNeQTL #import the Bio DropConnect Layer of Varmole\n\nclass Net(nn.Module):\n    def __init__(self, adj, D_in, H1, H2, H3, D_out):\n        super(Net, self).__init__()\n        self.adj = adj\n        self.GRNeQTL = GRNeQTL(D_in, H1) # define the Bio DropConnect Layer\n        self.linear2 = torch.nn.Linear(H1, H2)\n        self.linear3 = torch.nn.Linear(H2, H3)\n        self.linear4 = torch.nn.Linear(H3, D_out)\n\n    def forward(self, x):\n        h1 = self.GRNeQTL(x, self.adj).relu()\n        h2 = self.linear2(h1).relu()\n        h3 = self.linear3(h2).relu()\n        y_pred = self.linear4(h3).sigmoid()\n        return y_pred\n```\nThe imbalanced dataset sampler is also provied for user to deal with imbalanced data as follows:\n\n```python\nimport torch\nimport torch.nn as nn\nfrom torch.utils.data import Dataset, TensorDataset, DataLoader\nfrom Varmole.sampler import ImbalancedDatasetSampler # for imbalanced dataset\n\ntrain_ds = TensorDataset(X_train, y_train)\nval_ds = TensorDataset(X_val, y_val)\n\ntrain_dl = DataLoader(dataset=train_ds, \n                          sampler = ImbalancedDatasetSampler(train_ds), # using sampler for imbalanced data\n                          batch_size=BS)\nval_dl = DataLoader(dataset=val_ds, \n                        batch_size=BS*2)\n```                        \n                        \n"
      },
      "source": "https://raw.githubusercontent.com/daifengwanglab/Varmole/master/README.md",
      "technique": "header_analysis"
    }
  ]
}