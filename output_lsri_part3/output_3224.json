{
  "application_domain": [
    {
      "confidence": 15.32,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/fmfi-compbio/deepnano-blitz"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-01-17T10:51:07Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-04T04:35:04Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Very fast ONT basecaller"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9426003976186947,
      "result": {
        "original_header": "Ultra fast ONT basecaller",
        "type": "Text_excerpt",
        "value": "This is a very fast basecaseller which can basecall reads as fast as they come\nfrom MinION on ordinary laptop. \n"
      },
      "source": "https://raw.githubusercontent.com/fmfi-compbio/deepnano-blitz/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.924599871135896,
      "result": {
        "original_header": "Limitations",
        "type": "Text_excerpt",
        "value": "* Tested only on 64bit linux (external parties made it work on MacOS, see below).\n* Only R9.4.1 for now.\n* On AMD CPUs it is advised to use: `export MKL_DEBUG_CPU_TYPE=5`\n* You need python3 (tested with python 3.9). PyO3 package needs at least python3.5.\n* In some situations you might need to do `export OMP_NUM_THREADS=1`\n \n"
      },
      "source": "https://raw.githubusercontent.com/fmfi-compbio/deepnano-blitz/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9490287282575025,
      "result": {
        "original_header": "Calling programmatically",
        "type": "Text_excerpt",
        "value": "When using only very short first part of read (and especially when you lowered the STEP), you might\nneed to cutoff bad part of the read (usually called the stall) using this (trim function is adopted from nanonet):\n```python\ndef trim(signal, window_size=40, threshold_factor=3.0, min_elements=3):\n\n    med, mad = med_mad(signal[-(window_size*25):])\n    threshold = med + mad * threshold_factor\n    num_windows = len(signal) // window_size\n\n    for pos in range(num_windows):\n\n        start = pos * window_size\n        end = start + window_size\n\n        window = signal[start:end]\n\n        if len(window[window > threshold]) > min_elements:\n            if window[-1] > threshold:\n                continue\n            return end\n\n    return 0\n\n# Call this before normalization\nstart = trim(signal)\nsignal = signal[start:]\n```\nOr alternativelly you can use this triming function (courtesy of https://github.com/Gogis0):\n```python\ndef trim_blank(sig, window=300):\n    N = len(sig)\n    variances = [np.var(sig[i:i+window]) for i in range(N//2, N-window, window)]\n    mean_var = np.mean(variances)\n    trim_idx = 20\n    while window > 5:\n        while np.var(sig[trim_idx: trim_idx + window]) < 0.3*mean_var:\n            trim_idx += 1\n        window //= 2\n\n    return trim_idx\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/fmfi-compbio/deepnano-blitz/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.961351187393788,
      "result": {
        "original_header": "Benchmarks",
        "type": "Text_excerpt",
        "value": "MinION theoretical maximum is 2M signals/s (which in reality never happens, so realistic number is\naround 1.5 M signals/s).\n \n"
      },
      "source": "https://raw.githubusercontent.com/fmfi-compbio/deepnano-blitz/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9840903103979932,
      "result": {
        "original_header": "Basecallers in fast mode",
        "type": "Text_excerpt",
        "value": "Speed is given in signals/sec. \n"
      },
      "source": "https://raw.githubusercontent.com/fmfi-compbio/deepnano-blitz/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/fmfi-compbio/deepnano-blitz/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 12
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/fmfi-compbio/deepnano-blitz/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "fmfi-compbio/deepnano-blitz"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Ultra fast ONT basecaller"
      },
      "source": "https://raw.githubusercontent.com/fmfi-compbio/deepnano-blitz/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing on Mac/Windows (not tested)",
        "parent_header": [
          "Ultra fast ONT basecaller"
        ],
        "type": "Text_excerpt",
        "value": "We heavily rely on MKL libraries (downloaded from here https://anaconda.org/intel/mkl-static/files via https://github.com/fmfi-compbio/deepnano-blitz/blob/master/build.rs#L17). Changing download URL (and maybe some filenames) should work. If yes, please send us pointer to tested configuration (we will then add platform detection and relevant code branches to master).\n"
      },
      "source": "https://raw.githubusercontent.com/fmfi-compbio/deepnano-blitz/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999999994845439,
      "result": {
        "original_header": "Limitations",
        "type": "Text_excerpt",
        "value": "* Tested only on 64bit linux (external parties made it work on MacOS, see below).\n* Only R9.4.1 for now.\n* On AMD CPUs it is advised to use: `export MKL_DEBUG_CPU_TYPE=5`\n* You need python3 (tested with python 3.9). PyO3 package needs at least python3.5.\n* In some situations you might need to do `export OMP_NUM_THREADS=1`\n \n"
      },
      "source": "https://raw.githubusercontent.com/fmfi-compbio/deepnano-blitz/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 1.0,
      "result": {
        "original_header": "Instalation",
        "type": "Text_excerpt",
        "value": "* Install Rust (programming language, not game and besides you should already have it ;) ). You can view instuctions here: https://www.rust-lang.org/tools/install and just run `curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh`\n* Ask for nightly version `rustup default nightly-2021-01-03` (other nightly versions might also work, but this one is tested).\n* Prepare your conda environment (`conda create python=3.9 --name deepnanoblitz`). You do not have to do this, if you manage your Python packages in different way. And activate it (`conda activate deepnanoblitz`).\n* Clone this repository (`git clone https://github.com/fmfi-compbio/deepnano-blitz.git`)\n* Go inside the package (`cd deepnano-blitz`)\n* Run `python setup.py install`\n* Change Rust version to whatever you like (not needed)\n \n"
      },
      "source": "https://raw.githubusercontent.com/fmfi-compbio/deepnano-blitz/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999999999999147,
      "result": {
        "original_header": "Instalation via binary wheel",
        "type": "Text_excerpt",
        "value": "* Prepare your environment (conda, virtualenv, ...) with python3.6.\n* Warning outdated: On Linux machine with python3.6 (and CPU with AVX2 instructions) you can use: `pip install dist/deepnano2-0.1-cp36-cp36m-linux_x86_64.whl` \n"
      },
      "source": "https://raw.githubusercontent.com/fmfi-compbio/deepnano-blitz/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9897235369267356,
      "result": {
        "original_header": "Benchmarks",
        "type": "Text_excerpt",
        "value": "Run on subset of reads from [Klebsiela\ndataset](https://github.com/rrwick/Basecalling-comparison/tree/95bf07476f61cda79e6971f20f48c6ac83e634b3)\nand also on human dataset. \n"
      },
      "source": "https://raw.githubusercontent.com/fmfi-compbio/deepnano-blitz/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/fmfi-compbio/deepnano-blitz/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Copyright (c) 2019 - 2020 Vladimir Boza \"usamec\", Peter Peresini (ppershing)\n\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/fmfi-compbio/deepnano-blitz/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "deepnano-blitz"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "fmfi-compbio"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Rust",
        "size": 38839,
        "type": "Programming_language",
        "value": "Rust"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 13997,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/fmfi-compbio/deepnano-blitz/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running",
        "parent_header": [
          "Ultra fast ONT basecaller"
        ],
        "type": "Text_excerpt",
        "value": "Try one off (ordered by increasing accuracy and decresing speed):\n\n* `deepnano2_caller.py --output out.fasta --directory reads_directory/ --network-type 48 --beam-size 1`\n* `deepnano2_caller.py --output out.fasta --directory reads_directory/ --network-type 48`\n* `deepnano2_caller.py --output out.fasta --directory reads_directory/ --network-type 56`\n* `deepnano2_caller.py --output out.fasta --directory reads_directory/ --network-type 64`\n* `deepnano2_caller.py --output out.fasta --directory reads_directory/ --network-type 80`\n* `deepnano2_caller.py --output out.fasta --directory reads_directory/ --network-type 96`\n\nYou can also increase number of threads:\n\n`deepnano2_caller.py --output out.fasta --directory reads_directory/ --threads 4`\n\nOr ask for fastq output or compressed output:\n`deepnano2_caller.py --output out.fastq --directory reads_directory/ --output-format fastq`\n`deepnano2_caller.py --output out.fasta.gz --directory reads_directory/ --gzip-output`\n\nFor more accurate (but much slower) basecalling run:\n`deepnano2_caller.py --output out.fasta --directory reads_directory/ --threads 16 --network-type 256`\n\nYou can check the installion via:\n`deepnano2_caller.py --output testx.fastq --reads test_sample/*.fast5 --network-type 64 --beam-size 5 --threads 1 --output-format fastq`\n\nAnd compare it to `test_sample/expected.fastq`\n"
      },
      "source": "https://raw.githubusercontent.com/fmfi-compbio/deepnano-blitz/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 11:59:44",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 52
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "GPU version (experimental, not advised to use)",
        "parent_header": [
          "Ultra fast ONT basecaller"
        ],
        "type": "Text_excerpt",
        "value": "There is also GPU version of basecaller, which is slightly worse and slower than guppy,\nbut **does not** require compute capability 6.2 (anything which can run Pytorch 1.0 is good enough).\n\nIf you want to use GPU version, we recommend setting up Conda environment with pytorch first.\n\n\nIt can be run like this:\n`deepnano2_caller_gpu.py --output out.fasta --directory reads_directory/`\n\nIf you have new GPU (like RTX series) this might be faster:\n`deepnano2_caller_gpu.py --output out.fasta --directory reads_directory/ --half --batch-size 2048`\n"
      },
      "source": "https://raw.githubusercontent.com/fmfi-compbio/deepnano-blitz/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Basecallers in high-accuracy mode",
        "parent_header": [
          "Ultra fast ONT basecaller",
          "GPU version (experimental, not advised to use)"
        ],
        "type": "Text_excerpt",
        "value": "Note, that we are using 16 threads. Results on klebsiella dataset.\n\n| Basecaller                                       | Time to basecall | 10%-percentile accuracy | Median accuracy | 90%-percentile accuracy |\n|--------------------------------------------------|             ----:|                --------:|            ----:|                 -------:|\n| Guppy 3.3.0 hac, 16 threads XEON E5-2695 v4      | 18m 16s          | 82.5%                   | 89.8%           | 93.8%                   |\n| DN-blitz big, 16 threads XEON E5-2695 v4         | 12m 5s           | 82.1%                   | 89.1%           | 93.2%                   |\n| DN-blitz big, 16 threads XEON E5-2695 v4, beam   | 12m 30s          | 83.4%                   | 89.8%           | 93.6%                   |\n|--------------------------------------------------|              ----|                 --------|             ----|                  -------|\n| Guppy 3.3.0 hac, Titan XP GPU                    | 36s              | 82.5%                   | 89.8%           | 93.8%                   |\n| DN-blitz big, Titan XP GPU                       | 54s              | 82.2%                   | 89.2%           | 93.2%                   |\n|--------------------------------------------------|              ----|                 --------|             ----|                 -------|\n| DN-blitz big, Quadro M1200 GPU (laptop)          | 4m 5s            | 82.2%                   | 89.2%           | 93.2%                   |\n| Guppy 3.3.0 hac,  Quadro M1200 GPU (laptop)      | N/A              | N/A                     | N/A             | N/A                     |\n\nTODO: beam search for GPU version and RTX results\n\n"
      },
      "source": "https://raw.githubusercontent.com/fmfi-compbio/deepnano-blitz/master/README.md",
      "technique": "header_analysis"
    }
  ]
}