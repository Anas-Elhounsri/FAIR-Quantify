{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "PyAutoFEP"
        ],
        "type": "Text_excerpt",
        "value": "If PyAutoFEP is used in scientific publications, please cite:\n\n* LC Martins, EA Cino, RS Ferreira. PyAutoFEP: An Automated Free Energy Perturbation Workflow for GROMACS Integrating Enhanced Sampling Methods. _Journal of Chemical Theory and Computation_. **2021** _17_ (7), 4262-4273. [LINK](https://pubs.acs.org/doi/10.1021/acs.jctc.1c00194)\n"
      },
      "source": "https://raw.githubusercontent.com/lmmpf/PyAutoFEP/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/lmmpf/PyAutoFEP"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-02-12T12:23:23Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-25T06:37:43Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PyAutoFEP: an automated FEP workflow for GROMACS integrating enhanced sampling methods"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9081015588500216,
      "result": {
        "original_header": "PyAutoFEP",
        "type": "Text_excerpt",
        "value": "**PyAutoFEP: an automated FEP workflow for GROMACS integrating enhanced sampling methods** \nPyAutoFEP is a tool to automate Free Energy Perturbations (FEP) calculations to estimate Relative Free Energies of Binding (RFEB) of small molecules to \nmacromolecular targets. It automates the generation of perturbation maps, the building of dual-topologies for ligand pairs, the setup of MD systems, and \nthe analysis. Distinctively, PyAutoFEP supports multiple force fields, integrates enhanced sampling methods, and allows flexible \u03bb windows schemes. \nFurthermore, it aims to be as flexible as possible, giving the user great control over all steps. Nevertheless, reasonable defaults and automation are \nprovided, so that PyAutoFEP can be used by non experts. PyAutoFEP is written in Python3 and uses GROMACS.\n \n"
      },
      "source": "https://raw.githubusercontent.com/lmmpf/PyAutoFEP/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9716062171886038,
      "result": {
        "original_header": "Announcements",
        "type": "Text_excerpt",
        "value": "**Commit _SHA1 TBD_ (20.06.2023)**<br/>\nThis commit sets a new default value: `output_collecttype=python`. Previously,the default collect script was a binary \ncreated using PyInstaller. This was done because back in 2020 not every cluster had a modern enough Python3 version, so\nthis could save users some time in setting up an env just for a simple script. Nowadays Python3 is everywhere and \nkeeping the old binary as default makes no sense. Note that `output_collecttype=bin` is still allowed, but I expect to \ndrop support in the upcoming updates. \n**Commit f20b3c0 (11.01.2023)**<br/>\nThis commit changes the poses reading. Before it, `prepare_dual_topology.py` would read poses for every molecule in the \ninput molecules, although only the poses for which the A states are needed would ever be used. Now, only the poses \nneeded will be read. This speeds up execution, specially when using `pose_loader=superimpose`. \n**Commit f8324a3 (22.09.2022)**<br/>\nThis commit contains a massive backport of upcoming charge-changing perturbations to the topology reading code. This new code broadens the topology support, allowing for the following.\n- **Topologies containing A and B states**. Note, however, that B states will not be used to prepare the dual topology! Dual topology is built from distinct molecules. In case the input topology has both A and B states, `prepare_dual_topology.py` will merely check that states A and B match (eg, as generated by SwissParam), and use data from state A.\n- **New code for concomitant perturbing charge and VdW parameter of atoms**. Not really used yet, but paves way for charge-changing perturbations and perturbing atoms in rings.\n- **General topology coverage**. Online dihedrals and more terms are supported. \n**Commit 190bef6 (06.06.2022)**<br/>\nThis commit brings three new major features: \n- **OpenBabel 3.X is now supported**, along with backward compatibility with OpenBabel 2.4. Because OpenBabel 3 series is the one actively maintained upstream, all users are recommended to upgrade.\n- **Reading of poses from Vina (and derivatives) .pdbqt files.** `prepare_dual_topology.py` now accepts `pose_loader=vina` which reads .pdbqt files. Poses in a ligand file can be selected setting `poses_advanced_options` `cluster_docking_data` (see manual for more info).\n- **Automated parameterization of input ligands.** `prepare_dual_topology.py` can now run external small molecule parameterization tools automatically (using `parameterize` and related options, see manual for further info). Currently, the only parameterization software supported is [AcPYPE](https://github.com/alanwilter/acpype), but I hope others can be added soon. \n \nFurthermore, this update fixes some bugs and improves 3D MCS code, which is now more robust. Two defaults changed: in `prepare_dual_topology.py`, `gmx_bin_run=gmx_mpi` is now the default, as a MPI-enabled `gmx` executable is required and GROMACS compiles a `gmx_mpi` when using MPI. Also, `generate_perturbation_map.py` now will not save full_graph.svg and result_plot.svg unless the verbosity is at least INFO.  \n**Commit fe41f7d (19.01.2022)**<br/>\nThis commit introduces a bunch of new features and code changes. Even though I tested newly implemented and rewritten code, **things may break**. Please, fill \nissues should you experience any problem. Main changes:\n- Modifications to the atom matching functions in PyAutoFEP were done to implement support for user-supplied atom maps.\n- User-supplied atom maps are also available for the superimpose pose loader\n- Selecting 3D MCS for merge_topologies.merge_topologies is now supported (3D MCS in generate_perturbation_map.py and superimpose loader coming soon)\n- 3D MCS code rewritten for better support for ligand pairs with multiple atom matches\n \n"
      },
      "source": "https://raw.githubusercontent.com/lmmpf/PyAutoFEP/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9310943575271815,
      "result": {
        "original_header": "Issues &amp; pull requests",
        "type": "Text_excerpt",
        "value": "Issues and pull requests are welcome. When filling a GitHub issue, please include as much details as possible. Inputs and verbose outputs are also useful (if available/relevant). And thanks for reporting bugs!\n \n"
      },
      "source": "https://raw.githubusercontent.com/lmmpf/PyAutoFEP/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9806231705707514,
      "result": {
        "original_header": "Roadmap",
        "type": "Text_excerpt",
        "value": "Aside from bug squashing, I am currently working on charged perturbations and in a GUI. \n- Charged pertubations are being implemented using the alchemical co-ion method, which seems to be both most general and simpler to code. Briefly, and random water molecule will be perturbed to an ion of the opposite charge as the ligand perturbation. At first, only charge differences of +1 and -1 will be supported (this should cover most of the use cases, anyway). Code for regular, non-charged perturbations will not be affected.\n- A PyQt5 GUI for PyAutoFEP is being written. So far, a perturbation map editor was mostly implemented and a ligand table is beign worked on. The GUI will be frontend to the scripts, so that no function will depend on using the first. The GUI development is low priority right now, so this is not making into the tree anytime soon. \nFurther goals\n- Covalent perturbations\n- Automated cycle-closure histeresis (and likely other analysis as well)\n- Support for peptides as ligands\n- More tutorials\n- A website\n \n"
      },
      "source": "https://raw.githubusercontent.com/lmmpf/PyAutoFEP/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9762368858130315,
      "result": {
        "original_header": "Legal notice",
        "type": "Text_excerpt",
        "value": "This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. \nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program.  If not, see [https://www.gnu.org/licenses](https://www.gnu.org/licenses)\n \n"
      },
      "source": "https://raw.githubusercontent.com/lmmpf/PyAutoFEP/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/lmmpf/PyAutoFEP/tree/master/docs"
      },
      "technique": "file_exploration"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/lmmpf/PyAutoFEP/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 20
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/lmmpf/PyAutoFEP/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "lmmpf/PyAutoFEP"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PyAutoFEP"
      },
      "source": "https://raw.githubusercontent.com/lmmpf/PyAutoFEP/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lmmpf/PyAutoFEP/master/Tools/rest2.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lmmpf/PyAutoFEP/master/Tools/rest1.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Install",
        "parent_header": [
          "PyAutoFEP"
        ],
        "type": "Text_excerpt",
        "value": "To install PyAutoFEP, please, clone this repository using\n\n```bash\ngit clone https://github.com/luancarvalhomartins/PyAutoFEP.git \n```\n\nRequired dependencies can be installed using Anaconda, except for pymbar and alchemlyb, which must be installed using pip.\n\n```bash\n# Create a conda environment and activate it.\nconda create -n PyAutoFEP\nconda activate PyAutoFEP\n\n# Install stuff\nconda install -c conda-forge rdkit\nconda install -c conda-forge openbabel\nconda install matplotlib networkx pip\n# Use pip to install pymbar and alchemlyb\npip install pymbar alchemlyb==0.6.0\n```\n"
      },
      "source": "https://raw.githubusercontent.com/lmmpf/PyAutoFEP/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Manual",
        "parent_header": [
          "PyAutoFEP",
          "Documentation"
        ],
        "type": "Text_excerpt",
        "value": "[PyAutoFEP manual](https://github.com/luancarvalhomartins/PyAutoFEP/blob/master/docs/Manual.pdf) describes in detail its functions and options.\n"
      },
      "source": "https://raw.githubusercontent.com/lmmpf/PyAutoFEP/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8820613865696199,
      "result": {
        "original_header": "Announcements",
        "type": "Text_excerpt",
        "value": "**Commit _SHA1 TBD_ (20.06.2023)**<br/>\nThis commit sets a new default value: `output_collecttype=python`. Previously,the default collect script was a binary \ncreated using PyInstaller. This was done because back in 2020 not every cluster had a modern enough Python3 version, so\nthis could save users some time in setting up an env just for a simple script. Nowadays Python3 is everywhere and \nkeeping the old binary as default makes no sense. Note that `output_collecttype=bin` is still allowed, but I expect to \ndrop support in the upcoming updates. \nAs always, please, fill issues should you experience any problems. \n"
      },
      "source": "https://raw.githubusercontent.com/lmmpf/PyAutoFEP/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9769856860851303,
      "result": {
        "original_header": "Issues &amp; pull requests",
        "type": "Text_excerpt",
        "value": "Issues and pull requests are welcome. When filling a GitHub issue, please include as much details as possible. Inputs and verbose outputs are also useful (if available/relevant). And thanks for reporting bugs!\n \n"
      },
      "source": "https://raw.githubusercontent.com/lmmpf/PyAutoFEP/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9063603109188699,
      "result": {
        "original_header": "Legal notice",
        "type": "Text_excerpt",
        "value": "Copyright \u00a9 2021  Luan Carvalho Martins <luancarvalhomartins@gmail.com> \n"
      },
      "source": "https://raw.githubusercontent.com/lmmpf/PyAutoFEP/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/lmmpf/PyAutoFEP/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PyAutoFEP"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "lmmpf"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 960595,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Awk",
        "size": 25453,
        "type": "Programming_language",
        "value": "Awk"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lmmpf/PyAutoFEP/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "parent_header": [
          "PyAutoFEP"
        ],
        "type": "Text_excerpt",
        "value": "- Common GNU programs: Bash, awk, tar\n- [GROMACS](https://www.gromacs.org/) 2016 or newer\n- [GNU parallel](https://www.gnu.org/software/parallel/) on the run node, used during the rerun step (See manual for details).\n- Python 3.6+\n- [rdkit](https://www.rdkit.org/) 2019.03+\n- [networkx](https://networkx.org) 2.X (1.X versions are not supported)\n- [alchemlyb](https://github.com/alchemistry/alchemlyb) 0.6.0 & [pymbar](https://github.com/choderalab/pymbar) 3.0.5 OR [alchemlyb](https://github.com/alchemistry/alchemlyb) 0.3.0 & [pymbar](https://github.com/choderalab/pymbar) 3.0.3 (Because of https://github.com/choderalab/pymbar/issues/419)\n- [openbabel](http://openbabel.org/wiki/Main_Page) 2.4 or 3.X (sparsely used, mainly to load receptor files in *prepare_perturbation_map.py*.)\n- matplotlib (required only in *analyze_results.py*, optional in *generate_perturbation_map.py*)\n- numpy\n\nOptional requirements. The following are not required to run basic calculations in PyAutoFEP, but are needed for specific functions.\n\n- [biopython](https://biopython.org/) (allows sequence alignment when reading initial pose data)\n- [mdanalysis](https://www.mdanalysis.org/) (allows use of atom selection language in some contexts)\n- pytest (required to run Python tests)\n- packaging (used to compare package versions, falling back to distutils)\n"
      },
      "source": "https://raw.githubusercontent.com/lmmpf/PyAutoFEP/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 06:11:32",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 72
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Tutorials",
        "parent_header": [
          "PyAutoFEP",
          "Documentation"
        ],
        "type": "Text_excerpt",
        "value": "- [Farnesoid X receptor tutorial](https://github.com/luancarvalhomartins/PyAutoFEP/tree/master/docs/tutorial01) - A tutorial using the Farnesoid X receptor and a series of rigid binders is available.\n \n(_We plan to add more tutorials, covering specific aspects of PyAutoFEP in the near future._)\n"
      },
      "source": "https://raw.githubusercontent.com/lmmpf/PyAutoFEP/master/README.md",
      "technique": "header_analysis"
    }
  ]
}