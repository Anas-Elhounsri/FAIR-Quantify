{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "align=\"center\">Gretel"
        ],
        "type": "Text_excerpt",
        "value": "```\n@article{10.1093/bioinformatics/btaa977,\n    author = {Nicholls, Samuel M and Aubrey, Wayne and De Grave, Kurt and Schietgat, Leander and Creevey, Christopher J and Clare, Amanda},\n    title = \"{On the complexity of haplotyping a microbial community}\",\n    journal = {Bioinformatics},\n    volume = {37},\n    number = {10},\n    pages = {1360-1366},\n    year = {2021},\n    month = {01},\n    issn = {1367-4803},\n    doi = {10.1093/bioinformatics/btaa977},\n    url = {https://doi.org/10.1093/bioinformatics/btaa977},\n    eprint = {https://academic.oup.com/bioinformatics/article-pdf/37/10/1360/38663805/btaa977.pdf},\n}\n```\n[Read more on Twitter](https://twitter.com/samstudio8/status/1329406136592834564)\n"
      },
      "source": "https://raw.githubusercontent.com/samstudio8/gretel/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Nicholls, Samuel M and Aubrey, Wayne and De Grave, Kurt and Schietgat, Leander and Creevey, Christopher J and Clare, Amanda",
        "doi": "10.1093/bioinformatics/btaa977",
        "format": "bibtex",
        "title": "{On the complexity of haplotyping a microbial community}",
        "type": "Text_excerpt",
        "url": "https://doi.org/10.1093/bioinformatics/btaa977",
        "value": "@article{10.1093/bioinformatics/btaa977,\n    eprint = {https://academic.oup.com/bioinformatics/article-pdf/37/10/1360/38663805/btaa977.pdf},\n    url = {https://doi.org/10.1093/bioinformatics/btaa977},\n    doi = {10.1093/bioinformatics/btaa977},\n    issn = {1367-4803},\n    month = {01},\n    year = {2021},\n    pages = {1360-1366},\n    number = {10},\n    volume = {37},\n    journal = {Bioinformatics},\n    title = {{On the complexity of haplotyping a microbial community}},\n    author = {Nicholls, Samuel M and Aubrey, Wayne and De Grave, Kurt and Schietgat, Leander and Creevey, Christopher J and Clare, Amanda},\n}"
      },
      "source": "https://raw.githubusercontent.com/samstudio8/gretel/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/SamStudio8/gretel"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2016-06-10T16:38:19Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-02-16T07:03:00Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "An algorithm for recovering haplotypes from metagenomes"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9752695880373933,
      "result": {
        "original_header": "What is it?",
        "type": "Text_excerpt",
        "value": "**Gretel** is a Python package providing a command line tool for the recovery of haplotypes\nfrom metagenomic data sets. **Gretel** parses an alignment of reads into a **Hansel** matrix\nand uses the evidence of SNP pairs observed to appear on the same reads to probabilistically\nreconstruct the most likely haplotypes. \n**Gretel** uses an L'th order Markov chain model to reconstruct likely sequences\nof variants that constitute haplotypes in the real metagenome.\nOur approach involves graph-like traversal of the data within the **Hansel** matrix.\nEdges are probabilitically weighted based on the evidence on the reads, as well as\nthe haplotype as it has been reconstructed so far.\n \n"
      },
      "source": "https://raw.githubusercontent.com/samstudio8/gretel/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/samstudio8/gretel/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/SamStudio8/gretel/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SamStudio8/gretel"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/samstudio8/gretel/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Install",
        "parent_header": [
          "align=\"center\">Gretel"
        ],
        "type": "Text_excerpt",
        "value": "\n    $ pip install gretel\n\nAlternatively, Gretel has been packaged for bioconda (Thanks [@johnne!](https://github.com/johnne)):\n\n    $ conda install -c bioconda gretel\n"
      },
      "source": "https://raw.githubusercontent.com/samstudio8/gretel/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/SamStudio8/gretel/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bioinformatics, haplotypes, metagenomes"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Copyright \u00a9 2016 Sam Nicholls <sam@samnicholls.net>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/samstudio8/gretel/master/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "align=\"center\">Gretel"
        ],
        "type": "Text_excerpt",
        "value": "Hansel and Gretel are distributed under the MIT license, see LICENSE.\n"
      },
      "source": "https://raw.githubusercontent.com/samstudio8/gretel/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "http://raw.githubusercontent.com/samstudio8/gretel/master/gretel-logo.png?raw=true?"
      },
      "source": "https://raw.githubusercontent.com/samstudio8/gretel/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "gretel"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "SamStudio8"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 38830,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 1216,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/samstudio8/gretel/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "parent_header": [
          "align=\"center\">Gretel"
        ],
        "type": "Text_excerpt",
        "value": "\n    $ pip install numpy hanselx pysam PyVCF\n"
      },
      "source": "https://raw.githubusercontent.com/samstudio8/gretel/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 16:09:27",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 31
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "What can I use it for?",
        "parent_header": [
          "align=\"center\">Gretel"
        ],
        "type": "Text_excerpt",
        "value": "**Gretel** is designed to recover haplotypes from your data set, without the need for\nsetting (or optimisation) of any parameters.\n**Gretel** does not require a priori knowledge of your input data (such as its contents, or\nthe true number of haplotypes) and makes no assumptions\nregarding the distributions of alleles at variant sites and uses the available evidence\nfrom the aligned reads without altering or discarding the observed varations.\n"
      },
      "source": "https://raw.githubusercontent.com/samstudio8/gretel/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Why should I use it?",
        "parent_header": [
          "align=\"center\">Gretel"
        ],
        "type": "Text_excerpt",
        "value": "**Gretel** is the first tool capable of recovering haplotypes from metagenomes.\nWhilst tools exist for analogous haplotyping problems, such as the assembly of\nviral quasispecies, typically these tools rely on overlap approaches that create\ntoo many unranked haplotypes. **Gretel** is capable of ranking the haplotypes it\noutputs by their likelihood.\n\n**Gretel** requires no parameters and our approach is robust to sequencing error\nand misalignment noise.\n"
      },
      "source": "https://raw.githubusercontent.com/samstudio8/gretel/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "align=\"center\">Gretel"
        ],
        "type": "Text_excerpt",
        "value": "You will require a sorted BAM containing your reads, aligned to some pseudo-reference.\nYou can use any sequence as your reference, such as a consensus assembly of the\nmetagenomic reads, or a known strain reference (such as HIV-1).\nYou must bgzip and tabix your VCF.\n\n    $ gretel <bam> <vcf.gz> <contig> -s <1-start> -e <1-end> --master <master.fa> -o <outdir>\n\n"
      },
      "source": "https://raw.githubusercontent.com/samstudio8/gretel/master/README.md",
      "technique": "header_analysis"
    }
  ]
}