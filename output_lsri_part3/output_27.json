{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/sjdlabgroup/Neighborseq"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-10-23T16:06:58Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-05-22T06:45:06Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Neighbor-seq infers direct cell-cell interaction network in tissues from scRNA-seq data. "
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9984580442388423,
      "result": {
        "original_header": "Neighbor-seq",
        "type": "Text_excerpt",
        "value": "The spatial context of cells in a tissue and their resulting cell-cell communications influence numerous processes, including cellular differentiation, organ development and homeostasis, and immune interactions in disease. Neighbor-seq is an R package designed to infer the architecture of direct cell-cell interactions from standard single-cell RNA sequencing (scRNA-seq) data. Cell aggregates (multiplets) naturally arise in scRNA-seq experiments when two or more cells are captured in the same reaction droplet, and they typically represent at least several percent of all capture events. Neighbor-seq reconstructs physical cell-cell interactions by identifying, annotating, and analyzing cell multiplets from the undissociated cell fractions in scRNA-seq data. \n"
      },
      "source": "https://raw.githubusercontent.com/sjdlabgroup/Neighborseq/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9679811538888188,
      "result": {
        "original_header": "Neighbor-seq workflow",
        "type": "Text_excerpt",
        "value": "Neighbor-seq is a method to infer physical cell-cell communications by identifying, annotating, and analyzing cell multiplets from the undissociated cell fractions in scRNA-seq data using machine learning approaches. The Neighbor-seq algorithm consists of the following components, each further described below: (i) barcode clustering and marker gene identification, (ii) Random Forest classifier training to identify multiplets and their cell type compositions, (iii) calculating enrichment scores for cell-cell interactions, and (iv) construction of cell-cell interactome network and analysis of cell-neighbor transcriptomes. Each componenet can be programmed individually (described first) or via a few wrapper functions (described later). \nThis demonstration uses a subsample of small intestine scRNA-seq data from Haber et al., Nature 2017.\n \n"
      },
      "source": "https://raw.githubusercontent.com/sjdlabgroup/Neighborseq/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9977328843289552,
      "result": {
        "original_header": "Step 2: creating artificial multiplets",
        "type": "Text_excerpt",
        "value": "Next, all homotypic and heterotypic combinations for a default of 2 cell-types are enumerated (e.g. AA, AB, etc.). For each neighbor-type, artificial multiplets are created by randomly sampling cells from the constituent cell types and the prepared input gene by cell matrix and summing their gene counts. A default of 100 artificial multiplets is created for each neighbor-type, and these are combined with a default of 100 singlets from each cell-type.\n``` r\nset.seed(0) # for reproducibility\nmt = multiplet_types(meta.data$Cluster)\nam = artificial_multiplets(cell.mat = ns.data$cell.mat, \n                           celltypes = ns.data$celltypes, \n                           multiplet_classes = mt)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/sjdlabgroup/Neighborseq/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9625478587273261,
      "result": {
        "original_header": "Step 3: training a random forest classifier",
        "type": "Text_excerpt",
        "value": "A default of 80% of the artificial multiplet dataset set is used to train a random forest that takes as input the gene counts and predicts the barcode singlet or multiplet composition. Classification performance can be assessed using the hold-out data and plotting multivariate receiever-operator curves.\n``` r\nrf = multiplet_rf(am)\n#> [1]  train-mlogloss:3.545750\nmroc = mroc_format(rf$test, rf$pred)\nmroc_plot(mroc)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/sjdlabgroup/Neighborseq/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.992236401166869,
      "result": {
        "original_header": "Step 4: predicting barcode type, assessing multiplet enrichment, and plotting the network",
        "type": "Text_excerpt",
        "value": "The trained random forest is then used to predict the barcode composition of all barcodes in the original dataset. Neighbor-seq calculates an enrichment score for each cell-type interaction and compares it to the distribution of enrichment scores expected by chance. The interaction enrichment score reflects the proportion of counts of a neighbor type relative to the product of the total number of edges detected from each constituent cell and all other cell types. For neighbor type C1Cn composed of cell types C1 \u2026 Cn, the enrichment score is specifically defined as: \nThe null hypothesis assumes that multiplet formation is random and thus the distribution of neighbor-types follows the underlying singlet population counts. As such, for each sample in a dataset, given n predicted singlets and m predicted multiplets consisting of x constituent cells, Neighbor-seq simulates the synthetic creation of m multiplets drawing without replacement from n+x cells. The resulting neighbor-types are tallied, and their enrichment scores are computed. This simulation is repeated for a default of 100 times, and for each neighbor type, lower tailed Wilcoxon testing quantifies the probability that the simulated enrichment scores have a central tendency greater than the observed enrichment score. All probabilities are adjusted using the Holm correction.\n``` r\npred = xgpred(rf, ns.data$cell.mat)\nresult = multiplet_pop_sig(pred = pred, sample = meta.data$Mouse)\nplot_interactions(result, \n                  legend.position = 'right', \n                  width_range = c(0.5,1))\n#> Loading required package: ggraph\n#> Loading required package: ggplot2\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/sjdlabgroup/Neighborseq/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9632688046521531,
      "result": {
        "original_header": "Neighbor-seq wrapper functions",
        "type": "Text_excerpt",
        "value": "The entire Neighbor-seq workflow can be run using two wrapper functions.\n``` r\nset.seed(0) # for reproducibility\n# ns.data = prep_cell_mat(ge = data, celltypes = meta.data$Cluster, logfc.threshold = 0.5)\nhaber.ns = neighborseq(ns.data$cell.mat, ns.data$celltypes, meta.data$Mouse, do.mroc = F)\n\n# plot with colored nodes\ncolor = colorRampPalette((brewer.pal(9,\"Greens\")))(11)[6:12]; \nnames(color) = c('Paneth','Stem','TA','EP','Enterocyte'); color=c(color, Goblet='gold3')\n\nplot_interactions(result, \n                  color = color,\n                  legend.position = 'right', \n                  width_range = c(0.5,1))\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/sjdlabgroup/Neighborseq/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9975038850921691,
      "result": {
        "original_header": "Ensemble prediction",
        "type": "Text_excerpt",
        "value": "To increase reproducibility of results and minimize effects of randomness, Neighbor-seq can be run in ensemble mode; artificial multiplet construction and/or random forest training can be run for multiple iterations and an ensemble result can be computed. For each neighboring cell-type pair, the mean observed counts and Fisher\u2019s combined adjusted p-value are reported. Multiplet type counts and p-value thresholds can be adjusted and interpreted in light of data quality and known biology.\n``` r\nset.seed(0) # for reproducibility\n# ns.data = prep_cell_mat(ge = data, celltypes = meta.data$Cluster, logfc.threshold = 0.5)\nns = neighborseq(ns.data$cell.mat, ns.data$celltypes, meta.data$Mouse, iter = 5, do.mroc = F)\n\n# plot with colored nodes\ncolor = colorRampPalette((brewer.pal(9,\"Greens\")))(11)[6:12]; \nnames(color) = c('Paneth','Stem','TA','EP','Enterocyte'); color=c(color, Goblet='gold3')\n\nplot_interactions(ns$combined_result, \n                  combined = T,\n                  legend.position = 'right', \n                  color = color, \n                  width_range = c(0.5, 1))\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/sjdlabgroup/Neighborseq/main/README.Rmd",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/sjdlabgroup/Neighborseq/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/sjdlabgroup/Neighborseq/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "sjdlabgroup/Neighborseq"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Neighbor-seq"
      },
      "source": "https://raw.githubusercontent.com/sjdlabgroup/Neighborseq/main/README.Rmd",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sjdlabgroup/Neighborseq/main/Figure%201A.png"
      },
      "source": "https://raw.githubusercontent.com/sjdlabgroup/Neighborseq/main/README.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sjdlabgroup/Neighborseq/main/man/figures/README-unnamed-chunk-4-1.png"
      },
      "source": "https://raw.githubusercontent.com/sjdlabgroup/Neighborseq/main/README.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sjdlabgroup/Neighborseq/main/man/figures/README-unnamed-chunk-5-1.png"
      },
      "source": "https://raw.githubusercontent.com/sjdlabgroup/Neighborseq/main/README.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sjdlabgroup/Neighborseq/main/man/figures/README-unnamed-chunk-6-1.png"
      },
      "source": "https://raw.githubusercontent.com/sjdlabgroup/Neighborseq/main/README.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sjdlabgroup/Neighborseq/main/man/figures/README-unnamed-chunk-7-1.png"
      },
      "source": "https://raw.githubusercontent.com/sjdlabgroup/Neighborseq/main/README.Rmd",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "Neighbor-seq"
        ],
        "type": "Text_excerpt",
        "value": "You can install the released version of Neighbor-seq from Github with:\n\n``` r\ndevtools::install_github('sjdlabgroup/Neighborseq')\n# this might take long if you don't already have Seurat installed.\n```\n"
      },
      "source": "https://raw.githubusercontent.com/sjdlabgroup/Neighborseq/main/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 1: preparing the input data",
        "parent_header": [
          "Neighbor-seq",
          "Neighbor-seq workflow"
        ],
        "type": "Text_excerpt",
        "value": "If cell-type labels are not provided, Neighbor-seq utilizes a wrapper function to run Seurat functions that TP10K normalize and scale the scRNA-seq data, perform dimensionality reduction, identify cell type clusters, and find cell-type marker genes. If cell-type labels are known a priori, only normalization and marker finding functions are run. The primary outputs are (1) a gene by cell counts matrix keeping only the union of the top 50 marker genes for each cell-type, and (2) a vector of cell type identities. These steps are all implemented in a single R function.\n\n``` r\nlibrary(Neighborseq)\nlibrary(RColorBrewer)\n\ndata = read.table('si.data.txt')\nmeta.data = read.table('metadata.txt', header = T)\nns.data = prep_cell_mat(ge = data, celltypes = meta.data$Cluster, logfc.threshold = 0.5)\n#> Calculating cluster Goblet\n#> Calculating cluster Enterocyte\n#> Calculating cluster Stem\n#> Calculating cluster TA\n#> Calculating cluster Paneth\n#> Calculating cluster EP\n#> Calculating cluster Tuft\n#> Calculating cluster Enteroendocrine\n```\n"
      },
      "source": "https://raw.githubusercontent.com/sjdlabgroup/Neighborseq/main/README.Rmd",
      "technique": "header_analysis"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8055625752726356,
      "result": {
        "original_header": "Step 4: predicting barcode type, assessing multiplet enrichment, and plotting the network",
        "type": "Text_excerpt",
        "value": "<img src=\"man/figures/README-unnamed-chunk-5-1.png\" width=\"75%\" height=\"75%\" style=\"display: block; margin: auto;\" />\n \n"
      },
      "source": "https://raw.githubusercontent.com/sjdlabgroup/Neighborseq/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8055625752726356,
      "result": {
        "original_header": "Neighbor-seq wrapper functions",
        "type": "Text_excerpt",
        "value": "<img src=\"man/figures/README-unnamed-chunk-6-1.png\" width=\"75%\" height=\"75%\" style=\"display: block; margin: auto;\" />\n \n"
      },
      "source": "https://raw.githubusercontent.com/sjdlabgroup/Neighborseq/main/README.Rmd",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/sjdlabgroup/Neighborseq/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Neighborseq"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "sjdlabgroup"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 24203,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sjdlabgroup/Neighborseq/main/README.Rmd"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sjdlabgroup/Neighborseq/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-05 23:24:02",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ]
}