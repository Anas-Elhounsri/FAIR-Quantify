{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "format": "cff",
        "type": "File_dump",
        "value": "# YAML 1.2\n---\nabstract: \"Genetic variants and de novo mutations in regulatory regions of the genome are typically discovered by whole-genome sequencing (WGS), however WGS is expensive and most WGS reads come from non-regulatory regions. The Assay for Transposase-Accessible Chromatin (ATAC-seq) generates reads from regulatory sequences and could potentially be used as a low-cost \u2018capture\u2019 method for regulatory variant discovery, but its use for this purpose has not been systematically evaluated. Here we apply seven variant callers to bulk and single-cell ATAC-seq data and evaluate their ability to identify single nucleotide variants (SNVs) and insertions/deletions (indels). In addition, we develop an ensemble classifier, VarCA, which combines features from individual variant callers to predict variants. The Genome Analysis Toolkit (GATK) is the best-performing individual caller with precision/recall on a bulk ATAC test dataset of 0.92/0.97 for SNVs and 0.87/0.82 for indels within ATAC-seq peak regions with at least 10 reads. On bulk ATAC-seq reads, VarCA achieves superior performance with precision/recall of 0.99/0.95 for SNVs and 0.93/0.80 for indels. On single-cell ATAC-seq reads, VarCA attains precision/recall of 0.98/0.94 for SNVs and 0.82/0.82 for indels. In summary, ATAC-seq reads can be used to accurately discover non-coding regulatory variants in the absence of whole-genome sequencing data and our ensemble method, VarCA, has the best overall performance.\"\nauthors: \n  -\n    affiliation: \"Bioinformatics and Systems Biology Graduate Program, University of California San Diego, 9500 Gilman Drive, La Jolla, CA, 92093, USA\"\n    family-names: Massarat\n    given-names: Arya\n    orcid: \"https://orcid.org/0000-0002-3679-0345\"\n  -\n    affiliation: \"Integrative Biology Laboratory, Salk Institute for Biological Studies, 10010 N. Torrey Pines Road, La Jolla, CA 92037, USA\"\n    family-names: Sen\n    given-names: Arko\n    orcid: \"https://orcid.org/0000-0001-9876-281X\"\n  -\n    affiliation: \"Bioinformatics and Systems Biology Graduate Program, University of California San Diego, 9500 Gilman Drive, La Jolla, CA, 92093, USA\"\n    family-names: Jaureguy\n    given-names: Jeff\n    orcid: \"https://orcid.org/0000-0002-6303-422X\"\n  -\n    affiliation: \"Integrative Biology Laboratory, Salk Institute for Biological Studies, 10010 N. Torrey Pines Road, La Jolla, CA 92037, USA\"\n    family-names: Tyndale\n    given-names: \"S\u00e9l\u00e8ne\"\n    orcid: \"https://orcid.org/0000-0001-9805-1049\"\n  -\n    affiliation: \"Razavi Newman Integrative Genomics and Bioinformatics Core, Salk Institute for Biological Studies, 10010 N. Torrey Pines Road, La Jolla, CA 92037, USA\"\n    family-names: Fu\n    given-names: Yi\n  -\n    affiliation: \"Razavi Newman Integrative Genomics and Bioinformatics Core, Salk Institute for Biological Studies, 10010 N. Torrey Pines Road, La Jolla, CA 92037, USA\"\n    family-names: Erikson\n    given-names: Galina\n  -\n    affiliation: \"Integrative Biology Laboratory, Salk Institute for Biological Studies, 10010 N. Torrey Pines Road, La Jolla, CA 92037, USA\"\n    family-names: McVicker\n    given-names: Graham\n    orcid: \"https://orcid.org/0000-0003-0991-0951\"\ncff-version: \"1.1.0\"\ndate-released: 2021-07-21\ndoi: \"10.1093/nar/gkab621\"\nidentifiers: \n  - \n    type: doi\n    value: \"10.1093/nar/gkab621\"\n  - \n    type: url\n    value: \"https://academic.oup.com/nar/advance-article/doi/10.1093/nar/gkab621/6329114\"\nlicense: MIT\nmessage: \"If you use this software, please cite it using these metadata.\"\nrepository-code: \"https://github.com/aryarm/varCA\"\ntitle: \"Discovering single nucleotide variants and indels from bulk and single-cell ATAC-seq\"\nversion: \"v0.3.1\"\n...\n"
      },
      "source": "https://raw.githubusercontent.com/aryarm/varCA/master/CITATION.cff",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "citation",
        "type": "Text_excerpt",
        "value": "There is an option to _\"Cite this repository\"_ on the right sidebar of [the repository homepage](https://github.com/aryarm/varCA).\n> Massarat, A. R., Sen, A., Jaureguy, J., Tyndale, S. T., Fu, Y., Erikson, G., & McVicker, G. (2021). Discovering single nucleotide variants and indels from bulk and single-cell ATAC-seq. Nucleic Acids Research, gkab621. https://doi.org/10.1093/nar/gkab621\n"
      },
      "source": "https://raw.githubusercontent.com/aryarm/varCA/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/aryarm/varCA"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contributing to varCA\nThank you so much for taking the time to contribute to varCA! :rocket::tada:\n\nContributions are always welcome, and they are greatly appreciated!\n\n## Types of contributions\n### Report a bug\nIf you have found a bug, please report it on [our issues page](issues) rather than emailing us directly. Others may have the same issue and this helps us get that information to them.\n\nBefore you submit a bug, please search through our issues to ensure it hasn't already been reported.\n\nThe most helpful Github issues include\n- the version of varCA you are using, although it's best to use the latest version\n- the version of Snakemake you are using\n- detailed steps to help us reproduce your error, ideally with the example dataset distributed with varCA\n### Fix a bug\nLook through our issues page for bugs. We especially need help with bugs labeled \"help wanted\". If you want to start working on a bug then please write a message within the thread for that issue on our issues page, so that no one is duplicating work.\n### Implement a new feature\nOur issues page will almost always have features on our wishlist. Once again, if you want to start working on a feature then please write a message within the thread for that feature on our issues page, so that no one is duplicating work.\n\nHave an idea for a new feature that isn't on our wishlist? We'd love to hear about it! Before getting to work, please create a Github issue for it, so that you can make sure we're in agreement about what it should do.\n\n## How to fix a bug or implement a new feature\nPlease create a pull request! A PR is a collection of changes that you have made to the code that we can review and potentially integrate into varCA.\n\nTo create a pull request you need to do these steps:\n\n1. Create a Github account.\n2. [Fork](https://docs.github.com/en/get-started/quickstart/fork-a-repo#forking-a-repository) the repository.\n    - Click the \"Fork\" button in the top, right corner\n    - Or, if you had already forked the repository a while ago, [sync your fork](https://docs.github.com/en/github/collaborating-with-pull-requests/working-with-forks/syncing-a-fork) to make sure you're working with the latest version of varCA.\n4. [Clone your fork](https://docs.github.com/en/get-started/quickstart/fork-a-repo#cloning-your-forked-repository) locally.\n5. `cd varCA` into the new directory\n6. Create a new branch with `git checkout -b <descriptive_branch_name>`\n7. Make your changes to the code.\n8. Test that they work. And test your code with any existing tests in the repository to ensure you haven't broken anything. See \"Testing\" below.\n9. Please add any comments to the documentation that would help users understand how to use your new code.\n10. Commit your changes. Please use informative commit messages and do your best to ensure the commit history is clean and easy to interpret.\n11. Now you can push your changes to your Github copy of varCA by running `git push origin <descriptive_branch_name>`\n12. Go to your Github copy of varCA in your browser and create a pull request. Be sure to change the pull request target branch to `master` on this original repository!\n13. Please write an informative pull request detailing the changes you have made and why you made them. Tag any related issues by referring to them by a hashtag followed by their ID.\n\n### Testing\nIt's critical that you test your new code to make sure that you're not inadvertantly introducing any new bugs.\nIf you are fixing a bug or implementing a new feature, please add at least one test to cover your new code.\nIn addition, please also test the entire pipeline with the example dataset to ensure existing code hasn't broken.\n\n## Style\n### Code\n- Please use 4 spaces instead of tabs\n- Please adhere to PEP8 whenever possible\n- Try not to exceed 88 characters per line\n- Do not duplicate strings within Snakefiles. Please refer to them as `rules.rulename.output.outputname` whenever possible.\n### Git Commit Messages\n- Use the present tense (\"Add feature\" not \"Added feature\")\n- Use the imperative mood (\"Move cursor to...\" not \"Moves cursor to...\")\n- Reference issues and pull requests liberally after the first line\n"
      },
      "source": "https://raw.githubusercontent.com/aryarm/varCA/master/CONTRIBUTING.md",
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-07-19T00:29:55Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-02-22T12:58:17Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Use an ensemble of variant callers to call variants from ATAC-seq data"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9664312329754028,
      "result": {
        "original_header": "varCA",
        "type": "Text_excerpt",
        "value": "A pipeline for running an ensemble of variant callers to predict variants from ATAC-seq reads. \nThe entire pipeline is made up of two smaller subworkflows. The `prepare` subworkflow calls each variant caller and prepares the resulting data for use by the `classify` subworkflow, which uses an ensemble classifier to predict the existence of variants at each site.\n \n"
      },
      "source": "https://raw.githubusercontent.com/aryarm/varCA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9182894370065277,
      "result": {
        "original_header": "<a href=\"https://codeocean.com/capsule/6980349/tree/v1\">Code Ocean</a>",
        "type": "Text_excerpt",
        "value": "Using [our Code Ocean compute capsule](https://codeocean.com/capsule/6980349/tree/v1), you can execute [VarCA v0.2.1](https://github.com/aryarm/varCA/releases/tag/v0.2.1) on example data without downloading or setting up the project. To interpret the output of VarCA, see the output sections of the [`prepare` subworkflow](rules#output) and the [`classify` subworkflow](rules#output-1) in the [rules README](rules/README.md).\n \n"
      },
      "source": "https://raw.githubusercontent.com/aryarm/varCA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8906690800559607,
      "result": {
        "original_header": "Output",
        "type": "Text_excerpt",
        "value": "VarCA will place all of its output in a new directory (`out/`, by default). Log files describing the progress of the pipeline will also be created there: the `log` file contains a basic description of the progress of each step, while the `qlog` file is more detailed and will contain any errors or warnings. You can read more about the pipeline's output in the [rules README](rules/README.md).\n \n"
      },
      "source": "https://raw.githubusercontent.com/aryarm/varCA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9846393126934693,
      "result": {
        "original_header": "Reproducing our results",
        "type": "Text_excerpt",
        "value": "We provide the example data so that you may quickly (in ~1 hr, excluding dependency installation) verify that the pipeline can be executed on your machine. This process does not reproduce our results. Those with more time can follow [these steps](rules#testing-your-model--reproducing-our-results) to create all of the plots and tables in our paper.\n \n"
      },
      "source": "https://raw.githubusercontent.com/aryarm/varCA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9774899323518937,
      "result": {
        "original_header": "If this is your first time using Snakemake",
        "type": "Text_excerpt",
        "value": "We recommend that you run `snakemake --help` to learn about Snakemake's options. For example, to check that the pipeline will be executed correctly before you run it, you can call Snakemake with the `-n -p -r` flags. This is also a good way to familiarize yourself with the steps of the pipeline and their inputs and outputs (the latter of which are inputs to the first rule in each workflow -- ie the `all` rule). \nNote that Snakemake will not recreate output that it has already generated, unless you request it. If a job fails or is interrupted, subsequent executions of Snakemake will just pick up where it left off. This can also apply to files that *you* create and provide in place of the files it would have generated. \n"
      },
      "source": "https://raw.githubusercontent.com/aryarm/varCA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8907597165774053,
      "result": {
        "original_header": "<a href=\"Snakefile\">Snakefile</a>",
        "type": "Text_excerpt",
        "value": "A [Snakemake](https://snakemake.readthedocs.io/en/stable/) pipeline for calling variants from a set of ATAC-seq reads. This pipeline automatically executes two subworkflows: \n1. the [`prepare` subworkflow](rules/prepare.smk), which prepares the reads for classification and\n2. the [`classify` subworkflow](rules/classify.smk), which creates a VCF containing predicted variants\n \n"
      },
      "source": "https://raw.githubusercontent.com/aryarm/varCA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8804820205204588,
      "result": {
        "original_header": "<a href=\"rules\">rules/</a>",
        "type": "Text_excerpt",
        "value": "Snakemake rules for the `prepare` and `classify` subworkflows. You can either execute these subworkflows from the [master Snakefile](#snakefile) or individually as their own Snakefiles. See the [rules README](rules/README.md) for more information.\n \n"
      },
      "source": "https://raw.githubusercontent.com/aryarm/varCA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9882948116568241,
      "result": {
        "original_header": "<a href=\"configs\">configs/</a>",
        "type": "Text_excerpt",
        "value": "Config files that define options and input for the pipeline and the `prepare` and `classify` subworkflows. If you want to predict variants from your own ATAC-seq data, you should start by filling out [the config file for the pipeline](/configs#configyaml).\n \n"
      },
      "source": "https://raw.githubusercontent.com/aryarm/varCA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9678269287877607,
      "result": {
        "original_header": "<a href=\"breakCA\">breakCA/</a>",
        "type": "Text_excerpt",
        "value": "Scripts for calculating posterior probabilities for the existence of an insertion or deletion, which can be used as features for the classifier. These scripts are an adaptation from [@Arkosen](https://github.com/Arkosen)'s [BreakCA code](https://www.biorxiv.org/content/10.1101/605642v1.abstract).\n \n"
      },
      "source": "https://raw.githubusercontent.com/aryarm/varCA/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "download",
        "type": "Text_excerpt",
        "value": "Execute the following command or download the [latest release](https://github.com/aryarm/varCA/releases/latest) manually.\n```\ngit clone https://github.com/aryarm/varCA.git\n```\nAlso consider downloading the [example data](https://github.com/aryarm/varCA/releases/latest/download/data.tar.gz).\n```\ncd varCA\nwget -O- -q https://github.com/aryarm/varCA/releases/latest/download/data.tar.gz | tar xvzf -\n```\n"
      },
      "source": "https://raw.githubusercontent.com/aryarm/varCA/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/aryarm/varCA/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/aryarm/varCA/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "aryarm/varCA"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "varCA"
      },
      "source": "https://raw.githubusercontent.com/aryarm/varCA/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "setup",
        "type": "Text_excerpt",
        "value": "The pipeline is written as a Snakefile which can be executed via [Snakemake](https://snakemake.readthedocs.io). We recommend installing version 5.18.0:\n```\nconda create -n snakemake -c bioconda -c conda-forge --no-channel-priority 'snakemake==5.18.0'\n```\nWe highly recommend you install [Snakemake via conda](https://snakemake.readthedocs.io/en/stable/getting_started/installation.html#installation-via-conda) like this so that you can use the `--use-conda` flag when calling `snakemake` to let it [automatically handle all dependencies](https://snakemake.readthedocs.io/en/stable/snakefiles/deployment.html#integrated-package-management) of the pipeline. Otherwise, you must manually install the dependencies listed in the [env files](envs).\n"
      },
      "source": "https://raw.githubusercontent.com/aryarm/varCA/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9159377414705212,
      "result": {
        "original_header": "execution",
        "type": "Text_excerpt",
        "value": "1. Activate snakemake via `conda`:\n    ```\n    conda activate snakemake\n    ```\n2. Execute the pipeline on the example data \n    Locally:\n    ```\n    ./run.bash &\n    ```\n    __or__ on an SGE cluster:\n    BASH3* \n"
      },
      "source": "https://raw.githubusercontent.com/aryarm/varCA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9379638059404584,
      "result": {
        "original_header": "If this is your first time using Snakemake",
        "type": "Text_excerpt",
        "value": "By default, the pipeline will automatically delete some files it deems unnecessary (ex: unsorted copies of a BAM). You can opt to keep these files instead by providing the `--notemp` flag to Snakemake when executing the pipeline.\n \n"
      },
      "source": "https://raw.githubusercontent.com/aryarm/varCA/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9964534589141317,
      "result": {
        "original_header": "<a href=\"run.bash\">run.bash</a>",
        "type": "Text_excerpt",
        "value": "An example bash script for executing the pipeline using `snakemake` and `conda`. Any arguments to this script are passed directly to `snakemake`.\n \n"
      },
      "source": "https://raw.githubusercontent.com/aryarm/varCA/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/aryarm/varCA/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "atac-seq-data, machine-learning, random-forest, snakemake, variant-calling"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2019 Arya Massarat\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/aryarm/varCA/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "varCA"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "aryarm"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 62925,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 28182,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 18945,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Awk",
        "size": 2742,
        "type": "Programming_language",
        "value": "Awk"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/aryarm/varCA/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://snakemake.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/aryarm/varCA/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "aryarm",
          "type": "User"
        },
        "date_created": "2022-06-14T15:26:01Z",
        "date_published": "2022-06-14T15:33:33Z",
        "description": "This release patches an issue with VarDict's handling of [IUPAC ambiguity codes](https://droog.gs.washington.edu/mdecode/images/iupac.html) and \"dup\" strings in its ALT alleles. See issue https://github.com/aryarm/varCA/issues/42 for a description of the resolved bug. Thanks to @elahoehne for reporting!",
        "html_url": "https://github.com/aryarm/varCA/releases/tag/v0.3.3",
        "name": "v0.3.3",
        "release_id": 69417330,
        "tag": "v0.3.3",
        "tarball_url": "https://api.github.com/repos/aryarm/varCA/tarball/v0.3.3",
        "type": "Release",
        "url": "https://api.github.com/repos/aryarm/varCA/releases/69417330",
        "value": "https://api.github.com/repos/aryarm/varCA/releases/69417330",
        "zipball_url": "https://api.github.com/repos/aryarm/varCA/zipball/v0.3.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "aryarm",
          "type": "User"
        },
        "date_created": "2021-08-02T18:22:26Z",
        "date_published": "2021-08-02T18:24:23Z",
        "description": "Our paper is out! So this release just adds citation information to our README file. In addition, we created a `CITATION.cff` file so that Github can parse the citation info in a machine-readable format.",
        "html_url": "https://github.com/aryarm/varCA/releases/tag/v0.3.1",
        "name": "v0.3.1",
        "release_id": 47176625,
        "tag": "v0.3.1",
        "tarball_url": "https://api.github.com/repos/aryarm/varCA/tarball/v0.3.1",
        "type": "Release",
        "url": "https://api.github.com/repos/aryarm/varCA/releases/47176625",
        "value": "https://api.github.com/repos/aryarm/varCA/releases/47176625",
        "zipball_url": "https://api.github.com/repos/aryarm/varCA/zipball/v0.3.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "aryarm",
          "type": "User"
        },
        "date_created": "2021-07-04T00:23:39Z",
        "date_published": "2021-07-04T00:53:18Z",
        "description": "This release brings improved reproducibility for those using `--use-conda` by including exact channel specifications in the conda environment files. It also adds a few more common packages (like bash) to the environment files in order to override whichever version is pre-installed. See #32 for more info.",
        "html_url": "https://github.com/aryarm/varCA/releases/tag/v0.3.0",
        "name": "v0.3.0",
        "release_id": 45667213,
        "tag": "v0.3.0",
        "tarball_url": "https://api.github.com/repos/aryarm/varCA/tarball/v0.3.0",
        "type": "Release",
        "url": "https://api.github.com/repos/aryarm/varCA/releases/45667213",
        "value": "https://api.github.com/repos/aryarm/varCA/releases/45667213",
        "zipball_url": "https://api.github.com/repos/aryarm/varCA/zipball/v0.3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "aryarm",
          "type": "User"
        },
        "date_created": "2021-07-03T23:31:19Z",
        "date_published": "2021-07-03T23:36:24Z",
        "description": "Fixes an issue where the `tsv2vcf` Snakemake rule within the classify subworkflow would occasionally fail because of a non-zero exit code from `zcat` because of `2vcf.py`. See #28 for more details.",
        "html_url": "https://github.com/aryarm/varCA/releases/tag/v0.2.3",
        "name": "v0.2.3",
        "release_id": 45666377,
        "tag": "v0.2.3",
        "tarball_url": "https://api.github.com/repos/aryarm/varCA/tarball/v0.2.3",
        "type": "Release",
        "url": "https://api.github.com/repos/aryarm/varCA/releases/45666377",
        "value": "https://api.github.com/repos/aryarm/varCA/releases/45666377",
        "zipball_url": "https://api.github.com/repos/aryarm/varCA/zipball/v0.2.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "aryarm",
          "type": "User"
        },
        "date_created": "2021-07-01T16:19:26Z",
        "date_published": "2021-07-01T17:03:27Z",
        "description": "This release patches an issue with VarScan's handling of [IUPAC ambiguity codes](https://droog.gs.washington.edu/mdecode/images/iupac.html). See issue #25 for a description of the resolved bug, which appears when using specific reference genomes like hs37d5. Thanks to @lindenb for reporting!",
        "html_url": "https://github.com/aryarm/varCA/releases/tag/v0.2.2",
        "name": "v0.2.2",
        "release_id": 45575419,
        "tag": "v0.2.2",
        "tarball_url": "https://api.github.com/repos/aryarm/varCA/tarball/v0.2.2",
        "type": "Release",
        "url": "https://api.github.com/repos/aryarm/varCA/releases/45575419",
        "value": "https://api.github.com/repos/aryarm/varCA/releases/45575419",
        "zipball_url": "https://api.github.com/repos/aryarm/varCA/zipball/v0.2.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "aryarm",
          "type": "User"
        },
        "date_created": "2020-07-08T15:07:46Z",
        "date_published": "2020-07-08T15:42:25Z",
        "description": "This release updates README files across the repository in an effort to improve our documentation.\r\n\r\n1. The main README provides just enough information for those who want to run the pipeline on the example data.\r\n2. The config.yaml section of the config README instructs users on how to execute the pipeline on their own data.\r\n3. The rest of the config README and the rules README tells them how to run the \"prepare\" and \"classify\" subworkflows separately from the master pipeline. It also instructs users on how to reproduce our results.\r\n4. Add to that the callers README, and they should be able to try their own variant callers.\r\n5. And the comments within the config files provide everything anyone could possibly want to know.",
        "html_url": "https://github.com/aryarm/varCA/releases/tag/v0.2.1",
        "name": "Improved Documentation",
        "release_id": 28179821,
        "tag": "v0.2.1",
        "tarball_url": "https://api.github.com/repos/aryarm/varCA/tarball/v0.2.1",
        "type": "Release",
        "url": "https://api.github.com/repos/aryarm/varCA/releases/28179821",
        "value": "https://api.github.com/repos/aryarm/varCA/releases/28179821",
        "zipball_url": "https://api.github.com/repos/aryarm/varCA/zipball/v0.2.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "aryarm",
          "type": "User"
        },
        "date_created": "2020-06-29T04:28:07Z",
        "date_published": "2020-06-29T05:02:57Z",
        "description": "The most notable change in this release is that the pipeline now produces VCF output.\r\nHowever, there are a number of other minor changes which generally make the pipeline easier to use. For more information see pull request https://github.com/aryam7/varCA/pull/16.",
        "html_url": "https://github.com/aryarm/varCA/releases/tag/v0.2.0",
        "name": "New VCF Output",
        "release_id": 28010561,
        "tag": "v0.2.0",
        "tarball_url": "https://api.github.com/repos/aryarm/varCA/tarball/v0.2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/aryarm/varCA/releases/28010561",
        "value": "https://api.github.com/repos/aryarm/varCA/releases/28010561",
        "zipball_url": "https://api.github.com/repos/aryarm/varCA/zipball/v0.2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "aryarm",
          "type": "User"
        },
        "date_created": "2020-03-06T17:12:32Z",
        "date_published": "2020-03-06T17:39:53Z",
        "description": "Initial release. Users can now run the pipeline on example data.",
        "html_url": "https://github.com/aryarm/varCA/releases/tag/v0.1.0",
        "name": "Initial Release",
        "release_id": 24238365,
        "tag": "v0.1.0",
        "tarball_url": "https://api.github.com/repos/aryarm/varCA/tarball/v0.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/aryarm/varCA/releases/24238365",
        "value": "https://api.github.com/repos/aryarm/varCA/releases/24238365",
        "zipball_url": "https://api.github.com/repos/aryarm/varCA/zipball/v0.1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Executing the pipeline on your own data",
        "parent_header": [
          "execution"
        ],
        "type": "Text_excerpt",
        "value": "You must modify [the config.yaml file](configs#configyaml) to specify paths to your data. The config file is currently configured to run the pipeline on the example data provided.\n"
      },
      "source": "https://raw.githubusercontent.com/aryarm/varCA/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Executing each portion of the pipeline separately",
        "parent_header": [
          "execution"
        ],
        "type": "Text_excerpt",
        "value": "The pipeline is made up of [two subworkflows](rules). These are usually executed together automatically by the master pipeline, but they can also be executed on their own for more advanced usage. See the [rules README](rules/README.md) for execution instructions and a description of the outputs. You will need to execute the subworkflows separately [if you ever want to create your own trained models](rules#training-and-testing-varca).\n"
      },
      "source": "https://raw.githubusercontent.com/aryarm/varCA/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 05:34:52",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 23
      },
      "technique": "GitHub_API"
    }
  ]
}