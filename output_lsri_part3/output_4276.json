{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/adamhockenberry/bacphlip"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contributing",
        "parent_header": [
          "BACPHLIP - a bacteriophage lifestyle prediction tool"
        ],
        "type": "Text_excerpt",
        "value": "Pull requests addressing errors or adding new functionalities are welcome on GitHub. However, to be accepted, contributions must pass the `pytest` unit tests. \n"
      },
      "source": "https://raw.githubusercontent.com/adamhockenberry/bacphlip/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-04-23T22:07:53Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-05T17:13:10Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A python library for predicting phage lifestyle based on genome sequence"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9628479575834686,
      "result": {
        "original_header": "BACPHLIP - a bacteriophage lifestyle prediction tool",
        "type": "Text_excerpt",
        "value": "*Adam J. Hockenberry and Claus O. Wilke* \n"
      },
      "source": "https://raw.githubusercontent.com/adamhockenberry/bacphlip/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.956460173636138,
      "result": {
        "original_header": "Overview and important caveats",
        "type": "Text_excerpt",
        "value": "The BACPHLIP software is designed to test whether a given phage genome (`.fasta` formatted) is likely to be either temperate (lysogenic) or virulent (lytic). The software makes this determination by searching for a particular set of what are hypothesized to be \"temperate-specific\" protein domains. BACPHLIP has several assumptions that users should be aware of: \n1. **the user input is a phage genome (nucleotide) sequence**. BACPHLIP does not perform any checks on whether the input nucleotide sequence is a phage so users are cautioned to verify this fact themselves prior to running BACPHLIP. Random stretches of DNA will be called virulent phages (assuming that no relevant domains are found within the random sequence) not because there are any indications of the sequence being a virulent phage, but rather because no data overturns the starting assumption (that you provided the program with a phage, see point 3 below). Similarly strange results will occur if you provide BACPHLIP with whole bacterial chromosomes, these will likely be called temperate phages simply because it's likely that several of the relevant \"temperate domains\" will be found somewhere within the chromosome. \n2. **the phage genome is complete**.  We stress that the absence of evidence is not the evidence of absence. If the genome is not complete, we simply do not have enough information to make a determination as to whether lysogeny-associated protein domains occur and *incomplete/partially-assembled genomes should therefore not be used as input*.   \n3. **the default/starting assumption is that any given input file is a virulent (lytic) phage.** Depending on the number and identity of various lysogeny-associated proteins that are found, this default assumption may be updated by the random forest classifier to indicate that the sequence is in fact temperate. However, if no protein domains of interest are found at all, the result will be to call the phage virulent.  \n4. **users should read through all documentation prior to use, as well as the (2 page) accompanying manuscript**. We have taken care to enumerate the use cases and limitations of this software package. For instance, BACPHLIP was trained on a dataset consisting almost entirely of phages from the order *Caudovirales*, most of which infect hosts in the orders *Actinobacteria*, *Gammaproteobacteria*, and *Bacilli*. We urge caution when using the software on species outside of these orders, but note that this fact may change as we update and expand training set data in future releases. \n \n"
      },
      "source": "https://raw.githubusercontent.com/adamhockenberry/bacphlip/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9639859542477591,
      "result": {
        "original_header": "Misc",
        "type": "Text_excerpt",
        "value": "The software is provided to you under the MIT license (see file `LICENSE.txt`).\nThe most up-to-date version of this software is available at\nhttps://github.com/adamhockenberry/bacphlip. \nThe development of `BACPHLIP` is provided in a separate repository for transparency. See [bacphlip-model-dev](https://github.com/adamhockenberry/bacphlip-model-dev).\n \n"
      },
      "source": "https://raw.githubusercontent.com/adamhockenberry/bacphlip/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/adamhockenberry/bacphlip/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/adamhockenberry/bacphlip/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "adamhockenberry/bacphlip"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BACPHLIP - a bacteriophage lifestyle prediction tool"
      },
      "source": "https://raw.githubusercontent.com/adamhockenberry/bacphlip/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "BACPHLIP - a bacteriophage lifestyle prediction tool"
        ],
        "type": "Text_excerpt",
        "value": "You can install BACPHLIP with pip:\n```\npip install bacphlip\n```\n\nAlternatively, users can clone/download the latest github repository, navigate to the directory where BACPHLIP was downloaded and run:\n```\npip install .\n```\n\nBACPHLIP has several required dependencies outside of the standard library: [biopython](https://pypi.org/project/biopython/), [pandas](https://pypi.org/project/pandas/), [joblib](https://pypi.org/project/joblib/), and [scikit-learn](https://pypi.org/project/scikit-learn/).\n\nAdditionally, users are required to install the [HMMER3 software suite](http://hmmer.org/) (in addition to the installation routes listed on the HMMER3 website we note that this tool can also be installed via [conda](https://anaconda.org/bioconda/hmmer)). By default, BACPHLIP assumes that HMMER3 is installed in the system path, but local paths may be provided as run-time flags (see below). \n"
      },
      "source": "https://raw.githubusercontent.com/adamhockenberry/bacphlip/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9872365819286323,
      "result": {
        "original_header": "BACPHLIP - a bacteriophage lifestyle prediction tool",
        "type": "Text_excerpt",
        "value": "Pre-print available at: <https://www.biorxiv.org/content/10.1101/2020.05.13.094805v1> \n"
      },
      "source": "https://raw.githubusercontent.com/adamhockenberry/bacphlip/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.97628309013176,
      "result": {
        "original_header": "Next steps",
        "type": "Text_excerpt",
        "value": "We have several planned next steps, including:\n1. adding a tutorial for library usage as a jupyter notebook in a forthcoming `examples` folder. \n2. adding the ability to run the pipeline in a \"quiet\" mode\n3. (insert your suggestion here)\n \n"
      },
      "source": "https://raw.githubusercontent.com/adamhockenberry/bacphlip/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9267504361405579,
      "result": {
        "original_header": "Misc",
        "type": "Text_excerpt",
        "value": "The software is provided to you under the MIT license (see file `LICENSE.txt`).\nThe most up-to-date version of this software is available at\nhttps://github.com/adamhockenberry/bacphlip. \nThe development of `BACPHLIP` is provided in a separate repository for transparency. See [bacphlip-model-dev](https://github.com/adamhockenberry/bacphlip-model-dev).\n \n"
      },
      "source": "https://raw.githubusercontent.com/adamhockenberry/bacphlip/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/adamhockenberry/bacphlip/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bacphlip"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "adamhockenberry"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Roff",
        "size": 215008,
        "type": "Programming_language",
        "value": "Roff"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "TeX",
        "size": 50555,
        "type": "Programming_language",
        "value": "TeX"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 27550,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/adamhockenberry/bacphlip/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "adamhockenberry",
          "type": "User"
        },
        "date_created": "2020-05-19T17:20:07Z",
        "date_published": "2020-06-05T15:45:41Z",
        "html_url": "https://github.com/adamhockenberry/bacphlip/releases/tag/v0.9.3-alpha",
        "name": "Pre-release prior to publication",
        "release_id": 27269478,
        "tag": "v0.9.3-alpha",
        "tarball_url": "https://api.github.com/repos/adamhockenberry/bacphlip/tarball/v0.9.3-alpha",
        "type": "Release",
        "url": "https://api.github.com/repos/adamhockenberry/bacphlip/releases/27269478",
        "value": "https://api.github.com/repos/adamhockenberry/bacphlip/releases/27269478",
        "zipball_url": "https://api.github.com/repos/adamhockenberry/bacphlip/zipball/v0.9.3-alpha"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 15:50:54",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 34
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Examples",
        "parent_header": [
          "BACPHLIP - a bacteriophage lifestyle prediction tool"
        ],
        "type": "Text_excerpt",
        "value": "The most straightforwad usage of BACPHLIP is as a command line tool. The required input is a genome (nucleotide) `fasta` file containing one record. Assuming that `/valid/path/to/a/genome.fasta` exists, you can call BACPHLIP with the command:\n```\nbacphlip -i /valid/path/to/a/genome.fasta\n```\n\nThis command should create 4 seperate files in the path of the target `genome.fasta` with `genome.fasta.bacphlip` containing the final model predictions (tab-separated format) in terms of probability of the input phage being either \"Virulent\" or \"Temperate\" (the other files append `.6frame`, `.hmmsearch`, and `.hmmsearch.tsv` to the genome file). Attempting to run this command a second time, assuming the first worked, should create an error since the output files already exist. This behavior can be altered with a flag to force overwrite the files:\n```\nbacphlip -i /valid/path/to/a/genome.fasta -f \n```\n\nA path to a local HMMER3 install (specifically, the `hmmsearch` tool) can be specified in the command line:\n```\nbacphlip -i /valid/path/to/a/genome.fasta --local_hmmsearch /valid/path/to/hmmsearch\n```\n\nUsers wishing to run BACPHLIP on multiple phages in batch are encouraged to use the `--multi_fasta` run-time flag. In this case, the input genome (nucleotide) fasta file should contain multiple sequence records (one per complete genome) with unique id's (as parsed by `biopython`). BACPHLIP will create a directory named after the input file, and intermediate files associated with each sequence record will be named from the record id and written to this directory. Finally, the final output file will contain a single table with predictions for each genome. Assuming that `multigenome.fasta` exists:\n```\nbacphlip -i /valid/path/to/a/multigenome.fasta --multi_fasta\n```\n\nAdditionally, BACPHLIP can also be accessed and used as a python library. From a python interpreter simply type:\n```\nimport bacphlip\nbacphlip.run_pipeline('/valid/path/to/a/genome.fasta')\n```\n\nA batch of input files can be run as a loop using this library functionality (which will output and save separate prediction [`.bacphlip`, a simple tab-separated format] files for each input):\n```\nimport bacphlip\nimport glob\nfor infile_loc in glob.glob('/valid/path/to/a/set/of/files/*.fasta'):\n    bacphlip.run_pipeline(infile_loc)\n```\n\nor if multiple genomes are included in the same `.fasta` file, numerous genomes can be analyzed by using the `run_pipeline_multi` function which will create a single `.bacphlip` containing rows for each input:\n```\nimport bacphlip\nmulti_fasta_file = '/valid/path/to/multi.fasta'\nbacphlip.run_pipeline_multi(infile_loc)\n```\n\n\nFinally, using BACPHLIP as a library makes individual functions available to the user in order to run and possibly troubleshoot single steps. I.e.:\n```\nimport bacphlip\nbacphlip.six_frame_translate( ... )\nbacphlip.hmmsearch_py( ... )\nbacphlip.process_hmmsearch( ... )\nbacphlip.predict_lifestyle( ... )\n```\nEach function has a relevant set of arguments that should be clear from the docs. It is our hope that running BACPHLIP in this manner will give more flexibility with regard to file names and may prove useful to some users.\n"
      },
      "source": "https://raw.githubusercontent.com/adamhockenberry/bacphlip/master/README.md",
      "technique": "header_analysis"
    }
  ]
}