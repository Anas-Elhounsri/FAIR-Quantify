{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "OpenAWSEM"
        ],
        "type": "Text_excerpt",
        "value": "Please cite the following paper when using OpenAWSEM:\nLu, W., Bueno, C., Schafer, N. P., Moller, J., Jin, S., Chen, X., ... & Wolynes, P. G. (2021). OpenAWSEM with Open3SPN2: A fast, flexible, and accessible framework for large-scale coarse-grained biomolecular simulations. PLoS computational biology, 17(2), e1008308. https://doi.org/10.1371/journal.pcbi.1008308\n"
      },
      "source": "https://raw.githubusercontent.com/npschafer/openawsem/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/npschafer/openawsem"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2017-07-19T15:08:42Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-19T14:35:15Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "An implementation of the AWSEM coarse-grained protein folding forcefield in OpenMM"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9921060877271491,
      "result": {
        "original_header": "An implementation of the AWSEM coarse-grained protein folding forcefield in OpenMM",
        "type": "Text_excerpt",
        "value": "OpenAWSEM is an implementation of the AWSEM (Associative memory, Water-mediated Structure, and Energy Model) coarse-grained protein forcefield designed for use with the OpenMM simulation toolkit.\n \n"
      },
      "source": "https://raw.githubusercontent.com/npschafer/openawsem/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.878091345041903,
      "result": {
        "original_header": "Configuration",
        "type": "Text_excerpt",
        "value": "OpenAWSEM allows users to configure data storage paths. To do this: \nCreate a .awsem directory in your home folder.\nInside .awsem, create a configuration file named config.ini to specify data paths. \nThe default paths point to the local data directory inside the OpenAWSEM module. \n"
      },
      "source": "https://raw.githubusercontent.com/npschafer/openawsem/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8953779547888064,
      "result": {
        "original_header": "Notes:",
        "type": "Text_excerpt",
        "value": "AWSEM is capable of modeling protein-DNA interactions when used together with open3SPN2, which can be found in a separate package at https://github.com/cabb99/open3spn2. \nFor small proteins, the LAMMPS version may be faster than OpenAWSEM, especially if a GPU is unavailable. Consider using http://awsem-md.org for such cases. \nA quick check of the stability of a protein in AWSEM can be done using the frustratometer server http://frustratometer.qb.fcen.uba.ar/ \n"
      },
      "source": "https://raw.githubusercontent.com/npschafer/openawsem/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9753761291239064,
      "result": {
        "original_header": "Data availability",
        "type": "Text_excerpt",
        "value": "Data related to the paper \"OpenAWSEM with Open3SPN2: A fast, flexible, and accessible framework for large-scale coarse-grained biomolecular simulations\" is available at https://app.globus.org/file-manager?origin_id=b4cef8ce-7773-4016-8513-829f388f7986&origin_path=%2FopenAWSEM_data%2F\n \n"
      },
      "source": "https://raw.githubusercontent.com/npschafer/openawsem/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/npschafer/openawsem/wiki"
      },
      "source": "https://raw.githubusercontent.com/npschafer/openawsem/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/npschafer/openawsem/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/npschafer/openawsem/master/examples/testawsem2.ipynb"
      },
      "source": "https://raw.githubusercontent.com/npschafer/openawsem/master/examples/testawsem2.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/npschafer/openawsem/master/examples/test_awsem.ipynb"
      },
      "source": "https://raw.githubusercontent.com/npschafer/openawsem/master/examples/test_awsem.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/npschafer/openawsem/master/examples/1svc/DNA%20Simulation%202.ipynb"
      },
      "source": "https://raw.githubusercontent.com/npschafer/openawsem/master/examples/1svc/DNA%20Simulation%202.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/npschafer/openawsem/master/examples/2xov/2xov_rama.ipynb"
      },
      "source": "https://raw.githubusercontent.com/npschafer/openawsem/master/examples/2xov/2xov_rama.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/npschafer/openawsem/master/examples/2xov/2xov_chi.ipynb"
      },
      "source": "https://raw.githubusercontent.com/npschafer/openawsem/master/examples/2xov/2xov_chi.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 23
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/npschafer/openawsem/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "npschafer/openawsem"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "OpenAWSEM"
      },
      "source": "https://raw.githubusercontent.com/npschafer/openawsem/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/npschafer/openawsem/master/test_setup.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/npschafer/openawsem/master/examples/compute_openMM_energy_from_lammps_output/shikai_model/run.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Conda",
        "parent_header": [
          "OpenAWSEM",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "To install OpenAWSEM using Conda, execute the following command:\n\n```bash\nconda install -c conda-forge openawsem\n```\n"
      },
      "source": "https://raw.githubusercontent.com/npschafer/openawsem/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Git",
        "parent_header": [
          "OpenAWSEM",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "This installation mode is recommended for users that want to contribute to the code and Wolynes lab members.\n\n```bash\n#Clone the awsem repository\ngit clone https://github.com/npschafer/openawsem.git\ncd openawsem\n\n# Create a new conda environment\nconda create -n openawsem -c conda-forge --file requirements.txt\nconda activate openawsem\n\n# Install the package in editable mode\npip install -e .\n```\n"
      },
      "source": "https://raw.githubusercontent.com/npschafer/openawsem/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9853099685325931,
      "result": {
        "original_header": "Configuration",
        "type": "Text_excerpt",
        "value": "OpenAWSEM allows users to configure data storage paths. To do this: \nCreate a .awsem directory in your home folder.\nInside .awsem, create a configuration file named config.ini to specify data paths. \nThe default paths point to the local data directory inside the OpenAWSEM module. \n"
      },
      "source": "https://raw.githubusercontent.com/npschafer/openawsem/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9582794596280086,
      "result": {
        "original_header": "Notes:",
        "type": "Text_excerpt",
        "value": "AWSEM is capable of modeling protein-DNA interactions when used together with open3SPN2, which can be found in a separate package at https://github.com/cabb99/open3spn2. \nFor small proteins, the LAMMPS version may be faster than OpenAWSEM, especially if a GPU is unavailable. Consider using http://awsem-md.org for such cases. \n"
      },
      "source": "https://raw.githubusercontent.com/npschafer/openawsem/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8558360149012774,
      "result": {
        "original_header": "Configuration",
        "type": "Text_excerpt",
        "value": "Create a .awsem directory in your home folder.\nInside .awsem, create a configuration file named config.ini to specify data paths. \nThe default paths point to the local data directory inside the OpenAWSEM module. \n"
      },
      "source": "https://raw.githubusercontent.com/npschafer/openawsem/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/npschafer/openawsem/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 Wei Lu\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/npschafer/openawsem/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "openawsem"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "npschafer"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 663038,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Roff",
        "size": 27396,
        "type": "Programming_language",
        "value": "Roff"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Tcl",
        "size": 2005,
        "type": "Programming_language",
        "value": "Tcl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 698,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/npschafer/openawsem/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "cabb99",
          "type": "User"
        },
        "date_created": "2023-11-04T14:42:24Z",
        "date_published": "2023-11-04T22:03:55Z",
        "description": "- Adds compatibility with openMM 8.0\r\n- Refactors for installation via conda / pip ",
        "html_url": "https://github.com/npschafer/openawsem/releases/tag/1.1.1",
        "name": "OpenAWSEM v1.1",
        "release_id": 128004548,
        "tag": "1.1.1",
        "tarball_url": "https://api.github.com/repos/npschafer/openawsem/tarball/1.1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/npschafer/openawsem/releases/128004548",
        "value": "https://api.github.com/repos/npschafer/openawsem/releases/128004548",
        "zipball_url": "https://api.github.com/repos/npschafer/openawsem/zipball/1.1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "luwei0917",
          "type": "User"
        },
        "date_created": "2021-03-11T19:53:11Z",
        "date_published": "2021-03-15T21:45:26Z",
        "html_url": "https://github.com/npschafer/openawsem/releases/tag/v1.0",
        "name": "openawsem 1.0",
        "release_id": 39844985,
        "tag": "v1.0",
        "tarball_url": "https://api.github.com/repos/npschafer/openawsem/tarball/v1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/npschafer/openawsem/releases/39844985",
        "value": "https://api.github.com/repos/npschafer/openawsem/releases/39844985",
        "zipball_url": "https://api.github.com/repos/npschafer/openawsem/zipball/v1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "STRIDE",
        "parent_header": [
          "OpenAWSEM",
          "Requirements"
        ],
        "type": "Text_excerpt",
        "value": "STRIDE is used for secondary structure prediction. \nDownload and install STRIDE and add it to your PATH:\nhttps://webclu.bio.wzw.tum.de/stride/\n```bash\nwget https://webclu.bio.wzw.tum.de/stride/stride.tar.gz\ntar -xvzf stride.tar.gz\ncd stride\nmake\necho 'export PATH=$PATH:'`pwd` >> ~/.bashrc\n```\n\nNote: If the webpage above becomes unavailable, please use an alternative repository like https://github.com/MDAnalysis/stride/tree/master/src .\n"
      },
      "source": "https://raw.githubusercontent.com/npschafer/openawsem/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "PSIBLAST",
        "parent_header": [
          "OpenAWSEM",
          "Requirements"
        ],
        "type": "Text_excerpt",
        "value": "Install psiblast using the distribution from bioconda:\n\n```bash\nconda install -c conda-forge -c bioconda blast\n```\n\nAlternatively Download and install psiblast and add it to your PATH: \nftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/\n\n```bash\nwget https://ftp.ncbi.nlm.nih.gov/blast/executables/LATEST/$(curl -s \"https://ftp.ncbi.nlm.nih.gov/blast/executables/LATEST/\" | grep -o 'ncbi-blast-[0-9.]*+-x64-linux.tar.gz'| head -n 1)\ntar -xvzf ncbi-*.tar.gz\ncd ncbi*/bin\necho 'export PATH=$PATH:'`pwd` >> ~/.bashrc\n```\n"
      },
      "source": "https://raw.githubusercontent.com/npschafer/openawsem/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "PDB_SEQRES",
        "parent_header": [
          "OpenAWSEM",
          "Requirements"
        ],
        "type": "Text_excerpt",
        "value": "* Download pdb_seqres.txt and put it in the cloned openawsem repository location\n\n```bash\nwget ftp://ftp.wwpdb.org/pub/pdb/derived_data/pdb_seqres.txt\nOPENAWSEM_LOCATION=$(python -c \"import openawsem; print(openawsem.__location__)\")\ncp pdb_seqres.txt $OPENAWSEM_LOCATION/data\n```\n"
      },
      "source": "https://raw.githubusercontent.com/npschafer/openawsem/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Predict_Property",
        "parent_header": [
          "OpenAWSEM",
          "Requirements"
        ],
        "type": "Text_excerpt",
        "value": "For secondary structure prediction from the fasta file OpenAWSEM can use \"Predict_Property.sh -i {name}.fasta\".\nInstall it from https://github.com/realbigws/Predict_Property.\nAfter installation, add Predict_property.sh to $PATH so it can be executed\nFor example add 'export PATH = $PATH:/Users/weilu/Research/Build/Predict_Property/' inside the ~/.bash_profile file.\n"
      },
      "source": "https://raw.githubusercontent.com/npschafer/openawsem/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-06 10:17:21",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 33
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Example",
        "parent_header": [
          "OpenAWSEM"
        ],
        "type": "Text_excerpt",
        "value": "```ini\n[Data Paths]\nblast = /home/USER/data/database/cullpdb_pc80_res3.0_R1.0_d160504_chains29712\ngro = /home/USER/data/Gros\npdb = /home/USER/data/PDBs\nindex = /home/USER/data/Indices\npdbfail = /home/USER/data/notExistPDBsList\npdbseqres = /home/USER/data/pdb_seqres.txt\ntopology = /home/USER/topology\n```\n\n## Example\nSimulation of the amino terminal domain of Phage 434 repressor (1r69)\n\n1. **Activate the OpenMM Environment:**\n   Activate the required environment for running simulations.\n   ```bash\n   source activate openmm\n   ```\n\n2. **Set Up the Simulation Folder:**\n   Create a simulation folder using the `awsem_create` command. The awsem_create command will automatically download the corresponding pdb.\n   ```bash\n   awsem_create 1r69 --frag\n   ```\n   Alternatively, if you have the `1r69.pdb` file:\n   ```bash\n   awsem_create 1r69.pdb --frag\n   ```\n\n3. **Modify the forces_setup.py**\n\n   The `forces_setup.py` script determines which force (energy) terms are included in the simulation. \n   To activate the fragment memory term uncomment the fragment memory term and comment the single memory term.\n   ```python\n      # templateTerms.fragment_memory_term(oa, frag_file_list_file=\"./frags.mem\", npy_frag_table=\"./frags.npy\", UseSavedFragTable=True),\n        templateTerms.fragment_memory_term(oa, frag_file_list_file=\"./single_frags.mem\", npy_frag_table=\"./single_frags.npy\", UseSavedFragTable=False),\n   ```\n   It should look like this:\n   ```python\n        templateTerms.fragment_memory_term(oa, frag_file_list_file=\"./frags.mem\", npy_frag_table=\"./frags.npy\", UseSavedFragTable=False),\n      #  templateTerms.fragment_memory_term(oa, frag_file_list_file=\"./single_frags.mem\", npy_frag_table=\"./single_frags.npy\", UseSavedFragTable=False),\n   ```\n3. **Run the Simulation:**\n   Execute the simulation using the `awsem_run` command, specifying the platform, number of steps, and start and end temperatures for the annealing simulation.\n   As an example we are running 1e5 steps, but it is common to run from 5 to 30 million steps in a single run.\n   \n   ```bash\n   awsem_run 1r69 --platform CPU --steps 1e5 --tempStart 800 --tempEnd 200 -f forces_setup.py\n   ```\n\n4. **Compute Energy and Q:**\n   Analyze the simulation results and redirect the output to `info.dat`.\n   ```bash\n   awsem_analyze 1r69 > info.dat\n   ```\n\n5. **Run Local Scripts (Optional):**\n   The scripts are copied to the project folder and can be modified as needed. To run the local scripts, use the following commands:\n   ```bash\n   ./mm_run.py 1r69 --platform CPU --steps 1e5 --tempStart 800 --tempEnd 200 -f forces_setup.py\n   ./mm_analyze.py 1r69 > energy.dat\n   ```\n"
      },
      "source": "https://raw.githubusercontent.com/npschafer/openawsem/master/README.md",
      "technique": "header_analysis"
    }
  ]
}