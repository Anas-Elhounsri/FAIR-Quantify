{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/liulab-dfci/TRUST4"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-09-06T02:33:54Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-02T04:33:07Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "TCR and BCR assembly from RNA-seq data"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.8736023934226123,
      "result": {
        "original_header": "TRUST4",
        "type": "Text_excerpt",
        "value": "Described in:  \n"
      },
      "source": "https://raw.githubusercontent.com/liulab-dfci/TRUST4/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.996128055707307,
      "result": {
        "original_header": "Build custom V,J,C gene database (files for -f and --ref)",
        "type": "Text_excerpt",
        "value": "TRUST4 is a computational tool to analyze TCR and BCR sequences using unselected RNA sequencing data, profiled from fluid and solid tissues, including tumors. TRUST4 performs de novo assembly on V, J, C genes including the hypervariable complementarity-determining region 3 (CDR3) and reports consensus contigs of BCR/TCR sequences. TRUST4 then realigns the contigs to IMGT reference gene sequences to identify the corresponding gene and CDR3 details. TRUST4 supports both single-end and paired-end bulk or single-cell sequencing data with any read length.  \n"
      },
      "source": "https://raw.githubusercontent.com/liulab-dfci/TRUST4/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.957957919985686,
      "result": {
        "original_header": "Input/Output",
        "type": "Text_excerpt",
        "value": "The primary input to TRUST4 is the alignment of RNA-seq reads in BAM format(-b), the file containing the genomic sequence and coordinate of V,J,C genes(-f), and the reference database sequence containing annotation information, such as IMGT (--ref). \nAn alternative input to TRUST4 is the raw RNA-seq files in fasta/fastq format (-1/-2 for paired; -u for single-end). You still need the files like -f, --ref from above. In this case, you can directly use IMGT's seuqence file for -f.  \nTRUST4 outputs several files. trust_raw.out, trust_final.out are the contigs and corresponding nucleotide weight. trust_annot.fa is in fasta format for the annotation of the consensus assembly. trust_cdr3.out reports the CDR1,2,3 and gene information for each consensus assemblies. And trust_report.tsv is a report file focusing on CDR3 and is compatible with other repertoire analysis tool such as VDJTools.  \nEach header of trust_annot.fa is split into fields: \n\"annotations\" also has several field, corresponding to annotation of V,D,J,C, CDR1, CDR2 and CDR3 respectively. For the annotation of the genes, it follows the pattern  \n\tgene_name(reference_gene_length):(consensus_start-consensus_end):(reference_start-reference_length):similarity\n\t\nEach type of genes has at most three gene candidate ranked by their similarity. For the annotation of CDRs, it follows the pattern: \n\tCDRx(consensus_start-consensus_end):score=sequence\n\t\nFor CDR1,2, score is similarity. for CDR3, score 0.00 means partial CDR3, score 1.00 means CDR3 with imputed nucleotides and other numbers means the motif signal strength with 100.00 as strongest. The coordinate is 0-based. \n\tconsensus_id\tindex_within_consensus\tV_gene\tD_gene\tJ_gene\tC_gene\tCDR1\tCDR2\tCDR3\tCDR3_score\tread_fragment_count CDR3_germline_similarity complete_vdj_assembly\n\t\nPlease note that CDR3_score in trust_cdr3.out has been divided by 100, so 1.00 is the maximum score and 0.01 means imputed CDR3. \nThe output trust_report.tsv is a tsv file. The fileds are:\n\t\n\tread_count\tfrequency(proportion of read_count)\tCDR3_dna\tCDR3_amino_acids\tV\tD\tJ\tC\tconsensus_id consensus_id_complete_vdj \nFor frequency, the BCR(IG) and TCR(TR) chains are normalized respectively. In the amino acid sequence, \"_\" represents stop codon, and \"?\" represents ambiguous nucleotide \"N\" in codon. \n"
      },
      "source": "https://raw.githubusercontent.com/liulab-dfci/TRUST4/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9408321149051139,
      "result": {
        "original_header": "Practical notes",
        "type": "Text_excerpt",
        "value": "* #### Build custom V,J,C gene database (files for -f and --ref) \nNormally, the file specified by \"--ref\" is downloaded from IMGT website, For example, for human, you can use command \nIf your input data for TRUST4 is raw FASTQ files, you can use the IMGT file for the \"-f\" option. If your input data for TRUST4 is BAM files, you need to generate another file for \"-f\". To do that, you need the reference genome (e.g. hg38 for human, or mm10 for mouse) of the species you are interested in and corresponding genome annotation GTF file (e.g. gencode v35 for human, or gencode mV21 for mouse). Then you can use command \n\t\n\tperl BuildDatabaseFa.pl reference.fa annotation.gtf bcr_tcr_gene_name.txt > bcrtcr.fa \nto generate the input for \"-f\". The \"bcr_tcr_gene_name.txt\" is provided as \"human_vdjc.list\" in the repository. \n* #### 10X Genomics data and barcode-based single-cell data \nWhen given barcode, TRUST4 only assembles the reads with the same barcode together. For 10X Genomics data, usually the input is the BAM file from cell-ranger, and you can use \"--barcode\" to specify the field in the BAM file to specify the barcode: e.g. \"--barcode CB\". \nIf your input is raw FASTQ files, you can use \"--barcode\" to specify the barcode file and use \"--readFormat\" to tell TRUST4 how to extract barcode information. The \"--readFormat\" option can also specify the extraction for read1, read2 and UMI. The value for this argument is a comma-separated string, each field in the string is also a semi-comma-splitted string \nThe start and end are inclusive and -1 means the end of the read. You may use multiple fields to specify non-consecutive segments, e.g. bc:0:15,bc:32:-1. The strand is presented by '+' and '-' symbol, if '-' the barcode will be reverse-complemented after extraction. The strand symbol can be omitted if it is '+' and is ignored on r1 and r2. For example, when the barcode is in the first 16bp of read1, one can use the option `-1 read1.fq.gz -2 read2.fq.gz --barcode read1.fq.gz --read-format bc:0:15,r1:16:-1`. \nTRUST4 supports using wildcard in the -1 -2/-u option, so a typical way to run 10X Genomics single-end data is by: \nBesides, TRUST4 can translate input cell barcodes to another set of barcodes. You can specify the translation file through the option --barcodeTranslate. The translation file is a two-column tsv/csv file with the translated barcode on the first column and the original barcode on the second column. This option also supports combinatorial barcoding, such as SHARE-seq. TRUST4 can translate each barcode segment provided in the second column to the ID in the first column and add \"-\" to concatenate the IDs in the output. \nIn the output, the abundance in the report will use the number of barcodes for the CDR3 instead of read count. TRUST4 will also generate the file trust_barcode_report.tsv. In this file, TRUST4 will pick the most abundance pair of chains as the representative for the barcode(cell). The format is: \nFor the chain information it is in CSV format:\n\t\n\tV_gene,D_gene,J_gene,C_gene,cdr3_nt,cdr3_aa,read_cnt,consensus_id,CDR3_germline_similarity,consensus_complete_vdj \n* #### SMART-Seq data \nFor 10x Genomics data, TRUST4 supports UMI-based abundance estimation. You can use --UMI to specify the UMI sequence file or the field in the BAM file. If the sequence contains non-UMI information, you can use --readFormat with keyword \"um\" to specify the UMI sequence range.  \nNote that in 10x Genomics data, UMI plus the cell barcode is the real unique molecular identifier. In other platforms, the UMI can be real unique and be regarded as molecule barcode. You can run trust4 with \"--barcode UMIfile --barcodeLevel molecule\" to specify UMI as molecule barcode. In this output, the represented chain information is in the chain1 column of the trust_barcode_report.tsv file. \nIf you are interested in a subset of chains, you can \"grep\" those from trust_cdr3.out and run trust-simplerep.pl on the subset. \nYou can use the \"annotator\" from TRUST4 to annotate the V,D,J,C genes and CDRs for any given sequences, just like using IgBLAST or IMGT/VQuest. To obtain the annotation in AIRR format for human sequences with eight threads, you can use the command \nThe directory './example' in this distribution contains one BAM files as input for TRUST4. Run TRUST4 with: \nThe directory also contains two fastq files, and you can run TRUST4 with: \nNote that the requirement of the hg38_bcrtcr.fa is that it contains genomic coordinates of the V, D, J and C genes which are crucial for extracting candidate reads in alignment BAM files. The coordinate information is not needed for fastq input, so you can use the IMGT reference file for the -f option. This is useful when analyzing species without reference genomes or genome annotations. The example command can be:  \n"
      },
      "source": "https://raw.githubusercontent.com/liulab-dfci/TRUST4/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8069591208396893,
      "result": {
        "original_header": "Miscellaneous",
        "type": "Text_excerpt",
        "value": "The evaluation instructions and scripts in TRUST4's manuscript is available at: https://github.com/liulab-dfci/TRUST4_manuscript_evaluation .\n \n"
      },
      "source": "https://raw.githubusercontent.com/liulab-dfci/TRUST4/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9267206454647415,
      "result": {
        "original_header": "Practical notes",
        "type": "Text_excerpt",
        "value": "### Terms of use \nThis program is free software; you can redistribute it and/or modify it\nunder the terms of the GNU General Public License as published by the\nFree Software Foundation; either version 3 of the License, or (at your\noption) any later version. \nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details. \nYou should have received (LICENSE.txt) a copy of the GNU General\nPublic License along with this program; if not, you can obtain one from\nhttp://www.gnu.org/licenses/gpl.txt or by writing to the Free Software\nFoundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n \n### Support \n"
      },
      "source": "https://raw.githubusercontent.com/liulab-dfci/TRUST4/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9717046326712819,
      "result": {
        "original_header": "Build custom V,J,C gene database (files for -f and --ref)",
        "type": "Text_excerpt",
        "value": "### What is TRUST4? \n"
      },
      "source": "https://raw.githubusercontent.com/liulab-dfci/TRUST4/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9323358137378976,
      "result": {
        "original_header": "Install",
        "type": "Text_excerpt",
        "value": "TRUST4 depends on [pthreads](http://en.wikipedia.org/wiki/POSIX_Threads) and samtools depends on [zlib](http://en.wikipedia.org/wiki/Zlib). For MacOS, TRUST4 has been successfully compiled with gcc_darwin17.7.0 and gcc_9.2.0 installed by Homebrew. \n"
      },
      "source": "https://raw.githubusercontent.com/liulab-dfci/TRUST4/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8738825992726493,
      "result": {
        "original_header": "Build custom V,J,C gene database (files for -f and --ref)",
        "type": "Text_excerpt",
        "value": "\tUsage: ./run-trust4 [OPTIONS]\n\t\tRequired:\n\t\t\t-b STRING: path to bam file\n\t\t\t-1 STRING -2 STRING: path to paired-end read files\n\t\t\t-u STRING: path to single-end read file\n\t\t\t-f STRING: path to the fasta file coordinate and sequence of V/D/J/C genes\n\t\tOptional:\n\t\t\t--ref STRING: path to detailed V/D/J/C gene reference file, such as from IMGT database. (default: not used). (recommended) \n\t\t\t-o STRING: prefix of output files. (default: inferred from file prefix)\n\t\t\t--od STRING: the directory for output files. (default: ./)\n\t\t\t-t INT: number of threads (default: 1)\n\t\t\t-k INT: the starting k-mer size for indexing contigs (default: 9)\n\t\t\t--barcode STRING: if -b, bam field for barcode; if -1 -2/-u, file containing barcodes (defaul: not used)\n\t\t\t--barcodeLevel STRING: barcode is for cell or molecule (default: cell)\n\t\t\t--barcodeWhitelist STRING: path to the barcode whitelist (default: not used)\n\t\t\t--barcodeTranslate STRING: path to the barcode translate file (default: not used)\n\t\t\t--UMI STRING: if -b, bam field for 10x Genomics-like UMI; if -1 -2/-u, file containing 10x Genomics-like UMIs (default: not used)\n\t\t\t--readFormat STRING: format for read, barcode and UMI files (example: r1:0:-1,r2:0:-1,bc:0:15,um:16:-1 for paired-end files with barcode and UMI)\n\t\t\t--repseq: the data is from bulk,non-UMI-based TCR-seq or BCR-seq (default: not set)\n\t\t\t--contigMinCov INT: ignore contigs that have bases covered by fewer than INT reads (default: 0)\n\t\t\t--minHitLen INT: the minimal hit length for a valid overlap (default: auto)\n\t\t\t--mateIdSuffixLen INT: the suffix length in read id for mate. (default: not used)\n\t\t\t--skipMateExtension: do not extend assemblies with mate information, useful for SMART-seq (default: not used)\n\t\t\t--abnormalUnmapFlag: the flag in BAM for the unmapped read-pair is nonconcordant (default: not set)\n\t\t\t--assembleWithRef: conduct the assembly with --ref file (default: use -f file)\\n\".\n\t\t\t--noExtraction: directly use the files from provided -1 -2/-u to assemble (default: extraction first)\n\t\t\t--outputReadAssignment: output read assignment results to the prefix_assign.out file (default: no output)\n\t\t\t--stage INT: start TRUST4 on specified stage (default: 0)\n\t\t\t\t0: start from beginning (candidate read extraction)\n\t\t\t\t1: start from assembly\n\t\t\t\t2: start from annotation\n\t\t\t\t3: start from generating the report table\n\t\t\t--clean INT: clean up files. 0: no clean. 1: clean intermediate files. 2: only keep AIRR files. (default: 0) \n"
      },
      "source": "https://raw.githubusercontent.com/liulab-dfci/TRUST4/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/liulab-dfci/TRUST4/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 47
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/liulab-dfci/TRUST4/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "liulab-dfci/TRUST4"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "TRUST4"
      },
      "source": "https://raw.githubusercontent.com/liulab-dfci/TRUST4/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/liulab-dfci/TRUST4/master/trust-example-test.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Install",
        "parent_header": [
          "TRUST4"
        ],
        "type": "Text_excerpt",
        "value": "1. Clone the [GitHub repo](https://github.com/liulab-dfci/TRUST4), e.g. with `git clone https://github.com/liulab-dfci/TRUST4.git`\n2. Run `make` in the repo directory\n\nYou will find the executable files in the downloaded directory. If you want to run TRUST4 without specifying the directory, you can either add the directory of TRUST4 to the environment variable PATH or create a soft link (\"ln -s\") of the file \"run-trust4\" to a directory in PATH.\n\nTRUST4 depends on [pthreads](http://en.wikipedia.org/wiki/POSIX_Threads) and samtools depends on [zlib](http://en.wikipedia.org/wiki/Zlib). For MacOS, TRUST4 has been successfully compiled with gcc_darwin17.7.0 and gcc_9.2.0 installed by Homebrew.\n\nTRUST4 is also available form [Bioconda](https://anaconda.org/bioconda/trust4). You can install TRUST4 with `conda install -c bioconda trust4` or use the docker container `docker pull quay.io/biocontainers/trust4:<tag>` (see [trust4/tags](https://quay.io/repository/biocontainers/trust4?tab=tags) for valid values for <tag>). \n"
      },
      "source": "https://raw.githubusercontent.com/liulab-dfci/TRUST4/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8971694259765712,
      "result": {
        "original_header": "Practical notes",
        "type": "Text_excerpt",
        "value": "Normally, the file specified by \"--ref\" is downloaded from IMGT website, For example, for human, you can use command \nThe available species name can be found on [IMGT FTP](http://www.imgt.org//download/V-QUEST/IMGT_V-QUEST_reference_directory/). \nIf your input data for TRUST4 is raw FASTQ files, you can use the IMGT file for the \"-f\" option. If your input data for TRUST4 is BAM files, you need to generate another file for \"-f\". To do that, you need the reference genome (e.g. hg38 for human, or mm10 for mouse) of the species you are interested in and corresponding genome annotation GTF file (e.g. gencode v35 for human, or gencode mV21 for mouse). Then you can use command \n\t\n\tperl BuildDatabaseFa.pl reference.fa annotation.gtf bcr_tcr_gene_name.txt > bcrtcr.fa \nThe IMGT+C.fa can also be used to generate \"bcr_tcr_gene_name.txt\" file with command: \n\trun-trust4 -f hg38_bcrtcr.fa --ref human_IMGT+C.fa -u path_to_10X_fastqs/*_R2_*.fastq.gz --barcode path_to_10X_fastqs/*_R1_*.fastq.gz --readFormat bc:0:15 --barcodeWhitelist cellranger_folder/cellranger-cs/VERSION/lib/python/cellranger/barcodes/737K-august-2016.txt [other options] \nThe exact options depend on your 10X Genomics ikit. \nTRUST4 also converts the barcode report file to the trust_barcode_airr.tsv file to follow the AIRR format. \n\tperl trust-smartseq.pl -1 read1_list.txt -2 read2_list.txt -t 8 -f hg38_bctcr.fa --ref human_IMGT+C.fa -o TRUST \n"
      },
      "source": "https://raw.githubusercontent.com/liulab-dfci/TRUST4/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9991324438612905,
      "result": {
        "original_header": "Miscellaneous",
        "type": "Text_excerpt",
        "value": "The evaluation instructions and scripts in TRUST4's manuscript is available at: https://github.com/liulab-dfci/TRUST4_manuscript_evaluation .\n \n"
      },
      "source": "https://raw.githubusercontent.com/liulab-dfci/TRUST4/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9974891876897927,
      "result": {
        "original_header": "Practical notes",
        "type": "Text_excerpt",
        "value": "You should have received (LICENSE.txt) a copy of the GNU General\nPublic License along with this program; if not, you can obtain one from\nhttp://www.gnu.org/licenses/gpl.txt or by writing to the Free Software\nFoundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n \n### Support \n"
      },
      "source": "https://raw.githubusercontent.com/liulab-dfci/TRUST4/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9930303049642868,
      "result": {
        "original_header": "Build custom V,J,C gene database (files for -f and --ref)",
        "type": "Text_excerpt",
        "value": "### Install \n"
      },
      "source": "https://raw.githubusercontent.com/liulab-dfci/TRUST4/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.999860271828382,
      "result": {
        "original_header": "Install",
        "type": "Text_excerpt",
        "value": "1. Clone the [GitHub repo](https://github.com/liulab-dfci/TRUST4), e.g. with `git clone https://github.com/liulab-dfci/TRUST4.git`\n2. Run `make` in the repo directory \nYou will find the executable files in the downloaded directory. If you want to run TRUST4 without specifying the directory, you can either add the directory of TRUST4 to the environment variable PATH or create a soft link (\"ln -s\") of the file \"run-trust4\" to a directory in PATH. \nTRUST4 depends on [pthreads](http://en.wikipedia.org/wiki/POSIX_Threads) and samtools depends on [zlib](http://en.wikipedia.org/wiki/Zlib). For MacOS, TRUST4 has been successfully compiled with gcc_darwin17.7.0 and gcc_9.2.0 installed by Homebrew. \n"
      },
      "source": "https://raw.githubusercontent.com/liulab-dfci/TRUST4/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999999995642099,
      "result": {
        "original_header": "Build custom V,J,C gene database (files for -f and --ref)",
        "type": "Text_excerpt",
        "value": "TRUST4 is also available form [Bioconda](https://anaconda.org/bioconda/trust4). You can install TRUST4 with `conda install -c bioconda trust4` or use the docker container `docker pull quay.io/biocontainers/trust4:<tag>` (see [trust4/tags](https://quay.io/repository/biocontainers/trust4?tab=tags) for valid values for <tag>).  \n"
      },
      "source": "https://raw.githubusercontent.com/liulab-dfci/TRUST4/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8628050614128819,
      "result": {
        "original_header": "Practical notes",
        "type": "Text_excerpt",
        "value": "The IMGT+C.fa can also be used to generate \"bcr_tcr_gene_name.txt\" file with command: \nWe provide a wrapper \"trust-smartseq.pl\" to process the files from platforms like SMART-seq. The user shall give the path to each file in a text file. An example command can be \n\t./annotator -f human_IMGT+C.fa -a input.fa --fasta -t 8 --needReveserComplement --noImpute --outputFormat 1 > annotation.tsv \n \n### Example \n\t./run-trust4 -b example/example.bam -f hg38_bcrtcr.fa --ref human_IMGT+C.fa \nThe run will generate the files TRUST_example_raw.out, TRUST_example_final.out, TRUST_example_annot.fa, TRUST_example_cdr3.out, TRUST_example_report.tsv and several fq/fa files in seconds. The results should be the same as the files in the example folder. You can check whether TRUST4 is properly installed by running the command \"bash trust-example-test.sh\" in the TRUST4 folder using this example data. \n\t./run-trust4 -f hg38_bcrtcr.fa --ref human_IMGT+C.fa -1 example/example_1.fq -2 example/example_2.fq -o TRUST_example \n\t./run-trust4 -f human_IMGT+C.fa --ref human_IMGT+C.fa -1 example/example_1.fq -2 example/example_2.fq -o TRUST_example \n"
      },
      "source": "https://raw.githubusercontent.com/liulab-dfci/TRUST4/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/liulab-dfci/TRUST4/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "TRUST4"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "liulab-dfci"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 948442,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 541620,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 189840,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Roff",
        "size": 28252,
        "type": "Programming_language",
        "value": "Roff"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 27055,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Lua",
        "size": 23713,
        "type": "Programming_language",
        "value": "Lua"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 9274,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Java",
        "size": 6716,
        "type": "Programming_language",
        "value": "Java"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "TeX",
        "size": 4217,
        "type": "Programming_language",
        "value": "TeX"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 598,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/liulab-dfci/TRUST4/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mourisl",
          "type": "User"
        },
        "date_created": "2024-08-14T14:55:26Z",
        "date_published": "2024-08-18T17:11:27Z",
        "description": "- Fix several issues for Linux arm64 platform (#300 )\r\n- Fix an issue of regarding genes like IGLL1 as constant genes for recent IMGT reference sequences.\r\n- Add an option \"--skipBarcodeErrorRead\" option to fastq-extractor for customizable workflows (#301)",
        "html_url": "https://github.com/liulab-dfci/TRUST4/releases/tag/v1.1.4",
        "name": "TRUST4 v1.1.4",
        "release_id": 170766055,
        "tag": "v1.1.4",
        "tarball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/tarball/v1.1.4",
        "type": "Release",
        "url": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/170766055",
        "value": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/170766055",
        "zipball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/zipball/v1.1.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mourisl",
          "type": "User"
        },
        "date_created": "2024-07-31T23:20:19Z",
        "date_published": "2024-08-03T00:34:54Z",
        "description": "- Add the option \"--imgtAdditionalGap\" to specify where IMGT introduces the additional gaps. This option is useful to handle the TRAV gene for mouse.\r\n- Fix a serious bug in handling the additional gap that may cause the CDR3's 3' end shift when there are additional gaps. (#295 )\r\n- Fix a serious bug that may crash the program when imputing TCR sequences (#294 )\r\n- Fix a small bug of missing short V gene in a contig.",
        "html_url": "https://github.com/liulab-dfci/TRUST4/releases/tag/v1.1.3",
        "name": "TRUST4 v1.1.3",
        "release_id": 168467143,
        "tag": "v1.1.3",
        "tarball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/tarball/v1.1.3",
        "type": "Release",
        "url": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/168467143",
        "value": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/168467143",
        "zipball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/zipball/v1.1.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mourisl",
          "type": "User"
        },
        "date_created": "2024-06-28T04:39:57Z",
        "date_published": "2024-07-08T16:47:32Z",
        "description": "- Detect special gaps in V genes from IMGT, e.g. mouse TRAV genes, and adjust the CDR3 coordinate accordingly. \r\n- Always realign the reads to the contigs for abundance estimation. Orignally, this step is skipped in barcoded data. (#281 )\r\n- Change the definition of the \"complete_vdj\" column as the sequence with 5' V to 3' J sequence. Originally, it requires the presence of C gene.\r\n- Fix a bug in the airr_alignment file from annotator that may miss some column for contigs with CDR3 information\r\n- Fix a bug of wrong V, J gene range after imputing TCRs",
        "html_url": "https://github.com/liulab-dfci/TRUST4/releases/tag/v1.1.2",
        "name": "TRUST4 v1.1.2",
        "release_id": 164438823,
        "tag": "v1.1.2",
        "tarball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/tarball/v1.1.2",
        "type": "Release",
        "url": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/164438823",
        "value": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/164438823",
        "zipball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/zipball/v1.1.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mourisl",
          "type": "User"
        },
        "date_created": "2024-04-23T00:57:34Z",
        "date_published": "2024-05-07T15:23:41Z",
        "description": "- Improved assembly results for barcode-based data through barcode-wise k-mer count (#262)\r\n- Output the imputed TCRs in the AIRR format for barcode data\r\n- Fix a serious bug in smart-seq AIRR output. (#258)\r\n- FIx a bug of getting wrong quality scores when using --readFormat",
        "html_url": "https://github.com/liulab-dfci/TRUST4/releases/tag/v1.1.1",
        "name": "TRUST4 v1.1.1",
        "release_id": 154607915,
        "tag": "v1.1.1",
        "tarball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/tarball/v1.1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/154607915",
        "value": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/154607915",
        "zipball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/zipball/v1.1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mourisl",
          "type": "User"
        },
        "date_created": "2024-04-08T15:23:06Z",
        "date_published": "2024-04-09T15:14:21Z",
        "description": "- Change the license to MIT\r\n- Significantly improved performance on data with barcode, e.g. 10x Genomics, TCR/BCR-seq with UMIs (--barcodeLevel molecule)\r\n- Allow gzipped barcode whitelist\r\n- Allow recursive folder creation by @TaverB (#252  )\r\n- Add cell_id to smart-seq's AIRR-format output (#253 )\r\n- Fix a serious bug that some reads may be used to calculate other barcode's chain's abundances (#254 )\r\n- Fix a bug that the UMI information may be wrong when there are missing barcodes for 10x Genomics-like data (#254 )\r\n- Fix a bug for some V and J gene alignment ranges if the anchor is too short",
        "html_url": "https://github.com/liulab-dfci/TRUST4/releases/tag/v1.1.0",
        "name": "TRUST4 v1.1.0",
        "release_id": 150421890,
        "tag": "v1.1.0",
        "tarball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/tarball/v1.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/150421890",
        "value": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/150421890",
        "zipball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/zipball/v1.1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mourisl",
          "type": "User"
        },
        "date_created": "2024-03-18T18:07:45Z",
        "date_published": "2024-03-18T18:25:17Z",
        "description": "- Improved sensitivity and precision by fixing a bug when merging two mate pairs.\r\n- Add the option \"--clean INT\" to clean up intermediate files (#247)\r\n- Do not suppress out-of-frame assemblies in \"--barcodeLevel molecule\" mode (#248)\r\n- Allow TCR full-length assembly with --repseq option (#241 ) \r\n- Add c_cigar to the AIRR format output (#244)\r\n- More robust implementation when there is no toassemble reads at all (#127)\r\n- Suppress the CDR3s with length >= 7000, probably due to misannotation. (#242)\r\n- Fix a bug if the read header is too long in the final.out file. (#237) \r\n- Fix a bug where the \"--barcode\" option has to be specified before \"--UMI\".  (#232) ",
        "html_url": "https://github.com/liulab-dfci/TRUST4/releases/tag/v1.0.14",
        "name": "TRUST4 v1.0.14",
        "release_id": 147093919,
        "tag": "v1.0.14",
        "tarball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/tarball/v1.0.14",
        "type": "Release",
        "url": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/147093919",
        "value": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/147093919",
        "zipball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/zipball/v1.0.14"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mourisl",
          "type": "User"
        },
        "date_created": "2023-10-17T20:09:52Z",
        "date_published": "2023-10-31T20:08:00Z",
        "description": "- \"annotator\" can take multiple-line fasta/fastq files now.\r\n- The --read-format will not internally sort the segments, so users can fully control the read structure.\r\n- Add \"locus\" column in the AIRR output.\r\n- Fix a bug causing false positive TCRs during imputation. (An error was identified in the comment: https://academic.oup.com/bib/article/24/6/bbad354/7306821).\r\n- Slightly improve the consensus choice when ties.",
        "html_url": "https://github.com/liulab-dfci/TRUST4/releases/tag/v1.0.13",
        "name": "TRUST4 v1.0.13",
        "release_id": 127429598,
        "tag": "v1.0.13",
        "tarball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/tarball/v1.0.13",
        "type": "Release",
        "url": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/127429598",
        "value": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/127429598",
        "zipball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/zipball/v1.0.13"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mourisl",
          "type": "User"
        },
        "date_created": "2023-08-08T15:54:51Z",
        "date_published": "2023-08-08T15:57:15Z",
        "description": "- Fix a serious bug that may crash the program when generating AIRR alignment (#205 )\r\n- Improve the robustness in testing example files (#206 )\r\n- Improve the annotation accuracy when SHM is high\r\n- Fix several false positive CDR3 issues\r\n- Allow \"/OR\" genes in D gene annotation",
        "html_url": "https://github.com/liulab-dfci/TRUST4/releases/tag/v1.0.12",
        "name": "TRUST4 v1.0.12",
        "release_id": 115638352,
        "tag": "v1.0.12",
        "tarball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/tarball/v1.0.12",
        "type": "Release",
        "url": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/115638352",
        "value": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/115638352",
        "zipball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/zipball/v1.0.12"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mourisl",
          "type": "User"
        },
        "date_created": "2023-07-20T20:09:29Z",
        "date_published": "2023-07-20T20:12:47Z",
        "description": "- \"annotator\" can directly output AIRR-format annotations, so it can be served as a stand-alone IgBLAST-like annotation method now. (https://github.com/liulab-dfci/TRUST4#annotation-only)\r\n- Remove a redundant ';' in the secondary chain in the barcode_report file. (#197)",
        "html_url": "https://github.com/liulab-dfci/TRUST4/releases/tag/v1.0.11",
        "name": "TRUST4 v1.0.11",
        "release_id": 113028717,
        "tag": "v1.0.11",
        "tarball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/tarball/v1.0.11",
        "type": "Release",
        "url": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/113028717",
        "value": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/113028717",
        "zipball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/zipball/v1.0.11"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mourisl",
          "type": "User"
        },
        "date_created": "2023-05-23T16:18:37Z",
        "date_published": "2023-05-23T16:45:23Z",
        "description": "- Add the option \"--readFormat\" that simplifies the read/barcode specification syntax. \r\n- Add the option \"--barcodeTranslate\" to translate barcodes to another set of strings, and this option supports subset translation.\r\n- Fix several issues in the perl script regarding creating IMGT sequence (Thanks to @Rudolph-afk )",
        "html_url": "https://github.com/liulab-dfci/TRUST4/releases/tag/v1.0.10",
        "name": "TRUST4 v1.0.10",
        "release_id": 103982529,
        "tag": "v1.0.10",
        "tarball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/tarball/v1.0.10",
        "type": "Release",
        "url": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/103982529",
        "value": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/103982529",
        "zipball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/zipball/v1.0.10"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mourisl",
          "type": "User"
        },
        "date_created": "2023-03-03T15:51:08Z",
        "date_published": "2023-03-30T20:12:27Z",
        "description": "- Remove the limitation of read length (10000bp before).\r\n- Add the script to add IMGT gaps to the AIRR output.\r\n- Expose the assembly k-mer and minimum hit length option to the user.\r\n- Cleaner secondary chains in the barcode report file.\r\n- Allow assembly stage to use --ref file. This is for the case that the gene names in -f reference file is not starting with TR{BAGD} or IG{HKL}.",
        "html_url": "https://github.com/liulab-dfci/TRUST4/releases/tag/v1.0.9",
        "name": "TRUST4 v1.0.9",
        "release_id": 97542077,
        "tag": "v1.0.9",
        "tarball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/tarball/v1.0.9",
        "type": "Release",
        "url": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/97542077",
        "value": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/97542077",
        "zipball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/zipball/v1.0.9"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mourisl",
          "type": "User"
        },
        "date_created": "2022-10-07T22:23:44Z",
        "date_published": "2022-11-02T19:52:00Z",
        "description": "- Use barcode count for the trust_report.tsv file when using \"--barcode\" option. This allows TRUST4 to work seamlessly with UMI-based TCR-seq/BCR-seq data through the option \"--barcode-level molecule\".\r\n- Fix a bug of reporting partial CDR3 as complete in rare cases\r\n- Fix several bugs in AIRR format",
        "html_url": "https://github.com/liulab-dfci/TRUST4/releases/tag/v1.0.8",
        "name": "TRUST4 v1.0.8",
        "release_id": 81869382,
        "tag": "v1.0.8",
        "tarball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/tarball/v1.0.8",
        "type": "Release",
        "url": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/81869382",
        "value": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/81869382",
        "zipball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/zipball/v1.0.8"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mourisl",
          "type": "User"
        },
        "date_created": "2022-07-14T20:18:14Z",
        "date_published": "2022-07-20T17:10:17Z",
        "description": "- Output the sequence_alignment and germline_alignment fields in the AIRR format. Now TRUST4 outputs all the required fields in the AIRR format.\r\n- Output the AIRR file for the SMART-seq-like data.\r\n- Supporting barcodes at the molecular level\r\n- The secondary chain fields in the barcode_report file contain all types of chains. We also added the script  \"barcoderep-expand.py\" to expand each barcode to represent those secondary chains for the case where each barcode contains multiple cells.\r\n-  Improve the speed of processing BAM input.",
        "html_url": "https://github.com/liulab-dfci/TRUST4/releases/tag/v1.0.8-beta",
        "name": "TRUST4 v1.0.8-beta",
        "release_id": 72452001,
        "tag": "v1.0.8-beta",
        "tarball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/tarball/v1.0.8-beta",
        "type": "Release",
        "url": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/72452001",
        "value": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/72452001",
        "zipball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/zipball/v1.0.8-beta"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mourisl",
          "type": "User"
        },
        "date_created": "2022-03-24T17:47:44Z",
        "date_published": "2022-04-04T14:07:22Z",
        "description": "- Fix an issue of abundance estimation\r\n- Fix an issue of throwing \"Unkown parameters\", e.g: #74, #98 \r\n- Use the report file to drive the AIRR output\r\n- Fix other small bugs",
        "html_url": "https://github.com/liulab-dfci/TRUST4/releases/tag/v1.0.7",
        "name": "TRUST4 v1.0.7",
        "release_id": 63527231,
        "tag": "v1.0.7",
        "tarball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/tarball/v1.0.7",
        "type": "Release",
        "url": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/63527231",
        "value": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/63527231",
        "zipball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/zipball/v1.0.7"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mourisl",
          "type": "User"
        },
        "date_created": "2021-11-12T22:54:07Z",
        "date_published": "2021-11-12T23:00:09Z",
        "description": "- Output files in [the AIRR format](https://docs.airr-community.org/en/latest/datarep/rearrangements.html).\r\n- Fix an issue of provided mouse reference genome sequences.\r\n- Provide a script to remove possibly leaked CDR3 sequences in barcode file.\r\n- Add the option to output more than one pair of chains in the smart-seq wrapper.\r\n- Other small bugs fixed.",
        "html_url": "https://github.com/liulab-dfci/TRUST4/releases/tag/v1.0.6",
        "name": "TRUST4 v1.0.6",
        "release_id": 53275849,
        "tag": "v1.0.6",
        "tarball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/tarball/v1.0.6",
        "type": "Release",
        "url": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/53275849",
        "value": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/53275849",
        "zipball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/zipball/v1.0.6"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mourisl",
          "type": "User"
        },
        "date_created": "2021-07-28T00:20:32Z",
        "date_published": "2021-07-28T00:22:25Z",
        "description": "- Output read count in the abundance column in trust-stats.py\r\n- Fix a serious bug in the run-trust4 wrapper in the original v1.0.5 release for single-cell data. ",
        "html_url": "https://github.com/liulab-dfci/TRUST4/releases/tag/v1.0.5.1",
        "name": "TRUST4 v1.0.5.1",
        "release_id": 46870706,
        "tag": "v1.0.5.1",
        "tarball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/tarball/v1.0.5.1",
        "type": "Release",
        "url": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/46870706",
        "value": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/46870706",
        "zipball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/zipball/v1.0.5.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mourisl",
          "type": "User"
        },
        "date_created": "2021-07-27T16:41:01Z",
        "date_published": "2021-07-27T16:43:02Z",
        "description": "- Add the option \"--needReverseComplement\" and \"--fastq\" to annotator so it can handle raw unstranded data\r\n- Add the option \"--outputReadAssignment\" where the read assignment will be output to {prefix}_assign.out file\r\n- Add the option '--imputeBCR\" to trust-barcoderep.pl so BCR CDR3 information can also be imputed when specified \r\n- Fix a small issue in extracting candidate reads with respect to tandem repeats \r\n- Fix several bugs",
        "html_url": "https://github.com/liulab-dfci/TRUST4/releases/tag/v1.0.5",
        "name": "TRUST4 v1.0.5",
        "release_id": 46849624,
        "tag": "v1.0.5",
        "tarball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/tarball/v1.0.5",
        "type": "Release",
        "url": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/46849624",
        "value": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/46849624",
        "zipball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/zipball/v1.0.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mourisl",
          "type": "User"
        },
        "date_created": "2021-05-13T17:19:04Z",
        "date_published": "2021-05-13T17:23:32Z",
        "description": "- Add the script trust-stats.py to summarize immune repertoire statistics for each report or barcode-report file\r\n- Fix an issue in scaffolding, which may cause wrong abundance estimation\r\n- Fix several bugs",
        "html_url": "https://github.com/liulab-dfci/TRUST4/releases/tag/v1.0.4",
        "name": "TRUST4 v1.0.4",
        "release_id": 42915652,
        "tag": "v1.0.4",
        "tarball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/tarball/v1.0.4",
        "type": "Release",
        "url": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/42915652",
        "value": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/42915652",
        "zipball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/zipball/v1.0.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mourisl",
          "type": "User"
        },
        "date_created": "2021-02-17T16:36:13Z",
        "date_published": "2021-02-17T17:19:43Z",
        "description": "- Add a column to specify whether the corresponding assembled contig is full-length\r\n- Improve the sensitivity of annotating full-length assemblies.\r\n- Fix a bug of wrongly filtering \"TRAV/DV\" genes in IMGT annotation file. (Thanks to @danich4114)\r\n- Fix other small bugs",
        "html_url": "https://github.com/liulab-dfci/TRUST4/releases/tag/v1.0.2",
        "name": "TRUST4 v1.0.2",
        "release_id": 38181552,
        "tag": "v1.0.2",
        "tarball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/tarball/v1.0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/38181552",
        "value": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/38181552",
        "zipball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/zipball/v1.0.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mourisl",
          "type": "User"
        },
        "date_created": "2020-12-04T07:36:16Z",
        "date_published": "2020-12-04T07:38:35Z",
        "description": "- Add barcode correction for 10X Genomics data\r\n- Support wildcards in -1 -2/-u options\r\n- Add the options to specify the part of the reads for assembly (can be used to trim barcode/UMI in the read)\r\n- Add a user-friendly script to process SMARTseq data with TRUST4\r\n- Fix an issue of wrong abundance calculation in _cdr3.out file introduced after v1.0.0. This affects the cid assignment in the final report file.\r\n- Dockerfile is available at https://github.com/CCBR/Dockers/tree/master/rnaseq/ccbr_trust4 and also on [DockerHub](https://hub.docker.com/r/nciccbr/ccbr_trust4) (Thanks to @skchronicles)\r\n- Fix a compilation issue on macOS",
        "html_url": "https://github.com/liulab-dfci/TRUST4/releases/tag/v1.0.2-beta",
        "name": "TRUST4 v1.0.2-beta",
        "release_id": 34809893,
        "tag": "v1.0.2-beta",
        "tarball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/tarball/v1.0.2-beta",
        "type": "Release",
        "url": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/34809893",
        "value": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/34809893",
        "zipball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/zipball/v1.0.2-beta"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mourisl",
          "type": "User"
        },
        "date_created": "2020-11-24T20:57:13Z",
        "date_published": "2020-11-24T20:59:24Z",
        "description": "- Improve the performance for paired-end 10X Genomics data",
        "html_url": "https://github.com/liulab-dfci/TRUST4/releases/tag/v1.0.1-formal",
        "name": "TRUST v1.0.1",
        "release_id": 34384277,
        "tag": "v1.0.1-formal",
        "tarball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/tarball/v1.0.1-formal",
        "type": "Release",
        "url": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/34384277",
        "value": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/34384277",
        "zipball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/zipball/v1.0.1-formal"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mourisl",
          "type": "User"
        },
        "date_created": "2020-11-22T06:04:10Z",
        "date_published": "2020-11-22T06:05:10Z",
        "description": "- Add several scripts for postprocessing\r\n   Extract full-length assemblies\r\n   Cluster clonotypes in trust_cdr3.out file\r\n   Convert TRUST4 barcode report file to 10X VDJ format\r\n- Can handle repertoire sequencing data by using \"--repseq\"\r\n- Fix several bugs, especially for data with barcodes (10X Genomics)\r\n- Fix several issues for compile",
        "html_url": "https://github.com/liulab-dfci/TRUST4/releases/tag/v1.0.1",
        "name": "TRUST4 v1.0.1-beta",
        "release_id": 34275128,
        "tag": "v1.0.1",
        "tarball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/tarball/v1.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/34275128",
        "value": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/34275128",
        "zipball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/zipball/v1.0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mourisl",
          "type": "User"
        },
        "date_created": "2020-08-18T06:12:38Z",
        "date_published": "2020-08-18T06:14:43Z",
        "description": "- The formal release of TRUST4\r\n- Change the report tsv format: (1) Use \".\" to represent missing genes for compatibility with other down-streaming analysis tool. (2) Add one column for representative the contig/consensus id (3) Only show complete CDR3s by default\r\n- Fix several bugs",
        "html_url": "https://github.com/liulab-dfci/TRUST4/releases/tag/v1.0.0",
        "name": "TRUST4 v1.0.0",
        "release_id": 29799523,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/29799523",
        "value": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/29799523",
        "zipball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mourisl",
          "type": "User"
        },
        "date_created": "2020-08-18T05:53:57Z",
        "date_published": "2020-03-11T03:46:57Z",
        "description": "- Support use raw sequence (fq/fa files) as input\r\n- Support barcode to handle single cell data, e.g. 10X Genomics\r\n- Fix several bugs",
        "html_url": "https://github.com/liulab-dfci/TRUST4/releases/tag/v0.2.0",
        "name": "TRUST4 v0.2.0_binary",
        "release_id": 24411295,
        "tag": "v0.2.0",
        "tarball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/tarball/v0.2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/24411295",
        "value": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/24411295",
        "zipball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/zipball/v0.2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mourisl",
          "type": "User"
        },
        "date_created": "2020-08-18T06:12:38Z",
        "date_published": "2019-12-16T01:08:09Z",
        "description": "- Incorporating the simple report in the main framework.\r\n- Fix other issues",
        "html_url": "https://github.com/liulab-dfci/TRUST4/releases/tag/v0.1.2",
        "name": "TRUST4 v0.1.2_binary",
        "release_id": 22242521,
        "tag": "v0.1.2",
        "tarball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/tarball/v0.1.2",
        "type": "Release",
        "url": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/22242521",
        "value": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/22242521",
        "zipball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/zipball/v0.1.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mourisl",
          "type": "User"
        },
        "date_created": "2020-08-18T05:53:57Z",
        "date_published": "2019-11-04T06:12:41Z",
        "description": "- Annotate D genes.\r\n- Change the output format for *_annot.fa and *_cdr3.out files.",
        "html_url": "https://github.com/liulab-dfci/TRUST4/releases/tag/v0.1.1",
        "name": "TRUST4 v0.1.1_binary",
        "release_id": 21181381,
        "tag": "v0.1.1",
        "tarball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/tarball/v0.1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/21181381",
        "value": "https://api.github.com/repos/liulab-dfci/TRUST4/releases/21181381",
        "zipball_url": "https://api.github.com/repos/liulab-dfci/TRUST4/zipball/v0.1.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 04:26:55",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 272
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Simple report",
        "parent_header": [
          "TRUST4",
          "Practical notes"
        ],
        "type": "Text_excerpt",
        "value": "=======\n\nDescribed in: \n\nSong, L., Cohen, D., Ouyang, Z. et al. TRUST4: immune repertoire reconstruction from bulk and single-cell RNA-seq data. Nat Methods (2021). https://doi.org/10.1038/s41592-021-01142-2\n\n\tCopyright (C) 2018-, Li Song, X. Shirley Liu\n\nIncludes portions copyright from: \n\n\tsamtools - Copyright (C) 2008-, Genome Research Ltd, Heng Li\n\t\n\n### What is TRUST4?\n\nTRUST4 is a computational tool to analyze TCR and BCR sequences using unselected RNA sequencing data, profiled from fluid and solid tissues, including tumors. TRUST4 performs de novo assembly on V, J, C genes including the hypervariable complementarity-determining region 3 (CDR3) and reports consensus contigs of BCR/TCR sequences. TRUST4 then realigns the contigs to IMGT reference gene sequences to identify the corresponding gene and CDR3 details. TRUST4 supports both single-end and paired-end bulk or single-cell sequencing data with any read length. \n\n### Install\n\n1. Clone the [GitHub repo](https://github.com/liulab-dfci/TRUST4), e.g. with `git clone https://github.com/liulab-dfci/TRUST4.git`\n2. Run `make` in the repo directory\n\nYou will find the executable files in the downloaded directory. If you want to run TRUST4 without specifying the directory, you can either add the directory of TRUST4 to the environment variable PATH or create a soft link (\"ln -s\") of the file \"run-trust4\" to a directory in PATH.\n\nTRUST4 depends on [pthreads](http://en.wikipedia.org/wiki/POSIX_Threads) and samtools depends on [zlib](http://en.wikipedia.org/wiki/Zlib). For MacOS, TRUST4 has been successfully compiled with gcc_darwin17.7.0 and gcc_9.2.0 installed by Homebrew.\n\nTRUST4 is also available form [Bioconda](https://anaconda.org/bioconda/trust4). You can install TRUST4 with `conda install -c bioconda trust4` or use the docker container `docker pull quay.io/biocontainers/trust4:<tag>` (see [trust4/tags](https://quay.io/repository/biocontainers/trust4?tab=tags) for valid values for <tag>). \n\n### Usage\n\n\tUsage: ./run-trust4 [OPTIONS]\n\t\tRequired:\n\t\t\t-b STRING: path to bam file\n\t\t\t-1 STRING -2 STRING: path to paired-end read files\n\t\t\t-u STRING: path to single-end read file\n\t\t\t-f STRING: path to the fasta file coordinate and sequence of V/D/J/C genes\n\t\tOptional:\n\t\t\t--ref STRING: path to detailed V/D/J/C gene reference file, such as from IMGT database. (default: not used). (recommended) \n\t\t\t-o STRING: prefix of output files. (default: inferred from file prefix)\n\t\t\t--od STRING: the directory for output files. (default: ./)\n\t\t\t-t INT: number of threads (default: 1)\n\t\t\t-k INT: the starting k-mer size for indexing contigs (default: 9)\n\t\t\t--barcode STRING: if -b, bam field for barcode; if -1 -2/-u, file containing barcodes (defaul: not used)\n\t\t\t--barcodeLevel STRING: barcode is for cell or molecule (default: cell)\n\t\t\t--barcodeWhitelist STRING: path to the barcode whitelist (default: not used)\n\t\t\t--barcodeTranslate STRING: path to the barcode translate file (default: not used)\n\t\t\t--UMI STRING: if -b, bam field for 10x Genomics-like UMI; if -1 -2/-u, file containing 10x Genomics-like UMIs (default: not used)\n\t\t\t--readFormat STRING: format for read, barcode and UMI files (example: r1:0:-1,r2:0:-1,bc:0:15,um:16:-1 for paired-end files with barcode and UMI)\n\t\t\t--repseq: the data is from bulk,non-UMI-based TCR-seq or BCR-seq (default: not set)\n\t\t\t--contigMinCov INT: ignore contigs that have bases covered by fewer than INT reads (default: 0)\n\t\t\t--minHitLen INT: the minimal hit length for a valid overlap (default: auto)\n\t\t\t--mateIdSuffixLen INT: the suffix length in read id for mate. (default: not used)\n\t\t\t--skipMateExtension: do not extend assemblies with mate information, useful for SMART-seq (default: not used)\n\t\t\t--abnormalUnmapFlag: the flag in BAM for the unmapped read-pair is nonconcordant (default: not set)\n\t\t\t--assembleWithRef: conduct the assembly with --ref file (default: use -f file)\\n\".\n\t\t\t--noExtraction: directly use the files from provided -1 -2/-u to assemble (default: extraction first)\n\t\t\t--outputReadAssignment: output read assignment results to the prefix_assign.out file (default: no output)\n\t\t\t--stage INT: start TRUST4 on specified stage (default: 0)\n\t\t\t\t0: start from beginning (candidate read extraction)\n\t\t\t\t1: start from assembly\n\t\t\t\t2: start from annotation\n\t\t\t\t3: start from generating the report table\n\t\t\t--clean INT: clean up files. 0: no clean. 1: clean intermediate files. 2: only keep AIRR files. (default: 0)\n\n### Input/Output\n\nThe primary input to TRUST4 is the alignment of RNA-seq reads in BAM format(-b), the file containing the genomic sequence and coordinate of V,J,C genes(-f), and the reference database sequence containing annotation information, such as IMGT (--ref).\n\nAn alternative input to TRUST4 is the raw RNA-seq files in fasta/fastq format (-1/-2 for paired; -u for single-end). You still need the files like -f, --ref from above. In this case, you can directly use IMGT's seuqence file for -f. \n\nTRUST4 outputs several files. trust_raw.out, trust_final.out are the contigs and corresponding nucleotide weight. trust_annot.fa is in fasta format for the annotation of the consensus assembly. trust_cdr3.out reports the CDR1,2,3 and gene information for each consensus assemblies. And trust_report.tsv is a report file focusing on CDR3 and is compatible with other repertoire analysis tool such as VDJTools. \n\nEach header of trust_annot.fa is split into fields:\n\n\tconsensus_id consensus_length average_coverage annotations\n\n\"annotations\" also has several field, corresponding to annotation of V,D,J,C, CDR1, CDR2 and CDR3 respectively. For the annotation of the genes, it follows the pattern \n\n\tgene_name(reference_gene_length):(consensus_start-consensus_end):(reference_start-reference_length):similarity\n\t\nEach type of genes has at most three gene candidate ranked by their similarity. For the annotation of CDRs, it follows the pattern:\n\n\tCDRx(consensus_start-consensus_end):score=sequence\n\t\nFor CDR1,2, score is similarity. for CDR3, score 0.00 means partial CDR3, score 1.00 means CDR3 with imputed nucleotides and other numbers means the motif signal strength with 100.00 as strongest. The coordinate is 0-based.\n\nThe output trust_cdr3.out is a tsv file. The fields are:\n\n\tconsensus_id\tindex_within_consensus\tV_gene\tD_gene\tJ_gene\tC_gene\tCDR1\tCDR2\tCDR3\tCDR3_score\tread_fragment_count CDR3_germline_similarity complete_vdj_assembly\n\t\nPlease note that CDR3_score in trust_cdr3.out has been divided by 100, so 1.00 is the maximum score and 0.01 means imputed CDR3.\n\nThe output trust_report.tsv is a tsv file. The fileds are:\n\t\n\tread_count\tfrequency(proportion of read_count)\tCDR3_dna\tCDR3_amino_acids\tV\tD\tJ\tC\tconsensus_id consensus_id_complete_vdj\n\nFor frequency, the BCR(IG) and TCR(TR) chains are normalized respectively. In the amino acid sequence, \"_\" represents stop codon, and \"?\" represents ambiguous nucleotide \"N\" in codon.\n\nThe output trust_airr.tsv follows [the AIRR format](https://docs.airr-community.org/en/latest/datarep/rearrangements.html). \n\n### Practical notes\n\n* #### Build custom V,J,C gene database (files for -f and --ref)\n\nNormally, the file specified by \"--ref\" is downloaded from IMGT website, For example, for human, you can use command\n\n\tperl BuildImgtAnnot.pl Homo_sapien > IMGT+C.fa\n\nThe available species name can be found on [IMGT FTP](http://www.imgt.org//download/V-QUEST/IMGT_V-QUEST_reference_directory/).\n\nIf your input data for TRUST4 is raw FASTQ files, you can use the IMGT file for the \"-f\" option. If your input data for TRUST4 is BAM files, you need to generate another file for \"-f\". To do that, you need the reference genome (e.g. hg38 for human, or mm10 for mouse) of the species you are interested in and corresponding genome annotation GTF file (e.g. gencode v35 for human, or gencode mV21 for mouse). Then you can use command \n\t\n\tperl BuildDatabaseFa.pl reference.fa annotation.gtf bcr_tcr_gene_name.txt > bcrtcr.fa\n\nto generate the input for \"-f\". The \"bcr_tcr_gene_name.txt\" is provided as \"human_vdjc.list\" in the repository.\n\nThe IMGT+C.fa can also be used to generate \"bcr_tcr_gene_name.txt\" file with command:\n\n\tgrep \">\" IMGT+C.fa | cut -f2 -d'>' | cut -f1 -d'*' | sort | uniq > bcr_tcr_gene_name.txt  \n\n* #### 10X Genomics data and barcode-based single-cell data\n\nWhen given barcode, TRUST4 only assembles the reads with the same barcode together. For 10X Genomics data, usually the input is the BAM file from cell-ranger, and you can use \"--barcode\" to specify the field in the BAM file to specify the barcode: e.g. \"--barcode CB\".\n\nIf your input is raw FASTQ files, you can use \"--barcode\" to specify the barcode file and use \"--readFormat\" to tell TRUST4 how to extract barcode information. The \"--readFormat\" option can also specify the extraction for read1, read2 and UMI. The value for this argument is a comma-separated string, each field in the string is also a semi-comma-splitted string\n\n\t[r1|r2|bc|um]:start:end:strand\n\nThe start and end are inclusive and -1 means the end of the read. You may use multiple fields to specify non-consecutive segments, e.g. bc:0:15,bc:32:-1. The strand is presented by '+' and '-' symbol, if '-' the barcode will be reverse-complemented after extraction. The strand symbol can be omitted if it is '+' and is ignored on r1 and r2. For example, when the barcode is in the first 16bp of read1, one can use the option `-1 read1.fq.gz -2 read2.fq.gz --barcode read1.fq.gz --read-format bc:0:15,r1:16:-1`.\n\nTRUST4 supports using wildcard in the -1 -2/-u option, so a typical way to run 10X Genomics single-end data is by:\n\n\trun-trust4 -f hg38_bcrtcr.fa --ref human_IMGT+C.fa -u path_to_10X_fastqs/*_R2_*.fastq.gz --barcode path_to_10X_fastqs/*_R1_*.fastq.gz --readFormat bc:0:15 --barcodeWhitelist cellranger_folder/cellranger-cs/VERSION/lib/python/cellranger/barcodes/737K-august-2016.txt [other options]\n\nThe exact options depend on your 10X Genomics ikit.\n\nBesides, TRUST4 can translate input cell barcodes to another set of barcodes. You can specify the translation file through the option --barcodeTranslate. The translation file is a two-column tsv/csv file with the translated barcode on the first column and the original barcode on the second column. This option also supports combinatorial barcoding, such as SHARE-seq. TRUST4 can translate each barcode segment provided in the second column to the ID in the first column and add \"-\" to concatenate the IDs in the output.\n\nIn the output, the abundance in the report will use the number of barcodes for the CDR3 instead of read count. TRUST4 will also generate the file trust_barcode_report.tsv. In this file, TRUST4 will pick the most abundance pair of chains as the representative for the barcode(cell). The format is:\n\n\tbarcode\tcell_type\tIGH/TRB/TRD_information\tIGK/IGL/TRA/TRG_information\tsecondary_chain1_information\tsecondary_chain2_information\n\nFor the chain information it is in CSV format:\n\t\n\tV_gene,D_gene,J_gene,C_gene,cdr3_nt,cdr3_aa,read_cnt,consensus_id,CDR3_germline_similarity,consensus_complete_vdj\n\nTRUST4 also converts the barcode report file to the trust_barcode_airr.tsv file to follow the AIRR format.\n\n* #### SMART-Seq data\n\nWe provide a wrapper \"trust-smartseq.pl\" to process the files from platforms like SMART-seq. The user shall give the path to each file in a text file. An example command can be\n\n\tperl trust-smartseq.pl -1 read1_list.txt -2 read2_list.txt -t 8 -f hg38_bctcr.fa --ref human_IMGT+C.fa -o TRUST\n\nThe script will create two files: TRUST_report.tsv for general summary and TRUST_annot.fa for assemblies. The formats are described above. Each cell's name is inferred by the file name before the first \".\".\n\n* #### UMI\n\nFor 10x Genomics data, TRUST4 supports UMI-based abundance estimation. You can use --UMI to specify the UMI sequence file or the field in the BAM file. If the sequence contains non-UMI information, you can use --readFormat with keyword \"um\" to specify the UMI sequence range. \n\nNote that in 10x Genomics data, UMI plus the cell barcode is the real unique molecular identifier. In other platforms, the UMI can be real unique and be regarded as molecule barcode. You can run trust4 with \"--barcode UMIfile --barcodeLevel molecule\" to specify UMI as molecule barcode. In this output, the represented chain information is in the chain1 column of the trust_barcode_report.tsv file.\n\n* #### Simple report\n\nThe last step of generating simple report can be done with the command:\n\n\tperl trust-simplerep.pl trust_cdr3.out > trust_report.out\n\nIf you are interested in a subset of chains, you can \"grep\" those from trust_cdr3.out and run trust-simplerep.pl on the subset.\n\n* #### Annotation only\n\nYou can use the \"annotator\" from TRUST4 to annotate the V,D,J,C genes and CDRs for any given sequences, just like using IgBLAST or IMGT/VQuest. To obtain the annotation in AIRR format for human sequences with eight threads, you can use the command\n\n\t./annotator -f human_IMGT+C.fa -a input.fa --fasta -t 8 --needReveserComplement --noImpute --outputFormat 1 > annotation.tsv \n \n### Example\n\nThe directory './example' in this distribution contains one BAM files as input for TRUST4. Run TRUST4 with:\n\n\t./run-trust4 -b example/example.bam -f hg38_bcrtcr.fa --ref human_IMGT+C.fa\n\nThe run will generate the files TRUST_example_raw.out, TRUST_example_final.out, TRUST_example_annot.fa, TRUST_example_cdr3.out, TRUST_example_report.tsv and several fq/fa files in seconds. The results should be the same as the files in the example folder. You can check whether TRUST4 is properly installed by running the command \"bash trust-example-test.sh\" in the TRUST4 folder using this example data.\n\nThe directory also contains two fastq files, and you can run TRUST4 with:\n\n\t./run-trust4 -f hg38_bcrtcr.fa --ref human_IMGT+C.fa -1 example/example_1.fq -2 example/example_2.fq -o TRUST_example\n\nNote that the requirement of the hg38_bcrtcr.fa is that it contains genomic coordinates of the V, D, J and C genes which are crucial for extracting candidate reads in alignment BAM files. The coordinate information is not needed for fastq input, so you can use the IMGT reference file for the -f option. This is useful when analyzing species without reference genomes or genome annotations. The example command can be: \n\n\t./run-trust4 -f human_IMGT+C.fa --ref human_IMGT+C.fa -1 example/example_1.fq -2 example/example_2.fq -o TRUST_example\n\nThe run will generate the same files as from BAM input \n\n### Miscellaneous\n\nThe evaluation instructions and scripts in TRUST4's manuscript is available at: https://github.com/liulab-dfci/TRUST4_manuscript_evaluation .\n\n### Terms of use\n\nThis program is free software; you can redistribute it and/or modify it\nunder the terms of the GNU General Public License as published by the\nFree Software Foundation; either version 3 of the License, or (at your\noption) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received (LICENSE.txt) a copy of the GNU General\nPublic License along with this program; if not, you can obtain one from\nhttp://www.gnu.org/licenses/gpl.txt or by writing to the Free Software\nFoundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n \n### Support\n\nCreate a [GitHub issue](https://github.com/liulab-dfci/TRUST4/issues). We will typically respond within a day or two, but it could take longer, e.g. a month, for fixing bugs and adding features.\n"
      },
      "source": "https://raw.githubusercontent.com/liulab-dfci/TRUST4/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Support",
        "parent_header": [
          "TRUST4"
        ],
        "type": "Text_excerpt",
        "value": "Create a [GitHub issue](https://github.com/liulab-dfci/TRUST4/issues). We will typically respond within a day or two, but it could take longer, e.g. a month, for fixing bugs and adding features.\n"
      },
      "source": "https://raw.githubusercontent.com/liulab-dfci/TRUST4/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "TRUST4"
        ],
        "type": "Text_excerpt",
        "value": "\tUsage: ./run-trust4 [OPTIONS]\n\t\tRequired:\n\t\t\t-b STRING: path to bam file\n\t\t\t-1 STRING -2 STRING: path to paired-end read files\n\t\t\t-u STRING: path to single-end read file\n\t\t\t-f STRING: path to the fasta file coordinate and sequence of V/D/J/C genes\n\t\tOptional:\n\t\t\t--ref STRING: path to detailed V/D/J/C gene reference file, such as from IMGT database. (default: not used). (recommended) \n\t\t\t-o STRING: prefix of output files. (default: inferred from file prefix)\n\t\t\t--od STRING: the directory for output files. (default: ./)\n\t\t\t-t INT: number of threads (default: 1)\n\t\t\t-k INT: the starting k-mer size for indexing contigs (default: 9)\n\t\t\t--barcode STRING: if -b, bam field for barcode; if -1 -2/-u, file containing barcodes (defaul: not used)\n\t\t\t--barcodeLevel STRING: barcode is for cell or molecule (default: cell)\n\t\t\t--barcodeWhitelist STRING: path to the barcode whitelist (default: not used)\n\t\t\t--barcodeTranslate STRING: path to the barcode translate file (default: not used)\n\t\t\t--UMI STRING: if -b, bam field for 10x Genomics-like UMI; if -1 -2/-u, file containing 10x Genomics-like UMIs (default: not used)\n\t\t\t--readFormat STRING: format for read, barcode and UMI files (example: r1:0:-1,r2:0:-1,bc:0:15,um:16:-1 for paired-end files with barcode and UMI)\n\t\t\t--repseq: the data is from bulk,non-UMI-based TCR-seq or BCR-seq (default: not set)\n\t\t\t--contigMinCov INT: ignore contigs that have bases covered by fewer than INT reads (default: 0)\n\t\t\t--minHitLen INT: the minimal hit length for a valid overlap (default: auto)\n\t\t\t--mateIdSuffixLen INT: the suffix length in read id for mate. (default: not used)\n\t\t\t--skipMateExtension: do not extend assemblies with mate information, useful for SMART-seq (default: not used)\n\t\t\t--abnormalUnmapFlag: the flag in BAM for the unmapped read-pair is nonconcordant (default: not set)\n\t\t\t--assembleWithRef: conduct the assembly with --ref file (default: use -f file)\\n\".\n\t\t\t--noExtraction: directly use the files from provided -1 -2/-u to assemble (default: extraction first)\n\t\t\t--outputReadAssignment: output read assignment results to the prefix_assign.out file (default: no output)\n\t\t\t--stage INT: start TRUST4 on specified stage (default: 0)\n\t\t\t\t0: start from beginning (candidate read extraction)\n\t\t\t\t1: start from assembly\n\t\t\t\t2: start from annotation\n\t\t\t\t3: start from generating the report table\n\t\t\t--clean INT: clean up files. 0: no clean. 1: clean intermediate files. 2: only keep AIRR files. (default: 0)\n"
      },
      "source": "https://raw.githubusercontent.com/liulab-dfci/TRUST4/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example",
        "parent_header": [
          "TRUST4"
        ],
        "type": "Text_excerpt",
        "value": "The directory './example' in this distribution contains one BAM files as input for TRUST4. Run TRUST4 with:\n\n\t./run-trust4 -b example/example.bam -f hg38_bcrtcr.fa --ref human_IMGT+C.fa\n\nThe run will generate the files TRUST_example_raw.out, TRUST_example_final.out, TRUST_example_annot.fa, TRUST_example_cdr3.out, TRUST_example_report.tsv and several fq/fa files in seconds. The results should be the same as the files in the example folder. You can check whether TRUST4 is properly installed by running the command \"bash trust-example-test.sh\" in the TRUST4 folder using this example data.\n\nThe directory also contains two fastq files, and you can run TRUST4 with:\n\n\t./run-trust4 -f hg38_bcrtcr.fa --ref human_IMGT+C.fa -1 example/example_1.fq -2 example/example_2.fq -o TRUST_example\n\nNote that the requirement of the hg38_bcrtcr.fa is that it contains genomic coordinates of the V, D, J and C genes which are crucial for extracting candidate reads in alignment BAM files. The coordinate information is not needed for fastq input, so you can use the IMGT reference file for the -f option. This is useful when analyzing species without reference genomes or genome annotations. The example command can be: \n\n\t./run-trust4 -f human_IMGT+C.fa --ref human_IMGT+C.fa -1 example/example_1.fq -2 example/example_2.fq -o TRUST_example\n\nThe run will generate the same files as from BAM input \n"
      },
      "source": "https://raw.githubusercontent.com/liulab-dfci/TRUST4/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Terms of use",
        "parent_header": [
          "TRUST4"
        ],
        "type": "Text_excerpt",
        "value": "This program is free software; you can redistribute it and/or modify it\nunder the terms of the GNU General Public License as published by the\nFree Software Foundation; either version 3 of the License, or (at your\noption) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received (LICENSE.txt) a copy of the GNU General\nPublic License along with this program; if not, you can obtain one from\nhttp://www.gnu.org/licenses/gpl.txt or by writing to the Free Software\nFoundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n "
      },
      "source": "https://raw.githubusercontent.com/liulab-dfci/TRUST4/master/README.md",
      "technique": "header_analysis"
    }
  ]
}