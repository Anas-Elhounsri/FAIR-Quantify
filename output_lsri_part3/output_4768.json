{
  "application_domain": [
    {
      "confidence": 34.13,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How to cite",
        "parent_header": [
          "IMAP"
        ],
        "type": "Text_excerpt",
        "value": "Song G, Lee J, Kim J, Kang S, Lee H, Kwon D, Lee D, Lang GI, Cherry JM, Kim J. Integrative Meta-Assembly Pipeline (IMAP): Chromosome-level genome assembler combining multiple de novo assemblies. PLoS One. 2019 Aug 27;14(8):e0221858. doi: 10.1371/journal.pone.0221858.\n\n"
      },
      "source": "https://raw.githubusercontent.com/jkimlab/IMAP/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jkimlab/IMAP"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact",
        "parent_header": [
          "IMAP"
        ],
        "type": "Text_excerpt",
        "value": "bioinfolabkr@gmail.com\n"
      },
      "source": "https://raw.githubusercontent.com/jkimlab/IMAP/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-03-13T01:42:37Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-12-07T12:39:14Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jkimlab/IMAP/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jkimlab/IMAP/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "jkimlab/IMAP"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "IMAP"
      },
      "source": "https://raw.githubusercontent.com/jkimlab/IMAP/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jkimlab/IMAP/master/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/jkimlab/IMAP/master/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jkimlab/IMAP/master/scripts/error_correction.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing IMAP from source codes",
        "parent_header": [
          "IMAP"
        ],
        "type": "Text_excerpt",
        "value": "To install IMAP,\n \n    1. Download source\n      git clone https://github.com/jkimlab/IMAP.git\n    \n    2. Check & install the required perl libraries\n      - Check the required perl libraries\n        ./build.pl --check\n    \n      - Install the required perl libraries\n    \n    3. Install IMAP package\n        ./build.pl --install\n        \nTo uninstall IMAP,\n\n        ./build.pl --uninstall\n"
      },
      "source": "https://raw.githubusercontent.com/jkimlab/IMAP/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing IMAP using docker",
        "parent_header": [
          "IMAP"
        ],
        "type": "Text_excerpt",
        "value": "To install IMAP,\n\n    1. Install docker (https://docs.docker.com/install/linux/docker-ce/ubuntu)\n        curl -fsSL https://get.docker.com/ | sudo sh\n        sudo usermod -aG docker $USER \t# adding user to the \u201cdocker\u201d group\n    \n    2. Download source\n      git clone https://github.com/jkimlab/IMAP.git\n      \n    3. Build image using Dockerfile \n      - Change to the directory where Dockerfile is located.\n        docker build -t [image_name] .\n  \n    4. Run by docker\n      - Run image and create container\n        docker run -it [image_name] /bin/bash\n"
      },
      "source": "https://raw.githubusercontent.com/jkimlab/IMAP/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1.0,
      "result": {
        "original_header": "Included third party tools",
        "type": "Text_excerpt",
        "value": "* BWA (http://bio-bwa.sourceforge.net/)\n* LASTZ (http://www.bx.psu.edu/~rsharris/lastz/)\n* MaSuRCA (http://www.genome.umd.edu/masurca.html)\n* SPAdes (http://bioinf.spbau.ru/spades)\n* SOAPdenovo2 (https://github.com/aquaskyline/SOAPdenovo2)\n* GapCloser (http://soap.genomics.org.cn/soapdenovo.html)\n* RACA (https://github.com/ma-compbio/RACA)\n* DESCHRAMBLER (https://github.com/jkimlab/DESCHRAMBLER)\n* Pilon (https://github.com/broadinstitute/pilon)\n* GATK (https://software.broadinstitute.org/gatk/)\n* Picard (https://github.com/broadinstitute/picard)\n* SAMtools (http://samtools.sourceforge.net/)\n* Kent utilities (http://hgdownload.soe.ucsc.edu/admin/exe/linux.x86_64/) \n"
      },
      "source": "https://raw.githubusercontent.com/jkimlab/IMAP/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jkimlab/IMAP/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "IMAP"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "jkimlab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 62250,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 12196,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 9268,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 1030,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "q",
        "size": 82,
        "type": "Programming_language",
        "value": "q"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jkimlab/IMAP/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "System requirements (Tested versions)",
        "parent_header": [
          "IMAP"
        ],
        "type": "Text_excerpt",
        "value": "* Linux x64 (Tested in CentOS 7.5, Ubuntu 16.04 and Ubuntu 18.04)\n* Perl >= 5.22 or higher\n* Python (Python2: 2.4\u20132.7, and Python3: 3.2 and higher)\n* JAVA (build 1.8)\n* Perl modules\n  - Switch\n  - Parallel::ForkManager\n  - Bio::TreeIO\n  - YAML\n  - ExtUtils::PkgConfig\n  - GD\n  - XML::Parser\n  - XML::Parser::PerlSAX\n  - XML::DOM\n  - XML::DOM::XPath\n  - XML::Twig\n* GCC (version 4.8)\n* BOOST (version 1.46.0)\n* libgd (version 2.1.1)\n* zlib (version 1.2.8)\n* libbz2 (version 1.0.6)\n* libncurses (version 6.0)\n"
      },
      "source": "https://raw.githubusercontent.com/jkimlab/IMAP/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running IMAP with example dataset",
        "parent_header": [
          "IMAP"
        ],
        "type": "Text_excerpt",
        "value": "* Required approximately 60GB empty disk space"
      },
      "source": "https://raw.githubusercontent.com/jkimlab/IMAP/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running IMAP",
        "parent_header": [
          "IMAP"
        ],
        "type": "Text_excerpt",
        "value": "* Required approximately 60GB empty disk space\n       \n       ./build.pl --example\n        cd IMAP_EX\n        bash CMD\n\nRunning IMAP\n-------------------\nTo run IMAP, you need to prepare a parameter file. \n\n* parameter file\n\n    You can use multiple sequencing read libraries, and one or more outgroup species.  \n        \n       ############################################################\n       ## Sequencing read library information\n       ############################################################\n       ### Average insert sizes\n       ### Standard deviation of insert sizes\n       ### Path of read files (.fq(.gz))\n       ##### [Paired-end reads] p1, p2\n       ##### [Mate-pair reads] m1, m2\n       [LIB]\n       insertSize\t[(integer) insert size]\n       insertSizeSD\t[(integer) SD of insert size]\n       p1\tpath of forward read          (ex. [path]/read1.1.fq)\n       p2\tpath of reverse read          (ex. [path]/read1.2.fq)\n       p1\tpath of forward read          (ex. [path]/read2.1.fq)\n       p2\tpath of reverse read          (ex. [path]/read2.2.fq)\n\n       [LIB]\n       insertSize\t[(integer) insert size]\n       insertSizeSD\t[(integer) SD of insert size]\n       m1\tpath of forward read          (ex. [path]/read3.1.fq.gz)\n       m2\tpath of reverse read          (ex. [path]/read3.2.fq.gz)\n\n       ############################################################\n       ## General assembly parameters\n       ############################################################\n       ## Minimum length of contigs\n       MinContigLength\t[(integer) minimum length of contigs]\n       ## Kmer size for de novo assembly\n       Kmer\t[(integer) kmer]\n       ### Maximum read length for SOAPdenovo2\n       MaxReadLength\t[(integer) maximum read length]\n\n       ############################################################\n       ## RACA & DESCHRAMBLER parameters\n       ############################################################\n       ## You can use the outrgroup more than one, but the names must be different.\n       Reference\t[(string) name]\t[path of sequence file (.fa)]          (ex. S288C  [path]/S288C.fa)\n       Outgroup\t[(string) name]\t[path of sequence file (.fa)]          (ex. dairenensis [path]/Saccharomyces_dairenensis.fa)\n       ### Tree must contain the names of a reference, target(s) and outgroup(s) (newick format)\n       TREE\t[path of tree (must be in newick format)]          (ex. [path]/tree.nwk)\n       ### Synteny resolution\n       Resolution\t[(integer) synteny resolution]\n\n       ############################################################\n       ## Error correction parameters \n       ############################################################\n       IterationNumber\t[(integer) the number of iteration]\n\n\nThen, you can use the 'IMAP' perl script.\n\n    Usage:  ./IMAP.pl -t [threads] -p [parameter file] -o [out directory]\n\n    Options:\n        --threads|-t <integer> Number of threads (default: 1)\n        --params|-p <filename> Parameter file\n        --outdir|-o <filename> Output directory (default: ./IMAP_RESULT)\n        --help|-h Print usages\n        \n    Simple examples:\n        ./IMAP.pl -t 40 -p param.txt -o ./IMAP_RESULT\n         "
      },
      "source": "https://raw.githubusercontent.com/jkimlab/IMAP/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "description",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 17:37:26",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running IMAP with example dataset",
        "parent_header": [
          "IMAP"
        ],
        "type": "Text_excerpt",
        "value": "* Required approximately 60GB empty disk space"
      },
      "source": "https://raw.githubusercontent.com/jkimlab/IMAP/master/README.md",
      "technique": "header_analysis"
    }
  ]
}