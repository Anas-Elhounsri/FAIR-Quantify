{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citing LABRAT",
        "parent_header": [
          "LABRAT <br/> <br/>Lightweight Alignment-Based Reckoning of Alternative Three-prime ends"
        ],
        "type": "Text_excerpt",
        "value": "If you find LABRAT useful for your work, please cite the following publication: [https://bmcgenomics.biomedcentral.com/articles/10.1186/s12864-021-07781-1](https://bmcgenomics.biomedcentral.com/articles/10.1186/s12864-021-07781-1).\n\n"
      },
      "source": "https://raw.githubusercontent.com/TaliaferroLab/LABRAT/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/TaliaferroLab/LABRAT"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-02-07T21:22:08Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-23T14:42:56Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Lightweight Alignment Based Resolution of Alternative Three Prime Ends"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9535966214987361,
      "result": {
        "original_header": "Overview",
        "type": "Text_excerpt",
        "value": "LABRAT is designed to quantify the usage of alternative polyadenylation and cleavage sites in RNAseq data and identify genes whose usage of these sites varies across experimental conditions. <br/> \nIt takes advantage of the kmer-based, quasi-mapping of reads to transcripts performed by [salmon](https://combine-lab.github.io/salmon/). When it comes to quantifying the usage of alternative 3' UTRs, this strategy has many advantages over classical methods that count the number of counts contained within transcript regions after alignment to the transcriptome. Since alternative 3' UTRs often contain large amounts of sequence in common between them, many reads will map to multiple 3' UTRs, reducing the discriminatory power they contain when align-then-count methods are used.  Transcript abundance quantification with salmon's \"lightweight alignments\" circumvents this issue to allow accurate quantification of alternative 3' ends. \nLABRAT quantifies alternative polyadenylation (APA) site usage by assigning a \"psi\" (\ud835\udf13) value (apologies to the alternative splicing field) for each gene in each sample. Psi values of 0 indicate exclusive usage of the most upstream APA site while \ud835\udf13 values of 1 indicate exclusive usage of the most downstream APA site.  When comparing \ud835\udf13 values across conditions, an increase in \ud835\udf13 reflects increased usage of downstream APA sites while a decrease in \ud835\udf13 reflects increased usage of upstream APA sites.  LABRAT uses \ud835\udf13 values in experimental replicates to identify genes whose APA site usage significantly differs between experimental conditions. \nA paper describing the use of LABRAT to look at APA in a variety of contexts can be found [here](https://link.springer.com/article/10.1186/s12864-021-07781-1). Additionally a more protocol-based paper with step-by-step instructions on how to use LABRAT for studying APA in bulk and single cell RNAseq experiments can be found [here](https://www.sciencedirect.com/science/article/pii/S0076687921001312).\n \n"
      },
      "source": "https://raw.githubusercontent.com/TaliaferroLab/LABRAT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9577512230225577,
      "result": {
        "original_header": "Annotations",
        "type": "Text_excerpt",
        "value": "LABRAT requires a genome annotation in gff3 format. We **strongly** recommend using [Gencode](www.gencodegenes.org) annotations. LABRAT is expecting certain tags and attributes to be associated with transcripts in the GFF (e.g. 'protein_coding', etc.) that are not reliably present in GFFs from other sources. Unfortunately, Gencode annotations are only available for human and mouse genomes. \nFor *Drosophila* annoatations, a separate LABRAT, LABRAT_dm6annotation.py, is provided. This version will accept GFF files from [Ensembl](ftp://ftp.ensembl.org/pub/release-99/gff3/drosophila_melanogaster/). It *should* also work with Ensembl GFF files for other species, but this has not been rigorously tested. \nWhen given to LABRAT, these gff annotation files must **not** be compressed.\n \n"
      },
      "source": "https://raw.githubusercontent.com/TaliaferroLab/LABRAT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9897884448131234,
      "result": {
        "original_header": "Library types",
        "type": "Text_excerpt",
        "value": "LABRAT accepts high-throughput RNA sequencing data of two types: RNAseq and 3 prime end sequencing. 3 prime end sequencing is very informative for the study of alternative polyadenylation since the majority of reads are relatively easily assignable to the usage of one particular polyadenylation site. This may lead to more accurate quantification of polyadenylation site usage. However, the majority of publicly available data is of the RNAseq variety. \nLABRAT uses a parameter `--librarytype` parameter to distinguish between these two possibilities. The possible values for this parameter are `RNAseq` and `3pseq`. If the value is `RNAseq`, the last two exons of every valid transcript are quantified, and the quantifications used for further calculation of \ud835\udf13 are the length-normalized TPM values. Gene-level expression thresholds are set at 5 TPM. \nIf the value is `3pseq`, then only the last 300 nt of each transcript are quantified (this is due to the average insert length of many 3' end libraries being 150-300 nt), and the quantifications used for further calculation of \ud835\udf13 are read count values (since length normalization of 3' end data is not necessary or wanted). Gene-level expression thresholds are set at 100 counts.\n \n"
      },
      "source": "https://raw.githubusercontent.com/TaliaferroLab/LABRAT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9066123570327113,
      "result": {
        "original_header": "Expected output files",
        "type": "Text_excerpt",
        "value": "The main output file is named '**LABRAT.psis.pval**'. It contains the \ud835\udf13 value for every gene in every condition.  Genes that did not meet an expression cutoff (TPM < 5) in a condition have \ud835\udf13 values of NA.  This file also contains delta \ud835\udf13 values (ConditionB - ConditionA), a raw pvalue, and a Benjamini-Hochberg corrected pvalue (FDR). \nAdditionally, this file contains a column called 'genetype'. This contains information about whether the alternative polyadenylation sites in this gene are contained within the same exon (TUTR) or within different exons (ALE). If there are only 2 APA sites for this gene, the gene must be labeled as either TUTR or ALE.  If there are more than 2, if *all* sites are contained within either the same exon, the gene is labeled TUTR.  If *all* sites are contained within different exons, it is labeled ALE. If neither of these is true, the gene is labeled 'mixed'. \nA secondary output file is name **'numberofposfactors.txt'**.  This file contains information about the transcripts that were assigned to each APA site. The column 'numberofposfactors' indicates the number of distinct (separated by at least 25 nt) APA sites found for this gene. The column 'txids' has the IDs of the transcripts assigned to each APA site.  APA sites are separated by underscores and transcripts assigned to the same site are separated by commas. In this column, APA sites are ordered from most upstream to most downstream.  The final column contains the distance between the APA sites, but only if the gene contains just 2 sites.\n \n"
      },
      "source": "https://raw.githubusercontent.com/TaliaferroLab/LABRAT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9450967104055306,
      "result": {
        "original_header": "Runtime",
        "type": "Text_excerpt",
        "value": "If LABRAT is encountering a gff genome annotation file for the first time, it indexes this file using [gffutils](https://github.com/daler/gffutils/). This process can take a few hours, depending on the size of the annotation. However, it only needs to be completed once.  All future runs will automatically make use of a database file written after the indexing completes. Importantly, if indexing is interrupted, this file will still be written, and LABRAT will attempt to use this truncated file in the next run. This will cause problems. To prevent this, if indexing is interrupted, be sure to delete the resulting database file. It can be found at the location of the gff annotation, and ends with '.db'  \nTo test the runtime requirement of LABRAT, we focused on a dataset that considered two conditions with two replicates per condition. Each sample contained approximately 25 million paired end reads. Using a modern Intel Mac laptop running OSX 10.15 with 12 cores, LABRAT analysis of this data took approximately 25 minutes.  This does not include the time taken to index the genome annotation as described above.\n \n"
      },
      "source": "https://raw.githubusercontent.com/TaliaferroLab/LABRAT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9921766627697678,
      "result": {
        "original_header": "Using LABRAT with single cell RNAseq data",
        "type": "Text_excerpt",
        "value": "LABRAT uses [salmon](https://github.com/COMBINE-lab/salmon/releases) to quantify APA from RNAseq data.  LABRATsc uses an analogous tool, [alevin](https://genomebiology.biomedcentral.com/articles/10.1186/s13059-019-1670-y), for quantification of APA from single cell RNAseq data. An example of the use of LABRATsc can be found in section 4 of [this paper](https://www.sciencedirect.com/science/article/pii/S0076687921001312). \n\nLABRATsc compares \ud835\udf13 values between **predefined** groups or clusters of cells. These clusters can be defined using standard approaches such as tSNE or UMAP.  Importantly, quantification with alevin and designation of clusters is not performed by LABRATsc and must be done beforehand.  Following quantification with alevin, transcripts are filtered to keep only those with confidently defined 3' ends exactly as they are in LABRAT-based quantification. Analysis then proceeds upon one of two paths defined by the `--mode` parameter. \nIf the `--mode` parameter is set to `cellbycell`, then a \ud835\udf13 value is calculated for every (applicable) gene in every cell. In practice, the coverage for most genes in most cells is low or nonexistant. Genes that do not pass a read coverage threshold (indicated by the `--readcount` parameter) have \ud835\udf13 values of NA in that cell. For each gene, \ud835\udf13 values are then compared across cell clusters using the \ud835\udf13 value of individual cells as independent observations. \nAlternatively, if the `--mode` parameter is set to `subsampleClusters`, then read counts for each transcript are first summed across all the cells within a cluster. This has the advantage of raising the number of reads associated with each gene, but single cell resolution is lost. Tests to identify genes with regulated APA across cell clusters are performed by creating a distribution of \ud835\udf13 alues for each gene in each cluster through bootstrapping resampling.\n \n"
      },
      "source": "https://raw.githubusercontent.com/TaliaferroLab/LABRAT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9390438389035671,
      "result": {
        "original_header": "Important considerations for LABRATsc",
        "type": "Text_excerpt",
        "value": "First, low read depth and dropouts limit the reliable detection and quantification of APA in single cell data. These limiations make the selection of appropriate minimum read thresholds (using the `--readcountfilter` argument) critical. We suggest thresholds of at least 100 counts per gene for cluster-level \ud835\udf13 quantification (`--mode subsampleClusters`) and at least 5 counts per cell for cell-level \ud835\udf13 quantification (`--mode cellbycell`) as starting points, but these thresholds (particularly in the `cellbycell` case) vary considerably between experiments due to a range of technical and biological factors. \nSecond, while scRNAseq libraries generally capture the 3' ends of mRNAs, they also contain reads that arise due to internal priming on genomically encoded A-rich regions. If these internal priming events occur in close proximity to bonafide polyA sites, they may skew raw \ud835\udf13 values substantially. However, while this may impact the accuracy of raw \ud835\udf13 values for some genes, the relative \ud835\udf13 values between cells should be less affected as the rate of internal priming should be largely consistent across cells.\n \n"
      },
      "source": "https://raw.githubusercontent.com/TaliaferroLab/LABRAT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9736567260395599,
      "result": {
        "original_header": "Generating input matrices for LABRATsc using alevin",
        "type": "Text_excerpt",
        "value": "The following arguments must be passed to **alevin** for use with LABRATsc, ideally in this order: </br> \n- `-l`: Library type. For most single-cell libraries, this will be \"ISR\".\n- `-1`: A list of files containing the forward sequencing reads.\n- `-2`: A list of files containing the reverse sequencing reads in the same order as `-1`.\n- `--dropseq --chromium --chromiumV3`: One of these depending on the sequencing platform used.\n- `-i`: A salmon index, generated with LABRAT using the `--librarytype 3pseq` argument (see above).\n- `-p`: Number of threads to be used by alevin.\n- `-o`: Output path for each count matrix and metadata\n- `--tgMap`: A transcript-to-gene map file, which consists of each transcript ID in the salmon index listed twice per line, separated by tab\n- `--fldMean 250`: Expected mean fragment length (250 for consistency with LABRAT's execution of salmon).\n- `--fldSD 20`: Expected standard deviation of fragment length (20 for consistency with LABRAT's execution of salmon).\n- `--validateMappings`: Enables selective alignment of reads\n- `--whitelist`: A whitelist of cell barcodes from a previous analysis to restrict quantification to previous identified valid barcodes (Optional)\n \n"
      },
      "source": "https://raw.githubusercontent.com/TaliaferroLab/LABRAT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9829854840497895,
      "result": {
        "original_header": "Calculating \ud835\udf13 values with LABRATsc",
        "type": "Text_excerpt",
        "value": "Transcript counts from one or more single-cell libraries are used to calculate \ud835\udf13 values for every gene with at least two APA sites. As with LABRAT, gene-level \ud835\udf13 values are then compared across conditions to identify genes with significant \ud835\udf13 value changes. As described above, LABRATsc provides two diferent approaches for \ud835\udf13 calculation and testing: per-cell or using subsampling within clusters. The relevant options for quantification of \ud835\udf13 values with LABRATsc are as follows: </br> \n- `--mode`: `cellbycell` or `subsampleClusters`, as described above\n- `--gff`: path to the gff annotation to be used. It should be the same annotation used to generate the salmon index provided to alevin.\n- `--alevindir`: A directory containing alevin quantification subdirectories with one for each sample. The names of these subdirectories will be appended to the cell names in each sample matrix to form a \"sample_barcode\" cell ID for each cell. An example `alevindir` can be found [here](https://github.com/TaliaferroLab/LABRAT/tree/singlecell/testdata/alevin_example/alevin_out).\n- `--conditions`: A tab delimited text file with column names \"sample\" and \"condition\". The first column contains cell IDs and the second column contains cell condition or cluster. The cell IDs in the sample column must follow the \"sample_barcode\" structure described above. Note that unlike LABRAT, LABRATsc does not currently support covariates.  An example `conditions` file can be found [here](https://github.com/TaliaferroLab/LABRAT/blob/singlecell/testdata/alevin_example/conditions.tsv).\n- `--readcountfilter`: Minimum read count necessary for calculation of \ud835\udf13 values. Genes that do not pass this threshold will have \ud835\udf13 values of NA. If in `cellbycell` mode, this is the number of reads mapping to a gene in that single cell. If in `subsampleClusters` mode, this is the summed numer of reads mapping to a gene across all cells in a predefined cluster.\n- `--conditionA` and `--conditionB`: In order to define a difference in \ud835\udf13 across conditions, the direction of comparison must be defined. Delta \ud835\udf13 for each gene is defined as the mean \ud835\udf13 value in condition B minus the mean \ud835\udf13 value in condition A. Both `conditionA` and `conditionB` must be found in the condition column of the `conditions` file.\n \n"
      },
      "source": "https://raw.githubusercontent.com/TaliaferroLab/LABRAT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8945285717465371,
      "result": {
        "original_header": "Expected output of LABRATsc",
        "type": "Text_excerpt",
        "value": "Following quantification, \ud835\udf13 values for all genes in all conditions as well as raw and Benjamini-Hochberg corrected p-values are reported in files named \"results.subsampleclusters.txt\" (`subsampleClusters` mode) or \"results.cellbycell.txt\" (`cellbycell` mode). Differences in mean \ud835\udf13 values across conditions are also reported. In `cellbycell` mode, the results file additionally includes the number of cells in each condition passing read depth filters for each gene. Finally, per-cell psi values are reported for each gene when run in `cellbycell` mode in a file called \"psis.cellbycell.txt.gz\". These results can be sued to annotate existing single cell analyses.\n \n"
      },
      "source": "https://raw.githubusercontent.com/TaliaferroLab/LABRAT/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/TaliaferroLab/LABRAT/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/TaliaferroLab/LABRAT/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "TaliaferroLab/LABRAT"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "LABRAT  Lightweight Alignment-Based Reckoning of Alternative Three-prime ends"
      },
      "source": "https://raw.githubusercontent.com/TaliaferroLab/LABRAT/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://images.squarespace-cdn.com/content/v1/591d9c8cbebafbf01b1e28f9/1588470361245-PJCCCJTEQ8JXCSIM173R/ke17ZwdGBToddI8pDm48kGcCOoVw7tMeq96q09YNvTBZw-zPPgdn4jUwVcJE1ZvWQUxwkmyExglNqGp0IvTJZamWLI2zvYWH8K3-s_4yszcp2ryTI0HqTOaaUohrI8PIveFD_g_aea0KYeAi1GiEsiYHubgbp9p27L_1ORGVwOoKMshLAGzx4R3EDFOm1kBS/image%2B%252811%2529.jpg?format=2500w"
      },
      "source": "https://raw.githubusercontent.com/TaliaferroLab/LABRAT/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Option 1: conda",
        "parent_header": [
          "LABRAT <br/> <br/>Lightweight Alignment-Based Reckoning of Alternative Three-prime ends",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "The *easiest* and *best* way to install LABRAT is using the [conda](https://docs.conda.io/projects/conda/en/latest/index.html) package manager. LABRAT is available on the [bioconda](https://bioconda.github.io/) channel.\n\n```\nconda install -c bioconda labrat\n```\n"
      },
      "source": "https://raw.githubusercontent.com/TaliaferroLab/LABRAT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Option 2: manual installation",
        "parent_header": [
          "LABRAT <br/> <br/>Lightweight Alignment-Based Reckoning of Alternative Three-prime ends",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Alternatively, you can download LABRAT directly from this repository. LABRAT is purely python-based (python3), but requires a number of non-standard python modules.  These are most easily installed with [conda](https://docs.conda.io/projects/conda/en/latest/index.html). They are listed below. Versions of each module that are known to be supported are listed, but other versions may work as well.\n\n- python 3.6\n- gffutils 0.9\n- numpy 1.18.1\n- biopython 1.69\n- pandas 1.0.3\n- statsmodels 0.10.2\n- scipy 1.3.1\n- salmon 0.14 (not a python module, but installable using conda)\n\nA safe and easy way to install all of these would be to create a conda environment containing them. We have provided a configuration file that contains all the information needed to setup a LABRAT-ready environment.\n\n*Note:* The most recent version of [salmon](https://github.com/COMBINE-lab/salmon/releases) has changed the way that transcriptome indexes are made. LABRAT does not currently support these versions (salmon >= 1.0.0), but will in the future.\n\n```\nconda env create -f labratenv.yml\n```\n\nThis will create a conda environment called 'labrat' that contains all the necessary modules.  To activate the environment, type\n\n```\nsource activate labrat\n```\n\nUncompress the repository and move into the uncompressed directory. Install LABRAT by typing \n\n```\npython setup.py install\n```\n\nThen, to make sure you are ready to go, ask for the help options in the LABRAT script by typing\n\n```\nLABRAT.py -h\n```\n\nIf you see something similar to\n\n```\nusage: LABRAT.py [-h] [--mode {makeTFfasta,runSalmon,calculatepsi}]\n                 [--gff GFF] [--genomefasta GENOMEFASTA] [--lasttwoexons]\n                 [--txfasta TXFASTA] [--reads1 READS1] [--reads2 READS2]\n                 [--samplename SAMPLENAME] [--threads THREADS]\n                 [--salmondir SALMONDIR] [--sampconds SAMPCONDS]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --mode {makeTFfasta,runSalmon,calculatepsi}\n  --gff GFF             GFF of transcript annotation. Needed for makeTFfasta\n                        and calculatepsi.\n```\n\nthen you are good to go.  If you get an **ImportError**, one or more of the modules did not install correctly.  In that case, using an alternative package manager like **pip** may help get all these modules installed.\n"
      },
      "source": "https://raw.githubusercontent.com/TaliaferroLab/LABRAT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9085963489121296,
      "result": {
        "original_header": "Annotations",
        "type": "Text_excerpt",
        "value": "LABRAT requires a genome annotation in gff3 format. We **strongly** recommend using [Gencode](www.gencodegenes.org) annotations. LABRAT is expecting certain tags and attributes to be associated with transcripts in the GFF (e.g. 'protein_coding', etc.) that are not reliably present in GFFs from other sources. Unfortunately, Gencode annotations are only available for human and mouse genomes. \nFor *Drosophila* annoatations, a separate LABRAT, LABRAT_dm6annotation.py, is provided. This version will accept GFF files from [Ensembl](ftp://ftp.ensembl.org/pub/release-99/gff3/drosophila_melanogaster/). It *should* also work with Ensembl GFF files for other species, but this has not been rigorously tested. \nWhen given to LABRAT, these gff annotation files must **not** be compressed.\n \n"
      },
      "source": "https://raw.githubusercontent.com/TaliaferroLab/LABRAT/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9574506672341992,
      "result": {
        "original_header": "Generating input matrices for LABRATsc using alevin",
        "type": "Text_excerpt",
        "value": "The following arguments must be passed to **alevin** for use with LABRATsc, ideally in this order: </br> \n"
      },
      "source": "https://raw.githubusercontent.com/TaliaferroLab/LABRAT/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/TaliaferroLab/LABRAT/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021 Taliaferro lab\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/TaliaferroLab/LABRAT/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "LABRAT"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "TaliaferroLab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 535047,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/TaliaferroLab/LABRAT/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://salmon.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/TaliaferroLab/LABRAT/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "taliaferrojm",
          "type": "User"
        },
        "date_created": "2021-08-13T15:29:07Z",
        "date_published": "2021-08-13T15:34:34Z",
        "description": "In this version, we introduce LABRATsc, a tool for quantifying APA from single cell RNAseq data. LABRATsc relies on [alevin](https://salmon.readthedocs.io/en/latest/alevin.html) just as LABRAT relies on [salmon](https://combine-lab.github.io/salmon/).  \r\n\r\nLABRATsc quantifies differences in APA across predefined populations or clusters of cells.  Similar to LABRAT, it calculates gene level psi values as a measure of relative APA site use.  It then compares those psi values across predefined clusters of cells and identifies genes whose APA status changes across clusters.  The documentation for LABRATsc is included at the bottom of the README file for LABRAT.",
        "html_url": "https://github.com/TaliaferroLab/LABRAT/releases/tag/v0.3.0",
        "name": "Introduction of LABRATsc",
        "release_id": 47820300,
        "tag": "v0.3.0",
        "tarball_url": "https://api.github.com/repos/TaliaferroLab/LABRAT/tarball/v0.3.0",
        "type": "Release",
        "url": "https://api.github.com/repos/TaliaferroLab/LABRAT/releases/47820300",
        "value": "https://api.github.com/repos/TaliaferroLab/LABRAT/releases/47820300",
        "zipball_url": "https://api.github.com/repos/TaliaferroLab/LABRAT/zipball/v0.3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "taliaferrojm",
          "type": "User"
        },
        "date_created": "2021-05-12T21:46:41Z",
        "date_published": "2021-05-12T21:50:48Z",
        "description": "Add setup.py for bioconda push",
        "html_url": "https://github.com/TaliaferroLab/LABRAT/releases/tag/v0.2.2",
        "name": "Add setup.py for bioconda push",
        "release_id": 42871679,
        "tag": "v0.2.2",
        "tarball_url": "https://api.github.com/repos/TaliaferroLab/LABRAT/tarball/v0.2.2",
        "type": "Release",
        "url": "https://api.github.com/repos/TaliaferroLab/LABRAT/releases/42871679",
        "value": "https://api.github.com/repos/TaliaferroLab/LABRAT/releases/42871679",
        "zipball_url": "https://api.github.com/repos/TaliaferroLab/LABRAT/zipball/v0.2.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "taliaferrojm",
          "type": "User"
        },
        "date_created": "2021-05-11T18:05:24Z",
        "date_published": "2021-05-11T19:18:32Z",
        "description": "Minor update. Add shebangs to python scripts in preparation for submitting LABRAT to bioconda.",
        "html_url": "https://github.com/TaliaferroLab/LABRAT/releases/tag/v0.2.1",
        "name": "Add shebangs in prep for bioconda push",
        "release_id": 42794571,
        "tag": "v0.2.1",
        "tarball_url": "https://api.github.com/repos/TaliaferroLab/LABRAT/tarball/v0.2.1",
        "type": "Release",
        "url": "https://api.github.com/repos/TaliaferroLab/LABRAT/releases/42794571",
        "value": "https://api.github.com/repos/TaliaferroLab/LABRAT/releases/42794571",
        "zipball_url": "https://api.github.com/repos/TaliaferroLab/LABRAT/zipball/v0.2.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "taliaferrojm",
          "type": "User"
        },
        "date_created": "2021-04-21T15:38:56Z",
        "date_published": "2021-05-10T19:26:12Z",
        "description": "In this update, the ability to quantify APA in 3' end sequencing data has been added. To facilitate this, the `--librarytype` parameter has been added. The value of `--librarytype` must be either `RNAseq` or `3pseq`.",
        "html_url": "https://github.com/TaliaferroLab/LABRAT/releases/tag/v0.2.0",
        "name": "3' end sequencing compatibility",
        "release_id": 42727837,
        "tag": "v0.2.0",
        "tarball_url": "https://api.github.com/repos/TaliaferroLab/LABRAT/tarball/v0.2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/TaliaferroLab/LABRAT/releases/42727837",
        "value": "https://api.github.com/repos/TaliaferroLab/LABRAT/releases/42727837",
        "zipball_url": "https://api.github.com/repos/TaliaferroLab/LABRAT/zipball/v0.2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "taliaferrojm",
          "type": "User"
        },
        "date_created": "2020-08-18T22:29:31Z",
        "date_published": "2020-09-09T19:52:36Z",
        "description": "First release of LABRAT. Identifies genes whose relative usage of alternative polyadenylation sites changes across conditions using a LME model.",
        "html_url": "https://github.com/TaliaferroLab/LABRAT/releases/tag/v0.1.0",
        "name": "Initial LABRAT release",
        "release_id": 31003810,
        "tag": "v0.1.0",
        "tarball_url": "https://api.github.com/repos/TaliaferroLab/LABRAT/tarball/v0.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/TaliaferroLab/LABRAT/releases/31003810",
        "value": "https://api.github.com/repos/TaliaferroLab/LABRAT/releases/31003810",
        "zipball_url": "https://api.github.com/repos/TaliaferroLab/LABRAT/zipball/v0.1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running LABRAT",
        "parent_header": [
          "LABRAT <br/> <br/>Lightweight Alignment-Based Reckoning of Alternative Three-prime ends"
        ],
        "type": "Text_excerpt",
        "value": "Running LABRAT consists of three steps:</br>\n- makeTFfasta\n- runSalmon\n- calculatepsi\n"
      },
      "source": "https://raw.githubusercontent.com/TaliaferroLab/LABRAT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "makeTFfasta",
        "parent_header": [
          "LABRAT <br/> <br/>Lightweight Alignment-Based Reckoning of Alternative Three-prime ends",
          "Running LABRAT"
        ],
        "type": "Text_excerpt",
        "value": "The first step consists of making a fasta file of transcripts that will later be quantified by salmon.  This is done using the following command.\n\n```\nLABRAT.py --mode makeTFfasta --gff <genomegff> --genomefasta <genome sequence in fasta format> --lasttwoexons --librarytype <librarytype>\n```\n\nThis will create a database that stores information about the gff using [gffutils](https://daler.github.io/gffutils/index.html). Initial creation of this database can take up to several hours, but it is written to disk so that it does not have to be created in future runs. Compressed gff files are not currently supported.\n\n*Important*: If you kill the database creation process before it is finished, you will still have a .db file written. The next time you run LABRAT, it will see that file and think it is complete. This will obviously lead to problems. If this happens, simply delete the .db file. This will force LABRAT to create the .db file again.\n\nIf you would like to skip this, gff annotations and pre-built db files for hg38, mm10, and dm6 are available [here](https://www.dropbox.com/sh/qy3jzd00k00w3ga/AACkNE2q3d68sr3wKQDLboORa?dl=0). **Importantly**, LABRAT will expect a gff file and its corresponding db to be located in the same directory.\n\nThe option ```--lasttwoexons``` is optional, but recommended. If included, it tells LABRAT to only consider the last two exons of transcripts for future quantification.  This may be important because it removes assumptions present in the GFF file about relationships between alternative splicing outcomes happening early in a transcript and polyA site choice.\n\nOnly protein-coding transcripts and those with confidently defined ends (i.e. those that are not tagged with 'mRNA_end_NF') will end up in this fasta. The output of this step will be a file named either 'TFseqs.fa' or 'wholetranscriptseqs.fa', depending on whether or not the ```--lasttwoexons``` flag was used.\n"
      },
      "source": "https://raw.githubusercontent.com/TaliaferroLab/LABRAT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "runSalmon",
        "parent_header": [
          "LABRAT <br/> <br/>Lightweight Alignment-Based Reckoning of Alternative Three-prime ends",
          "Running LABRAT"
        ],
        "type": "Text_excerpt",
        "value": "After creating a fasta file, transcript abundances are calculated using salmon. Reads can be either fastq or fasta, and either gzipped or not. If gzipped, filenames must end in '.gz'. Single and paired end reads are supported. **This step should be performed in a clean, empty directory.**\n\n```\nLABRAT.py --mode runSalmon --librarytype <librarytype> --txfasta <output of makeTFfasta> --reads1 <comma separated list of forward read files> --reads2 <Optional, comma separated list of reverse read files> --samplename <comma separated list of sample names> --threads <number of threads to use>\n```\n\nAs an example:\n\n```\nLABRAT.py --mode runSalmon --txfasta TFseqs.fa --reads1 CondARep1_1.fq.gz,CondARep2_1.fq.gz,CondARep3_1.fq.gz,CondBRep1_1.fq.gz,CondBRep2_1.fq.gz,CondBRep3_1.fq.gz --reads2 CondARep1_2.fq.gz,CondARep2_2.fq.gz,CondARep3_2.fq.gz,CondBRep1_2.fq.gz,CondBRep2_2.fq.gz,CondBRep3_2.fq.gz --samplename CondARep1,CondARep2,CondARep3,CondBRep1,CondBRep2,CondBRep3 --threads 8\n```\n\nThe output of this step will be directories containing salmon quantification files, with one directory per sample.\n"
      },
      "source": "https://raw.githubusercontent.com/TaliaferroLab/LABRAT/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "calculatepsi",
        "parent_header": [
          "LABRAT <br/> <br/>Lightweight Alignment-Based Reckoning of Alternative Three-prime ends",
          "Running LABRAT"
        ],
        "type": "Text_excerpt",
        "value": "The final step is the calculation of \ud835\udf13 values for each gene in each sample, and the identification of genes that show significantly different \ud835\udf13 values across conditions.  Transcripts whose 3' ends are less than 25 nt from each other are grouped together during this step and counted as using the same polyadenylation site.\n\nsalmondir should be a directory that contains **ALL** of the salmon output directories created by runSalmon. **It should contain no other directories besides, optionally, one called 'txfasta.idx'.**\n\nsampconds is a tab-delimited file with a column header row that gives information about the samples. Column names are strict, and the first two columns are required. The first column should be named '**sample**' and contain the names of every sample to be compared. These sample names should match those given to runSalmon with ```--samplename```. The second column should be named '**condition**' and should contain two factors identifying the grouping of the samples for the comparison of interest.  These factors must also be given as the arguments **--conditionA** and **--conditionB**.  Delta \ud835\udf13 values will be reported as B-A.  Additional columns representing covariates can be included, but not are not requried. Covariate column names must contain 'covariate' within them. A sample sampconds file is provided below.\n\n| sample | condition | covariate1 |\n---------|-----------|--------\n| Brain_M1 | Brain| M |\n| Brain_F1 | Brain | F |\n| Liver_M1 | Liver | M |\n| Liver_F1 | Liver | F |\n| Liver_F2 | Liver | F |\n\nLABRAT compares \ud835\udf13 values of experimental replicates across experimental conditions to identify genes with statistically significantly different \ud835\udf13 values between conditions.  This is done using a mixed linear effects model that tests the relationship between \ud835\udf13 values and experimental condition. A null model is also created in which the term denoting the experimental condition has been removed.  A likelihood ratio test compares the goodness of fit of these two models to the observed data and assigns a p value for the probability that the real model is a better fit than the null model. In simple comparisons between two conditions, this approach mimics a t-test.  However, this technique has the advantage of being able to easily incorporate covariates into significance testing.  After performing this test on all genes, the raw p values are corrected for multiple hypothesis testing using a Benjamini-Hochsberg correction.\n\n```\nLABRAT.py --mode calculatepsi --salmondir <directory of salmon outputs> --sampconds <sampconds file> --conditionA <conditionA> --conditionB <conditionB> --gff <genomegff> --librarytype <librarytype>\n```\n"
      },
      "source": "https://raw.githubusercontent.com/TaliaferroLab/LABRAT/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 05:40:00",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 8
      },
      "technique": "GitHub_API"
    }
  ]
}