{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/elkebir-group/Jumper"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-11-02T09:22:23Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-06-30T19:15:57Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Discontinuous Transcript Assembly in Nidovirales"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.8142687713437381,
      "result": {
        "original_header": "Jumper",
        "type": "Text_excerpt",
        "value": "![Overview of Jumper](overview.png)\n(a) Viruses in the order Nidovirales generate a set <img src=\"https://latex.codecogs.com/gif.latex?\\mathcal{T}\" /> of discontinuous transcripts with varying abundances <img src=\"https://latex.codecogs.com/gif.latex?\\mathbf{c}\" /> during infection.\n(b) Next generation sequencing will produce an alignment <img src=\"https://latex.codecogs.com/gif.latex?\\mathcal{R}\" /> with two types of aligned reads: unphased reads that map to a contiguous genomic region (black) and phased reads that map to distinct genomic regions (red).\n(c) From <img src=\"https://latex.codecogs.com/gif.latex?\\mathcal{R}\" /> we obtain the segment graph <img src=\"https://latex.codecogs.com/gif.latex?G\" />, a directed acyclic graph with a unique Hamiltonian path. Jumper solves the Discontinuous Transciption Assembly problem to infer <img src=\"https://latex.codecogs.com/gif.latex?\\mathcal{T}\" /> and <img src=\"https://latex.codecogs.com/gif.latex?\\mathbf{c}\" /> with maximum likelihood. \n"
      },
      "source": "https://raw.githubusercontent.com/elkebir-group/Jumper/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/elkebir-group/Jumper/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/elkebir-group/Jumper/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "elkebir-group/Jumper"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Jumper"
      },
      "source": "https://raw.githubusercontent.com/elkebir-group/Jumper/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/elkebir-group/Jumper/main/overview.png"
      },
      "source": "https://raw.githubusercontent.com/elkebir-group/Jumper/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://latex.codecogs.com/gif.latex?\\mathcal{T}"
      },
      "source": "https://raw.githubusercontent.com/elkebir-group/Jumper/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://latex.codecogs.com/gif.latex?\\mathbf{c}"
      },
      "source": "https://raw.githubusercontent.com/elkebir-group/Jumper/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://latex.codecogs.com/gif.latex?\\mathcal{R}"
      },
      "source": "https://raw.githubusercontent.com/elkebir-group/Jumper/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://latex.codecogs.com/gif.latex?\\mathcal{R}"
      },
      "source": "https://raw.githubusercontent.com/elkebir-group/Jumper/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://latex.codecogs.com/gif.latex?G"
      },
      "source": "https://raw.githubusercontent.com/elkebir-group/Jumper/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://latex.codecogs.com/gif.latex?\\mathcal{T}"
      },
      "source": "https://raw.githubusercontent.com/elkebir-group/Jumper/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://latex.codecogs.com/gif.latex?\\mathbf{c}"
      },
      "source": "https://raw.githubusercontent.com/elkebir-group/Jumper/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "Jumper"
        ],
        "type": "Text_excerpt",
        "value": "Installation time: 5 minutes.\n\n<a name=\"conda-install\"></a>"
      },
      "source": "https://raw.githubusercontent.com/elkebir-group/Jumper/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Using conda (recommended)",
        "parent_header": [
          "Jumper",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "1. Download the [released package](https://github.com/elkebir-group/Jumper/releases) of the latest version: `jumper-0.1.1.tar.bz2`.\n2. Create a new conda environment named \"jumper\" and install dependencies:\n   * If you want to run the simulation pipeline, please run\n\n   ```bash\n   conda create -n jumper -c conda-forge -c bioconda -c gurobi pandas pysam snakemake STAR scallop stringtie gurobi\n   ```\n\n   * Otherwise please run\n\n   ```bash\n   conda create -n jumper -c conda-forge -c bioconda -c gurobi pandas pysam gurobi\n   ```\n\n3. Then activate the created environment: `conda activate jumper`.\n4. Install the package into current environment \"jumper\":\n\n    ```bash\n    conda install jumper-0.1.1.tar.bz2\n    ```\n\n**Note:** Make sure you have a gurobi license before running jumper. If you are an academic user, you can get a free license: <https://www.gurobi.com/academia/academic-program-and-licenses/>\n\n<a name=\"pip-install\"></a>"
      },
      "source": "https://raw.githubusercontent.com/elkebir-group/Jumper/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Using pip (alternative)",
        "parent_header": [
          "Jumper",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "For users not having conda, and already have gurobi installed:\n\n1. Clone the git repository\n\n    ```bash\n    git clone git@github.com:elkebir-group/Jumper.git\n    ```\n\n2. Install jumper using pip\n\n    ```bash\n    cd Jumper\n    pip install ./\n    ```\n\n<a name=\"usage\"></a>"
      },
      "source": "https://raw.githubusercontent.com/elkebir-group/Jumper/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.999999999550937,
      "result": {
        "original_header": "Jumper",
        "type": "Text_excerpt",
        "value": "![Overview of Jumper](overview.png)\n(a) Viruses in the order Nidovirales generate a set <img src=\"https://latex.codecogs.com/gif.latex?\\mathcal{T}\" /> of discontinuous transcripts with varying abundances <img src=\"https://latex.codecogs.com/gif.latex?\\mathbf{c}\" /> during infection.\n(b) Next generation sequencing will produce an alignment <img src=\"https://latex.codecogs.com/gif.latex?\\mathcal{R}\" /> with two types of aligned reads: unphased reads that map to a contiguous genomic region (black) and phased reads that map to distinct genomic regions (red).\n(c) From <img src=\"https://latex.codecogs.com/gif.latex?\\mathcal{R}\" /> we obtain the segment graph <img src=\"https://latex.codecogs.com/gif.latex?G\" />, a directed acyclic graph with a unique Hamiltonian path. Jumper solves the Discontinuous Transciption Assembly problem to infer <img src=\"https://latex.codecogs.com/gif.latex?\\mathcal{T}\" /> and <img src=\"https://latex.codecogs.com/gif.latex?\\mathbf{c}\" /> with maximum likelihood. \n"
      },
      "source": "https://raw.githubusercontent.com/elkebir-group/Jumper/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8778292442613708,
      "result": {
        "original_header": "Contents",
        "type": "Text_excerpt",
        "value": "  1. [Pre-requisites](#pre-requisites)\n  2. [Installation](#installation)\n     * [Using conda](#conda-install) (recommended)\n     * [Using pip](#pip-install) (alternative)\n  3. [Usage instcructions](#usage)\n     * [I/O formats](#io)\n     * [Jumper](#jumper)\n     * [simulation](#simulation) \n"
      },
      "source": "https://raw.githubusercontent.com/elkebir-group/Jumper/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/elkebir-group/Jumper/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020, 2021 Palash Sashittal, Mohammed El-Kebir\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/elkebir-group/Jumper/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Jumper"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "elkebir-group"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 163577,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 621,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/elkebir-group/Jumper/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://pysam.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/elkebir-group/Jumper/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sashitt2",
          "type": "User"
        },
        "date_created": "2021-06-28T04:32:51Z",
        "date_published": "2021-10-07T23:25:51Z",
        "html_url": "https://github.com/elkebir-group/Jumper/releases/tag/v0.1.2",
        "name": "Jumper v0.1.2",
        "release_id": 51001140,
        "tag": "v0.1.2",
        "tarball_url": "https://api.github.com/repos/elkebir-group/Jumper/tarball/v0.1.2",
        "type": "Release",
        "url": "https://api.github.com/repos/elkebir-group/Jumper/releases/51001140",
        "value": "https://api.github.com/repos/elkebir-group/Jumper/releases/51001140",
        "zipball_url": "https://api.github.com/repos/elkebir-group/Jumper/zipball/v0.1.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sashitt2",
          "type": "User"
        },
        "date_created": "2021-06-20T01:31:25Z",
        "date_published": "2021-06-20T02:31:11Z",
        "description": "Jumper v0.1.1",
        "html_url": "https://github.com/elkebir-group/Jumper/releases/tag/v0.1.1",
        "name": "v0.1.1",
        "release_id": 44913140,
        "tag": "v0.1.1",
        "tarball_url": "https://api.github.com/repos/elkebir-group/Jumper/tarball/v0.1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/elkebir-group/Jumper/releases/44913140",
        "value": "https://api.github.com/repos/elkebir-group/Jumper/releases/44913140",
        "zipball_url": "https://api.github.com/repos/elkebir-group/Jumper/zipball/v0.1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ChuanyiZ",
          "type": "User"
        },
        "date_created": "2020-11-11T04:48:55Z",
        "date_published": "2020-11-11T05:04:32Z",
        "description": "Jumper v0.1.0",
        "html_url": "https://github.com/elkebir-group/Jumper/releases/tag/v0.1.0",
        "name": "v0.1.0",
        "release_id": 33782314,
        "tag": "v0.1.0",
        "tarball_url": "https://api.github.com/repos/elkebir-group/Jumper/tarball/v0.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/elkebir-group/Jumper/releases/33782314",
        "value": "https://api.github.com/repos/elkebir-group/Jumper/releases/33782314",
        "zipball_url": "https://api.github.com/repos/elkebir-group/Jumper/zipball/v0.1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Pre-requisites",
        "parent_header": [
          "Jumper"
        ],
        "type": "Text_excerpt",
        "value": "+ python3 (>=3.6)\n+ [numpy](https://numpy.org/doc/)\n+ [pysam](https://pysam.readthedocs.io/en/latest/)\n+ [pandas](https://pandas.pydata.org/pandas-docs/stable/index.html)\n+ [gurobipy](https://www.gurobi.com/documentation/9.0/quickstart_mac/py_python_interface.html)\n+ (optional for simulation pipeline) [snakemake (>=5.2.0)](https://snakemake.readthedocs.io)\n\n<a name=\"installation\"></a>"
      },
      "source": "https://raw.githubusercontent.com/elkebir-group/Jumper/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 05:36:59",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage instructions",
        "parent_header": [
          "Jumper"
        ],
        "type": "Text_excerpt",
        "value": "<a name=\"io\"></a>"
      },
      "source": "https://raw.githubusercontent.com/elkebir-group/Jumper/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "I/O formats",
        "parent_header": [
          "Jumper",
          "Usage instructions"
        ],
        "type": "Text_excerpt",
        "value": "The input for Jumper is a bam file containing the sequencing data and a fasta file containing the reference genome.\nThe output is similar to a fasta file format, where each transcript name is followed by the edges in the corresponding path in the segment graph (see `data/sample_transcripts.out` for an example).\n"
      },
      "source": "https://raw.githubusercontent.com/elkebir-group/Jumper/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Arguments",
        "parent_header": [
          "Jumper",
          "Usage instructions"
        ],
        "type": "Text_excerpt",
        "value": "    usage: jumper_main.py [-h] [-b BAM] [--paired PAIRED] -f FASTA [-k NUMPATHS]\n                          [--min-base-qual MIN_BASE_QUAL]\n                          [--min-mapping-qual MIN_MAPPING_QUAL] [-w WIDTH]\n                          [--samplingFrequency SAMPLINGFREQUENCY]\n                          [--sj_threshold SJ_THRESHOLD] [-n NEDGES]\n                          [--phasing_threshold PHASING_THRESHOLD]\n                          [--greedy GREEDY] [--outputCSV OUTPUTCSV]\n                          [--outputPhasing OUTPUTPHASING] [--inputCSV INPUTCSV]\n                          [--inputPhasing INPUTPHASING]\n                          [--inputBreakpoints INPUTBREAKPOINTS]\n                          [--inputEdges INPUTEDGES] [--outputGraph OUTPUTGRAPH]\n                          [--outputDOT OUTPUTDOT]\n                          [--outputTranscripts OUTPUTTRANSCRIPTS]\n                          [--outputBreakpoints OUTPUTBREAKPOINTS]\n                          [--outputEdges OUTPUTEDGES]\n                          [--outputDecomposition OUTPUTDECOMPOSITION]\n                          [--outputMatching OUTPUTMATCHING]\n                          [--outputGTF OUTPUTGTF] [--report REPORT] [--noverbose]\n                          [--threads THREADS] [--timelimit TIMELIMIT]\n                          [--maxIter MAXITER]\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -b BAM, --bam BAM     aligned bam file\n      --paired PAIRED       is the bam file paired-end (True/False) [True]\n      -f FASTA, --fasta FASTA\n                            fasta file\n      -k NUMPATHS           number of paths for the flow decomposition\n      --min-base-qual MIN_BASE_QUAL\n                            minimum base quality [20]\n      --min-mapping-qual MIN_MAPPING_QUAL\n                            minimum mapping quality [20]\n      -w WIDTH, --width WIDTH\n                            spliced junction width parameter [0]\n      --samplingFrequency SAMPLINGFREQUENCY\n                            number of sampling points for the likelihood function\n      --sj_threshold SJ_THRESHOLD\n                            minimum support for splicing junction [20]\n      -n NEDGES, --nedges NEDGES\n                            number of splice edges in segment graph (-1 for\n                            unconstrained) [-1]\n      --phasing_threshold PHASING_THRESHOLD\n                            coverage threshold for transcripts [0]\n      --greedy GREEDY       set greedy flag to TRUE\n      --outputCSV OUTPUTCSV\n                            output csv file for sj reads\n      --outputPhasing OUTPUTPHASING\n                            output file containing phasing reads\n      --inputCSV INPUTCSV   input csv file with sj reads\n      --inputPhasing INPUTPHASING\n                            input phasing file\n      --inputBreakpoints INPUTBREAKPOINTS\n                            input file containing breakpoints\n      --inputEdges INPUTEDGES\n                            input file containing graph edges\n      --outputGraph OUTPUTGRAPH\n                            output graph file\n      --outputDOT OUTPUTDOT\n                            output DOT file for splice graph\n      --outputTranscripts OUTPUTTRANSCRIPTS\n                            output file for transcripts\n      --outputBreakpoints OUTPUTBREAKPOINTS\n                            output file containing breakpoints\n      --outputEdges OUTPUTEDGES\n                            output file containing graph edges\n      --outputDecomposition OUTPUTDECOMPOSITION\n                            output file for the decomposed non-canonical\n                            transcripts\n      --outputMatching OUTPUTMATCHING\n                            output file for the matching of phasing reads to\n                            inferred transcripts\n      --outputGTF OUTPUTGTF\n                            output file in GTF format\n      --report REPORT       output file for report on the splice graph\n      --noverbose           do not output statements from internal solvers\n                            [default is false]\n      --threads THREADS     number of threads allowed to be used [1]\n      --timelimit TIMELIMIT\n                            time limt for the gurobi solvers in seconds [None]\n      --maxIter MAXITER     maximum iterations for the greedy algorithm [100]\n"
      },
      "source": "https://raw.githubusercontent.com/elkebir-group/Jumper/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example",
        "parent_header": [
          "Jumper",
          "Usage instructions"
        ],
        "type": "Text_excerpt",
        "value": "One way to see how to use Jumper is through `simulation_pipeline` for example cases of using Jumper on simulated bam files.\nThe Jumper usage is shown in the snakemake `simulation_pipeline/jumper.smk`.\n\nHere we will run Jumper to reconstruct the transcripts on simulated phasing reads.\nYou'll need to download this repository to get the resources files in the `data/` folder.\n"
      },
      "source": "https://raw.githubusercontent.com/elkebir-group/Jumper/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Simulate transcripts and phasing reads",
        "parent_header": [
          "Jumper",
          "Usage instructions",
          "Example"
        ],
        "type": "Text_excerpt",
        "value": "    \n    $ jumper_simulate --seed 0 --sense neg --npaths 2 --inputBreakpoints ../data/sampleBreakpoints.out --inputEdges ../data/sampleEdges.out --outputPaths ../data/sample_transcripts.out --outputFasta ../data/sample_transcripts.fasta -f ../data/reference.fasta --outputReadCounts ../data/sample_readcounts.out --outputPhasing ../data/sample_phasing.out --nreads 1000\n\nThis command generates 1000 phasing reads in `../data/sample_phasing`.\nThe ground transcripts are written in `../data/sample_transcripts.out`.\n"
      },
      "source": "https://raw.githubusercontent.com/elkebir-group/Jumper/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Reconstruct the transcripts",
        "parent_header": [
          "Jumper",
          "Usage instructions",
          "Example"
        ],
        "type": "Text_excerpt",
        "value": "    $ jumper --inputBreakpoints ../data/sampleBreakpoints.out --inputEdges ../data/sampleEdges.out --inputPhasing ../data/sample_phasing.out --outputDecomposition ../data/sample_decomposition.out -k 50 -f ../data/reference.fasta --greedy True --outputMatching ../data/sample_matching.out > ../data/sample.log\n  \nThe reconstructed transcripts are written to [`../data/sample_decomposition.out`](data/sample_decomposition.out).\n\nThis will take less than 1 minute to complete on a typical desktop computer.\n\n"
      },
      "source": "https://raw.githubusercontent.com/elkebir-group/Jumper/main/README.md",
      "technique": "header_analysis"
    }
  ]
}