{
  "application_domain": [
    {
      "confidence": 30.77,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "author": "Fang, Faming and Li, Juncheng and Zeng, Tieyong",
        "format": "bibtex",
        "title": "Soft-Edge Assisted Network for Single Image Super-Resolutionn",
        "type": "Text_excerpt",
        "value": "@inproceedings{fang2020soft,\n    publisher = {IEEE},\n    year = {2020},\n    pages = {4656--4668},\n    volume = {29},\n    booktitle = {IEEE Transactions on Image Processing},\n    author = {Fang, Faming and Li, Juncheng and Zeng, Tieyong},\n    title = {Soft-Edge Assisted Network for Single Image Super-Resolutionn},\n}"
      },
      "source": "https://raw.githubusercontent.com/MIVRC/MLEFGN-PyTorch/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Fang, Faming and Li, Juncheng, Yuan Yiting, Zeng, Tieyong, and Zhang Guxiu",
        "format": "bibtex",
        "title": "Multi-level Edge Features Guided Network for Image Denoising",
        "type": "Text_excerpt",
        "value": "@inproceedings{fang2020multilevel,\n    publisher = {IEEE},\n    booktitle = {IEEE Transactions on Neural Networks and Learning Systems},\n    author = {Fang, Faming and Li, Juncheng, Yuan Yiting, Zeng, Tieyong, and Zhang Guxiu},\n    title = {Multi-level Edge Features Guided Network for Image Denoising},\n}"
      },
      "source": "https://raw.githubusercontent.com/MIVRC/MLEFGN-PyTorch/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/MIVRC/MLEFGN-PyTorch"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-04-06T15:08:30Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-04T02:07:28Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "This repository is a PyTorch version of \"Soft-edge Assisted Network for Single Image Super-Resolution\". (IEEE TNNLS 2020)"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9694754383391719,
      "result": {
        "original_header": "Document",
        "type": "Text_excerpt",
        "value": "Matlab/        : all data processing and PSNR measurement files \n"
      },
      "source": "https://raw.githubusercontent.com/MIVRC/MLEFGN-PyTorch/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9041785493399825,
      "result": {
        "original_header": "Dataset",
        "type": "Text_excerpt",
        "value": "As for clear edges, we apply Matlab/generate_edge_gray.m or generate_edge_color.m on DIV2K to generate clear images edges, which are served as the label of Edge-Net. Meanwhile, put them into the Train/dataset/DIV2K/DIV2K_train_EDGE \nAs for noisy images, we use Matlab/generate_noise.m to generate noisy images and put them into the Train/dataset/DIV2K/DIV2K_train_LR_bicubic/x1\n \n"
      },
      "source": "https://raw.githubusercontent.com/MIVRC/MLEFGN-PyTorch/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.813601481938051,
      "result": {
        "original_header": "Training",
        "type": "Text_excerpt",
        "value": "You can skip the decoding part and use saved binaries with --ext sep argument in second time.\n```python\n## train\npython main.py --template MLEFGN --save MLEFGN_Gray_15 --scale 1 --reset --save_results --patch_size 64 --ext sep_reset\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/MIVRC/MLEFGN-PyTorch/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9036910180477942,
      "result": {
        "original_header": "All pre-trained model will be provided soon.",
        "type": "Text_excerpt",
        "value": "This work was completed in 2018, a long time ago, so there may be omissions in the code finishing process. If you have any questions, please contact me! \n\nThis implementation is for non-commercial research use only. \nIf you find this code useful in your research, please cite the above papers. \n"
      },
      "source": "https://raw.githubusercontent.com/MIVRC/MLEFGN-PyTorch/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/MIVRC/MLEFGN-PyTorch/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/MIVRC/MLEFGN-PyTorch/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MIVRC/MLEFGN-PyTorch"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MLEFGN-PyTorch"
      },
      "source": "https://raw.githubusercontent.com/MIVRC/MLEFGN-PyTorch/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MIVRC/MLEFGN-PyTorch/master/images/head.png"
      },
      "source": "https://raw.githubusercontent.com/MIVRC/MLEFGN-PyTorch/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MIVRC/MLEFGN-PyTorch/master/images/TABLE1.png"
      },
      "source": "https://raw.githubusercontent.com/MIVRC/MLEFGN-PyTorch/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MIVRC/MLEFGN-PyTorch/master/images/TABLE2.png"
      },
      "source": "https://raw.githubusercontent.com/MIVRC/MLEFGN-PyTorch/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MIVRC/MLEFGN-PyTorch/master/images/TABLE4.png"
      },
      "source": "https://raw.githubusercontent.com/MIVRC/MLEFGN-PyTorch/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MIVRC/MLEFGN-PyTorch/master/images/TABLE3.png"
      },
      "source": "https://raw.githubusercontent.com/MIVRC/MLEFGN-PyTorch/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MIVRC/MLEFGN-PyTorch/master/images/Results1.png"
      },
      "source": "https://raw.githubusercontent.com/MIVRC/MLEFGN-PyTorch/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MIVRC/MLEFGN-PyTorch/master/images/Results2.png"
      },
      "source": "https://raw.githubusercontent.com/MIVRC/MLEFGN-PyTorch/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MIVRC/MLEFGN-PyTorch/master/images/Results3.png"
      },
      "source": "https://raw.githubusercontent.com/MIVRC/MLEFGN-PyTorch/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MIVRC/MLEFGN-PyTorch/master/images/EdgeResults.png"
      },
      "source": "https://raw.githubusercontent.com/MIVRC/MLEFGN-PyTorch/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "This repository is an official PyTorch implementation of the paper ''Multi-level Edge Features Guided Network for Image Denoising''.  (TNNLS 2020)",
        "parent_header": [
          "MLEFGN-PyTorch"
        ],
        "type": "Text_excerpt",
        "value": "The paper can be downloaded from <a href=\"https://ieeexplore.ieee.org/abstract/document/9178433?casa_token=3O33Hc3HlqcAAAAA:tj0YfftxQeZLl5q1r9rJc6X_2K2qJptc59lClR-x0RJxnSTax_jLV7E5sJt7qTt3Rw5ooTWjQjbhzQ\">MLEFGN</a> \n\nHomepage: <a href=\"https://junchenglee.com/projects/TNNLS2020_MLEFGN/\">MLEFGN</a> \n\nImage denoising is a challenging inverse problem due to the complex scenes and information loss. Recently, various methods have been considered to solve this problem by building a well-designed convolutional neural network (CNN) or introducing some hand-designed image priors. Different from previous works, we investigate a new framework for image denoising, which integrates edge detection, edge guidance, and image denoising into an end-to-end CNN model. To achieve this goal, we propose a Multi-level Edge Features Guided Network (MLEFGN). Firstly, we build an edge reconstruction network (Edge-Net) to directly predict clear edges from the noisy image. Then, the Edge-Net is embedded as part of the model to provide edge priors and a dual-path network is applied to extract image and edge features, respectively. Finally, we introduce a multilevel edge features guidance mechanism for image denoising. To the best of our knowledge, the Edge-Net is the first CNN model specially designed to reconstruct image edges from the noisy image, which shows good accuracy and robustness on natural images. Extensive experiments clearly illustrate that our MLEFGN achieves favorable performance against other methods and plenty of ablation studies demonstrate the effectiveness of our proposed Edge-Net and MLEFGN.\n\n<img src=\"images/head.png\" width=\"800px\"/> \n\n</p>\n\nAll denoised images can be download from <a href=\"https://www.jianguoyun.com/p/DVDHxpEQ19ySBxiV884D\">Denoised_Images</a> \n\nAll pre-trained model can be downloaded from <a href=\"https://www.jianguoyun.com/p/DbDXkkcQ19ySBxi49c4D\">here</a>.\n\nAll original test datasets can be downloaded from <a href=\"https://www.jianguoyun.com/p/DSnav-wQ19ySBxiu884D\">here</a>.\n"
      },
      "source": "https://raw.githubusercontent.com/MIVRC/MLEFGN-PyTorch/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9838907254088842,
      "result": {
        "original_header": "Document",
        "type": "Text_excerpt",
        "value": "demo.sh        : all running instructions\n \n"
      },
      "source": "https://raw.githubusercontent.com/MIVRC/MLEFGN-PyTorch/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9743714910579946,
      "result": {
        "original_header": "Training",
        "type": "Text_excerpt",
        "value": "Using --ext sep_reset argument on your first running.  \nYou can skip the decoding part and use saved binaries with --ext sep argument in second time.\n```python\n## train\npython main.py --template MLEFGN --save MLEFGN_Gray_15 --scale 1 --reset --save_results --patch_size 64 --ext sep_reset\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/MIVRC/MLEFGN-PyTorch/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9195873587196113,
      "result": {
        "original_header": "Performance",
        "type": "Text_excerpt",
        "value": "PSNR  code can be found in the Matlab/PSNR folder.\n \n"
      },
      "source": "https://raw.githubusercontent.com/MIVRC/MLEFGN-PyTorch/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8459881505628197,
      "result": {
        "original_header": "Document",
        "type": "Text_excerpt",
        "value": "Train/         : all train files are stored here \nTest/          : all test files are stored here \n"
      },
      "source": "https://raw.githubusercontent.com/MIVRC/MLEFGN-PyTorch/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8138189755163926,
      "result": {
        "original_header": "Training",
        "type": "Text_excerpt",
        "value": "You can skip the decoding part and use saved binaries with --ext sep argument in second time.\n```python\n## train\npython main.py --template MLEFGN --save MLEFGN_Gray_15 --scale 1 --reset --save_results --patch_size 64 --ext sep_reset\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/MIVRC/MLEFGN-PyTorch/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9443252389611225,
      "result": {
        "original_header": "Testing",
        "type": "Text_excerpt",
        "value": "All pre-trained model should be put into Test/model/ first. Meanwhile, all test image must be put into dataset_name/x1,  like Set12/x1.\n```python\n## test MLEFGN\npython main.py --data_test MyImage --scale 1 --model MLEFGN --pre_train ../model/gray_15.pt --test_only --save_results --chop --save \"MLEFGN_Gray_15\" --testpath ../LR/LRBI --testset Set12\n```\nYou also can use self-ensemble strategy to improve our MLEFGN and denote the self-ensembled version as MLEFGN+.\n```python\n## test MLEFGN+\npython main.py --data_test MyImage --scale 1 --model MLEFGN --pre_train ../model/gray_15.pt --test_only --save_results --chop --self_ensemble --save \"MLEFGN_Gray_15_plus\" --testpath ../LR/LRBI --testset Set12\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/MIVRC/MLEFGN-PyTorch/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8358625235441725,
      "result": {
        "original_header": "PSNR Results on Grayscale Images",
        "type": "Text_excerpt",
        "value": "<p align=\"center\">\n<img src=\"images/TABLE1.png\" width=\"900px\"/>\n</p> \n<p align=\"center\">\n<img src=\"images/TABLE2.png\" width=\"500px\"/> \n</p> \n<p align=\"center\">\n<img src=\"images/TABLE4.png\" width=\"500px\"/> \n</p>\n \n"
      },
      "source": "https://raw.githubusercontent.com/MIVRC/MLEFGN-PyTorch/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8633554000683576,
      "result": {
        "original_header": "PSNR Results on Color Images",
        "type": "Text_excerpt",
        "value": "<img src=\"images/TABLE3.png\" width=\"900px\"/> \n"
      },
      "source": "https://raw.githubusercontent.com/MIVRC/MLEFGN-PyTorch/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8602107415559387,
      "result": {
        "original_header": "Visual Comparison",
        "type": "Text_excerpt",
        "value": "<p align=\"center\">\n<img src=\"images/Results1.png\" width=\"800px\"/> \n</p>\n<img src=\"images/Results2.png\" width=\"800px\"/> \n</p>\n<img src=\"images/Results3.png\" width=\"800px\"/> \n</p>\n<img src=\"images/EdgeResults.png\" width=\"800px\"/> \n</p> \n"
      },
      "source": "https://raw.githubusercontent.com/MIVRC/MLEFGN-PyTorch/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/MIVRC/MLEFGN-PyTorch/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "image-denoising, mlefgn, tnnls, tnnls2020"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MLEFGN-PyTorch"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "MIVRC"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 149168,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 13040,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "MATLAB",
        "size": 10137,
        "type": "Programming_language",
        "value": "MATLAB"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MIVRC/MLEFGN-PyTorch/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Prerequisites",
        "parent_header": [
          "MLEFGN-PyTorch"
        ],
        "type": "Text_excerpt",
        "value": "1. Python 3.6\n\n2. PyTorch >= 0.4.0\n\n3. numpy\n\n4. skimage\n\n5. imageio\n\n6. matplotlib\n\n7. tqdm\n\nFor more informaiton, please refer to <a href=\"https://github.com/thstkdgus35/EDSR-PyTorch\">EDSR</a> and <a href=\"https://github.com/yulunzhang/RCAN\">RCAN</a>.\n\nIn order to quickly verify the idea, we directly use the EDSR code, which is originally a code for image super-resolution.\n\nWe regard the image denoising task as a super-resolution task with an upsampling factor of x1. Therefore, when using this code, we set the scale = 1.\n"
      },
      "source": "https://raw.githubusercontent.com/MIVRC/MLEFGN-PyTorch/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 12:15:45",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 32
      },
      "technique": "GitHub_API"
    }
  ]
}