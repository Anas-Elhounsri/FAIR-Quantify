{
  "application_domain": [
    {
      "confidence": 0.8072182454230499,
      "result": {
        "type": "String",
        "value": "Semantic web"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation <a href=\"https://doi.org/10.1063/5.0006002\"><img alt=\"doi\" src=\"https://img.shields.io/badge/doi-10.1063/5.0006002-5077AB.svg\" /></a>",
        "type": "Text_excerpt",
        "value": "========\n\nThe journal article reference describing Psi4 is:\n\nD. G. A. Smith, L. A. Burns, A. C. Simmonett, R. M. Parrish,\nM. C. Schieber, R. Galvelis, P. Kraus, H. Kruse, R. Di Remigio,\nA. Alenaizan, A. M. James, S. Lehtola, J. P. Misiewicz, M. Scheurer,\nR. A. Shaw, J. B. Schriber, Y. Xie, Z. L. Glick, D. A. Sirianni,\nJ. S. O'Brien, J. M. Waldrop, A. Kumar, E. G. Hohenstein,\nB. P. Pritchard, B. R. Brooks, H. F. Schaefer III, A. Yu. Sokolov,\nK. Patkowski, A. E. DePrince III, U. Bozkaya, R. A. King,\nF. A. Evangelista, J. M. Turney, T. D. Crawford, C. D. Sherrill,\n\"Psi4 1.4: Open-Source Software for High-Throughput Quantum Chemistry\",\nJ. Chem. Phys. 152(18) 184108 (2020).\n\n* [![doi](https://img.shields.io/badge/doi-10.1021/acs.jctc.7b00174-5077AB.svg)](https://doi.org/10.1021/acs.jctc.7b00174) for Psi4 v1.1\n* [![doi](https://img.shields.io/badge/doi-10.1021/acs.jctc.8b00286-5077AB.svg)](https://doi.org/10.1021/acs.jctc.8b00286) for Psi4NumPy\n* [![doi](https://img.shields.io/badge/doi-10.1002/wcms.93-5077AB.svg)](https://doi.org/10.1002/wcms.93) for Psi4 alpha releases\n* [![doi](https://img.shields.io/badge/doi-10.1002/jcc.20573-5077AB.svg)](https://doi.org/10.1002/jcc.20573) for Psi3\n"
      },
      "source": "https://raw.githubusercontent.com/psi4/psi4/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/psi4/psi4"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# How to contribute\n\nWe welcome contributions from external contributors, and this document\ndescribes how to merge code changes into Psi4.  As of February 2016, the\nprocedure for contributing code is exactly the same for the core development\nteam and for external contributors.\n\n**Working on your first Pull Request?** You can learn how from\nthis *free* series [How to Contribute to an Open Source Project on\nGitHub](https://egghead.io/series/how-to-contribute-to-an-open-source-project-on-github)\n\n## Getting Started\n\n* Make sure you have a [GitHub account](https://github.com/signup/free).\n* [Fork](https://help.github.com/articles/fork-a-repo/) the\n  [psi4/psi4](https://github.com/psi4/psi4) repository on GitHub.\n* On your local machine,\n  [clone](https://help.github.com/articles/cloning-a-repository/) your fork of\n  the Psi4 repository.\n* More detailed instructions for interacting with your Psi4 fork can be found\n  [here](http://psicode.org/psi4manual/master/build_obtaining.html#faq-forkpsi4public).\n  and [here](http://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow).\n\n## Making Changes\n\n* Add some really awesome code to your local fork.  It's usually a [good\n  idea](http://blog.jasonmeridth.com/posts/do-not-issue-pull-requests-from-your-master-branch/)\n  to make changes on a\n  [branch](https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/)\n  with the branch name relating to the feature you are going to add.\n* When you are ready for others to examine and comment on your new feature,\n  navigate to your fork of Psi4 on GitHub and open a [pull\n  request](https://help.github.com/articles/using-pull-requests/) (PR). Note that\n  after you launch a PR from one of your fork's branches, all\n  subsequent commits to that branch will be added to the open pull request\n  automatically.  Each commit added to the PR will be validated for\n  mergability, compilation and test suite compliance; the results of these tests\n  will be visible on the PR page.\n* If you're providing a new feature, you must add test cases and documentation.\n* When the code is ready to go, make sure you run the full or relevant portion of the\n  [test suite](http://psicode.org/psi4manual/master/build_planning.html#faq-subsettests)\n  on your local machine to check that nothing is broken.\n* When you're ready to be considered for merging, check the \"Ready to go\"\n  box on the PR page to let the Psi4 team know that the changes are complete.\n  The code will not be merged until this box is checked, the continuous\n  integration (Travis for Linux and Distelli for Mac) returns checkmarks,\n  and multiple core developers give \"Approved\" reviews.\n\n# Additional Resources\n\n* [General GitHub documentation](https://help.github.com/)\n* [PR best practices](http://codeinthehole.com/writing/pull-requests-and-other-good-practices-for-teams-using-github/)\n* [A guide to contributing to software packages](http://www.contribution-guide.org)\n* [Thinkful PR example](http://www.thinkful.com/learn/github-pull-request-tutorial/#Time-to-Submit-Your-First-PR)\n\n"
      },
      "source": "https://raw.githubusercontent.com/psi4/psi4/master/.github/CONTRIBUTING.md",
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2013-04-02T16:21:04Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-06T02:22:24Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Open-Source Quantum Chemistry \u2013 an electronic structure package in C++ driven by Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9185040949751954,
      "result": {
        "original_header": "<img src=\"https://github.com/psi4/psi4media/blob/master/logos-psi4/psi4square.png\" height=150>",
        "type": "Text_excerpt",
        "value": "Psi4 is an open-source suite of *ab initio* quantum chemistry programs\ndesigned for efficient, high-accuracy simulations of\nmolecular properties. We routinely perform computations with >2500 basis functions on multi-core machines. \nWith computationally demanding portions written in C++, exports\nof many C++ classes into Python via Pybind11, and a flexible Python driver, Psi4\nstrives to be friendly to both users and developers. \n* **Interested Developers**  https://psicode.org/developers.php (replacement page needed) (welcome to fork psi4/psi4 and follow [GitHub contribution procedure](https://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow)) [![PRs welcome](https://img.shields.io/badge/PRs-welcome-yellow.svg)](http://makeapullrequest.com) \n* **Sample Inputs**  http://www.psicode.org/psi4manual/master/testsuite.html (also in [`samples/`](samples)) \n"
      },
      "source": "https://raw.githubusercontent.com/psi4/psi4/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/psi4/psi4/wiki"
      },
      "source": "https://raw.githubusercontent.com/psi4/psi4/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/psi4/psi4/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/psi4/psi4/master/doc/sphinxman/source/psiapi.ipynb"
      },
      "source": "https://raw.githubusercontent.com/psi4/psi4/master/doc/sphinxman/source/psiapi.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://mybinder.org/v2/gh/psi4/psi4/56fbc7787af67dabdf1897d0dfe4263d8d97e241?urlpath=lab%2Ftree%2Fdoc%2Fsphinxman%2Fsource%2Fpsiapi.ipynb"
      },
      "source": "https://raw.githubusercontent.com/psi4/psi4/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 442
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/psi4/psi4/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "psi4/psi4"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/psi4/psi4/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/psi4/psi4/master/psi4/share/psi4/basis/primitives/clean.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/psi4/psi4/master/devtools/scripts/ci_run.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/psi4/psi4/master/devtools/scripts/ci_build.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.9893238807654977,
      "result": {
        "original_header": "<img src=\"https://github.com/psi4/psi4media/blob/master/logos-psi4/psi4square.png\" height=150>",
        "type": "Text_excerpt",
        "value": "| **Status** | [![Azure DevOps builds](https://img.shields.io/azure-devops/build/psi4/e80489d7-9619-4512-8e7b-255e355b3ab8/1?logo=azure%20devops)](https://dev.azure.com/psi4/psi4/_build?definitionId=1) [![Codecov coverage](https://img.shields.io/codecov/c/github/psi4/psi4.svg?logo=Codecov&logoColor=white)](https://codecov.io/gh/psi4/psi4) |\n| :------ | :------- |\n| **Latest Release** | [![Last release tag](https://img.shields.io/github/release/psi4/psi4.svg)](https://github.com/psi4/psi4/releases)  [![Commits since release](https://img.shields.io/github/commits-since/psi4/psi4/v1.8.svg)](https://github.com/psi4/psi4/releases/tag/v1.8) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |\n| **Communication** | [![User site](https://img.shields.io/badge/home-Psi4-5077AB.svg)](https://psicode.org/) [![docs latest](https://img.shields.io/badge/docs-latest-5077AB.svg?logo=read%20the%20docs)](https://psicode.org/psi4manual/master/index.html) [![chat on forum](https://img.shields.io/badge/chat-on_forum-808493.svg?logo=Discourse&logoColor=white)](http://forum.psicode.org/) [![dev chat on slack](https://img.shields.io/badge/dev_chat-on_slack-808493.svg?logo=slack)](https://join.slack.com/t/psi4/shared_invite/zt-5s36s4rb-SQH6_AWyfWOqlKYN3cFs4Q) |\n| **Foundation** | [![license](https://img.shields.io/github/license/psi4/psi4.svg)](https://opensource.org/licenses/LGPL-3.0) [![platforms](https://img.shields.io/badge/Platforms-Linux%2C%20MacOS%2C%20MacOS%20Silicon%2C%20Windows%2C%20Windows%20WSL-orange.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |\n| **Installation** | [![obtain latest](https://img.shields.io/badge/obtain-latest-green.svg)](https://psicode.netlify.com/installs/latest) [![Conda](https://img.shields.io/conda/v/conda-forge/psi4.svg)](https://anaconda.org/conda-forge/psi4) [![Anaconda-Server Badge](https://anaconda.org/conda-forge/psi4/badges/latest_release_relative_date.svg)](https://anaconda.org/conda-forge/psi4) |\n| **Demo** | [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/psi4/psi4/56fbc7787af67dabdf1897d0dfe4263d8d97e241?urlpath=lab%2Ftree%2Fdoc%2Fsphinxman%2Fsource%2Fpsiapi.ipynb) | \n* **Users' Website**  www.psicode.org \n* **Downloading and Installing Psi4** https://psicode.org/psi4manual/master/build_faq.html (for the CMake adept, see [CMakeLists.txt](CMakeLists.txt#L27) \n* **Manual**  [http://bit.ly/psi4manual](https://psicode.org/psi4manual/master/index.html) (built nightly from master branch) or https://psicode.org/psi4manual/1.4.0/index.html (last release) \n* **Tutorial** https://psicode.org/psi4manual/master/tutorial.html for Psithon (``psi4 job.in``), https://psicode.org/psi4manual/master/psiapi.html for PsiAPI (``python job.py``) \n* **Forum** http://forum.psicode.org \n* **Communication & Support** https://psicode.org/psi4manual/master/introduction.html#technical-support \n* **GitHub**  https://github.com/psi4/psi4 (authoritative repository) \n* **Continuous Integration Status** [![Azure DevOps builds](https://img.shields.io/azure-devops/build/psi4/e80489d7-9619-4512-8e7b-255e355b3ab8/1/master.svg?logo=azure%20devops)](https://dev.azure.com/psi4/psi4/_build?definitionId=1) on Linux and Windows \n* **Anaconda**  https://anaconda.org/psi4 (binary available for Linux, Mac, Mac Silicon, Windows, and WSL Windows [![Binstar Badge](https://anaconda.org/psi4/psi4/badges/downloads.svg)](https://anaconda.org/psi4/psi4) ) [![Binstar Badge](https://anaconda.org/conda-forge/psi4/badges/downloads.svg)](https://anaconda.org/conda-forge/psi4) ) [instructions](https://psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-with-the-psi4conda-installer-download-site) \n* **Interested Developers**  https://psicode.org/developers.php (replacement page needed) (welcome to fork psi4/psi4 and follow [GitHub contribution procedure](https://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow)) [![PRs welcome](https://img.shields.io/badge/PRs-welcome-yellow.svg)](http://makeapullrequest.com) \n* **Sample Inputs**  http://www.psicode.org/psi4manual/master/testsuite.html (also in [`samples/`](samples)) \n* **Download Tarball** https://github.com/psi4/psi4/releases  \n"
      },
      "source": "https://raw.githubusercontent.com/psi4/psi4/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/psi4/psi4/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "c-plus-plus, chemistry, computational-chemistry, physics, python, quantum-chemistry"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "GNU Lesser General Public License v3.0",
        "spdx_id": "LGPL-3.0",
        "type": "License",
        "url": "https://api.github.com/licenses/lgpl-3.0",
        "value": "https://api.github.com/licenses/lgpl-3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\n  This version of the GNU Lesser General Public License incorporates\nthe terms and conditions of version 3 of the GNU General Public\nLicense, supplemented by the additional permissions listed below.\n\n  0. Additional Definitions.\n\n  As used herein, \"this License\" refers to version 3 of the GNU Lesser\nGeneral Public License, and the \"GNU GPL\" refers to version 3 of the GNU\nGeneral Public License.\n\n  \"The Library\" refers to a covered work governed by this License,\nother than an Application or a Combined Work as defined below.\n\n  An \"Application\" is any work that makes use of an interface provided\nby the Library, but which is not otherwise based on the Library.\nDefining a subclass of a class defined by the Library is deemed a mode\nof using an interface provided by the Library.\n\n  A \"Combined Work\" is a work produced by combining or linking an\nApplication with the Library.  The particular version of the Library\nwith which the Combined Work was made is also called the \"Linked\nVersion\".\n\n  The \"Minimal Corresponding Source\" for a Combined Work means the\nCorresponding Source for the Combined Work, excluding any source code\nfor portions of the Combined Work that, considered in isolation, are\nbased on the Application, and not on the Linked Version.\n\n  The \"Corresponding Application Code\" for a Combined Work means the\nobject code and/or source code for the Application, including any data\nand utility programs needed for reproducing the Combined Work from the\nApplication, but excluding the System Libraries of the Combined Work.\n\n  1. Exception to Section 3 of the GNU GPL.\n\n  You may convey a covered work under sections 3 and 4 of this License\nwithout being bound by section 3 of the GNU GPL.\n\n  2. Conveying Modified Versions.\n\n  If you modify a copy of the Library, and, in your modifications, a\nfacility refers to a function or data to be supplied by an Application\nthat uses the facility (other than as an argument passed when the\nfacility is invoked), then you may convey a copy of the modified\nversion:\n\n   a) under this License, provided that you make a good faith effort to\n   ensure that, in the event an Application does not supply the\n   function or data, the facility still operates, and performs\n   whatever part of its purpose remains meaningful, or\n\n   b) under the GNU GPL, with none of the additional permissions of\n   this License applicable to that copy.\n\n  3. Object Code Incorporating Material from Library Header Files.\n\n  The object code form of an Application may incorporate material from\na header file that is part of the Library.  You may convey such object\ncode under terms of your choice, provided that, if the incorporated\nmaterial is not limited to numerical parameters, data structure\nlayouts and accessors, or small macros, inline functions and templates\n(ten or fewer lines in length), you do both of the following:\n\n   a) Give prominent notice with each copy of the object code that the\n   Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the object code with a copy of the GNU GPL and this license\n   document.\n\n  4. Combined Works.\n\n  You may convey a Combined Work under terms of your choice that,\ntaken together, effectively do not restrict modification of the\nportions of the Library contained in the Combined Work and reverse\nengineering for debugging such modifications, if you also do each of\nthe following:\n\n   a) Give prominent notice with each copy of the Combined Work that\n   the Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the Combined Work with a copy of the GNU GPL and this license\n   document.\n\n   c) For a Combined Work that displays copyright notices during\n   execution, include the copyright notice for the Library among\n   these notices, as well as a reference directing the user to the\n   copies of the GNU GPL and this license document.\n\n   d) Do one of the following:\n\n       0) Convey the Minimal Corresponding Source under the terms of this\n       License, and the Corresponding Application Code in a form\n       suitable for, and under terms that permit, the user to\n       recombine or relink the Application with a modified version of\n       the Linked Version to produce a modified Combined Work, in the\n       manner specified by section 6 of the GNU GPL for conveying\n       Corresponding Source.\n\n       1) Use a suitable shared library mechanism for linking with the\n       Library.  A suitable mechanism is one that (a) uses at run time\n       a copy of the Library already present on the user's computer\n       system, and (b) will operate properly with a modified version\n       of the Library that is interface-compatible with the Linked\n       Version.\n\n   e) Provide Installation Information, but only if you would otherwise\n   be required to provide such information under section 6 of the\n   GNU GPL, and only to the extent that such information is\n   necessary to install and execute a modified version of the\n   Combined Work produced by recombining or relinking the\n   Application with a modified version of the Linked Version. (If\n   you use option 4d0, the Installation Information must accompany\n   the Minimal Corresponding Source and Corresponding Application\n   Code. If you use option 4d1, you must provide the Installation\n   Information in the manner specified by section 6 of the GNU GPL\n   for conveying Corresponding Source.)\n\n  5. Combined Libraries.\n\n  You may place library facilities that are a work based on the\nLibrary side by side in a single library together with other library\nfacilities that are not Applications and are not covered by this\nLicense, and convey such a combined library under terms of your\nchoice, if you do both of the following:\n\n   a) Accompany the combined library with a copy of the same work based\n   on the Library, uncombined with any other library facilities,\n   conveyed under the terms of this License.\n\n   b) Give prominent notice with the combined library that part of it\n   is a work based on the Library, and explaining where to find the\n   accompanying uncombined form of the same work.\n\n  6. Revised Versions of the GNU Lesser General Public License.\n\n  The Free Software Foundation may publish revised and/or new versions\nof the GNU Lesser General Public License from time to time. Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.\n\n  Each version is given a distinguishing version number. If the\nLibrary as you received it specifies that a certain numbered version\nof the GNU Lesser General Public License \"or any later version\"\napplies to it, you have the option of following the terms and\nconditions either of that published version or of any later version\npublished by the Free Software Foundation. If the Library as you\nreceived it does not specify a version number of the GNU Lesser\nGeneral Public License, you may choose any version of the GNU Lesser\nGeneral Public License ever published by the Free Software Foundation.\n\n  If the Library as you received it specifies that a proxy can decide\nwhether future versions of the GNU Lesser General Public License shall\napply, that proxy's public statement of acceptance of any version is\npermanent authorization for you to choose that version for the\nLibrary.\n"
      },
      "source": "https://raw.githubusercontent.com/psi4/psi4/master/cmake/math/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License <a href=\"https://opensource.org/licenses/LGPL-3.0\"><img alt=\"license\" src=\"https://img.shields.io/github/license/psi4/psi4.svg\" /></a>",
        "type": "Text_excerpt",
        "value": "=======\n\nPsi4: an open-source quantum chemistry software package\n\nCopyright (c) 2007-2024 The Psi4 Developers.\n\nThe copyrights for code used from other parties are included in\nthe corresponding files.\n\nPsi4 is free software; you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, version 3.\n\nPsi4 is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License along\nwith Psi4; if not, write to the Free Software Foundation, Inc.,\n51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nThe full text of the GNU Lesser General Public License (version 3) is included in the\nCOPYING.LESSER file of this repository, and can also be found\n[here](https://www.gnu.org/licenses/lgpl.txt).\n\n"
      },
      "source": "https://raw.githubusercontent.com/psi4/psi4/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/psi4/psi4media/master/logos-psi4/psi4square.png"
      },
      "source": "https://raw.githubusercontent.com/psi4/psi4/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "psi4"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "psi4"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 26745621,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 12723555,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 268185,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 239294,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Roff",
        "size": 56040,
        "type": "Programming_language",
        "value": "Roff"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 28907,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "SWIG",
        "size": 4757,
        "type": "Programming_language",
        "value": "SWIG"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Batchfile",
        "size": 1272,
        "type": "Programming_language",
        "value": "Batchfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 812,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/psi4/psi4/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "loriab",
          "type": "User"
        },
        "date_created": "2024-02-08T21:08:51Z",
        "date_published": "2024-02-09T06:40:30Z",
        "description": "Advertised Version: 1.9.1\r\nContinuous Version: 1.9.1\r\nRelease Date: 8 February 2024\r\nDocumentation: https://psicode.org/psi4manual/1.9.x\r\nAvailability: Public, GitHub source, CMake build, [Conda binary installers](https://psicode.netlify.com/installs/v191/), [Docker](https://hub.docker.com/r/psi4/psi4/tags?page=1&name=1.9.1)\r\nSpan: 5 PRs\r\n\r\n## Conda Package Updates\r\n* use pytest v7, as v8 is broken for psi4\r\n* #3107 prefer libint v2.8 (`conda install libint -c conda-forge`) over development (`-c conda-forge/label/libint_dev`) and psi4-stored builds\r\n* #3103 refine libxc minimum to v6.1.0\r\n\r\n## Bug Fixes\r\n* #3130 fixes symbols list for AM>=12\r\n* #3127 fixes import when $HOME directory is symlinked\r\n* #3097 Fix Python3 compatibility in vmd_cube.py\r\n",
        "html_url": "https://github.com/psi4/psi4/releases/tag/v1.9.1",
        "name": "v1.9.1, 2024-02-08",
        "release_id": 140712126,
        "tag": "v1.9.1",
        "tarball_url": "https://api.github.com/repos/psi4/psi4/tarball/v1.9.1",
        "type": "Release",
        "url": "https://api.github.com/repos/psi4/psi4/releases/140712126",
        "value": "https://api.github.com/repos/psi4/psi4/releases/140712126",
        "zipball_url": "https://api.github.com/repos/psi4/psi4/zipball/v1.9.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "loriab",
          "type": "User"
        },
        "date_created": "2023-12-06T06:06:05Z",
        "date_published": "2023-12-07T03:51:51Z",
        "description": "Advertised Version: 1.9.0 \r\nContinuous Version: 1.9.0 \r\nRelease Date: 6 Dec 2023 \r\nDocumentation: https://psicode.org/psi4manual/1.9.x/ . \r\nAvailability: Public, GitHub source, CMake build, [Conda binary installers](https://psicode.netlify.app/installs/v19/), [Docker](https://hub.docker.com/r/psi4/psi4/tags) Span: [79 PRs](https://github.com/psi4/psi4/milestone/10?closed=1)\r\n\r\n## Required Dependency Changes (3 PRs)\r\n[#3022](https://github.com/psi4/psi4/pull/3022): Updates QCEngine to v0.28\r\n[#2968](https://github.com/psi4/psi4/pull/2968): Updates gdma to v2.3 and switches gdma usage to be selectable at runtime\r\n[#3090](https://github.com/psi4/psi4/pull/3090): Updates QCFractal to v0.52\r\n#2842 Bump Libxc minimum from v5.1.2 to v6\r\n\r\n## New Methods (6 PRs)\r\n[#2992](https://github.com/psi4/psi4/pull/2992): Adds support for computation of analytic Hessians when using unrestricted DFT with LDA functionals\r\n[#3039](https://github.com/psi4/psi4/pull/3039): adds fitted SAP guess described in J. Chem. Phys. 152, 144105 (2020) and accessed through set guess sapgau (backported to v1.8.2) \r\n[#3002](https://github.com/psi4/psi4/pull/3002) / [#3011](https://github.com/psi4/psi4/pull/3011): Implements new option for GUESS keyword, MODHUCKEL, using a Huckel guess computed on-the-fly using atomic UHF and a modification to the generalized Wolfsberg-Helmholz formula from doi:10.1021/ja00480a005 \r\n[#2982](https://github.com/psi4/psi4/pull/2982): Adds the ability to construct basis sets from combinations of two constituent basis sets, via either a simple combination or through the Complementary Auxiliary Basis Set (CABS) method\r\n[#2842](https://github.com/psi4/psi4/pull/2842): Adds new composite methods r2SCAN-3c, wB97X-3c, and B97-3c, and new density functionals r2SCAN0, r2SCANh, and r2SCAN50 and their -D4 variants. Some of these require recent versions of dftd4-python, dftd3-python (s-dftd3), gcp-correction (aka mctc-gcp), all from the conda-forge channel. The \"classic\" dftd3 (executable) and gcp from the psi4 channel still work for many methods (e.g., b3lyp-d3) and aren't disabled but are no longer supported.\r\n\r\n## External Libraries (1 PR)\r\n[#3050](https://github.com/psi4/psi4/pull/3050): Adds Einsums library to build system as an optional dependency\r\n\r\n\r\n## Breaking Changes (1 PR)\r\n[#2974](https://github.com/psi4/psi4/pull/2974): Using the ERISieve class now throws an UpgradeHelper exception: `ERISieve.build(orbital_basis, cutoff, do_csam)` --> `factory = psi4.core.IntegralFactory(basis); factory.eri(0)`\r\n#3095 The old versions of `variable`/`set_variable` (e.g., `get_variable`, `arrays`) have been warning-and-forwarding since v1.4 but now raise an UpgradeHelper.\r\n\r\n## Performance Optimizations (5 PRs)\r\n [#3064](https://github.com/psi4/psi4/pull/3064): Improves performance of call to \u201cpsi4 \u2013version\u201d, especially for networked drives \r\n[#2851](https://github.com/psi4/psi4/pull/2851): Improves memory usage of DLPNO-MP2 by better exploiting PAO sparsity during computation of DF integrals \r\n[#2994](https://github.com/psi4/psi4/pull/2994) / [#2996](https://github.com/psi4/psi4/pull/2996): Refactors UHF Hessian code to avoid redundant recomputation of intermediates required in both alpha- and beta-spin components of the calculation \r\n[#3080](https://github.com/psi4/psi4/pull/3080): Disable unnecessary computation of FDDS dispersion for SAPT(DFT) when the DFT functional is set to HF\r\n\r\n## Details of Interest (30 PRs)\r\n#3095 Allow running a a GRID_ESP or GRID_FIELD property through qcschema. need to pass in grid.dat contents through atin.extras[\"extra_infiles\"] = {\"grid.dat\": <contents>} and be sure to atin.protocols.native_files = \"all\", then one can retrieve through atres.native_files[\"grid_esp.dat\"] or \"grid_field.dat\" closes https://github.com/psi4/psi4/issues/2307\r\n[#2955](https://github.com/psi4/psi4/pull/2955), [#3055](https://github.com/psi4/psi4/pull/3055): Adds new \u201cSplitJK\u201d backend for composite SCF_TYPE combinations \r\n[#3001](https://github.com/psi4/psi4/pull/3001): Composite SCF_TYPE methods can now be specified using only a J algorithm for non-hybrid DFT calculations \r\n[#3024](https://github.com/psi4/psi4/pull/3024) / [#3026](https://github.com/psi4/psi4/pull/3026): Cleans up multiple libmints classes, including SOBasis and PetiteList, to use std::vector objects instead of manual memory management \r\n[#2969](https://github.com/psi4/psi4/pull/2969): Improves printout of thermochemical property information derived from vibrational analyses \r\n[#2937](https://github.com/psi4/psi4/pull/2937): Changes the BasisSet::print_detail_cfour() function in multiple ways, including using C++-style printout options and string manipulations, using more kocher floating-point comparison methods, and fixing broken URL links\r\n[#2995](https://github.com/psi4/psi4/pull/2995), [#3035](https://github.com/psi4/psi4/pull/3035) : Fixes documentation regarding Hirshfeld volume ratios for one-electron properties and exchange term scaling via the S^2 approximation\r\n[#3027](https://github.com/psi4/psi4/pull/3027): Encapsulates acquisition of physical constants (e.g., Bohr/Angstrom conversion factor) data via QCElemental from a single import in constants.py\r\n[#3017](https://github.com/psi4/psi4/pull/3017): Updates sapt_psivars() docstring in psivardefs.py to more clearly explain the function \r\n[#3029](https://github.com/psi4/psi4/pull/3029): Adds clarifying details to the export docstrings for fix_orientation and fix_com functions in export_mints.cc\r\n[#2975](https://github.com/psi4/psi4/pull/2975): Adds missing LibXC citation to documentation\r\n[#3018](https://github.com/psi4/psi4/pull/3018): Cleans up broken links and deprecated functions in psiapi Jupyter notebook\r\n[#3005](https://github.com/psi4/psi4/pull/3005): Adds clarifying details to cubature.cc code regarding the Chebyshev quadrature implementation\r\n[#3078](https://github.com/psi4/psi4/pull/3078): Refines build process for Libint2 code generator\r\n[#2953](https://github.com/psi4/psi4/pull/2953): Deprecate assignment-from-int* and cast-to-int* operations for the Dimension object, and make multiple significant improvements to the Dimension object under the hood \r\n[#2987](https://github.com/psi4/psi4/pull/2987): Adds capability to acquire more types of F12 integrals Python-side with basis set quadruplets\r\n[#2966](https://github.com/psi4/psi4/pull/2966): Update README display badges and binder demo, and fix bug in serial quick_not_d2ints test\r\n[#3056](https://github.com/psi4/psi4/pull/3056) / [#3058](https://github.com/psi4/psi4/pull/3058): Alters internal handling of documentation building to more effectively handle storage of documentation snapshots of previous code versions \r\n[#2961](https://github.com/psi4/psi4/pull/2961) / [#2979](https://github.com/psi4/psi4/pull/2979): Updates dependencies within Azure CI execution on Windows, and makes general improvements to such execution\r\n[#3059](https://github.com/psi4/psi4/pull/3059): Cleans up documentation regarding management of Psi4 releases \r\n[#3088](https://github.com/psi4/psi4/pull/3088)  Removes unnecessary macros kept over from previous usage of Boost, and never removed\r\n[#3049](https://github.com/psi4/psi4/pull/3049): Fixes up code to support Python 3.12 and more modern versions of QCFractal \r\n[#3079](https://github.com/psi4/psi4/pull/3079): Updates documentation regarding usage of composite JK methods and COSX grid defaults\r\n[#3081](https://github.com/psi4/psi4/pull/3081): Sets broken combinations of SCF type and screening method to throw exceptions \r\n[#3087](https://github.com/psi4/psi4/pull/3087): Adds the capability to compute and retrieve gradients with respect to embedded point charges in external potential calculations\r\n[#3053](https://github.com/psi4/psi4/pull/3053): Reworks internal documentation building process to fix broken Psicode redirects and enable capabilities with new Sphinx themes\r\n\r\n## Conda Package Updates\r\nincludes PCMSolver (backported to v1.8.1)\r\nincludes libECPInt (build _2 onwards; not present for osx-arm64 with py != 3.10 in build _1 or _0) (backported to v1.8.1)\r\nincludes files so psi4 --plugin-compile from Linux and Mac can work off the conda binary compatible with pydantic v1 or v2 in build _2 (backported to v1.8.1)\r\n\r\n## Features (11 PRs)\r\n[#2999](https://github.com/psi4/psi4/pull/2999) / [#3019](https://github.com/psi4/psi4/pull/3019): still using pydantic v1 API, but now tolerant of a v1 or v2 pydantic environment. (this was already present by patch in build _2 of v1.8.1 on conda-forge.) (backported to v1.8.2)\r\n[#3013](https://github.com/psi4/psi4/pull/3013): allow passing protocols, tag, owner_group, and priority to QCArchive-enabled runs in the distributed driver. Works with qcfractal>=0.50. (backported to v1.8.2)\r\n[#2978](https://github.com/psi4/psi4/pull/2978): Adds new pytest module, test_comprehensive_jk_screening.py, to thoroughly test different combinations of SCF_TYPE, SCF_SUBTYPE, and SCREENING keywords\r\n[#2973](https://github.com/psi4/psi4/pull/2973): Adds new keyword option for SCREENING, SCREENING=NONE, to disable ERI screening entirely \r\n[#2981](https://github.com/psi4/psi4/pull/2981): Adds new keyword, COSX_MAXITER_FINAL, to control how many SCF iterations are performed on the final COSX grid\r\n[#3061](https://github.com/psi4/psi4/pull/3061): Makes Psi4 API compliant with the C++20 standard \r\n[#2983](https://github.com/psi4/psi4/pull/2983): Add clarifying comment to xhost.cmake file\r\n[#3052](https://github.com/psi4/psi4/pull/3052): Fixes Issue [#3040](https://github.com/psi4/psi4/issues/3040) by internally tracking per-iteration SCF energies and adding/modifying tests in test_scf_options.py for testing initial guess energies with different options\r\n[#3021](https://github.com/psi4/psi4/pull/3021): Revamps the psi4-path-advisor build assistant functionality for Psi4 and add yaml file listing Psi4 dependencies in a programmatically accessible fashion \r\n[#2967](https://github.com/psi4/psi4/pull/2967): Adds support for implicit solvation in linear response and time-dependent SCF calculations via the DDX library \r\n\r\n## Bug Fixes (19 PRs)\r\n[#2963](https://github.com/psi4/psi4/pull/2963): fixes correctness bug in LPB routine with pyddx; now requires >= v0.4.2 9 (backported to v1.8.1) \r\n[#2984](https://github.com/psi4/psi4/pull/2984): avoids segfaulting in DFHelper if molecule given a name with a slash in it (backported to v1.8.1)\r\n[#2988](https://github.com/psi4/psi4/pull/2988): adjusts wavefunction plugin template for new doccpi syntax (backported to v1.8.1)\r\n[#2972](https://github.com/psi4/psi4/pull/2972): adjusts file handling so PCMSolver can work on Windows (backported to v1.8.1) \r\n[#3007](https://github.com/psi4/psi4/pull/3007): adjusts threading test for libomp/libiomp5 equivalence on c-f (backported to v1.8.1)\r\n[#3008](https://github.com/psi4/psi4/pull/3008): avoids requiring pytest for DFT dispersion calcs (backported to v1.8.1) \r\n[#2997](https://github.com/psi4/psi4/pull/2997): prints full PSIO error messages to cerr, too (backported to v1.8.1)\r\n[#3037](https://github.com/psi4/psi4/pull/3037): fixes BasisSet.n_prim_per_shell_ never populated and refactors shell formation in BasisSet. (backported to v1.8.2)\r\n[#3043](https://github.com/psi4/psi4/pull/3043) / [#3044](https://github.com/psi4/psi4/pull/3044) - fixes bug resulting in UnicodeDecodeError and corrupted timer.dat files, especially on systems with long hostnames. (backported to v1.8.2)\r\n[#3048](https://github.com/psi4/psi4/pull/3048): fixes links to QCElemental and QCEngine functions in documentation. (backported to v1.8.2)\r\n[#2931](https://github.com/psi4/psi4/pull/2931): Fixes Issue [#2890](https://github.com/psi4/psi4/issues/2890), causing COSX to crash when grids with negative weights were used\r\n[#3033](https://github.com/psi4/psi4/pull/3033): Fixes multiple circular import issues and generally cleans up Psi4 import calls \r\n[#2986](https://github.com/psi4/psi4/pull/2986) : Fixes Issue [#2985](https://github.com/psi4/psi4/issues/2985), where one-electron integrals would be returned to the user in different formats (e.g., full symmetric matrix vs. lower triangular representation) depending on function and input parameters \r\n[#2977](https://github.com/psi4/psi4/pull/2977): Fixes Issue [#2976](https://github.com/psi4/psi4/issues/2976), where DF-MP2 would crash for very small systems \r\n[#3086](https://github.com/psi4/psi4/pull/3086): Fixes Issue [#3085](https://github.com/psi4/psi4/issues/3085), where the \u201cmbis_volume_ratios\u201d keyword as an input to oeprop() was case-sensitive, leading to different behavior based on the case of the argument \r\n[#3082](https://github.com/psi4/psi4/pull/3082): Fixes Psi4 forum issue [#2979](https://forum.psicode.org/t/dispersion-gradients/2979), where printout of dispersion gradients was not labeled properly\r\n[#3023](https://github.com/psi4/psi4/pull/3023): Fixes issues with redirects in documentation hosted on Psicode.org, and updates WIndows build dependencies\r\n[#3089](https://github.com/psi4/psi4/pull/3089): Fixes issue in build introduced by CMake policy 0144 for old versions of CMake \r\n\r\n## Known Bugs\r\n- Find them and tell us\r\n- Watch out for deep periodic table ECP, as there's errors suspected\r\n\r\n## Contributors to v1.9\r\n@andyj10224, @Awallace3, @carolinesargent, @CDSherrill, @davpoolechem, @EricaCMitchell, @fevangelista,  @hokru, @johnppederson, @JonathanMisiewicz, @loriab, @lukekurfman, @mfherbst, @phillipmnel, @susilehtola, @TiborGY, @zachglick",
        "html_url": "https://github.com/psi4/psi4/releases/tag/v1.9",
        "name": "v1.9, 2023-12-06",
        "release_id": 132956221,
        "tag": "v1.9",
        "tarball_url": "https://api.github.com/repos/psi4/psi4/tarball/v1.9",
        "type": "Release",
        "url": "https://api.github.com/repos/psi4/psi4/releases/132956221",
        "value": "https://api.github.com/repos/psi4/psi4/releases/132956221",
        "zipball_url": "https://api.github.com/repos/psi4/psi4/zipball/v1.9"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "loriab",
          "type": "User"
        },
        "date_created": "2023-10-04T05:20:19Z",
        "date_published": "2023-10-04T16:38:16Z",
        "description": "Advertised Version: 1.8.2\r\nContinuous Version: 1.8.2\r\nRelease Date: 3 October 2023\r\nDocumentation: https://psicode.org/psi4manual/1.8.x/ . Use #2965 for build documentation.\r\nAvailability: Public, GitHub source, CMake build, DNE [Conda binary installers](https://psicode.netlify.com/installs/v182/), DNE Docker\r\nSpan: 7 PRs\r\n\r\n<!-- ## Conda Package Updates -->\r\n\r\n## Features\r\n* #3019 still using pydantic v1 API, but now tolerant of a v1 or v2 pydantic environment. (this was already present by patch in build `_2` of v1.8.1 on conda-forge.)\r\n* #3039 adds fitted SAP guess described in [J. Chem. Phys. 152, 144105 (2020)](https://doi.org/10.1063/5.0004046) and accessed through `set guess sapgau`\r\n* #3013 allow passing `protocols`, `tag`, `owner_group`, and `priority` to QCArchive-enabled runs in the distributed driver. Works with `qcfractal>=0.50`.\r\n\r\n## Bug Fixes\r\n* #3037 fixes `BasisSet.n_prim_per_shell_` never populated and refactors shell formation in `BasisSet.`\r\n* #3043/#3044 fixes bug resulting in `UnicodeDecodeError` and corrupted `timer.dat` files, especially on systems with long hostnames.\r\n* #3048 fixes links to QCElemental and QCEngine functions in documentation.\r\n\r\n",
        "html_url": "https://github.com/psi4/psi4/releases/tag/v1.8.2",
        "name": "v1.8.2, 2023-10-03",
        "release_id": 123717758,
        "tag": "v1.8.2",
        "tarball_url": "https://api.github.com/repos/psi4/psi4/tarball/v1.8.2",
        "type": "Release",
        "url": "https://api.github.com/repos/psi4/psi4/releases/123717758",
        "value": "https://api.github.com/repos/psi4/psi4/releases/123717758",
        "zipball_url": "https://api.github.com/repos/psi4/psi4/zipball/v1.8.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "loriab",
          "type": "User"
        },
        "date_created": "2023-07-12T22:30:31Z",
        "date_published": "2023-07-13T20:50:05Z",
        "description": "Advertised Version: 1.8.1\r\nContinuous Version: 1.8.1\r\nRelease Date: 13 July 2023\r\nDocumentation: https://psicode.org/psi4manual/1.8.x/ . Use #2965 for build documentation.\r\nAvailability: Public, GitHub source, CMake build, DNE [Conda binary installers](https://psicode.netlify.com/installs/v181/), DNE Docker\r\nSpan: 7 PRs\r\n\r\n## Conda Package Updates\r\n* includes PCMSolver\r\n* includes libECPInt (build `_2` onwards; not present for osx-arm64 with py != 3.10 in build `_1` or `_0`)\r\n* includes files so `psi4 --plugin-compile` from Linux and Mac can work off the conda binary\r\n* compatible with pydantic v1 or v2 in build `_2`\r\n\r\n## Bug Fixes\r\n* #2963 fixes correctness bug in LPB routine with pyddx; now requires >= v0.4.2\r\n* #2984 avoids segfaulting in DFHelper if molecule given a name with a slash in it\r\n* #2988 adjusts wavefunction plugin template for new doccpi syntax\r\n* #2972 adjusts file handling so PCMSolver can work on Windows\r\n* #3007 adjusts threading test for libomp/libiomp5 equivalence on c-f\r\n* #3008 avoids requiring pytest for DFT dispersion calcs\r\n* #2997 prints full PSIO error messages to cerr, too\r\n",
        "html_url": "https://github.com/psi4/psi4/releases/tag/v1.8.1",
        "name": "v1.8.1, 2023-07-13",
        "release_id": 112126551,
        "tag": "v1.8.1",
        "tarball_url": "https://api.github.com/repos/psi4/psi4/tarball/v1.8.1",
        "type": "Release",
        "url": "https://api.github.com/repos/psi4/psi4/releases/112126551",
        "value": "https://api.github.com/repos/psi4/psi4/releases/112126551",
        "zipball_url": "https://api.github.com/repos/psi4/psi4/zipball/v1.8.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "loriab",
          "type": "User"
        },
        "date_created": "2023-05-11T09:55:17Z",
        "date_published": "2023-05-17T02:54:51Z",
        "description": "Advertised Version: 1.8\r\nContinuous Version: 1.8\r\nRelease Date: 11 May 2023\r\nDocumentation: https://psicode.org/psi4manual/1.8.x/ . Use https://github.com/psi4/psi4/issues/2965 for build documentation.\r\nAvailability: Public, GitHub source, CMake build, [Conda binary installers](https://psicode.netlify.com/installs/v18/), [Docker](https://hub.docker.com/layers/psi4/psi4/1.8.0/images/sha256-c3a0e7c2e7b6d226c1312ab350977eed035b913ac6117ab64a35ddc167c75fdc?context=explore)\r\nSpan: [78 PRs](https://github.com/psi4/psi4/milestone/9?closed=1)\r\n\r\n## Required Dependency Changes\r\n* See External Libraries below for dependency bumps.\r\n* Boost header-only libraries for compiling against Libint2. This isn't a change to Psi4 or to Libint2; it's just a change to how Libint2 was packaged.\r\n\r\n## New Methods\r\n\r\n* Stability analysis is now supported for unrestricted GGAs. (#2849)\r\n* TDDFT is now supported for unrestricted GGAs. (#2849)\r\n* Triplet TDDFT excitations from RKS are now supported for LDA and GGA functionals. (#2885)\r\n* Implementation of new linker functionalities in intramolecular SAPT (ISAPT) as published in https://doi.org/10.1021/acs.jpca.2c06465 . (#2899, #2950, #2956) \r\n\r\n## External Libraries\r\n\r\n* QCFractal/QCArchive: Continue supporting last official release of QCFractal v0.15.8 and the imminent \"next\" branch v0.50b10 (available from `-c qcarchive/label/next`). Demonstrate `get_psi_results` to make QCFractal runs behave more like serial runs. (#2835, #2929, #2939)\r\n* BSE: Add capability to use basis sets from the Basis Set Exchange when new optional dependency `basis_set_exchange` present. Basis sets can be specified with version or without (latest): `bse:def2-tzvp` or `bse:def2-tzvp:0` and in `set` or `assign` statements, `set basis bse:sto-3g`. Note that at the moment, you should specify any aux basis sets or Psi4 will fall back to the universal def2-*qz* aux. (#2905)\r\n* DDX: The interface for the pyddx library for continuum solvation is extended by support for the linearized Poisson-Boltzmann model (LPB). NOTE: There is a bug in this as of 1.8.0, but it's already fixed in master (#2963 and pyddx v0.4.3) and will be released in 1.8.1. (#2918, #2952, #2940, #2921)\r\n* ADCC: After bugfixes upstream, use >=0.15.16 and reconcile ref data. (#2944, #2942)\r\n* PCMSolver: Update to v1.2.3 (#2903)\r\n* Libint2: Psi4 now uses a Libint configured to entirely standard CCA orderings (sss) but that can switch to Psi4's usual order (gss) at runtime, so no change in internal ordering. This isn't in upstream Libint, so we're still on a branch and binary packages need `-c conda-forge/label/libint_dev`. If you build from source, you'll get an AM5-generated Libint, but if you specify CMake `MAX_AM_ERI=6` (or higher), you'll get an AM7-generated Libint. (#2861)\r\n\r\n## Contributors to v1.8\r\n\r\n@AlexHeide, @andyj10224, @bennybp, @davpoolechem, @dluu12, @hmacdope, @JonathonMisiewicz, @konpat, @loriab, @lukekurfman, @maxscheurer, @mfherbst, @philipmnel, @q-posev, @TiborGY\r\n\r\n## Breaking Changes\r\n\r\n* Replace `SCF_TYPE=COSX` by `DFDIRJ+COSX`. (#2833)\r\n* Replace `SCF_TYPE=LINK` by `DFDIRJ+LINK`. (#2833)\r\n\r\n## Performance Optimizations\r\n\r\n* Enable UKS gradient threading. (#2839, #2941, #2945, #2941)\r\n* Significant acceleration of the calculation of ESP over grid in memory, now without a race condition. (#2891)\r\n\r\n## Details of Interest\r\n\r\n* Better document DFT code. LSDA gradient (#2839). compute_V, compute_Vx up to GGA and compute_gradient up to LDA (#2863).\r\n* Alpha and beta densities now screened together, so RKS and closed-shell UKS now screen out the same points. The Hermiticity of the UKS energy Hessian should now be restored. (#2834)\r\n* The screen-summed density cutoff for the second derivative is no longer independent DFT_V2_RHO_CUTOFF but now defaults to DFT_DENSITY_TOLERANCE which in turn defaults to the Libxc value. (#2834)\r\n* For memory safety, return integrals as `unique_ptr`s, not raw pointers. (#2775, #2493, #2855)\r\n* Remove deprecated code:\r\n  * Old c-side NBOWriter. (#2856)\r\n  * `Matrix.diagonalize` overloads. (#2837, #2693)\r\n  * Function `rsp` diagonalizer and supporting functions tqli and tred2. (#2838)\r\n  * Selections from libqt/ras_set.cc and declarations of int* get_frzcpi() and int* get_frzvpi() from qt.h. (#2814)\r\n  * Fortran, C and C++ style wrappers for DGEGS, DGEGV, DGELSX, DGEQPF, DGGSVD, DGGSVP and DTZRQF are removed. (#2823)\r\n  * Psi4 now requires the LAPACK library to provide DGGSVD3 and DGGSVP3. (#2823)\r\n  * Remove unused diagonalizers and linear solvers from dfocc. (#2684)\r\n  * Remove unused Davidson solver from detci. (#2925)\r\n  * Remove unused `normalize` and `schmidt_add` from libqt. (#2927)\r\n  * Remove unused `sq_rsp` (after much work replacing its dependents. (#2928)\r\n* Improve ECP testing and enable MP2 ECP gradients. (#2836)\r\n* Provided a more informative error message when SAD crashes due to an atom having more core electrons than basis functions. (#2859, #2853)\r\n* Rename for clarification `build_disp_functor`->`build_functional_and_disp`. (#2874)\r\n* Add DAXPBY blas call and Vector method. For BLAS implementations that don't have it (i.e., Apple Accelerate), reroute through DAXPY. (#2887, #2895)\r\n* Add `build_polarized` function to create a polarized (UKS) version of an unpolarized (RKS) functional. Needed for triplet derivatives. (#2888)\r\n* The HF base class has been weakened from having a std::shared_ptr<VBase> potential_ to having an accessor method, get_potential(). (#2889)\r\n* The COSX method uses a grid, and some grids have points with negative weights. Suggest the user change the grid rather than segfaulting. (#2890)\r\n* Usually SCF_TYPE=DF selects the best algorithm between MemDF and DiskDF and the best subalgorithm for each between incore and out-of-core. Users have always been able to specify the algorithm with SCF_TYPE. Now they can specify the subalgorithm with SCF_SUBTYPE (useful for profiling). For SCF_TYPE=PK, SCF_SUBTYPE also allows specifying incore or two out-of-core subalgorithms (replacing removed keywords PK_INCORE and PK_ALGO). (#2848, #2924, #2926)\r\n* If you call `psi4.set_output_file()` (note that this is the usual fancy one, not the low-level `psi4.core.set_output_file()`), that file will now have a psi4 header so suitable for cclib parsing. (#2932, #2893)\r\n* If you don't want psi4 managing the logging, `psi4 --inherit-loglevel` or `psi4.set_output_file(..., inherit_loglevel=True)` prevents psi4 from resetting the log level, even to default. (#2932)\r\n* Add CMake options `psi4_SKIP_ENABLE_FORTRAN` and `psi4_INSTALL_CMAKEDIR` to sidestep Fortran compiler detection when linking Fortran addons and to specify the psi4Config.cmake install location, respectively. (#2946)\r\n* Deprecate ERISieve. (#2935)\r\n* Implement `CompositeJK` class such that J or K algorithms can live in their own class and be combined at runtime. Users call with \"<Jalg>+<Kalg>\". (#2833, #2954)\r\n* Conventional (non-DF) ccsd(t) gradients will now proceed as finite-difference calculations, which are much more memory efficient. If you still want to access the analytic gradients, add `set qc_module ccenergy`. (#2943, #2913)\r\n* Add CMake option `psi4_SHGAUSS_ORDERING` to use sss (all CCA standard orderings) *internally*. Expert only! See notes at PR. (#2949, #2537)\r\n* Psi4 works with next-gen Intel compilers icpx and now uses c++17 standard throughout. (#2861)\r\n\r\n## Bug Fixes\r\n\r\n* Fixes obvious bug in UV::compute_X. (#2832)\r\n* Fixes orbital read for finite difference Hessian by only passing `write_orbitals=True` for the reference geometry. (#2827)\r\n* Fixes DLPNO-MP2 segfault with Cartesian basis sets by fixing bug in `PointsFunction` class. (#2840)\r\n* Fixes a bug causing crashes upon linearly dependent basis sets for some correlated methods. (#2857)\r\n* Fixes a bug disabling non-orbital optimized DCT with spin restriction. (#2860)\r\n* Fixes `Atom not in list` bug with geometric optimizer when using 2-letter elements. (#2872, #2871)\r\n* Fixes very minor bug where functionals created by dictionary weren't printing the Libxc citation. (#2877, #2867)\r\n* Fixes bug where optimize(..., engine=\"geometric\", molecule=mol) would not run. (#2929)\r\n* Fixes bug where FSAPT with an external potential and without no_com/no_reorient set would return wrong answer. (#2934)\r\n* Fixes obscure case (i.e., Windows normal or Unix elaborate use of CMAKE_INSTALL_*DIR) where the buildsystem install layout was more flexible than the paths glue in `bin/psi4` or `psi4.__init__.py`. (#2948) \r\n* Fixes a difference in definitions so that `wfn.Fa_subset` and `wfn.Fb_subset` now return the correct matrices in the MO basis. (#2958, #1989)\r\n\r\n## Known Bugs\r\nSearch 2918 above. Otherwise, find them and tell us.\r\n\r\n<!-- ## Skipped\r\n#2829, #2843, #2845, #2852, #2854, #2864, #2876, #2881, #2886, #2907,\r\n#2908, #2917, #2922, #2804, #2947, #2957, #2902, #2959\r\n-->\r\n",
        "html_url": "https://github.com/psi4/psi4/releases/tag/v1.8",
        "name": "v1.8, 2023-05-11",
        "release_id": 103032183,
        "tag": "v1.8",
        "tarball_url": "https://api.github.com/repos/psi4/psi4/tarball/v1.8",
        "type": "Release",
        "url": "https://api.github.com/repos/psi4/psi4/releases/103032183",
        "value": "https://api.github.com/repos/psi4/psi4/releases/103032183",
        "zipball_url": "https://api.github.com/repos/psi4/psi4/zipball/v1.8"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "loriab",
          "type": "User"
        },
        "date_created": "2022-12-06T22:12:57Z",
        "date_published": "2022-12-07T04:51:27Z",
        "description": "Advertised Version: 1.7\r\nContinuous Version: 1.7\r\nRelease Date: 6 Dec 2022\r\nNYI Documentation: https://psicode.org/psi4manual/1.7.0/\r\nAvailability: Public, GitHub source, CMake build, NYI [Conda binary installers](https://psicode.netlify.com/installs/v17/)\r\nSpan: [141 PRs](https://github.com/psi4/psi4/milestone/8?closed=1)\r\n\r\n## Required Dependency Changes\r\n\r\n## New Methods\r\n\r\n* Hybrid perturbative methods REMP (https://doi.org/10.1063/1.5086168) and OO-REMP (https://doi.org/10.1021/acs.jctc.1c00280) with `cc_type = CONV/DF/CD`. REMP is essentially a hybrid between MP and CEPA(0) rewritten as perturbation theory (https://doi.org/10.1016/j.cplett.2006.07.081). REMP2 energies and OREMP2 energies and non-CD gradients are available. (#2354, #2653, #2670)\r\n* UHF non-orbital-optimized, non-FNO coupled cluster methods: DF/CD energies and DF gradients for UHF CCD/CCSD are available. (#2739)\r\n* Implementation of PCM and COSMO solvation models based on the ddx library. (#2767)\r\n\r\n## External Libraries\r\n\r\n* Works with geomeTRIC v1.0 rather than longstanding v0.9.7. (#2750)\r\n* Internal ADC module removed. External ADCC v0.15.13 module covers its capabilities and more. (#2737, #2785)\r\n* Works with Libxc v5 or v6. (#2815, #2817)\r\n* Replace internal C++ geometry optimizer, optking, with an external Python module. (#2727)\r\n  * Most inputs should continue to work as before.\r\n  * The fixed_* optimization keywords have been changed to ranged_* options.\r\n  * Optimizer output will be changed. Check output.dat for simple convergence/step info and output.log for detailed info.\r\n  * IRC convergence behavior different for minima and substep.\r\n  * Note that this is a new *required* dependency.\r\n* Interface to the ddx library for solvation. (#2767)\r\n* Additionally support the next branch of QCArchive with the distributed driver, as well as the longstanding v0.15.8 (#2821)\r\n* Upstream maintained and developed software for Grimme empirical dispersion corrections is now interfaced. The longstanding slight forks maintained by Psi4 folks still work and will be maintained until there's a reason not to. All are still run through QCEngine. Psi4 chooses automatically based on what's detected, so no change to input files needed. Package names and locations are a little different -- see table at PR or in docs. (#2791, #2360)\r\n\r\n## Contributors to v1.7\r\n\r\n@AlexHeide, @andyj10224, @aquaticseatard, @behnle, @bozkaya, @davpoolechem, @JonathonMisiewicz, @JoshRackers, @lazaroid, @loriab, @psi-rking, @maxscheurer, @mfherbst, @philipmnel, @sashashura, @susilehtola, @tallakahath, @TiborGY, @yxie326, @zachglick\r\n\r\n## Breaking Changes\r\n\r\n* MRCC now called with `set qc_module mrcc` rather than \"mr\" prefix onto method. (#2731)\r\n* Arbitrary-order MPn no longer runable with ROHF. Arbitrary-order ZAPTn no longer runable with RHF. Use MPn for RHF and ZAPTn for ROHF. (#2731)\r\n* Downstream plugin users who were still getting wfn from globals will find it has now departed. Please follow the advice it's been issuing for years to do wfn passing. (#2727)\r\n\r\n## Performance Optimizations\r\n\r\n* Improves convergence of DF & CD orbital-optimized methods by implementing coupled DIIS for dfocc module. Can now converge tightly. (#2354, #2669)\r\n* Optimizes the integral transformation step of SAPT(DFT) where the transformed MO is written to disk. (#2481)\r\n* Running wavefunction SAPT0 through the SAPT(DFT) procedure now avoids redundant SCF calculations. (#2481)\r\n* Fixed a bug where UKS was not properly parallelized. (#2824)\r\n\r\n## Details of Interest\r\n\r\n* Migrate density screening from TwoBodyAOInt toward JK objects. (#2547)\r\n* Expanded standard suite testing to check return and QCVariable contracts for remp2, oremp2, omp2, omp2.5, omp3, oremp2, olccd, and filled in some gaps for ccsd, ccsd(t), a-ccsd(t). (#2653, #2632)\r\n* Tightened rms_mograd_convergence default for OO in occ and dfocc modules so that at least small molecules reliably compute energies, gradients, and findif gradients to 1e-6. (#2653, #2669)\r\n* Tightened r_convergence default computed from e_convergence for non-OO in dfocc module. (#2669)\r\n* Syntax modernization and removing unused and clearing memory leaks. (#2610, #2626, #2649, #2663, #2671, #2672, #2654, #2677, #2679, #2666, #2678, #2721, #2772, #2774, #2776, #2805, #2813, )\r\n* Replacing `ERISieve` (#2660, #2657, #2659)\r\n* Retire deprecated syntax and machinery. (#2592, #2787, #2809, #2819, #2727)\r\n* Improve docs reliability by turning on strict checking and running at PR time. (#2607)\r\n* Adds contributing excitations to tdscf output for non-C1 symmetry. (#2605)\r\n* If DFT functional returns NaN, throw an error rather than waiting for ADIIS to balk. Note that whether this triggers may depend on the compiler: https://groups.google.com/g/llvm-dev/c/Ys0hpgTFMH8?pli=1 . (#2611)\r\n* Updates LibXC interface so that one can set omega for any functional that contains it, rather than only for a hardcoded list of functionals. (#2643)\r\n* References with more beta than alpha orbitals of a given irrep can now be represented, as docc and socc are computed from alpha and beta rather than the other way around. (#2619)\r\n* Adds an option to FREEZE_CORE called \"policy\", which enables frozen core settings to be looked up from a list specified in the global variable FREEZE_CORE_POLICY. This is more flexible than NUM_FROZEN_DOCC for situations like SAPT where multiple molecules are run in the same command and may require different individual numbers of frozen cores. (#2667)\r\n* Incremental Fock builds\r\n  * Turn off incfock by default for SCF_TYPE=COSX for greater reliability. (#2689)\r\n  * Standardizes the incfock implementation of DFJLinK toward the model of DFJCOSK, thereby improving memory usage. (#2792)\r\n  * Standardizes the incfock implementation of DirectJK toward the model of DFJCOSK, thereby improving memory usage. (#2808)\r\n  * Enhances the incfock implementation of DFJCOSK to be like the others: controlled by `INCFOCK` keyword (replacing `COSX_INCFOCK`), able to recompute the full Fock matrix every n iterations controlled by `INCFOCK_FULL_FOCK_EVERY`, and able to disable incfock at a certain `INCFOCK_CONVERGENCE` threshold. (#2816)\r\n* Update CC* modules toward internal use of Wavefunction: remove unused code, MOInfo->Wfn data, Libmints for orbital rotation, use Matrix class, Slice notation, orbital indexing management. (#2703, #2696, #2704, #2715, #2719, #2720, #2751, #2753, #2782, #2786, #2812, #2818, #2826)\r\n* Brueckner CC no longer set QCVariable `CCSD TOTAL ENERGY` as the final result but instead set BCCD-specific variables from the final iteration and some other variables from the first iteration. BRUECKNER_ORBS_R_CONVERGENCE parameter tightened when defaulting from E_CONVERGENCE. (#2708)\r\n* Renovate PSIO to improve error messaging. (#2711, #2700, #2724, #2741, #2756, #2773)\r\n* Improve Matrix/Vector tech.\r\n  * Refactor Vector and IntVector. (#2628, #2705)\r\n  * Allow non-symmetric matrix <-> dpdfile2. (#2722)\r\n  * `Matrix::set_block` can be used on matrices that are not totally symmetric. (#2734)\r\n  * Check Matrix size compatability in gemm(). (#2729)\r\n  * Improved `Matrix::transform`'s ability to handle edge cases. (#2748)\r\n  * Improved Matrix::back_transform's ability to handle edge cases. (#2745)\r\n  * `Matrix::get_block` can be used on matrices that are not totally symmetric. (#2752)\r\n* Running DF through CCENERGY (experimental, expert only) may now require set qc_module ccenergy. (#2731)\r\n* Many NYI messages, whether from `ManagedMethodError`, `MissingMethodError`, or plain `ValidationError` from run_* fns have changed their wording and added content. On the whole, this should be helpful, but if you're searching for particular phrasing, you'll likely need to adjust regexes. (#2731)\r\n* Capabilities tables in documentation made more detailed and thorough; autogenerated from tests. (#2731)\r\n* Modified the orbital instability following procedure. This should be a minor change for most applications: contact developers if you notice a problem. (#2758)\r\n* LinearK algorithm has been removed as an option to SCF_TYPE=DIRECT (`DO_LINK` is no longer an option). It has been added back through `SCF_TYPE=LINK` that enables integral-direct density-fitted J + Linear Exchange K algorithm combination for JK computations. (#2762, #2768)\r\n* Delayed announcement that IR intensities through finite difference Hessians work as of distributed driver in v1.6. (#2469)\r\n* UHF instability analysis is migrated over to use the Python Davidson solver. This adds LDA UKS instability analysis. (#2766)\r\n* The keyword SOLVER_ROOTS_PER_IRREP has been added to allow more fine-tuned control over the roots converged during instability analysis. (#2766)\r\n* Instability keywords have moved from the CPHF module to the SCF module. See the corresponding SCF subsection of the documentation for details. (#2766)\r\n* The LINEQ_SOLVER option for occ has been removed in favor of LAPACK calls. (#2778)\r\n* Kinetic energy, potential energy, and virial energy are added as QCVariables for fully QM HF and CC computations. The variable names are subject to change. (#2769)\r\n* Changed the default scaling scheme of SAPT(DFT) exchange-dispersion energy is now changed from DISP to FIXED which scales the uncoupled Exch-Disp2 by 0.769848. (#2481)\r\n* Added shortcut for SPW92 functional. (#2784)\r\n* Replace `sq_rsp()` function internally with a new wrapper to DSYEV. Deprecate `rsp()` and `sq_rsp()`. (#2686, #2798)\r\n* Orbital-optimized occ densities now available on the wavefunction. (#2788)\r\n* DC-06 densities now symmetrized. (#2788)\r\n* Empirical dispersion capabilities changed slightly between dftd3 and s-dftd3. In particular, the former can also do -D2 and the latter can do 3-body -D3 in the same call as 2-body -D3. All Psi4 calls will continue to do only 2-body -D3 as default (regardless of dftd3 or s-dftd3 engine). That is, -d3 is still an alias to -d3zero which is now an alias to a new extension -d3zero2b, which can now be given explicitly disallow 3-body as a tweakable parameter (internally, s9:=0.0). When s-dftd3 is the engine, another set of new extensions, e.g., -d3atm alias of -d3zeroatm turns on 3-body (s9=1.0) and allows user tweaks. This latter is the same behavior as -D4, which turns on 3-body by default. If this seems confusing, state what calc you want \u2014 e.g., energy(\"b3lyp-d3atm\") \u2014 and Psi4 will figure out if you have the right engine to do the job. (#2791)\r\n* psi4.core.Molecule.run_dftd3 and qcdb.Molecule.run_dftd3 don't work with s-dftd3. Please file an issue if you really want this capability. run_gcp will use classic gcp or mctc-gcp interchangeably, whichever you have available. (#2791)\r\n\r\n## Bug Fixes\r\n\r\n* Fixed memory estimates for larger systems in dfocc module by deploying long ints. (#2354, #2669)\r\n* Fixed OO ROHF printing and setting wrong plain MP2 energies. Fixed wrong `Wfn.energy_` for OMP3 & OMP2.5. (#2653)\r\n* Worked around Intel compiler bug. (#2625)\r\n* Fixed memory estimation bug in DFTensor that affects fno-df-cc. (#2673)\r\n* Fixed `c1_deep_copy` which sent nsopi_ to `Wavefunction::epsilon_subset_helper` in place of the number of occupied orbitals. When nsopi_[h] > nmopi_[h] for some h, this led to accessing out-of-bounds memory. (#2692)\r\n* Fixed Mulliken charges used qualitatively in DLPNO-MP2. (#2707)\r\n* Fixed SCF gradient segfault from serialized Wavefunction. (#2712, #2714)\r\n* Fixed insidious bug in Lebedev initialization that fails approximately once-in-a-thousand in parallel DFT runs. (#2743)\r\n* Fixed segfaults in `Matrix::transpose` and `Matrix::transpose_this` for matrices that are not totally symmetric. Now performs the transpose or raises an error messages, respectively. (#2740)\r\n* Fixed arbitrary order methods and MRCC methods to work with distributed driver. (#2731)\r\n* Fixed CBS extrapolated finite-difference Hessians crashing on molecules with zero dipole moment. (#2759)\r\n* Fixed so `basis_relativistic <name> {...}` now works. (#2764)\r\n* Fixed using multithreading with PK algorithm and small basis sets. (#2760, #2763)\r\n* Fixed a segfault caused by Libint2's engine.h being indirectly imported into mintshelper.cc. (#2770)\r\n* Raise an error when a user requests more roots of detci than there are determinants. (#2779, #2780)\r\n* Fixed a bug where UHF-CCSD properties were incorrect when some orbitals were singly occupied (#2818)\r\n* Previous to QCEngine v0.26.0 (now required), the pairwise dispersion analysis returned by executable/classic/psi4-channel dftd3 was scaled differently from that by s-dftd3 and dftd4 (any channel). This has been fixed. However, one must be consistent about QCEngine/Psi4/fsapt.py versions. A consistent set are QCEngine >=0.26.0 and Empirical_Disp.dat file generated in the course of energy(\"fisapt0-d\") by v1.7 or later Psi4 and script fsapt.py released with Psi4 v1.7 or later. This is semi-enforced since v1.7 requires v0.26 (fsapt.py is a free agent). Another consistent set is QCEngine <0.26.0 and Psi4 and fsapt.py <v1.7. Mixing old Psi4 or fsapt.py with new QCEngine and classic dftd3 can yield wrong fisapt analysis, and this isn't trapped. (#2791)\r\n\r\n## Known Bugs\r\nFind them and tell us\r\n\r\n<!-- ## Skipped\r\n#2585, #2589, #2597, #2629, #2644, #2650, #2646, #2658, #2664, #2639, #2691, #2699, #2718, #2723, #2744, #2757, #2755, #2761, #2771, #2781, #2790, #2807, #2811, #2822, #2820\r\n-->",
        "html_url": "https://github.com/psi4/psi4/releases/tag/v1.7",
        "name": "v1.7, 2022-12-06",
        "release_id": 85109147,
        "tag": "v1.7",
        "tarball_url": "https://api.github.com/repos/psi4/psi4/tarball/v1.7",
        "type": "Release",
        "url": "https://api.github.com/repos/psi4/psi4/releases/85109147",
        "value": "https://api.github.com/repos/psi4/psi4/releases/85109147",
        "zipball_url": "https://api.github.com/repos/psi4/psi4/zipball/v1.7"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "loriab",
          "type": "User"
        },
        "date_created": "2022-07-08T14:56:01Z",
        "date_published": "2022-07-09T01:01:55Z",
        "description": "* Advertised Version: 1.6.1\r\n* Continuous Version: 1.6.1\r\n* Release Date: 8 July 2022\r\n* Documentation: https://psicode.org/psi4manual/1.6.1/\r\n* Availability: Public, GitHub source, CMake build, [Conda binary installers](https://psicode.netlify.com/installs/v161/)\r\n* Span: 6 PRs\r\n\r\n### Bug Fixes\r\n* #2616 corrected syntax for spherical basis sets in Molden files.\r\n* #2615 allows Psi4/Cfour interface to work again after distributed driver caused basis set detection and cbs QCVariable storage to break.\r\n* #2595 allows Forte to work again after distributed driver interrupted options handling.\r\n* #2590 allows `variables(include_deprecated_keys=True)` to work again without error.\r\n* #2590 allows `energy(..., bsse_type=..., dft_functional=my_functional)` to work again for string functionals after distributed driver didn't pass along `dft_functional` to many-body routine.\r\n* #2590 allows composite inputs that errored as `\u2018<\u2019 not supported between instances of \u2018dict\u2019 and \u2018dict\u2019` to work again.\r\n* #2624 allows passing NumPy location to CMake Python detection.\r\n* #2620 removed debug printing in coupled-cluster properties.\r\n",
        "html_url": "https://github.com/psi4/psi4/releases/tag/v1.6.1",
        "name": "v1.6.1, 2022-07-08",
        "release_id": 71382928,
        "tag": "v1.6.1",
        "tarball_url": "https://api.github.com/repos/psi4/psi4/tarball/v1.6.1",
        "type": "Release",
        "url": "https://api.github.com/repos/psi4/psi4/releases/71382928",
        "value": "https://api.github.com/repos/psi4/psi4/releases/71382928",
        "zipball_url": "https://api.github.com/repos/psi4/psi4/zipball/v1.6.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "loriab",
          "type": "User"
        },
        "date_created": "2022-05-19T20:21:46Z",
        "date_published": "2022-05-20T04:14:56Z",
        "description": "Advertised Version: 1.6\r\nContinuous Version: 1.6\r\nRelease Date: 19 May 2022\r\nNYI Documentation: https://psicode.org/psi4manual/1.6.0/\r\nAvailability: Public, GitHub source, CMake build, [Conda binary installers](https://psicode.netlify.com/installs/v16/)\r\nSpan: [138 PRs](https://github.com/psi4/psi4/milestone/7?closed=1)\r\n\r\n## Required Dependency Changes\r\n\r\n* SciPy for ADIIS/EDIIS. Can be avoided.\r\n* Python minimum bumped to v3.8.\r\n* No longer need GMP/MPFR to build against Libint2. Better Eigen3, Boost transitive dependency handling. (#2413, #2046)\r\n* Newer Libint2 required (interface change) and need new integrals classes. When in doubt, make a new conda environment to get a suitable Libint2.\r\n* Pytest >=7 is required.\r\n* Perl no longer required for testing. (#2551)\r\n* msgpack-python required to keep numpy arrays serialized when communicating in schema. (#2575)\r\n\r\n## New Methods\r\n\r\n* ADIIS/EDIIS for RHF/UHF. Now the default. (#2320, #2235)\r\n* E(30)exch-ind term in SAPT2+3 without the S^2 approximation. (#2314)\r\n* Linear exchange matrix build (LinK) in Direct SCF algorithm. (#2359)\r\n* \"Chain of Spheres\" exchange. Used with density-fitted J, this is completely in-core and faster than DF for large system. Access through `SCF_TYPE=COSX`. (#2567)\r\n\r\n\r\n## External Libraries\r\n\r\n* [libecpint](https://github.com/robashaw/libecpint) -- switched from internal code to R. Shaw's library. Enable with `-D ENABLE_ecpint=ON`. Analytic gradients and Hessians available (use with caution for post-SCF). Conda packages available for Linux and Mac. (#2368, #2135) \r\n* For ADC, the built-in code is deprecated and will only be used if external adcc library is not present. Built-in adc module will be fully removed in v1.7. (#2419)\r\n* adcc, cppe, openfermion, dftd4: some external libraries previously packaged on psi4 conda channel, it is now advisable to obtain from conda-forge. See GitHub Action for details on running with Psi4. (#2454)\r\n* Use of Libint2 is much expanded, including one-electron integrals and F12 integrals. See details below and summary at https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/prog_integrals.rst#one-electron-integral-algorithm-overview. (#2527)\r\n* Ambit >=v0.6 required if ambit enabled. (#2546)\r\n* For CheMPS2, DMRG densities saved to wavefunction to allow natural orbitals. (#2570, #2558)\r\n\r\n\r\n\r\n## Contributors to v1.6\r\n\r\n@alenaizan, @andyj10224, @brianz98, @carolinesargent, @cgbriggs99, @e-kwsm, @konpat, @lazaroid, @philipmnel, @susilehtola, @TiborGY, @timostrunk, @andysim, @hokru, @jeffschriber, @JonathonMisiewicz, @jturney, @loriab, @maxscheurer, @zachglick\r\n\r\n## Breaking Changes\r\n\r\n* Require adcc 0.15.9 and possible adjustment to environment keyword. (#2393)\r\n* Scalar Debye-based n-pole components QCVariables are retired, replaced by atomic-units arrays (e.g., `CC DIPOLE X` --> `CC DIPOLE`. (#2479)\r\n* External charges locations now always specified in Bohr, rather than units of molecule. Also, creation of QMMM object is discouraged. Instead, pass charges and locations through `external_potentials` keyword argument. (#2515)\r\n* In composite (CBS) methods, extrapolation functions like `corl_xtpl_helgaker_2` must be referred to as strings, not objects. User-supplied ones use NumPy arrays rather than psi4.core.Matrix objects and must be registered with a `register_xtpl_function`  function call. In any inputs where the cbs() function was referred to as an object (e.g., `energy(cbs)`), it must now be referred to by string (e.g., `energy(\"cbs\")`). Functions analogous to `sherrill_gold_standard` must be referred to as strings and registered with `register_composite_function`. Running old inputs will trigger update guidance. (#2526, #2532, #2575)\r\n* The default `energy(\"sapt0\")` code changed its default density-fitting basis, so it's more physically correct and matches `energy(\"fisapt0\")` values but no longer matches values reported from high-level SAPT methods. (#2582)\r\n* Hessian calculations no longer always evaluate gradient beforehand to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explicitly to control. (#2575)\r\n* Previously, the CBS wrapper issued a `clean()` btwn calcs. Plain \"string modelchem\" calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \\n energy('hf')`. Now, string modelchem calcs behave like \"set\" calcs, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(\"mtd/bas\")` only), you may need to add a clean in the input. Signatures of this problem are PSIO errors and, in an obscure case, CC amplitudes being all zeros when called as mtd/bas. An example is shown below, collected by modifying steps 6 & 7 of `cbs-xtpl-energy-conv` test: (#2575)\r\n\r\n|                                     | master (pre-v1.6)                           | ddd (v1.6)                                  |\r\n|-------------------------------------|---------------------------------------------|---------------------------------------------|\r\n| set basis bas; energy(mtd); clean() | ok                                          | ok                                          |\r\n| set basis bas; energy(mtd)          | `PSIO_ERROR: (Incorrect block end address)` | `PSIO_ERROR: (Incorrect block end address)` |\r\n| energy(mtd/bas); clean()            | ok                                          | ok                                          |\r\n| energy(mtd/bas)                     | ok                                          | `PSIO_ERROR: (Incorrect block end address)` |\r\n\r\n*  The n-body wrapper can no longer do embedding with internally calculated Mulliken charges. Charges must now be provided with `embedding_charges` kwarg. (#2575)\r\n* The Libint2 conda packages for Linux are no longer extra-high angular momentum (AM) compared to Mac and Windows. There isn't a proven Libint2 tarball file for higher AM if requested through `MAX_AM_ERI`.\r\n\r\n\r\n\r\n## Performance Optimizations\r\n\r\n* Improve performance for the DLPNO-MP2 algorithm on many-core machines by around 20%. (#2378)\r\n\r\n## Details of Interest\r\n\r\n* Modernize `-D ENABLE_XHOST` CMake option for processor tuning to more architectures. (#2377, #2384)\r\n* Remove potentially buggy convergence metric in DCT. (#2381)\r\n* Plan memory feasibility correctly for large (~1k nbf) (FNO)-DF-CC computations. (#1372, #2382)\r\n* Memory/const cleanup (DMRG #2383; FittingMetric #2417; SCF #2425; FNOCC #2421, #2444, #2561; CCDENSITY #2438; CCEOM #2466)\r\nMERGE* Move DIIS to Python, and implement ADIIS/EDIIS (#2369, #2387, #2436, #2445, #2449)\r\n* Allow C++17 syntax in code (#2392)\r\n* Fix guess mix with SAD and other guesses. (#2411)\r\n* Expose to Python (`Vector.clone()` #2375; `FittingMetric` #2420; `DIISManager::reset_subspace()` #2437; OEProp #2507)\r\n* Add an atomic blocking scheme for quadrature grid points (needed for COSX and ddCOSMO). (#2336)\r\n* Reform `ccdensity` keywords around OPDM relaxation. Keywords `ONEPDM`, `OPDM_ONLY`, `ONEPDM_GRID_DUMP`, and `OPDM_GRID_DUMP` affected. (#2432, #2434)\r\n* Store cc* modules results in QCVariables and use them in testing. These include energies, left- and right-overlap vectors, dipole polarizability, specific rotation, quadrupole polarizability, oscillator strength, Einstein coefficients, rotatory strength. (#2440, #2443, #2447, #2451, #2456, #2460, #2461, #2508, #2514, #2525, #2541)\r\n* Reconcile excited-state QCVariable names in EOMCC, TDSCF, ADC, ADCC. Remove \"EOM-\" in some cases. In general, a value is stored in each of the following qcvars. (#2462, #2470, #2475, #2506, #2533, #2513, #2538, #2486, #2569)\r\n\r\n```\r\n    \"{method} ROOT {global_idx_from} -> ROOT {global_idx_to} {property}\"\r\n    \"{method} ROOT {global_idx_from} -> ROOT {global_idx_to} {property} - {transition_irrep} TRANSITION\"\r\n    \"{method} ROOT {global_idx_from} ({irrep_from}) -> ROOT {global_idx_to} ({irrep_to}) {property}\"\r\n    \"{method} ROOT {within_irrep_idx_from} (IN {irrep_from}) -> ROOT {within_irrep_idx_to} (IN {irrep_to}) {property}\"\r\n```\r\n\r\n* Libint2\r\n  * Switches one-electron integrals to Libint2. (#2388)\r\n  * Convert all double shell loops to use Onebody object's shell pair list instead. (#2388)\r\n  * Convert multipole potential ints to use McMurchie-Davidson recursions. (#2414)\r\n  * Convert X2C ints to use L2 engines. (#2388)\r\n  * Convert AngularMomentum ints to use McMurchie-Davidson recursions. (#2414; #2483)\r\n  * Screening of one electron integrals to improve efficiency of PCM, EFP, and embedding methods. (#2388)\r\n  * Parallelized PCM integral computations, which are typically rate-limiting for implicit solvent SCF. (#2388)\r\n  * Three-center overlap integrals using Libint2. (#2489)\r\n  * Arbitrary-order multipole integrals (and gradients) with McMurchie-Davidson. (#2496)\r\n  * Multipole Potential Integrals (for EFP/PE) with McMurchie-Davidson. (#2504)\r\n  * Remove Obara-Saika recursion code. (#2517)\r\n  * Algorithm summary https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/prog_integrals.rst#one-electron-integral-algorithm-overview (#2527)\r\n  * F12 integrals. (#2502)\r\n* Cleanup `find_occupation` and add more sanity checks to avoid sudden changes of occupation. (#2488)\r\n* Removed specialized dipole and quadrupole code from OEProp, so now that printing looks a little different. (#2485)\r\n* Access Yukawa integrals from Libint2. (#2386)\r\n* Adapt DIIS for ambit (#2505)\r\n* Added CI Testing of add-ons, particularly those now advised to get from conda-forge, not psi4, channel. (#2454)\r\n* All tests runable through Pytest. Those written natively for pytest form subset `-m api`. Those in the usual CTest suite form subset `-m cli`. (#2454, #2495)\r\n* A new logging file is added and default output file naming simplified at edge cases. Set different log level with `psi4 input.dat --loglevel=10`. The log file is the place to look for composite, finite difference, and manybody output. (#2512; #2575)\r\n* Allow JK screening to be SCF-iteration-dependent. Make derived JK classes responsible for zeroing their matrices. (#2529)\r\n* Add option to locate path to Python module from Psi4 executable: `psi4 --module`. (#2530)\r\n* Add QCVariables `FINDIF NUMBER`, `CBS NUMBER`, `NBODY NUMBER` to check how many jobs the wrappers are running. (#2544)\r\n* Use better driver-targeted (e.g., energy vs. findif freq) convergence criteria and determination of what analytic derivatives available. (#2536)\r\n* Standardize pair energy arrays across CC modules and save them as QCVariables. (#2551, #2568)\r\n* Add dipole derivative by finite difference of dipoles. IR intensities available. (#2552; #2575)\r\n* Add means of saving CCSD amplitudes in QCSchema through `extras[\"psi4:tamps\"]`. (#2328)\r\n* Various n-body QCVariables have been renamed. Old ones will work for a while. (#2575)\r\n```\r\n    # from: to\r\n    \"CP-CORRECTED {nb}-BODY INTERACTION ENERGY\": (\"CP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY\", 1.7),\r\n    \"NOCP-CORRECTED {nb}-BODY INTERACTION ENERGY\": (\"NOCP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY\", 1.7),\r\n    \"VMFC-CORRECTED {nb}-BODY INTERACTION ENERGY\": (\"VMFC-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY\", 1.7),\r\n    \"COUNTERPOISE CORRECTED TOTAL ENERGY\": (\"CP-CORRECTED TOTAL ENERGY\", 1.7),\r\n    \"COUNTERPOISE CORRECTED INTERACTION ENERGY\": (\"CP-CORRECTED INTERACTION ENERGY\", 1.7),\r\n    \"NON-COUNTERPOISE CORRECTED TOTAL ENERGY\": (\"NOCP-CORRECTED TOTAL ENERGY\", 1.7),\r\n    \"NON-COUNTERPOISE CORRECTED INTERACTION ENERGY\": (\"NOCP-CORRECTED INTERACTION ENERGY\", 1.7),\r\n    \"VALIRON-MAYER FUNCTION COUTERPOISE TOTAL ENERGY\": (\"VALIRON-MAYER FUNCTION COUNTERPOISE TOTAL ENERGY\", 1.7),  # note misspelling\r\n    \"VALIRON-MAYER FUNCTION COUTERPOISE INTERACTION ENERGY\": (\"VMFC-CORRECTED INTERACTION ENERGY\", 1.7),\r\n```\r\n* The output generated from wrappers (cbs/composite, findif/finite difference, manybody/nbody) now writes the single-point calc to the output file after completion, not in real-time. Ordinary analytic single-point calcs continue to write to output in real-time. (#2575)\r\n\r\n## Bug Fixes\r\n\r\n* Allow MBIS volume ratios to be called from `set scf_properties ['MBIS_VOLUME_RATIOS']`. This is equivalent to the already-working `oeprop(...,'MBIS_VOLUME_RATIOS')` but now can be used with a QCSchema call. (#2299, #2370)\r\n* Fixes error in MBE VMFC Hessian. (#2389)\r\n* Fixes bug in `compare_recursive()` (#2397)\r\n* Fixes bug where `fchk()` couldn't be run on a Wavefunction deserialized from file (#2400, #2408)\r\n* Fixes bug in MemDFJK affecting TD-DFT excitation spectra with range-separated functionals in asymmetric case. (#2431, #2435)\r\n* Avert segfault for non-RHF CC response properties. (#2310, #2450)\r\n* Fixes export of left eigenvector beta in TDSCF scf_response.py. (#2452, #2453)\r\n* Fixes parallel scaling of Libint2 one-electron integrals by using new Libint2. (#2491, #2413)\r\n* Fixes finding ambit when specialty ambit path given. (#2500)\r\n* Fixes bug with Karton 2-point SCF extrapolation. (#2526)\r\n* Fixes bug where `allen_focal_point` wasn't working because higher deltas were getting lopped off. (#2532)\r\n* Fixes CC properties naming bug by making OEProp names flexible. (#2534)\r\n* Fixes fcidump.py handling of frozen orbitals. (#2545)\r\n* Fixes incremental Fock convergence bug. (#2550)\r\n* Fixes bug where non-physical masses couldn't run through QCSchema. (#2557)\r\n* Fixes testing bug where `pytest psi4/` would pick up unconfigured tests so one had to use `pytest psi4/tests/`. (#2549)\r\n* Fixes dftd3/gcp/mp2d on single cpu job. (#2548, #2549)\r\n* Fixes single-atom Hessian by finite difference. (#1683, #2552)\r\n* Fixes bad performance where SCF gradients took longer with more threads. (#2559, #2581)\r\n\r\n## Known Bugs\r\nFind them and tell us\r\n\r\n<!-- ## Skipped\r\n#2367, #2373, #2391, #2394, #2402/#2409, #2406, #2418, #2423, #2422, #2424, #2426, #2441, #2446, #2448, #2428, #2415, #2459, #2464, #2455, #2467, #2468, #2471, #2474, #2482, #2484, #2465, #2494, #2501, #2509, #2511, #2518, #2528, #2531, #2539, #2540, #2458, #2574 -->",
        "html_url": "https://github.com/psi4/psi4/releases/tag/v1.6",
        "name": "v1.6, 2022-05-19",
        "release_id": 67313228,
        "tag": "v1.6",
        "tarball_url": "https://api.github.com/repos/psi4/psi4/tarball/v1.6",
        "type": "Release",
        "url": "https://api.github.com/repos/psi4/psi4/releases/67313228",
        "value": "https://api.github.com/repos/psi4/psi4/releases/67313228",
        "zipball_url": "https://api.github.com/repos/psi4/psi4/zipball/v1.6"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "loriab",
          "type": "User"
        },
        "date_created": "2021-11-28T01:54:23Z",
        "date_published": "2021-11-29T21:53:24Z",
        "description": "* Advertised Version: 1.5\r\n* Continuous Version: 1.5\r\n* Release Date: 27 November 2021\r\n* Documentation: https://psicode.org/psi4manual/1.5.0/\r\n* Availability: Public, GitHub source, CMake build, [Conda binary installers](https://psicode.netlify.com/installs/v15/)\r\n* Span: [60 PRs](https://github.com/psi4/psi4/milestone/6?closed=1), roughly 2247-2366\r\n\r\n## Obtaining\r\n- Binary installers: see link above\r\n- Python Anaconda: `conda install psi4 -c psi4`.\r\n- Windows conda packages available (#1560)\r\n- Dropped dependencies: none\r\n- Added dependencies: none\r\n\r\n## New Methods\r\n\r\n- Domain-based local pair natural orbital MP2 implemented! Accessible through `energy(\"dlpno-mp2\")` (#2093, #2313).\r\n\r\n## External Libraries\r\n\r\n- DFTD4 has been interfaced, so functional calls like `energy(\"b3lyp-d4\")` run through QCEngine if the upstream software is available (#2142). Note that it's not the dftd4 executable that's needed but the dftd4 Python module. For linux, this is distributed via `conda install dftd4 -c psi4`. It is also available as `conda install dftd4-python -c conda-forge`, but that's trickier to get it and Psi4 dependencies installed together happily.\r\n- QCSchema runs now return the input and other selected text files in the `AtomicResult.native_files` field, controllable by `AtomicInput.protocols.native_files` setting (#2361).\r\n\r\n## Performance Optimizations\r\n\r\n- Direct SCF jobs can now use density screening and incremental Fock build (#2155).\r\n- DIIS routines have been vectorized in preparation for their refactoring to Python (#2355).\r\n\r\n## Details of Interest\r\n\r\n- Linear response enabled for UHF references (#2266).\r\n- Fix SCF memory leak and `Vector::dgemv` error. Not an correctness issue (#2347).\r\n- MBIS charges and volume ratios separated as OEProp tasks (#2273).\r\n- Save gradient and Hessian results from finite difference more thoroughly in QCVars (#2293).\r\n- Add DFTensor class for better recording and manipulating density cummulant theory (DCT) (#2250).\r\n- Fix some memory leaks or memory mangement: DFT integration coordinates (#2352), `qcdb.BasisSet` (#2349), libmints (#2346), cubeprop (#2345).\r\n- Prepare DIIS for moving to Python (#2298, #2327, #2350, #2325).\r\n\r\n## Bug Fixes\r\n\r\n- The performance improvement for exchange in range-separated functionals added in #1911 in v1.4 has been found to have correctness issues discussed in #2279. An internal library call was fixed in v1.4.1 with #2283, but some runtime conditions and BLAS calls still lead to errors, so the controlling wcombine option is disabled while under investigation in #2362.\r\n- Fix mapping for DFT functional names for BrianQC jobs (#2357).\r\n- Allow UHF gradients to be run on systems without beta electrons (#2344).\r\n- Fix external potential + FISAPT results when moledule specified with units Bohr (#2331).\r\n- Fix MCSCF final energy mismatch (#2259)\r\n- Fix SCF initialization so that linear dependencies get fed properly to FNOCC (#2302).\r\n- Make Windows conda build more broadly runnable by altering ENABLE_XHOST option (#2292).\r\n- Fix fractional occupation with symmetry (#2280, #2290).\r\n- Fix print spacing in FCIDUMP files for 1e and 0e (#2277).\r\n- Fix a bug where MOM could clear all electrons (#2270).\r\n- Fix handling of frozen core orbitals in SAPT between monomer and dimer parts. Common case is when one monomer is an alkali cation (#2271).\r\n\r\n## Contributors to v1.5\r\n\r\n@andyj10224,  @maxscheurer, @kis-gergely-dzsi, @alenaizan, @Icyyork, @konpat, @zachglick, @susilehtola, @brianz98, @jeffschriber, @hokru, @loriab, @JonathonMisiewicz, @fevangelista, @andysim",
        "html_url": "https://github.com/psi4/psi4/releases/tag/v1.5",
        "name": "v1.5, 2021-11-27",
        "release_id": 54010512,
        "tag": "v1.5",
        "tarball_url": "https://api.github.com/repos/psi4/psi4/tarball/v1.5",
        "type": "Release",
        "url": "https://api.github.com/repos/psi4/psi4/releases/54010512",
        "value": "https://api.github.com/repos/psi4/psi4/releases/54010512",
        "zipball_url": "https://api.github.com/repos/psi4/psi4/zipball/v1.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "loriab",
          "type": "User"
        },
        "date_created": "2021-10-07T16:22:23Z",
        "date_published": "2021-10-08T02:24:55Z",
        "description": "* Advertised Version: 1.4.1\r\n* Continuous Version: 1.4.1\r\n* Release Date: 7 October 2021\r\n* Documentation: https://psicode.org/psi4manual/1.4.0/\r\n* Availability: Public, GitHub source, CMake build, [Conda binary installers](https://psicode.netlify.com/installs/v141/)\r\n* Span: 3 PRs\r\n\r\n### Bug Fixes\r\n* #2283 largely fixes blatantly wrong SCF energies for omega functionals, especially with threading. Report any persisting discrepancies between `set omega_combine true`/`false` to #2279, please.\r\n* #2273 allows the `set scf_properties mbis_charges; energy(\"scf\")` route to MBIS charges to run again without failing for missing data. The `mbis_volume_ratios` property must now be requested separately (properties were combined in v1.4).\r\n* #2292 lowers the instruction set requirements to run the Windows conda package from AVX2 to AVX. Appears to solve problems in the wild.",
        "html_url": "https://github.com/psi4/psi4/releases/tag/v1.4.1",
        "name": "v1.4.1, 2021-10-07",
        "release_id": 50982123,
        "tag": "v1.4.1",
        "tarball_url": "https://api.github.com/repos/psi4/psi4/tarball/v1.4.1",
        "type": "Release",
        "url": "https://api.github.com/repos/psi4/psi4/releases/50982123",
        "value": "https://api.github.com/repos/psi4/psi4/releases/50982123",
        "zipball_url": "https://api.github.com/repos/psi4/psi4/zipball/v1.4.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "loriab",
          "type": "User"
        },
        "date_created": "2021-08-03T18:57:15Z",
        "date_published": "2021-08-05T23:24:51Z",
        "description": "* Advertised Version: 1.4\r\n* Continuous Version: 1.4\r\n* Release Date: 3 August 2021\r\n* Documentation: https://psicode.org/psi4manual/1.4.0/\r\n* Availability: Public, GitHub source, CMake build, [Conda binary installers](https://psicode.netlify.com/installs/v14/)\r\n* Span: [437 PRs](https://github.com/psi4/psi4/milestone/5?closed=1), roughly 1559-2264\r\n\r\n## Obtaining\r\n- Binary installers: see link above\r\n- Python Anaconda: `conda install psi4 -c psi4`.\r\n- Windows conda packages available (#1560)\r\n- Dropped dependencies: deepdiff, Libint1\r\n- Added dependencies: QCEngine, Libint2\r\n\r\n##  New Methods\r\n- Add ability to call Axilrod-Teller-Muto (ATM) 3-body dispersion correction from Grimme's DFTD3. Note that this is for dftd3 call, not energy call (#1491)\r\n- MP2D energies and gradients with help of external program (#1661)\r\n- SCAN functionals \u2013 SCAN0, revSCAN0, SCAN, revSCAN, BMK, revM06-L (#1597)\r\n- hybrid LDA functionals \u2013 CAM-LDA0, LDA0 (when Libxc puts them in a release) (#1645)\r\n- FISAPT-D (#1670)\r\n- Superposition of atomic potentials (SAP) guess (#1665, #1700)\r\n- Implementation of partial Cholesky orthogonalization (#1760, #1817, #1824 #1842)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \r\n- Overlap half-derivative integralsr\n- TDDFT for HF, LDA, and GGA SCF wave functions (#1349, #1885, #1814, #2156)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \r\n- UHF Hessians and gradientsr\n- LIBxc density screeningr\n- Add MBIS charge partitioning (#1961, #2035, #2056, #2127)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \r\n- External potentials to CP-SCF solverr\n- FMM andr\n- SAPT(DFT) supports hybrid XC kernel in dispersionr\n- SAPT0-D routines, includes interfacer\n- Electrostatic embedding to FSAPT (#2131)\r\n- Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \r\n\r\n\r\n## New External Libraries\r\n- [QCEngine](https://github.com/MolSSI/QCEngine) - A QCSchema runner is now a required dependency since we use it for several interfaces (#1577)\r\n  - DFTD3\r\n  - MP2D\r\n  - gCP\r\n- CPPE - Polarizable embedding with environment modeled by multi-center multipole expansion with dipole-dipole polarizabilities at the expansion sites (#1401) \r\n- ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \r\n- Enables use of GeomeTRIC optimizer in Psir\n- Interoperability via Molssi Driverr\n- Psi4fockcir\nr\n- Interface to i-pir\n- BrianQC GPU moduler\n- Upgrade to Libintr\n- Update RESP andr\n- Move to Libxc5 (#1101, #2113, #2169, #2191)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \r\n\r\n\r\n## Additional Non-Core Contributors to v1.4\r\n\r\n@ramis, @jwaldrop107, @obrien951, @dsirianni, @Dpgibney, @derekmetcalf, @alenaizan, @susilehtola, @tovestra, @jeffschriber, @zachglick, @maxscheurer, @chapincavender, @PhillCli, @mdamer,  @katrinleinweber,  @mfherbst,  @edeprince3,  @konpat,  @kcpearce,  @Icyyork,  @timostrunk,  @shivupa,  @taylor-a-barnes,  @shannonhouck, @bennybp,  @tomspur, @jgonthier,  @sjrl, @kis-gergely-dzsi, @ferchault, @andyj10224, @psi-rking, @SimonBoothroyd, @yxie326, @VHchavez, @nlk36701, @edeustua, @leeping, @mquevill, @lazaroid, @sgoodlett\r\n\r\n## Performance Optimizations\r\n- omega exchange can now be computed with `MemJK` algorithm. By not having to shunt range-separated functionals to `DiskJK` even when they'd fit in memory, 30-40% performance improvements seen (#1749)\r\n- Big performance improvement to DF SCF Hessianr\n- Omega combine algorithm for computing exchange terms (#1911)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \r\n- Optimize linalg::tripletr\n- Thread external charge potentialr\n\r\n\r\n## Details of Interest\r\n\r\nSee section at https://github.com/psi4/psi4/issues/1562#issue-416040173 that won't fit here.\r\n\r\n## Bug Fixes\r\n\r\nSee section at https://github.com/psi4/psi4/issues/1562#issue-416040173 that won't fit here.",
        "html_url": "https://github.com/psi4/psi4/releases/tag/v1.4",
        "name": "v1.4, 2021-08-03",
        "release_id": 47252505,
        "tag": "v1.4",
        "tarball_url": "https://api.github.com/repos/psi4/psi4/tarball/v1.4",
        "type": "Release",
        "url": "https://api.github.com/repos/psi4/psi4/releases/47252505",
        "value": "https://api.github.com/repos/psi4/psi4/releases/47252505",
        "zipball_url": "https://api.github.com/repos/psi4/psi4/zipball/v1.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "loriab",
          "type": "User"
        },
        "date_created": "2019-05-15T15:06:48Z",
        "date_published": "2019-05-18T02:18:30Z",
        "description": "* Advertised Version: 1.3.2\r\n* Continuous Version: 1.3.2\r\n* Release Date: 17 May 2019\r\n* Documentation: http://psicode.org/psi4manual/1.3.2/\r\n* Availability: Public, GitHub source, CMake build, [Conda binary installers](https://admiring-tesla-08529a.netlify.com/installs/v132/)\r\n* Span: 3 PRs\r\n\r\n##  Enhancements\r\n\r\n* #1576 regularize MP2 correlation QCSchema variable and move `psi4 --json` output to tmpfile.\r\n\r\n## Building\r\n\r\n## Bug Fixes\r\n\r\n* #1602 fixes multiple bugs in `NBOWriter` that make all previous Psi-generated NBO files suspect.\r\n* #1607 explicitly allow loading pickles in `np.read` in `psi4.core.Wavefunction` deserialization. This is needed for Psi4 to work with NumPy >=1.16.3, when the pickle-loading-default changed.",
        "html_url": "https://github.com/psi4/psi4/releases/tag/v1.3.2",
        "name": "v1.3.2, 2019-05-17",
        "release_id": 17326732,
        "tag": "v1.3.2",
        "tarball_url": "https://api.github.com/repos/psi4/psi4/tarball/v1.3.2",
        "type": "Release",
        "url": "https://api.github.com/repos/psi4/psi4/releases/17326732",
        "value": "https://api.github.com/repos/psi4/psi4/releases/17326732",
        "zipball_url": "https://api.github.com/repos/psi4/psi4/zipball/v1.3.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "loriab",
          "type": "User"
        },
        "date_created": "2019-04-12T17:26:01Z",
        "date_published": "2019-04-16T03:53:18Z",
        "description": "* Advertised Version: 1.3.1\r\n* Continuous Version: 1.3.1\r\n* Release Date: 15 April 2019\r\n* Documentation: http://psicode.org/psi4manual/1.3.1/\r\n* Availability: Public, GitHub source, CMake build, [Conda binary installers](https://admiring-tesla-08529a.netlify.com/installs/v131/)\r\n* Span: 5 + 4 partial PRs\r\n\r\n##  Enhancements\r\n\r\n* #1570 (partial) better format exception when `run_json` encounters error. `set_options` can be used for local options, e.g., `set_options({'scf__d_convergence': 8})`.\r\n* #1578 (1st commit) update schema name to `qcschema_[in|out]put`, use `dtype=2` Molecule in schema, move `psi4:qcvars` to `extras/qcvars`.\r\n* #1592 print the IR intensities for analytic RHF Hessians, not just compute, test, and export them.\r\n\r\n## Building\r\n\r\n* Now requires QCElemental v0.3.3, which brings in Pydantic.\r\n* #1560 add Windows package building.\r\n* #1571 update Windows MKL/OpenMP build for MKL 2019.\r\n* #1572 expect `libderiv/libderiv.h` like everyone else, not `libint/libderiv.h`.\r\n\r\n## Bug Fixes\r\n\r\n* #1577 (partial) fix `CFOUR ERROR CODE` and `DROPMO` formatting for Cfour interface.\r\n* #1587 no change to code itself, but the conda `dftd3` package has been rebuilt (`conda update dftd3 -c psi4`) to not segfault on Windows WSL and some Linux architectures.\r\n* #1585 (1st & 3rd commits) Per-stage options handling in `cbs()` previously wasn't stashing options correctly.\r\n* #1592 restore keyword `cphf_tasks` needed for psi4numpy polarizability.",
        "html_url": "https://github.com/psi4/psi4/releases/tag/v1.3.1",
        "name": "v1.3.1, 2019-04-15",
        "release_id": 16664595,
        "tag": "v1.3.1",
        "tarball_url": "https://api.github.com/repos/psi4/psi4/tarball/v1.3.1",
        "type": "Release",
        "url": "https://api.github.com/repos/psi4/psi4/releases/16664595",
        "value": "https://api.github.com/repos/psi4/psi4/releases/16664595",
        "zipball_url": "https://api.github.com/repos/psi4/psi4/zipball/v1.3.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "loriab",
          "type": "User"
        },
        "date_created": "2019-02-28T03:35:48Z",
        "date_published": "2019-03-01T12:34:40Z",
        "description": "* Advertised Version: 1.3\r\n* Continuous Version: 1.3\r\n* Release Date: 28 February 2019\r\n* Documentation: http://psicode.org/psi4manual/1.3/\r\n* Availability: Public, GitHub source, CMake build, [Conda binary installers](https://admiring-tesla-08529a.netlify.com/installs/v13/)\r\n* Span: [335 PRs](https://github.com/psi4/psi4/milestone/4?closed=1), roughly 1065-1558\r\n\r\n## Major Points of Interest\r\n\r\n- Added native Windows compatibility without the WSL requirement.\r\n- DFT collocation grids can now be cache in-memory to avoid extra computation and lowering the total cost of DFT by up to a factor of two (#1233).\r\n- Wavefunctions can now be serialized to disk and back using `Wavefunction.to_file/from_file` (#1304).\r\n- Psi4 is now Python 3.6+ only.\r\n- Physical Constants updated to CODATA 2014 (#1213)\r\n- SCF iterations are py-side for easier access and logic (#953)\r\n- RHF analytic dipole derivatives. This means IR intensities when using analytic second deriv (#1382 ). \r\n\r\n## Obtaining\r\n- Binary installers: see link above\r\n- Python Anaconda: `conda install psi4 -c psi4`.\r\n- All Linux (and Windows WSL) binaries now built with AM=8 libint.\r\n- To obtain v1.2, use `conda install psi4=1.2 libint=1.2.1=h87b9b30_4 -c psi4` (#1533)\r\n\r\n##  New Methods\r\n- Improved support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1\r\n- VV10 dispersion is now available for UKS references.\r\n- Cubeprop can now compute the `FRONTIER_ORBITALS` and `DUAL_DESCRIPTOR` quantities.\r\n- nZaPa-NR basis sets have been added (#1346 ).\r\n- The recursive driver can now compute N-body gradients and Hessians.\r\n- CBS composite calculations can now use arbitrary options (frozen core, relativistic effects) or basis sets for different stages (e.g., scf, correlation, delta) (#1235)\r\n- Rework of SAD guess (#1451, #1452, #1456, #1458, #1477, #1479, #1481, #1438), fixing issues with fractional occupations, ECPs, and ghost atoms. Sad with spin-averaged fractional occupations is now the default guess in Psi4, yielding performance improvements, especially significant for unrestricted and restricted open-shell methods, for which the former default guess was GWH.\r\n- Implemented the on-the-fly extended Huckel guess (#1498, #1529), which is based on the SAD solver.\r\n- `molecule {...}` will take xyz (element symbol _or_ atomic number) or psi4 formats. [docs](https://github.com/MolSSI/QCElemental/blob/master/qcelemental/molparse/from_string.py#L82-L161)\r\n- overall chgmult now specifiable through `1 3\\n--` before any fragments.\r\n- can specify atomic number, mass number, mass, ghosting, extra-label in [mol spec](https://github.com/MolSSI/QCElemental/blob/master/qcelemental/molparse/regex.py#L3-L16).\r\n- Frozen core now aware of charged fragments and implements \"previous shells\" freezing, using e.g. `freeze_core {1,2,...}` (#1350).\r\n- Finite difference properly handles user-specific symmetry (#1424).\r\n\r\n## New Methods (beta)\r\n- TDDFT for HF, LDA, and GGA SCF wave functions (#1349). Guts are ready; interface is not.\r\n\r\n## New External Libraries\r\n - [QCElemental](https://github.com/MolSSI/QCElemental) - A library for CODATA, molecule manipulation routines, and periodic table information.\r\n- [RESP](https://github.com/cdsgroup/resp) - A restrained electrostatic potential fitting plugin.\r\n- [PylibEFP](https://github.com/loriab/pylibefp) - A Python API for I. Kaliman's libefp.\r\n- [Libxc](https://gitlab.com/libxc/libxc) - Libxc isn't new, but we're finally using directly from upstream (#1502).\r\n\r\n## First Time Contributors\r\n- @raimis - #1399, #1185, #1183, +70 more!\r\n- @obrien951           #1359, #1222, #1130, #1140, #1100, #1097\r\n- @zachglick           #1453, #1304, #1291\r\n- @tovrstra            #1510, #1506, #1500\r\n- @timostrunk          #1133, #1128, #1127\r\n- @mdav2               #1374, #1142\r\n- @chapincavender      #1364\r\n- @janisozaur          #1321\r\n- @rainli323           #1131\r\n- @yxie326             #1083\r\n\r\n## Additional Non-Core Contributors to v1.3\r\n\r\n- @JonathonMisiewicz   #1518, #1487, #1379, #1424, #1435, #1378, #1352, #1337, #1336, #1289, #1310, #1299, #1214, #1150, #1024, #1139, #1108\r\n- @susilehtola         #1475, #1493, #1481, #1479, #1472, #1458, #1460, #1468, #1456, #1452, #1451, #1260\r\n- @PeterKraus          #1470, #1350, #1405, #1235, #1303, #1262, #1232, #1138, #1123, #1119, #1109\r\n- @hokru               #1320, #1377, #1346, #1300, #1244, #1241\r\n- @alenaizan           #1365, #1042, #1294\r\n- @tyzhang1993         #1437\r\n- @tomspur             #1257\r\n\r\n## Performance Optimizations\r\n- DFT grid generation is now threaded (#1291).\r\n- DFT collocation grids can now be cache in-memory to avoid extra computation and lowering the total cost of DFT by up to a factor of two (#1233).\r\n\r\n## Psi Developer Upgrade Guide\r\n* Psi4 now requires C++14 (up from C++11)\r\n* The C++ code base was reformatted using clang-format and the provided format file (many PRs). Also `clang-tidy` was run for several transformations.\r\n* `EFP_POL`, `QMEFP_POL`, `EFP_POL_DAMPING`, all `POL` --> `IND`\r\n* outright `cbs(...)` calls --> `energy(cbs, ...)`\r\n* `doublet`, `triplet`, `create`, `horzcat`, `vertcat` and the blocked matrix \"new\" and \"delete\" are now free functions, rather than static methods in `Matrix`. Also, `create` for `Vector` a free function now (#1447).\r\n* `Wavefunction.reference_energy()` --> `Wavefunction.energy()` in keeping with grad/hess (#1445).\r\n* Deprecate the c-side `Wavefunction.frequencies` member data and getter/setter. getter now reads off the py-side member data. setter will go away entirely (#1445). More deprecations in (#1394).\r\n* Non-Grimme B97 is now B97-0 (#1436, #1403 ).\r\n* Can run pytest in parallel with `pytest-xdist`. Known that final exit won't be clean.\r\n* Regularize Wfn and P::e psivar access for scalars and arrays (#1393) in accordance with (#1375). Mostly `get_variable`.\r\n* Deprecated LAPACK routines removed (#1314 ).\r\n\r\n## Developer Interests\r\n- Cleans up the Matrix class for non-totally symmetric irreps (#1383).\r\n- Psi4 is now C++17 compatible (#1345).\r\n- DFT grid generation is now threaded (#1291).\r\n- `findif` is now \"metadata\"-based to allow for greater serialization (#1289).\r\n- Additional documentation and notes on alpha/beta for DFT functionals (#1260).\r\n- `dpd.gbl` has been removed (#1254).\r\n- The CC* modules are moving to a CCWavefunction based solution (#1253).\r\n- CBS has been reworked to be dictionary based to allow for greater flexibility (#1235).\r\n- Updated conversion factors to CODATA 2014 (#1213).\r\n- `pthreads` has been removed from Psi4 (shall not return, #1199).\r\n- Empirical Dispersion has been refactored to a new unified interface (#1151).\r\n- OEProp has been split into many small modules allowing greater flexibility (#1133).\r\n- SCF now throws a SCFConverenceError upon reaching maximum iterations (#1130).\r\n- Standardizes memory printing to `[GiB]` (#1097, ...)\r\n- DIIS maximum absolute error criterion for SCF, instead of the default RMS error (#1460).\r\n- EFP/EFP and SCF/EFP accessed at driver layer, not multiple places in C-layer. EFP object now `core.Molecule.EFP`, not `Process::environment.EFP` (#953).\r\n- All molecule parsing and validation moved py-side. So chg/mult physics checked upon creation, not upon SCF. Form mols `from_string`, `from_arrays`, or `from_dict` (#953).\r\n- Read access to T1/T2 amplitudes py-side (#1344).\r\n- More functions added to `PSI_API` for plugins (#1400).\r\n\r\n## Bug Fixes\r\n\r\n- Fixes an error where the CBS extrapolation technology was not comparable with FNO-CC* methods (#1377)\r\n- Fixes an issue where relativistic basis sets were not compatible with SCF stability analysis (#1374).\r\n- Fixes an issue where JSON called from the command line did not correctly write an output (#1369).\r\n- Fixed an error where float options when set as integer were not correctly cast (#1352 ).\r\n- Correctly throws when Yukawa functionals are called from LibXC (#1260).\r\n- Fixed a bug where casting from a small basis was incompatible with symmetry-breaking displacements (#1139).\r\n- Ghost atoms were incorrectly attributing to `core` electron counts (#1109).\r\n- Fixes an issue in DFHelper memory estimation (#1100).\r\n- Fixes range-separate disk gradient paging (backported in v1.2.1, #1096 ) \r\n- Fixed inconsistencies in the passing of `DF_FITTING_CONDITION`; the default value is now 1e-10 in line with what was actually used by the code before.\r\n- Fixed inconsistencies and bugs in formatted checkpoint files (#1475). Code assumes that the post-HF wave function contains a correlated density.\r\n- Fixed dzvp basis set that was malformed from EMSL (#1554).\r\n- Added full element range to pbeh-3c basis def2-msvp (#1554).\r\n- Fixed various memory errors (#1520 , #1488, #1489, #1480, #1469, #1476, #1441, #1440, #1432, #1427, #1422     ).\r\n- Fixed couldn't switch from ECP basis to non-ECP basis in same input. Prevent non-matching ECP-ness in cast-up basis (#1494).\r\n- Fix precision and formatting and truncation of Molden output files (#1510).\r\n- Now big-endian compatible (#1464).\r\n- Fix irrep ordering in FCIDUMP (#1453).\r\n- Fix BlockOPoints segfault (#1525).\r\n- Fix race condition in maximum orbital gradient of parallel ODCT (#1435).\r\n- Fix previously little-used symmetry operations on `core.Matrix` (#1383).\r\n- Fix nasty SAPT double free bug (#1398 ).\r\n- Fix integer overflow in SAPT (#1364).\r\n\r\n## Known Bugs\r\n - Find them and tell us\r\n",
        "html_url": "https://github.com/psi4/psi4/releases/tag/v1.3",
        "name": "1.3, 2019-02-28",
        "release_id": 15854708,
        "tag": "v1.3",
        "tarball_url": "https://api.github.com/repos/psi4/psi4/tarball/v1.3",
        "type": "Release",
        "url": "https://api.github.com/repos/psi4/psi4/releases/15854708",
        "value": "https://api.github.com/repos/psi4/psi4/releases/15854708",
        "zipball_url": "https://api.github.com/repos/psi4/psi4/zipball/v1.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "loriab",
          "type": "User"
        },
        "date_created": "2018-07-25T02:12:57Z",
        "date_published": "2018-07-25T04:04:54Z",
        "description": "Advertised Version: 1.2.1\r\nContinuous Version: 1.2.1\r\nRelease Date: 24 July 2018\r\nDocumentation: http://psicode.org/psi4manual/1.2/\r\nAvailability: Public, GitHub source, CMake build, [Conda binary installers](http://vergil.chemistry.gatech.edu/nu-psicode/install-v1.2.1.html)\r\n\r\n### Release Notes\r\n\r\n - Fixes a bug in the DFJK gradient algorithm when using disk paging. (#1096)\r\n - Fixes memory estimate in `SCF_TYPE=MEM_DF` that wasn't switching between in-core and disk correctly for SAPT (`direct_iaq` in `AO_core` in `DFHelper`) (#1100)\r\n - Improves memory printing and uses correct GiB units for `SCF_TYPE=MEM_DF` (#1103, #1104)\r\n - Source right image in README (#1105)",
        "html_url": "https://github.com/psi4/psi4/releases/tag/v1.2.1",
        "name": "1.2.1, 2018-07-24",
        "release_id": 12088593,
        "tag": "v1.2.1",
        "tarball_url": "https://api.github.com/repos/psi4/psi4/tarball/v1.2.1",
        "type": "Release",
        "url": "https://api.github.com/repos/psi4/psi4/releases/12088593",
        "value": "https://api.github.com/repos/psi4/psi4/releases/12088593",
        "zipball_url": "https://api.github.com/repos/psi4/psi4/zipball/v1.2.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "loriab",
          "type": "User"
        },
        "date_created": "2018-07-04T07:07:16Z",
        "date_published": "2018-07-05T02:29:50Z",
        "description": "Advertised Version: 1.2\r\nContinuous Version: 1.2\r\nRelease Date: 4 July 2018\r\nDocumentation: http://psicode.org/psi4manual/1.2/\r\nAvailability: Public, GitHub source, CMake build, [Conda binary installers](http://vergil.chemistry.gatech.edu/nu-psicode/install-v1.2.html)\r\n\r\n### Major Points of Interest\r\n\r\n - The DFT kernels were migrated to use LibXC, Psi4 now has 400+ functionals including modern functionals such as wB97M-V.\r\n - The DFT code was optimized leading up to a 4x speed enhancement on 6 cores.\r\n - A new Density-Fitted JK backend was written, DF-SCF is now up to 2x as fast.\r\n - Dozens of additional methods, bug fixes, and performance enhancements.\r\n\r\n### Obtaining\r\n- Binary installers: \r\n- Python Anaconda: `conda install psi4 -c psi4`.\r\n  - If you're working from Psi4 v1.1 (psi4conda) or any conda Psi4 from 2017, do not update. Instead, create a new environment for a new Psi4. You may need to conda update conda beforehand.\r\n\r\n###  New Methods\r\n - SNS-MP2\r\n - Hundreds of new DFT Functionals\r\n - VV10 non-local dispersion\r\n - Dispersion Corrected Spin-Component Scaled Double Hybrid (DSD) Functionals\r\n - Second-Order SCF Convergence of Density Functional Theory\r\n - Coupled Perturbed Self-Consistent Field (HF and DFT)\r\n - Second-Order Electron Propagator Theory (EP2)\r\n - SAPT0 with S^Infinity Induction and Induction Exchange\r\n - DF Gradients for range-separated and CAM functionals\r\n - Support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1\r\n\r\n###  New Methods (beta)\r\n - SAPT(DFT)\r\n - Effective Core Potenitals (ECP's)\r\n\r\n### New External Libraries\r\n - [Gau2Grid](https://github.com/dgasmith/gau2grid) - Very fast gaussian to grid collocation matrices\r\n - [OpenFermion-Psi4](https://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface\r\n - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory\r\n - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate system.\r\n\r\n### First Time Contributors\r\n - Peter Kraus (@PeterKraus) - #949, #937, #922, #904\r\n - Holger Kruse (@hokru) - #877, #912, #914 \r\n - Shannon Houk(@shannonhouck) - #850, #876 \r\n - Johnathan Waldrop (@jwaldrop107) - #921\r\n - Marvin Lechner (@mhlechner) - #698\r\n - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 \r\n - Adam Abbott (@adabbott) - #761\r\n - Thomas Sexton (@tsexton) - #780 \r\n - Tianyuan Zhang (@tyzhang1993) - #743 \r\n - Dom Sirianni (@dsirianni) - #776, #952\r\n - Asim Alenaizan (@alenaizan) - #956 \r\n\r\n### Performance Optimizations\r\n - Density Fitted 3-index AO->MO transformation significantly improved.\r\n - MemDFJK module up to 2x as fast as original DFJK for in-core operations.\r\n - DFT XC kenels threaded with a more efficient vectorization.\r\n - DFT collocation matrix generation vectorized and exploits cache-level localization.\r\n - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks.\r\n\r\n### Psi Developer Upgrade Guide\r\n* The driver method `property(...)` has moved to`properties(...)` to avoid python namespace conflicts.\r\n* If you have a (non-py-only) plugin, \r\n  * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff)\r\n  * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.\r\n* Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:\r\n  * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`\r\n  * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`\r\n  * `<objdir> rm -rf external/upstream/pybind11`\r\n* Intel 2016 is no longer a valid compiler (doesn't work with py11 >=2.2.1)\r\n\r\n### Developer Interests\r\n- Now uses LibXC for DFT XC kernels (#698)\r\n- Reworked the building of superfunctionals to use dictionaries (#922)\r\n-  SCF Wavefunctions can now do Hessian-Vector builds see `RHF.Hx` and `RHF.solve` for examples. (#760)\r\n- The DFT V Potential object now has Hessian-Vector functionality. (#698)\r\n- DFT Functionals now takes advantage of polarized vs unpolarized DFT kernels.\r\n- Added generalized solvers in p4util/solvers.py. These include DIIS and conjugate gradient\r\n- New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).\r\n- ECP SCF energies.\r\n- ECP gradients by finite differences in Python.\r\n- DFT is now has several hundred tests against Psi4 and other implementations\r\n- Shared pointers were rewritten to use `std::make_shared`. (#836)\r\n- One-electron integrals from LibMints now properly apply external potentials so that external potentials are now applied evenly throughout the code base (#844).\r\n - Psi4 is now buildable with Ninja (#794)\r\n - Begins to deprecate `char *` from Psi4 (#780)\r\n - Pragma header for diagnostics and API's (#774)\r\n - Improved C++/Python binding docstrings (#761)\r\n - Clang and YAPF configuration files (#753)\r\n - Improved parallel and routine timing information in Psi4 (#743)\r\n - SCF can now be run in symmetry for post-SCF modules that do not use symmetry (#737)\r\n - Psi4 now compiles much faster (~3 minutes with LLVM on 4 cores) (#736)\r\n - NumPy views of Psi4 objects are now correctly reference tracked in cases where C++ returns a new matrix. `arr = wfn.Ca_subset(\"AO\", \"OCC\").nph` now no longer give noise. (#736)\r\n - Basis PyParsing is now simpler and code duplication has been removed (#734 )\r\n - Update cc-pVXZ and add cc-pwCVXZ for Li, Be, Na, Mg (#728)\r\n - MCSCF orbital semicanonicalization (#722)\r\n - C++ Options are now exposed to Python (#720)\r\n - Intermediate sub-system and partial-basis energies from `nbody` wrapped exported as psivars (#952)\r\n - Better start/stop/elapsed time printing\r\n\r\n### Documentation\r\n - Additional Documentation Information (#787)\r\n\r\n### Miscellaneous\r\n - Added N to ANO0 basis set (#825)\r\n\r\n### Bug Fixes\r\n - Accidental signed integer overflow when using extremely low memory in DFJK\r\n - wB97X had an incorrect range-seperation parameter. This is now fixed. Note that this did not effect wB97X-D.\r\n - Restricted-irrep finite-difference Hessians were only returning the totally symmetric portion of the Hessian ([in #834](https://github.com/psi4/psi4/pull/834/commits/67f536c720abf31040eaa933a12e26c207100b69))\r\n - Analytic HF Hessians were wrong under particular circumstances (#903)\r\n - A bug causing IRCs to converge to the initial transition state was fixed (#882)\r\n\r\n### Conda changes since v1.1\r\n- MKL linked dynamically through free Anaconda-provided `mkl_rt.so` rather than statically linked. This saves size (since NumPy also uses `mkl_rt`) and eliminates incorrect results and threading damping associated with multiple programs accessing BLAS/LAPACK from multiple sources (#748, #755).\r\n- Psi4 no longer installs a non-standard gcc5.2 alongside Psi4 on Linux (or gcc feature on Mac). This was necessary when conda's default 4.8.5 was too low for Psi4's c++11 requirements, but since conda's default has leaped to 7.2.0, we use default again. Note that only libraries (e.g., `libstdc++`) are installed alongside Psi4 now, not compilers (e.g., `g++`).\r\n- (generic, not psi4, conda) `conda activate env` works multishell, not just on `bash`. Since conda 4.4 c. Dec 2017\r\n\r\n### Known Bugs\r\n - PCM-ROHF is broken. See #999\r\n - ERD interface is broken and disabled",
        "html_url": "https://github.com/psi4/psi4/releases/tag/v1.2",
        "name": "1.2, 2018-07-04",
        "release_id": 11785266,
        "tag": "v1.2",
        "tarball_url": "https://api.github.com/repos/psi4/psi4/tarball/v1.2",
        "type": "Release",
        "url": "https://api.github.com/repos/psi4/psi4/releases/11785266",
        "value": "https://api.github.com/repos/psi4/psi4/releases/11785266",
        "zipball_url": "https://api.github.com/repos/psi4/psi4/zipball/v1.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "loriab",
          "type": "User"
        },
        "date_created": "2017-05-17T08:04:53Z",
        "date_published": "2017-06-01T02:00:38Z",
        "description": "Advertised Version: 1.1\r\nContinuous Version: 1.1\r\nRelease Date: 19 May 2017\r\nDocumentation: http://psicode.org/psi4manual/1.1/\r\nAvailability: Public, GitHub source, CMake build, [Conda binary installers](http://vergil.chemistry.gatech.edu/psicode-download/1.1.html)\r\n\r\n### New Methods\r\n\r\n* <b>Added analytic RHF Hessians, conventional and density fitted.</b>\r\n* Added analytic RHF CCSD(T) gradients (no frozen core).\r\n* Added functional-group and intramolecular symmetry-adapted perturbation theory (F/I-SAPT) capabilities, scripts, and tests. (DOIs: [10.1021/ct500724p](http://pubs.acs.org/doi/abs/10.1021/ct500724p), [10.1063/1.4927575](http://aip.scitation.org/doi/10.1063/1.4927575))\r\n* Added high-spin open-shell SAPT0. Note that Ind20,r (and exch counterpart) contains _unrelaxed_ induction. (DOI: [10.1063/1.4963385](http://aip.scitation.org/doi/10.1063/1.4963385))\r\n* Added analytic RHF-CC2 gradients and building of CC2 UHF and ROHF densities.\r\n* Reworked MCSCF with density-fitting, py driver, augmented Hessian iterations, better printing, and the ability to rotate guess orbitals in MCSCF procedure with `MCSCF_ROTATE` keyword.\r\n* Added B86B & PW86 exchange and B86BPBE & PW86PBE exchange-correlation functionals\r\n* Added X2C and (external) DKH relativistic corrections for post-SCF methods.\r\n* <b>(external) Added Grimme's semi-semiempirical HF-3c and PBEh-3c semi-semiempirical energy methods through gCP interface.</b>\r\n* (external) Added ROHF reference for perturbative methods (e.g., ROHF-CCSDT(Q)) in MRCC interface.\r\n* (external) Added PCM in the PTE (perturbation to energy) approximation for implicit solvation to CCSD via PCMSolver.\r\n* (external) Added SIMINT integral interface.\r\n\r\n### User Improvements\r\n\r\n* Fixed interfragment coordinates in geometry optimizer\r\n* Added option to only write occupied orbitals to Molden files.\r\n* Added saving of geometry and normal modes to Molden file after vibrational analysis.\r\n* Added Jensen [aug-]pc[s][seg]-N, N=0\u20134 basis sets.\r\n* Renamed `rel_basis` keyword to `basis_relativistic`.\r\n* Added 3c overlap integrals to libmints.\r\n* Switched default auxiliary basis sets for sto-3g and 3-21g to def2-SVP series.\r\n* Enhanced cc* modules to write OPDM back to Wavefunction object if computed and to construct psivars for eom-cc, 0-indexed (ground state = 0).\r\n* Added `psi4.set_options(dict)` function, making `psi4.geometry()`, `psi4.set_options()`, and `psi4.energy()`, etc. the mainstays of driving calculations in PsiAPI.\r\n* Added AO-based CASSCF.\r\n* Reworked CI root indexing to use 0 as ground-state index, so now CI and CC use so the same indexing for PSI variables.\r\n* Added atom- and AM-labels to printing of molecular orbitals.\r\n* Reworked exiting so that if a geometry optimization exceeds maxiter, it no longer just prints a warning and exits sucessfully (beer) but now exits unsuccessfully (coffee) and raises a `psi4.ConvergenceError`.\r\n* Reworked `psi4.set_memory()` to optionally take a string that includes a memory unit. Added a minimum memory (250MiB) and increase the default memory (500 MiB).\r\n* Reworked parallelism control. Environment variables OMP_NUM_THREADS and MKL_NUM_THREADS now ignored. Control parallelism in PsiAPI with `psi4 -nN` or in either mode through `set_num_threads(N)`.\r\n* Reworked Psi variables in dfmp2 module so that duplicated in Wavefunction.get_variables() as well as `psi4.get_variables()`.\r\n* Added printing of file and line origin for basis sets upon loading. Auxiliary basis sets now get a name (basis1 + basis2 for combination) rather than a blank. Auto-selection of auxiliary basis sets for >=5-zeta orbitals basis sets no longer defaults to def2-quad-zeta when an appropriate >=5-zeta auxiliary basis not available.\r\n* Added new complete set of test case reference output files.\r\n* Added BFDb databases.\r\n* Reworked `print` in Psithon (input file syntax) to no longer process into `print_out` commands that redirect to output file. Now it means whatever your python print means.\r\n* Added to Numpy integration the ability for `psi4.core.Matrix` and `psi4.core.Vector` to be converted to NumPy arrays and back. Please see tests/numpy-array-interface for a full suite of examples.\r\n* Reworked the finding of useful text files in /share/psi4/. Environment variable PSI4DATADIR is now defunct. PSIDATADIR remains but should not need to be used unless you want to specify one not adjacent to the built psi4/core.so library. For running psi4 from both staged and installed locations, it should default just fine and not need PSIDATADIR=/path/to/share/psi4 or psi4 -l /path/to/share/psi4.\r\n* Added beginnings of JSON interface.\r\n\r\n### Infrastructure Improvements\r\n\r\n* <b>Relicensed Psi4 from GPL-2.0+ to LGPL-3.0.</b>\r\n* <b>\"Inverted\" Psi4 from C++ executable with embedded Python to ordinary Python module layout. Added PsiAPI mode for interacting with Psi4 as Python module (i.e., `python -c \"import psi4\"`. Tutorial at http://psicode.org/psi4manual/master/psiapi.html .</b>\r\n* Reworked `bin/psi4` so now a light script calling `import psi4` rather than a hefty C++ executable. No longer linking to libpython.so.\r\n* Added Python 3 (3.5 & 3.6) support to existing Python 2.7\r\n* Reorganized directory layout so that Psi4+Addons in `/`, Psi4 Python module in `/psi4/`, and Psi4 C++ library in `/psi4/src/`.\r\n* Rewrote build system into a CMake (min version 3.3) superbuild, evicting all external code and leaving each add-on with only a single-file build footprint in the external/upstream/ folder specifying its build as a CMake External Project.\r\n* Removed `setup.py` as user interface to CMake build. Now one should call CMake directly using options and guidance in the first ~115 lines of top-level CMakeLists.txt.\r\n* Switched Python binding of C++ from Boost Python to pybind11. Renamed Py-bound C++ library from \"psi4\" to \"core\". A consequence is that Psi4 now requires full C++11 compliance (GCC 4.9+, Clang 3.3+, Apple Clang 6.1+, ICC 2016.0.2+). Note that ICC requires GCC and therefore GCC 4.9+. Note that PyBind11 adheres more to C-style than Python-style when it comes to references and pointer counting. As such, several functions required deep changes as internal references from C-side are no longer manipulatable Python-side.\r\n* Added testing mode to see if Psi4 basically works when you turn it on. From a build directory, using CTest, `ctest -L smoke`. On any executable, using pytest, `psi4 --test`. On the python module, using pytest, `psi4.test()`.\r\n* Reworked plugin system to CMake from GNUMake. Use `psi4 --plugin-compile` to generate Makefile rather than `psi4 --new-plugin-makefile` as formerly. Plugin interface has been substantially renovated.\r\n* Renamed plugin generation from, for example, `psi4 --new-plugin +wavefunction myplugin` to `psi4 --plugin-name myplugin --plugin-template wavefunction`.\r\n* Build performs pre-install to `BuildDir/stage/` so python driver _not_ being run from source. Use `psi4 --inplace` to run python driver from source.\r\n* Switched versioning (e.g., 15 commits after tag v1.0 before tab v1.1rc1) from 1.0.15 to 1.1rc1.dev15.\r\n* Reworked build documentation into documentation proper (http://psicode.org/psi4manual/master/build_faq.html), making GitHub wiki defunct.\r\n* Switched Python build detection from find_package(PythonLibs) to find_package(PythonLibsNew) CMake module used by NumPy and pybind11.\r\n* Reworked ASCII scratch/output file names to incorporate job PID, just as binary scratch files do.\r\n* Adjusts BLAS/LAPACK detection to detect OpenBLAS and to favor unified runtime library mkl_rt.so for MKL.\r\n* Added internal `variables_` and `arrays_` std::maps for double and SharedMatrix types, respectively, to the Wavefunction class. These should be used inside a computation to enable greater localization of variables.\r\n* Switched Mac conda binary builds from gnu/libstdc++ to clang/libc++ with implications for mixing conda packages with locally compiled software (e.g., plugins from conda Psi4).\r\n* Rewrote GitHub history of psi4/psi4. All forks prior to 2016-10-19 are no longer valid. Please refork before working on Psi4.\r\n* Reworked `BasisSet`s to be exclusively built in Python and passed into C-side by the Wavefunction get_basisset and set_basisset calls.\r\n\r\n### Performance Optimization\r\n\r\n* Reworked I/O in UHF CC routines to avoid expensive sorting.\r\n* Reworked fitting algorithm behind diatomic() from hard-wired Lagrange interpolations to weighted least squares that can use an arbitrary number of points.\r\n* Removed ccsort/transqt2 legacy modules from codebase. They can be enabled at build-time for testing.\r\n* Added threading to MintsHelper for one-body integrals for MIC architectures.\r\n\r\n### Bug Fixes\r\n\r\n* Fixed OEProp bug for fields and electrostatic potentials when spherical basis sets were used with a symmetry-breaking origin.\r\n* Fixed CBS syntax bug that produced outrageous HF extrapolations errors for some methods.\r\n* Fixed DF-MP2 to fail gracefully when no virtual orbitals present.\r\n* Fixed bug that prevented freezing a bond angle at 0 degrees during a geometry optimization.\r\n* Fixed CASSCF to return correct variable if state averaging requested.\r\n* Fixed diag_method=rsp in detci module that wasn't working.\r\n* Fixed guess=read for ROHF wavefunctions.\r\n* Fixed integer overflows in SAPT code and libdpd code (for CC2) and dfocc code (for CCSD(T)).\r\n* Fixed DF-MP2 gradients in the presence of external potential.\r\n* Fixed various bugs and useability improvements for calculations in the presence of a dipole field.\r\n* Fixed silent fail for non-Lebedev numbers in dft_spherical_points.\r\n* Fixed instability of matrix diagonalization that led to anomolous DFT grid generation on Haswell processors.\r\n* Fixed specifying non-default basis-set-extrapolation schemes as a keyword argument to energy(), optimize(), etc.\r\n* Fixed `properties_origin[\"COM\"]` that wasn't working.\r\n* Fixed bug in ccresponse that led to different polariability values with symmetry on and off.\r\n* Fixed `molden(..., dovirtual)` bug so that keyword is honored and unrestricted occupations are returned correctly.\r\n* Fixed wB97X-based functionals that were using 0.3 instead of 0.4. This makes no appreciable difference at the cross-database hundredths of a kcal/mol level but in a little wrong.\r\n\r\n### External Features and Infrastructure\r\n\r\n* Reworked Libint integration to pull from upstream repository at 1.2.0 or 1.2.1\r\n* Added new integral library SIMINT by Ben Pritchard for energy integrals, accessed through `cmake -DENABLE_simint`. Pinned at 0.7.\r\n* Added using ERD for most all energy integrals (previously only direct conventional HF).\r\n* Reworked LIBEFP integration so no longer required for Psi4 and so source built from upstream repository, not code internal to Psi4. Bumped LIBEFP to 1.4.2.\r\n* Bumped CheMPS2 to 1.8.3-12\r\n* Reworked ambit to reenable it and the ambit plugin template. Ambit not presently linked into Psi4 as not used internally.\r\n* Reworked DKH integration so that project obtained from home repository, not from code stored in Psi4. Reworked DKH procedure so that orbital basis decontracted to form the DKH one-electron integrals, then recontracted for further calculation.\r\n* Bumped PCMSolver to 1.1.9 (see also \"PTE\").\r\n* Added basic gCP interface (see also \"3c\").\r\n* Maintained GDMA, MRCC (see also \"ROHF-CC\"), DFTD3 interfaces.\r\n* Bumped v2rdm_casscf plugin to 0.3.\r\n* Switches PubChem to use REST interface.\r\n* Pinned pybind11 version at 2.0.0 (2.0.1 also known to work).",
        "html_url": "https://github.com/psi4/psi4/releases/tag/v1.1",
        "name": "1.1, 2017-05-19",
        "release_id": 6566191,
        "tag": "v1.1",
        "tarball_url": "https://api.github.com/repos/psi4/psi4/tarball/v1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/psi4/psi4/releases/6566191",
        "value": "https://api.github.com/repos/psi4/psi4/releases/6566191",
        "zipball_url": "https://api.github.com/repos/psi4/psi4/zipball/v1.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-06 15:57:36",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 962
      },
      "technique": "GitHub_API"
    }
  ]
}