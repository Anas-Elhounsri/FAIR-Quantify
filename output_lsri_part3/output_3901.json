{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ryanlayer/samplot"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2017-08-14T20:45:53Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-06T12:07:10Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Plot structural variant signals from many BAMs and CRAMs"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9791889987588721,
      "result": {
        "type": "Text_excerpt",
        "value": "`samplot` is a command line tool for rapid, multi-sample structural variant\nvisualization. `samplot` takes SV coordinates and bam files and produces\nhigh-quality images that highlight any alignment and depth signals that\nsubstantiate the SV. \n"
      },
      "source": "https://raw.githubusercontent.com/ryanlayer/samplot/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/ryanlayer/samplot/wiki"
      },
      "source": "https://raw.githubusercontent.com/ryanlayer/samplot/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ryanlayer/samplot/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 66
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ryanlayer/samplot/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ryanlayer/samplot"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Usage"
      },
      "source": "https://raw.githubusercontent.com/ryanlayer/samplot/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ryanlayer/samplot/master/runtests.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ryanlayer/samplot/master/.circleci/setup.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://circleci.com/gh/ryanlayer/samplot/tree/master.svg?style=svg"
      },
      "source": "https://raw.githubusercontent.com/ryanlayer/samplot/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ryanlayer/samplot/master//doc/imgs/montage.jpg"
      },
      "source": "https://raw.githubusercontent.com/ryanlayer/samplot/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ryanlayer/samplot/master//doc/imgs/4_115928726_115931880.png"
      },
      "source": "https://raw.githubusercontent.com/ryanlayer/samplot/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ryanlayer/samplot/master//doc/imgs/4_115928726_115931880.d100.genes_reps_map.png"
      },
      "source": "https://raw.githubusercontent.com/ryanlayer/samplot/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ryanlayer/samplot/master//doc/imgs/longread_del.png"
      },
      "source": "https://raw.githubusercontent.com/ryanlayer/samplot/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ryanlayer/samplot/master//doc/imgs/linkedread_del.png"
      },
      "source": "https://raw.githubusercontent.com/ryanlayer/samplot/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "`Samplot` is available from bioconda and is installable via the conda package manager:\n```\nconda install -c bioconda samplot \n```\n"
      },
      "source": "https://raw.githubusercontent.com/ryanlayer/samplot/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9882857136327509,
      "result": {
        "type": "Text_excerpt",
        "value": "If you use samplot, please cite https://genomebiology.biomedcentral.com/articles/10.1186/s13059-021-02380-5 \n"
      },
      "source": "https://raw.githubusercontent.com/ryanlayer/samplot/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ryanlayer/samplot/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2019 Ryan Layer\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/ryanlayer/samplot/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ryanlayer/samplot/master//doc/imgs/samplot_logo_v5.png"
      },
      "source": "https://raw.githubusercontent.com/ryanlayer/samplot/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "samplot"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "ryanlayer"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 201552,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 49657,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 40896,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ryanlayer/samplot/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jbelyeu",
          "type": "User"
        },
        "date_created": "2021-06-18T22:57:05Z",
        "date_published": "2021-06-18T22:59:00Z",
        "description": "Added manual option for scaling annotation file track, included fixes for some bugs such as `--dpi`, and reorganized/enhanced vcf testing",
        "html_url": "https://github.com/ryanlayer/samplot/releases/tag/v1.3.0",
        "name": "manual annotation plot scaling and bugfixes",
        "release_id": 44891217,
        "tag": "v1.3.0",
        "tarball_url": "https://api.github.com/repos/ryanlayer/samplot/tarball/v1.3.0",
        "type": "Release",
        "url": "https://api.github.com/repos/ryanlayer/samplot/releases/44891217",
        "value": "https://api.github.com/repos/ryanlayer/samplot/releases/44891217",
        "zipball_url": "https://api.github.com/repos/ryanlayer/samplot/zipball/v1.3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jbelyeu",
          "type": "User"
        },
        "date_created": "2021-05-05T17:27:00Z",
        "date_published": "2021-05-05T17:42:08Z",
        "description": "This release contains the package version for the manuscript publication. Conda now points to this rather than the dev fork at jbelyeu/samplot",
        "html_url": "https://github.com/ryanlayer/samplot/releases/tag/v1.2.0",
        "name": "release with samplot manuscript",
        "release_id": 42493738,
        "tag": "v1.2.0",
        "tarball_url": "https://api.github.com/repos/ryanlayer/samplot/tarball/v1.2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/ryanlayer/samplot/releases/42493738",
        "value": "https://api.github.com/repos/ryanlayer/samplot/releases/42493738",
        "zipball_url": "https://api.github.com/repos/ryanlayer/samplot/zipball/v1.2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jbelyeu",
          "type": "User"
        },
        "date_created": "2020-09-05T01:09:41Z",
        "date_published": "2020-11-09T17:52:57Z",
        "description": "Now uses subcommands rather than separate scripts for `plot` and `vcf`. Also implements a number of speed-ups and minor bugfixes.",
        "html_url": "https://github.com/ryanlayer/samplot/releases/tag/v1.0.18",
        "name": "Updated run command",
        "release_id": 33664897,
        "tag": "v1.0.18",
        "tarball_url": "https://api.github.com/repos/ryanlayer/samplot/tarball/v1.0.18",
        "type": "Release",
        "url": "https://api.github.com/repos/ryanlayer/samplot/releases/33664897",
        "value": "https://api.github.com/repos/ryanlayer/samplot/releases/33664897",
        "zipball_url": "https://api.github.com/repos/ryanlayer/samplot/zipball/v1.0.18"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ryanlayer",
          "type": "User"
        },
        "date_created": "2019-06-05T20:30:34Z",
        "date_published": "2019-06-05T20:32:15Z",
        "description": "- split view for translocations and zooming into the breakpoints of large events\r\n- SV/VCF web viewer",
        "html_url": "https://github.com/ryanlayer/samplot/releases/tag/v1.0.1",
        "name": "v1.0.1",
        "release_id": 17809058,
        "tag": "v1.0.1",
        "tarball_url": "https://api.github.com/repos/ryanlayer/samplot/tarball/v1.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/ryanlayer/samplot/releases/17809058",
        "value": "https://api.github.com/repos/ryanlayer/samplot/releases/17809058",
        "zipball_url": "https://api.github.com/repos/ryanlayer/samplot/zipball/v1.0.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 14:31:10",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 519
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Long read (Oxford nanopore and PacBio) and linked read support",
        "parent_header": [
          "Usage",
          "Generating images from a VCF file",
          "Example:"
        ],
        "type": "Text_excerpt",
        "value": "Any alignment that is longer than 1000 bp is treated as a long read, and\nthe plot design will focus on aligned regions and gaps. Aligned regions are in orange, and gaps follow the same DEL/DUP/INV color code used for short reads. The height of the alignment is based on the size of its largest gap.\n\n<img src=\"/doc/imgs/longread_del.png\">\n\nIf the bam file has an MI tag, then the reads will be treated as linked reads.\nThe plots will be similar to short read plots, but all alignments with the same MI is plotted at the same height according to alignment with the largest gap in the group. A green line connects all alignments in a group.\n\n<img src=\"/doc/imgs/linkedread_del.png\">\n"
      },
      "source": "https://raw.githubusercontent.com/ryanlayer/samplot/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "Usage",
          "Generating images from a VCF file"
        ],
        "type": "Text_excerpt",
        "value": "<details>\n  <summary>samplot plot</summary>\n  \n  ```\nusage: samplot plot [-h] [-n TITLES [TITLES ...]] [-r REFERENCE] [-z Z] -b\n                    BAMS [BAMS ...] [-o OUTPUT_FILE] [--output_dir OUTPUT_DIR]\n                    -s START -e END -c CHROM [-w WINDOW] [-d MAX_DEPTH]\n                    [-t SV_TYPE] [-T TRANSCRIPT_FILE]\n                    [--transcript_filename TRANSCRIPT_FILENAME]\n                    [--max_coverage_points MAX_COVERAGE_POINTS]\n                    [-A ANNOTATION_FILES [ANNOTATION_FILES ...]]\n                    [--annotation_filenames ANNOTATION_FILENAMES [ANNOTATION_FILENAMES ...]]\n                    [--coverage_tracktype {stack,superimpose,none}] [-a]\n                    [-H PLOT_HEIGHT] [-W PLOT_WIDTH] [-q INCLUDE_MQUAL]\n                    [--separate_mqual SEPARATE_MQUAL] [-j]\n                    [--start_ci START_CI] [--end_ci END_CI]\n                    [--long_read LONG_READ] [--ignore_hp]\n                    [--min_event_size MIN_EVENT_SIZE]\n                    [--xaxis_label_fontsize XAXIS_LABEL_FONTSIZE]\n                    [--yaxis_label_fontsize YAXIS_LABEL_FONTSIZE]\n                    [--legend_fontsize LEGEND_FONTSIZE]\n                    [--annotation_fontsize ANNOTATION_FONTSIZE]\n                    [--hide_annotation_labels] [--coverage_only]\n                    [--max_coverage MAX_COVERAGE] [--same_yaxis_scales]\n                    [--marker_size MARKER_SIZE] [--jitter [JITTER]]\n                    [--dpi DPI] [--annotation_scalar ANNOTATION_SCALAR]\n                    [--zoom ZOOM] [--debug DEBUG]\n\n\noptions:\n  -h, --help            show this help message and exit\n  -n TITLES [TITLES ...], --titles TITLES [TITLES ...]\n                        Space-delimited list of plot titles. Use quote marks\n                        to include spaces (i.e. \"plot 1\" \"plot 2\")\n  -r REFERENCE, --reference REFERENCE\n                        Reference file for CRAM, required if CRAM files used\n  -z Z, --z Z           Number of stdevs from the mean (default 4)\n  -b BAMS [BAMS ...], --bams BAMS [BAMS ...]\n                        Space-delimited list of BAM/CRAM file names\n  -o OUTPUT_FILE, --output_file OUTPUT_FILE\n                        Output file name/type. Defaults to\n                        {type}_{chrom}_{start}_{end}.png\n  --output_dir OUTPUT_DIR\n                        Output directory name. Defaults to working dir.\n                        Ignored if --output_file is set\n  -s START, --start START\n                        Start position of region/variant (add multiple for\n                        translocation/BND events)\n  -e END, --end END     End position of region/variant (add multiple for\n                        translocation/BND events)\n  -c CHROM, --chrom CHROM\n                        Chromosome (add multiple for translocation/BND events)\n  -w WINDOW, --window WINDOW\n                        Window size (count of bases to include in view),\n                        default(0.5 * len)\n  -d MAX_DEPTH, --max_depth MAX_DEPTH\n                        Max number of normal pairs to plot\n  -t SV_TYPE, --sv_type SV_TYPE\n                        SV type. If omitted, plot is created without variant\n                        bar\n  -T TRANSCRIPT_FILE, --transcript_file TRANSCRIPT_FILE\n                        GFF3 of transcripts\n  --transcript_filename TRANSCRIPT_FILENAME\n                        Name for transcript track\n  --max_coverage_points MAX_COVERAGE_POINTS\n                        number of points to plot in coverage axis (downsampled\n                        from region size for speed)\n  -A ANNOTATION_FILES [ANNOTATION_FILES ...], --annotation_files ANNOTATION_FILES [ANNOTATION_FILES ...]\n                        Space-delimited list of bed.gz tabixed files of\n                        annotations (such as repeats, mappability, etc.)\n  --annotation_filenames ANNOTATION_FILENAMES [ANNOTATION_FILENAMES ...]\n                        Space-delimited list of names for the tracks in\n                        --annotation_files\n  --coverage_tracktype {stack,superimpose,none}\n                        type of track to use for low MAPQ coverage plot.\n  -a, --print_args      Print commandline arguments to a json file, useful\n                        with PlotCritic\n  -H PLOT_HEIGHT, --plot_height PLOT_HEIGHT\n                        Plot height\n  -W PLOT_WIDTH, --plot_width PLOT_WIDTH\n                        Plot width\n  -q INCLUDE_MQUAL, --include_mqual INCLUDE_MQUAL\n                        Min mapping quality of reads to be included in plot\n                        (default 1)\n  --separate_mqual SEPARATE_MQUAL\n                        coverage from reads with MAPQ <= separate_mqual\n                        plotted in lighter grey. To disable, pass in negative\n                        value\n  -j, --json_only       Create only the json file, not the image plot\n  --start_ci START_CI   confidence intervals of SV first breakpoint (distance\n                        from the breakpoint). Must be a comma-separated pair\n                        of ints (i.e. 20,40)\n  --end_ci END_CI       confidence intervals of SV end breakpoint (distance\n                        from the breakpoint). Must be a comma-separated pair\n                        of ints (i.e. 20,40)\n  --long_read LONG_READ\n                        Min length of a read to be treated as a long-read\n                        (default 1000)\n  --ignore_hp           Choose to ignore HP tag in alignment files\n  --min_event_size MIN_EVENT_SIZE\n                        Min size of an event in long-read CIGAR to include\n                        (default 20)\n  --xaxis_label_fontsize XAXIS_LABEL_FONTSIZE\n                        Font size for X-axis labels (default 6)\n  --yaxis_label_fontsize YAXIS_LABEL_FONTSIZE\n                        Font size for Y-axis labels (default 6)\n  --legend_fontsize LEGEND_FONTSIZE\n                        Font size for legend labels (default 6)\n  --annotation_fontsize ANNOTATION_FONTSIZE\n                        Font size for annotation labels (default 6)\n  --hide_annotation_labels\n                        Hide the label (fourth column text) from annotation\n                        files, useful for regions with many annotations\n  --coverage_only       Hide all reads and show only coverage\n  --max_coverage MAX_COVERAGE\n                        apply a maximum coverage cutoff. Unlimited by default\n  --same_yaxis_scales   Set the scales of the Y axes to the max of all\n  --marker_size MARKER_SIZE\n                        Size of marks on pairs and splits (default 3)\n  --jitter [JITTER]     Add uniform random noise to insert sizes. This can be\n                        helpful to resolve overlapping entries. Either a\n                        custom value (<1.0) is supplied or 0.08 will be used.\n  --dpi DPI             Dots per inches (pixel count, default 300)\n  --annotation_scalar ANNOTATION_SCALAR\n                        scaling factor for the optional annotation/trascript\n                        tracks\n  --zoom ZOOM           Only show +- zoom amount around breakpoints, much\n                        faster for large regions. Ignored if region smaller\n                        than --zoom (default 500000)\n  --debug DEBUG         Print debug statements\n\n```\n</details>\n"
      },
      "source": "https://raw.githubusercontent.com/ryanlayer/samplot/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Examples:",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Samplot requires either BAM files or CRAM files as primary input. If you use\nCRAM, you'll also need a reference genome. You can easily acquire a reference genome file with [GGD](https://github.com/gogetdata/ggd-cli), which is also available from conda.\n"
      },
      "source": "https://raw.githubusercontent.com/ryanlayer/samplot/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Basic use case",
        "parent_header": [
          "Usage",
          "Examples:"
        ],
        "type": "Text_excerpt",
        "value": "Using data from NA12878, NA12889, and NA12890 in the \n[1000 Genomes Project](http://www.internationalgenome.org/about) (available in the test/data directory of samplot), we will\ninspect a possible deletion in NA12878 at 4:115928726-115931880 with respect\nto that same region in two unrelated samples NA12889 and NA12890.\n\nThe following command will create an image of that region:\n```\ntime samplot plot \\\n    -n NA12878 NA12889 NA12890 \\\n    -b samplot/test/data/NA12878_restricted.bam \\\n      samplot/test/data/NA12889_restricted.bam \\\n      samplot/test/data/NA12890_restricted.bam \\\n    -o 4_115928726_115931880.png \\\n    -c chr4 \\\n    -s 115928726 \\\n    -e 115931880 \\\n    -t DEL\n\nreal\t0m3.882s\nuser\t0m3.831s\nsys\t0m0.328s\n\n```\n\nThe arguments used above are:\n\n`-n` The names to be shown for each sample in the plot\n\n`-b` The BAM/CRAM files of the samples (space-delimited)\n\n`-o` The name of the output file containing the plot\n\n`-c` The chromosome of the region of interest\n\n`-s` The start location of the region of interest\n\n`-e` The end location of the region of interest\n\n`-t` The type of the variant of interest\n\nThis will create an image file named `4_115928726_115931880.png`, shown below:\n\n<img src=\"/doc/imgs/4_115928726_115931880.png\">\n"
      },
      "source": "https://raw.githubusercontent.com/ryanlayer/samplot/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Gene and other genomic feature annotations",
        "parent_header": [
          "Usage",
          "Examples:"
        ],
        "type": "Text_excerpt",
        "value": "Gene annotations (tabixed, gff3 file) and genome features (tabixed, bgzipped, bed file) can be \nincluded in the plots.\n\nGet the gene annotations:\n```\nwget ftp://ftp.ensembl.org/pub/grch37/release-84/gff3/homo_sapiens/Homo_sapiens.GRCh37.82.gff3.gz\nbedtools sort -i Homo_sapiens.GRCh37.82.gff3.gz \\\n| bgzip -c > Homo_sapiens.GRCh37.82.sort.gff3.gz\ntabix Homo_sapiens.GRCh37.82.sort.gff3.gz\n```\n\nGet genome annotations, in this case Repeat Masker tracks and a mappability track:\n```\nwget http://hgdownload.cse.ucsc.edu/goldenpath/hg19/encodeDCC/wgEncodeMapability/wgEncodeDukeMapabilityUniqueness35bp.bigWig\nbigWigToBedGraph wgEncodeDukeMapabilityUniqueness35bp.bigWig wgEncodeDukeMapabilityUniqueness35bp.bed\nbgzip wgEncodeDukeMapabilityUniqueness35bp.bed\ntabix wgEncodeDukeMapabilityUniqueness35bp.bed.gz\n\ncurl http://hgdownload.soe.ucsc.edu/goldenPath/hg19/database/rmsk.txt.gz \\\n| bgzip -d -c \\\n| cut -f 6,7,8,13 \\\n| bedtools sort -i stdin \\\n| bgzip -c > rmsk.bed.gz\ntabix rmsk.bed.gz\n```\n\nPlot:\n```\nsamplot plot \\\n    -n NA12878 NA12889 NA12890 \\\n    -b samplot/test/data/NA12878_restricted.bam \\\n      samplot/test/data/NA12889_restricted.bam \\\n      samplot/test/data/NA12890_restricted.bam \\\n    -o 4_115928726_115931880.d100.genes_reps_map.png \\\n    -c chr4 \\\n    -s 115928726 \\\n    -e 115931880 \\\n    -t DEL \\\n    -d 100 \\\n    -T Homo_sapiens.GRCh37.82.sort.gff3.gz \\\n    -A rmsk.bed.gz wgEncodeDukeMapabilityUniqueness35bp.bed.gz\n```\n\n<img src=\"/doc/imgs/4_115928726_115931880.d100.genes_reps_map.png\">\n"
      },
      "source": "https://raw.githubusercontent.com/ryanlayer/samplot/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Generating images from a VCF file",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "To plot images from structural variant calls in a VCF file, use samplot's\n`vcf` subcommand. This accepts a VCF file and the BAM files of samples\nyou wish to plot, outputting images and an `index.html` page for review. \n\n### Usage\n<details>\n  <summary> samplot vcf </summary>\n  \n  ```\nusage: samplot vcf [-h] [--vcf VCF] [-d OUT_DIR] [--ped PED] [--dn_only]\n                   [--min_call_rate MIN_CALL_RATE] [--filter FILTER]\n                   [-O {png,pdf,eps,jpg}] [--max_hets MAX_HETS]\n                   [--min_entries MIN_ENTRIES] [--max_entries MAX_ENTRIES]\n                   [--max_mb MAX_MB] [--min_bp MIN_BP]\n                   [--important_regions IMPORTANT_REGIONS] -b BAMS [BAMS ...]\n                   [--sample_ids SAMPLE_IDS [SAMPLE_IDS ...]]\n                   [--command_file COMMAND_FILE] [--format FORMAT]\n                   [--gff3 GFF3] [--downsample DOWNSAMPLE] [--manual_run]\n                   [--plot_all] [-t THREADS] [--debug]\n\noptions:\n  -h, --help            show this help message and exit\n  --vcf VCF, -v VCF     VCF file containing structural variants (default:\n                        None)\n  -d OUT_DIR, --out-dir OUT_DIR\n                        path to write output images (default: samplot-out)\n  --ped PED             path to ped (or .fam) file (default: None)\n  --dn_only             plots only putative de novo variants (PED file\n                        required) (default: False)\n  --min_call_rate MIN_CALL_RATE\n                        only plot variants with at least this call-rate\n                        (default: None)\n  --filter FILTER       simple filter that samples must meet. Join multiple\n                        filters with '&' and specify --filter multiple times\n                        for 'or' e.g. DHFFC < 0.7 & SVTYPE = 'DEL' (default:\n                        [])\n  -O {png,pdf,eps,jpg}, --output_type {png,pdf,eps,jpg}\n                        type of output figure (default: png)\n  --max_hets MAX_HETS   only plot variants with at most this many\n                        heterozygotes (default: None)\n  --min_entries MIN_ENTRIES\n                        try to include homref samples as controls to get this\n                        many samples in plot (default: 6)\n  --max_entries MAX_ENTRIES\n                        only plot at most this many heterozygotes (default:\n                        10)\n  --max_mb MAX_MB       skip variants longer than this many megabases\n                        (default: None)\n  --min_bp MIN_BP       skip variants shorter than this many bases (default:\n                        20)\n  --important_regions IMPORTANT_REGIONS\n                        only report variants that overlap regions in this bed\n                        file (default: None)\n  -b BAMS [BAMS ...], --bams BAMS [BAMS ...]\n                        Space-delimited list of BAM/CRAM file names (default:\n                        None)\n  --sample_ids SAMPLE_IDS [SAMPLE_IDS ...]\n                        Space-delimited list of sample IDs, must have same\n                        order as BAM/CRAM file names. BAM RG tag required if\n                        this is omitted. (default: None)\n  --command_file COMMAND_FILE\n                        store commands in this file. (default:\n                        samplot_vcf_cmds.tmp)\n  --format FORMAT       comma separated list of FORMAT fields to include in\n                        sample plot title (default: AS,AP,DHFFC)\n  --gff3 GFF3           genomic regions (.gff with .tbi in same directory)\n                        used when building HTML table and table filters\n                        (default: None)\n  --downsample DOWNSAMPLE\n                        Number of normal reads/pairs to plot (default: 1)\n  --manual_run          disables auto-run for the plotting commands (default:\n                        False)\n  --plot_all            plots all samples and all variants - limited by any\n                        filtering arguments set (default: False)\n  -t THREADS, --threads THREADS\n                        Number of threads to use to generate plots. Default: 1\n  --debug               prints out the reason for skipping any skipped variant\n                        entry (default: False)\n  ```\n</details>\n\n`samplot vcf` can be used to quickly apply some basic filters to variants. Filters are applied via the `--filter` argument, which may be repeated as many times as desired. Each expression specified with the `--filter` option is applied separately in an OR fashion, which `&` characters may be used within a statement for AND operations. \n"
      },
      "source": "https://raw.githubusercontent.com/ryanlayer/samplot/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example:",
        "parent_header": [
          "Usage",
          "Generating images from a VCF file"
        ],
        "type": "Text_excerpt",
        "value": "```\nsamplot vcf \\\n    --filter \"SVTYPE == 'DEL' & SU >= 8\" \\\n    --filter \"SVTYPE == 'INV' & SU >= 5\" \\\n    --vcf example.vcf\\\n    -d test/\\\n    -O png\\\n    --important_regions regions.bed\\\n    -b example.bam > samplot_commands.sh\n```\nThis example will create a directory named test (in the current working directory). A file named `index.html` will be created inside that directory to explore the images created.\n\n**Filters:** The above filters will remove all samples/variants from output except:\n* `DUP` variants with at least `SU` of 8\n* `INV` variants with `SU` of at least 5\n\nThe specific `FORMAT` fields available in your VCF file may be different. I recommend SV VCF annotation with [duphold](https://github.com/brentp/duphold) by [brentp](https://github.com/brentp).\n\nFor more complex expression-based VCF filtering, try brentp's [slivar](https://github.com/brentp/slivar), which provides similar but more broad options for filter expressions.\n\n**Region restriction.** Variants can also be filtered by overlap with a set of region (for example, gene coordinates for genes correlated with a disease). The `important_regions` argument provides a BED file of such regions for this example.\n\n**Filtering for de novo SVs** \nUsing a [PED](https://gatkforums.broadinstitute.org/gatk/discussion/7696/pedigree-ped-files) file with `samplot vcf` allows filtering for variants that may be spontaneous/de novo variants. This filter is a simple Mendelian violation test. If a sample 1) has valid parent IDs in the PED file, 2) has a non-homref genotype (1/0, 0/1, or 1/1 in VCF), 3) passes filters, and 4) both parents have homref genotypes (0/0 in VCF), the sample may have a de novo variant. Filter parameters are not applied to the parents. The sample is plotted along with both parents, which are labeled as father and mother in the image. \n\nExample call with the addition of a PED file:\n\n<pre>\nsamplot vcf \\\n    --filter \"SVTYPE == 'DEL' & SU >= 8\" \\\n    --filter \"SVTYPE == 'INV' & SU >= 5\" \\\n    --vcf example.vcf\\\n    -d test/\\\n    -O png\\\n    <b>--ped family.ped\\</b>\n    --important_regions regions.bed\\\n    -b example.bam > samplot_commands.sh\n</pre>\n\n**Additional notes.** \n* Variants where fewer than 95% of samples have a call (whether reference or alternate) will be excluded by default. This can be altered via the command-line argument `min_call_rate`.\n* If you're primarily interested in rare variants, you can use the `max_hets` filter to remove variants that appear in more than `max_hets` samples.\n* Large variants can now be plotted easily by samplot through use of `samplot plot`'s `zoom` argument. However, you can still choose to only plot variants larger than a given size using the `max_mb` argument. The `zoom` argument takes an integer parameter and shows only the intervals within +/- that parameter on either side of the breakpoints. A dotted line connects the ends of the variant call bar at the top of the window, showing that the region between breakpoint intervals is not shown.\n* By default, if fewer than 6 samples have a variant and additional homref samples are given, control samples will be added from the homref group to reach a total of 6 samples in the plot. This number may be altered using the `min_entries` argument.\n* Arguments that are optional in `samplot plot` can by given as arguments to `samplot vcf`. They will be applied to each image generated.\n\n"
      },
      "source": "https://raw.githubusercontent.com/ryanlayer/samplot/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "CRAM inputs",
        "parent_header": [
          "Usage",
          "Generating images from a VCF file",
          "Example:"
        ],
        "type": "Text_excerpt",
        "value": "Samplot also support CRAM input, which requires a reference fasta file for\nreading as noted above. Notice that the reference file is not included in this\nrepository due to size. This time we'll plot an interesting duplication at\nX:101055330-101067156.\n\n```\nsamplot plot \\\n    -n NA12878 NA12889 NA12890 \\\n    -b samplot/test/data/NA12878_restricted.cram \\\n      samplot/test/data/NA12889_restricted.cram \\\n      samplot/test/data/NA12890_restricted.cram \\\n    -o cramX_101055330_101067156.png \n    -c chrX \\\n    -s 101055330 \\\n    -e 101067156 \\\n    -t DUP \\\n    -r hg19.fa\n```\n\n\nThe arguments used above are the same as those used for the basic use case, with the addition of the following:\n\n`-r` The reference file used for reading CRAM files\n"
      },
      "source": "https://raw.githubusercontent.com/ryanlayer/samplot/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Plotting without the SV",
        "parent_header": [
          "Usage",
          "Generating images from a VCF file",
          "Example:"
        ],
        "type": "Text_excerpt",
        "value": "Samplot can also plot genomic regions that are unrelated to an SV. If you do\nnot pass the SV type option (`-t`) then the top SV bar will go away and only\nthe region that is given by `-c` `-s` and `-e` will be displayed.\n"
      },
      "source": "https://raw.githubusercontent.com/ryanlayer/samplot/master/README.md",
      "technique": "header_analysis"
    }
  ]
}