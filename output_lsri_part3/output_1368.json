{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "5. References",
        "type": "Text_excerpt",
        "value": "<div id=\"refs\" class=\"references csl-bib-body hanging-indent\">\n\n<div id=\"ref-RN48\" class=\"csl-entry\">\n\nBanks, Sam C, and David B Lindenmayer. 2014. \u201cInbreeding Avoidance,\nPatch Isolation and Matrix Permeability Influence Dispersal and\nSettlement Choices by Male Agile Antechinus in a Fragmented Landscape.\u201d\nJournal Article. *Journal of Animal Ecology* 83 (2): 515\u201324.\n\n</div>\n\n<div id=\"ref-RN47\" class=\"csl-entry\">\n\nCockburn, Andrew, Michelle P Scott, and David J Scotts. 1985.\n\u201cInbreeding Avoidance and Male-Biased Natal Dispersal in Antechinus\nSpp.(marsupialia: Dasyuridae).\u201d Journal Article. *Animal Behaviour* 33\n(3): 908\u201315.\n\n</div>\n\n<div id=\"ref-RN45\" class=\"csl-entry\">\n\nFisher, D. O. 2005. \u201cPopulation Density and Presence of the Mother Are\nRelated to Natal Dispersal in Male and Female Antechinus Stuartii.\u201d\nJournal Article. *Australian Journal of Zoology* 53 (2): 103\u201310.\n<https://doi.org/10.1071/ZO04068>.\n\n</div>\n\n<div id=\"ref-RN22\" class=\"csl-entry\">\n\nJasper, Moshe, Thomas L Schmidt, Nazni W Ahmad, Steven P Sinkins, and\nAry A Hoffmann. 2019. \u201cA Genomic Approach to Inferring Kinship Reveals\nLimited Intergenerational Dispersal in the Yellow Fever Mosquito.\u201d\nJournal Article. *Molecular Ecology Resources* 19 (5): 1254\u201364.\n\n</div>\n\n<div id=\"ref-RN24\" class=\"csl-entry\">\n\nWright, Sewall. 1946. \u201cIsolation by Distance Under Diverse Systems of\nMating.\u201d Journal Article. *Genetics* 31 (1): 39.\n\n</div>\n\n</div>\n"
      },
      "source": "https://raw.githubusercontent.com/moshejasper/kindisperse/main/README.Rmd",
      "technique": "header_analysis"
    }
  ],
  "code_of_conduct": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\nmoshe.jasper@unimelb.edu.au.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n"
      },
      "source": "https://raw.githubusercontent.com/moshejasper/kindisperse/main/CODE_OF_CONDUCT.md",
      "technique": "file_exploration"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/moshejasper/kindisperse"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-11-06T03:48:24Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-10-12T03:30:07Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Functions, classes & app for simulating and estimating close-kin dispersal kernels"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Introduction",
        "type": "Text_excerpt",
        "value": "Dispersal is a key evolutionary process that connects organisms in space\nand time. Assessing the dispersal of organisms within an area is an\nimportant component of estimating risks from invasive species, planning\npest management operations, and evaluating conservation strategies for\nthreatened species.\n\nLeveraging decreases in sequencing costs, out new method instead\nestimates dispersal from the spatial distribution of close-kin. This\nmethod requires that close kin dyads be identified and scored for two\nvariables: (i) the geographical distance between the two individuals in\nthe dyad, and (ii) their estimated order of kinship (1st order\ne.g.\u00a0full-sib; 2nd order e.g.\u00a0half-sib; 3rd order e.g.\u00a0first cousin).\n\nClose-kin-based dispersal can provide an estimate of the\nintergenerational (or parent-offspring) dispersal kernel - a key factor\nthat connects biological events across the lifespan of an organism with\nbroader demographic and population-genetic processes such as isolation\nby distance. A dispersal kernel is the probability density function\ndescribing the distributions of the locations of dispersed individuals\nrelative to the source point. Intergenerational dispersal kernels\nthemselves can be framed in terms of any number of breeding and\ndispersal processes, defined by both reference life-stage and number of\ngenerations, and leave their mark in the spatial distribution of various\ncategories of close kin, which can be treated as samplings from a set of\nunderlying kernels. Actual kernels vary, but are typically described in\nterms of sigma, the second moment of the kernel, also known as its scale\nparameter. More complex kernels can also incorporate a parameter for\nshape or kurtosis (kappa), representing the fourth moment of the kernel.\n\nIn the case of an insect like the mosquito, the most basic\nintergenerational kernel, the lifespan or parent-offspring kernel,\nreflects all dispersal and breeding processes connecting e.g.\u00a0the\nimmature (egg, larval, pupal) location of a parent to the immature\nlocation of its offspring. However, this kernel can be combined with\nadditional breeding, dispersal and sampling events to produce other,\ncomposite dispersal or distribution kernels that contain information\nabout intergenerational dispersal. For example, the distribution of two\nimmature full-sibling mosquitoes reflects not a full lifespan of\ndispersal, but two \u2018draws\u2019 from the component kernel associated with the\nmother\u2019s ovipositing behaviour. Were we to sample the same full-sibling\nfemales as ovipositing adults, this would instead represent two draws\nfrom a composite \u2018lifespan and additional oviposition\u2019 kernel. Avuncular\nlarvae, should they exist, would represent draws from related but\ndistinct intergenerational dispersal kernels - an oviposition kernel,\nand a composite \u2018oviposition and lifespan\u2019 kernel. The avuncular\ndistribution kernel would thus reflect a further compositing of these\ndispersal events.\n\nThere is a rich literature examining the kernels of basic dispersal\nevents, and analysing them in terms of various kernel functions, whether\nGaussian, exponential, or others with differing properties and shapes,\noften reflecting the tendency of dispersal events to be\ndisproportionately clustered around the source and/or be dispersed at\ngreat distances from the source (i.e.\u00a0for the kernel to be fat-tailed).\nMost of this literature explores dispersal in terms of probability of a\ndispersed sample being at a certain radius from the dispersed source. In\nthe case of close-kin recaptures of e.g.\u00a0first cousins, we are instead\npresented with dispersal events that must be approached in two\ndimensions with respect to both radius of dispersal and additionally\nangle of dispersal. A successful estimator of intergenerational\ndispersal using close-kin recaptures must find strategies to decompose\nthe extraneous spatial and breeding components affecting the kernels,\nand ultimately re-express dispersal in terms of an axial sigma - that\naspect of dispersal which operates within one dimension across a\ntwo-dimensional space. This is the sigma component relied upon by Wright\n(1946) for isolation by distance , and which is reflected in estimations\nof neighbourhood area.\n\nThe method we have developed relies upon the fact that different kinship\ncategories reflect different but related underlying intergenerational\ndispersal composites, and uses the relationships between these kinship\ndistribution kernels to extract information about the core\nparent-offspring dispersal kernel that produced the derivative kernels.\nFor example, the immature distribution kernel of full siblings differs\nfrom the immature distribution of first cousins by a single lifespan:\nusing an additive variance framework, the first cousin variance that is\nnot accounted for by subtracting the full sibling variance constitutes\nan estimate of the parent-offspring distribution, from which an\nintergenerational kernel estimate can be derived. This is because both\nimmature full-sibling and immature first cousins are \u2018phased\u2019 with\nrespect to the organisms\u2019 life cycle - that is, they are separated by an\ninteger multiple of parent-offspring dispersal events. It is this\nphasing that enables the extraction of a \u2018pure\u2019 effective dispersal\nestimate, via the additive property of variance. Other examples of\nphased relationships include half sibling immatures to half cousin\nimmatures (one cycle), full sibling immatures to second cousin immatures\n(two cycles), or even (for mosquitoes) full sibling immatures to second\ncousin ovipositing adults (three cycles).\n\nFurther details can be found in Jasper et al. (2019), \u201cA genomic\napproach to inferring kinship reveals limited intergenerational\ndispersal in the yellow fever mosquito.\u201d\n\nThis package supplements these papers by supplying methods for (a)\nimporting and exporting information about distances and kinship\nrelationships for dyads of individuals, (b) estimating the axial\ndistribution (axial sigma for dispersal or position distributions) from\nempirical distributions of kin-dyads, and (c) estimating the\nintergenerational (parent-offspring) dispersal distribution (axial\nsigma) that underlies the distributions of multiple phased kin\ncategories. This package also implements several simulation tools for\nfurther exploring and testing the properties of intergenerational\ndispersal kernels, as well as to assist in designing experiment layouts\nand sampling schemes. Finally, for ease of use, the package supplies an\nintegrated shiny app which also implements the vast majority of package\nfunctionality in a user-friendly interface.\n"
      },
      "source": "https://raw.githubusercontent.com/moshejasper/kindisperse/main/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9861875028110594,
      "result": {
        "original_header": "KINDISPERSE 0.10.2",
        "type": "Text_excerpt",
        "value": "The goal of <span class=\"smallcaps\">kindisperse</span> is to simulate\nand estimate close-kin dispersal kernels.\n \n"
      },
      "source": "https://raw.githubusercontent.com/moshejasper/kindisperse/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9926184112575599,
      "result": {
        "original_header": "3. The shiny app",
        "type": "Text_excerpt",
        "value": "The kindisperse app bundles most of the tools supplied in this package\nfor ease of use.\n \n"
      },
      "source": "https://raw.githubusercontent.com/moshejasper/kindisperse/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9112763701057705,
      "result": {
        "original_header": "3.2 External interface",
        "type": "Text_excerpt",
        "value": "Alternatively, objects you have loaded or created in the R package\nenvironment can be passed to the app by first mounting them to the\nspecial `appdata` environment which can be accessed from within the app\nvia the `Load` tab. Mounted objects must be of class `KinPairData` or\n`KinPairSimulation`. To mount an object, use the\n`mount_appdata(obj, \"nm\")` function (unmount with\n`unmount_appdata(\"nm\")`). The `appdata` environment can be viewed with\n`display_appdata()` and cleared with `reset_appdata()`. Objects mounted\nto appdata from within the app can also be retrieved with\n`retrieve_appdata()` or `retrieveall_appdata()`.\n``` r\nfullsibs <- simulate_kindist_composite(nsims = 100, ovisigma = 25, kinship = \"FS\")\nreset_appdata()\nmount_appdata(fullsibs, \"fullsibs\")\ndisplay_appdata()\n#> <environment: kindisperse_appdata>\n#> parent: <environment: namespace:kindisperse>\n#> bindings:\n#>  * fullsibs: <KnPrSmlt>\nfullsibs2 <- retrieve_appdata(\"fullsibs\")\nreset_appdata()\n```\n \nThe app also uses a temporary environment for in-app data handling and\nstorage. Following a session, objects stored in this space can be\nbulk-accessed via the function `retrieve_tempdata()`, and reset via the\nfunction `reset_tempdata()`.\n \n"
      },
      "source": "https://raw.githubusercontent.com/moshejasper/kindisperse/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9747267188458519,
      "result": {
        "original_header": "4.1 Simulations and Sampling",
        "type": "Text_excerpt",
        "value": "KINDISPERSE is is built to run three types of simulation. The first is a\ngraphical simulation showing the dispersal of close kin over several\ngenerations. The second and third are both simulations of close kin\ndyads, one using a simple PO kernel, the other a composite one. The\npackage also includes one subsampling function to assist in using these\nsimulations for field study design.\n \n"
      },
      "source": "https://raw.githubusercontent.com/moshejasper/kindisperse/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9303788234429948,
      "result": {
        "original_header": "4.1.1 Graphical simulations",
        "type": "Text_excerpt",
        "value": "This is designed primarily for introducing, exploring, and easily\nvisualising dispersal concepts. It is packaged in two parallel\nfunctions: the simulation function (`simgraph_data()`) and the\nvisualisation function(`simgraph_graph()`). A standard example of their\nuse is shown below, in this case, modeling families including first\ncousins with a kernel sigma of 25m, and site dimensions of 250x250m. The\nfirst graph shows the dispersal events leading to first cousins within\nfive of these families.\n``` r\n## run graphical simulation\ngraphdata <- simgraph_data(nsims = 1000, posigma = 25, dims = 250)\nsimgraph_graph(graphdata, nsim = 5, kinship = \"1C\")\n```\n \nHowever, the options of both can be tweaked to show other data types,\ne.g.\u00a0a pinwheel graph focused on 1,000 first cousin dyads.\n``` r\ngraphdata <- simgraph_data(nsims = 1000, posigma = 25, dims = 250)\nsimgraph_graph(graphdata, nsims = 1000, pinwheel = T, kinship = \"1C\")\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/moshejasper/kindisperse/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9717842226497135,
      "result": {
        "original_header": "4.1.2 Kinpair Simulations",
        "type": "Text_excerpt",
        "value": "These are designed for simulating and testing the impacts of various\ndispersal and sampling parameters on a dataset, and for testing and\nvalidating the estimation functions. They return an object of class\n`KinPairSimulation`, which supplies a tibble (dataframe) of simulation\nresults, as well as metadata capturing the simulation parameters. \nThree kernel types are supported for the next two simulations at\npresent: `Gaussian`, `Laplace`, and `vgamma` (variance-gamma). These are\npassed to the functions with the `method` parameter. If using vgamma,\nalso supply its shape parameter with the argument `shape`. Small values\nof `shape` correspond to an increasingly leptokurtic kernel - i.e.\u00a0a\nstrong central clustering with an increased number of very widely spaced\nindividuals (long tails). \nThe simple simulation, `simulate_kindist_simple()`, simulates\nintergenerational dispersal for each kin category based on a simple\nparent-offspring dispersal sigma, with no attempt to distinguish between\nthe various breeding and dispersal events across a lifespan. For this\nreason, it cannot distinguish between full and half siblings (for\nexample), as immature full and half siblings have been separated by less\nthan a lifespan\u2019s worth of dispersal; it would render them as at\ndistance 0 from their parent (if they were in the adult oviposition\nstage, however, they would be rendered as at one lifespans\u2019 dispersal\nfrom parents). \nThe composite simulation, `simulate_kindist_composite()`, defines four\nsmaller dispersal movements which make up the lifestage dispersal\nkernel. It distinguishes between full and half siblings, cousins, etc.\nand handles immature kin dyads that are separated by less than a\nlifespan of dispersal (e.g.\u00a0immature FS). The four phases are \u2018initial\u2019\n(handling any dispersal between hatching and breeding), \u2018breeding\u2019\n(movement of the male across the breeding aspect of the cycle), \u2018gravid\u2019\n(movement of the female after breeding but before deposition of young),\nand \u2018oviposition\u2019 (movement made while ovipositing/ bearing young). The\naddition of the variances of these four kernels together consitutes the\nlifespan dispersal kernel; the relationships between different\ncategories inform the phase. For example, full-siblings, whether sampled\nat oviposition or immature states, differ in hatch position based on the\novipositing movements of the mother (including e.g.\u00a0skip oviposition in\nthe case of some mosquitoes). These categories (and any others\ncontaining a full-sib relationship buried in the pedigree) are thus of\nthe \u2018full-sibling\u2019 or \u2018FS\u2019 phase. Half siblings, in mosquitoes (which\nthis package is modelled on) are expected to be due to having the same\nfather and separate mothers: the last contribution of the father\u2019s\ndispersal is at the breeding stage, so the \u2018HS\u2019 phase are differentiated\nby the breeding, gravid, and oviposition phases, but share in common the\ninitial phase. The parent-offspring \u2018PO\u2019 phase, on the other hand, share\nall (or none) of the component dispersal distributions. \nAn example composite simulation is demostrated below:\n``` r\nsimulate_kindist_composite(nsims = 5, initsigma = 50, breedsigma = 30, gravsigma = 50, ovisigma = 10, method = \"Laplace\", kinship = \"H1C\", lifestage = \"ovipositional\")\n#> KINDISPERSE SIMULATION of KIN PAIRS\n#> -----------------------------------\n#> simtype:      composite \n#> kerneltype:       Laplace \n#> kinship:      H1C \n#> simdims:      100 100 \n#> initsigma         50 \n#> breedsigma        30 \n#> gravsigma         50 \n#> ovisigma      10 \n#> lifestage:        ovipositional \n#> \n#> tab\n#> # A tibble: 5 x 8\n#>   id1   id2   kinship distance    x1     y1    x2    y2\n#>   <chr> <chr> <chr>      <dbl> <dbl>  <dbl> <dbl> <dbl>\n#> 1 1a    1b    H1C         302.  31.9   9.67 154.  286. \n#> 2 2a    2b    H1C         170. -35.6  41.1   33.4 196. \n#> 3 3a    3b    H1C         169. 262.  -73.5  139.   42.2\n#> 4 4a    4b    H1C         186. 285.   16.3  162.  156. \n#> 5 5a    5b    H1C         212. 233.   35.2   21.5  50.4\n#> -----------------------------------\n```\nFinally, a custom simulation function, `simulate_kindist_custom()`\nenables the simulation of dispersal in organisms with breeding cycles\ndifferent to the original mosquito species this package was modeled for.\nThese simulations take a model object (of class `DispersalModel`,\ngenerated with the function `dispersal_model()`) which contains detailed\ninformation about breeding phases, the full sibling (FS) and half\nsibling (HS) branch point, the sampling point, and further optional\nparameters defining the accessible breeding cycle more carefully. We\nillustrate this functions\u2019s use in the context of implementing\nkindisperse in a new species subsequently, but an initial example is\ngiven here. First, we generate a custom dispersal model:\n``` r\ndmodel <- dispersal_model(juvenile = 50, breeding = 40, gestation = 30, .FS = \"juvenile\", .HS = \"breeding\", .sampling_stage = \"gestation\")\ndmodel\n#> KINDISPERSE INTERGENERATIONAL DISPERSAL MODEL\n#> ---------------------------------------------\n#> stage:        juvenile   breeding    gestation \n#> dispersal:    50 40  30 \n#> \n#> FS branch:    juvenile \n#> HS branch:    breeding \n#> sampling stage:   gestation \n#> cycle:        0 0 \n#> ---------------------------------------------\n```\nNext, we use this model to simulate dispersal in our organism:\n``` r\nsimulate_kindist_custom(nsims = 5, model = dmodel, kinship = \"PO\")\n#> KINDISPERSE SIMULATION of KIN PAIRS\n#> -----------------------------------\n#> simtype:      custom \n#> kerneltype:       Gaussian \n#> kinship:      PO \n#> simdims:      100 100 \n#> juvenile              50 \n#> breeding              40 \n#> gestation             30 \n#> cycle:            0 0 \n#> lifestage:        gestation \n#> \n#> tab\n#> # A tibble: 5 x 8\n#>   id1   id2   kinship distance    x1    y1    x2     y2\n#>   <chr> <chr> <chr>      <dbl> <dbl> <dbl> <dbl>  <dbl>\n#> 1 1a    1b    PO          53.3  12.7 27.4   62.0   7.18\n#> 2 2a    2b    PO          38.2  65.1 40.5   39.1  12.5 \n#> 3 3a    3b    PO         161.   14.2  3.19 -59.3 146.  \n#> 4 4a    4b    PO         161.   51.4 51.4  171.  160.  \n#> 5 5a    5b    PO         102.   30.9 19.9  -54.5  75.4 \n#> -----------------------------------\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/moshejasper/kindisperse/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9619649325887775,
      "result": {
        "original_header": "4.1.3 Simulating Field Sampling of Kinship Distributions",
        "type": "Text_excerpt",
        "value": "This is done via another function, `sample_kindist()`, and enables the\nexamination of how field sampling conditions could bias the estimation\nof axial sigma. It works with the `KinPairSimulation` or `KinPairData`\nclasses and filters based on the study area size, number of kin expected\nto be found, and trap spacing. It is demonstrated below.\n``` r\ncompsim <- simulate_kindist_composite(nsims = 100000, kinship = \"H2C\")\n\nsample_kindist(compsim, upper = 1000, lower = 200, spacing = 50, n = 25)\n#> Removing distances farther than 1000\n#> Removing distances closer than 200\n#> Setting trap spacing to 50\n#> Down-sampling to 25 kin pairs\n#> 25 kin pairs remaining.\n#> KINDISPERSE SIMULATION of KIN PAIRS\n#> -----------------------------------\n#> simtype:      composite \n#> kerneltype:       Gaussian \n#> kinship:      H2C \n#> simdims:      100 100 \n#> initsigma         100 \n#> breedsigma        50 \n#> gravsigma         50 \n#> ovisigma      25 \n#> lifestage:        immature \n#> \n#> FILTERED\n#> --------\n#> upper:            1000 \n#> lower:            200 \n#> spacing:      50 \n#> samplenum:        25 \n#> \n#> tab\n#> # A tibble: 25 x 8\n#>    id1    id2    kinship distance     x1     y1      x2       y2\n#>    <chr>  <chr>  <chr>      <dbl>  <dbl>  <dbl>   <dbl>    <dbl>\n#>  1 95583a 95583b H2C          225  241.   146.    22.9   139.   \n#>  2 57361a 57361b H2C          575  -37.9  102.     2.30 -492.   \n#>  3 98699a 98699b H2C          275 -107.  -251.   -13.5    -0.406\n#>  4 41608a 41608b H2C          275  -16.6  253.   235.    175.   \n#>  5 74806a 74806b H2C          425  -22.5  117.  -207.   -265.   \n#>  6 72538a 72538b H2C          725 -306.  -267.   229.    235.   \n#>  7 65305a 65305b H2C          225   42.1  -56.3  218.     38.3  \n#>  8 11724a 11724b H2C          575 -249.   391.   203.     59.1  \n#>  9 54137a 54137b H2C          475 -159.    37.2  295.    -74.0  \n#> 10 3391a  3391b  H2C          275  167.   188.   -88.6    61.7  \n#> # ... with 15 more rows\n#> -----------------------------------\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/moshejasper/kindisperse/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9450701223929627,
      "result": {
        "original_header": "4.2.1 Reading and writing files",
        "type": "Text_excerpt",
        "value": "Files can be loaded and saved to and from three separate formats: .csv\nand .tsv (via functions `csv_to_kinpair()`, `tsv_to_kinpair()`, or to\nsave, `kinpair_to_csv()` and `kinpair_to_tsv()`, as well as the\npackage-specific .kindata format which wraps an rds file storing package\nobjects (via functions `read_kindata()` and `write_kindata()`). These\nfiles read to or save from an object of class `KinPairData` (including\nsimulation objects of class `KinPairSimulation`). \n.csv or equivalent files used should have a single column with the\nheader \u2018distance\u2019 that contains the geographical distances between kin\ndyads, and preferably another column labelled \u2018kinship\u2019 which carries\nthe kinship category in a form recognized by this package (see\ndocumentation for further details). Example below:\n``` r\nkinobject <- simulate_kindist_simple(nsims = 25, kinship = \"FS\", lifestage = \"immature\")\n#kinpair_to_csv(kinobject, \"FS_kin.csv\") # saves file\n#csv_to_kinpair(\"FS_kin.csv\") # reloads it\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/moshejasper/kindisperse/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9946968729162802,
      "result": {
        "original_header": "4.2.2 Converting objects to KinPairData format",
        "type": "Text_excerpt",
        "value": "Within the package, there are several ways to convert measures of kin\ndispersal distances into the `KinPairData` format required for\ncalculations of axial distance: `vector_to_kinpair()` which takes a\nvector of kinpair distances, and `df_to_kinpair()` which takes a\n`data.frame` or `tibble` with a similar layout to the `.csv` files\nmentioned earlier (column of geographical distances labelled \u2018distance\u2019\nand optional columns of kin categories (\u2018kinship\u2019) and lifestages\n(\u2019lifestage)). Inverse function is `kinpair_to_tibble()`. See relevant\ndocumentation. Example below:\n``` r\nkinvect <- c(25, 23, 43, 26, 14, 38)\n\nvector_to_kinpair(kinvect, kinship = \"H1C\", lifestage = \"immature\")\n#> KINDISPERSE RECORD OF KIN PAIRS\n#> -------------------------------\n#> kinship:      H1C \n#> lifestage:        immature \n#> cycle:            0 \n#> \n#> tab\n#> # A tibble: 6 x 4\n#>   id1   id2   kinship distance\n#>   <chr> <chr> <chr>      <dbl>\n#> 1 1a    1b    H1C           25\n#> 2 2a    2b    H1C           23\n#> 3 3a    3b    H1C           43\n#> 4 4a    4b    H1C           26\n#> 5 5a    5b    H1C           14\n#> 6 6a    6b    H1C           38\n#> -------------------------------\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/moshejasper/kindisperse/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9863790218062891,
      "result": {
        "original_header": "4.3 Estimating dispersal",
        "type": "Text_excerpt",
        "value": "The package contains a series of functions to estimate and manipulate\naxial sigma values (axial distributions) of simulated and empirical\nclose-kin distributions, as well as to leverage several such\ndistributions of related categories to supply a bootstrapped estimate of\nthe intergenerational dispersal kernel axial sigma.\n \n"
      },
      "source": "https://raw.githubusercontent.com/moshejasper/kindisperse/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9824305541326477,
      "result": {
        "original_header": "4.3.1 Basic estimation of axial sigma",
        "type": "Text_excerpt",
        "value": "Axial sigma is most simply estimated with the function\n`axials(x, composite = 1)`. This function estimates the axial value of a\nsimple kernel assuming that all distances measured represent one\ndispersal event governed by the kernel (e.g.\u00a0the distance between a\nparent and their offspring at the equivalent lifestage, such as both as\neggs). For slightly more complex situations, such as full siblings,\nwhere the distances between them result from two or more draws from the\nsame underlying distribution (ovipositing parent to offspring \\#1,\novipositing parent to offspring \\#2), the value of `composite` can be\nadjusted to reflect the number of such symmetrical component events (for\nthis specific case, you can also use `axials_norm()`). (e.g.\u00a0the\ngreat-grandparent to great-grandchild category, \u2018GGG\u2019 is a combination\nof three draws from the PO distribution, and thus would take\n`composite = 3`):\n``` r\nparoff <- simulate_kindist_simple(nsims = 1000, sigma = 75, kinship = \"PO\")\naxials(paroff)\n#> [1] 78.12723\n```\n \nVarious auxillary functions exist to further manipulate axial distances\nwithin an additive variance framework, enabling the stepwise combination\nor averaging or decomposition of axial sigma values representing\ndifferent distributions. These include `axials_decompose()` (divides\ninto component parts as in the composite option above), `axials_add()`\n(adds two distributions together, e.g.\u00a0FS + FS + PO + PO = 1C),\n`axials_combine()` (mixes two distributions together equally, e.g.\u00a01C\nand H1C becomes the distribution of an even mix of both), and\n`axials_subtract()` subtracts a smaller distribution from a greater\ndistribution to find the residual distribution (e.g.\u00a0GG - PO = PO;\nFS(immature) - FS(ovipositional) = PO). For confidence intervals, there\nare also the permuting functions `axpermute()` and\n`axpermute_subtract()`.\n``` r\naxials_subtract(24, 19)\n#> [1] 14.66288\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/moshejasper/kindisperse/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9696355645440576,
      "result": {
        "original_header": "4.3.2 Estimation of axial sigma of intergenerational (PO) dispersal",
        "type": "Text_excerpt",
        "value": "Building on the above functions, the final estimation function\n`axials_standard()` and its permuted implementation\n`axpermute_standard()` take information about dispersal information\nacross several phased categories and use it to make an estimate of the\ncore, parent-offspring dispersal kernel (defined by axial sigma). Using\nthis equation requires knowing representative spatial distributions of\nat least two **phased** kinship classes that are separated by at least\none complete lifespan. In some cases, this phased requirement can be met\nby compositing two known distributions to approximate the distribution\nof a mixed category (e.g.\u00a0mixing FS and HS categories to create a\ncomposited category that can be compared to an undistinguishe mixture of\n1C and H1C individuals). \nThe function works by subtracting out the phased component of the\ndistributions (e.g.\u00a0the additional oviposition present in FS and 1C)\nleaving the residual lifespan components, then decomposing these down to\na single span. When bootstrapped as in the `axpermute_standard()`\nfunction, these equations output the 95% confidence intervals of the\nresulting PO sigma estimate, as well as the estimate of median sigma.\nThis estimate is the same sigma that interacts with Wright\u2019s\nneighbourhood size (the radius of NS is equal to 2x the axial sigma\nestimate). \nHere we have set up a baseline of the theoretical value of the\nintergenerational kernel (axial) sigma for comparison below. \nFirst, a simple example (full sibs and first cousins) - note that the\nlarger value must be inputted first, i.e.\u00a0as `avect` in the equation.\nBecause they are simulated objects, categories don\u2019t need to be\nsupplied.\n``` r\n# set up sims\n\nfullsibs <- simulate_kindist_composite(nsims = 75, initsigma = init, breedsigma = brd, gravsigma = grv, ovisigma = ovs, kinship = \"FS\")\n\nfullcous <- simulate_kindist_composite(nsims = 75, initsigma = init, breedsigma = brd, gravsigma = grv, ovisigma = ovs, kinship = \"1C\")\n\n# calculate PO axial sigma C.I. \n\naxpermute_standard(fullcous, fullsibs)\n#>      2.5%      mean     97.5% \n#>  78.25793  89.93338 102.15712\n```\nAs we can see, the C.I. neatly brackets the actual axial value, though\nwith fairly large wings due to the small sample size. Now we set up a\nmore complex case, involving a mixture of full and half cousins and a\ncompensating compositing of full and half siblings (this will involve\nsome data-wrangling):\n``` r\n# Set up new distributions\nhalfsibs <- simulate_kindist_composite(nsims = 75, initsigma = init, breedsigma = brd, gravsigma = grv, ovisigma = ovs, kinship = \"HS\")\n\nhalfcous <- simulate_kindist_composite(nsims = 75, initsigma = init, breedsigma = brd, gravsigma = grv, ovisigma = ovs, kinship = \"H1C\")\n\n# combine cousin distributions and recompose as object. Chaning kinship\n# to standard value for unknown as I will be combining the distributions. \nfc <- dplyr::mutate(kinpair_to_tibble(fullcous), kinship = \"UN\")\nhc <- dplyr::mutate(kinpair_to_tibble(halfcous), kinship = \"UN\")\ncc <- tibble::add_row(fc, hc) \ncousins <- df_to_kinpair(cc)\ncousins\n#> KINDISPERSE RECORD OF KIN PAIRS\n#> -------------------------------\n#> kinship:      UN \n#> lifestage:        immature \n#> cycle:            0 \n#> \n#> tab\n#> # A tibble: 150 x 9\n#>    id1   id2   kinship distance    x1     y1      x2     y2 lifestage\n#>    <chr> <chr> <chr>      <dbl> <dbl>  <dbl>   <dbl>  <dbl> <chr>    \n#>  1 1a    1b    UN          67.5 -65.1  13.9   -14.2  -30.4  immature \n#>  2 2a    2b    UN          33.5  94.7  -2.28   62.2    5.78 immature \n#>  3 3a    3b    UN         118.   50.3  40.2   163.    75.2  immature \n#>  4 4a    4b    UN         298.  112.   40.6   -64.9  281.   immature \n#>  5 5a    5b    UN         178.  136.  115.      7.86  -8.27 immature \n#>  6 6a    6b    UN          25.8  25.4  31.1    20.8    5.76 immature \n#>  7 7a    7b    UN         168.   46.0  -9.32 -121.   -30.1  immature \n#>  8 8a    8b    UN         131.  214.   61.2   146.   173.   immature \n#>  9 9a    9b    UN         162.  -15.9  69.4  -178.    63.8  immature \n#> 10 10a   10b   UN         167.  114.   -1.36   61.7  158.   immature \n#> # ... with 140 more rows\n#> -------------------------------\n```\nNote this is now a `KinPairData` object rather than a\n`KinPairSimulation`. The conversion to tibble and back has stripped the\nsimulation class data. Now to run the estimation function, supplying\nmissing category data:\n``` r\n# amix allows supply of additional (mixed) kin category H1C to acat 1C;\n# bcomp allows supply of distribution to composite with bvect (this is done to match \n# the cousin mixture in phase)\naxpermute_standard(avect = cousins, acat = \"1C\", amix = TRUE, amixcat = \"H1C\", bvect = fullsibs, bcomp = TRUE, bcompvect = halfsibs)\n#>      2.5%      mean     97.5% \n#>  75.69095  89.00468 100.93167\n```\n \nThis estimate is a lot more convoluted, and not as \u2018spot on\u2019- but the\ntheoretical value of 94 is well within the confidence intervals.\n \n"
      },
      "source": "https://raw.githubusercontent.com/moshejasper/kindisperse/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9993953113921759,
      "result": {
        "original_header": "4.4 Adapting to a new species: *Antechinus*",
        "type": "Text_excerpt",
        "value": "Using custom dispersal simulations and parameters, we are well placed to\nexplore what is typically involved in adapting this method and package\nto a species with a different life history and breeding structure to\nthat of *Ae. aegypti* and other related species. The example chosen here\nis a species of *Antechinus* - a small marsupial native to Australia.\nNote that this example is for illustrative purposes only.\n \n"
      },
      "source": "https://raw.githubusercontent.com/moshejasper/kindisperse/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9696689933491062,
      "result": {
        "original_header": "4.4.1 Assemble known background information",
        "type": "Text_excerpt",
        "value": "Breeding and dispersal can be highly diverse processes between organisms\n- simply copying and pasting a method from one species to another\nwithout careful consideration of their differences and unique contexts\nis unwise. What relevant information can we find about species of\n*Antechinus*? \nFor *Antechinus*, mating takes place across a single week each year, and\nis promiscuous. Males only mate once, and die shortly after mating.\nFemales live up to two years, producing two litters in that time. Each\nlitter will likely contain offspring from multiple males (Cockburn,\nScott, and Scotts 1985). In the same paper, Cockburn et al.\u00a0recognize\nseven life history stages: \nPouch young exhibit obligatory attachment to the mother\u2019s teat. Nest\nyoung still feed on the teat, but are left in the nest (typically a hole\nin a tree) when the mother forages for food, until weaning. Juveniles\ndescribe the post-weaning, physiologically independent animals before\nsynchronised reproduction occurs. This interval covers most of the first\nyear. Reproductives (male and female) describe the animals within the\nvery short mating window each year (males mate with multiple females,\nand vice versa). Mothers covers pregnancy, lactation (overlapping with\nnest and pouch young) and post-lactation (overlapping with the juvenile\nphase). \nNatal dispersal (occuring after weaning) is strongly male-biased\n(Cockburn, Scott, and Scotts 1985), with males dispersing from the nest\nand often from the maternal home range, while females dispersal is more\nlocalised. In that time, males can disperse over hundreds of metres - in\nsome species (e.g.\u00a0*Antechnius stuartii*), more than a kilometre (Banks\nand Lindenmayer 2014). Female dispersal is not frequently beyond 50\nmetres (Fisher 2005).\n \n"
      },
      "source": "https://raw.githubusercontent.com/moshejasper/kindisperse/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9299631408973376,
      "result": {
        "original_header": "4.4.2 Identify useful life stages and kinship categories",
        "type": "Text_excerpt",
        "value": "Our key research questions will drive which aspects of the above life\nhistory we want to focus on further. For this exercise, we want to be\nable to estimate parent-offspring dispersal so that we can gain an\nestimate of the neighbourhood area. Importantly, we need this estimate\nto get around the sex-biased disersal in this species. \nLet\u2019s define a life cycle. Pouch and nest young are still completely\ndependent on the mother, so will show no independent dispersal. We start\nour description of a single intergenerational breeding cycle with the\njuvenile stage, followed by breeding. We will break down the \u2018mother\u2019\nlifestage into \u2018gestation\u2019 and \u2018pouch.\u2019 \nWhat kinship categories do we expect to see in *Antechinus* populations?\nLet\u2019s break this down by order:\n \n"
      },
      "source": "https://raw.githubusercontent.com/moshejasper/kindisperse/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9394289241833809,
      "result": {
        "original_header": "First order kinship",
        "type": "Text_excerpt",
        "value": "Within this category we have the `PO` and `FS` classes. Full sibs share\nthe same mother, and the fathers only mate during one breeding cycle, so\nwe can expect all full sibs to be part of the same cohort, and FS phased\ndisperal to begin in the juvenile phase, as offspring leave the nest.\n \n"
      },
      "source": "https://raw.githubusercontent.com/moshejasper/kindisperse/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9386916920460417,
      "result": {
        "original_header": "Second order kinship",
        "type": "Text_excerpt",
        "value": "The `HS` kinship class can be generated by a male mating with multiple\nfemales, or a female mating with multiple males. Both of these have\ndifferent dispersal modes (the former is shaped by breeding dispersal,\nthe latter in a similar manner to the `FS` class). For our initial\nsimulation, we will only treat the former kind of `HS` dispersal. Note\nthat as females bear young over two generations, a third class of `HS`\nis possible, between an adult female mother and the pouch young of her\n(now 2nd yr) mother - cases like this are readily distinguishable by\nother life history traits, e.g.\u00a0age. \nThe `AV` kinship class (between an adult female and the offspring of her\nfull sibling - a partially sex-biased category)\n \n"
      },
      "source": "https://raw.githubusercontent.com/moshejasper/kindisperse/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9058216809111694,
      "result": {
        "original_header": "Third order kinship",
        "type": "Text_excerpt",
        "value": "`HAV` - half avuncular. Most will be intergenerational (females of\nprevious generation to males and females of present generation).\nHowever, because females breed across two cycles, this category can\noccur within the same generational cohort (see below). \n`1C` individuals will be part of the same generational cohort and result\nfrom parent-offspring dispersal events, making them a prime target\n(along with the FS category) for developing an intergenerational\ndispersal estimate.\n \n"
      },
      "source": "https://raw.githubusercontent.com/moshejasper/kindisperse/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9408034423025635,
      "result": {
        "original_header": "4.4.3 Build a dispersal model",
        "type": "Text_excerpt",
        "value": "Armed with the above categories, we are well placed to put together a\nrudimentary model of *Antechinus*. We will assign dispersal parameters\nto approximately reflect what we consider important in the above. As we\nare focusing on intergenerational dispersal in general, for now, we will\nignore sex-biased aspects of dispersal (though we will take them into\naccount when planning sampling).\n``` r\nantechinus_model <- dispersal_model(juvenile = 100, breeding = 50, gestation = 25, pouch = 25, .FS = \"juvenile\", .HS = \"breeding\", .sampling_stage = \"juvenile\")\nantechinus_model\n#> KINDISPERSE INTERGENERATIONAL DISPERSAL MODEL\n#> ---------------------------------------------\n#> stage:        breeding   gestation   pouch   juvenile \n#> dispersal:    50 25  25  100 \n#> \n#> FS branch:    juvenile \n#> HS branch:    breeding \n#> sampling stage:   juvenile \n#> cycle:        0 0 \n#> ---------------------------------------------\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/moshejasper/kindisperse/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8920870379190542,
      "result": {
        "original_header": "4.4.4 Build a custom dispersal simulation",
        "type": "Text_excerpt",
        "value": "Now we\u2019ll use the `axials()` function to characterise our \u2018default\u2019\ndispersal for the model: \nThe value is around 117 the \u2018expected\u2019 value of PO we should get back\nfrom more complex estimation processes.\n \n"
      },
      "source": "https://raw.githubusercontent.com/moshejasper/kindisperse/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9725100384099354,
      "result": {
        "original_header": "4.4.5 Validate axial dispersal estimates and refine model",
        "type": "Text_excerpt",
        "value": "The FS/1C strategy has been validated theoretically - but an important\nissue remains: the `HAV` category. While all males only breed during one\nbreeding season, in some *Antechinus* species, many females breed for a\nsecond season. This means that the situation will arise where a mother\nbears offspring in one breeding season, and both the mother and her\noffspring bear young in the subsequent breeding season. As the second\nbatch of young she bears are related to her previous litter as\nhalf-siblings, they are related to the that litter\u2019s offspring under the\nhalf-avuncular `HAV` kinship category. As `HAV` is of the same order of\nkinship (3rd) as `1C`, and (via this pathway) will be of the same\nlifestage, yet both pass through differing dispersal routes, without\nfurther information it would be impossible to use this class. Similar\nissues would hold for the `H1C` (half-cousin) and `1C1` (first cousin\nonce removed) categories at the fourth order of kinship. \nIf we were simply sampling juvenile *Antechinus* as in our initial\nsetup, there would be no way to correct for this ambiguity in the data.\nWe need to include richer pedigree information to distinguish between\nthe various classes. Instead of sampling at the juvenile stage, let\u2019s\nswitch the focus to females with pouch young, and instead of genotyping\none individual, plan to genotype all pouch young of a female:\n``` r\nantechinus_model <- dispersal_model(juvenile = 100, breeding = 50, gestation = 25, pouch = 25, .FS = \"juvenile\", .HS = \"breeding\", \n                                    .sampling_stage = \"pouch\", .breeding_stage = \"breeding\", .visible_stage = \"juvenile\")\nantechinus_model\n#> KINDISPERSE INTERGENERATIONAL DISPERSAL MODEL\n#> ---------------------------------------------\n#> stage:        juvenile   breeding    gestation   pouch \n#> dispersal:    100    50  25  25 \n#> \n#> FS branch:    juvenile \n#> HS branch:    breeding \n#> sampling stage:   pouch \n#> cycle:        0 0 \n#> ---------------------------------------------\n```\n \nNote that we have made several other previously implied model parameters\nexplicit this time also (the default values are preserved here, but the\nconcepts are important). Firstly, the `breeding_stage` parameter defines\nwhich stage in the breeding cycle breeding actually occurs at. This is\nby default anchored to the `HS` branch, but in situations where we might\nwith to model `HS` dispersal that begins later (e.g.\u00a0where offspring\nhave multiple fathers but the same mother) - we might shift the `HS`\nbranch to the juvenile stage, but preserve our information on breeding\nwith this parameter. Second, the `visible_stage` parameter defines at\nwhat point in the life cycle an individual is considered \u2018available by\ndefault for sampling\u2019 in preference to its parent. This is by default\nanchored to the `FS` branch, and approximates birth, hatching, etc. in\nmany species - but in many species (e.g.\u00a0marsupials) an animal will be\nborn, but still attached to the parent from the perspective of\ndispersal. In such situations, the `visible_stage` parameter describes\nwhich individual will be sampled by default at an overlapping lifestage.\nAs in our model, `visible_stage` is anchored to the FS-branch juvenile\nstage, the default sampled pouch individuals will be the mothers rather\nthan the offspring. In a simulation, the pouch offspring can be accessed\nby setting the breeding cycle parameter to `-1`.\n \n"
      },
      "source": "https://raw.githubusercontent.com/moshejasper/kindisperse/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9160105065806614,
      "result": {
        "original_header": "4.4.6 Finalize target kinship categories",
        "type": "Text_excerpt",
        "value": "By sampling at this stage, we unlock four different kinds of\ngenerational comparisons, all synced to the same life point: (1)\nintra-pouch relationships (i.e.\u00a0between different pouch young carried by\nthe same mother), (2) inter-pouch relationships (kinships between young\ncarried by different females), (3) kinship between adult females, and\n(4) kinships between pouch young and adult females other than their\nmother. \nAll of these categories can be combined with the genotypic data to\nresolve pedigree information and enable more thorough calculations of\nbreeding dispersal, via the following resolution: \n1.  FS between pouch young: this is now a trivial category, as these\n    will be measured before any substantial dispersal has occurred\n    within this category. This \u2018zeroing\u2019 of the FS phase will simplify\n    additional relationships.\n2.  HS between pouch young (same pouch) \u2013 these correspond to the\n    portion of HS dispersal that results from multiple males mating with\n    the same female. Also a trivial category.\n3.  HS between pouch young (different pouches) as these have different\n    maternal ancestors, they will share the same paternal ancestor. This\n    category thus supplies a HS estimate of the combined breeding,\n    gestational and pouch phases.\n4.  FS between (female) parents. As the FS phase is zeroed this category\n    constitutes an estimate of lifespan dispersal for *Antechinus*\n    females. However, as dispersal within this species is sex-biased,\n    this does doesn\u2019t constitute the true intergenerational dispersal\n    distance (for IBD, gene flow, etc.). Note that in this context all\n    compared offspring are expected to fall into the 1C category.\n5.  HS between (female) parents. These will result from a mixture of a\n    shared male or female parent (i.e.\u00a0the dispersal modes found in (b)\n    and (c) above). This category thus contains the true HS phase in\n    addition to a female-dispersed lifespan.\n6.  3rd order (female) parents. Depending on the species, it may be\n    impossible to distinguish between the 1C and HAV kinships for\n    individuals of this category.\n7.  3rd order between pouch young (different pouches). By themselves,\n    this category will be indeterminate between the 1C and HAV\n    categories. One approach would be to combine this category with\n    category (f) to cancel out the composite phase and leave an estimate\n    of PO dispersal \u2013 but as the more dispersed category are female\n    adults, this would once again only produce an estimate of female\n    dispersal across the breeding cycle. Is there another way? \nYes! We can check other pedigree relationships to distinguish between\nthe 1C and HAV categories. Firstly, we compare the parents. If they are\nFS, their offspring are 1C and in isolation constitute an estimate of\nfemale intergenerational dispersal as in (f) above. But an even more\nuseful test is to reciprocally cross-check the kinship between pouch\nyoung and the mother of their putative cousins. If the two mothers were\nnot full siblings, we expect this pairing to produce an unrelated kin\ncategory in the case of 1C offspring. However, in the HAV case, one of\nthe mothers must also be the grandmother of the other pouch young! This\nwould produce the 2nd order (GG) relationship between the pouch young\nand their grandmother. Thus, pedigree information helps us to\ndistinguish between HAV and 1C pouch young. Once 1C pouch young have\nbeen identified (via all approaches) they will constitute an estimate of\nthe elusive intergenerational category PO (sex-independent). Similarly,\nthe HAV offspring where the GG individual is not the parent of the other\nmother can be used to derive an estimate of male intergenerational\ndispersal! \nFor this reason, our key kinship category targets are: \n1.  kinship between parents (to identify FS parents (1C offspring) as\n    well as PO parents (HAV offspring))\n2.  kinship between pouch young and non-parent females where a 1C/HAV\n    relationship exists between offspring (if 2nd order where parents\n    are not FS, interpret as GG category, meaning offspring are HAV.\n    Otherwise, interpret as 1C) \nInspecting the results, we see that the 1C category is well-dispersed,\nwhile the FS category is entirely zero (FS offspring in the pouch are\nnot dispersed at all). \nThis is excellent so far. Mean dispersal is still around 117, so\nassuming sampling is adequate, this approach will lead us to\nintergenerational dispersal.\n \n"
      },
      "source": "https://raw.githubusercontent.com/moshejasper/kindisperse/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9902730934861276,
      "result": {
        "original_header": "4.4.9 Load data and generate in-field dispersal estimates",
        "type": "Text_excerpt",
        "value": "Follow the instructions given in 4.2 and 4.3 to load sample data into\nthe program and supply estimates. The `axials_standard` and\n`axials_permute` functions contain the parameters `acycle` and `bcycle`,\nwhich enable the calibration of the estimation process to pouch young\n(remember to use the `override` parameter in this context). Or you could\nsimply avoid phase information, set the FS category to zero (as they are\nnon-dispersed), and perform a 1C-FS subtraction as is (which will\neffectively just decompose the 1C into two PO increments - works in this\ncase as at the pouch phase we have synced FS dispersal to PO dispersal\n(as all FS offspring coincide with maternal parent)).\n \n"
      },
      "source": "https://raw.githubusercontent.com/moshejasper/kindisperse/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9894415962394661,
      "result": {
        "original_header": "4.4.10 Cross-check field estimates for bias and calibrate",
        "type": "Text_excerpt",
        "value": "Once you have generated in-field estimates of dispersal, it is always\ngood practice to substitute these estimate back into the original\nsimulation and rerun the sampling analysis in 4.4.7 again. If the new\nestimate is significantly underestimated by the simulation after\nsubsampling to the dimensions of your study site, it is likely that the\nstudy site is too small, and is biasing estimates of dispersal - one\napproach from here would be to progressively increase the dispersal\ndistance until the new subsampled estimate matches the one generated by\nthe study (this will be a more likely figure for dispersal in the\nspecies, and should inform future studies).\n \n"
      },
      "source": "https://raw.githubusercontent.com/moshejasper/kindisperse/main/README.Rmd",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/moshejasper/kindisperse/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/moshejasper/kindisperse/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "moshejasper/kindisperse"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "KINDISPERSE 0.10.2"
      },
      "source": "https://raw.githubusercontent.com/moshejasper/kindisperse/main/README.Rmd",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/moshejasper/kindisperse/main/man/figures/README-graphical_simulation-1.png"
      },
      "source": "https://raw.githubusercontent.com/moshejasper/kindisperse/main/README.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/moshejasper/kindisperse/main/man/figures/README-simgraphpin-1.png"
      },
      "source": "https://raw.githubusercontent.com/moshejasper/kindisperse/main/README.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/moshejasper/kindisperse/main/man/figures/README-simgraphhist-1.png"
      },
      "source": "https://raw.githubusercontent.com/moshejasper/kindisperse/main/README.Rmd",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Installation",
        "type": "Text_excerpt",
        "value": "You can install the released version of kindisperse from\n[CRAN](https://CRAN.R-project.org) with:\n\n``` r\ninstall.packages(\"kindisperse\")\n```\n\nAnd the development version from [GitHub](https://github.com/) with:\n\n``` r\n# install.packages(\"devtools\")\ndevtools::install_github(\"moshejasper/kindisperse\")\n```\n\nOnce installed, load the package as follows:\n\n``` r\nlibrary(kindisperse)\n#> kindisperse 0.10.2\n```\n"
      },
      "source": "https://raw.githubusercontent.com/moshejasper/kindisperse/main/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9903931956914683,
      "result": {
        "original_header": "3.2 External interface",
        "type": "Text_excerpt",
        "value": "Alternatively, objects you have loaded or created in the R package\nenvironment can be passed to the app by first mounting them to the\nspecial `appdata` environment which can be accessed from within the app\nvia the `Load` tab. Mounted objects must be of class `KinPairData` or\n`KinPairSimulation`. To mount an object, use the\n`mount_appdata(obj, \"nm\")` function (unmount with\n`unmount_appdata(\"nm\")`). The `appdata` environment can be viewed with\n`display_appdata()` and cleared with `reset_appdata()`. Objects mounted\nto appdata from within the app can also be retrieved with\n`retrieve_appdata()` or `retrieveall_appdata()`.\n``` r\nfullsibs <- simulate_kindist_composite(nsims = 100, ovisigma = 25, kinship = \"FS\")\nreset_appdata()\nmount_appdata(fullsibs, \"fullsibs\")\ndisplay_appdata()\n#> <environment: kindisperse_appdata>\n#> parent: <environment: namespace:kindisperse>\n#> bindings:\n#>  * fullsibs: <KnPrSmlt>\nfullsibs2 <- retrieve_appdata(\"fullsibs\")\nreset_appdata()\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/moshejasper/kindisperse/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8137297300645349,
      "result": {
        "original_header": "4. The R package",
        "type": "Text_excerpt",
        "value": "Package functions and typical usage are introduced below\n \n"
      },
      "source": "https://raw.githubusercontent.com/moshejasper/kindisperse/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9261883300244471,
      "result": {
        "original_header": "4.3.2 Estimation of axial sigma of intergenerational (PO) dispersal",
        "type": "Text_excerpt",
        "value": "Let\u2019s try out some simulated values see the function in action. First,\nwe\u2019ll set up our individual axial sigmas for the component\ndistributions.\n``` r\n# set up initial sigma values\n\ninit = 50\nbrd = 25\ngrv = 75\novs = 10\n\n# calculate theoretical PO value\npo_sigma <- sqrt(init^2 + brd^2 + grv^2 + ovs^2)\npo_sigma\n#> [1] 94.07444\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/moshejasper/kindisperse/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9073521082598599,
      "result": {
        "original_header": "4.4.6 Finalize target kinship categories",
        "type": "Text_excerpt",
        "value": "Pedigree relationships we also need to test include: \n"
      },
      "source": "https://raw.githubusercontent.com/moshejasper/kindisperse/main/README.Rmd",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/moshejasper/kindisperse/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "YEAR: 2020\nCOPYRIGHT HOLDER: Moshe-Elijah Jasper\n"
      },
      "source": "https://raw.githubusercontent.com/moshejasper/kindisperse/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "kindisperse"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "moshejasper"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 311268,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/moshejasper/kindisperse/main/README.Rmd"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/moshejasper/kindisperse/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "moshejasper",
          "type": "User"
        },
        "date_created": "2021-07-28T08:35:48Z",
        "date_published": "2021-07-28T09:18:47Z",
        "description": "Fixed htmlwidgets dependency",
        "html_url": "https://github.com/moshejasper/kindisperse/releases/tag/v0.10.2",
        "name": "v0.10.2",
        "release_id": 46890543,
        "tag": "v0.10.2",
        "tarball_url": "https://api.github.com/repos/moshejasper/kindisperse/tarball/v0.10.2",
        "type": "Release",
        "url": "https://api.github.com/repos/moshejasper/kindisperse/releases/46890543",
        "value": "https://api.github.com/repos/moshejasper/kindisperse/releases/46890543",
        "zipball_url": "https://api.github.com/repos/moshejasper/kindisperse/zipball/v0.10.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "moshejasper",
          "type": "User"
        },
        "date_created": "2021-07-19T14:18:26Z",
        "date_published": "2021-07-19T14:27:13Z",
        "description": "Implemented the Dispersal Model object and the 'simulate_kindist_custom' function, enabling extension of package functions to non-mosquito species. Enabled more complex treatment of breeding cycle stage at sampling in the simulation and estimation of close-kin dispersal. ",
        "html_url": "https://github.com/moshejasper/kindisperse/releases/tag/v0.10.1",
        "name": "v0.10.1",
        "release_id": 46416152,
        "tag": "v0.10.1",
        "tarball_url": "https://api.github.com/repos/moshejasper/kindisperse/tarball/v0.10.1",
        "type": "Release",
        "url": "https://api.github.com/repos/moshejasper/kindisperse/releases/46416152",
        "value": "https://api.github.com/repos/moshejasper/kindisperse/releases/46416152",
        "zipball_url": "https://api.github.com/repos/moshejasper/kindisperse/zipball/v0.10.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "moshejasper",
          "type": "User"
        },
        "date_created": "2021-03-30T02:54:40Z",
        "date_published": "2021-03-30T03:36:26Z",
        "description": "Updates v0.9.1 to change the 'gamma' value of the 'method' parameter in 'simulate_kindist_simple' and related functions to 'vgamma' to better reflect the underlying distribution (variance-gamma).",
        "html_url": "https://github.com/moshejasper/kindisperse/releases/tag/v0.9.2",
        "name": "v0.9.2 gentle-solid-poem",
        "release_id": 40670832,
        "tag": "v0.9.2",
        "tarball_url": "https://api.github.com/repos/moshejasper/kindisperse/tarball/v0.9.2",
        "type": "Release",
        "url": "https://api.github.com/repos/moshejasper/kindisperse/releases/40670832",
        "value": "https://api.github.com/repos/moshejasper/kindisperse/releases/40670832",
        "zipball_url": "https://api.github.com/repos/moshejasper/kindisperse/zipball/v0.9.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "moshejasper",
          "type": "User"
        },
        "date_created": "2021-03-21T02:23:39Z",
        "date_published": "2021-03-21T02:36:16Z",
        "description": "Updates 0.9.0 to improve app layout, & changes 'elongate' function to refer to 'aspect' rather than 'shape'. ",
        "html_url": "https://github.com/moshejasper/kindisperse/releases/tag/v0.9.1",
        "name": "v0.9.1",
        "release_id": 40113895,
        "tag": "v0.9.1",
        "tarball_url": "https://api.github.com/repos/moshejasper/kindisperse/tarball/v0.9.1",
        "type": "Release",
        "url": "https://api.github.com/repos/moshejasper/kindisperse/releases/40113895",
        "value": "https://api.github.com/repos/moshejasper/kindisperse/releases/40113895",
        "zipball_url": "https://api.github.com/repos/moshejasper/kindisperse/zipball/v0.9.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "moshejasper",
          "type": "User"
        },
        "date_created": "2021-03-19T14:31:48Z",
        "date_published": "2021-03-21T02:22:32Z",
        "description": "Full implementation of kindisperse up to version 9. \r\nSince previous release: \r\n\r\nAdded gamma kernel & functions\r\nAdded rectangular dimensions\r\nAdded Mentari court data\r\nCRAN compatibility updates\r\n",
        "html_url": "https://github.com/moshejasper/kindisperse/releases/tag/v0.9.0",
        "name": "v0.9.0 clever-tiny-basis",
        "release_id": 40113755,
        "tag": "v0.9.0",
        "tarball_url": "https://api.github.com/repos/moshejasper/kindisperse/tarball/v0.9.0",
        "type": "Release",
        "url": "https://api.github.com/repos/moshejasper/kindisperse/releases/40113755",
        "value": "https://api.github.com/repos/moshejasper/kindisperse/releases/40113755",
        "zipball_url": "https://api.github.com/repos/moshejasper/kindisperse/zipball/v0.9.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "moshejasper",
          "type": "User"
        },
        "date_created": "2020-12-11T15:30:23Z",
        "date_published": "2020-12-11T15:42:17Z",
        "description": "This release outfitted the package with import and export functions, as well as an interface to transfer data between the app & r package environments. It also changed references to 'category' in parameters, to references to 'kinship'. The overall effect is to 'close the circle' on all of the most important functionality this app & package were intended to have. From here it is a question of bugfixes, minor tweaks, & updating documentation & tutorial/vignettes. \r\n\r\n* changed 'category' parameter to 'kinship' parameter in all classes & functions ( #19 )\r\n\r\n* Added file writing, reading & conversion functions (kinpair_to_tibble(), kinpair_to_tsv(), write_kindata(), read_kindata(), tsv_to_kinpair, etc. (#20 ) \r\n\r\n* Created appdata environment with functions for transferring ('mounting') data in and out of the app (#21 ) \r\n\r\n* Overhauled app to make use of the new functions to import/export/transfer data in & around (#23). \r\n\r\n*  Made sample_kindist() function compatible in a basic way with KinPairData class (as these can now be passed to the app. ",
        "html_url": "https://github.com/moshejasper/kindisperse/releases/tag/v0.6.0",
        "name": "v0.6.0 abrupt-delicious-coffee",
        "release_id": 35160090,
        "tag": "v0.6.0",
        "tarball_url": "https://api.github.com/repos/moshejasper/kindisperse/tarball/v0.6.0",
        "type": "Release",
        "url": "https://api.github.com/repos/moshejasper/kindisperse/releases/35160090",
        "value": "https://api.github.com/repos/moshejasper/kindisperse/releases/35160090",
        "zipball_url": "https://api.github.com/repos/moshejasper/kindisperse/zipball/v0.6.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "moshejasper",
          "type": "User"
        },
        "date_created": "2020-12-09T13:28:38Z",
        "date_published": "2020-12-09T13:47:27Z",
        "description": "Building on the successes of the previous releases, this version introduces the new class KinPairData, which acts a stripped down foundation to KinPairSimulation.(the 0.4 increment) #13  Both classes have been overhauled with accessor methods and constructor and conversion functions (#14 #16 #17 ), and other functions now cross-talk to these classes much better also (e.g. axial functions taking them as input, #15 )\r\n\r\nSeveral parameter names have been changed, especially with respect to classes (e.g. dims became simdims, sigma became dsigma)\r\nnote: a future version will globally replace 'category' with 'kinship' in many contexts. \r\n\r\nThe app data storage system was also overhauled, replacing a buggy & not suitable for remote user file-based system with an environment-based system. (the 0.5 increment, #18 )\r\n",
        "html_url": "https://github.com/moshejasper/kindisperse/releases/tag/v0.5.0",
        "name": "v0.5.0 curious-hollow-piano",
        "release_id": 35043889,
        "tag": "v0.5.0",
        "tarball_url": "https://api.github.com/repos/moshejasper/kindisperse/tarball/v0.5.0",
        "type": "Release",
        "url": "https://api.github.com/repos/moshejasper/kindisperse/releases/35043889",
        "value": "https://api.github.com/repos/moshejasper/kindisperse/releases/35043889",
        "zipball_url": "https://api.github.com/repos/moshejasper/kindisperse/zipball/v0.5.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "moshejasper",
          "type": "User"
        },
        "date_created": "2020-12-04T08:15:15Z",
        "date_published": "2020-12-04T08:21:20Z",
        "description": "Stable functions, increased documentation, and less unhelpful imports. ",
        "html_url": "https://github.com/moshejasper/kindisperse/releases/tag/v0.3.1",
        "name": "v0.3.1 shivering-fragile-advocate",
        "release_id": 34811342,
        "tag": "v0.3.1",
        "tarball_url": "https://api.github.com/repos/moshejasper/kindisperse/tarball/v0.3.1",
        "type": "Release",
        "url": "https://api.github.com/repos/moshejasper/kindisperse/releases/34811342",
        "value": "https://api.github.com/repos/moshejasper/kindisperse/releases/34811342",
        "zipball_url": "https://api.github.com/repos/moshejasper/kindisperse/zipball/v0.3.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "moshejasper",
          "type": "User"
        },
        "date_created": "2020-12-02T06:38:26Z",
        "date_published": "2020-12-02T06:57:17Z",
        "description": "This pre-release version incorporates much basic functionality, including the standard simulation & graph functions, and a rudimentary version of the kindisperse app (access through 'run_kindisperse()' R command. ",
        "html_url": "https://github.com/moshejasper/kindisperse/releases/tag/v0.1.0",
        "name": "v0.1.0 brilliant-trick-alarm",
        "release_id": 34674806,
        "tag": "v0.1.0",
        "tarball_url": "https://api.github.com/repos/moshejasper/kindisperse/tarball/v0.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/moshejasper/kindisperse/releases/34674806",
        "value": "https://api.github.com/repos/moshejasper/kindisperse/releases/34674806",
        "zipball_url": "https://api.github.com/repos/moshejasper/kindisperse/zipball/v0.1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "3.1 Running the app",
        "parent_header": [
          "3. The shiny app"
        ],
        "type": "Text_excerpt",
        "value": "To run the app, enter the function `run_kindisperse()` and in a moment\nthe app will appear in a separate window. To close, exit this window, or\nalternatively hit the \u2018stop\u2019 button or equivalent in RStudio.\n"
      },
      "source": "https://raw.githubusercontent.com/moshejasper/kindisperse/main/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4.4.8 Run the study!",
        "parent_header": [
          "4. The R package",
          "4.4 Adapting to a new species: *Antechinus*"
        ],
        "type": "Text_excerpt",
        "value": "Now we are as prepared as possible to perform sampling, genotype\nindividuals, etc.\n"
      },
      "source": "https://raw.githubusercontent.com/moshejasper/kindisperse/main/README.Rmd",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 04:44:42",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "4.4.7 Simulate sampling site and finalise study design",
        "parent_header": [
          "4. The R package",
          "4.4 Adapting to a new species: *Antechinus*"
        ],
        "type": "Text_excerpt",
        "value": "Now, before we go any further, we need to estimate how large a study\nsite we will need to gain an adequate understanding of dispersal, and\navoid missing rarer long-tailed dispersal events. We know that our FS\npouch young haven\u2019t dispersed, so we won\u2019t need to worry about them. But\nwhat about the 1C category? At this point in an actual study, the\nexisting model should be refined as much as possible to provide\n\u2018realistic\u2019 estimates of dispersal at each stage (erring on the side of\nlarger estimates if uncertain).\n\nLet\u2019s check an initial sampling site of 100m by 100m:\n\n``` r\nant_1c_juv %>% sample_kindist(dims = 100, n = 1000) %>% axpermute_standard(ant_fs_juv, nsamp = 100, override = TRUE)\n#> Setting central sampling area to 100 by 100\n#> Down-sampling to 1000 kin pairs\n#> 1000 kin pairs remaining.\n#>     2.5%     mean    97.5% \n#> 25.20273 27.71623 30.10909\n```\n\nA 100x100 metre sampling area is woefully inadequate (estimating the\nkernel to only \\~ 27m, well short of the 117 we need)! We try again,\nthis time in a 1km x 1km site:\n\n``` r\nant_1c_juv %>% sample_kindist(dims = 1000, n = 1000) %>% axpermute_standard(ant_fs_juv, nsamp = 100, override = TRUE)\n#> Setting central sampling area to 1000 by 1000\n#> Down-sampling to 1000 kin pairs\n#> 1000 kin pairs remaining.\n#>      2.5%      mean     97.5% \n#>  87.86239  99.84018 111.59100\n```\n\nWe are doing better here: with an average of \\~100m. But we\u2019re still 15%\nshort, and barely including the correct value in our C.I.s What about\n2km x 2km?\n\n``` r\nant_1c_juv %>% sample_kindist(dims = 2000, n = 1000) %>% axpermute_standard(ant_fs_juv, nsamp = 100, override = TRUE)\n#> Setting central sampling area to 2000 by 2000\n#> Down-sampling to 1000 kin pairs\n#> 1000 kin pairs remaining.\n#>      2.5%      mean     97.5% \n#>  97.95822 114.03904 130.29055\n```\n\nThis estimate is acceptable, with a mean only a few metres short, and\nthe true value well within C.I.s. Accordingly, we make the decision to\nsample within a grid of at least 2km by 2 km.\n"
      },
      "source": "https://raw.githubusercontent.com/moshejasper/kindisperse/main/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4.4.8 Run the study!",
        "parent_header": [
          "4. The R package",
          "4.4 Adapting to a new species: *Antechinus*"
        ],
        "type": "Text_excerpt",
        "value": "Now we are as prepared as possible to perform sampling, genotype\nindividuals, etc.\n"
      },
      "source": "https://raw.githubusercontent.com/moshejasper/kindisperse/main/README.Rmd",
      "technique": "header_analysis"
    }
  ]
}