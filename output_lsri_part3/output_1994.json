{
  "application_domain": [
    {
      "confidence": 22.45,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Mask out low complexity regions in custome reference genome:",
        "parent_header": [
          "FaNDOM"
        ],
        "type": "Text_excerpt",
        "value": "After running `Preprocess_reference.py` script, for masking out low complexity regions, please do as follows:\n\nThere is a built-in tool in RefAligner which you can use it as follows:\n\n```\nRefAligner -i refrence_genome.cmap -o filtered_reference_genome -simpleRepeatStandalone -simpleRepeatTolerance 0.1 -simpleRepeatMinEle 5 -simpleRepeatFilter 3\n```\n\nwhere these parameters are used for:\nParameters:\n\n-  `-i`: input molecule file (*.bnx).\n-  `-o`: use specified prefix name for all output files. \n-  `-simpleRepeatStandalone`: enable simple repeat detection in RefAligner.  \n-  `-simpleRepeatTolerance <X>`: how much length difference (in percentage) adjacent intervals can be tolerated, so they are considered part of the same repeat array [Default: 0.1] (i.e. 10%).\n-  `-simpleRepeatMinEle` <X>: minimum number of repeat elements required [Default: 5].\n-  `-simpleRepeatFilter <0,1,2,3>`: if non-zero, it will output filtered molecules in the output .bnx file [Default: 0].\n0 = disable repeat filter and does NOT generate a filtered molecule bnx file.\n1 = output molecules which do not contain any detected repeats (*_nonrepeat.bnx).\n2 = output molecules which contain detected repeats (*_repeat.bnx).\n3 = output all molecules but with all repeats masked (i.e. labels removed). (*_repeatmask.bnx)\n"
      },
      "source": "https://raw.githubusercontent.com/jluebeck/FaNDOM/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jluebeck/FaNDOM"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-01-17T00:18:51Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-12-16T21:38:24Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Fast Nested Distance aligner for Optical Maps"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9899486960970633,
      "result": {
        "original_header": "About",
        "type": "Text_excerpt",
        "value": "FaNDOM performs alignment of Bionano Saphyr optical map molecules and contigs to a reference, using a seed-based filter.\nFaNDOM is implemented in C++ and supports multithreading. \nFaNDOM is developed by Siavash Raeisi Dehkordi and Jens Luebeck.\n \n"
      },
      "source": "https://raw.githubusercontent.com/jluebeck/FaNDOM/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9675804301219235,
      "result": {
        "original_header": "Wrapper for SV analysis of assembled contig data",
        "type": "Text_excerpt",
        "value": "To run the pipeline for detecting SVs on assembled contigs, use the python script in the \"Pythonscript\" folder, `wrapper_contigs.py` \n-  `-q` Path to contigs file in '.cmap' file format.\n-  `-r` Path to reference file. It should be in cmap format.\n-  `-f` Absolute path to folder that contains the FaNDOM executable.\n-  `-t` Number of threads.\n-  `-o` Path to a directory for saving all alignments and SV calls.\n-  `-n` Output filename of alignment files (appended to `-o`)\n-  `-c [19 or 38 or nh]` Assemble of reference that is used. `19` for GRCh37 (hg19) and `38` for GRCh38 (hg38) and 'nh' for non-human reference genomes\n-  `-m [1 or 2]` If you are aligning contigs having more than 300 labels, use mode `1` to preprocess input data and generate shorter contigs, otherwise use mode `2`.  \n**Output files from this process**: The output of this pipeline is stored in the `-o` directory. 'SV.txt' Contains the structural variant calls, 'indel.txt' contains indel calls and alignment file ending with 'final_alignment.xmap' contains final alignment file. \nAn example command:\n```\npython PythonScript/wrapper_contigs.py -f $PWD -t 1 -r test_data/reference.cmap -q test_data/query.cmap -n res -o $PWD/test_data -c 19 -m 1\n\n```\nThis should run the SV pipeline for simple datasets and save the results in the `test_data/res` directory.\n \n"
      },
      "source": "https://raw.githubusercontent.com/jluebeck/FaNDOM/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9852529625545094,
      "result": {
        "original_header": "Wrapper for SV analysis of unassembled molecule data",
        "type": "Text_excerpt",
        "value": "To run whole the pipeline for detecting SVs on raw molecules, use the python script in the \"Pythonscript\" folder, `wrapper_individual.py`. This wrapper needs near 100GB of RAM(depends on number of molecules) to call the SV_finder. \n-  `-q` Path to Raw molecules file in '.cmap' or '.bnx' file format.\n-  `-r` Path to reference file. It should be in cmap format.\n-  `-f` Absolute path to folder that contains the FaNDOM executable.\n-  `-t` Number of threads.\n-  `-o` Path to a directory for saving all alignments and SV calls.\n-  `-n` Output filename of alignment files (appended to `-o`)\n-  `-c [19 or 38 or nh]` Assemble of reference that is used. `19` for GRCh37 (hg19) and `38` for GRCh38 (hg38) and 'nh' for non-human reference genomes\n-  `-m` minimum support of molecule alignments to calling the SVs. \n-  `--norescale` Use this flag for bypassing scale detection. Our recommendation is use this flag when you have less than 250 molecules or you are confident with you molecules length, otherwise do not use this flag. \n**Output files from this process**: The output of this pipeline is stored in the in `-o` directory. It produces two folders named 'molecules' and 'alignments'. 'molecules' contains split molecules and 'alignments' contains molecule alignments and SVs. In the 'alignments' folder there is a file named 'final_alignment.xmap' containing all molecule alignments. 'SV.txt' contains the structural variants call. \nAn example command:\n```\npython PythonScript/wrapper_individual.py -f $PWD -t 10 -r referencehg38.cmap -q query.bnx -n test_molecules -o $PWD/output/ -c 38 -m 1\n\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/jluebeck/FaNDOM/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9657631423002251,
      "result": {
        "original_header": "`Preprocess_reference.py` script",
        "type": "Text_excerpt",
        "value": "This script used for creating processed reference genome for FaNDOM. We highly recommend that if you want to use FaNDOM with non-human reference genome preprocessed your reference genome with this script. It merged close labels with each other.\n-  `-i` Path to input reference genome file in cmap format.\n-  `-o` Path to directory for saving processed reference in cmap format.\nAs an example:\n```\npython3.5 Preprocess_reference.py -i input.cmap -o output.cmap\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/jluebeck/FaNDOM/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9754690807618978,
      "result": {
        "original_header": "`autorescale.py` script",
        "type": "Text_excerpt",
        "value": "This script used for finding the best rescale factor for molecules. We highly recommend to use this script if you are using raw molecules.\n-  `-q` Path to molecules file. It can be bnx or cmap file.\n-  `-r` Path to reference file. It should be in cmap format.\n-  `-f` Absolute Path to foldar that contains executable file of FaNDOM. Default value is current working directory.\n-  `-t` Number of threads.\n-  `-o` Path to a directory for saving the rescaled molecules file.\n-  `-s` Number of molecules to sample from. Default value is 500.\nAs an example:\n```\npython3.5 autorescale.py -q /data/molecule/a.bnx -r /data/ref/hg19_DLE.cmap -f /data/FaNDOM/ -t 10 -o /data/molecule/rescale\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/jluebeck/FaNDOM/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9680205058534735,
      "result": {
        "original_header": "`preprocess.py` script",
        "type": "Text_excerpt",
        "value": "For a case you want to align very large assembled contigs which can have more than 500 labels on one contigs, at first you need to run preprocess.py on your query to separate large contigs to smaller pices and then run Fandom on it.\n-  `-q` Path to assembled contig file. It should be in '.cmap' format.\n-  `-m` Maximum size for new separated molecules in terms of number of labels. Default value is 25.\n-  `-o` Path to a directory for savind processed queries and also save a dictionary for converting Fandom alignment to actual molecules. \n"
      },
      "source": "https://raw.githubusercontent.com/jluebeck/FaNDOM/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9109944208109497,
      "result": {
        "original_header": "`assemble_reads.py` script",
        "type": "Text_excerpt",
        "value": "This script is used for assembling partial alignments to a larger one( assembling each fragment of large contigs)\n-  `-i` Path to unassembled alignmet file.\n-  `-o` Output directory for assembled alignment file.\n```\npython assemble_reads.py -i Fandom_output.xmap -o Fandom_output_assembled.xmap\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/jluebeck/FaNDOM/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8342511185147078,
      "result": {
        "original_header": "`remove_part.py` script",
        "type": "Text_excerpt",
        "value": "This script is used for removing partial alignments from full alignments\n-  `-f` Path to full alignments file in xmap format.\n-  `-p` Path to partial alignments file in xmap format.\n-  `-o` Output directory for only full alignments file.\n```\npython post_process.py -f Fandom_output.xmap -p Fandom_output_partial.xmap -o Fandom_output_full.xmap\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/jluebeck/FaNDOM/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8639562783730802,
      "result": {
        "original_header": "`filter_contigs.py` script",
        "type": "Text_excerpt",
        "value": "This script is used for filtering high confidence partial alignments for assembled contigs.\n-  `-i` Path to partial alignments file in xmap format.\n-  `-o` Output directory filtered partial alignments.\n```\npython filter_contigs.py -i Fandom_output_partial.xmap -o Fandom_output_partial_filtered.xmap\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/jluebeck/FaNDOM/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9279494413191391,
      "result": {
        "original_header": "`filter_individual.py` script",
        "type": "Text_excerpt",
        "value": "This script is used for filtering high confidence alignments for raw molecules. We highly recommend to use this script if you want to filter out low confidence alignments.\n-  `-r` Path to reference file. It should be in cmap format.\n-  `-i` Path to partial alignments file in xmap format.\n-  `-o` Output directory filtered partial alignments.\n```\npython filter_individual.py -r hg19_DLE.cmap -i Fandom_output_partial.xmap -o Fandom_output_partial_filtered.xmap\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/jluebeck/FaNDOM/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9858532451706753,
      "result": {
        "original_header": "`indel_detection_contigs.py` script",
        "type": "Text_excerpt",
        "value": "This script is used for finding indels in assembled contigs alignment files.\n-  `-r` Path to reference file. It should be in cmap format.\n-  `-a` Path to alignments file in xmap format(untranslate).\n-  `-o` Output directory for indel finding\n-  `-m` Path to query file in bnx or cmap file format.\n-  `-c` Assemble of reference that is used. 19 for GRCh37(hg19) and 38 for GRCh38(hg38) and 'nh' for non-human references\n-  `-g` Gene coordinate directory for human genome\n```\npython indel_detection_contigs.py -r hg19_DLE.cmap -g Gene_hg19.txt -a Fandom.xmap -o res/indel -c 19 -m query/query.contigs\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/jluebeck/FaNDOM/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9849634207516409,
      "result": {
        "original_header": "`indel_detection_individual.py` script",
        "type": "Text_excerpt",
        "value": "This script is used for finding indels in raw molecule alignment files.\n-  `-r` Path to reference file. It should be in cmap format.\n-  `-a` Path to alignments file in xmap format(untranslate).\n-  `-o` Output directory for indel finding\n-  `-m` Path to query file in bnx or cmap file format.\n-  `-c` Assemble of reference that is used. 19 for GRCh37(hg19) and 38 for GRCh38(hg38) and 'nh' for non-human references\n```\npython indel_detection_individual.py -r hg19_DLE.cmap -a Fandom.xmap -o res/indel -c 19 -m query/query_contigs.cmap\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/jluebeck/FaNDOM/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9842977303474552,
      "result": {
        "original_header": "`SV_detection_contigs.py` script",
        "type": "Text_excerpt",
        "value": "This script used for detecting potential integration points.\n-  `-i` Path to alignment file.\n-  `-l` Minimum number molecules to support a integration point. Our suggestion for contigs is 1.\n-  `-o` Output directory for list of integration points.\n-  `-c` Assemble of reference that is used. 19 for GRCh37(hg19) and 38 for GRCh38(hg38) and 'nh' for non-human references\n-  `-q` Path to query file in cmap file format.\n-  `-r` Path to reference file. It should be in cmap format.\n-  `-g` Gene coordinate directory for human genome\nAs an example:\n```\npython SV_detection_contigs.py -i alignment.xmap -r hg19_DLE.cmap -g Gene_hg19.txt -l 1 -o SV.txt -q query/query_contigs.cmap -c 19\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/jluebeck/FaNDOM/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9673453560204157,
      "result": {
        "original_header": "`.fda` file format",
        "type": "Text_excerpt",
        "value": "In addition to producing .xmap formatted alignments, we support an alternate file format for FaNDOM output, with a more informative CIGAR string than XMAP. Each alignment entry contains four lines (as defined in the header):\n```\n#0      ref_id  mol_id  aln_direction   ref_start_pos   ref_end_pos     mol_start_pos   mol_end_pos     mol_length\n#1      total_score     mean_score      is_multimapped  is_secondary    aln_seed_num\n#2      alignment [aln_index]:(ref_pos, mol_pos, mol_lab, score_delta)\n#3      cigar [aln_index]:(delta_ref, delta_mol, mol_label_diff, delta_difference)\n```\n \n`is_secondary` is set to True if the molecule is multimapped (`is_multimapped = True`) and another alignmnet of the \nmolecule in the file has a higher `total_score`.  \nThe `cigar` field specifies a list of tuples (tagged by the number in the alignment, starting at 0), with the following definitions:\n- `delta_ref`: Distance in bp between this reference label in the alignment and the reference label in the alignment for the previous tuple.\n- `delta_mol`: Distance in bp between this molecule label in the alignment and the molecule label in the alignment for the previous tuple. \n- `mol_label_diff`: Number of molecule labels between this cigar tuple and previous cigar tuple - 1 (number of skipped molecule labels).\n- `delta_difference`: `delta_mol - delta_ref`. \n"
      },
      "source": "https://raw.githubusercontent.com/jluebeck/FaNDOM/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9995166164165943,
      "result": {
        "original_header": "`SV.txt` file format",
        "type": "Text_excerpt",
        "value": "  FaNDOM reported detected structural variations in a specific format in 'SV.txt' file as follows:\n  Each structural variation contain to breakpoints that are connected to eahc other.\n  - `Chrom1`: Chromosome of breakpoint1\n  - `RefPos1`: Position of breakpoint1 on Reference genome. FaNDOM cluster all breakpoints in window of 30Kbp and assume midle of window as reference position. Hence, the actual break point can be in this interval: `[RefPos1 - 15Kbp, RefPos1 + 15Kbp]`\n  - `Direction1`: Direction of alignment that ending in breakpoint1. If it is '+', means that alignment is in forward direction and if it is '-' alignment is in reverse direction.\n  - `Chrom2`: Chromosome of breakpoint2\n  - `RefPos2`: Position of breakpoint2 on Reference genome. FaNDOM cluster all breakpoints in window of 30Kbp and assume midle of window as reference position. Hence, the actual break point can be in this interval: `[RefPos2 - 15Kbp, RefPos2 + 15Kbp]`\n  - `Direction2`: Direction of alignment that ending in breakpoint2. If it is '+', means that alignment is in forward direction and if it is '-' alignment is in reverse direction.\n  - `Type`: Type of the structural variation. If it is 'Unknown', it can be inter/intra chromosomal translocation or any other type of breakpoints that Fandom is not able to classify. \n- `Ids`: IDs of contigs/molecules that support this SV.\n- `NumSupports`: Number of contigs/molecules that support this SV.\n- `GeneInterupt`: List of genes that are interupted by breakpoint1 and 2 of SV.\n- `GeneFusion`: Equal to True if both breakpoint1 and 2 interupt genes and direction of alignments are matched to genes direction. Otherwise, it is False.\n  \n \n"
      },
      "source": "https://raw.githubusercontent.com/jluebeck/FaNDOM/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jluebeck/FaNDOM/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jluebeck/FaNDOM/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "jluebeck/FaNDOM"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "FaNDOM"
      },
      "source": "https://raw.githubusercontent.com/jluebeck/FaNDOM/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "FaNDOM"
        ],
        "type": "Text_excerpt",
        "value": "FaNDOM requires `cmake 3.1` or higher. This should already be satisfied on most modern Unix systems. \nTo check your cmake version, type `cmake --version`. FaNDOM has been tested on Ubuntu >=16.04, Mac OSX and CentOS 7.\n\nTo install FaNDOM, do\n\n```\ngit clone https://github.com/jluebeck/FaNDOM\ncd FaNDOM\ncmake CMakeLists.txt && make \n```"
      },
      "source": "https://raw.githubusercontent.com/jluebeck/FaNDOM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9885340854550407,
      "result": {
        "original_header": "Python scripts",
        "type": "Text_excerpt",
        "value": "The following scripts are used inside the SV wrapper - `wrapper_contigs.py`, and can be invoke separately if desired. \n"
      },
      "source": "https://raw.githubusercontent.com/jluebeck/FaNDOM/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.997392515097027,
      "result": {
        "original_header": "`Preprocess_reference.py` script",
        "type": "Text_excerpt",
        "value": "This script used for creating processed reference genome for FaNDOM. We highly recommend that if you want to use FaNDOM with non-human reference genome preprocessed your reference genome with this script. It merged close labels with each other.\n-  `-i` Path to input reference genome file in cmap format.\n-  `-o` Path to directory for saving processed reference in cmap format.\nAs an example:\n```\npython3.5 Preprocess_reference.py -i input.cmap -o output.cmap\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/jluebeck/FaNDOM/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8953064008125385,
      "result": {
        "original_header": "`autorescale.py` script",
        "type": "Text_excerpt",
        "value": "This script used for finding the best rescale factor for molecules. We highly recommend to use this script if you are using raw molecules.\n-  `-q` Path to molecules file. It can be bnx or cmap file.\n-  `-r` Path to reference file. It should be in cmap format.\n-  `-f` Absolute Path to foldar that contains executable file of FaNDOM. Default value is current working directory.\n-  `-t` Number of threads.\n-  `-o` Path to a directory for saving the rescaled molecules file.\n-  `-s` Number of molecules to sample from. Default value is 500.\nAs an example:\n```\npython3.5 autorescale.py -q /data/molecule/a.bnx -r /data/ref/hg19_DLE.cmap -f /data/FaNDOM/ -t 10 -o /data/molecule/rescale\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/jluebeck/FaNDOM/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9876735563509568,
      "result": {
        "original_header": "`post_process.py` script",
        "type": "Text_excerpt",
        "value": "This script used for remap aligments to first molecule file. For doing that you need a file ending with 'dic' that preprocess.py script made.\n-  `-f` Path to Fandom alignmrnt output.\n-  `-d` Path to pre_process.py dictionary.\n-  `-o` Output directory for translated alignments.\nAs an example:\n```\npython post_process.py -f Fandom_output.xmap -d processed_dic -o fandom_post_process\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/jluebeck/FaNDOM/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9939468332285438,
      "result": {
        "original_header": "`filter_individual.py` script",
        "type": "Text_excerpt",
        "value": "This script is used for filtering high confidence alignments for raw molecules. We highly recommend to use this script if you want to filter out low confidence alignments.\n-  `-r` Path to reference file. It should be in cmap format.\n-  `-i` Path to partial alignments file in xmap format.\n-  `-o` Output directory filtered partial alignments.\n```\npython filter_individual.py -r hg19_DLE.cmap -i Fandom_output_partial.xmap -o Fandom_output_partial_filtered.xmap\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/jluebeck/FaNDOM/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8135246198886193,
      "result": {
        "original_header": "Wrapper for SV analysis of assembled contig data",
        "type": "Text_excerpt",
        "value": "**Output files from this process**: The output of this pipeline is stored in the `-o` directory. 'SV.txt' Contains the structural variant calls, 'indel.txt' contains indel calls and alignment file ending with 'final_alignment.xmap' contains final alignment file. \nAn example command:\n```\npython PythonScript/wrapper_contigs.py -f $PWD -t 1 -r test_data/reference.cmap -q test_data/query.cmap -n res -o $PWD/test_data -c 19 -m 1\n\n```\nThis should run the SV pipeline for simple datasets and save the results in the `test_data/res` directory.\n \n"
      },
      "source": "https://raw.githubusercontent.com/jluebeck/FaNDOM/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8079842171465071,
      "result": {
        "original_header": "`autorescale.py` script",
        "type": "Text_excerpt",
        "value": "This script used for finding the best rescale factor for molecules. We highly recommend to use this script if you are using raw molecules.\n-  `-q` Path to molecules file. It can be bnx or cmap file.\n-  `-r` Path to reference file. It should be in cmap format.\n-  `-f` Absolute Path to foldar that contains executable file of FaNDOM. Default value is current working directory.\n-  `-t` Number of threads.\n-  `-o` Path to a directory for saving the rescaled molecules file.\n-  `-s` Number of molecules to sample from. Default value is 500.\nAs an example:\n```\npython3.5 autorescale.py -q /data/molecule/a.bnx -r /data/ref/hg19_DLE.cmap -f /data/FaNDOM/ -t 10 -o /data/molecule/rescale\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/jluebeck/FaNDOM/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9306433822413369,
      "result": {
        "original_header": "`preprocess.py` script",
        "type": "Text_excerpt",
        "value": "As an example:\n```\npython preprocess.py -q H460_DLE1_EXP_REFINEFINAL1.cmap -o /Output/processed2 -m 50\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/jluebeck/FaNDOM/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8991646517178142,
      "result": {
        "original_header": "`post_process.py` script",
        "type": "Text_excerpt",
        "value": "This script used for remap aligments to first molecule file. For doing that you need a file ending with 'dic' that preprocess.py script made.\n-  `-f` Path to Fandom alignmrnt output.\n-  `-d` Path to pre_process.py dictionary.\n-  `-o` Output directory for translated alignments.\nAs an example:\n```\npython post_process.py -f Fandom_output.xmap -d processed_dic -o fandom_post_process\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/jluebeck/FaNDOM/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8074958769820441,
      "result": {
        "original_header": "`assemble_reads.py` script",
        "type": "Text_excerpt",
        "value": "This script is used for assembling partial alignments to a larger one( assembling each fragment of large contigs)\n-  `-i` Path to unassembled alignmet file.\n-  `-o` Output directory for assembled alignment file.\n```\npython assemble_reads.py -i Fandom_output.xmap -o Fandom_output_assembled.xmap\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/jluebeck/FaNDOM/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8535695472123248,
      "result": {
        "original_header": "`remove_part.py` script",
        "type": "Text_excerpt",
        "value": "This script is used for removing partial alignments from full alignments\n-  `-f` Path to full alignments file in xmap format.\n-  `-p` Path to partial alignments file in xmap format.\n-  `-o` Output directory for only full alignments file.\n```\npython post_process.py -f Fandom_output.xmap -p Fandom_output_partial.xmap -o Fandom_output_full.xmap\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/jluebeck/FaNDOM/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8128270062070948,
      "result": {
        "original_header": "`filter_contigs.py` script",
        "type": "Text_excerpt",
        "value": "This script is used for filtering high confidence partial alignments for assembled contigs.\n-  `-i` Path to partial alignments file in xmap format.\n-  `-o` Output directory filtered partial alignments.\n```\npython filter_contigs.py -i Fandom_output_partial.xmap -o Fandom_output_partial_filtered.xmap\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/jluebeck/FaNDOM/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jluebeck/FaNDOM/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": " Copyright Notice\n This software is Copyright \u00a9 2019 The Regents of the University of California. All Rights Reserved. Permission to copy, modify, and distribute this software and its documentation for educational, research and non-profit purposes, without fee, and without a written agreement is hereby granted, provided that the above copyright notice, this paragraph and the following three paragraphs appear in all copies. Permission to make commercial use of this software may be obtained by contacting:\n\n Office of Innovation and Commercialization\n\n 9500 Gilman Drive, Mail Code 0910\n\n University of California\n\n La Jolla, CA 92093-0910\n\n (858) 534-5815\n\n invent@ucsd.edu\n\n This software program and documentation are copyrighted by The Regents of the University of California. The software program and documentation are supplied \u201cas is\u201d, without any accompanying services from The Regents. The Regents does not warrant that the operation of the program will be uninterrupted or error-free. The end-user understands that the program was developed for research purposes and is advised not to rely exclusively on the program for any reason.\n\n IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE PROVIDED HEREUNDER IS ON AN \u201cAS IS\u201d BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS."
      },
      "source": "https://raw.githubusercontent.com/jluebeck/FaNDOM/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://i.imgur.com/nHIZTjy.png"
      },
      "source": "https://raw.githubusercontent.com/jluebeck/FaNDOM/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "FaNDOM"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "jluebeck"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 126101,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 106325,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 503,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jluebeck/FaNDOM/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Python SV module requirements:",
        "parent_header": [
          "FaNDOM",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "FaNDOM SV detection scripts require `python3` and the `numpy` package.\n\n"
      },
      "source": "https://raw.githubusercontent.com/jluebeck/FaNDOM/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 07:10:06",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "FaNDOM"
        ],
        "type": "Text_excerpt",
        "value": "FaNDOM takes as input Bionano Saphyr molecules stored in `.bnx` or `.cmap` form or assembled contigs in `.cmap` form, and a pre-processed reference genome.\nRight now, FaNDOM supports GRCh37(hg19) and GRCh38 available in `reference_genomes` folder and anslo non-human reference genomes.\nFaNDOM outputs alignments of the OM molecules in FaNDOM's `.fda` or `.xmap` file format.\n"
      },
      "source": "https://raw.githubusercontent.com/jluebeck/FaNDOM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Required arguments",
        "parent_header": [
          "FaNDOM",
          "Usage",
          "Command line arguments"
        ],
        "type": "Text_excerpt",
        "value": "- `-r=` Path to reference genome for alignment\n- `-q=` Path to Bionano Saphyr molecules or contigs\n- `-sname=` Prefix for output files\n- `-outfmt=` Specify output format for alignments. We support [`.fda`](#fda-file-format) and `.xmap` file formats.\n"
      },
      "source": "https://raw.githubusercontent.com/jluebeck/FaNDOM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Optional arguments (basic)",
        "parent_header": [
          "FaNDOM",
          "Usage",
          "Command line arguments"
        ],
        "type": "Text_excerpt",
        "value": "- `-help` Print basic help for commands and exit\n- `-multimap` Report multiple alignments per molecule (default: only highest scoring alignment)\n- `-version` Print version and exit\n- `-t=` Number of threads to use (recommend 12+)\n- `-padding=` Additional size (in bp) around seed region to open alignment window (default: 1000)\n- `-no_partial` Use this flag if only looking for full alignments (default: False)\n- `-rescale` Rescale OM molecules and correct for possible scaling errors. Reccommended if supplying unassembled molecules (default: False)\n"
      },
      "source": "https://raw.githubusercontent.com/jluebeck/FaNDOM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Optional arguments (advanced)",
        "parent_header": [
          "FaNDOM",
          "Usage",
          "Command line arguments"
        ],
        "type": "Text_excerpt",
        "value": "- `-tolerance=` Seeding label position error tolerance (default: 350)\n- `-rank=` Rank cutoff for number of seed chains to consider (default: 150)\n- `-threshold=` Seed chain mininum length (default: 3)\n- `-band_width=` Band width parameter for seed chain formation (default 6000)\n- `-dist_scale=` Distance error scaling penalty (default 1.15)\n- `-penalty=` Missing label penalty (default 3000)"
      },
      "source": "https://raw.githubusercontent.com/jluebeck/FaNDOM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example",
        "parent_header": [
          "FaNDOM",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "`./FaNDOM -t=20 -r=reference_genomes/hg19_Merge_800_DLE.cmap -q=query/EXP_REFINEFINAL1_q.cmap -sname=output/output -outfmt=xmap`\n\n\nTo ensure you installed FaNDOM correctly, in the FaNDOM directory run the following command:\n```\n./FaNDOM -t=1 -r=test_data/reference.cmap -q=test_data/query.cmap -sname=test_data/res -outfmt=xmap\n\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/jluebeck/FaNDOM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Video Tutorial",
        "parent_header": [
          "FaNDOM"
        ],
        "type": "Text_excerpt",
        "value": "[![FaNDOM](https://i.imgur.com/nHIZTjy.png)](https://www.youtube.com/watch?v=T8Pasp3Aa9M \"FaNDOM\")\n"
      },
      "source": "https://raw.githubusercontent.com/jluebeck/FaNDOM/master/README.md",
      "technique": "header_analysis"
    }
  ]
}