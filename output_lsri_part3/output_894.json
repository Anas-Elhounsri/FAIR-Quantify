{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "References",
        "parent_header": [
          "T2DAG"
        ],
        "type": "Text_excerpt",
        "value": "  1. Cancer Genome Atlas Research Network, 2014. Comprehensive molecular profiling of lung adenocarcinoma. Nature, 511(7511), p.543.\n  2. Cai, L., Lin, S., Girard, L., Zhou, Y., Yang, L., Ci, B., Zhou, Q., Luo, D., Yao, B., Tang, H. and Allen, J., 2019. LCE: an open web portal to explore gene expression and clinical associations in lung cancer. Oncogene, 38(14), pp.2551-2564.\n  3. KEGG pathways. \n      [ftp://ftp.genome.ad.jp/pub/kegg/pathways](ftp://ftp.genome.ad.jp/pub/kegg/pathways)\n  4. Kanehisa, M. and Goto, S., 2000. KEGG: kyoto encyclopedia of genes and genomes. Nucleic acids research, 28(1), pp.27-30.\n  5. Kanehisa, M., Sato, Y., Furumichi, M., Morishima, K. and Tanabe, M., 2019. New approach for understanding genome variations in KEGG. Nucleic acids research, 47(D1), pp.D590-D595.\n  6. A powerful test for differentially expressed gene pathways via graph-informed structural equation modeling.\n  7. Jacob, L., Neuvial, P. and Dudoit, S., 2012. More power via graph-structured tests for differential expression of gene networks. The Annals of Applied Statistics, pp.561-600.\n  8. Hotelling, H., 1992. The generalization of Student\u2019s ratio. In Breakthroughs in statistics (pp. 54-65). Springer, New York, NY.\n  9. Chen, S.X. and Qin, Y.L., 2010. A two-sample test for high-dimensional data with applications to gene-set testing. The Annals of Statistics, 38(2), pp.808-835.\n  10. Srivastava, M.S. and Kubokawa, T., 2013. Tests for multivariate analysis of variance in high dimension under non-normality. Journal of Multivariate Analysis, 115, pp.204-216.\n  11. Cai, T.T., Liu, W. and Xia, Y., 2014. Two-sample test of high dimensional means under dependence. Journal of the Royal Statistical Society: Series B: Statistical Methodology, pp.349-372.\n  12. Gregory, K.B., Carroll, R.J., Baladandayuthapani, V. and Lahiri, S.N., 2015. A two-sample test for equality of means in high dimension. Journal of the American Statistical Association, 110(510), pp.837-849.\n  13. Xu, G., Lin, L., Wei, P. and Pan, W., 2016. An adaptive two-sample test for high-dimensional means. Biometrika, 103(3), pp.609-624.\n  14. Li, H., Aue, A., Paul, D., Peng, J. and Wang, P. 2020. An adaptable generalization of hotelling\u2019s t2 test in high dimension. The Annals of Statistics, 48(3), pp.1815\u20131847.\n"
      },
      "source": "https://raw.githubusercontent.com/Jin93/T2DAG/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Jin93/T2DAG"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-04-24T22:25:06Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-11-22T10:17:02Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9911709869102472,
      "result": {
        "original_header": "T2DAG",
        "type": "Text_excerpt",
        "value": "R package for T2-DAG, a DAG-informed two-sample test for mean difference in the vector of gene expression levels of a pathway. In addition to gene expression data, the method efficiently leverages axiliary pathway information on gene interactions through a linear structural equation model.  \n"
      },
      "source": "https://raw.githubusercontent.com/Jin93/T2DAG/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8985203737320511,
      "result": {
        "original_header": "Author Information",
        "type": "Text_excerpt",
        "value": "* Jin Jin,  Department of Biostatistics, Johns Hopkins Bloomberg School of Public Health jjin31@jhu.edu\n* Yue Wang,  School of Mathematical and Natural Sciences, Arisona State University Yue.Wang.Stat@asu.edu\n \n"
      },
      "source": "https://raw.githubusercontent.com/Jin93/T2DAG/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Jin93/T2DAG/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Jin93/T2DAG/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Jin93/T2DAG"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "T2DAG"
      },
      "source": "https://raw.githubusercontent.com/Jin93/T2DAG/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Install and load the following R packages",
        "parent_header": [
          "T2DAG",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "```r\nBiocManager::install(\"gage\") # for KEGG pathway analysis\nBiocManager::install(\"gageData\") # for KEGG pathway analysis\nBiocManager::install(\"RCy3\")\nBiocManager::install(\"KEGGlincs\") \nBiocManager::install(\"KEGGprofile\") \nBiocManager::install(\"KEGGgraph\") \nBiocManager::install(\"DEGraph\")\nBiocManager::install(\"predictionet\")\nBiocManager::install(\"clipper\")\n# if installation of clipper is unsuccessful: install an old version of gRbase so as to install the package clipper\n# install.packages('~/Downloads/gRbase_1.8-3.tar.gz', repos = NULL, type ='source')\n\nlibrary(gage)\nlibrary(gageData)\nlibrary(KEGGlincs)\nlibrary(KEGGprofile)\nlibrary(KEGGgraph)\nlibrary(DEGraph) # for graph.T2.test\nlibrary(predictionet)\nlibrary(clipper) # for removing an edge from graphNEL\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Jin93/T2DAG/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Install package \"T2DAG\"",
        "parent_header": [
          "T2DAG",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "``` r\ndevtools::install_github(\"Jin93/T2DAG\")\nlibrary(T2DAG)\n# download T2DAG github repository and set path to the folder \"T2DAG-main\"\nsetwd('~/T2DAG-main/') # set path to the Github directory\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Jin93/T2DAG/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Data sources (All GWAS samples are of European ancestry):",
        "parent_header": [
          "T2DAG",
          "Example data analysis:",
          "Step 1: data preparation"
        ],
        "type": "Text_excerpt",
        "value": "  1. Gene expression data collected from lung tissues of different lung cancer stages (normal, stage I, II, III, and IV) for lung cancer patients obtained from the Cancer Genome Atlas (TCGA) Program<sup>1,2</sup>.  \n  2. KEGG pathways<sup>3,4,5</sup>.\n\nLoad additional packages needed for data analysis\n```r\nlibrary(mvtnorm)\nlibrary(devtools)\nlibrary(MASS)\nlibrary(data.table)\nlibrary(readr)\nlibrary(stringr) # for str_detect\nlibrary(dplyr)\nlibrary(rrcov)\nlibrary(reshape2) # wide to long\nlibrary(corpcor) # campute partial correlation from correlation matrix\nlibrary(highD2pop)  # GCT.test - R package from GCT paper (2015)\nlibrary(highmean) # aSPU test\nlibrary(ARHT) # ARHT test\nlibrary(expm) # for sqrtm\nlibrary(readxl)\n```\n\nDownload the file \"lung_cancer_gene_expression\" from [this link](https://www.dropbox.com/scl/fi/bb8nco5y3dlked6dckjmo/lung_cancer_gene_expression.xlsx?dl=0&rlkey=kc9ec0bq60qjysxw6tfi40pwf). If the link does not work, please contact jjin31@jhu.edu to request for the file. \n\nSave the file to the directory \"data/\" and load lung-tissue gene expression data.\n\n```r\nge.file = 'lung_cancer_gene_expression.xlsx'\nge.dir = 'data/'\noutput.dir = 'data/gene_expression/'\nGE = read_xlsx(paste0(ge.dir,ge.file),sheet = 'Expression', col_names = T, col_types = c('text',rep('numeric',576)))\nge.genes = GE[,1][[1]]\nGE = as.data.frame(GE)\ncolnames(GE)[2:ncol(GE)] = gsub('\\\\.','-',colnames(GE)[2:ncol(GE)])\n# Patient info\npatientinfo = read_xlsx(paste0(ge.dir,ge.file),sheet = 'Patients', col_names = T)\npatientinfo = as.data.frame(patientinfo)\npatientinfo = patientinfo[!(is.na(patientinfo$Pat_Stage)),]\nrownames(patientinfo) = patientinfo[,'Pat_ID']\n\n# Sample info\nsampleinfo = read_xlsx(paste0(ge.dir,ge.file),sheet = 'Samples', col_names = T)\nsampleinfo = as.data.frame(sampleinfo)\nrownames(sampleinfo) = sampleinfo[,'Sam_Name']\nsampleinfo = sampleinfo[sampleinfo[,'Sam_Patient'] %in% rownames(patientinfo),]\n```\n\nLoad pathway information.\n```r\ndata('pathway.list',package='T2DAG')\nkegg.pathways = pathway.list[[1]]\nkegg.names = pathway.list[[2]]\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/Jin93/T2DAG/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Jin93/T2DAG/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "T2DAG"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "Jin93"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 24350,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Jin93/T2DAG/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 02:42:53",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Example data analysis:",
        "parent_header": [
          "T2DAG"
        ],
        "type": "Text_excerpt",
        "value": "Testing the mean difference in the expression levels of genes in a KEGG pathway between stage I and stage II lung cancer.\n\n"
      },
      "source": "https://raw.githubusercontent.com/Jin93/T2DAG/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Data sources (All GWAS samples are of European ancestry):",
        "parent_header": [
          "T2DAG",
          "Example data analysis:",
          "Step 1: data preparation"
        ],
        "type": "Text_excerpt",
        "value": "  1. Gene expression data collected from lung tissues of different lung cancer stages (normal, stage I, II, III, and IV) for lung cancer patients obtained from the Cancer Genome Atlas (TCGA) Program<sup>1,2</sup>.  \n  2. KEGG pathways<sup>3,4,5</sup>.\n\nLoad additional packages needed for data analysis\n```r\nlibrary(mvtnorm)\nlibrary(devtools)\nlibrary(MASS)\nlibrary(data.table)\nlibrary(readr)\nlibrary(stringr) # for str_detect\nlibrary(dplyr)\nlibrary(rrcov)\nlibrary(reshape2) # wide to long\nlibrary(corpcor) # campute partial correlation from correlation matrix\nlibrary(highD2pop)  # GCT.test - R package from GCT paper (2015)\nlibrary(highmean) # aSPU test\nlibrary(ARHT) # ARHT test\nlibrary(expm) # for sqrtm\nlibrary(readxl)\n```\n\nDownload the file \"lung_cancer_gene_expression\" from [this link](https://www.dropbox.com/scl/fi/bb8nco5y3dlked6dckjmo/lung_cancer_gene_expression.xlsx?dl=0&rlkey=kc9ec0bq60qjysxw6tfi40pwf). If the link does not work, please contact jjin31@jhu.edu to request for the file. \n\nSave the file to the directory \"data/\" and load lung-tissue gene expression data.\n\n```r\nge.file = 'lung_cancer_gene_expression.xlsx'\nge.dir = 'data/'\noutput.dir = 'data/gene_expression/'\nGE = read_xlsx(paste0(ge.dir,ge.file),sheet = 'Expression', col_names = T, col_types = c('text',rep('numeric',576)))\nge.genes = GE[,1][[1]]\nGE = as.data.frame(GE)\ncolnames(GE)[2:ncol(GE)] = gsub('\\\\.','-',colnames(GE)[2:ncol(GE)])\n# Patient info\npatientinfo = read_xlsx(paste0(ge.dir,ge.file),sheet = 'Patients', col_names = T)\npatientinfo = as.data.frame(patientinfo)\npatientinfo = patientinfo[!(is.na(patientinfo$Pat_Stage)),]\nrownames(patientinfo) = patientinfo[,'Pat_ID']\n\n# Sample info\nsampleinfo = read_xlsx(paste0(ge.dir,ge.file),sheet = 'Samples', col_names = T)\nsampleinfo = as.data.frame(sampleinfo)\nrownames(sampleinfo) = sampleinfo[,'Sam_Name']\nsampleinfo = sampleinfo[sampleinfo[,'Sam_Patient'] %in% rownames(patientinfo),]\n```\n\nLoad pathway information.\n```r\ndata('pathway.list',package='T2DAG')\nkegg.pathways = pathway.list[[1]]\nkegg.names = pathway.list[[2]]\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/Jin93/T2DAG/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Now we show an example of the analysis on the pathway \"p53 signaling pathway\"",
        "parent_header": [
          "T2DAG",
          "Example data analysis:"
        ],
        "type": "Text_excerpt",
        "value": "Prepare the corresponding pathway information and gene expression data\n```r\nset.seed(1234)\npathway.index = 28\npathway.dir = 'data/'\npathwayID = kegg.pathways[pathway.index]\ngetKGMLurl(pathwayID)\ntmp <- paste0(pathway.dir,pathwayID,'.xml')\nif (!file.exists(tmp)) retrieveKGML(pathwayid=substr(pathwayID,4,8), organism='hsa', destfile=tmp, method=\"curl\")\npathway <- parseKGML(tmp)\n```\n\n\nSummarize node and edge information of the pathway\n```r\n### Gene names and indices in the DAG\nnodes <- nodes(pathway)\ntypes = sapply(1:length(nodes),function(x){getType(nodes[[x]])})\ngenes = sapply(1:length(nodes),function(x){substr(getName(nodes[[x]])[1],5,nchar(getName(nodes[[x]])[1]))})[types == 'gene'] # 279, only keep the first gene in each node\ngenes.index = names(nodes)[(types == 'gene')]\ngenes.index = genes.index[(genes %in% ge.genes)] # extract indices of the genes that have expression data available\ngenes = genes[genes %in% ge.genes]\nnames(genes) = genes.index\n###\nedges <- edges(pathway)\n\nedge.node = t(sapply(1:length(edges),function(x){getEntryID(edges[[x]])}))\nkeep.indx = which(((edge.node[,1] %in% genes.index)&(edge.node[,2] %in% genes.index)) == T)\nedge.node = edge.node[keep.indx,] # remove nodes that are not genes\n\n## get subtype name\n# https://www.kegg.jp/kegg/xml/docs/\nedge.subtype = lapply(1:length(edges),function(x){getSubtype(edges[[x]])})\nedge.subtype.length = sapply(1:length(edge.subtype),function(x){length(edge.subtype[[x]])})\nedge.types = vector('list',length(edge.subtype.length))\ntem.indx = which(edge.subtype.length == 0)\nif (length(tem.indx)>0){\n  edge.types[-tem.indx] <- lapply(c(1:length(edges))[-tem.indx],function(x){getSubtype(edges[[x]])[[1]]})\n  edge.type = rep(NA,length(edge.types))\n  edge.type[-tem.indx] <- sapply(c(1:length(edges))[-tem.indx],function(x){getName(edge.types[[x]])})\n}\nif (length(tem.indx)==0){\n  edge.types <- lapply(c(1:length(edges)),function(x){getSubtype(edges[[x]])[[1]]})\n  edge.type = rep(NA,length(edge.types))\n  edge.type <- sapply(c(1:length(edges)),function(x){getName(edge.types[[x]])})\n}\nedge.type = edge.type[keep.indx]\n\nkeep.edge.types = c('activation','inhibition','expression','repression')\nedge.info = cbind(matrix(edge.node,ncol=2),matrix(edge.type,ncol=1))\nif (nrow(edge.info) > 0) edge.info = matrix(edge.info[complete.cases(edge.info),],ncol=3)\nif (nrow(edge.info) > 0) edge.info = matrix(edge.info[edge.info[,3] %in% keep.edge.types,],ncol=3)\nif (length(edge.info) == 3) edge.info = matrix(edge.info,nrow=1)\n\n#Remove duplicated genes\nedge.info[,1] = genes[edge.info[,1]]\nedge.info[,2] = genes[edge.info[,2]]\ntem.idx = which(duplicated(edge.info))\nif (length(tem.idx)>0){\n  edge.info = edge.info[-tem.idx,]\n}\ngenes = unique(genes)\nn.activation = sum(edge.info[,3] == 'activation')\nn.inhibition = sum(edge.info[,3] == 'inhibition')\nn.expression = sum(edge.info[,3] == 'expression')\nn.repression = sum(edge.info[,3] == 'repression')\n```\n\nConstruct adjacency matrices that will be used in the Graph T2 test and T2DAG test.\n```r\n# ------- Construct A0, the adjacency matrix for Graph.T2 test -------\n# which does not necessarily corresponds to a DAG \n# and can additionally incorporate the direction of gene interactions\n## A0(i,j) = 1 indicates activation/expression of gene j by gene i; \n## A0(i,j) = -1 indicates inhibition/repression of gene j by gene i; \n## A0(i,j) = 0 indicates no effect of the expression of gene i on the expression of gene j.\nA0 = matrix(0, length(genes), length(genes))\n##### Z = QZ + E, Qij: j->i\nfor (i in 1:nrow(edge.info)){\n  A0[which(genes == edge.info[i,2]), which(genes == edge.info[i,1])] = ifelse(edge.info[i,3] %in% c('activation','expression'),1,-1)\n}\n\n# ------- Construct A, the binary adjacency matrix used for the T2DAG test -------\n## A(i,j) = 1 indicates the existence of effect of the expression of gene i on the expression of gene j; \n## A0(i,j) = 0 indicates no effect of the expression of gene i on the expression of gene j.\n#### number of self loops:\nloops.index = which(edge.info[,1] == edge.info[,2])\nif (length(loops.index) > 1) edge.info = edge.info[-loops.index,]\nn.loops = length(loops.index)\n\nA = matrix(0, length(genes), length(genes))\n#### Z = QZ + E, Qij: j->i\nfor (i in 1:nrow(edge.info)) A[which(genes == edge.info[i,2]), which(genes == edge.info[i,1])] = 1\ndiag(A) = 0\n\n#### remove circles\na=adj.remove.cycles(A,maxlength=length(genes))\nA = a$adjmat.acyclic\n\n#### Finally, summaries of the DAG\nn.circles = sum(a$adjmat.removed)\nabssum = function(x) sum(abs(x))\nnonzero.A = apply(A,1,abssum)\nd = max(nonzero.A)\np = length(genes)\np0 = sum(nonzero.A > 0)\nsparsity = sum(abs(A) > 0)/p^2\n```\n\nExtract gene expression data\n```r\ncomparison = 'tumor-tumor'; \ngrp1 = 'I'; grp2 = 'II' # stages of lung cancer to compare\n# 'tumor-tumor': comparison between tumor tissues of two lung cancer stages\n# 'normal-tumor': comparison between normal tissue and tumor tissue of one lung cancer stage\n\n#### Gene expression data.\nge = GE[ge.genes %in% genes,]\n\n##### Patient information\nif (comparison == 'normal-tumor'){\n  control.sample.ID = sampleinfo[sampleinfo[,'Sam_Tissue'] == 2, 'Sam_Name']\n  ##### remove the patients that have both benigh tissue and tumor to avoid between-sample correlation\n  X = t(ge[,colnames(ge) %in% control.sample.ID]) # control\n  Y = ge[,!(colnames(ge) %in% control.sample.ID)]\n  Y = t(Y[,-1]) #remove the patient ID column\n}\nif (comparison == 'tumor-tumor'){\n  ### only consider the tumor tissues that are from separate patients\n  case.patient.ID = sampleinfo[sampleinfo[,'Sam_Tissue'] == 1, 'Sam_Patient']\n  case.sample.ID = sampleinfo[sampleinfo[,'Sam_Tissue'] == 1, 'Sam_Name']\n  # remove the cases of the dulicated patient IDs\n  case.sample.ID = case.sample.ID[-which(duplicated(case.patient.ID))]\n  # remove dulicated patient IDs\n  case.patient.ID = case.patient.ID[-which(duplicated(case.patient.ID))]\n  rownames(patientinfo) = patientinfo[,'Pat_ID']\n  \n  case.stage = patientinfo[case.patient.ID,'Pat_Stage']\n  I.sample.ID = case.sample.ID[which(case.stage == grp1)]\n  II.sample.ID = case.sample.ID[which(case.stage == grp2)]\n  \n  ##### remove patients that have both benigh tissue and tumor\n  X = t(ge[,colnames(ge) %in% I.sample.ID]) # control\n  Y = t(ge[,(colnames(ge) %in% II.sample.ID)])\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Jin93/T2DAG/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 2. Conduct hypothesis tests",
        "parent_header": [
          "T2DAG",
          "Example data analysis:"
        ],
        "type": "Text_excerpt",
        "value": "```r\nalpha = 0.05 # significance level for the hypothesis test.\nmethods = c(\"T2DAG\",\"Graph.T2\",\"T2\",\"CH-Q\",\"SK\",\"CLX\",\"GCT\",\"aSPU\",\"ARHT\")\npval=rep(NA,length(methods)) # a vector that stores p values of the various tests\nrej=rep(NA,length(methods)) # a vector that stores conclusion of the various tests\n# 1: H0 rejected, 0: H0 not rejected\nnames(pval) = names(rej) = methods\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Jin93/T2DAG/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1. T2-DAG test<sup>6</sup>",
        "parent_header": [
          "T2DAG",
          "Example data analysis:",
          "Step 2. Conduct hypothesis tests"
        ],
        "type": "Text_excerpt",
        "value": "```r\nT2DAG.results = T2DAG(X, Y, A)\npval['T2DAG'] =  T2DAG.results$T2DAG.pval\nrej['T2DAG'] = ifelse(T2DAG.results$T2DAG.pval<alpha,1,0)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Jin93/T2DAG/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Graph T2 test<sup>7</sup>",
        "parent_header": [
          "T2DAG",
          "Example data analysis:",
          "Step 2. Conduct hypothesis tests"
        ],
        "type": "Text_excerpt",
        "value": "```r\nAsym = A0[1:p,1:p]\nncp <- 0.5\nsigma <- diag(p)/sqrt(p)\n## Build graph, decompose laplacian\nlfA <- laplacianFromA(Asym)\nk= 0.2 * p\n# Test statistic\ngraph.T2.results <- graph.T2.test(X,Y,lfA=lfA,k=k,nmin=nmin)# T2.test(X,Y,k=k)\npval[\"Graph.T2\"] = graph.T2.results$p.value\nrej[\"Graph.T2\"] = ifelse(graph.T2.results$p.value<alpha,1,0)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Jin93/T2DAG/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3. Hotelling's T2 test<sup>8</sup>",
        "parent_header": [
          "T2DAG",
          "Example data analysis:",
          "Step 2. Conduct hypothesis tests"
        ],
        "type": "Text_excerpt",
        "value": "```r\np = nrow(A) # number of genes in the pathway\nn = c(nrow(X),nrow(Y)) # sample sizes\nN = sum(n) # total sample size\nnmin = min(n[1],n[2]) # minimum of the two sample sizes\nmeandiff = colMeans(X)-colMeans(Y)\n\nif (N > p){\n  S.pool = ((n[1]-1)*cov(X) + (n[2]-1)*cov(Y))/(N - 2)\n  if (qr(S.pool)$rank >= p){ #even if n1+n2>=p, sample covariance can still be singular\n    #### test statistic & p-value:\n    T.h = (n[1]*n[2])/(N)*(t(meandiff)%*%solve(S.pool, toler=1e-30)%*%t(t(meandiff)))\n    pval[\"T2\"] = pf(q=(N-p-1)/((N-2)*p)*T.h,df1=p,df2=(N-1-p),lower.tail=FALSE)\n    rej[\"T2\"] = ifelse(pval[\"T2\"]<alpha,1,0)\n  }\n}\n```"
      },
      "source": "https://raw.githubusercontent.com/Jin93/T2DAG/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4. CH-Q test<sup>9</sup>",
        "parent_header": [
          "T2DAG",
          "Example data analysis:",
          "Step 2. Conduct hypothesis tests"
        ],
        "type": "Text_excerpt",
        "value": "```r\nCH_Q = apval_Chen2010(sam1=X, sam2=Y, eq.cov = TRUE) # This function is from the package \"highmean\". Can also use the function ChenQin.test() from the package \"highD2pop\".\npval[\"CH-Q\"] = CH_Q$pval\nrej[\"CH-Q\"] = ifelse(pval[\"CH-Q\"]<alpha,1,0)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Jin93/T2DAG/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "5. SK test<sup>10</sup>",
        "parent_header": [
          "T2DAG",
          "Example data analysis:",
          "Step 2. Conduct hypothesis tests"
        ],
        "type": "Text_excerpt",
        "value": "```r\nSK.results = SK.test(X,Y)\nT.sk = SK.results$TSvalue\npval[\"SK\"] = SK.results$pvalue\nrej[\"SK\"] = ifelse(SK.results$pvalue<alpha,1,0)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Jin93/T2DAG/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "6. CLX test<sup>11</sup>",
        "parent_header": [
          "T2DAG",
          "Example data analysis:",
          "Step 2. Conduct hypothesis tests"
        ],
        "type": "Text_excerpt",
        "value": "```r\nCLX.results = apval_Cai2014(sam1=X, sam2=Y) # This function is from the package \"highmean\". Can also use CLX.test.equalcov() from the package \"highD2pop\".\npval[\"CLX\"] = CLX.results$pval\nrej[\"CLX\"] = ifelse(pval[\"CLX\"]<alpha,1,0)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Jin93/T2DAG/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "7. GCT test<sup>12</sup>",
        "parent_header": [
          "T2DAG",
          "Example data analysis:",
          "Step 2. Conduct hypothesis tests"
        ],
        "type": "Text_excerpt",
        "value": "```r\nif (p >= 20){\n  GCT.results = GCT.test(X,Y,r=ceiling(2/3*p^(1/2)), ntoorderminus = 0) # In their paper r=L=10,15,20, smaller l leads to larger pvalue and smaller power.\n  pval[\"GCT\"] = GCT.results$pvalue\n  rej[\"GCT\"] = ifelse(GCT.results$pvalue<alpha,1,0)\n}\nif (p < 20){\n  GCT.results = GCT.test(X,Y,r=ceiling(2/3*p^(1/2))+1, ntoorderminus = 0)#r=10)\n  pval[\"GCT\"] = GCT.results$pvalue\n  rej[\"GCT\"] = ifelse(GCT.results$pvalue<alpha,1,0)\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Jin93/T2DAG/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "8. aSPU test<sup>13</sup>",
        "parent_header": [
          "T2DAG",
          "Example data analysis:",
          "Step 2. Conduct hypothesis tests"
        ],
        "type": "Text_excerpt",
        "value": "```r\nif (p>=50){\n  aspu = apval_aSPU(sam1=X,sam2=Y) # default: eq.cov = TRUE\n  pval[\"aSPU\"] = aspu$pval[\"aSPU\"]\n  rej[\"aSPU\"] = ifelse(pval[\"aSPU\"]<alpha,1,0)\n  aspu.lambda = aspu$pow[which.min(aspu$pval)] # selected lambda\n}\nif (p<50){\n  aspu = apval_aSPU(sam1=X,sam2=Y,bandwidth = 1)\n  pval[\"aSPU\"] = aspu$pval[\"aSPU\"]\n  rej[\"aSPU\"] = ifelse(pval[\"aSPU\"]<alpha,1,0)\n  aspu.lambda = aspu$pow[which.min(aspu$pval)] # selected lambda\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Jin93/T2DAG/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "9. ARHT test<sup>14</sup>",
        "parent_header": [
          "T2DAG",
          "Example data analysis:",
          "Step 2. Conduct hypothesis tests"
        ],
        "type": "Text_excerpt",
        "value": "```r\n  res.arht = ARHT(X, Y) # X, Y: n x p\n  pval[\"ARHT\"] = res.arht$ARHT_pvalue\n  rej[\"ARHT\"] = ifelse(pval[\"ARHT\"]<alpha,1,0)\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/Jin93/T2DAG/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Hypothesis testing results",
        "parent_header": [
          "T2DAG",
          "Example data analysis:"
        ],
        "type": "Text_excerpt",
        "value": "```r\noutput = list(basic.info = data.frame(n1=n[1], n2=n[2], p=p, n.edges=nrow(edge.info),\n                                      n.loops = n.loops, d=d, p0=p0, sparsity = signif(sparsity,2),\n                                      n.activation = n.activation, n.inhibition = n.inhibition,\n                                      n.expression = n.expression, n.repression = n.repression,\n                                      n.circles = n.circles),\n              pvalues = signif(pval,2))\n# output\n$basic.info\n   n1  n2  p n.edges n.loops d p0 sparsity n.activation n.inhibition\n  278 124 60      56       0 6 44    0.015           12            7\n  n.expression n.repression n.circles\n            37            0         0\n\n$pvalues\n   T2DAG Graph.T2       T2     CH-Q       SK      CLX      GCT     aSPU \n 4.2e-11  2.3e-03  6.7e-03  3.6e-04  3.4e-03  1.9e-02  8.9e-04  3.0e-03\n```\n\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/Jin93/T2DAG/main/README.md",
      "technique": "header_analysis"
    }
  ]
}