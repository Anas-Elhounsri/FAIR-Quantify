{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ndokmai/sgx-genotype-imputation"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact for questions",
        "parent_header": [
          "SMac: Secure Genotype Imputation in Intel SGX"
        ],
        "type": "Text_excerpt",
        "value": "Ko Dokmai, ndokmai@iu.edu\n\nHoon Cho, hhcho@broadinstitute.org\n"
      },
      "source": "https://raw.githubusercontent.com/ndokmai/sgx-genotype-imputation/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-05-23T06:28:07Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-04-20T18:16:15Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SMac: Genotype Imputation in Intel SGX"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9688655195057756,
      "result": {
        "original_header": "Two-sided rank-sum tests for timing leakage",
        "type": "Text_excerpt",
        "value": "To test whether SMac and SMac-lite's subroutines leak timing discrepancies, run \n```bash\n./test_leakage.sh\n```\nSMac-lite relies on `if-else` and `f32`, while SMac relies on `fixed-select` and `fixed-time-ln` for computation involving sensitive data. It is normal to observe leakage in `if-else` and `f32`, while `fixed-select` and `fixed-time-ln` should **NOT** leak. \n \n"
      },
      "source": "https://raw.githubusercontent.com/ndokmai/sgx-genotype-imputation/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8743331829184444,
      "result": {
        "original_header": "Configuration &amp; Build",
        "type": "Text_excerpt",
        "value": "Edit the following parameters in [config.sh](config.sh) to configure SMac:\n- `LITE`: SMac or SMac-lite\n    - `0`: SMac, with timing protection\n    - `1`: SMac-lite, without timing protection\n- `SGX`: SGX or simulation mode\n    - `0`: simulation mode; no SGX hardware required\n    - `1`: SGX mode; Fortanix EDP must be installed and configured properly\n- `RA`: remote attestation\n    - `0`: disable remote attestation \n    - `1`: enable remote attestation; this has not effect if `SGX=0`.\n- `N_THREADS`: Number of threads for batch processing; 1 thread per 1 input.\n- `ENCLAVE_HEAP_SIZE`: enclave heap size; if the enclave fails while starting, try increasing this number. \nRebuild for every change in configuration.  \n"
      },
      "source": "https://raw.githubusercontent.com/ndokmai/sgx-genotype-imputation/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9049379058227901,
      "result": {
        "original_header": "Remote attestation configuration",
        "type": "Text_excerpt",
        "value": "If remote attestation is enabled, follow the steps below to ensure access to Intel Attestation Service.\n1. Sign up for a Development Access account at https://api.portal.trustedservices.intel.com/EPID-attestation. Make sure that the Name Base Mode is Linkable Quote. Take note of \"SPID\", \"Primary key\", and \"Secondary key\".\n2. Modify the following fields in [client/settings.json](client/settings.json) using the information from the previous step:\n  - \"spid\": \"\\<SPID\\>\"\n  - \"primary_subscription_key\": \"\\<Primary Key\\>\"\n  - \"secondary_subscription_key\": \"\\<Secondary key\\>\"\n \n"
      },
      "source": "https://raw.githubusercontent.com/ndokmai/sgx-genotype-imputation/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9852026366024697,
      "result": {
        "original_header": "Input data format",
        "type": "Text_excerpt",
        "value": "SMac client takes two files as user input: bitmask file and symbol file. These two files together\nencode a haplotype sequence that the user wishes to impute. Bitmast file includes a binary\nvector (0 or 1 in each line) indicating whether the corresponding genetic variant in the\nreference panel (M3VCF file) is included in the user's data. Note that the length of this\nvector should match the number of genetic variants in the reference panel. Symbol file includes\na vector of -1 (missing), 0 (reference allele), or 1 (alternative allele), one for each line.\nThese correspond to the user's data values at the nonzero indices in the index file. \nExample input files (`input_ind.txt` and `input_dat.txt`) as well as sample scripts for\ngenerating random input can be found in [scripts/](scripts/). \n"
      },
      "source": "https://raw.githubusercontent.com/ndokmai/sgx-genotype-imputation/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ndokmai/sgx-genotype-imputation/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ndokmai/sgx-genotype-imputation/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ndokmai/sgx-genotype-imputation"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SMac: Secure Genotype Imputation in Intel SGX"
      },
      "source": "https://raw.githubusercontent.com/ndokmai/sgx-genotype-imputation/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ndokmai/sgx-genotype-imputation/main/test_leakage.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ndokmai/sgx-genotype-imputation/main/clean.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ndokmai/sgx-genotype-imputation/main/common.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ndokmai/sgx-genotype-imputation/main/run_sp.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ndokmai/sgx-genotype-imputation/main/setup_clang.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ndokmai/sgx-genotype-imputation/main/config.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ndokmai/sgx-genotype-imputation/main/build.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ndokmai/sgx-genotype-imputation/main/run_client.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ndokmai/sgx-genotype-imputation/main/test.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ndokmai/sgx-genotype-imputation/main/scripts/run_minimac.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ndokmai/sgx-genotype-imputation/main/scripts/test_chr20_mmac.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation Requirements",
        "parent_header": [
          "SMac: Secure Genotype Imputation in Intel SGX"
        ],
        "type": "Text_excerpt",
        "value": "- Ubuntu 16.04/18.04\n- [Rust Nightly](https://www.rust-lang.org/tools/install) (tested with version 1.56)\n    - To install the nightly channel, run\n    ```bash\n    rustup toolchain install nightly\n    ```\n- [Fortanix EDP](https://edp.fortanix.com/docs/installation/guide/) (for running in SGX mode)\n    - For **Install AESM service**, we recommend installing the **Ubuntu 16.04/18.04** option. In addition, try installing\n    ```bash\n    sudo apt install libsgx-ae*\n    ```\n    Make sure AESM service is up and running by\n    ```bash\n    sudo service aesmd status\n    ```\n- [Clang 3.8.0](https://releases.llvm.org/download.html) (for remote attestation)\n    - To automatically set up clang 3.8.0 locally, run `./setup_clang.sh`\n"
      },
      "source": "https://raw.githubusercontent.com/ndokmai/sgx-genotype-imputation/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9991378787341418,
      "result": {
        "original_header": "Configuration &amp; Build",
        "type": "Text_excerpt",
        "value": "Next, build by running\n```bash\n./build.sh\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/ndokmai/sgx-genotype-imputation/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999614074739662,
      "result": {
        "original_header": "Remote attestation configuration",
        "type": "Text_excerpt",
        "value": "If remote attestation is enabled, follow the steps below to ensure access to Intel Attestation Service.\n1. Sign up for a Development Access account at https://api.portal.trustedservices.intel.com/EPID-attestation. Make sure that the Name Base Mode is Linkable Quote. Take note of \"SPID\", \"Primary key\", and \"Secondary key\".\n2. Modify the following fields in [client/settings.json](client/settings.json) using the information from the previous step:\n  - \"spid\": \"\\<SPID\\>\"\n  - \"primary_subscription_key\": \"\\<Primary Key\\>\"\n  - \"secondary_subscription_key\": \"\\<Secondary key\\>\"\n \n"
      },
      "source": "https://raw.githubusercontent.com/ndokmai/sgx-genotype-imputation/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9981861372340792,
      "result": {
        "original_header": "Quick Test",
        "type": "Text_excerpt",
        "value": "To locally test whether the code can run successfully according to the configuration, run\n```bash\n./test.sh\n```\nThe script will test the code with all the sample data files located at [smac/test_data/](smac/test_data/). The outputs of SMac will be saved in [results/](results/). \n"
      },
      "source": "https://raw.githubusercontent.com/ndokmai/sgx-genotype-imputation/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9856039089993442,
      "result": {
        "original_header": "Service Provider",
        "type": "Text_excerpt",
        "value": "SMac service provider takes the reference panel in the M3VCF format as input. To start Service Provider and Host on Host Machine,\n```bash\n./run_sp.sh <reference panel m3vcf.gz>\n```\n \nwhere `<reference panel m3vcf.gz>` is a reference panel gzipped M3VCF file. For example,\n```bash\n./run_sp.sh smac/test_data/largeref.m3vcf.gz\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/ndokmai/sgx-genotype-imputation/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8011711264601545,
      "result": {
        "original_header": "Quick Test",
        "type": "Text_excerpt",
        "value": "To locally test whether the code can run successfully according to the configuration, run\n```bash\n./test.sh\n```\nThe script will test the code with all the sample data files located at [smac/test_data/](smac/test_data/). The outputs of SMac will be saved in [results/](results/). \n"
      },
      "source": "https://raw.githubusercontent.com/ndokmai/sgx-genotype-imputation/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ndokmai/sgx-genotype-imputation/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "sgx-genotype-imputation"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "ndokmai"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Rust",
        "size": 106571,
        "type": "Programming_language",
        "value": "Rust"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 5013,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 1400,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ndokmai/sgx-genotype-imputation/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ndokmai",
          "type": "User"
        },
        "date_created": "2021-06-12T16:11:58Z",
        "date_published": "2021-07-19T16:35:14Z",
        "html_url": "https://github.com/ndokmai/sgx-genotype-imputation/releases/tag/v0.1",
        "name": "First release for publication",
        "release_id": 46424556,
        "tag": "v0.1",
        "tarball_url": "https://api.github.com/repos/ndokmai/sgx-genotype-imputation/tarball/v0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/ndokmai/sgx-genotype-imputation/releases/46424556",
        "value": "https://api.github.com/repos/ndokmai/sgx-genotype-imputation/releases/46424556",
        "zipball_url": "https://api.github.com/repos/ndokmai/sgx-genotype-imputation/zipball/v0.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation Requirements",
        "parent_header": [
          "SMac: Secure Genotype Imputation in Intel SGX"
        ],
        "type": "Text_excerpt",
        "value": "- Ubuntu 16.04/18.04\n- [Rust Nightly](https://www.rust-lang.org/tools/install) (tested with version 1.56)\n    - To install the nightly channel, run\n    ```bash\n    rustup toolchain install nightly\n    ```\n- [Fortanix EDP](https://edp.fortanix.com/docs/installation/guide/) (for running in SGX mode)\n    - For **Install AESM service**, we recommend installing the **Ubuntu 16.04/18.04** option. In addition, try installing\n    ```bash\n    sudo apt install libsgx-ae*\n    ```\n    Make sure AESM service is up and running by\n    ```bash\n    sudo service aesmd status\n    ```\n- [Clang 3.8.0](https://releases.llvm.org/download.html) (for remote attestation)\n    - To automatically set up clang 3.8.0 locally, run `./setup_clang.sh`\n"
      },
      "source": "https://raw.githubusercontent.com/ndokmai/sgx-genotype-imputation/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running Client",
        "parent_header": [
          "SMac: Secure Genotype Imputation in Intel SGX",
          "Client"
        ],
        "type": "Text_excerpt",
        "value": "To start Client on Client Machine, run\n```bash\n./run_client.sh <service provider ip addr> <bitmask file> <symbols batch dir> <results dir>\n```\nwhere `<bitmask file>` are formatted according to [input data format](#input-data-format). `<symbols batch dir>` is a directory containing all symbol files for batch processing, and `<results dir>` is a directly to save results.  For example, \n\n```bash\n./run_client.sh 127.0.0.1 smac/test_data/large_input_bitmask.txt smac/test_data/batch results\n```"
      },
      "source": "https://raw.githubusercontent.com/ndokmai/sgx-genotype-imputation/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 09:20:10",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ]
}