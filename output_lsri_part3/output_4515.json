{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/izaak-coleman/GeDi"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-03-26T19:00:53Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-05-30T23:31:02Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9599651169893579,
      "result": {
        "original_header": "GeDi: Generalised suffix array-based Direct SNV caller",
        "type": "Text_excerpt",
        "value": "Applying suffix arrays to increase the repertoire of detectable SNVs \nin tumour genomes. \n**Ge**neralised suffix array-based **Di**rect SNV caller, or GeDi,\ndetects somatic Single Nucleotide Variants (SNVs) within paired tumour-control\nNGS datasets. GeDi is capable of detecting SNVs reference- and mapping-free.\nTo achieve this, it compares the input sequencing data by\nconstruction of multiple suffix arrays from which SNVs can be directly detected;\nwithin the arrays, suffixes containing SNVs cluster into intervals enriched with\ntumour-derived data. GeDi uses mapping only to determine SNV coordinates.\nTo do this, healthy-tissue derived sequences are mapped to the reference\ngenome as a proxy from which SNV coordinates are calculated. Accordingly,\nnot only does GeDi align SNVs reference- and mapping-free, it never\naligns tumour data to the reference genome. This enables GeDi\nto detect SNVs at complex variant loci, such as sites of hypermutation,\nwith high sensitivity. \n"
      },
      "source": "https://raw.githubusercontent.com/izaak-coleman/GeDi/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9716355584916148,
      "result": {
        "original_header": "Compilation",
        "type": "Text_excerpt",
        "value": "To reduce the number of dependencies requiring manual installation by the user, \nwe included many of GeDi's dependencies within its source code directory. \nGeDi will be built directly within its source code directory and as a consequence of\nthe included dependencies, once GeDi is compiled the source code directory cannot\nbe moved without recompilation of GeDi.  \n"
      },
      "source": "https://raw.githubusercontent.com/izaak-coleman/GeDi/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Download",
        "type": "Text_excerpt",
        "value": "Either clone this repository, or download and unzip the zip file containing \nGeDi's source code. To clone the GeDi repo, issue the following on the command-line:\n\n```\ngit clone https://github.com/izaak-coleman/GeDi\n```\nThen move the directory named `GeDi` (source code directory) \nto a location you are comfortable with it remaining; \nonce GeDi is compiled, the source code directory cannot be moved \nwithout re-compilation (see compilation section below).\n\n"
      },
      "source": "https://raw.githubusercontent.com/izaak-coleman/GeDi/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/izaak-coleman/GeDi/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/izaak-coleman/GeDi/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "izaak-coleman/GeDi"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "GeDi: Generalised suffix array-based Direct SNV caller"
      },
      "source": "https://raw.githubusercontent.com/izaak-coleman/GeDi/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/izaak-coleman/GeDi/master/install.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/izaak-coleman/GeDi/master/bowtie2-2.3.4/scripts/make_s_cerevisiae.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/izaak-coleman/GeDi/master/bowtie2-2.3.4/scripts/make_mm10.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/izaak-coleman/GeDi/master/bowtie2-2.3.4/scripts/make_b_taurus_UMD3.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/izaak-coleman/GeDi/master/bowtie2-2.3.4/scripts/make_hg19.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/izaak-coleman/GeDi/master/bowtie2-2.3.4/scripts/make_h_sapiens_ncbi36.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/izaak-coleman/GeDi/master/bowtie2-2.3.4/scripts/make_e_coli.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/izaak-coleman/GeDi/master/bowtie2-2.3.4/scripts/make_canFam2.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/izaak-coleman/GeDi/master/bowtie2-2.3.4/scripts/make_rn4.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/izaak-coleman/GeDi/master/bowtie2-2.3.4/scripts/make_d_melanogaster.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/izaak-coleman/GeDi/master/bowtie2-2.3.4/scripts/make_h_sapiens_ncbi37.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/izaak-coleman/GeDi/master/bowtie2-2.3.4/scripts/make_mm9.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/izaak-coleman/GeDi/master/bowtie2-2.3.4/scripts/make_m_musculus_ncbi37.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/izaak-coleman/GeDi/master/bowtie2-2.3.4/scripts/make_hg18.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/izaak-coleman/GeDi/master/bowtie2-2.3.4/scripts/make_c_elegans.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/izaak-coleman/GeDi/master/bowtie2-2.3.4/scripts/make_a_thaliana_tair.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.9996762025343626,
      "result": {
        "original_header": "Compilation",
        "type": "Text_excerpt",
        "value": "To reduce the number of dependencies requiring manual installation by the user, \nwe included many of GeDi's dependencies within its source code directory. \nGeDi will be built directly within its source code directory and as a consequence of\nthe included dependencies, once GeDi is compiled the source code directory cannot\nbe moved without recompilation of GeDi.  \nNevertheless, a few dependencies and requirements (listed below)\nremain to successfully compile GeDi.\n  - GeDi can be run only on linux machine with x86\\_64 architecture. \n  - GNU `make` must be installed \n  - `cmake` must be installed\n  - `g++` version 4.8.1 or greater must be installed \n  - boost program options library must be installed. On CentOS, install with `yum install\n  boost-devel.x86_64`, on Ubuntu with `sudo apt-get install libboost-all-dev`.\n  - A bowtie2 index of a reference genome must be present. For example, an index\n  of `ucsc.hg19.fasta` (Human Reference Genome 19) can be built by installing \n  bowtie2 and issuing command `bowtie2-build\n  ucsc.hg19.fasta ucsc.hg19.fasta`, see \n  [bowtie2 reference manual](http://bowtie-bio.sourceforge.net/bowtie2/manual.shtml)\n  for further details. \nOnce the dependencies have been installed and GeDi's source code\ndirectory is placed in a preferred location, compile GeDi with the following:\n```\ncd GeDi\nbash install.sh\n```\n`sudo` may be required. Compilation of GeDi will now initiate. Once compilation is complete,\ntest that GeDi compiled successfully by executing\nBASH2*\nwhich should display GeDi's help message. \n"
      },
      "source": "https://raw.githubusercontent.com/izaak-coleman/GeDi/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/izaak-coleman/GeDi/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 Izaak Coleman\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/izaak-coleman/GeDi/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "GeDi"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "izaak-coleman"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 142901,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 131155,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 127383,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 47943,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 32029,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 28270,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CSS",
        "size": 6677,
        "type": "Programming_language",
        "value": "CSS"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 5648,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 889,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/izaak-coleman/GeDi/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running GeDi on example data",
        "type": "Text_excerpt",
        "value": "Within GeDi's source code directory is an `example_data` subdirectory.\nIt will be used in this section to provide an example of how to analyse a paired\ntumour-control NGS dataset with GeDi in default mode. \n\nWithin `example_data` are the following three files:\n  - `example_dataset.file_list`\n  - `example_control_data.fastq.gz`\n  - `example_tumour_data.fastq.gz`\n\nThe tumour and control `fastq` files form the example paired tumour-control\nNGS dataset. We assume that whatever fasta preprocessing (e.g quality analysis,\nde-duplication and trimming) deemed necessary by the user has already been applied. \n`example_dataset.file_list` contains the list of `fastq` file names\nthat form the dataset. `example_dataset.file_list` will be read by GeDi to \nload the dataset. Each line of `example_dataset.file_list` has the structure `filename, type`, where `filename`\nis the absolute path to a fastq file, and `type` is either `C` or `T`, denoting\nwhether the fastq file derives from control or tumour tissue respectively.\nHence, `example_dataset.file_list` contains the following:\n```\n./example_data/example_control_data.fastq.gz,C\n./example_data/example_tumour_data.fastq.gz,T\n```\nNote that relative paths to fastq files are given, but the user\nshould *always use absolute paths in their* `.file_list`.\n\nTo run GeDi on the example data, issue the following command:\n```\n./GeDi -c chr22 -v 30 -t 4 -e 0 -i example_data/example_dataset.file_list -x /path/to/your/bowtie2_index/of/human_ref_genome/ucsc.hg19.fasta -o example_data\n```\nOnce GeDi has finished executing, it will output three files:\n - `example_data.SNV_results`\n - `example_data.fastq.gz`\n - `example_data.sam`\n\nThe `.fastq.gz` and `.sam` files contain the healthy-tissue derived sequences\nmapped to the reference genome as a proxy; they can be deleted. \n`example_data.SNV_results` contains the SNV calls made\nby GeDi for the example dataset. This file has the following content:\n```\nMut_ID\tType\tChr\tPos\tNormal_NT\tTumor_NT\n0\tSNV\tchr22\t19613299\tT\tA\n\n```\nWhen analysing the toy dataset, GeDi detected and called a single SNV on\nchromosome 22 at position 19613299, with control variant T and tumour variant\nA. The column headers of an output `.SNV_results` file describe the following:\n  - `MuT_ID` is an arbitrary unique number assigned to each called SNV.\n  - `Type` specifies the type of variant GeDi called - current version of GeDi only calls SNVs.\n  - `Chr` specifies the chromosome the called SNVs reside.\n  - `Pos` specifies the 1-indexed chromosome position of the called SNVs.\n  - `Normal_NT` specifies the control variant nucleotide of the called SNVs.\n  - `Tumour_NT` specifies the tumour variant nucleotide of the called SNVs.\n"
      },
      "source": "https://raw.githubusercontent.com/izaak-coleman/GeDi/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running GeDi on user data",
        "type": "Text_excerpt",
        "value": "By following the above example and making the appropriate substitutions\na user will be able to analyse their own data with GeDi.\n\nAccordingly, to run GeDi in default mode, the main substitution is to ensure\nthe `.file_list` file contains the list of `fastq` files comprising\nthe users own dataset.\n\nAlthough issuing `./GeDi --help` on the command-line will print information\nregarding the arguments that must be passed to GeDi's parameters as well\nas parameter function. Here, we explain what must be passed to the most important of GeDi's\nparameters (each of which was specified in the above example):\n - `-i` The path and file name of the users `.file_list`.\n - `-c` If specified, GeDi will filter out all SNV calls that do not\n        reside within the specified chromosome. Note that the passed argument\n        should *exactly* match the fasta header of the desired chromosome \n        within the reference genome used for alignment. If not specified, GeDi will report\n        all SNVs called regardless of the chromosome they reside in.\n - `-v` Expected or average coverage of the dataset.\n - `-t` Number of threads GeDi will execute with during parallel sections\n - `-x` The location and prefix of the bowtie2 index of Human Reference Genome.\n        Note the argument passed to this parameter should be identical to the\n        argument one would pass to `-x` if running bowtie2. See\n        [bowtie2 reference manual](http://bowtie-bio.sourceforge.net/bowtie2/manual.shtml) \n        for a further explanation of bowtie2's `-x` parameter.\n - `-o` Prefix of the output files produced by GeDi. This can include a file\n        path, and GeDi will write files with the prefix at the location\n        specified by the path.\n - `-e` Expected contamination: Proportion of tumour dataset sequencing reads\n        expected to have derived from healthy tissue.\n\nThe function of remaining parameters can be found by issuing `GeDi --help` on\nthe command-line. \n"
      },
      "source": "https://raw.githubusercontent.com/izaak-coleman/GeDi/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 16:42:32",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running GeDi on example data",
        "type": "Text_excerpt",
        "value": "Within GeDi's source code directory is an `example_data` subdirectory.\nIt will be used in this section to provide an example of how to analyse a paired\ntumour-control NGS dataset with GeDi in default mode. \n\nWithin `example_data` are the following three files:\n  - `example_dataset.file_list`\n  - `example_control_data.fastq.gz`\n  - `example_tumour_data.fastq.gz`\n\nThe tumour and control `fastq` files form the example paired tumour-control\nNGS dataset. We assume that whatever fasta preprocessing (e.g quality analysis,\nde-duplication and trimming) deemed necessary by the user has already been applied. \n`example_dataset.file_list` contains the list of `fastq` file names\nthat form the dataset. `example_dataset.file_list` will be read by GeDi to \nload the dataset. Each line of `example_dataset.file_list` has the structure `filename, type`, where `filename`\nis the absolute path to a fastq file, and `type` is either `C` or `T`, denoting\nwhether the fastq file derives from control or tumour tissue respectively.\nHence, `example_dataset.file_list` contains the following:\n```\n./example_data/example_control_data.fastq.gz,C\n./example_data/example_tumour_data.fastq.gz,T\n```\nNote that relative paths to fastq files are given, but the user\nshould *always use absolute paths in their* `.file_list`.\n\nTo run GeDi on the example data, issue the following command:\n```\n./GeDi -c chr22 -v 30 -t 4 -e 0 -i example_data/example_dataset.file_list -x /path/to/your/bowtie2_index/of/human_ref_genome/ucsc.hg19.fasta -o example_data\n```\nOnce GeDi has finished executing, it will output three files:\n - `example_data.SNV_results`\n - `example_data.fastq.gz`\n - `example_data.sam`\n\nThe `.fastq.gz` and `.sam` files contain the healthy-tissue derived sequences\nmapped to the reference genome as a proxy; they can be deleted. \n`example_data.SNV_results` contains the SNV calls made\nby GeDi for the example dataset. This file has the following content:\n```\nMut_ID\tType\tChr\tPos\tNormal_NT\tTumor_NT\n0\tSNV\tchr22\t19613299\tT\tA\n\n```\nWhen analysing the toy dataset, GeDi detected and called a single SNV on\nchromosome 22 at position 19613299, with control variant T and tumour variant\nA. The column headers of an output `.SNV_results` file describe the following:\n  - `MuT_ID` is an arbitrary unique number assigned to each called SNV.\n  - `Type` specifies the type of variant GeDi called - current version of GeDi only calls SNVs.\n  - `Chr` specifies the chromosome the called SNVs reside.\n  - `Pos` specifies the 1-indexed chromosome position of the called SNVs.\n  - `Normal_NT` specifies the control variant nucleotide of the called SNVs.\n  - `Tumour_NT` specifies the tumour variant nucleotide of the called SNVs.\n"
      },
      "source": "https://raw.githubusercontent.com/izaak-coleman/GeDi/master/README.md",
      "technique": "header_analysis"
    }
  ]
}