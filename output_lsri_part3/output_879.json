{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/IMEDEA/mitogenomics"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-05-14T12:16:43Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-28T02:46:46Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Pyhton Scripts to annotate mitochondrial genomes"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9609795174807099,
      "result": {
        "original_header": "Provided versions",
        "type": "Text_excerpt",
        "value": "aln2tbl.py -> Converts an assembly of individual genes mapped to the mitogenome sequence in fasta format into a feature table (python 3 version). \n**This software is released under the license GNU GPLv3.** \n**This software is provided as is without warranty of any kind.**\n \n"
      },
      "source": "https://raw.githubusercontent.com/IMEDEA/mitogenomics/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9099320247372898,
      "result": {
        "original_header": "mitos2fasta.py",
        "type": "Text_excerpt",
        "value": "**-m MITOFILE --mitofile** -> Input file with mitogenome sequence in fasta format, as submitted to MITOS2 \n"
      },
      "source": "https://raw.githubusercontent.com/IMEDEA/mitogenomics/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.932869134990414,
      "result": {
        "original_header": "aln2tbl.py",
        "type": "Text_excerpt",
        "value": "This python script was designed for those modifying manually the genes mapped on the mitochondrial genome sequence and then\nautomatically generate a new table fatures with updated 5' and 3' ends. It's a perfect tool to correct annotations from MITOS2\nand other similar software. The new table features can be used to build a sqn file to submit annotated mitogenome to any Data Bank (ENA, NCBI and DDBJ). \n**-f, --fasta** -> input text file with assembly in fasta format \n**-g, --genes** -> input text file with list of gene names coded in forward strand (plus or positive strand) in a single line and separated by commas. \n**-c, --code** -> Number (integer) of the appropriate mitochondrial Genetic Code Translation Table: vertebrate (2), yeast (3), mold, protozoan and coelenterate (4), invertebrate (5), echinoderm and flatworm (9), ascidian (13) \n**-f** -> A fasta alignment (contig or assembly) file (--fasta) including the complete nucleotide sequence of the mitogenome\nas well as the sequence of each mapped gene (generally 37), with a single line per gene sequence. \nSee FAQs for the correct naming of genes. \n**-g** -> A plain text file (--genes) listing genes that are encoded in forward orientation with respect to the sequence being submitted, separated by commas and without spaces.\nThis information allows the script to correctly reverse/complement the nucleotide sequence of genes encoded on the opposite strand prior to annotation.\nControl regions, if any (see FAQs below), should be also included in the gene file (--genes), since they are generally annotated in forward orientation. \n**-c** -> The last argument (--code) parses the number of the appropriated mitochondrial genetic code\n(e.g. 2 for vertebrate mitochondrial code, 5 for invertebrate mitochondrial code). \nVisit this web page for a complete list of genetic codes https://www.ncbi.nlm.nih.gov/Taxonomy/Utils/wprintgc.cgi\nSee FAQs below for a summary of start and stop codons of different mitochondrial genetic codes. \nThe output file is saved as plain text with tbl extension to be readily identified as a feature table.  \n"
      },
      "source": "https://raw.githubusercontent.com/IMEDEA/mitogenomics/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9367400637357306,
      "result": {
        "original_header": "FAQs/FAQs/FAQs/:",
        "type": "Text_excerpt",
        "value": "Gene names must comply with the names proposed by Boore and Brown (2000) as in most recent GenBank annotations. \nAccepted names for ribosomal genes are rrnL (or 16S) and rrnS (or 12S) for the large and small ribosomal subunit, respectively.   \nThe two tRNA genes that are generally present for Leucine and Serine must be differentiated by post-pending the correct\nnumber to the gene name following the same convention used in MITOS: L1 for tRNALeu(CUN), L2 for tRNALeu(UUR), S1 for tRNASer(AGN) and S2 for tRNASer(UCN)).  \nThe control region, if included, must be named 'control_region' or 'CR'. Up to two codon regions can be annotated \u2018CR1\u2019 and \u2018CR2\u2019. \nNo, do not annotate any non-coding region as a Control region. The Control region, just like PCGs, rRNAs and tRNAs, should be identified based on positive evidence (position, base composition, presence of specific conserved elements) prior to annotation.  \n**4) Which start and stop codons are recognized as standard in each genetic code?** \nAccording to NCBI standards, start and stop codons for different genetic codes for mitochondrial genomes are: \n   Vertebrate Mitochondrial Code (genetic_code=2) :  \n       START CODONS for Met = [\"ATT\",\"ATC\",\"ATA\",\"ATG\",\"GTG\"]  \n       STOP CODONS = [\"TAA\",\"TAG\",\"AGA\",\"AGG\"] \n   Yeast Mitochondrial Code (genetic_code=3) :  \n       START CODONS for Met = [\"ATA\",\"ATG\",\"GTG\"]  \n       STOP CODONS = [\"TAA\",\"TAG\"] \n   Mold, Protozoan, and Coelenterate Mitochondrial Code (genetic_code=4) :  \n       START CODONS for Met = [\"TTA\",\"TTG\",\"CTG\",\"ATT\",\"ATC\",\"ATA\",\"ATG\",\"GTG\"]  \n       STOP CODONS  = [\"TAA\",\"TAG\"] \n   Invertebrate Mitochondrial Code (genetic_code=5) :  \n       START CODONS for Met = [\"TTG\",\"ATT\",\"ATC\",\"ATA\",\"ATG\",\"GTG\"]  \n       STOP CODONS = [\"TAA\",\"TAG\"] \n   Echinoderm and Flatworm Mitochondrial Code (genetic_code=9) :  \n       START CODONS for Met = [\"ATG\",\"GTG\"]  \n       STOP CODONS  = [\"TAA\",\"TAG\"] \n   Ascidian Mitochondrial Code (genetic_code=13) :  \n       START CODONS for Met = [\"TTG\",\"ATA\",\"ATG\",\"GTG\"]  \n       STOP CODONS = [\"TAA\",\"TAG\"] \nThe initial fasta alignment of automatically annotated gene sequences against the complete mitogenome can be obtained\nin several ways starting from the results of an automatic annotation (e.g. MITOS2). One flexible option, using free software\nthat can be called using bash scripting, is to build the contig using Bowtie2 (Langmead & Salzberg, 2012), sort the bam file\nby coordinate in picard tools (http://broadinstitute.github.io/picard), and finally convert the bam file to fasta with the\npython3 script sam2fasta.py (https://sourceforge.net/projects/sam2fasta/files/). \nAnother option, provided that gene and genome sequences are position ordered, identical and ungapped (e.g. in the MITOS2 output),\nis to use the python 3 script mitos2aln.py, provided as companion to aln2tbl.phy. This script produces a fasta alignment of\neach gene nucleotide sequence relative to complete mitogenome sequence and parse mitos gene nomenclature of fasta headers\nwith four semicolon separated fields to single name compatible with aln2tbl.py naming.  \nIn both options, the fasta contig can be the easily refined manually in a visual alignment editor such as SeaView or Aliview\nprior to further processing in aln2tbl.py.  \n**6) Is it possible to annotated a TA truncated stop codon?** \nBoth T and TA truncated stop codons are correctly processed by aln2tbl.py.\nNevertheless the use of truncated TA stop codons is discouraged as this is not recognized by downstream application tbl2asn.\nA simple workaround is to indicate a T truncated stop codon in any case. \nNo. The aln2tbl.py script can not handle partial genes, though this is an uncommon circumstance in mitogenomes.\nIf present, the feature table must be manually corrected by adding the symbols < and > for partial 5\u2019 and 3\u2019 ends, respectively. \nNo. The presence of duplicated tRNA genes, which is also uncommon, cannot be handled as it results in a duplicated gene name. \nThese must be manually annotated in the feature table. \nNo. If the genome is circular, we foster the good practice of linearizing the sequence at the beginning of one gene, generally tRNA-I to circumvent the problem and produce a well organized submission.  \n**10) The genome is incomplete and missing an inner portion of a single gene** \nThis occurrence must be manually annotated in the feature table. \n"
      },
      "source": "https://raw.githubusercontent.com/IMEDEA/mitogenomics/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Download",
        "type": "Text_excerpt",
        "value": "Download scripts and examples from https://github.com/IMEDEA/mitogenomics\n\nIn linux terminal\n\n```\ngit clone https://github.com/IMEDEA/mitogenomics\n```\n\nIf git is not installed visit https://github.com/git-guides/install-git  \nwhich is available for any OS\n\nMake scripts executable\n\n```\ncd mitogenomics\n```\n\n```\nchmod +x aln2tbl.py mitos2fasta.py\n```\n"
      },
      "source": "https://raw.githubusercontent.com/IMEDEA/mitogenomics/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/IMEDEA/mitogenomics/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/IMEDEA/mitogenomics/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "IMEDEA/mitogenomics"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Provided versions"
      },
      "source": "https://raw.githubusercontent.com/IMEDEA/mitogenomics/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9821473610856681,
      "result": {
        "original_header": "Provided versions",
        "type": "Text_excerpt",
        "value": "aln2tbl-legacy.py ->  python 2 version of the previous script - (this will not be maintained). \n"
      },
      "source": "https://raw.githubusercontent.com/IMEDEA/mitogenomics/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8818772984835164,
      "result": {
        "original_header": "mitos2fasta.py",
        "type": "Text_excerpt",
        "value": "Type on terminal mitos2fasta.py -h for further information. \n"
      },
      "source": "https://raw.githubusercontent.com/IMEDEA/mitogenomics/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9490813327200402,
      "result": {
        "original_header": "aln2tbl.py",
        "type": "Text_excerpt",
        "value": "Type on terminal aln2tbl.py -h for further information. \n**We encourage users to run the full pipeline example (see below) on the Hyalella data provided in order to test their setup and familiarize with the commands.** \nSimply copy the script to your executable path and use it as follows \n\n**aln2tbl.py -f assembly_file.fas -g forward_genes_file.txt -c number_genetic_code > feature_table_file.tbl** \nVisit this web page for a complete list of genetic codes https://www.ncbi.nlm.nih.gov/Taxonomy/Utils/wprintgc.cgi\nSee FAQs below for a summary of start and stop codons of different mitochondrial genetic codes. \n**The example script can be run using the following example:** \nCopy and paste the next example in your terminal (~/mitogenomics)\n```\n./aln2tbl.py -f ./example/input/Hyalella_solida_assembly_manually_curated.fas -g ./example/input/forward_genes.txt -c 5 > ./example/input/Hyalella_solida_feature_table.tbl\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/IMEDEA/mitogenomics/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9109841872323963,
      "result": {
        "original_header": "FAQs/FAQs/FAQs/:",
        "type": "Text_excerpt",
        "value": "**1) The script is apparently missing the correct python interpreter** \nThis script assumes the python3 interpreter to be in /usr/bin/env python3. If this is not the case, or multiple python\ninstallations are available, the full path to python3 interpreter can be added to the command line\n(e.g. ./usr/bin/python3 aln2tbl.py or ~/miniconda3/bin/python ./aln2tbl.py) or path exported in .bashrc file. \n   Vertebrate Mitochondrial Code (genetic_code=2) :  \n       START CODONS for Met = [\"ATT\",\"ATC\",\"ATA\",\"ATG\",\"GTG\"]  \n       STOP CODONS = [\"TAA\",\"TAG\",\"AGA\",\"AGG\"] \n   Yeast Mitochondrial Code (genetic_code=3) :  \n       START CODONS for Met = [\"ATA\",\"ATG\",\"GTG\"]  \n       STOP CODONS = [\"TAA\",\"TAG\"] \n   Mold, Protozoan, and Coelenterate Mitochondrial Code (genetic_code=4) :  \n       START CODONS for Met = [\"TTA\",\"TTG\",\"CTG\",\"ATT\",\"ATC\",\"ATA\",\"ATG\",\"GTG\"]  \n       STOP CODONS  = [\"TAA\",\"TAG\"] \n   Invertebrate Mitochondrial Code (genetic_code=5) :  \n       START CODONS for Met = [\"TTG\",\"ATT\",\"ATC\",\"ATA\",\"ATG\",\"GTG\"]  \n       STOP CODONS = [\"TAA\",\"TAG\"] \n   Echinoderm and Flatworm Mitochondrial Code (genetic_code=9) :  \n       START CODONS for Met = [\"ATG\",\"GTG\"]  \n       STOP CODONS  = [\"TAA\",\"TAG\"] \n   Ascidian Mitochondrial Code (genetic_code=13) :  \n       START CODONS for Met = [\"TTG\",\"ATA\",\"ATG\",\"GTG\"]  \n       STOP CODONS = [\"TAA\",\"TAG\"] \nThe initial fasta alignment of automatically annotated gene sequences against the complete mitogenome can be obtained\nin several ways starting from the results of an automatic annotation (e.g. MITOS2). One flexible option, using free software\nthat can be called using bash scripting, is to build the contig using Bowtie2 (Langmead & Salzberg, 2012), sort the bam file\nby coordinate in picard tools (http://broadinstitute.github.io/picard), and finally convert the bam file to fasta with the\npython3 script sam2fasta.py (https://sourceforge.net/projects/sam2fasta/files/). \n**7) Can the script handle partial genes?** \nSee link for futher information \nhttps://www.ncbi.nlm.nih.gov/genbank/genomesubmit_annotation/#partial_CDS \n"
      },
      "source": "https://raw.githubusercontent.com/IMEDEA/mitogenomics/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8819327115296451,
      "result": {
        "original_header": "mitos2fasta.py",
        "type": "Text_excerpt",
        "value": "\n**mitos2fasta.py -m mitofile.fas -g genesfile.fas -c convertfile_Y/N > assembly.fas** \nCopy and paste the next example in your terminal (~/mitogenomics)\n```\n./mitos2fasta.py -m ./example/input/Hyalella_solida_mitogenome.fas -g ./example/input/Hyalella_solida_genes_mitos2.fas -c Y > ./example/input/Hyalella_solida_assembly.fas\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/IMEDEA/mitogenomics/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8902968047760564,
      "result": {
        "original_header": "aln2tbl.py",
        "type": "Text_excerpt",
        "value": "\n**aln2tbl.py -f assembly_file.fas -g forward_genes_file.txt -c number_genetic_code > feature_table_file.tbl** \n -> See example file in /example/input/forward_genes.txt \n**The example script can be run using the following example:** \nCopy and paste the next example in your terminal (~/mitogenomics)\n```\n./aln2tbl.py -f ./example/input/Hyalella_solida_assembly_manually_curated.fas -g ./example/input/forward_genes.txt -c 5 > ./example/input/Hyalella_solida_feature_table.tbl\n```\n \nCompare your Hyalella_solida_feature_table.tbl with our output file /example/output/Hyalella_solida_feature_table.tbl \n"
      },
      "source": "https://raw.githubusercontent.com/IMEDEA/mitogenomics/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/IMEDEA/mitogenomics/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "GNU General Public License v3.0",
        "spdx_id": "GPL-3.0",
        "type": "License",
        "url": "https://api.github.com/licenses/gpl-3.0",
        "value": "https://api.github.com/licenses/gpl-3.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "mitogenomics"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "IMEDEA"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 29614,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Scala",
        "size": 3563,
        "type": "Programming_language",
        "value": "Scala"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/IMEDEA/mitogenomics/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "type": "Text_excerpt",
        "value": "This software uses Biopython and argparse modules in python 3 (tested version 1.78-2). They can be installed in your system using pip:\n\n```\npip install biopython argparse\n```\n"
      },
      "source": "https://raw.githubusercontent.com/IMEDEA/mitogenomics/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 02:40:22",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Full pipeline example (example files in /example/)",
        "type": "Text_excerpt",
        "value": "**Input files are provided in the ~/mitogenomics/example/input folder**\n\nHyalella_solida_mitogenome.fas -> Mitogenome sequence in fasta format\n\nHyalella_solida_genes_mitos2.fas -> MITOS2 output, automatic annotation of the genome.\n\nHyalella_solida_assembly_manually_curated.fas -> MITOS2 output manually curated in an alignment editor (SeaView or Aliview). In this example, duplicated genes have been removed or merged, the boundaries of some genes have been corrected and names of gene names have been made compliant (see FAQs)\n\nforward_genes.txt -> List of genes in forward orientation\n\nsubmission_template.sbt -> Submission information created using the NCBI web function at https://submit.ncbi.nlm.nih.gov/genbank/template/submission/\n\n**Pipeline steps**\n\n1) Send mitogenome sequence \"/example/input/Hyalella_solida_mitogenome.fas\" to MITOS2\n(http://mitos2.bioinf.uni-leipzig.de/index.py)\n\nSelect correct genetic code (Invertebrate for this example) and in advanced setting unselect OH, OL, and intron features.\nAlso unselect circular since this example is not a complete mitogenome as we failed to sequence part of control region. \n\n2) From MITOS2 output download fasta file sequences of annotated genes (FAS file link). Rename file to \"Hyalella_solida_genes_mitos2.fas\"\n\n3) Maps the automatically annotated genes (e.g. file .fas from MITOS2 automatic annotation; see http://mitos2.bioinf.uni-leipzig.de/index.py) to the mitogenome to produce a fasta assembly with mitos2fasta python script\n\nCopy and paste the next example in your terminal (~/mitogenomics)\n\n```\n./mitos2fasta.py -m ./example/input/Hyalella_solida_mitogenome.fas -g ./example/input/Hyalella_solida_genes_mitos2.fas -c Y > ./example/input/Hyalella_solida_assembly.fas\n```\n\nThis same file/step can be produced using alternative strategies (e.g. bowtie) or manually.\n\n4) If necessary (generally it is so) manually check and modify 5' and 3' ends of genes and annotate and add control regions in Seaview or AliView as we did manually. Our curated files is in:\n\n\"/example/input/Hyalella_solida_assembly_manually_curated.fas\"\n\n5) Creates feature table file with aln2tbl python script from the manually curated fasta assembly.\n\nCopy and paste the next example in your terminal (~/mitogenomics)\n\n```\n./aln2tbl.py -f ./example/input/Hyalella_solida_assembly_manually_curated.fas -g ./example/input/forward_genes.txt -c 5 > ./example/input/Hyalella_solida_feature_table.tbl\n```\n\n6) build .sqn file to submit annotated mitogenome to GenBank/ENA and check/validade for errors\n\nCopy and paste the next example in your terminal (~/mitogenomics)\n\n```\ntbl2asn -i ./example/input/Hyalella_solida_mitogenome.fas -f ./example/input/Hyalella_solida_feature_table.tbl -t ./example/input/submission_template.sbt -a s -V bv -T -j \"[mgcode=5] [location=mitochondrion] [organism=Hyalella solida]\"\n```\n\nSubmission files are created using the NCBI tbl2asn script. This last commands assumes the tbl2asn script is correctly installed in your system. Please check the NCBI website for additional infromation on tbl2asn https://www.ncbi.nlm.nih.gov/genbank/tbl2asn2/\n\nSource modifiers (organism, genetic code, ...), here provided to tbl2asn using the -j option, can be alternatively specified in the header of the genome fasta. For further information about source qualifiers (-j) see: https://www.ncbi.nlm.nih.gov/genbank/mods_fastadefline/\n\n\n**Output files comparison**\n\nAfter running full pipeline commands, 6 additional output files will be found in ~/mitogenomics/example/input folder. \n\nThese same files are provided in folder ~/mitogenomics/example/output for comparison.\n\nHyalella_solida_assembly.fas -> Genes mapped over the genome, in fasta format. This file can be edited using an alignment editor for manual curation of annotations. Sample manual curation is here provided as input file Hyalella_solida_assembly_manually_curated.fas. \n \nHyalella_solida_feature_table.tbl -> Feature table with gene annotations.        \n\nHyalella_solida_mitogenome.val -> Validation output, should contain no (major) error.\n\nerrorsummary.val -> Validation output, should contain no (major) error.\n\nHyalella_solida_mitogenome.sqn -> Annotation of the mitogenome, ready for submission.\n\nHyalella_solida_mitogenome.gbf -> Human readable version of the submission file, in GenBank format.\n"
      },
      "source": "https://raw.githubusercontent.com/IMEDEA/mitogenomics/master/README.md",
      "technique": "header_analysis"
    }
  ]
}