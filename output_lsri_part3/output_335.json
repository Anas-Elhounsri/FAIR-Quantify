{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "References",
        "parent_header": [
          "LuxGLM: a probabilistic covariate model for quantification of DNA methylation modifications with complex experimental designs"
        ],
        "type": "Text_excerpt",
        "value": "-------------\n[1] T. \u00c4ij\u00f6, X. Yue, A. Rao and H. L\u00e4hdesm\u00e4ki, \u201cLuxGLM: a probabilistic covariate model for quantification of DNA methylation modifications with complex experimental designs.,\u201d Bioinformatics, 32.17:i511-i519, Sep 2016.\n\n[2] T. \u00c4ij\u00f6, Y. Huang, H. Mannerstr\u00f6m, L. Chavez, A. Tsagaratou, A. Rao and H. L\u00e4hdesm\u00e4ki, \u201cA probabilistic generative model for quantification of DNA modifications enables analysis of demethylation pathways.,\u201d Genome Biol, 17.1:1, Mar 2016.\n\n[3] F. Krueger and S. R. Andrews, \u201cBismark: a flexible aligner and methylation caller for Bisulfite-Seq applications.,\u201d Bioinformatics, 27.11:1571-1572, Jun 2011. \n\n[4] K. D. Hansen, B. Langmead and R. A. Irizarry, \u201cBSmooth: from whole genome bisulfite sequencing reads to differentially methylated regions.,\u201d Genome Biol, 13.10:1, Oct 2012. \n\n[5] Stan Development Team, \u201cStan Modeling Language Users Guide and Reference Manual, Version 2.14.0.,\u201d http://mc-stan.org, Jan 2016. \n\n[6] Stan Development Team, \u201cPyStan: the Python interface to Stan, Version 2.14.0.0.,\u201d http://mc-stan.org, Jan 2016.\n"
      },
      "source": "https://raw.githubusercontent.com/tare/LuxGLM/master/LuxRep/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/tare/LuxGLM"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2016-04-05T19:07:32Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-08-28T06:58:22Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "LuxGLM is a method for quantifying oxi-mC species with arbitrary covariate structures from bisulphite based sequencing data. LuxGLM's probabilistic modeling framework combines a previously proposed hierarchical generative model of Lux for oxi-mC-seq data and a general linear model component to account for confounding effects."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick introduction",
        "parent_header": [
          "LuxGLM: a probabilistic covariate model for quantification of DNA methylation modifications with complex experimental designs"
        ],
        "type": "Text_excerpt",
        "value": "An usual LuxGLM pipeline has the following steps\n\n1. Alignment of BS-seq and oxBS-seq data (e.g., [Bismark](http://www.bioinformatics.babraham.ac.uk/projects/bismark/) or [BSmooth](http://rafalab.jhsph.edu/bsmooth/))\n\n2.  Extraction of converted and unconverted counts (e.g., [Bismark](http://www.bioinformatics.babraham.ac.uk/projects/bismark/) or [BSmooth](http://rafalab.jhsph.edu/bsmooth/))\n\n3. Integrative methylation analysis\n\n4. Analysis of obtained methylation estimates, e.g., using Bayes factors\n\nThis documentation focus on points three and four.\n"
      },
      "source": "https://raw.githubusercontent.com/tare/LuxGLM/master/LuxRep/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9992267873327775,
      "result": {
        "original_header": "Overview",
        "type": "Text_excerpt",
        "value": "-------------\nLuxGLM is a method for quantifying oxi-mC species with arbitrary covariate structures from bisulphite based sequencing data. LuxGLM's probabilistic modeling framework combines a previously proposed hierarchical generative model of **Lux** for oxi-mC-seq data and a general linear model component to account for confounding effects.\n \n"
      },
      "source": "https://raw.githubusercontent.com/tare/LuxGLM/master/LuxRep/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9925101425460325,
      "result": {
        "original_header": "Features",
        "type": "Text_excerpt",
        "value": "- Model-based integration and analysis of BS-seq/oxBS-seq/TAB-seq/fCAB-seq/CAB-seq/redBS-seq/MAB-seq/etc. data from whole genome, reduced representation or targeted experiments\n- Accounts for confounding effects through general linear model component\n- Considers nonideal experimental parameters through modeling, including e.g. bisulphite conversion and oxidation efficiencies, various chemical labeling and protection steps etc.\n- Model-based integration of biological replicates\n- Detects differential methylation using Bayes factors (DMRs)\n- Full Bayesian inference implemented using **Stan**\n \n"
      },
      "source": "https://raw.githubusercontent.com/tare/LuxGLM/master/LuxRep/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9263036256996634,
      "result": {
        "original_header": "Using LuxGLM",
        "type": "Text_excerpt",
        "value": "A python script **luxglm<span></span>.py** is supplied for generating input variables from user-supplied data files and running the analysis.  \n     optional arguments:\n     -h, --help                                       show this help message and exit\n     -c CONTROL_DATA, --control_data CONTROL_DATA     file containing control cytosine data\n     -p CONTROL_PRIOR, --control_prior CONTROL_PRIOR  file containing prior knowledge on control cytosines\n     -d DATA_FILE, --data DATA_FILE                   file containing cytosine data\n     -m DESIGN_FILE, --design_matrix DESIGN_FILE      file containing design matrix\n     -o OUTPUT_FILE, --output OUTPUT_FILE             file for storing samples\n     -v, --version                                    show program's version number and exit \n"
      },
      "source": "https://raw.githubusercontent.com/tare/LuxGLM/master/LuxRep/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9312480048332,
      "result": {
        "original_header": "Control cytosines",
        "type": "Text_excerpt",
        "value": "The files **control_data.txt** and **control_prior.txt** have the count data and prior information on the control cytosines of interest, respectively. \nEach line (one line per control cytosine) in the file **control_data.txt** is composed of one or more sample-specific tab-separated blocks of four tab-separated nonnegative integers\n>N<sub>BS</sub><sup>C</sup>\\tN<sub>BS</sub>\\tN<sub>oxBS</sub><sup>C</sup>\\tN<sub>oxBS</sub> \nThat is, the number of Cs and the total BS-seq read-outs are listed first, which are followed by the number of Cs and total oxBS-seq read-outs.\nEach line in **control_data.txt** should have exactly 4\u00d7N<sub>samples</sub> values separated with the tabs (one quadruple per sample). Importantly, each of the sample specified in **data.txt** (covered in the next section) should have its own control data. Moreover, the order of the sample-specific blocks in **control_data.txt** and **data.txt** is assumed to be the same. \nThe prior knowledge on the control cytosines is supplied in the file **control_prior.txt**. Although the hierarchical model allows that the control cytosines would have different priors between replicates, this is not implemented in the current version. Therefore, each line in **control_prior.txt** should have exactly three tab-separated values and the order of the rows, i.e., control cytosines, should be the same in **control_data.txt** and **control_prior.txt**.\n \n"
      },
      "source": "https://raw.githubusercontent.com/tare/LuxGLM/master/LuxRep/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9574472631929476,
      "result": {
        "original_header": "Noncontrol cytosines",
        "type": "Text_excerpt",
        "value": "The files **data.txt** and **design_matrix.txt** have the count data of the noncontrol cytosines of interest and the covariate structure of the samples, respectively. \nAs with control cytosines in **control_data.txt**, each of the noncontrol cytosine has its own line in **data.txt**. Each line in **data.txt** is composed of one or more sample-specific tab-separated blocks of four tab-separated nonnegative integers\n>N<sub>BS</sub><sup>C</sup>\\tN<sub>BS</sub>\\tN<sub>oxBS</sub><sup>C</sup>\\tN<sub>oxBS</sub> \nThat is, the number of Cs and the total BS-seq read-outs are listed first, which are followed by the number of Cs and total oxBS-seq read-outs. Moreover, on each line there should be exactly 4\u00d7N<sub>samples</sub> values separated with the tabs (one quadruple per sample). \nThe order of the samples (i.e. rows) in **design_matrix.txt** should match with the order of blocks in **control_data.txt** and **data.txt**. \n \n"
      },
      "source": "https://raw.githubusercontent.com/tare/LuxGLM/master/LuxRep/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.926223485663702,
      "result": {
        "original_header": "Output",
        "type": "Text_excerpt",
        "value": "The obtained posterior samples are stored in the variable pickled in the file **samples.p**; the pickled variable is obtained using the *extract* method of the obtained *StanFit* instance (for more details, please see http://pystan.readthedocs.io/en/latest/api.html). \nMost of the users are interested in posterior samples of methylation levels \n * **theta** for noncontrol cytosines and\n * **theta_control** for control cytosines\n \nand posterior samples of the experimental parameters \n * **bsEff** for bisulphite conversion efficiency,\n * **bsBEff** for inaccurate bisulphite conversion efficiency,\n * **oxEff** for oxidation efficiency, and\n * **seqErr** for sequencing error probability. \nFor instance, the posterior mean estimate of **oxEff** can be obtained as \nTo study the effects of covariates, one can inspect the coefficient matrix **B**. For instance, we can assess differential methylation by studying **B** as described in the next section.\n \n"
      },
      "source": "https://raw.githubusercontent.com/tare/LuxGLM/master/LuxRep/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9362113246697171,
      "result": {
        "original_header": "Estimation of Bayes factors using Savage-Dickey density ratio",
        "type": "Text_excerpt",
        "value": "Savage-Dickey density ratio is implemented by the *savagedickey* routine in **lux_routines.py**. \nTo demonstrate this let us consider a simple example of two conditions and six samples (three for each condition).\nIn this case, the design matrix input file would contain (assuming that the first three samples would correspond to the first condition)\n>1\\t0<br>\n>1\\t0<br>\n>1\\t0<br>\n>0\\t1<br>\n>0\\t1<br>\n>0\\t1 \nTo assess whether the methylation status differs between the two conditions, we should study the estimated coefficient matrix **B**.\nIn more detail, we can call the *savagedickey* routine to compare the coefficients of the first and second covariates (remember that Y=DB and \u03b8=softmax(Y)) \n"
      },
      "source": "https://raw.githubusercontent.com/tare/LuxGLM/master/LuxRep/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "http://pystan.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/tare/LuxGLM/master/LuxRep/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/tare/LuxGLM/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/tare/LuxGLM/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "tare/LuxGLM"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "LuxGLM: a probabilistic covariate model for quantification of DNA methylation modifications with complex experimental designs"
      },
      "source": "https://raw.githubusercontent.com/tare/LuxGLM/master/LuxRep/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "LuxGLM: a probabilistic covariate model for quantification of DNA methylation modifications with complex experimental designs"
        ],
        "type": "Text_excerpt",
        "value": "To use our LuxGLM interface, one has to have PyStan installed. For instructions on installation of **PyStan**, please see the documentation of **PyStan** at http://pystan.readthedocs.io/en/latest/index.html.\n\nIn addition to the Python interface, LuxGLM can be used through other available **Stan** interfaces (see http://mc-stan.org/interfaces/ for a list of available interfaces). Please take into account that we only provide a Python interface for preparing the necessary inputs variables; that is, if **RStan** or other interface is used, then the user has to write approriate routines for parsing input variables from data files.\n"
      },
      "source": "https://raw.githubusercontent.com/tare/LuxGLM/master/LuxRep/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999358165160134,
      "result": {
        "original_header": "Using LuxGLM",
        "type": "Text_excerpt",
        "value": "    $ python luxglm.py -c control_data.txt -p control_prior.txt -d data.txt -m design_matrix.txt -o samples.p \n"
      },
      "source": "https://raw.githubusercontent.com/tare/LuxGLM/master/LuxRep/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8492201566521369,
      "result": {
        "original_header": "Noncontrol cytosines",
        "type": "Text_excerpt",
        "value": "The order of the samples (i.e. rows) in **design_matrix.txt** should match with the order of blocks in **control_data.txt** and **data.txt**. \n \n"
      },
      "source": "https://raw.githubusercontent.com/tare/LuxGLM/master/LuxRep/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8152918394110589,
      "result": {
        "original_header": "Output",
        "type": "Text_excerpt",
        "value": "The obtained posterior samples are stored in the variable pickled in the file **samples.p**; the pickled variable is obtained using the *extract* method of the obtained *StanFit* instance (for more details, please see http://pystan.readthedocs.io/en/latest/api.html). \n"
      },
      "source": "https://raw.githubusercontent.com/tare/LuxGLM/master/LuxRep/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8932937307823154,
      "result": {
        "original_header": "Using LuxGLM",
        "type": "Text_excerpt",
        "value": "    usage: luxglm.py [-h] -c CONTROL_DATA -p CONTROL_PRIOR -d DATA_FILE -m DESIGN_FILE [-v] \n     optional arguments:\n     -h, --help                                       show this help message and exit\n     -c CONTROL_DATA, --control_data CONTROL_DATA     file containing control cytosine data\n     -p CONTROL_PRIOR, --control_prior CONTROL_PRIOR  file containing prior knowledge on control cytosines\n     -d DATA_FILE, --data DATA_FILE                   file containing cytosine data\n     -m DESIGN_FILE, --design_matrix DESIGN_FILE      file containing design matrix\n     -o OUTPUT_FILE, --output OUTPUT_FILE             file for storing samples\n     -v, --version                                    show program's version number and exit \n    $ python luxglm.py -c control_data.txt -p control_prior.txt -d data.txt -m design_matrix.txt -o samples.p \n"
      },
      "source": "https://raw.githubusercontent.com/tare/LuxGLM/master/LuxRep/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.845195282210368,
      "result": {
        "original_header": "Output",
        "type": "Text_excerpt",
        "value": "    >>> print samples['oxEff'].mean(0) \n"
      },
      "source": "https://raw.githubusercontent.com/tare/LuxGLM/master/LuxRep/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9023194005217419,
      "result": {
        "original_header": "Estimation of Bayes factors using Savage-Dickey density ratio",
        "type": "Text_excerpt",
        "value": "    >>> from luxglm_routines import savagedickey\n    >>> print savagedickey(samples['B'][:,0,:],samples['B'][:,1,:]) \n"
      },
      "source": "https://raw.githubusercontent.com/tare/LuxGLM/master/LuxRep/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/tare/LuxGLM/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2018 tare\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/tare/LuxGLM/master/LuxRep/LuxRep/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "LuxGLM"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "tare"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 27220,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Stan",
        "size": 7703,
        "type": "Programming_language",
        "value": "Stan"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/tare/LuxGLM/master/LuxRep/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Prerequisites",
        "parent_header": [
          "LuxGLM: a probabilistic covariate model for quantification of DNA methylation modifications with complex experimental designs"
        ],
        "type": "Text_excerpt",
        "value": "* Python 2.7 (https://www.python.org/)\n* PyStan (http://pystan.readthedocs.org/en/latest/)\n* NumPy (http://www.numpy.org/)\n* SciPy (http://www.scipy.org/)\n"
      },
      "source": "https://raw.githubusercontent.com/tare/LuxGLM/master/LuxRep/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 00:33:08",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Examples",
        "parent_header": [
          "LuxGLM: a probabilistic covariate model for quantification of DNA methylation modifications with complex experimental designs"
        ],
        "type": "Text_excerpt",
        "value": "Two examples from the manuscript (**foxp3_time.py** and **foxp3_ra.py**) are provided. The scripts **foxp3_time.py** and **foxp3_ra.py** are modified from **luxglm<span></span>.py** to consider only subsets of our *Foxp3* data. These examples can be run as follows\n\n    $ python foxp3_time.py -c Data/control_data.txt -p Data/control_prior.txt -d Data/data.txt -m Data/design_matrix.txt\n    $ python foxp3_ra.py -c Data/control_data.txt -p Data/control_prior.txt -d Data/data.txt -m Data/design_matrix.txt\n\nPlease check **Data/control_data.txt**, **Data/control_prior.txt**, **Data/data.txt**, and **Data/design_matrix.txt** for input file examples. \n"
      },
      "source": "https://raw.githubusercontent.com/tare/LuxGLM/master/LuxRep/README.md",
      "technique": "header_analysis"
    }
  ]
}