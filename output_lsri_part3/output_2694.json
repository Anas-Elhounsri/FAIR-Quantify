{
  "application_domain": [
    {
      "confidence": 26.5,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/bittremieux/falcon"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact",
        "parent_header": [
          "*falcon*"
        ],
        "type": "Text_excerpt",
        "value": "For more information you can visit the\n[official code website](https://github.com/bittremieux/falcon) or send an email\nto <wbittremieux@health.ucsd.edu>.\n"
      },
      "source": "https://raw.githubusercontent.com/bittremieux/falcon/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-12-30T23:40:23Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-03T19:56:32Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Large-scale tandem mass spectrum clustering using fast nearest neighbor searching."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9119755062273396,
      "result": {
        "original_header": "*falcon*",
        "type": "Text_excerpt",
        "value": "The _falcon_ spectrum clustering tool uses advanced algorithmic techniques for\nhighly efficient processing of millions of MS/MS spectra. First,\nhigh-resolution spectra are binned and converted to low-dimensional vectors\nusing feature hashing. Next, the spectrum vectors are used to construct nearest\nneighbor indexes for fast similarity searching. The nearest neighbor indexes\nare used to efficiently compute a sparse pairwise distance matrix without\nhaving to exhaustively compare all spectra to each other. Finally,\ndensity-based clustering is performed to group similar spectra into clusters. \nThe software is available as open-source under the BSD license. \n"
      },
      "source": "https://raw.githubusercontent.com/bittremieux/falcon/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9133666893347142,
      "result": {
        "original_header": "Important settings",
        "type": "Text_excerpt",
        "value": "Here we provide information on the most important settings that influence the\n_falcon_ clustering performance. All settings have sensible default values\nwhich should give good results for a wide variety of datasets. \n- `precursor_tol`: The precursor mass tolerance and unit (in ppm or Dalton) to\ncompare spectra to each other.\n- `fragment_tol`: The fragment mass tolerance (in Dalton) used during spectrum\ncomparison. \n- `eps`: The maximum cosine distance between two spectra for them to be\nconsidered as neighbors of each other. This parameter crucially governs cluster\npurity (i.e. clusters contain spectra corresponding to only a single peptide).\nThe ideal value of this parameter depends on the spectral characteristics of\nyour data and optional spectrum preprocessing configured in _falcon_. Values\nbetween 0.05 and 0.15 will typically generate a pure clustering result. For\nmore aggressive clustering values up to 0.30 can be used. \nThere are several options to configure spectrum preprocessing prior to the\nclustering. The default settings are intended for clustering bottom-up\nproteomics data. When analyzing metabolomics or top-down data, these settings\nlikely need to be adjusted accordingly. \n- `min_peaks` and `min_mz_range`: Discard spectra with fewer than the specified\nnumber of peaks, or peaks spanning a smaller _m_/_z_ range between the minimum\nand maximum _m_/_z_ value. Default values are minimum 5 peaks and 250 _m_/_z_\nrange. It is recommended to reduce these values when clustering metabolomics\ndata.\n- `min_mz` and `max_mz`: The minimum and maximum peak _m_/_z_ value,\nrespectively. Peaks outside these values will be discarded. Default values are\n101 _m_/_z_ and 500 _m_/_z_, respectively.\n- `scaling`: Scale the peak intensities by their square root, logarithm, rank,\nor no scaling. Default is no scaling, with square root scaling often giving good\nresults as well. Note that the scaling method can influence the cosine threshold\n`eps`. \nThe settings for nearest neighbor indexing can be modified to tune clustering\ntime versus accuracy. Changing these settings is only recommended for advanced\nusers. \n- `n_probe`: The maximum number of lists in the inverted index to inspect\nduring querying. Inspecting fewer lists will run faster but will give slightly\nless accurate clustering results.\n- `n_neighbors` and `n_neighbors_ann`: The final number of neighbors to\nconsider for each spectrum and during nearest neighbor searching. Querying less\nneighbors will run faster but will give slightly less accurate clustering\nresults. `n_neighbors_ann` should be equal or greater than `n_neighbors`.\n- `low_dim`: The length of the low-dimensional vectors used for nearest neighbor\nsearching. Larger vectors will more accurately approximate the true cosine\ndistance, at the expense of longer nearest neighbor searching and memory\nrequirements.\n \n"
      },
      "source": "https://raw.githubusercontent.com/bittremieux/falcon/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9864949949867545,
      "result": {
        "original_header": "How does it work?",
        "type": "Text_excerpt",
        "value": "1. High-resolution MS/MS spectra are converted to low-dimensional vectors using\nfeature hashing. First, spectra are converted to sparse vectors using small\nmass bins to tightly capture their fragment masses. Next, the sparse,\nhigh-dimensional, vectors are hashed to lower-dimensional vectors by using a\nhash function (the non-cryptographic MurmurHash3 algorithm) to map the mass\nbins separately to a small number of hash bins. This feature hashing conserves\nthe cosine similarity between hashed vectors and can be used to approximate the\nsimilarity between the original spectra.\n2. Vectors are split into buckets based on the precursor _m_/_z_ of the\ncorresponding spectra to construct nearest neighbor indexes for highly\nefficient spectrum comparison. The spectrum vectors in each bucket are\npartitioned into data subspaces to create a Voronoi diagram, and all vectors\nare assigned to their nearest representative vector in an inverted index.\n3. A sparse pairwise distance matrix is computed by retrieving similarities to\nneighboring spectra using the nearest neighbor indexes. The accuracy and speed\nof similarity searching is governed by the number of neighboring cells to\nexplore during searching: exploring more cells during searching decreases the\nchance of missing a nearest neighbor in the high-dimensional space, at the\nexpense of a longer searching time.\n4. Density-based clustering using the pairwise distance matrix is performed to\nfind spectrum clusters. The DBSCAN algorithm is used to find spectra that are\nclose to each other and that form a dense data subspace, and group them into\nclusters.\n \n"
      },
      "source": "https://raw.githubusercontent.com/bittremieux/falcon/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/bittremieux/falcon/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 8
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/bittremieux/falcon/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bittremieux/falcon"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "falcon"
      },
      "source": "https://raw.githubusercontent.com/bittremieux/falcon/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "*falcon*"
        ],
        "type": "Text_excerpt",
        "value": "_falcon_ requires Python 3.8+ and is available on the Linux and OSX platforms.\n\nYou can easily install _falcon_ with pip:\n\n    pip install falcon-ms spectrum-utils==0.3.5\n"
      },
      "source": "https://raw.githubusercontent.com/bittremieux/falcon/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.935216720020101,
      "result": {
        "original_header": "Important settings",
        "type": "Text_excerpt",
        "value": "For detailed information on all available settings, run `falcon -h` or\n`falcon --help`. \n**Nearest neighbor indexing** (see below) \n"
      },
      "source": "https://raw.githubusercontent.com/bittremieux/falcon/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/bittremieux/falcon/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "clustering, mass-spectrometry, nearest-neighbor-search"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "BSD 3-Clause \"New\" or \"Revised\" License",
        "spdx_id": "BSD-3-Clause",
        "type": "License",
        "url": "https://api.github.com/licenses/bsd-3-clause",
        "value": "https://api.github.com/licenses/bsd-3-clause"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "falcon"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "bittremieux"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 84025,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bittremieux/falcon/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "bittremieux",
          "type": "User"
        },
        "date_created": "2021-06-14T23:41:16Z",
        "date_published": "2021-06-15T00:52:40Z",
        "description": "- BUGFIX: Split clusters with excessive pairwise retention time due to chaining.\r\n- BUGFIX: Correctly assign unique labels to split clusters.\r\n- BUGFIX: Memmap the cluster label array to avoid multiple memory allocations.",
        "html_url": "https://github.com/bittremieux/falcon/releases/tag/v0.1.3",
        "name": "v0.1.3",
        "release_id": 44606907,
        "tag": "v0.1.3",
        "tarball_url": "https://api.github.com/repos/bittremieux/falcon/tarball/v0.1.3",
        "type": "Release",
        "url": "https://api.github.com/repos/bittremieux/falcon/releases/44606907",
        "value": "https://api.github.com/repos/bittremieux/falcon/releases/44606907",
        "zipball_url": "https://api.github.com/repos/bittremieux/falcon/zipball/v0.1.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "bittremieux",
          "type": "User"
        },
        "date_created": "2021-05-18T16:17:06Z",
        "date_published": "2021-05-18T16:22:40Z",
        "description": "BUGFIX:\r\n\r\n- Get the version from the PyPI package name",
        "html_url": "https://github.com/bittremieux/falcon/releases/tag/v0.1.2",
        "name": "v0.1.2",
        "release_id": 43153363,
        "tag": "v0.1.2",
        "tarball_url": "https://api.github.com/repos/bittremieux/falcon/tarball/v0.1.2",
        "type": "Release",
        "url": "https://api.github.com/repos/bittremieux/falcon/releases/43153363",
        "value": "https://api.github.com/repos/bittremieux/falcon/releases/43153363",
        "zipball_url": "https://api.github.com/repos/bittremieux/falcon/zipball/v0.1.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "bittremieux",
          "type": "User"
        },
        "date_created": "2021-05-17T16:34:04Z",
        "date_published": "2021-05-17T16:35:45Z",
        "description": "BUGFIX:\r\n\r\n- Fix unconnected cluster node when finding cluster representatives\r\n\r\nFEATURE:\r\n\r\n- Install `falcon-ms` via PyPI",
        "html_url": "https://github.com/bittremieux/falcon/releases/tag/v0.1.1",
        "name": "v0.1.1",
        "release_id": 43073344,
        "tag": "v0.1.1",
        "tarball_url": "https://api.github.com/repos/bittremieux/falcon/tarball/v0.1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/bittremieux/falcon/releases/43073344",
        "value": "https://api.github.com/repos/bittremieux/falcon/releases/43073344",
        "zipball_url": "https://api.github.com/repos/bittremieux/falcon/zipball/v0.1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "bittremieux",
          "type": "User"
        },
        "date_created": "2021-04-24T19:21:12Z",
        "date_published": "2021-04-26T18:10:40Z",
        "description": "Initial release.",
        "html_url": "https://github.com/bittremieux/falcon/releases/tag/v0.1",
        "name": "v0.1",
        "release_id": 42025183,
        "tag": "v0.1",
        "tarball_url": "https://api.github.com/repos/bittremieux/falcon/tarball/v0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/bittremieux/falcon/releases/42025183",
        "value": "https://api.github.com/repos/bittremieux/falcon/releases/42025183",
        "zipball_url": "https://api.github.com/repos/bittremieux/falcon/zipball/v0.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running *falcon*",
        "parent_header": [
          "*falcon*"
        ],
        "type": "Text_excerpt",
        "value": "_falcon_ can be run from the command line, with settings specified as\ncommand-line arguments or set in an INI config file. _falcon_ takes peak files\n(in the mzML, mzXML, or MGF format) as input and exports the clustering result\nas a comma-separated file with each MS/MS spectrum and its cluster label on a\nsingle line. Representative spectra for each cluster can optionally be exported\nto an MGF file.\n\nExample _falcon_ run with some relevant command-line arguments:\n\n    falcon peak/*.mzml falcon --export_representatives --precursor_tol 20 ppm --fragment_tol 0.05 --eps 0.10\n\nThis will cluster all MS/MS spectra in mzML files in the `peak` directory with\nthe specified settings and write (i) the cluster assignments to the `falcon.csv` file, and (ii) the cluster representatives to the `falcon.mgf` file.\n"
      },
      "source": "https://raw.githubusercontent.com/bittremieux/falcon/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "requirements",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 10:00:00",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 25
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}