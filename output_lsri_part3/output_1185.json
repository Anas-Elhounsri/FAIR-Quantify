{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/InfluenceFunctional/E2EDNA"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-06-08T15:51:19Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-08-18T03:31:20Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/InfluenceFunctional/E2EDNA/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "faq": [
    {
      "confidence": 1,
      "result": {
        "original_header": "RUNNING A JOB",
        "parent_header": [
          "E2EDNA - Tinker Implementation"
        ],
        "type": "Text_excerpt",
        "value": "Before running a job, ensure installation, analyte parameterization and simulation parameters have been set.\n1. Set 'run num' in main.py to zero for a fresh run, which will create a new run directory in your workdir. If you want to pick-up on a previous run, put its number here. \n   - Using argparse, one can directly set this via command line from a submission script rather than editing main.py itself.\n2. Set simulation parameters in main.py, and select the mode to run in as params['simulation type']. 'free aptamer' runs the aptamer by itself, 'binding' runs a representative structure of the aptamer complexed with the analyte, and 'analysis' redoes reaction coordinate analysis given pre-existing trajectories.\n4. Set the DNA sequence as a FASTA string to the 'sequence' variable at the bottom of main.py.\n5. Run the code, e.g., for run_num = 0\n   ```\n   python main.py --run_num=0\n   ```\n   Inputs and outputs will go to /workdir/run0. In this directory, /outfiles contains outputs for debugging the various processes within the script.\n\n   In general, one would run first a 'free aptamer' simulation to retrieve a representaitive 3D structure and confirm the secondary structure stability. \n   Then, one would change the operating mode to 'binding' to assess aptamer-analyte binding.\n6. Simulation parameters and outputs including energy traces are saved to 'e2ednaOutputs.npy', which can be reloaded as\n   - outputs = np.load('e2ednaOutputs.npy',allow_pickle=True).item()\n"
      },
      "source": "https://raw.githubusercontent.com/InfluenceFunctional/E2EDNA/main/README.MD",
      "technique": "header_analysis"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/InfluenceFunctional/E2EDNA/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "InfluenceFunctional/E2EDNA"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "E2EDNA - Tinker Implementation"
      },
      "source": "https://raw.githubusercontent.com/InfluenceFunctional/E2EDNA/main/README.MD",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/InfluenceFunctional/E2EDNA/main/subTemplate.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "INSTALLATION",
        "parent_header": [
          "E2EDNA - Tinker Implementation"
        ],
        "type": "Text_excerpt",
        "value": "* Get the repository\n```\ngit clone git@github.com:InfluenceFunctional/e2edna.git WHAT_YOU_WANT_IT_TO_BE_CALLED\n```\n* Setup python environment with the following packages\n```\nbiopython==1.78\nmatplotlib==3.3.2\nMDAnalysis==1.0.0\nnumpy==1.19.2\npandas==1.1.3\nParmEd==3.2.0\nPillow==7.2.0\npyparsing==2.4.7\nscipy==1.4.1\nseqfold==0.7.7\n```\n* Install appropriate MacroMoleculeBuilder for your system from [SimTK here](https://simtk.org/projects/rnatoolbox) - old and new versions have been tested and seem to work\n* Install Tinker from [here](https://github.com/tinkertools) or [here](https://dasher.wustl.edu/tinker/). Tinker9 with GPU support is recommended, but somewhat more involved to install. Tinker8 binaries can be easily downloaded.\n* Create working directory where runs will take place\n* Set paths in main.py. Note, there is a toggle for running on a 'local' machine vs 'cluster', with distinct paths.\n```\n* params['minimize', 'dynamic', 'pdbxyz', 'xyzedit', 'archive'] --> all set to the Tinker executables on your system\n* params['mmb'] --> set to the MacroMoleculeBuilder executable on your system\n* params['workdir'] --> the working directory created in the previous step\n* params['analyte xyz'] --> path to the analyte structure in tinker .xyz format\n* various .key files --> parameters may be specific to your analyte if custom force-field parameters are required. Adjust keyfiles accordingly, leaving the keywords on top as-is.\n```\n\t"
      },
      "source": "https://raw.githubusercontent.com/InfluenceFunctional/E2EDNA/main/README.MD",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9972494126306626,
      "result": {
        "original_header": "E2EDNA - Tinker Implementation",
        "type": "Text_excerpt",
        "value": "* For an updated version (E2EDNA 2.0) implemented using OpenMM, please go to: https://github.com/siminegroup/E2EDNA2\n \n"
      },
      "source": "https://raw.githubusercontent.com/InfluenceFunctional/E2EDNA/main/README.MD",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/InfluenceFunctional/E2EDNA/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "E2EDNA"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "InfluenceFunctional"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Arc",
        "size": 95911,
        "type": "Programming_language",
        "value": "Arc"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 71558,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 510,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/InfluenceFunctional/E2EDNA/main/README.MD"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "RUNNING A JOB",
        "parent_header": [
          "E2EDNA - Tinker Implementation"
        ],
        "type": "Text_excerpt",
        "value": "Before running a job, ensure installation, analyte parameterization and simulation parameters have been set.\n1. Set 'run num' in main.py to zero for a fresh run, which will create a new run directory in your workdir. If you want to pick-up on a previous run, put its number here. \n   - Using argparse, one can directly set this via command line from a submission script rather than editing main.py itself.\n2. Set simulation parameters in main.py, and select the mode to run in as params['simulation type']. 'free aptamer' runs the aptamer by itself, 'binding' runs a representative structure of the aptamer complexed with the analyte, and 'analysis' redoes reaction coordinate analysis given pre-existing trajectories.\n4. Set the DNA sequence as a FASTA string to the 'sequence' variable at the bottom of main.py.\n5. Run the code, e.g., for run_num = 0\n   ```\n   python main.py --run_num=0\n   ```\n   Inputs and outputs will go to /workdir/run0. In this directory, /outfiles contains outputs for debugging the various processes within the script.\n\n   In general, one would run first a 'free aptamer' simulation to retrieve a representaitive 3D structure and confirm the secondary structure stability. \n   Then, one would change the operating mode to 'binding' to assess aptamer-analyte binding.\n6. Simulation parameters and outputs including energy traces are saved to 'e2ednaOutputs.npy', which can be reloaded as\n   - outputs = np.load('e2ednaOutputs.npy',allow_pickle=True).item()\n"
      },
      "source": "https://raw.githubusercontent.com/InfluenceFunctional/E2EDNA/main/README.MD",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "description",
    "contributors",
    "documentation",
    "license",
    "usage",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 03:56:17",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}