{
  "application_domain": [
    {
      "confidence": 12.32,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/JDMusc/READ-TV"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-10-10T18:28:44Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-09-19T14:52:25Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Description",
        "type": "Text_excerpt",
        "value": "read-tv is a shiny application and associated console interface designed\nfor visualizing changepoints in **irregularly and regularly spaced**\nlongitudinal data. Technical users can rapidly view data through the R\nconsole interface, and non-technical users can use it as a standard web\napplication. Intermediate users, as well as users who want to replicate\nplots, will benefit from the source code generation associated with any\nplot.\n\nThis application is built on top of a wide array of packages, and\nespecially wraps functionality from the\n[changepoint](https://cran.r-project.org/web/packages/changepoint/index.html)\npackage and [tidyverse](https://github.com/tidyverse) set of packages.\n\nBelow is a plot of new COVID-19 cases in the United States with detected\nchangepoints. <img src=\"tools/readme/covid_global_us.png\">\n"
      },
      "source": "https://raw.githubusercontent.com/JDMusc/read-tv/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9183131731204047,
      "result": {
        "original_header": "Launch Application",
        "type": "Text_excerpt",
        "value": "The main function is **launchReadtv**.\n``` r\nlaunchReadtv()\n```\nOr it can be launched as\n``` r\napp = readtv::launchReadtv()\nshiny::runApp(app)\n```\nBoth files and in-memory objects can be passed to **launchReadtv**\n``` r\nlibrary(dplyr)\nlibrary(magrittr)\nlibrary(readtv)\n\napp = readtv::japan_eq_3_11 %>% \n  mutate(Time = time, Event.Type = place, Case = 1) %>% #bypass popup\n  launchReadtv(plotOpts = tvOpts(y = mag, x = Time, color = place))\n\n#shiny::runApp(app) #uncomment to run application\n```\n \n  - `launchReadtv`\n      - launch the application  \n  - `tvOpts`\n      - tells the plot to load with the specified axes, colors, etc.  \n      - used with `launchReadtv`\u2019s `plotOpts` argument\n  - `preprocessForCpa`\n      - regularly spaces and smooths time series data\n      - used in the `CPA` tabs\n      - how to use visible from `Source Code` sub-tab.\n  - `slidingWindow`\n      - same sub-points as `preprocessForCpa`.  \n  - `generatePlotDefaults`\n      - user can run `generatePlotDefaults()` to view defaults for\n        `tvOpts`  \n  - `addCpaMarkersToPlot`\n      - user can add cpa markers to a gg-plot.\n      - used in the `CPA` tabs, after CPA is calculated\n      - how to use visible from `Source Code` sub-tab. \nEach of these functions has associated help documentation.\n \n"
      },
      "source": "https://raw.githubusercontent.com/JDMusc/read-tv/master/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9716302344245982,
      "result": {
        "original_header": "CPA tab",
        "type": "Text_excerpt",
        "value": "The CPA tab has features to regularly space the data (preprocess), and\nthen execute methods from the changepoints package. It spaces the data\nwith the `preprocessForCpa` function and `slidingWindow` function. \nTo avoid the column mapping pop up, we can use dplyr to specify the\ncolumns and mock values (Case) before it is passed into `launchReadtv`.\n``` r\nlibrary(dplyr, warn.conflicts = FALSE)\nlibrary(magrittr)\nlibrary(readtv)\n\napp = readtv::japan_eq_3_11 %>% \n  mutate(Time = time, Event.Type = place, Case = 1) %>% \n  launchReadtv(plotOpts = tvOpts(y = mag, x = Time, color = place))\n\n#shiny::runApp(app) # and move to CPA tab after viewing in Basic display tab\n```\n \nBelow is a screen shot from read-tv. Note that the time points are\nregularized with values interpolated through a sliding window. The\ntiming intervals were not originally evenly spaced (irregular) since it\nis earthquake event data. The CPA tab has functionality to create\nregular spacing. \n"
      },
      "source": "https://raw.githubusercontent.com/JDMusc/read-tv/master/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8791398258463401,
      "result": {
        "original_header": "Faceting",
        "type": "Text_excerpt",
        "value": "Sometimes it helps to facet and paginate the data.\n``` r\napp = readtv::covid_usa %>% \n  mutate(Time = date, Case = state, Event.Type = state) %>% \n  launchReadtv(plotOpts = \n                 tvOpts(y = cases, facetOn = state, isFacetPaginated = TRUE,\n                        facetRowsPerPage = 3))\n\n#shiny::runApp(app) #un comment to run application\n```\n \nAnd the source code can also be viewed from the app. *Please note that\nit assumes `tidyverse`, `changepoint`, `ggforce`, and `readtv` packages\nare attached*. \n"
      },
      "source": "https://raw.githubusercontent.com/JDMusc/read-tv/master/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9808661190619556,
      "result": {
        "type": "Text_excerpt",
        "value": "read-tv, Research & Exploratory Analysis Driven Time-data Visualization.\nVersion 0.1\n================ \n"
      },
      "source": "https://raw.githubusercontent.com/JDMusc/read-tv/master/README.Rmd",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/JDMusc/read-tv/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/JDMusc/READ-TV/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "JDMusc/READ-TV"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/JDMusc/read-tv/master/README.Rmd",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/JDMusc/read-tv/master/tools/readme/covid_global_us.png"
      },
      "source": "https://raw.githubusercontent.com/JDMusc/read-tv/master/README.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/JDMusc/read-tv/master/tools/readme/japan_eq_3_11.png"
      },
      "source": "https://raw.githubusercontent.com/JDMusc/read-tv/master/README.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/JDMusc/read-tv/master/tools/readme/japan_eq_popup.png"
      },
      "source": "https://raw.githubusercontent.com/JDMusc/read-tv/master/README.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/JDMusc/read-tv/master/tools/readme/japan_eq_3_11_cpa.png"
      },
      "source": "https://raw.githubusercontent.com/JDMusc/read-tv/master/README.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/JDMusc/read-tv/master/tools/readme/covid_states_facet.png"
      },
      "source": "https://raw.githubusercontent.com/JDMusc/read-tv/master/README.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/JDMusc/read-tv/master/tools/readme/covid_states_facet_src.png"
      },
      "source": "https://raw.githubusercontent.com/JDMusc/read-tv/master/README.Rmd",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Through R/R Studio",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "This software has been tested with R Version 3.6.\n\nThis package is not on CRAN. Please install from GitHub with the\n[install\\_github function from the Devtools\npackage](https://www.rdocumentation.org/packages/devtools/versions/2.3.2).\n\n``` r\n# Install devtools if not yet installed\ninstall.packages(\"devtools\")\ndevtools::install_github(\"JDMusc/READ-TV\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/JDMusc/read-tv/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Docker",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "There is also a [Docker\noption](https://github.com/JDMusc/read-tv-docker.git).\n\nPlease note that since the docker image is a light version of Ubuntu, it\nwill not run if the host machine (your local computer) is Windows.\n"
      },
      "source": "https://raw.githubusercontent.com/JDMusc/read-tv/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9786490118285501,
      "result": {
        "original_header": "Faceting",
        "type": "Text_excerpt",
        "value": "And the source code can also be viewed from the app. *Please note that\nit assumes `tidyverse`, `changepoint`, `ggforce`, and `readtv` packages\nare attached*. \n"
      },
      "source": "https://raw.githubusercontent.com/JDMusc/read-tv/master/README.Rmd",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8077916201494635,
      "result": {
        "original_header": "Launch Application",
        "type": "Text_excerpt",
        "value": "Executing the above `shiny::runApp(app)` code will generate the\nfollowing plot. The `plotOpts` argument and the `tvOpts` function tells\nthe plot to load with the specified axes, colors, etc.\n<img src=\"tools/readme/japan_eq_3_11.png\"> \n<img src=\"tools/readme/japan_eq_popup.png\"> \n"
      },
      "source": "https://raw.githubusercontent.com/JDMusc/read-tv/master/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8139867286469475,
      "result": {
        "original_header": "CPA tab",
        "type": "Text_excerpt",
        "value": "<img src=\"tools/readme/japan_eq_3_11_cpa.png\">\n \n"
      },
      "source": "https://raw.githubusercontent.com/JDMusc/read-tv/master/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8139867286469475,
      "result": {
        "original_header": "Faceting",
        "type": "Text_excerpt",
        "value": "<img src=\"tools/readme/covid_states_facet.png\"> \n<img src=\"tools/readme/covid_states_facet_src.png\">\n \n"
      },
      "source": "https://raw.githubusercontent.com/JDMusc/read-tv/master/README.Rmd",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/JDMusc/READ-TV/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "YEAR: 2020\nCOPYRIGHT HOLDER: John Del Gaizo\n"
      },
      "source": "https://raw.githubusercontent.com/JDMusc/read-tv/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "READ-TV"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "JDMusc"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "CSS",
        "size": 228307,
        "type": "Programming_language",
        "value": "CSS"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 120672,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Rebol",
        "size": 35,
        "type": "Programming_language",
        "value": "Rebol"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/JDMusc/read-tv/master/README.Rmd"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/JDMusc/read-tv/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Data requirements",
        "parent_header": [
          "More Information"
        ],
        "type": "Text_excerpt",
        "value": "A data frame or RDS/CSV/TSV file where each row is an observation. If\nthe data does not have columns for Case, Event.Type, or Time, then\nread-tv will open a pop-up that enables the user to map Case and\nEvent.Type to another column (or mock value), and map Time to a column.\n"
      },
      "source": "https://raw.githubusercontent.com/JDMusc/read-tv/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Sample Data Exports",
        "parent_header": [
          "More Information",
          "Data requirements"
        ],
        "type": "Text_excerpt",
        "value": "read-tv exports 3 data sets:  \n\\* [Global COVID data, from Our World in\nData](https://ourworldindata.org/coronavirus-source-data)  \n\\* [US state-based COVID data, from NY\nTimes](https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv)  \n\\* [USGS seismic records from Japan on\nMarch 11, 2011](https://earthquake.usgs.gov/earthquakes/map).\n"
      },
      "source": "https://raw.githubusercontent.com/JDMusc/read-tv/master/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Sample Data File",
        "parent_header": [
          "More Information",
          "Data requirements"
        ],
        "type": "Text_excerpt",
        "value": "A sample CSV data file that works with read-tv can be found\n[here](https://github.com/JDMusc/surgery-analysis/blob/master/data/events_phi_free.csv).\n"
      },
      "source": "https://raw.githubusercontent.com/JDMusc/read-tv/master/README.Rmd",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 06:49:48",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Tutorial",
        "type": "Text_excerpt",
        "value": "There is a [tutorial\nREADME](https://github.com/JDMusc/READ-TV/blob/master/tutorial_readme.md).\n"
      },
      "source": "https://raw.githubusercontent.com/JDMusc/read-tv/master/README.Rmd",
      "technique": "header_analysis"
    }
  ]
}