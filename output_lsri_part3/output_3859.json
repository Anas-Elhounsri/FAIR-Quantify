{
  "code_of_conduct": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, gender identity and expression, level of experience,\nnationality, personal appearance, race, religion, or sexual identity and\norientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\nadvances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at an.nguyen@kit.edu. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
      },
      "source": "https://raw.githubusercontent.com/complat/chem_scanner/master/CODE_OF_CONDUCT.md",
      "technique": "file_exploration"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ComPlat/chem_scanner"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contributing",
        "type": "Text_excerpt",
        "value": "Bug reports and pull requests are welcome on GitHub at https://github.com/ComPlat/chem_scanner. This project is intended to be a safe, welcoming space for collaboration, and contributors are expected to adhere to the [Contributor Covenant](http://contributor-covenant.org) code of conduct.\n"
      },
      "source": "https://raw.githubusercontent.com/complat/chem_scanner/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-10-17T08:01:15Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-12-28T07:43:48Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Extraction and re-use(ability) of  chemical information from common scientific  documents containing ChemDraw files"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "type": "Text_excerpt",
        "value": "The `ChemScanner` library attempts to extract and interpret reactions/molecules information from ChemDraw-related files format: CDX, CDXML, embedded CDX within DOC and DOCX, [Perkin Elmer ELN](http://www.perkinelmer.com/category/notebook).\n"
      },
      "source": "https://raw.githubusercontent.com/complat/chem_scanner/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9018694900346806,
      "result": {
        "original_header": "UI for ChemScanner",
        "type": "Text_excerpt",
        "value": "You can try the `ChemScanner` at https://eln.chemotion.net/ or https://eln.chemotion.net/chemscanner. The UI is more user-friendly which some additional features: \n - Export to Excel and CML.\n - Preview of the original scheme.\n - Import directly to [Chemotion ELN](https://eln.chemotion.net)\n - Add comment for each extracted scheme. These comments would also appear in the export and Chemotion ELN imported molecules/reactions.\n - ...\n \n"
      },
      "source": "https://raw.githubusercontent.com/complat/chem_scanner/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9125096526758909,
      "result": {
        "original_header": "Molecule",
        "type": "Text_excerpt",
        "value": "- Molecule class: \n```ruby\n# Canonical SMILES\nmolecule.get_cano_smiles\n# Molfile\nmolecule.get_mdl\n# RDKIT RWMol (https://www.rdkit.org/docs/cppapi/classRDKit_1_1RWMol.html)\nmolecule.rw_mol\n# Molecule label (bold text near molecule)\nmolecule.label\n# Molecule text (molecule description)\nmolecule.text\n# Molecule details (additional information from Perkin Elmer ELN)\nmolecule.details\n```\nWe are using a [ruby-binding version](https://github.com/CamAnNguyen/rdkit_chem) of `RDKit` as  a dependency of `ChemScanner`.\n \n"
      },
      "source": "https://raw.githubusercontent.com/complat/chem_scanner/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9231296885510728,
      "result": {
        "original_header": "Reaction",
        "type": "Text_excerpt",
        "value": "Reaction consist of 3 groups of molecules: `reactants`, `reagents` and `products`. Each group is and array of molecules, which each element is an object of `Molecule` class. In addition, some abbreviations belong to the reaction are represented by SMILES. Those could be access via `reagent_smiles`\n```ruby\nreaction = cdx.reactions.first\n# Access extracted structure group\nreactants = reaction.reactants\nreagents = reaction.reagents\nproducts = reaction.products\nreagent_smiles = reaction.reagent_smiles\n```\n \nFurther manipulation of each group would be similar to `Molecule` class. \nEach step has these following properties: `description`, `time`, `temperature`, and `reagents`\n \n"
      },
      "source": "https://raw.githubusercontent.com/complat/chem_scanner/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9755218456239074,
      "result": {
        "original_header": "Supported File Formats",
        "type": "Text_excerpt",
        "value": "DOC and DOCX classes are little bit different. Since DOC and DOCX file can contain more than 1 embedded ChemDraw schemes, which each embedded scheme is 1 CDX scheme. \n`ChemScanner` attempts to extract all of them and put into one `Hash` map, called `cdx_map`.\n```ruby\nrequire 'chem_scanner'\n\ndoc = ChemScanner::Doc.new\ndoc.read('/path/to/doc/file')\ndoc.cdx_map.each do |key, cdx|\n  puts cdx.reactions.map(&:reaction_smiles)\nend\n\n# Access all molecules in all CDXs\ndoc.molecules.map(&:get_cano_smiles)\n# Access all reactions in all CDXs\ndoc.reactions.map(&:get_cano_smiles)\n```\nDOCX is a bit different, `ChemScanner` can extract the CDX together with its preview image within the documents.\n```ruby\nrequire 'chem_scanner'\n\ndocx = ChemScanner::Docx.new\ndocx.read('/path/to/docx/file')\ndocx.cdx_map.each do |key, cdx_info|\n  # Get the CDX scheme\n  cdx = cdx_info[:cdx]\n  puts cdx.reactions.map(&:reaction_smiles)\n  \n  # Preview images, used for ChemScanner UI\n  img_ext = cdx_info[:img_ext] # Could be '.png', '.emf'\n  img_b64 = cdx_info[:img_b64] # Base64 encoded of image\nend\n\n# Access all molecules in all CDXs\ndocx.molecules.map(&:get_cano_smiles)\n# Access all reactions in all CDXs\ndocx.reactions.map(&:get_cano_smiles)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/complat/chem_scanner/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/complat/chem_scanner/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ComPlat/chem_scanner/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ComPlat/chem_scanner"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Introduction"
      },
      "source": "https://raw.githubusercontent.com/complat/chem_scanner/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Install",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Add this line to your application's Gemfile:\n\n```ruby\ngem 'chem_scanner'\n```\n\nAnd then execute:\n\n    $ bundle\n\nOr install it yourself as:\n\n    $ gem install chem_scanner\n"
      },
      "source": "https://raw.githubusercontent.com/complat/chem_scanner/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9124658500544415,
      "result": {
        "original_header": "UI for ChemScanner",
        "type": "Text_excerpt",
        "value": "You can try the `ChemScanner` at https://eln.chemotion.net/ or https://eln.chemotion.net/chemscanner. The UI is more user-friendly which some additional features: \n"
      },
      "source": "https://raw.githubusercontent.com/complat/chem_scanner/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8388285683074135,
      "result": {
        "original_header": "Molecule",
        "type": "Text_excerpt",
        "value": "- Molecule class: \n```ruby\n# Canonical SMILES\nmolecule.get_cano_smiles\n# Molfile\nmolecule.get_mdl\n# RDKIT RWMol (https://www.rdkit.org/docs/cppapi/classRDKit_1_1RWMol.html)\nmolecule.rw_mol\n# Molecule label (bold text near molecule)\nmolecule.label\n# Molecule text (molecule description)\nmolecule.text\n# Molecule details (additional information from Perkin Elmer ELN)\nmolecule.details\n```\nWe are using a [ruby-binding version](https://github.com/CamAnNguyen/rdkit_chem) of `RDKit` as  a dependency of `ChemScanner`.\n \n"
      },
      "source": "https://raw.githubusercontent.com/complat/chem_scanner/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999838612021712,
      "result": {
        "original_header": "Reaction",
        "type": "Text_excerpt",
        "value": "Some multi-step reactions can also be recognized. If a reaction is a multi-step reaction, the \"steps\" could be accessed via:\n```ruby\n# Get first scanned reaction\nreaction = cdx.reactions.first\n# Access first step\nstep = reaction.steps.first\nstep.number # Should be 1 \nstep.description\nstep.time\nstep.temperature\n# List reagents SMILES\nstep.reagents\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/complat/chem_scanner/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999999986369943,
      "result": {
        "original_header": "Development",
        "type": "Text_excerpt",
        "value": "After checking out the repo, run `bin/setup` to install dependencies. Then, run `rake spec` to run the tests. You can also run `bin/console` for an interactive prompt that will allow you to experiment. \nTo install this gem onto your local machine, run `bundle exec rake install`. To release a new version, update the version number in `version.rb`, and then run `bundle exec rake release`, which will create a git tag for the version, push git commits and tags, and push the `.gem` file to [rubygems.org](https://rubygems.org).\n \n"
      },
      "source": "https://raw.githubusercontent.com/complat/chem_scanner/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ComPlat/chem_scanner/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "GNU Affero General Public License v3.0",
        "spdx_id": "AGPL-3.0",
        "type": "License",
        "url": "https://api.github.com/licenses/agpl-3.0",
        "value": "https://api.github.com/licenses/agpl-3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "type": "Text_excerpt",
        "value": "The gem is available as open source under the terms of the [GNU AGPLv3 License](https://www.gnu.org/licenses/agpl-3.0.en.html).\n"
      },
      "source": "https://raw.githubusercontent.com/complat/chem_scanner/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "chem_scanner"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "ComPlat"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Ruby",
        "size": 196832,
        "type": "Programming_language",
        "value": "Ruby"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 131,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/complat/chem_scanner/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Prerequisites",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "The gem is using [rdkit_chem](https://github.com/CamAnNguyen/rdkit_chem) gem, therefore it requires dependencies of [rdkit_chem](https://github.com/CamAnNguyen/rdkit_chem) gem\n  * cmake 3.8 or later\n  * curl\n  * tar, sed, make (those should be present anyway)\n  * SWIG 2 or later\n  * python header (`python-dev`)\n  * sqlite (`sqlite3-dev`)\n  * boost > 1.58 (`libboost-all-dev`)\n  * gcc -  **no later than 9.3.0, current code does not work with gcc-10**\n"
      },
      "source": "https://raw.githubusercontent.com/complat/chem_scanner/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 14:21:29",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 17
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "type": "Text_excerpt",
        "value": "To scan/extract a single CDX file\n\n```ruby\nrequire 'chem_scanner'\n\ncdx = ChemScanner::Cdx.new\ncdx.read('/path/to/cdx/file')\n# Get array of scanned Canonical SMILES\ncdx.molecules.map(&:get_cano_smiles)\n# Get array of scanned Reactions in SMILES\ncdx.reactions.map(&:reaction_smiles)\n```\nThere are 5 classes correspond to 5 supported file formats: CDX, CDXML, DOC, DOCX, PerkinELN.\n"
      },
      "source": "https://raw.githubusercontent.com/complat/chem_scanner/master/README.md",
      "technique": "header_analysis"
    }
  ]
}