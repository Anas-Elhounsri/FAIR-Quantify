{
  "acknowledgement": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Acknowledgements",
        "type": "Text_excerpt",
        "value": "This work is supported by NIH grant [R01 HG006855](http://grantome.com/grant/NIH/R01-HG006855), NIH grant [R01 MH104964](http://grantome.com/grant/NIH/R01-MH104964), NIH grant [R01MH123451](http://grantome.com/grant/NIH/R01-MH123451), US Department of Defense Breast Cancer Research Breakthrough Award W81XWH-16-1-0316 (project BC151244), and the Stanley Center for Psychiatric Research. This work would have not been possible without the efforts of Heng Li <lh3@sanger.ac.uk>, Petr Danecek <pd3@sanger.ac.uk>, John Marshall <jm18@sanger.ac.uk>, James Bonfield <jkb@sanger.ac.uk>, and Shane McCarthy <sm15@sanger.ac.uk> for writing HTSlib and BCFtools, Po-Ru Loh <poruloh@broadinstitute.org> for writing the Eagle phasing software, Olivier Delaneau <olivier.delaneau@gmail.com> for writing the SHAPEIT5 phasing software, and Simone Rubinacci <rubinacci.simone@gmail.com> for writing the IMPUTE5 imputation software\n"
      },
      "source": "https://raw.githubusercontent.com/freeseek/mocha/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/freeseek/mocha"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2016-02-02T15:10:23Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-27T21:10:00Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MOsaic CHromosomal Alterations (MoChA) caller"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9262554346250548,
      "result": {
        "original_header": "Phase genotypes",
        "type": "Text_excerpt",
        "value": "Phase VCF file by chromosome with SHAPEIT5\n```\nfor chr in {1..22} X; do\n  bcftools index --force $dir/$pfx.chr$chr.bcf\n  zcat $map | sed 's/^23/X/' | awk -v chr=$chr '$1==chr {print $2,$3,$4}' > $dir/genetic_map.chr$chr.txt\n  phase_common \\\n    --thread $thr \\\n    --input $dir/$pfx.chr$chr.bcf \\\n    --reference $panel_pfx${chr}$panel_sfx.bcf \\\n    --map $dir/genetic_map.chr$chr.txt \\\n    --region chr$chr \\\n    --output $dir/$pfx.chr$chr.pgt.bcf\ndone\n```\nIf you are using GRCh37 rather than GRCh38, use `--region $chr` instead. If pedigree information with duos or trios is available, you can improve the phased haplotypes with option `--pedigree`. If you are phasing genotypes from WGS data, you will also have to use the [phase_rare](http://odelaneau.github.io/shapeit5/docs/documentation/phase_rare) command \nEagle's [memory requirements](http://data.broadinstitute.org/alkesgroup/Eagle/#x1-100003.2) will depend on the number of samples in the target (Nt) and in the reference panel (Nr=2504), and the number of variants (M) in the largest contig, and will amount to 1.5(Nt+Nr)M bytes. The [running time](http://data.broadinstitute.org/alkesgroup/Eagle/#x1-110003.3) will be \\~1 minute of CPU time per genome for [reference-based phasing](http://www.nature.com/articles/ng.3679#Sec18) with a small target and reference panel (see Supplementary Tables 2,3) and \\~5 minutes of CPU time per genome for [non-reference-based phasing](http://www.nature.com/articles/ng.3679#Sec18) with a large cohort (see Supplementary Tables 7,8). Also, by default, if the option --pbwtIters is not used, Eagle will perform one phasing iteration if Nt<Nr/2=1252, two if 1252=Nr/2<Nt<2Nr=5008, and three if 5008=2Nr<Nt and in the second and third iterations both target and reference panel haplotypes will be used as references for phasing (see [here](http://www.nature.com/articles/ng.3679#Sec10)) \nNotice that you can also use alternative phasing methods that might be more effective, such as using [HRC](http://www.haplotype-reference-consortium.org/) (use the Sanger Imputation Service, as the Michigan Imputations Server does not work with binary VCFs, does not work with VCFs with multiple chromosomes, does not work with chromosome X, and has no option for phasing without imputation). This might provide better phasing and therefore better ability to detect large events at lower cell fractions. Notice also that phasing can also be performed across overlapping windows rather than entire chromosomes to achieve better parallelization which can then be ligated together using either `bcftools concat --ligate` or `ligate` from SHAPEIT5 (but make sure you are avoiding version 5.1.1 or older as the corresponding ligation step is broken and only [fixed](http://github.com/odelaneau/shapeit5/commit/f942990d9906edb0f8a5bf10d34db3af7c707a02) in later versions) \n"
      },
      "source": "https://raw.githubusercontent.com/freeseek/mocha/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9749238157796768,
      "result": {
        "original_header": "Call chromosomal alterations",
        "type": "Text_excerpt",
        "value": "Preparation steps\n```\npfx=\"...\" # output prefix\ntsv=\"...\" # file with sample statistics (sample_id, computed_gender, call_rate)\nlst=\"...\" # file with list of samples to analyze for asymmetries (e.g. samples with 1p CN-LOH)\ncnp=\"...\" # file with list of regions to genotype in BED format\nmhc_reg=\"...\" # MHC region to skip\nkir_reg=\"...\" # KIR region to skip\n``` \nCall mosaic chromosomal alterations with MoChA\n```\nbcftools +mocha \\\n  --genome $assembly \\\n  --input-stats $tsv \\\n  --no-version \\\n  --output $dir/$pfx.as.bcf \\\n  --output-type b \\\n  --variants ^$dir/$pfx.xcl.bcf \\\n  --calls $dir/$pfx.calls.tsv \\\n  --stats $dir/$pfx.stats.tsv \\\n  --ucsc-bed $dir/$pfx.ucsc.bed \\\n  --write-index \\\n  --cnp $cnp \\\n  --mhc $mhc_reg \\\n  --kir $kir_reg \\\n  $dir/$pfx.bcf\n```\nNotice that MoChA will read input computed gender and call rate with the `--input-stats` option if provided, otherwise these will be estimated from the VCF. MoChA requires a balanced ratio of males and females to correctly infer gender so if this is not the case, we advise to input the gender with the `--input-stats` option. This option requires a file with columns `sample_id` and `computed_gender`, with the latter being encoded as `M` for male, `F` for female, and `U` for unknown (optionally `K` for Klinefelter). For array data these statistics are usually available from the output of the Illumina\\'s GenCall or Affymetrix\\'s Axiom genotyping algorithms. MoChA should not be run on single chromosome VCFs as median statistics across the autosomes are used to calibrate the likelihoods \nThe genome statistics file contains information for each sample analyzed in the VCF and it includes the following columns\n```\n            sample_id - sample ID\n      computed_gender - estimated sample gender from X nonPAR region (not heterozygous sites count)\n            call_rate - estimated genotype calling rate\n           XXX_median - median LRR or sequencing coverage across autosomes\n               XXX_sd - standard deviation for LRR or sequencing coverage\n             XXX_auto - auto correlation across consecutive sites for LRR or sequencing coverage (after GC correction)\n          baf_sd/_cor - BAF standard deviation or beta-binomial overdispersion for read counts\n             baf_conc - BAF phase concordance across phased heterozygous sites (see Vattathil et al. 2012)\n             baf_auto - phased BAF auto correlation across consecutive phased heterozygous sites\n              n_sites - number of sites across the genome for model based on LRR and BAF\n               n_hets - number of heterozygous sites across the genome for model based on BAF and genotype phase\n      x_nonpar_n_hets - number of heterozygous sites in the X nonPAR region\n          par1_n_hets - number of heterozygous sites in the PAR1 region\n           xtr_n_hets - number of heterozygous sites in the XTR region\n          par2_n_hets - number of heterozygous sites in the PAR2 region\nx_nonpar_baf_sd/_corr - BAF standard deviation or beta-binomial overdispersion for read counts in the X nonPAR region\n  x_nonpar_XXX_median - median LRR or sequencing coverage over the X nonPAR region\n  y_nonpar_XXX_median - median LRR or sequencing coverage over the Y nonPAR region\n        mt_XXX_median - median LRR or sequencing coverage over the mitochondrial genome\n       lrr_gc_rel_ess - LRR or sequencing coverage explained sum of squares fraction using local GC content\n             lrr_gc_X - coefficient X for polynomial in GC content fitting LRR estimates\n``` \nThe mosaic calls file contains information about each mosaic and germline chromosomal alteration called and it includes the following columns\n```\n      sample_id - sample ID\ncomputed_gender - inferred sample gender\n          chrom - chromosome\n     beg_XXXXXX - beginning base pair position for the call (according to XXXXXX genome reference)\n     end_XXXXXX - end base pair position for the call (according to XXXXXX genome reference)\n         length - base pair length of the call\n          p_arm - whether or not the call extends to the small arm (Y/N) and whether it reaches the telomere (T) or just the centromere (C)\n          q_arm - whether or not the call extends to the long arm (Y/N) and whether it reaches the telomere (T) or just the centromere (C)\n        n_sites - number of sites used for the call\n         n_hets - number of heterozygous sites used for the call\n       n50_hets - N50 value for consecutive heterozygous sites distances\n           bdev - BAF deviation estimate from 0.5\n        bdev_se - standard deviation estimate for BAF deviation\n        rel_cov - relative coverage estimate from LRR or sequencing coverage\n     rel_cov_se - standard deviation estimate for relative coverage\n    lod_lrr_baf - LOD score for model based on LRR and BAF\n  lod_baf_phase - LOD score for model based on BAF and genotype phase\n        n_flips - number of phase flips for calls based on BAF and genotype phase model (-1 if LRR and BAF model used)\n       baf_conc - BAF phase concordance across phased heterozygous sites underlying the call (see Vattathil et al. 2012)\n   lod_baf_conc - LOD score for model based on BAF phase concordance (genome-wide corrected)\n           type - Type of call based on LRR / relative coverage\n             cf - estimated cell fraction based on bdev and type, or rel_cov and type if either bdev or bdev_se are missing\n```\nNotice that the cell fraction is computed as either `2 bdev` for CN-LOH events or using the formulas `| 1/cn - 1/2 | = bdev` with `cn` the copy number and `cf = | 2 - cn |` for gains and losses. If the type of event cannot be determined, it will be determined as `4 bdev` if `bdev < 0.05` otherwise it will not be estimated. The `rel_cov` statistic is estimated as `2 x 2 ^ (LRR / LRR-hap2dip)` with `LRR-hap2dip = 0.45` by default. Notice also that the two most common events, mosaic loss of Y (mLOY or LOY) and mosaic loss of X (mLOX or LOX), are always called as X chromosome events as mLOY is identified through an imbalance in the PAR1 region that is by default mapped to the X chromosome. Furthermore, LRR measurement on the X chromosome are typically very noisy and therefore inference of event type, whether gain, loss, or CN-LOH, for X chromosome events at low cell fraction should not be relied upon. For events inferred to be mLOY and mLOX events, we advise to estimate the cell fraction using the formula for losses: `cf = 4 bdev / (1 + 2 bdev)` \nFor array data, MoChA's memory requirements will depend on the number of samples (N) and the number of variants (M) in the largest contig and will amount to at most 18NM bytes. For example, if you are running 4,000 samples and chromosome 1 has \\~80K variants, you will need approximately 2-3GB to run MoChA. It will take \\~1/3 second of CPU time per genome to process samples genotyped on the Illumina GSA DNA microarray. For whole genome sequence data, MoChA's memory requirements will depend on the number of samples (N), the `--min-dist` parameter (D, 400 by default) and the length of the longest contig (L) and will amount to at most 18NL/D, but could be significantly less, depending on how many variants you have in the VCF. If you are running 1,000 samples with default parameter `--min-dist 400` and chromosome 1 is \\~250Mbp long, you might need up to 5-6GB to run MoChA. For whole genome sequence data there is no need to batch too many samples together, as batching will not affect the calls made by MoChA (it will for array data unless you use options `--adjust-BAF-LRR -1` and `--regress-BAF-LRR -1`). Notice that the CPU requirements for MoChA will be negligible compared to the CPU requirements for phasing with Eagle\n \n"
      },
      "source": "https://raw.githubusercontent.com/freeseek/mocha/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9818014911236634,
      "result": {
        "original_header": "Filter callset",
        "type": "Text_excerpt",
        "value": "Depending on your application, you might want to filter the calls from MoChA. For example, the following code\n```\nawk -F \"\\t\" 'NR==FNR && FNR==1 {for (i=1; i<=NF; i++) f[$i] = i}\n  NR==FNR && FNR>1 && ($(f[\"call_rate\"])<.97 || $(f[\"baf_auto\"])>.03) {xcl[$(f[\"sample_id\"])]++}\n  NR>FNR && FNR==1 {for (i=1; i<=NF; i++) g[$i] = i; print}\n  NR>FNR && FNR>1 {gender=$(g[\"computed_gender\"]); len=$(g[\"length\"]); bdev=$(g[\"bdev\"]);\n  rel_cov=$(g[\"rel_cov\"]); lod_baf_phase=$(g[\"lod_baf_phase\"]); lod_baf_conc=$(g[\"lod_baf_conc\"])}\n  NR>FNR && FNR>1 && !($(g[\"sample_id\"]) in xcl) && $(g[\"type\"])!~\"^CNP\" &&\n    ( $(g[\"chrom\"])~\"X\" && gender==\"M\" || bdev<0.1 || $(g[\"n50_hets\"])<2e5 || lod_baf_conc!=\"nan\" && lod_baf_conc>10.0 ) &&\n    ( $(g[\"bdev_se\"])!=\"nan\" || lod_baf_phase!=\"nan\" && lod_baf_phase>10.0 ) &&\n    ( rel_cov<2.1 || bdev<0.05 || len>5e5 && bdev<0.1 && rel_cov<2.5 || len>5e6 && bdev<0.15 )' \\\n  $pfx.stats.tsv $pfx.calls.tsv > $pfx.calls.filtered.tsv\nawk 'NR==FNR {x[$1\"_\"$3\"_\"$4\"_\"$5]++} NR>FNR && ($0~\"^track\" || $4\"_\"$1\"_\"$2\"_\"$3 in x)' \\\n  $pfx.calls.filtered.tsv $pfx.ucsc.bed > $pfx.ucsc.filtered.bed\n```\nwill generate a new table after removing samples with `call_rate` lower than 0.97 `baf_auto` greater than 0.03, removing calls made by the LRR and BAF model if they have less than a `lod_baf_phase` score of 10 for the model based on BAF and genotype phase, removing calls flagged as germline copy number polymorphisms (CNPs), and removing calls that are likely germline duplications similarly to how it was done in the [UK biobank](http://doi.org/10.1038/s41586-018-0321-x). Notice that different filtering thresholds are used for calls smaller than 500kbp and smaller than 5Mbp, reflecting different priors that these could be germline events. Most calls on chromosome X in male samples likely represent mosaic loss-of-Y events, as only the PAR1 regions is analyzed in male samples\n \n"
      },
      "source": "https://raw.githubusercontent.com/freeseek/mocha/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9881418058250993,
      "result": {
        "original_header": "Generate mosaic phenotypes",
        "type": "Text_excerpt",
        "value": "For additional downstream analyses, we can generate phenotypes to analyze. Generate a list of samples to exclude from association analyses\n```\nawk -F \"\\t\" 'NR==1 {for (i=1; i<=NF; i++) f[$i] = i}\n  NR>1 && ($(f[\"call_rate\"])<.97 || $(f[\"baf_auto\"])>.03) {print $(f[\"sample_id\"])}' $pfx.stats.tsv > $pfx.remove.lines\n``` \nGenerate list of samples with mosaic loss of chromosome Y (mLOY or LOY)\n```\nawk -F \"\\t\" 'NR==1 {for (i=1; i<=NF; i++) f[$i] = i} NR>1 && $(f[\"computed_gender\"])==\"M\" && $(f[\"chrom\"])~\"X\" &&\n  $(f[\"length\"])>2e6 && $(f[\"rel_cov\"])<2.5 {print $(f[\"sample_id\"])}' $pfx.calls.tsv > $pfx.Y_loss.lines\n```\nRequiring `rel_cov<2.5` should make sure to filter out XXY and XYY samples. This should generate a mLOY set similarly to how it was done in the [UK biobank](http://doi.org/10.1038/s41598-020-59963-8). Notice that this inference strategy is based on BAF imbalances over the PAR1 region which allows detection of loss-of-Y at much lower cell fractions that by using LRR statistics over the Y nonPAR region \nGenerate list of samples with mosaic loss of chromosome X (mLOX or LOX)\n```\nawk -F \"\\t\" 'NR==1 {for (i=1; i<=NF; i++) f[$i] = i}\n  NR>1 && ($(f[\"computed_gender\"])==\"F\" || $(f[\"computed_gender\"])==\"K\") && $(f[\"chrom\"])~\"X\" &&\n  $(f[\"length\"])>1e8 && $(f[\"rel_cov\"])<2.5 {print $(f[\"sample_id\"])}' $pfx.calls.tsv > $pfx.X_loss.lines\nawk -F \"\\t\" 'NR==1 {for (i=1; i<=NF; i++) f[$i] = i}\n  NR>1 && ($(f[\"computed_gender\"])==\"F\" || $(f[\"computed_gender\"])==\"K\") && $(f[\"chrom\"])~\"X\" &&\n  $(f[\"length\"])>1e8 && $(f[\"bdev\"])>.01 && $(f[\"rel_cov\"])<2.5 {print $(f[\"sample_id\"])}' $pfx.calls.tsv > $pfx.X_loss_high.lines\nawk -F \"\\t\" 'NR==1 {for (i=1; i<=NF; i++) f[$i] = i}\n  NR>1 && ($(f[\"computed_gender\"])==\"F\" || $(f[\"computed_gender\"])==\"K\") && $(f[\"chrom\"])~\"X\" &&\n  $(f[\"length\"])>1e8 && $(f[\"bdev\"])<=.01 && $(f[\"rel_cov\"])<2.5 {print $(f[\"sample_id\"])}' $pfx.calls.tsv > $pfx.X_loss_low.lines\n```\nRequiring `rel_cov<2.5` should make sure to filter out XXY and XXX samples. Notice that we do not require that the event be identified as a loss by MoChA. MoChA determines the event type based on LRR median statistics and as we have observed that the LRR on chromosome X is quite noisy, for low cell fraction chromosome X calls determinining the type of event based on LRR is not reliable. Notice that this inference strategy is based on BAF imbalances over whole chromosome X which allows detection of loss-of-X at much lower cell fractions than by using LRR statistics over the X nonPAR region \n"
      },
      "source": "https://raw.githubusercontent.com/freeseek/mocha/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9420137793945766,
      "result": {
        "original_header": "Compute allelic shift",
        "type": "Text_excerpt",
        "value": "Some mosaic chromosomal alterations have been observed to affect preferentially some haplotypes causing biased allelic shifts at several loci (MPL, FH, NBN, JAK2, FRA10B, MRE11, ATM, SH2B3, TINF2, TCL1A, DLK1, TM2D3, CTU2). This type of analysis for DNA microarray data requires information about the mosaic chromosomal alterations to be extended across imputed heterozygous genotypes and a binomial test for biased allelic shift to be performed, as has been done before (see Table 1 of [Loh et al. 2018](http://doi.org/10.1038/s41586-018-0321-x), Extended Data Table 1 of [Loh et al. 2020](http://doi.org/10.1038/s41586-020-2430-6), and Table 1 of [Terao et al. 2020](http://doi.org/10.1038/s41586-020-2426-2)) \nObserve results for asymmetry analyses in table format\n```\nfmt=\"%CHROM\\t%POS\\t%ID\\t%AS{0}\\t%AS{1}\\t%binom_AS\\n\"\nbcftools query \\\n  --include \"binom_AS<1e-6\" \\\n  --format \"$fmt\" \\\n  $dir/$pfx.as.bcf | \\\n  column -ts $'\\t'\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/freeseek/mocha/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9311481039615378,
      "result": {
        "original_header": "Plot results",
        "type": "Text_excerpt",
        "value": "If you have a table with columns with encoded age information for each sample in columns headed with `sample_id` and `age`, you can plot the prevalence of events by age\n```\nage_plot.R \\\n  --stats $dir/$pfx.stats.tsv \\\n  --calls $dir/$pfx.calls.filtered.tsv \\\n  --age $dir/$pfx.age.tsv \\\n  --pdf $dir/$pfx.pdf\n```\nPrevalences will be separatedly plot among telomeric autosomal mCAs, interstitial autosomal mCAs, mLOX, and mLOY \nPlot mosaic chromosomal alterations (for array data)\n```\nmocha_plot.R \\\n  --mocha \\\n  --stats $dir/$pfx.stats.tsv \\\n  --vcf $dir/$pfx.as.bcf \\\n  --png MH0145622.png \\\n  --samples MH0145622 \\\n  --regions 11:81098129-115077367 \\\n  --cytoband $HOME/GRCh37/cytoBand.txt.gz\n```\nNotice that by default MoChA will perform internal BAF (for array data) and LRR adjustments. These adjustments will be computed by the plotter unless you use the option `--no-adjust` \n![](MH0145622.png)\nMosaic deletion from array data overlapping the ATM gene (GRCh37 coordinates). The deletion signal can be observed across LRR, BAF and phased BAF, although it is the most clear with the latter. Furthermore, evidence of three phase switch errors can be observed in the shifted phased BAF signal \nPlot mosaic chromosomal alterations (for WGS data)\n```\nmocha_plot.R \\\n  --wgs \\\n  --mocha \\\n  --stats $dir/$pfx.stats.tsv\n  --vcf $dir/$pfx.as.bcf \\\n  --png CSES15_P26_140611.png \\\n  --samples CSES15_P26_140611 \\\n  --regions 1:202236354-211793505 \\\n  --cytoband $HOME/GRCh37/cytoBand.txt.gz\n``` \n![](CSES15_P26_140611.png)\nComplex duplication overlapping the MDM4 gene (GRCh37 coordinates). Signal over heterozygous sites colored in blue shows evidence of a triplication event and signal over heterozygous sites colored in red shows evidence of a duplication event. Multiple phase switch errors can be observed in the shifted phased BAF signal\n \n"
      },
      "source": "https://raw.githubusercontent.com/freeseek/mocha/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.986682954232343,
      "result": {
        "original_header": "HMM parameters",
        "type": "Text_excerpt",
        "value": "MoChA has a complicated list of parameters that it uses to assign likelihoods and transition probabilities:\n- [xy-major-pl] transition phred-scaled likelihood where the non-alternate state is towards the centromere\n- [xy-minor-pl] transition phred-scaled likelihood where the non-alternate state is away from the centromere\n- [auto-tel-pl] autosomal telomeres phred-scaled likelihood used to provide a prior for aneuploidy and CN-LOH events reaching the telomere\n- [chrX-tel-pl] chromosome X telomeres phred-scaled likelihood used to provide a prior for mLOX events\n- [chrY-tel-pl] chromosome Y telomeres phred-scaled likelihood used to provide a prior for mLOY events\n- [error-pl] uniform error phred-scaled likelihood used to maximize the amount of evidence a single site can provide in favor of an event\n- [flip-pl] phase flip phred-scaled likelihood used to allow flip between equivalent alternative states corresponding to different phases \nThe internal HMM used by MoChA is completely symmetrical, but it internally uses two separate transition likelihoods to alternate states, one when transitioning towards an alternate state away from the centromere and one towards the centromere. This allows to include a lower prior for events that span the centromere, with the exception of events that span a whole chromosome, such as mLOX and mLOY. Notice that these priors will only make a difference for events at very low cell fraction, so they should not be relevant if a study is only interested in high cell fraction events \nThere are a few differences between MoChA and the HMM model used in [Loh et al. 2018](http://doi.org/10.1038/s41586-018-0321-x), [Thompson et al. 2019](http://doi.org/10.1038/s41598-020-59963-8), [Loh et al. 2020](http://doi.org/10.1038/s41586-020-2430-6), and [Terao et al. 2020](http://doi.org/10.1038/s41586-020-2426-2). The most important is that, the latter model used a likelihood ratio test statistic with likelihoods deriving from a 3-state forward-backward HMM model. MoChA instead uses a Viterbi HMM model with multiple alternate states and it increases the number of alternate states dynamically when trying to assess multiple calls. While MoChA's HMM transition probabilities are symmetrical with respect to centromeres, the HMM in Loh et al. use non-symmetrical transitions and different likelihoods for other parameters:\n- transition likelihood to the diploid state was 0.0003 (PL\\~35.2) on the autosome and 0.0001 (PL=40.0) on chromosome X\n- transition likelihood to an alternative state was 0.004 (PL\\~24.0) on the autosome and 0.08 (PL\\~11.0) on chromosome X\n- no penalty for telomeres likelihood (PL=0.0) except for acrocentric chromosomes where the penalty was 0.2 (PL\\~7.0)\n- flip error probability was 0.001 (PL=30.0)\nAnother difference is that MoChA performs a BAF correction by regressing BAF values against LRR values (similarly to what done in [Oosting et al\\. 2007](http://doi.org/10.1101/gr.5686107), [Staaf et al\\. 2008](http://doi.org/10.1186/1471-2105-9-409), and [Mayrhofer et al\\. 2016](http://doi.org/10.1038/srep36158)). A similar correction was separately performed in [Terao et al. 2020](http://doi.org/10.1038/s41586-020-2426-2)\n \n"
      },
      "source": "https://raw.githubusercontent.com/freeseek/mocha/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9830919178171855,
      "result": {
        "type": "Text_excerpt",
        "value": "A BCFtools extension to call mosaic chromosomal alterations starting from phased VCF files with either B Allele Frequency (BAF) and Log R Ratio (LRR) or allelic depth (AD). If you use this tool in your publication, please cite the following papers from  and \n```\nLoh P., Genovese G., McCarroll S., Price A. et al. Insights about clonal expansions from 8,342 mosaic\nchromosomal alterations. Nature 559, 350\u2013355 (2018). [PMID: 29995854] [DOI: 10.1038/s41586-018-0321-x]\n\nLoh P., Genovese G., McCarroll S., Monogenic and polygenic inheritance become\ninstruments for clonal selection (2020). [PMID: 32581363] [DOI: 10.1038/s41586-020-2430-6]\n```\nand this website. For any feedback or questions, contact the  \nWARNING: MoChA will not yield useful results for VCFs from whole exome sequencing data as MoChA does not model the reference allele bias in these assays. Furthermore, whole exome sequencing does not include enough heterozygous sites to allow for detection of mosaic chromosomal alterations at low cell fractions. Similarly, low coverage whole genome sequencing will not provide a sufficient sampling of molecules to detect mosaic chromosomal alterations at low cell fractions, even in the unlikely ideal scenario of most heterozygous sites correctly genotyped and phased \n"
      },
      "source": "https://raw.githubusercontent.com/freeseek/mocha/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Download resources for GRCh37",
        "type": "Text_excerpt",
        "value": "You can find the required GRCh37 resources [here](http://software.broadinstitute.org/software/mocha) or you can generate them as follows\n\nHuman genome reference\n```\nwget -O- ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/technical/reference/human_g1k_v37.fasta.gz | \\\n  gzip -d > $HOME/GRCh37/human_g1k_v37.fasta\nsamtools faidx $HOME/GRCh37/human_g1k_v37.fasta\n```\n\nGenetic map\n```\nwget -P $HOME/GRCh37 http://data.broadinstitute.org/alkesgroup/Eagle/downloads/tables/genetic_map_hg19_withX.txt.gz\n```\n\n1000 Genomes project low coverage phase 3\n```\ncd $HOME/GRCh37\nwget ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/ALL.chr{{1..22}.phase3_shapeit2_mvncall_integrated_v5b,X.phase3_shapeit2_mvncall_integrated_v1c,Y.phase3_integrated_v2b}.20130502.genotypes.vcf.gz{,.tbi}\nfor chr in {1..22} X Y; do\n  bcftools view --no-version -Ou -c 2 ALL.chr${chr}.phase3*integrated_v[125][bc].20130502.genotypes.vcf.gz | \\\n  bcftools annotate --no-version -Ou -x ID,QUAL,FILTER,^INFO/AC,^INFO/AN,INFO/END,^FMT/GT | \\\n  bcftools norm --no-version -Ou -m -any | \\\n  bcftools norm --no-version -Ou -d none -f $HOME/GRCh37/human_g1k_v37.fasta | \\\n  bcftools sort -o ALL.chr${chr}.phase3_integrated.20130502.genotypes.bcf -Ob -T ./bcftools. --write-index\ndone\n```\n\nSites only VCF\n```\nbcftools concat --no-version -Ou ALL.chr{{1..22},X}.phase3_integrated.20130502.genotypes.bcf | \\\n  bcftools view --no-version -G -Ob -o ALL.phase3_integrated.20130502.sites.bcf --write-index\n```\n\nList of common germline duplications and deletions\n```\nwget -P $HOME/GRCh37 ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/phase3/integrated_sv_map/ALL.wgs.mergedSV.v8.20130502.svs.genotypes.vcf.gz{,.tbi}\nbcftools query -i 'AC>1 && END-POS+1>10000 && SVTYPE!=\"INDEL\" && (SVTYPE==\"CNV\" || SVTYPE==\"DEL\" || SVTYPE==\"DUP\")' \\\n  -f \"%CHROM\\t%POS0\\t%END\\t%SVTYPE\\n\" $HOME/GRCh37/ALL.wgs.mergedSV.v8.20130502.svs.genotypes.vcf.gz > $HOME/GRCh37/cnps.bed\n```\n\nMinimal divergence intervals from segmental duplications (make sure your bedtools version is 2.27 or newer)\n```\nwget -O- http://hgdownload.cse.ucsc.edu/goldenPath/hg19/database/genomicSuperDups.txt.gz | gzip -d |\n  awk '!($2==\"chrX\" && $8==\"chrY\" || $2==\"chrY\" && $8==\"chrX\") {print $2\"\\t\"$3\"\\t\"$4\"\\t\"$30}' > genomicSuperDups.bed\n\nawk '{print $1,$2; print $1,$3}' genomicSuperDups.bed | \\\n  sort -k1,1 -k2,2n | uniq | \\\n  awk 'chrom==$1 {print chrom\"\\t\"pos\"\\t\"$2} {chrom=$1; pos=$2}' | \\\n  bedtools intersect -a genomicSuperDups.bed -b - | \\\n  bedtools sort | \\\n  bedtools groupby -c 4 -o min | \\\n  awk 'BEGIN {i=0; s[0]=\"+\"; s[1]=\"-\"} {if ($4!=x) i=(i+1)%2; x=$4; print $0\"\\t0\\t\"s[i]}' | \\\n  bedtools merge -s -c 4 -o distinct | \\\n  sed 's/^chr//' | grep -v gl | bgzip > $HOME/GRCh37/segdups.bed.gz && \\\n  tabix -f -p bed $HOME/GRCh37/segdups.bed.gz\n```\n\n1000 Genomes project low coverage phase 3 imputation panel for IMPUTE5\n```\ncd $HOME/GRCh37\npfx=\"ALL.chr\"\nsfx=\".phase3_integrated.20130502.genotypes\"\nfor chr in {{1..22},X}; do xcftools view --input $pfx$chr$sfx.bcf --region $chr --maf .03125 --output $pfx$chr$sfx.xcf.bcf --format sh; done\nfor chr in {1..22}; do bcftools view --no-version $pfx$chr$sfx.bcf | bref3 > $pfx$chr$sfx.bref3; done\nchr=X; bcftools +fixploidy --no-version $pfx$chr$sfx.bcf | \\\n  sed 's/0\\/0/0|0/g;s/1\\/1/1|1/g' | bref3 > $pfx$chr$sfx.bref3\n```\n\nDownload cytoband file\n```\nwget -P $HOME/GRCh37 http://hgdownload.cse.ucsc.edu/goldenPath/hg19/database/cytoBand.txt.gz\n```\n\nSetup variables\n```\nref=\"$HOME/GRCh37/human_g1k_v37.fasta\"\nmhc_reg=\"6:27486711-33448264\"\nkir_reg=\"19:54574747-55504099\"\nmap=\"$HOME/GRCh37/genetic_map_hg19_withX.txt.gz\"\npanel_pfx=\"$HOME/GRCh37/ALL.chr\"\npanel_sfx=\".phase3_integrated.20130502.genotypes\"\nassembly=\"GRCh37\"\ncnp=\"$HOME/GRCh37/cnps.bed\"\ndup=\"$HOME/GRCh37/segdups.bed.gz\"\ncyto=\"$HOME/GRCh37/cytoBand.txt.gz\"\n```\n"
      },
      "source": "https://raw.githubusercontent.com/freeseek/mocha/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Download resources for GRCh38",
        "type": "Text_excerpt",
        "value": "You can find the required GRCh38 resources [here](http://software.broadinstitute.org/software/mocha) or you can generate them as follows\n\nHuman genome reference (following the suggestion from [Heng Li](http://lh3.github.io/2017/11/13/which-human-reference-genome-to-use))\n```\nwget -O- ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/000/001/405/GCA_000001405.15_GRCh38/seqs_for_alignment_pipelines.ucsc_ids/GCA_000001405.15_GRCh38_no_alt_analysis_set.fna.gz | \\\n  gzip -d > $HOME/GRCh38/GCA_000001405.15_GRCh38_no_alt_analysis_set.fna\nsamtools faidx $HOME/GRCh38/GCA_000001405.15_GRCh38_no_alt_analysis_set.fna\n```\n\nGenetic map\n```\nwget -P $HOME/GRCh38 http://data.broadinstitute.org/alkesgroup/Eagle/downloads/tables/genetic_map_hg38_withX.txt.gz\n```\n\n1000 Genomes project high coverage\n```\ncd $HOME/GRCh38\nwget ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/data_collections/1000G_2504_high_coverage/working/20220422_3202_phased_SNV_INDEL_SV/1kGP_high_coverage_Illumina.chr{{1..22}.filtered.SNV_INDEL_SV_phased_panel,X.filtered.SNV_INDEL_SV_phased_panel.v2}.vcf.gz\nfor chr in {1..22} X; do\n  if [ $chr == \"X\" ]; then sfx=\".v2\"; else sfx=\"\"; fi\n  bcftools view --no-version -Ou -c 2 1kGP_high_coverage_Illumina.chr$chr.filtered.SNV_INDEL_SV_phased_panel$sfx.vcf.gz | \\\n  bcftools annotate --no-version -Ou -x ID,QUAL,FILTER,^INFO/AC,^INFO/AN,^INFO/END,^FMT/GT | \\\n  bcftools sort -o 1kGP_high_coverage_Illumina.chr$chr.bcf -Ob -T ./bcftools. --write-index\ndone\n```\n\nSites only VCF\n```\nbcftools concat --no-version -Ou 1kGP_high_coverage_Illumina.chr{{1..22},X}.bcf | \\\n  bcftools view --no-version -G -Ob -o 1kGP_high_coverage_Illumina.sites.bcf --write-index\n```\n\nList of common germline duplications and deletions\n```\nfor chr in {1..22} X; do\n  if [ $chr == \"X\" ]; then sfx=\".v2\"; else sfx=\"\"; fi\n  bcftools query -i 'AC>1 && END-POS+1>10000 && (SVTYPE==\"CNV\" || SVTYPE==\"DEL\" || SVTYPE==\"DUP\")' \\\n  -f \"%CHROM\\t%POS0\\t%END\\t%SVTYPE\\n\" $HOME/GRCh38/1kGP_high_coverage_Illumina.chr$chr.filtered.SNV_INDEL_SV_phased_panel$sfx.vcf.gz\ndone > $HOME/GRCh38/cnps.bed\n```\n\nMinimal divergence intervals from segmental duplications (make sure your bedtools version is 2.27 or newer)\n```\nwget -O- http://hgdownload.cse.ucsc.edu/goldenPath/hg38/database/genomicSuperDups.txt.gz | gzip -d |\n  awk '!($2==\"chrX\" && $8==\"chrY\" || $2==\"chrY\" && $8==\"chrX\") {print $2\"\\t\"$3\"\\t\"$4\"\\t\"$30}' > genomicSuperDups.bed\n\nawk '{print $1,$2; print $1,$3}' genomicSuperDups.bed | \\\n  sort -k1,1 -k2,2n | uniq | \\\n  awk 'chrom==$1 {print chrom\"\\t\"pos\"\\t\"$2} {chrom=$1; pos=$2}' | \\\n  bedtools intersect -a genomicSuperDups.bed -b - | \\\n  bedtools sort | \\\n  bedtools groupby -c 4 -o min | \\\n  awk 'BEGIN {i=0; s[0]=\"+\"; s[1]=\"-\"} {if ($4!=x) i=(i+1)%2; x=$4; print $0\"\\t0\\t\"s[i]}' | \\\n  bedtools merge -s -c 4 -o distinct | \\\n  grep -v \"GL\\|KI\" | bgzip > $HOME/GRCh38/segdups.bed.gz && \\\n  tabix -f -p bed $HOME/GRCh38/segdups.bed.gz\n```\n\n1000 Genomes project high coverage imputation panel for IMPUTE5\n```\ncd $HOME/GRCh38\npfx=\"1kGP_high_coverage_Illumina.\"\nsfx=\"\"\nfor chr in chr{{1..22},X}; do xcftools view --input $pfx$chr$sfx.bcf --region $chr --maf .03125 --output $pfx$chr$sfx.xcf.bcf --format sh; done\nfor chr in chr{1..22}; do bcftools view --no-version $pfx$chr$sfx.bcf | bref3 > $pfx$chr$sfx.bref3; done\nchr=chrX; bcftools +fixploidy --no-version $pfx$chr$sfx.bcf | \\\n  sed 's/0\\/0/0|0/g;s/1\\/1/1|1/g' | bref3 > $pfx$chr$sfx.bref3\n```\n\nDownload cytoband file\n```\nwget -P $HOME/GRCh38 http://hgdownload.cse.ucsc.edu/goldenPath/hg38/database/cytoBand.txt.gz\n```\n\nSetup variables\n```\nref=\"$HOME/GRCh38/GCA_000001405.15_GRCh38_no_alt_analysis_set.fna\"\nmhc_reg=\"chr6:27518932-33480487\"\nkir_reg=\"chr19:54071493-54992731\"\nmap=\"$HOME/GRCh38/genetic_map_hg38_withX.txt.gz\"\npanel_pfx=\"$HOME/GRCh38/1kGP_high_coverage_Illumina.chr\"\npanel_sfx=\"\"\nassembly=\"GRCh38\"\ncnp=\"$HOME/GRCh38/cnps.bed\"\ndup=\"$HOME/GRCh38/segdups.bed.gz\"\ncyto=\"$HOME/GRCh38/cytoBand.txt.gz\"\n```\n"
      },
      "source": "https://raw.githubusercontent.com/freeseek/mocha/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/freeseek/mocha/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 23
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/freeseek/mocha/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "freeseek/mocha"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Usage"
      },
      "source": "https://raw.githubusercontent.com/freeseek/mocha/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "Install basic tools (Debian/Ubuntu specific if you have admin privileges, see here for FreeBSD)\n```\nsudo apt install wget unzip git g++ zlib1g-dev samtools bedtools bcftools\n```\n\nOptionally, you can install these libraries to activate further HTSlib features\n```\nsudo apt install libbz2-dev libssl-dev liblzma-dev libgsl0-dev\n```\n\nPreparation steps\n```\nmkdir -p $HOME/bin $HOME/GRCh3{7,8} && cd /tmp\n```\n\nWe recommend compiling the source code but, wherever this is not possible, Linux x86_64 pre-compiled binaries are available for download [here](http://software.broadinstitute.org/software/mocha). However, notice that you will require BCFtools version 1.20 or newer\n\nDownload latest version of [HTSlib](http://github.com/samtools/htslib) and [BCFtools](http://github.com/samtools/bcftools) (if not downloaded already)\n```\nwget http://github.com/samtools/bcftools/releases/download/1.20/bcftools-1.20.tar.bz2\ntar xjvf bcftools-1.20.tar.bz2\n```\n\nDownload and compile plugins code (make sure you are using gcc version 5 or newer)\n```\ncd bcftools-1.20/\n/bin/rm -f plugins/{{mocha,beta_binom,genome_rules}.h,{mocha,mochatools,extendFMT}.c}\nwget -P plugins http://raw.githubusercontent.com/freeseek/mocha/master/{{mocha,beta_binom,genome_rules}.h,{mocha,mochatools,extendFMT}.c}\nmake\n/bin/cp bcftools plugins/{fill-tags,fixploidy,mocha,mochatools,extendFMT}.so $HOME/bin/\n```\n\nMake sure the directory with the plugins is available to BCFtools\n```\nexport PATH=\"$HOME/bin:$PATH\"\nexport BCFTOOLS_PLUGINS=\"$HOME/bin\"\n```\n\nInstall IMPUTE5 from [here](http://www.dropbox.com/sh/mwnceyhir8yze2j/AADbzP6QuAFPrj0Z9_I1RSmla?dl=0) and Beagle5 (optional for array data)\n```\nwget -O impute5_v1.2.0.zip http://www.dropbox.com/sh/mwnceyhir8yze2j/AABKBCgZsQqz8TlZGo7yXwx6a/impute5_v1.2.0.zip?dl=0\nunzip -ojd $HOME/bin impute5_v1.2.0.zip impute5_v1.2.0/{impute5_v1.2.0,xcftools}_static\nchmod a+x $HOME/bin/{impute5_v1.2.0,xcftools}_static\nln -s impute5_v1.2.0_static $HOME/bin/impute5\nsudo apt install beagle\n```\n"
      },
      "source": "https://raw.githubusercontent.com/freeseek/mocha/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Prepare data",
        "type": "Text_excerpt",
        "value": "Preparation steps\n```\nvcf=\"...\" # input VCF file with phased GT, LRR, and BAF\npfx=\"...\" # output prefix\nthr=\"...\" # number of threads to use\ncrt=\"...\" # tab delimited file with call rate information (first column sample ID, second column call rate)\nsex=\"...\" # tab delimited file with computed gender information (first column sample ID, second column gender: 1=male; 2=female)\nxcl=\"...\" # VCF file with additional list of variants to exclude (optional)\nped=\"...\" # pedigree file to use if parent child duos are present\ndir=\"...\" # directory where output files will be generated\nmkdir -p $dir\n```\n\nIf you want to process <b>genotype array</b> data you need a VCF file with ALLELE_A, ALLELE_B, GC, GT, BAF, and LRR information\n```\n##fileformat=VCFv4.2\n##INFO=<ID=ALLELE_A,Number=1,Type=Integer,Description=\"A allele\">\n##INFO=<ID=ALLELE_B,Number=1,Type=Integer,Description=\"B allele\">\n##INFO=<ID=GC,Number=1,Type=Float,Description=\"GC ratio content around the variant\">\n##FORMAT=<ID=GT,Number=1,Type=String,Description=\"Genotype\">\n##FORMAT=<ID=BAF,Number=1,Type=Float,Description=\"B Allele Frequency\">\n##FORMAT=<ID=LRR,Number=1,Type=Float,Description=\"Log R Ratio\">\n#CHROM\tPOS\tID\tREF\tALT\tQUAL\tFILTER\tINFO\tFORMAT\tNA12878\n1\t752566\trs3094315\tG\tA\t.\t.\tALLELE_A=1;ALLELE_B=0;GC=0.3675\tGT:BAF:LRR\t1|1:0.0111:-0.0798\n1\t776546\trs12124819\tA\tG\t.\t.\tALLELE_A=0;ALLELE_B=1;GC=0.435\tGT:BAF:LRR\t0|1:0.5441:0.4959\n1\t798959\trs11240777\tG\tA\t.\t.\tALLELE_A=1;ALLELE_B=0;GC=0.4075\tGT:BAF:LRR\t0|0:0.9712:0.2276\n1\t932457\trs1891910\tG\tA\t.\t.\tALLELE_A=1;ALLELE_B=0;GC=0.6425\tGT:BAF:LRR\t1|0:0.5460:-0.1653\n```\nMaking sure that BAF refers to the allele frequency of the reference allele if ALLELE_B=0 and of the alternate allele if ALLELE_B=1\n\nIf you do not already have a VCF file, but you have Illumina or Affymetrix genotype array data, you can use the [gtc2vcf](http://github.com/freeseek/gtc2vcf) tools to convert the data to VCF and you can use the mochatools plugin to fill the ALLELE_A/ALLELE_B/GC info fields. We discourage the use of Illumina [GTCtoVCF](http://github.com/Illumina/GTCtoVCF) or [Array Analysis CLI](http://support.illumina.com/array/array_software/ima-array-analysis-cli.html) tools to generate a compliant VCF. Alternatively you can use your own scripts\n\nCreate a minimal binary VCF\n```\nbcftools annotate --no-version -o $dir/$pfx.unphased.bcf -Ob --write-index $vcf \\\n  -x ID,QUAL,^INFO/ALLELE_A,^INFO/ALLELE_B,^INFO/AC,^INFO/GC,^FMT/GT,^FMT/BAF,^FMT/LRR\n```\n\nIf you want to process <b>whole-genome sequence</b> data you need a VCF file with GC, GT and AD information\n```\n##fileformat=VCFv4.2\n##INFO=<ID=AC,Number=A,Type=Integer,Description=\"ALT allele count\">\n##INFO=<ID=GC,Number=1,Type=Float,Description=\"GC ratio content around the variant\">\n##FORMAT=<ID=GT,Number=1,Type=String,Description=\"Genotype\">\n##FORMAT=<ID=AD,Number=R,Type=Integer,Description=\"Allelic depths for the ref and alt alleles in the order listed\">\n#CHROM\tPOS\tID\tREF\tALT\tQUAL\tFILTER\tINFO\tFORMAT\tNA12878\n1\t752566\trs3094315\tG\tA\t.\t.\tAC=2;GC=0.3675\tGT:AD\t1|1:0,31\n1\t776546\trs12124819\tA\tG\t.\t.\tAC=1;GC=0.435\tGT:AD\t0|1:21,23\n1\t798959\trs11240777\tG\tA\t.\t.\tAC=0;GC=0.4075\tGT:AD\t0|0:31,0\n1\t932457\trs1891910\tG\tA\t.\t.\tAC=1;GC=0.6425\tGT:AD\t1|0:18,14\n```\nMake sure that AD is a \"Number=R\" format field (this was introduced in version [4.2](http://samtools.github.io/hts-specs/VCFv4.2.pdf) of the VCF) or multi-allelic variants will not [split properly](http://github.com/samtools/bcftools/issues/360). If your VCF does not include the GC field, this can be added with the command\n```\nbcftools +mochatools --no-version -Ob $vcf -- -t GC -f $ref\n```\n\nCreate a minimal binary VCF (notice that you will need BCFtools version 1.11 or newer with implemented the [--keep-sum](http://github.com/samtools/bcftools/issues/360) option)\n```\nbcftools view --no-version -h $vcf | sed 's/^\\(##FORMAT=<ID=AD,Number=\\)\\./\\1R/' | \\\n  bcftools reheader -h /dev/stdin $vcf | \\\n  bcftools filter --no-version -Ou -e \"FMT/DP<10 | FMT/GQ<20\" --set-GT . | \\\n  bcftools annotate --no-version -Ou -x ID,QUAL,^INFO/GC,^FMT/GT,^FMT/AD | \\\n  bcftools norm --no-version -Ou -m -any --keep-sum AD | \\\n  bcftools norm --no-version -o $dir/$pfx.unphased.bcf -Ob -f $ref --write-index\n```\nThis will set to missing all genotypes that have low coverage or low genotyping quality, as these can cause issues\n\nGenerate a list of variants that will be excluded from modeling by both eagle and mocha (notice that you will need BCFtools version 1.11 or newer with implemented the F_MISSING option, or else you should drop that filter)\n```\nawk -F\"\\t\" '$2<.97 {print $1}' $crt > samples_xcl_list.txt; \\\necho '##INFO=<ID=JK,Number=1,Type=Float,Description=\"Jukes Cantor\">' | \\\n  bcftools annotate --no-version -Ou -a $dup -c CHROM,FROM,TO,JK -h /dev/stdin $dir/$pfx.unphased.bcf | \\\n  bcftools view --no-version -Ou -S ^samples_xcl_list.txt | \\\n  bcftools +fill-tags --no-version -Ou -t ^Y,MT,chrY,chrM -- -t ExcHet,F_MISSING | \\\n  bcftools view --no-version -Ou -G | \\\n  bcftools annotate --no-version -o $dir/$pfx.xcl.bcf -Ob --write-index \\\n    -i 'FILTER!=\".\" && FILTER!=\"PASS\" || INFO/JK<.02 || INFO/ExcHet<1e-6 || INFO/F_MISSING>1-.97' \\\n    -x ^INFO/JK,^INFO/ExcHet,^INFO/F_MISSING\n/bin/rm samples_xcl_list.txt\n```\nThis command will create a list of variants falling within segmental duplications with low divergence (<2%), high levels of missingness (>3%), variants with excess heterozygosity (p<1e-6). If you are using WGS data and you don't have a file with sex information, you can skip the quality control line using this information. When later running MoChA, sex will be imputed and a sex file can be computed from MoChA's output\n\nIf a file with additional variants to be excluded is available, further merge it with the generated list\n```\n/bin/mv $dir/$pfx.xcl.bcf $dir/$pfx.xcl.tmp.bcf && \\\n/bin/mv $dir/$pfx.xcl.bcf.csi $dir/$pfx.xcl.tmp.bcf.csi && \\\nbcftools merge --no-version -o $dir/$pfx.xcl.bcf -Ob -m none --write-index $dir/$pfx.xcl.tmp.bcf $xcl\n```\n"
      },
      "source": "https://raw.githubusercontent.com/freeseek/mocha/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9960234351710345,
      "result": {
        "original_header": "Phase genotypes",
        "type": "Text_excerpt",
        "value": "Extract genotypes and split by autosomes and chromosome X\n```\nbcftools isec --no-version -Ou --complement --exclude \"N_ALT>1\" --write 1 $dir/$pfx.unphased.bcf $dir/$pfx.xcl.bcf | \\\n  bcftools view --no-version -Ou --min-ac 0 --exclude-uncalled | \\\n  bcftools annotate --no-version -Ou --remove ID,QUAL,^INFO/AC,^FMT/GT | \\\n  bcftools +scatter --no-version -Ob --output $dir --scatter $(echo chr{{1..22},X} | tr ' ' ',') --prefix $pfx.\n```\nIf you are using GRCh37 rather than GRCh38, use `--scatter $(echo {{1..22},X} | tr ' ' ',') --prefix $pfx.chr` instead \nPhase VCF file by chromosome with SHAPEIT5\n```\nfor chr in {1..22} X; do\n  bcftools index --force $dir/$pfx.chr$chr.bcf\n  zcat $map | sed 's/^23/X/' | awk -v chr=$chr '$1==chr {print $2,$3,$4}' > $dir/genetic_map.chr$chr.txt\n  phase_common \\\n    --thread $thr \\\n    --input $dir/$pfx.chr$chr.bcf \\\n    --reference $panel_pfx${chr}$panel_sfx.bcf \\\n    --map $dir/genetic_map.chr$chr.txt \\\n    --region chr$chr \\\n    --output $dir/$pfx.chr$chr.pgt.bcf\ndone\n```\nIf you are using GRCh37 rather than GRCh38, use `--region $chr` instead. If pedigree information with duos or trios is available, you can improve the phased haplotypes with option `--pedigree`. If you are phasing genotypes from WGS data, you will also have to use the [phase_rare](http://odelaneau.github.io/shapeit5/docs/documentation/phase_rare) command \nImpute variants using impute5 (optional for array data)\n```\nfor chr in {1..22} X; do\n  zcat $map | sed 's/^23/X/' | awk -v chr=$chr '$1==chr {print chr,\".\",$4,$2}' > $dir/genetic_map.chr$chr.txt\n  impute5 \\\n    --h $panel_pfx$chr$panel_sfx.bcf \\\n    --m $dir/genetic_map.chr$chr.txt \\\n    --g $dir/$pfx.pgt.bcf \\\n    --r chr$chr \\\n    --buffer-region chr$chr \\\n    --o $dir/$pfx.chr$chr.imp.bcf \\\n    --l $dir/$pfx.chr$chr.log \\\n    --threads $thr\ndone\n```\nIf you are using GRCh37 rather than GRCh38, use `--r $chr` instead \nRemove unphased VCF and single chromosome files (optional)\n```\n/bin/rm $dir/{genetic_map.chr{{1..22},X}.txt,$pfx.{unphased.bcf{,.csi},chr{{1..22},X}.{bcf{,.csi},{pgt,imp}.bcf,log}}}\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/freeseek/mocha/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9584323738599865,
      "result": {
        "original_header": "Compute allelic shift",
        "type": "Text_excerpt",
        "value": "Run asymmetry analyses (subset cohort, run binomial test, discard genotypes)\n```\nbcftools +extendFMT \\\n  --no-version -Ou \\\n  --format AS \\\n  --phase \\\n  --dist 500000 \\\n  --regions $reg \\\n  --samples $lst \\\n  $dir/$pfx.imp.as.bcf | \\\nbcftools +mochatools \\\n  --no-version \\\n  --output $dir/$pfx.bal.bcf \\\n  --output-type b \\\n  -- --summary AS \\\n  --test AS \\\n  --drop-genotypes \\\n  --write-index\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/freeseek/mocha/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9694819759318086,
      "result": {
        "original_header": "Plot results",
        "type": "Text_excerpt",
        "value": "Install basic tools (Debian/Ubuntu specific if you have admin privileges)\n```\nsudo apt install r-cran-optparse r-cran-ggplot2 r-cran-data.table r-cran-reshape2\n``` \nDownload R scripts\n```\n/bin/rm -f $HOME/bin/{summary,pileup,mocha}_plot.R\nwget -P $HOME/bin http://raw.githubusercontent.com/freeseek/mocha/master/{summary,pileup,mocha}_plot.R\nchmod a+x $HOME/bin/{summary,pileup,mocha}_plot.R\n``` \nGenerate pileup plot\n```\npileup_plot.R \\\n  --cytoband $HOME/GRCh37/cytoBand.txt.gz \\\n  --stats $dir/$pfx.stats.tsv \\\n  --calls $dir/$pfx.calls.filtered.tsv \\\n  --pdf $dir/$pfx.pdf\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/freeseek/mocha/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.878231726286167,
      "result": {
        "original_header": "Compute allelic shift",
        "type": "Text_excerpt",
        "value": "Import allelic shift information from the MoChA output VCF into a VCF file with imputed genotypes (optional for array data)\n```\nbcftools annotate \\\n  --no-version \\\n  --output $dir/$pfx.imp.as.bcf \\\n  --output-type b \\\n  --columns FMT/AS \\\n  $dir/$pfx.imp.bcf \\\n  --annotations $dir/$pfx.as.bcf \\\n  --write-index\n``` \nRun asymmetry analyses (subset cohort, run binomial test, discard genotypes)\n```\nbcftools +extendFMT \\\n  --no-version -Ou \\\n  --format AS \\\n  --phase \\\n  --dist 500000 \\\n  --regions $reg \\\n  --samples $lst \\\n  $dir/$pfx.imp.as.bcf | \\\nbcftools +mochatools \\\n  --no-version \\\n  --output $dir/$pfx.bal.bcf \\\n  --output-type b \\\n  -- --summary AS \\\n  --test AS \\\n  --drop-genotypes \\\n  --write-index\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/freeseek/mocha/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8294480384529727,
      "result": {
        "original_header": "Plot results",
        "type": "Text_excerpt",
        "value": "Generate summary plot\n```\nsummary_plot.R \\\n  --stats $dir/$pfx.stats.tsv \\\n  --calls $dir/$pfx.calls.tsv \\\n  --pdf $dir/$pfx.pdf\n``` \nGenerate pileup plot\n```\npileup_plot.R \\\n  --cytoband $HOME/GRCh37/cytoBand.txt.gz \\\n  --stats $dir/$pfx.stats.tsv \\\n  --calls $dir/$pfx.calls.filtered.tsv \\\n  --pdf $dir/$pfx.pdf\n``` \nPlot mosaic chromosomal alterations (for WGS data)\n```\nmocha_plot.R \\\n  --wgs \\\n  --mocha \\\n  --stats $dir/$pfx.stats.tsv\n  --vcf $dir/$pfx.as.bcf \\\n  --png CSES15_P26_140611.png \\\n  --samples CSES15_P26_140611 \\\n  --regions 1:202236354-211793505 \\\n  --cytoband $HOME/GRCh37/cytoBand.txt.gz\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/freeseek/mocha/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/freeseek/mocha/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "The MIT License\n\nCopyright (C) 2015-2024 Giulio Genovese\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/freeseek/mocha/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "mocha"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "freeseek"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 287822,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 48173,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/freeseek/mocha/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "run",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 18:38:31",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 79
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "type": "Text_excerpt",
        "value": "A set of [WDL](http://github.com/freeseek/mochawdl) pipelines are available to run the entire MoChA pipeline from raw intensity files to final calls and imputed VCFs\n\n```\nUsage:   bcftools +mocha [OPTIONS] <in.vcf.gz>\n\nRequired options:\n    -g, --genome <assembly>[?]      predefined genome reference rules, 'list' to print available settings, append '?' for details\n    -G, --genome-file <file>        genome reference rules, space/tab-delimited CHROM:FROM-TO,TYPE\n\nGeneral Options:\n    -v, --variants [^]<file>        tabix-indexed [compressed] VCF/BCF file containing variants\n    -f, --apply-filters <list>      require at least one of the listed FILTER strings (e.g. \"PASS,.\")\n                                    to include (or exclude with \"^\" prefix) in the analysis\n    -e, --exclude <expr>            exclude sites for which the expression is true\n    -i, --include <expr>            select sites for which the expression is true\n    -r, --regions <region>          restrict to comma-separated list of regions\n    -R, --regions-file <file>       restrict to regions listed in a file\n        --regions-overlap 0|1|2     Include if POS in the region (0), record overlaps (1), variant overlaps (2) [1]\n    -t, --targets [^]<region>       restrict to comma-separated list of regions. Exclude regions with \"^\" prefix\n    -T, --targets-file [^]<file>    restrict to regions listed in a file. Exclude regions with \"^\" prefix\n        --targets-overlap 0|1|2     Include if POS in the region (0), record overlaps (1), variant overlaps (2) [0]\n    -s, --samples [^]<list>         comma separated list of samples to include (or exclude with \"^\" prefix)\n    -S, --samples-file [^]<file>    file of samples to include (or exclude with \"^\" prefix)\n        --force-samples             only warn about unknown subset samples\n        --input-stats <file>        input samples genome-wide statistics file\n        --only-stats                compute genome-wide statistics without detecting mosaic chromosomal alterations\n    -p  --cnp <file>                list of regions to genotype in BED format\n        --mhc <region>              MHC region to exclude from analysis (will be retained in the output)\n        --kir <region>              KIR region to exclude from analysis (will be retained in the output)\n        --threads <int>             number of extra output compression threads [0]\n\nOutput Options:\n    -o, --output <file>             write output to a file [no output]\n    -O, --output-type u|b|v|z[0-9]  u/b: un/compressed BCF, v/z: un/compressed VCF, 0-9: compression level [v]\n        --no-version                do not append version and command line to the header\n    -a  --no-annotations            omit Ldev and Bdev FORMAT from output VCF (requires --output)\n        --no-log                    suppress progress report on standard error\n    -l  --log <file>                write log to file [standard error]\n    -c, --calls <file>              write chromosomal alterations calls table to a file [standard output]\n    -z  --stats <file>              write samples genome-wide statistics table to a file [no output]\n    -u, --ucsc-bed <file>           write UCSC bed track to a file [no output]\n    -W, --write-index[=FMT]         Automatically index the output files [off]\n\nHMM Options:\n        --bdev-LRR-BAF <list>       comma separated list of inverse BAF deviations for LRR+BAF model [-2.0,-4.0,-6.0,10.0,6.0,4.0]\n        --bdev-BAF-phase <list>     comma separated list of inverse BAF deviations for BAF+phase model\n                                    [6.0,8.0,10.0,15.0,20.0,30.0,50.0,80.0,130.0,210.0,340.0,550.0]\n        --min-dist <int>            minimum base pair distance between consecutive sites for WGS data [400]\n        --adjust-BAF-LRR <int>      minimum number of genotypes for a cluster to median adjust BAF and LRR (-1 for no adjustment) [5]\n        --regress-BAF-LRR <int>     minimum number of genotypes for a cluster to regress BAF against LRR (-1 for no regression) [15]\n        --LRR-GC-order <int>        order of polynomial to regress LRR against local GC content (-1 for no regression) [2]\n        --xy-major-pl               major transition phred-scaled likelihood [65.0]\n        --xy-minor-pl               minor transition phred-scaled likelihood [35.0]\n        --auto-tel-pl               autosomal telomeres phred-scaled likelihood [20.0]\n        --chrX-tel-pl               chromosome X telomeres phred-scaled likelihood [8.0]\n        --chrY-tel-pl               chromosome Y telomeres phred-scaled likelihood [6.0]\n        --error-pl                  uniform error phred-scaled likelihood [15.0]\n        --flip-pl                   phase flip phred-scaled likelihood [20.0]\n        --short-arm-chrs <list>     list of chromosomes with short arms [13,14,15,21,22,chr13,chr14,chr15,chr21,chr22]\n        --use-short-arms            use variants in short arms [FALSE]\n        --use-centromeres           use variants in centromeres [FALSE]\n        --use-males-xtr             use variants in XTR region for males [FALSE]\n        --use-males-par2            use variants in PAR2 region for males [FALSE]\n        --use-no-rules-chrs         use chromosomes without centromere rules  [FALSE]\n        --LRR-weight <float>        relative contribution from LRR for LRR+BAF  model [0.2]\n        --LRR-hap2dip <float>       difference between LRR for haploid and diploid [0.45]\n        --LRR-cutoff <float>        cutoff between LRR for haploid and diploid used to infer gender [estimated from X nonPAR]\n\nExamples:\n    bcftools +mocha -g GRCh37 -v ^exclude.bcf -p cnps.bed -c calls.tsv -z stats.tsv input.bcf\n    bcftools +mocha -g GRCh38 -o output.bcf -Ob -c calls.tsv -z stats.tsv --LRR-weight 0.5 input.bcf\n```\n"
      },
      "source": "https://raw.githubusercontent.com/freeseek/mocha/master/README.md",
      "technique": "header_analysis"
    }
  ]
}