{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/elkebir-group/doubletD"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-01-07T18:43:39Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-11-21T15:45:20Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9966712346448179,
      "result": {
        "original_header": "doubletD",
        "type": "Text_excerpt",
        "value": "![Overview of doubletD](doubletD_overview.png)\n(a) The first step of most single-cell sequencing technologies involves cell capture where the goal is to encapsulate single cells into droplets, known as *singlets*.\nHowever, errors in this process can lead to three kind of doublets -- *neotypic* doublets, *nested* doublets and *selflets*.\n(b) The cells in each isolated droplet *i* undergo whole-genome amplification and sequencing independently.\nThese processes introduce errors such as allelic dropouts and imbalance in amplification.\n(c) The resulting aligned reads are used for variant calling yielding alternate v_{i,j} and total c_{i,j} read counts at each locus of interest *j*.\n(d) doubletD uses the observed variant allele frequencies v_{i,j}/c_{i,j} as the key signal, while accounting for sequencing and amplification errors to detect doublets in the sample.\n \n"
      },
      "source": "https://raw.githubusercontent.com/elkebir-group/doubletD/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/elkebir-group/doubletD/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/elkebir-group/doubletD/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "elkebir-group/doubletD"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "doubletD"
      },
      "source": "https://raw.githubusercontent.com/elkebir-group/doubletD/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/elkebir-group/doubletD/main/doubletD_overview.png"
      },
      "source": "https://raw.githubusercontent.com/elkebir-group/doubletD/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Using conda (recommended)",
        "parent_header": [
          "doubletD",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "<a name=\"conda\"></a>\n  ```bash\n  $ conda install -c bioconda doubletd\n   ```\n"
      },
      "source": "https://raw.githubusercontent.com/elkebir-group/doubletD/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Using pip (alternative)",
        "parent_header": [
          "doubletD",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "<a name=\"pre-requisites\"></a>"
      },
      "source": "https://raw.githubusercontent.com/elkebir-group/doubletD/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9370307993552388,
      "result": {
        "original_header": "Contents",
        "type": "Text_excerpt",
        "value": "  1. [Installation](#install)\n     * [Using conda](#conda)(recommended)\n     * [Using pip](#compilation) (alternative)\n          * [Dependencies](#pre-requisites)\n          * [install using pip](#install)\n  2. [Usage instructions](#usage)\n     * [I/O formats](#io)\n     * [doubletD](#doubletD) \n<a name=\"install\"></a>\n \n"
      },
      "source": "https://raw.githubusercontent.com/elkebir-group/doubletD/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/elkebir-group/doubletD/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "doubletD"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "elkebir-group"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 24636,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/elkebir-group/doubletD/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Pre-requisites",
        "parent_header": [
          "doubletD",
          "Installation",
          "Using pip (alternative)"
        ],
        "type": "Text_excerpt",
        "value": "+ python3 (>=3.6)\n+ setuptools\n+ [numpy](https://numpy.org/doc/)\n+ [pandas](https://pandas.pydata.org/pandas-docs/stable/index.html)\n\n<a name=\"install\"></a>\n  1. Clone the repository\n      ```bash\n            $ git clone https://github.com/elkebir-group/doubletD.git\n        ```\n\n  2. Install doubletD using pip\n    \n     ```bash\n            $ cd doubletD\n        `   $ pip install ./\n      ```\n<a name=\"usage\"></a>"
      },
      "source": "https://raw.githubusercontent.com/elkebir-group/doubletD/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 05:15:19",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage instructions",
        "parent_header": [
          "doubletD"
        ],
        "type": "Text_excerpt",
        "value": "<a name=\"io\"></a>"
      },
      "source": "https://raw.githubusercontent.com/elkebir-group/doubletD/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "I/O formats",
        "parent_header": [
          "doubletD",
          "Usage instructions"
        ],
        "type": "Text_excerpt",
        "value": "The input for doubletD is a text based with two input comma-separated dataframes -- one containing the total read counts and another containing the alternate read counts.\nFor both the files, each row is a different droplet and each column is a loci.\nSee `data/sample_DP.tsv` and `data/sample_AD.tsv` for an example for both files.\nThe output is also a dataframe with each row for a different droplet and columns, from left to right, posterior probability that the droplet is a singlet, posterior probability that the droplet is a doublet and prediction for the droplet to be either 'singlet' or 'doublet'.\nSee `data/sample_prediction.tsv` for an example.\n"
      },
      "source": "https://raw.githubusercontent.com/elkebir-group/doubletD/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Arguments",
        "parent_header": [
          "doubletD",
          "Usage instructions"
        ],
        "type": "Text_excerpt",
        "value": "Parameters with default value `None` are estimated from data\n\n    usage: doubletd [-h] [--inputTotal INPUTTOTAL]\n                   [--inputAlternate INPUTALTERNATE] [--delta DELTA]\n                   [--beta BETA] [--mu_hetero MU_HETERO] [--mu_hom MU_HOM]\n                   [--alpha_fp ALPHA_FP] [--alpha_fn ALPHA_FN] [-o OUTPUTFILE]\n                   [--noverbose] [--binomial] [--prec PREC] [--missing]\n      optional arguments:\n        -h, --help            show this help message and exit\n        --inputTotal INPUTTOTAL\n                              csv file with a table of total read counts for each\n                              position in each cell\n        --inputAlternate INPUTALTERNATE\n                              csv file with a table of alternate read counts for\n                              each position in each cell\n        --delta DELTA         expected doublet rate [0.1]\n        --beta BETA           allelic dropout (ADO) rate [0.05]\n        --mu_hetero MU_HETERO\n                              heterozygous mutation rate [None]\n        --mu_hom MU_HOM       homozygous mutation rate [None]\n        --alpha_fp ALPHA_FP   copy false positive error rate [None]\n        --alpha_fn ALPHA_FN   copy false negative error rate [None]\n        -o OUTPUTFILE, --outputfile OUTPUTFILE\n                              output file name\n        --noverbose           do not output statements from internal solvers\n                              [default is false]\n        --binomial            use binomial distribution for read count model\n                              [default is false]\n        --prec PREC           precision for beta-binomial distribution [None]\n        --missing             use missing data in the model? [No]\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/elkebir-group/doubletD/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example",
        "parent_header": [
          "doubletD",
          "Usage instructions"
        ],
        "type": "Text_excerpt",
        "value": "Here we will show an example of how to run `doubletD`.\nThe input files are located in the `example` directory.\nWe run `doubletD` with a prior doublet probabiltity of 0.2 and ADO rate of 0.05 without using missing data in our model.\n\n    $ doubletd --inputAlternate example/AD.csv --inputTotal example/DP.csv --delta 0.2 --beta 0.05 -o example/prediction.tsv \n\nThis command generates output file `prediction.tsv` in directory `example`.\n"
      },
      "source": "https://raw.githubusercontent.com/elkebir-group/doubletD/main/README.md",
      "technique": "header_analysis"
    }
  ]
}