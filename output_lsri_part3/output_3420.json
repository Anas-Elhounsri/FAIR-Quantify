{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How to cite *metaVaR*?",
        "parent_header": [
          "metaVaR: MetaVariant Species (MVS) for reference-free and metagenomic-based population genomic analysis.",
          "How to use *metaVaR*?"
        ],
        "type": "Text_excerpt",
        "value": "# metaVaR: MetaVariant Species (MVS) for reference-free and metagenomic-based population genomic analysis.\n## Why using <i>metaVaR</i>?\n<i>metaVaR</i> is a R package developed for population genomic analyses based on variants generated directly from metagenomic data without reference genomes or transcriptomes. Its utilization is based on the output of the reference-free variant caller <a href=\"https://github.com/GATB/DiscoSnp\"><i>DiscoSnp++</i></a> ran on multisamples metagenomic reads. <i>metaVaR</i> clusters the metavariants into species called metavariant species (MVS). <i>metaVaR</i> allows to estimate genomic differentiation through <i>F-statistics</i> and to identify loci under natural selection. \n## How to install <i>metaVaR</i>?\n<i>metaVaR</i> is a R package that can be installed directly from github as follow:\n```\ninstall_github(\"madoui/metaVaR\")\n```\nThe package has been submitted to CRAN and will be available from it soon via `install.packages()`.\n## How to use <i>metaVaR</i>?\n### Quick running example on a toyset\nOne toysets can be used with the package, the \"MS5\" dataset, created from <i>DiscoSNP++</i> ran on real metagenomic data collected in five sampling sites in the Mediterranean Sea. Here is an example to run <i>metaVaR</i> on the \"MS5\" dataset.\n```\nlibrary(metaVaR)\n\n# espilon values to test for dbscan\ne = c(3,5,7)\n# minimum points values to test for dbscan\np = c(5, 10, 20, 50)\n\n# Test all dbscan parameter couples\nMVC = tryParam (e, p, MS5$cov)\n\n# Select maximum weigthed independant sets\nMWIS = getMWIS (MVC)\n\n# Filter loci to generate MVS\nMVS = mvc2mvs(MWIS, freq = MS5$freq)\n```\nThe results consists in a list of objects of class <i>mvs</i> that contains the allele frequency matrix, global and pairwise $F_{ST}$, LK and associated corrected p-value.\n\n### Data preprocessing and input data format\nYou first need to run DiscoSnp++ on multisample metagenomic data without references. Then, use the DiscoSnp++ VCF output to generate two matices: one depth of coverage matrix for bialleic loci and one allele frequency matrix. This task can be performed using the perl script metavarFilter.pl designed to parse the DiscoSnp++ output.\n```\nmetaVarFilter.pl -i input.vcf -p output_prefix [-a minCov -b maxCov -c minPop]         \n\tInput:\n\t-i\ta VCF file produced by DiscoSNP++ ran on multisample metagenomic data\n\t-p\ta prefix output\n  \n  Options:\n  -a      The minimum cumulative depth of coverage of a loci across populations (default 20)\n  -b      The maximum cumulative depth of coverage of a loci across populations (default 250)\n\t-c\t    The minimum number of populations avec a SNP call for a loci to be kept (default 4)\n\t\n\tOutputs:\n\t1. prefix_filtered.vcf\t\ta filtered VCF file that contains informative biallelic SNVs\n\t2. prefix_cov.txt\t\t      a file with the depth of coverage of biallelic loci in each population\n\t3. prefix_freq.txt\t\t    a file with the allele frequencies of biallelic loci in each population\n```\n-a and -b parameters can be set to 0 and 10000 if all snps want to be kept, but this will slow the clustering. To get rid of noisy snps, the distribibution of the cumulative depth of coverage can be observed. This will show a bell shape curve, -a and -b can be the oberved lower and upper limits of the bell.\n### Read/Write metaVaR outputs\n```\n# run metaVaR\ne = c(3,5)\np = c(5,10)\nMVC_list = tryParam (e, p, MS5$cov)\n\n# store MVC\nwriteMvcList (MVC_list, \"MVC\")\n\n# import MVC\nMVC_list = readMvcList (\"MVC\")\n\nMWIS_list = getMWIS (MVC_list)\nMVS_list = mvc2mvs(MWIS_list, freq = MS5$freq)\n\n# store MVS\nwriteMvsList (MVS_list, \"MVS\")\n\n# read MVS\nMVS_list = readMvsList (\"MVS\")\n```\n### Running metaVaR on HPC\nTo take advantages of the metaVaR custering algorithm (mDBSCAN-WMIN), a lot of epsilon and minimum points values can be tested on grid computing. In this case, all `MVC_list` have to be written in the same output directory. Then, the `mvc2mvs` can be executed on all MVC.\n\n### Results visualisation\nThere are currently four types of plots that ca be produced on a MVS object. Here an example on the first mvs of the list 'MVS'.\n```\n# Plot the MVS distribution of allele frequency\nplotMvs (MVS[[1]], type = \"freq\")\n\n# Plot the MVS loci depth of coverage\nplotMvs (MVS[[1]], type = \"cov\")\n\n# Plot the pairwise $F_{ST}$ matrix\nplotMvs (MVS[[1]], type = \"heatFst\")\n\n# Plot the expected and observed LK distribution\nplotMvs (MVS[[1]], type = \"LK\")\n```\n\n### How to cite <i>metaVaR</i>?\n\n<b>metaVaR: introducing metavariant species models for reference-free metagenomic-based population genomics.</b>\nRomuald Laso-Jadart, Christophe Ambroise, Pierre Peterlongo, Mohammed-Amin Madoui. (2020)\nbioRxiv doi: https://doi.org/10.1101/2020.01.30.924381\n"
      },
      "source": "https://raw.githubusercontent.com/madoui/MetaVaR/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/madoui/metaVaR"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-01-20T16:34:36Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-22T14:52:19Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "R package  for reference-free and metagenomic-based population genomic analysis"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9523156807954894,
      "result": {
        "original_header": "Why using *metaVaR*?",
        "type": "Text_excerpt",
        "value": "# metaVaR: MetaVariant Species (MVS) for reference-free and metagenomic-based population genomic analysis.\n## Why using <i>metaVaR</i>?\n<i>metaVaR</i> is a R package developed for population genomic analyses based on variants generated directly from metagenomic data without reference genomes or transcriptomes. Its utilization is based on the output of the reference-free variant caller <a href=\"https://github.com/GATB/DiscoSnp\"><i>DiscoSnp++</i></a> ran on multisamples metagenomic reads. <i>metaVaR</i> clusters the metavariants into species called metavariant species (MVS). <i>metaVaR</i> allows to estimate genomic differentiation through <i>F-statistics</i> and to identify loci under natural selection. \n## How to install <i>metaVaR</i>?\n<i>metaVaR</i> is a R package that can be installed directly from github as follow:\n```\ninstall_github(\"madoui/metaVaR\")\n```\nThe package has been submitted to CRAN and will be available from it soon via `install.packages()`.\n## How to use <i>metaVaR</i>?\n### Quick running example on a toyset\nOne toysets can be used with the package, the \"MS5\" dataset, created from <i>DiscoSNP++</i> ran on real metagenomic data collected in five sampling sites in the Mediterranean Sea. Here is an example to run <i>metaVaR</i> on the \"MS5\" dataset.\nBASH2*\nThe results consists in a list of objects of class <i>mvs</i> that contains the allele frequency matrix, global and pairwise $F_{ST}$, LK and associated corrected p-value. \n### Data preprocessing and input data format\nYou first need to run DiscoSnp++ on multisample metagenomic data without references. Then, use the DiscoSnp++ VCF output to generate two matices: one depth of coverage matrix for bialleic loci and one allele frequency matrix. This task can be performed using the perl script metavarFilter.pl designed to parse the DiscoSnp++ output.\n```\nmetaVarFilter.pl -i input.vcf -p output_prefix [-a minCov -b maxCov -c minPop]         \n\tInput:\n\t-i\ta VCF file produced by DiscoSNP++ ran on multisample metagenomic data\n\t-p\ta prefix output\n  \n  Options:\n  -a      The minimum cumulative depth of coverage of a loci across populations (default 20)\n  -b      The maximum cumulative depth of coverage of a loci across populations (default 250)\n\t-c\t    The minimum number of populations avec a SNP call for a loci to be kept (default 4)\n\t\n\tOutputs:\n\t1. prefix_filtered.vcf\t\ta filtered VCF file that contains informative biallelic SNVs\n\t2. prefix_cov.txt\t\t      a file with the depth of coverage of biallelic loci in each population\n\t3. prefix_freq.txt\t\t    a file with the allele frequencies of biallelic loci in each population\n```\n-a and -b parameters can be set to 0 and 10000 if all snps want to be kept, but this will slow the clustering. To get rid of noisy snps, the distribibution of the cumulative depth of coverage can be observed. This will show a bell shape curve, -a and -b can be the oberved lower and upper limits of the bell.\n### Read/Write metaVaR outputs\nBASH4*\n### Running metaVaR on HPC\nTo take advantages of the metaVaR custering algorithm (mDBSCAN-WMIN), a lot of epsilon and minimum points values can be tested on grid computing. In this case, all `MVC_list` have to be written in the same output directory. Then, the `mvc2mvs` can be executed on all MVC. \n### Results visualisation\nThere are currently four types of plots that ca be produced on a MVS object. Here an example on the first mvs of the list 'MVS'.\n```\n# Plot the MVS distribution of allele frequency\nplotMvs (MVS[[1]], type = \"freq\")\n\n# Plot the MVS loci depth of coverage\nplotMvs (MVS[[1]], type = \"cov\")\n\n# Plot the pairwise $F_{ST}$ matrix\nplotMvs (MVS[[1]], type = \"heatFst\")\n\n# Plot the expected and observed LK distribution\nplotMvs (MVS[[1]], type = \"LK\")\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/madoui/MetaVaR/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/madoui/MetaVaR/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/madoui/metaVaR/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "madoui/metaVaR"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "metaVaR: MetaVariant Species (MVS) for reference-free and metagenomic-based population genomic analysis."
      },
      "source": "https://raw.githubusercontent.com/madoui/MetaVaR/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How to install *metaVaR*?",
        "parent_header": [
          "metaVaR: MetaVariant Species (MVS) for reference-free and metagenomic-based population genomic analysis."
        ],
        "type": "Text_excerpt",
        "value": "# metaVaR: MetaVariant Species (MVS) for reference-free and metagenomic-based population genomic analysis.\n## Why using <i>metaVaR</i>?\n<i>metaVaR</i> is a R package developed for population genomic analyses based on variants generated directly from metagenomic data without reference genomes or transcriptomes. Its utilization is based on the output of the reference-free variant caller <a href=\"https://github.com/GATB/DiscoSnp\"><i>DiscoSnp++</i></a> ran on multisamples metagenomic reads. <i>metaVaR</i> clusters the metavariants into species called metavariant species (MVS). <i>metaVaR</i> allows to estimate genomic differentiation through <i>F-statistics</i> and to identify loci under natural selection. \n## How to install <i>metaVaR</i>?\n<i>metaVaR</i> is a R package that can be installed directly from github as follow:\n```\ninstall_github(\"madoui/metaVaR\")\n```\nThe package has been submitted to CRAN and will be available from it soon via `install.packages()`.\n## How to use <i>metaVaR</i>?\n### Quick running example on a toyset\nOne toysets can be used with the package, the \"MS5\" dataset, created from <i>DiscoSNP++</i> ran on real metagenomic data collected in five sampling sites in the Mediterranean Sea. Here is an example to run <i>metaVaR</i> on the \"MS5\" dataset.\n```\nlibrary(metaVaR)\n\n# espilon values to test for dbscan\ne = c(3,5,7)\n# minimum points values to test for dbscan\np = c(5, 10, 20, 50)\n\n# Test all dbscan parameter couples\nMVC = tryParam (e, p, MS5$cov)\n\n# Select maximum weigthed independant sets\nMWIS = getMWIS (MVC)\n\n# Filter loci to generate MVS\nMVS = mvc2mvs(MWIS, freq = MS5$freq)\n```\nThe results consists in a list of objects of class <i>mvs</i> that contains the allele frequency matrix, global and pairwise $F_{ST}$, LK and associated corrected p-value.\n\n### Data preprocessing and input data format\nYou first need to run DiscoSnp++ on multisample metagenomic data without references. Then, use the DiscoSnp++ VCF output to generate two matices: one depth of coverage matrix for bialleic loci and one allele frequency matrix. This task can be performed using the perl script metavarFilter.pl designed to parse the DiscoSnp++ output.\n```\nmetaVarFilter.pl -i input.vcf -p output_prefix [-a minCov -b maxCov -c minPop]         \n\tInput:\n\t-i\ta VCF file produced by DiscoSNP++ ran on multisample metagenomic data\n\t-p\ta prefix output\n  \n  Options:\n  -a      The minimum cumulative depth of coverage of a loci across populations (default 20)\n  -b      The maximum cumulative depth of coverage of a loci across populations (default 250)\n\t-c\t    The minimum number of populations avec a SNP call for a loci to be kept (default 4)\n\t\n\tOutputs:\n\t1. prefix_filtered.vcf\t\ta filtered VCF file that contains informative biallelic SNVs\n\t2. prefix_cov.txt\t\t      a file with the depth of coverage of biallelic loci in each population\n\t3. prefix_freq.txt\t\t    a file with the allele frequencies of biallelic loci in each population\n```\n-a and -b parameters can be set to 0 and 10000 if all snps want to be kept, but this will slow the clustering. To get rid of noisy snps, the distribibution of the cumulative depth of coverage can be observed. This will show a bell shape curve, -a and -b can be the oberved lower and upper limits of the bell.\n### Read/Write metaVaR outputs\n```\n# run metaVaR\ne = c(3,5)\np = c(5,10)\nMVC_list = tryParam (e, p, MS5$cov)\n\n# store MVC\nwriteMvcList (MVC_list, \"MVC\")\n\n# import MVC\nMVC_list = readMvcList (\"MVC\")\n\nMWIS_list = getMWIS (MVC_list)\nMVS_list = mvc2mvs(MWIS_list, freq = MS5$freq)\n\n# store MVS\nwriteMvsList (MVS_list, \"MVS\")\n\n# read MVS\nMVS_list = readMvsList (\"MVS\")\n```\n### Running metaVaR on HPC\nTo take advantages of the metaVaR custering algorithm (mDBSCAN-WMIN), a lot of epsilon and minimum points values can be tested on grid computing. In this case, all `MVC_list` have to be written in the same output directory. Then, the `mvc2mvs` can be executed on all MVC.\n\n### Results visualisation\nThere are currently four types of plots that ca be produced on a MVS object. Here an example on the first mvs of the list 'MVS'.\n```\n# Plot the MVS distribution of allele frequency\nplotMvs (MVS[[1]], type = \"freq\")\n\n# Plot the MVS loci depth of coverage\nplotMvs (MVS[[1]], type = \"cov\")\n\n# Plot the pairwise $F_{ST}$ matrix\nplotMvs (MVS[[1]], type = \"heatFst\")\n\n# Plot the expected and observed LK distribution\nplotMvs (MVS[[1]], type = \"LK\")\n```\n\n### How to cite <i>metaVaR</i>?\n\n<b>metaVaR: introducing metavariant species models for reference-free metagenomic-based population genomics.</b>\nRomuald Laso-Jadart, Christophe Ambroise, Pierre Peterlongo, Mohammed-Amin Madoui. (2020)\nbioRxiv doi: https://doi.org/10.1101/2020.01.30.924381\n"
      },
      "source": "https://raw.githubusercontent.com/madoui/MetaVaR/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/madoui/metaVaR/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "metaVaR"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "madoui"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 38419,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 3410,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/madoui/MetaVaR/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick running example on a toyset",
        "parent_header": [
          "metaVaR: MetaVariant Species (MVS) for reference-free and metagenomic-based population genomic analysis.",
          "How to use *metaVaR*?"
        ],
        "type": "Text_excerpt",
        "value": "One toysets can be used with the package, the \"MS5\" dataset, created from <i>DiscoSNP++</i> ran on real metagenomic data collected in five sampling sites in the Mediterranean Sea. Here is an example to run <i>metaVaR</i> on the \"MS5\" dataset.\n```\nlibrary(metaVaR)\n\n# espilon values to test for dbscan\ne = c(3,5,7)\n# minimum points values to test for dbscan\np = c(5, 10, 20, 50)\n\n# Test all dbscan parameter couples\nMVC = tryParam (e, p, MS5$cov)\n\n# Select maximum weigthed independant sets\nMWIS = getMWIS (MVC)\n\n# Filter loci to generate MVS\nMVS = mvc2mvs(MWIS, freq = MS5$freq)\n```\nThe results consists in a list of objects of class <i>mvs</i> that contains the allele frequency matrix, global and pairwise $F_{ST}$, LK and associated corrected p-value.\n"
      },
      "source": "https://raw.githubusercontent.com/madoui/MetaVaR/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running metaVaR on HPC",
        "parent_header": [
          "metaVaR: MetaVariant Species (MVS) for reference-free and metagenomic-based population genomic analysis.",
          "How to use *metaVaR*?"
        ],
        "type": "Text_excerpt",
        "value": "To take advantages of the metaVaR custering algorithm (mDBSCAN-WMIN), a lot of epsilon and minimum points values can be tested on grid computing. In this case, all `MVC_list` have to be written in the same output directory. Then, the `mvc2mvs` can be executed on all MVC.\n"
      },
      "source": "https://raw.githubusercontent.com/madoui/MetaVaR/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 12:42:55",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick running example on a toyset",
        "parent_header": [
          "metaVaR: MetaVariant Species (MVS) for reference-free and metagenomic-based population genomic analysis.",
          "How to use *metaVaR*?"
        ],
        "type": "Text_excerpt",
        "value": "One toysets can be used with the package, the \"MS5\" dataset, created from <i>DiscoSNP++</i> ran on real metagenomic data collected in five sampling sites in the Mediterranean Sea. Here is an example to run <i>metaVaR</i> on the \"MS5\" dataset.\n```\nlibrary(metaVaR)\n\n# espilon values to test for dbscan\ne = c(3,5,7)\n# minimum points values to test for dbscan\np = c(5, 10, 20, 50)\n\n# Test all dbscan parameter couples\nMVC = tryParam (e, p, MS5$cov)\n\n# Select maximum weigthed independant sets\nMWIS = getMWIS (MVC)\n\n# Filter loci to generate MVS\nMVS = mvc2mvs(MWIS, freq = MS5$freq)\n```\nThe results consists in a list of objects of class <i>mvs</i> that contains the allele frequency matrix, global and pairwise $F_{ST}$, LK and associated corrected p-value.\n"
      },
      "source": "https://raw.githubusercontent.com/madoui/MetaVaR/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Data preprocessing and input data format",
        "parent_header": [
          "metaVaR: MetaVariant Species (MVS) for reference-free and metagenomic-based population genomic analysis.",
          "How to use *metaVaR*?"
        ],
        "type": "Text_excerpt",
        "value": "You first need to run DiscoSnp++ on multisample metagenomic data without references. Then, use the DiscoSnp++ VCF output to generate two matices: one depth of coverage matrix for bialleic loci and one allele frequency matrix. This task can be performed using the perl script metavarFilter.pl designed to parse the DiscoSnp++ output.\n```\nmetaVarFilter.pl -i input.vcf -p output_prefix [-a minCov -b maxCov -c minPop]         \n\tInput:\n\t-i\ta VCF file produced by DiscoSNP++ ran on multisample metagenomic data\n\t-p\ta prefix output\n  \n  Options:\n  -a      The minimum cumulative depth of coverage of a loci across populations (default 20)\n  -b      The maximum cumulative depth of coverage of a loci across populations (default 250)\n\t-c\t    The minimum number of populations avec a SNP call for a loci to be kept (default 4)\n\t\n\tOutputs:\n\t1. prefix_filtered.vcf\t\ta filtered VCF file that contains informative biallelic SNVs\n\t2. prefix_cov.txt\t\t      a file with the depth of coverage of biallelic loci in each population\n\t3. prefix_freq.txt\t\t    a file with the allele frequencies of biallelic loci in each population\n```\n-a and -b parameters can be set to 0 and 10000 if all snps want to be kept, but this will slow the clustering. To get rid of noisy snps, the distribibution of the cumulative depth of coverage can be observed. This will show a bell shape curve, -a and -b can be the oberved lower and upper limits of the bell."
      },
      "source": "https://raw.githubusercontent.com/madoui/MetaVaR/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Read/Write metaVaR outputs",
        "parent_header": [
          "metaVaR: MetaVariant Species (MVS) for reference-free and metagenomic-based population genomic analysis.",
          "How to use *metaVaR*?"
        ],
        "type": "Text_excerpt",
        "value": "```\n# run metaVaR\ne = c(3,5)\np = c(5,10)\nMVC_list = tryParam (e, p, MS5$cov)\n\n# store MVC\nwriteMvcList (MVC_list, \"MVC\")\n\n# import MVC\nMVC_list = readMvcList (\"MVC\")\n\nMWIS_list = getMWIS (MVC_list)\nMVS_list = mvc2mvs(MWIS_list, freq = MS5$freq)\n\n# store MVS\nwriteMvsList (MVS_list, \"MVS\")\n\n# read MVS\nMVS_list = readMvsList (\"MVS\")\n```"
      },
      "source": "https://raw.githubusercontent.com/madoui/MetaVaR/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Results visualisation",
        "parent_header": [
          "metaVaR: MetaVariant Species (MVS) for reference-free and metagenomic-based population genomic analysis.",
          "How to use *metaVaR*?"
        ],
        "type": "Text_excerpt",
        "value": "There are currently four types of plots that ca be produced on a MVS object. Here an example on the first mvs of the list 'MVS'.\n```\n# Plot the MVS distribution of allele frequency\nplotMvs (MVS[[1]], type = \"freq\")\n\n# Plot the MVS loci depth of coverage\nplotMvs (MVS[[1]], type = \"cov\")\n\n# Plot the pairwise $F_{ST}$ matrix\nplotMvs (MVS[[1]], type = \"heatFst\")\n\n# Plot the expected and observed LK distribution\nplotMvs (MVS[[1]], type = \"LK\")\n```\n\n### How to cite <i>metaVaR</i>?\n\n<b>metaVaR: introducing metavariant species models for reference-free metagenomic-based population genomics.</b>\nRomuald Laso-Jadart, Christophe Ambroise, Pierre Peterlongo, Mohammed-Amin Madoui. (2020)\nbioRxiv doi: https://doi.org/10.1101/2020.01.30.924381\n"
      },
      "source": "https://raw.githubusercontent.com/madoui/MetaVaR/master/README.md",
      "technique": "header_analysis"
    }
  ]
}