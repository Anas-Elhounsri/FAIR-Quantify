{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Reference manual",
        "parent_header": [
          "SLIDR and SLOPPR: Pipelines for flexible identification of spliced leader *trans*-splicing and prediction of eukaryotic operons from RNA-Seq data"
        ],
        "type": "Text_excerpt",
        "value": "    # list all command-line options \n    slidr.sh -h\n    sloppr.sh -h\n\n<a name=\"general\"></a>"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "General options for both pipelines",
        "parent_header": [
          "SLIDR and SLOPPR: Pipelines for flexible identification of spliced leader *trans*-splicing and prediction of eukaryotic operons from RNA-Seq data",
          "Reference manual"
        ],
        "type": "Text_excerpt",
        "value": "SLIDR and SLOPPR share general options for data input and output:\n\n`-o <dir>`\nPath to output directory. If unspecified, the output directory is \"./SLIDR_[date+time]\" or \"./SLOPPR_[date+time]\"\n\n`-p <chr>`\nName prefix for predicted SLs or operons (default: SL for SLIDR and OP for SLOPPR). It is recommended to follow a three-letter abbreviation of the organism, for example `Cel` for *C. elegans*. \n\n`-c <num>`\nCPU threads (default: 8. To use all available cores, enter  `$(nproc)`)\n\n`--tmp <dir>`\nPath to directory for temporary files. Default is your system's TMPDIR; specifying this option will change TMPDIR. For running SLIDR on large datasets, it is highly recommended to choose a large TMP directory to avoid potential bottlenecks associated with the default `/tmp` partition.\n\n<a name=\"input\"></a>"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "RNA-Seq data input",
        "parent_header": [
          "SLIDR and SLOPPR: Pipelines for flexible identification of spliced leader *trans*-splicing and prediction of eukaryotic operons from RNA-Seq data",
          "Reference manual",
          "General options for both pipelines"
        ],
        "type": "Text_excerpt",
        "value": "SLIDR and SLOPPR accept single-end or paired-end RNA-Seq reads in FASTQ(.gz) format.\n\nRead alignments in BAM format are also accepted, for convenience of re-using alignments from previous pipeline runs. Please note that generic BAM files produced outside the pipelines without appropriate parameters for [SLIDR](#softclipalign) or [SLOPPR](#slopprguide9) are NOT suitable as input! Please extract reads from such alignments in FASTQ format and then use these reads as input for the pipelines.\n\nThe following options are available to specify a single library:\n\n`-1 <file>`\nPath to R1 reads in FASTQ(.gz) or FASTA(.gz) format.\n\n`-2 <file>`\nPath to R2 reads in FASTQ(.gz) or FASTA(.gz) format.\n\n`-q`\nIf specified, basic quality-trimming of 3' ends of reads and removal of Illumina adapters and poly-A/T tails is carried out using `cutadapt -a AGATCGGAAGAGC -a 'A{100}' -g 'T{100}' -n 3 -q 20 -m 20 -l 150 -O 1`. This is a useful convenience function but it is strongly recommended to carry out careful data filtering and trimming prior to running SLIDR or SLOPPR.\n\n`-b <file>`\nPath to pre-generated SLIDR/SLOPPR read alignments in BAM format. A BAI index file must be present in the same location. \n\n`-r <0|1|2|x>`\nRead strandedness generated during chemical library prep. This parameter is equivalent to the `-s` option in FeatureCounts:\n\n    0 = unstranded data (any read may originate from sense strand)\n    1 = forward stranded data (R1 reads originate from sense strand)\n    2 = reverse stranded data (R2 reads originate from sense strand)\n\nIf strandedness is unknown, setting `-r x` (default) will infer it if genome annotations are supplied. If in doubt, unstranded analysis (`-r 0`) is always acceptable even for stranded data. Stranded data will produce less noisy results if the correct strandedness parameter is supplied. \n\nMultiple libraries must not be specified with these options but instead via a configuration file supplied with the `-m <file>` option. This tab-delimited file must contain six columns:\n- Column 1: Library name\n- Column 2: Library strandedness (= `-r` option)\n- Column 3: Path to R1 reads (= `-1` option)\n- Column 4: Path to R2 reads (= `-2` option)\n- Column 5: \"trim\" to quality-trim reads (= `-q` option)\n- Column 6: Path to read alignments (= `-b` option)\n\nExample file generated for the example dataset above:\n\n    ERR2756719\tx\ttoy_data/ERR2756719_1.fastq.gz\ttoy_data/ERR2756719_2.fastq.gz\ttrim\n    ERR2756720\tx\ttoy_data/ERR2756720_1.fastq.gz\ttoy_data/ERR2756720_2.fastq.gz\ttrim\n\nLeave columns empty if they are not required, for example:\n\n    Library1 <tab> x <tab> R1.trimmed.fq.gz <tab> R2.trimmed.fq.gz\n    Library2 <tab> 0 <tab> single_end.reads.fq.gz <tab> <tab> trim\n    Library3 <tab> 2 <tab> <tab> <tab> <tab> alignments.bam\n\nThis configuration file allows great flexibility in mixing single-end and paired-end libraries with different strandedness and existing read alignments.\nNote: Avoid `#` characters in the file contents; they will be stripped! \n\n<a name=\"hpc\"></a>"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Parallel execution on HPC clusters",
        "parent_header": [
          "SLIDR and SLOPPR: Pipelines for flexible identification of spliced leader *trans*-splicing and prediction of eukaryotic operons from RNA-Seq data",
          "Reference manual",
          "General options for both pipelines"
        ],
        "type": "Text_excerpt",
        "value": "Since version 1.2, SLIDR and SLOPPR can process libraries in parallel on HPC clusters. Default behaviour is sequential processing as in older versions.\n\n`--hpc`\nSwitch on HPC mode. Automatic job submission and dependency control will be used to carry out the following workflow:\n\n1) The main script generates the genome/transcriptome index as in sequential mode\n2) For each library, a separate job is submitted, carrying out read alignment and SL tail extraction\n3) A final dependent job is submitted, finishing the pipeline after all parallel library jobs have completed\n\nThe internal job submission control is designed for the SLURM job scheduler, but can be customised with the following options:\n\n`--hpcp <chr>`\nCommand for submitting parallel jobs (one job per library). The default requests 4G of memory per specified thread (see `-c`). To modify, please specify the full submit command including all resources required **including an option for returning the job ID in plain format**:\n\n    --hpcp 'sbatch -c 4 --mem 8G --parsable'\t\t\t\t# SLURM with hard-coded resources\n\t--hpcp 'qsub -v -cwd -pe smp 4 -l h_vmem=2G -terse'\t\t# Sun Grid Engine format\n\t--hpcp 'msub -l nodes=1:ppn=4,pmem=8gb'\t\t\t\t\t# MOAB format\n\n`--hpcd <chr>`\nCommand for submitting the final dependent job. The default requests 8G of memory per specified thread (see `-c`). To modify, please specify the full submit command **ending with the option for specifying a job dependency list** for your HPC:\n\n    --hpcd 'sbatch -c 4 --mem 32G -d afterok:'\t\t\t\t\t\t# SLURM with hard-coded resources\n\t--hpcd 'qsub -v -cwd -pe smp 4 -l h_vmem=8G -hold_jid '\t\t\t# Sun Grid Engine format\n\t--hpcd 'msub -l nodes=1:ppn=4,pmem=32gb -l depend=afterok:'\t\t# MOAB format\n\n`--hpcs <chr>`  \nSeparator for job IDs in job dependency option. Default is ':' but some job schedulers (e.g., Sun Grid Engine) may require a comma instead (`--hpcs ','`)\n\nIf these options are not flexible enough to work with your HPC, you can still make use of parallel processing by doing the following:\n\n1) Manually set up a task array job for aligning reads for all libraries (SLIDR:[HISAT2 or BOWTIE2 commands](#softclipalign); SLOPPR: `hisat2 --no-softclip --no-discordant`) \n2) Use the BAM files instead of the raw reads as input for SLIDR/SLOPPR (`-b` option)\n\n<a name=\"slidrparams\"></a>"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "SLIDR: Spliced leader identification from RNA-Seq data",
        "parent_header": [
          "SLIDR and SLOPPR: Pipelines for flexible identification of spliced leader *trans*-splicing and prediction of eukaryotic operons from RNA-Seq data",
          "Reference manual"
        ],
        "type": "Text_excerpt",
        "value": "<a name=\"refassembly\"></a>"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Reference assembly",
        "parent_header": [
          "SLIDR and SLOPPR: Pipelines for flexible identification of spliced leader *trans*-splicing and prediction of eukaryotic operons from RNA-Seq data",
          "Reference manual",
          "SLOPPR: Spliced leader-informed operon prediction from RNA-Seq data"
        ],
        "type": "Text_excerpt",
        "value": "SLIDR requires either a genomic or transcriptomic reference assembly. A genomic reference is recommended and will produce vastly superior results. Genome annotations are recommended because they improve read mapping in HISAT2 and allow SLIDR to infer strandedness of the RNA-Seq data if unknown. SLIDR will also identify genes/transcripts in the annotations that overlap the predicted SL RNA genes and SLTS acceptor sites.\n\n`-g <file>`\nPath to genome assembly in FASTA(.gz) format.\n\n`-a <file>`\nPath to genome annotations in GFF(.gz) or GTF(.gz) format.\n\n`-t <file>`\nPath to transcriptome assembly in FASTA(.gz) format.\n\n`-T`\nDisable transcriptome trimming. Use this option if you want to use the supplied transcriptome as is. \n\nNOTE: transcriptome trimming attempts to remove putative SL trans-spliced isoforms by clustering transcripts into genes and removing transcripts with 5' extension compared to other transcripts in each gene. Removing putative SLTS isoforms forces SL reads to align to non-trans-spliced isoforms of the gene and generate soft-clipped 5' read tails that are likely to contain the full 3' end of the SL sequence. These tails can then be aligned to the original untrimmed transcriptome to validate the SL sequence. The downside of this procedure is the aggressive loss of alternative non-trans-spliced isoforms, which may introduce alignment errors across exon-exon junctions.\n\n\n<a name=\"tailcluster\"></a>"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Read tail clustering",
        "parent_header": [
          "SLIDR and SLOPPR: Pipelines for flexible identification of spliced leader *trans*-splicing and prediction of eukaryotic operons from RNA-Seq data",
          "Reference manual",
          "SLIDR: Spliced leader identification from RNA-Seq data"
        ],
        "type": "Text_excerpt",
        "value": "`-l <num>`\nMinimum length of soft-clipped tails to retain after alignment (default: 8). If very few reads pass filters it may be useful to decrease this value.\n\n<a name=\"softclipalign\"></a>\n`-x <num>`\nScale factor for upper tail length limit (default: 1.0). This factor controls the amount of soft-clipping allowed during read alignment in HISAT2 or BOWTIE2. This is achieved via the minimum score functions:\n\n    hisat2  --score-min L,5,-0.4*x --sp 1,0 --mp 3,1\n    bowtie2 --score-min L,5,1-(0.4*x) --ma 1 --mp 3,1 --local\n\n- In HISAT2, a perfectly aligned read has a score of 0. By setting the soft-clipping penalty to 1 (`--sp 1,0`), the minimum score will be equivalent to the maximum number of soft-clipped bases. The above formula thus yields a minimum score of `5 - 0.4*x*readlength = -35` for a 100 bp read and `-x 1.0`, or a maximum of 35 soft-clipped bases. Assuming no mismatches, no gaps and no 3' soft-clipping, these settings can thus capture an SL tail of up to 35 bp. In practice, this length is reduced due to mismatches, gaps and 3' soft-clipping caused by poor-quality read ends or adapter contamination, but empirically works well for capturing nematode-sized SLs (c. 22 bp) even from 75 bp reads. \n- In BOWTIE2 local alignment mode, the logic is inverted. A read starts with a score of 0 and accrues a match bonus for each matched base. By setting this match bonus to 1 (`--ma 1`), a perfectly aligned 100 bp read would have a score of 100. Allowing an SL tail of up to 35 bp, the minimum score would have to be `100 - 35 = 65`, which corresponds to the above formula `5 + (1-(0.4*x))*readlength = 65`\n\nModifying the scale factor `-x` can restrict or expand the upper tail length limit according to the formulae above and illustrated in this table (rows = read length; columns = x; values = limit):\n\n    x\t0.25\t0.5\t0.75\t1.0\t1.25\t1.5\t1.75\t2.0\n    ---------------------------------------------------------------------\n    50bp\t0\t5\t10\t15\t20\t25\t30\t35\n    75bp\t3\t10\t18\t25\t33\t40\t48\t55\n    100bp\t5\t15\t25\t35\t45\t55\t65\t75\n    125bp\t8\t20\t33\t45\t58\t70\t83\t95\n    150bp\t10\t25\t40\t55\t70\t85\t100\t115\n\n`--agc`\nCluster read tails using abundance-based greedy clustering (AGC) instead of the default distance-based greedy clustering (DGC) ([what's that?](https://link.springer.com/article/10.1186/s40168-015-0081-x)). Use this option if DGC yields poor coverage in the final SLs. See also the [parameter guidelines](#agc) for more information.\n\n<a name=\"rnafilter\"></a>"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "SL RNA filtering",
        "parent_header": [
          "SLIDR and SLOPPR: Pipelines for flexible identification of spliced leader *trans*-splicing and prediction of eukaryotic operons from RNA-Seq data",
          "Reference manual",
          "SLIDR: Spliced leader identification from RNA-Seq data"
        ],
        "type": "Text_excerpt",
        "value": "`-e <num>`\nBLASTN E-value (default: 1). This parameter controls the stringency of the alignment of the read tail cluster centroids against the reference assembly. The default value of 1 is appropriate for centroid lengths as low as 10 bp and should rarely require modifying. Decreasing the value will require longer tail matches and thus substantially reduce the numbers of reads passing filteres. Increasing the value will allow shorter centroids to be retained, which we found necessary when analysing the short 16bp SL in *Ciona intestinalis*. Note that increasing this value will substantially increase the numbers of sequence alignments to process.\n\n`-D <chr>`\nSplice donor site pattern in regex notation (default: GT). Alternative nucleotides can be coded with character classes, for example, `-D 'G[TC]'` matches GT or GC, and `-D 'A[AG][TC]'` matches AAT, AAC, AGT or AGC. To switch off, specify empty character string (`-D ''`).\n\n`-A <chr>`\nSplice acceptor site pattern in regex notation (default: AG). Alternative nucleotides can be coded with character classes, for example, `-A 'A[CG]'` matches GT or GC. To switch off, specify empty character string (`-A ''`)\n\n`-S <chr>`\n*Sm* binding site motif and location in regex notation. This allows for searching additional motifs (*Sm* or otherwise) downstream of the splice donor site. The default (.{20,60}AT{4,6}G) matches the *Sm* binding sites ATTTTG, ATTTTTG or ATTTTTTG 20-60 bp downstream of the splice donor. Any custom regex patterns are supported, for example, `-S '.{20,60}AT{4,6}G.{20,30}T{3,5}'` to add a T-rich region 20-30 bp downstream of the *Sm* binding site. To disable, specify empty character string (`-S ''`).\n\n`-R <chr>`\nMaximum SL RNA length excluding SL (default: 80). This length is measured starting from and including the splice donor site. The default of 80 bp is appropriate for nematode SL RNAs that are c. 100 bp long including a c. 22 bp SL.\n\n`-O <chr>`\nMaximum overlap between the 3' end of the SL and the *trans*-splice acceptor site (default: 10). If a transcriptome reference is used, it might be prudent to decrease this value or even set it to 0 if the transcripts do not contain extra non-coding 5' bases; this will reduce noise.\n\n`-L <chr>`\nMaximum base-pair span within stem-loop (default: 35). This parameter controls stem-loop prediction in RNAFold. The default requires the first and last base of a stem loop to be no more than 35 bp apart.\n\n<a name=\"slidroutput\"></a>"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Output files:",
        "parent_header": [
          "SLIDR and SLOPPR: Pipelines for flexible identification of spliced leader *trans*-splicing and prediction of eukaryotic operons from RNA-Seq data",
          "Reference manual",
          "SLOPPR: Spliced leader-informed operon prediction from RNA-Seq data"
        ],
        "type": "Text_excerpt",
        "value": "Log files and intermediate output files are written to the directories `1-library_[library name]`, `1-tails` and `2-RNA-filters`, representing each main pipeline stage.\n\nFinal results are written to the directory `3-results-[suffix]` inside the specified output directory. The suffix of the directory name summarises the specified parameters to allow for convenient parameter sweeps within the same output directory, for example `slidr_toy_data/3-results-x1.0-l8-AGC-e1-R80-DGT-S.{20,60}AT{4,6}G-L35-AAG-O10`\n\nMain output:\n\n- `SL.summary.tsv`: tab-delimited table summarising SL sequence, read coverage, numbers of SL RNA genes, numbers of SL *trans*-splice acceptor sites, numbers (median and range) of stem loops and spatial structure stability statistics from [RNAFold](https://www.tbi.univie.ac.at/RNA/RNAfold.1.html) (MFE frequency and ensemble diversity). The spatial structure statistics could be used to manually rank SL candidates by plausibility (higher MFE frequency is better; lower ensemble diversity is better).\n- `SL.sequences.fa`: all SL sequences in FASTA format\n- `SL.RNA_genes.fa`: all SL RNA gene sequences in FASTA format\n- `SL.RNA_genes.gff3`: all SL RNA genes in GFF3 format\n- `SL.acceptor_sites.gff3`: all SL *trans*-splice acceptor sites in GFF3 format\n- `raw.summary.tsv`: same as `SL.summary.tsv`, but including singleton SLs (defined by only a single read and/or spliced to only a single acceptor site). \n- `raw.tails.tsv`: summary of read depths of each unique read tail and numbers of read alignment locations. These are raw statistics prior to SL assembly and SL RNA filters; these might be useful for exploration if no good SLs can be found, particularly for runs with a reference transcriptome instead of a genome.\n\nOutput per SL (in `SLs` subdirectory):\n\n- `SLs/*.RNA_genes.fa`: SL RNA gene sequences (FASTA) for each SL\n- `SLs/*.RNA_genes.gff3`: SL RNA gene sequences (GFF3) for each SL\n- `SLs/*.acceptor_sites`: SL *trans*-splice acceptor sites (GFF3) for each SL\n\nTo avoid writing potentially thousands of output files, SL-specific output files are written only for the first 100 SL candidates. If this is not enough, the limit can be increased manually in the script `slidr_consensus.R` (line 4: `filemax <- 100`). Data for specific SLs could also easily be extracted from the main output files using `grep` or `awk`.\n\nIf genome references annotations were supplied, an additional output file (`*.reference.txt`) is produced for each GFF3 output file, containing overlaps between each GFF3 entry and the genes/transcripts of the reference genome annotations (output of `bedtools intersect`). Note that SLTS acceptor sites are extended downstream by 100 bp to search for overlaps. This is a convenience function that does not replace careful manual curation of SL RNA genes and SLTS acceptor sites in a genome browser.\n\n<a name=\"slopprparams\"></a>"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "SLOPPR: Spliced leader-informed operon prediction from RNA-Seq data",
        "parent_header": [
          "SLIDR and SLOPPR: Pipelines for flexible identification of spliced leader *trans*-splicing and prediction of eukaryotic operons from RNA-Seq data",
          "Reference manual"
        ],
        "type": "Text_excerpt",
        "value": "<a name=\"refassembly2\"></a>\n#### Reference assembly\nSLOPPR requires a genomic reference assembly and genome annotations. If annotations are not available, we recommend generating *de novo* annotations from the RNA-Seq data using [BRAKER2](https://github.com/Gaius-Augustus/BRAKER) or [STRINGTIE](http://ccb.jhu.edu/software/stringtie/).\n\n`-g <file>`\nPath to genome assembly in FASTA(.gz) format.\n\n`-a <file>`\nPath to genome annotations in GFF(.gz) or GTF(.gz) format.\n\n<a name=\"slquantification\"></a>"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "SL quantification",
        "parent_header": [
          "SLIDR and SLOPPR: Pipelines for flexible identification of spliced leader *trans*-splicing and prediction of eukaryotic operons from RNA-Seq data",
          "Reference manual",
          "SLOPPR: Spliced leader-informed operon prediction from RNA-Seq data"
        ],
        "type": "Text_excerpt",
        "value": "`-s <file>`\nPath to SL sequences in FASTA format. Ensure that each SL has a unique name (FASTA header).\n\n`-n <num>`\nMinimum bp from 3' end of SL required to detect SL tail in read (default: 8). Increase this value if the SLs cannot be distinguished reliably at their 3'-most 8 bases. Note that longer tails will substantially reduce the number of SL reads recovered.\n\n`-e <num>`\nMaximum error rate for SL tail matching (default: 0.09). The default error rate requires no mismatches for tails up to 10 bp total length and allows for 1 mismatch for each 10 bp additional length (0-10 bp: 0; 11-21 bp: 1; 22-32 bp: 2; 33-40 bp: 3).\n\n`-f <chr>`\nGTF feature ID field used for counting reads (default: exon). If the genome annotations miss exon features, this option should be set to CDS. \n\n`-F <chr>`\nGTF meta-feature ID field used for summarising read counts (default: gene_id). If the genome annotations do not define genes, this option should be set to transcript_id. \n\n<a name=\"operonprediction\"></a>"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Operon prediction",
        "parent_header": [
          "SLIDR and SLOPPR: Pipelines for flexible identification of spliced leader *trans*-splicing and prediction of eukaryotic operons from RNA-Seq data",
          "Reference manual",
          "SLOPPR: Spliced leader-informed operon prediction from RNA-Seq data"
        ],
        "type": "Text_excerpt",
        "value": "`-z [geo|sum|median]`\nMethod for aggregating SL counts across libraries (default: geometric mean `-z geo`). The geometric mean is an appropriate statistic for summarising count data. We also implement sum and median, the latter of which may be more appropriate if giving weight to libraries with zero counts (see below).\n\n`-0` \nKeep libraries with zero counts when aggregating SL counts (default: remove zeros). When keeping zeros, we recommend aggregating with the median instead of the geometric mean. The geometric mean will drop all counts if at least one libraries has zero counts - such a stringent filter may be useful for removing lowly and inconsistently SL *trans*-spliced genes. \n\n`-S <file>`\nOptional file containing the names or FASTA headers of SLs (from those supplied by `-s`) that are specialised for resolving polycistrons (SL2-type SLs). Omit this option if SL specialisation is unknown or absent. Note that SLOPPR will additionally infer SL1/SL2-type subfunctionalisation irrespective of `-S` and do additional operon prediction runs using these inferred SL clusters. As a sanity check, the two inferred clusters should coincide with known SL1/SL2-type SLs. If SL2-type SLs are unknown, the two clusters represent the most likely candidates for SL1/SL2 types. \n\n`-d <num>`\nMinimum SL2:SL1 read ratio required to classify a gene as downstream operonic (default: infinity, i.e. no SL1 reads). SLOPPR will carry out three independent operon prediction runs:\n- SL2:SL1 >= d with SL types as specified with `-S`\n- Cluster1:Cluster2 >= d with inferred SL types\n- Cluster2:Cluster1 >= d with inferred SL types\n\nMany organisms with SL2-type SL specialisation do allow some degree of SL1-type *trans*-splicing at downstream operonic genes, so it is worthwhile to relax this option (e.g., `-d 2`)and tune it based on the genome-wide distribution of SL2:SL1 ratios.\n\n<a name=\"upstreambias\"></a>\n`-u`\nEnforce the same SL2-type bias at upstream operonic genes as at downstream operonic genes. By default, SLOPPR requires the upstream gene of an operon to have SL1-type bias or not to be SL *trans*-spliced at all. If no such gene is available, SLOPPR designates the first downstream gene as an ad-hoc upstream gene; operons with an \"adhoc\" upstream gene are flagged as provisional in the output because they violate the assumptions. The `-u` option results in a much stricter set of operons where all genes have SL2-bias.\n\n`-i <num>`\nMaximum intercistronic distance in predicted operons (default: infinity; x = infer). By default, SLOPPR predicts operonic genes solely based on SL2-bias and ignores intercistronic distances. This may mean that some operonic genes have unrealistically large intercistronic distances. Such false predictions can be avoided by supplying a fixed cutoff (for example, `-i 100`) or using automatic inference of the most likely cutoff (`-i x`) given the distribution of intercistronic distances among the initial set of operonic genes. Filtering by intercistronic distance is particularly important in organisms where no SL specialisation exists; in these situations one must tease apart operonic from monocistronic SL-receiving genes by exploring intercistronic distance distributions among SL *trans*-spliced genes.\n\n`-x <path>`\nReference operon annotations (GFF/GTF). If supplied, SLOPPR will examine predicted operons for overlap with these reference operons. Note that the GFF/GTF must contain only a single record per operon that spans all operonic genes. Do not include \"gene\" entries for individual operonic genes. This is a convenience option that is not designed to replace thorough synteny analysis.\n\n<a name=\"slopproutput\"></a>\n#### Output files:\n\nGenome-aligned SL reads (BAM format) merged from all libraries are written to the subdirectory `1-merged_SL_BAM`.\n\nRead quantification results against gene annotations are written to the subdirectory `2-counts`:\n\n- `bg.featureCounts.genes.*`: featureCounts results from initial end-to-end read alignments (background gene expression)\n- `un.featureCounts.genes.*`: featureCounts results from unsuccessful candidate reads (background gene expression)\n- `SL.featureCounts.genes.*`: featureCounts results from SL reads\n- `SL.featureCounts.exons.*`: featureCounts results from SL reads, quantified against curated gene annotations, where genes were split at internal exons receiving SL reads\n\n`*.raw.txt` versions are raw featureCounts count tables and `*.clean.txt` versions are simplified featureCounts tables used for analysis.\n\nOperon prediction results are written to the subdirectory `3-operons-[suffix]`. The suffix of the directory name summarises the specified parameters to allow for convenient parameter sweeps within the same output directory, for example `sloppr_toy_data/3-operons-zgeo-0remove-dinfinity-uno-iinfinity`. All output files are written both for the `SL.featureCounts.genes` and the `SL.featureCounts.exons` featureCounts tables:\n\n- `*.SL_clusters.txt`: inferred SL subfunctionalisation cluster and PCA/LDA coordinates for each library*SL combination\n- `*.SL_dendrogram_groups.txt`: hierarchical clustering memberships of each library*SL combination\n- `*.SL_genes.txt`: library-specific and overall frequencies of genes receiving any combination of SL types (SL1, SL2, SL1+SL2) or clusters (Cluster1, Cluster2, Cluster1+Cluster2)\n- `*.SL_readratio.txt`: quartiles of SL2:SL1, Cluster1:Cluster2 and Cluster2:Cluster1 read ratios across genes that receive both SL types.\n- `*.operons.summary.txt`: numbers of operons, operonic genes and distribution of operon sizes, using either SL2, Cluster1, or Cluster2 as polycistron resolvers\n- `*.operons.intergenic_distances.txt`: quartiles of intercistronic (=operonic) and intergenic (=non-operonic) distances, using either SL2, Cluster1, or Cluster2 as polycistron resolvers\n- `*.operons.[SL2|Cluster1|Cluster2].txt`: gene names, locations, distances, background gene expression (meanTPM), SL1/SL2 read counts (CPM), SL2:SL1 read ratios, inferred operonic status and quality (*pass* or *adhoc*; see [`-u` option](#upstreambias)) of all genes, using either SL2, Cluster1, or Cluster2 as polycistron resolvers\n- `*.operons.[SL2|Cluster1|Cluster2].gff3`: predicted operons and operonic genes in GFF3 format, using either SL2, Cluster1, or Cluster2 as polycistron resolvers. Operons are flagged as *quality:provisional* if they contain *adhoc* upstream genes (see [`-u` option](#upstreambias))\n\nMost of these files are also available in graphical format as PDF. Log files and intermediate output files are written to the directories `1-library_[library name]` and `2-counts`.\n\n<a name=\"guidelines\"></a>"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "type": "Text_excerpt",
        "value": "Please cite the BMC Bioinformatics article:\n\nMarius A. Wenzel, Berndt Mueller, Jonathan Pettitt. SLIDR and SLOPPR: Flexible identification of spliced leader trans-splicing and prediction of eukaryotic operons from RNA-Seq data.\nBioinformatics 22, 140 (2021), [doi: https://doi.org/10.1186/s12859-021-04009-7](https://bmcbioinformatics.biomedcentral.com/articles/10.1186/s12859-021-04009-7)\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/wenzelm/slidr-sloppr"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-06-28T12:14:23Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-09-25T08:39:02Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9544080655518025,
      "result": {
        "original_header": "SLIDR and SLOPPR: Pipelines for flexible identification of spliced leader *trans*-splicing and prediction of eukaryotic operons from RNA-Seq data",
        "type": "Text_excerpt",
        "value": "SLIDR and SLOPPR identify spliced leaders (SLs) from 5'-tails of RNA-Seq reads that are soft-clipped after read alignment to a reference genome or transcriptome. SLIDR (Spliced leader identification from RNA-Seq data) assembles these read tails into full-length SLs and functional SL RNA genes. SLOPPR (Spliced leader-informed operon prediction from RNA-Seq data) searches read tails for a set of known SLs, quantifies SL-containing reads against all genes in the genome and uses SL usage patterns across genes to predict operons. SLOPPR can incorporate known SL specialisation for resolving downstream operonic genes (e.g., SL1/SL2-type SLs in nematodes), infer such specialisation *de novo*, or handle scenarios without SL specialisation. \nFull descriptions of the implementation are detailed in the BMC Bioinformatics article: [https://doi.org/10.1186/s12859-021-04009-7](https://doi.org/10.1186/s12859-021-04009-7) \n**Table of contents** \n"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9374265649338885,
      "result": {
        "original_header": "I want to analyse hundreds of RNA-Seq libraries - can SLIDR handle it?",
        "type": "Text_excerpt",
        "value": "Yes, but be aware of bottlenecks: \n- Tail alignment with BLASTN may be time consuming despite multithreading.\n- Final SL consensus calling in R may require large amounts of RAM if many millions of reads pass filters. \nSLIDR typically does not need huge amounts of raw data to yield robust results, so consider starting with a small number of libraries. \n"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9403678120162411,
      "result": {
        "original_header": "SLOPPR",
        "type": "Text_excerpt",
        "value": "SLOPPR finds operons by designating downstream operonic genes via SL2-type bias; upstream genes are then added to each tract of downstream operonic genes. Therefore, you must identify what SLs your organism uses to resolve downstream operonic genes. This may be a specialised set of SLs that are not usually added to any other genes, or it may be the same SLs that are also added to upstream operonic or monocistronic genes. SLOPPR can model virtually any scenario, but requires careful specification of several parameters (`-S`, `-u`, `-d`, `-i`) \n"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9275035058988846,
      "result": {
        "original_header": "Multiple SLs; some are specialised for resolving downstream operonic genes",
        "type": "Text_excerpt",
        "value": "This is the default SL1/SL2-type scenario encountered in *C. elegans* and many other nematodes. It is a good place to start even if your organism is not a nematode. Simply supply a text file containing the names of the SL2-type SLs with the `-S` option: \nSLOPPR will designate downstream operonic genes via SL2-type bias and disallow SL2-type bias for upstream operonic genes where possible. Relax the SL2:SL1 ratio (`-d` option) if you want to allow some SL1-type reads at downstream genes, and also use the `-i` option to set a maximum intercistronic distance (e.g., 500 bp) if appropriate: \nNote that SLOPPR also carries out additional prediction runs using inferred SL types instead of those supplied with `-S`. Use the SL clustering results and the predicted operons is as a sanity check to verify that the assumed SL1/SL2-type SLs are plausible. If SLOPPR's inferred SL clusters do not coincide with the assumed SL1/SL2 types, consider that you may have mis-specified your SLs or your SL types may not be as well characterised as expected.  \n"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.898864545784721,
      "result": {
        "original_header": "Multiple SLs; all are specialised for resolving downstream operonic genes",
        "type": "Text_excerpt",
        "value": "Since SL2:SL1 ratios are undefined in this case, every gene receiving any SL will be designated as downstream operonic. Each operon will also receive an upstream gene that is not SL *trans*-spliced (if possible). By definition, no monocistronic SL-receiving genes are designated. \nUse the inferred SL clustering as a sanity check to verify absence of SL subfunctionalisation. \n"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9560685051363547,
      "result": {
        "original_header": "Multiple SLs; specialisation absent",
        "type": "Text_excerpt",
        "value": "In this situation, both operonic and monocistronic genes receive the same SLs. Instead of using SL2:SL1 read ratios, we must tease out operonic genes via short intercistronic distances from monocistronic genes with large intergenic distances.  \nThese filters will cause SL-receiving genes with large intergenic distances to be designated as \"monocistronic\". \n"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9820336376061259,
      "result": {
        "original_header": "I want to analyse hundreds of RNA-Seq libraries - can SLOPPR handle it?",
        "type": "Text_excerpt",
        "value": "- SL clustering in R may be time consuming for hundreds of samples \n"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9407151611080424,
      "result": {
        "original_header": "22/08/2023",
        "type": "Text_excerpt",
        "value": "new versions SLIDR 1.2 and SLOPPR 1.2:\n- implemented automatic HPC job submission (defaults to SLURM, but submit commands can be customised)\n- SLIDR: SLTS site GFF now includes numbers of SL reads supporting each site\n- SLIDR: simplified RNAfold output reports\n \n"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9453269098380916,
      "result": {
        "original_header": "21/01/2022",
        "type": "Text_excerpt",
        "value": "new version SLIDR 1.1.6: fixed error when reading empty columns with data.table\n \n"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9232677325773091,
      "result": {
        "original_header": "30/07/2021",
        "type": "Text_excerpt",
        "value": "new versions SLIDR 1.1.5 and SLOPPR 1.1.5: fixed errors when BAM files are specified as input files\n \n"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8532044713130529,
      "result": {
        "original_header": "23/07/2021",
        "type": "Text_excerpt",
        "value": "new version SLOPPR 1.1.4: fixed an error and a silent bug triggered in some circumstances by SL names that are contained in other SL names\n \n"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.985970396132351,
      "result": {
        "original_header": "23/03/2021",
        "type": "Text_excerpt",
        "value": "- new version SLIDR 1.1.4: fixed compatibility issue with awk version <4.0; added dustmasking to tails to reduce computational burden of repetitive tails; reduced R memory usage for highly repetitive data; re-tuned strandedness inference (more conservative) \n- new version SLOPPR 1.1.3: fixed bugs when using single-end data; added *quality* attribute to operon GFF to flag provisional operons with missing upstream genes\n \n"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9775927191349495,
      "result": {
        "original_header": "19/02/2021",
        "type": "Text_excerpt",
        "value": "- new version SLIDR 1.1.3: added option to choose distance-based or abundance-based greedy clustering (DGC, AGC); fixed out-of-memory errors with large datasets; added gzip support for genome/transcriptome and annotations\n- new version SLOPPR 1.1.2: improved gene-curation algorithm: now splits consecutive exons if reads are shorter than exon length; added gzip support for genome and annotations; fixed compatibility issue with SUBREAD 2.0.1; added TPM to output GFF\n \n"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/wenzelm/slidr-sloppr/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/wenzelm/slidr-sloppr/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "wenzelm/slidr-sloppr"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SLIDR and SLOPPR: Pipelines for flexible identification of spliced leader trans-splicing and prediction of eukaryotic operons from RNA-Seq data"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/sloppr.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/slidr.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/example_data.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/slidr_library.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/sloppr_library.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "SLIDR and SLOPPR: Pipelines for flexible identification of spliced leader *trans*-splicing and prediction of eukaryotic operons from RNA-Seq data"
        ],
        "type": "Text_excerpt",
        "value": "    # clone repository from GitHub\n    cd path/to/apps\n    git clone https://github.com/wenzelm/slidr-sloppr.git\n    \n    # make scripts executable\n    chmod u+x slidr-sloppr/*\n\n    # add installation directory to PATH\n    export PATH=$PATH:path/to/apps/slidr-sloppr\n\n<a name=\"dependencies\"></a>"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Reference manual",
        "parent_header": [
          "SLIDR and SLOPPR: Pipelines for flexible identification of spliced leader *trans*-splicing and prediction of eukaryotic operons from RNA-Seq data"
        ],
        "type": "Text_excerpt",
        "value": "    # list all command-line options \n    slidr.sh -h\n    sloppr.sh -h\n\n<a name=\"general\"></a>"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "General options for both pipelines",
        "parent_header": [
          "SLIDR and SLOPPR: Pipelines for flexible identification of spliced leader *trans*-splicing and prediction of eukaryotic operons from RNA-Seq data",
          "Reference manual"
        ],
        "type": "Text_excerpt",
        "value": "SLIDR and SLOPPR share general options for data input and output:\n\n`-o <dir>`\nPath to output directory. If unspecified, the output directory is \"./SLIDR_[date+time]\" or \"./SLOPPR_[date+time]\"\n\n`-p <chr>`\nName prefix for predicted SLs or operons (default: SL for SLIDR and OP for SLOPPR). It is recommended to follow a three-letter abbreviation of the organism, for example `Cel` for *C. elegans*. \n\n`-c <num>`\nCPU threads (default: 8. To use all available cores, enter  `$(nproc)`)\n\n`--tmp <dir>`\nPath to directory for temporary files. Default is your system's TMPDIR; specifying this option will change TMPDIR. For running SLIDR on large datasets, it is highly recommended to choose a large TMP directory to avoid potential bottlenecks associated with the default `/tmp` partition.\n\n<a name=\"input\"></a>"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "RNA-Seq data input",
        "parent_header": [
          "SLIDR and SLOPPR: Pipelines for flexible identification of spliced leader *trans*-splicing and prediction of eukaryotic operons from RNA-Seq data",
          "Reference manual",
          "General options for both pipelines"
        ],
        "type": "Text_excerpt",
        "value": "SLIDR and SLOPPR accept single-end or paired-end RNA-Seq reads in FASTQ(.gz) format.\n\nRead alignments in BAM format are also accepted, for convenience of re-using alignments from previous pipeline runs. Please note that generic BAM files produced outside the pipelines without appropriate parameters for [SLIDR](#softclipalign) or [SLOPPR](#slopprguide9) are NOT suitable as input! Please extract reads from such alignments in FASTQ format and then use these reads as input for the pipelines.\n\nThe following options are available to specify a single library:\n\n`-1 <file>`\nPath to R1 reads in FASTQ(.gz) or FASTA(.gz) format.\n\n`-2 <file>`\nPath to R2 reads in FASTQ(.gz) or FASTA(.gz) format.\n\n`-q`\nIf specified, basic quality-trimming of 3' ends of reads and removal of Illumina adapters and poly-A/T tails is carried out using `cutadapt -a AGATCGGAAGAGC -a 'A{100}' -g 'T{100}' -n 3 -q 20 -m 20 -l 150 -O 1`. This is a useful convenience function but it is strongly recommended to carry out careful data filtering and trimming prior to running SLIDR or SLOPPR.\n\n`-b <file>`\nPath to pre-generated SLIDR/SLOPPR read alignments in BAM format. A BAI index file must be present in the same location. \n\n`-r <0|1|2|x>`\nRead strandedness generated during chemical library prep. This parameter is equivalent to the `-s` option in FeatureCounts:\n\n    0 = unstranded data (any read may originate from sense strand)\n    1 = forward stranded data (R1 reads originate from sense strand)\n    2 = reverse stranded data (R2 reads originate from sense strand)\n\nIf strandedness is unknown, setting `-r x` (default) will infer it if genome annotations are supplied. If in doubt, unstranded analysis (`-r 0`) is always acceptable even for stranded data. Stranded data will produce less noisy results if the correct strandedness parameter is supplied. \n\nMultiple libraries must not be specified with these options but instead via a configuration file supplied with the `-m <file>` option. This tab-delimited file must contain six columns:\n- Column 1: Library name\n- Column 2: Library strandedness (= `-r` option)\n- Column 3: Path to R1 reads (= `-1` option)\n- Column 4: Path to R2 reads (= `-2` option)\n- Column 5: \"trim\" to quality-trim reads (= `-q` option)\n- Column 6: Path to read alignments (= `-b` option)\n\nExample file generated for the example dataset above:\n\n    ERR2756719\tx\ttoy_data/ERR2756719_1.fastq.gz\ttoy_data/ERR2756719_2.fastq.gz\ttrim\n    ERR2756720\tx\ttoy_data/ERR2756720_1.fastq.gz\ttoy_data/ERR2756720_2.fastq.gz\ttrim\n\nLeave columns empty if they are not required, for example:\n\n    Library1 <tab> x <tab> R1.trimmed.fq.gz <tab> R2.trimmed.fq.gz\n    Library2 <tab> 0 <tab> single_end.reads.fq.gz <tab> <tab> trim\n    Library3 <tab> 2 <tab> <tab> <tab> <tab> alignments.bam\n\nThis configuration file allows great flexibility in mixing single-end and paired-end libraries with different strandedness and existing read alignments.\nNote: Avoid `#` characters in the file contents; they will be stripped! \n\n<a name=\"hpc\"></a>"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Parallel execution on HPC clusters",
        "parent_header": [
          "SLIDR and SLOPPR: Pipelines for flexible identification of spliced leader *trans*-splicing and prediction of eukaryotic operons from RNA-Seq data",
          "Reference manual",
          "General options for both pipelines"
        ],
        "type": "Text_excerpt",
        "value": "Since version 1.2, SLIDR and SLOPPR can process libraries in parallel on HPC clusters. Default behaviour is sequential processing as in older versions.\n\n`--hpc`\nSwitch on HPC mode. Automatic job submission and dependency control will be used to carry out the following workflow:\n\n1) The main script generates the genome/transcriptome index as in sequential mode\n2) For each library, a separate job is submitted, carrying out read alignment and SL tail extraction\n3) A final dependent job is submitted, finishing the pipeline after all parallel library jobs have completed\n\nThe internal job submission control is designed for the SLURM job scheduler, but can be customised with the following options:\n\n`--hpcp <chr>`\nCommand for submitting parallel jobs (one job per library). The default requests 4G of memory per specified thread (see `-c`). To modify, please specify the full submit command including all resources required **including an option for returning the job ID in plain format**:\n\n    --hpcp 'sbatch -c 4 --mem 8G --parsable'\t\t\t\t# SLURM with hard-coded resources\n\t--hpcp 'qsub -v -cwd -pe smp 4 -l h_vmem=2G -terse'\t\t# Sun Grid Engine format\n\t--hpcp 'msub -l nodes=1:ppn=4,pmem=8gb'\t\t\t\t\t# MOAB format\n\n`--hpcd <chr>`\nCommand for submitting the final dependent job. The default requests 8G of memory per specified thread (see `-c`). To modify, please specify the full submit command **ending with the option for specifying a job dependency list** for your HPC:\n\n    --hpcd 'sbatch -c 4 --mem 32G -d afterok:'\t\t\t\t\t\t# SLURM with hard-coded resources\n\t--hpcd 'qsub -v -cwd -pe smp 4 -l h_vmem=8G -hold_jid '\t\t\t# Sun Grid Engine format\n\t--hpcd 'msub -l nodes=1:ppn=4,pmem=32gb -l depend=afterok:'\t\t# MOAB format\n\n`--hpcs <chr>`  \nSeparator for job IDs in job dependency option. Default is ':' but some job schedulers (e.g., Sun Grid Engine) may require a comma instead (`--hpcs ','`)\n\nIf these options are not flexible enough to work with your HPC, you can still make use of parallel processing by doing the following:\n\n1) Manually set up a task array job for aligning reads for all libraries (SLIDR:[HISAT2 or BOWTIE2 commands](#softclipalign); SLOPPR: `hisat2 --no-softclip --no-discordant`) \n2) Use the BAM files instead of the raw reads as input for SLIDR/SLOPPR (`-b` option)\n\n<a name=\"slidrparams\"></a>"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "SLIDR: Spliced leader identification from RNA-Seq data",
        "parent_header": [
          "SLIDR and SLOPPR: Pipelines for flexible identification of spliced leader *trans*-splicing and prediction of eukaryotic operons from RNA-Seq data",
          "Reference manual"
        ],
        "type": "Text_excerpt",
        "value": "<a name=\"refassembly\"></a>"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Read tail clustering",
        "parent_header": [
          "SLIDR and SLOPPR: Pipelines for flexible identification of spliced leader *trans*-splicing and prediction of eukaryotic operons from RNA-Seq data",
          "Reference manual",
          "SLIDR: Spliced leader identification from RNA-Seq data"
        ],
        "type": "Text_excerpt",
        "value": "`-l <num>`\nMinimum length of soft-clipped tails to retain after alignment (default: 8). If very few reads pass filters it may be useful to decrease this value.\n\n<a name=\"softclipalign\"></a>\n`-x <num>`\nScale factor for upper tail length limit (default: 1.0). This factor controls the amount of soft-clipping allowed during read alignment in HISAT2 or BOWTIE2. This is achieved via the minimum score functions:\n\n    hisat2  --score-min L,5,-0.4*x --sp 1,0 --mp 3,1\n    bowtie2 --score-min L,5,1-(0.4*x) --ma 1 --mp 3,1 --local\n\n- In HISAT2, a perfectly aligned read has a score of 0. By setting the soft-clipping penalty to 1 (`--sp 1,0`), the minimum score will be equivalent to the maximum number of soft-clipped bases. The above formula thus yields a minimum score of `5 - 0.4*x*readlength = -35` for a 100 bp read and `-x 1.0`, or a maximum of 35 soft-clipped bases. Assuming no mismatches, no gaps and no 3' soft-clipping, these settings can thus capture an SL tail of up to 35 bp. In practice, this length is reduced due to mismatches, gaps and 3' soft-clipping caused by poor-quality read ends or adapter contamination, but empirically works well for capturing nematode-sized SLs (c. 22 bp) even from 75 bp reads. \n- In BOWTIE2 local alignment mode, the logic is inverted. A read starts with a score of 0 and accrues a match bonus for each matched base. By setting this match bonus to 1 (`--ma 1`), a perfectly aligned 100 bp read would have a score of 100. Allowing an SL tail of up to 35 bp, the minimum score would have to be `100 - 35 = 65`, which corresponds to the above formula `5 + (1-(0.4*x))*readlength = 65`\n\nModifying the scale factor `-x` can restrict or expand the upper tail length limit according to the formulae above and illustrated in this table (rows = read length; columns = x; values = limit):\n\n    x\t0.25\t0.5\t0.75\t1.0\t1.25\t1.5\t1.75\t2.0\n    ---------------------------------------------------------------------\n    50bp\t0\t5\t10\t15\t20\t25\t30\t35\n    75bp\t3\t10\t18\t25\t33\t40\t48\t55\n    100bp\t5\t15\t25\t35\t45\t55\t65\t75\n    125bp\t8\t20\t33\t45\t58\t70\t83\t95\n    150bp\t10\t25\t40\t55\t70\t85\t100\t115\n\n`--agc`\nCluster read tails using abundance-based greedy clustering (AGC) instead of the default distance-based greedy clustering (DGC) ([what's that?](https://link.springer.com/article/10.1186/s40168-015-0081-x)). Use this option if DGC yields poor coverage in the final SLs. See also the [parameter guidelines](#agc) for more information.\n\n<a name=\"rnafilter\"></a>"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "SL RNA filtering",
        "parent_header": [
          "SLIDR and SLOPPR: Pipelines for flexible identification of spliced leader *trans*-splicing and prediction of eukaryotic operons from RNA-Seq data",
          "Reference manual",
          "SLIDR: Spliced leader identification from RNA-Seq data"
        ],
        "type": "Text_excerpt",
        "value": "`-e <num>`\nBLASTN E-value (default: 1). This parameter controls the stringency of the alignment of the read tail cluster centroids against the reference assembly. The default value of 1 is appropriate for centroid lengths as low as 10 bp and should rarely require modifying. Decreasing the value will require longer tail matches and thus substantially reduce the numbers of reads passing filteres. Increasing the value will allow shorter centroids to be retained, which we found necessary when analysing the short 16bp SL in *Ciona intestinalis*. Note that increasing this value will substantially increase the numbers of sequence alignments to process.\n\n`-D <chr>`\nSplice donor site pattern in regex notation (default: GT). Alternative nucleotides can be coded with character classes, for example, `-D 'G[TC]'` matches GT or GC, and `-D 'A[AG][TC]'` matches AAT, AAC, AGT or AGC. To switch off, specify empty character string (`-D ''`).\n\n`-A <chr>`\nSplice acceptor site pattern in regex notation (default: AG). Alternative nucleotides can be coded with character classes, for example, `-A 'A[CG]'` matches GT or GC. To switch off, specify empty character string (`-A ''`)\n\n`-S <chr>`\n*Sm* binding site motif and location in regex notation. This allows for searching additional motifs (*Sm* or otherwise) downstream of the splice donor site. The default (.{20,60}AT{4,6}G) matches the *Sm* binding sites ATTTTG, ATTTTTG or ATTTTTTG 20-60 bp downstream of the splice donor. Any custom regex patterns are supported, for example, `-S '.{20,60}AT{4,6}G.{20,30}T{3,5}'` to add a T-rich region 20-30 bp downstream of the *Sm* binding site. To disable, specify empty character string (`-S ''`).\n\n`-R <chr>`\nMaximum SL RNA length excluding SL (default: 80). This length is measured starting from and including the splice donor site. The default of 80 bp is appropriate for nematode SL RNAs that are c. 100 bp long including a c. 22 bp SL.\n\n`-O <chr>`\nMaximum overlap between the 3' end of the SL and the *trans*-splice acceptor site (default: 10). If a transcriptome reference is used, it might be prudent to decrease this value or even set it to 0 if the transcripts do not contain extra non-coding 5' bases; this will reduce noise.\n\n`-L <chr>`\nMaximum base-pair span within stem-loop (default: 35). This parameter controls stem-loop prediction in RNAFold. The default requires the first and last base of a stem loop to be no more than 35 bp apart.\n\n<a name=\"slidroutput\"></a>"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Output files:",
        "parent_header": [
          "SLIDR and SLOPPR: Pipelines for flexible identification of spliced leader *trans*-splicing and prediction of eukaryotic operons from RNA-Seq data",
          "Reference manual",
          "SLOPPR: Spliced leader-informed operon prediction from RNA-Seq data"
        ],
        "type": "Text_excerpt",
        "value": "Log files and intermediate output files are written to the directories `1-library_[library name]`, `1-tails` and `2-RNA-filters`, representing each main pipeline stage.\n\nFinal results are written to the directory `3-results-[suffix]` inside the specified output directory. The suffix of the directory name summarises the specified parameters to allow for convenient parameter sweeps within the same output directory, for example `slidr_toy_data/3-results-x1.0-l8-AGC-e1-R80-DGT-S.{20,60}AT{4,6}G-L35-AAG-O10`\n\nMain output:\n\n- `SL.summary.tsv`: tab-delimited table summarising SL sequence, read coverage, numbers of SL RNA genes, numbers of SL *trans*-splice acceptor sites, numbers (median and range) of stem loops and spatial structure stability statistics from [RNAFold](https://www.tbi.univie.ac.at/RNA/RNAfold.1.html) (MFE frequency and ensemble diversity). The spatial structure statistics could be used to manually rank SL candidates by plausibility (higher MFE frequency is better; lower ensemble diversity is better).\n- `SL.sequences.fa`: all SL sequences in FASTA format\n- `SL.RNA_genes.fa`: all SL RNA gene sequences in FASTA format\n- `SL.RNA_genes.gff3`: all SL RNA genes in GFF3 format\n- `SL.acceptor_sites.gff3`: all SL *trans*-splice acceptor sites in GFF3 format\n- `raw.summary.tsv`: same as `SL.summary.tsv`, but including singleton SLs (defined by only a single read and/or spliced to only a single acceptor site). \n- `raw.tails.tsv`: summary of read depths of each unique read tail and numbers of read alignment locations. These are raw statistics prior to SL assembly and SL RNA filters; these might be useful for exploration if no good SLs can be found, particularly for runs with a reference transcriptome instead of a genome.\n\nOutput per SL (in `SLs` subdirectory):\n\n- `SLs/*.RNA_genes.fa`: SL RNA gene sequences (FASTA) for each SL\n- `SLs/*.RNA_genes.gff3`: SL RNA gene sequences (GFF3) for each SL\n- `SLs/*.acceptor_sites`: SL *trans*-splice acceptor sites (GFF3) for each SL\n\nTo avoid writing potentially thousands of output files, SL-specific output files are written only for the first 100 SL candidates. If this is not enough, the limit can be increased manually in the script `slidr_consensus.R` (line 4: `filemax <- 100`). Data for specific SLs could also easily be extracted from the main output files using `grep` or `awk`.\n\nIf genome references annotations were supplied, an additional output file (`*.reference.txt`) is produced for each GFF3 output file, containing overlaps between each GFF3 entry and the genes/transcripts of the reference genome annotations (output of `bedtools intersect`). Note that SLTS acceptor sites are extended downstream by 100 bp to search for overlaps. This is a convenience function that does not replace careful manual curation of SL RNA genes and SLTS acceptor sites in a genome browser.\n\n<a name=\"slopprparams\"></a>"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "SLOPPR: Spliced leader-informed operon prediction from RNA-Seq data",
        "parent_header": [
          "SLIDR and SLOPPR: Pipelines for flexible identification of spliced leader *trans*-splicing and prediction of eukaryotic operons from RNA-Seq data",
          "Reference manual"
        ],
        "type": "Text_excerpt",
        "value": "<a name=\"refassembly2\"></a>\n#### Reference assembly\nSLOPPR requires a genomic reference assembly and genome annotations. If annotations are not available, we recommend generating *de novo* annotations from the RNA-Seq data using [BRAKER2](https://github.com/Gaius-Augustus/BRAKER) or [STRINGTIE](http://ccb.jhu.edu/software/stringtie/).\n\n`-g <file>`\nPath to genome assembly in FASTA(.gz) format.\n\n`-a <file>`\nPath to genome annotations in GFF(.gz) or GTF(.gz) format.\n\n<a name=\"slquantification\"></a>"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "SL quantification",
        "parent_header": [
          "SLIDR and SLOPPR: Pipelines for flexible identification of spliced leader *trans*-splicing and prediction of eukaryotic operons from RNA-Seq data",
          "Reference manual",
          "SLOPPR: Spliced leader-informed operon prediction from RNA-Seq data"
        ],
        "type": "Text_excerpt",
        "value": "`-s <file>`\nPath to SL sequences in FASTA format. Ensure that each SL has a unique name (FASTA header).\n\n`-n <num>`\nMinimum bp from 3' end of SL required to detect SL tail in read (default: 8). Increase this value if the SLs cannot be distinguished reliably at their 3'-most 8 bases. Note that longer tails will substantially reduce the number of SL reads recovered.\n\n`-e <num>`\nMaximum error rate for SL tail matching (default: 0.09). The default error rate requires no mismatches for tails up to 10 bp total length and allows for 1 mismatch for each 10 bp additional length (0-10 bp: 0; 11-21 bp: 1; 22-32 bp: 2; 33-40 bp: 3).\n\n`-f <chr>`\nGTF feature ID field used for counting reads (default: exon). If the genome annotations miss exon features, this option should be set to CDS. \n\n`-F <chr>`\nGTF meta-feature ID field used for summarising read counts (default: gene_id). If the genome annotations do not define genes, this option should be set to transcript_id. \n\n<a name=\"operonprediction\"></a>"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Operon prediction",
        "parent_header": [
          "SLIDR and SLOPPR: Pipelines for flexible identification of spliced leader *trans*-splicing and prediction of eukaryotic operons from RNA-Seq data",
          "Reference manual",
          "SLOPPR: Spliced leader-informed operon prediction from RNA-Seq data"
        ],
        "type": "Text_excerpt",
        "value": "`-z [geo|sum|median]`\nMethod for aggregating SL counts across libraries (default: geometric mean `-z geo`). The geometric mean is an appropriate statistic for summarising count data. We also implement sum and median, the latter of which may be more appropriate if giving weight to libraries with zero counts (see below).\n\n`-0` \nKeep libraries with zero counts when aggregating SL counts (default: remove zeros). When keeping zeros, we recommend aggregating with the median instead of the geometric mean. The geometric mean will drop all counts if at least one libraries has zero counts - such a stringent filter may be useful for removing lowly and inconsistently SL *trans*-spliced genes. \n\n`-S <file>`\nOptional file containing the names or FASTA headers of SLs (from those supplied by `-s`) that are specialised for resolving polycistrons (SL2-type SLs). Omit this option if SL specialisation is unknown or absent. Note that SLOPPR will additionally infer SL1/SL2-type subfunctionalisation irrespective of `-S` and do additional operon prediction runs using these inferred SL clusters. As a sanity check, the two inferred clusters should coincide with known SL1/SL2-type SLs. If SL2-type SLs are unknown, the two clusters represent the most likely candidates for SL1/SL2 types. \n\n`-d <num>`\nMinimum SL2:SL1 read ratio required to classify a gene as downstream operonic (default: infinity, i.e. no SL1 reads). SLOPPR will carry out three independent operon prediction runs:\n- SL2:SL1 >= d with SL types as specified with `-S`\n- Cluster1:Cluster2 >= d with inferred SL types\n- Cluster2:Cluster1 >= d with inferred SL types\n\nMany organisms with SL2-type SL specialisation do allow some degree of SL1-type *trans*-splicing at downstream operonic genes, so it is worthwhile to relax this option (e.g., `-d 2`)and tune it based on the genome-wide distribution of SL2:SL1 ratios.\n\n<a name=\"upstreambias\"></a>\n`-u`\nEnforce the same SL2-type bias at upstream operonic genes as at downstream operonic genes. By default, SLOPPR requires the upstream gene of an operon to have SL1-type bias or not to be SL *trans*-spliced at all. If no such gene is available, SLOPPR designates the first downstream gene as an ad-hoc upstream gene; operons with an \"adhoc\" upstream gene are flagged as provisional in the output because they violate the assumptions. The `-u` option results in a much stricter set of operons where all genes have SL2-bias.\n\n`-i <num>`\nMaximum intercistronic distance in predicted operons (default: infinity; x = infer). By default, SLOPPR predicts operonic genes solely based on SL2-bias and ignores intercistronic distances. This may mean that some operonic genes have unrealistically large intercistronic distances. Such false predictions can be avoided by supplying a fixed cutoff (for example, `-i 100`) or using automatic inference of the most likely cutoff (`-i x`) given the distribution of intercistronic distances among the initial set of operonic genes. Filtering by intercistronic distance is particularly important in organisms where no SL specialisation exists; in these situations one must tease apart operonic from monocistronic SL-receiving genes by exploring intercistronic distance distributions among SL *trans*-spliced genes.\n\n`-x <path>`\nReference operon annotations (GFF/GTF). If supplied, SLOPPR will examine predicted operons for overlap with these reference operons. Note that the GFF/GTF must contain only a single record per operon that spans all operonic genes. Do not include \"gene\" entries for individual operonic genes. This is a convenience option that is not designed to replace thorough synteny analysis.\n\n<a name=\"slopproutput\"></a>\n#### Output files:\n\nGenome-aligned SL reads (BAM format) merged from all libraries are written to the subdirectory `1-merged_SL_BAM`.\n\nRead quantification results against gene annotations are written to the subdirectory `2-counts`:\n\n- `bg.featureCounts.genes.*`: featureCounts results from initial end-to-end read alignments (background gene expression)\n- `un.featureCounts.genes.*`: featureCounts results from unsuccessful candidate reads (background gene expression)\n- `SL.featureCounts.genes.*`: featureCounts results from SL reads\n- `SL.featureCounts.exons.*`: featureCounts results from SL reads, quantified against curated gene annotations, where genes were split at internal exons receiving SL reads\n\n`*.raw.txt` versions are raw featureCounts count tables and `*.clean.txt` versions are simplified featureCounts tables used for analysis.\n\nOperon prediction results are written to the subdirectory `3-operons-[suffix]`. The suffix of the directory name summarises the specified parameters to allow for convenient parameter sweeps within the same output directory, for example `sloppr_toy_data/3-operons-zgeo-0remove-dinfinity-uno-iinfinity`. All output files are written both for the `SL.featureCounts.genes` and the `SL.featureCounts.exons` featureCounts tables:\n\n- `*.SL_clusters.txt`: inferred SL subfunctionalisation cluster and PCA/LDA coordinates for each library*SL combination\n- `*.SL_dendrogram_groups.txt`: hierarchical clustering memberships of each library*SL combination\n- `*.SL_genes.txt`: library-specific and overall frequencies of genes receiving any combination of SL types (SL1, SL2, SL1+SL2) or clusters (Cluster1, Cluster2, Cluster1+Cluster2)\n- `*.SL_readratio.txt`: quartiles of SL2:SL1, Cluster1:Cluster2 and Cluster2:Cluster1 read ratios across genes that receive both SL types.\n- `*.operons.summary.txt`: numbers of operons, operonic genes and distribution of operon sizes, using either SL2, Cluster1, or Cluster2 as polycistron resolvers\n- `*.operons.intergenic_distances.txt`: quartiles of intercistronic (=operonic) and intergenic (=non-operonic) distances, using either SL2, Cluster1, or Cluster2 as polycistron resolvers\n- `*.operons.[SL2|Cluster1|Cluster2].txt`: gene names, locations, distances, background gene expression (meanTPM), SL1/SL2 read counts (CPM), SL2:SL1 read ratios, inferred operonic status and quality (*pass* or *adhoc*; see [`-u` option](#upstreambias)) of all genes, using either SL2, Cluster1, or Cluster2 as polycistron resolvers\n- `*.operons.[SL2|Cluster1|Cluster2].gff3`: predicted operons and operonic genes in GFF3 format, using either SL2, Cluster1, or Cluster2 as polycistron resolvers. Operons are flagged as *quality:provisional* if they contain *adhoc* upstream genes (see [`-u` option](#upstreambias))\n\nMost of these files are also available in graphical format as PDF. Log files and intermediate output files are written to the directories `1-library_[library name]` and `2-counts`.\n\n<a name=\"guidelines\"></a>"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9583209124662105,
      "result": {
        "original_header": "SLIDR and SLOPPR: Pipelines for flexible identification of spliced leader *trans*-splicing and prediction of eukaryotic operons from RNA-Seq data",
        "type": "Text_excerpt",
        "value": "<a name=\"installation\"></a> \n"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9799393215162042,
      "result": {
        "original_header": "Multiple SLs; some are specialised for resolving downstream operonic genes",
        "type": "Text_excerpt",
        "value": "    sloppr.sh -s sl_sequences.fasta -S sl2-type.txt \nSLOPPR will designate downstream operonic genes via SL2-type bias and disallow SL2-type bias for upstream operonic genes where possible. Relax the SL2:SL1 ratio (`-d` option) if you want to allow some SL1-type reads at downstream genes, and also use the `-i` option to set a maximum intercistronic distance (e.g., 500 bp) if appropriate: \n    sloppr.sh -s sl_sequences.fasta -S sl2-type.txt -d 2 -i 500 \n"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.896563112587726,
      "result": {
        "original_header": "Multiple SLs; all are specialised for resolving downstream operonic genes",
        "type": "Text_excerpt",
        "value": "Omit the `-S` option to automatically designate all SLs as \"SL2-type\": \n    sloppr.sh -s sl_sequences.fasta \n"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8531040458475251,
      "result": {
        "original_header": "Multiple SLs; all are specialised for resolving upstream and downstream operonic genes",
        "type": "Text_excerpt",
        "value": "    sloppr.sh -s sl_sequences.fasta -u \n"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9202881564373325,
      "result": {
        "original_header": "Multiple SLs; specialisation absent",
        "type": "Text_excerpt",
        "value": "Then, run the automatic intercistronic distance filter, or specify a cutoff directly (e.g., 500 bp): \n    sloppr.sh -s sl_sequences.fasta -i x\n    sloppr.sh -s sl_sequences.fasta -i 500 \n"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9641253398824996,
      "result": {
        "original_header": "26/01/2021",
        "type": "Text_excerpt",
        "value": "- new version SLIDR 1.1.1: fixed poor read recovery when using outdated VSEARCH (recommend version 2.15.1); fixed clustering problems when read tails contained Ns. \n"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8611127468139614,
      "result": {
        "original_header": "Multiple SLs; some are specialised for resolving downstream operonic genes",
        "type": "Text_excerpt",
        "value": "    sloppr.sh -s sl_sequences.fasta -S sl2-type.txt \n"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/wenzelm/slidr-sloppr/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "GNU General Public License v3.0",
        "spdx_id": "GPL-3.0",
        "type": "License",
        "url": "https://api.github.com/licenses/gpl-3.0",
        "value": "https://api.github.com/licenses/gpl-3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<https://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<https://www.gnu.org/licenses/why-not-lgpl.html>.\n"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "slidr-sloppr"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "wenzelm"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 75174,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 46085,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://cutadapt.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies:",
        "parent_header": [
          "SLIDR and SLOPPR: Pipelines for flexible identification of spliced leader *trans*-splicing and prediction of eukaryotic operons from RNA-Seq data",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "- [CUTADAPT](https://cutadapt.readthedocs.io/en/stable/installation.html) (tested v2.3; requires Python3 for multithreading)\n- [GFFREAD](https://github.com/gpertea/gffread) (tested v0.11.4)\n- [HISAT2](http://daehwankimlab.github.io/hisat2/download/) (tested v2.1.0)\n- [BOWTIE2](https://sourceforge.net/projects/bowtie-bio/files/bowtie2/) (tested v2.3.5; only required for transcriptome references)\n- [SAMTOOLS](http://www.htslib.org/download/) (tested v1.9)\n- [BEDTOOLS](https://github.com/arq5x/bedtools2) (tested v2.28.0)\n- [SEQTK](https://github.com/lh3/seqtk) (tested v1.3)\n- [VSEARCH](https://github.com/torognes/vsearch) (tested v2.15.1)\n- [BLASTN](https://www.ncbi.nlm.nih.gov/books/NBK279671/) (tested v2.9.0)\n- [FEATURECOUNTS](http://bioinf.wehi.edu.au/subread-package/) (tested v1.6.2)\n- [ViennaRNA](https://www.tbi.univie.ac.at/RNA/#download) (tested v2.4.14)\n- [R](https://www.r-project.org/) (tested v3.6.0)\n\nThe R packages *data.table*, *glmpca*, *ggplot2*, *scales*, *ggdendro*, *MASS* and *reshape2* are all available on CRAN and can be installed using `install.packages()` within the R console:\n\n    install.packages(\"data.table\")\n    install.packages(\"glmpca\")\n    install.packages(\"ggplot2\")\n\tinstall.packages(\"scales\")\n    install.packages(\"ggdendro\")\n    install.packages(\"MASS\")\n\tinstall.packages(\"reshape2\")\n\nFor convenience, both slidr.sh and sloppr.sh contain a function at the beginning of the script that loads dependencies:\n\n    function load_dependencies {\n\t    # ensure that all dependencies are in PATH\n\t    echo -e \"#\\n$(timestamp) >>> Loading dependencies\"\n\t    module load hisat2-2.1.0\n\t    module load samtools-1.9\n\t    export PATH=\"$PATH:~/apps/ViennaRNA-2.4.14/bin\"\n\t    ...\n\t}\n\nThis is particularly useful when using an HPC. Please edit/remove the content of this function according to your machine configuration.\n\n<a name=\"quickstart\"></a>"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "I have got neither a genome nor a transcriptome for my organism - can I run SLIDR?",
        "parent_header": [
          "SLIDR and SLOPPR: Pipelines for flexible identification of spliced leader *trans*-splicing and prediction of eukaryotic operons from RNA-Seq data",
          "Guidelines for parameter choice",
          "SLIDR"
        ],
        "type": "Text_excerpt",
        "value": "Yes, you can assemble transcripts (for example, using [TRINITY](https://github.com/trinityrnaseq/trinityrnaseq)) and supply these as a reference assembly to SLIDR:\n\n    slidr.sh -t Trinity.fasta\n\nNote that SL RNA filters (`-D` and `-S`) will only work if your assembly contains SL RNAs. Your mileage may vary!\n\n<a name=\"slidrguide3\"></a>"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "SLs and SL RNAs are already characterised in my organism - do I need to run SLIDR?",
        "parent_header": [
          "SLIDR and SLOPPR: Pipelines for flexible identification of spliced leader *trans*-splicing and prediction of eukaryotic operons from RNA-Seq data",
          "Guidelines for parameter choice",
          "SLIDR"
        ],
        "type": "Text_excerpt",
        "value": "In our experience, SLIDR often detects novel SL variants and in some cases perhaps even novel SL classes. SLIDR is also useful for telling apart functional SL RNA genes from pseudogenes. We recommend SLIDR as a tool for initial data exploration to uncover untapped SL diversity even if the canonical SL sequences are already known.\n\n<a name=\"slidrguide5\"></a>"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "My organism has very diverse SLs with vastly different SL RNA characteristics - how to run SLIDR?",
        "parent_header": [
          "SLIDR and SLOPPR: Pipelines for flexible identification of spliced leader *trans*-splicing and prediction of eukaryotic operons from RNA-Seq data",
          "Guidelines for parameter choice",
          "SLIDR"
        ],
        "type": "Text_excerpt",
        "value": "The safest way is to run SLIDR multiple times, each time optimising parameters for each SL type. Alternatively, try and define parameters such that they capture all SL types at once. For example, in *Hydra vulgaris* where two major SL classes exist with different SL lengths and *Sm* binding motifs, the following parameters capture both SL types:\n\n    slidr.sh -S '.{10,35}[AG]ATTTT[CG][AG]' -x 1.4 -R 60\n\n<a name=\"slidrguide6\"></a>"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 13:07:55",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "SLIDR has found a known SL but reports fewer SL RNA genes than expected - what am I missing?",
        "parent_header": [
          "SLIDR and SLOPPR: Pipelines for flexible identification of spliced leader *trans*-splicing and prediction of eukaryotic operons from RNA-Seq data",
          "Guidelines for parameter choice",
          "SLIDR"
        ],
        "type": "Text_excerpt",
        "value": "SLIDR is not designed to find all possible SL RNA genes in a genome. SL RNA genes must be expressed, i.e. the SL encoded by the gene must be detected as a read tail and pass length filters. Similarly, the SL RNA gene must satisfy the splice donor, splice acceptor and *Sm* binding motif filters. This means that SLIDR will report all possible expressed SL RNA genes given the RNA-Seq libraries, but will not report unexpressed genes or genes not satisfying functional motif filters (since these may be pseudogenes). If a comprehensive annotation of putative SL RNA genes is required, [SLFinder](https://github.com/LBC-Iriarte/SLFinder) is a more appropriate tool.\n\nConsider relaxing or disabling nucleotide motif filters to test whether this yields more genes for the focal SL, for example:\n\n    slidr.sh -D 'G[TC]' -S '' -A 'A[GC]'\n\n<a name=\"agc\"></a>\t"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick start with example data",
        "parent_header": [
          "SLIDR and SLOPPR: Pipelines for flexible identification of spliced leader *trans*-splicing and prediction of eukaryotic operons from RNA-Seq data",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "The script `example_data.sh` downloads the *C. elegans* genome assembly GCF_000002985.6 from NCBI, two very small RNA-Seq libraries from ENA (accessions ERR2756729 and ERR2756730) and runs basic SLIDR and SLOPPR analyses. Run this script to test the installation and to familiarise yourself with the workflow. Each analysis should complete within ten minutes using 8 threads and 32 GB of memory.\n\nThe script generates all input files and commands, supplying the genome assembly (`-g`), the genome annotations (`-a`), the output directory (`-o`) and a configuration file for multiple libraries (`-m`). The SLOPPR run also supplies a FASTA file containing the SL sequences (`-s`) and a text file specifying the SL2-type SLs (`-S`):\n\n    slidr.sh  -g toy_data/GCF_000002985.6_WBcel235_genomic.fna -a toy_data/GCF_000002985.6_WBcel235_genomic.gff -o slidr_toy_data  -m libraries_config.txt --agc\n    sloppr.sh -g toy_data/GCF_000002985.6_WBcel235_genomic.fna -a toy_data/GCF_000002985.6_WBcel235_genomic.gff -o sloppr_toy_data -m libraries_config.txt -s SL.fasta -S SL2.txt\n\n*SL.fasta*:\n\n    >Cel-SL1\n    GGTTTAATTACCCAAGTTTGAG\n    >Cel-SL2\n    GGTTTTAACCCAGTTACTCAAG\n\n*SL2.txt*:\n\n    >Cel-SL2\n\nThe on-screen SLIDR results detail the expected SL1 and SL2 sequences, the numbers of reads assembled, the numbers of SL RNA genes identified and the numbers of *trans*-splice acceptor sites:\n\n                   Consensus Reads SL_RNA_Genes SLTS_Sites\n      GGTTTAATTACCCAAGTTTGAG  6393           10       1234\n     GGTTTTAACCCAGTTTAACCAAG   146            1         64\n\t \nThe on-screen SLOPPR results detail expectedly low SL-trans-splicing rates (5.14 %) and 84 predicted operons using SL2 as a polycistron resolver:\n\n    Numbers of genes receiving SLs:\n         not expressed  6399 32.28 %\n                 no SL 12407 62.59 %\n                   SL1   907  4.58 %\n                   SL2    96  0.48 %\n               SL1+SL2    15  0.08 %\n\n    Predicted operonic genes, operons and operon sizes (n = genes in operon):\n\t         operonic operons n=2 n=3 n=4 n=5\n    SL2           180      84  75   7   1   1\n    Cluster1     1694     788 687  86  13   2\n    Cluster2      180      84  75   7   1   1\n\nNote that the SL-clustering algorithm may not correctly identify SL1/SL2-type SLs with only two ultra-low-coverage replicates. In the above run, the two clusters coincided with SL1/SL2 SLs (cluster2 = SL2). Due to some degree of stochasticity, your run may produce incorrect clusters.\n\n<a name=\"reference\"></a>"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "I have got an unannotated draft genome for my organism - is this good enough?",
        "parent_header": [
          "SLIDR and SLOPPR: Pipelines for flexible identification of spliced leader *trans*-splicing and prediction of eukaryotic operons from RNA-Seq data",
          "Guidelines for parameter choice",
          "SLIDR"
        ],
        "type": "Text_excerpt",
        "value": "Yes, genome annotations are not mandatory and SLIDR will function fine without them. However, genome annotations are useful for three reasons:\n- Initial read alignment with HISAT2 benefits from exon/intron boundaries and splice sites defined by genome annotations\n- Unknown library strandedness can be inferred from read alignments and genome annotations\n- Predicted SL RNA genes and SLTS acceptor sites can be overlapped with gene/transcript annotations for manual validation\n\nNote that all SLIDR results are solely based on read alignments and do not take gene annotations into account.\n\n<a name=\"slidrguide2\"></a>"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "I have got neither a genome nor a transcriptome for my organism - can I run SLIDR?",
        "parent_header": [
          "SLIDR and SLOPPR: Pipelines for flexible identification of spliced leader *trans*-splicing and prediction of eukaryotic operons from RNA-Seq data",
          "Guidelines for parameter choice",
          "SLIDR"
        ],
        "type": "Text_excerpt",
        "value": "Yes, you can assemble transcripts (for example, using [TRINITY](https://github.com/trinityrnaseq/trinityrnaseq)) and supply these as a reference assembly to SLIDR:\n\n    slidr.sh -t Trinity.fasta\n\nNote that SL RNA filters (`-D` and `-S`) will only work if your assembly contains SL RNAs. Your mileage may vary!\n\n<a name=\"slidrguide3\"></a>"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "SLs and SL RNAs are entirely uncharacterised in my organism - how do I get started with SLIDR?",
        "parent_header": [
          "SLIDR and SLOPPR: Pipelines for flexible identification of spliced leader *trans*-splicing and prediction of eukaryotic operons from RNA-Seq data",
          "Guidelines for parameter choice",
          "SLIDR"
        ],
        "type": "Text_excerpt",
        "value": "If your organism is a nematode, run SLIDR with default parameters, which are optimised for nematode SLs. If your organism is a different eukaryote, modify or switch off the *Sm* binding motif filter (`-S ''`) and allow longer read tails (`-x 1.5`) to capture a broad range of tail lengths:\n\n    slidr.sh -S '' -x 1.5\n\nUse this initial SLIDR output to build a more stringent set of filters for a second run, informed by sequence features of the most promising candidates (i.e, those with high read coverage and spliced to a large number of genes). If you need to relax SLIDR further, consider modifying (or even disabling) splice donor/acceptor site motifs (`-D`, `-A`) and/or increasing the BLASTN E-value (`-e`). An extremely relaxed configuration would be as follows (not recommended because of potentially huge data volumes to process):\n\n    slidr.sh -D '' -S '' -A '' -e 5 -x 1.5\n\n<a name=\"slidrguide4\"></a>"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Should I use DGC or AGC clustering?",
        "parent_header": [
          "SLIDR and SLOPPR: Pipelines for flexible identification of spliced leader *trans*-splicing and prediction of eukaryotic operons from RNA-Seq data",
          "Guidelines for parameter choice",
          "SLIDR"
        ],
        "type": "Text_excerpt",
        "value": "\t\nThat depends on your dataset and is impossible to know in advance. To illustrate the difference between the two methods, consider the following tails after dereplication:\n\n                             Tail Abundance\n    1: TTAGCTTAGCAGTAGGGGAGTTTGAG         1\n\t2:     GGTTTAATTACCCAAGTTTGAG        10\n\t3:          AATTACCCAAGTTTGAG       100\n\t4:              ACCCAAGTTTGAG      1000\n\t5:                   AGTTTGAG     10000\n     \nNote that tail 2 is the full-length *C. elegans* SL1 sequence and tails 3-5 are 5' truncated versions that clearly should be clustered with tail 2. However, the short and highly abundant tail 5 also happens to be identical to the 3' end of tail 1, which only appears once and is likely to be noise.\n\nUsing DGC, ties are broken by sequence length, so tail 5 will cluster with tail 1 instead of tail 2, yielding the following two clusters:\n\n                 Cluster centroid Abundance\n    1: TTAGCTTAGCAGTAGGGGAGTTTGAG     10001\n\t2:     GGTTTAATTACCCAAGTTTGAG      1110\n\t\nUsing AGC, ties are broken by abundance, so tail 5 will cluster correctly with tail 2 because it is more abundant:\n\n                 Cluster centroid Abundance\n    1: TTAGCTTAGCAGTAGGGGAGTTTGAG         1\n\t2:     GGTTTAATTACCCAAGTTTGAG     11110\n\nThat's a dramatic difference in read coverage! So is AGC always superior to DGC? No! Let's remove tail 1 and add another unspecific tail X that happens to be highly abundant:\n\n                             Tail Abundance\n\t2:     GGTTTAATTACCCAAGTTTGAG        10\n\t3:          AATTACCCAAGTTTGAG       100\n\t4:              ACCCAAGTTTGAG      1000\n\tX:                  TAGTTTGAG      5000\n\t5:                   AGTTTGAG     10000\n\nUsing AGC, tail 5 will now cluster with tail X instead of tail 2 because its abundance is higher (5000 vs. 1110):\n\n                 Cluster centroid Abundance\n\t2:     GGTTTAATTACCCAAGTTTGAG      1110\n\tX:                  TAGTTTGAG     15000\n\t\nConversely, using DGC, tail 5 clusters correctly with tail 2 because it is longer:\n\n                 Cluster centroid Abundance\n\t2:     GGTTTAATTACCCAAGTTTGAG     11110\n\tX:                  TAGTTTGAG      5000\n\nIt is obvious that the two clustering methods are bound to yield very different results in organisms with many SL variants that happen to be conserved at the 3' end. In those cases, short tails will match multiple SLs and ties must be broken arbitrarily (length or abundance).\nMost datasets we have analysed yield better results with the default DGC, but others performed poorly and improved dramatically with AGC. We therefore suggest using the default DGC and trying AGC if SL read coverage is suspiciously low.\n\n<a name=\"slidrguide8\"></a>"
      },
      "source": "https://raw.githubusercontent.com/wenzelm/slidr-sloppr/master/README.md",
      "technique": "header_analysis"
    }
  ]
}