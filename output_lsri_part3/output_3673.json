{
  "application_domain": [
    {
      "confidence": 0.9905034314804702,
      "result": {
        "type": "String",
        "value": "Semantic web"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "format": "bibtex",
        "type": "File_dump",
        "value": "year <- sub(\"-.*\", \"\", meta$Date)\nnote <- sprintf(\"seqminer version %s\", meta$Version)\n\nbibentry(bibtype = \"article\",\n         title = \"SEQMINER: An R-Package to Facilitate the Functional Interpretation of Sequence-Based Associations\",\n         author = c(person(\"Xiaowei\", \"Zhan\"), person(\"Dajiang J\", \"Liu\")),\n         journal = \"Genetic Epidemiology\",\n         volume={39},\n         number={8},\n         pages={619--623},\n         year = {2015},\n         note = note,\n         web = \"http:/zhanxw.github.io/seqminer\",\n         publisher={\"Wiley Online Library\"},\n         url = \"http://dx.doi.org/10.1002/gepi.21918\",\n         doi = \"10.1002/gepi.21918\"\n         )\n"
      },
      "source": "https://raw.githubusercontent.com/zhanxw/seqminer/master/inst/CITATION",
      "technique": "file_exploration"
    }
  ],
  "code_of_conduct": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Code of Conduct\n\nFacebook has adopted a Code of Conduct that we expect project participants to adhere to.\nPlease read the [full text](https://code.fb.com/codeofconduct/)\nso that you can understand what actions will and will not be tolerated.\n"
      },
      "source": "https://raw.githubusercontent.com/zhanxw/seqminer/master/src/zstd/CODE_OF_CONDUCT.md",
      "technique": "file_exploration"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/zhanxw/seqminer"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contributing to Zstandard\nWe want to make contributing to this project as easy and transparent as\npossible.\n\n## Our Development Process\nNew versions are being developed in the \"dev\" branch,\nor in their own feature branch.\nWhen they are deemed ready for a release, they are merged into \"master\".\n\nAs a consequences, all contributions must stage first through \"dev\"\nor their own feature branch.\n\n## Pull Requests\nWe actively welcome your pull requests.\n\n1. Fork the repo and create your branch from `dev`.\n2. If you've added code that should be tested, add tests.\n3. If you've changed APIs, update the documentation.\n4. Ensure the test suite passes.\n5. Make sure your code lints.\n6. If you haven't already, complete the Contributor License Agreement (\"CLA\").\n\n## Contributor License Agreement (\"CLA\")\nIn order to accept your pull request, we need you to submit a CLA. You only need\nto do this once to work on any of Facebook's open source projects.\n\nComplete your CLA here: <https://code.facebook.com/cla>\n\n## Issues\nWe use GitHub issues to track public bugs. Please ensure your description is\nclear and has sufficient instructions to be able to reproduce the issue.\n\nFacebook has a [bounty program](https://www.facebook.com/whitehat/) for the safe\ndisclosure of security bugs. In those cases, please go through the process\noutlined on that page and do not file a public issue.\n\n## Coding Style  \n* 4 spaces for indentation rather than tabs\n\n## License\nBy contributing to Zstandard, you agree that your contributions will be licensed\nunder both the [LICENSE](LICENSE) file and the [COPYING](COPYING) file in the root directory of this source tree.\n"
      },
      "source": "https://raw.githubusercontent.com/zhanxw/seqminer/master/src/zstd/CONTRIBUTING.md",
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2013-11-03T01:33:16Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-02T03:20:58Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Query sequence data (VCF/BCF1/BCF2, Tabix, BGEN, PLINK) in R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9809583777790519,
      "result": {
        "original_header": "SEQMINER2",
        "type": "Text_excerpt",
        "value": "\n**Table of Contents** \n"
      },
      "source": "https://raw.githubusercontent.com/zhanxw/seqminer/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.900882150044254,
      "result": {
        "original_header": "Index VCF/BCF files",
        "type": "Text_excerpt",
        "value": "This would generate variant-based index that works with commonly used sequence variant file format, such as VCF/BCF files.\n \n"
      },
      "source": "https://raw.githubusercontent.com/zhanxw/seqminer/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8996683585018724,
      "result": {
        "original_header": "Query VCF/BCF files",
        "type": "Text_excerpt",
        "value": "Querying multiple regions is also doable, simply specify multiple regions and separte them by a comma, e.g. `\"1:123-124,1:1234-1235\"`. \n"
      },
      "source": "https://raw.githubusercontent.com/zhanxw/seqminer/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/zhanxw/seqminer/tree/master/docs"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/zhanxw/seqminer/wiki"
      },
      "source": "https://raw.githubusercontent.com/zhanxw/seqminer/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Download",
        "type": "Text_excerpt",
        "value": "    devtools::install_github(\"zhanxw/seqminer\")\n"
      },
      "source": "https://raw.githubusercontent.com/zhanxw/seqminer/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/zhanxw/seqminer/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 12
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/zhanxw/seqminer/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "zhanxw/seqminer"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SEQMINER2"
      },
      "source": "https://raw.githubusercontent.com/zhanxw/seqminer/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zhanxw/seqminer/master/docs/benchmark/integration/gemini/import.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zhanxw/seqminer/master/docs/benchmark/integration/gemini/annotate.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zhanxw/seqminer/master/docs/benchmark/integration/va/cmd.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zhanxw/seqminer/master/docs/benchmark/extraction/seqminer/chr1.nonsyn.range/cmd.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zhanxw/seqminer/master/docs/benchmark/extraction/seqminer/chr1.nonsyn.gene/cmd.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/yang-lina/seqminer/master/output.png"
      },
      "source": "https://raw.githubusercontent.com/zhanxw/seqminer/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9977949756372029,
      "result": {
        "original_header": "Query VCF/BCF files",
        "type": "Text_excerpt",
        "value": "<img src=\"https://github.com/yang-lina/seqminer/blob/master/output.png\" width=\"60%\">\n \n"
      },
      "source": "https://raw.githubusercontent.com/zhanxw/seqminer/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8316786573900394,
      "result": {
        "original_header": "Index VCF/BCF files",
        "type": "Text_excerpt",
        "value": "    library(seqminer)\n    bcf.ref.file <- \"input.bcf\"\n    bcf.idx.file <- \"input.bcf.scIdx\"\n    out <- seqminer::createSingleChromosomeBCFIndex(bcf.ref.file, bcf.idx.file) \n    vcf.ref.file <- \"input.vcf.gz\"\n    vcf.idx.file <- \"input.vcf.gz.scIdx\"\n    out <- seqminer::createSingleChromosomeVCFIndex(vcf.ref.file, vcf.idx.file) \n"
      },
      "source": "https://raw.githubusercontent.com/zhanxw/seqminer/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8622885783946758,
      "result": {
        "original_header": "Query VCF/BCF files",
        "type": "Text_excerpt",
        "value": "Query VCF file: \n    vcf.ref.file <-  \"input.vcf.gz\"\n    vcf.idx.file <-  \"input.vcf.gz.scIdx\"\n    tabix.range <- \"1:123-1234\"\n    geno <- seqminer::readSingleChromosomeVCFToMatrixByRange(vcf.ref.file, tabix.range, vcf.idx.file) \nQuery BCF file: \n    bcf.ref.file <- \"input.bcf\"\n    bcf.idx.file <- \"input.bcf.scIdx\"\n    tabix.range <- \"1:123-1234\"\n    geno <- seqminer::readSingleChromosomeBCFToMatrixByRange(bcf.ref.file, tabix.range, bcf.idx.file) \n"
      },
      "source": "https://raw.githubusercontent.com/zhanxw/seqminer/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8399368470331368,
      "result": {
        "original_header": "Query BGEN/PLINK files",
        "type": "Text_excerpt",
        "value": "Query BGEN file: \n    bg.ref.file <- \"input.bgen\"\n    bg.range <- \"1:123-1234\"\n    geno.mat <- seqminer::readBGENToMatrixByRange(bg.ref.file, bg.range)\n    geno.list <- seqminer::readBGENToListByRange(bg.ref.file, bg.range)\nMake sure that bgen file has an index file `*.bgi` in the same folder. \nQuery PLINK file: \n    plink.ref.file <- \"input\"\n    geno <- seqminer::readPlinkToMatrixByIndex(plink.ref.file, sampleIndex=1:20000, markerIndex=1:100)\n \n"
      },
      "source": "https://raw.githubusercontent.com/zhanxw/seqminer/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/zhanxw/seqminer/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "annotation, bcf, bgen, meta-analysis, next-generation-sequencing, plink, sequencing, tabix, vcf, workflow"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Seqminer is licensed under GPL.\n\nSome components have separate license and listed below:\n\n1. tabix\n   Heng Li <lh3@live.co.uk> (MIT license). We removed standard IO related\n   functions, e.g. printf, fprintf ; also changed its un-safe\n   pointer arithmetics.\n\n2. samtools/bcftools\n   Heng Li <lh3@live.co.uk> (MIT license). We removed standard IO related\n   functions, e.g. printf, fprintf ; also changed its un-safe\n   pointer arithmetics.\n\n3. SQLite\n   SQLite is public domain, as stated in sqlite.org on February 3, 20202.\n   We included D. Richard Hipp as a cph author as suggested by Prof. Brian Ripley.\n\n4. Zstandard\n   Zstandard is BSD license. Its LICENSE file states \"Copyright (c) Meta Platforms, Inc. and affiliates. All rights reserved.\" \n   Its source directory also contains a COPYING file that states GPLv2. \n   We keep the COPYING file as it is part of the zstd source codes. "
      },
      "source": "https://raw.githubusercontent.com/zhanxw/seqminer/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://ci.appveyor.com/api/projects/status/github/zhanxw/seqminer?branch=master&amp;svg=true"
      },
      "source": "https://raw.githubusercontent.com/zhanxw/seqminer/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "seqminer"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "zhanxw"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 13138215,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 611802,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 75676,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 18117,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 14209,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Batchfile",
        "size": 4566,
        "type": "Programming_language",
        "value": "Batchfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Starlark",
        "size": 4280,
        "type": "Programming_language",
        "value": "Starlark"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "M4",
        "size": 3864,
        "type": "Programming_language",
        "value": "M4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 90,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zhanxw/seqminer/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "zhanxw",
          "type": "User"
        },
        "date_created": "2023-01-25T07:15:52Z",
        "date_published": "2023-01-25T07:17:27Z",
        "html_url": "https://github.com/zhanxw/seqminer/releases/tag/v8.6",
        "name": "v8.6",
        "release_id": 90137172,
        "tag": "v8.6",
        "tarball_url": "https://api.github.com/repos/zhanxw/seqminer/tarball/v8.6",
        "type": "Release",
        "url": "https://api.github.com/repos/zhanxw/seqminer/releases/90137172",
        "value": "https://api.github.com/repos/zhanxw/seqminer/releases/90137172",
        "zipball_url": "https://api.github.com/repos/zhanxw/seqminer/zipball/v8.6"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "requirements",
    "contact",
    "contributors",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 13:39:58",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 30
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}