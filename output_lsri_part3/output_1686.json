{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/CHuanSite/PJD"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact",
        "parent_header": [
          "PJD: R package for Partial and Joint Decomposition"
        ],
        "type": "Text_excerpt",
        "value": "For any improvements and issues that need to be addressed, please contact [Huan Chen](hchen130@jhu.edu).\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/CHuanSite/PJD/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-05-24T16:36:40Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-10-21T19:13:00Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PJD: R package for Pairwise and Joint Decomposiiton"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9733268740192706,
      "result": {
        "original_header": "Overview:",
        "type": "Text_excerpt",
        "value": "Partial and Joint Decomposiiton (PJD) is a R package for visualizing biologically structured gene expression matrix environment based on low rank models. Currently, it provides user 4  different styles of decomposition: (1) Separately, (2) Concatenately, (3) Jointly, (4) Statistically. \nThis package implements four categories of algorithms to decompose multiple datasets, (1) Separately, (2) Concatenately, (3) Jointly, (4) Two Stage Sequentially.  \nFor the first three categories, there are three available algorithms: Principal Component Analysis (PCA), Independent Component Analysis (ICA) and Nonnegative Matrix Factorization (NMF). For each method, the algorithm takes three arguments, `dataset`, `group` and `comp_num`, specifying which datasets to be used, what is the structure among the datasets and what's the dimension for each component. \nFor the last category, there is one algorithm, called two-staged linked component analysis, which is a PCA based statistical model.\n \n"
      },
      "source": "https://raw.githubusercontent.com/CHuanSite/PJD/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9211927276233387,
      "result": {
        "original_header": "Source",
        "type": "Text_excerpt",
        "value": "The latest developer version is available in the [Github repository](https://github.com/CHuanSite/PJD).\n \n"
      },
      "source": "https://raw.githubusercontent.com/CHuanSite/PJD/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/CHuanSite/PJD/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/CHuanSite/PJD/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CHuanSite/PJD"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PJD: R package for Partial and Joint Decomposition"
      },
      "source": "https://raw.githubusercontent.com/CHuanSite/PJD/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Weighting data sets by different weights",
        "parent_header": [
          "PJD: R package for Partial and Joint Decomposition"
        ],
        "type": "Text_excerpt",
        "value": "Sometimes it is interesting to weigh data sets differently, to incorporate user's different views on it. The PJD package also has this option.\n\n```R\n# Simulation the dataset\ndataset = list(matrix(runif(5000, 1, 2), nrow = 100, ncol = 50),\n               matrix(runif(5000, 1, 2), nrow = 100, ncol = 50),\n               matrix(runif(5000, 1, 2), nrow = 100, ncol = 50),\n               matrix(runif(5000, 1, 2), nrow = 100, ncol = 50))\n               \n## Specify the structure among the datasets\ngroup = list(c(1,2,3,4), c(1,2), c(3,4), c(1,3), c(2,4), c(1), c(2), c(3), c(4))\ncomp_num = c(2,2,2,2,2,2,2,2,2)\nweighting = c(2, 1, 4, 3)\n\n## Separate PCA, ICA, NMF\nsepPCA_res = sepPCA(dataset, comp_num, weighting)\nsepICA_res = sepICA(dataset, comp_num, weighting)\nsepNMF_res = sepNMF(dataset, comp_num, weighting)\n\n## Concatenated PCA, ICA, NMF\nconcatPCA_res = concatPCA(dataset, group, comp_num, weighting)\nconcatICA_res = concatICA(dataset, group, comp_num, weighting)\nconcatNMF_res = concatNMF(dataset, group, comp_num, weighting)\n\n## Joint PCA, ICA, NMF\njointPCA_res = jointPCA(dataset, group, comp_num, weighting)\njointICA_res = jointICA(dataset, group, comp_num, weighting)\njointNMF_res = jointNMF(dataset, group, comp_num, weighting)\n\n## twoStageLCA\ntwoStageLCA_res = twoStageLCA(dataset, group, comp_num, weighting)\n\n\n```\n"
      },
      "source": "https://raw.githubusercontent.com/CHuanSite/PJD/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Projecting new data sets to extracted components",
        "parent_header": [
          "PJD: R package for Partial and Joint Decomposition"
        ],
        "type": "Text_excerpt",
        "value": "```R\n# Simulation the dataset\ndataset = list(matrix(runif(5000, 1, 2), nrow = 100, ncol = 50),\n               matrix(runif(5000, 1, 2), nrow = 100, ncol = 50),\n               matrix(runif(5000, 1, 2), nrow = 100, ncol = 50),\n               matrix(runif(5000, 1, 2), nrow = 100, ncol = 50))\n               \n## Specify the structure among the datasets\ngroup = list(c(1,2,3,4), c(1,2), c(3,4), c(1,3), c(2,4), c(1), c(2), c(3), c(4))\ncomp_num = c(2,2,2,2,2,2,2,2,2)\n\n## Projected new data sets\nproj_dataset = list(matrix(runif(5000, 1, 2), nrow = 100, ncol = 50))\nproj_group = list(c(TRUE, TRUE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE))\n\n## concatenate PCA with projection functionality on\nres_concatPCA = concatPCA(dataset, group, comp_num, weighting = NULL, proj_dataset = proj_dataset, proj_group = proj_group)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/CHuanSite/PJD/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999395723534467,
      "result": {
        "original_header": "Overview:",
        "type": "Text_excerpt",
        "value": "To install this package in R, run the following commands:\n```R\nlibrary(devtools)\ninstall_github(\"CHuanSite/PJD\")\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/CHuanSite/PJD/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9653480313420426,
      "result": {
        "original_header": "Source",
        "type": "Text_excerpt",
        "value": "The latest developer version is available in the [Github repository](https://github.com/CHuanSite/PJD).\n \n"
      },
      "source": "https://raw.githubusercontent.com/CHuanSite/PJD/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/CHuanSite/PJD/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PJD"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "CHuanSite"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 104425,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/CHuanSite/PJD/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 05:53:05",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Example usage:",
        "parent_header": [
          "PJD: R package for Partial and Joint Decomposition"
        ],
        "type": "Text_excerpt",
        "value": "```R\nlibrary(PJD)\n# Simulation the dataset\ndataset = list(matrix(runif(5000, 1, 2), nrow = 100, ncol = 50),\n               matrix(runif(5000, 1, 2), nrow = 100, ncol = 50),\n               matrix(runif(5000, 1, 2), nrow = 100, ncol = 50),\n               matrix(runif(5000, 1, 2), nrow = 100, ncol = 50))\n               \n## Specify the structure among the datasets\ngroup = list(c(1,2,3,4), c(1,2), c(3,4), c(1,3), c(2,4), c(1), c(2), c(3), c(4))\ncomp_num = c(2,2,2,2,2,2,2,2,2)\n\n## Separate PCA, ICA, NMF\nsepPCA_res = sepPCA(dataset, comp_num)\nsepICA_res = sepICA(dataset, comp_num)\nsepNMF_res = sepNMF(dataset, comp_num)\n\n## Concatenated PCA, ICA, NMF\nconcatPCA_res = concatPCA(dataset, group, comp_num)\nconcatICA_res = concatICA(dataset, group, comp_num)\nconcatNMF_res = concatNMF(dataset, group, comp_num)\n\n## Joint PCA, ICA, NMF\njointPCA_res = jointPCA(dataset, group, comp_num)\njointICA_res = jointICA(dataset, group, comp_num)\njointNMF_res = jointNMF(dataset, group, comp_num)\n\n## twoStageLCA\ntwoStageLCA_res = twoStageLCA(dataset, group, comp_num)\n```\n\nTo access the component\n```R\nconcatPCA_res$linked_component_list\n```\n\nTo access the score\n```R\nconcatPCA_res$score_list\n```\n"
      },
      "source": "https://raw.githubusercontent.com/CHuanSite/PJD/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Single-Cell RNAseq Example",
        "parent_header": [
          "PJD: R package for Partial and Joint Decomposition"
        ],
        "type": "Text_excerpt",
        "value": "First, install the 'googleDrive' package\n\n```R\ninstall.package('googledrive')\n```\n\nDownload RNA and explaination data from Google Drive,\n\n```R\nlibrary(googledrive)\n\n## Data file \nurl_data <- \"https://drive.google.com/file/d/1OQovDBPwRX_O2N1GSNY8fzJn-p3-fwQV/view?usp=sharing\"\ndrive_download(url_data, overwrite = TRUE)\nunzip('data.zip')\n\n## Explaination file\nurl_explaination <- 'https://drive.google.com/file/d/1S3HdygRCMvPttmVd9cix4GskWj1VPJaM/view?usp=sharing'\ndrive_download(url_explaination, overwrite = TRUE)\nunzip('data_explaination.zip')\n```\n\nRead data into R\n\n```R\nlibrary(tidyverse)\n\n## Read in files\ninVitro_bulk = read.table('1_inVitro_Bulk_Cortecon.plog2_trimNord.txt', stringsAsFactors = FALSE, header = TRUE) %>% select(-1) %>% as.matrix\ninVitro_sc = read.table('2_inVitro_SingleCell_scESCdifBifurc.CelSeq_trimNord.txt', stringsAsFactors = FALSE, header = TRUE) %>% select(-1) %>% as.matrix\ninVivo_bulk = read.table('3_inVivo_Bulk_BrainSpan_RNAseq_Gene_DFC_noSVA_plog2_trimNord.txt', stringsAsFactors = FALSE, header = TRUE) %>% select(-1) %>% as.matrix\ninVivo_sc = read.table('4_inVivo_SingleCell_CtxDevoSC4kTopoTypoTempo_plog2_trimNord.txt', stringsAsFactors = FALSE, header = TRUE) %>% select(-1) %>% as.matrix\n\ninVitro_bulk_scale = scale(t(scale(t(inVitro_bulk), scale = FALSE)))\ninVitro_sc_scale = scale(t(scale(t(inVitro_sc), scale = FALSE)))\ninVivo_bulk_scale = scale(t(scale(t(inVivo_bulk), scale = FALSE)))\ninVivo_sc_scale= scale(t(scale(t(inVivo_sc), scale = FALSE)))\n\n## legends for the 4 datasets\ninVitro_bulk_exp =  read.table(\"1_inVitro_Bulk_Cortecon.pd.txt\",stringsAsFactors = FALSE, header = T)\ninVitro_sc_exp = read.table(\"2_inVitro_SingleCell_scESCdifBifurc.CelSeq.pd.txt\", stringsAsFactors = FALSE, header = T)\ninVivo_bulk_exp = read.table(\"3_inVivo_Bulk_BrainSpan.RNAseq.Gene.DFC.pd.txt\", stringsAsFactors = FALSE, header = T)\ninVivo_sc_exp = read.table(\"4_inVivo_SingleCell_CtxDevoSC4kTopoTypoTempo.pd.txt\", stringsAsFactors = FALSE, header = T)\n````\n\nConduct Two-stage linked component analysis\n\n```R\nlibrary(PJD)\n## List of datasets and group assignment and number of components\ndataset = list(inVitro_bulk_scale, inVitro_sc_scale, inVivo_bulk_scale, inVivo_sc_scale)\ngroup = list(c(1,2,3,4), c(1,2), c(3,4), c(1,3), c(2,4), c(1), c(2), c(3), c(4))\ncomp_num = c(2,2,2,2,2,2,2,2,2)\n\n## Output result\ntwoStageLCA_res = twoStageLCA(dataset, group, comp_num)\n```\nVisualize the result\n\n```R\npar(mfrow = c(2,2))\n\n## common component\nplot(t(twoStageLCA_res$score_list[[1]][[1]]), col = inVitro_bulk_exp$color, pch = 16, xlab = \"PC1\", ylab = \"PC2\", main = \"common: inVitro_bulk\", cex = 2, cex.axis = 1, cex.lab = 1, cex.main = 1)\nplot(t(twoStageLCA_res$score_list[[2]][[1]]), col = inVitro_sc_exp$COLORby.DCX, pch = 16, xlab = \"PC1\", ylab = \"PC2\", main = \"common: inVitro_sc\", cex = 2, cex.axis = 1, cex.lab = 1, cex.main = 1)\nplot(t(twoStageLCA_res$score_list[[3]][[1]]), col = inVivo_bulk_exp$color, pch = 16, xlab = \"PC1\", ylab = \"PC2\", main = \"common: inVivo_bulk\", cex = 2, cex.axis = 1, cex.lab = 1, cex.main = 1)\nplot(t(twoStageLCA_res$score_list[[4]][[1]]), col = inVivo_sc_exp$COLORby.DCX, pch = 16, xlab = \"PC1\", ylab = \"PC2\", main = \"common: inVivo_sc\", cex = 2, cex.axis = 1, cex.lab = 1, cex.main = 1)\n\n\npar(mfrow = c(1,2))\n## in vitro component\nplot(t(twoStageLCA_res$score_list[[1]][[2]]), col = inVitro_bulk_exp$color, pch = 16, xlab = \"PC1\", ylab = \"PC2\", main = \"common: inVitro_bulk\", cex = 2, cex.axis = 1, cex.lab = 1, cex.main = 1)\nplot(t(twoStageLCA_res$score_list[[2]][[2]]), col = inVitro_sc_exp$COLORby.DCX, pch = 16, xlab = \"PC1\", ylab = \"PC2\", main = \"common: inVitro_sc\", cex = 2, cex.axis = 1, cex.lab = 1, cex.main = 1)\n\n## in vivo component\nplot(t(twoStageLCA_res$score_list[[3]][[3]]), col = inVivo_bulk_exp$color, pch = 16, xlab = \"PC1\", ylab = \"PC2\", main = \"common: inVivo_bulk\", cex = 2, cex.axis = 1, cex.lab = 1, cex.main = 1)\nplot(t(twoStageLCA_res$score_list[[4]][[3]]), col = inVivo_sc_exp$COLORby.DCX, pch = 16, xlab = \"PC1\", ylab = \"PC2\", main = \"common: inVivo_sc\", cex = 2, cex.axis = 1, cex.lab = 1, cex.main = 1)\n\n## bulk component\nplot(t(twoStageLCA_res$score_list[[1]][[4]]), col = inVitro_bulk_exp$color, pch = 16, xlab = \"PC1\", ylab = \"PC2\", main = \"common: inVitro_bulk\", cex = 2, cex.axis = 1, cex.lab = 1, cex.main = 1)\nplot(t(twoStageLCA_res$score_list[[3]][[4]]), col = inVivo_bulk_exp$color, pch = 16, xlab = \"PC1\", ylab = \"PC2\", main = \"common: inVivo_bulk\", cex = 2, cex.axis = 1, cex.lab = 1, cex.main = 1)\n\n## sc component\nplot(t(twoStageLCA_res$score_list[[2]][[5]]), col = inVitro_sc_exp$COLORby.DCX, pch = 16, xlab = \"PC1\", ylab = \"PC2\", main = \"common: inVitro_sc\", cex = 2, cex.axis = 1, cex.lab = 1, cex.main = 1)\nplot(t(twoStageLCA_res$score_list[[4]][[5]]), col = inVivo_sc_exp$COLORby.DCX, pch = 16, xlab = \"PC1\", ylab = \"PC2\", main = \"common: inVivo_sc\", cex = 2, cex.axis = 1, cex.lab = 1, cex.main = 1)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/CHuanSite/PJD/master/README.md",
      "technique": "header_analysis"
    }
  ]
}