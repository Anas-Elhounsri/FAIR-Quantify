{
  "application_domain": [
    {
      "confidence": 19.08,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/seriph78/COTAN"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-02-20T16:11:24Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-01T11:54:13Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9406097394453826,
      "result": {
        "original_header": "COTAN v2",
        "type": "Text_excerpt",
        "value": "A Comprehensive and Versatile Framework for Single-Cell Gene Co-Expression\nStudies and Cell Type Identification\n \n"
      },
      "source": "https://raw.githubusercontent.com/seriph78/COTAN/devel/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9828548352627905,
      "result": {
        "original_header": "About",
        "type": "Text_excerpt",
        "value": "The estimation of gene co-expression in single-cell RNA sequencing (scRNA-seq)\nis a critical step in the analysis of scRNA-seq data. The low efficiency of\nscRNA-seq methodologies makes sensitive computational approaches crucial to\naccurately infer transcription profiles in a cell population. \n`COTAN` is a statistical and computational method that analyzes the\nco-expression of gene pairs at the single-cell level. It employs an innovative\nmathematical model that leads to a generalized contingency table framework.\n`COTAN` relies on the zero Unique Molecular Identifier (`UMI`) counts\ndistribution instead of focusing on positive counts to evaluate or extract\ndifferent scores and information for gene correlation studies and gene or cell\nclustering. \n`COTAN` assesses whether gene pairs are *correlated* or *anti-correlated*,\nproviding a new correlation index with an approximate `p-value` for the\nassociated test of independence. It also checks whether single genes are\ndifferentially expressed, scoring them with a newly defined Global\nDifferentiation Index (`GDI`). `COTAN` plots and clusters genes according to\ntheir co-expression pattern with other genes to study gene interactions and\nidentify cell-identity markers. \n`COTAN v2` introduces a novel feature that uses gene GDI values to assess the\nbiological *uniformity* of a cell cluster. This feature allows researchers to\napply an iterative cell clustering pipeline and achieve a finer resolution of\nuniform clusters. `COTAN` shows high sensitivity in extracting information from\nsmall clusters and lowly expressed genes. Furthermore, `COTAN` leverages its\ncontingency table framework to directly identify genes that are over-represented\nor under-represented in the cluster with respect to the rest of the data-set.\n`COTAN` computes an enrichment score for a given list of marker genes, which can\nbe used to identify and merge small uniform clusters and to check a final\ncluster identification. \nFrom version 2.0.0 new functions and plots to check and clean the data-set were\nincluded along several visualization tools to help users explore and interpret\ntheir data. `COTAN` has a user-friendly interface that is easy to use and does\nnot require extensive programming skills. The strength of `COTAN` is its ability\nto help researchers better understand scRNA-seq data. By identifying gene\nmodules, cell types, and new marker genes, researchers gain insights into the\nunderlying biology of their samples. This helps disease diagnosis, drug\ndiscovery, and other applications. In summary, `COTAN` is a powerful and\nversatile tool for the analysis of scRNA-seq data, with the potential to\nfacilitate the discovery of new cell types and biological insights.\n \n"
      },
      "source": "https://raw.githubusercontent.com/seriph78/COTAN/devel/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/seriph78/COTAN/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/seriph78/COTAN/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "seriph78/COTAN"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "COTAN v2"
      },
      "source": "https://raw.githubusercontent.com/seriph78/COTAN/devel/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "COTAN v2"
        ],
        "type": "Text_excerpt",
        "value": "The production version can be installed via Bioconductor [COTAN for Bioconductor\n3.18](https://bioconductor.org/packages/3.18/bioc/html/COTAN.html \"Production\nversion\"){.uri}, while a stable development version can be found [COTAN for\nBioconductor 3.19](https://bioconductor.org/packages/3.19/bioc/html/COTAN.html\n\"Development version\"){.uri}.\n\nThe latest snapshot can be installed directly as `R` package using `devtools`.\nThe installation was tested on *Linux*, *Windows* and *Mac* but please note that\ndue to lack of multi-core support under *Windows* it might run slower.\n`devtools::install_github(\"seriph78/COTAN\")`\n\nFrom version 2.5.0 `COTAN` can optionally use the `torch` library and thus, in\ncase, use the `GPU` for some of its calculations, with substantial speed-ups.\nHowever this implies a possibly more complicated installation process: see the\nspecific help page [Installing\ntorch](https://github.com/seriph78/COTAN/blob/devel/man/Installing_torch.Rd){.uri}\nfor some pointers.\n"
      },
      "source": "https://raw.githubusercontent.com/seriph78/COTAN/devel/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/seriph78/COTAN/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "COTAN"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "seriph78"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 509526,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/seriph78/COTAN/devel/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 04:01:06",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 16
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Examples",
        "parent_header": [
          "COTAN v2"
        ],
        "type": "Text_excerpt",
        "value": "Main source of examples for the `COTAN v2` is the *vignette*:\n[Guided_tutorial_v2](https://github.com/seriph78/COTAN/blob/devel/vignettes/Guided_tutorial_v2.Rmd\n\"main vignette\"){.uri}. There it is illustrated the preparatory cleaning steps,\nvarious analysis results and plots done on the data-set `\"Mouse Cortex E17.5,\n<GEO:GSM2861514>\"`\n\nFurther more it is possible to look at some other examples on real data-sets at\n[COTAN paper](https://seriph78.github.io/Cotan_paper/index.html){.uri} and more\nextensively at [COTAN Datasets\nanalysis](https://seriph78.github.io/COTAN_Datasets_analysis/){.uri}.\n\nThe first link shows how to handle the genes' clustering while the second shows\nhow to use the new cells' clustering functions to obtain **uniform\nclusterizations** [Please note: the first link has not been upgraded to the\nversion 2, so, while it is possible to reproduce all the steps there described,\nthey need to be manually adapted to the new interface to be executed]\n"
      },
      "source": "https://raw.githubusercontent.com/seriph78/COTAN/devel/README.md",
      "technique": "header_analysis"
    }
  ]
}