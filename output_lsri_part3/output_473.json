{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/UcarLab/CoRE-ATAC"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-11-26T18:37:11Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-10-20T21:43:48Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9653655145585599,
      "result": {
        "original_header": "CoRE-ATAC",
        "type": "Text_excerpt",
        "value": "Classification of Regulatory Elements with ATAC-seq (CoRE-ATAC). \nCoRE-ATAC is split into  \nCoRE-ATAC makes use of features extracted by PEAS[1], using a modified version of the original source code available from https://github.com/UcarLab/PEAS \n"
      },
      "source": "https://raw.githubusercontent.com/UcarLab/CoRE-ATAC/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8270914760490223,
      "result": {
        "original_header": "Feature Extraction/Prediction",
        "type": "Text_excerpt",
        "value": "For feature extraction, we have provided a singularity image file in releases that users can immediately load into their systems with minimal set up. \n \n"
      },
      "source": "https://raw.githubusercontent.com/UcarLab/CoRE-ATAC/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9086348112784072,
      "result": {
        "original_header": "Predicting *cis*-REs with CoRE-ATAC",
        "type": "Text_excerpt",
        "value": "To predict Promoters, Enhancers, and Inuslators with CoRE-ATAC, you will need: \nFor the extracted features, we refer to the previous section. \nWith the singularity image or sandbox directory, directory of features extracted from the previous step and the model file, all of the inputs are now available to predict *cis*-REs! \n"
      },
      "source": "https://raw.githubusercontent.com/UcarLab/CoRE-ATAC/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9970445478971461,
      "result": {
        "original_header": "Model Training",
        "type": "Text_excerpt",
        "value": "We do not provide image files for training models. However, we do provide a [definition file](https://github.com/UcarLab/CoRE-ATAC/blob/master/singularity/CoRE-ATAC-ModelTrainer.def) template and the necessary releases for building a singularity image. Due to different architectures and CUDA installations, it is important that the correct tensorflow GPU image is used.\n \n"
      },
      "source": "https://raw.githubusercontent.com/UcarLab/CoRE-ATAC/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.864300791195781,
      "result": {
        "original_header": "Building the singularity image file for training models",
        "type": "Text_excerpt",
        "value": "However, it may be necessary to build a new singularity image that better fits the computing environment. For example, CUDA installations require earlier versions of tensorflow. \nwith the appropriate tensorflow docker image \nThe singularity image should now be built and ready to use to train models! \n"
      },
      "source": "https://raw.githubusercontent.com/UcarLab/CoRE-ATAC/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9561907252704245,
      "result": {
        "original_header": "Training Models",
        "type": "Text_excerpt",
        "value": "Once the image file is downloaded/created, we can now use this image to train models. For this follow the following steps: \nCreate a list of feature directories for each sample to be included in model training. \nCreate a list of base names for features corresponding to the directories listed in step 1. These can be identified by looking at the filenames before files such as \"x_cutmatrices.txt\". For example if the name is MCF7_cutmatrices.txt, the base name prefix will be MCF7. \n**Step 3: Create a list of PEAS features.** These are the PEAS feature extracted during feature extraction. These are located in the `peak_features` directory of the feature extraction directory with the `_features.txt` suffix. \nTraining CoRE-ATAC is a 3 step process which first trains CoRE-ATAC and PEAS features separately and then merges them for a final round of training. \n\nThis method is used to prevent component overfitting. For example, signal and sequence models may need more time for training, meanwhile PEAS components need less time. To prevent overfitting on PEAS features, these components are trained independently. After merging, both models should be at a point close to overfitting. Therefore, we only want to train on 1-5 epochs so that the model can learn how to integrate the features, but not begin overfitting them. \n"
      },
      "source": "https://raw.githubusercontent.com/UcarLab/CoRE-ATAC/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8972267166985061,
      "result": {
        "original_header": "Feature Extraction Output Files",
        "type": "Text_excerpt",
        "value": "Note: 600bp is the default used. These tools can be used for arbitrary window sizes. \n**\\_peaks.txt:** A table delimited file containing the original and 600bp window peak locations. The 600bp window peak location is defined by the center of the original peak provided to CoRE-ATAC. The columns are defined as: \n**\\_insertsizes.txt:** The insert sizes of reads overlapping the 600bp window. Each peak is defined and follwed by a list of integers. \n1st line: Tab delimited information regarding the peak location: chromosome, 600bp start, 600bp end, peak index\n2nd line: Reference DNA sequence.\n3rd line: Frequency of adenine (A) for each bp in the 600bp window.\n4th line: Frequency of cytosine (C) for each bp in the 600bp window.\n5th line: Frequency of guanine (G) for each bp in the 600bp window.\n6th line: Frequency of thymine (T) for each bp in the 600bp window. \nNote: One hot encoding of the reference is used when < 10 read sequences overlap the position. \n**\\_peaks.txt_original.txt:** Tab delimited file of the original peak locations with index information. This is used for extracting features from PEAS.\n1. Chromosome\n2. Original peak start\n3. Original peak end\n4. Peak index \n**\\_cutmatrices.txt:** Unused. This file encodes the cut sites of paired end reads as a sparse matrix. This was tested, but did not produce a valuable model on its own. This file is formatted to first specify the peak location on the first line, specify the number of sparse matrix entries on the second line, and finally specify wher each cut pair is located in the subsequent lines equal to the number specified by the 2nd line. This process repeeats until the end of the file. \n"
      },
      "source": "https://raw.githubusercontent.com/UcarLab/CoRE-ATAC/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/UcarLab/CoRE-ATAC/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/UcarLab/CoRE-ATAC/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "UcarLab/CoRE-ATAC"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CoRE-ATAC"
      },
      "source": "https://raw.githubusercontent.com/UcarLab/CoRE-ATAC/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/UcarLab/CoRE-ATAC/master/DeepLearningPEAS.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/UcarLab/CoRE-ATAC/master/FeatureExtractor.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/UcarLab/CoRE-ATAC/master/singularity/CoRE-ATACModelTrainer-Merge.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/UcarLab/CoRE-ATAC/master/singularity/CoRE-ATACPredictor-singularity.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/UcarLab/CoRE-ATAC/master/singularity/CoRE-ATACModelTrainer-PEAS.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/UcarLab/CoRE-ATAC/master/singularity/CoRE-ATACModelTrainer-SigSeq.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/UcarLab/CoRE-ATAC/master/singularity/CoRE-ATACFeatureExtraction-singularity.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "Feature Extraction/Prediction"
        ],
        "type": "Text_excerpt",
        "value": "To install the feature extraction and prediction framework, download the latest FeaturePredictor singularity image file (.sif) from [releases](https://github.com/UcarLab/CoRE-ATAC/releases).\n\nOnce the image is downloaded, following the following steps to complete the installation:\n\n**Step 1: Convert the image file into a sandbox directory:**\n\n`singularity build --sandbox ./CoRE-ATAC-FeaturePredictor-hg19/ CoRE-ATAC-FeaturePredictor.sif`\n\n**Step 2: Complete the HOMER installation:**\n\nEnter the sandbox directory:\n\n`singularity shell --writable ./CoRE-ATAC-FeaturePredictor-hg19/`\n\nand install the hg19 reference for HOMER\n\n`perl /HOMER/configureHomer.pl -install hg19`\n\n\n**Step 3: Download the hg19 .fa files from UCSC.**\n\n1. Download the hg19 reference: `ftp://hgdownload.soe.ucsc.edu/goldenPath/hg19/bigZips/hg19.fa.gz`\n2. Download the chromosome files: `ftp://hgdownload.soe.ucsc.edu/goldenPath/hg19/chromosomes/`\n\nOnly the chromosomes that will be used for feature extraction are required \n\n**Step 4: Create a list of chromosome fasta files for future reference.**\n\nThe format of this file is a list for the path of each chromosome reference, where each line contains:\n\n1. The chromosome name\n2. The absolute path to the zipped fasta file.\n\nseparated by tabs\n\nExample:\n\nline1: `chr1    /hg19/chr1.fa.gz`\n\nline2: `chr2    /hg19/chr2.fa.gz`\n\n---\n\nAfter these steps, you should now have a directory that can be used with singularity and the necessary files to run both feature extraction and model predictions!\n\n"
      },
      "source": "https://raw.githubusercontent.com/UcarLab/CoRE-ATAC/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9978951064738698,
      "result": {
        "original_header": "CoRE-ATAC",
        "type": "Text_excerpt",
        "value": "CoRE-ATAC makes use of features extracted by PEAS[1], using a modified version of the original source code available from https://github.com/UcarLab/PEAS \n"
      },
      "source": "https://raw.githubusercontent.com/UcarLab/CoRE-ATAC/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9356079369885231,
      "result": {
        "original_header": "Feature Extraction/Prediction",
        "type": "Text_excerpt",
        "value": "For feature extraction, we have provided a singularity image file in releases that users can immediately load into their systems with minimal set up. \n \n"
      },
      "source": "https://raw.githubusercontent.com/UcarLab/CoRE-ATAC/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9760111657151191,
      "result": {
        "original_header": "System Requirements/Recommendations:",
        "type": "Text_excerpt",
        "value": "1. System with Singularity installed: https://sylabs.io/\n2. GPU required?: No GPU is required. Both feature extraction and predictions use CPU. \n3. Memory: We recommend at least 16gb of memory. \nNote: For GPU use, a modified singularity image will need to be created, pulling from the corresponding [NVIDIA docker image](https://ngc.nvidia.com/catalog/containers/nvidia:tensorflow/tags).\n \n"
      },
      "source": "https://raw.githubusercontent.com/UcarLab/CoRE-ATAC/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9046829253181614,
      "result": {
        "original_header": "Predicting *cis*-REs with CoRE-ATAC",
        "type": "Text_excerpt",
        "value": "To predict *cis*-REs (i.e., Pormoters, Insulators, Enhancers) run singularity with the following code, replacing the arguments and paths as necessary: \n**Arg1:** The path to the feature extraction directory. \n**Arg2:** The prefix used the feature extraction files. This can be identified by looking at the filenames before files such as \"x_cutmatrices.txt\". For example if the name is MCF7_cutmatrices.txt, the prefix will be MCF7. \n**Arg4:** The output file (e.g., Predictions.txt) \n"
      },
      "source": "https://raw.githubusercontent.com/UcarLab/CoRE-ATAC/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9941526038054023,
      "result": {
        "original_header": "Building the singularity image file for training models",
        "type": "Text_excerpt",
        "value": "CoRE-ATAC has been tested using the (https://github.com/UcarLab/CoRE-ATAC/blob/master/singularity/CoRE-ATAC-ModelTrainer.def)[definition file] provided in the singularity directory. Due to size limits on release, we do not provide the built singularity image file on github. \nHowever, it may be necessary to build a new singularity image that better fits the computing environment. For example, CUDA installations require earlier versions of tensorflow. \nTo build the singularity image file, first identify the NVIDIA docker image](https://ngc.nvidia.com/catalog/containers/nvidia:tensorflow/tags) that best suits your system. \nNext, update the singularity definition file, available from: (https://github.com/UcarLab/CoRE-ATAC/blob/master/singularity/CoRE-ATAC-ModelTrainer.def)[https://github.com/UcarLab/CoRE-ATAC/blob/master/singularity/CoRE-ATAC-ModelTrainer.def] \n`nvcr.io/nvidia/tensorflow:19.01-py3` \n`sudo singularity build CoRE-ATACModelTrainer.sif CoRE-ATAC-ModelTrainer.def`  \n"
      },
      "source": "https://raw.githubusercontent.com/UcarLab/CoRE-ATAC/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9458019476713764,
      "result": {
        "original_header": "Training Models",
        "type": "Text_excerpt",
        "value": "Once the image file is downloaded/created, we can now use this image to train models. For this follow the following steps: \nline 1: `/path/to/MCF7/`\nline 2: `/path/to/K562/` \nCreate a list of base names for features corresponding to the directories listed in step 1. These can be identified by looking at the filenames before files such as \"x_cutmatrices.txt\". For example if the name is MCF7_cutmatrices.txt, the base name prefix will be MCF7. \nline 1: `/path/to/MCF7/peak_features/MCF7_features.txt`\nline 2: `/path/to/K562/peak_features/K562_features.txt` \n\n**Step 6: Train PEAS** To train the PEAS model run the following: \n"
      },
      "source": "https://raw.githubusercontent.com/UcarLab/CoRE-ATAC/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8824649249734352,
      "result": {
        "original_header": "Predicting *cis*-REs with CoRE-ATAC",
        "type": "Text_excerpt",
        "value": "**Arg4:** The output file (e.g., Predictions.txt) \n"
      },
      "source": "https://raw.githubusercontent.com/UcarLab/CoRE-ATAC/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8363586005871054,
      "result": {
        "original_header": "Training Models",
        "type": "Text_excerpt",
        "value": "line 1: `/path/to/MCF7/peak_features/MCF7_features.txt`\nline 2: `/path/to/K562/peak_features/K562_features.txt` \nline 1: `train\tchr1,chr4,chr5,chr6,chr7,chr8,chr9,chr12,chr13,chr14,chr15,chr16,chr17,chr18,chr19,chr20,chr21,chr22`\nline 2: `val\tchr2,chr10`\nline 3: `test\tchr3,chr11`\n \n \nWith all 4 of these files, we are now ready to train models! \n"
      },
      "source": "https://raw.githubusercontent.com/UcarLab/CoRE-ATAC/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/UcarLab/CoRE-ATAC/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2019 The Jackson Laboratory\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/UcarLab/CoRE-ATAC/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CoRE-ATAC"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "UcarLab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Java",
        "size": 133781,
        "type": "Programming_language",
        "value": "Java"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 76489,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 6642,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/UcarLab/CoRE-ATAC/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ajt986",
          "type": "User"
        },
        "date_created": "2021-10-20T15:55:02Z",
        "date_published": "2022-02-24T19:09:27Z",
        "description": "Partial release. Fixes package configurations when running the feature-predictor .sif on CPUs. Please see the previous release for the full version.",
        "html_url": "https://github.com/UcarLab/CoRE-ATAC/releases/tag/v1.2.1",
        "name": "CoRE-ATAC v1.2.1 Feature Predictor Fix",
        "release_id": 60408740,
        "tag": "v1.2.1",
        "tarball_url": "https://api.github.com/repos/UcarLab/CoRE-ATAC/tarball/v1.2.1",
        "type": "Release",
        "url": "https://api.github.com/repos/UcarLab/CoRE-ATAC/releases/60408740",
        "value": "https://api.github.com/repos/UcarLab/CoRE-ATAC/releases/60408740",
        "zipball_url": "https://api.github.com/repos/UcarLab/CoRE-ATAC/zipball/v1.2.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ajt986",
          "type": "User"
        },
        "date_created": "2021-04-13T20:49:18Z",
        "date_published": "2021-04-13T20:58:20Z",
        "description": "Small bug fix from v1.1 where the incorrect version of python is called and causing an error with integer versus floating point division.",
        "html_url": "https://github.com/UcarLab/CoRE-ATAC/releases/tag/v1.2",
        "name": "CoRE-ATAC v1.2",
        "release_id": 41379262,
        "tag": "v1.2",
        "tarball_url": "https://api.github.com/repos/UcarLab/CoRE-ATAC/tarball/v1.2",
        "type": "Release",
        "url": "https://api.github.com/repos/UcarLab/CoRE-ATAC/releases/41379262",
        "value": "https://api.github.com/repos/UcarLab/CoRE-ATAC/releases/41379262",
        "zipball_url": "https://api.github.com/repos/UcarLab/CoRE-ATAC/zipball/v1.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ajt986",
          "type": "User"
        },
        "date_created": "2020-05-18T18:00:54Z",
        "date_published": "2021-01-19T21:11:41Z",
        "description": "ZIP Files for building singularity images and the Singularity Image File for feature extraction and predicting. The singularity image file for the model trainer must be created using the definition file to fit the system it will be run on.",
        "html_url": "https://github.com/UcarLab/CoRE-ATAC/releases/tag/v1.1",
        "name": "CoRE-ATAC v1.1",
        "release_id": 36624098,
        "tag": "v1.1",
        "tarball_url": "https://api.github.com/repos/UcarLab/CoRE-ATAC/tarball/v1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/UcarLab/CoRE-ATAC/releases/36624098",
        "value": "https://api.github.com/repos/UcarLab/CoRE-ATAC/releases/36624098",
        "zipball_url": "https://api.github.com/repos/UcarLab/CoRE-ATAC/zipball/v1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ajt986",
          "type": "User"
        },
        "date_created": "2020-05-18T17:54:26Z",
        "date_published": "2020-05-18T17:59:11Z",
        "description": "A Tensorflow CPU compatible pretrained model for CoRE-ATAC. This model was trained using channels last instead of channels first.",
        "html_url": "https://github.com/UcarLab/CoRE-ATAC/releases/tag/CoRE-ATAC_Model_CPU",
        "name": "CPU Compatible Pretrained Model",
        "release_id": 26638796,
        "tag": "CoRE-ATAC_Model_CPU",
        "tarball_url": "https://api.github.com/repos/UcarLab/CoRE-ATAC/tarball/CoRE-ATAC_Model_CPU",
        "type": "Release",
        "url": "https://api.github.com/repos/UcarLab/CoRE-ATAC/releases/26638796",
        "value": "https://api.github.com/repos/UcarLab/CoRE-ATAC/releases/26638796",
        "zipball_url": "https://api.github.com/repos/UcarLab/CoRE-ATAC/zipball/CoRE-ATAC_Model_CPU"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ajt986",
          "type": "User"
        },
        "date_created": "2020-02-03T22:28:29Z",
        "date_published": "2020-02-03T22:32:21Z",
        "description": "This is a pre-compiled model that can be loaded using keras/tensorflow to predict regulatory elements using features obtained using CoRE-ATAC feature extraction methods.",
        "html_url": "https://github.com/UcarLab/CoRE-ATAC/releases/tag/CoRE-ATAC_Model",
        "name": "CoRE-ATAC Precompiled Model (December 2019)",
        "release_id": 23355680,
        "tag": "CoRE-ATAC_Model",
        "tarball_url": "https://api.github.com/repos/UcarLab/CoRE-ATAC/tarball/CoRE-ATAC_Model",
        "type": "Release",
        "url": "https://api.github.com/repos/UcarLab/CoRE-ATAC/releases/23355680",
        "value": "https://api.github.com/repos/UcarLab/CoRE-ATAC/releases/23355680",
        "zipball_url": "https://api.github.com/repos/UcarLab/CoRE-ATAC/zipball/CoRE-ATAC_Model"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "parent_header": [
          "Model Training"
        ],
        "type": "Text_excerpt",
        "value": "**GPU:** A tensorflow compatible GPU (i.e., NVIDIA) is required to train models. Due to the amount of data used to train these models, we do not recommend training models via CPU. \n\n**Memory:** For training a model from scratch, it is necessary to have enough memory for all of the training data. For reference: CoRE-ATAC's model was trained using 128gb of memory on a high performance computing cluster.\n\n"
      },
      "source": "https://raw.githubusercontent.com/UcarLab/CoRE-ATAC/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running Feature Extraction",
        "parent_header": [
          "Feature Extraction/Prediction"
        ],
        "type": "Text_excerpt",
        "value": "To extract feaures, use the singularity sandbox with the following code, replacing arguments and paths as necessary:\n\n`singularity exec ./CoRE-ATAC-FeaturePredictor-hg19/ /CoRE-ATAC/CoRE-ATACFeatureExtraction-singularity.sh <arg1> <arg2> <arg3> <arg4> <arg5> <arg6>`\n\n**Arg1:** The path to the ATAC-seq alignment file (.bam)\n\n**Arg2:** The path to the ATAC-seq peak file (3 column tab delimited file for chr, start, end)\n\n**Arg3:** The reference genome. (e.g., hg19). This is used to inform HOMER.\n\n**Arg4:** The path to the reference genome fasta file (e.g., hg19.fa)\n\n**Arg5:** The path to the file specifying the reference genome chromosomes as noted in the installation section.\n\n**Arg6:** The output directory. Note: This directory should already be created.\n\n**IMPORTANT: The full path must be used for the output directory!**\n\nAfter running, multiple feature files will be generated in the specific output directory.\n\n"
      },
      "source": "https://raw.githubusercontent.com/UcarLab/CoRE-ATAC/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 01:03:33",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 10
      },
      "technique": "GitHub_API"
    }
  ]
}