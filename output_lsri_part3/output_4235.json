{
  "application_domain": [
    {
      "confidence": 7.22,
      "result": {
        "type": "String",
        "value": "Audio"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/PSI-Lab/HiCSR"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "HiCSR: a Hi-C super-resolution framework for producing highly realistic contact maps</font></h3>",
        "type": "Text_excerpt",
        "value": "Implementation of HiCSR framework described in this paper:\n\n> Michael C Dimmick, Leo J Lee, and Brendan J Frey  \n> HiCSR: a Hi-C super-resolution framework for producing highly realistic contact maps  \n> bioRxiv preprint  \n> [10.1101/2020.02.24.961714](https://www.biorxiv.org/content/10.1101/2020.02.24.961714v1)\n\n"
      },
      "source": "https://raw.githubusercontent.com/PSI-Lab/HiCSR/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "About HiCSR",
        "parent_header": [
          "HiCSR: a Hi-C super-resolution framework for producing highly realistic contact maps</font></h3>"
        ],
        "type": "Text_excerpt",
        "value": "HiCSR is a Hi-C super-resolution framework written in python capable of producing enhanced contact maps which are both accurate and realistic. The HiCSR framework optimizes for a weighted combination of adversarial loss, pixel-wise L1 loss, and a feature reconstruction loss obtained from the latent representation of a task specific denoising autoencoder.\n\n<p align=\"center\">\n<img src=\"./images/hicsr_arch.png\" width=\"400\">\n</p>\n\nA sample of HiCSR-enhanced Hi-C data is shown below:\n\n<p align=\"center\">\n<img src=\"./images/hicsr_sample.png\" width=\"600\">\n</p>\n\n"
      },
      "source": "https://raw.githubusercontent.com/PSI-Lab/HiCSR/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Table of Contents",
        "parent_header": [
          "HiCSR: a Hi-C super-resolution framework for producing highly realistic contact maps</font></h3>"
        ],
        "type": "Text_excerpt",
        "value": "* [Installation](#installation)\n  * [Dependencies](#dependencies)\n  * [Anaconda Python](#anaconda-python)\n  * [Pip](#pip)\n* [Usage](#usage)\n  * [Preprocessing](#preprocessing)\n  * [Training](#training)  \n  * [Inference](#inference)\n* [HiCSR Example](#hicsr-example)\n  * [Creating HiCSR Dataset from Contact Maps](#creating-hicsr-dataset-from-contact-maps)\n  * [Training HiCSR](#training-hicsr)  \n  * [Enhancing Contact Maps](#enhancing-contact-maps)\n* [License](#license)\n"
      },
      "source": "https://raw.githubusercontent.com/PSI-Lab/HiCSR/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Anaconda Python",
        "parent_header": [
          "HiCSR: a Hi-C super-resolution framework for producing highly realistic contact maps</font></h3>",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "We recommend using HiCSR with the conda package manager from \n[Anaconda](https://www.anaconda.com/distribution/).\n\nTo create a Conda environment for running HiCSR, use the\n`environment.yaml` file, which will install all required dependencies:\n\n    conda env create -f environment.yaml\n\nActivate your environment with\n\n    conda activate HiCSR\n    "
      },
      "source": "https://raw.githubusercontent.com/PSI-Lab/HiCSR/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Pip",
        "parent_header": [
          "HiCSR: a Hi-C super-resolution framework for producing highly realistic contact maps</font></h3>",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Alternatively you can install the dependencies via the `requirements.txt` file\nfor pip:\n\n    pip install -f requirements.txt\n"
      },
      "source": "https://raw.githubusercontent.com/PSI-Lab/HiCSR/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Preprocessing",
        "parent_header": [
          "HiCSR: a Hi-C super-resolution framework for producing highly realistic contact maps</font></h3>",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "The preprocessing script is located here: [`preprocessing.py`](./preprocessing.py). This script takes raw n x n Hi-C contact matrices as input and generates HiCSR training samples as described in the paper. The resultant dataset can be directly used for training. \nCall the script with the `--help` flag to receive parameter usage:\n\n    $ python preprocessing.py --help\n    usage: preprocessing.py [-h] --input_fp INPUT_FP --output_fp OUTPUT_FP\n                            [--normalize NORMALIZE] [--max_dist MAX_DIST]\n                            [--input_size INPUT_SIZE] [--output_size OUTPUT_SIZE]\n\n    optional arguments:\n    -h, --help            show this help message and exit\n    --input INPUT         root directory where both high resolution (hr) and low\n                          resolution (lr) intrachromosomal Hi-C interaction\n                          matrices are stored\n    --output OUTPUT       output directory to write preprocessing results to\n    --normalize NORMALIZE\n                          option to normalize input before splitting data, for\n                          information about the normalization method see the\n                          paper, if set, normalized low and high resolution\n                          contact maps will be stored also default = 1\n    --max_dist MAX_DIST   maximum genomic distance to create submatrices, splits\n                          with a loci greater than this value are not created.\n                          Value is a number of pixels and is dependant on the\n                          resolution of the dataset to be processed, default =\n                          200 pixels\n    --input_size INPUT_SIZE\n                          submatrix split size for low resolution input, default\n                          = 40\n    --output_size OUTPUT_SIZE\n                          submatrix split size for high resolution label,\n                          default = 28\n"
      },
      "source": "https://raw.githubusercontent.com/PSI-Lab/HiCSR/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Training",
        "parent_header": [
          "HiCSR: a Hi-C super-resolution framework for producing highly realistic contact maps</font></h3>",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "The preprocessing script is located here: [`train.py`](./train.py).\nCall the script with the `--help` flag to receive parameter usage:\n\n    $ python train.py --help\n    usage: train.py [-h] --data_fp DATA_FP --model MODEL [--gpu GPU] --experiment\n                    EXPERIMENT\n\n    optional arguments:\n    -h, --help            show this help message and exit\n    --data_fp DATA_FP     directory containing training and validation data to\n                          use for model training\n    --model MODEL         Set the model to be trained, There are two options:\n                          'HiCSR' will train the Hi-C enhancement model and\n                          'DAE' will train the Denoising Autoencoder on the high\n                          resolution data\n    --gpu GPU             GPU number to use for training, if the system has no\n                          GPU, training will automatically default to using the\n                          CPU. default = 0.\n    --experiment EXPERIMENT\n                          experiment name associated with the training run, all\n                          model logging and final model file are saved under\n                          this name. Experiment name must match an entry in the\n                          experiment_hyperparameters.json config file\n\nThe filepath required by `--data_fp` uses the following directory structure:\n\n    \u251c\u2500\u2500 train\n        \u251c\u2500\u2500 train-samples-1.npz\n        \u251c\u2500\u2500 ...\n        \u2514\u2500\u2500 train-samples-n.npz\n    \u2514\u2500\u2500 valid\n        \u251c\u2500\u2500 valid_samples-1.npz\n        \u251c\u2500\u2500 ...\n        \u2514\u2500\u2500 valid_samples-m.npz\n\nHiCSR training requires an experiment name which matches an entry in the configuration file for model training which specifies the model parameters. These configurations are stored\nhere: [`experiment_hyperparameters.json`](./experiment_hyperparameters.json).\n                            "
      },
      "source": "https://raw.githubusercontent.com/PSI-Lab/HiCSR/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Inference",
        "parent_header": [
          "HiCSR: a Hi-C super-resolution framework for producing highly realistic contact maps</font></h3>",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "The preprocessing script is located here: [`predict.py`](./predict.py).\nCall the script with the `--help` flag to receive parameter usage:\n\n    $ python predict.py --help\n    usage: predict.py [-h] --input_fp INPUT_FP --output_fp OUTPUT_FP --model_type\n                      MODEL_TYPE --model_fp MODEL_FP\n\n    optional arguments:\n    -h, --help            show this help message and exit\n    --input INPUT         input directory where the low resolution Hi-C matrices\n                          to be enhanced are stored\n    --output OUTPUT       output directory to store resultant Hi-C matrices are\n                          stored\n    --model_type MODEL_TYPE\n                          model type to predict with, HiCSR or DAE (Denoising\n                          Autoencoder). HiCSR is used for Hi-C enhancement, DAE\n                          is the loss network used to train HiCSR\n    --model_fp MODEL_FP   pytorch model filepath to load for enhancement\n                          predictions\n                          \nInference with HiCSR expects normalized Hi-C contact maps.\n"
      },
      "source": "https://raw.githubusercontent.com/PSI-Lab/HiCSR/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Creating HiCSR Dataset from Hi-C Contact Maps",
        "parent_header": [
          "HiCSR: a Hi-C super-resolution framework for producing highly realistic contact maps</font></h3>",
          "Example"
        ],
        "type": "Text_excerpt",
        "value": "To preprocess the samples, call the preprocessing script on the root directory `input_samples` with the desired flags. In this example we use the default split settings and normalize the inputs, saving the output to the `preprocessing_output` directory:\n\n    $ python preprocessing.py --input input_samples/ --output preprocessing_output/ --normalize 1\n    \nThis will generate the normalized HiCSR submatrix dataset samples, their respective matrix indices, and the normalized data:\n\n    preprocessing_output/\n    \u251c\u2500\u2500 HiCSR_dataset\n    \u2502   \u251c\u2500\u2500 indices\n    \u2502   \u2502   \u251c\u2500\u2500 chr21-GM12878-HiCSR-dataset-normalized-idxs.npz\n    \u2502   \u2502   \u2514\u2500\u2500 chr22-GM12878-HiCSR-dataset-normalized-idxs.npz\n    \u2502   \u2514\u2500\u2500 samples\n    \u2502       \u251c\u2500\u2500 chr21-GM12878-HiCSR-dataset-normalized-samples.npz\n    \u2502       \u2514\u2500\u2500 chr22-GM12878-HiCSR-dataset-normalized-samples.npz\n    \u2514\u2500\u2500 normalized\n        \u251c\u2500\u2500 hr\n        \u2502   \u251c\u2500\u2500 chr21-GM12878-1-norm.txt.gz\n        \u2502   \u2514\u2500\u2500 chr22-GM12878-1-norm.txt.gz\n        \u2514\u2500\u2500 lr\n            \u251c\u2500\u2500 chr21-GM12878-16-norm.txt.gz\n            \u2514\u2500\u2500 chr22-GM12878-16-norm.txt.gz\n"
      },
      "source": "https://raw.githubusercontent.com/PSI-Lab/HiCSR/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Training HiCSR (Optional)",
        "parent_header": [
          "HiCSR: a Hi-C super-resolution framework for producing highly realistic contact maps</font></h3>",
          "Example"
        ],
        "type": "Text_excerpt",
        "value": "To train HiCSR, the script `train.py` is used.  For this example, one of the sample matrices are put into the training folder and the other is put into the validation folder. The script expects the following directory structure:\n\n    \u251c\u2500\u2500 train\n        \u2514\u2500\u2500 chr21-GM12878-HiCSR-dataset-normalized-samples.npz\n    \u2514\u2500\u2500 valid\n        \u2514\u2500\u2500 chr22-GM12878-HiCSR-dataset-normalized-samples.npz\n        \nOnce the correct directory structure has been made the script can be called as follows:\n\n    $ python train.py --data_fp preprocessing_output/HiCSR_dataset/samples/ --model HiCSR --experiment test_HiCSR\n    \nThis will begin the training procedure. Training progress is logged in the experiments directory:\n\n    experiments/\n    \u2514\u2500\u2500 test_HiCSR\n        \u251c\u2500\u2500 checkpoints\n        \u2502   \u2514\u2500\u2500 HiCSRModel_ckpt_0.pth\n        \u251c\u2500\u2500 HiCSRModel.pkl\n        \u251c\u2500\u2500 logs\n        \u2502   \u2514\u2500\u2500 test_HiCSR.log\n        \u251c\u2500\u2500 tensorboard\n        \u2502   \u251c\u2500\u2500 ... (tensorboard files)\n        \u2514\u2500\u2500 test_HiCSR.pth\n        \nEach experiment generates training checkpoints, a pickled class model, training logs, tensorboard files for training monitoring, and a final pytorch model.\n"
      },
      "source": "https://raw.githubusercontent.com/PSI-Lab/HiCSR/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3. Enhancing Hi-C Contact Maps",
        "parent_header": [
          "HiCSR: a Hi-C super-resolution framework for producing highly realistic contact maps</font></h3>",
          "Example"
        ],
        "type": "Text_excerpt",
        "value": "Hi-C contact maps can be enhanced using either a newly trained model from step 2, or using the [pretrained model](./pretrained_models) files. In either case, the prediction script expects normalized data generated from step 1:\n\n    $ python predict.py --input preprocessing_output/normalized/lr/ --output HiCSR_predictions/ --model_type HiCSR --model_fp pretrained_models/HiCSR.pth\n    \nIf the enhancement is successful, you should find one output file for each corresponding input file. These predicted matrices are normalized to the range \\[-1,1\\]. \n"
      },
      "source": "https://raw.githubusercontent.com/PSI-Lab/HiCSR/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-01-30T18:37:15Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-03-27T06:49:10Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "HiCSR: a Hi-C super-resolution framework for producing highly realistic contact maps"
      },
      "technique": "GitHub_API"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/PSI-Lab/HiCSR/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/PSI-Lab/HiCSR/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PSI-Lab/HiCSR"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "HiCSR: a Hi-C super-resolution framework for producing highly realistic contact maps"
      },
      "source": "https://raw.githubusercontent.com/PSI-Lab/HiCSR/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/PSI-Lab/HiCSR/master/./images/hicsr_arch.png"
      },
      "source": "https://raw.githubusercontent.com/PSI-Lab/HiCSR/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/PSI-Lab/HiCSR/master/./images/hicsr_sample.png"
      },
      "source": "https://raw.githubusercontent.com/PSI-Lab/HiCSR/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Anaconda Python",
        "parent_header": [
          "HiCSR: a Hi-C super-resolution framework for producing highly realistic contact maps</font></h3>",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "We recommend using HiCSR with the conda package manager from \n[Anaconda](https://www.anaconda.com/distribution/).\n\nTo create a Conda environment for running HiCSR, use the\n`environment.yaml` file, which will install all required dependencies:\n\n    conda env create -f environment.yaml\n\nActivate your environment with\n\n    conda activate HiCSR\n    "
      },
      "source": "https://raw.githubusercontent.com/PSI-Lab/HiCSR/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Pip",
        "parent_header": [
          "HiCSR: a Hi-C super-resolution framework for producing highly realistic contact maps</font></h3>",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Alternatively you can install the dependencies via the `requirements.txt` file\nfor pip:\n\n    pip install -f requirements.txt\n"
      },
      "source": "https://raw.githubusercontent.com/PSI-Lab/HiCSR/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/PSI-Lab/HiCSR/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "\nMIT License\n\nCopyright (c) 2020 Michael Dimmick\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/PSI-Lab/HiCSR/master/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "HiCSR: a Hi-C super-resolution framework for producing highly realistic contact maps</font></h3>"
        ],
        "type": "Text_excerpt",
        "value": "This project is licensed under the [MIT License](./LICENSE)\n"
      },
      "source": "https://raw.githubusercontent.com/PSI-Lab/HiCSR/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/PSI-Lab/HiCSR/master/./images/psi_logo.png"
      },
      "source": "https://raw.githubusercontent.com/PSI-Lab/HiCSR/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "HiCSR"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "PSI-Lab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 42747,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/PSI-Lab/HiCSR/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "parent_header": [
          "HiCSR: a Hi-C super-resolution framework for producing highly realistic contact maps</font></h3>",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "HiCSR is developed with [Python 3](https://www.python.org) and [PyTorch](https://pytorch.org) (1.1.0 +). We provide a tested Conda environment.\n"
      },
      "source": "https://raw.githubusercontent.com/PSI-Lab/HiCSR/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 15:41:49",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 12
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Preprocessing",
        "parent_header": [
          "HiCSR: a Hi-C super-resolution framework for producing highly realistic contact maps</font></h3>",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "The preprocessing script is located here: [`preprocessing.py`](./preprocessing.py). This script takes raw n x n Hi-C contact matrices as input and generates HiCSR training samples as described in the paper. The resultant dataset can be directly used for training. \nCall the script with the `--help` flag to receive parameter usage:\n\n    $ python preprocessing.py --help\n    usage: preprocessing.py [-h] --input_fp INPUT_FP --output_fp OUTPUT_FP\n                            [--normalize NORMALIZE] [--max_dist MAX_DIST]\n                            [--input_size INPUT_SIZE] [--output_size OUTPUT_SIZE]\n\n    optional arguments:\n    -h, --help            show this help message and exit\n    --input INPUT         root directory where both high resolution (hr) and low\n                          resolution (lr) intrachromosomal Hi-C interaction\n                          matrices are stored\n    --output OUTPUT       output directory to write preprocessing results to\n    --normalize NORMALIZE\n                          option to normalize input before splitting data, for\n                          information about the normalization method see the\n                          paper, if set, normalized low and high resolution\n                          contact maps will be stored also default = 1\n    --max_dist MAX_DIST   maximum genomic distance to create submatrices, splits\n                          with a loci greater than this value are not created.\n                          Value is a number of pixels and is dependant on the\n                          resolution of the dataset to be processed, default =\n                          200 pixels\n    --input_size INPUT_SIZE\n                          submatrix split size for low resolution input, default\n                          = 40\n    --output_size OUTPUT_SIZE\n                          submatrix split size for high resolution label,\n                          default = 28\n"
      },
      "source": "https://raw.githubusercontent.com/PSI-Lab/HiCSR/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Training",
        "parent_header": [
          "HiCSR: a Hi-C super-resolution framework for producing highly realistic contact maps</font></h3>",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "The preprocessing script is located here: [`train.py`](./train.py).\nCall the script with the `--help` flag to receive parameter usage:\n\n    $ python train.py --help\n    usage: train.py [-h] --data_fp DATA_FP --model MODEL [--gpu GPU] --experiment\n                    EXPERIMENT\n\n    optional arguments:\n    -h, --help            show this help message and exit\n    --data_fp DATA_FP     directory containing training and validation data to\n                          use for model training\n    --model MODEL         Set the model to be trained, There are two options:\n                          'HiCSR' will train the Hi-C enhancement model and\n                          'DAE' will train the Denoising Autoencoder on the high\n                          resolution data\n    --gpu GPU             GPU number to use for training, if the system has no\n                          GPU, training will automatically default to using the\n                          CPU. default = 0.\n    --experiment EXPERIMENT\n                          experiment name associated with the training run, all\n                          model logging and final model file are saved under\n                          this name. Experiment name must match an entry in the\n                          experiment_hyperparameters.json config file\n\nThe filepath required by `--data_fp` uses the following directory structure:\n\n    \u251c\u2500\u2500 train\n        \u251c\u2500\u2500 train-samples-1.npz\n        \u251c\u2500\u2500 ...\n        \u2514\u2500\u2500 train-samples-n.npz\n    \u2514\u2500\u2500 valid\n        \u251c\u2500\u2500 valid_samples-1.npz\n        \u251c\u2500\u2500 ...\n        \u2514\u2500\u2500 valid_samples-m.npz\n\nHiCSR training requires an experiment name which matches an entry in the configuration file for model training which specifies the model parameters. These configurations are stored\nhere: [`experiment_hyperparameters.json`](./experiment_hyperparameters.json).\n                            "
      },
      "source": "https://raw.githubusercontent.com/PSI-Lab/HiCSR/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Inference",
        "parent_header": [
          "HiCSR: a Hi-C super-resolution framework for producing highly realistic contact maps</font></h3>",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "The preprocessing script is located here: [`predict.py`](./predict.py).\nCall the script with the `--help` flag to receive parameter usage:\n\n    $ python predict.py --help\n    usage: predict.py [-h] --input_fp INPUT_FP --output_fp OUTPUT_FP --model_type\n                      MODEL_TYPE --model_fp MODEL_FP\n\n    optional arguments:\n    -h, --help            show this help message and exit\n    --input INPUT         input directory where the low resolution Hi-C matrices\n                          to be enhanced are stored\n    --output OUTPUT       output directory to store resultant Hi-C matrices are\n                          stored\n    --model_type MODEL_TYPE\n                          model type to predict with, HiCSR or DAE (Denoising\n                          Autoencoder). HiCSR is used for Hi-C enhancement, DAE\n                          is the loss network used to train HiCSR\n    --model_fp MODEL_FP   pytorch model filepath to load for enhancement\n                          predictions\n                          \nInference with HiCSR expects normalized Hi-C contact maps.\n"
      },
      "source": "https://raw.githubusercontent.com/PSI-Lab/HiCSR/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example",
        "parent_header": [
          "HiCSR: a Hi-C super-resolution framework for producing highly realistic contact maps</font></h3>"
        ],
        "type": "Text_excerpt",
        "value": "We provide a small sample set of Hi-C matrix data to demonstrate how to use the HiCSR package. These sample matrices are stored in the [input_samples](./input_samples) directory, where each sample has the following naming convention `<chromosome>-<cell_type>-<downsample_factor>-<file_tag>.txt.gz`:\n\n    input_samples/\n    \u251c\u2500\u2500 hr\n    \u2502   \u251c\u2500\u2500 chr21-GM12878-1-sample.txt.gz\n    \u2502   \u2514\u2500\u2500 chr22-GM12878-1-sample.txt.gz\n    \u2514\u2500\u2500 lr\n        \u251c\u2500\u2500 chr21-GM12878-16-sample.txt.gz\n        \u2514\u2500\u2500 chr22-GM12878-16-sample.txt.gz\n        "
      },
      "source": "https://raw.githubusercontent.com/PSI-Lab/HiCSR/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Training HiCSR (Optional)",
        "parent_header": [
          "HiCSR: a Hi-C super-resolution framework for producing highly realistic contact maps</font></h3>",
          "Example"
        ],
        "type": "Text_excerpt",
        "value": "To train HiCSR, the script `train.py` is used.  For this example, one of the sample matrices are put into the training folder and the other is put into the validation folder. The script expects the following directory structure:\n\n    \u251c\u2500\u2500 train\n        \u2514\u2500\u2500 chr21-GM12878-HiCSR-dataset-normalized-samples.npz\n    \u2514\u2500\u2500 valid\n        \u2514\u2500\u2500 chr22-GM12878-HiCSR-dataset-normalized-samples.npz\n        \nOnce the correct directory structure has been made the script can be called as follows:\n\n    $ python train.py --data_fp preprocessing_output/HiCSR_dataset/samples/ --model HiCSR --experiment test_HiCSR\n    \nThis will begin the training procedure. Training progress is logged in the experiments directory:\n\n    experiments/\n    \u2514\u2500\u2500 test_HiCSR\n        \u251c\u2500\u2500 checkpoints\n        \u2502   \u2514\u2500\u2500 HiCSRModel_ckpt_0.pth\n        \u251c\u2500\u2500 HiCSRModel.pkl\n        \u251c\u2500\u2500 logs\n        \u2502   \u2514\u2500\u2500 test_HiCSR.log\n        \u251c\u2500\u2500 tensorboard\n        \u2502   \u251c\u2500\u2500 ... (tensorboard files)\n        \u2514\u2500\u2500 test_HiCSR.pth\n        \nEach experiment generates training checkpoints, a pickled class model, training logs, tensorboard files for training monitoring, and a final pytorch model.\n"
      },
      "source": "https://raw.githubusercontent.com/PSI-Lab/HiCSR/master/README.md",
      "technique": "header_analysis"
    }
  ]
}