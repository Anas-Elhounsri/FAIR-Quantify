{
  "application_domain": [
    {
      "confidence": 25.25,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "format": "cff",
        "type": "File_dump",
        "value": "cff-version: 1.2.0\nmessage: \"If you use the SIMPA tool, we would appreciate if you cite our Journal publication in the Journal of Biomedical Optics.\"\nauthors:\n- family-names: \"Gr\u00f6hl\"\n  given-names: \"Janek\"\n- family-names: \"Dreher\"\n  given-names: \"Kris K.\"\n- family-names: \"Schellenberg\"\n  given-names: \"Melanie\"\n- family-names: \"Rix\"\n  given-names: \"Tom\"\n- family-names: \"Holzwarth\"\n  given-names: \"Niklas\"\n- family-names: \"Vieten\"\n  given-names: \"Patricia\"\n- family-names: \"Ayala\"\n  given-names: \"Leonardo\"\n- family-names: \"Bohndiek\"\n  given-names: \"Sarah E.\"\n- family-names: \"Seitel\"\n  given-names: \"Alexander\"\n- family-names: \"Maier-Hein\"\n  given-names: \"Lena\"\ntitle: \"The toolkit for Simulation and Image Processing for Photonics and Acoustics (SIMPA)\"\nurl: \"https://github.com/IMSY-DKFZ/simpa\"\npreferred-citation:\n  type: article\n  authors:\n  - family-names: \"Gr\u00f6hl\"\n    given-names: \"Janek\"\n  - family-names: \"Dreher\"\n    given-names: \"Kris K.\"\n  - family-names: \"Schellenberg\"\n    given-names: \"Melanie\"\n  - family-names: \"Rix\"\n    given-names: \"Tom\"\n  - family-names: \"Holzwarth\"\n    given-names: \"Niklas\"\n  - family-names: \"Vieten\"\n    given-names: \"Patricia\"\n  - family-names: \"Ayala\"\n    given-names: \"Leonardo\"\n  - family-names: \"Bohndiek\"\n    given-names: \"Sarah E.\"\n  - family-names: \"Seitel\"\n    given-names: \"Alexander\"\n  - family-names: \"Maier-Hein\"\n    given-names: \"Lena\"\n  doi: \"10.1117/1.JBO.27.8.083010\"\n  journal: \"Journal of Biomedical Optics\"\n  month: 4\n  title: \"SIMPA: an open-source toolkit for simulation and image processing for photonics and acoustics\"\n  issue: 8\n  volume: 27\n  year: 2022"
      },
      "source": "https://raw.githubusercontent.com/IMSY-DKFZ/simpa/main/CITATION.cff",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "type": "Text_excerpt",
        "value": "If you use the SIMPA tool, we would appreciate if you cite our Journal publication in the Journal of Biomedical Optics:\n\nGr\u00f6hl, Janek, Kris K. Dreher, Melanie Schellenberg, Tom Rix, Niklas Holzwarth, Patricia Vieten, Leonardo Ayala, Sarah E. Bohndiek, Alexander Seitel, and Lena Maier-Hein. *\"SIMPA: an open-source toolkit for simulation and image processing for photonics and acoustics.\"* **Journal of Biomedical Optics** 27, no. 8 (2022).\n\n```Bibtex\n@article{2022simpatoolkit,\n  title={SIMPA: an open-source toolkit for simulation and image processing for photonics and acoustics},\n  author={Gr{\\\"o}hl, Janek and Dreher, Kris K and Schellenberg, Melanie and Rix, Tom and Holzwarth, Niklas and Vieten, Patricia and Ayala, Leonardo and Bohndiek, Sarah E and Seitel, Alexander and Maier-Hein, Lena},\n  journal={Journal of Biomedical Optics},\n  volume={27},\n  number={8},\n  year={2022},\n  publisher={SPIE}\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/IMSY-DKFZ/simpa/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Gr{\\\"o}hl, Janek and Dreher, Kris K and Schellenberg, Melanie and Rix, Tom and Holzwarth, Niklas and Vieten, Patricia and Ayala, Leonardo and Bohndiek, Sarah E and Seitel, Alexander and Maier-Hein, Lena",
        "format": "bibtex",
        "title": "SIMPA: an open-source toolkit for simulation and image processing for photonics and acoustics",
        "type": "Text_excerpt",
        "value": "@article{2022simpatoolkit,\n    publisher = {SPIE},\n    year = {2022},\n    number = {8},\n    volume = {27},\n    journal = {Journal of Biomedical Optics},\n    author = {Gr{\\\"o}hl, Janek and Dreher, Kris K and Schellenberg, Melanie and Rix, Tom and Holzwarth, Niklas and Vieten, Patricia and Ayala, Leonardo and Bohndiek, Sarah E and Seitel, Alexander and Maier-Hein, Lena},\n    title = {SIMPA: an open-source toolkit for simulation and image processing for photonics and acoustics},\n}"
      },
      "source": "https://raw.githubusercontent.com/IMSY-DKFZ/simpa/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/IMSY-DKFZ/simpa"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contributing to SIMPA\n\nFirst of all: Thank you for your participation and help! It is much appreciated!\nWe are convinced that your contributions will help to make SIMPA better, more robust, and \nreliable for everyone!\n\nThis Guide is meant to be used as a collection of How-Tos to contribute to the framework.\nIn case you have any questions, do not hesitate to get in touch with the members of the core development team:\n\nKris K. Dreher (k.dreher@dkfz-heidelberg.de)\n\nJanek Groehl (janek.grohl@cruk.cam.ac.uk)\n\n* [How to contribute](#how-to-contribute)\n* [Documenting your code](#documenting-your-code)\n* [Coding style](#coding-style)\n\n## How to contribute\n\nIf you are interested in contributing to SIMPA don\u2019t hesitate to contact the core development team early on \nto discuss your ideas and find the best strategy for integration. \nThere is also a regular SIMPA status meeting every Friday on even calendar weeks at 10:00 CET/CEST, \nand you are very welcome to participate and raise any issues or discuss your or suggest new features. \nOnce you reached out to us, you will be provided with the information on how to join.\nIn general the following steps are involved during a contribution:\n\n### Contribution process\n1. Create feature request / bug report on the [SIMPA issues page](https://github.com/IMSY-DKFZ/simpa/issues)\n2. Discuss potential contribution with core development team\n3. Fork the [SIMPA repository](https://github.com/IMSY-DKFZ/simpa)\n4. Make sure that you've installed all the optional dependencies by running `pip install .[docs,profile,testing]` \n   in the root directory of the repository.\n5. Create feature branch from develop using the naming convention T<Issue#>_<FeatureName>, \n        where <Issue#> represents the number Github assigned the created issue and <FeatureName> describes \n        what is being developed in CamelCaseNotation.\n        Examples: `T13_FixSimulatorBug`, `T27_AddNewSimulator`\n6. Perform test driven development on a feature branch. \n        A new implemented feature / a bug fix should be accompanied by a test. \n        Additionally, all previously existing tests must still pass after the contribution. \n7. Run pre-commit hooks and make sure all hooks are passing. \n8. Please also make sure that you benchmark your contributions please use the benchmarking bash script (see [benchmarking.md](docs/source/benchmarking.md) for more details).\n   Please add the results to the PR and compare them to the current develop.\n9. Once development is finished, create a pull request including your changes. \n        For more information on how to create pull request, see GitHub's [about pull requests](https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-requests).\n10.     If there are conflicts between the simpa develop branch and your branch, you should update your feature branch with the simpa develop branch using a \"merge\" strategy instead of \"rebase\". \n11. A member of the core development team will review your pull request and potentially require further changes \n        (see [Contribution review and integration](#contribution-review-and-integration)). \n        Once all remarks have been resolved, your changes will be merged into the develop branch.\n\nFor each contribution, please make sure to consider the following:\n\n### Contribution origin, rights, and sign-off\n\nIn addition to your actual contribution, we need to ensure that you actually have the right to make that contribution.\nSIMPA is licensed under a MIT license consequently your work must be licensed under a compatible license. \nIf you write new code or if you are allowed to re-license it, you might want to use SIMPA\u2019s license to ease integration.\nIn case your contribution contains software patented by you, it should be licensed under the Apache 2.0 license. \nFor all contributions involving patented software, \nconsider getting in touch with the SIMPA developers early on to discuss potential issues.\nTo confirm the contribution rights and track and acknowledge individual contributions, \nwe utilize a \u201csign-off\u201d procedure on contributions submitted to SIMPA. \nEach commit / patch needs to be equipped with a \u201csign-off\u201d statement \nwhich certifies that you wrote the contribution or otherwise have the right to pass it on as open-source \nas defined in the following:\n\n```text\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\na)\tThe contribution was created in whole or in part by me and \n        I have the right to submit it under the open source license indicated in the file; or\nb)\tThe contribution is based upon previous work that, to the best of my knowledge, \n        is covered under an appropriate open source license and I have the right under that license to submit \n        that work with modifications, whether created in whole or in part by me, under the same open source license \n        (unless I am permitted to submit under a different license), as indicated in the file; or\nc)\tThe contribution was provided directly to me by some other person who certified (a), (b) or (c) \n        and I have not modified it.\nd)\tI understand and agree that this project and the contribution are public and that a record of the contribution \n        (including all personal information I submit with it, including my sign-off) is maintained indefinitely \n        and may be redistributed consistent with this project or the open source license(s) involved.\n```\n\nThe sign-off statement needs to be at least a line containing your full name, and a valid e-mail address assigned to you:\n \n`Signed-off-by: YOUR_NAME <YOUR-EMAIL>`\n\nWe recommend making use of the `--signoff` option of the git commit command:\n`git commit --signoff \u201cYOUR COMMIT MESSAGE\u201d`\nIn case already existing commits need to be signed off, you can make use of the `--amend` option:\n\n`git commit --amend --signoff`\n\n### Install pre-commit hooks\n\nIn your SIMPA root directory run `pre-commit install` to set up the pre-commit hooks defined in `.pre-commit-config.yaml`. This will generate pre-commit hooks in `.git/hooks/` and run them for every commit. To run them manually before you commit, call `pre-commit run --all-files`.\n\n<details>\n<summary>Further information on pre-commit hooks</summary>\n\n#### git config user email address checking\nThe `git-config-email-check` hook is by default commented out in `pre-commit-config.yaml`. If you want to get a warning when you are not using a specified git config user email address domain, then you might want to comment this hook in. Then you would have to place a file according to the given path, e.g. at `.git/hooks/check-email.sh` with the following content:\n\n```shell\n#!/bin/bash\nPWD=`pwd`\nEMAIL=$(git config user.email)\nif [[ $EMAIL == *\"@yourdomain.com\"* ]]; then\n  echo \"[INFO] Verified email: $EMAIL\"\nelse\n  echo \"[ERROR] Invalid email: $EMAIL => Please configure the company email and retry.\"\n  echo \"Steps:\"\n  echo \"   cd $PWD\"\n  echo '   git config user.email \"<user>@yourdomain.com\"'\n  echo \"\"\n  exit 1;\nfi;\n```\n\nChange the domain in lines 4 and 10 according to your specific domain (e.g. corporate email domain) or even whole email address.\n</details>\n\n### Contribution review and integration\nTo ensure correctness and high quality of the submitted code, each contribution will be checked by pre-commit hooks and reviewed by a member of the core development team regarding among others the following aspects:\n- The code is correct and implements the described feature / fixes the described issue.\n- The code follows the [SIMPA coding style](#coding-style)\n- The code is [documented appropriately](#documenting-your-code)\n- The code is covered by sensible unit tests that pass upon submission\n- The contribution does not lead to side effects in other parts of the toolkit (e.g. failing tests)\nOnce the reviewer is content with the contribution, the changes will be integrated into the code base.\n\n### Contact \n\nThere is a regular SIMPA status meeting every Friday on even calendar weeks at 10:00 CET/CEST, and you are\nvery welcome to participate and raise any issues or suggest new features. You can obtain the meeting links from the core\ndeveloper team.\nWe also have a Slack workspace that you can join if you are interested to contribute.\n\n## Coding style\n\nWhen writing code for SIMPA, please use the [PEP 8](https://www.python.org/dev/peps/pep-0008/) python coding conventions (which will be checked with the [autopep8 pre-commit hook](https://github.com/pre-commit/mirrors-autopep8))\nand consider using the following structures in your code in order to make a new\ndeveloper or someone external always know exactly what to expect.\n\n- Class names are written in camel-case notation `ClassName`\n- Function names are written in lowercase with `_` as the delimiter `function_name`\n- Function parameters are always annotated with their type `arg1: type = default`\n- Only use primitive types as defaults. If a non-primitive type is used, then the default should be `None` and\n the parameter should be initialized in the beginning of a function.\n- A single line of code should not be longer than 120 characters.\n- Functions should follow the following simple structure:\n  1. Input validation (arguments all not `None`, correct type, and acceptable value ranges?)\n  2. Processing (clean handling of errors that might occur)\n  3. Output generation (sanity checking of the output before handing it off to the caller)\n\n## Documenting your code\nOnly documented code will appear in the sphinx generated documentation.\n\nA class should be documented using the following syntax:\n\n\n    class ClassName(Superclass):\n        \"\"\"\n        Description of how the class is used and what it does.\n        List all attributes in the following fashion:\n\n        Attributes:\n            att_1 (att_1_type): description for att_1\n            att_2 (att_2_type): description for att_2\n        \"\"\"\n\nFor functions, a lot of extra attributes can be added to the documentation:\n\n\n    def function_name(self, arg1 = default, arg2 = default) -> return_type:\n        \"\"\"\n        Explain how the function is used and what it does.\n        \n        :param arg1: value range, Null acceptable?\n        :type arg1: type_of_arg1\n        :param arg2: value range, Null acceptable?\n        :type arg2: type_of_arg2\n        :returns: value range, does it return Null?\n        :rtype: return type\n        :raises ExceptionType: explain when and why this exception is raised\n        \"\"\"\n\n# List of Contributors\n\nIn the following table we list the people that have contributed to the SIMPA toolkit.\nPeople might be listed several times if they have contributed while being affiliated\nto different institutions. The contributors are sorted by end date\nand then by last name.\n\n|Year|Name|Affiliation|\n|---|---|---|\n|2019 - today | Kris Dreher | German Cancer Research Center |\n|2020 - today | Janek Groehl | Cancer Research UK, Cambridge Institute |\n|2021 - today | Niklas Holzwarth | German Cancer Research Center |\n|2020 - today | Leonardo Menjivar | German Cancer Research Center |\n|2021 - today | Tom Rix | German Cancer Research Center |\n|2020 - today | Melanie Schellenberg | German Cancer Research Center |\n|2021 - today | Patricia Vieten | German Cancer Research Center |\n|2019 - 2020 | Janek Groehl | German Cancer Research Center |\n"
      },
      "source": "https://raw.githubusercontent.com/IMSY-DKFZ/simpa/main/CONTRIBUTING.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "How to contribute",
        "type": "Text_excerpt",
        "value": "Please find a more detailed description of how to contribute as well as code style references in our\n[contribution guidelines](CONTRIBUTING.md).\n\nTo contribute to SIMPA, please fork the SIMPA github repository and create a pull request with a branch containing your \nsuggested changes. The core developers will then review the suggested changes and integrate these into the code \nbase.\n\nPlease make sure that you have included unit tests for your code and that all previous tests still run through. Please also run the pre-commit hooks and make sure they are passing.\nDetails are found in our [contribution guidelines](CONTRIBUTING.md).\n\nThere is a regular SIMPA status meeting every Friday on even calendar weeks at 10:00 CET/CEST, and you are very welcome to participate and\nraise any issues or suggest new features. If you want to join this meeting, write one of the core developers.\n\nPlease see the github guidelines for creating pull requests: [https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-requests](https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-requests)\n\n"
      },
      "source": "https://raw.githubusercontent.com/IMSY-DKFZ/simpa/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-02-10T14:01:42Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-04T07:05:55Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "The Simulation and Image Processing for Photonics and Acoustics (SIMPA) toolkit."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9897033065264604,
      "result": {
        "original_header": "The toolkit for Simulation and Image Processing for Photonics and Acoustics (SIMPA)",
        "type": "Text_excerpt",
        "value": "SIMPA aims to facilitate realistic image simulation for optical and acoustic imaging modalities by\nproviding adapters to crucial modelling steps, such as volume generation; optical modelling; acoustic\nmodelling; and image reconstruction. SIMPA provides a communication layer between various modules\nthat implement optical and acoustic forward and inverse models.\nNon-experts can use the toolkit to create sensible simulations from default parameters in an end-to-end fashion. Domain experts are provided with the functionality to set up a highly customisable\npipeline according to their specific use cases and tool requirements.\nThe paper that introduces SIMPA including visualisations and explanations can be found here: [https://doi.org/10.1117/1.JBO.27.8.083010](https://doi.org/10.1117/1.JBO.27.8.083010) \nThe toolkit is still under development and is thus not fully tested and may contain bugs. \nPlease report any issues that you find in our Issue Tracker: https://github.com/IMSY-DKFZ/simpa/issues. \nAlso make sure to double check all value ranges of the optical and acoustic tissue properties \nand to assess all simulation results for plausibility.\n \n"
      },
      "source": "https://raw.githubusercontent.com/IMSY-DKFZ/simpa/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8686026958744267,
      "result": {
        "original_header": "Reproducibility",
        "type": "Text_excerpt",
        "value": "For reproducibility, we provide the exact version number including the commit hash in the simpa output file.\nThis can be accessed via `simpa.__version__` or by checking the tag `Tags.SIMPA_VERSION` in the output file.\nThis way, you can always trace back the exact version of the code that was used to generate the simulation results.\n \n"
      },
      "source": "https://raw.githubusercontent.com/IMSY-DKFZ/simpa/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8993956397593582,
      "result": {
        "original_header": "Understanding SIMPA",
        "type": "Text_excerpt",
        "value": "**Tags** are identifiers in SIMPA used to categorize settings and components within simulations, making configurations\nmodular, readable, and manageable. Tags offer organizational, flexible, and reusable benefits by acting as keys in\nconfiguration dictionaries. \n**Settings** in SIMPA control simulation behavior. They include: \n- **Global Settings**: Apply to the entire simulation, affecting overall properties and parameters.\n- **Component Settings**: Specific to individual components, allowing for detailed customization and optimization of\neach part of the simulation. \nSettings are defined in a hierarchical structure, where global settings are established first, followed by\ncomponent-specific settings. This approach ensures comprehensive and precise control over the simulation process.\nFor detailed information, users can refer to the [understanding SIMPA documentation](./docs/source/understanding_simpa.md).\n \n"
      },
      "source": "https://raw.githubusercontent.com/IMSY-DKFZ/simpa/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8069641141006286,
      "result": {
        "original_header": "Troubleshooting",
        "type": "Text_excerpt",
        "value": "In this section, known problems are listed with their solutions (if available):\n \n"
      },
      "source": "https://raw.githubusercontent.com/IMSY-DKFZ/simpa/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9189582904744078,
      "result": {
        "original_header": "2. KeyError: 'time_series_data'",
        "type": "Text_excerpt",
        "value": "This is the error which will occur for ANY k-Wave problem. For the actual root of the problem, please either look above in\nthe terminal for the source of the bug or run the scripts in Matlab to find it manually.\n       \n"
      },
      "source": "https://raw.githubusercontent.com/IMSY-DKFZ/simpa/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8174672989571197,
      "result": {
        "original_header": "Funding",
        "type": "Text_excerpt",
        "value": "This project has received funding from the European Research Council (ERC) under the European Union\u2019s Horizon 2020 research and innovation programme (grant agreement No. [101002198]). \n"
      },
      "source": "https://raw.githubusercontent.com/IMSY-DKFZ/simpa/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Documentation",
        "type": "Text_excerpt",
        "value": "The updated version of the SIMPA documentation can be found at [https://simpa.readthedocs.io/en/develop](https://simpa.readthedocs.io/en/develop).\n"
      },
      "source": "https://raw.githubusercontent.com/IMSY-DKFZ/simpa/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Building the documentation",
        "parent_header": [
          "Documentation"
        ],
        "type": "Text_excerpt",
        "value": "It is also easily possible to build the SIMPA documentation from scratch.\nWhen the installation succeeded, and you want to make sure that you have the latest documentation\nyou should do the following steps in a command line:\n\n1. Make sure that you've installed the optional dependencies needed for the documentation by running `pip install .[docs]`\n2. Navigate to the `simpa/docs` directory\n2. If you would like the documentation to have the https://readthedocs.org/ style, type `pip install sphinx-rtd-theme`\n3. Type `make html`\n4. Open the `index.html` file in the `simpa/docs/build/html` directory with your favourite browser.\n"
      },
      "source": "https://raw.githubusercontent.com/IMSY-DKFZ/simpa/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://simpa.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/IMSY-DKFZ/simpa/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/IMSY-DKFZ/simpa/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "faq": [
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Error reading hdf5-files when using k-Wave binaries:",
        "parent_header": [
          "Troubleshooting"
        ],
        "type": "Text_excerpt",
        "value": "   \nIf you encounter an error similar to:\n\n    Error using h5readc\n    The filename specified was either not found on the MATLAB path or it contains unsupported characters.\n\nLook up the solution in [this thread of the k-Wave forum](http://www.k-wave.org/forum/topic/error-reading-h5-files-when-using-binaries).  \n"
      },
      "source": "https://raw.githubusercontent.com/IMSY-DKFZ/simpa/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 18
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/IMSY-DKFZ/simpa/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "IMSY-DKFZ/simpa"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "The toolkit for Simulation and Image Processing for Photonics and Acoustics (SIMPA)"
      },
      "source": "https://raw.githubusercontent.com/IMSY-DKFZ/simpa/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/IMSY-DKFZ/simpa/main/simpa_examples/benchmarking/run_benchmarking.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "SIMPA installation instructions",
        "parent_header": [
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "The recommended way to install SIMPA is a manual installation from the GitHub repository, please follow steps 1 - 3:\n\n1. `git clone https://github.com/IMSY-DKFZ/simpa.git`\n2. `cd simpa`\n3. `git checkout main`\n4. `git pull`\n\nNow open a python instance in the 'simpa' folder that you have just downloaded. Make sure that you have your preferred\nvirtual environment activated (we also recommend python 3.10)\n1. `pip install .` or `pip install -e .` for an editable mode. \n2. Test if the installation worked by using `python` followed by `import simpa` then `exit()`\n\nIf no error messages arise, you are now setup to use SIMPA in your project.\n\nYou can also install SIMPA with pip. Simply run:\n\n`pip install simpa`\n\nYou also need to manually install the pytorch library to use all features of SIMPA.\nTo this end, use the pytorch website tool to figure out which version to install:\n[https://pytorch.org/get-started/locally/](https://pytorch.org/get-started/locally/)\n"
      },
      "source": "https://raw.githubusercontent.com/IMSY-DKFZ/simpa/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "External tools installation instructions",
        "parent_header": [
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "In order to get the full SIMPA functionality, you should install all third party toolkits that make the optical and \nacoustic simulations possible. \n"
      },
      "source": "https://raw.githubusercontent.com/IMSY-DKFZ/simpa/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "mcx (Optical Forward Model)",
        "parent_header": [
          "Getting started",
          "External tools installation instructions"
        ],
        "type": "Text_excerpt",
        "value": "Download the latest nightly build of [mcx](http://mcx.space/) on [this page](http://mcx.space/nightly/github/) for your operating system:\n\n- Linux: `mcx-linux-x64-github-latest.zip`\n- MacOS: `mcx-macos-x64-github-latest.zip`\n- Windows: `mcx-windows-x64-github-latest.zip`\n\nThen extract the files and set `MCX_BINARY_PATH=/.../mcx/bin/mcx` in your path_config.env.\n"
      },
      "source": "https://raw.githubusercontent.com/IMSY-DKFZ/simpa/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "k-Wave (Acoustic Forward Model)",
        "parent_header": [
          "Getting started",
          "External tools installation instructions"
        ],
        "type": "Text_excerpt",
        "value": "Please follow the following steps and use the k-Wave install instructions \nfor further (and much better) guidance under:\n\n[http://www.k-wave.org/](http://www.k-wave.org/)\n\n1. Install MATLAB with the core, image processing and parallel computing toolboxes activated at the minimum.\n2. Download the kWave toolbox (version >= 1.4)\n3. Add the kWave toolbox base path to the toolbox paths in MATLAB\n4. If wanted: Download the CPP and CUDA binary files and place them in the k-Wave/binaries folder\n5. Note down the system path to the `matlab` executable file.\n"
      },
      "source": "https://raw.githubusercontent.com/IMSY-DKFZ/simpa/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Run manual tests",
        "parent_header": [
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "To check the success of your installation ot to assess how your contributions affect the Simpa simulation outcomes, you can run the manual tests automatically. Install the testing requirements by doing `pip install .[testing]` and run the `simpa_tests/manual_tests/generate_overview.py` file. This script runs all manual tests and generates both a markdown and an HTML file that compare your results with the reference results.\n"
      },
      "source": "https://raw.githubusercontent.com/IMSY-DKFZ/simpa/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.99999999999892,
      "result": {
        "original_header": "Performance profiling",
        "type": "Text_excerpt",
        "value": "When changing the SIMPA core, e.g., by refactoring/optimizing, or if you are curious about how fast your machine runs\nSIMPA, you can run the SIMPA [benchmarking scripts](simpa_examples/benchmarking/run_benchmarking.sh). Make sure to install the necessary dependencies via \n`pip install .[profile]` and then run:\n```bash\nbash ./run_benchmark.sh\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/IMSY-DKFZ/simpa/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9260187862266874,
      "result": {
        "original_header": "2. KeyError: 'time_series_data'",
        "type": "Text_excerpt",
        "value": "This is the error which will occur for ANY k-Wave problem. For the actual root of the problem, please either look above in\nthe terminal for the source of the bug or run the scripts in Matlab to find it manually.\n       \n"
      },
      "source": "https://raw.githubusercontent.com/IMSY-DKFZ/simpa/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/IMSY-DKFZ/simpa/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "acoustics, image-processing, photoacoustic-imaging, photonics, research-software, simulation"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# License\n\n&copy; 2021 Division of Intelligent Medical Systems, DKFZ\n\n&copy; 2021 Janek Groehl\n\nThis work is licensed under the following licenses:\n\n- The source code and the accompanying material is licensed under [MIT](LICENSES/MIT).\n"
      },
      "source": "https://raw.githubusercontent.com/IMSY-DKFZ/simpa/main/LICENSE.md",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/IMSY-DKFZ/simpa/main/docs/source/images/LOGO_ERC-FLAG_EU_.jpg"
      },
      "source": "https://raw.githubusercontent.com/IMSY-DKFZ/simpa/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "simpa"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "IMSY-DKFZ"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 1128780,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "MATLAB",
        "size": 19648,
        "type": "Programming_language",
        "value": "MATLAB"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 2290,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Batchfile",
        "size": 1643,
        "type": "Programming_language",
        "value": "Batchfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/IMSY-DKFZ/simpa/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kdreher",
          "type": "User"
        },
        "date_created": "2024-08-23T13:30:43Z",
        "date_published": "2024-08-23T14:04:38Z",
        "description": "# Version 1.0.0 \ud83c\udf08\r\n\r\n# New Features \ud83d\ude80\r\n\r\n- Heterogeneous Background Tissue\r\n    - Muscle tissue can be created with noise/blobs or structured heterogeneity\r\n    - This can be used for e.g. blood volume fraction or oxygenation\r\n    - For further information consider the [heterogeneous tissue example](https://github.com/IMSY-DKFZ/simpa/blob/main/simpa_examples/minimal_optical_simulation_heterogeneous_tissue.py)\r\n- Benchmarking\r\n    - It is now possible to benchmark your simulations with the [@profile](https://github.com/IMSY-DKFZ/simpa/blob/main/simpa/utils/profiling.py) decorator\r\n    - For further information consider the [benchmarking documentation](https://simpa.readthedocs.io/en/main/bench_link.html)\r\n- Better reproducibility by including exact versions/commit hashes in the SIMPA output\r\n- Faster simulations by GPU support\r\n\r\n# Breaking Changes \ud83d\udee0\r\n\r\n- Pathmanager\r\n  The naming convention for the directory in which output files are stored was changed from `SIMPA_OUTPUT_PATH` to `SIMPA_OUTPUT_DIRECTORY`\r\n- Module names\r\n  Some names of modules and especially adapters were changed in order to have a more consistent naming scheme. Please adapt your simulation scripts accordingly!\r\n\r\n\r\n## What's Changed\r\n* T118 fix device positioning by @kdreher in https://github.com/IMSY-DKFZ/simpa/pull/119\r\n* Merge develop into main by @kdreher in https://github.com/IMSY-DKFZ/simpa/pull/122\r\n* Offer option to resample to power of 2 in bandpass filter by @TomTomRixRix in https://github.com/IMSY-DKFZ/simpa/pull/125\r\n* Update InVision device parameters by @jgroehl in https://github.com/IMSY-DKFZ/simpa/pull/130\r\n* Added butterworth bandpass filter by @TomTomRixRix in https://github.com/IMSY-DKFZ/simpa/pull/121\r\n* Rounding issues in reconstruction by @TomTomRixRix in https://github.com/IMSY-DKFZ/simpa/pull/135\r\n* Merge T139_AnisotropyBug into develop by @mschllnbrg in https://github.com/IMSY-DKFZ/simpa/pull/140\r\n* T139 anisotropy bug by @jgroehl in https://github.com/IMSY-DKFZ/simpa/pull/141\r\n* Check if key is set before accessing it by @TomTomRixRix in https://github.com/IMSY-DKFZ/simpa/pull/138\r\n* Rounding fov also in cropping component, fixes #134 by @TomTomRixRix in https://github.com/IMSY-DKFZ/simpa/pull/137\r\n* Fixed test that would have detected #139 by @kdreher in https://github.com/IMSY-DKFZ/simpa/pull/143\r\n* Fixes #142 by @kdreher in https://github.com/IMSY-DKFZ/simpa/pull/148\r\n* Fixed detector positioning in msot acuity echo by @kdreher in https://github.com/IMSY-DKFZ/simpa/pull/149\r\n* Develop by @kdreher in https://github.com/IMSY-DKFZ/simpa/pull/150\r\n* Run Tests on push and pull request to develop as well. by @jgroehl in https://github.com/IMSY-DKFZ/simpa/pull/151\r\n* Add version number in hdf5 by @jnoelke in https://github.com/IMSY-DKFZ/simpa/pull/147\r\n* Implemented #144, partial volume via settings by @jnoelke in https://github.com/IMSY-DKFZ/simpa/pull/145\r\n* T152 notify cpu reconstruction by @Holzwarth69126 in https://github.com/IMSY-DKFZ/simpa/pull/153\r\n* T128 bf component settings bug and T127 Reconstruction volume dimensions not mandatory by @Holzwarth69126 in https://github.com/IMSY-DKFZ/simpa/pull/133\r\n* Update README.md by @chiarasfour in https://github.com/IMSY-DKFZ/simpa/pull/161\r\n* Citation of SIMPA paper by @TomTomRixRix in https://github.com/IMSY-DKFZ/simpa/pull/167\r\n* Develop merge by @kdreher in https://github.com/IMSY-DKFZ/simpa/pull/170\r\n* T152 processing unit by @TomTomRixRix in https://github.com/IMSY-DKFZ/simpa/pull/169\r\n* T77 off by one error by @TomTomRixRix in https://github.com/IMSY-DKFZ/simpa/pull/174\r\n* T187 bump jdata version by @leoyala in https://github.com/IMSY-DKFZ/simpa/pull/188\r\n* T187 bump jdata version (#188) by @leoyala in https://github.com/IMSY-DKFZ/simpa/pull/190\r\n* T191 numpy types by @kdreher in https://github.com/IMSY-DKFZ/simpa/pull/196\r\n* Develop by @kdreher in https://github.com/IMSY-DKFZ/simpa/pull/197\r\n* Improve performance and reduce memory use of mcx io by @lkeegan in https://github.com/IMSY-DKFZ/simpa/pull/224\r\n* Bump markdown-it-py from 2.1.0 to 2.2.0 by @dependabot in https://github.com/IMSY-DKFZ/simpa/pull/213\r\n* Add pre-commit hooks to the repo by @TomTomRixRix in https://github.com/IMSY-DKFZ/simpa/pull/212\r\n* Develop by @kdreher in https://github.com/IMSY-DKFZ/simpa/pull/225\r\n* T206 io bottleneck by @jnoelke in https://github.com/IMSY-DKFZ/simpa/pull/207\r\n* T202 head and neck by @mschllnbrg in https://github.com/IMSY-DKFZ/simpa/pull/203\r\n* Create template for pull requests by @seitela in https://github.com/IMSY-DKFZ/simpa/pull/210\r\n* Update issue templates by @seitela in https://github.com/IMSY-DKFZ/simpa/pull/209\r\n* Merge develop into main by @kdreher in https://github.com/IMSY-DKFZ/simpa/pull/230\r\n* T199: using rfft and window function correction (considering edge cases) by @cbender98 in https://github.com/IMSY-DKFZ/simpa/pull/200\r\n* T217 GaussianBeam bug + focal length by @faberno in https://github.com/IMSY-DKFZ/simpa/pull/218\r\n* Develop by @kdreher in https://github.com/IMSY-DKFZ/simpa/pull/231\r\n* Structure creation on GPU by @TomTomRixRix in https://github.com/IMSY-DKFZ/simpa/pull/175\r\n* speed up `assert_array_well_defined()` by @lkeegan in https://github.com/IMSY-DKFZ/simpa/pull/238\r\n* Improve generate_mcx_bin_input performance by @lkeegan in https://github.com/IMSY-DKFZ/simpa/pull/236\r\n* Fix relative path issue in reconstruction_module_time_reversal_adapter.py matlab command by @lkeegan in https://github.com/IMSY-DKFZ/simpa/pull/235\r\n* T239 wavelength independent volume creation by @kdreher in https://github.com/IMSY-DKFZ/simpa/pull/240\r\n* don't run pypi publish action on forks by @lkeegan in https://github.com/IMSY-DKFZ/simpa/pull/244\r\n* Reduce gpu ram use in EllipticalTubularStructure by @lkeegan in https://github.com/IMSY-DKFZ/simpa/pull/242\r\n* Create simulation volumes on the GPU by @lkeegan in https://github.com/IMSY-DKFZ/simpa/pull/243\r\n* Specify mc2 output file format for mcx by @lkeegan in https://github.com/IMSY-DKFZ/simpa/pull/246\r\n* Use gpu for noise generation if available by @lkeegan in https://github.com/IMSY-DKFZ/simpa/pull/253\r\n* Update develop by @kdreher in https://github.com/IMSY-DKFZ/simpa/pull/267\r\n* Use mcx SLIT source for MSOTAcuity and MSOTInvision sources by @lkeegan in https://github.com/IMSY-DKFZ/simpa/pull/266\r\n* Merge develop by @kdreher in https://github.com/IMSY-DKFZ/simpa/pull/268\r\n* Merge fix for #273 from develop by @kdreher in https://github.com/IMSY-DKFZ/simpa/pull/274\r\n* Changing operation to make it compatible with M1 Macbooks by @frisograce in https://github.com/IMSY-DKFZ/simpa/pull/289\r\n* T291 image heterogeneity by @frisograce in https://github.com/IMSY-DKFZ/simpa/pull/295\r\n* T285 vessel structure to torch by @frisograce in https://github.com/IMSY-DKFZ/simpa/pull/287\r\n* Minimal optical simulation example and diffuse reflectance by @leoyala in https://github.com/IMSY-DKFZ/simpa/pull/263\r\n* KWave adapter rotation bug fix by @TomTomRixRix in https://github.com/IMSY-DKFZ/simpa/pull/270\r\n* Update test_vesseltree.py by @jgroehl in https://github.com/IMSY-DKFZ/simpa/pull/298\r\n* Add profile decorator to simpa utils by @lkeegan in https://github.com/IMSY-DKFZ/simpa/pull/241\r\n* PathManager refactoring by @leoyala in https://github.com/IMSY-DKFZ/simpa/pull/296\r\n* T279 planar illumination geometry by @RecurvedBow in https://github.com/IMSY-DKFZ/simpa/pull/282\r\n* Fix test_instantiate_when_file_is_in_simpa_home by @faberno in https://github.com/IMSY-DKFZ/simpa/pull/281\r\n* added missing spacing to error message by @faberno in https://github.com/IMSY-DKFZ/simpa/pull/250\r\n* raise valueerror if interpolated wavelengths are out of range and wri\u2026 by @jnoelke in https://github.com/IMSY-DKFZ/simpa/pull/310\r\n* Fixed time spacing bug in reconstruction convenience function by @TomTomRixRix in https://github.com/IMSY-DKFZ/simpa/pull/261\r\n* Saving norm in a variable named norm_direction_vector_mm by @Kamkarl in https://github.com/IMSY-DKFZ/simpa/pull/247\r\n* FIX issue with SPIE link check by @jnoelke in https://github.com/IMSY-DKFZ/simpa/pull/320\r\n* Replace scipy.interp2d by scipy.RegularGridInterpolator by @faberno in https://github.com/IMSY-DKFZ/simpa/pull/312\r\n* T314 remove fillers by @frisograce in https://github.com/IMSY-DKFZ/simpa/pull/315\r\n* switch to setuptools by @jnoelke in https://github.com/IMSY-DKFZ/simpa/pull/306\r\n* Setuptools version can be extracted from simpa.__version__ by @jnoelke in https://github.com/IMSY-DKFZ/simpa/pull/322\r\n* Update documentation by @jnoelke in https://github.com/IMSY-DKFZ/simpa/pull/308\r\n* Added function for general tissue definition from optical parameters \u2026 by @RecurvedBow in https://github.com/IMSY-DKFZ/simpa/pull/326\r\n* Refactored component settings and torch device by @TomTomRixRix in https://github.com/IMSY-DKFZ/simpa/pull/309\r\n* fix tests by @jnoelke in https://github.com/IMSY-DKFZ/simpa/pull/328\r\n* Disabled autopep8 formatting of relative import lines by @TomTomRixRix in https://github.com/IMSY-DKFZ/simpa/pull/331\r\n* T180 refactoring tissue lib by @frisograce in https://github.com/IMSY-DKFZ/simpa/pull/321\r\n* T180 Refactoring by @jnoelke in https://github.com/IMSY-DKFZ/simpa/pull/183\r\n* + RingIlluminationGeometry by @RecurvedBow in https://github.com/IMSY-DKFZ/simpa/pull/293\r\n* T333 new documentation by @frisograce in https://github.com/IMSY-DKFZ/simpa/pull/336\r\n* T338 msot acuity usable for hetero tissues by @frisograce in https://github.com/IMSY-DKFZ/simpa/pull/341\r\n* T339 specific hetero by @frisograce in https://github.com/IMSY-DKFZ/simpa/pull/340\r\n* T350 hetero segmentation by @frisograce in https://github.com/IMSY-DKFZ/simpa/pull/351\r\n* T300 benchmarking by @frisograce in https://github.com/IMSY-DKFZ/simpa/pull/313\r\n* Add installed simpa version in hdf5 files by @jnoelke in https://github.com/IMSY-DKFZ/simpa/pull/325\r\n* Change folder name for pre commit configs by @jnoelke in https://github.com/IMSY-DKFZ/simpa/pull/335\r\n* Additional executable flags by @TomTomRixRix in https://github.com/IMSY-DKFZ/simpa/pull/311\r\n* T105 overview manual test by @cbender98 in https://github.com/IMSY-DKFZ/simpa/pull/318\r\n* T115 include bvf by @jnoelke in https://github.com/IMSY-DKFZ/simpa/pull/182\r\n* T367 plot bvf by @frisograce in https://github.com/IMSY-DKFZ/simpa/pull/368\r\n* Fix ignored acoustical_simulation_3d by @faberno in https://github.com/IMSY-DKFZ/simpa/pull/251\r\n* T154 heterogeneous tissue by @frisograce in https://github.com/IMSY-DKFZ/simpa/pull/290\r\n* refine benchmarking scripts by @frisograce in https://github.com/IMSY-DKFZ/simpa/pull/369\r\n* Refactored (base) classes from init.py into separate files by @TomTomRixRix in https://github.com/IMSY-DKFZ/simpa/pull/360\r\n* Update segmentation loader to have reasonable values by @frisograce in https://github.com/IMSY-DKFZ/simpa/pull/366\r\n* T66 docs for tags and settings by @frisograce in https://github.com/IMSY-DKFZ/simpa/pull/355\r\n* T 371 segmentation loader with multiple wavelengths by @frisograce in https://github.com/IMSY-DKFZ/simpa/pull/372\r\n* Include environment variables in path manager order by @TomTomRixRix in https://github.com/IMSY-DKFZ/simpa/pull/347\r\n* Use same FOV definition within different reconstructions by @TomTomRixRix in https://github.com/IMSY-DKFZ/simpa/pull/181\r\n* T378 2D vs 3D example by @jgroehl in https://github.com/IMSY-DKFZ/simpa/pull/379\r\n* T317 refactor point source manual test by @cbender98 in https://github.com/IMSY-DKFZ/simpa/pull/385\r\n* Merge develop into main by @kdreher in https://github.com/IMSY-DKFZ/simpa/pull/383\r\n\r\n**Full Changelog**: https://github.com/IMSY-DKFZ/simpa/commits/v1.0.0",
        "html_url": "https://github.com/IMSY-DKFZ/simpa/releases/tag/v1.0.0",
        "name": "v1.0.0",
        "release_id": 171677811,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/IMSY-DKFZ/simpa/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/IMSY-DKFZ/simpa/releases/171677811",
        "value": "https://api.github.com/repos/IMSY-DKFZ/simpa/releases/171677811",
        "zipball_url": "https://api.github.com/repos/IMSY-DKFZ/simpa/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Run manual tests",
        "parent_header": [
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "To check the success of your installation ot to assess how your contributions affect the Simpa simulation outcomes, you can run the manual tests automatically. Install the testing requirements by doing `pip install .[testing]` and run the `simpa_tests/manual_tests/generate_overview.py` file. This script runs all manual tests and generates both a markdown and an HTML file that compare your results with the reference results.\n"
      },
      "source": "https://raw.githubusercontent.com/IMSY-DKFZ/simpa/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 00:00:21",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 73
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Getting started",
        "type": "Text_excerpt",
        "value": "In order to use SIMPA in your project, SIMPA has to be installed as well as the external tools that make the actual simulations possible.\nFinally, to connect everything, SIMPA has to find all the binaries of the simulation modules you would like to use.\nThe SIMPA path management takes care of that.\n\n* [SIMPA installation instructions](#simpa-installation-instructions)\n* [External tools installation instructions](#external-tools-installation-instructions)\n* [Path Management](#path-management)\n* [Testing](#run-manual-tests)\n"
      },
      "source": "https://raw.githubusercontent.com/IMSY-DKFZ/simpa/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "mcx (Optical Forward Model)",
        "parent_header": [
          "Getting started",
          "External tools installation instructions"
        ],
        "type": "Text_excerpt",
        "value": "Download the latest nightly build of [mcx](http://mcx.space/) on [this page](http://mcx.space/nightly/github/) for your operating system:\n\n- Linux: `mcx-linux-x64-github-latest.zip`\n- MacOS: `mcx-macos-x64-github-latest.zip`\n- Windows: `mcx-windows-x64-github-latest.zip`\n\nThen extract the files and set `MCX_BINARY_PATH=/.../mcx/bin/mcx` in your path_config.env.\n"
      },
      "source": "https://raw.githubusercontent.com/IMSY-DKFZ/simpa/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "k-Wave (Acoustic Forward Model)",
        "parent_header": [
          "Getting started",
          "External tools installation instructions"
        ],
        "type": "Text_excerpt",
        "value": "Please follow the following steps and use the k-Wave install instructions \nfor further (and much better) guidance under:\n\n[http://www.k-wave.org/](http://www.k-wave.org/)\n\n1. Install MATLAB with the core, image processing and parallel computing toolboxes activated at the minimum.\n2. Download the kWave toolbox (version >= 1.4)\n3. Add the kWave toolbox base path to the toolbox paths in MATLAB\n4. If wanted: Download the CPP and CUDA binary files and place them in the k-Wave/binaries folder\n5. Note down the system path to the `matlab` executable file.\n"
      },
      "source": "https://raw.githubusercontent.com/IMSY-DKFZ/simpa/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Path management",
        "parent_header": [
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "As a pipelining tool that serves as a communication layer between different numerical forward models and\nprocessing tools, SIMPA needs to be configured with the paths to these tools on your local hard drive.\nYou have a couple of options to define the required path variables. "
      },
      "source": "https://raw.githubusercontent.com/IMSY-DKFZ/simpa/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Option 1:",
        "parent_header": [
          "Getting started",
          "Path management"
        ],
        "type": "Text_excerpt",
        "value": "Ensure that the environment variables defined in `simpa_examples/path_config.env.example` are accessible to your script during runtime. This can be done through any method you prefer, as long as the environment variables are accessible through `os.environ`. "
      },
      "source": "https://raw.githubusercontent.com/IMSY-DKFZ/simpa/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Option 2:",
        "parent_header": [
          "Getting started",
          "Path management"
        ],
        "type": "Text_excerpt",
        "value": "Import the `PathManager` class to your project using\n`from simpa.utils import PathManager`. If a path to a `.env` file is not provided, the `PathManager` looks for a `path_config.env` file (just like the\none we provided in the `simpa_examples/path_config.env.example`) in the following places, in this order:\n1. The optional path you give the PathManager\n2. Your $HOME$ directory\n3. The current working directory\n4. The SIMPA home directory path\n   \nFor this option, please follow the instructions in the `simpa_examples/path_config.env.example` file. \n"
      },
      "source": "https://raw.githubusercontent.com/IMSY-DKFZ/simpa/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Simulation examples",
        "type": "Text_excerpt",
        "value": "To get started with actual simulations, SIMPA provides an [example package](simpa_examples) of simple simulation \nscripts to build your custom simulations upon. The [minimal optical simulation](simpa_examples/minimal_optical_simulation.py)\nis a nice start if you have MCX installed.\n\nGenerally, the following pseudo code demonstrates the construction and run of a simulation pipeline:\n\n```python\nimport simpa as sp\n\n# Create general settings \nsettings = sp.Settings(general_settings)\n\n# Create specific settings for each pipeline element \n# in the simulation pipeline\nsettings.set_volume_creation_settings(volume_creation_settings)\nsettings.set_optical_settings(optical_settings)\nsettings.set_acoustic_settings(acoustic_settings)\nsettings.set_reconstruction_settings(reconstruction_settings)\n\n# Set the simulation pipeline\nsimulation_pipeline = [sp.VolumeCreationModule(settings),\n                       sp.OpticalModule(settings),\n                       sp.AcousticModule(settings),\n                       sp.ReconstructionModule(settings)]\n    \n# Choose a PA device with device position in the volume\ndevice = sp.CustomDevice()\n\n# Simulate the pipeline\nsp.simulate(simulation_pipeline, settings, device)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/IMSY-DKFZ/simpa/main/README.md",
      "technique": "header_analysis"
    }
  ]
}