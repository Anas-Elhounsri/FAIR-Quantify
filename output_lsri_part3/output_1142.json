{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/FelicienLL/mapbayr"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-07-23T12:13:57Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-30T14:51:31Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Easy Maximum A Posteriori Bayesian Estimation of PK parameters in R. "
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9420357818417151,
      "result": {
        "original_header": "mapbayr <img align=\"right\" src = \"inst/logo.png\" width=\"135px\">",
        "type": "Text_excerpt",
        "value": "\nmapbayr is a free and open source package for *maximum a posteriori*\nbayesian estimation of PK parameters in R. Thanks to a single function,\n`mapbayest()`, you can estimate individual PK parameters from: \n- a population PK model (coded in\n  [mrgsolve](https://github.com/metrumresearchgroup/mrgsolve)),\n- a data set with concentrations (NM-TRAN format). \nIt was designed to be easily wrapped in [shiny\napps](https://github.com/FelicienLL/mapbayr-shiny) in order to ease\nmodel-based Therapeutic Drug Monitoring, also referred to as\nModel-Informed Prediction Dosing (MIPD).\n \n"
      },
      "source": "https://raw.githubusercontent.com/FelicienLL/mapbayr/develop/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9125912536239126,
      "result": {
        "original_header": "Development",
        "type": "Text_excerpt",
        "value": "mapbayr is under development. Your feedback for additional feature\nrequests or bug reporting is welcome. Contact us through the [issue\ntracker](https://github.com/FelicienLL/mapbayr/issues).\n \n"
      },
      "source": "https://raw.githubusercontent.com/FelicienLL/mapbayr/develop/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9915188090910297,
      "result": {
        "original_header": "Features",
        "type": "Text_excerpt",
        "value": "mapbayr is a generalization of the \u201cMAP Bayes estimation\u201d tutorial\navailable on the [mrgsolve\nblog](https://mrgsolve.org/blog/posts/map_bayes.html). Additional\nfeatures are: \n- a unique function to perform the estimation: `mapbayest()`.\n- accepts a large variety of structural models thanks to the flexibility\n  of mrgsolve\n- flexibility with random effects on parameters, accepting both\n  inter-individual and inter-occasion variability.\n- additive, proportional, mixed or exponential (without prior\n  log-transformation of data) residual error models.\n- estimate from both parent drug and metabolite simultaneously.\n- fit multiple patients stored in a single dataset.\n- functions to easily pass administration and observation information,\n  as well as plot methods to visualize predictions and parameter\n  distribution.\n- a single output object to ease post-processing, depending on the\n  purpose of the estimation.\n- several optimization algorithm available, such as \u201cL-BFGS-B\u201d (the\n  default) or \u201cnewuoa\u201d.\n- handling data below the limit of quantification.\n- estimate only a subset of ETAs defined in the model.\n- flatten priors to favor observed data.\n \n"
      },
      "source": "https://raw.githubusercontent.com/FelicienLL/mapbayr/develop/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9945440084418421,
      "result": {
        "original_header": "Performance",
        "type": "Text_excerpt",
        "value": "Reliability of parameter estimation against NONMEM was assessed for a\nwide variety of models and data. The results of this validation study\nwere published in [CPT:Pharmacometrics & System\nPharmacology](https://pubmed.ncbi.nlm.nih.gov/34342170/), and materials\nare available in [a dedicated\nrepository](https://github.com/FelicienLL/mapbayr-CPTPSP-2021). If you\nobserve some discrepancies between mapbayr and NONMEM on your own model\nand data, feel free to contact us through the [issue\ntracker](https://github.com/FelicienLL/mapbayr/issues).\n \n"
      },
      "source": "https://raw.githubusercontent.com/FelicienLL/mapbayr/develop/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9911426788243257,
      "result": {
        "original_header": "*mrgsolve* model specification",
        "type": "Text_excerpt",
        "value": "mapbayr contains a library of example model files (.cpp), accessible\nwith `exmodel()`. You are invited to perform MAP-Bayesian estimation\nwith your own models. These model files should be slightly modified in\norder to be \u201cread\u201d by mapbayr with the subsequent specifications:\n \n"
      },
      "source": "https://raw.githubusercontent.com/FelicienLL/mapbayr/develop/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9469096069852556,
      "result": {
        "original_header": "1.1 ETA specifications",
        "type": "Text_excerpt",
        "value": "- Mandatory:\n  - Add as many ETA as there are parameters to estimate (i.e.\u00a0the length\n    of the OMEGA matrix diagonal).\n  - Name them as ETAn (n being the N\u00b0 of ETA).\n  - Set 0 as default value.\n- Strongly recommended:\n  - Provide a description as a plain text\n``` c\n$PARAM @annotated\nETA1 : 0 : CL (L/h)\nETA2 : 0 : VC (L)\nETA3 : 0 : F ()\n//do not write ETA(1)\n//do not write iETA\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/FelicienLL/mapbayr/develop/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9865661752455388,
      "result": {
        "original_header": "1.2 Covariates",
        "type": "Text_excerpt",
        "value": "- Mandatory:\n  - Use a `@covariates` tag to record covariates in the `$PARAM` block.\n    Otherwise, you will not be allowed to pass a dataset with covariates\n    columns.\n  - Set the reference value.\n- Strongly recommended\n  - Provide a description as a plain text\n  - Provide units in parentheses (or a description of 0/1 coding for\n    categorical covariates)\n``` c\n$PARAM @annotated @covariates\nBW : 70 : Body weight (kg)\nSEX : 0 : Sex (0=Male, 1=Female)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/FelicienLL/mapbayr/develop/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9942853659978047,
      "result": {
        "original_header": "2. `$CMT` block",
        "type": "Text_excerpt",
        "value": "- Strongly recommended\u2026  \n  \u2026 yet **mandatory** if you have multiple types of DV, i.e.\u00a0parent\n  drug + metabolite:\n  - A `@annotated` tag must be used to record compartments.\n  - Write OBS in brackets to define the observation compartment(s). Also\n    used by `obs_rows()` to fill the \u2018cmt\u2019 column in your dataset.\n  - Write ADM in brackets to define \u201cdefault\u201d administration\n    compartment(s). This information is not used for optimization\n    process and the `mapbayest()` function. The information is mandatory\n    if you use `adm_rows()` to build your dataset in order to\n    automatically set the value of the \u2018cmt\u2019 column. Especially useful\n    if you use a model with an absorption from several depot compartment\n    requiring to duplicate administrations lines in the data set.\n``` c\n//example: model with dual zero and first order absorption in compartment 1 & 2, respectively, and observation of parent drug + metabolite \n$CMT @annotated\nDEPOT: Depot [ADM]\nCENT_PAR: examplinib central [ADM, OBS]\nPERIPH : examplinib peripheral\nCENT_MET : methylexamplinib central [OBS] \n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/FelicienLL/mapbayr/develop/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8837106592575068,
      "result": {
        "original_header": "3. `$OMEGA` block",
        "type": "Text_excerpt",
        "value": "- Mandatory:\n  - The length of the omega matrix must be the same as the number of\n    ETAn provided in `$PARAM`.\n  - The order of the omega values must correspond to the order of the\n    ETAs provided in `$PARAM`. This cannot be checked by mapbayr !\n``` c\n$OMEGA\n0.123 0.456 0.789\n$OMEGA @block\n0.111 \n0.222 0.333\n// reminder: omega values can be recorded in multiple $OMEGA blocks\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/FelicienLL/mapbayr/develop/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9352015853962407,
      "result": {
        "original_header": "4. `$SIGMA` block",
        "type": "Text_excerpt",
        "value": "The definition of the `$SIGMA` block may not be as straightforward as\nother blocks, but we tried to keep it as simple as possible. Keep in\nmind that mapbayr always expect a **pair of sigma values** for each type\nof dependent variable: the **first** value for proportional error, the\n**second** for additive. \n1.  You only have one type of concentration to fit, and you did not use\n    the \\[OBS\\] assignment in `$CMT`. \nSimply write **one pair** of sigma values to describe proportional and\nadditive error on your concentrations. This error model will be\nautomatically applied to the compartment where observations were\nrecorded in your dataset (i.e.\u00a0value of CMT when MDV = 0).\n``` c\n$SIGMA 0.111 0 // proportional error \n```\n \n2.  You have multiple types of DV (parent and metabolite), and/or you\n    used the \\[OBS\\] assignment in `$CMT`. \nWrite as many **pairs of sigma values** as there are compartments\nassigned with \\[OBS\\] in `$CMT`. The order of the pair must respect the\norder in which compartments were assigned. To put it more clearly, the\nsigma matrix will be interpreted as such whatever the model : \n| N\u00b0 in the SIGMA matrix diagonal |                      Associated error                      |\n|:-------------------------------:|:----------------------------------------------------------:|\n|                1                | Proportional on concentrations in the 1st cmt with \\[OBS\\] |\n|                2                |   Additive on concentrations in the 1st cmt with \\[OBS\\]   |\n|                3                | Proportional on concentrations in the 2nd cmt with \\[OBS\\] |\n|                4                |   Additive on concentrations in the 2nd cmt with \\[OBS\\]   |\n``` c\n//example: correlated proportional error between parent and metabolite\n$SIGMA @block\n0.050 // proportional error on parent drug\n0.000 0.000 // additive error on parent drug\n0.100 0.000 0.200 // proportional error on metabolite\n0.000 0.000 0.000 0.000 // additive error on metabolite\n// reminder: sigma values can be recorded in multiple $SIGMA blocks\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/FelicienLL/mapbayr/develop/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9938386723885806,
      "result": {
        "original_header": "7. `$MAIN` block",
        "type": "Text_excerpt",
        "value": "- Mandatory:\n  - Double every expression containing ETA information, with ETAn (will\n    be used for optimization of parameters) and ETA(n) (generated for\n    simulations with random effects like a \u201cregular\u201d mrgsolve model)\n  - Mind the attribution to the good ETAn and ETA(n) as respect to the\n    information you provided in `$PARAM` and `$OMEGA`. This cannot be\n    checked by mapbayr !\n``` c\n$PK\ndouble CL = TVCL * exp(ETA1 + ETA(1)) ;\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/FelicienLL/mapbayr/develop/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9357608902285521,
      "result": {
        "original_header": "8. `$CAPTURE` block",
        "type": "Text_excerpt",
        "value": "- Mandatory:\n  - DV must be captured\n  - For models with parent + metabolite, PAR and MET must be captured\n    too.\n  - Do not capture variables called IPRED and PRED (they will be\n    returned by `mapbayest()` anyway)\n  - Do not capture any ETAn (ETA1, ETA2 etc\u2026) (they will be returned by\n    `mapbayest()` anyway)\n- Strongly recommended:\n  - Capture a posteriori values of parameters you are interested in\n    (e.g.\u00a0CL)\n``` c\n$CAPTURE DV PAR MET CL\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/FelicienLL/mapbayr/develop/README.Rmd",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/FelicienLL/mapbayr/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "faq": [
    {
      "confidence": 1,
      "result": {
        "original_header": "6. `$TABLE` block or `$ERROR` block",
        "parent_header": [
          "mapbayr <img align=\"right\" src = \"inst/logo.png\" width=\"135px\">",
          "*mrgsolve* model specification"
        ],
        "type": "Text_excerpt",
        "value": "- Mandatory:\n  - Refer the concentration variable to fit as `DV`. Mind the code,\n    especially if concentrations are observed in multiple compartments.\n  - Express log-additive error models as exponential. This way,\n    concentrations will automatically be log-transformed during the\n    optimization process, with no necessity to prior log-transform your\n    concentration.\n\n``` c\n$TABLE\ndouble DV  = (CENTRAL / VC) * exp(EPS(2)) ;\n```\n\n- For fitting parent drug and metabolite simultaneously, refer to them\n  as PAR and MET, and define DV accordingly (only DV will be used during\n  the optimization process, but PAR and MET variables are mandatory for\n  post-processing internal functions)\n\n``` c\n$TABLE\ndouble PAR = (CENT_PAR / V) * (1 + EPS(1)) ;\ndouble MET = (CENT_MET / V) * (1 + EPS(3)) ;\ndouble DV = PAR ;\nif(self.cmt == 4) DV = MET ; \n// reminder: use \"self.cmt\" to internaly refer to a compartment in a mrgsolve model code. \n```\n\nNote that mapbayr does not strictly rely on this `$ERROR` block to\ndefine the residual error internally and compute the objective function\nvalue, but on information passed in the `$SIGMA` block. However, we\nstrongly advise you to properly code your `$ERROR` block with `EPS(1)`,\n`EPS(2)` etc\u2026, if only to use your code as a regular mrgsolve model code\nand simulate random effects.\n"
      },
      "source": "https://raw.githubusercontent.com/FelicienLL/mapbayr/develop/README.Rmd",
      "technique": "header_analysis"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/FelicienLL/mapbayr/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "FelicienLL/mapbayr"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "mapbayr "
      },
      "source": "https://raw.githubusercontent.com/FelicienLL/mapbayr/develop/README.Rmd",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/FelicienLL/mapbayr/develop/man/figures/README-plot1-1.png"
      },
      "source": "https://raw.githubusercontent.com/FelicienLL/mapbayr/develop/README.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/FelicienLL/mapbayr/develop/man/figures/README-plot2-1.png"
      },
      "source": "https://raw.githubusercontent.com/FelicienLL/mapbayr/develop/README.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/FelicienLL/mapbayr/develop/man/figures/README-plot3-1.png"
      },
      "source": "https://raw.githubusercontent.com/FelicienLL/mapbayr/develop/README.Rmd",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "mapbayr <img align=\"right\" src = \"inst/logo.png\" width=\"135px\">"
        ],
        "type": "Text_excerpt",
        "value": "mapbayr is available on\n[CRAN](https://CRAN.R-project.org/package=mapbayr). You can install the\ndevelopment version from github by executing the following code in R\nconsole.\n\n``` r\ninstall.packages(\"devtools\")\ndevtools::install_github(\"FelicienLL/mapbayr\")\n```\n\nmapbayr relies on\n[mrgsolve](https://github.com/metrumresearchgroup/mrgsolve) for model\nimplementation and ordinary differential equation solving which requires\nC++ compilers. If you are a Windows user, you would probably need to\ninstall [Rtools](https://cran.r-project.org/bin/windows/Rtools/). Please\nrefer to the [installation guide of\nmrgsolve](https://github.com/metrumresearchgroup/mrgsolve/wiki/mrgsolve-Installation)\nfor additional information.\n"
      },
      "source": "https://raw.githubusercontent.com/FelicienLL/mapbayr/develop/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999997925661364,
      "result": {
        "original_header": "mapbayr <img align=\"right\" src = \"inst/logo.png\" width=\"135px\">",
        "type": "Text_excerpt",
        "value": "[![CRAN\nstatus](https://www.r-pkg.org/badges/version-last-release/mapbayr)](https://CRAN.R-project.org/package=mapbayr)\n[![](https://img.shields.io/badge/Citation-CPT:PSP-blue.svg)](https://pubmed.ncbi.nlm.nih.gov/34342170/) \n"
      },
      "source": "https://raw.githubusercontent.com/FelicienLL/mapbayr/develop/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9995997917760638,
      "result": {
        "original_header": "Development",
        "type": "Text_excerpt",
        "value": "mapbayr is under development. Your feedback for additional feature\nrequests or bug reporting is welcome. Contact us through the [issue\ntracker](https://github.com/FelicienLL/mapbayr/issues).\n \n"
      },
      "source": "https://raw.githubusercontent.com/FelicienLL/mapbayr/develop/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8555729297828342,
      "result": {
        "original_header": "1.2 Covariates",
        "type": "Text_excerpt",
        "value": "- Mandatory:\n  - Use a `@covariates` tag to record covariates in the `$PARAM` block.\n    Otherwise, you will not be allowed to pass a dataset with covariates\n    columns.\n  - Set the reference value.\n- Strongly recommended\n  - Provide a description as a plain text\n  - Provide units in parentheses (or a description of 0/1 coding for\n    categorical covariates)\n``` c\n$PARAM @annotated @covariates\nBW : 70 : Body weight (kg)\nSEX : 0 : Sex (0=Male, 1=Female)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/FelicienLL/mapbayr/develop/README.Rmd",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/FelicienLL/mapbayr/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "mapbayr"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "FelicienLL"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 252501,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 3646,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "AMPL",
        "size": 882,
        "type": "Programming_language",
        "value": "AMPL"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/FelicienLL/mapbayr/develop/README.Rmd"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/FelicienLL/mapbayr/develop/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "FelicienLL",
          "type": "User"
        },
        "date_created": "2023-07-17T08:46:27Z",
        "date_published": "2023-07-17T08:52:25Z",
        "description": "## New features\r\n\r\n### Model averaging\r\n\r\n* New `model_averaging()` to make averaged predictions over estimations performed from several models. Also exports `do_model_averaging()` and `compute_weights()` for low-level implementations.\r\n\r\n### Prediction-corrected Visual Predictive Checks\r\n\r\n* New `mapbayr_vpc()` to make prediction-corrected visual predictive checks (`pcvpc`) from a given model and dataset. Control the independent variable (`idv`), and the stratification on a numeric variable in the dataset (`stratify_on`).\r\n\r\n## Minor changes and Bug Fixes\r\n* `hist()` method (`hist.mapbayests()`) now shows the values of eta-shrinkage in multiple subjects setting. New argument `shk` to control the definition of shrinkage, either based on the standard deviation (`\"sd\"`) or on the variance (`\"var\"`) (@LauraMvn, #192).\r\n* New `mapbayr_plot()` in order to plot results from tables (data.frame). This is the function now called by `plot.mapbayests()` internally. Can plot the results of multiple estimation object (informed in the column \"MODEL\"), useful when model averaging is performed. Argument `MODEL_color` to force the color of a model on the plot. \r\n* New `do_mapbayr_sims()` as an engine to simulate from estimation results. Experimental. Now mostly useful for internal or programmatic uses, but might be extended in the future.\r\n* Refactor `augment.mapbayests()`. Now easier to debug and much more faster, especially when uncertainty on predictions is required.\r\n* Refactor OFV computation: parameters (\"ETA\") are now passed through the data set and not through `$PARAM`, however the definition on \"ETA\" in `$PARAM` remains mandatory.\r\n* Now postprocesses datasets with >=2 missing covariates (#185).\r\n* \"ETA\" parameters cannot be longer declared as \"@covariates\" in `$PARAM` to avoid hazardous behaviours (@jbwoillard, #187).\r\n* By default, `augment()` now simulates at least 200 points per individual. Fix a bug where delta was miscalculated and strange-looking plots were sometimes generated (@LauraMvn, #191).\r\n* The `mapbay_tab` now has the same number of rows as original data especially if it did not have observation rows (@LauraMvn, #193).\r\n* With data helpers, the `.datehour` column is updated after `realize_addl` is being called (@LauraMvn, #194).\r\n* Dependencies: mrgsolve (>= 1.0.8) to benefit from the `etasrc` specification.\r\n* Suggestions: scales.\r\n* Add Laura Morvan @LauraMvn as contributor.",
        "html_url": "https://github.com/FelicienLL/mapbayr/releases/tag/v0.10.0",
        "name": "mapbayr 0.10.0",
        "release_id": 112460948,
        "tag": "v0.10.0",
        "tarball_url": "https://api.github.com/repos/FelicienLL/mapbayr/tarball/v0.10.0",
        "type": "Release",
        "url": "https://api.github.com/repos/FelicienLL/mapbayr/releases/112460948",
        "value": "https://api.github.com/repos/FelicienLL/mapbayr/releases/112460948",
        "zipball_url": "https://api.github.com/repos/FelicienLL/mapbayr/zipball/v0.10.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "FelicienLL",
          "type": "User"
        },
        "date_created": "2023-02-03T12:57:35Z",
        "date_published": "2023-02-03T14:45:16Z",
        "description": "## New features\r\n\r\n### Data Helpers\r\n* New `adm_rows()` and `obs_rows()` replace and improve `adm_lines()` and `obs_lines()`, respectively. See `?data_helpers` for a comprehensive documentation (#175).  \r\n* In `adm_rows()`, `obs_rows()`, and `add_covariates()`, the first argument `x`:  \r\n  - can be missing, which enables the creation of a new dataset from scratch.\r\n  - accepts a data.frame, which enables the modification of a pre-existing dataset (#155). For example: \r\n    ```R\r\n    adm_rows(amt = 100, cmt = 1) %>% \r\n      obs_rows(time = 24, cmt = 2, DV = 0.123)\r\n    ```\r\n  - still accepts an 'mrgsolve' model, which enables the modification of a dataset stored in the model arguments.\r\n* In `adm_rows()` and `obs_rows()`, new argument `.datehour` in order to compute `time` as function of date and hours provided as character. The value passed to `.datehour` is parsed with `parse_datehour()` into a date-time value (\"POSIXct\"). For example: \r\n  ```R\r\n  obs_rows(.datehour = c(\"2023/02/01 12:00\", \"2023/02/01 12:34\"), DV = c(0.123, 0.456), cmt = 1)\r\n  ```\r\n* Data helpers now always rearrange data to fulfill the NM-TRAN compatibility and readability: filling missing covariate values with the last observation carried forward rule, relocation of NM-TRAN variables in the first positions etc...\r\n\r\n### Below Limit of Quantification\r\n* Data below the limit of quantification can now be handled with the so-called \"M3 method\" which consists in computing the likelihood of being below the limit of quantification. This is achieved when the variables `LLOQ` (lower limit of quantification, e.g. 0.22 mg/L) and `BLQ` (below limit of quantification, e.g. 1 or 0) are in the data (@pchelle, #182).\r\n* This can be achieved by:  \r\n  - adding the variables `LLOQ` and `BLQ` to the data by yourself.\r\n  - adding the variable `LLOQ` to the data by yourself: `BLQ` will automatically be inferred from `LLOQ` and `DV`.\r\n  - using `mapbayest(lloq = )` to automatically add the `LLOQ` and `BLQ` variables in the data.\r\n* In `mapbayest()`, new argument `lloq` in order to add a variable `LLOQ` to the data. For example: `mapbayest(model, data, lloq = 0.22)`.\r\n\r\n### Estimation features\r\n* In `mapbayest()`, new argument `select_eta` in order to select the numbers of the ETAs to estimate. Default are ETAs related to an OMEGA not equal to zero. Non-selected ETAs will not be estimated and returned equal to zero. This can be useful in order to ignore the estimation of ETAs not of interest, e.g. in case of inter-occasion variability or non-identifiability. For example: `mapbayest(model, data, select_eta = c(1,3))` (#170).\r\n\r\n* In `mapbayest()`, new argument `lambda` in order to modify the weight of the priors in the Bayesian estimation. This could be useful in order to flatten the priors with the objective to favor observed data instead of *a priori* information. For example: `mapbayest(model, data, lambda = 0.1)` to decrease the weight of priors of a ten-fold (#174).\r\n\r\n## Minor changes and bug fixes\r\n* Export `adm_rows.data.frame()`, `adm_rows.missing()`, `adm_rows.mrgmod()`, `obs_rows.data.frame()`, `obs_rows.missing()`, `obs_rows.mrgmod()`, and `add_covariates.data.frame()`, as new methods for data helpers. \r\n* Export `parse_datehour()`, used to parse arguments passed to `.datehour` in `adm_rows()` and `obs_rows()`.\r\n* Export `filter.mrgmod()`, a method, wrapper around `dplyr::filter()` for dataset stored in mrgsolve model object ('mrgmod').\r\n* Deprecate `adm_lines()` and `obs_lines()`. Stop exporting `adm_lines.mrgmod()` and `obs_lines.mrgmod()`.\r\n* Stop exporting `see_data()`. Was deprecated since 0.4. Use `get_data()` instead.\r\n* Suggests `lubridate`.\r\n* In the final estimation object, new `arg.optim$select_eta` element, `arg.ofv.fix$omega_inv` now has the dimensions of the number of ETAs selected.\r\n* OMEGA values equal to zero are allowed in the model and will be ignored during the estimations steps thanks to the new `select_eta` argument. This condition is not tested anymore with `check_mapbayr_model()`.\r\n* `print.mapbayests()`, now only shows the estimated ETAs.\r\n* In `hist()`, new argument `select_eta` in order to select the ETAs to plot. Default are ETAs estimated with `mapbayest()` (#167).\r\n* `eta()` properly sorts vectors of length superior to 9 (#159).\r\n* `use_posterior()` works if covariates had not been defined in data (#160).\r\n* In `hist()`, `get_phi()` and `plot_phi()`, ETAs are now properly re-ordered if they are more than 9 (#165).\r\n* Classification of absolute difference equal to zero now works (#166).\r\n* Observations at time = 0 are now allowed (#168).\r\n* Fix deprecations related to `tidyverse` packages (#171).\r\n* Depends on `ggplot2 >= 3.4.0`.\r\n* `add_covariates()` accepts empty arguments. \r\n* In `mapbayest()`, new argument `...` in order to fix compatibility issues, not used yet.",
        "html_url": "https://github.com/FelicienLL/mapbayr/releases/tag/v0.9.0",
        "name": "mapbayr 0.9.0",
        "release_id": 91275009,
        "tag": "v0.9.0",
        "tarball_url": "https://api.github.com/repos/FelicienLL/mapbayr/tarball/v0.9.0",
        "type": "Release",
        "url": "https://api.github.com/repos/FelicienLL/mapbayr/releases/91275009",
        "value": "https://api.github.com/repos/FelicienLL/mapbayr/releases/91275009",
        "zipball_url": "https://api.github.com/repos/FelicienLL/mapbayr/zipball/v0.9.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "FelicienLL",
          "type": "User"
        },
        "date_created": "2022-10-04T06:43:55Z",
        "date_published": "2022-10-04T06:47:00Z",
        "description": "## New features\r\n* New `summarise_phi()` and `bar_phi()` summarizes the comparison of estimation of 'mapbayr' and 'NONMEM' (i.e. classifies it as Excellent/Acceptable/Discordant) and graphically represents it as a bar plot.\r\n* New `eta()` generates numerical values named `ETA1, ETA2, ETA3...`, either from scratch, from a pre-existing vector or from a 'mrgsolve' model object.\r\n* In `plot()`, `PREDICTION = c(\"IPRED\", \"PRED\")` controls to plot either \"PRED\", \"IPRED\" or both (#113).\r\n* In `add_covariates()`, `covariates` is relocated in last position, in the favor of `...` which now accepts covariate values. Calling `add_covariates(list(BW = 90))` will still works (with a warning) for the sake of compatibility but will be deprecated. Instead, just use `add_covariates(BW = 90)` or explicitly call `add_covariates(covariates = list(BW = 90))` if you want to pass covariate values as a list (#156).\r\n* In `get_eta()`, `output = \"num\"` returns a matrix if multiple IDs are available instead of an error message (#145).\r\n\r\n## Minor changes\r\n* Stop exporting `postprocess.optim()` and `postprocess.output()`. Removed due to refactoring of internal post-processing. \r\n* Stop exporting `adm_0_cmt()`. \r\n* In `mapbayest()`, `reset` is now a numeric and drives the maximum allowed reset during optimization.\r\n* The progress bar is now forced to appear, especially in the RStudio job launcher.\r\n* `check_mapbayr_model()` now returns an error if a check fails instead of a table that summarized the errors.\r\n* `check_mapbayr_model()` now only checks critical points and not suggested features.\r\n* `check_mapbayr_model()` now explicitly forbids `IPRED`, `PRED` and `ETA1, ETA2...` (#148). \r\n\r\n## Internal\r\n* Data splitting is simpler (#127).\r\n* Post-processing is faster and its content depends on `mapbayest(output = )` (#134).\r\n* Optimization is faster thanks to `stats::optim()` if method is 'L-BFGS-B' and `minqa::newuoa()` if method is 'newuoa'. These replace `optimx::optimx()` (#136).\r\n* Remove dependency to `optimx` package.\r\n* Downgrade `tibble` package from dependency to suggestion. \r\n* Test refactor and more tests for internal *_cmt functions.\r\n* Remove unexported functions from documentation.\r\n\r\n## Bug fixes\r\n* `vs_nonmem()` and `get_phi()` works even if covariance was missing/failing in mapbayests object (#126).\r\n* `pred()` does not generate `NaN` if small negative concentrations were predicted after log-transformation (#140).\r\n* `pred()` does not propagate 'mrgsolve' error when lag time is longer than inter-dose interval at steady-state (#142). \r\n* Non-loaded shared object are now explicitly detected (#130).\r\n* The absence of `NA` values in `DV` if `mdv == 0` is checked (#131). \r\n* The compartment numbers in the data is compared to compartments defined in the model (#132).\r\n* `check_mapbayr_model()` is now called before any use the model inside `mapbayest()` (#149).\r\n* A better error message is rendered if covariates are not properly tagged in the model (#92).\r\n* It is possible to use sigma labels to define `DV` if error is exponential (#150).\r\n* In `obs_lines()`, `mdv` will be 1 if `DV` is set to `NA` (#147).\r\n\r\n",
        "html_url": "https://github.com/FelicienLL/mapbayr/releases/tag/v0.8.0",
        "name": "mapbayr 0.8.0",
        "release_id": 78912868,
        "tag": "v0.8.0",
        "tarball_url": "https://api.github.com/repos/FelicienLL/mapbayr/tarball/v0.8.0",
        "type": "Release",
        "url": "https://api.github.com/repos/FelicienLL/mapbayr/releases/78912868",
        "value": "https://api.github.com/repos/FelicienLL/mapbayr/releases/78912868",
        "zipball_url": "https://api.github.com/repos/FelicienLL/mapbayr/zipball/v0.8.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "FelicienLL",
          "type": "User"
        },
        "date_created": "2022-05-27T08:32:43Z",
        "date_published": "2022-05-27T08:33:53Z",
        "description": "# mapbayr 0.7.3\r\n- Minor changes in DESCRIPTION file (CRAN requirements)\r\n\r\n# mapbayr 0.7.2\r\n- Change contact address in description (CRAN requirements)\r\n\r\n# mapbayr 0.7.1\r\n- Fix additional CRAN checks (Mac M1)",
        "html_url": "https://github.com/FelicienLL/mapbayr/releases/tag/v0.7.3",
        "name": "mapbayr 0.7.3",
        "release_id": 67995637,
        "tag": "v0.7.3",
        "tarball_url": "https://api.github.com/repos/FelicienLL/mapbayr/tarball/v0.7.3",
        "type": "Release",
        "url": "https://api.github.com/repos/FelicienLL/mapbayr/releases/67995637",
        "value": "https://api.github.com/repos/FelicienLL/mapbayr/releases/67995637",
        "zipball_url": "https://api.github.com/repos/FelicienLL/mapbayr/zipball/v0.7.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "FelicienLL",
          "type": "User"
        },
        "date_created": "2022-05-20T12:04:21Z",
        "date_published": "2022-05-20T12:09:09Z",
        "description": "## Breaking changes\r\n- Change the outputs of pre-processing functions. For fixed elements, `qmod`, `omega_inv `and `all_cmt` now replace `mrgsolve_model`, `omega.inv` and `obs_cmt`. For individual-related elements, `idDV` replaces `DVobs`, `data` is removed, `idvaliddata` and `idcmt` are added. This can have an impact for the user since these elements are reported in the standard output. However, it does not change the behaviour of `get_data()`.\r\n- Change argument behaviour: `mapbayest(verbose = TRUE)` now only displays the messages related to optimization reset, and not the progression of ID being optimized which is now controlled by `mapbayest(progress = TRUE)`.\r\n- Stop exporting `derivatives()`, now replaced by `mapbayr:::h()`.\r\n- Stop exporting `mbrlib()` and associated models. See the \"Model examples\" section below.\r\n\r\n## Model examples\r\nThe example models system was totally re-thought around a new function: `exmodel()`. It now embeds several models that were used in the validation study, with a small corresponding dataset that can be loaded automatically (the default). They are used in multiple places inside the package, especially in tests and examples. More models could be added in the future.  \r\n\r\n- Export `exmodel()`. See the list of available models in the documentation.  \r\n- Export `exdata()`, to load data only.\r\n\r\n## Miscellaneous\r\n- New argument: `mapbayest(progress = TRUE)` displays a progress bar with the number of the ID being optimized. #118 #28\r\n- New argument value: `mapbayest(output = \"eta\")` returns only estimated ETA in order to skip most of post-processing steps. #106\r\n- `eta_descr()` now always returns a non-NA value even if description is missing. #87\r\n- New function: `do_compute_ofv()`, a wrapper around `do.call(compute_ofv, ...)`.\r\n- Add Dependency: `{progress}`.\r\n- Add Suggestion: `{testthat}`, `{minqa}`. #120\r\n- Improve the performance of objective function value calculation. Now use a faster parameter update, pre-validate data and refactor the computation of the H matrix. Thanks @kylebaron for the useful suggestions. #104 #111\r\n- Improve tests. Now work with example models which is overall lighter, faster, more consistent, more unitary. Also, they are run during `R CMD check`.\r\n- Improve documentation: some monographs were merged, and some gained an example section thanks to the new example models system.\r\n\r\n## Bug fixes\r\n- `plot_phi()` now plots correct values on the x-axis. #108\r\n- No warning when plotting data with DV being `NA`. #114\r\n- No warning when updating a model without covariates. #115\r\n- No systematic reset if one \"ETA\" to estimate. #116\r\n- No errors at the end of reset-related messages. #119",
        "html_url": "https://github.com/FelicienLL/mapbayr/releases/tag/v0.7.0",
        "name": "mapbayr 0.7.0",
        "release_id": 67373785,
        "tag": "v0.7.0",
        "tarball_url": "https://api.github.com/repos/FelicienLL/mapbayr/tarball/v0.7.0",
        "type": "Release",
        "url": "https://api.github.com/repos/FelicienLL/mapbayr/releases/67373785",
        "value": "https://api.github.com/repos/FelicienLL/mapbayr/releases/67373785",
        "zipball_url": "https://api.github.com/repos/FelicienLL/mapbayr/zipball/v0.7.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "FelicienLL",
          "type": "User"
        },
        "date_created": "2022-02-18T14:18:39Z",
        "date_published": "2022-02-18T14:26:07Z",
        "description": "This version of mapbayr introduces several features that aim to express uncertainty around the point estimate. Please note that the results of these functions were not validated *vs* a gold-standard software such as NONMEM. This is why they are referred as \"experimental features\" in the following subsections. They are exported with the objective to ease their future validation, and to provide a very rough idea of the estimation uncertainty.\r\n\r\n## Breaking changes\r\n- Remove `data` slot in estimation object. Use `get_data()` instead. #64\r\n- The `$model@args$data` is now always `NULL` in the estimation object. It was carried out if the data was initially passed with `data_set()` or built with `adm_lines()`/`obs_lines()`. #64\r\n- The time grid used to plot the results is now adapted as function of data, and not fixed (refactor of `augment`). Also use `recsort=3` to deal with steady-state administrations. #85\r\n- Argument passed to `plot()` are now directly passed to `augment()`.\r\n- Depends on mrgsolve >= 1.0.0 to use the newly exported `collapse_omega()` function. (thanks @kylebaron)\r\n\r\n## Experimental features\r\n- Compute and use a normal approximation of conditional distribution. The function called in `mapbayest(hessian = )` is used to compute the hessian with `stats::optimHess()` by default. The variance-covariance matrix is returned in a `covariance` slot in the estimation object, and can be accessed with `get_cov()`. \r\n- Simulate with uncertainty. `use_posterior(update_omega = TRUE)` update the OMEGA matrix with the covariance matrix, in order to simulate with uncertainty and derive confidence intervals.\r\n- Plot confidence interval. `plot(ci = TRUE)` displays approximate confidence intervals on predicted concentrations. Parameter uncertainty is approximated with the covariance matrix. Confidence interval computation relies on the delta approximation (`ci_method = \"delta\"`), but can also be computed thanks to simulations (see `augment()` documentation).\r\n\r\n## New exports\r\n- `get_cov()`: function to get the covariance matrix of estimation. #43\r\n- `get_phi()`, `read_nmphi()`, `merge_phi()` and `plot_phi()`: functions to compare the estimations *vs* NONMEM. #55\r\n- `est001`: an example `mapbayests` estimation object. #94\r\n\r\n## use_posterior()\r\n- add `update_omega`, `update_cov`, and `update_eta` arguments to control what to update. \r\n- `.zero_re` default behavior now depends on `update_` arguments values. \r\n- no longer warns if time-varying covariates are used. The first value will be used by default.\r\n- now works on multiple individuals: a list of mrgsolve models will be returned if multiple individuals found.\r\n\r\n## Miscellaneous\r\n- Print a message indicating a difficulty when there is a reset during optimization, instead of a warning indicating an error. #96\r\n- `mapbayest(verbose = )` now mutes the message that indicates a reset during optimization. #96\r\n- Remove the attributes of `opt.value` inherited from `optimx`. #95\r\n- Detect non-numeric column(s). Stop and inform the user if any. #86 #88 (thanks @jkamp91)\r\n- `get_data()` can now return a list of individual data sets with `output = \"list\"`. #64\r\n- Check for undesirable zero in OMEGA/SIGMA matrices instead of crashing. #44\r\n- Remove stats from dependencies.\r\n- Add Kyle Baron as contributor.\r\n- Update README since article publication.\r\n- Update documentation.",
        "html_url": "https://github.com/FelicienLL/mapbayr/releases/tag/v0.6.0",
        "name": "mapbayr 0.6.0",
        "release_id": 59908434,
        "tag": "v0.6.0",
        "tarball_url": "https://api.github.com/repos/FelicienLL/mapbayr/tarball/v0.6.0",
        "type": "Release",
        "url": "https://api.github.com/repos/FelicienLL/mapbayr/releases/59908434",
        "value": "https://api.github.com/repos/FelicienLL/mapbayr/releases/59908434",
        "zipball_url": "https://api.github.com/repos/FelicienLL/mapbayr/zipball/v0.6.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "FelicienLL",
          "type": "User"
        },
        "date_created": "2021-07-27T11:55:31Z",
        "date_published": "2021-07-27T14:14:57Z",
        "description": "- Add new reset conditions: with new initial values if same absolute value for every etas, with larger bounds if estimation at bound. Additional refactoring about reset as well. see #75\r\n- Add an \"information\" slot to the output, with time records and package version #69\r\n- Remove dependency to the `@annotated` tag in model code, especially for `$PARAM` and `$CMT` blocks. #73\r\n- As a consequence, `adm_lines()` and `obs_lines()` don't need the [ADM] and [OBS] tags in model code anymore (yet strongly recommended, otherwise it errors cleanly).\r\n- Other miscellaneous bug fixes and enhancements. ",
        "html_url": "https://github.com/FelicienLL/mapbayr/releases/tag/v0.5.0",
        "name": "mapbayr 0.5.0",
        "release_id": 46839116,
        "tag": "v0.5.0",
        "tarball_url": "https://api.github.com/repos/FelicienLL/mapbayr/tarball/v0.5.0",
        "type": "Release",
        "url": "https://api.github.com/repos/FelicienLL/mapbayr/releases/46839116",
        "value": "https://api.github.com/repos/FelicienLL/mapbayr/releases/46839116",
        "zipball_url": "https://api.github.com/repos/FelicienLL/mapbayr/zipball/v0.5.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 03:43:35",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 20
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Example",
        "parent_header": [
          "mapbayr <img align=\"right\" src = \"inst/logo.png\" width=\"135px\">"
        ],
        "type": "Text_excerpt",
        "value": "``` r\nlibrary(mapbayr)\nlibrary(mrgsolve)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/FelicienLL/mapbayr/develop/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1) Properly code you model",
        "parent_header": [
          "mapbayr <img align=\"right\" src = \"inst/logo.png\" width=\"135px\">",
          "Example"
        ],
        "type": "Text_excerpt",
        "value": "``` r\ncode <- \"\n$PARAM @annotated\nTVCL:  0.9 : Clearance\nTVV1: 10.0 : Central volume\nV2  : 10.0 : Peripheral volume of distribution\nQ   :  1.0 : Intercompartmental clearance\n\nETA1: 0 : Clearance (L/h)\nETA2: 0 : Central volume (L)\n\n$PARAM @annotated @covariates\nBW : 70 : Body weight (kg)\n\n$OMEGA 0.3 0.3\n$SIGMA\n0.05 // proportional\n0.1 // additive\n\n$CMT @annotated\nCENT  : Central compartment (mg/L)[ADM, OBS]\nPERIPH: Peripheral compartment ()\n\n$TABLE\ndouble DV = (CENT/V1) *(1 + EPS(1)) + EPS(2);\n\n$MAIN\ndouble CL = TVCL * exp(ETA1 + ETA(1)) * pow(BW / 70, 1.2) ;\ndouble V1 = TVV1 * exp(ETA2 + ETA(2)) ;\ndouble K12 = Q / V1  ;\ndouble K21 = Q / V2  ;\ndouble K10 = CL / V1 ;\n\n$ODE\ndxdt_CENT   =  K21 * PERIPH - (K10 + K12) * CENT ;\ndxdt_PERIPH =  K12 * CENT - K21 * PERIPH ;\n\n$CAPTURE DV CL\n\"\n\nmy_model <- mcode(\"Example_model\", code)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/FelicienLL/mapbayr/develop/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2) Bring your dataset",
        "parent_header": [
          "mapbayr <img align=\"right\" src = \"inst/logo.png\" width=\"135px\">",
          "Example"
        ],
        "type": "Text_excerpt",
        "value": "``` r\nmy_data <- data.frame(ID = 1, time = c(0,6,15,24), evid = c(1, rep(0,3)), cmt = 1, amt = c(100, rep(0,3)), \n                      rate = c(20, rep(0,3)), DV = c(NA, 3.9, 1.1, 2), mdv = c(1,0,0,1), BW = 90)\nmy_data\n#>   ID time evid cmt amt rate  DV mdv BW\n#> 1  1    0    1   1 100   20  NA   1 90\n#> 2  1    6    0   1   0    0 3.9   0 90\n#> 3  1   15    0   1   0    0 1.1   0 90\n#> 4  1   24    0   1   0    0 2.0   1 90\n```\n"
      },
      "source": "https://raw.githubusercontent.com/FelicienLL/mapbayr/develop/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3) And estimate !",
        "parent_header": [
          "mapbayr <img align=\"right\" src = \"inst/logo.png\" width=\"135px\">",
          "Example"
        ],
        "type": "Text_excerpt",
        "value": "``` r\nmy_est <- mapbayest(my_model, data = my_data)\n```\n\nAs building dataset into a NM-TRAN format can be painful, you can use\npipe-friendly `obs_rows()`, `adm_rows()` and `add_covariates()`\nfunctions in order to pass administration and observation information,\nand perform the estimation subsequently.\n\n``` r\nmy_est <- my_model %>% \n  adm_rows(time = 0, amt = 100, rate = 20) %>% \n  obs_rows(time = 6, DV = 3.9) %>% \n  obs_rows(time = 20, DV = 1.1) %>% \n  obs_rows(time = 24, DV = 2, mdv = 1) %>% \n  add_covariates(BW = 90) %>% \n  mapbayest()\n```\n"
      },
      "source": "https://raw.githubusercontent.com/FelicienLL/mapbayr/develop/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4) Then, use the estimations",
        "parent_header": [
          "mapbayr <img align=\"right\" src = \"inst/logo.png\" width=\"135px\">",
          "Example"
        ],
        "type": "Text_excerpt",
        "value": "The results are returned in a single object (\u201cmapbayests\u201d S3 class)\nwhich includes input (model and data), output (etas and tables) and\ninternal arguments passed to the internal algorithm (useful for\ndebugging). Additional methods are provided to ease visualization and\ncomputation of a posteriori outcomes of interest.\n\n``` r\nprint(my_est)\n#> Model: Example_model \n#> ID : 1 individual(s).\n#> OBS: 2 observation(s).\n#> ETA: 2 parameter(s) to estimate.\n#> \n#> Estimates: \n#>   ID      ETA1      ETA2\n#> 1  1 0.3872104 0.1569604\n#> \n#> Output (4 lines): \n#>   ID time evid cmt amt rate mdv  DV IPRED  PRED   CL BW  ETA1  ETA2\n#> 1  1    0    1   1 100   20   1  NA 0.000 0.000 1.79 90 0.387 0.157\n#> 2  1    6    0   1   0    0   0 3.9 4.162 5.174 1.79 90 0.387 0.157\n#> 3  1   15    0   1   0    0   0 1.1 1.087 1.647 1.79 90 0.387 0.157\n#> 4  1   24    0   1   0    0   1 2.0 0.556 0.959 1.79 90 0.387 0.157\n```\n\n``` r\nplot(my_est)\n```\n\n![](man/figures/README-plot1-1.png)\n\n``` r\nhist(my_est)  \n```\n\n![](man/figures/README-plot2-1.png)\n\n``` r\n# Easily extract a posteriori parameter values to compute outcomes of interest\nget_eta(my_est)\n#>      ETA1      ETA2 \n#> 0.3872104 0.1569604\nget_param(my_est, \"CL\")\n#> [1] 1.79217\n\n# The `use_posterior()` functions updates the model object with posterior values and covariates to simulate like with a regular mrgsolve model\nmy_est %>% \n  use_posterior() %>% \n  data_set(expand.ev(amt = c(50, 100, 200, 500), dur = c(5, 24)) %>% mutate(rate = amt/dur)) %>% \n  carry_out(dur) %>% \n  mrgsim() %>% \n  plot(DV~time|factor(dur), scales = \"same\")\n```\n\n![](man/figures/README-plot3-1.png)\n"
      },
      "source": "https://raw.githubusercontent.com/FelicienLL/mapbayr/develop/README.Rmd",
      "technique": "header_analysis"
    }
  ]
}