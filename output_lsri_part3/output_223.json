{
  "application_domain": [
    {
      "confidence": 20.05,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "format": "cff",
        "type": "File_dump",
        "value": "cff-version: 1.2.0\nmessage: \"If you use this software, please cite it as below.\"\nauthors:\n  - family-names: \"Han\"\n    given-names: \"Shunhua\"\n    orcid: \"https://orcid.org/0000-0002-8605-7547\"  \n  - family-names: \"Bergman\"\n    given-names: \"Casey M.\"\n    orcid: \"https://orcid.org/0000-0002-5462-9854\"  \ntitle: \"TELR: a fast non-reference transposable element detector from long read sequencing data\"\nversion: 2\ndate-released: 2020-12-01\nurl: \"https://github.com/bergmanlab/telr\"\npreferred-citation:\n  type: article\n  authors:\n  - family-names: \"Han\"\n    given-names: \"Shunhua\"\n    orcid: \"https://orcid.org/0000-0002-8605-7547\"\n  - family-names: \"Dias\"\n    given-names: \"Guilherme B.\"\n    orcid: \"https://orcid.org/0000-0002-1459-3148\"  \n  - family-names: \"Basting\"\n    given-names: \"Preston J.\"\n    orcid: \"https://orcid.org/0000-0001-9290-8339\"\n  - family-names: \"Viswanatha\"\n    given-names: \"Raghuvir\"\n    orcid: \"https://orcid.org/0000-0002-9457-6953\"\n  - family-names: \"Perrimon\"\n    given-names: \"Norbert\"\n    orcid: \"https://orcid.org/0000-0001-7542-472X\"        \n  - family-names: \"Bergman\"\n    given-names: \"Casey M.\"\n    orcid: \"https://orcid.org/0000-0002-5462-9854\"                \n  doi: \"10.1093/nar/gkac794\" \n  journal: \"Nucleic Acids Research\"\n  volume: 50\n  issue: 21\n  start: e124\n  month: 11\n  title: \"Local assembly of long reads enables phylogenomics of transposable elements in a polyploid cell line\"\n  year: 2022"
      },
      "source": "https://raw.githubusercontent.com/bergmanlab/telr/master/citation.cff",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "type": "Text_excerpt",
        "value": "To cite TELR in publications, please use:\n\n  Shunhua Han, Guilherme B Dias, Preston J Basting, Raghuvir Viswanatha, Norbert Perrimon, Casey M Bergman, Local assembly of long reads enables phylogenomics of transposable elements in a polyploid cell line, Nucleic Acids Research, 2022\n  https://doi.org/10.1093/nar/gkac794\n"
      },
      "source": "https://raw.githubusercontent.com/bergmanlab/telr/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/bergmanlab/TELR"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-01-21T02:47:11Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-01T12:11:28Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "TELR is a fast non-reference transposable element detector from long read sequencing data."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "type": "Text_excerpt",
        "value": "TELR (pronounced Teller) is a fast non-reference transposable element (TE) detector from long read sequencing data (PacBio or Oxford Nanopore). TELR uses long reads mapped to a reference genome to identify insertions using [Sniffles](https://github.com/fritzsedlazeck/Sniffles), then filters insertions by matching insertion supporting reads with user supplied TE consensus sequences. For each TE insertion candidate locus, TELR performs a local assembly of all reads supporting TE insertion, annotates the TE sequence in assembled contigs, then maps the flanks back to the reference genome. Finally, TELR generates the coordinates of the non-reference TE insertions, the estimated allele frequency and the assembled TE sequences.\n\nThe TELR pipeline consists of four main stages: (1) general SV detection and filter for TE insertion candidate, (2) local reassembly and polishing of the TE insertion, (3) identification of TE insertion coordinates, and (4) estimation of intra-sample TE insertion allele frequency.\n\n- In stage 1, long reads are aligned to the reference genome using NGMLR (https://github.com/philres/ngmlr). The alignment output in BAM format is provided as input for Sniffles (https://github.com/fritzsedlazeck/Sniffles) to detect structural variations (SVs). TELR then filter for TE insertion candidates from SVs reported by Sniffles using following criteria: 1) The type of SV is insertion. 2) Insertion sequence is available. 3) The insertion sequences include hits from user provided TE consensus library using RepeatMasker (http://www.repeatmasker.org}).\n\n- In stage 2, reads that support the TE insertion candidate locus based on Sniffles output are used as input for wtdbg2 (https://github.com/ruanjue/wtdbg2) or flye (https://github.com/fenderglass/Flye) to assemble local contig that covers the TE insertion for each TE insertion candidate locus. The local assemblies are then polished using wtdbg2 or flye. Note that 1) each assembler can be matched with each polisher, and 2) minimap2 is used to re-align reads to local contig for polishing.\n\n- In stage 3, TE consensus library is aligned to the assembled TE insertion contigs using minimap2 and used to define TE-flank boundaries. TE region in each contig is annotated with family info using RepeatMasker. Sequences flanking the TE insertion are then re-aligned to the reference genome using minimap2 to determine the precise TE insertion coordinates and target site duplication (TSD).\n\n- In stage 4, raw reads aligned to the reference genome are extracted within a 1kb interval on either side of the insertion breakpoints initially defined by Sniffles. The reads are then aligned to the assembled polished contig to identify reads that support the TE insertion and reference alleles, respectively, in following steps: 1) Reads are aligned to the forward strand of the contig, 5' flanking sequence depth (`5p_flank_cov`) and 5' TE depth (`5p_te_cov`) are calculated. 2) Reads are aligned to the reverse complement strand of the contig, 5' flanking sequence depth (`3p_flank_cov`) and 5' TE depth (`3p_te_cov`) are calculated. 3) The TE allele frequency is estimated as `(5p_te_cov/5p_flank_cov + 3p_te_cov/3p_flank_cov)/2`.\n\n<p align=\"center\">\n<img src=\"https://github.com/bergmanlab/TELR/blob/master/img/TELR_workflow.png?raw=true\"/>\n</p>\n\nThe current version of TELR shows good performance on real Drosophila melanogaster data sets, including datasets with heterozygous TE insertions.\n\nTELR is written in python3 and is designed to run on linux operating system.\n"
      },
      "source": "https://raw.githubusercontent.com/bergmanlab/telr/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/bergmanlab/telr/tree/master/docs"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Documentation",
        "type": "Text_excerpt",
        "value": "The following sections will provide you installation instructions, usage guide, and descriptions of output files.\n  - [Installation](docs/01_Installation.md)\n  - [Usage](docs/02_Usage.md)\n  - [Output Files](docs/03_Output_Files.md)\n"
      },
      "source": "https://raw.githubusercontent.com/bergmanlab/telr/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/bergmanlab/telr/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 11
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/bergmanlab/TELR/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bergmanlab/TELR"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/bergmanlab/telr/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bergmanlab/TELR/master/img/TELR.png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/bergmanlab/telr/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bergmanlab/TELR/master/img/TELR_workflow.png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/bergmanlab/telr/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Installation\n## Install and configure conda package manager\n### Install Miniconda (optional)\nWe recommend using conda to install TELR and its software dependencies. If your system doesn't have conda installed, please use the following steps to install Miniconda (Python 3.X).\n```\nwget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O $HOME//miniconda.sh\nbash ~/miniconda.sh -b -p $HOME/miniconda # silent mode\necho \"export PATH=\\$PATH:\\$HOME/miniconda/bin\" >> $HOME/.bashrc # add to .bashrc\nsource $HOME/.bashrc\n\nconda init # this step requires you to close and open a new terminal before it take effect\nconda update conda # update conda\n```\n### Set up conda channels (optional)\nTELR is hosted under bioconda channel (https://bioconda.github.io/recipes/telr/README.html). After installing conda you will need to add the bioconda channel as well as the other channels bioconda depends on. You can skip this step if you already have conda installed and bioconda channel configured.\n```\nconda config --add channels defaults\nconda config --add channels bioconda\nconda config --add channels conda-forge\n```\n### Install mamba (optional)\nMamba is a reimplementation of the conda package manager in C++. There is significant speed improvement on TELR installation using mamba versus conda. Please use following command to install mamba into the base conda environment. You can skip this step if you already have mamba installed.\n```\nconda install mamba -n base -c conda-forge\n```\nFor more on mamba: see [Mamba's documentation](https://mamba.readthedocs.io/en/latest/).\n## Install TELR\nWe recommend using mamba to install TELR and all its software dependencies in a new conda environment. Note: installation using this way can lead to variable dependency versions.\n```\nmamba create -n TELR --channel bioconda telr\n```\nAlternatively, TELR and all its software dependencies can be installed directly using the TELR git repository. Note: installation using this approach ensures fixed dependency versions.\n```\ngit clone git@github.com:bergmanlab/TELR.git\ncd TELR\nmamba env create -f envs/telr.yml\nconda activate TELR\npip install .\n```\n## Activate TELR Conda Environment\nThe TELR conda environment must always be activated prior to running TELR. This step adds TELR and its dependencies installed in the TELR conda environment to the environment PATH.\n```\nconda activate TELR\n```\nNOTE: Sometimes activating conda environments does not work via conda activate env when run through a script submitted to a queueing system, this can be fixed by activating the environment in the script as shown below.\n```\nCONDA_BASE=$(conda info --base)\nsource ${CONDA_BASE}/etc/profile.d/conda.sh\nconda activate TELR\n```\nFor more on Conda: see the [Conda User Guide](https://docs.conda.io/projects/conda/en/latest/index.html).\n\n## Run TELR on test dataset\nA test dataset is provided in the `test/` directory, you can test whether your TELR installation is successful by cloning TELR repository and running TELR on the test dataset within the local TELR repository. The test run should generally take less than one minute to finish.\n```\ngit clone git@github.com:bergmanlab/TELR.git\ncd TELR/test\nconda activate TELR\ntelr -o test_output -i reads.fasta -r ref_38kb.fasta -l library.fasta\n```"
      },
      "source": "https://raw.githubusercontent.com/bergmanlab/telr/master/docs/01_Installation.md",
      "technique": "file_exploration"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/bergmanlab/TELR/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "BSD 2-Clause \"Simplified\" License",
        "spdx_id": "BSD-2-Clause",
        "type": "License",
        "url": "https://api.github.com/licenses/bsd-2-clause",
        "value": "https://api.github.com/licenses/bsd-2-clause"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Copyright (c) 2022 Shunhua Han, Guilherme B. Dias and Casey M. Bergman\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
      },
      "source": "https://raw.githubusercontent.com/bergmanlab/telr/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "TELR"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "bergmanlab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 143320,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bergmanlab/telr/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "cbergman",
          "type": "User"
        },
        "date_created": "2023-02-15T02:33:56Z",
        "date_published": "2023-04-26T14:42:11Z",
        "description": "- update readme\r\n- add citation file\r\n- fix off-by-on error in TSD module\r\n- fix repeatmasker sorting error\r\n- fix long filename issue",
        "html_url": "https://github.com/bergmanlab/TELR/releases/tag/v1.1",
        "name": "TELR v1.1",
        "release_id": 100968136,
        "tag": "v1.1",
        "tarball_url": "https://api.github.com/repos/bergmanlab/TELR/tarball/v1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/bergmanlab/TELR/releases/100968136",
        "value": "https://api.github.com/repos/bergmanlab/TELR/releases/100968136",
        "zipball_url": "https://api.github.com/repos/bergmanlab/TELR/zipball/v1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "shunhuahan",
          "type": "User"
        },
        "date_created": "2021-08-23T19:13:49Z",
        "date_published": "2022-01-17T17:38:43Z",
        "description": "- Update README.\r\n- Official release of TELR.\r\n- This revision is used in the following manuscript.\r\n>Local assembly of long reads enables phylogenomics of transposable elements in a polyploid cell line\r\nShunhua Han, Guilherme B. Dias, Preston J. Basting, Raghuvir Viswanatha, Norbert Perrimon, Casey M. Bergman (2022) Local assembly of long reads enables phylogenomics of transposable elements in a polyploid cell line Nucleic Acids Research 50:e124 https://academic.oup.com/nar/article/50/21/e124/6717830",
        "html_url": "https://github.com/bergmanlab/TELR/releases/tag/v1.0",
        "name": "TELR v1.0",
        "release_id": 57311163,
        "tag": "v1.0",
        "tarball_url": "https://api.github.com/repos/bergmanlab/TELR/tarball/v1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/bergmanlab/TELR/releases/57311163",
        "value": "https://api.github.com/repos/bergmanlab/TELR/releases/57311163",
        "zipball_url": "https://api.github.com/repos/bergmanlab/TELR/zipball/v1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "shunhuahan",
          "type": "User"
        },
        "date_created": "2021-08-05T17:49:29Z",
        "date_published": "2021-08-05T20:17:39Z",
        "description": "- Add module to estimate intra sample TE allele frequency.\r\n- Update algorithm to predict TE insertion coordinate.\r\n- Expand flexibility to choose alignment method, local contig assembly method and contig polishing method.\r\n- Report final predictions in VCF, JSON, and BED format.\r\n- TELR repo is now pip installable.",
        "html_url": "https://github.com/bergmanlab/TELR/releases/tag/v0.2",
        "name": "TELR v0.2",
        "release_id": 47388294,
        "tag": "v0.2",
        "tarball_url": "https://api.github.com/repos/bergmanlab/TELR/tarball/v0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/bergmanlab/TELR/releases/47388294",
        "value": "https://api.github.com/repos/bergmanlab/TELR/releases/47388294",
        "zipball_url": "https://api.github.com/repos/bergmanlab/TELR/zipball/v0.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "shunhuahan",
          "type": "User"
        },
        "date_created": "2020-09-14T01:48:24Z",
        "date_published": "2020-09-01T03:22:21Z",
        "description": "This version of TELR shows good performance on several real drosophila melanogaster data sets.",
        "html_url": "https://github.com/bergmanlab/TELR/releases/tag/v0.1",
        "name": "TELR v0.1",
        "release_id": 30475830,
        "tag": "v0.1",
        "tarball_url": "https://api.github.com/repos/bergmanlab/TELR/tarball/v0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/bergmanlab/TELR/releases/30475830",
        "value": "https://api.github.com/repos/bergmanlab/TELR/releases/30475830",
        "zipball_url": "https://api.github.com/repos/bergmanlab/TELR/zipball/v0.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 00:11:36",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 32
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Getting Help",
        "type": "Text_excerpt",
        "value": "Please use the [Github Issue page](https://github.com/bergmanlab/TELR/issues) if you have questions.\n"
      },
      "source": "https://raw.githubusercontent.com/bergmanlab/telr/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Getting Help",
        "type": "Text_excerpt",
        "value": "Please use the [Github Issue page](https://github.com/bergmanlab/TELR/issues) if you have questions.\n"
      },
      "source": "https://raw.githubusercontent.com/bergmanlab/telr/master/README.md",
      "technique": "header_analysis"
    }
  ]
}