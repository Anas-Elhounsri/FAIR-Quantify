{
  "application_domain": [
    {
      "confidence": 47.39,
      "result": {
        "type": "String",
        "value": "Reinforcement Learning"
      },
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8847858624881031,
      "result": {
        "type": "String",
        "value": "Semantic web"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "format": "cff",
        "type": "File_dump",
        "value": "# This CITATION.cff file was generated with cffinit.\n# Visit https://bit.ly/cffinit to generate yours today!\n\ncff-version: 1.2.0\ntitle: Hybrid Automata Library\nmessage: >-\n  If you use this software, please cite it using the\n  metadata from this file.\ntype: software\nauthors:\n  - given-names: Rafael\n    family-names: Bravo\n  - given-names: Etienne\n    family-names: Baratchart\n  - given-names: Jeffrey\n    family-names: West\n  - given-names: Ryan\n    family-names: Schenck\n  - given-names: Anna\n    family-names: Miller\n  - given-names: Jill\n    family-names: Gallaher\n  - given-names: Chandler\n    family-names: Gatenbee\n  - given-names: David\n    family-names: Basanta\n  - given-names: Mark\n    family-names: Robertson-Tessi\n  - given-names: Alexander\n    family-names: Anderson\nrepository-code: 'https://github.com/mathonco/hal'\nurl: 'https://halloworld.org/'\nabstract: >-\n  Hybrid Automata Library (HAL) is a Java library that\n  facilitates hybrid modeling: spatial models with\n  interacting agent-based and partial-differential equation\n  components. HAL\u2019s components can be broadly classified\n  into: agent containers (on and off-lattice), finite\n  difference diffusion fields, graphical user interface\n  (GUI) components, and additional tools or utilities for\n  computation and data manipulation. These components have a\n  standardized interface that expedites the construction,\n  analysis, and visualization of complex models.\n"
      },
      "source": "https://raw.githubusercontent.com/MathOnco/HAL/master/CITATION.cff",
      "technique": "file_exploration"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/MathOnco/HAL"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-12-17T16:24:23Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-19T16:32:40Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "HAL (Hybrid Automata Library) is the one-stop shop for all of your hybrid modeling needs"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9835459500552255,
      "result": {
        "original_header": "Hybrid Agent Library: HAL",
        "type": "Text_excerpt",
        "value": "Hybrid Automata Library (HAL) is a Java library that facilitates hybrid modeling: spatial models with interacting agent-based and partial-differential equation components. HAL\u2019s components can be broadly classified into: agent containers (on and off-lattice), finite difference diffusion fields, graphical user interface (GUI) components, and additional tools or utilities for computation and data manipulation. These components have a standardized interface that expedites the construction, analysis, and visualization of complex models. \nHAL was originally developed to support mathematical oncology modeling efforts at the H. Lee Moffitt Cancer Center and Research Institute. To view several examples of projects built in HAL, since its inception in 2017, we direct the reader to the following website: [halloworld.org](http://halloworld.org/). More details on the philosophy and technical details behind HAL can be found in the paper, published in PLOS Computational Biology, [here](https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1007635) (open-access). \n"
      },
      "source": "https://raw.githubusercontent.com/MathOnco/HAL/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9978763011947386,
      "result": {
        "original_header": "What is hybrid modeling?",
        "type": "Text_excerpt",
        "value": "Hybrid Modeling is the integration of Agent-Based modeling and partial differential equation (PDE) modeling. It is commonly used in mathematical oncology to mechanistically model interactions between microen- vironmental diffusibles (e.g drugs or resources) and agents (tumor cells). Tissue is represented using agent-based modeling, where each agent acts as a single cell in two- or three-dimensional space. As seen in figure 1, agents may be stackable, unstackable, off-lattice, on-lattice, and two- or three-dimensional types. Agents are contained in grids. A single model may have multiple overlapping and interacting grids, representing moving and interacting cells, alongside diffusing drug and resources. Diffusibles that interact with the tissue are represented using partial differential equations (PDEs).\n \n"
      },
      "source": "https://raw.githubusercontent.com/MathOnco/HAL/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9946057590074635,
      "result": {
        "original_header": "Modularity",
        "type": "Text_excerpt",
        "value": "Each component (grids, agents) of HAL can function independently. This permits any combination of components to be used in a single model, with the use of spatial queries to combine them.\n \n"
      },
      "source": "https://raw.githubusercontent.com/MathOnco/HAL/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9625659387706191,
      "result": {
        "original_header": "Extensibility",
        "type": "Text_excerpt",
        "value": "HAL was designed to allow models and components to be extended and modified. Grids and agents from published models can be used as as a scaffold on which to do additional studies while keeping the prior work and their additions separated.\n \n"
      },
      "source": "https://raw.githubusercontent.com/MathOnco/HAL/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.999016249482325,
      "result": {
        "original_header": "Simplicity",
        "type": "Text_excerpt",
        "value": "Components are simple and generic making them applicable to a wide variety of modeling problems outside of mathematical oncology. A defensive programming paradigm was used to generate useful error messages when a component is used incorrectly. The purpose of this manual is to explain the modeling paradigm behind HAL, where the clear, consistent interface and methodology allows for ease of learning and implementation.\n \n"
      },
      "source": "https://raw.githubusercontent.com/MathOnco/HAL/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9932278791218173,
      "result": {
        "original_header": "Performance",
        "type": "Text_excerpt",
        "value": "HAL prioritizes performance in its algorithmic implementation. HAL includes efficient PDE solving algorithms, efficient visualization using BufferedImages and OpenGL, and leverages Java\u2019s impressive performance for exe- cuting ABM logic. These performance considerations allow for real-time display and visualization of models with minimal lag.\n \n"
      },
      "source": "https://raw.githubusercontent.com/MathOnco/HAL/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/MathOnco/HAL/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 12
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/MathOnco/HAL/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MathOnco/HAL"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/MathOnco/HAL/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MathOnco/HAL/master/./what_is_hybrid_modeliing.png"
      },
      "source": "https://raw.githubusercontent.com/MathOnco/HAL/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Setting up the project in IntelliJ Idea",
        "parent_header": [
          "Before you start"
        ],
        "type": "Text_excerpt",
        "value": "See the manual [halloworld.org/setup](https://halloworld.org/setup.html) for information on how to setup HAL on your operating system."
      },
      "source": "https://raw.githubusercontent.com/MathOnco/HAL/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/MathOnco/HAL/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2017 Rafael Ramon Bravo\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/MathOnco/HAL/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "HAL"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "MathOnco"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Java",
        "size": 1162763,
        "type": "Programming_language",
        "value": "Java"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MathOnco/HAL/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "torococo",
          "type": "User"
        },
        "date_created": "2021-05-12T18:15:27Z",
        "date_published": "2021-05-12T18:19:34Z",
        "description": "I'm pretty sure that this release is production ready. please download it, try the new features, and let me know if anything isn't working as you would like it to\r\n\r\nbugfixes:\r\n- sometimes recursive agent search inquiries would cause HAL to run out of memory. this was fixed by limiting the number of agent search iterators that HAL stores internally.\r\n- removed hacky logic in SphericalAgent2D that was supposed to prevent cells from stacking. just be careful not to put cells directly on top of each other when using this class unless you intend to do so!\r\n- Removed MultinomialCalc probability sum test which would sometimes stop the program on probability sums that were very close to 1.\r\n\r\nfeatures:\r\n- added new GridView class to the Gui folder! this allows a user to make a view of part of a UIGrid and treat it as its own UIGrid! very useful if you want to put multiple displays on the same UIGrid.\r\n- Added the option to make Voxels and Cubes in the OpenGL3DWindow class!\r\n- Added DrawAlpha function to the OpenGL3DWindow class, which will draw transparent objects in the correct order so that clouds of objects can be visualized.\r\n- Added a WeibuillDist sampler (thanks Rebecca) to the Rand object\r\n- Added a Jet Heatmap function to provide matlab's favorite colormap",
        "html_url": "https://github.com/MathOnco/HAL/releases/tag/1.2.0beta",
        "name": "1.2.0beta",
        "release_id": 42861299,
        "tag": "1.2.0beta",
        "tarball_url": "https://api.github.com/repos/MathOnco/HAL/tarball/1.2.0beta",
        "type": "Release",
        "url": "https://api.github.com/repos/MathOnco/HAL/releases/42861299",
        "value": "https://api.github.com/repos/MathOnco/HAL/releases/42861299",
        "zipball_url": "https://api.github.com/repos/MathOnco/HAL/zipball/1.2.0beta"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "rschenck",
          "type": "User"
        },
        "date_created": "2021-04-02T17:55:38Z",
        "date_published": "2021-05-11T18:40:53Z",
        "description": "A few changes to the last stable version of HAL. These include:\r\n- Updates to neighborhood queries\r\n- Updates to multinomial function\r\n- Updates to multiwell modeling functionality\r\n- Some updates to README and documentation\r\n- Move function now present in  PopulationGrid\r\n- Added improved examples",
        "html_url": "https://github.com/MathOnco/HAL/releases/tag/v1.1.1-beta",
        "name": "Beta of new features added to HAL over past year",
        "release_id": 42792848,
        "tag": "v1.1.1-beta",
        "tarball_url": "https://api.github.com/repos/MathOnco/HAL/tarball/v1.1.1-beta",
        "type": "Release",
        "url": "https://api.github.com/repos/MathOnco/HAL/releases/42792848",
        "value": "https://api.github.com/repos/MathOnco/HAL/releases/42792848",
        "zipball_url": "https://api.github.com/repos/MathOnco/HAL/zipball/v1.1.1-beta"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "torococo",
          "type": "User"
        },
        "date_created": "2020-04-04T18:39:34Z",
        "date_published": "2020-04-04T18:45:33Z",
        "description": "Small bugfix to Multiwell tool not visualizing,\r\nAdded Move function to the PopulationGrids",
        "html_url": "https://github.com/MathOnco/HAL/releases/tag/v1.1.0",
        "name": "Version 1.1.0",
        "release_id": 25201831,
        "tag": "v1.1.0",
        "tarball_url": "https://api.github.com/repos/MathOnco/HAL/tarball/v1.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/MathOnco/HAL/releases/25201831",
        "value": "https://api.github.com/repos/MathOnco/HAL/releases/25201831",
        "zipball_url": "https://api.github.com/repos/MathOnco/HAL/zipball/v1.1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "torococo",
          "type": "User"
        },
        "date_created": "2019-10-17T12:51:42Z",
        "date_published": "2019-10-17T12:53:55Z",
        "description": "Fixed the SwapPositions function",
        "html_url": "https://github.com/MathOnco/HAL/releases/tag/v1.0.1",
        "name": "Version 1.0.1",
        "release_id": 20773816,
        "tag": "v1.0.1",
        "tarball_url": "https://api.github.com/repos/MathOnco/HAL/tarball/v1.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/MathOnco/HAL/releases/20773816",
        "value": "https://api.github.com/repos/MathOnco/HAL/releases/20773816",
        "zipball_url": "https://api.github.com/repos/MathOnco/HAL/zipball/v1.0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "torococo",
          "type": "User"
        },
        "date_created": "2019-10-03T19:41:56Z",
        "date_published": "2019-10-03T19:47:20Z",
        "description": "The \"first\" release of HAL with version numbers. the version presented here is well tested and stable",
        "html_url": "https://github.com/MathOnco/HAL/releases/tag/1.0.0",
        "name": "Version 1.0.0!",
        "release_id": 20456963,
        "tag": "1.0.0",
        "tarball_url": "https://api.github.com/repos/MathOnco/HAL/tarball/1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/MathOnco/HAL/releases/20456963",
        "value": "https://api.github.com/repos/MathOnco/HAL/releases/20456963",
        "zipball_url": "https://api.github.com/repos/MathOnco/HAL/zipball/1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 01:49:25",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 37
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Before you start",
        "type": "Text_excerpt",
        "value": "In order to run models built using HAL's' code base, you'll need to download the latest version of [Java](http://www.oracle.com/technetwork/java/javase/downloads/jdk9-downloads-3848520.html) and an editor (we suggest using [IntelliJ Idea](https://www.jetbrains.com/idea/download/)).\n"
      },
      "source": "https://raw.githubusercontent.com/MathOnco/HAL/master/README.md",
      "technique": "header_analysis"
    }
  ]
}