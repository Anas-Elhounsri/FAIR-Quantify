{
  "application_domain": [
    {
      "confidence": 77.79,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citations",
        "parent_header": [
          "PolarMask: Single Shot Instance Segmentation with Polar Representation"
        ],
        "type": "Text_excerpt",
        "value": "Please consider citing our paper in your publications if the project helps your research. BibTeX reference is as follows.\n\n```\n@article{xie2019polarmask,\n  title={PolarMask: Single Shot Instance Segmentation with Polar Representation},\n  author={Xie, Enze and Sun, Peize and Song, Xiaoge and Wang, Wenhai and Liu, Xuebo and Liang, Ding and Shen, Chunhua and Luo, Ping},\n  journal={arXiv preprint arXiv:1909.13226},\n  year={2019}\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/xieenze/PolarMask/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Xie, Enze and Sun, Peize and Song, Xiaoge and Wang, Wenhai and Liu, Xuebo and Liang, Ding and Shen, Chunhua and Luo, Ping",
        "format": "bibtex",
        "title": "PolarMask: Single Shot Instance Segmentation with Polar Representation",
        "type": "Text_excerpt",
        "value": "@article{xie2019polarmask,\n    year = {2019},\n    journal = {arXiv preprint arXiv:1909.13226},\n    author = {Xie, Enze and Sun, Peize and Song, Xiaoge and Wang, Wenhai and Liu, Xuebo and Liang, Ding and Shen, Chunhua and Luo, Ping},\n    title = {PolarMask: Single Shot Instance Segmentation with Polar Representation},\n}"
      },
      "source": "https://raw.githubusercontent.com/xieenze/PolarMask/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_of_conduct": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at chenkaidev@gmail.com. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
      },
      "source": "https://raw.githubusercontent.com/xieenze/PolarMask/master/CODE_OF_CONDUCT.md",
      "technique": "file_exploration"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/xieenze/PolarMask"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contributing to mmdetection\n\nAll kinds of contributions are welcome, including but not limited to the following.\n\n- Fixes (typo, bugs)\n- New features and components\n\n## Workflow\n\n1. fork and pull the latest mmdetection\n2. checkout a new branch (do not use master branch for PRs)\n3. commit your changes\n4. create a PR\n\nNote\n- If you plan to add some new features that involve large changes, it is encouraged to open an issue for discussion first.\n- If you are the author of some papers and would like to include your method to mmdetection,\nplease contact Kai Chen (chenkaidev[at]gmail[dot]com). We will much appreciate your contribution.\n\n## Code style\n\n### Python\nWe adopt [PEP8](https://www.python.org/dev/peps/pep-0008/) as the preferred code style.\nWe use [flake8](http://flake8.pycqa.org/en/latest/) as the linter and [yapf](https://github.com/google/yapf) as the formatter.\nPlease upgrade to the latest yapf (>=0.27.0) and refer to the [configuration](.style.yapf).\n\n>Before you create a PR, make sure that your code lints and is formatted by yapf.\n\n### C++ and CUDA\nWe follow the [Google C++ Style Guide](https://google.github.io/styleguide/cppguide.html)."
      },
      "source": "https://raw.githubusercontent.com/xieenze/PolarMask/master/CONTRIBUTING.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Contributing to the project",
        "parent_header": [
          "PolarMask: Single Shot Instance Segmentation with Polar Representation"
        ],
        "type": "Text_excerpt",
        "value": "Any pull requests or issues are welcome.\n"
      },
      "source": "https://raw.githubusercontent.com/xieenze/PolarMask/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-09-29T01:12:39Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-17T12:58:02Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Code for 'PolarMask: Single Shot Instance Segmentation with Polar Representation'"
      },
      "technique": "GitHub_API"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/xieenze/PolarMask/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/xieenze/PolarMask/master/demo/visualize.ipynb"
      },
      "source": "https://raw.githubusercontent.com/xieenze/PolarMask/master/demo/visualize.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 158
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/xieenze/PolarMask/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "xieenze/PolarMask"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PolarMask: Single Shot Instance Segmentation with Polar Representation"
      },
      "source": "https://raw.githubusercontent.com/xieenze/PolarMask/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/xieenze/PolarMask/master/tools/slurm_train.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/xieenze/PolarMask/master/tools/dist_train.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/xieenze/PolarMask/master/tools/slurm_test.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/xieenze/PolarMask/master/tools/dist_test.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "http://raw.githubusercontent.com/xieenze/PolarMask/master/imgs/pipeline.png"
      },
      "source": "https://raw.githubusercontent.com/xieenze/PolarMask/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "http://raw.githubusercontent.com/xieenze/PolarMask/master/imgs/visual.png"
      },
      "source": "https://raw.githubusercontent.com/xieenze/PolarMask/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "http://raw.githubusercontent.com/xieenze/PolarMask/master/imgs/performance.png"
      },
      "source": "https://raw.githubusercontent.com/xieenze/PolarMask/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "## Installation\n\n### Requirements\n\n- Linux\n- Python 3.5+ ([Say goodbye to Python2](https://python3statement.org/))\n- PyTorch 1.0+ or PyTorch-nightly\n- CUDA 9.0+\n- NCCL 2+\n- GCC 4.9+\n- [mmcv](https://github.com/open-mmlab/mmcv)\n\nWe have tested the following versions of OS and softwares:\n\n- OS: Ubuntu 16.04/18.04 and CentOS 7.2\n- CUDA: 9.0/9.2/10.0\n- NCCL: 2.1.15/2.2.13/2.3.7/2.4.2\n- GCC: 4.9/5.3/5.4/7.3\n\n### Install mmdetection\n\na. Create a conda virtual environment and activate it. Then install Cython.\n\n```shell\nconda create -n open-mmlab python=3.7 -y\nconda activate open-mmlab\n\nconda install cython\n```\n\nb. Install PyTorch stable or nightly and torchvision following the [official instructions](https://pytorch.org/).\n\nc. Clone the mmdetection repository.\n\n```shell\ngit clone https://github.com/open-mmlab/mmdetection.git\ncd mmdetection\n```\n\nd. Install mmdetection (other dependencies will be installed automatically).\n\n```shell\npython setup.py develop\n# or \"pip install -v -e .\"\n```\n\nNote:\n\n1. It is recommended that you run the step e each time you pull some updates from github. If there are some updates of the C/CUDA codes, you also need to run step d.\nThe git commit id will be written to the version number with step e, e.g. 0.6.0+2e7045c. The version will also be saved in trained models.\n\n2. Following the above instructions, mmdetection is installed on `dev` mode, any modifications to the code will take effect without installing it again.\n\n### Prepare COCO dataset.\n\nIt is recommended to symlink the dataset root to `$MMDETECTION/data`.\n\n```\nmmdetection\n\u251c\u2500\u2500 mmdet\n\u251c\u2500\u2500 tools\n\u251c\u2500\u2500 configs\n\u251c\u2500\u2500 data\n\u2502   \u251c\u2500\u2500 coco\n\u2502   \u2502   \u251c\u2500\u2500 annotations\n\u2502   \u2502   \u251c\u2500\u2500 train2017\n\u2502   \u2502   \u251c\u2500\u2500 val2017\n\u2502   \u2502   \u251c\u2500\u2500 test2017\n\u2502   \u251c\u2500\u2500 cityscapes\n\u2502   \u2502   \u251c\u2500\u2500 annotations\n\u2502   \u2502   \u251c\u2500\u2500 train\n\u2502   \u2502   \u251c\u2500\u2500 val\n\u2502   \u251c\u2500\u2500 VOCdevkit\n\u2502   \u2502   \u251c\u2500\u2500 VOC2007\n\u2502   \u2502   \u251c\u2500\u2500 VOC2012\n\n```\nThe cityscapes annotations have to be converted into the coco format using the [cityscapesScripts](https://github.com/mcordts/cityscapesScripts) toolbox.\nWe plan to provide an easy to use conversion script. For the moment we recommend following the instructions provided in the \n[maskrcnn-benchmark](https://github.com/facebookresearch/maskrcnn-benchmark/tree/master/maskrcnn_benchmark/data) toolbox. When using this script all images have to be moved into the same folder. On linux systems this can e.g. be done for the train images with:\n```shell\ncd data/cityscapes/\nmv train/*/* train/\n```\n\n### Scripts\n[Here](https://gist.github.com/hellock/bf23cd7348c727d69d48682cb6909047) is\na script for setting up mmdetection with conda.\n\n### Notice\nYou can run `python(3) setup.py develop` or `pip install -v -e .` to install mmdetection if you want to make modifications to it frequently.\n\nIf there are more than one mmdetection on your machine, and you want to use them alternatively.\nPlease insert the following code to the main file\n```python\nimport os.path as osp\nimport sys\nsys.path.insert(0, osp.join(osp.dirname(osp.abspath(__file__)), '../'))\n```\nor run the following command in the terminal of corresponding folder.\n```shell\nexport PYTHONPATH=`pwd`:$PYTHONPATH\n```\n"
      },
      "source": "https://raw.githubusercontent.com/xieenze/PolarMask/master/INSTALL.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "PolarMask: Single Shot Instance Segmentation with Polar Representation"
        ],
        "type": "Text_excerpt",
        "value": "Our PolarMask is based on [mmdetection](https://github.com/open-mmlab/mmdetection). Please check [INSTALL.md](INSTALL.md) for installation instructions.\n"
      },
      "source": "https://raw.githubusercontent.com/xieenze/PolarMask/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/xieenze/PolarMask/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Apache License 2.0",
        "spdx_id": "Apache-2.0",
        "type": "License",
        "url": "https://api.github.com/licenses/apache-2.0",
        "value": "https://api.github.com/licenses/apache-2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Copyright 2018-2019 Open-MMLab. All rights reserved.\n\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2018-2019 Open-MMLab.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
      },
      "source": "https://raw.githubusercontent.com/xieenze/PolarMask/master/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "PolarMask: Single Shot Instance Segmentation with Polar Representation"
        ],
        "type": "Text_excerpt",
        "value": "For academic use, this project is licensed under the 2-clause BSD License - see the LICENSE file for details. For commercial use, please contact the authors. "
      },
      "source": "https://raw.githubusercontent.com/xieenze/PolarMask/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PolarMask"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "xieenze"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 1202288,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Cuda",
        "size": 92328,
        "type": "Programming_language",
        "value": "Cuda"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 46842,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 1476,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/xieenze/PolarMask/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_papers": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/1909.13226"
      },
      "source": "https://raw.githubusercontent.com/xieenze/PolarMask/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-06 05:22:33",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 875
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "PolarMask: Single Shot Instance Segmentation with Polar Representation",
        "type": "Text_excerpt",
        "value": "The code for implementing the **[PolarMask](https://arxiv.org/abs/1909.13226)**. \n\n![image-20190807160835333](imgs/pipeline.png)\n"
      },
      "source": "https://raw.githubusercontent.com/xieenze/PolarMask/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Highlights",
        "parent_header": [
          "PolarMask: Single Shot Instance Segmentation with Polar Representation"
        ],
        "type": "Text_excerpt",
        "value": "- **Simple:** Anchor-free, single-stage and can be easily embeded to many detectors such as FCOS.\n- **Unify:**  Our PolarMask first make object detection problem and instance segmentation problem into a unified dense regression problem.\n- **Inference Fast:** Our PolarMask-R50 can achieve 29.1AP(800) / 23.9FPS, 27.6AP(600) / 34.1FPS, 22.9AP(400) / 46.7FPS on 1 V100 GPU.\n\n"
      },
      "source": "https://raw.githubusercontent.com/xieenze/PolarMask/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "News",
        "parent_header": [
          "PolarMask: Single Shot Instance Segmentation with Polar Representation"
        ],
        "type": "Text_excerpt",
        "value": "- New Fast DataLoader is updated. 4 V100 can train PolarMask in 15 hours.(2019.11.12)\n- PolarMask-X101 with DCN, ms train and 2x can achieve 35.9 mAP. Code is released.(2019.10.26)\n- PolarMask-X101 with DCN can achieve 34.9 mAP. Code is released.(2019.10.23)\n- PolarMask-X101 with 2x and multi-scale train can achieve 33.5 mAP. Code and trained models with 2x and mstrain for R50,R101 and X101 are released.(2019.10.19)\n\n"
      },
      "source": "https://raw.githubusercontent.com/xieenze/PolarMask/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Performances",
        "parent_header": [
          "PolarMask: Single Shot Instance Segmentation with Polar Representation"
        ],
        "type": "Text_excerpt",
        "value": "![Graph](imgs/visual.png)\n\n\n![Table](imgs/performance.png)\n\nAll the training time is measured on 32 Maxwell TitanX or 4 V100 GPUs, we found they achieve very similar performance.\n\nAll the inference speed is measured using converged models on 1 Maxwell TitanX / V100 GPU. We only report the model inference time.\n\nNote that we found the V100 is nearly three times faster than TitanX. More details can refer to paper Table 1(f). \n\n"
      },
      "source": "https://raw.githubusercontent.com/xieenze/PolarMask/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Results and Models",
        "parent_header": [
          "PolarMask: Single Shot Instance Segmentation with Polar Representation"
        ],
        "type": "Text_excerpt",
        "value": "For 32 gpus, we set 2000 iters to warmup instead of 500. So the total epoches is 14 for 1x.\n  \nAnd the performance is similar to 4gpus. Most of experiments are run on 32gpus in paper to fasten the process.\n\nThe results are test on minival set.\n\nTrained models can be download in [Google Drive](https://drive.google.com/drive/folders/1EWtLhWSGuJVtMCS8mTvKNxdYYpz7ufjV?usp=sharing).\n\n| Backbone  | Style   | GN  | MS train | Lr schd |  GPUs | Inf time (fps) | mask AP \n|:---------:|:-------:|:----:|:-------:|:-------:|:-----:|:--------------:|:------:|\n| R-50      | caffe   | Y    | N       | 1x      |  4    | 8.9/23.9       | 29.2   |\n| R-101     | caffe   | Y    | N       | 1x      |  4    | -              | 30.7   | \n| X-101     | pytorch   | Y  | N       | 1x      |  4    | -              | 32.5   | \n\n| Backbone  | Style   | GN  | MS train | Lr schd |  GPUs | Inf time (fps) | mask AP|\n|:---------:|:-------:|:----:|:-------:|:-------:|:-----:|:--------------:|:------:|\n| R-50      | caffe   | Y    | N       | 1x      |  32    | 8.9/23.9      | 29.1   | \n| R-101     | caffe   | Y    | N       | 1x      |  32    | -             | 30.4   |\n| X-101     | pytorch | Y    | N       | 1x      |  32    | -             | 32.6   | \n| R-50-DCN  | caffe   | Y    | N       | 1x      |  32    | -             | 32.0   | \n| R-101-DCN | caffe   | Y    | N       | 1x      |  32    | -             | 33.5   |\n| X-101-DCN | pytorch | Y    | N       | 1x      |  32    | -             | 34.9   | \n\nBackbone  | Style   | GN  | MS train | Lr schd |  GPUs | Inf time (fps) | mask AP|\n|:---------:|:-------:|:----:|:-------:|:-------:|:-----:|:--------------:|:------:|\n| R-50      | caffe   | Y    | Y       | 2x      |  32    | 8.9/23.9      | 30.5   | \n| R-101     | caffe   | Y    | Y       | 2x      |  32    | -             | 31.9   |\n| X-101     | pytorch | Y    | Y       | 2x      |  32    | -             | 33.5   |\n| R-50-DCN  | caffe   | Y    | Y       | 2x      |  32    | -             | 33.3   | \n| R-101-DCN | caffe   | Y    | Y       | 2x      |  32    | -             | 34.3   |\n| X-101-DCN | pytorch | Y    | Y       | 2x      |  32    | -             | 35.9   |  \n\n**Notes:**\n- The X-101 backbone is X-101-64x4d.\n- Dataloader is rewrited and it is slow because generating labels for rays is complex. We will try to speed up it in the futher.\n\n"
      },
      "source": "https://raw.githubusercontent.com/xieenze/PolarMask/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "A quick Demo",
        "parent_header": [
          "PolarMask: Single Shot Instance Segmentation with Polar Representation"
        ],
        "type": "Text_excerpt",
        "value": "Please run the ```demo/visualize.py```. Note that the ```size_diviser``` of test need to be set 32. \nDetails can be found in [this issue](https://github.com/xieenze/PolarMask/issues/8#issuecomment-546577861).\nThanks [@zzzzzz0407](https://github.com/zzzzzz0407) for his useful advice."
      },
      "source": "https://raw.githubusercontent.com/xieenze/PolarMask/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Training and Testing",
        "parent_header": [
          "PolarMask: Single Shot Instance Segmentation with Polar Representation"
        ],
        "type": "Text_excerpt",
        "value": "**Train:**"
      },
      "source": "https://raw.githubusercontent.com/xieenze/PolarMask/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1. 4gpu train(same as FCOS)",
        "parent_header": [
          "PolarMask: Single Shot Instance Segmentation with Polar Representation",
          "Training and Testing"
        ],
        "type": "Text_excerpt",
        "value": "- ```sh ./tools/dist_train.sh  configs/polarmask/4gpu/polar_768_1x_r50.py 4 --launcher pytorch --work_dir ./work_dirs/polar_768_1x_r50_4gpu```\n"
      },
      "source": "https://raw.githubusercontent.com/xieenze/PolarMask/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2. 32gpu train(for fasten)",
        "parent_header": [
          "PolarMask: Single Shot Instance Segmentation with Polar Representation",
          "Training and Testing"
        ],
        "type": "Text_excerpt",
        "value": "- ```srun -p VI_ID_TITANX --job-name=PolarMask --gres=gpu:4 --ntasks=32 --ntasks-per-node=4 --kill-on-bad-exit=1 python -u tools/train.py configs/polarmask/32gpu/polar_768_1x_r50.py --launcher=slurm --work_dir ./work_dirs/polar_768_1x_r50_32gpu```\n\n\n\n**Test:**"
      },
      "source": "https://raw.githubusercontent.com/xieenze/PolarMask/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4gpu test",
        "parent_header": [
          "PolarMask: Single Shot Instance Segmentation with Polar Representation",
          "Training and Testing"
        ],
        "type": "Text_excerpt",
        "value": "- ```sh tools/dist_test.sh configs/polarmask/4gpu/polar_768_1x_r50.py ./work_dirs/polar_768_1x_r50_4gpu/latest.pth 4 --out work_dirs/trash/res.pkl --eval segm```\n\n"
      },
      "source": "https://raw.githubusercontent.com/xieenze/PolarMask/master/README.md",
      "technique": "header_analysis"
    }
  ]
}