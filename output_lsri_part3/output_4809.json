{
  "application_domain": [
    {
      "confidence": 0.993674284828291,
      "result": {
        "type": "String",
        "value": "Graphs"
      },
      "technique": "supervised_classification"
    },
    {
      "confidence": 32.53,
      "result": {
        "type": "String",
        "value": "Natural Language Processing"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "author": "Yue, Xiang and Wang, Zhen and Huang, Jingong and Parthasarathy, Srinivasan and Moosavinasab, Soheil and Huang, Yungui and Lin, Simon M and Zhang, Wen and Zhang, Ping and Sun, Huan",
        "format": "bibtex",
        "title": "Graph embedding on biomedical networks: methods, applications and evaluations",
        "type": "Text_excerpt",
        "value": "@article{yue2020graph,\n    publisher = {Oxford University Press},\n    year = {2020},\n    pages = {1241--1251},\n    number = {4},\n    volume = {36},\n    journal = {Bioinformatics},\n    author = {Yue, Xiang and Wang, Zhen and Huang, Jingong and Parthasarathy, Srinivasan and Moosavinasab, Soheil and Huang, Yungui and Lin, Simon M and Zhang, Wen and Zhang, Ping and Sun, Huan},\n    title = {Graph embedding on biomedical networks: methods, applications and evaluations},\n}"
      },
      "source": "https://raw.githubusercontent.com/xiangyue9607/BioNEV/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/xiangyue9607/BioNEV"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "6. Contact",
        "parent_header": [
          "BioNEV (Biomedical Network Embedding Evaluation)"
        ],
        "type": "Text_excerpt",
        "value": "Feel free to contact [Xiang Yue](https://xiangyue9607.github.io/) <yue.149 AT osu DOT edu> or [Huan Sun](http://web.cse.ohio-state.edu/~sun.397/) <sun.397 AT osu DOT edu> for any questions about the paper, datsaets, code and results.\n"
      },
      "source": "https://raw.githubusercontent.com/xiangyue9607/BioNEV/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-04-01T16:32:13Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-22T21:57:51Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Graph Embedding Evaluation / Code and Datasets for  \"Graph Embedding on Biomedical Networks: Methods, Applications, and Evaluations\"  (Bioinformatics 2020) "
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Introduction",
        "parent_header": [
          "BioNEV (Biomedical Network Embedding Evaluation)"
        ],
        "type": "Text_excerpt",
        "value": "This repository contains source code and datasets for paper [\"Graph Embedding on Biomedical Networks: Methods, Applications, and Evaluations\"](https://arxiv.org/pdf/1906.05017.pdf) (accepted by **Bioinformatics**). This work aims to systematically evaluate recent advanced graph embedding techniques on biomedical tasks. We compile 5 benchmark datasets for 4 biomedical prediction tasks (see paper for details) and use them to evaluate 11 representative graph embedding methods selected from different categories:\n- 5 matrix factorization-based: Laplacian Eigenmap, SVD, Graph Factorization, HOPE, GraRep\n- 3 random walk-based: DeepWalk, node2vec, struc2vec\n- 3 neural network-based: LINE, SDNE, GAE\n\nThe code can also be applied to graphs in other domains (e.g., social networks, citation networks). More experimental details can be found in [**Supplementary Materials**](Supplementary%20Materials.pdf).\n\nPlease kindly cite the paper if you use the code, datasets or any results in this repo or in the paper:\n```\n@article{yue2020graph,\n  title={Graph embedding on biomedical networks: methods, applications and evaluations},\n  author={Yue, Xiang and Wang, Zhen and Huang, Jingong and Parthasarathy, Srinivasan and Moosavinasab, Soheil and Huang, Yungui and Lin, Simon M and Zhang, Wen and Zhang, Ping and Sun, Huan},\n  journal={Bioinformatics},\n  volume={36},\n  number={4},\n  pages={1241--1251},\n  year={2020},\n  publisher={Oxford University Press}\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/xiangyue9607/BioNEV/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9937268992751863,
      "result": {
        "original_header": "2. Pipeline",
        "type": "Text_excerpt",
        "value": "Fig. 1: Pipeline for applying graph embedding methods to biomedical tasks. Low-dimensional node\n            representations are\n            first learned from biomedical networks by graph embedding methods and then used as features to build\n            specific classifiers for different tasks. For (a) matrix factorization-based methods, they use a data\n            matrix (e.g., adjacency matrix) as the input to learn embeddings through matrix factorization. For (b)\n            random walk-based methods, they first generate sequences of nodes through random walks and then feed the\n            sequences into the word2vec model to learn node representations. For (c)\n            neural network-based methods, their architectures and inputs vary from different models.\n \n"
      },
      "source": "https://raw.githubusercontent.com/xiangyue9607/BioNEV/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9115376062127961,
      "result": {
        "original_header": "4. *Pre-trained Embeddings*",
        "type": "Text_excerpt",
        "value": "We also release the best-performing pre-trained representations of nodes (e.g., drugs, diseases, proteins, UMLS concepts) on each dataset.\nThese pre-trained vectors can be used as: \n- External representations to complement the biological features.\nIn the paper, we showed that by adding the network embedding feature into an existing computational\nmodel\nfor predicting drug-disease associations, the performance is further improved (Section 4.3 in the\npaper). \n- Initialized values of the embedding vectors before training. We can initialize the embedding vector\nfor each node on a graph\nwith its pre-trained embedding (e.g., by looking for the corresponding entity in pre-trained vocab\nlook-up table rather than by random\ninitialization, and then continue training various graph embedding methods as before (which is often\nreferred\nto as \u201cfine-tuning\u201d). We conducted experiment with this \"transfer learning\" idea on\nthe \"CTD DDA\" graph and showed the improvement (Section 5 in the paper). \n"
      },
      "source": "https://raw.githubusercontent.com/xiangyue9607/BioNEV/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9900076367005504,
      "result": {
        "original_header": "5. Code",
        "type": "Text_excerpt",
        "value": "The graph embedding learning for Laplician Eigenmap, Graph Factorization, HOPE, GraRep, DeepWalk, node2vec, LINE, SDNE uses the code from [OpenNE](https://github.com/thunlp/OpenNE)\nThe code of [struc2vec](https://github.com/leoribeiro/struc2vec) and [GAE](https://github.com/tkipf/gae) is from their authors. \nTo ensure different source code could run successfully in our framework, we modify part of their source code.\n  \n"
      },
      "source": "https://raw.githubusercontent.com/xiangyue9607/BioNEV/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9649697072313469,
      "result": {
        "original_header": "General Options",
        "type": "Text_excerpt",
        "value": "- --input, input graph file. Only accepted edgelist format. \n- --output, output graph embedding file. \n- --task, choose to evaluate the embedding quality based on a specific prediction task (i.e., link-prediction, node-classification, none (no eval), default is none) \n- --testing-ratio, testing set ratio for prediction tasks. Only applied when --task is not none. The default is 0.2 \n- --dimensions, the dimensions of embedding for each node. The default is 100. \n- --method, the name of embedding method \n- --label-file, the label file for node classification.  \n- --weighted, true if the input graph is weighted. The default is False.\n- --eval-result-file, the filename of eval result (save the evaluation result into a file). Skip it if there is no need.\n- --seed, random seed. The default is 0. \n \n"
      },
      "source": "https://raw.githubusercontent.com/xiangyue9607/BioNEV/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9851779523461437,
      "result": {
        "original_header": "Specific Options",
        "type": "Text_excerpt",
        "value": "- Matrix Factorization-based methods:\n  - --kstep, k-step transition probability matrix for GraRep. The default is 4. It must divide the --dimension.\n  - --weight-decay, coefficient for L2 regularization for Graph Factorization. The default is 5e-4.\n  - --lr, learning rate for gradient descent in Graph Factorization. The default is 0.01. \n- Random Walk-based methods:\n  - --number-walks, the number of random walks to start at each node.\n  - --walk-length, the length of the random walk started at each node.\n  - --window-size, window size of node sequence. \n  - --p, --q, two parameters that control how fast the walk explores and leaves the neighborhood of starting node. The default values of p, q are 1.0.\n  - --OPT1, --OPT2, --OPT3, three running time efficiency optimization strategies for struc2vec. The default values are True.\n  - --until-layer, calculation until the layer. A hyper-parameter for struc2vec. The default is 6.\n  \n- Neural Network-based methods:\n  - --lr, learning rate for gradient descent. The default is 0.01.\n  - --epochs, training epochs. The default is 5. Suggest to set a small value for LINE and SDNE (e.g., 5), and a large value for GAE (e.g., 500).\n  - --bs, batch size. Only applied for SDNE. The default is 200.\n  - --negative-ratio, the negative sampling ratio for LINE. The default is 5.\n  - --order, the order of LINE, 1 means first order, 2 means second order, 3 means first order + second order. The default is 2.\n  - --alpha, a hyperparameter in SDNE that balances the weight of 1st-order and 2nd-order proximities. The default is 0.3.\n  - --beta', a hyperparameter in SDNE that controls the reconstruction weight of the nonzero elementsin the training graph. The default is 0.\n  - --dropout, dropout rate. Only applied for GAE. The default is 0.\n  - --hidden, number of units in hidden layer. Only applied for GAE. The default is 32.\n  - --gae_model_selection, GAE model variants: gcn_ae or gcn_vae. The default is gcn_ae.\n \n"
      },
      "source": "https://raw.githubusercontent.com/xiangyue9607/BioNEV/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/xiangyue9607/BioNEV/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 77
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/xiangyue9607/BioNEV/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "xiangyue9607/BioNEV"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BioNEV (Biomedical Network Embedding Evaluation)"
      },
      "source": "https://raw.githubusercontent.com/xiangyue9607/BioNEV/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/xiangyue9607/BioNEV/master/img/pipeline.png"
      },
      "source": "https://raw.githubusercontent.com/xiangyue9607/BioNEV/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "BioNEV (Biomedical Network Embedding Evaluation)",
          "5. Code"
        ],
        "type": "Text_excerpt",
        "value": "Use the following command to install directly from GitHub;\n\n```bash\n$ pip install git+https://github.com/xiangyue9607/BioNEV.git\n```\n\nAlternatively, use the following commands to install the latest code in development mode (using `-e`):\n\n```bash\n$ git clone https://github.com/xiangyue9607/BioNEV.git\n$ cd BioNEV\n$ pip install -e .\n```\n"
      },
      "source": "https://raw.githubusercontent.com/xiangyue9607/BioNEV/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/xiangyue9607/BioNEV/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "biomedical-graphs, biomedical-networks, deepwalk, gae, graph-embedding, graph-embedding-methods, graph-embeddings-evaluation, graph-factorization, line-embedding, link-prediction, matrix-factorization, network-embedding, node-classification, node2vec, sdne, struc2vec"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2019 Xiang Yue\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/xiangyue9607/BioNEV/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BioNEV"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "xiangyue9607"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 134497,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/xiangyue9607/BioNEV/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_papers": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/pdf/1906.05017.pdf"
      },
      "source": "https://raw.githubusercontent.com/xiangyue9607/BioNEV/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running example",
        "parent_header": [
          "BioNEV (Biomedical Network Embedding Evaluation)",
          "5. Code"
        ],
        "type": "Text_excerpt",
        "value": "```\nbionev --input ./data/DrugBank_DDI/DrugBank_DDI.edgelist \\\n       --output ./embeddings/DeepWalk_DrugBank_DDI.txt \\\n       --method DeepWalk \\\n       --task link-prediction \\\n       --eval-result-file eval_result.txt\n```\n\n```\nbionev --input ./data/Clin_Term_COOC/Clin_Term_COOC.edgelist \\\n       --label-file ./data/Clin_Term_COOC/Clin_Term_COOC_labels.txt \\\n       --output ./embeddings/LINE_COOC.txt \\\n       --method LINE \\\n       --task node-classification \\\n       --weighted True\n```\n"
      },
      "source": "https://raw.githubusercontent.com/xiangyue9607/BioNEV/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "requirements",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 17:45:41",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 223
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running example",
        "parent_header": [
          "BioNEV (Biomedical Network Embedding Evaluation)",
          "5. Code"
        ],
        "type": "Text_excerpt",
        "value": "```\nbionev --input ./data/DrugBank_DDI/DrugBank_DDI.edgelist \\\n       --output ./embeddings/DeepWalk_DrugBank_DDI.txt \\\n       --method DeepWalk \\\n       --task link-prediction \\\n       --eval-result-file eval_result.txt\n```\n\n```\nbionev --input ./data/Clin_Term_COOC/Clin_Term_COOC.edgelist \\\n       --label-file ./data/Clin_Term_COOC/Clin_Term_COOC_labels.txt \\\n       --output ./embeddings/LINE_COOC.txt \\\n       --method LINE \\\n       --task node-classification \\\n       --weighted True\n```\n"
      },
      "source": "https://raw.githubusercontent.com/xiangyue9607/BioNEV/master/README.md",
      "technique": "header_analysis"
    }
  ]
}