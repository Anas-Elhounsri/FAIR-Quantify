{
  "application_domain": [
    {
      "confidence": 0.9345962282502583,
      "result": {
        "type": "String",
        "value": "Graphs"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "References",
        "parent_header": [
          "Contents"
        ],
        "type": "Text_excerpt",
        "value": "The k-center 2-approximation is [Gonzalez's](https://www.sciencedirect.com/science/article/pii/0304397585902245)\n[algorithm](https://sci-hub.se/10.1016/0304-3975\\(85\\)90224-5).\nThe k-center clustering, 2-approximation, and coreset *with outliers* is [Ding, Yu, and Wang](https://arxiv.org/abs/1901.08219).\n\nThe importance sampling framework we use is from the [Braverman, Feldman, and Lang](https://arxiv.org/abs/1612.00889) paper from 2016,\nwhile its application to graph metrics is from [Baker, Braverman, Huang, Jiang, Krauthgamer, and Wu](https://arxiv.org/abs/1907.04733v2).\nWe also support Varadarajan-Xiao, Feldman Langberg, and Bachem et al., methods for coreset sampling for differing dissimilarity measures.\n\nWe use a modified iterative version of the sampling from [Thorup](https://epubs.siam.org/doi/pdf/10.1137/S0097539701388884) paper from 2005\nfor an initial graph bicriteria approximation, which is described in the above Baker, et al. This can be found for shortest-paths graph metrics and oracle metrics in minicore/bicriteria.h.\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/dnbaker/minicore/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/dnbaker/minicore"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-12-09T01:20:01Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-26T10:00:58Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Fast and memory-efficient clustering + coreset construction, including fast distance kernels for Bregman and f-divergences."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9962413758482743,
      "result": {
        "original_header": "Minicore: Fast Generic Coresets <a href=\"https://travis-ci.com/dnbaker/minocore\"><img alt=\"Build Status\" src=\"https://travis-ci.com/dnbaker/minocore.svg?token=nzWL3kpck4ymqu9SdesD&amp;branch=main\" /></a>",
        "type": "Text_excerpt",
        "value": "Minicore is a fast, generic library for constructing and clustering coresets on graphs, in metric spaces and under non-metric dissimilarity measures.\nIt includes methods for constant-factor and bicriteria approximation solutions, as well as coreset sampling algorithms. \nThese methods allow for fast and accurate summarization of and clustering of datasets with strong theoretical guarantees. \nMinicore both stands for \"mini\" and \"core\", as it builds *concise representations* via *core*-sets, and as a portmanteau of Manticore and Minotaur. \n"
      },
      "source": "https://raw.githubusercontent.com/dnbaker/minicore/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8571259544877384,
      "result": {
        "original_header": "Python bindings",
        "type": "Text_excerpt",
        "value": "Python bindings require numpy, scipy, and a recent C++ compiler capable of compiling C++-17. \n"
      },
      "source": "https://raw.githubusercontent.com/dnbaker/minicore/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.967555101189357,
      "result": {
        "original_header": "Contents",
        "type": "Text_excerpt",
        "value": "1. [graph](#Graph)\n    1. Wrappers for boost::graph\n2. [coresets](#coreseth)\n    1. `CoresetSampler` contains methods for building an importance sampling framework, performing sampling, and reweighting.\n    2. IndexCoreset contains a vector of indices and a vector of weights.\n    3. Methods for reducing are incomplete, but the software is general enough that this will not be particularly difficult.\n        1. Each kind of coreset will likely need a different sort of merge/reduce, as our Coreset only has indices, not the data itself.\n    4. [MatrixCoreset](#matrix_coreseth) creates a composable coreset managing its own memory from an IndexCoreset and a matrix.\n3. Approximation Algorithms\n    1. [k-center](#kcenterh) (with and without outliers)\n    2. [k-means](#kmeansh)\n    3. Metric k-median Problem\n        1. Local search `lsearch.h`\n        2. Jain-Vazirani `jv_solver.h`\n    4. k,z-clustering using metric k-median solvers, exponentiating the distance matrix by z\n    5. `[Thorup, 2005]`-sampling for pruning search space in both graph shortest-paths metrics and oracle metrics.\n4. Optimization algorithms\n    1. Expectation Maximization\n        1. k-means\n        2. Bregman divergences\n        3. L1\n            1. weighted median is complete, but it has not been retrofitted into an EM framework yet\n5. [blaze-lib row/column iterator wrappers](#blaze_adaptorh)\n    1. Utilities for working with blaze-lib\n6. [disk-based matrix](#diskmath)\n    1. Falls back to disk-backed data if above a specified size, uses RAM otherwise.\n7. Streaming metric and `\\alpha-`approximate metric clusterer\n    1. `minicore/streaming.h`\n8. Locality Sensitive Hashing has been extracted into the [minilsh](https://github.com/dnbaker/minilsh) library.\n    1. LSH functions for:\n        1. JSD\n        2. S2JSD\n        3. Hellinger\n        4. L1 distance\n        5. L2 distance\n        6. L_p distance, 1 >= p >= 2\n    2. LSH table\n    4. See also [DCI](https://github.com/dnbaker/DCI) for an alternative view on LSH probing. \n\nSoon, the goal is to, given a set of data, k, and a dissimilarity measure,\nselect the correct approximation algorithm, and sampling strategy to generate a coreset,\nas well as optimize the clustering problem using that coreset. \nFor Bregman divergences and the squared L2 distance, D^2 sampling works. \nFor all other measures, we will either use the Thorup-sampled JV/local search approximation method\nfor metrics or the streaming k-means method for alpha-approximate metrics to achieve the approximate solution. \nOnce this is achieved and importances sampled, we optimize the problems: \n\nThere exist the potential to achieve higher accuracy clusterings using coresets compared with the full\ndata because of the potential to use exhaustive techniques. We have not yet explored this. \n"
      },
      "source": "https://raw.githubusercontent.com/dnbaker/minicore/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9764347582236467,
      "result": {
        "original_header": "Graph",
        "type": "Text_excerpt",
        "value": "graph.h contains a wrapper for `boost::adjacency_list` tailored for k-median and other optimal transport problems.\n \n"
      },
      "source": "https://raw.githubusercontent.com/dnbaker/minicore/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9359013104408954,
      "result": {
        "original_header": "kcenter.h",
        "type": "Text_excerpt",
        "value": "Algorithms from:\n```\nHu Ding, Haikuo Yu, Zixiu Wang\nGreedy Strategy Works for k-Center Clustering with Outliers and Coreset Construction\n```\n1. kcenter with outiers, 2-approximation\n2. kcenter bicriteria approximation\n3. kcenter with outliers coreset construction (uses Algorithm 2 as a subroutine)\n \n"
      },
      "source": "https://raw.githubusercontent.com/dnbaker/minicore/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9238568021131475,
      "result": {
        "original_header": "kmeans.h",
        "type": "Text_excerpt",
        "value": "1. k-means++ initialization scheme (for the purposes of an approximate solution for importance sampling)\n2. k-means coreset construction using the above approximation\n3. Weighted Lloyd's algorithm\n4. KMC^2 algorithm (for sublinear time kmeans++) \n"
      },
      "source": "https://raw.githubusercontent.com/dnbaker/minicore/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9877781157721244,
      "result": {
        "original_header": "coreset.h",
        "type": "Text_excerpt",
        "value": "1. Importance-sampling based coreset construction\n    1. Note: storage is external.\n`IndexCoreset<IT, FT>`, where IT is index type (integral) and FT is weight type (floating point)\n \n"
      },
      "source": "https://raw.githubusercontent.com/dnbaker/minicore/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8734609608907262,
      "result": {
        "original_header": "matrix_coreset.h",
        "type": "Text_excerpt",
        "value": "`MatrixCoreset<MatType, FT>` (Matrix Type, weight type (floating point)\nConstructed from an IndexCoreset and a Matrix, simply concatenates both matrices and weight vectors.\nCan be reduced using coreset construction.\n \n"
      },
      "source": "https://raw.githubusercontent.com/dnbaker/minicore/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9860434234758424,
      "result": {
        "original_header": "Wrappers",
        "type": "Text_excerpt",
        "value": "wrappers in the blz namespace for blaze::DynamicMatrix and blaze::CustomMatrix, with `rowiterator()` and `columniterator()`\nfunctions allowing range-based loops over the the rows or columns of a matrix.\n \n"
      },
      "source": "https://raw.githubusercontent.com/dnbaker/minicore/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8691700207299898,
      "result": {
        "original_header": "Norm structs",
        "type": "Text_excerpt",
        "value": "structs providing distances under given norms (effectively distance oracles), use in `kmeans.h`\n \n"
      },
      "source": "https://raw.githubusercontent.com/dnbaker/minicore/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9781287065298714,
      "result": {
        "original_header": "diskmat.h",
        "type": "Text_excerpt",
        "value": "Uses [mio](https://github.com/mandreyel/mio) for mmap'd IO. Some of our software uses\nin-memory matrices up to a certain size and then falls back to mmap.\n \n"
      },
      "source": "https://raw.githubusercontent.com/dnbaker/minicore/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9786309436496318,
      "result": {
        "original_header": "distance.h",
        "type": "Text_excerpt",
        "value": "Provides norms and distances.\nIncludes L1, L2, L3, L4, general p-norms, Bhattacharya, Matusita,\nMultinomial and Poisson Bregman divergences, Multinomial Jensen-Shannon Divergence,\nand the Multinomial Jensen-Shannon Metric, optionally with priors.\n \n"
      },
      "source": "https://raw.githubusercontent.com/dnbaker/minicore/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9949136451592884,
      "result": {
        "original_header": "applicator.h",
        "type": "Text_excerpt",
        "value": "Contains ProbDivApplicator, which is a caching applicator of a particular measure of dissimilarity.\nAlso contains code for generating D^2 samplers for approximate solutions.\nMeasures using logs or square roots cache these values. \n"
      },
      "source": "https://raw.githubusercontent.com/dnbaker/minicore/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/dnbaker/minicore/tree/main/docs"
      },
      "technique": "file_exploration"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/dnbaker/minicore/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/dnbaker/minicore/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "dnbaker/minicore"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/dnbaker/minicore/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dnbaker/minicore/ff4a0720758007c04400e0e7a87f585553670c6b/media/Tondo_Minotaur_London.processed.jpg"
      },
      "source": "https://raw.githubusercontent.com/dnbaker/minicore/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9997544356355959,
      "result": {
        "original_header": "Python bindings",
        "type": "Text_excerpt",
        "value": "Python bindings require numpy, scipy, and a recent C++ compiler capable of compiling C++-17. \nSee `python/README.md` for an example and installation instructions, or you can install by running `python3 setup.py`\nfrom the base directory. \nOn some operating systems, SLEEF must be linked dynamically. If `python3 setup.py install` fails, try `python3 dynsetup.py install`, which will build a dynamic library.\nIf you are using Conda, `dynsetup.py` will install the libsleef.so/dylib files as necessary, but otherwise you will need to add a directory containing one of these dynamic libraries to LD\\_LIBRARY\\_PATH or DYLD\\_LIBRARY\\_PATH. \nBecause minicore compiles distance code for the destination hardware, it's difficult to distribute via PyPI, but can still be installed in a single command via pip:\n```bash\npython3 -m pip install git+git://github.com/dnbaker/minicore@main\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/dnbaker/minicore/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 1.0,
      "result": {
        "original_header": "Static build for python bindings",
        "type": "Text_excerpt",
        "value": "By default, we use dynamic linking for gcc and libstdc++. If this causes runtime issues on your machine, you can install the python bindings after setting the `MINICORE_STATIC` variable.\n```bash\ncd python\nexport MINICORE_STATIC=1\npython3 setup.py install\n# or\nMINICORE_STATIC=1 python3 setup.py install\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/dnbaker/minicore/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/dnbaker/minicore/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "approximation-algorithms, bregman-divergence, clustering, coreset, importance-sampling, kmeansplusplus, localsearchplusplus, mbkmeans"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020-2021 Daniel Baker\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/dnbaker/minicore/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "minicore"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "dnbaker"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 3043430,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 83097,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 8376,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 2616,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dnbaker/minicore/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_papers": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/1612.00889"
      },
      "source": "https://raw.githubusercontent.com/dnbaker/minicore/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/1907.04733v2"
      },
      "source": "https://raw.githubusercontent.com/dnbaker/minicore/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/1901.08219"
      },
      "source": "https://raw.githubusercontent.com/dnbaker/minicore/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dnbaker",
          "type": "User"
        },
        "date_created": "2020-05-20T20:52:52Z",
        "date_published": "2020-06-11T17:08:00Z",
        "description": "Versions of software used in [Coresets for Clustering in Graphs of Bounded Treewidth](https://arxiv.org/abs/1907.04733), ICML 2020.",
        "html_url": "https://github.com/dnbaker/minicore/releases/tag/icml2020",
        "name": "ICML 2020",
        "release_id": 27464308,
        "tag": "icml2020",
        "tarball_url": "https://api.github.com/repos/dnbaker/minicore/tarball/icml2020",
        "type": "Release",
        "url": "https://api.github.com/repos/dnbaker/minicore/releases/27464308",
        "value": "https://api.github.com/repos/dnbaker/minicore/releases/27464308",
        "zipball_url": "https://api.github.com/repos/dnbaker/minicore/zipball/icml2020"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "parent_header": [
          "Minicore: Fast Generic Coresets <a href=\"https://travis-ci.com/dnbaker/minocore\"><img alt=\"Build Status\" src=\"https://travis-ci.com/dnbaker/minocore.svg?token=nzWL3kpck4ymqu9SdesD&amp;branch=main\" /></a>"
        ],
        "type": "Text_excerpt",
        "value": "1. Boost, specifically the Boost Graph Library.\n2. A compiler supporting C++17. We could remove this requirement without much work.\n2. We conditionally use OpenMP. This is enabled with the setting of the OMP variable.\n\nCertain applications have specific requirements, such as libosmium for kzclustexp, which computes coresets over OpenStreetMaps data, but these are included as submodules primarily.\n\n"
      },
      "source": "https://raw.githubusercontent.com/dnbaker/minicore/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 06:31:38",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 33
      },
      "technique": "GitHub_API"
    }
  ]
}