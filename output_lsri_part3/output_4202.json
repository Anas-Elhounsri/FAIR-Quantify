{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "PyGNA: a Python framework for geneset network analysis"
        ],
        "type": "Text_excerpt",
        "value": "V. Fanfani, F. Cassano, and G. Stracquadanio, \u201cPyGNA: a unified framework for geneset network analysis,\u201d BMC Bioinformatics, vol. 21, no. 1, 2020.\nDOI: https://doi.org/10.1186/s12859-020-03801-1\n\n```\n@article{Fanfani2020,\nauthor = {Fanfani, Viola and Cassano, Fabio and Stracquadanio, Giovanni},\ndoi = {10.1186/s12859-020-03801-1},\nissn = {14712105},\njournal = {BMC Bioinformatics},\nnumber = {1},\npmid = {33092528},\ntitle = {{PyGNA: a unified framework for geneset network analysis}},\nvolume = {21},\nyear = {2020}\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/stracquadaniolab/pygna/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Fanfani, Viola and Cassano, Fabio and Stracquadanio, Giovanni",
        "doi": "10.1186/s12859-020-03801-1",
        "format": "bibtex",
        "title": "{PyGNA: a unified framework for geneset network analysis}",
        "type": "Text_excerpt",
        "value": "@article{Fanfani2020,\n    year = {2020},\n    volume = {21},\n    title = {{PyGNA: a unified framework for geneset network analysis}},\n    pmid = {33092528},\n    number = {1},\n    journal = {BMC Bioinformatics},\n    issn = {14712105},\n    doi = {10.1186/s12859-020-03801-1},\n    author = {Fanfani, Viola and Cassano, Fabio and Stracquadanio, Giovanni},\n}"
      },
      "source": "https://raw.githubusercontent.com/stracquadaniolab/pygna/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/stracquadaniolab/pygna"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-04-17T08:55:40Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-02-05T16:01:10Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A Python package for gene network analysis"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9602095574697442,
      "result": {
        "original_header": "PyGNA: a Python framework for geneset network analysis",
        "type": "Text_excerpt",
        "value": "PyGNA is a framework for statistical network analysis of high-throughput experiments. It can\nbe used both as a standalone command line application or it can be used as API\nto develop custom analyses. \nFor an overview of PyGNA functionalities check the infographic below or dive into our [Getting started](#getting-started) tour. \n"
      },
      "source": "https://raw.githubusercontent.com/stracquadaniolab/pygna/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8938485914395915,
      "result": {
        "original_header": "Issues",
        "type": "Text_excerpt",
        "value": "Please post an issue to report a bug or request new features.\n \n"
      },
      "source": "https://raw.githubusercontent.com/stracquadaniolab/pygna/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Documentation",
        "parent_header": [
          "PyGNA: a Python framework for geneset network analysis"
        ],
        "type": "Text_excerpt",
        "value": "The official documentation for `pygna` can be found on [readthedocs](https://pygna.readthedocs.io/).\n"
      },
      "source": "https://raw.githubusercontent.com/stracquadaniolab/pygna/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://pygna.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/stracquadaniolab/pygna/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/stracquadaniolab/pygna/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/stracquadaniolab/pygna/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "stracquadaniolab/pygna"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PyGNA: a Python framework for geneset network analysis"
      },
      "source": "https://raw.githubusercontent.com/stracquadaniolab/pygna/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/stracquadaniolab/pygna/master/docker/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/stracquadaniolab/pygna/master/docker/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "PyGNA: a Python framework for geneset network analysis"
        ],
        "type": "Text_excerpt",
        "value": "The easiest and fastest way to install `pygna` using `conda`:\n\n    $ conda install -c stracquadaniolab -c bioconda -c conda-forge pygna\n\nAlternatively you can install it through `pip`:\n\n    $ pip install pygna\n\nWe also provide a docker image installation with the latest version of PyGNA.\nIt can be easily executed from the command line from DockerHub:\n\n    $ docker run stracquadaniolab/pygna/pygna:latest\n\nor GitHub Packages:\n\n    $ docker run docker.pkg.github.com/stracquadaniolab/pygna/pygna:latest\n\n\nwhich will show the PyGNA command line help.\n"
      },
      "source": "https://raw.githubusercontent.com/stracquadaniolab/pygna/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/stracquadaniolab/pygna/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bioinformatics, biostatistics, enrichment-analysis, network-biology, networkx, pygna"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "\n\nThe MIT License (MIT)\n=====================\n\nCopyright (c) `<year>` `<Viola Fanfani & Giovanni Stracquadanio>`\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
      },
      "source": "https://raw.githubusercontent.com/stracquadaniolab/pygna/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "http://raw.githubusercontent.com/stracquadaniolab/pygna/master/docs/pygna_infographic-01.png"
      },
      "source": "https://raw.githubusercontent.com/stracquadaniolab/pygna/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "pygna"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "stracquadaniolab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 210795,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 982,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/stracquadaniolab/pygna/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Example 1: Running pygna GNT analysis",
        "parent_header": [
          "PyGNA: a Python framework for geneset network analysis",
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "Running `pygna` on this input as follows:\n\n    $ cd ./your-path/min-working-example/\n\n    $ pygna build-rwr-diffusion barabasi.interactome.tsv --output-file interactome_RWR.hdf5\n\n    $ pygna test-topology-rwr barabasi.interactome.tsv disgenet_cancer_groups_subset.gmt interactome_RWR.hdf5 table_topology_rwr.csv --number-of-permutations 1000 --cores 4\n\n    $ pygna paint-datasets-stats table_topology_rwr.csv barplot_rwr.pdf\n\nYou can look at the plot of the results in the `barplot_rwr.pdf` file, and the corresponding table in  `table_topology_rwr.csv`.\n"
      },
      "source": "https://raw.githubusercontent.com/stracquadaniolab/pygna/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example 2: Running pygna GNA analysis",
        "parent_header": [
          "PyGNA: a Python framework for geneset network analysis",
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "    $ cd ./your-path/min-working-example/\n\nskip this step if the matrix is already computed\n\n    $ pygna build-RWR-diffusion barabasi.interactome.tsv --output-file interactome_RWR.hdf5\n\nThe association analysis is run N x M times (N number of genesets, M number of pathways), we use only 50 permutations in this example to avoid long computations; however, the recommended value is 1000.\n\n    $ pygna test-association-rwr barabasi.interactome.tsv disgenet_cancer_groups_subset.gmt interactome_RWR.hdf5 table_association_rwr.csv -B disgenet_cancer_groups_subset.gmt --keep --number-of-permutations 100 --cores 4\n\nIf you don't include the --results-figure flag at the comparison step, plot the matrix as follows\n\n    $ pygna paint-comparison-matrix table_association_rwr.csv heatmap_association_rwr.png --rwr --annotate\n\nThe -k flag, keeps the -B geneset and permutes only on the set A.\n\nIf setname B is not passed, the analysis is run between each couple of setnames in the geneset.\n\n    $ pygna test-association-rwr barabasi.interactome.tsv disgenet_cancer_groups_subset.gmt interactome_RWR.hdf5 table_within_comparison_rwr.csv --number-of-permutations 100 --cores 4\n\n    $ pygna paint-comparison-matrix table_within_comparison_rwr.csv heatmap_within_comparison_rwr.png --rwr --single-geneset\n\nYou can look at the plot of the results in the `heatmap_within_comparison_rwr.png` file, and the corresponding table in  `table_within_comparison_rwr.csv`.\n\n"
      },
      "source": "https://raw.githubusercontent.com/stracquadaniolab/pygna/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 15:34:29",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 32
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Getting started",
        "parent_header": [
          "PyGNA: a Python framework for geneset network analysis"
        ],
        "type": "Text_excerpt",
        "value": "A typical `pygna` analysis consists of 3 steps:\n\n1. Generate the RWR and SP matrices for the network you are using ( once they are generated, you won't need to repeat the same step again)\n2. Make sure that the input genesets are in the right format. If a network uses entrez ID, and your file is in HUGO symbols, use the pygna utility for the name conversion.\n3. Run the analysis you are interested into.\n4. Once you have the output tables, you can choose to visualize one or more plots.\n\nOtherwise you can check our [snakemake workflow](https://github.com/stracquadaniolab/workflow-pygna) for the full geneset analysis;\nour workflow contains sample data that you can use to familiarize with our software.\n\n\nThe examples below show some basic analysis that can be carried out with pygna.\n"
      },
      "source": "https://raw.githubusercontent.com/stracquadaniolab/pygna/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example 1: Running pygna GNT analysis",
        "parent_header": [
          "PyGNA: a Python framework for geneset network analysis",
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "Running `pygna` on this input as follows:\n\n    $ cd ./your-path/min-working-example/\n\n    $ pygna build-rwr-diffusion barabasi.interactome.tsv --output-file interactome_RWR.hdf5\n\n    $ pygna test-topology-rwr barabasi.interactome.tsv disgenet_cancer_groups_subset.gmt interactome_RWR.hdf5 table_topology_rwr.csv --number-of-permutations 1000 --cores 4\n\n    $ pygna paint-datasets-stats table_topology_rwr.csv barplot_rwr.pdf\n\nYou can look at the plot of the results in the `barplot_rwr.pdf` file, and the corresponding table in  `table_topology_rwr.csv`.\n"
      },
      "source": "https://raw.githubusercontent.com/stracquadaniolab/pygna/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example 2: Running pygna GNA analysis",
        "parent_header": [
          "PyGNA: a Python framework for geneset network analysis",
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "    $ cd ./your-path/min-working-example/\n\nskip this step if the matrix is already computed\n\n    $ pygna build-RWR-diffusion barabasi.interactome.tsv --output-file interactome_RWR.hdf5\n\nThe association analysis is run N x M times (N number of genesets, M number of pathways), we use only 50 permutations in this example to avoid long computations; however, the recommended value is 1000.\n\n    $ pygna test-association-rwr barabasi.interactome.tsv disgenet_cancer_groups_subset.gmt interactome_RWR.hdf5 table_association_rwr.csv -B disgenet_cancer_groups_subset.gmt --keep --number-of-permutations 100 --cores 4\n\nIf you don't include the --results-figure flag at the comparison step, plot the matrix as follows\n\n    $ pygna paint-comparison-matrix table_association_rwr.csv heatmap_association_rwr.png --rwr --annotate\n\nThe -k flag, keeps the -B geneset and permutes only on the set A.\n\nIf setname B is not passed, the analysis is run between each couple of setnames in the geneset.\n\n    $ pygna test-association-rwr barabasi.interactome.tsv disgenet_cancer_groups_subset.gmt interactome_RWR.hdf5 table_within_comparison_rwr.csv --number-of-permutations 100 --cores 4\n\n    $ pygna paint-comparison-matrix table_within_comparison_rwr.csv heatmap_within_comparison_rwr.png --rwr --single-geneset\n\nYou can look at the plot of the results in the `heatmap_within_comparison_rwr.png` file, and the corresponding table in  `table_within_comparison_rwr.csv`.\n\n"
      },
      "source": "https://raw.githubusercontent.com/stracquadaniolab/pygna/master/README.md",
      "technique": "header_analysis"
    }
  ]
}