{
  "application_domain": [
    {
      "confidence": 24.5,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "format": "cff",
        "type": "File_dump",
        "value": "cff-version: 1.2.0\ntitle: 'GNINA 1.0: Molecular Docking with Deep Learning'\nmessage: 'If you find gnina useful, please cite our paper(s)'\ntype: software\nauthors:\n  - given-names: Andrew\n    family-names: McNutt\n    affiliation: University of Pittsburgh\n    email: anm329@pitt.edu\n  - given-names: Paul\n    family-names: Francoeur\n    affiliation: University of Pittsburgh\n    orcid: 'https://orcid.org/0000-0002-1440-567X'\n    email: paf46@pitt.edu\n  - given-names: Rishal\n    family-names: Aggarwal\n    affiliation: International Institute of Information Technology\n  - given-names: Tomohide\n    family-names: Masuda\n    affiliation: University of Pittsburgh\n  - given-names: Rocco\n    family-names: Meli\n    affiliation: University of Oxford\n  - given-names: Matthew\n    family-names: Ragoza\n    affiliation: University of Pittsburgh\n  - given-names: Jocelyn\n    family-names: Sunseri\n    affiliation: University of Pittsburgh\n  - given-names: David\n    family-names: Koes\n    email: dkoes@pitt.edu\n    affiliation: University of Pittsburgh\n    orcid: 'https://orcid.org/0000-0002-6892-6614'\nidentifiers:\n  - type: doi\n    value: 10.26434/chemrxiv.13578140.v1\nrepository-code: 'https://github.com/gnina/gnina'\nabstract: >-\n  Molecular docking computationally predicts the\n  conformation of a small molecule when binding to a\n  receptor. Scoring functions are a vital piece of any\n  molecular docking pipeline as they determine the fitness\n  of sampled poses. Here we describe and evaluate the 1.0\n  release of the Gnina docking software, which utilizes an\n  ensemble of convolutional neural networks (CNNs) as a\n  scoring function. We also explore an array of parameter\n  values for Gnina 1.0 to optimize docking performance and\n  computational cost. Docking performance, as evaluated by\n  the percentage of targets where the top pose is better\n  than 2A root mean square deviation (Top1), is compared to\n  AutoDock Vina scoring when utilizing explicitly defined\n  binding pockets or whole protein docking. Gnina, utilizing\n  a CNN scoring function to rescore the output poses,\n  outperforms AutoDock Vina scoring on redocking and\n  cross-docking tasks when the binding pocket is defined\n  (Top1 increases from 58% to 73% and from 27% to 37%,\n  respectively) and when the whole protein defines the\n  binding pocket (Top1 increases from 31% to 38% and from\n  12% to 16%, respectively). The derived ensemble of CNNs\n  generalizes to unseen proteins and ligands and produces\n  scores that correlate well with the root mean square\n  deviation to the known binding pose. We provide the 1.0\n  version of Gnina under and open source license for use as\n  a molecular docking tool at https://github.com/gnina/gnina\nkeywords:\n  - Molecular docking\n  - Deep learning\n  - Structure-based drug design\nlicense: GPL-1.0\npreferred-citation:\n    type: article\n    title: \"GNINA 1.0: molecular docking with deep learning\"\n    authors:\n      - given-names: Andrew\n        family-names: McNutt\n        affiliation: University of Pittsburgh\n        email: anm329@pitt.edu\n      - given-names: Paul\n        family-names: Francoeur\n        affiliation: University of Pittsburgh\n        orcid: 'https://orcid.org/0000-0002-1440-567X'\n        email: paf46@pitt.edu\n      - given-names: Rishal\n        family-names: Aggarwal\n        affiliation: International Institute of Information Technology\n      - given-names: Tomohide\n        family-names: Masuda\n        affiliation: University of Pittsburgh\n      - given-names: Rocco\n        family-names: Meli\n        affiliation: University of Oxford\n      - given-names: Matthew\n        family-names: Ragoza\n        affiliation: University of Pittsburgh\n      - given-names: Jocelyn\n        family-names: Sunseri\n        affiliation: University of Pittsburgh\n      - given-names: David\n        family-names: Koes\n        email: dkoes@pitt.edu\n        affiliation: University of Pittsburgh\n        orcid: 'https://orcid.org/0000-0002-6892-6614'\n    journal: \"Journal of cheminformatics\"\n    volume: 13\n    number: 1\n    start: 1\n    end: 20\n    year: 2021\n    publisher: \"BioMed Central\"\n"
      },
      "source": "https://raw.githubusercontent.com/gnina/gnina/master/CITATION.cff",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "type": "Text_excerpt",
        "value": "If you find gnina useful, please cite our paper(s):  \n\n**GNINA 1.0: Molecular docking with deep learning** (Primary application citation)  \nA McNutt, P Francoeur, R Aggarwal, T Masuda, R Meli, M Ragoza, J Sunseri, DR Koes. *J. Cheminformatics*, 2021  \n[link](https://jcheminf.biomedcentral.com/articles/10.1186/s13321-021-00522-2) [PubMed](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC8191141/) [ChemRxiv](https://chemrxiv.org/articles/preprint/GNINA_1_0_Molecular_Docking_with_Deep_Learning/13578140)\n\n**Protein\u2013Ligand Scoring with Convolutional Neural Networks**  (Primary methods citation)  \nM Ragoza, J Hochuli, E Idrobo, J Sunseri, DR Koes. *J. Chem. Inf. Model*, 2017  \n[link](http://pubs.acs.org/doi/full/10.1021/acs.jcim.6b00740) [PubMed](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5479431/) [arXiv](https://arxiv.org/abs/1612.02751)  \n\n**Ligand pose optimization with atomic grid-based convolutional neural networks**  \nM Ragoza, L Turner, DR Koes. *Machine Learning for Molecules and Materials NIPS 2017 Workshop*, 2017  \n[arXiv](https://arxiv.org/abs/1710.07400)  \n\n**Visualizing convolutional neural network protein-ligand scoring**  \nJ Hochuli, A Helbling, T Skaist, M Ragoza, DR Koes.  *Journal of Molecular Graphics and Modelling*, 2018  \n[link](https://www.sciencedirect.com/science/article/pii/S1093326318301670) [PubMed](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6343664/) [arXiv](https://arxiv.org/abs/1803.02398)\n\n**Convolutional neural network scoring and minimization in the D3R 2017 community challenge**  \nJ Sunseri, JE King, PG Francoeur, DR Koes.  *Journal of computer-aided molecular design*, 2018  \n[link](https://link.springer.com/article/10.1007/s10822-018-0133-y) [PubMed](https://www.ncbi.nlm.nih.gov/pubmed/29992528)\n\n**Three-Dimensional Convolutional Neural Networks and a Cross-Docked Data Set for Structure-Based Drug Design**  \nPG Francoeur, T Masuda, J Sunseri, A Jia, RB Iovanisci, I Snyder, DR Koes. *J. Chem. Inf. Model*, 2020  \n[link](https://pubs.acs.org/doi/abs/10.1021/acs.jcim.0c00411) [PubMed](https://pubmed.ncbi.nlm.nih.gov/32865404/) [Chemrxiv](https://chemrxiv.org/articles/preprint/3D_Convolutional_Neural_Networks_and_a_CrossDocked_Dataset_for_Structure-Based_Drug_Design/11833323/1)\n\n**Virtual Screening with Gnina 1.0**\nJ Sunseri, DR Koes D. *Molecules*, 2021\n[link](https://www.mdpi.com/1420-3049/26/23/7369) [Preprints](https://www.preprints.org/manuscript/202111.0329/v1)\n"
      },
      "source": "https://raw.githubusercontent.com/gnina/gnina/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/gnina/gnina"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "## Contributing\n\nPlease keep the [issue tracker](http://github.com/hakimel/reveal.js/issues) limited to **bug reports**, **feature requests** and **pull requests**.\n\n\n### Personal Support\nIf you have personal support or setup questions the best place to ask those are [StackOverflow](http://stackoverflow.com/questions/tagged/reveal.js).\n\n\n### Bug Reports\nWhen reporting a bug make sure to include information about which browser and operating system you are on as well as the necessary steps to reproduce the issue. If possible please include a link to a sample presentation where the bug can be tested.\n\n\n### Pull Requests\n- Should follow the coding style of the file you work in, most importantly:\n  - Tabs to indent\n  - Single-quoted strings\n- Should be made towards the **dev branch**\n- Should be submitted from a feature/topic branch (not your master)\n\n\n### Plugins\nPlease do not submit plugins as pull requests. They should be maintained in their own separate repository. More information here: https://github.com/hakimel/reveal.js/wiki/Plugin-Guidelines\n"
      },
      "source": "https://raw.githubusercontent.com/gnina/gnina/master/docs/rsc_workshop2021/reveal.js/CONTRIBUTING.md",
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2015-11-04T15:29:17Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-05T23:14:21Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A deep learning framework for molecular docking"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9875215424239946,
      "result": {
        "original_header": "Docker",
        "type": "Text_excerpt",
        "value": "A pre-built docker image is available [here](https://hub.docker.com/u/gnina) and Dockerfiles are [here](https://github.com/gnina/gnina/tree/master/docker).\n \n"
      },
      "source": "https://raw.githubusercontent.com/gnina/gnina/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9109078853545305,
      "result": {
        "original_header": "CNN Scoring",
        "type": "Text_excerpt",
        "value": "`--cnn_scoring` determines at what points of the docking procedure that the CNN scoring function is used.\n * `none` - No CNNs used for docking. Uses the specified empirical scoring function throughout.\n * `rescore` (default) - CNN used for reranking of final poses. Least computationally expensive CNN option.\n * `refinement` - CNN used to refine poses after Monte Carlo chains and for final ranking of output poses. 10x slower than `rescore` when using a GPU.\n * `all` - CNN used as the scoring function throughout the whole procedure. Extremely computationally intensive and not recommended. \nThe default CNN scoring function is an ensemble of 3 models selected to balance pose prediction performance and runtime: dense_1_3, dense_1_3_PT_KD_3, crossdock_default2018_KD_4.  The GNINA 1.0 default ensemble is still available as `default1.0`.   More information on these various models can be found in the papers listed above.\n \n"
      },
      "source": "https://raw.githubusercontent.com/gnina/gnina/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8938915293580582,
      "result": {
        "original_header": "Training",
        "type": "Text_excerpt",
        "value": "Scripts for training pytorch GNINA models and pretrained models can found at [https://github.com/RMeli/gnina-torch](https://github.com/RMeli/gnina-torch).\nExample code for converting a pytorch model into a gnina usable model file is shown below.  The metadata should provide information about the input grid resolution, dimension and atom typing.  If not provided, defaults will be used.\n```python\n    d = {\n        'resolution': 0.5,\n        'dimension' : 23.5,\n        'recmap' : '''AliphaticCarbonXSHydrophobe \n    AliphaticCarbonXSNonHydrophobe \n    AromaticCarbonXSHydrophobe \n    AromaticCarbonXSNonHydrophobe\n    Bromine Iodine Chlorine Fluorine\n    Nitrogen NitrogenXSAcceptor \n    NitrogenXSDonor NitrogenXSDonorAcceptor\n    Oxygen OxygenXSAcceptor \n    OxygenXSDonorAcceptor OxygenXSDonor\n    Sulfur SulfurAcceptor\n    Phosphorus \n    Calcium\n    Zinc\n    GenericMetal Boron Manganese Magnesium Iron''',\n        \n    'ligmap': '''AliphaticCarbonXSHydrophobe \n    AliphaticCarbonXSNonHydrophobe \n    AromaticCarbonXSHydrophobe \n    AromaticCarbonXSNonHydrophobe\n    Bromine Iodine\n    Chlorine\n    Fluorine\n    Nitrogen NitrogenXSAcceptor \n    NitrogenXSDonor NitrogenXSDonorAcceptor\n    Oxygen OxygenXSAcceptor \n    OxygenXSDonorAcceptor OxygenXSDonor\n    Sulfur SulfurAcceptor\n    Phosphorus\n    GenericMetal Boron Manganese Magnesium Zinc Calcium Iron'''\n    }\n    \n    extra = {'metadata':json.dumps(d)}\n    z = torch.zeros((1,28,48,48,48))\n\n    script = torch.jit.trace(model, z)\n    script.save('gnina_model.pt',_extra_files=extra)    \n```\n \n\nThe DUD-E docked poses used in the original paper can be found [here](http://bits.csb.pitt.edu/files/docked_dude.tar), but we [do not recommend](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0220113) training virtual screening models on DUD-E. The CrossDocked2020 set is [here](https://github.com/gnina/models/tree/master/data/CrossDocked2020).\n \n"
      },
      "source": "https://raw.githubusercontent.com/gnina/gnina/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9989772321098498,
      "result": {
        "type": "Text_excerpt",
        "value": "gnina (pronounced NEE-na) is a molecular docking program with integrated support for scoring and optimizing ligands using convolutional neural networks. It is a fork of , which is a fork of . \n"
      },
      "source": "https://raw.githubusercontent.com/gnina/gnina/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/gnina/gnina/tree/master/docs"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/gnina/gnina/wiki"
      },
      "source": "https://raw.githubusercontent.com/gnina/gnina/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/gnina/gnina/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gnina/gnina/master/scripts/makemodel.ipynb"
      },
      "source": "https://raw.githubusercontent.com/gnina/gnina/master/scripts/makemodel.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gnina/gnina/master/docs/rsc_workshop2021/docking_with_gnina.ipynb"
      },
      "source": "https://raw.githubusercontent.com/gnina/gnina/master/docs/rsc_workshop2021/docking_with_gnina.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 144
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/gnina/gnina/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "gnina/gnina"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Help"
      },
      "source": "https://raw.githubusercontent.com/gnina/gnina/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gnina/gnina/master/docker/compat/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/gnina/gnina/master/docker/compat/Dockerfile",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gnina/gnina/master/docker/ubuntu-22.04/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/gnina/gnina/master/docker/ubuntu-22.04/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "---\ntitle: \"Installation: Debian\"\n---\n\n# Debian Installation\n\nCaffe packages are available for several Debian versions, as shown in the\nfollowing chart\n\n```\nYour Distro     |  CPU_ONLY  |  CUDA  |     Alias\n----------------+------------+--------+-------------------\nDebian/stable   |     \u2718      |   \u2718    | Debian Jessie\nDebian/testing  |     \u2714      |   \u2610    | Debian Stretch/Sid\nDebian/unstable |     \u2714      |   \u2714    | Debian Sid\n```\n\n* `\u2718 ` You should take a look at [Ubuntu installation instruction](install_apt.html).\n\n* `\u2714 ` You can install caffe with a single command line following this guide.\n\n* `\u2610 ` The same with `\u2714 `. However it will not work any more when Debian/Stretch becomes the stable branch.\n\nLast update: 2017-01-05\n\n## Binary installation with APT\n\nApart from the installation methods based on source, Debian/unstable\nand Debian/testing users can install pre-compiled Caffe packages via the official archive.\n\nMake sure that there is something like the follows in your `/etc/apt/sources.list`:\n```\ndeb http://MIRROR/debian CODENAME main contrib non-free\n```\nwhere `MIRROR` is your favorate Debian mirror, and `CODENAME \u2208 {testing,stretch,sid}`.\n\nThen we update APT cache and directly install Caffe. Note, the cpu version and\nthe cuda version cannot be installed at the same time.\n```\n# apt update\n# apt install [ caffe-cpu | caffe-cuda ]\n# caffe                                              # command line interface working\n# python3 -c 'import caffe; print(caffe.__path__)'   # python3 interface working\n```\nIt should work out of box.\n\n#### Customizing caffe packages\n\nSome users may need to customize the Caffe package. The way to customize\nthe package is beyond this guide. Here is only a brief guide of producing\nthe customized `.deb` packages. \n\nMake sure that there is something like this in your `/etc/apt/sources.list`:\n```\ndeb http://ftp2.cn.debian.org/debian sid main contrib non-free\ndeb-src http://ftp2.cn.debian.org/debian sid main contrib non-free\n```\n\nThen we build caffe deb files with the following commands:\n```\n$ sudo apt update\n$ sudo apt install build-essential debhelper devscripts    # standard package building tools\n$ sudo apt build-dep [ caffe-cpu | caffe-cuda ]            # the most elegant way to pull caffe build dependencies\n$ apt source [ caffe-cpu | caffe-cuda ]               # download the source tarball and extract\n$ cd caffe-XXXX\n[ ... optional, customize caffe code/build ... ]\n$ dch -llocal \"Modified XXX in order to XXX\"          # write your one-line changelog\n$ debuild -B -j4                                      # build caffe with 4 parallel jobs (similar to make -j4)\n[ ... building ...]\n$ debc                                                # optional, if you want to check the package contents\n$ sudo debi                                           # optional, install the generated packages\n```\nThe resulting deb packages can be found under the parent directory of the source tree.\n\nNote, the `dch ...` command line above is for bumping the package version number\nand adding an entry to the package changelog. If you would like to write\nmore than one changelog entry, use subsequent `dch` command (see `man 1 dch`)\ninstead of manually modifing `debian/changelog` unless you know how to keep its format correct.\nThe changelog will be installed at e.g. `/usr/share/doc/caffe-cpu/changelog.Debian.gz`.\n\n## Source installation\n\nSource installation under Debian/unstable is similar to that of Ubuntu, but\nhere is a more elegant way to pull caffe build dependencies:\n```\n$ sudo apt build-dep [ caffe-cpu | caffe-cuda ]\n```\nNote, this requires a `deb-src` entry in your `/etc/apt/sources.list`.\n\n#### Compiler Combinations\n\nSome users may find their favorate compiler doesn't work well with CUDA.\n```\nCXX compiler |  CUDA 7.5  |  CUDA 8.0  |\n-------------+------------+------------+-\nGCC-7        |     ?      |     ?      |\nGCC-6        |     \u2718      |     \u2718      |\nGCC-5        |     \u2714 [1]  |     \u2714      |\nCLANG-4.0    |     ?      |     ?      |\nCLANG-3.9    |     \u2718      |     \u2718      |\nCLANG-3.8    |     ?      |     \u2714      |\n```\n\n`[1]` CUDA 7.5 's `host_config.h` must be patched before working with GCC-5.\n\nBTW, please forget the GCC-4.X series, since its `libstdc++` ABI is not compatible with GCC-5's.\nYou may encounter failure linking GCC-4.X object files against GCC-5 libraries.\n(See https://wiki.debian.org/GCC5 )\n\n## Notes\n\n* Consider re-compiling OpenBLAS locally with optimization flags for sake of\nperformance. This is highly recommended for any kind of production use, including\nacademic research.\n\n* If you are installing `caffe-cuda`, APT will automatically pull some of the\nCUDA packages and the nvidia driver packages. Please be careful if you have\nmanually installed or hacked nvidia driver or CUDA toolkit or any other\nrelated stuff, because in this case APT may fail.\n\n* Additionally, a manpage (`man caffe`) and a bash complementation script\n(`caffe <TAB><TAB>`, `caffe train <TAB><TAB>`) are provided.\nBoth of the two files are still not merged into caffe master.\n\n* The python interface is Python 3 version: `python3-caffe-{cpu,cuda}`.\nNo plan to support python2.\n\n* If you encountered any problem related to the packaging system (e.g. failed to install `caffe-*`),\nplease report bug to Debian via Debian's bug tracking system. See https://www.debian.org/Bugs/ .\nPatches and suggestions are also welcome.\n\n## FAQ\n\n* where is caffe-cudnn?\n\nCUDNN library seems not redistributable currently. If you really want the\ncaffe-cudnn deb packages, the workaround is to install cudnn by yourself,\nand hack the packaging scripts, then build your customized package.\n\n* I installed the CPU version. How can I switch to the CUDA version?\n\n`sudo apt install caffe-cuda`, apt's dependency resolver is smart enough to deal with this.\n\n* Where are the examples, the models and other documentation stuff?\n\n```\nsudo apt install caffe-doc\ndpkg -L caffe-doc\n```\n\n* Where can I find the Debian package status?\n\nhttps://tracker.debian.org/pkg/caffe  (for the CPU_ONLY version)\n\nhttps://tracker.debian.org/pkg/caffe-contrib  (for the CUDA version)\n"
      },
      "source": "https://raw.githubusercontent.com/gnina/gnina/master/docs/install_apt_debian.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "We recommend that you use the [pre-built binary](https://github.com/gnina/gnina/releases/latest) unless you have significant experience building software on Linux, in which case building from source might result in an executable more optimized for your system.\n"
      },
      "source": "https://raw.githubusercontent.com/gnina/gnina/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Ubuntu 22.04",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "apt-get  install build-essential git cmake wget libboost-all-dev libeigen3-dev libgoogle-glog-dev libprotobuf-dev protobuf-compiler libhdf5-dev libatlas-base-dev python3-dev librdkit-dev python3-numpy python3-pip python3-pytest libjsoncpp-dev"
      },
      "source": "https://raw.githubusercontent.com/gnina/gnina/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1.0,
      "result": {
        "type": "Text_excerpt",
        "value": "apt-get  install build-essential git cmake wget libboost-all-dev libeigen3-dev libgoogle-glog-dev libprotobuf-dev protobuf-compiler libhdf5-dev libatlas-base-dev python3-dev librdkit-dev python3-numpy python3-pip python3-pytest libjsoncpp-dev\n```\n\n[Follow NVIDIA's instructions](http://docs.nvidia.com/cuda/cuda-installation-guide-linux/#axzz4TWipdwX1) to install the latest version of CUDA (>= 12.0 is required). **Make sure `nvcc` is in your PATH.**\n\n*Optionally* install [cuDNN](https://developer.nvidia.com/rdp/cudnn-archive).\n\n#\nInstall OpenBabel3.  Note there are errors in bond order determination in version 3.1.1 and older.\n```\ngit clone https://github.com/openbabel/openbabel.git\ncd openbabel\nmkdir build\ncd build\ncmake -DWITH_MAEPARSER=OFF -DWITH_COORDGEN=OFF -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON ..\nmake\nmake install\nBASH2*\ngit clone https://github.com/gnina/gnina.git\ncd gnina\nmkdir build\ncd build\ncmake ..\nmake\nmake install\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/gnina/gnina/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.999948716409833,
      "result": {
        "original_header": "<a href=\"https://github.com/gnina/gnina/issues/247\">WSL2 Ubuntu 22.04</a>",
        "type": "Text_excerpt",
        "value": "sudo apt-get remove nvidia-cuda-toolkit\nwget https://developer.download.nvidia.com/compute/cuda/12.4.0/local_installers/cuda_12.4.0_550.54.14_linux.run\nchmod 700 cuda_12.4.0_550.54.14_linux.run\nsudo sh cuda_12.4.0_550.54.14_linux.run\nwget https://developer.download.nvidia.com/compute/cudnn/9.0.0/local_installers/cudnn-local-repo-ubuntu2204-9.0.0_1.0-1_amd64.deb\nsudo dpkg -i cudnn-local-repo-ubuntu2204-9.0.0_1.0-1_amd64.deb\nsudo cp /var/cudnn-local-repo-ubuntu2204-9.0.0/cudnn-*-keyring.gpg /usr/share/keyrings/\nsudo apt-get update\nsudo apt-get -y install cudnn-cuda-12\napt-get install build-essential git cmake wget libboost-all-dev libeigen3-dev libgoogle-glog-dev libprotobuf-dev protobuf-compiler libhdf5-dev libatlas-base-dev python3-dev librdkit-dev python3-numpy python3-pip python3-pytest libjsoncpp-dev \ngit clone https://github.com/openbabel/openbabel.git\ncd openbabel\nmkdir build\ncd build\ncmake -DWITH_MAEPARSER=OFF -DWITH_COORDGEN=OFF -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON ..\nmake -j8\nsudo make install \ngit clone https://github.com/gnina/gnina.git\ncd gnina\nmkdir build\ncd build\ncmake ..\nmake -j8\nsudo make install\n``` \n#\nIf you are building for systems with different GPUs (e.g. in a cluster environment), configure with `-DCMAKE_CUDA_ARCHITECTURES=all`.   \nNote that the cmake build will automatically fetch and install [libmolgrid](https://github.com/gnina/libmolgrid) and [torch](https://github.com/pytorch/pytorch) if they are not already installed. \n\nThe scripts provided in `gnina/scripts` have additional python dependencies that must be installed. \n \n"
      },
      "source": "https://raw.githubusercontent.com/gnina/gnina/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8222330340482992,
      "result": {
        "original_header": "Training",
        "type": "Text_excerpt",
        "value": "Scripts for training pytorch GNINA models and pretrained models can found at [https://github.com/RMeli/gnina-torch](https://github.com/RMeli/gnina-torch).\nExample code for converting a pytorch model into a gnina usable model file is shown below.  The metadata should provide information about the input grid resolution, dimension and atom typing.  If not provided, defaults will be used.\n```python\n    d = {\n        'resolution': 0.5,\n        'dimension' : 23.5,\n        'recmap' : '''AliphaticCarbonXSHydrophobe \n    AliphaticCarbonXSNonHydrophobe \n    AromaticCarbonXSHydrophobe \n    AromaticCarbonXSNonHydrophobe\n    Bromine Iodine Chlorine Fluorine\n    Nitrogen NitrogenXSAcceptor \n    NitrogenXSDonor NitrogenXSDonorAcceptor\n    Oxygen OxygenXSAcceptor \n    OxygenXSDonorAcceptor OxygenXSDonor\n    Sulfur SulfurAcceptor\n    Phosphorus \n    Calcium\n    Zinc\n    GenericMetal Boron Manganese Magnesium Iron''',\n        \n    'ligmap': '''AliphaticCarbonXSHydrophobe \n    AliphaticCarbonXSNonHydrophobe \n    AromaticCarbonXSHydrophobe \n    AromaticCarbonXSNonHydrophobe\n    Bromine Iodine\n    Chlorine\n    Fluorine\n    Nitrogen NitrogenXSAcceptor \n    NitrogenXSDonor NitrogenXSDonorAcceptor\n    Oxygen OxygenXSAcceptor \n    OxygenXSDonorAcceptor OxygenXSDonor\n    Sulfur SulfurAcceptor\n    Phosphorus\n    GenericMetal Boron Manganese Magnesium Zinc Calcium Iron'''\n    }\n    \n    extra = {'metadata':json.dumps(d)}\n    z = torch.zeros((1,28,48,48,48))\n\n    script = torch.jit.trace(model, z)\n    script.save('gnina_model.pt',_extra_files=extra)    \n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/gnina/gnina/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/gnina/gnina/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "cheminformatics, computational-chemistry, convolutional-neural-networks, drug-discovery, molecular-modeling"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Apache License 2.0",
        "spdx_id": "Apache-2.0",
        "type": "License",
        "url": "https://api.github.com/licenses/apache-2.0",
        "value": "https://api.github.com/licenses/apache-2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Copyright (C) 2018 Hakim El Hattab, http://hakim.se, and reveal.js contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."
      },
      "source": "https://raw.githubusercontent.com/gnina/gnina/master/docs/rsc_workshop2021/reveal.js/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "type": "Text_excerpt",
        "value": "gnina is dual licensed under GPL and Apache.  The GPL license is necessitated by the use of OpenBabel (which is GPL licensed).  In order to use gnina under the Apache license only, all references to OpenBabel must be removed from the source code.\n"
      },
      "source": "https://raw.githubusercontent.com/gnina/gnina/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "gnina"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "gnina"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 3706336,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Cuda",
        "size": 92786,
        "type": "Programming_language",
        "value": "Cuda"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 65085,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 59550,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 41222,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 17726,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 11627,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gnina/gnina/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_papers": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/1710.07400"
      },
      "source": "https://raw.githubusercontent.com/gnina/gnina/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/1612.02751"
      },
      "source": "https://raw.githubusercontent.com/gnina/gnina/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/1803.02398"
      },
      "source": "https://raw.githubusercontent.com/gnina/gnina/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dkoes",
          "type": "User"
        },
        "date_created": "2024-10-04T19:51:30Z",
        "date_published": "2024-10-04T19:54:32Z",
        "description": "This release updates the underlying deep learning framework to Torch, resulting in more computationally efficient docking and paving the way for seamless integration of other deep learning methods into the docking pipeline. We retrained our CNN scoring functions on the updated CrossDock2020 v1.3 dataset and introduce knowledge-distilled CNN scoring functions to facilitate high-throughput virtual screening. ",
        "html_url": "https://github.com/gnina/gnina/releases/tag/v1.3",
        "name": "v1.3",
        "release_id": 178474386,
        "tag": "v1.3",
        "tarball_url": "https://api.github.com/repos/gnina/gnina/tarball/v1.3",
        "type": "Release",
        "url": "https://api.github.com/repos/gnina/gnina/releases/178474386",
        "value": "https://api.github.com/repos/gnina/gnina/releases/178474386",
        "zipball_url": "https://api.github.com/repos/gnina/gnina/zipball/v1.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dkoes",
          "type": "User"
        },
        "date_created": "2023-12-18T19:46:02Z",
        "date_published": "2023-12-18T19:52:14Z",
        "description": "Implementation of easy covalent docking.  Can specify SMARTs pattern for ligand atom and chain:resid:atomname for the receptor atom and docking will only explore conformations where these atoms form a covalent bond.  OpenBabel bonding heuristics are used to determine the initial atom placement, but can be overridden by explicitly specifying ligand coordinates.  The geometry of the covalent complex can be optional optimized with UFF.\r\n\r\nVarious bug fixes and updates to the build system.",
        "html_url": "https://github.com/gnina/gnina/releases/tag/v1.1",
        "name": "v1.1",
        "release_id": 134376100,
        "tag": "v1.1",
        "tarball_url": "https://api.github.com/repos/gnina/gnina/tarball/v1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/gnina/gnina/releases/134376100",
        "value": "https://api.github.com/repos/gnina/gnina/releases/134376100",
        "zipball_url": "https://api.github.com/repos/gnina/gnina/zipball/v1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dkoes",
          "type": "User"
        },
        "date_created": "2023-02-09T14:59:18Z",
        "date_published": "2023-02-10T13:59:46Z",
        "description": "Minor bug fixes and general bit rot avoidance maintenance. ",
        "html_url": "https://github.com/gnina/gnina/releases/tag/v1.0.3",
        "name": "v1.0.3",
        "release_id": 92028009,
        "tag": "v1.0.3",
        "tarball_url": "https://api.github.com/repos/gnina/gnina/tarball/v1.0.3",
        "type": "Release",
        "url": "https://api.github.com/repos/gnina/gnina/releases/92028009",
        "value": "https://api.github.com/repos/gnina/gnina/releases/92028009",
        "zipball_url": "https://api.github.com/repos/gnina/gnina/zipball/v1.0.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dkoes",
          "type": "User"
        },
        "date_created": "2022-06-17T21:35:18Z",
        "date_published": "2022-06-21T14:04:18Z",
        "description": "Update build system; support cudnn8",
        "html_url": "https://github.com/gnina/gnina/releases/tag/v1.0.2",
        "name": "v1.0.2",
        "release_id": 69937231,
        "tag": "v1.0.2",
        "tarball_url": "https://api.github.com/repos/gnina/gnina/tarball/v1.0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/gnina/gnina/releases/69937231",
        "value": "https://api.github.com/repos/gnina/gnina/releases/69937231",
        "zipball_url": "https://api.github.com/repos/gnina/gnina/zipball/v1.0.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dkoes",
          "type": "User"
        },
        "date_created": "2021-03-23T16:21:11Z",
        "date_published": "2021-03-23T16:22:38Z",
        "description": "Build compatibility improvements.  Fix bug with --cnn_scoring=all where GPU wasn't being used.",
        "html_url": "https://github.com/gnina/gnina/releases/tag/v1.0.1",
        "name": "v1.0.1",
        "release_id": 40235054,
        "tag": "v1.0.1",
        "tarball_url": "https://api.github.com/repos/gnina/gnina/tarball/v1.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/gnina/gnina/releases/40235054",
        "value": "https://api.github.com/repos/gnina/gnina/releases/40235054",
        "zipball_url": "https://api.github.com/repos/gnina/gnina/zipball/v1.0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dkoes",
          "type": "User"
        },
        "date_created": "2021-01-14T19:40:24Z",
        "date_published": "2021-01-14T19:56:27Z",
        "description": "The GNINA 1.0 Release.  Includes support for CNN scoring throughout the docking pipeline, a default ensemble of CNNs that significantly outperforms Vina at scoring, convenient flexible docking, and support for custom empirical and CNN scoring functions.\r\n\r\nThe provided binary includes almost all dependencies in the most compatible manner possible.  It is intended for evaluation only, not production use, as the focus on compatibility results in a reduction in performance.  To use GPU acceleration, your CUDA driver must be >= 410.48.\r\n\r\nDocker images are available at https://hub.docker.com/u/gnina",
        "html_url": "https://github.com/gnina/gnina/releases/tag/v1.0",
        "name": "v1.0",
        "release_id": 36410568,
        "tag": "v1.0",
        "tarball_url": "https://api.github.com/repos/gnina/gnina/tarball/v1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/gnina/gnina/releases/36410568",
        "value": "https://api.github.com/repos/gnina/gnina/releases/36410568",
        "zipball_url": "https://api.github.com/repos/gnina/gnina/zipball/v1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dkoes",
          "type": "User"
        },
        "date_created": "2020-12-21T16:38:27Z",
        "date_published": "2020-12-30T17:18:14Z",
        "description": "Initial candidate for 1.0 release.",
        "html_url": "https://github.com/gnina/gnina/releases/tag/v1.0-rc.1",
        "name": "v1.0-rc.1",
        "release_id": 35849638,
        "tag": "v1.0-rc.1",
        "tarball_url": "https://api.github.com/repos/gnina/gnina/tarball/v1.0-rc.1",
        "type": "Release",
        "url": "https://api.github.com/repos/gnina/gnina/releases/35849638",
        "value": "https://api.github.com/repos/gnina/gnina/releases/35849638",
        "zipball_url": "https://api.github.com/repos/gnina/gnina/zipball/v1.0-rc.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "identifier"
  ],
  "somef_provenance": {
    "date": "2024-10-06 09:38:28",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 604
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Help",
        "type": "Text_excerpt",
        "value": " \nPlease [subscribe to our slack team](https://join.slack.com/t/gninacnn/shared_invite/enQtNTY3ODk2ODk5OTU5LTkzMjY1ZTE3YjJlZmIxOWI2OTU3Y2RlMTIyYmM2YmFmYTU1NTk5ZTBmMjUwMGRhYzk1ZjY5N2E4Y2I5YWU5YWI).\nAn example colab notebook showing how to use gnina is available <a href=\"https://colab.research.google.com/drive/1QYo5QLUE80N_G28PlpYs6OKGddhhd931?usp=sharing\">here</a>. We also hosted a workshp on using gnina ([video](https://www.youtube.com/watch?v=MG3Srzi5kZ0), [slides](https://bits.csb.pitt.edu/rsc_workshop2021/docking_with_gnina.slides.html#/)).\n"
      },
      "source": "https://raw.githubusercontent.com/gnina/gnina/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "type": "Text_excerpt",
        "value": "To dock ligand `lig.sdf` to a binding site on `rec.pdb` defined by another ligand `orig.sdf`:\n```\ngnina -r rec.pdb -l lig.sdf --autobox_ligand orig.sdf -o docked.sdf.gz\n```\n\nTo perform docking with flexible sidechain residues within 3.5 Angstroms of `orig.sdf` (generally not recommend unless prior knowledge indicates pocket is highly flexible):\n```\ngnina -r rec.pdb -l lig.sdf --autobox_ligand orig.sdf --flexdist_ligand orig.sdf --flexdist 3.5 -o flex_docked.sdf.gz\n```\n\nTo perform whole protein docking:\n```\ngnina -r rec.pdb -l lig.sdf --autobox_ligand rec.pdb -o whole_docked.sdf.gz --exhaustiveness 64\n```\n\nTo utilize the default ensemble CNN in the energy minimization during the refinement step of docking (10 times slower than the default rescore option):\n```\ngnina -r rec.pdb -l lig.sdf --autobox_ligand orig.sdf --cnn_scoring refinement -o cnn_refined.sdf.gz\n```\n\nTo utilize the default ensemble CNN for every step of docking (1000 times slower than the default rescore option):\n```\ngnina -r rec.pdb -l lig.sdf --autobox_ligand orig.sdf --cnn_scoring all -o cnn_all.sdf.gz\n```\n\nTo utilize all empirical scoring using the [Vinardo](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0155183) scoring function:\n```\ngnina -r rec.pdb -l lig.sdf --autobox_ligand orig.sdf --scoring vinardo --cnn_scoring none -o vinardo_docked.sdf.gz\n```\n\nTo utilize a different CNN during docking (see help for possible options):\n```\n\ngnina -r rec.pdb -l lig.sdf --autobox_ligand orig.sdf --cnn dense -o dense_docked.sdf.gz\n```\n\nTo minimize and score ligands `ligs.sdf` already positioned in a binding site:\n```\ngnina -r rec.pdb -l ligs.sdf --minimize -o minimized.sdf.gz\n```\n\nTo covalently dock a pyrazole to a specific iron atom on the receptor with the bond formed between a nitrogen of the pyrazole and the iron.\n```\ngnina  -r rec.pdb.gz -l conformer.sdf.gz --autobox_ligand bindingsite.sdf.gz --covalent_rec_atom A:601:FE --covalent_lig_atom_pattern '[$(n1nccc1)]' -o output.sdf.gz \n```\n\nThe same as above, but with the covalently bonding ligand atom manually positioned (instead of using OpenBabel binding heuristics) and the ligand/residue complex UFF optimized.\n```\ngnina  -r rec.pdb.gz -l conformer.sdf.gz --autobox_ligand bindingsite.sdf.gz --covalent_lig_atom_position -11.796,31.887,72.682  --covalent_optimize_lig  --covalent_rec_atom A:601:FE --covalent_lig_atom_pattern '[$(n1nccc1)]' -o output.sdf.gz \n```\n\nAll options:\n```\nInput:\n  -r [ --receptor ] arg              rigid part of the receptor\n  --flex arg                         flexible side chains, if any (PDBQT)\n  -l [ --ligand ] arg                ligand(s)\n  --flexres arg                      flexible side chains specified by comma \n                                     separated list of chain:resid\n  --flexdist_ligand arg              Ligand to use for flexdist\n  --flexdist arg                     set all side chains within specified \n                                     distance to flexdist_ligand to flexible\n  --flex_limit arg                   Hard limit for the number of flexible \n                                     residues\n  --flex_max arg                     Retain at at most the closest flex_max \n                                     flexible residues\n\nSearch space (required):\n  --center_x arg                     X coordinate of the center\n  --center_y arg                     Y coordinate of the center\n  --center_z arg                     Z coordinate of the center\n  --size_x arg                       size in the X dimension (Angstroms)\n  --size_y arg                       size in the Y dimension (Angstroms)\n  --size_z arg                       size in the Z dimension (Angstroms)\n  --autobox_ligand arg               Ligand to use for autobox\n  --autobox_add arg                  Amount of buffer space to add to \n                                     auto-generated box (default +4 on all six \n                                     sides)\n  --autobox_extend arg (=1)          Expand the autobox if needed to ensure the\n                                     input conformation of the ligand being \n                                     docked can freely rotate within the box.\n  --no_lig                           no ligand; for sampling/minimizing \n                                     flexible residues\n\nCovalent docking:\n  --covalent_rec_atom arg            Receptor atom ligand is covalently bound \n                                     to.  Can be specified as \n                                     chain:resnum:atom_name or as x,y,z \n                                     Cartesian coordinates.\n  --covalent_lig_atom_pattern arg    SMARTS expression for ligand atom that \n                                     will covalently bind protein.\n  --covalent_lig_atom_position arg   Optional.  Initial placement of covalently\n                                     bonding ligand atom in x,y,z Cartesian \n                                     coordinates.  If not specified, \n                                     OpenBabel's GetNewBondVector function will\n                                     be used to position ligand.\n  --covalent_fix_lig_atom_position   If covalent_lig_atom_position is \n                                     specified, fix the ligand atom to this \n                                     position as opposed to using this position\n                                     to define the initial structure.\n  --covalent_bond_order arg (=1)     Bond order of covalent bond. Default 1.\n  --covalent_optimize_lig            Optimize the covalent complex of ligand \n                                     and residue using UFF. This will change \n                                     bond angles and lengths of the ligand.\n\nScoring and minimization options:\n  --scoring arg                      specify alternative built-in scoring \n                                     function: ad4_scoring default dkoes_fast \n                                     dkoes_scoring dkoes_scoring_old vina \n                                     vinardo\n  --custom_scoring arg               custom scoring function file\n  --custom_atoms arg                 custom atom type parameters file\n  --score_only                       score provided ligand pose\n  --local_only                       local search only using autobox (you \n                                     probably want to use --minimize)\n  --minimize                         energy minimization\n  --randomize_only                   generate random poses, attempting to avoid\n                                     clashes\n  --num_mc_steps arg                 fixed number of monte carlo steps to take \n                                     in each chain\n  --max_mc_steps arg                 cap on number of monte carlo steps to take\n                                     in each chain\n  --num_mc_saved arg                 number of top poses saved in each monte \n                                     carlo chain\n  --temperature arg                  temperature for metropolis accept \n                                     criterion\n  --minimize_iters arg (=0)          number iterations of steepest descent; \n                                     default scales with rotors and usually \n                                     isn't sufficient for convergence\n  --accurate_line                    use accurate line search\n  --simple_ascent                    use simple gradient ascent\n  --minimize_early_term              Stop minimization before convergence \n                                     conditions are fully met.\n  --minimize_single_full             During docking perform a single full \n                                     minimization instead of a truncated \n                                     pre-evaluate followed by a full.\n  --approximation arg                approximation (linear, spline, or exact) \n                                     to use\n  --factor arg                       approximation factor: higher results in a \n                                     finer-grained approximation\n  --force_cap arg                    max allowed force; lower values more \n                                     gently minimize clashing structures\n  --user_grid arg                    Autodock map file for user grid data based\n                                     calculations\n  --user_grid_lambda arg (=-1)       Scales user_grid and functional scoring\n  --print_terms                      Print all available terms with default \n                                     parameterizations\n  --print_atom_types                 Print all available atom types\n\nConvolutional neural net (CNN) scoring:\n  --cnn_scoring arg (=1)             Amount of CNN scoring: none, rescore \n                                     (default), refinement, metrorescore \n                                     (metropolis+rescore), metrorefine \n                                     (metropolis+refine), all\n  --cnn arg                          built-in model to use, specify \n                                     PREFIX_ensemble to evaluate an ensemble of\n                                     models starting with PREFIX: \n                                     all_default_to_default_1_3_1 \n                                     all_default_to_default_1_3_2 \n                                     all_default_to_default_1_3_3 \n                                     crossdock_default2018 \n                                     crossdock_default2018_1 \n                                     crossdock_default2018_1_3 \n                                     crossdock_default2018_1_3_1 \n                                     crossdock_default2018_1_3_2 \n                                     crossdock_default2018_1_3_3 \n                                     crossdock_default2018_1_3_4 \n                                     crossdock_default2018_2 \n                                     crossdock_default2018_3 \n                                     crossdock_default2018_4 \n                                     crossdock_default2018_KD_1 \n                                     crossdock_default2018_KD_2 \n                                     crossdock_default2018_KD_3 \n                                     crossdock_default2018_KD_4 \n                                     crossdock_default2018_KD_5 default1.0 \n                                     default2017 dense dense_1 dense_1_3 \n                                     dense_1_3_1 dense_1_3_2 dense_1_3_3 \n                                     dense_1_3_4 dense_1_3_PT_KD \n                                     dense_1_3_PT_KD_1 dense_1_3_PT_KD_2 \n                                     dense_1_3_PT_KD_3 dense_1_3_PT_KD_4 \n                                     dense_1_3_PT_KD_def2018 \n                                     dense_1_3_PT_KD_def2018_1 \n                                     dense_1_3_PT_KD_def2018_2 \n                                     dense_1_3_PT_KD_def2018_3 \n                                     dense_1_3_PT_KD_def2018_4 dense_2 dense_3 \n                                     dense_4 fast general_default2018 \n                                     general_default2018_1 \n                                     general_default2018_2 \n                                     general_default2018_3 \n                                     general_default2018_4 \n                                     general_default2018_KD_1 \n                                     general_default2018_KD_2 \n                                     general_default2018_KD_3 \n                                     general_default2018_KD_4 \n                                     general_default2018_KD_5 \n                                     redock_default2018 redock_default2018_1 \n                                     redock_default2018_1_3 \n                                     redock_default2018_1_3_1 \n                                     redock_default2018_1_3_2 \n                                     redock_default2018_1_3_3 \n                                     redock_default2018_1_3_4 \n                                     redock_default2018_2 redock_default2018_3 \n                                     redock_default2018_4 redock_default2018_KD\n                                     _1 redock_default2018_KD_2 \n                                     redock_default2018_KD_3 \n                                     redock_default2018_KD_4 \n                                     redock_default2018_KD_5\n  --cnn_model arg                    torch cnn model file; if not specified a \n                                     default model ensemble will be used\n  --cnn_rotation arg (=0)            evaluate multiple rotations of pose (max \n                                     24)\n  --cnn_mix_emp_force                Merge CNN and empirical minus forces\n  --cnn_mix_emp_energy               Merge CNN and empirical energy\n  --cnn_empirical_weight arg (=1)    Weight for scaling and merging empirical \n                                     force and energy \n  --cnn_outputdx                     Dump .dx files of atom grid gradient.\n  --cnn_outputxyz                    Dump .xyz files of atom gradient.\n  --cnn_xyzprefix arg (=gradient)    Prefix for atom gradient .xyz files\n  --cnn_center_x arg                 X coordinate of the CNN center\n  --cnn_center_y arg                 Y coordinate of the CNN center\n  --cnn_center_z arg                 Z coordinate of the CNN center\n  --cnn_verbose                      Enable verbose output for CNN debugging\n\nOutput:\n  -o [ --out ] arg                   output file name, format taken from file \n                                     extension\n  --out_flex arg                     output file for flexible receptor residues\n  --log arg                          optionally, write log file\n  --atom_terms arg                   optionally write per-atom interaction term\n                                     values\n  --atom_term_data                   embedded per-atom interaction terms in \n                                     output sd data\n  --pose_sort_order arg (=0)         How to sort docking results: CNNscore \n                                     (default), CNNaffinity, Energy\n  --full_flex_output                 Output entire structure for out_flex, not \n                                     just flexible residues.\n\nMisc (optional):\n  --cpu arg                          the number of CPUs to use (the default is \n                                     to try to detect the number of CPUs or, \n                                     failing that, use 1)\n  --seed arg                         explicit random seed\n  --exhaustiveness arg (=8)          exhaustiveness of the global search \n                                     (roughly proportional to time)\n  --num_modes arg (=9)               maximum number of binding modes to \n                                     generate\n  --min_rmsd_filter arg (=1)         rmsd value used to filter final poses to \n                                     remove redundancy\n  -q [ --quiet ]                     Suppress output messages\n  --addH arg                         automatically add hydrogens in ligands (on\n                                     by default)\n  --stripH arg                       remove hydrogens from molecule _after_ \n                                     performing atom typing for efficiency (off\n                                     by default)\n  --device arg (=0)                  GPU device to use\n  --no_gpu                           Disable GPU acceleration, even if \n                                     available.\n\nConfiguration file (optional):\n  --config arg                       the above options can be put here\n\nInformation (optional):\n  --help                             display usage summary\n  --help_hidden                      display usage summary with hidden options\n  --version                          display program version\n```\n"
      },
      "source": "https://raw.githubusercontent.com/gnina/gnina/master/README.md",
      "technique": "header_analysis"
    }
  ]
}