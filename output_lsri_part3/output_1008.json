{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Anchor reference building",
        "parent_header": [
          "PanSVR"
        ],
        "type": "Text_excerpt",
        "value": "**Usage**\n```\n  Usage:     panSVR  sv_ref  [Options] [ref.fa] [input.vcf]>\n  Basic:   \n    [ref.fa(.gz)]  FILE    reference files, must be the reference used to generate VCF file\n    [input.vcf]    FILE    the input vcf file to generate the reference\n                           the result output into stdout\n```\n**Options**\n```\n    -e --edge-len         [INT]     Additional reference around the break point [500]\n    -m --minSV-len        [INT]     min SV length, SV shorter than it will be ignored [50]\n    -b --begin_at_0                 the position is begin at 0 in a vcf   \n         - set this option for pbsv, and ignore it for cute SV\n    -S --sample-name      [STR]     Assigning a special sample for output, others will be filtered out [ALL]\n         - To use this function, the VCF must have 'SAMPLE=XXX' tag\n    -T --sv-type          [STR]     Assigning a special SV type for output, others will be filtered out [ALL]\n         - Normally should be one of 'ALL' 'DEL' 'INS' 'DUP' 'TRA' 'INV' 'BND'\n    -I --CHROM_ID         [STR]     Assigning a special chr_ID ['ALL', 0~9999] for output, others will be filtered out [ALL]\n    -J --discard_decoy              Discard SV in decoy region, it implemented by setting a MIN_ref_length (40M), any reference shorter than it will be discard.  \n         - Besides, chr_name not start by 'c', '1' ~'9', 'X', 'Y' will be discard, too\n         - 'discard_decoy' used to cutoff SV in 'decoy' sequence in hs37d5 or grch38, the shortest chromosome chr21 is 48M, while decoy is 35M \n    -N --skip-N-ref                 Skip the SV when the reference is start by N  \n    -B --skip-<>-ref      [INT]     Skip the SV the reference or the allele which is begin with '<', like <DEL> or <INS> [1]\n         - When not skip, the string like <INS> will be just leave Blank\n    -h --help                       show this message \n```\nFor deBWA index\n\n**Usage**\n```\nUsage:   deBGA index [options] reference.fasta <index_route> \n```\n**Options**\n```\nOptions: -k INT      the k-mer length of the vertices of RdBG [20-28]\n```\n"
      },
      "source": "https://raw.githubusercontent.com/hitbc/panSVR/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/hitbc/panSVR"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-06-20T08:00:42Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-30T08:04:17Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "An NGS SV caller based on pan-genome"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "parent_header": [
          "PanSVR"
        ],
        "type": "Text_excerpt",
        "value": "PanSVR (Pan-genome augmented Structure Variation calling tool with read Re-alignment), is a novel pan-genome-based SV calling approach. PanSVR uses several tailored methods to implement precise re-alignment for SV-spanning reads against well-organized pan-genome reference with plenty of known SVs. PanSVR enables to greatly improve the quality of short read alignments and produce clear and homogenous SV signatures which facilitate SV calling. Benchmark results on real sequencing data suggest that PanSVR is able to largely improve the sensitivity of SV calling than that of state-of-the-art SV callers, especially for the SVs from repeat-rich regions and/or novel insertions which are difficult to existing tools. \n\nPanSVR fits best for BWA-MEM, it is recommanded to use BWA-MEM as the aligner before running PanSVR.\n"
      },
      "source": "https://raw.githubusercontent.com/hitbc/panSVR/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9398409955825341,
      "result": {
        "original_header": "PanSVR",
        "type": "Text_excerpt",
        "value": "PanSVR: pan-genome augmented short read realignment for sensitive detection of structural variations\n \n"
      },
      "source": "https://raw.githubusercontent.com/hitbc/panSVR/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/hitbc/panSVR/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/hitbc/panSVR/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "hitbc/panSVR"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PanSVR"
      },
      "source": "https://raw.githubusercontent.com/hitbc/panSVR/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hitbc/panSVR/main/panSVR_run.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hitbc/panSVR/main/src/htslib/version.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.9999999999858318,
      "result": {
        "original_header": "Build project",
        "type": "Text_excerpt",
        "value": "To build PanSVR\n```\ngit clone https://github.com/hitbc/PanSVR.git\ncd ./PanSVR\nbash ./build\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/hitbc/panSVR/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.894127340223285,
      "result": {
        "original_header": "SV calling",
        "type": "Text_excerpt",
        "value": "```\nUsage:     panSV  assembly  [Options] <IndexDir> [BAM file] [ori_header_fn.sam] [reference.fa]\nBasic: n<IndexDir>      FOLDER   the directory contains deBGA index\n[BAM file]  FILES    input sam/bam file, only one file can be accept, only sam/bam can be accept\n   Input sam/bam should be sorted by alignment position   The coverage reads will be output into stdout\n   The analysis result will be output into stderr\n[ori_header.sam]  FILES  Header file of original BAM/CRAM file, using [signal] command or [samtools view -H] to generate it\n[reference.fa]  FILES  Original reference file to generate SV database, like hs37d5 or GRCH38.\n```\n**Options**\nBASH2*\n \n"
      },
      "source": "https://raw.githubusercontent.com/hitbc/panSVR/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/hitbc/panSVR/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021 HIT Bioinformatics Centre\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/hitbc/panSVR/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "panSVR"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "hitbc"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 3483333,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 908004,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Roff",
        "size": 26944,
        "type": "Programming_language",
        "value": "Roff"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 25727,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "M4",
        "size": 23683,
        "type": "Programming_language",
        "value": "M4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 3894,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hitbc/panSVR/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependency",
        "parent_header": [
          "PanSVR"
        ],
        "type": "Text_excerpt",
        "value": "Building of PanSVR depends on g++, make and zlib.\nRunning of PanSVR depends on samtools and pigz.\n\nRun following commands to install them (Ubuntu).\n```\nsudo apt-get install g++\nsudo apt-get install make\nsudo apt-get install zlib1g-dev\nsudo apt-get install samtools\nsudo apt-get install pigz\n\n```"
      },
      "source": "https://raw.githubusercontent.com/hitbc/panSVR/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Simple running mode",
        "parent_header": [
          "PanSVR"
        ],
        "type": "Text_excerpt",
        "value": "PanSVR provides a simple running mode, user can running the program in just one command in this mode. All options is required in this mode. The panSVR_run implemented using bash, \nfour steps of panSVR SV calling process are running in this mode one by one. User can modify the bash file to DIY the running process.\n\n**Usage**\n```\ncd ./PanSVR\nbash ./panSVR_run.sh <SV_database> <reference> <work_dir> <BAM_file> <result>\n```\n**Options**\n```\n    <SV_database>  FASTA file containing anchor references for read realignment, uisng 'panSVR sv_ref' to build a new reference file\n    <reference> FASTA file, reference file like hs37d5 or GRCH38.\n    <work_dir> DIR, used for storing index files, log files and tmp files, it can be delete after SV calling\n    <BAM_file> BAM or CRAM file, alignment result of NGS data using BWA-MEM, only one file accept, and it should be sorted by position\n    <VCF_result> VCF, output result of SV calling.\n```\n"
      },
      "source": "https://raw.githubusercontent.com/hitbc/panSVR/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Self-defined running mode",
        "parent_header": [
          "PanSVR"
        ],
        "type": "Text_excerpt",
        "value": "PanSVR is a pipeline program which includes multiple steps. User can runng all steps seperately when needed.\n\nFirstly, an SV_database containing anchor references for read realignment need to be built uisng './panSVR sv_ref' command. Than a deBGA index file are needed and users can used \n\"./deBGA index\" to build one. Next, signals will be extracted from BAM/CRAM file using \"./panSVR signal\" command. Next, signals needed to be realignment using \"./panSVR aln\" command. \nSamtools is used to sort and index the alignment results. Finally, \"./PanSVR assembly\" is used to generate final VCF results.\n\nDetail information will be provided in the next sections.\n\n**DEMO**\n\n"
      },
      "source": "https://raw.githubusercontent.com/hitbc/panSVR/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 03:10:29",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick start",
        "parent_header": [
          "PanSVR"
        ],
        "type": "Text_excerpt",
        "value": "```\ngit clone https://github.com/hitbc/PanSVR.git\ncd ./PanSVR\nbash ./build\n#SV calling\nmkdir ./panSVR_word_dir\nbash ./panSV_run.sh ./demo.sv_ref.fa ./hs37d5.fa ./panSVR_word_dir ./demo.bam ./panSVR_rst.vcf\n```\n"
      },
      "source": "https://raw.githubusercontent.com/hitbc/panSVR/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Memory usage",
        "parent_header": [
          "PanSVR"
        ],
        "type": "Text_excerpt",
        "value": "Normally, PanSVR used less than 4 Gigabytes memory in all steps. Besides, 30 Gigabytes space in hard disk is needed to store tmp files. \n"
      },
      "source": "https://raw.githubusercontent.com/hitbc/panSVR/main/README.md",
      "technique": "header_analysis"
    }
  ]
}