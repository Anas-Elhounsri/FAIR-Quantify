{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ruggleslab/hypercluster"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-02-05T15:05:06Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-03-13T13:00:24Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9132810485037323,
      "result": {
        "original_header": "Hypercluster",
        "type": "Text_excerpt",
        "value": "A package for clustering optimization with sklearn. \n \n"
      },
      "source": "https://raw.githubusercontent.com/ruggleslab/hypercluster/dev/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9581606297420315,
      "result": {
        "original_header": "Quickstart with SnakeMake",
        "type": "Text_excerpt",
        "value": "Or submit the snakemake scheduler as an sbatch job e.g. with BigPurple Slurm:\n```bash\nmodule add slurm\nsbatch snakemake_submit.sh\n```\nExamples for `snakemake_submit.sh` and `cluster.json` is in the scRNA-seq example. \n \n"
      },
      "source": "https://raw.githubusercontent.com/ruggleslab/hypercluster/dev/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9159856927464137,
      "result": {
        "original_header": "Quickstart with python",
        "type": "Text_excerpt",
        "value": "```python\nimport pandas as pd\nfrom sklearn.datasets import make_blobs\nimport hypercluster\n\ndata, labels = make_blobs()\ndata = pd.DataFrame(data)\nlabels = pd.Series(labels, index=data.index, name='labels')\n\n# With a single clustering algorithm\nclusterer = hypercluster.AutoClusterer()\nclusterer.fit(data).evaluate(\n  methods = hypercluster.constants.need_ground_truth+hypercluster.constants.inherent_metrics, \n  gold_standard = labels\n  )\n\nclusterer.visualize_evaluations()\n\n# With a range of algorithms\n\nclusterer = hypercluster.MultiAutoClusterer()\nclusterer.fit(data).evaluate(\n  methods = hypercluster.constants.need_ground_truth+hypercluster.constants.inherent_metrics, \n  gold_standard = labels\n  )\n\nclusterer.visualize_evaluations()\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/ruggleslab/hypercluster/dev/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://hypercluster.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/ruggleslab/hypercluster/dev/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ruggleslab/hypercluster/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ruggleslab/hypercluster/dev/examples/snakemake_scRNA_example/scRNA-seq_example.ipynb"
      },
      "source": "https://raw.githubusercontent.com/ruggleslab/hypercluster/dev/examples/snakemake_scRNA_example/scRNA-seq_example.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ruggleslab/hypercluster/dev/examples/local_TCGA_BRCA_RNAseq/TCGA_BRCA_RNAseq_subtype_clustering.ipynb"
      },
      "source": "https://raw.githubusercontent.com/ruggleslab/hypercluster/dev/examples/local_TCGA_BRCA_RNAseq/TCGA_BRCA_RNAseq_subtype_clustering.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ruggleslab/hypercluster/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ruggleslab/hypercluster"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Hypercluster"
      },
      "source": "https://raw.githubusercontent.com/ruggleslab/hypercluster/dev/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ruggleslab/hypercluster/dev/snakemake/snakemake_submit.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ruggleslab/hypercluster/dev/examples/snakemake_scRNA_example/snakemake_submit.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Install",
        "parent_header": [
          "Hypercluster"
        ],
        "type": "Text_excerpt",
        "value": "With pip:\n```\npip install hypercluster\n```\n\nor with conda:\n```\nconda install hypercluster\n# or\nconda install -c conda-forge -c bioconda hypercluster\n```\nIf you are having problems installing with conda, try changing your channel priority. Priority of conda-forge > bioconda > defaults is recommended. \nTo check channel priority: `conda config --get channels`\nIt should look like:\n```\n--add channels 'defaults'   # lowest priority\n--add channels 'bioconda'\n--add channels 'conda-forge'   # highest priority\n```\n\nIf it doesn't look like that, try:\n```\nconda config --add channels bioconda\nconda config --add channels conda-forge\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ruggleslab/hypercluster/dev/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9966148063366348,
      "result": {
        "original_header": "Docs",
        "type": "Text_excerpt",
        "value": "https://hypercluster.readthedocs.io/en/latest/index.html   \n"
      },
      "source": "https://raw.githubusercontent.com/ruggleslab/hypercluster/dev/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9828772531963414,
      "result": {
        "original_header": "Quickstart with SnakeMake",
        "type": "Text_excerpt",
        "value": "Default `config.yml` and `hypercluster.smk` are in the snakemake repo above.  \nEdit the `config.yml` file or arguments.\n```bash\nsnakemake -s hypercluster.smk --configfile config.yml --config input_data_files=test_data input_data_folder=. \n``` \nExample editing with python:\n```python\nimport yaml\n\nwith open('config.yml', 'r') as fh:\n    config = yaml.load(fh)\n    \ninput_data_prefix = 'test_data'\nconfig['input_data_folder'] = os.path.abspath('.')\nconfig['input_data_files'] = [input_data_prefix]\nconfig['read_csv_kwargs'] = {input_data_prefix:{'index_col': [0]}}\n\nwith open('config.yml', 'w') as fh:\n    yaml.dump(config, stream=fh)\n``` \nOr submit the snakemake scheduler as an sbatch job e.g. with BigPurple Slurm:\n```bash\nmodule add slurm\nsbatch snakemake_submit.sh\n```\nExamples for `snakemake_submit.sh` and `cluster.json` is in the scRNA-seq example. \n \n"
      },
      "source": "https://raw.githubusercontent.com/ruggleslab/hypercluster/dev/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8478141091998842,
      "result": {
        "original_header": "Quickstart with SnakeMake",
        "type": "Text_excerpt",
        "value": "Example editing with python:\n```python\nimport yaml\n\nwith open('config.yml', 'r') as fh:\n    config = yaml.load(fh)\n    \ninput_data_prefix = 'test_data'\nconfig['input_data_folder'] = os.path.abspath('.')\nconfig['input_data_files'] = [input_data_prefix]\nconfig['read_csv_kwargs'] = {input_data_prefix:{'index_col': [0]}}\n\nwith open('config.yml', 'w') as fh:\n    yaml.dump(config, stream=fh)\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/ruggleslab/hypercluster/dev/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8670344200779924,
      "result": {
        "original_header": "Quickstart with python",
        "type": "Text_excerpt",
        "value": "```python\nimport pandas as pd\nfrom sklearn.datasets import make_blobs\nimport hypercluster\n\ndata, labels = make_blobs()\ndata = pd.DataFrame(data)\nlabels = pd.Series(labels, index=data.index, name='labels')\n\n# With a single clustering algorithm\nclusterer = hypercluster.AutoClusterer()\nclusterer.fit(data).evaluate(\n  methods = hypercluster.constants.need_ground_truth+hypercluster.constants.inherent_metrics, \n  gold_standard = labels\n  )\n\nclusterer.visualize_evaluations()\n\n# With a range of algorithms\n\nclusterer = hypercluster.MultiAutoClusterer()\nclusterer.fit(data).evaluate(\n  methods = hypercluster.constants.need_ground_truth+hypercluster.constants.inherent_metrics, \n  gold_standard = labels\n  )\n\nclusterer.visualize_evaluations()\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/ruggleslab/hypercluster/dev/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ruggleslab/hypercluster/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "BSD 3-Clause \"New\" or \"Revised\" License",
        "spdx_id": "BSD-3-Clause",
        "type": "License",
        "url": "https://api.github.com/licenses/bsd-3-clause",
        "value": "https://api.github.com/licenses/bsd-3-clause"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Copyright (c) 2019, Lili Blumenberg\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n    * Neither the name of the <organization> nor the\n      names of its contributors may be used to endorse or promote products\n      derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\u00a9 2019 GitHub, Inc.\n"
      },
      "source": "https://raw.githubusercontent.com/ruggleslab/hypercluster/dev/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "hypercluster"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "ruggleslab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 158931,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 581,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ruggleslab/hypercluster/dev/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements:",
        "parent_header": [
          "Hypercluster"
        ],
        "type": "Text_excerpt",
        "value": "pandas  \nnumpy  \nscipy  \nmatplotlib  \nseaborn  \nscikit-learn  \nhdbscan  \n\nOptional:\nsnakemake\n\n"
      },
      "source": "https://raw.githubusercontent.com/ruggleslab/hypercluster/dev/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-06 15:18:04",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Examples",
        "parent_header": [
          "Hypercluster"
        ],
        "type": "Text_excerpt",
        "value": "https://github.com/liliblu/hypercluster/tree/dev/examples\n"
      },
      "source": "https://raw.githubusercontent.com/ruggleslab/hypercluster/dev/README.md",
      "technique": "header_analysis"
    }
  ]
}