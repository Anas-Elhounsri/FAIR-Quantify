{
  "application_domain": [
    {
      "confidence": 0.8304315453905853,
      "result": {
        "type": "String",
        "value": "Graphs"
      },
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9025835728376357,
      "result": {
        "type": "String",
        "value": "Semantic web"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/langmead-lab/vargas"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2015-11-25T20:11:28Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-02-07T23:22:33Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9191058654391975,
      "result": {
        "original_header": "Vargas",
        "type": "Text_excerpt",
        "value": "Vargas computes optimal alignments of short reads to a directed acyclic graph (DAG). After building a graph, reads are aligned using a SIMD-vectorized version of the Smith-Waterman dynamic programming algorithm, with 16 -- 64 reads per vector depending on the instruction set. \n"
      },
      "source": "https://raw.githubusercontent.com/langmead-lab/vargas/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9817454989895207,
      "result": {
        "original_header": "Building",
        "type": "Text_excerpt",
        "value": "Vargas relies on htslib to provide core file processing. Once cloned, the htslib is built with autoconf (version 2.63+). \nVargas is built with CMake.  \n"
      },
      "source": "https://raw.githubusercontent.com/langmead-lab/vargas/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9153553194272492,
      "result": {
        "original_header": "define",
        "type": "Text_excerpt",
        "value": "        sim             Simulate reads from a set of graphs. \n"
      },
      "source": "https://raw.githubusercontent.com/langmead-lab/vargas/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9180371931516674,
      "result": {
        "original_header": "convert",
        "type": "Text_excerpt",
        "value": "        query           Convert a graph to DOT format.\n        test            Run unit tests.\n```\n\n## define\n\nNOTE! If your VCF file contains any overlapping variants, it must be pre-processed using the Python script `vargas_preprocess_VCF.py`, otherwise Vargas will not build the correct graph. This script identifies clusters of overlapping variants and merges these records into one new record with several ALT alleles enumerating all possible combinations of variants in the cluster. These new records remove any INFO fields that may have been present in the original file. See [vargas_preprocess_VCF.py](vargas_preprocess_VCF.py) for usage information and requirements for your input VCF.\n\n`vargas define -h`\n\n```\nDefine subgraphs deriving from a reference and VCF file.\nUsage:\n  vargas define [OPTION...] \n\nSubgraphs are defined using the format \"label=N[%]\",\nwhere 'N' is the number of samples or percentage of samples to select.\nThe samples are selected from the parent graph, scoped with ':'.\nThe BASE graph is implied as the root for all labels. Example:\n        a=50;a:b=10%;a:c=5\n```\n\nSee [Define documentation](doc/define.md).\n\n## align\n\n`vargas align -h`\n\n```\nAlign reads to a graph.\nUsage:\n  vargas align [OPTION...] \n Optional options:\n  -S, --sam arg            <str> Output file.\n      --msonly             Only report max score.\n      --maxonly            Only report max score, position, and count.\n      --phred64            Qualities are Phred+64, not Phred+33.\n  -p, --subsample arg      <N> Sample N random reads, 0 for all. (default: 0)\n  -a, --alignto arg        <str> Target graph, or SAM Read Group -> graph\n                           mapping.\"(RG:ID:<group>,<target_graph>;)+|<graph>\"\n  -s, --assess [=arg(=.)]  [ID] Use score profile from a previous alignment.\n  -c, --tolerance arg      <N> Correct if within readlen/N. (default: 4)\n  -f, --forward            Only align to forward strand. \n Threading options:\n  -j, --threads arg  <N> Number of threads. (default: 1)\n  -u, --chunk arg    <N> Partition into tasks of max size N. (default: 64)\n```\n\nReads are aligned to graphs specified in the GDEF file. `--ete` will preform end to end alignment and is generally faster than full local alignment. The memory usage increase is marginal for high numbers of threads. As a result, as many threads as available should be used (271 on Xeon Phi KNL).\n\nFor example:\n\n    vargas align  -g test.gdef -r reads.fa -t reads.sam --ete\n\nSee the [Alignment documentation](doc/align.md) for more information.\n\n## convert\n\n`vargas convert -h`\n\n```\nExport a SAM file as a CSV file.\nUsage:\n  vargas convert [OPTION...] positional parameters \n"
      },
      "source": "https://raw.githubusercontent.com/langmead-lab/vargas/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9130846689370633,
      "result": {
        "original_header": "sim",
        "type": "Text_excerpt",
        "value": "`vargas sim -h`\n```\nSimulate reads from genome graphs.\nUsage:\n  vargas sim [OPTION...]\n\n Required options:\n  -g, --graph arg  <str> *Graph definition file.\n\n Optional options:\n  -t, --out arg       <str> Output file. (default: stdout)\n  -s, --sub arg       <S1,S2..> Subgraphs to simulate from. (default: base)\n  -f, --file          -s specifies a filename.\n  -l, --rlen arg      <N> Read length. (default: 50)\n  -n, --numreads arg  <N> Number of reads to generate. (default: 1000)\n  -j, --threads arg   <N> Number of threads. (default: 1)\n\n Stratum options:\n  -d, --vnodes arg  <N1,N2...> Number of variant nodes. '*' for any. (default: *)\n  -b, --vbases arg  <N1,N2...> Number of variant bases. '*' for any. (default: *)\n  -m, --mut arg     <N1,N2...> Number of mutations. '*' for any. (default: 0)\n  -i, --indel arg   <N1,N2...> Number of insertions/deletions. '*' for any. (default: 0)\n  -a, --rate        Interpret -m, -i as error rates.\n\n  -h, --help  Display this message.\n```\n \n\n`sim` generates `-n` reads of each combination of `-m`, `-i`, `-v`, and `-b`. `-m` Introduces mutation errors, substituting _N_ bases with an alternate base. Likewise, `-i` will delete a base or insert a random base. With `-a`, `-m` and `-i` are interpreted as rates (0.0 to 1.0). `-s` controls which subgraphs are used to generate reads. \nwill generate 1000 reads for each combination of `-m`, `-v`, for each graph in `test.gdef`. \n- `ro` Unmutated read\n- `nd` VCF sample simulated from\n- `se` Number of substitution errors\n- `vd` Number of variant nodes traversed\n- `vb` Number of variant bases traversed\n- `ni` Number of indel errors\n- `gd` Read Group tag. Graph simulated from.\n- `rt` Read Group tag. Rates were used.\n- `ph` Read Group tag. GDEF file. \nReads are randomly sampled by weighting graph nodes by their length. As a result this isn't feasible for large graphs or specific conditions that are rare.\n \n"
      },
      "source": "https://raw.githubusercontent.com/langmead-lab/vargas/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9026428675430447,
      "result": {
        "original_header": "Other",
        "type": "Text_excerpt",
        "value": "`vargas test` executes unit tests using the doctest framework (included as a dependency of this repository). The unit tests are included at the end of the relevant .cpp source files. These tests verify the core vectorized graph dynamic programming algorithm with 16-bit and 8-bit lanes, graph building and processing, file input/output, and simulation. \n`vargas profile` generates a summary of performance.\n```\nRun profiles. \nUsage:\n  vargas profile [OPTION...]\n\n  -f, --fasta arg    <str> *Reference FASTA.\n  -v, --vcf arg      <str> *Variant file (vcf, vcf.gz, or bcf)\n  -g, --region arg   <str> *Region of format \"CHR:MIN-MAX\". \"CHR:0-0\" for all.\n  -i, --ingroup arg  <N> Ingroup percentage. (default: 100)\n  -n, --nreads arg   <N> Number of reads. (default: 32)\n  -l, --len arg      <N> Number of reads. (default: 50)\n  -h, --help         Display this message.\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/langmead-lab/vargas/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/langmead-lab/vargas/wiki"
      },
      "source": "https://raw.githubusercontent.com/langmead-lab/vargas/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/langmead-lab/vargas/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/langmead-lab/vargas/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "langmead-lab/vargas"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Vargas"
      },
      "source": "https://raw.githubusercontent.com/langmead-lab/vargas/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9991951826992919,
      "result": {
        "original_header": "Building",
        "type": "Text_excerpt",
        "value": "When cloning, use the `--recursive` option to automatically retrieve dependencies. \n    git clone --recursive git@github.com:langmead-lab/vargas.git \n\tcd htslib\n    autoconf && autoheader && ./configure && make -j4 \nWith GCC compiler, SSE 4.1 (default), AVX2 (**-DBUILD\\_AVX2\\_GCC=ON**) or AVX512-BW (**-DBUILD\\_AVX512BW\\_GCC=ON**) can be targeted for SIMD support. *Requires GCC version 6 or above* \n    mkdir build && cd build\n    cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_AVX512BW_GCC=ON -DCMAKE_CXX_COMPILER=g++ -DCMAKE_C_COMPILER=gcc .. && make -j4\n    \nWith Intel compiler, AVX2 (**-DBUILD\\_AVX2\\_INTEL=ON**) or AVX512-BW (**-DBUILD\\_AVX512BW\\_INTEL=ON**) can be targeted for SIMD support. \n    mkdir build && cd build\n    cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_AVX512BW_INTEL=ON -DCMAKE_CXX_COMPILER=icpc -DCMAKE_C_COMPILER=icc .. && make -j4 \n"
      },
      "source": "https://raw.githubusercontent.com/langmead-lab/vargas/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9973287376082702,
      "result": {
        "original_header": "Modes of Operation",
        "type": "Text_excerpt",
        "value": "```\nVargas version [date]\nby Ravi Gaddipati, Charlotte Darby, Daniel Baker, Ben Langmead (langmea@cs.jhu.edu, www.langmead-lab.org)\n \n"
      },
      "source": "https://raw.githubusercontent.com/langmead-lab/vargas/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9060254299051658,
      "result": {
        "original_header": "convert",
        "type": "Text_excerpt",
        "value": "        query           Convert a graph to DOT format.\n        test            Run unit tests.\n```\n\n## define\n\nNOTE! If your VCF file contains any overlapping variants, it must be pre-processed using the Python script `vargas_preprocess_VCF.py`, otherwise Vargas will not build the correct graph. This script identifies clusters of overlapping variants and merges these records into one new record with several ALT alleles enumerating all possible combinations of variants in the cluster. These new records remove any INFO fields that may have been present in the original file. See [vargas_preprocess_VCF.py](vargas_preprocess_VCF.py) for usage information and requirements for your input VCF.\n\n`vargas define -h`\n\n```\nDefine subgraphs deriving from a reference and VCF file.\nUsage:\n  vargas define [OPTION...] \n Optional options:\n  -v, --vcf arg       <str> Variant file (vcf, vcf.gz, or bcf).\n  -t, --out arg       <str> Output filename. (default: stdout)\n  -g, --region arg    <CHR[:MIN-MAX];...> list of regions. (default: all)\n  -s, --subgraph arg  <str> Subgraph definitions, see below.\n  -p, --filter arg    <str> Filter by sample names in file.\n  -n, --limvar arg    <N> Limit to the first N variant records\n  -c, --notcontig     VCF records for a given contig are not contiguous. \n"
      },
      "source": "https://raw.githubusercontent.com/langmead-lab/vargas/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.907960524532716,
      "result": {
        "original_header": "align",
        "type": "Text_excerpt",
        "value": "        convert         Convert a SAM file to a CSV file. \n"
      },
      "source": "https://raw.githubusercontent.com/langmead-lab/vargas/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/langmead-lab/vargas/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "The MIT License (MIT)\n\nCopyright 2017 Ravi Gaddipati\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
      },
      "source": "https://raw.githubusercontent.com/langmead-lab/vargas/master/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "type": "Text_excerpt",
        "value": "The MIT License (MIT)\n\nCopyright 2019 Ravi Gaddipati, Charlotte Darby, Daniel Baker, Ben Langmead.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/langmead-lab/vargas/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "vargas"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "langmead-lab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 361758,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 9829,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 9186,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 2253,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/langmead-lab/vargas/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "cdarby",
          "type": "User"
        },
        "date_created": "2020-01-21T15:54:38Z",
        "date_published": "2020-01-21T16:10:36Z",
        "description": "Incorporate fix for multithreading bug.",
        "html_url": "https://github.com/langmead-lab/vargas/releases/tag/v0.2",
        "release_id": 23010883,
        "tag": "v0.2",
        "tarball_url": "https://api.github.com/repos/langmead-lab/vargas/tarball/v0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/langmead-lab/vargas/releases/23010883",
        "value": "https://api.github.com/repos/langmead-lab/vargas/releases/23010883",
        "zipball_url": "https://api.github.com/repos/langmead-lab/vargas/zipball/v0.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "cdarby",
          "type": "User"
        },
        "date_created": "2019-12-10T18:02:09Z",
        "date_published": "2020-01-09T15:32:56Z",
        "description": "Binaries are now available for the SSE, AVX2, and AVX512BW instruction sets.",
        "html_url": "https://github.com/langmead-lab/vargas/releases/tag/v0.1",
        "release_id": 22715501,
        "tag": "v0.1",
        "tarball_url": "https://api.github.com/repos/langmead-lab/vargas/tarball/v0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/langmead-lab/vargas/releases/22715501",
        "value": "https://api.github.com/repos/langmead-lab/vargas/releases/22715501",
        "zipball_url": "https://api.github.com/repos/langmead-lab/vargas/zipball/v0.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-06 18:19:52",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 25
      },
      "technique": "GitHub_API"
    }
  ]
}