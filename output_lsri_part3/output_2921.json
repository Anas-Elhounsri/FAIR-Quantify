{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/caokai1073/UnionCom"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-10-27T02:28:53Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-29T19:11:52Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "The Software of UnionCom Algorithm"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9660007081062009,
      "result": {
        "original_header": "Parameters of BASH3*",
        "type": "Text_excerpt",
        "value": "+ Corrigendum: In the above paper, $1_{n_x\\times n_y}$ on Pages i50 and i51 should be corrected as $1_{n_x\\times n_x}$. The authors thank Dr. Chanwoo park from Seoul National University for pointing out this typo. \n# UnionCom\n### We released new version [UnionCom2](https://github.com/caokai1073/UnionCom2) with fast and efficient implementation \n"
      },
      "source": "https://raw.githubusercontent.com/caokai1073/UnionCom/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8883991474866103,
      "result": {
        "original_header": "Examples (jupyter notebook)",
        "type": "Text_excerpt",
        "value": "## Parameters of ```class UnionCom``` \n"
      },
      "source": "https://raw.githubusercontent.com/caokai1073/UnionCom/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9626879788678608,
      "result": {
        "original_header": "Parameters of BASH3*",
        "type": "Text_excerpt",
        "value": "The list of parameters is given below:\n> + ```epoch_pd```: epoch of Prime-dual algorithm (default=2000).\n> + BASH5*: epoch of training Deep Neural Network (default=100).\n> + BASH6*: training rate of data matching matrix F (default=0.01).\n> + BASH7*: training rate of DNN (default=0.001).\n> + BASH8*: training batch size of DNN (default=100).\n> + BASH9*: training damping term (default=10).\n> + BASH10*: delay steps of alpha (default=0).\n> + BASH11*: trade-off parameter of structure preserving and point matching (default=1).\n> + BASH12*: perplexity of tsne projection (default=30)\n> + BASH13*: maximum value of knn when constructing geodesic distance matrix (default=40).\n> + BASH14*: output dimension of integrated data (default=32). \nThe other parameters include:\n> + ```log_pd```: log step of Prime Dual (default=1000).\n> + BASH16*: log step of training DNN (default=10).\n> + BASH17*: random seed (default=666).\n> + BASH18*: mode of distance. ['geodesic' (suggested for multimodal integration), 'euclidean'(suggested for batch correction)] (default='geodesic').\n> + BASH19*: mode of project, ['tsne', 'barycentric'] (default='tsne').\n> + BASH20*: \"MultiOmics\" or \"BatchCorrect\". \"BatchCorrect\" needs aligned features. (default='MultiOmics')\n \n"
      },
      "source": "https://raw.githubusercontent.com/caokai1073/UnionCom/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/caokai1073/UnionCom/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/caokai1073/UnionCom/master/Examples/HSC.ipynb"
      },
      "source": "https://raw.githubusercontent.com/caokai1073/UnionCom/master/Examples/HSC.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/caokai1073/UnionCom/master/Examples/Simulation2.ipynb"
      },
      "source": "https://raw.githubusercontent.com/caokai1073/UnionCom/master/Examples/Simulation2.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/caokai1073/UnionCom/master/Examples/Simulation1.ipynb"
      },
      "source": "https://raw.githubusercontent.com/caokai1073/UnionCom/master/Examples/Simulation1.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/caokai1073/UnionCom/master/Examples/MMD-MA-simulations.ipynb"
      },
      "source": "https://raw.githubusercontent.com/caokai1073/UnionCom/master/Examples/MMD-MA-simulations.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/caokai1073/UnionCom/master/Examples/scGEM.ipynb"
      },
      "source": "https://raw.githubusercontent.com/caokai1073/UnionCom/master/Examples/scGEM.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/caokai1073/UnionCom/master/Examples/scNMT.ipynb"
      },
      "source": "https://raw.githubusercontent.com/caokai1073/UnionCom/master/Examples/scNMT.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/caokai1073/UnionCom/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "caokai1073/UnionCom"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "UnionCom"
      },
      "source": "https://raw.githubusercontent.com/caokai1073/UnionCom/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Install",
        "parent_header": [
          "UnionCom"
        ],
        "type": "Text_excerpt",
        "value": "UnionCom software is available on the Python package index (PyPI), latest version 0.4.0. To install it using pip, simply type:\n```\npip3 install unioncom\n```\n"
      },
      "source": "https://raw.githubusercontent.com/caokai1073/UnionCom/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9963458107705273,
      "result": {
        "original_header": "Parameters of BASH3*",
        "type": "Text_excerpt",
        "value": "numpy 1.19.5  \ntorch 1.7.0  \nscipy 1.4.1\ntorchvision 0.4.1  \nscikit-learn 0.23.2  \numap-learn 0.3.10 \n## Install\nUnionCom software is available on the Python package index (PyPI), latest version 0.4.0. To install it using pip, simply type:\n```\npip3 install unioncom\n``` \n## Examples (jupyter notebook) \n"
      },
      "source": "https://raw.githubusercontent.com/caokai1073/UnionCom/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.841863212141531,
      "result": {
        "original_header": "Parameters of BASH3*",
        "type": "Text_excerpt",
        "value": "## Examples (jupyter notebook) \n"
      },
      "source": "https://raw.githubusercontent.com/caokai1073/UnionCom/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8757787200350617,
      "result": {
        "original_header": "Examples (jupyter notebook)",
        "type": "Text_excerpt",
        "value": "Each row should contain the measured values for a single cell, and each column should contain the values of a feature across cells.\n```python\n>>> from unioncom import UnionCom\n>>> import numpy as np\n>>> data1 = np.loadtxt(\"./simu1/domain1.txt\")\n>>> data2 = np.loadtxt(\"./simu1/domain2.txt\")\n>>> type1 = np.loadtxt(\"./simu1/type1.txt\")\n>>> type2 = np.loadtxt(\"./simu1/type2.txt\")\n>>> type1 = type1.astype(np.int)\n>>> type2 = type2.astype(np.int)\n>>> uc = UnionCom.UnionCom()\n>>> integrated_data = uc.fit_transform(dataset=[data1,data2])\n>>> uc.test_LabelTA(integrated_data, [type1,type2])\n>>> uc.Visualize([data1,data2], integrated_data, mode='PCA') # without datatype\n>>> uc.Visualize([data1,data2], integrated_data, [type1,type2], mode='PCA') # with datatype\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/caokai1073/UnionCom/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/caokai1073/UnionCom/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 Kai Cao\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/caokai1073/UnionCom/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "UnionCom"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "caokai1073"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 36290,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/caokai1073/UnionCom/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "caokai1073",
          "type": "User"
        },
        "date_created": "2021-05-26T10:10:29Z",
        "date_published": "2021-05-26T10:12:54Z",
        "description": "1. Add batch effect correction method by setting integration_type=\"BatchCorrect\";\r\n2. Add more distances (e.g. cosine, cityblock, see sklearn.metrics.pairwise) to formulate distance matrices.\r\n3. Fix some bugs;",
        "html_url": "https://github.com/caokai1073/UnionCom/releases/tag/v0.4.0",
        "name": "v0.4.0",
        "release_id": 43586341,
        "tag": "v0.4.0",
        "tarball_url": "https://api.github.com/repos/caokai1073/UnionCom/tarball/v0.4.0",
        "type": "Release",
        "url": "https://api.github.com/repos/caokai1073/UnionCom/releases/43586341",
        "value": "https://api.github.com/repos/caokai1073/UnionCom/releases/43586341",
        "zipball_url": "https://api.github.com/repos/caokai1073/UnionCom/zipball/v0.4.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "caokai1073",
          "type": "User"
        },
        "date_created": "2021-01-05T03:04:09Z",
        "date_published": "2021-01-05T06:17:21Z",
        "description": "\r\n[unioncom-0.3.0.tar.gz](https://github.com/caokai1073/UnionCom/files/5769046/unioncom-0.3.0.tar.gz)\r\n+ Add more comments to make the software easier to understand\r\n+ Fix some bugs",
        "html_url": "https://github.com/caokai1073/UnionCom/releases/tag/v0.3.0",
        "release_id": 35981264,
        "tag": "v0.3.0",
        "tarball_url": "https://api.github.com/repos/caokai1073/UnionCom/tarball/v0.3.0",
        "type": "Release",
        "url": "https://api.github.com/repos/caokai1073/UnionCom/releases/35981264",
        "value": "https://api.github.com/repos/caokai1073/UnionCom/releases/35981264",
        "zipball_url": "https://api.github.com/repos/caokai1073/UnionCom/zipball/v0.3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "caokai1073",
          "type": "User"
        },
        "date_created": "2020-09-17T06:25:03Z",
        "date_published": "2020-09-17T06:38:09Z",
        "description": "+ Fix some bugs;\r\n+ Change function \"PCA_visualize\" to \"Visualize\", and provide PCA, TSNE and UMAP for visulalization;\r\n+ Add a function to find maximum connected subgraph;",
        "html_url": "https://github.com/caokai1073/UnionCom/releases/tag/v0.2.2",
        "release_id": 31446716,
        "tag": "v0.2.2",
        "tarball_url": "https://api.github.com/repos/caokai1073/UnionCom/tarball/v0.2.2",
        "type": "Release",
        "url": "https://api.github.com/repos/caokai1073/UnionCom/releases/31446716",
        "value": "https://api.github.com/repos/caokai1073/UnionCom/releases/31446716",
        "zipball_url": "https://api.github.com/repos/caokai1073/UnionCom/zipball/v0.2.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "caokai1073",
          "type": "User"
        },
        "date_created": "2020-07-01T05:52:57Z",
        "date_published": "2020-07-01T05:56:32Z",
        "description": "+ Split function train into functions Match and Project.\r\n+ Use Kuhn-Munkres to find optimal pairs between datasets instead of parbabilistic matrix matching.\r\n+ Add a new parameter \"project\" to provide options for barycentric projection.\r\n+ Separate \"test_label_transfer_accuracy\" function from \"fit_transform\" function\r\n+ fix some bugs",
        "html_url": "https://github.com/caokai1073/UnionCom/releases/tag/v0.2.1",
        "release_id": 28099487,
        "tag": "v0.2.1",
        "tarball_url": "https://api.github.com/repos/caokai1073/UnionCom/tarball/v0.2.1",
        "type": "Release",
        "url": "https://api.github.com/repos/caokai1073/UnionCom/releases/28099487",
        "value": "https://api.github.com/repos/caokai1073/UnionCom/releases/28099487",
        "zipball_url": "https://api.github.com/repos/caokai1073/UnionCom/zipball/v0.2.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-06 10:49:53",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 24
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Examples (jupyter notebook)",
        "parent_header": [
          "UnionCom"
        ],
        "type": "Text_excerpt",
        "value": "+ [Integration of simulation 1 in UnionCom paper](https://github.com/caokai1073/UnionCom/blob/master/Examples/Simulation1.ipynb)\n\n+ [Integration of simulation 2 in UnionCom paper](https://github.com/caokai1073/UnionCom/blob/master/Examples/Simulation2.ipynb)\n\n+ [Integration of simulations in MMD-MA paper](https://github.com/caokai1073/UnionCom/blob/master/Examples/MMD-MA-simulations.ipynb)\n\n+ [Batch correction of HSC data](https://github.com/caokai1073/UnionCom/blob/master/Examples/HSC.ipynb)\n\n+ [Integration of scGEM data](https://github.com/caokai1073/UnionCom/blob/master/Examples/scGEM.ipynb)\n\n+ [Integration of scNMT data](https://github.com/caokai1073/UnionCom/blob/master/Examples/scNMT.ipynb)\n\nEach row should contain the measured values for a single cell, and each column should contain the values of a feature across cells.\n\n```python\n>>> from unioncom import UnionCom\n>>> import numpy as np\n>>> data1 = np.loadtxt(\"./simu1/domain1.txt\")\n>>> data2 = np.loadtxt(\"./simu1/domain2.txt\")\n>>> type1 = np.loadtxt(\"./simu1/type1.txt\")\n>>> type2 = np.loadtxt(\"./simu1/type2.txt\")\n>>> type1 = type1.astype(np.int)\n>>> type2 = type2.astype(np.int)\n>>> uc = UnionCom.UnionCom()\n>>> integrated_data = uc.fit_transform(dataset=[data1,data2])\n>>> uc.test_LabelTA(integrated_data, [type1,type2])\n>>> uc.Visualize([data1,data2], integrated_data, mode='PCA') # without datatype\n>>> uc.Visualize([data1,data2], integrated_data, [type1,type2], mode='PCA') # with datatype\n```\n\n## Parameters of ```class UnionCom```\n\nThe list of parameters is given below:\n> + ```epoch_pd```: epoch of Prime-dual algorithm (default=2000).\n> + ```epoch_DNN```: epoch of training Deep Neural Network (default=100).\n> + ```epsilon```: training rate of data matching matrix F (default=0.01).\n> + ```lr```: training rate of DNN (default=0.001).\n> + ```batch_size```: training batch size of DNN (default=100).\n> + ```rho```: training damping term (default=10).\n> + ```delay```: delay steps of alpha (default=0).\n> + ```beta```: trade-off parameter of structure preserving and point matching (default=1).\n> + ```perplexity```: perplexity of tsne projection (default=30)\n> + ```kmax```: maximum value of knn when constructing geodesic distance matrix (default=40).\n> + ```output_dim```: output dimension of integrated data (default=32).\n\nThe other parameters include:\n> + ```log_pd```: log step of Prime Dual (default=1000).\n> + ```log_DNN```: log step of training DNN (default=10).\n> + ```manual_seed```: random seed (default=666).\n> + ```distance_mode```: mode of distance. ['geodesic' (suggested for multimodal integration), 'euclidean'(suggested for batch correction)] (default='geodesic').\n> + ```project_mode```: mode of project, ['tsne', 'barycentric'] (default='tsne').\n> + ```integration_type```: \"MultiOmics\" or \"BatchCorrect\". \"BatchCorrect\" needs aligned features. (default='MultiOmics')\n\n### Contact via caokai1073@gmail.com\n\n"
      },
      "source": "https://raw.githubusercontent.com/caokai1073/UnionCom/master/README.md",
      "technique": "header_analysis"
    }
  ]
}