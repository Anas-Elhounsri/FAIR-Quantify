{
  "application_domain": [
    {
      "confidence": 0.9820122608671242,
      "result": {
        "type": "String",
        "value": "Graphs"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "format": "bibtex",
        "type": "File_dump",
        "value": "@software{Moroni_Monticone_MultilayerGraphs_2022,\n         abstract     = {A Julia package for the creation, manipulation and analysis of the structure, dynamics and functions of multilayer graphs.},\n         author       = {Moroni, Claudio and Monticone, Pietro},\n         doi          = {10.5281/zenodo.7009172},\n         institution  = {University of Turin (UniTO)},\n         keywords     = {Julia Language, Julia Package, Graph Theory, Applied Graph Theory, Network Theory, Network Science, Graphs, Multilayer Graphs, Multilevel Graphs, Hierarchical Graphs, Networks, Multilayer Networks, Multilevel Networks, Hierarchical Networks, Complexity, Complex Systems},\n         license      = {MIT},\n         organization = {Interdisciplinary Physics Team (InPhyT)},\n         title        = {MultilayerGraphs.jl},\n         url          = {https://doi.org/10.5281/zenodo.7009172},\n         year         = {2022}\n         }"
      },
      "source": "https://raw.githubusercontent.com/JuliaGraphs/MultilayerGraphs.jl/main/CITATION.bib",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "\ud83c\udf93 How to Cite",
        "parent_header": [
          "MultilayerGraphs.jl"
        ],
        "type": "Text_excerpt",
        "value": "If you utilize this package in your project, please consider citing this repository using the citation information provided in [`CITATION.bib`](https://github.com/JuliaGraphs/MultilayerGraphs.jl/blob/main/CITATION.bib). \n\nThis will help to give appropriate credit to the [contributors](https://github.com/JuliaGraphs/MultilayerGraphs.jl/graphs/contributors) and support the continued development of the package.\n"
      },
      "source": "https://raw.githubusercontent.com/JuliaGraphs/MultilayerGraphs.jl/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "\ud83d\udcda References",
        "parent_header": [
          "MultilayerGraphs.jl"
        ],
        "type": "Text_excerpt",
        "value": "1. De Domenico et al. (2013) [Mathematical Formulation of Multilayer Networks](https://doi.org/10.1103/PhysRevX.3.041022). *Physical Review X*; \n2. Kivel\u00e4 et al. (2014) [Multilayer networks](https://doi.org/10.1093/comnet/cnu016). *Journal of Complex Networks*; \n3. Boccaletti et al. (2014) [The structure and dynamics of multilayer networks](https://doi.org/10.1016/j.physrep.2014.07.001). *Physics Reports*; \n4. Lee et al. (2015) [Towards real-world complexity: an introduction to multiplex networks](https://doi.org/10.1140/epjb/e2015-50742-1). *The European Physical Journal B*; \n5. Bianconi (2018) [Multilayer Networks: Structure and Function](https://global.oup.com/academic/product/multilayer-networks-9780192865540). *Oxford University Press*;\n6. Cozzo et al. (2018) [Multiplex Networks: Basic Formalism and Structural Properties](https://doi.org/10.1007/978-3-319-92255-3). *SpringerBriefs in Complexity*; \n7. Aleta and Moreno (2019) [Multilayer Networks in a Nutshell](https://doi.org/10.1146/annurev-conmatphys-031218-013259). *Annual Review of Condensed Matter Physics*; \n8. Artime et al. (2022) [Multilayer Network Science: From Cells to Societies](https://doi.org/10.1017/9781009085809). *Cambridge University Press*; \n9. De Domenico (2022) [Multilayer Networks: Analysis and Visualization](https://doi.org/10.1007/978-3-030-75718-2). *Springer Cham*. \n10. De Domenico (2023) [More is different in real-world multilayer networks](https://doi.org/10.1038/s41567-023-02132-1). *Nature Physics*"
      },
      "source": "https://raw.githubusercontent.com/JuliaGraphs/MultilayerGraphs.jl/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/JuliaGraphs/MultilayerGraphs.jl"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "original_header": "\ud83d\udee0 How to Contribute",
        "parent_header": [
          "MultilayerGraphs.jl"
        ],
        "type": "Text_excerpt",
        "value": "The ongoing development of this package would greatly benefit from the valuable feedback of the esteemed members of the [JuliaGraph](https://github.com/orgs/JuliaGraphs/people) community, as well as from graph theorists, network scientists, and any users who may have general questions or suggestions. \n\nWe therefore encourage you to participate in [discussions](https://github.com/JuliaGraphs/MultilayerGraphs.jl/discussions), raise [issues](https://github.com/JuliaGraphs/MultilayerGraphs.jl/issues), or submit [pull requests](https://github.com/JuliaGraphs/MultilayerGraphs.jl/pulls). Your contributions are welcome!\n"
      },
      "source": "https://raw.githubusercontent.com/JuliaGraphs/MultilayerGraphs.jl/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-05-09T16:00:24Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-21T09:09:06Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A Julia package for the creation, manipulation and analysis of the structure, dynamics and functions of multilayer graphs."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9977203183714614,
      "result": {
        "original_header": "MultilayerGraphs.jl",
        "type": "Text_excerpt",
        "value": "**MultilayerGraphs.jl** is a Julia package for the creation, manipulation and analysis of the structure, dynamics and functions of multilayer graphs. \n \n"
      },
      "source": "https://raw.githubusercontent.com/JuliaGraphs/MultilayerGraphs.jl/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9663343424608238,
      "result": {
        "original_header": "\ud83c\udf10 Overview",
        "type": "Text_excerpt",
        "value": "A multilayer graph is a graph consisting of multiple standard subgraphs called *layers* which can be interconnected through [bipartite graphs](https://en.wikipedia.org/wiki/Bipartite_graph) called *interlayers* composed of the vertex sets of two different layers and the edges between them. The vertices in each layer represent a single set of nodes, although not all nodes have to be represented in every layer.  \n- $V$ is the set of vertices;\n- $E$ is the set of edges, pairs of nodes $(u, v)$ representing a connection, relationship or interaction between the nodes $u$ and $v$;\n- $L$ is a set of layers, which are subsets of $V$ and $E$ encoding the nodes and edges within each layer. \nEach layer $\\ell$ in $L$ is a tuple $(V_\\ell, E_\\ell)$, where $V_\\ell$ is a subset of $V$ that represents the vertices within that layer, and $E_\\ell$ is a subset of $E$ that represents the edges within that layer. \nMultilayer graphs have been adopted to model the structure and dynamics of a wide spectrum of high-dimensional, non-linear, multi-scale, time-dependent complex systems including physical, chemical, biological, neuronal, socio-technical, epidemiological, ecological and economic networks ([Cozzo et al. (2013)](https://doi.org/10.1103/physreve.88.050801); [Granell et al. (2013)](https://doi.org/10.1103/physrevlett.111.128701); [Massaro and Bagnoli (2014)](https://doi.org/10.1103/physreve.90.052817); [Estrada and Gomez-Gardenes (2014)](https://doi.org/10.1103/physreve.89.042819); [Azimi-Tafreshi (2016)](https://doi.org/10.1103/physreve.93.042303); [Baggio et al. (2016)](https://doi.org/10.1073/pnas.1604401113); [DeDomenico et al. (2016)](https://doi.org/10.1038/nphys3865); [Amato et al. (2017)](https://doi.org/10.1038/s41598-017-06933-2); [DeDomenico (2017)](https://doi.org/10.1093/gigascience/gix004); [Pilosof et al. (2017)](https://doi.org/10.1038/s41559-017-0101); [de Arruda et al. (2017)](https://doi.org/10.1103/physrevx.7.011014); [Gosak et al. (2018)](https://doi.org/10.1016/j.plrev.2017.11.003); [Soriano-Panos et al. (2018)](https://doi.org/10.1103/physrevx.8.031039); [Timteo et al. (2018)](https://doi.org/10.1038/s41467-017-02658-y); [Buld\u00fa et al. (2018)](https://doi.org/10.1162/netn_a_00033); [Lim et al. (2019)](https://doi.org/10.1038/s41598-019-39243-w); [Mangioni et al. (2020)](https://doi.org/10.1109/tnse.2018.2871726); [Aleta et al. (2020)](https://doi.org/10.1038/s41562-020-0931-9); [Aleta et al. (2022)](https://doi.org/10.1073/pnas.2112182119)).  \nMultilayerGraphs.jl is an integral part of the [JuliaGraphs](https://github.com/JuliaGraphs) ecosystem extending [Graphs.jl](https://github.com/JuliaGraphs/Graphs.jl) so all the methods and metrics exported by Graphs.jl work for multilayer graphs, but due to the special nature of multilayer graphs the package features a peculiar implementation that maps a standard integer-labelled vertex representation to a more user-friendly framework exporting all the objects an experienced practitioner would expect such as nodes (`Node`), vertices (`MultilayerVertex`), layers (`Layer`), interlayers (`Interlayer`), etc. \nMultilayerGraphs.jl features multilayer-specific methods and metrics including the global clustering coefficient, the overlay clustering coefficient, the multilayer eigenvector centrality, the multilayer modularity and the Von Neumann entropy. \n"
      },
      "source": "https://raw.githubusercontent.com/JuliaGraphs/MultilayerGraphs.jl/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9259959028045659,
      "result": {
        "original_header": "<a href=\"http://www.fields.utoronto.ca/activities/22-23/waw2023\">18th Workshop on Algorithms and Models for Web Graphs</a>",
        "type": "Text_excerpt",
        "value": "- **When:** 2023/05/23 - 2023/05/26\n- **Where:** [The Fields Institute](http://www.fields.utoronto.ca/), Toronto, Canada\n- **Who:** [Pietro Monticone](https://github.com/pitmonticone) and [Claudio Moroni](https://github.com/ClaudMor)\n- **What:** \"Multilayer Network Science in Julia with [`MultilayerGraphs.jl`](https://github.com/JuliaGraphs/MultilayerGraphs.jl)\" ([Website](http://www.fields.utoronto.ca/talks/Multilayer-Network-Science-Julia-MultilayerGraphsjl), [Slides](https://inphyt.github.io/Talks/2023/WAW/index.html), [Video](https://youtu.be/hB8Vrwkwax0)) \n"
      },
      "source": "https://raw.githubusercontent.com/JuliaGraphs/MultilayerGraphs.jl/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9205710146596346,
      "result": {
        "original_header": "<a href=\"https://juliacon.org/2023/\">JuliaCon 2023</a>",
        "type": "Text_excerpt",
        "value": "- **When:** 2023/07/25 - 2023/07/29\n- **Where:** [Massachusetts Institute of Technology](https://www.mit.edu), Cambridge, MA, USA\n- **Who:** [Pietro Monticone](https://github.com/pitmonticone) and [Claudio Moroni](https://github.com/ClaudMor)\n- **What:** \"[`MultilayerGraphs.jl`](https://github.com/JuliaGraphs/MultilayerGraphs.jl): Multilayer Network Science in Julia\" ([Website](https://pretalx.com/juliacon2023/talk/MS7YWQ/), [Short Presentation](https://inphyt.github.io/Talks/2023/JuliaCon/short/index.html), [Long Presentation](https://inphyt.github.io/Talks/2023/JuliaCon/long/index.html), [Video](https://youtu.be/Q2PwKQCkZJ4)) \n"
      },
      "source": "https://raw.githubusercontent.com/JuliaGraphs/MultilayerGraphs.jl/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9974465054855304,
      "result": {
        "original_header": "Python",
        "type": "Text_excerpt",
        "value": "Here is a list of software packages for the creation, manipulation, analysis and visualisation of multilayer graphs implemented in the [Python language](https://www.python.org):  \n"
      },
      "source": "https://raw.githubusercontent.com/JuliaGraphs/MultilayerGraphs.jl/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9884197392145467,
      "result": {
        "original_header": "R",
        "type": "Text_excerpt",
        "value": "- [`muxViz`](https://github.com/manlius/muxViz) implements functions to perform multilayer correlation analysis, multilayer centrality analysis, multilayer community structure detection, multilayer structural reducibility, multilayer motifs analysis and utilities to statically and dynamically visualise multilayer graphs;\n- [`multinet`](https://github.com/cran/multinet) implements functions to import, export, create and manipulate multilayer graphs, several state-of-the-art multiplex graph analysis algorithms for centrality measures, layer comparison, community detection and visualization;\n- [`mully`](https://github.com/frankkramer-lab/mully) implements functions to import, export, create, manipulate and merge multilayer graphs and utilities to visualise multilayer graphs in 2D and 3D;\n- [`multinets`](https://github.com/neylsoncrepalde/multinets) implements functions to import, export, create, manipulate multilayer graphs and utilities to visualise multilayer graphs.\n \n"
      },
      "source": "https://raw.githubusercontent.com/JuliaGraphs/MultilayerGraphs.jl/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9954928204003023,
      "result": {
        "original_header": "Python",
        "type": "Text_excerpt",
        "value": "- [`MultiNetX`](https://github.com/nkoub/multinetx) implements methods to create undirected networks with weighted or unweighted links, to analyse the spectral properties of adjacency or Laplacian matrices and to visualise multilayer graphs and dynamical processes by coloring the nodes and links accordingly;\n- [`PyMNet`](https://github.com/bolozna/Multilayer-networks-library) implements data structures for multilayer graphs and multiplex graphs, methods to import, export, create, manipulate multilayer graphs and for the rule-based generation and lazy-evaluation of coupling edges and utilities to visualise multilayer graphs.\n \n"
      },
      "source": "https://raw.githubusercontent.com/JuliaGraphs/MultilayerGraphs.jl/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9568214811229582,
      "result": {
        "original_header": "Julia",
        "type": "Text_excerpt",
        "value": "At the best of our knowledge there are currently no software packages dedicated to the creation, manipulation and analysis of multilayer graphs implemented in the [Julia language](https://julialang.org) apart from MultilayerGraphs.jl itself.\n \n"
      },
      "source": "https://raw.githubusercontent.com/JuliaGraphs/MultilayerGraphs.jl/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/JuliaGraphs/MultilayerGraphs.jl/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/JuliaGraphs/MultilayerGraphs.jl/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "JuliaGraphs/MultilayerGraphs.jl"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MultilayerGraphs.jl"
      },
      "source": "https://raw.githubusercontent.com/JuliaGraphs/MultilayerGraphs.jl/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://joss.theoj.org/papers/7d1b94ff7a1a2ebd5e86075e86fc62fb/status.svg"
      },
      "source": "https://raw.githubusercontent.com/JuliaGraphs/MultilayerGraphs.jl/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://i.ytimg.com/vi/hB8Vrwkwax0/maxresdefault.jpg"
      },
      "source": "https://raw.githubusercontent.com/JuliaGraphs/MultilayerGraphs.jl/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://i.ytimg.com/vi/Q2PwKQCkZJ4/maxresdefault.jpg"
      },
      "source": "https://raw.githubusercontent.com/JuliaGraphs/MultilayerGraphs.jl/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "\ud83d\udd30 Installation",
        "parent_header": [
          "MultilayerGraphs.jl"
        ],
        "type": "Text_excerpt",
        "value": "To install the latest stable release of MultilayerGraphs.jl, make sure you have [installed](https://julialang.org/downloads/) Julia v1.8 or later and run the following command:\n\n``` julia\nusing Pkg\nPkg.add(\"MultilayerGraphs\")\n```\n\nThe development version can be installed as follows:\n\n``` julia\nusing Pkg\nPkg.add(url=\"https://github.com/JuliaGraphs/MultilayerGraphs.jl\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/JuliaGraphs/MultilayerGraphs.jl/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9907074264032747,
      "result": {
        "original_header": "MultilayerGraphs.jl",
        "type": "Text_excerpt",
        "value": "<img align=\"right\" width=\"220\" height=\"220\" src=\"https://github.com/JuliaGraphs/MultilayerGraphs.jl/blob/main/docs/src/assets/logo.png?raw=true\"> \n"
      },
      "source": "https://raw.githubusercontent.com/JuliaGraphs/MultilayerGraphs.jl/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8084728393638829,
      "result": {
        "original_header": "MultilayerGraphs.jl",
        "type": "Text_excerpt",
        "value": "<img align=\"right\" width=\"220\" height=\"220\" src=\"https://github.com/JuliaGraphs/MultilayerGraphs.jl/blob/main/docs/src/assets/logo.png?raw=true\"> \n"
      },
      "source": "https://raw.githubusercontent.com/JuliaGraphs/MultilayerGraphs.jl/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/JuliaGraphs/MultilayerGraphs.jl/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "complex-networks, complex-systems, discrete-mathematics, graph, graph-algorithms, graph-theory, graph-theory-algorithms, graph-theory-analysis, graphs, julia, julia-language, julia-package, multilayer-graphs, multilayer-network, multilayer-networks, multiplex-networks, network, network-analysis, network-science, networks"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2022 Interdisciplinary Physics Team (InPhyT)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/JuliaGraphs/MultilayerGraphs.jl/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/JuliaGraphs/MultilayerGraphs.jl/main/docs/src/assets/logo.png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/JuliaGraphs/MultilayerGraphs.jl/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MultilayerGraphs.jl"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "JuliaGraphs"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Julia",
        "size": 445001,
        "type": "Programming_language",
        "value": "Julia"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/JuliaGraphs/MultilayerGraphs.jl/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2023-03-03T18:50:52Z",
        "date_published": "2023-03-03T18:50:54Z",
        "description": "## MultilayerGraphs v1.1.4\r\n\r\n[Diff since v1.1.3](https://github.com/JuliaGraphs/MultilayerGraphs.jl/compare/v1.1.3...v1.1.4)\r\n\r\n\r\n**Closed issues:**\r\n- [review JOSS] (#129)\r\n\r\n**Merged pull requests:**\r\n- Set version to 1.1.3 and update README (#123) (@pitmonticone, @ClaudMor)\r\n- Set version to 1.1.3 (#124) (@pitmonticone, @ClaudMor)\r\n- Set version to 1.1.3 (#125) (@pitmonticone, @ClaudMor)\r\n- Update installation instructions and issue templates (#126) (@pitmonticone, @ClaudMor)\r\n- Update installation instructions and issue templates (#127) (@pitmonticone, @ClaudMor)\r\n- Update installation instructions and issue templates (#128) (@pitmonticone, @ClaudMor)\r\n- Integrate review feedbacks (#130) (@pitmonticone, @ClaudMor)\r\n- Integrate review feedbacks (#131) (@pitmonticone, @ClaudMor)\r\n- Integrate review feedbacks (#132) (@pitmonticone, @ClaudMor)",
        "html_url": "https://github.com/JuliaGraphs/MultilayerGraphs.jl/releases/tag/v1.1.4",
        "name": "v1.1.4",
        "release_id": 94454680,
        "tag": "v1.1.4",
        "tarball_url": "https://api.github.com/repos/JuliaGraphs/MultilayerGraphs.jl/tarball/v1.1.4",
        "type": "Release",
        "url": "https://api.github.com/repos/JuliaGraphs/MultilayerGraphs.jl/releases/94454680",
        "value": "https://api.github.com/repos/JuliaGraphs/MultilayerGraphs.jl/releases/94454680",
        "zipball_url": "https://api.github.com/repos/JuliaGraphs/MultilayerGraphs.jl/zipball/v1.1.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2023-01-27T14:30:15Z",
        "date_published": "2023-01-27T14:30:16Z",
        "description": "## MultilayerGraphs v1.1.3\r\n\r\n[Diff since v1.1.2](https://github.com/JuliaGraphs/MultilayerGraphs.jl/compare/v1.1.2...v1.1.3)\r\n\r\n\r\n**Closed issues:**\r\n- Improve logo (#73)\r\n\r\n**Merged pull requests:**\r\n- Improve docs (#114) (@pitmonticone, @ClaudMor)\r\n- Improve docs (#115) (@pitmonticone, @ClaudMor)\r\n- Improve docs (#116) (@pitmonticone, @ClaudMor)\r\n- Improve docs (#117) (@pitmonticone, @ClaudMor)\r\n- Improve logo (#118) (@pitmonticone, @ClaudMor)\r\n- Improve logo (#119) (@pitmonticone, @ClaudMor)\r\n- Improve logo (#120) (@pitmonticone, @ClaudMor)\r\n- Improve logo (#121) (@pitmonticone, @ClaudMor)\r\n- Improve logo (#122) (@pitmonticone, @ClaudMor)",
        "html_url": "https://github.com/JuliaGraphs/MultilayerGraphs.jl/releases/tag/v1.1.3",
        "name": "v1.1.3",
        "release_id": 90427540,
        "tag": "v1.1.3",
        "tarball_url": "https://api.github.com/repos/JuliaGraphs/MultilayerGraphs.jl/tarball/v1.1.3",
        "type": "Release",
        "url": "https://api.github.com/repos/JuliaGraphs/MultilayerGraphs.jl/releases/90427540",
        "value": "https://api.github.com/repos/JuliaGraphs/MultilayerGraphs.jl/releases/90427540",
        "zipball_url": "https://api.github.com/repos/JuliaGraphs/MultilayerGraphs.jl/zipball/v1.1.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2023-01-26T11:43:33Z",
        "date_published": "2023-01-26T11:43:35Z",
        "description": "## MultilayerGraphs v1.1.2\r\n\r\n[Diff since v1.1.1](https://github.com/JuliaGraphs/MultilayerGraphs.jl/compare/v1.1.1...v1.1.2)\r\n\r\n\r\n**Closed issues:**\r\n- Add example folder (#79)\r\n- Implement a sub-ecosystem for multilayer graphs (preliminary) (#105)\r\n- Implement `NodeAlignedEdgeColored(Di)Graph` (#106)\r\n\r\n**Merged pull requests:**\r\n- Rebase on \"main\" branch (#66) (@pitmonticone, @ClaudMor)\r\n- Set version to 1.1.1 (#67) (@pitmonticone, @ClaudMor)\r\n- Add JOSS submission badge (#69) (@pitmonticone, @ClaudMor)\r\n- Add JOSS submission badge (#70) (@pitmonticone, @ClaudMor)\r\n- Update the README (#71) (@pitmonticone, @ClaudMor)\r\n- Update README (#72) (@pitmonticone, @ClaudMor)\r\n- Update README.md (#74) (@pitmonticone, @ClaudMor)\r\n- Update README.md (#75) (@pitmonticone, @ClaudMor)\r\n- Add v1.1 announcement posts in README and docs (#76) (@pitmonticone, @ClaudMor)\r\n- Add v1.1 announcement posts to README and docs (#77) (@pitmonticone, @ClaudMor)\r\n- Add example folder (#80) (@pitmonticone, @ClaudMor)\r\n- Add example folder (#81) (@pitmonticone, @ClaudMor)\r\n- Update \"Future Developments\" section in README and docs  (#96) (@pitmonticone, @ClaudMor)\r\n- Update \"Future Developments\" section in README and docs (#97) (@pitmonticone, @ClaudMor)\r\n- Update \"Future Developments\" section in README and docs (#98) (@pitmonticone, @ClaudMor)\r\n- Update \"Future Developments\" section in README and docs (#99) (@pitmonticone, @ClaudMor)\r\n- Fix bugs in README and example (#101) (@pitmonticone, @ClaudMor)\r\n- Fix bugs in README and example (#102) (@pitmonticone, @ClaudMor)\r\n- Fix bugs in README and example (#103) (@pitmonticone, @ClaudMor)\r\n- Fix bugs in README and example (#104) (@pitmonticone, @ClaudMor)\r\n- Traits based sub ecosystem & `NodeAlingnedEdgeColored(Di)Graph` (#107) (@pitmonticone, @ClaudMor)\r\n- Traits based sub ecosystem & `NodeAlingnedEdgeColored(Di)Graph` (#110) (@pitmonticone, @ClaudMor)\r\n- Traits based sub ecosystem & `NodeAlingnedEdgeColored(Di)Graph` (#111) (@pitmonticone, @ClaudMor)\r\n- Traits based sub ecosystem & `NodeAlingnedEdgeColored(Di)Graph` (#112) (@pitmonticone, @ClaudMor)",
        "html_url": "https://github.com/JuliaGraphs/MultilayerGraphs.jl/releases/tag/v1.1.2",
        "name": "v1.1.2",
        "release_id": 90288482,
        "tag": "v1.1.2",
        "tarball_url": "https://api.github.com/repos/JuliaGraphs/MultilayerGraphs.jl/tarball/v1.1.2",
        "type": "Release",
        "url": "https://api.github.com/repos/JuliaGraphs/MultilayerGraphs.jl/releases/90288482",
        "value": "https://api.github.com/repos/JuliaGraphs/MultilayerGraphs.jl/releases/90288482",
        "zipball_url": "https://api.github.com/repos/JuliaGraphs/MultilayerGraphs.jl/zipball/v1.1.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2023-01-07T14:34:55Z",
        "date_published": "2023-01-07T14:34:55Z",
        "description": "## MultilayerGraphs v1.1.1\r\n\r\n[Diff since v1.1.0](https://github.com/JuliaGraphs/MultilayerGraphs.jl/compare/v1.1.0...v1.1.1)\r\n\r\n\r\n**Closed issues:**\r\n- Update API, README and docs with minor fixes (#60)\r\n\r\n**Merged pull requests:**\r\n- General improvements to the user experience (#56) (@pitmonticone, @ClaudMor)\r\n- Update LICENSE (#57) (@pitmonticone, @ClaudMor)\r\n- Update API, README and docs with minor fixes (#64) (@pitmonticone, @ClaudMor)\r\n- Clean docs (#65) (@pitmonticone, @ClaudMor)",
        "html_url": "https://github.com/JuliaGraphs/MultilayerGraphs.jl/releases/tag/v1.1.1",
        "name": "v1.1.1",
        "release_id": 88210266,
        "tag": "v1.1.1",
        "tarball_url": "https://api.github.com/repos/JuliaGraphs/MultilayerGraphs.jl/tarball/v1.1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/JuliaGraphs/MultilayerGraphs.jl/releases/88210266",
        "value": "https://api.github.com/repos/JuliaGraphs/MultilayerGraphs.jl/releases/88210266",
        "zipball_url": "https://api.github.com/repos/JuliaGraphs/MultilayerGraphs.jl/zipball/v1.1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2023-01-03T00:40:38Z",
        "date_published": "2023-01-03T00:40:40Z",
        "description": "## MultilayerGraphs v1.1.0\r\n\r\n[Diff since v1.0.2](https://github.com/JuliaGraphs/MultilayerGraphs.jl/compare/v1.0.2...v1.1.0)\r\n\r\n\r\n**Closed issues:**\r\n- Implement more general configuration models / graph generators (#33)\r\n- Improve readability of console print of custom struct  (#43)\r\n- Implement configuration models / graph generators for layers  (#47)\r\n- Implement more user-friendly constructors for `Layer`s and `Interlayer`s (#52)\r\n\r\n**Merged pull requests:**\r\n- Update README and docs (#45) (@pitmonticone, @ClaudMor)\r\n- Update README and docs (#49) (@pitmonticone, @ClaudMor)\r\n- Update README and docs (#50) (@pitmonticone, @ClaudMor)\r\n- Update README and docs (#51) (@pitmonticone, @ClaudMor)\r\n- General improvements to the user experience (#55) (@ClaudMor, @pitmonticone)",
        "html_url": "https://github.com/JuliaGraphs/MultilayerGraphs.jl/releases/tag/v1.1.0",
        "name": "v1.1.0",
        "release_id": 87727554,
        "tag": "v1.1.0",
        "tarball_url": "https://api.github.com/repos/JuliaGraphs/MultilayerGraphs.jl/tarball/v1.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/JuliaGraphs/MultilayerGraphs.jl/releases/87727554",
        "value": "https://api.github.com/repos/JuliaGraphs/MultilayerGraphs.jl/releases/87727554",
        "zipball_url": "https://api.github.com/repos/JuliaGraphs/MultilayerGraphs.jl/zipball/v1.1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2022-12-21T14:52:05Z",
        "date_published": "2022-12-21T14:52:06Z",
        "description": "## MultilayerGraphs v1.0.2\r\n\r\n[Diff since v1.0.1](https://github.com/JuliaGraphs/MultilayerGraphs.jl/compare/v1.0.1...v1.0.2)\r\n\r\n- Delete useless files (@ClaudMor, @pitmonticone);\r\n- Update badges in README (@ClaudMor, @pitmonticone);\r\n- Update CI workflow (@ClaudMor, @pitmonticone).",
        "html_url": "https://github.com/JuliaGraphs/MultilayerGraphs.jl/releases/tag/v1.0.2",
        "name": "v1.0.2",
        "release_id": 86799102,
        "tag": "v1.0.2",
        "tarball_url": "https://api.github.com/repos/JuliaGraphs/MultilayerGraphs.jl/tarball/v1.0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/JuliaGraphs/MultilayerGraphs.jl/releases/86799102",
        "value": "https://api.github.com/repos/JuliaGraphs/MultilayerGraphs.jl/releases/86799102",
        "zipball_url": "https://api.github.com/repos/JuliaGraphs/MultilayerGraphs.jl/zipball/v1.0.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2022-12-16T23:27:34Z",
        "date_published": "2022-12-16T23:27:35Z",
        "description": "## MultilayerGraphs v1.0.1\r\n\r\n[Diff since v1.0.0](https://github.com/JuliaGraphs/MultilayerGraphs.jl/compare/v1.0.0...v1.0.1)\r\n\r\n- Update CI and TagBot workflows to fix stable docs (@ClaudMor, @pitmonticone)",
        "html_url": "https://github.com/JuliaGraphs/MultilayerGraphs.jl/releases/tag/v1.0.1",
        "name": "v1.0.1",
        "release_id": 86377573,
        "tag": "v1.0.1",
        "tarball_url": "https://api.github.com/repos/JuliaGraphs/MultilayerGraphs.jl/tarball/v1.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/JuliaGraphs/MultilayerGraphs.jl/releases/86377573",
        "value": "https://api.github.com/repos/JuliaGraphs/MultilayerGraphs.jl/releases/86377573",
        "zipball_url": "https://api.github.com/repos/JuliaGraphs/MultilayerGraphs.jl/zipball/v1.0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2022-12-16T19:27:07Z",
        "date_published": "2022-12-16T19:27:08Z",
        "description": "## MultilayerGraphs v1.0.0\r\n\r\n[Diff since v0.1.2](https://github.com/JuliaGraphs/MultilayerGraphs.jl/compare/v0.1.2...v1.0.0)\r\n\r\n\r\n**Closed issues:**\r\n- Implement general multilayer graph (#25)\r\n- Develop integration with Agents.jl (#26)\r\n- Implement a configuration model-like multilayer graph generator (#27)\r\n- Implement weight tensor, metadata tensor and supra weight matrix (#28)\r\n- Make concrete `MultilayerGraph` and `MultilayerDiGraph` NOT graph wrappers (#29)\r\n- Implement uniform, standard and \"transparent\" interface for layers and interlayers (#30)\r\n- Implement faster graph realization algorithms (#32)\r\n\r\n**Merged pull requests:**\r\n- New MultilayerGraphs.jl Pre-Release (#31) (@ClaudMor, @pitmonticone)\r\n- Implement faster graph realization algorithms (#41) (@ClaudMor, @pitmonticone)",
        "html_url": "https://github.com/JuliaGraphs/MultilayerGraphs.jl/releases/tag/v1.0.0",
        "name": "v1.0.0",
        "release_id": 86357466,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/JuliaGraphs/MultilayerGraphs.jl/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/JuliaGraphs/MultilayerGraphs.jl/releases/86357466",
        "value": "https://api.github.com/repos/JuliaGraphs/MultilayerGraphs.jl/releases/86357466",
        "zipball_url": "https://api.github.com/repos/JuliaGraphs/MultilayerGraphs.jl/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "github-actions[bot]",
          "type": "Bot"
        },
        "date_created": "2022-08-27T20:14:43Z",
        "date_published": "2022-08-27T20:14:44Z",
        "description": "## MultilayerGraphs v0.1.2\r\n\r\n[Diff since v0.1.1](https://github.com/JuliaGraphs/MultilayerGraphs.jl/compare/v0.1.1...v0.1.2)\r\n\r\n\r\n**Closed issues:**\r\n- TagBot trigger issue (#19)\r\n- Random MultilayerGraph generation should be a utility function (#22)\r\n- Provide better support for multiplex graphs (#23)\r\n\r\n**Merged pull requests:**\r\n- Provide better support for multiplex graphs (#24) (@InterdisciplinaryPhysicsTeam, @ClaudMor, @pitmonticone)",
        "html_url": "https://github.com/JuliaGraphs/MultilayerGraphs.jl/releases/tag/v0.1.2",
        "name": "v0.1.2",
        "release_id": 75551191,
        "tag": "v0.1.2",
        "tarball_url": "https://api.github.com/repos/JuliaGraphs/MultilayerGraphs.jl/tarball/v0.1.2",
        "type": "Release",
        "url": "https://api.github.com/repos/JuliaGraphs/MultilayerGraphs.jl/releases/75551191",
        "value": "https://api.github.com/repos/JuliaGraphs/MultilayerGraphs.jl/releases/75551191",
        "zipball_url": "https://api.github.com/repos/JuliaGraphs/MultilayerGraphs.jl/zipball/v0.1.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "InterdisciplinaryPhysicsTeam",
          "type": "User"
        },
        "date_created": "2022-08-18T22:29:23Z",
        "date_published": "2022-08-19T07:35:09Z",
        "description": "# MultilayerGraphs v0.1.1\r\n\r\n## Authors \r\n- @ClaudMor (@InterdisciplinaryPhysicsTeam)\r\n- @pitmonticone (@InterdisciplinaryPhysicsTeam)",
        "html_url": "https://github.com/JuliaGraphs/MultilayerGraphs.jl/releases/tag/v0.1.1",
        "name": "v0.1.1",
        "release_id": 74805310,
        "tag": "v0.1.1",
        "tarball_url": "https://api.github.com/repos/JuliaGraphs/MultilayerGraphs.jl/tarball/v0.1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/JuliaGraphs/MultilayerGraphs.jl/releases/74805310",
        "value": "https://api.github.com/repos/JuliaGraphs/MultilayerGraphs.jl/releases/74805310",
        "zipball_url": "https://api.github.com/repos/JuliaGraphs/MultilayerGraphs.jl/zipball/v0.1.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:08:12",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 117
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "\ud83d\udd0d Usage",
        "parent_header": [
          "MultilayerGraphs.jl"
        ],
        "type": "Text_excerpt",
        "value": "Let's begin by importing the necessary dependencies and setting the relevant constants.\n\n```julia\n# Import necessary dependencies\nusing Distributions, Graphs, SimpleValueGraphs\nusing MultilayerGraphs\n# Set the number of nodes\nconst n_nodes = 100 \n# Create a list of nodes\nconst node_list = [Node(\"node_$i\") for i in 1:n_nodes]\n```\n"
      },
      "source": "https://raw.githubusercontent.com/JuliaGraphs/MultilayerGraphs.jl/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Layers and Interlayers",
        "parent_header": [
          "MultilayerGraphs.jl",
          "\ud83d\udd0d Usage"
        ],
        "type": "Text_excerpt",
        "value": "We will instantiate layers and interlayers with randomly-selected edges and vertices adopting a variety of techniques. Layers and Interlayers are not immutable, and mostly behave like normal graphs. The user is invited to consult the [API](https://juliagraphs.org/MultilayerGraphs.jl/stable/API/) for further details.\n\nHere we define a layer with an underlying simple directed graph using a graph generator-like (or \"configuration model\"-like) constructor which allows us to specify both the **indegree** and the **outdegree sequences**. Before instantiating each layer we sample the number of its vertices and, optionally, of its edges.\n\n```julia\n# Create a simple directed layer\nn_vertices = rand(1:100)                          # Number of vertices \nlayer_simple_directed = layer_simpledigraph(      # Layer constructor \n    :layer_simple_directed,                       # Layer name\n    sample(node_list, n_vertices; replace=false), # Nodes represented in the layer\n    Truncated(Normal(5, 5), 0, 20), # Indegree sequence distribution \n    Truncated(Normal(5, 5), 0, 20)  # Outdegree sequence distribution\n)\n```\n\nThen we define a layer with an underlying simple weighted directed graph. This is another kind of constructor that allows the user to specify the number of edges to be randomly distributed among vertices. \n\n```julia\n# Create a simple directed weighted layer\nn_vertices = rand(1:n_nodes)                                   # Number of vertices \nn_edges = rand(n_vertices:(n_vertices * (n_vertices - 1) - 1)) # Number of edges \nlayer_simple_directed_weighted = layer_simpleweighteddigraph(  # Layer constructor \n    :layer_simple_directed_weighted,                           # Layer name\n    sample(node_list, n_vertices; replace=false), # Nodes represented in the layer\n    n_edges;                                 # Number of randomly distributed edges\n    default_edge_weight=(src, dst) -> rand() # Function assigning weights to edges \n)\n```\n\nSimilar constructors, more flexible at the cost of ease of use, enable a finer tuning. The constructor we use below should be necessary only in rare circumstances, e.g. if the equivalent simplified constructor `layer_simplevaldigraph` is not able to infer the correct return types of `default_vertex_metadata` or `default_edge_metadata`, or to use and underlying graph structure that isn't currently supported.\n\n```julia\n# Create a simple directed value layer\nn_vertices = rand(1:n_nodes)                                   # Number of vertices \nn_edges = rand(n_vertices:(n_vertices * (n_vertices - 1) - 1)) # Number of edges \ndefault_vertex_metadata = v -> (\"vertex_$(v)_metadata\",)       # Vertex metadata \ndefault_edge_metadata = (s, d) -> (rand(),)                    # Edge metadata \nlayer_simple_directed_value = Layer(                           # Layer constructor\n    :layer_simple_directed_value,                              # Layer name\n    sample(node_list, n_vertices; replace=false), # Nodes represented in the layer\n    n_edges,                                      # Number of randomly distributed edges\n    ValDiGraph(                                                \n        SimpleDiGraph{Int64}(); \n        vertexval_types=(String,),\n        vertexval_init=default_vertex_metadata,\n        edgeval_types=(Float64,),\n        edgeval_init=default_edge_metadata,\n    ),\n    Float64;\n    default_vertex_metadata=default_vertex_metadata, # Vertex metadata \n    default_edge_metadata=default_edge_metadata      # Edge metadata \n)\n\n# Create a list of layers \nlayers = [layer_simple_directed, layer_simple_directed_weighted, layer_simple_directed_value]\n```\n\nThere are many more constructors the user is encouraged to explore in the package [documentation](https://juliagraphs.org/MultilayerGraphs.jl).\n\nThe interface of interlayers is very similar to that of layers. It is very important to notice that, in order to define a `Multilayer(Di)Graph`, interlayers don't need to be explicitly constructed by the user since they are automatically identified by the `Multilayer(Di)Graph` constructor, but for more complex interlayers the manual instantiation is required.\n\nHere we define an interlayer with an underlying simple directed graph.\n\n```julia\n# Create a simple directed interlayer\nn_vertices_1 = nv(layer_simple_directed)               # Number of vertices of layer 1\nn_vertices_2 = nv(layer_simple_directed_weighted)      # Number of vertices of layer 2\nn_edges = rand(1:(n_vertices_1 * n_vertices_2 - 1))    # Number of interlayer edges \ninterlayer_simple_directed = interlayer_simpledigraph( # Interlayer constructor \n    layer_simple_directed,                             # Layer 1 \n    layer_simple_directed_weighted,                    # Layer 2 \n    n_edges                                            # Number of edges \n)\n```\n\nThe interlayer exports a more flexible constructor too.\n\n```julia\n# Create a simple directed meta interlayer \nn_vertices_1 = nv(layer_simple_directed_weighted)   # Number of vertices of layer 1\nn_vertices_2 = nv(layer_simple_directed_value)      # Number of vertices of layer 2\nn_edges = rand(1:(n_vertices_1 * n_vertices_2 - 1)) # Number of interlayer edges \ninterlayer_simple_directed_meta = interlayer_metadigraph( # Interlayer constructor\n    layer_simple_directed_weighted,                       # Layer 1 \n    layer_simple_directed_value,                          # Layer 2\n    n_edges;                                              # Number of edges\n    default_edge_metadata=(src, dst) ->                   # Edge metadata \n        (edge_metadata=\"metadata_of_edge_from_$(src)_to_$(dst)\",),\n    transfer_vertex_metadata=true # Boolean deciding layer vertex metadata inheritance\n)\n\n# Create a list of interlayers \ninterlayers = [interlayer_simple_directed, interlayer_simple_directed_meta]\n```\n"
      },
      "source": "https://raw.githubusercontent.com/JuliaGraphs/MultilayerGraphs.jl/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Multilayer Graphs",
        "parent_header": [
          "MultilayerGraphs.jl",
          "\ud83d\udd0d Usage"
        ],
        "type": "Text_excerpt",
        "value": "Let's construct a directed multilayer graph (`MultilayerDiGraph`).\n\n```julia\n# Create a simple directed multilayer graph\nmultilayerdigraph = MultilayerDiGraph( # Constructor \n    layers,                     # The (ordered) collection of layers\n    interlayers;                # The manually specified interlayers\n                                # The interlayers that are left unspecified \n                                # will be automatically inserted according \n                                # to the keyword argument below\n    default_interlayers_structure=\"multiplex\" \n    # The automatically specified interlayers will have only diagonal couplings\n)\n\n# Layers and interlayer can be accessed as properties using their names\nmultilayerdigraph.layer_simple_directed_value\n```\n\nThen we proceed by showing how to add nodes, vertices and edges to a directed multilayer graph. The user may add vertices that do or do not represent nodes which are already present in the multilayer graph. In the latter case, we have to create a node first and then add the vertex representing such node to the multilayer graph. The vertex-level metadata are effectively considered only if the graph underlying the relevant layer or interlayer supports them, otherwise they are discarded. The same holds for edge-level metadata and/or weight. \n\n```julia\n# Create a node \nnew_node_1 = Node(\"new_node_1\")\n# Add the node to the multilayer graph \nadd_node!(multilayerdigraph, new_node_1)\n# Create a vertex representing the node \nnew_vertex_1 = MV(                # Constructor (alias for \"MultilayerVertex\")\n    new_node_1,                   # Node represented by the vertex\n    :layer_simple_directed_value, # Layer containing the vertex \n    (\"new_metadata\",)             # Vertex metadata \n)\n# Add the vertex \nadd_vertex!(\n    multilayerdigraph, # MultilayerDiGraph the vertex will be added to\n    new_vertex_1       # MultilayerVertex to add\n)\n\n# Create another node in another layer \nnew_node_2 = Node(\"new_node_2\")\n# Create another vertex representing the new node\nnew_vertex_2 = MV(new_node_2, :layer_simple_directed_value)\n# Add the new vertex\nadd_vertex!(\n    multilayerdigraph,\n    new_vertex_2;\n    add_node=true # Add the associated node before adding the vertex\n)\n# Create an edge \nnew_edge = MultilayerEdge(  # Constructor \n    new_vertex_1,           # Source vertex\n    new_vertex_2,           # Destination vertex \n    (\"some_edge_metadata\",) # Edge metadata \n)\n# Add the edge \nadd_edge!(\n    multilayerdigraph, # MultilayerDiGraph the edge will be added to\n    new_edge           # MultilayerVertex to add\n)\n```\n\nFinally we illustrate how to compute a few multilayer metrics such as the global clustering coefficient, the overlay clustering coefficient, the multilayer eigenvector centrality, and the multilayer modularity as defined in [De Domenico  et al. (2013)](https://doi.org/10.1103/physrevx.3.041022). \n\n```julia\n# Compute the global clustering coefficient\nmultilayer_global_clustering_coefficient(multilayerdigraph) \n# Compute the overlay clustering coefficient\noverlay_clustering_coefficient(multilayerdigraph)\n# Compute the multilayer eigenvector centrality \neigenvector_centrality(multilayerdigraph)\n# Compute the multilayer modularity \nmodularity(\n    multilayerdigraph,\n    rand([1, 2, 3, 4], length(nodes(multilayerdigraph)), length(multilayerdigraph.layers))\n)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/JuliaGraphs/MultilayerGraphs.jl/main/README.md",
      "technique": "header_analysis"
    }
  ]
}