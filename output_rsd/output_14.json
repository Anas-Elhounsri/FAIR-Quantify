{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "format": "cff",
        "type": "File_dump",
        "value": "# YAML 1.2\n---\ncff-version: 1.2.0\nauthors:\n  - affiliation: \"Netherlands eScience Center\"\n    family-names: Werkhoven\n    given-names: Ben\n    name-particle: van\n    orcid: \"https://orcid.org/0000-0002-7508-3272\"\n    email: \"b.vanwerkhoven@esciencecenter.nl\"\ndate-released: 2019-12-20\ndoi: 10.5281/zenodo.1220113\nkeywords: \n  - \"GPU Computing\"\n  - \"Auto-Tuning\"\n  - \"Performance Optimization\"\n  - \"OpenCL\"\n  - \"CUDA\"\nlicense: Apache-2.0\nmessage: \"If you use this software, please cite the following paper.\"\nreferences:\n  - type: article\n    authors:\n      - affiliation: \"Netherlands eScience Center\"\n        family-names: Werkhoven\n        given-names: Ben\n        name-particle: van\n        orcid: \"https://orcid.org/0000-0002-7508-3272\"\n        email: \"b.vanwerkhoven@esciencecenter.nl\"\n    title: \"Kernel Tuner: A Search-Optimizing GPU Code Auto-Tuner\"\n    journal: \"Future Generation Computer Systems\"\n    year: 2019\nrepository-code: \"https://github.com/benvanwerkhoven/kernel_tuner\"\ntitle: Kernel Tuner\nversion: \"0.3.0\"\n"
      },
      "source": "https://raw.githubusercontent.com/KernelTuner/kernel_tuner/master/CITATION.cff",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "type": "Text_excerpt",
        "value": "If you use Kernel Tuner in research or research software, please cite the most relevant among the [publications on Kernel \nTuner](https://kerneltuner.github.io/kernel_tuner/stable/#citation). To refer to the project as a whole, please cite:\n\n```latex\n@article{kerneltuner,\n  author  = {Ben van Werkhoven},\n  title   = {Kernel Tuner: A search-optimizing GPU code auto-tuner},\n  journal = {Future Generation Computer Systems},\n  year = {2019},\n  volume  = {90},\n  pages = {347-358},\n  url = {https://www.sciencedirect.com/science/article/pii/S0167739X18313359},\n  doi = {https://doi.org/10.1016/j.future.2018.08.004}\n}\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/KernelTuner/kernel_tuner/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Ben van Werkhoven",
        "doi": "https://doi.org/10.1016/j.future.2018.08.004",
        "format": "bibtex",
        "title": "Kernel Tuner: A search-optimizing GPU code auto-tuner",
        "type": "Text_excerpt",
        "url": "https://www.sciencedirect.com/science/article/pii/S0167739X18313359",
        "value": "@article{kerneltuner,\n    doi = {https://doi.org/10.1016/j.future.2018.08.004},\n    url = {https://www.sciencedirect.com/science/article/pii/S0167739X18313359},\n    pages = {347-358},\n    volume = {90},\n    year = {2019},\n    journal = {Future Generation Computer Systems},\n    title = {Kernel Tuner: A search-optimizing GPU code auto-tuner},\n    author = {Ben van Werkhoven},\n}"
      },
      "source": "https://raw.githubusercontent.com/KernelTuner/kernel_tuner/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/KernelTuner/kernel_tuner"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2016-03-28T13:32:17Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-03T15:13:31Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Kernel Tuner"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9944574315189108,
      "result": {
        "original_header": "Resources",
        "type": "Text_excerpt",
        "value": "- [Full documentation](https://kerneltuner.github.io/kernel_tuner/stable/)\n- Guides:\n  - [Getting Started](https://kerneltuner.github.io/kernel_tuner/stable/quickstart.html)\n  - [Convolution](https://kerneltuner.github.io/kernel_tuner/stable/convolution.html)\n  - [Diffusion](https://kerneltuner.github.io/kernel_tuner/stable/diffusion.html)\n  - [Matrix Multiplication](https://kerneltuner.github.io/kernel_tuner/stable/matrix_multiplication.html)\n- Features & Use cases:\n  - [Full list of examples](https://kerneltuner.github.io/kernel_tuner/stable/examples.html)\n  - [Output verification](https://kerneltuner.github.io/kernel_tuner/stable/correctness.html)\n  - [Test GPU code from Python](https://github.com/KernelTuner/kernel_tuner/blob/master/examples/cuda/test_vector_add.py)\n  - [Tune code in both host and device code](https://kerneltuner.github.io/kernel_tuner/stable/hostcode.html)\n  - [Optimization algorithms](https://kerneltuner.github.io/kernel_tuner/stable/optimization.html)\n  - [Mixed-precision & Accuracy tuning](https://github.com/KernelTuner/kernel_tuner/blob/master/examples/cuda/accuracy.py)\n  - [Custom metrics & tuning objectives](https://kerneltuner.github.io/kernel_tuner/stable/metrics.html)\n- **Kernel Tuner Tutorial** slides [[PDF]](https://github.com/KernelTuner/kernel_tuner_tutorial/blob/master/slides/2022_SURF/SURF22-Kernel-Tuner-Tutorial.pdf), hands-on:\n  - Vector add example [[.ipynb](https://github.com/KernelTuner/kernel_tuner_tutorial/blob/master/hands-on/cuda/00_Kernel_Tuner_Introduction.ipynb)] [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/KernelTuner/kernel_tuner_tutorial/blob/master/hands-on/cuda/00_Kernel_Tuner_Introduction.ipynb)\n  - Tuning thread block dimensions [[.ipynb](https://github.com/KernelTuner/kernel_tuner_tutorial/blob/master/hands-on/cuda/01_Kernel_Tuner_Getting_Started.ipynb)] [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/KernelTuner/kernel_tuner_tutorial/blob/master/hands-on/cuda/01_Kernel_Tuner_Getting_Started.ipynb)\n  - Search space restrictions & output verification [[.ipynb](https://github.com/KernelTuner/kernel_tuner_tutorial/blob/master/hands-on/cuda/02_Kernel_Tuner_Intermediate.ipynb)] [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/KernelTuner/kernel_tuner_tutorial/blob/master/hands-on/cuda/02_Kernel_Tuner_Intermediate.ipynb)\n  - Visualization & search space optimization [[.ipynb](https://github.com/KernelTuner/kernel_tuner_tutorial/blob/master/hands-on/cuda/03_Kernel_Tuner_Advanced.ipynb)] [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/KernelTuner/kernel_tuner_tutorial/blob/master/hands-on/cuda/03_Kernel_Tuner_Advanced.ipynb)\n- **Energy Efficient GPU Computing** tutorial slides [[PDF]](https://github.com/KernelTuner/kernel_tuner_tutorial/blob/master/slides/2023_Supercomputing/SC23.pdf), hands-on:\n  - Kernel Tuner for GPU energy measurements [[.ipynb](https://github.com/KernelTuner/kernel_tuner_tutorial/blob/master/energy/00_Kernel_Tuner_Introduction.ipynb)] [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/KernelTuner/kernel_tuner_tutorial/blob/master/energy/00_Kernel_Tuner_Introduction.ipynb)\n  - Code optimizations for energy [[.ipynb](https://github.com/KernelTuner/kernel_tuner_tutorial/blob/master/energy/01_Code_Optimizations_for_Energy.ipynb)] [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/KernelTuner/kernel_tuner_tutorial/blob/master/energy/01_Code_Optimizations_for_Energy.ipynb)\n  - Mixed precision and accuracy tuning [[.ipynb](https://github.com/KernelTuner/kernel_tuner_tutorial/blob/master/energy/02_Mixed_precision_programming.ipynb)] [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/KernelTuner/kernel_tuner_tutorial/blob/master/energy/02_Mixed_precision_programming.ipynb)\n  - Optimzing for time vs for energy [[.ipynb](https://github.com/KernelTuner/kernel_tuner_tutorial/blob/master/energy/03_energy_efficient_computing.ipynb)] [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/KernelTuner/kernel_tuner_tutorial/blob/master/energy/03_energy_efficient_computing.ipynb) \n"
      },
      "source": "https://raw.githubusercontent.com/KernelTuner/kernel_tuner/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8557450019955729,
      "result": {
        "original_header": "Communication &amp; Contribution",
        "type": "Text_excerpt",
        "value": "Contributions are welcome! For feature requests, bug reports, or usage problems, please feel free to create an issue.\nFor more extensive contributions, check the [contribution guide](http://kerneltuner.github.io/kernel_tuner/stable/contributing.html).\n \n"
      },
      "source": "https://raw.githubusercontent.com/KernelTuner/kernel_tuner/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9715359951302734,
      "result": {
        "type": "Text_excerpt",
        "value": "- Works as an external tool to benchmark and optimize GPU kernels in isolation\n- Can be used directly on existing kernel code without extensive changes \n- Can be used with applications in any host programming language\n- Blazing fast search space construction\n- More than 20  to speedup tuning\n- Energy measurements and optimizations \n- ... and much more! For example, , , , , see . \n"
      },
      "source": "https://raw.githubusercontent.com/KernelTuner/kernel_tuner/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/KernelTuner/kernel_tuner/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KernelTuner/kernel_tuner/master/doc/source/matrix_multiplication.ipynb"
      },
      "source": "https://raw.githubusercontent.com/KernelTuner/kernel_tuner/master/doc/source/matrix_multiplication.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KernelTuner/kernel_tuner/master/doc/source/diffusion_use_optparam.ipynb"
      },
      "source": "https://raw.githubusercontent.com/KernelTuner/kernel_tuner/master/doc/source/diffusion_use_optparam.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KernelTuner/kernel_tuner/master/doc/source/convolution.ipynb"
      },
      "source": "https://raw.githubusercontent.com/KernelTuner/kernel_tuner/master/doc/source/convolution.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KernelTuner/kernel_tuner/master/doc/source/diffusion.ipynb"
      },
      "source": "https://raw.githubusercontent.com/KernelTuner/kernel_tuner/master/doc/source/diffusion.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KernelTuner/kernel_tuner/master/doc/source/grid3d.ipynb"
      },
      "source": "https://raw.githubusercontent.com/KernelTuner/kernel_tuner/master/doc/source/grid3d.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KernelTuner/kernel_tuner/master/doc/source/diffusion_opencl.ipynb"
      },
      "source": "https://raw.githubusercontent.com/KernelTuner/kernel_tuner/master/doc/source/diffusion_opencl.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 48
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/KernelTuner/kernel_tuner/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "KernelTuner/kernel_tuner"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/KernelTuner/kernel_tuner/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://sonarcloud.io/api/project_badges/measure?project=KernelTuner_kernel_tuner&amp;metric=alert_status"
      },
      "source": "https://raw.githubusercontent.com/KernelTuner/kernel_tuner/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://colab.research.google.com/assets/colab-badge.svg"
      },
      "source": "https://raw.githubusercontent.com/KernelTuner/kernel_tuner/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://colab.research.google.com/assets/colab-badge.svg"
      },
      "source": "https://raw.githubusercontent.com/KernelTuner/kernel_tuner/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://colab.research.google.com/assets/colab-badge.svg"
      },
      "source": "https://raw.githubusercontent.com/KernelTuner/kernel_tuner/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://colab.research.google.com/assets/colab-badge.svg"
      },
      "source": "https://raw.githubusercontent.com/KernelTuner/kernel_tuner/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://colab.research.google.com/assets/colab-badge.svg"
      },
      "source": "https://raw.githubusercontent.com/KernelTuner/kernel_tuner/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://colab.research.google.com/assets/colab-badge.svg"
      },
      "source": "https://raw.githubusercontent.com/KernelTuner/kernel_tuner/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://colab.research.google.com/assets/colab-badge.svg"
      },
      "source": "https://raw.githubusercontent.com/KernelTuner/kernel_tuner/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://colab.research.google.com/assets/colab-badge.svg"
      },
      "source": "https://raw.githubusercontent.com/KernelTuner/kernel_tuner/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KernelTuner/kernel_tuner/master/doc/images/kernel_launcher.png"
      },
      "source": "https://raw.githubusercontent.com/KernelTuner/kernel_tuner/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KernelTuner/kernel_tuner/master/doc/images/kernel_float.png"
      },
      "source": "https://raw.githubusercontent.com/KernelTuner/kernel_tuner/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KernelTuner/kernel_tuner/master/doc/images/kernel_dashboard.png"
      },
      "source": "https://raw.githubusercontent.com/KernelTuner/kernel_tuner/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "- First, make sure you have your [CUDA](https://kerneltuner.github.io/kernel_tuner/stable/install.html#cuda-and-pycuda), [OpenCL](https://kerneltuner.github.io/kernel_tuner/stable/install.html#opencl-and-pyopencl), or [HIP](https://kerneltuner.github.io/kernel_tuner/stable/install.html#hip-and-pyhipl) compiler installed\n- Then type: `pip install kernel_tuner[cuda]`, `pip install kernel_tuner[opencl]`, or `pip install kernel_tuner[hip]`\n- or why not all of them: `pip install kernel_tuner[cuda,opencl,hip]`\n\nMore information on installation, also for other languages, in the [installation guide](http://kerneltuner.github.io/kernel_tuner/stable/install.html).\n"
      },
      "source": "https://raw.githubusercontent.com/KernelTuner/kernel_tuner/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9875565573706561,
      "result": {
        "original_header": "Kernel Tuner ecosystem",
        "type": "Text_excerpt",
        "value": "<img width=\"250px\" src=\"https://raw.githubusercontent.com/KernelTuner/kernel_tuner/master/doc/images/kernel_launcher.png\"/><br />C++ magic to integrate auto-tuned kernels into C++ applications  \n<img width=\"250px\" src=\"https://raw.githubusercontent.com/KernelTuner/kernel_tuner/master/doc/images/kernel_float.png\"/><br />C++ data types for mixed-precision CUDA kernel programming \n<img width=\"275px\" src=\"https://raw.githubusercontent.com/KernelTuner/kernel_tuner/master/doc/images/kernel_dashboard.png\"/><br />Monitor, analyze, and visualize auto-tuning runs \n"
      },
      "source": "https://raw.githubusercontent.com/KernelTuner/kernel_tuner/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999763753075062,
      "result": {
        "original_header": "Communication &amp; Contribution",
        "type": "Text_excerpt",
        "value": "- GitHub [Issues](https://github.com/KernelTuner/kernel_tuner/issues): Bug reports, install issues, feature requests, work in progress\n- GitHub [Discussion group](https://github.com/orgs/KernelTuner/discussions): General questions, Q&A, thoughts \n"
      },
      "source": "https://raw.githubusercontent.com/KernelTuner/kernel_tuner/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.814155585226582,
      "result": {
        "type": "Text_excerpt",
        "value": "\nCreate optimized GPU applications in any mainstream GPU \nprogramming language (CUDA, HIP, OpenCL, OpenACC). \n"
      },
      "source": "https://raw.githubusercontent.com/KernelTuner/kernel_tuner/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/KernelTuner/kernel_tuner/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "auto-tuning, autotuning, c, cplusplus, cuda, cuda-kernels, gpu, gpu-computing, kernel-tuner, machine-learning, opencl, opencl-kernels, optimization, python, software-development, testing"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Apache License 2.0",
        "spdx_id": "Apache-2.0",
        "type": "License",
        "url": "https://api.github.com/licenses/apache-2.0",
        "value": "https://api.github.com/licenses/apache-2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n"
      },
      "source": "https://raw.githubusercontent.com/KernelTuner/kernel_tuner/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KernelTuner/kernel_tuner/master/doc/images/KernelTuner-logo.png"
      },
      "source": "https://raw.githubusercontent.com/KernelTuner/kernel_tuner/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "kernel_tuner"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "KernelTuner"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 637607,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KernelTuner/kernel_tuner/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_papers": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/2211.07260"
      },
      "source": "https://raw.githubusercontent.com/KernelTuner/kernel_tuner/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "benvanwerkhoven",
          "type": "User"
        },
        "date_created": "2024-04-04T19:44:55Z",
        "date_published": "2024-04-04T20:03:07Z",
        "description": "Finally, the Version 1.0 release is here! The software has been stable and ready for production use for quite some time now and after being in beta for about a half a year, we are confident that the current version of the software deserves to mark the first major release of Kernel Tuner.\r\n\r\nVersion 1.0 integrates a lot of new functionality, including blazing fast search space construction, support for tuning HIP kernels on AMD GPUs, new functionality for mixed precision and accuracy tuning, experimental support for tuning OpenACC programs, a conda package installer for Kernel Tuner, and many more changes and additions.\r\n\r\nI would like to thank every one involved in the development of Kernel Tuner of the past years! Special thanks to the Kernel Tuner developers team for their continued support of the project!\r\n\r\n## From the Changelog\r\n- HIP backend to support tuning HIP kernels on AMD GPUs\r\n- Experimental features for mixed-precision and accuracy tuning\r\n- Experimental features for OpenACC tuning\r\n- Major speedup due to new parser and using revamped python-constraint for searchspace building\r\n- Implemented ability to use `PySMT` and `ATF` for searchspace building\r\n- Added Poetry for dependency and build management\r\n- Switched from `setup.py` and `setup.cfg` to `pyproject.toml` for centralized metadata, added relevant tests\r\n- Updated GitHub Action workflows to use Poetry\r\n- Updated dependencies, most notably NumPy is no longer version-locked as scikit-opt is no longer a dependency\r\n- Documentation now uses `pyproject.toml` metadata, minor fixes and changes to be compatible with updated dependencies\r\n- Set up Nox for testing on all supported Python versions in isolated environments\r\n- Added linting information, VS Code settings and recommendations\r\n- Discontinued use of `OrderedDict`, as all dictionaries in the Python versions used are already ordered\r\n- Dropped Python 3.7 support\r\n\r\n## Merged Pull Requests\r\n* HIP Backend by @MiloLurati in https://github.com/KernelTuner/kernel_tuner/pull/199\r\n* Accuracy tuning by @stijnh in https://github.com/KernelTuner/kernel_tuner/pull/189\r\n* Fix issue where HIP backend fails due to invalid arguments type by @stijnh in https://github.com/KernelTuner/kernel_tuner/pull/216\r\n* Searchspace improvements and project meta modernization by @fjwillemsen in https://github.com/KernelTuner/kernel_tuner/pull/214\r\n* Minor bugfix by @isazi in https://github.com/KernelTuner/kernel_tuner/pull/219\r\n* OpenACC support by @isazi in https://github.com/KernelTuner/kernel_tuner/pull/197\r\n* Fixed broken tests as per issue #217 by @fjwillemsen in https://github.com/KernelTuner/kernel_tuner/pull/220\r\n* Fix snap_to_nearest on non-numeric parameters by @stijnh in https://github.com/KernelTuner/kernel_tuner/pull/221\r\n* expand documentation on backends by @benvanwerkhoven in https://github.com/KernelTuner/kernel_tuner/pull/213\r\n* Add support for passing cupy arrays to \"C\" lang by @bouweandela in https://github.com/KernelTuner/kernel_tuner/pull/226\r\n* improve code quality of cache file related functions by @benvanwerkhoven in https://github.com/KernelTuner/kernel_tuner/pull/240\r\n* New readme by @benvanwerkhoven in https://github.com/KernelTuner/kernel_tuner/pull/231\r\n\r\n## New Contributors\r\n* @MiloLurati made their first contribution in https://github.com/KernelTuner/kernel_tuner/pull/199\r\n* @dependabot made their first contribution in https://github.com/KernelTuner/kernel_tuner/pull/222\r\n* @bouweandela made their first contribution in https://github.com/KernelTuner/kernel_tuner/pull/226\r\n\r\n**Full Changelog**: https://github.com/KernelTuner/kernel_tuner/compare/0.4.5...1.0",
        "html_url": "https://github.com/KernelTuner/kernel_tuner/releases/tag/1.0",
        "name": "Version 1.0",
        "release_id": 149840580,
        "tag": "1.0",
        "tarball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/tarball/1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/149840580",
        "value": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/149840580",
        "zipball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/zipball/1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "fjwillemsen",
          "type": "User"
        },
        "date_created": "2023-12-07T08:17:59Z",
        "date_published": "2023-12-07T08:19:13Z",
        "description": "This is a beta release for early access to the new features. Not intended for production use.\r\n\r\nThe release contains:\r\n\r\n- Inclusion of tests in the source package, as requested in #225 \r\n- Updated dependencies",
        "html_url": "https://github.com/KernelTuner/kernel_tuner/releases/tag/1.0.0b6",
        "name": "Version 1.0.0b6",
        "release_id": 128534524,
        "tag": "1.0.0b6",
        "tarball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/tarball/1.0.0b6",
        "type": "Release",
        "url": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/128534524",
        "value": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/128534524",
        "zipball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/zipball/1.0.0b6"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "fjwillemsen",
          "type": "User"
        },
        "date_created": "2023-11-01T13:27:00Z",
        "date_published": "2023-11-01T14:11:28Z",
        "description": "This is a beta release for early access to the new features. Not intended for production use.\r\n\r\nThe release contains:\r\n- Expanded documentation on backends by @benvanwerkhoven in https://github.com/KernelTuner/kernel_tuner/pull/213\r\n- A fix for an issue that could cause incorrect conversion to Constraint\r\n- Extended  tests to detect this\r\n- Bump urllib3 from 2.0.6 to 2.0.7 by @dependabot in https://github.com/KernelTuner/kernel_tuner/pull/222\r\n- Updated dependencies\r\n\r\n**Full Changelog**: https://github.com/KernelTuner/kernel_tuner/compare/1.0.0b4...1.0.0b5",
        "html_url": "https://github.com/KernelTuner/kernel_tuner/releases/tag/1.0.0b5",
        "name": "Version 1.0.0b5",
        "release_id": 127530614,
        "tag": "1.0.0b5",
        "tarball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/tarball/1.0.0b5",
        "type": "Release",
        "url": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/127530614",
        "value": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/127530614",
        "zipball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/zipball/1.0.0b5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "fjwillemsen",
          "type": "User"
        },
        "date_created": "2023-10-22T14:04:35Z",
        "date_published": "2023-10-22T14:11:03Z",
        "description": "This is a beta release for early access to the new features. Not intended for production use.\r\n\r\nThis release contains several improvements:\r\n\r\n- `nvidia-ml-py` added to `tutorial` extra dependencies. \r\n- Additional checks for coherent Poetry configuration and warning in case of outdated development environment.\r\n- Updated dependencies.",
        "html_url": "https://github.com/KernelTuner/kernel_tuner/releases/tag/1.0.0b4",
        "name": "Version 1.0.0b4",
        "release_id": 126150863,
        "tag": "1.0.0b4",
        "tarball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/tarball/1.0.0b4",
        "type": "Release",
        "url": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/126150863",
        "value": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/126150863",
        "zipball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/zipball/1.0.0b4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "fjwillemsen",
          "type": "User"
        },
        "date_created": "2023-10-12T11:35:37Z",
        "date_published": "2023-10-12T13:02:01Z",
        "description": "This is a beta release for early access to the new features. Not intended for production use.\r\n\r\nThis version contains several bugfixes:\r\n* Fix snap_to_nearest on non-numeric parameters by @stijnh in https://github.com/KernelTuner/kernel_tuner/pull/221\r\n* Fixed an issue where some restrictions would not be recognized by the old `check_restrictions` function.\r\n* Fixed an issue where `bayes_opt` would not handle pruned parameters correctly. \r\n\r\n**Full Changelog**: https://github.com/KernelTuner/kernel_tuner/compare/1.0.0b2...1.0.0b3",
        "html_url": "https://github.com/KernelTuner/kernel_tuner/releases/tag/1.0.0b3",
        "name": "Version 1.0.0b3",
        "release_id": 124814471,
        "tag": "1.0.0b3",
        "tarball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/tarball/1.0.0b3",
        "type": "Release",
        "url": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/124814471",
        "value": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/124814471",
        "zipball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/zipball/1.0.0b3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "fjwillemsen",
          "type": "User"
        },
        "date_created": "2023-10-11T16:35:43Z",
        "date_published": "2023-10-11T16:37:05Z",
        "description": "This is a beta release for early access to the new features. Not intended for production use.\r\n\r\n**Full Changelog**: https://github.com/KernelTuner/kernel_tuner/compare/1.0.0b1...1.0.0b2",
        "html_url": "https://github.com/KernelTuner/kernel_tuner/releases/tag/1.0.0b2",
        "name": "Version 1.0.0b2",
        "release_id": 124647833,
        "tag": "1.0.0b2",
        "tarball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/tarball/1.0.0b2",
        "type": "Release",
        "url": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/124647833",
        "value": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/124647833",
        "zipball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/zipball/1.0.0b2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "fjwillemsen",
          "type": "User"
        },
        "date_created": "2023-10-09T13:38:40Z",
        "date_published": "2023-10-11T07:03:26Z",
        "description": "This is a beta release for early access to the new features. Not intended for production use.\r\n\r\n## What's Changed\r\n* HIP Backend by @MiloLurati in https://github.com/KernelTuner/kernel_tuner/pull/199\r\n* Accuracy tuning by @stijnh in https://github.com/KernelTuner/kernel_tuner/pull/189\r\n* Fix issue where HIP backend fails due to invalid arguments type by @stijnh in https://github.com/KernelTuner/kernel_tuner/pull/216\r\n* Searchspace improvements and project meta modernization by @fjwillemsen in https://github.com/KernelTuner/kernel_tuner/pull/214\r\n* Minor bugfix by @isazi in https://github.com/KernelTuner/kernel_tuner/pull/219\r\n* OpenACC support by @isazi in https://github.com/KernelTuner/kernel_tuner/pull/197\r\n* Fixed broken tests as per issue #217 by @fjwillemsen in https://github.com/KernelTuner/kernel_tuner/pull/220\r\n\r\n## New Contributors\r\n* @MiloLurati made their first contribution in https://github.com/KernelTuner/kernel_tuner/pull/199\r\n\r\n**Full Changelog**: https://github.com/KernelTuner/kernel_tuner/compare/0.4.5...1.0.0b1",
        "html_url": "https://github.com/KernelTuner/kernel_tuner/releases/tag/1.0.0b1",
        "name": "Version 1.0.0 beta 1",
        "release_id": 124550671,
        "tag": "1.0.0b1",
        "tarball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/tarball/1.0.0b1",
        "type": "Release",
        "url": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/124550671",
        "value": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/124550671",
        "zipball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/zipball/1.0.0b1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "benvanwerkhoven",
          "type": "User"
        },
        "date_created": "2023-06-01T16:31:47Z",
        "date_published": "2023-06-01T20:11:06Z",
        "description": "Version 0.4.5 adds support of using PMT in combination with Kernel Tuner enabling power and energy measurements on a wide range of devices. In addition, we have worked extensively on the internals of Kernel Tuner and the interfaces of the separate components that together make up Kernel Tuner. Along with a few bugfixes, fixes of small errors in examples and documentation.\r\n\r\n## [0.4.5] - 2023-06-01\r\n### Added\r\n- PMTObserver to measure power and energy on various platforms\r\n\r\n### Changed\r\n- Improved functionality for storing output and metadata files\r\n- Updated PowerSensorObserver to support PowerSensor3\r\n- Refactored interal interfaces of runners and backends\r\n- Bugfix in interface to set objective and optimization direction",
        "html_url": "https://github.com/KernelTuner/kernel_tuner/releases/tag/0.4.5",
        "name": "Version 0.4.5",
        "release_id": 105745112,
        "tag": "0.4.5",
        "tarball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/tarball/0.4.5",
        "type": "Release",
        "url": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/105745112",
        "value": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/105745112",
        "zipball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/zipball/0.4.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "benvanwerkhoven",
          "type": "User"
        },
        "date_created": "2023-03-09T11:07:27Z",
        "date_published": "2023-03-09T11:21:17Z",
        "description": "# Version 0.4.4\r\n\r\nVersion 0.4.4 adds extended support for energy efficiency tuning. In particular, with the new capability to fit a performance model to the target GPUs power-frequency curve. How to use these features is demonstrated in:\r\nhttps://github.com/KernelTuner/kernel_tuner/blob/master/examples/cuda/going_green_performance_model.py\r\n\r\nAnd described in the paper:\r\n\r\n> Going green: optimizing GPUs for energy efficiency through model-steered auto-tuning\r\n> R. Schoonhoven, B. Veenboer, B. van Werkhoven, K. J. Batenburg\r\n> International Workshop on Performance Modeling, Benchmarking and Simulation of High Performance Computer Systems (PMBS) at Supercomputing (SC22) 2022 \r\n> https://arxiv.org/abs/2211.07260\r\n\r\nOther than that, we've implemented a new output and metadata JSON format that adheres to the 'T4' auto-tuning schema created by the auto-tuning community at the Lorentz Center workshop in March 2022. \r\n\r\nFrom the changelog:\r\n\r\n## [0.4.4] - 2023-03-09\r\n### Added\r\n- Support for using time_limit in simulation mode\r\n- Helper functions for energy tuning\r\n- Example to show ridge frequency and power-frequency model\r\n- Functions to store tuning output and metadata\r\n\r\n### Changed\r\n- Changed what timings are stored in cache files\r\n- No longer inserting partial loop unrolling factor of 0 in CUDA\r\n",
        "html_url": "https://github.com/KernelTuner/kernel_tuner/releases/tag/0.4.4",
        "name": "Version 0.4.4",
        "release_id": 95054194,
        "tag": "0.4.4",
        "tarball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/tarball/0.4.4",
        "type": "Release",
        "url": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/95054194",
        "value": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/95054194",
        "zipball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/zipball/0.4.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "benvanwerkhoven",
          "type": "User"
        },
        "date_created": "2022-10-19T15:24:06Z",
        "date_published": "2022-10-19T15:45:57Z",
        "description": "The version 0.4.3 release consists of a large number of changes to the internals of Kernel Tuner, including the addition of a new backend based on Nvidia's official Python bindings for CUDA, as well as improved functionality for tuning energy efficiency, e.g. measuring core voltages, the measurement of power and the interface with NVML has also improved a lot.\r\n\r\nSome of the changes are also in the \"externals\" of Kernel Tuner. In the sense that we have migrated from https://github.com/benvanwerkhoven/ to https://github.com/KernelTuner. The goal of this move is to bring the collection of repositories belonging to the larger Kernel Tuner project under one organization. \r\n\r\n## From the Changelog:\r\n\r\n## [0.4.3] - 2022-10-19\r\n### Added\r\n- A new backend that uses Nvidia cuda-python\r\n- Support for locked clocks in NVMLObserver\r\n- Support for measuring core voltages using NVML\r\n- Support for custom preprocessor definitions\r\n- Support for boolean scalar arguments in PyCUDA backend\r\n\r\n### Changed\r\n- Migrated from github.com/benvanwerkhoven to github.com/KernelTuner\r\n- Significant update to the documentation pages\r\n- Unified benchmarking loops across backends\r\n- Backends are no longer context managers\r\n- Replaced the method for measuring power consumption using NVML\r\n- Improved NVML measurements of temperature and clock frequencies\r\n- bugfix in parse_restrictions when using and/or in expressions\r\n- bugfix in GreedyILS when using neighbor method \"adjacent\"\r\n- bugfix in Bayesian Optimization for small problems\r\n",
        "html_url": "https://github.com/KernelTuner/kernel_tuner/releases/tag/0.4.3",
        "name": "Version 0.4.3",
        "release_id": 80351208,
        "tag": "0.4.3",
        "tarball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/tarball/0.4.3",
        "type": "Release",
        "url": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/80351208",
        "value": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/80351208",
        "zipball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/zipball/0.4.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "benvanwerkhoven",
          "type": "User"
        },
        "date_created": "2022-05-23T14:10:00Z",
        "date_published": "2022-05-23T14:59:25Z",
        "description": "Version 0.4.2 includes a lot of work on the search space representation, application of restrictions, and optimization strategies. In addition to the addition of several new optimization strategies, most optimization strategies should see improved performance both in terms of the number of evaluated kernel configurations as well as execution time.\r\n\r\n### Added\r\n- new optimization strategies: dual annealing, greedly ILS, ordered greedy MLS, greedy MLS\r\n- support for constant memory in cupy backend\r\n- constraint solver to cut down time spent in creating search spaces\r\n- support for custom tuning objectives\r\n- support for max_fevals and time_limit in strategy_options of all strategies\r\n\r\n### Removed\r\n- alternative Bayesian Optimization strategies that could not be used directly\r\n- C++ wrapper module that was too specific and hardly used\r\n\r\n### Changed\r\n- string-based restrictions are compiled into functions for improved performance\r\n- genetic algorithm, MLS, ILS, random, and simulated annealing use new search space object\r\n- diff evo, firefly, PSO are initialized using population of all valid configurations\r\n- all strategies except brute_force strictly adhere to max_fevals and time_limit\r\n- simulated annealing adapts annealing schedule to max_fevals if supplied\r\n- minimize, basinhopping, and dual annealing start from a random valid config",
        "html_url": "https://github.com/KernelTuner/kernel_tuner/releases/tag/0.4.2",
        "name": "Version 0.4.2",
        "release_id": 67554193,
        "tag": "0.4.2",
        "tarball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/tarball/0.4.2",
        "type": "Release",
        "url": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/67554193",
        "value": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/67554193",
        "zipball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/zipball/0.4.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "benvanwerkhoven",
          "type": "User"
        },
        "date_created": "2021-09-10T12:38:35Z",
        "date_published": "2021-09-10T12:50:46Z",
        "description": "This version adds a brand new Bayesian Optimization strategy, as well as some smaller features and fixes.\r\n\r\n## [0.4.1] - 2021-09-10\r\n### Added\r\n- support for PyTorch Tensors as input data type for kernels\r\n- support for smem_args in run_kernel\r\n- support for (lambda) function and string for dynamic shared memory size\r\n- a new Bayesian Optimization strategy\r\n\r\n### Changed\r\n- optionally store the kernel_string with store_results\r\n- improved reporting of skipped configurations\r\n",
        "html_url": "https://github.com/KernelTuner/kernel_tuner/releases/tag/0.4.1",
        "name": "Version 0.4.1",
        "release_id": 49345464,
        "tag": "0.4.1",
        "tarball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/tarball/0.4.1",
        "type": "Release",
        "url": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/49345464",
        "value": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/49345464",
        "zipball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/zipball/0.4.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "benvanwerkhoven",
          "type": "User"
        },
        "date_created": "2021-04-09T11:41:52Z",
        "date_published": "2021-04-09T11:50:24Z",
        "description": "This version adds a great deal of new functionality and extra flexibility and additional control to the user over what is being benchmarked and when. From the CHANGELOG:\r\n\r\n### Added\r\n- support for (lambda) function instead of list of strings for restrictions\r\n- support for (lambda) function instead of list for specifying grid divisors\r\n- support for (lambda) function instead of tuple for specifying problem_size\r\n- function to store the top tuning results\r\n- function to create header file with device targets from stored results\r\n- support for using tuning results in PythonKernel\r\n- option to control measurements using observers\r\n- support for NVML tunable parameters\r\n- option to simulate auto-tuning searches from existing cache files\r\n- Cupy backend to support C++ templated CUDA kernels\r\n- support for templated CUDA kernels using PyCUDA backend\r\n- documentation on tunable parameter vocabulary",
        "html_url": "https://github.com/KernelTuner/kernel_tuner/releases/tag/0.4.0",
        "name": "Version 0.4.0",
        "release_id": 41178636,
        "tag": "0.4.0",
        "tarball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/tarball/0.4.0",
        "type": "Release",
        "url": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/41178636",
        "value": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/41178636",
        "zipball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/zipball/0.4.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "benvanwerkhoven",
          "type": "User"
        },
        "date_created": "2020-11-04T19:36:27Z",
        "date_published": "2020-11-04T19:56:08Z",
        "description": "# Version 0.3.2\r\n\r\nThis version adds several new and recent features. Most importantly is the new feature to specify user-defined metrics for Kernel Tuner to compute along with the benchmarking results. User-defined metrics are composable, so you can define metrics that build upon other metrics. The documentation pages have also been updated to include this new feature and other recent changes.\r\n\r\nAn important change that might influence benchmark results reported by Kernel Tuner is the fact that the runner will now do a warm up of the device using the first kernel in the parameter space. This is to remove any startup or cold start delays that were significantly slowing down the first benchmarked kernel on many devices. \r\n\r\nFrom the changelog:\r\n\r\n## [0.3.2] - 2020-11-04\r\n### Added\r\n- support loop unrolling using params that start with loop_unroll_factor\r\n- always insert \"define kernel_tuner 1\" to allow preprocessor ifdef kernel_tuner\r\n- support for user-defined metrics\r\n- support for choosing the optimization starting point x0 for most strategies\r\n\r\n### Changed\r\n- more compact output is printed to the terminal\r\n- sequential runner runs first kernel in the parameter space to warm up device\r\n- updated tutorials to demonstrate use of user-defined metrics",
        "html_url": "https://github.com/KernelTuner/kernel_tuner/releases/tag/0.3.2",
        "name": "Version 0.3.2",
        "release_id": 33471144,
        "tag": "0.3.2",
        "tarball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/tarball/0.3.2",
        "type": "Release",
        "url": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/33471144",
        "value": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/33471144",
        "zipball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/zipball/0.3.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "benvanwerkhoven",
          "type": "User"
        },
        "date_created": "2020-06-11T14:35:51Z",
        "date_published": "2020-06-11T14:50:11Z",
        "description": "A small release for 2 small new features and a bugfix for older GPUs.\r\n\r\n## [0.3.1] - 2020-06-11\r\n### Added\r\n- kernelbuilder functionality for including kernels in Python applications\r\n- smem_args option for dynamically allocated shared memory in CUDA kernels\r\n\r\n### Changed\r\n- bugfix for NVML Error on Nvidia devices without internal current sensor",
        "html_url": "https://github.com/KernelTuner/kernel_tuner/releases/tag/0.3.1",
        "name": "Version 0.3.1",
        "release_id": 27458412,
        "tag": "0.3.1",
        "tarball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/tarball/0.3.1",
        "type": "Release",
        "url": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/27458412",
        "value": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/27458412",
        "zipball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/zipball/0.3.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "benvanwerkhoven",
          "type": "User"
        },
        "date_created": "2019-12-20T08:34:56Z",
        "date_published": "2019-12-20T16:40:08Z",
        "description": "# Version 0.3.0\r\n\r\nThis is the release of version 0.3.0 of Kernel Tuner. We have done a lot of work on the internals of Kernel Tuner. This release fixes several issues, adds and extends new features, and simplifies the user interface. \r\n\r\n## [0.3.0] - 2019-12-20\r\n### Changed\r\n- fix for output checking, custom verify functions are called just once\r\n- benchmarking now returns multiple results not only time\r\n- more sophisticated implementation of genetic algorithm strategy\r\n- how the \"method\" option is passed, now use strategy_options\r\n\r\n### Added\r\n- Bayesian Optimizaton strategy, use strategy=\"bayes_opt\"\r\n- support for kernels that use texture memory in CUDA\r\n- support for measuring energy consumption of CUDA kernels\r\n- option to set strategy_options to pass strategy specific options\r\n- option to cache and restart from tuned kernel configurations cachefile\r\n\r\n### Removed\r\n- Python 2 support, it may still work but we no longer test for Python 2\r\n- Noodles parallel runner  ",
        "html_url": "https://github.com/KernelTuner/kernel_tuner/releases/tag/0.3.0",
        "name": "Version 0.3.0",
        "release_id": 22393218,
        "tag": "0.3.0",
        "tarball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/tarball/0.3.0",
        "type": "Release",
        "url": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/22393218",
        "value": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/22393218",
        "zipball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/zipball/0.3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "benvanwerkhoven",
          "type": "User"
        },
        "date_created": "2018-11-16T16:06:42Z",
        "date_published": "2018-11-16T16:07:21Z",
        "description": "## Version 0.2.0\r\n\r\nVersion 0.2.0 adds a large number of search optimization algorithms and basic support for testing and tuning Fortran kernels.\r\n\r\n### Changed\r\n- no longer replacing kernel names with instance strings during tuning\r\n- bugfix in tempfile creation that lead to too many open files error\r\n\r\n### Added\r\n- A minimal Fortran example and basic Fortran support\r\n- Particle Swarm Optimization strategy, use strategy=\"pso\"\r\n- Simulated Annealing strategy, use strategy=\"simulated_annealing\"\r\n- Firefly Algorithm strategy, use strategy=\"firefly_algorithm\"\r\n- Genetic Algorithm strategy, use strategy=\"genetic_algorithm\"\r\n\r\n",
        "html_url": "https://github.com/KernelTuner/kernel_tuner/releases/tag/0.2.0",
        "name": "Version 0.2.0",
        "release_id": 14047823,
        "tag": "0.2.0",
        "tarball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/tarball/0.2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/14047823",
        "value": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/14047823",
        "zipball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/zipball/0.2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "benvanwerkhoven",
          "type": "User"
        },
        "date_created": "2018-04-18T09:56:03Z",
        "date_published": "2018-04-18T10:10:52Z",
        "description": "## [0.1.9] - 2018-04-18\r\n### Changed\r\n- bugfix for C backend for byte array arguments\r\n- argument type mismatches throw warning instead of exception\r\n\r\n### Added\r\n- wrapper functionality to wrap C++ functions\r\n- citation file and zenodo doi generation for releases",
        "html_url": "https://github.com/KernelTuner/kernel_tuner/releases/tag/0.1.9",
        "name": "Version 0.1.9",
        "release_id": 10600742,
        "tag": "0.1.9",
        "tarball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/tarball/0.1.9",
        "type": "Release",
        "url": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/10600742",
        "value": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/10600742",
        "zipball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/zipball/0.1.9"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "benvanwerkhoven",
          "type": "User"
        },
        "date_created": "2017-11-23T20:51:47Z",
        "date_published": "2017-11-23T21:01:37Z",
        "description": "Version 0.1.8 brings many improvements, mostly focused on user friendliness. The installation process of optional dependencies is simplified as you can now use extras with pip. For example, `pip install kernel_tuner[cuda]` can be used to install both Kernel Tuner and the optional dependency PyCuda. In addition, Version 0.1.8 introduces many more checks on the user input that you pass to tune_kernel and run_kernel. For example, the kernel source code is parsed to see if the signature matches the argument list. The additional checks on input should make it easier to use and debug programs using Kernel Tuner. For a more detailed overview of the changes, see below:\r\n\r\n## [0.1.8] - 2017-11-23\r\n### Changed\r\n- bugfix for when using iterations smaller than 3\r\n- the install procedure now uses extras, e.g. [cuda,opencl]\r\n- option quiet makes tune_kernel completely quiet\r\n- extensive updates to documentation\r\n\r\n### Added\r\n- type checking for kernel arguments and answers lists\r\n- checks for reserved keywords in tunable paramters\r\n- checks for whether thread block dimensions are specified\r\n- printing units for measured time with CUDA and OpenCL\r\n- option to print all measured execution times\r\n",
        "html_url": "https://github.com/KernelTuner/kernel_tuner/releases/tag/0.1.8",
        "name": "Version 0.1.8",
        "release_id": 8639984,
        "tag": "0.1.8",
        "tarball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/tarball/0.1.8",
        "type": "Release",
        "url": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/8639984",
        "value": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/8639984",
        "zipball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/zipball/0.1.8"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "benvanwerkhoven",
          "type": "User"
        },
        "date_created": "2017-11-10T14:41:55Z",
        "date_published": "2017-11-10T14:49:20Z",
        "description": "## [0.1.7] - 2017-10-11\r\n### Changed\r\n- bugfix install when scipy not present\r\n- bugfix for GPU cleanup when using Noodles runner\r\n- reworked the way strings are handled internally\r\n\r\n### Added\r\n- option to set compiler name, when using C backend",
        "html_url": "https://github.com/KernelTuner/kernel_tuner/releases/tag/0.1.7",
        "name": "Version 0.1.7",
        "release_id": 8468787,
        "tag": "0.1.7",
        "tarball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/tarball/0.1.7",
        "type": "Release",
        "url": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/8468787",
        "value": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/8468787",
        "zipball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/zipball/0.1.7"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "benvanwerkhoven",
          "type": "User"
        },
        "date_created": "2017-08-24T13:17:53Z",
        "date_published": "2017-08-24T13:23:08Z",
        "description": "# Version 0.1.6\r\n\r\nVersion 0.1.6 brings a few bugfixes but mostly extends the existing functionality of the tuner. Three new search strategies have been added and are now ready to use: minimize, basinhopping, and diff_evo. For more info on what these strategies do and what solvers and methods they support please see the documentation pages.\r\n\r\nFrom the CHANGELOG:\r\n\r\n## [0.1.6] - 2017-08-17\r\n### Changed\r\n- actively freeing GPU memory after tuning\r\n- bugfix for 3D grids when using OpenCL\r\n\r\n### Added\r\n- support for dynamic parallelism when using PyCUDA\r\n- option to use differential evolution optimization\r\n- global optimization strategies basinhopping, minimize\r\n\r\n",
        "html_url": "https://github.com/KernelTuner/kernel_tuner/releases/tag/0.1.6",
        "name": "Version 0.1.6",
        "release_id": 7509162,
        "tag": "0.1.6",
        "tarball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/tarball/0.1.6",
        "type": "Release",
        "url": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/7509162",
        "value": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/7509162",
        "zipball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/zipball/0.1.6"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "benvanwerkhoven",
          "type": "User"
        },
        "date_created": "2017-07-21T13:46:29Z",
        "date_published": "2017-07-21T13:51:20Z",
        "description": "# Version 0.1.5\r\n\r\nVersion 0.1.5 brings more flexibility, you can now pass code generating functions, your own functions for verifying kernel output correctness, and use your own names for the thread block dimensions.\r\n\r\nInternally, quite a lot has changed in this version. The runners have been separated into strategies and runners. And the way that options are passed around within the Kernel Tuner has changed dramatically.\r\n\r\nFrom the CHANGELOG:\r\n\r\n## [0.1.5] - 2017-07-21\r\n### Changed\r\n- option to pass a fraction to the sample runner\r\n- fixed a bug in memset for OpenCL backend\r\n\r\n### Added\r\n- parallel tuning on single node using Noodles runner\r\n- option to pass new defaults for block dimensions\r\n- option to pass a Python function as code generator\r\n- option to pass custom function for output verification",
        "html_url": "https://github.com/KernelTuner/kernel_tuner/releases/tag/0.1.5",
        "name": "Version 0.1.5",
        "release_id": 7123664,
        "tag": "0.1.5",
        "tarball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/tarball/0.1.5",
        "type": "Release",
        "url": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/7123664",
        "value": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/7123664",
        "zipball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/zipball/0.1.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "benvanwerkhoven",
          "type": "User"
        },
        "date_created": "2017-06-14T09:19:31Z",
        "date_published": "2017-06-14T09:24:32Z",
        "description": "This release adds that tune_kernel will also return a dictionary containing information about the environment in which the benchmarking of the kernel was performed. This is very useful for understanding how and under what circumstances certain measurement results were obtained. \r\n\r\nIn addition, there were some very minor changes in the way C functions are compiled and called. ",
        "html_url": "https://github.com/KernelTuner/kernel_tuner/releases/tag/0.1.4",
        "name": "Version 0.1.4",
        "release_id": 6707863,
        "tag": "0.1.4",
        "tarball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/tarball/0.1.4",
        "type": "Release",
        "url": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/6707863",
        "value": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/6707863",
        "zipball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/zipball/0.1.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "benvanwerkhoven",
          "type": "User"
        },
        "date_created": "2017-04-06T13:56:15Z",
        "date_published": "2017-04-06T13:59:46Z",
        "description": "Bugfixes for handling scalar arguments and documentation update.",
        "html_url": "https://github.com/KernelTuner/kernel_tuner/releases/tag/0.1.3",
        "name": "Version 0.1.3",
        "release_id": 5999223,
        "tag": "0.1.3",
        "tarball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/tarball/0.1.3",
        "type": "Release",
        "url": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/5999223",
        "value": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/5999223",
        "zipball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/zipball/0.1.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "benvanwerkhoven",
          "type": "User"
        },
        "date_created": "2017-03-29T06:58:54Z",
        "date_published": "2017-03-29T07:02:41Z",
        "description": "Better defaults for grid divisor lists, full support for 3D grids, and a simpler way to specify the problem size of 1D grids.\r\n\r\n## [0.1.2] - 2017-03-29\r\n### Changed\r\n- allow non-tuple problem_size for 1D grids\r\n- changed default for grid_div_y from None to block_size_y\r\n- converted the tutorial to a Jupyter Notebook\r\n- CUDA backend prints device in use, similar to OpenCL backend\r\n- migrating from nosetests to pytest\r\n- rewrote many of the examples to save results to json files\r\n\r\n### Added\r\n- full support for 3D grids, including option for grid_div_z\r\n- separable convolution example",
        "html_url": "https://github.com/KernelTuner/kernel_tuner/releases/tag/0.1.2",
        "name": "Version 0.1.2",
        "release_id": 5904398,
        "tag": "0.1.2",
        "tarball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/tarball/0.1.2",
        "type": "Release",
        "url": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/5904398",
        "value": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/5904398",
        "zipball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/zipball/0.1.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "benvanwerkhoven",
          "type": "User"
        },
        "date_created": "2017-02-10T07:47:20Z",
        "date_published": "2017-02-10T07:49:18Z",
        "description": "## [0.1.1] - 2017-02-10\n\n### Changed\n- changed the output format to list of dictionaries\n\n### Added\n- option to set compiler options\n",
        "html_url": "https://github.com/KernelTuner/kernel_tuner/releases/tag/0.1.1",
        "name": "Version 0.1.1",
        "release_id": 5417298,
        "tag": "0.1.1",
        "tarball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/tarball/0.1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/5417298",
        "value": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/5417298",
        "zipball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/zipball/0.1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "benvanwerkhoven",
          "type": "User"
        },
        "date_created": "2016-11-02T11:50:54Z",
        "date_published": "2016-11-02T11:59:09Z",
        "description": "# Version 0.1.0\n\nThe Kernel Tuner should by now be ready for production use. Over the last few months we have used it in several projects, which has revealed some of the things that were fixed in this version. This release also marks the end of a period in which the internal structure of the Kernel Tuner has changed several times. We expect the current code structure to stay around for a while. With this version we also release the public roadmap for the project, to show which changes and additional features we have planned for the near and not so near future. We also feel that the software is now ready to be added to public software repositories, which we will do shortly.\n",
        "html_url": "https://github.com/KernelTuner/kernel_tuner/releases/tag/0.1.0",
        "name": "version 0.1.0",
        "release_id": 4546857,
        "tag": "0.1.0",
        "tarball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/tarball/0.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/4546857",
        "value": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/4546857",
        "zipball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/zipball/0.1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "benvanwerkhoven",
          "type": "User"
        },
        "date_created": "2016-06-14T09:54:45Z",
        "date_published": "2016-06-14T11:13:51Z",
        "description": "This is the first beta release of the Kernel Tuner.\n\nThis release basically marks the first version of the kernel tuner, which is currently in beta testing to see what functionality is missing and what needs to be fixed before the code can be considered production ready.\n\nA brief description of the Kernel Tuner's functionality in this version:\n- Basic kernel tuning functionality for CUDA, OpenCL, and C functions\n- Many examples and rather extensive documentation\n- Search space restriction, using the 'restrictions' option\n- Kernel output verification, using the 'answer' option\n- Example showing how to tune both host code (number of streams) and GPU code\n- Run a single kernel with a specific parameter set and get the output\n",
        "html_url": "https://github.com/KernelTuner/kernel_tuner/releases/tag/v0.0.1-beta",
        "name": "first beta release",
        "release_id": 3439359,
        "tag": "v0.0.1-beta",
        "tarball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/tarball/v0.0.1-beta",
        "type": "Release",
        "url": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/3439359",
        "value": "https://api.github.com/repos/KernelTuner/kernel_tuner/releases/3439359",
        "zipball_url": "https://api.github.com/repos/KernelTuner/kernel_tuner/zipball/v0.0.1-beta"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-03 22:53:57",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 278
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Example",
        "type": "Text_excerpt",
        "value": "```python\nimport numpy as np\nfrom kernel_tuner import tune_kernel\n\nkernel_string = \"\"\"\n__global__ void vector_add(float *c, float *a, float *b, int n) {\n    int i = blockIdx.x * block_size_x + threadIdx.x;\n    if (i<n) {\n        c[i] = a[i] + b[i];\n    }\n}\n\"\"\"\n\nn = np.int32(10000000)\n\na = np.random.randn(n).astype(np.float32)\nb = np.random.randn(n).astype(np.float32)\nc = np.zeros_like(a)\n\nargs = [c, a, b, n]\n\ntune_params = {\"block_size_x\": [32, 64, 128, 256, 512]}\n\ntune_kernel(\"vector_add\", kernel_string, n, args, tune_params)\n```\n\nMore [examples here](https://kerneltuner.github.io/kernel_tuner/stable/examples.html).\n"
      },
      "source": "https://raw.githubusercontent.com/KernelTuner/kernel_tuner/master/README.md",
      "technique": "header_analysis"
    }
  ]
}