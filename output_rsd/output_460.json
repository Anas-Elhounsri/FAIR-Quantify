{
  "application_domain": [
    {
      "confidence": 22.45,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "format": "cff",
        "type": "File_dump",
        "value": "# YAML 1.2\n---\nauthors:\n  -\n    family-names: Veen\n    given-names: Lourens\n    orcid: \"https://orcid.org/0000-0002-6311-1168\"\ncff-version: \"1.2.0\"\ndoi: \"10.5281/zenodo.1478048\"\nkeywords:\n  - YAML\n  - object mapper\n  - validation\nlicense: \"Apache-2.0\"\nmessage: \"If you use YAtiML in science, please cite it using these metadata.\"\nrepository-code: \"https://github.com/yatiml/yatiml\"\ntitle: \"YAtiML: Mapping YAML to Python and back, with validation.\"\n...\n"
      },
      "source": "https://raw.githubusercontent.com/yatiml/yatiml/develop/CITATION.cff",
      "technique": "file_exploration"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/yatiml/yatiml"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-09-03T12:31:02Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-01-13T23:58:47Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Python library for YAML type inference, schema checking and syntactic sugar"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9112981872375387,
      "result": {
        "type": "Text_excerpt",
        "value": "YAML-based file formats can be very handy, as YAML is easy to write by humans,\nand parsing support for it is widely available. Just read your YAML file into a\ndocument structure (a tree of nested dicts and lists), and manipulate that in\nyour code. \nTo avoid that, you can validate your YAML using various schema checkers. You\nwrite a description of what your YAML file must look like, then feed that to a\nlibrary which checks the incoming file against the description. That gives you a\nbetter error message, but it's a lot of work. \nYAtiML takes a different approach. Instead of a schema, you write a Python\nclass. You probably already know how to do that, so no need to learn anything.\nYAtiML then generates loading and dumping functions for you, which convert\nbetween YAML and Python objects. If needed, you can add some extra code to make\nthe YAML look nicer or implement special features. \nYAtiML supports Python 3.6 and later. \nIf you use YAtiML for scientific work, we ask that you cite it. You can\n`download a citation in various formats at the Research Software Directory\n<https://www.research-software.nl/software/yatiml>`_. \n"
      },
      "source": "https://raw.githubusercontent.com/yatiml/yatiml/develop/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9979413051923078,
      "result": {
        "original_header": "Code of Conduct",
        "type": "Text_excerpt",
        "value": "Before describing where to ask questions or report bugs, we'd like to point out\nthat this project is governed by a code of conduct, as described in\nCODE_OF_CONDUCT.rst, and we expect you to adhere to it. Please be nice to your\nfellow humans.\n \n"
      },
      "source": "https://raw.githubusercontent.com/yatiml/yatiml/develop/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9013131551712088,
      "result": {
        "original_header": "Questions",
        "type": "Text_excerpt",
        "value": "If you have a question that the documentation does not answer for you, then you\nhave found a bug in the documentation. We'd love to fix it, but we need a bit of\nhelp from you to do so. Please do the following: \n"
      },
      "source": "https://raw.githubusercontent.com/yatiml/yatiml/develop/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8898543988027083,
      "result": {
        "original_header": ". apply the \"Question\" label; apply other labels when relevant.",
        "type": "Text_excerpt",
        "value": "We'll answer your question, and improve the documentation where necessary.\n \n"
      },
      "source": "https://raw.githubusercontent.com/yatiml/yatiml/develop/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9833279867272339,
      "result": {
        "original_header": "Bugs",
        "type": "Text_excerpt",
        "value": "Like most software, YAtiML is made by humans, and we make mistakes. If you think\nyou've found a bug in YAtiML, please let us know! Reporting bugs goes as follows.\n \n"
      },
      "source": "https://raw.githubusercontent.com/yatiml/yatiml/develop/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8055354503447024,
      "result": {
        "original_header": "Questions",
        "type": "Text_excerpt",
        "value": "   Please explain:\n    - what you were trying to achieve,\n    - what you did to make that happen,\n    - what you expected the result to be,\n    - what happened instead. \n"
      },
      "source": "https://raw.githubusercontent.com/yatiml/yatiml/develop/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9235147984062103,
      "result": {
        "original_header": ". If your issue search did not yield any relevant results, make a new issue.",
        "type": "Text_excerpt",
        "value": "  It really helps to have the actual code for a simple example that demonstrates\n  the issue, but excerpts and error messages and a description are welcome too.\n \n"
      },
      "source": "https://raw.githubusercontent.com/yatiml/yatiml/develop/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9258794873543925,
      "result": {
        "original_header": "Questions",
        "type": "Text_excerpt",
        "value": "With that, we should be able to fix the problem. \nYAtiML is Copyright 2018-2024, Netherlands eScience Center, University of\nAmsterdam, and VU University Amsterdam \n"
      },
      "source": "https://raw.githubusercontent.com/yatiml/yatiml/develop/README.rst",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://yatiml.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/yatiml/yatiml/develop/README.rst",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/yatiml/yatiml/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/yatiml/yatiml/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "yatiml/yatiml"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/yatiml/yatiml/develop/README.rst",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/yatiml/yatiml/develop/test_pyyaml_versions.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.9776696570329463,
      "result": {
        "type": "Text_excerpt",
        "value": "    :alt: Documentation Build Status \n.. image:: https://github.com/yatiml/yatiml/actions/workflows/ci.yaml/badge.svg\n    :target: https://github.com/yatiml/yatiml/actions\n    :alt: Build Status \n.. image:: https://app.codacy.com/project/badge/Grade/bca7a121d9c742d2905eae08a75676c3\n    :target: https://www.codacy.com/gh/yatiml/yatiml/dashboard\n    :alt: Codacy Grade \n.. image:: https://app.codacy.com/project/badge/Coverage/bca7a121d9c742d2905eae08a75676c3\n    :target: https://www.codacy.com/gh/yatiml/yatiml/dashboard\n    :alt: Code Coverage \n.. image:: https://zenodo.org/badge/147202299.svg\n   :target: https://zenodo.org/badge/latestdoi/147202299 \nYAtiML supports Python 3.6 and later. \nInstructions on how to install and use YAtiML can be found in `the YAtiML\ndocumentation <https://yatiml.readthedocs.io>`_.\n \n"
      },
      "source": "https://raw.githubusercontent.com/yatiml/yatiml/develop/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9997678572028488,
      "result": {
        "original_header": "Questions",
        "type": "Text_excerpt",
        "value": "If you have a question that the documentation does not answer for you, then you\nhave found a bug in the documentation. We'd love to fix it, but we need a bit of\nhelp from you to do so. Please do the following: \n#. use the `search functionality <https://github.com/yatiml/yatiml/issues>`_\n   to see if someone already filed the same issue;\n#. if your issue search did not yield any relevant results, make a new issue;\n#. apply the \"Question\" label; apply other labels when relevant. \n"
      },
      "source": "https://raw.githubusercontent.com/yatiml/yatiml/develop/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9899335343654184,
      "result": {
        "original_header": ". apply the \"Question\" label; apply other labels when relevant.",
        "type": "Text_excerpt",
        "value": "We'll answer your question, and improve the documentation where necessary.\n \n"
      },
      "source": "https://raw.githubusercontent.com/yatiml/yatiml/develop/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9927202826947191,
      "result": {
        "original_header": "Questions",
        "type": "Text_excerpt",
        "value": "#. Use the `search functionality`_ to see if someone already filed the same\n   issue. \n"
      },
      "source": "https://raw.githubusercontent.com/yatiml/yatiml/develop/README.rst",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/yatiml/yatiml/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Apache License 2.0",
        "spdx_id": "Apache-2.0",
        "type": "License",
        "url": "https://api.github.com/licenses/apache-2.0",
        "value": "https://api.github.com/licenses/apache-2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/yatiml/yatiml/develop/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "yatiml"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "yatiml"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 217252,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 926,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/yatiml/yatiml/develop/README.rst"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "LourensVeen",
          "type": "User"
        },
        "date_created": "2024-03-17T19:59:28Z",
        "date_published": "2024-03-17T20:21:52Z",
        "description": "# YAtiML\r\nYAML-based file formats can be very handy, as YAML is easy to write by humans, and parsing support for it is widely available. Just read your YAML file into a document structure (a tree of nested dicts and lists), and manipulate that in your code.\r\n\r\nAs long as that YAML file contains exactly what you expect, that works fine. But if it contains a mistake, then you're likely to crash the program with a cryptic error message, or worse (especially if the YAML file was loaded from the Internet) it may do something unexpected.\r\n\r\nTo avoid that, you can validate your YAML using various schema checkers. You write a description of what your YAML file must look like, then feed that to a library which checks the incoming file against the description. That gives you a better error message, but it's a lot of work.\r\n\r\nYAtiML takes a different approach. Instead of a schema, you write a Python class. You probably already know how to do that, so no need to learn anything. YAtiML then generates loading and dumping functions for you, which convert between YAML and Python objects. If needed, you can add some extra code to make the YAML look nicer or implement special features.\r\n\r\n# 0.11.1\r\n\r\n## Fixes\r\nThe switch to PyYAML in the previous release also switched us back to YAML              \r\n1.1, which has some formatting rules that are arguably just broken. The                 \r\nfirst two fixes here add work-arounds that get us partially back up to YAML             \r\n1.2 and less surprising syntax rules.                                                   \r\n                                                                                        \r\n* Switch back to YAML 1.2 floats\r\n* Switch back to YAML 1.2 booleans\r\n* Make enum values matching boolean constants work correctly",
        "html_url": "https://github.com/yatiml/yatiml/releases/tag/0.11.1",
        "name": "Release 0.11.1",
        "release_id": 146942760,
        "tag": "0.11.1",
        "tarball_url": "https://api.github.com/repos/yatiml/yatiml/tarball/0.11.1",
        "type": "Release",
        "url": "https://api.github.com/repos/yatiml/yatiml/releases/146942760",
        "value": "https://api.github.com/repos/yatiml/yatiml/releases/146942760",
        "zipball_url": "https://api.github.com/repos/yatiml/yatiml/zipball/0.11.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "LourensVeen",
          "type": "User"
        },
        "date_created": "2024-03-16T13:44:36Z",
        "date_published": "2024-03-16T14:23:08Z",
        "description": "# YAtiML\r\nYAML-based file formats can be very handy, as YAML is easy to write by humans, and parsing support for it is widely available. Just read your YAML file into a document structure (a tree of nested dicts and lists), and manipulate that in your code.\r\n\r\nAs long as that YAML file contains exactly what you expect, that works fine. But if it contains a mistake, then you're likely to crash the program with a cryptic error message, or worse (especially if the YAML file was loaded from the Internet) it may do something unexpected.\r\n\r\nTo avoid that, you can validate your YAML using various schema checkers. You write a description of what your YAML file must look like, then feed that to a library which checks the incoming file against the description. That gives you a better error message, but it's a lot of work.\r\n\r\nYAtiML takes a different approach. Instead of a schema, you write a Python class. You probably already know how to do that, so no need to learn anything. YAtiML then generates loading and dumping functions for you, which convert between YAML and Python objects. If needed, you can add some extra code to make the YAML look nicer or implement special features.\r\n\r\n# 0.11.0\r\n\r\n## New functionality\r\n* Support for Python 3.12\r\n* Improved error messages\r\n\r\n## Fixes\r\n* Now uses PyYAML rather than ruamel.yaml (fixes deprecation warnings)",
        "html_url": "https://github.com/yatiml/yatiml/releases/tag/0.11.0",
        "name": "Release 0.11.0",
        "release_id": 146893331,
        "tag": "0.11.0",
        "tarball_url": "https://api.github.com/repos/yatiml/yatiml/tarball/0.11.0",
        "type": "Release",
        "url": "https://api.github.com/repos/yatiml/yatiml/releases/146893331",
        "value": "https://api.github.com/repos/yatiml/yatiml/releases/146893331",
        "zipball_url": "https://api.github.com/repos/yatiml/yatiml/zipball/0.11.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "LourensVeen",
          "type": "User"
        },
        "date_created": "2022-12-19T14:16:37Z",
        "date_published": "2022-12-19T16:06:37Z",
        "description": "# YAtiML\r\nYAML-based file formats can be very handy, as YAML is easy to write by humans, and parsing support for it is widely available. Just read your YAML file into a document structure (a tree of nested dicts and lists), and manipulate that in your code.\r\n\r\nAs long as that YAML file contains exactly what you expect, that works fine. But if it contains a mistake, then you're likely to crash the program with a cryptic error message, or worse (especially if the YAML file was loaded from the Internet) it may do something unexpected.\r\n\r\nTo avoid that, you can validate your YAML using various schema checkers. You write a description of what your YAML file must look like, then feed that to a library which checks the incoming file against the description. That gives you a better error message, but it's a lot of work.\r\n\r\nYAtiML takes a different approach. Instead of a schema, you write a Python class. You probably already know how to do that, so no need to learn anything. YAtiML then generates loading and dumping functions for you, which convert between YAML and Python objects. If needed, you can add some extra code to make the YAML look nicer or implement special features.\r\n\r\n# 0.10.0\r\n\r\n## Incompatible changes\r\n* Ignore abstract base classes (abc.ABC and/or abstractmethod)\r\n\r\n## New functionality\r\n* Easier-to-understand error messages\r\n* Installation via Conda (already worked, now documented)\r\n* Small documentation improvements\r\n* Python 3.11 support\r\n* Compatibility with ruamel.yaml 0.17\r\n\r\n## Fixes\r\n* Bug in map_attribute_to_index\r\n\r\n## Removed\r\n* Support for Python 3.6",
        "html_url": "https://github.com/yatiml/yatiml/releases/tag/0.10.0",
        "name": "Release 0.10.0",
        "release_id": 86553047,
        "tag": "0.10.0",
        "tarball_url": "https://api.github.com/repos/yatiml/yatiml/tarball/0.10.0",
        "type": "Release",
        "url": "https://api.github.com/repos/yatiml/yatiml/releases/86553047",
        "value": "https://api.github.com/repos/yatiml/yatiml/releases/86553047",
        "zipball_url": "https://api.github.com/repos/yatiml/yatiml/zipball/0.10.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "LourensVeen",
          "type": "User"
        },
        "date_created": "2022-03-30T09:43:52Z",
        "date_published": "2022-03-30T09:55:16Z",
        "description": "# YAtiML\r\nYAML-based file formats can be very handy, as YAML is easy to write by humans, and parsing support for it is widely available. Just read your YAML file into a document structure (a tree of nested dicts and lists), and manipulate that in your code.                                                                      \r\n                                                                                \r\nAs long as that YAML file contains exactly what you expect, that works fine. But if it contains a mistake, then you're likely to crash the program with a cryptic error message, or worse (especially if the YAML file was loaded from the Internet) it may do something unexpected.                                       \r\n                                                                                \r\nTo avoid that, you can validate your YAML using various schema checkers. You write a description of what your YAML file must look like, then feed that to a library which checks the incoming file against the description. That gives you a better error message, but it's a lot of work.                                   \r\n                                                                                \r\nYAtiML takes a different approach. Instead of a schema, you write a Python class. You probably already know how to do that, so no need to learn anything. YAtiML then generates loading and dumping functions for you, which convert between YAML and Python objects. If needed, you can add some extra code to make the YAML look nicer or implement special features.\r\n\r\n# 0.9.0\r\n\r\n## New functionality\r\n* Support for Python 3.10 (worked fine already, now official)\r\n* Error messages now quote attribute names, making them easier to read.\r\n\r\n## Fixes\r\n* `map_attribute_to_index()` caused load failure for dictionaries indexed by\r\n  a user-defined string class.\r\n* All examples in the documentation now use the new `_yatiml_*` function names,\r\n  instead of the old ones without the leading underscore.\r\n\r\n## Removed                                                                         \r\n* Loader and Dumper classes, which were deprecated and broken in 0.8.0. Please\r\n  use the new `load_function`,   `dump_function` and `dumps_function` functions\r\n  instead.",
        "html_url": "https://github.com/yatiml/yatiml/releases/tag/0.9.0",
        "name": "Release 0.9.0",
        "release_id": 63135855,
        "tag": "0.9.0",
        "tarball_url": "https://api.github.com/repos/yatiml/yatiml/tarball/0.9.0",
        "type": "Release",
        "url": "https://api.github.com/repos/yatiml/yatiml/releases/63135855",
        "value": "https://api.github.com/repos/yatiml/yatiml/releases/63135855",
        "zipball_url": "https://api.github.com/repos/yatiml/yatiml/zipball/0.9.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "LourensVeen",
          "type": "User"
        },
        "date_created": "2021-07-26T09:53:24Z",
        "date_published": "2021-07-26T10:01:32Z",
        "description": "# YAtiML\r\nYAML-based file formats can be very handy, as YAML is easy to write by humans, and parsing support for it is widely available. Just read your YAML file into a document structure (a tree of nested dicts and lists), and manipulate that in your code.                                                                      \r\n                                                                                \r\nAs long as that YAML file contains exactly what you expect, that works fine. But if it contains a mistake, then you're likely to crash the program with a cryptic error message, or worse (especially if the YAML file was loaded from the Internet) it may do something unexpected.                                       \r\n                                                                                \r\nTo avoid that, you can validate your YAML using various schema checkers. You write a description of what your YAML file must look like, then feed that to a library which checks the incoming file against the description. That gives you a better error message, but it's a lot of work.                                   \r\n                                                                                \r\nYAtiML takes a different approach. Instead of a schema, you write a Python class. You probably already know how to do that, so no need to learn anything. YAtiML then generates loading and dumping functions for you, which convert between YAML and Python objects. If needed, you can add some extra code to make the YAML look nicer or implement special features.\r\n\r\n# 0.8.0\r\n\r\n## Incompatible changes\r\n* Accept explicit tags only if compatible with the recognised type(s)\r\n\r\n## New functionality\r\n* Support for untyped documents and attributes\r\n* Support for Any-typed documents and attributes\r\n* Support for Python dataclasses\r\n\r\n## Fixes\r\n* Dumping of OrderedDict to a file (but not to a string) produced a stray !!omap.\r\n* Various fixes and improvements to development infrastructure\r\n\r\n## Removed                                                                         \r\n* Official support for Python 3.5, which is no longer supported upstream. It will probably still work, but getting anything to install on 3.5 is getting to be pretty difficult so it's probably time to upgrade.",
        "html_url": "https://github.com/yatiml/yatiml/releases/tag/0.8.0",
        "name": "Release 0.8.0",
        "release_id": 46757822,
        "tag": "0.8.0",
        "tarball_url": "https://api.github.com/repos/yatiml/yatiml/tarball/0.8.0",
        "type": "Release",
        "url": "https://api.github.com/repos/yatiml/yatiml/releases/46757822",
        "value": "https://api.github.com/repos/yatiml/yatiml/releases/46757822",
        "zipball_url": "https://api.github.com/repos/yatiml/yatiml/zipball/0.8.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "LourensVeen",
          "type": "User"
        },
        "date_created": "2021-01-14T14:37:44Z",
        "date_published": "2021-01-14T19:26:55Z",
        "description": "# YAtiML\r\n\r\nYAtiML is a small Python library that works with ruamel.yaml, adding functions for automatic type recognition to it. YAtiML is not a schema language like XSD and Relax-NG are for XML, or JSON Schema is for JSON. YAtiML is also not an Object/YAML mapper (YAML is already an object serialisation system, so you don't need an extra library for that). However, YAtiML does solve the same kind of problems, and more, so if you are looking for a schema language for YAML, YAtiML may actually be what you need.\r\n\r\nInstructions on how to install and use YAtiML can be found in the [YAtiML documentation](https://yatiml.readthedocs.io/).\r\n\r\n# Release 0.7.0\r\n\r\n## Incompatible changes\r\n\r\n- Use seasoning functions only on the class they're defined on\r\n\r\n## New functionality\r\n\r\n- New yatiml.String to mark string-like classes\r\n- User-defined strings may now be used as dictionary keys\r\n- Support for index mappings\r\n- Support for latest ruamel.yaml\r\n- Documentation improvements",
        "html_url": "https://github.com/yatiml/yatiml/releases/tag/0.7.0",
        "name": "Release 0.7.0",
        "release_id": 36408527,
        "tag": "0.7.0",
        "tarball_url": "https://api.github.com/repos/yatiml/yatiml/tarball/0.7.0",
        "type": "Release",
        "url": "https://api.github.com/repos/yatiml/yatiml/releases/36408527",
        "value": "https://api.github.com/repos/yatiml/yatiml/releases/36408527",
        "zipball_url": "https://api.github.com/repos/yatiml/yatiml/zipball/0.7.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "LourensVeen",
          "type": "User"
        },
        "date_created": "2020-11-25T16:23:18Z",
        "date_published": "2020-11-25T16:26:04Z",
        "description": "# Incompatible changes\r\n- Use datetime.date instead of datetime.datetime\r\n\r\n# New functionality\r\n- Support for loading and dumping pathlib.Path objects\r\n- Support for Python 3.9",
        "html_url": "https://github.com/yatiml/yatiml/releases/tag/0.6.1",
        "name": "Release 0.6.1",
        "release_id": 34424044,
        "tag": "0.6.1",
        "tarball_url": "https://api.github.com/repos/yatiml/yatiml/tarball/0.6.1",
        "type": "Release",
        "url": "https://api.github.com/repos/yatiml/yatiml/releases/34424044",
        "value": "https://api.github.com/repos/yatiml/yatiml/releases/34424044",
        "zipball_url": "https://api.github.com/repos/yatiml/yatiml/zipball/0.6.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "LourensVeen",
          "type": "User"
        },
        "date_created": "2020-11-15T17:39:51Z",
        "date_published": "2020-11-15T17:48:16Z",
        "description": "# New functionality\r\n* New make_loader and make_dumper functions improve ease-of-use\r\n* JSON support\r\n* Support for Mapping and Sequence types\r\n* UnknownNode.require_attribute_value_not() function\r\n* Node.remove_attributes_with_default_values() function\r\n* Recipe for seasoning Enums\r\n\r\n# Fixes\r\n* Various documentation improvements\r\n* Better error message if constructor raises",
        "html_url": "https://github.com/yatiml/yatiml/releases/tag/0.6.0",
        "name": "Release 0.6.0",
        "release_id": 33976449,
        "tag": "0.6.0",
        "tarball_url": "https://api.github.com/repos/yatiml/yatiml/tarball/0.6.0",
        "type": "Release",
        "url": "https://api.github.com/repos/yatiml/yatiml/releases/33976449",
        "value": "https://api.github.com/repos/yatiml/yatiml/releases/33976449",
        "zipball_url": "https://api.github.com/repos/yatiml/yatiml/zipball/0.6.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "LourensVeen",
          "type": "User"
        },
        "date_created": "2020-04-22T15:44:39Z",
        "date_published": "2020-04-22T15:47:26Z",
        "description": "# Fixes\r\n- Fixed support for Python 3.5.1 (again, sorry)",
        "html_url": "https://github.com/yatiml/yatiml/releases/tag/0.5.1",
        "name": "Release 0.5.1",
        "release_id": 25771663,
        "tag": "0.5.1",
        "tarball_url": "https://api.github.com/repos/yatiml/yatiml/tarball/0.5.1",
        "type": "Release",
        "url": "https://api.github.com/repos/yatiml/yatiml/releases/25771663",
        "value": "https://api.github.com/repos/yatiml/yatiml/releases/25771663",
        "zipball_url": "https://api.github.com/repos/yatiml/yatiml/zipball/0.5.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "LourensVeen",
          "type": "User"
        },
        "date_created": "2020-03-19T08:38:38Z",
        "date_published": "2020-03-19T09:13:11Z",
        "description": "# Incompatible changes\r\n- yatiml_* methods should now be called _yatiml_*\r\n- Dropped support for Python 3.4, which is end-of-life\r\n\r\n# Fixes\r\n- Savourised classes in lists and dicts now load correctly\r\n- Fixed compatibility with the latest versions of ruamel.yaml\r\n- Fixed support for Python 3.5.1",
        "html_url": "https://github.com/yatiml/yatiml/releases/tag/0.5.0",
        "name": "Release 0.5.0",
        "release_id": 24664117,
        "tag": "0.5.0",
        "tarball_url": "https://api.github.com/repos/yatiml/yatiml/tarball/0.5.0",
        "type": "Release",
        "url": "https://api.github.com/repos/yatiml/yatiml/releases/24664117",
        "value": "https://api.github.com/repos/yatiml/yatiml/releases/24664117",
        "zipball_url": "https://api.github.com/repos/yatiml/yatiml/zipball/0.5.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "LourensVeen",
          "type": "User"
        },
        "date_created": "2018-10-28T17:42:14Z",
        "date_published": "2018-11-05T15:20:50Z",
        "description": "New functionality\r\n-----------------\r\n\r\n* Extended map_to_seq seasoning\r\n* Support for YAML timestamp / Python datetime\r\n* Support for YAML keys with dashes\r\n\r\nFixes\r\n-----\r\n\r\n* Much improved error messages",
        "html_url": "https://github.com/yatiml/yatiml/releases/tag/0.4.0",
        "name": "Release 0.4.0",
        "release_id": 13832915,
        "tag": "0.4.0",
        "tarball_url": "https://api.github.com/repos/yatiml/yatiml/tarball/0.4.0",
        "type": "Release",
        "url": "https://api.github.com/repos/yatiml/yatiml/releases/13832915",
        "value": "https://api.github.com/repos/yatiml/yatiml/releases/13832915",
        "zipball_url": "https://api.github.com/repos/yatiml/yatiml/zipball/0.4.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "LourensVeen",
          "type": "User"
        },
        "date_created": "2018-10-23T14:07:00Z",
        "date_published": "2018-11-05T16:26:13Z",
        "description": "New functionality\r\n-----------------\r\n\r\n* Support for classes that are represented by a string in the YAML file\r\n* New unified yatiml.Node interface (API change)\r\n\r\nFixes\r\n-----\r\n\r\n* Small improvements to documentation\r\n* Miscellaneous small fixes",
        "html_url": "https://github.com/yatiml/yatiml/releases/tag/0.3.0",
        "name": "Release 0.3.0",
        "release_id": 13834569,
        "tag": "0.3.0",
        "tarball_url": "https://api.github.com/repos/yatiml/yatiml/tarball/0.3.0",
        "type": "Release",
        "url": "https://api.github.com/repos/yatiml/yatiml/releases/13834569",
        "value": "https://api.github.com/repos/yatiml/yatiml/releases/13834569",
        "zipball_url": "https://api.github.com/repos/yatiml/yatiml/zipball/0.3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "LourensVeen",
          "type": "User"
        },
        "date_created": "2018-10-16T10:58:19Z",
        "date_published": "2018-11-05T16:27:40Z",
        "description": "New functionality\r\n-----------------\r\n\r\n* Support for enumerations\r\n* Support for user-defined string types\r\n\r\nFixes\r\n-----\r\n\r\n* Various small tooling fixes\r\n* Some refactoring",
        "html_url": "https://github.com/yatiml/yatiml/releases/tag/0.2.0",
        "name": "Release 0.2.0",
        "release_id": 13834601,
        "tag": "0.2.0",
        "tarball_url": "https://api.github.com/repos/yatiml/yatiml/tarball/0.2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/yatiml/yatiml/releases/13834601",
        "value": "https://api.github.com/repos/yatiml/yatiml/releases/13834601",
        "zipball_url": "https://api.github.com/repos/yatiml/yatiml/zipball/0.2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "LourensVeen",
          "type": "User"
        },
        "date_created": "2018-09-27T21:18:37Z",
        "date_published": "2018-11-05T16:28:17Z",
        "description": "* Initial release with basic functionality",
        "html_url": "https://github.com/yatiml/yatiml/releases/tag/0.1.0",
        "name": "Release 0.1.0",
        "release_id": 13834617,
        "tag": "0.1.0",
        "tarball_url": "https://api.github.com/repos/yatiml/yatiml/tarball/0.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/yatiml/yatiml/releases/13834617",
        "value": "https://api.github.com/repos/yatiml/yatiml/releases/13834617",
        "zipball_url": "https://api.github.com/repos/yatiml/yatiml/zipball/0.1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 00:17:43",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 9
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": ". use the `search functionality &lt;https://github.com/yatiml/yatiml/issues&gt;`_",
        "type": "Text_excerpt",
        "value": "    :target: https://yatiml.readthedocs.io/en/latest/?badge=develop\n    :alt: Documentation Build Status\n\n.. image:: https://github.com/yatiml/yatiml/actions/workflows/ci.yaml/badge.svg\n    :target: https://github.com/yatiml/yatiml/actions\n    :alt: Build Status\n\n.. image:: https://app.codacy.com/project/badge/Grade/bca7a121d9c742d2905eae08a75676c3\n    :target: https://www.codacy.com/gh/yatiml/yatiml/dashboard\n    :alt: Codacy Grade\n\n.. image:: https://app.codacy.com/project/badge/Coverage/bca7a121d9c742d2905eae08a75676c3\n    :target: https://www.codacy.com/gh/yatiml/yatiml/dashboard\n    :alt: Code Coverage\n\n.. image:: https://zenodo.org/badge/147202299.svg\n   :target: https://zenodo.org/badge/latestdoi/147202299\n\n.. image:: https://img.shields.io/badge/rsd-yatiml-00a3e3.svg\n   :target: https://www.research-software.nl/software/yatiml\n\n.. image:: https://img.shields.io/badge/fair--software.eu-%E2%97%8F%20%20%E2%97%8F%20%20%E2%97%8F%20%20%E2%97%8F%20%20%E2%97%8B-yellow\n   :target: https://fair-software.eu\n\n################################################################################\nYAtiML\n################################################################################\n\nYAML-based file formats can be very handy, as YAML is easy to write by humans,\nand parsing support for it is widely available. Just read your YAML file into a\ndocument structure (a tree of nested dicts and lists), and manipulate that in\nyour code.\n\nAs long as that YAML file contains exactly what you expect, that works fine.\nBut if it contains a mistake, then you're likely to crash the program with a\ncryptic error message, or worse (especially if the YAML file was loaded from the\nInternet) it may do something unexpected.\n\nTo avoid that, you can validate your YAML using various schema checkers. You\nwrite a description of what your YAML file must look like, then feed that to a\nlibrary which checks the incoming file against the description. That gives you a\nbetter error message, but it's a lot of work.\n\nYAtiML takes a different approach. Instead of a schema, you write a Python\nclass. You probably already know how to do that, so no need to learn anything.\nYAtiML then generates loading and dumping functions for you, which convert\nbetween YAML and Python objects. If needed, you can add some extra code to make\nthe YAML look nicer or implement special features.\n\nYAtiML supports Python 3.6 and later.\n\nIf you use YAtiML for scientific work, we ask that you cite it. You can\n`download a citation in various formats at the Research Software Directory\n<https://www.research-software.nl/software/yatiml>`_.\n\nDocumentation and Help\n**********************\n\nInstructions on how to install and use YAtiML can be found in `the YAtiML\ndocumentation <https://yatiml.readthedocs.io>`_.\n\nCode of Conduct\n---------------\n\nBefore describing where to ask questions or report bugs, we'd like to point out\nthat this project is governed by a code of conduct, as described in\nCODE_OF_CONDUCT.rst, and we expect you to adhere to it. Please be nice to your\nfellow humans.\n\nQuestions\n---------\n\nIf you have a question that the documentation does not answer for you, then you\nhave found a bug in the documentation. We'd love to fix it, but we need a bit of\nhelp from you to do so. Please do the following:\n\n#. use the `search functionality <https://github.com/yatiml/yatiml/issues>`_\n   to see if someone already filed the same issue;"
      },
      "source": "https://raw.githubusercontent.com/yatiml/yatiml/develop/README.rst",
      "technique": "header_analysis"
    }
  ]
}