{
  "application_domain": [
    {
      "confidence": 17.66,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "format": "cff",
        "type": "File_dump",
        "value": "cff-version: 1.2.0\nmessage: \"Please cite this software using the metadata from 'preferred-citation'.\"\ntitle: \"3D Slicer\"\nrepository-code: https://github.com/Slicer/Slicer\nwebsite: https://www.slicer.org/\npreferred-citation:\n  type: article\n  title: \"3D Slicer as an Image Computing Platform for the Quantitative Imaging Network\"\n  scope: \"Cite this paper if you want to reference the general concepts of the software.\"\n  authors:\n    - family-names: Fedorov\n      given-names: Andriy\n    - family-names: Beichel\n      given-names: Reinhard\n    - family-names: Kalpathy-Cramer\n      given-names: Jayashree\n    - family-names: Finet\n      given-names: Julien\n    - family-names: Fillion-Robin\n      given-names: Jean-Christophe\n      orcid: 0000-0002-9688-8950\n    - family-names: Pujol\n      given-names: Sonia\n    - family-names: Bauer\n      given-names: Christian\n    - family-names: Jennings\n      given-names: Dominique\n    - family-names: Fennessy\n      given-names: Fiona\n    - family-names: Sonka\n      given-names: Milan\n    - family-names: Buatti\n      given-names: John\n    - family-names: Aylward\n      given-names: Stephen\n      orcid: 0000-0002-7862-8856\n    - family-names: Miller\n      given-names: James\n    - family-names: Pieper\n      given-names: Steve\n    - family-names: Kikinis\n      given-names: Ron\n      orcid:\n  journal: \"Magnetic Resonance Imaging\"\n  year: 2012\n  month: 11\n  volume: 30\n  issue: 9\n  start: 1323\n  end: 1341\n  doi: 10.1016/j.mri.2012.05.001\n"
      },
      "source": "https://raw.githubusercontent.com/Slicer/Slicer/main/CITATION.cff",
      "technique": "file_exploration"
    }
  ],
  "code_of_conduct": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "\n# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, caste, color, religion, or sexual\nidentity and orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the overall\n  community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or advances of\n  any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email address,\n  without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders listed\n[here](https://github.com/Slicer/Slicer/blob/master/CONTRIBUTING.md#benevolent-dictators-for-life)\nvia private message on the [Slicer forum](https://discourse.slicer.org).\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.1, available at\n[https://www.contributor-covenant.org/version/2/1/code_of_conduct.html][v2.1].\n\nCommunity Impact Guidelines were inspired by\n[Mozilla's code of conduct enforcement ladder][Mozilla CoC].\n\nFor answers to common questions about this code of conduct, see the FAQ at\n[https://www.contributor-covenant.org/faq][FAQ]. Translations are available at\n[https://www.contributor-covenant.org/translations][translations].\n\n## Deviations\n\nFor a history of updates and revisions to this document,\nsee https://github.com/Slicer/Slicer/commits/main/CODE_OF_CONDUCT.md.\n\n[homepage]: https://www.contributor-covenant.org\n[v2.1]: https://www.contributor-covenant.org/version/2/1/code_of_conduct.html\n[Mozilla CoC]: https://github.com/mozilla/diversity\n[FAQ]: https://www.contributor-covenant.org/faq\n[translations]: https://www.contributor-covenant.org/translations\n"
      },
      "source": "https://raw.githubusercontent.com/Slicer/Slicer/main/CODE_OF_CONDUCT.md",
      "technique": "file_exploration"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Slicer/Slicer"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Contributing to Slicer\n======================\n\nThere are many ways to contribute to Slicer, with varying levels of effort.  Do try to\nlook through the [documentation](https://slicer.readthedocs.io/en/latest/index.html) first if something is unclear, and let us know how we can\ndo better.\n\n  * Ask a question on the [Slicer forum][slicer-forum]\n  * Use [Slicer issues][slicer-issues] to submit a feature request or bug, or add to the discussion on an existing issue\n  * Submit a [Pull Request](https://github.com/Slicer/Slicer/pulls) to improve Slicer or its documentation\n\nWe encourage a range of Pull Requests, from patches that include passing tests and\ndocumentation, all the way down to half-baked ideas that launch discussions.\n\nThe PR Process, Circle CI, and Related Gotchas\n----------------------------------------------\n\n### How to submit a PR ?\n\nIf you are new to Slicer development and you don't have push access to the Slicer\nrepository, here are the steps:\n\n1. [Fork and clone](https://docs.github.com/get-started/quickstart/fork-a-repo) the repository.\n2. Run the developer setup script [`Utilities/SetupForDevelopment.sh`](https://github.com/Slicer/Slicer/blob/main/Utilities/SetupForDevelopment.sh).\n3. Create a branch.\n4. [Push](https://docs.github.com/get-started/using-git/pushing-commits-to-a-remote-repository) the branch to your GitHub fork.\n5. Create a [Pull Request](https://github.com/Slicer/Slicer/pulls).\n\nThis corresponds to the `Fork & Pull Model` described in the [GitHub collaborative development](https://docs.github.com/pull-requests/collaborating-with-pull-requests/getting-started/about-collaborative-development-models)\ndocumentation.\n\nWhen submitting a PR, the developers following the project will be notified. That\nsaid, to engage specific developers, you can add `Cc: @<username>` comment to notify\nthem of your awesome contributions.\nBased on the comments posted by the reviewers, you may have to revisit your patches.\n\n\n### How to efficiently contribute ?\n\nWe encourage all developers to:\n\n* add or update tests. There are plenty of existing tests to inspire from. The\n  testing [how-tos](https://www.slicer.org/wiki/Documentation/Nightly/Developers/Tutorials/Testing) are\n  also resourceful.\n\n* consider potential backward compatibility breakage and discuss these on the\n  [Slicer forum][slicer-forum]. For example, update of ITK, Python, Qt or VTK version, change to\n  core functionality, should be carefully reviewed and integrated. Ideally, several\n  developers would test that the changes don't break extensions.\n\n### How to write commit messages ?\n\nWrite your commit messages using the standard prefixes for Slicer commit\nmessages:\n\n  * `BUG:` Fix for runtime crash or incorrect result\n  * `COMP:` Compiler error or warning fix\n  * `DOC:` Documentation change\n  * `ENH:` New functionality\n  * `PERF:` Performance improvement\n  * `STYLE:` No logic impact (indentation, comments)\n  * `WIP:` Work In Progress not ready for merge\n\nThe body of the message should clearly describe the motivation of the commit\n(**what**, **why**, and **how**). In order to ease the task of reviewing\ncommits, the message body should follow the following guidelines:\n\n  1. Leave a blank line between the subject and the body.\n  This helps `git log` and `git rebase` work nicely, and allows to smooth\n  generation of release notes.\n  2. Try to keep the subject line below 72 characters, ideally 50.\n  3. Capitalize the subject line.\n  4. Do not end the subject line with a period.\n  5. Use the imperative mood in the subject line (e.g. `BUG: Fix spacing\n  not being considered.`).\n  6. Wrap the body at 80 characters.\n  7. Use semantic line feeds to separate different ideas, which improves the\n  readability.\n  8. Be concise, but honor the change: if significant alternative solutions\n  were available, explain why they were discarded.\n  9. If the commit refers to a topic discussed on the [Slicer forum][slicer-forum], or fixes\n  a regression test, provide the link. If it fixes a compiler error, provide a\n  minimal verbatim message of the compiler error. If the commit closes an\n  issue, use the [GitHub issue closing\n  keywords](https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue).\n\nKeep in mind that the significant time is invested in reviewing commits and\n*pull requests*, so following these guidelines will greatly help the people\ndoing reviews.\n\nThese guidelines are largely inspired by Chris Beam's\n[How to Write a Commit Message](https://chris.beams.io/posts/git-commit/)\npost.\n\nExamples:\n  - Bad: `BUG: Check pointer validity before dereferencing` -> implementation detail, self-explanatory (by looking at the code)\n  - Good: `BUG: Fix crash in Module X when clicking Apply button`\n  - Bad: `ENH: More work in qSlicerXModuleWidget` -> more work is too vague, qSlicerXModuleWidget is too low level\n  - Good: `ENH: Add float image outputs in module X`\n  - Bad: `COMP: Typo in cmake variable` -> implementation detail, self-explanatory\n  - Good: `COMP: Fix compilation error with Numpy on Visual Studio`\n\n\n### How to integrate a PR ?\n\nGetting your contributions integrated is relatively straightforward, here\nis the checklist:\n\n* All tests pass\n* Consensus is reached. This usually means that at least two reviewers approved\n  the changes (or added a `LGTM` comment) and at least one business day passed\n  without anyone objecting. `LGTM` is an acronym for _Looks Good to Me_.\n* To accommodate developers explicitly asking for more time to test the\n  proposed changes, integration time can be delayed by few more days.\n\n* If you do NOT have push access, a Slicer core developer will integrate your PR. If\n  you would like to speed up the integration, do not hesitate to send a note on\n  the [Slicer forum][slicer-forum].\n\n\n### Automatic testing of pull requests\n\nEvery pull request is tested automatically using CircleCI each time you push a\ncommit to it. The Github UI will restrict users from merging pull requests until\nthe CI build has returned with a successful result indicating that all tests have\npassed.\n\nThe testing infrastructure is described in details in the\n[3D Slicer Improves Testing for Pull Requests Using Docker and CircleCI](https://blog.kitware.com/3d-slicer-improves-testing-for-pull-requests-using-docker-and-circleci/)\nblog post.\n\n\n### Nightly tests\n\nAfter changes are integrated, every evening at 10pm EST (3am UTC), Slicer build bots (aka factories)\nwill build, test and package the Slicer application and all its extensions on Linux, macOS\nand Windows. Results are published daily on CDash ([Stable](https://slicer.cdash.org/index.php?project=SlicerStable) & [Preview](https://slicer.cdash.org/index.php?project=SlicerPreview))\nand developers that introduced changes resulting in build or test failures are notified by\nemail.\n\n\n### Decision-making process\n\n1. Given the topic of interest, initiate discussion on the [Slicer forum][slicer-forum].\n\n2. Identify a small circle of community members that are interested to study the\n   topic in more depth.\n\n3. Take the discussion off the general list, work on the analysis of options and\n   alternatives, summarize findings on the wiki or similar. [Labs](https://www.slicer.org/wiki/Documentation/Labs)\n   page are usually a good ground for such summary.\n\n4. Announce on the [Slicer forum][slicer-forum] the in-depth discussion of the topic for the\n   [Slicer Community hangout](https://discourse.slicer.org/c/community/hangout),\n   encourage anyone that is interested in weighing in on the topic to join the\n   discussion. If there is someone who is interested to participate in the discussion,\n   but cannot join the meeting due to conflict, they should notify the leaders of\n   the given project and identify the time suitable for everyone.\n\n5. Hopefully, reach consensus at the hangout and proceed with the agreed plan.\n\n\n*The initial version of these guidelines was established during the [winter\n project week 2017](https://www.na-mic.org/Wiki/index.php/2017_Winter_Project_Week/UpdatingCommunityForums).*\n\n#### Benevolent dictators for life\n\nThe [benevolent dictators](https://slicer.readthedocs.io/en/latest/developer_guide/contributing.html#benevolent-dictators-for-life) can\nintegrate changes to keep the platform healthy and help interpret\nor address conflict related to the contribution guidelines.\n\n\nThese currently include:\n\n* Jean-Christophe Fillion-Robin\n* Andras Lasso\n* Steve Pieper\n\n*Alphabetically ordered by last name.*\n\nThe Slicer community is inclusive and welcomes anyone to work to become a core\ndeveloper and then a BDFL. This happens with hard work and approval of the existing\nBDFL.\n\n[slicer-forum]: https://discourse.slicer.org\n[slicer-issues]: https://github.com/Slicer/Slicer/issues\n"
      },
      "source": "https://raw.githubusercontent.com/Slicer/Slicer/main/CONTRIBUTING.md",
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-03-12T22:13:53Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-03T21:28:42Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Multi-platform, free open source software for visualization and image computing."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9651900542490662,
      "result": {
        "type": "Text_excerpt",
        "value": "Slicer, or 3D Slicer, is a free, open source software package for visualization and\nimage analysis. \n3D Slicer is natively designed to be available on multiple platforms,\nincluding Windows, Linux and macOS. \nFor Slicer community announcements and support, visit:\n- https://discourse.slicer.org \n"
      },
      "source": "https://raw.githubusercontent.com/Slicer/Slicer/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Slicer/Slicer/tree/main/Docs"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://slicer.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/Slicer/Slicer/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/Slicer/Slicer/wiki"
      },
      "source": "https://raw.githubusercontent.com/Slicer/Slicer/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Slicer/Slicer/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 544
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Slicer/Slicer/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Slicer/Slicer"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/Slicer/Slicer/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Slicer/Slicer/main/.github/actions/slicer-build/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/Slicer/Slicer/main/.github/actions/slicer-build/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Slicer/Slicer/main/.github/actions/slicer-build/entrypoint.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Slicer/Slicer/main/Base/QTCore/Resources/Certs/make-ca.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Slicer/Slicer/main/Utilities/SetupForDevelopment.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Slicer/Slicer/main/Utilities/Scripts/runCodespell.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Slicer/Slicer/main/Utilities/Scripts/SetupUser.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Slicer/Slicer/main/Utilities/Scripts/GitTips.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Slicer/Slicer/main/Utilities/Scripts/SetupHooks.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Slicer/Slicer/main/Utilities/Doxygen/toThreeSlashes.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.914964323486158,
      "result": {
        "type": "Text_excerpt",
        "value": "Build instructions for all platforms are available on the Slicer wiki:\n- https://slicer.readthedocs.io/en/latest/developer_guide/build_instructions/index.html \nFor Slicer community announcements and support, visit:\n- https://discourse.slicer.org \nFor documentation, tutorials, and more information, please see:\n- https://www.slicer.org \nSee License.txt for information on using and contributing.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Slicer/Slicer/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Slicer/Slicer/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "3d-printing, 3d-slicer, c-plus-plus, computed-tomography, image-guided-therapy, image-processing, itk, kitware, medical-image-computing, medical-imaging, national-institutes-of-health, neuroimaging, nih, python, qt, registration, segmentation, tcia-dac, tractography, vtk"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Slicer"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "Slicer"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 19766425,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 2655431,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 1630618,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 59335,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 32403,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 20338,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "JavaScript",
        "size": 5771,
        "type": "Programming_language",
        "value": "JavaScript"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CSS",
        "size": 2401,
        "type": "Programming_language",
        "value": "CSS"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Slicer/Slicer/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "lassoan",
          "type": "User"
        },
        "date_created": "2023-08-29T03:33:23Z",
        "date_published": "2020-05-19T02:35:32Z",
        "description": "Binary files used in Slicer documentation\r\n",
        "html_url": "https://github.com/Slicer/Slicer/releases/tag/docs-resources",
        "name": "DocsResources",
        "release_id": 26652209,
        "tag": "docs-resources",
        "tarball_url": "https://api.github.com/repos/Slicer/Slicer/tarball/docs-resources",
        "type": "Release",
        "url": "https://api.github.com/repos/Slicer/Slicer/releases/26652209",
        "value": "https://api.github.com/repos/Slicer/Slicer/releases/26652209",
        "zipball_url": "https://api.github.com/repos/Slicer/Slicer/zipball/docs-resources"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "usage",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:10:30",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1662
      },
      "technique": "GitHub_API"
    }
  ]
}