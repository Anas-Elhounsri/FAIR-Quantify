{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citing this work",
        "parent_header": [
          "CrowdED: Guideline for designing optimal crowdsourcing experiments"
        ],
        "type": "Text_excerpt",
        "value": "If you use CrowdED in a scientific publication, you are highly encouraged (not required) to cite the following paper:\n\nCrowdED: Guideline for Optimal Crowdsourcing Experimental Design.\nAmrapali Zaveri, Pedro Hernandez Serrano Manisha Desai and Michel Dumontier\n[https://doi.org/10.1145/3184558.3191543](https://doi.org/10.1145/3184558.3191543).\n\nBibtex entry:\n\n        @inproceedings{Zaveri:2018:CGO:3184558.3191543,\n        author = {Zaveri, Amrapali and Serrano, Pedro Hernandez and Desai, Manisha and Dumontier, Michel},\n        title = {CrowdED: Guideline for Optimal Crowdsourcing Experimental Design},\n        booktitle = {Companion Proceedings of the The Web Conference 2018},\n        series = {WWW '18},\n        year = {2018},\n        isbn = {978-1-4503-5640-4},\n        location = {Lyon, France},\n        pages = {1109--1116},\n        numpages = {8},\n        url = {https://doi.org/10.1145/3184558.3191543},\n        doi = {10.1145/3184558.3191543},\n        acmid = {3191543},\n        publisher = {International World Wide Web Conferences Steering Committee},\n        address = {Republic and Canton of Geneva, Switzerland},\n        keywords = {biomedical, crowdsourcing, data quality, data science, fair, metadata, reproducibility},\n        }\n"
      },
      "source": "https://raw.githubusercontent.com/MaastrichtU-IDS/crowdED/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Zaveri, Amrapali and Serrano, Pedro Hernandez and Desai, Manisha and Dumontier, Michel",
        "doi": "10.1145/3184558.3191543",
        "format": "bibtex",
        "title": "CrowdED: Guideline for Optimal Crowdsourcing Experimental Design",
        "type": "Text_excerpt",
        "url": "https://doi.org/10.1145/3184558.3191543",
        "value": "@inproceedings{Zaveri:2018:CGO:3184558.3191543,\n    keywords = {biomedical, crowdsourcing, data quality, data science, fair, metadata, reproducibility},\n    address = {Republic and Canton of Geneva, Switzerland},\n    publisher = {International World Wide Web Conferences Steering Committee},\n    acmid = {3191543},\n    doi = {10.1145/3184558.3191543},\n    url = {https://doi.org/10.1145/3184558.3191543},\n    numpages = {8},\n    pages = {1109--1116},\n    location = {Lyon, France},\n    isbn = {978-1-4503-5640-4},\n    year = {2018},\n    series = {WWW '18},\n    booktitle = {Companion Proceedings of the The Web Conference 2018},\n    title = {CrowdED: Guideline for Optimal Crowdsourcing Experimental Design},\n    author = {Zaveri, Amrapali and Serrano, Pedro Hernandez and Desai, Manisha and Dumontier, Michel},\n}"
      },
      "source": "https://raw.githubusercontent.com/MaastrichtU-IDS/crowdED/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/MaastrichtU-IDS/crowdED"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2017-11-28T09:41:47Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-03-10T16:06:41Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "\ud83e\udd16 Guideline for designing optimal crowdsourcing experiments"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9863372106946593,
      "result": {
        "original_header": "CrowdED: Guideline for designing optimal crowdsourcing experiments",
        "type": "Text_excerpt",
        "value": "CrowdED is a two-staged statistical guideline for optimal crowdsourcing experimental design in order to a-priori estimate optimal workers and tasks' assignment to obtain maximum accuracy on all tasks. \n"
      },
      "source": "https://raw.githubusercontent.com/MaastrichtU-IDS/crowdED/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/MaastrichtU-IDS/crowdED/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/MaastrichtU-IDS/crowdED/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MaastrichtU-IDS/crowdED"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CrowdED: Guideline for designing optimal crowdsourcing experiments"
      },
      "source": "https://raw.githubusercontent.com/MaastrichtU-IDS/crowdED/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MaastrichtU-IDS/crowdED/master/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/MaastrichtU-IDS/crowdED/master/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://app.fossa.io/api/projects/git%2Braw.githubusercontent.com%2Fpedrohserrano%2FcrowdED.svg?type=shield"
      },
      "source": "https://raw.githubusercontent.com/MaastrichtU-IDS/crowdED/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://app.fossa.io/api/projects/git%2Braw.githubusercontent.com%2Fpedrohserrano%2FcrowdED.svg?type=large"
      },
      "source": "https://raw.githubusercontent.com/MaastrichtU-IDS/crowdED/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "CrowdED: Guideline for designing optimal crowdsourcing experiments"
        ],
        "type": "Text_excerpt",
        "value": "To install the package, please use the `pip` installation as follows:\n```shell\npip install crowdED\n```\n    \n\nInstalling from source **(Optional)**\n```shell\ngit clone https://github.com/MaastrichtU-IDS/crowdED.git\ncd crowdED\npip install --editable ./\n```\n\n**Note:** currently, crowdED is only compatible with: **Python 3.6**.\n"
      },
      "source": "https://raw.githubusercontent.com/MaastrichtU-IDS/crowdED/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8228844468530963,
      "result": {
        "original_header": "CrowdED: Guideline for designing optimal crowdsourcing experiments",
        "type": "Text_excerpt",
        "value": "[CrowdApp](https://pedrohserrano.shinyapps.io/crowdapp/) Beta\n \n"
      },
      "source": "https://raw.githubusercontent.com/MaastrichtU-IDS/crowdED/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/MaastrichtU-IDS/crowdED/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "crowdsourcing, optimization, python, shiny"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2017 Pedro V\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/MaastrichtU-IDS/crowdED/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MaastrichtU-IDS/crowdED/master/base/CrowdEDlogo8.png"
      },
      "source": "https://raw.githubusercontent.com/MaastrichtU-IDS/crowdED/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "crowdED"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "MaastrichtU-IDS"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 77910,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 53357,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 164,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MaastrichtU-IDS/crowdED/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:42:21",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Examples",
        "parent_header": [
          "CrowdED: Guideline for designing optimal crowdsourcing experiments"
        ],
        "type": "Text_excerpt",
        "value": "Create a synthetic dataset of tasks\n\nYou will need to run ```!pip install shortuuid```\n\n```python\nimport crowded.simulate as cs\n\n#define your parameters\ntotal_tasks = 415\np_hard_tasks = 0.4\nnumber_of_valid_answers = 3\n\n#create task dataset\ndf_tasks = cs.Tasks(number_of_valid_answers).create(total_tasks, p_hard_tasks)\n```\n\nCreate a synthetic dataset of workers\n\n```python\nimport crowded.simulate as cs\n\n#define your parameters\ntotal_workers = 40\nalpha = 28\nbeta = 2\n#create task dataset\ndf_workers = cs.Workers(alpha, beta).create(total_workers)\n```\n\nAssign easily and fairly workers to tasks\n\n```python\nimport crowded.simulate as cs\n\n#workers per task should always be smaller than the number of workers\nwpt = 5 \n#create assignment\ndf_tw = cs.AssignTasks(df_tasks, df_workers, wpt).create()\n```\n\nCompute Bayes probability and predict worker answers \n\n```python\nimport crowded.method as cs\n\n#workers per task should always be smaller than the number of workers\nwpt = 5 \n#create assignment\ndf_tw = cs.AssignTasks(df_tasks, df_workers, wpt).create()\n```\n\nCompute Bayes probability and Predict answers of the workers\n\n```python\nimport crowded.method as cm\n\n#define the parameters\nx = df_tw['prob_task'] #vector of probabilities of tasks\ny = df_tw['prob_worker'] #vector of probabilities of workers\nz = df_tasks['true_answers'].unique()  #vector of valid answers in the experiment\n#compute probability\ncp = cm.ComputeProbability(x, y, z)\n```\n\n```python\nimport crowded.method as cm\n\n#define the parameters\ng = df_tw['true_answers'] #vector of gold standar answers\np = cp.predict() #binary vector of 0 and 1\nz = df_tasks['true_answers'].unique()  #vector of valid answers in the experiment\n#compute match\nworker_answer = cm.WorkerAnswer(g, p, z)\n#add the answers to the assignation dataset\ndf_tw['worker_answers'] = worker_answer.match()\n```\nCompute confusion matrix \n\n```python\nfrom pycm import *\n\n#define parameters\ng = df_tw['true_answers'] #vector of gold standar answers\na = df_tw['worker_answers'] #vector of simulated answers\n#compute confusion matrix\ncm = ConfusionMatrix(g.tolist(), a.tolist())\nprint(cm.Overall_ACC, cm.matrix())\n```\n\nCompute the crowdED methodology to get accuracy of workers and tasks selection on two stages\n\nYou will need to run ```!pip install pycm```\n\n```python\nimport crowded.make as mk\nfrom pycm import *\n\ntotal_tasks=415 \ntotal_workers=40 \nproportion_of_hard_tasks=0.4\nproportion_of_tasks_to_train=0.3\nworkers_per_task=5\nnumber_of_valid_answers =3\nalpha=28\nbeta=3\n\ndf = mk.crowd_table(total_tasks, \n        total_workers, \n        proportion_of_hard_tasks, \n        proportion_of_tasks_to_train, \n        workers_per_task, \n        number_of_valid_answers, \n        alpha, \n        beta)\n\ncm = ConfusionMatrix(df['true_answers'].tolist(), df['worker_answers'].tolist())\nprint(cm.Overall_ACC, cm.matrix())\n```\n"
      },
      "source": "https://raw.githubusercontent.com/MaastrichtU-IDS/crowdED/master/README.md",
      "technique": "header_analysis"
    }
  ]
}