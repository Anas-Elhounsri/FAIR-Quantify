{
  "application_domain": [
    {
      "confidence": 20.73,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "format": "cff",
        "type": "File_dump",
        "value": "# YAML 1.2\n# Metadata for citation of this software according to the CFF format (https://citation-file-format.github.io/)\ncff-version: 1.2.0\nmessage: If you use this software, please cite it using these metadata.\ntitle: grpc4bmi\ndoi: 10.5281/zenodo.1462641\nauthors:\n- given-names: Gijs\n  family-names: van den Oord\n  affiliation: Netherlands eScience Center\n  orcid: \"https://orcid.org/0000-0001-8367-1333\"\n- given-names: Stefan\n  family-names: Verhoeven\n  affiliation: Netherlands eScience Center\n  orcid: \"https://orcid.org/0000-0002-5821-2060\"\n- given-names: Inti\n  family-names: Pelupessy\n  affiliation: Netherlands eScience Center\nrepository-code: https://github.com/eWaterCycle/grpc4bmi\nlicense: Apache-2.0\n"
      },
      "source": "https://raw.githubusercontent.com/eWaterCycle/grpc4bmi/main/CITATION.cff",
      "technique": "file_exploration"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/eWaterCycle/grpc4bmi"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-04-19T15:34:36Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-05T18:34:33Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "gRPC wrapper for model with a Basic modeling interface"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9934484166043197,
      "result": {
        "original_header": "Purpose",
        "type": "Text_excerpt",
        "value": "This software allows you to wrap your [Basic Model Interface (BMI)](https://github.com/csdms/bmi) implementation in a server process and communicate with it via the included Python client. The communication is serialized to protocol buffers by [GRPC](https://grpc.io/) and occurs over network ports. Can run models in isolated containers using Docker or Apptainer.\n \n"
      },
      "source": "https://raw.githubusercontent.com/eWaterCycle/grpc4bmi/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://grpc4bmi.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/eWaterCycle/grpc4bmi/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/eWaterCycle/grpc4bmi/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/eWaterCycle/grpc4bmi/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "eWaterCycle/grpc4bmi"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "grpc4bmi"
      },
      "source": "https://raw.githubusercontent.com/eWaterCycle/grpc4bmi/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/eWaterCycle/grpc4bmi/main/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/eWaterCycle/grpc4bmi/main/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/eWaterCycle/grpc4bmi/main/proto_gen.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://doi.org/10.5281/zenodo.1462641"
      },
      "source": "https://raw.githubusercontent.com/eWaterCycle/grpc4bmi/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://sonarcloud.io/api/project_badges/measure?project=grpc4bmi&amp;metric=coverage"
      },
      "source": "https://raw.githubusercontent.com/eWaterCycle/grpc4bmi/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "grpc4bmi"
        ],
        "type": "Text_excerpt",
        "value": "Optionally, create your virtual environment and activate it, Then, run\n\n```bash\npip install grpc4bmi\n```\n\non the client (Python) side. If your server model is implemented in Python, do the same in the server environment (e.g. docker container). If the model is implemented in R, run instead\n\n```bash\npip install grpc4bmi[R]\n```\n\nIf the model is implemented in Julia, run instead\n\n```bash\npip install grpc4bmi[julia]\n```\n\nin the server environment. For bleeding edge version from GitHub use\n\n```bash\npip install git+https://github.com/eWaterCycle/grpc4bmi.git#egg=grpc4bmi\n```\n\nFinally if the model is implemented in C or C++, clone this git repo and run\n\n```bash\nmake\nmake install\n```\n\nin the cpp folder.\n"
      },
      "source": "https://raw.githubusercontent.com/eWaterCycle/grpc4bmi/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999998746452421,
      "result": {
        "original_header": "Development: generating the gRPC code",
        "type": "Text_excerpt",
        "value": "When developers change the proto-file, it is necessary to install gRPC tools Python packages in your Python environment:\n```bash\n# Create virtual env\npython3 -m venv .venv\n. venv/bin/activate\n# Make sure latest pip and wheel are install\npip install -U pip wheel\npip install -r dev-requirements.txt\n# For R integration also install the R extras with\npip install -e .[R]\n# For building docs (cd docs && make html) also install the docs extras with\npip install -e .[docs]\n```\n \nand install the C++ runtime and `protoc` command as described in <https://github.com/google/protobuf/blob/master/src/README.md>.\nAfter this, simply executing the `proto_gen.sh` script should do the job.\n \n"
      },
      "source": "https://raw.githubusercontent.com/eWaterCycle/grpc4bmi/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/eWaterCycle/grpc4bmi/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bmi, grpc, python"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Apache License 2.0",
        "spdx_id": "Apache-2.0",
        "type": "License",
        "url": "https://api.github.com/licenses/apache-2.0",
        "value": "https://api.github.com/licenses/apache-2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
      },
      "source": "https://raw.githubusercontent.com/eWaterCycle/grpc4bmi/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://sonarcloud.io/api/project_badges/measure?project=grpc4bmi&amp;metric=alert_status"
      },
      "source": "https://raw.githubusercontent.com/eWaterCycle/grpc4bmi/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "grpc4bmi"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "eWaterCycle"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 304400,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 109301,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 13538,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 13139,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 8606,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 2580,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Julia",
        "size": 1004,
        "type": "Programming_language",
        "value": "Julia"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 659,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/eWaterCycle/grpc4bmi/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sverhoeven",
          "type": "User"
        },
        "date_created": "2023-10-30T10:11:52Z",
        "date_published": "2023-10-30T10:33:08Z",
        "description": "This software allows you to wrap your BMI implementation (https://github.com/csdms/bmi) in a server process and communicate with it via the included python client. The communication is serialized to protocol buffers by GRPC (https://grpc.io/) and occurs over network ports.\r\n\r\n## Added\r\n\r\n* BmiJulia Python class that wraps bmi class implemented in Julia ([#144](https://github.com/eWaterCycle/grpc4bmi/pull/144))\r\n\r\n## Changed\r\n\r\n* Test against apptainer 1.1.9  ([#138](https://github.com/eWaterCycle/grpc4bmi/pull/138))",
        "html_url": "https://github.com/eWaterCycle/grpc4bmi/releases/tag/v0.5.0",
        "name": "v0.5.0",
        "release_id": 127156846,
        "tag": "v0.5.0",
        "tarball_url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/tarball/v0.5.0",
        "type": "Release",
        "url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/releases/127156846",
        "value": "https://api.github.com/repos/eWaterCycle/grpc4bmi/releases/127156846",
        "zipball_url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/zipball/v0.5.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sverhoeven",
          "type": "User"
        },
        "date_created": "2023-07-27T09:17:40Z",
        "date_published": "2023-07-27T09:26:54Z",
        "description": "This software allows you to wrap your BMI implementation (https://github.com/csdms/bmi) in a server process and communicate with it via the included python client. The communication is serialized to protocol buffers by GRPC (https://grpc.io/) and occurs over network ports.\r\n\r\n## Fixed\r\n\r\n* Incompatibility with typeguard https://github.com/eWaterCycle/grpc4bmi/issues/128\r\n* Singularity version on snellius cluster a gives ValueError https://github.com/eWaterCycle/grpc4bmi/issues/88",
        "html_url": "https://github.com/eWaterCycle/grpc4bmi/releases/tag/v0.2.17",
        "name": "v0.2.17",
        "release_id": 113796557,
        "tag": "v0.2.17",
        "tarball_url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/tarball/v0.2.17",
        "type": "Release",
        "url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/releases/113796557",
        "value": "https://api.github.com/repos/eWaterCycle/grpc4bmi/releases/113796557",
        "zipball_url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/zipball/v0.2.17"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sverhoeven",
          "type": "User"
        },
        "date_created": "2023-03-21T10:53:48Z",
        "date_published": "2023-03-21T11:07:21Z",
        "description": "This software allows you to wrap your BMI implementation (https://github.com/csdms/bmi) in a server process and communicate with it via the included python client. The communication is serialized to protocol buffers by GRPC (https://grpc.io/) and occurs over network ports.\r\n\r\nThe 0.2.x branch has several features that have been merged into the main branch. \r\nThis changes the API slightly compared to the previous 0.3.x releases.\r\n\r\n## Added\r\n\r\n* OptionalDestBmi class with get_value(name,dest=None)\r\n\r\n## Changed\r\n* Renamed master branch to main\r\n* Merged 0.2.x branch to main \r\n* Switch to pyproject.toml\r\n* Upgrade to protobuf v4 https://github.com/eWaterCycle/grpc4bmi/issues/115\r\n\r\n## Fixed\r\n* Upgrade heat model broke our tests https://github.com/eWaterCycle/grpc4bmi/issues/91\r\n* Dependency conflict with protobuf and grpcio-reflection https://github.com/eWaterCycle/grpc4bmi/issues/120\r\n* Incompatibility with typeguard 3 https://github.com/eWaterCycle/grpc4bmi/issues/128\r\n* Singularity version on Cartesius cluster @SURFSara gives ValueError https://github.com/eWaterCycle/grpc4bmi/issues/88\r\n* The initialize method makes a copy of config file in input_dir https://github.com/eWaterCycle/grpc4bmi/issues/68\r\n* Officially support Python 3.8, 3.9, 3.10 + drop python 3.5 support https://github.com/eWaterCycle/grpc4bmi/issues/98",
        "html_url": "https://github.com/eWaterCycle/grpc4bmi/releases/tag/v0.4.0",
        "name": "v0.4.0",
        "release_id": 96325958,
        "tag": "v0.4.0",
        "tarball_url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/tarball/v0.4.0",
        "type": "Release",
        "url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/releases/96325958",
        "value": "https://api.github.com/repos/eWaterCycle/grpc4bmi/releases/96325958",
        "zipball_url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/zipball/v0.4.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sverhoeven",
          "type": "User"
        },
        "date_created": "2022-11-15T14:18:55Z",
        "date_published": "2022-11-15T14:21:01Z",
        "description": "This software allows you to wrap your BMI implementation (https://github.com/csdms/bmi) in a server process and communicate with it via the included python client. The communication is serialized to protocol buffers by GRPC (https://grpc.io/) and occurs over network ports.\r\n\r\nAdded \r\n\r\n* BmiClientApptainer ([#116](https://github.com/eWaterCycle/grpc4bmi/issues/116))",
        "html_url": "https://github.com/eWaterCycle/grpc4bmi/releases/tag/v0.2.16",
        "name": "v0.2.16",
        "release_id": 83130348,
        "tag": "v0.2.16",
        "tarball_url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/tarball/v0.2.16",
        "type": "Release",
        "url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/releases/83130348",
        "value": "https://api.github.com/repos/eWaterCycle/grpc4bmi/releases/83130348",
        "zipball_url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/zipball/v0.2.16"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sverhoeven",
          "type": "User"
        },
        "date_created": "2022-10-18T13:35:37Z",
        "date_published": "2022-10-18T13:38:55Z",
        "description": "This software allows you to wrap your BMI implementation (https://github.com/csdms/bmi) in a server process and communicate with it via the included python client. The communication is serialized to protocol buffers by GRPC (https://grpc.io/) and occurs over network ports.\r\n\r\nAdded \r\n\r\n* Apptainer support for BmiClientSingularity ([#112](https://github.com/eWaterCycle/grpc4bmi/issues/111))",
        "html_url": "https://github.com/eWaterCycle/grpc4bmi/releases/tag/v0.2.15",
        "name": "v0.2.15",
        "release_id": 80210490,
        "tag": "v0.2.15",
        "tarball_url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/tarball/v0.2.15",
        "type": "Release",
        "url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/releases/80210490",
        "value": "https://api.github.com/repos/eWaterCycle/grpc4bmi/releases/80210490",
        "zipball_url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/zipball/v0.2.15"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sverhoeven",
          "type": "User"
        },
        "date_created": "2021-11-11T08:31:25Z",
        "date_published": "2021-11-11T08:33:08Z",
        "description": "This software allows you to wrap your BMI implementation (https://github.com/csdms/bmi) in a server process and communicate with it via the included python client. The communication is serialized to protocol buffers by GRPC (https://grpc.io/) and occurs over network ports.\r\n\r\n## Added\r\n\r\n* Caching bmi client ([#96](https://github.com/eWaterCycle/grpc4bmi/issues/96))",
        "html_url": "https://github.com/eWaterCycle/grpc4bmi/releases/tag/v0.2.14",
        "name": "v0.2.14",
        "release_id": 53148691,
        "tag": "v0.2.14",
        "tarball_url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/tarball/v0.2.14",
        "type": "Release",
        "url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/releases/53148691",
        "value": "https://api.github.com/repos/eWaterCycle/grpc4bmi/releases/53148691",
        "zipball_url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/zipball/v0.2.14"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sverhoeven",
          "type": "User"
        },
        "date_created": "2021-07-20T11:17:08Z",
        "date_published": "2021-07-20T11:18:59Z",
        "description": "This software allows you to wrap your BMI implementation (https://github.com/csdms/bmi) in a server process and communicate with it via the included python client. The communication is serialized to protocol buffers by GRPC (https://grpc.io/) and occurs over network ports.\r\n\r\n## Changed\r\n\r\n* Singularity container output is redirected to `logs()` method (#102)",
        "html_url": "https://github.com/eWaterCycle/grpc4bmi/releases/tag/v0.2.13",
        "name": "v0.2.13",
        "release_id": 46467296,
        "tag": "v0.2.13",
        "tarball_url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/tarball/v0.2.13",
        "type": "Release",
        "url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/releases/46467296",
        "value": "https://api.github.com/repos/eWaterCycle/grpc4bmi/releases/46467296",
        "zipball_url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/zipball/v0.2.13"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sverhoeven",
          "type": "User"
        },
        "date_created": "2021-03-26T08:41:32Z",
        "date_published": "2021-03-26T09:05:35Z",
        "description": "This software allows you to wrap your BMI implementation (https://github.com/csdms/bmi) in a server process and communicate with it via the included python client. The communication is serialized to protocol buffers by GRPC (https://grpc.io/) and occurs over network ports.\r\n\r\n## Changed\r\n\r\n* Mount dir inside container same as outside + have work directory ([#93](https://github.com/eWaterCycle/grpc4bmi/issues/93))\r\n\r\n## Removed\r\n\r\n* No longer copy config file to input directory ([#68](https://github.com/eWaterCycle/grpc4bmi/issues/68))",
        "html_url": "https://github.com/eWaterCycle/grpc4bmi/releases/tag/v0.2.12",
        "name": "v0.2.12",
        "release_id": 40526536,
        "tag": "v0.2.12",
        "tarball_url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/tarball/v0.2.12",
        "type": "Release",
        "url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/releases/40526536",
        "value": "https://api.github.com/repos/eWaterCycle/grpc4bmi/releases/40526536",
        "zipball_url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/zipball/v0.2.12"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sverhoeven",
          "type": "User"
        },
        "date_created": "2021-01-26T13:51:34Z",
        "date_published": "2021-01-26T13:54:21Z",
        "description": "This software allows you to wrap your BMI implementation (https://github.com/csdms/bmi) in a server process and communicate with it via the included python client. The communication is serialized to protocol buffers by GRPC (https://grpc.io/) and occurs over network ports.\r\n\r\nTo use Singularity it should be version >=3.6.0 .\r\n\r\n## Fixed\r\n\r\n* Singularity version on Cartesius cluster @ SURFSara gives ValueError ([#88](https://github.com/eWaterCycle/grpc4bmi/issues/88))",
        "html_url": "https://github.com/eWaterCycle/grpc4bmi/releases/tag/v0.2.11",
        "name": "v0.2.11",
        "release_id": 36914884,
        "tag": "v0.2.11",
        "tarball_url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/tarball/v0.2.11",
        "type": "Release",
        "url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/releases/36914884",
        "value": "https://api.github.com/repos/eWaterCycle/grpc4bmi/releases/36914884",
        "zipball_url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/zipball/v0.2.11"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sverhoeven",
          "type": "User"
        },
        "date_created": "2020-10-19T13:47:37Z",
        "date_published": "2020-10-19T13:56:06Z",
        "description": "This software allows you to wrap your BMI implementation (https://github.com/csdms/bmi) in a server process and communicate with it via the included python client. The communication is serialized to protocol buffers by GRPC (https://grpc.io/) and occurs over network ports.\r\n\r\nTo use Singularity it should be version >=3.6.0 .\r\n\r\n## Fixed\r\n\r\n* get_value resource exhausted error ([#76](https://github.com/eWaterCycle/grpc4bmi/issues/76))",
        "html_url": "https://github.com/eWaterCycle/grpc4bmi/releases/tag/v0.3.2",
        "name": "v0.3.2",
        "release_id": 32757616,
        "tag": "v0.3.2",
        "tarball_url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/tarball/v0.3.2",
        "type": "Release",
        "url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/releases/32757616",
        "value": "https://api.github.com/repos/eWaterCycle/grpc4bmi/releases/32757616",
        "zipball_url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/zipball/v0.3.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sverhoeven",
          "type": "User"
        },
        "date_created": "2020-10-19T13:24:12Z",
        "date_published": "2020-10-19T13:27:41Z",
        "description": "This software allows you to wrap your BMI implementation (https://github.com/csdms/bmi) in a server process and communicate with it via the included python client. The communication is serialized to protocol buffers by GRPC (https://grpc.io/) and occurs over network ports.\r\n\r\nTo use Singularity it should be version >=3.6.0 .\r\n\r\n## Fixed\r\n\r\n* get_value resource exhausted error ([#76](https://github.com/eWaterCycle/grpc4bmi/issues/76)), but now for real",
        "html_url": "https://github.com/eWaterCycle/grpc4bmi/releases/tag/v0.2.10",
        "name": "v0.2.10",
        "release_id": 32756011,
        "tag": "v0.2.10",
        "tarball_url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/tarball/v0.2.10",
        "type": "Release",
        "url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/releases/32756011",
        "value": "https://api.github.com/repos/eWaterCycle/grpc4bmi/releases/32756011",
        "zipball_url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/zipball/v0.2.10"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sverhoeven",
          "type": "User"
        },
        "date_created": "2020-08-11T14:49:39Z",
        "date_published": "2020-08-11T14:46:41Z",
        "description": "This software allows you to wrap your BMI implementation (https://github.com/csdms/bmi) in a server process and communicate with it via the included python client. The communication is serialized to protocol buffers by GRPC (https://grpc.io/) and occurs over network ports.\r\n\r\n## Added\r\n\r\n* extra volumes to BmiClientSingularity ([#65](https://github.com/eWaterCycle/grpc4bmi/issues/65))\r\n\r\n## Fixed\r\n\r\n* get_value resource exhausted error ([#76](https://github.com/eWaterCycle/grpc4bmi/issues/76))\r\n",
        "html_url": "https://github.com/eWaterCycle/grpc4bmi/releases/tag/v0.3.1",
        "name": "v0.3.1",
        "release_id": 29562986,
        "tag": "v0.3.1",
        "tarball_url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/tarball/v0.3.1",
        "type": "Release",
        "url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/releases/29562986",
        "value": "https://api.github.com/repos/eWaterCycle/grpc4bmi/releases/29562986",
        "zipball_url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/zipball/v0.3.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sverhoeven",
          "type": "User"
        },
        "date_created": "2020-08-11T14:49:39Z",
        "date_published": "2020-08-11T14:54:24Z",
        "description": "This software allows you to wrap your BMI implementation (https://github.com/csdms/bmi) in a server process and communicate with it via the included python client. The communication is serialized to protocol buffers by GRPC (https://grpc.io/) and occurs over network ports.\r\n\r\n> This release still uses old Bmi interface defined in [basic-modeling-interface](basic-modeling-interface) Python package.\r\n\r\n## Fixed\r\n\r\n* get_value resource exhausted error ([#76](https://github.com/eWaterCycle/grpc4bmi/issues/76))\r\n",
        "html_url": "https://github.com/eWaterCycle/grpc4bmi/releases/tag/v0.2.8",
        "name": "v0.2.8",
        "release_id": 29563340,
        "tag": "v0.2.8",
        "tarball_url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/tarball/v0.2.8",
        "type": "Release",
        "url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/releases/29563340",
        "value": "https://api.github.com/repos/eWaterCycle/grpc4bmi/releases/29563340",
        "zipball_url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/zipball/v0.2.8"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sverhoeven",
          "type": "User"
        },
        "date_created": "2020-07-29T09:45:14Z",
        "date_published": "2020-07-29T09:57:50Z",
        "description": "This software allows you to wrap your BMI implementation (https://github.com/csdms/bmi) in a server process and communicate with it via the included python client. The communication is serialized to protocol buffers by GRPC (https://grpc.io/) and occurs over network ports.\r\n\r\n## Added\r\n\r\n* extra volumes to BmiClientSingularity ([#65](https://github.com/eWaterCycle/grpc4bmi/issues/65))\r\n* extra volumes to BmiClientDocker ([#66](https://github.com/eWaterCycle/grpc4bmi/issues/66))",
        "html_url": "https://github.com/eWaterCycle/grpc4bmi/releases/tag/v0.2.7",
        "name": "v0.2.7",
        "release_id": 29065009,
        "tag": "v0.2.7",
        "tarball_url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/tarball/v0.2.7",
        "type": "Release",
        "url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/releases/29065009",
        "value": "https://api.github.com/repos/eWaterCycle/grpc4bmi/releases/29065009",
        "zipball_url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/zipball/v0.2.7"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sverhoeven",
          "type": "User"
        },
        "date_created": "2020-03-24T11:25:24Z",
        "date_published": "2020-03-24T11:27:01Z",
        "description": "This software allows you to wrap your BMI implementation (https://github.com/csdms/bmi) in a server process and communicate with it via the included python client. The communication is serialized to protocol buffers by GRPC (https://grpc.io/) and occurs over network ports.\r\n\r\n## Fixed\r\n\r\n* Attempt to create grpc channel on occupied port 54379 ([#63](https://github.com/eWaterCycle/grpc4bmi/issues/63))",
        "html_url": "https://github.com/eWaterCycle/grpc4bmi/releases/tag/v0.2.6",
        "name": "v0.2.6",
        "release_id": 24806267,
        "tag": "v0.2.6",
        "tarball_url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/tarball/v0.2.6",
        "type": "Release",
        "url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/releases/24806267",
        "value": "https://api.github.com/repos/eWaterCycle/grpc4bmi/releases/24806267",
        "zipball_url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/zipball/v0.2.6"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sverhoeven",
          "type": "User"
        },
        "date_created": "2020-02-19T08:50:43Z",
        "date_published": "2020-02-19T08:54:11Z",
        "description": "This software allows you to wrap your BMI implementation (https://github.com/csdms/bmi) in a server process and communicate with it via the included python client. The communication is serialized to protocol buffers by GRPC (https://grpc.io/) and occurs over network ports.\r\n\r\n## Fixed\r\n\r\n* BMI_PORT env var ignored in run server ([#55](https://github.com/eWaterCycle/grpc4bmi/issues/55))\r\n* Unable to run BmiClientSingularity from inside Jupyter notebook ([#56](https://github.com/eWaterCycle/grpc4bmi/issues/56))",
        "html_url": "https://github.com/eWaterCycle/grpc4bmi/releases/tag/v0.2.4",
        "name": "v0.2.4",
        "release_id": 23795412,
        "tag": "v0.2.4",
        "tarball_url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/tarball/v0.2.4",
        "type": "Release",
        "url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/releases/23795412",
        "value": "https://api.github.com/repos/eWaterCycle/grpc4bmi/releases/23795412",
        "zipball_url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/zipball/v0.2.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sverhoeven",
          "type": "User"
        },
        "date_created": "2020-01-27T18:46:48Z",
        "date_published": "2020-01-27T18:47:51Z",
        "description": "This software allows you to wrap your BMI implementation (https://github.com/csdms/bmi) in a server process and communicate with it via the included python client. The communication is serialized to protocol buffers by GRPC (https://grpc.io/) and occurs over network ports.\r\n\r\n0.2.2 used wrong branch.",
        "html_url": "https://github.com/eWaterCycle/grpc4bmi/releases/tag/v0.2.3",
        "name": "v0.2.3",
        "release_id": 23161306,
        "tag": "v0.2.3",
        "tarball_url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/tarball/v0.2.3",
        "type": "Release",
        "url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/releases/23161306",
        "value": "https://api.github.com/repos/eWaterCycle/grpc4bmi/releases/23161306",
        "zipball_url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/zipball/v0.2.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sverhoeven",
          "type": "User"
        },
        "date_created": "2019-12-17T12:27:03Z",
        "date_published": "2020-01-27T14:46:30Z",
        "description": "# Do not use, based on wrong branch, use v0.2.3\r\n\r\nThis software allows you to wrap your BMI implementation (https://github.com/csdms/bmi) in a server process and communicate with it via the included python client. The communication is serialized to protocol buffers by GRPC (https://grpc.io/) and occurs over network ports.\r\n\r\n### Fixed\r\n\r\n* Process hangs when Docker container exits during construction of BmiClientDocker [#50](https://github.com/eWaterCycle/grpc4bmi/issues/50)\r\n\r\n",
        "html_url": "https://github.com/eWaterCycle/grpc4bmi/releases/tag/v0.2.2",
        "name": "v0.2.2",
        "release_id": 23152902,
        "tag": "v0.2.2",
        "tarball_url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/tarball/v0.2.2",
        "type": "Release",
        "url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/releases/23152902",
        "value": "https://api.github.com/repos/eWaterCycle/grpc4bmi/releases/23152902",
        "zipball_url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/zipball/v0.2.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sverhoeven",
          "type": "User"
        },
        "date_created": "2019-11-19T16:02:17Z",
        "date_published": "2019-11-19T16:10:55Z",
        "description": "This software allows you to wrap your BMI implementation (https://github.com/csdms/bmi) in a server process and communicate with it via the included python client. The communication is serialized to protocol buffers by GRPC (https://grpc.io/) and occurs over network ports.\r\n\r\nBreaking change!\r\n\r\nThe BMI interface has changed to https://bmi.readthedocs.io/en/latest/bmi.lang.py.html, the model should adapt this interface and users of the grcp4bmi clients should also adjust their code.\r\n\r\n## Fixed\r\n\r\n* Present on [Research Software Directory](https://research-software.nl/software/grpc4bmi) (#42)\r\n* set_value of bmi object on server does not recieve a numpy array (#47)\r\n* Improve error responses (#11)\r\n* Error in initialize if config file already in input directory (#25)\r\n\r\n## Changed\r\n\r\n* Support newest BMI standard ([#41 ](https://github.com/eWaterCycle/grpc4bmi/issues/41))\r\n* Default to port 55555 (#24)\r\n\r\n## Added\r\n\r\n* Pipe logs of Docker container to client (#37)",
        "html_url": "https://github.com/eWaterCycle/grpc4bmi/releases/tag/v0.3",
        "name": "v0.3",
        "release_id": 21591343,
        "tag": "v0.3",
        "tarball_url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/tarball/v0.3",
        "type": "Release",
        "url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/releases/21591343",
        "value": "https://api.github.com/repos/eWaterCycle/grpc4bmi/releases/21591343",
        "zipball_url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/zipball/v0.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "goord",
          "type": "User"
        },
        "date_created": "2018-10-15T12:39:47Z",
        "date_published": "2018-10-15T13:37:17Z",
        "description": "Added beta support for C/C++ models.",
        "html_url": "https://github.com/eWaterCycle/grpc4bmi/releases/tag/0.2",
        "name": "ewatercycle-year-1 release",
        "release_id": 13423215,
        "tag": "0.2",
        "tarball_url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/tarball/0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/releases/13423215",
        "value": "https://api.github.com/repos/eWaterCycle/grpc4bmi/releases/13423215",
        "zipball_url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/zipball/0.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "goord",
          "type": "User"
        },
        "date_created": "2018-05-22T15:51:37Z",
        "date_published": "2018-05-22T15:54:41Z",
        "description": "Support for python 3.6 has been added to this release.",
        "html_url": "https://github.com/eWaterCycle/grpc4bmi/releases/tag/v0.1.3",
        "name": "python-2.7+3.6",
        "release_id": 11117469,
        "tag": "v0.1.3",
        "tarball_url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/tarball/v0.1.3",
        "type": "Release",
        "url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/releases/11117469",
        "value": "https://api.github.com/repos/eWaterCycle/grpc4bmi/releases/11117469",
        "zipball_url": "https://api.github.com/repos/eWaterCycle/grpc4bmi/zipball/v0.1.3"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:50:10",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Model written in Python",
        "parent_header": [
          "grpc4bmi",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "A model should be a subclass of the `Bmi` class from the [bmipy](https://pypi.org/project/bmipy/2.0/) package.\n\nFor inspiration look at the [example](test/fake_models.py) in the test directory. \n\nTo start a server process that allows calls to your BMI implementation, type\n\n```bash\nrun-bmi-server --name <PACKAGE>.<MODULE>.<CLASS> --port <PORT> --path <PATH>\n```\n\nwhere ```<PACKAGE>, <MODULE>``` are the python package and module containing your implementation, ```<CLASS>``` is your\nbmi model class name, ```<PORT>``` is any available port on the host system, and optionally ```<PATH>``` denotes an\nadditional path that should be added to the system path to make your implementation work. The name option above is\noptional, and if not provided the script will look at the environment variables ```BMI_PACKAGE```, ```BMI_MODULE``` and\n```BMI_CLASS```. Similarly, the port can be defined by the environment variable ```BMI_PORT```.\nThis software assumes that your implementation constructor has no parameters.\n"
      },
      "source": "https://raw.githubusercontent.com/eWaterCycle/grpc4bmi/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Model written in C/C++ (beta)",
        "parent_header": [
          "grpc4bmi",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Create an executable along the lines of cpp/run-bmi-server.cc. You can copy the file and replace the function\n\n```C++\nBmi* create_model_instance()\n{\n    /* Return your new BMI instance pointer here... */\n}\n```\n\nwith the instantiation of your model BMI. The model needs to implement the csdms BMI for C, but you may also implement our more object-oriented C++ interface [BmiCppExtension](https://github.com/eWaterCycle/grpc4bmi/blob/main/cpp/bmi_cpp_extension.h).\n"
      },
      "source": "https://raw.githubusercontent.com/eWaterCycle/grpc4bmi/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Model written in R",
        "parent_header": [
          "grpc4bmi",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "The grpc4bmi Python package can also run BMI models written in R if the model is a subclass of [AbstractBmi](https://github.com/eWaterCycle/bmi-r/blob/master/R/abstract-bmi.R#L9)\nSee [https://github.com/eWaterCycle/bmi-r](https://github.com/eWaterCycle/bmi-r) for instruction on R and Docker.\n\nRun the R model a server with\n\n```bash\nrun-bmi-server --lang R [--path <R file with BMI model>] --name [<PACKAGE>::]<CLASS> --port <PORT>\n```\n\nFor example with [WALRUS](https://github.com/eWaterCycle/grpc4bmi-examples/tree/master/walrus) use\n\n```bash\nrun-bmi-server --lang R --path ~/git/eWaterCycle/grpc4bmi-examples/walrus/walrus-bmi.r --name WalrusBmi --port 55555\n```\n"
      },
      "source": "https://raw.githubusercontent.com/eWaterCycle/grpc4bmi/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Models written in Julia",
        "parent_header": [
          "grpc4bmi",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "The grpc4bmi Python package can also run BMI models written in Julia if the model has an implementation of the [BasicModelInterface.jl](https://github.com/Deltares/BasicModelInterface.jl).\n\nRun the Julia model in Python with\n\n```bash\nfrom grpc4bmi.bmi_julia_model import BmiJulia\n\nmymodel = BmiJulia.from_name('<package>.<model>', 'BasicModelInterface')\n```\n\nFor example with [Wflow.jl](https://github.com/Deltares/Wflow.jl/) use\n\n```bash\n# Install Wflow.jl package in the Julia environment managed by the juliacall Python package.\nfrom juliacall import Main as jl\njl.Pkg.add(\"Wflow\")\n# Create the model\nfrom grpc4bmi.bmi_julia_model import BmiJulia\nmymodel = BmiJulia.from_name('Wflow.Model', 'Wflow.bmi.BMI')\n```\n\nA Julia model has to be run locally. It can not be run in the default gRPC client/server Docker container mode because:\n\n1. Julia has no gRPC server implementation\n2. Calling Julia methods from Python gRPC server causes 100% CPU usage and no progress\n3. Calling Julia methods from C++ gRPC server causes segmentation faults\n"
      },
      "source": "https://raw.githubusercontent.com/eWaterCycle/grpc4bmi/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "The client side",
        "parent_header": [
          "grpc4bmi",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "The client side has only a Python implementation. The default BMI client assumes a running server process on a given port.\n\n```python\nfrom grpc4bmi.bmi_grpc_client import BmiClient\nimport grpc\nmymodel = BmiClient(grpc.insecure_channel(\"localhost:<PORT>\"))\nprint mymodel.get_component_name()\nmymodel.initialize(<FILEPATH>)\n...further BMI calls...\n```\n\nThe package contains also client implementation that own the server process, either as a Python subprocess or a Docker\ncontainer or a Singularity container or a Apptainer container running the ```run-bmi-server``` script. For instance\n```python\nfrom grpc4bmi.bmi_client_subproc import BmiClientSubProcess\nmymodel = BmiClientSubProcess(<PACKAGE>.<MODULE>.<CLASS>)\n```\n\nwill automatically launch the server in a sub-process and\n\n```python\nfrom grpc4bmi.bmi_client_docker import BmiClientDocker\nmymodel = BmiClientDocker(<IMAGE>, <WORK DIR TO MOUNT>, input_dirs=[<INPUT DIRECTORIES TO MOUNT>])\n```\nwill launch a Docker container based on supplied Docker image\nand will mount supplied directories to share files between the container and host.\n\n```python\nfrom grpc4bmi.bmi_client_singularity import BmiClientSingularity\nmymodel = BmiClientSingularity(<IMAGE>, <WORK DIR TO MOUNT>, input_dirs=[<INPUT DIRECTORIES TO MOUNT>])\n```\nwill launch a singularity container on based supplied Singularity image\nand will mount supplied directories to share files between the container and host.\n\n```python\nfrom grpc4bmi.bmi_client_apptainer import BmiClientApptainer\nmymodel = BmiClientApptainer(<IMAGE>, <WORK DIR TO MOUNT>, input_dirs=[<INPUT DIRECTORIES TO MOUNT>])\n```\nwill launch a Apptainer container on based supplied Apptainer image\nand will mount supplied directories to share files between the container and host.\n\nFor more documentation see [https://grpc4bmi.readthedocs.io/](https://grpc4bmi.readthedocs.io/).\n"
      },
      "source": "https://raw.githubusercontent.com/eWaterCycle/grpc4bmi/main/README.md",
      "technique": "header_analysis"
    }
  ]
}