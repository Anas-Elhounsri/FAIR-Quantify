{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/QuantumRadioAstronomy/hera_cal_quantum"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-08-31T07:22:27Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-14T12:39:27Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Library for HERA redundant calibration using quantum computing"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9217303158267846,
      "result": {
        "original_header": "hera_cal_quantum",
        "type": "Text_excerpt",
        "value": "The hera_cal_quantum package add quantum solvers to the original hera_cal package through a dedicated fork of the linsolve package \nThe original hera_cal package includes modules and scripts for the calibration and LST-binning of [Hydrogen Epoch of Reionization Array (HERA)](http://reionization.org/) data, along with various helpful methods for filtering and smoothing of data and calibration solutions. These are meant for use interatively, as part of offline analysis (e.g. [IDR 2.2](http://reionization.org/manual_uploads/HERA069_IDR2.2_Memo_v2.html)), or as part of HERA's realtime analysis pipeline using [`hera_opm`](https://github.com/HERA-Team/hera_opm/). \n"
      },
      "source": "https://raw.githubusercontent.com/QuantumRadioAstronomy/hera_cal_quantum/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9769710850509505,
      "result": {
        "original_header": "I/O and Data Handling",
        "type": "Text_excerpt",
        "value": "* `hera_cal.io`: contains `HERACal` and `HERAData` that wrap `pyuvdata` equivalents and enable easy I/O of data and calibration files. \n* `hera_cal.datacontainer`: contains the `DataContainer` object, a dictionary-like container for visibility data with various useful abstractions\n \n"
      },
      "source": "https://raw.githubusercontent.com/QuantumRadioAstronomy/hera_cal_quantum/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9337552769514688,
      "result": {
        "original_header": "Calibration",
        "type": "Text_excerpt",
        "value": "* `hera_cal.redcal`: redundant calibration module, with `firstcal`, `logcal`, `lincal`, and `omnical` and helper functions for finding and manipulating sets of redundant baselines. \n* `hera_cal.abscal`: absolute calibnration module, largely used to calibrate out redcal degeneraices post-redundant calibration using an externally calibrated data set. \n* `hera_cal.apply_cal`: functions to apply calibration solutions (and flags) to data in memory or on disk \n* `hera_cal.reflections`: functions for fitting per-antenna cable reflections and other per-baseline high-delay systematics (e.g. cross-talk) \n* `hera_cal.tempcal`: functions for calibrating using external temperature data \n"
      },
      "source": "https://raw.githubusercontent.com/QuantumRadioAstronomy/hera_cal_quantum/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.990761003680372,
      "result": {
        "original_header": "LST-Binning",
        "type": "Text_excerpt",
        "value": "* `hera_cal.lstbin`: module for LST-binning, including aligning, rephasing, and MAD clipping, and associated I/O \n"
      },
      "source": "https://raw.githubusercontent.com/QuantumRadioAstronomy/hera_cal_quantum/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9839658846833321,
      "result": {
        "original_header": "Filtering and Smoothing",
        "type": "Text_excerpt",
        "value": "* `hera_cal.smooth_cal`: utilities for smoothing calibration solutions in frequency, time, or both \n* `hera_cal.vis_clean`: base module interface to aipy CLEAN for low- and high-pass filtering visibility data along the time or frequency axis \n* `hera_cal.delay_filter`: specialization of `vis_clean` for performing delay filtering (e.g. wedge filtering) of visibility data \n* `hera_cal.frf`: specialization of `vis_clean` for performing fringe-rate (e.g. time) filtering of visibility data\n \n"
      },
      "source": "https://raw.githubusercontent.com/QuantumRadioAstronomy/hera_cal_quantum/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9505537771647603,
      "result": {
        "original_header": "Other Utilities",
        "type": "Text_excerpt",
        "value": "* `hera_cal.noise`: utilities for calculating visibility noise from interleaved differences and for predicting visibility noise from autocorrelations \n* `hera_cal.autos`: module for extracting and saving autocorrelation data \n* `hera_cal.utils`: grabbag of useful functions, including polarization string handling, FFT-based delay fitting, time and LST math, solar position calculation, chi^2 calculations, etc. \n* `hera_cal.flag_utils`: utilities for applying, synthesizing, and factoring flags \n"
      },
      "source": "https://raw.githubusercontent.com/QuantumRadioAstronomy/hera_cal_quantum/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.886193530177064,
      "result": {
        "original_header": "Scripts",
        "type": "Text_excerpt",
        "value": "\n* `apply_cal.py`: apply calibration solutions (as associated antenna-based flags) to data\n* `auto_reflection_run.py`: estimate cable reflection gains from autocorrelations\n* `delay_filter_run.py`: perform delay filtering outside the wedge\n* `extract_autos.py`: extract autocorrelation visibilities and save them\n* `extract_hh.py`: extract data only from the core HERA Hex\n* `lstbin_run.py`: run the LST-binner\n* `noise_from_autos.py`: infer noise on visibilities and save as per-antenna noise standard deviation\n* `post_redcal_abscal_run.py`: run abscal post-redundant calibration and save updated calibration solutions\n* `redcal_run.py`: run redundant calibration and save firstcal and omnical visibility abd calibration solutions\n* `smooth_cal_run.py`: smooth calibration solutions in time, frequency, or both\n \n"
      },
      "source": "https://raw.githubusercontent.com/QuantumRadioAstronomy/hera_cal_quantum/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9807600483317271,
      "result": {
        "original_header": "Issues and Contribution",
        "type": "Text_excerpt",
        "value": "Issues [are tracked here](https://github.com/HERA-Team/hera_cal/issues). Please submit bugs, feature requests, etc. Contributions to this repo via pull request are welcome, though they require thorough peer review before merging into the master branch. To the best of our ability, all code should be covered with tests. The primary maintainer of `hera_cal` is [@jsdillon](https://github.com/jsdillon). Other maintiners who can update the master branch include [@AaronParsons](https://github.com/AaronParsons), [@nkern](https://github.com/nkern), [@adampbeardsley](https://github.com/adampbeardsley), and [@plaplant](https://github.com/plaplant).\n \n"
      },
      "source": "https://raw.githubusercontent.com/QuantumRadioAstronomy/hera_cal_quantum/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Documentation",
        "parent_header": [
          "hera_cal_quantum",
          "Package Details"
        ],
        "type": "Text_excerpt",
        "value": "The only guaranteed up-to-date documentation of individual functions and classes are their docstrings.\n\nThe [IDR2.2 Release Memo](https://github.com/HERA-Team/hera_sandbox/blob/master/jsd/IDR2_2/IDR2.2_Memo.ipynb) is a jupyter notebook that can run at NRAO and contains useful examples of data access and visualization.\n\nMany modules have [instructional notebooks avaible here](../tree/master/scripts/notebooks), though some of those are out of date.\n\nWhile `hera_cal` has a [Read the Docs](http://hera_cal.readthedocs.io/en/latest/), it is wildly out of date.\n\n"
      },
      "source": "https://raw.githubusercontent.com/QuantumRadioAstronomy/hera_cal_quantum/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "http://hera_cal.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/QuantumRadioAstronomy/hera_cal_quantum/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/QuantumRadioAstronomy/hera_cal_quantum/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/QuantumRadioAstronomy/hera_cal_quantum/main/scripts/notebooks/io_example.ipynb"
      },
      "source": "https://raw.githubusercontent.com/QuantumRadioAstronomy/hera_cal_quantum/main/scripts/notebooks/io_example.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/QuantumRadioAstronomy/hera_cal_quantum/main/scripts/notebooks/running_smooth_cal.ipynb"
      },
      "source": "https://raw.githubusercontent.com/QuantumRadioAstronomy/hera_cal_quantum/main/scripts/notebooks/running_smooth_cal.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/QuantumRadioAstronomy/hera_cal_quantum/main/scripts/notebooks/omnical_convergence.ipynb"
      },
      "source": "https://raw.githubusercontent.com/QuantumRadioAstronomy/hera_cal_quantum/main/scripts/notebooks/omnical_convergence.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/QuantumRadioAstronomy/hera_cal_quantum/main/scripts/notebooks/running_abscal.ipynb"
      },
      "source": "https://raw.githubusercontent.com/QuantumRadioAstronomy/hera_cal_quantum/main/scripts/notebooks/running_abscal.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/QuantumRadioAstronomy/hera_cal_quantum/main/scripts/notebooks/running_lstbin.ipynb"
      },
      "source": "https://raw.githubusercontent.com/QuantumRadioAstronomy/hera_cal_quantum/main/scripts/notebooks/running_lstbin.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/QuantumRadioAstronomy/hera_cal_quantum/main/scripts/notebooks/delay_plus_rfi.ipynb"
      },
      "source": "https://raw.githubusercontent.com/QuantumRadioAstronomy/hera_cal_quantum/main/scripts/notebooks/delay_plus_rfi.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/QuantumRadioAstronomy/hera_cal_quantum/main/scripts/notebooks/running_delay_filter.ipynb"
      },
      "source": "https://raw.githubusercontent.com/QuantumRadioAstronomy/hera_cal_quantum/main/scripts/notebooks/running_delay_filter.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/QuantumRadioAstronomy/hera_cal_quantum/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "QuantumRadioAstronomy/hera_cal_quantum"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "hera_cal_quantum"
      },
      "source": "https://raw.githubusercontent.com/QuantumRadioAstronomy/hera_cal_quantum/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/QuantumRadioAstronomy/hera_cal_quantum/main/ci/install_conda.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "hera_cal_quantum"
        ],
        "type": "Text_excerpt",
        "value": "Preferred installation method is `pip install .` in top-level directory. Alternatively,\none can use `python setup.py install`. This will attempt to install all dependencies.\nIf you prefer to explicitly manage dependencies, see below.\n"
      },
      "source": "https://raw.githubusercontent.com/QuantumRadioAstronomy/hera_cal_quantum/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Development Environment",
        "parent_header": [
          "hera_cal_quantum",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "To install a full development environment for `hera_cal`, it can be useful to work with\na fresh `conda` environment. These steps will get you up and running::\n\n    $ conda create -n hera_cal python=3\n    $ conda activate hera_cal\n    $ conda env update -n hera_cal -f environment.yml\n    $ pip install -e .\n\nThis installs extra packages than those required to use `hera_cal`, including `hera_sim`\nand `pytest`.\n\nIf you are developing `hera_cal` please install pre-commit: `pip install pre-commit` and\nthen `pre-commit install` in the top-level directory. This will check your style before\nyou make commits.\n"
      },
      "source": "https://raw.githubusercontent.com/QuantumRadioAstronomy/hera_cal_quantum/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9822108557349821,
      "result": {
        "original_header": "hera_cal_quantum",
        "type": "Text_excerpt",
        "value": "The hera_cal_quantum package add quantum solvers to the original hera_cal package through a dedicated fork of the linsolve package \nThis package only officially supports python 3, though most functionality will still work in python 2.\n \n"
      },
      "source": "https://raw.githubusercontent.com/QuantumRadioAstronomy/hera_cal_quantum/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8648124058268015,
      "result": {
        "original_header": "Issues and Contribution",
        "type": "Text_excerpt",
        "value": "Issues [are tracked here](https://github.com/HERA-Team/hera_cal/issues). Please submit bugs, feature requests, etc. Contributions to this repo via pull request are welcome, though they require thorough peer review before merging into the master branch. To the best of our ability, all code should be covered with tests. The primary maintainer of `hera_cal` is [@jsdillon](https://github.com/jsdillon). Other maintiners who can update the master branch include [@AaronParsons](https://github.com/AaronParsons), [@nkern](https://github.com/nkern), [@adampbeardsley](https://github.com/adampbeardsley), and [@plaplant](https://github.com/plaplant).\n \n"
      },
      "source": "https://raw.githubusercontent.com/QuantumRadioAstronomy/hera_cal_quantum/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8300482774807255,
      "result": {
        "original_header": "Scripts",
        "type": "Text_excerpt",
        "value": "\n* `apply_cal.py`: apply calibration solutions (as associated antenna-based flags) to data\n* `auto_reflection_run.py`: estimate cable reflection gains from autocorrelations\n* `delay_filter_run.py`: perform delay filtering outside the wedge\n* `extract_autos.py`: extract autocorrelation visibilities and save them\n* `extract_hh.py`: extract data only from the core HERA Hex\n* `lstbin_run.py`: run the LST-binner\n* `noise_from_autos.py`: infer noise on visibilities and save as per-antenna noise standard deviation\n* `post_redcal_abscal_run.py`: run abscal post-redundant calibration and save updated calibration solutions\n* `redcal_run.py`: run redundant calibration and save firstcal and omnical visibility abd calibration solutions\n* `smooth_cal_run.py`: smooth calibration solutions in time, frequency, or both\n \n"
      },
      "source": "https://raw.githubusercontent.com/QuantumRadioAstronomy/hera_cal_quantum/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/QuantumRadioAstronomy/hera_cal_quantum/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2018 Hydrogen Epoch of Reionization Array (HERA)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/QuantumRadioAstronomy/hera_cal_quantum/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "hera_cal_quantum"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "QuantumRadioAstronomy"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 2656553,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 2330068,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 536,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/QuantumRadioAstronomy/hera_cal_quantum/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "parent_header": [
          "hera_cal_quantum",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Those who use `conda` (preferred) may wish to install the following manually before\ninstalling `hera_cal`:\n\n`conda install -c conda-forge \"numpy>=1.10\" scipy scikit-learn h5py astropy pyuvdata`\n\n(note that `h5py` is a dependency of `hera_qm`, not `hera_cal`).\n\nOther dependencies that will be installed from PyPI on-the-fly are:\n* [linsolve](https://github.com/HERA-Team/linsolve)\n* [hera_qm](https://github.com/HERA-Team/hera_qm)\n* [hera_filters](https://github.com/HERA-Team/hera_filters)\n\n`hera_cal` also has the _optional_ dependency of `aipy`, and some\nfunctions will not work without this dependency. To install all optional dependencies, use\n`pip install .[all]` or `pip install git+git://github.com/HERA-Team/hera_cal.git[all]`.\n"
      },
      "source": "https://raw.githubusercontent.com/QuantumRadioAstronomy/hera_cal_quantum/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running tests",
        "parent_header": [
          "hera_cal_quantum",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Tests use the `pytest` framework. To run all tests, call `pytest` or\n`python -m pytest` from the base directory of the repo.\n"
      },
      "source": "https://raw.githubusercontent.com/QuantumRadioAstronomy/hera_cal_quantum/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:50:59",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ]
}