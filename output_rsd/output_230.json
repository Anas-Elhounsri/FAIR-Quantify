{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/c3g/chord_singularity"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-09-27T20:53:46Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-06-21T15:33:04Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Singularity container scripts for a complete CHORD project package. "
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.8110202371052442,
      "result": {
        "original_header": "CHORD Singularity",
        "type": "Text_excerpt",
        "value": "What's included in a CHORD Singularity container? \n"
      },
      "source": "https://raw.githubusercontent.com/c3g/chord_singularity/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9413239956754736,
      "result": {
        "original_header": "Provenance",
        "type": "Text_excerpt",
        "value": "Releases are authorized by a committee composed of CHORD and shared platform\nsoftware developers and project managers. \n  * Comprehensive service- and library-level testing suites\n  * Testing by hand using synthetic datasets on local machines\n  * Advance deployment on select instances that opt into testing newer versions\n  \nAs part of the release process, documentation is included in the form of tagged\nversions of the [chord-docs](https://chord-docs.readthedocs.io/en/latest/)\nwebsite, and service-level `README` files for service-specific technical\ndetails. \nThe developers of the platform are constantly monitoring for the latest patches\nto dependencies used in the project. Any updates that are of critical\nimportance (bug fixes, security flaws) will warrant a patch release of the\nsoftware itself, which will pass through the standard release vetting process. \n"
      },
      "source": "https://raw.githubusercontent.com/c3g/chord_singularity/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9371958200371178,
      "result": {
        "original_header": "Bind Locations",
        "type": "Text_excerpt",
        "value": "`CHORD_DATA_DIRECTORY`: `/chord/data`\n* Stores persistent data including databases and data files \n`CHORD_TEMP_DIRECTORY`: `/chord/tmp`\n* Stores boot-lifecycle (i.e. shouldn't be removed while CHORD is running, but\n  may be removed when shut down) files including UNIX sockets and log files \n"
      },
      "source": "https://raw.githubusercontent.com/c3g/chord_singularity/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/c3g/chord_singularity/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/c3g/chord_singularity/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "c3g/chord_singularity"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CHORD Singularity"
      },
      "source": "https://raw.githubusercontent.com/c3g/chord_singularity/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Singularity",
        "parent_header": [
          "CHORD Singularity",
          "Developing and Building",
          "Setting Up the Build/Development Environment"
        ],
        "type": "Text_excerpt",
        "value": "To install Singularity, follow the\n[Singularity installation guide](https://sylabs.io/guides/3.5/user-guide/quick_start.html).\n\nCHORD requires **Singularity 3.5** (or later compatible versions.)\n"
      },
      "source": "https://raw.githubusercontent.com/c3g/chord_singularity/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2. (Optional) Virtual Environment",
        "parent_header": [
          "CHORD Singularity",
          "Developing and Building",
          "Setting Up the Build/Development Environment"
        ],
        "type": "Text_excerpt",
        "value": "Although the `dev_utils.py` script doesn't need any external dependencies, it\nmay be useful to create a virtual environment with a specific version of Python\n3.6 (or higher) when developing:\n\n```bash\nvirtualenv -p python3 ./env\nsource env/bin/activate\n```\n"
      },
      "source": "https://raw.githubusercontent.com/c3g/chord_singularity/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3. Reverse Proxy",
        "parent_header": [
          "CHORD Singularity",
          "Developing and Building",
          "Setting Up the Build/Development Environment"
        ],
        "type": "Text_excerpt",
        "value": "NGINX can be set up as a reverse proxy outside of the containers to create a\ndevelopment CHORD cluster.\n"
      },
      "source": "https://raw.githubusercontent.com/c3g/chord_singularity/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Setting Up Authentication",
        "parent_header": [
          "CHORD Singularity",
          "Developing and Building"
        ],
        "type": "Text_excerpt",
        "value": "CHORD uses OpenID Connect (OIDC) to authenticate users. With the **development\ncluster**, instances' OIDC configurations can be specified in\n`instance_auth.json`.\n\nThe easiest way to get a development OIDC Identity Provider (IdP) is to install\n[Keycloak](https://www.keycloak.org/docs/latest/getting_started/index.html) and\nrun the standalone server provided.\n\nAfter installing Keycloak, clients supporting the authorization code OIDC\nworkflow can be set up, and configuration copied over to `instance_auth.json`.\n\nSetting up a fresh Keycloak installation to accomplish this entails:\n\n  * Creating a new client (`chord1` is the default for the first node)\n  * Specifying a root URL (e.g. `http://1.chord.dlougheed.com/`)\n  * Setting this client's access type as \"confidential\"\n    (this will let you access the \"Credentials\" tab and the\n    secret needed for `instance_auth.json`)\n\nSee [Configuring an Instance](#configuring-an-instance) for descriptions of\nwhat configuration values are available for each node in `instance_auth.json`.\n\n"
      },
      "source": "https://raw.githubusercontent.com/c3g/chord_singularity/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999887342079257,
      "result": {
        "original_header": "CHORD Singularity",
        "type": "Text_excerpt",
        "value": "  * NodeJS 14\n  * Python 3.7\n  * Java 11\n  * A Redis instance running at `/chord/tmp/redis.sock`\n  * A PostgreSQL 11 instance running at `/chord/tmp/postgresql/.s.PGSQL.5433`,\n    with a username stored in the environment variable `POSTGRES_USER` and a\n    service-specific database stored in the environment variable\n    `POSTGRES_DATABASE`\n  * `zlib1g-dev`, `libbz2-dev`, and `liblzma-dev`\n  * `htslib` \n"
      },
      "source": "https://raw.githubusercontent.com/c3g/chord_singularity/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8838027483034426,
      "result": {
        "original_header": "Provenance",
        "type": "Text_excerpt",
        "value": "Before publication, release candidates *currently* go through the following \nvalidation process: \nThe developers of the platform are constantly monitoring for the latest patches\nto dependencies used in the project. Any updates that are of critical\nimportance (bug fixes, security flaws) will warrant a patch release of the\nsoftware itself, which will pass through the standard release vetting process. \n"
      },
      "source": "https://raw.githubusercontent.com/c3g/chord_singularity/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9608636643595526,
      "result": {
        "original_header": "Building",
        "type": "Text_excerpt",
        "value": "**Building only works on Linux-based operating systems.** \nTo build the image:\n```bash\n./container_utils.py build [--container name custom.sif] [--bento-services-json ./custom.json]\n```\n \nYou will be asked for your OS password by Singularity. \n"
      },
      "source": "https://raw.githubusercontent.com/c3g/chord_singularity/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.884475429028106,
      "result": {
        "original_header": "Building",
        "type": "Text_excerpt",
        "value": "To build the image:\n```bash\n./container_utils.py build [--container name custom.sif] [--bento-services-json ./custom.json]\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/c3g/chord_singularity/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/c3g/chord_singularity/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "chord, singularity, singularity-container"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "GNU Lesser General Public License v3.0",
        "spdx_id": "LGPL-3.0",
        "type": "License",
        "url": "https://api.github.com/licenses/lgpl-3.0",
        "value": "https://api.github.com/licenses/lgpl-3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "                   GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\n  This version of the GNU Lesser General Public License incorporates\nthe terms and conditions of version 3 of the GNU General Public\nLicense, supplemented by the additional permissions listed below.\n\n  0. Additional Definitions.\n\n  As used herein, \"this License\" refers to version 3 of the GNU Lesser\nGeneral Public License, and the \"GNU GPL\" refers to version 3 of the GNU\nGeneral Public License.\n\n  \"The Library\" refers to a covered work governed by this License,\nother than an Application or a Combined Work as defined below.\n\n  An \"Application\" is any work that makes use of an interface provided\nby the Library, but which is not otherwise based on the Library.\nDefining a subclass of a class defined by the Library is deemed a mode\nof using an interface provided by the Library.\n\n  A \"Combined Work\" is a work produced by combining or linking an\nApplication with the Library.  The particular version of the Library\nwith which the Combined Work was made is also called the \"Linked\nVersion\".\n\n  The \"Minimal Corresponding Source\" for a Combined Work means the\nCorresponding Source for the Combined Work, excluding any source code\nfor portions of the Combined Work that, considered in isolation, are\nbased on the Application, and not on the Linked Version.\n\n  The \"Corresponding Application Code\" for a Combined Work means the\nobject code and/or source code for the Application, including any data\nand utility programs needed for reproducing the Combined Work from the\nApplication, but excluding the System Libraries of the Combined Work.\n\n  1. Exception to Section 3 of the GNU GPL.\n\n  You may convey a covered work under sections 3 and 4 of this License\nwithout being bound by section 3 of the GNU GPL.\n\n  2. Conveying Modified Versions.\n\n  If you modify a copy of the Library, and, in your modifications, a\nfacility refers to a function or data to be supplied by an Application\nthat uses the facility (other than as an argument passed when the\nfacility is invoked), then you may convey a copy of the modified\nversion:\n\n   a) under this License, provided that you make a good faith effort to\n   ensure that, in the event an Application does not supply the\n   function or data, the facility still operates, and performs\n   whatever part of its purpose remains meaningful, or\n\n   b) under the GNU GPL, with none of the additional permissions of\n   this License applicable to that copy.\n\n  3. Object Code Incorporating Material from Library Header Files.\n\n  The object code form of an Application may incorporate material from\na header file that is part of the Library.  You may convey such object\ncode under terms of your choice, provided that, if the incorporated\nmaterial is not limited to numerical parameters, data structure\nlayouts and accessors, or small macros, inline functions and templates\n(ten or fewer lines in length), you do both of the following:\n\n   a) Give prominent notice with each copy of the object code that the\n   Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the object code with a copy of the GNU GPL and this license\n   document.\n\n  4. Combined Works.\n\n  You may convey a Combined Work under terms of your choice that,\ntaken together, effectively do not restrict modification of the\nportions of the Library contained in the Combined Work and reverse\nengineering for debugging such modifications, if you also do each of\nthe following:\n\n   a) Give prominent notice with each copy of the Combined Work that\n   the Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the Combined Work with a copy of the GNU GPL and this license\n   document.\n\n   c) For a Combined Work that displays copyright notices during\n   execution, include the copyright notice for the Library among\n   these notices, as well as a reference directing the user to the\n   copies of the GNU GPL and this license document.\n\n   d) Do one of the following:\n\n       0) Convey the Minimal Corresponding Source under the terms of this\n       License, and the Corresponding Application Code in a form\n       suitable for, and under terms that permit, the user to\n       recombine or relink the Application with a modified version of\n       the Linked Version to produce a modified Combined Work, in the\n       manner specified by section 6 of the GNU GPL for conveying\n       Corresponding Source.\n\n       1) Use a suitable shared library mechanism for linking with the\n       Library.  A suitable mechanism is one that (a) uses at run time\n       a copy of the Library already present on the user's computer\n       system, and (b) will operate properly with a modified version\n       of the Library that is interface-compatible with the Linked\n       Version.\n\n   e) Provide Installation Information, but only if you would otherwise\n   be required to provide such information under section 6 of the\n   GNU GPL, and only to the extent that such information is\n   necessary to install and execute a modified version of the\n   Combined Work produced by recombining or relinking the\n   Application with a modified version of the Linked Version. (If\n   you use option 4d0, the Installation Information must accompany\n   the Minimal Corresponding Source and Corresponding Application\n   Code. If you use option 4d1, you must provide the Installation\n   Information in the manner specified by section 6 of the GNU GPL\n   for conveying Corresponding Source.)\n\n  5. Combined Libraries.\n\n  You may place library facilities that are a work based on the\nLibrary side by side in a single library together with other library\nfacilities that are not Applications and are not covered by this\nLicense, and convey such a combined library under terms of your\nchoice, if you do both of the following:\n\n   a) Accompany the combined library with a copy of the same work based\n   on the Library, uncombined with any other library facilities,\n   conveyed under the terms of this License.\n\n   b) Give prominent notice with the combined library that part of it\n   is a work based on the Library, and explaining where to find the\n   accompanying uncombined form of the same work.\n\n  6. Revised Versions of the GNU Lesser General Public License.\n\n  The Free Software Foundation may publish revised and/or new versions\nof the GNU Lesser General Public License from time to time. Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.\n\n  Each version is given a distinguishing version number. If the\nLibrary as you received it specifies that a certain numbered version\nof the GNU Lesser General Public License \"or any later version\"\napplies to it, you have the option of following the terms and\nconditions either of that published version or of any later version\npublished by the Free Software Foundation. If the Library as you\nreceived it does not specify a version number of the GNU Lesser\nGeneral Public License, you may choose any version of the GNU Lesser\nGeneral Public License ever published by the Free Software Foundation.\n\n  If the Library as you received it specifies that a proxy can decide\nwhether future versions of the GNU Lesser General Public License shall\napply, that proxy's public statement of acceptance of any version is\npermanent authorization for you to choose that version for the\nLibrary.\n"
      },
      "source": "https://raw.githubusercontent.com/c3g/chord_singularity/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "chord_singularity"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "c3g"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 37638,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Lua",
        "size": 23860,
        "type": "Programming_language",
        "value": "Lua"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 13584,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/c3g/chord_singularity/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://chord-docs.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/c3g/chord_singularity/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "davidlougheed",
          "type": "User"
        },
        "date_created": "2021-04-20T19:04:26Z",
        "date_published": "2021-04-20T19:06:04Z",
        "description": "Initial release.",
        "html_url": "https://github.com/c3g/chord_singularity/releases/tag/v0.1.0",
        "name": "Version 0.1.0",
        "release_id": 41734011,
        "tag": "v0.1.0",
        "tarball_url": "https://api.github.com/repos/c3g/chord_singularity/tarball/v0.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/c3g/chord_singularity/releases/41734011",
        "value": "https://api.github.com/repos/c3g/chord_singularity/releases/41734011",
        "zipball_url": "https://api.github.com/repos/c3g/chord_singularity/zipball/v0.1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Minimum System Requirements",
        "parent_header": [
          "CHORD Singularity"
        ],
        "type": "Text_excerpt",
        "value": "  * 3 GB of RAM (WES jobs alone will fail below roughly `2.2 GB`)\n  * 5 GB of disk space, or roughly `2.5 * sizeof(dataset)`:\n    * `.sif` image is around 700 MB, more needed for data and ingestion\n    * Ingestion procedures typically take at minimum \n      `sizeof(input) + sizeof(output)` to run. More space may be required in\n      order to generate additional temporary files.\n  * A minimum of **2 CPU cores** is **recommended**, but is not a hard \n    requirement.\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/c3g/chord_singularity/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running a Development Cluster",
        "parent_header": [
          "CHORD Singularity",
          "Developing and Building"
        ],
        "type": "Text_excerpt",
        "value": "Assumes `/tmp/chord` and `~/chord_data` are writable directories.\n\n**Note:** CHORD temporary and data directories can be specified by editing\n`dev_utils.py` (not recommended) or setting `CHORD_DATA_DIRECTORY` and\n`CHORD_TEMP_DIRECTORY` when running `dev_utils.py`.\n\nTo run a development cluster with `n` nodes, where `n` is some positive integer:\n\n```bash\n./dev_utils.py --cluster n start\n```\n\nOther available actions for `./dev_utils.py` are `stop` and `restart`.\n\n"
      },
      "source": "https://raw.githubusercontent.com/c3g/chord_singularity/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running as a Singularity Instance",
        "parent_header": [
          "CHORD Singularity",
          "Running an Instance"
        ],
        "type": "Text_excerpt",
        "value": "The following command will start an instance as `chord1`, assuming\n`.auth_config.json` and `.instance_config.json` have been created by hand in\nthe `CHORD_DATA_DIRECTORY` location:\n\n```bash\nsingularity instance start \\\n\t--bind /path/to/chord_tmp:/chord/tmp \\\n\t--bind /path/to/chord_data:/chord/data \\\n\t--bind /usr/share/zoneinfo/Etc/UTC:/usr/share/zoneinfo/Etc/UTC \\\n\t/path/to/chord.sif \\\n\tchord1\n```\n\n**Note:** In some cases timezone issues were encountered in the Singularity\nimage build; binding the UTC definition from the host is a hack-y fix for this.\n\n"
      },
      "source": "https://raw.githubusercontent.com/c3g/chord_singularity/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running in Docker",
        "parent_header": [
          "CHORD Singularity",
          "Running an Instance"
        ],
        "type": "Text_excerpt",
        "value": "**Note:** Docker support is experimental and possibly insecure. Use Singularity\nwhen possible. Proper Docker support is planned for a later release.\n\n`.auth_config.json` and `.instance_config.json` will need to be created by hand\nin the `CHORD_DATA_DIRECTORY` location.\n\n```bash\ndocker run -d \\\n  --mount type=bind,src=/path/to/chord_data,target=/chord/data \\\n  --mount type=bind,src=/path/to/chord_tmp,target=/chord/tmp \\\n  --mount type=bind,src=/usr/share/zoneinfo/Etc/UTC,target=/usr/share/zoneinfo/Etc/UTC \\\n  [container_id]\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/c3g/chord_singularity/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Important Log Locations",
        "parent_header": [
          "CHORD Singularity",
          "Running an Instance"
        ],
        "type": "Text_excerpt",
        "value": "**NGINX:** `/chord/tmp/nginx/*.log`\n\n**uWSGI:** `/chord/tmp/uwsgi/uwsgi.log`\n\n**Non-WSGI Services:** `/chord/tmp/logs/${SERVICE_ARTIFACT}/*`\n\n**PostgreSQL:** `/chord/tmp/postgresql/postgresql-${PG_VERSION}-main.log`\n"
      },
      "source": "https://raw.githubusercontent.com/c3g/chord_singularity/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:38:39",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Example Development NGINX Configuration",
        "parent_header": [
          "CHORD Singularity",
          "Developing and Building",
          "Setting Up the Build/Development Environment",
          "3. Reverse Proxy"
        ],
        "type": "Text_excerpt",
        "value": "Configuration for a **development** CHORD cluster, to use with `dev_utils.py`:\n\n```nginx\nserver {\n    listen 80;\n\n    server_name ~^(\\d+)\\.chord\\.dlougheed\\.com$;\n\n    location / {\n        # Tweak these as needed for the security concerns of the instance.\n        add_header 'Access-Control-Allow-Origin' '*' always;\n        add_header 'Access-Control-Allow-Methods' '*' always;\n        add_header 'Access-Control-Allow-Headers' '*' always;\n\n        try_files $uri @container;\n    }\n\n    location @container {\n        proxy_pass                       http://unix:/tmp/chord/$1/nginx.sock;\n        proxy_buffer_size                128k;\n        proxy_buffers                    4 256k;\n        proxy_busy_buffers_size          256k;\n        proxy_http_version               1.1;\n        proxy_set_header Host            $host;\n        proxy_set_header X-Forwarded-For $remote_addr;\n        proxy_set_header Upgrade         $http_upgrade;\n        proxy_set_header Connection      \"upgrade\";\n    }\n}\n```\n\nThis configuration assumes that `*.chord.dlougheed.com` (in this example) has\na DNS record set up to point at 127.0.0.1.\n\n**Note:** This NGINX configuration is unsuitable for production, since it\nhas a wide-open CORS policy allowing requests from anywhere.\n\n"
      },
      "source": "https://raw.githubusercontent.com/c3g/chord_singularity/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Configuring an Instance",
        "parent_header": [
          "CHORD Singularity"
        ],
        "type": "Text_excerpt",
        "value": "Some files are needed in the CHORD `data` folder to configure the node.\n\n**These files are automatically created when using the `dev_utils.py` script,\nbut should be set up in another way for production deployment.**\n\nValues for each node's `auth_config.json` are populated from the\n[`instance_auth.json`](instance_auth.json) file at instance start time when\nusing `dev_utils.py`.\n\n  * `instance_config.json`, containing the following key-value pairs:\n    * `CHORD_DEBUG` (`boolean`): Whether the container is started in debug\n      mode. **Important security note:** debug mode is **insecure** and cannot\n      be used in production **AT ALL**.\n      \n      **Default:** `false`\n      \n    * `CHORD_PERMISSIONS` (`boolean`): Whether the container, and services\n      within, use the default CHORD permissions system. Turning this off\n      WITHOUT an alternative in place is **insecure** and **cannot** be used in\n      production **AT ALL**.\n      \n      **Default:** `true`\n      \n    * `CHORD_PRIVATE_MODE` (`boolean`): Whether this node will require\n      authentication for any access. Also affects whether the node will be able\n      to join other nodes in a network. Disabling ``CHORD_PERMISSIONS` \n      **will override** this value.\n      \n      **Default:** `false`\n      \n    * `BENTO_FEDERATION_MODE` (`boolean`): Whether this node will enable\n      federation functionality, allowing it to connect to other nodes as part\n      of a Bento network.\n      \n      **Default:** `true`\n      \n    * `BENTO_FRONTEND_REPOSITORY` (`string`): The Git URI of the repository to\n      host from NGINX as the front end. If left blank, no front end will be\n      hosted, and the instance will run in a quasi \"headless\" mode.\n      \n      **Default:** `https://github.com/bento-platform/bento_web.git`\n      \n    * `BENTO_FRONTEND_VERSION` (`string`): The version (technically, the Git \n      tree, so it can be a branch or other tag as well) to check out from\n      `BENTO_FRONTEND_REPOSITORY`. If left blank, no front end will be\n      hosted and the instance will run in a quasi \"headless\" mode.\n      \n      **Default:** `v0.1.0`\n      \n    * `CHORD_URL` (`string`): The URL of the node, including trailing slash, \n      and sub path (if any)\n      \n      **No default value**\n      \n    * `CHORD_REGISTRY_URL` (`string`): The URL of the registry node (for\n      federation), with trailing slash, and sub path (if any.) A\n      **registry node** is a trusted CHORD node which is the de-facto reference\n      for the peer list.\n      \n      **No default value**\n      \n    * `LISTEN_ON` (`string`): \n      [NGINX syntax](http://nginx.org/en/docs/http/ngx_http_core_module.html#listen)\n      for where the server should listen. For UNIX sockets, the generally-accepted\n      de-facto location is `unix:/chord/tmp/nginx.sock`. Note that `/chord/tmp`\n      and `/chord/data` are **container-internal** writable locations. Since\n      the NGINX instance is *inside* the container, socket paths must also be\n      inside. Ports are bound inside; Singularity will bind the port outside\n      the container as well, whereas Docker will not.\n      \n      **Default:** `unix:/chord/tmp/nginx.sock`\n      \n  * `auth_config.json`:\n    * `OIDC_DISCOVERY_URI` (`string`): The discovery URI (typically\n      `.../.well_known/openid-configuration`) for the OIDC IdP\n      \n      **No default value**\n      \n    * `CLIENT_ID` (`string`): The client ID for the node in the OIDC IdP\n    \n      **No default value**\n    \n    * `CLIENT_SECRET` (`string`): The client secret for the node in the OIDC\n       IdP\n       \n       **No default value**\n       \n    * `TOKEN_ENDPOINT_AUTH_METHOD` (`string enum` of `client_secret_basic`, \n      `client_secret_post`, `client_secret_jwt`, or `private_key_jwt`): Which \n      authentication method to use for OIDC token endpoints. Depends on what \n      the OIDC IdP supports. \n      See [RFC 7591](https://tools.ietf.org/html/rfc7591#page-8) for details.\n      \n      **Default:** `client_secret_basic`\n      \n    * `OWNER_IDS` (`array` of `string`): The subject IDs (from the OIDC IdP) of\n       the node's owner(s)\n       \n       **Default:** `[]`\n\nExample configuration files are available in the\n[`example_config/`](https://github.com/c3g/chord_singularity/tree/master/example_config)\nfolder.\n\n**If in production:** Everything should be ran with SSL enabled; both\n`OIDC_DISCOVERY_URI` and the site itself should be configured to use `https`.\n\n"
      },
      "source": "https://raw.githubusercontent.com/c3g/chord_singularity/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example Production NGINX Configuration",
        "parent_header": [
          "CHORD Singularity",
          "Configuring an Instance"
        ],
        "type": "Text_excerpt",
        "value": "TODO: Figure out if WSS works here\n\n```nginx\nserver {\n    listen 80;\n    server_name chord.example.org;\n    server_tokens off;\n    return 301 https://$host$request_uri;\n}\nserver {\n    listen 443 ssl;\n\n    # Insert production SSL configuration here\n    ssl_certificate     chord.example.org.crt;\n    ssl_certificate_key chord.example.org.key;\n\n    server_name chord.example.org;\n    server_tokens off;\n\n    location / {\n        try_files $uri @container;\n    }\n\n    location ~ ^\\/api\\/(?!auth) {\n        # Tweak these as needed for the security concerns of the instance.\n        add_header 'Access-Control-Allow-Origin' '*' always;\n        add_header 'Access-Control-Allow-Methods' '*' always;\n        add_header 'Access-Control-Allow-Headers' '*' always;\n\n        try_files $uri @container;\n    }\n\n    location @container {\n        proxy_pass                       http://unix:/tmp/chord/nginx.sock;\n        proxy_buffer_size                128k;\n        proxy_buffers                    4 256k;\n        proxy_busy_buffers_size          256k;\n        proxy_http_version               1.1;\n        proxy_set_header Host            $host;\n        proxy_set_header X-Forwarded-For $remote_addr;\n        proxy_set_header Upgrade         $http_upgrade;\n        proxy_set_header Connection      \"upgrade\";\n    }\n}\n```\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/c3g/chord_singularity/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running as a Singularity Instance",
        "parent_header": [
          "CHORD Singularity",
          "Running an Instance"
        ],
        "type": "Text_excerpt",
        "value": "The following command will start an instance as `chord1`, assuming\n`.auth_config.json` and `.instance_config.json` have been created by hand in\nthe `CHORD_DATA_DIRECTORY` location:\n\n```bash\nsingularity instance start \\\n\t--bind /path/to/chord_tmp:/chord/tmp \\\n\t--bind /path/to/chord_data:/chord/data \\\n\t--bind /usr/share/zoneinfo/Etc/UTC:/usr/share/zoneinfo/Etc/UTC \\\n\t/path/to/chord.sif \\\n\tchord1\n```\n\n**Note:** In some cases timezone issues were encountered in the Singularity\nimage build; binding the UTC definition from the host is a hack-y fix for this.\n\n"
      },
      "source": "https://raw.githubusercontent.com/c3g/chord_singularity/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Stopping the Instance",
        "parent_header": [
          "CHORD Singularity",
          "Running an Instance",
          "Running as a Singularity Instance"
        ],
        "type": "Text_excerpt",
        "value": "An extra step must be taken to stop the new `chord1` instance safely - a stop\nscript was written to facilitate this:\n\n```bash\nsingularity exec instance://chord1 bash /chord/container_scripts/stop_script.bash\nsingularity instance stop chord1\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/c3g/chord_singularity/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Important Log Locations",
        "parent_header": [
          "CHORD Singularity",
          "Running an Instance"
        ],
        "type": "Text_excerpt",
        "value": "**NGINX:** `/chord/tmp/nginx/*.log`\n\n**uWSGI:** `/chord/tmp/uwsgi/uwsgi.log`\n\n**Non-WSGI Services:** `/chord/tmp/logs/${SERVICE_ARTIFACT}/*`\n\n**PostgreSQL:** `/chord/tmp/postgresql/postgresql-${PG_VERSION}-main.log`\n"
      },
      "source": "https://raw.githubusercontent.com/c3g/chord_singularity/master/README.md",
      "technique": "header_analysis"
    }
  ]
}