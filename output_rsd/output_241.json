{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/filippi-claudia/champ"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-10-17T14:51:31Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-02T14:45:13Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "The Cornell-Holland Ab-initio Materials Package (CHAMP) is a quantum Monte Carlo suite of programs for electronic structure calculations of atomic and molecular systems."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.8947616617050315,
      "result": {
        "original_header": "CHAMP in a container",
        "type": "Text_excerpt",
        "value": "CHAMP is available as a container image from Dockerhub. Here are the instructions to obtain the images: \n"
      },
      "source": "https://raw.githubusercontent.com/filippi-claudia/champ/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9963031184061582,
      "result": {
        "type": "Text_excerpt",
        "value": "The Cornell-Holland Ab-initio Materials Package (CHAMP) is a quantum Monte Carlo suite of programs for electronic structure calculations of atomic and molecular systems. The code is a sister code of the homonymous program originally developed by Cyrus Umrigar and Claudia Filippi of which it retains the accelerated Metropolis method and the efficient diffusion Monte Carlo algorithms. \n"
      },
      "source": "https://raw.githubusercontent.com/filippi-claudia/champ/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9860751313779925,
      "result": {
        "original_header": "Geometry in the (XYZ in Bohr units) format with automatic Zvalence",
        "type": "Text_excerpt",
        "value": "The European branch of the code is currently developed by Claudia Filippi and Saverio Moroni,\nwith significant contributions by Ravindra Shinde, Nicolas Renaud, Victor Azizi, Edgar Landinez, and Stuart Shepard. \n* Metropolis or variational Monte Carlo (VMC)\n* Diffusion Monte Carlo (DMC)\n* Optimization of many-body wave functions by energy minimization (VMC) for ground and excited states \nNoteworthy features of CHAMP are: \n* Efficient wave function optimization also in a state-average and a state-specific fashion for multiple states of the same symmetry (VMC)\n* Efficient computation of analytical interatomic forces (VMC)\n* Compact formulation for a fast evaluation of multi-determinant expansions and their derivatives (VMC and DMC)\n* Multiscale VMC and DMC calculations in classical point charges (MM), polarizable continuum model (PCM), and polarizable force fields (MMpol) \nThe code is available for free under the GPL-3.0 license. Developers and contributors are welcome to use and contribute back to the code. If you have used the code for your publications, please cite this source. \n"
      },
      "source": "https://raw.githubusercontent.com/filippi-claudia/champ/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9526180506679663,
      "result": {
        "type": "Text_excerpt",
        "value": "1. :\n   An easy-to-use and easy-to-extend keyword-value pair-based input file parser written in Fortran 2008.  This parser uses a heavily modified libFDF library and is written by . It can parse keyword-value pairs, blocks of data, and general variables with different physical units in an order-independent manner. Our implementation can handle multiple data types and file formats. The parser is kept as a library in the code, however, it can be easily adapted by any other Fortran-based code. \n2. :\n   TREXIO is an open-source file format and library developed for the storage and manipulation of data produced by quantum chemistry calculations. CHAMP can read the starting wavefunction from a trexio file. The library has interfaces to a lot of quantum chemical programs.\n   CHAMP can directly read the contents of this file with a single load statement in the input file. This library is currently optional. \n\n3. :\n   We provide a Python package inside the CHAMP's tool directory to extract all the necessary information from a TREXIO file in the hdf5 file format to a human-readable text format. This allows one to bypass the TREXIO library within CHAMP and input the necessary data via the Parser (see Option 2 in Section \"Preparing the Input File\" below). \n4. :\n  This library provides a high-performance implementation of the main kernels of Quantum Monte Carlo methods. This library is currently optional. \n"
      },
      "source": "https://raw.githubusercontent.com/filippi-claudia/champ/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/filippi-claudia/champ/tree/main/docs"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "User's manual and documentation",
        "type": "Text_excerpt",
        "value": "The user's manual and documentation is hosted at [https://trex-coe.github.io/champ-user-manual/](https://trex-coe.github.io/champ-user-manual)\n\n"
      },
      "source": "https://raw.githubusercontent.com/filippi-claudia/champ/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/filippi-claudia/champ/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/filippi-claudia/champ/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "filippi-claudia/champ"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/filippi-claudia/champ/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/filippi-claudia/champ/main/docker/GNU/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/filippi-claudia/champ/main/docker/GNU/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/filippi-claudia/champ/main/tools/trex_tools/script_formaldehyde.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/filippi-claudia/champ/main/tools/trex_tools/script_benzene.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/filippi-claudia/champ/main/tools/trex_tools/script_butadiene_ci1010_pVTZ.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/filippi-claudia/champ/main/tools/trex_tools/script_butadiene_ci44_pVDZ.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/filippi-claudia/champ/main/tools/forces_shell_scripts/qmc_optgeo_extract_geo_path.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/filippi-claudia/champ/main/tools/forces_shell_scripts/qmc_optgeo_extract_data_from_Iterdata.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/filippi-claudia/champ/main/tools/forces_shell_scripts/gamess_extract_pseudonatorb.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/filippi-claudia/champ/main/docs/trexio.png"
      },
      "source": "https://raw.githubusercontent.com/filippi-claudia/champ/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation Using CMake",
        "type": "Text_excerpt",
        "value": "To install **Champ** using [cmake](https://cmake.org/) you need to run the following commands:\n```\ncmake -H. -Bbuild\ncmake --build build -- -j4\n```\nThe first command is only required to set up the build directory and needs to be\nexecuted only once. Compared to the previous Makefiles the dependencies for the\ninclude files (e.g include/vmc.h) are correctly setup and no `--clean-first` is\nrequired.\n"
      },
      "source": "https://raw.githubusercontent.com/filippi-claudia/champ/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "CMAKE Options",
        "parent_header": [
          "Installation Using CMake"
        ],
        "type": "Text_excerpt",
        "value": "To select a given compiler, you can type:\n```\ncmake -H. -Bbuild -D CMAKE_Fortran_COMPILER=mpif90\n```\nTo use LAPACK and BLAS installed locally, include the path to the libraries:\n```\ncmake -H. -Bbuild \\\n\t-DCMAKE_Fortran_COMPILER=mpif90 \\\n\t-DBLAS_blas_LIBRARY=/home/user/lib/BLAS/blas_LINUX.a \\\n\t-DLAPACK_lapack_LIBRARY=/home/user/lib/LAPACK/liblapack.a\n```\nTo enable/disable vectorization based on the architecture:\n```bash\ncmake -H. -Bbuild -DCMAKE_Fortran_COMPILER=mpif90 -DVECTORIZED=yes/no/auto\n```\n\nTo compile only e.g. VMC serial:\n```\ncmake --build build --target vmc.mov1\n```\nClean and build:\n```\ncmake --build build --clean-first\n```\n"
      },
      "source": "https://raw.githubusercontent.com/filippi-claudia/champ/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "CMAKE Recipes",
        "parent_header": [
          "Installation Using CMake"
        ],
        "type": "Text_excerpt",
        "value": "Here are a couple of recipes for commonly used computing facilities, which can be easily adapted.\n* **Snellius** (snellius.surfa.nl):\n\t- To compile the code, first load the required modules:\n\t\t```bash\n\t\tmodule purge\n\t\tmodule load 2022\n\t\tmodule load intel/2022a\n\t\tmodule load HDF5/1.12.2-iimpi-2022a\n\t\t```\n\t\tthen set-up the build:\n\t\t```bash\n\t\tcmake -H. -Bbuild -DCMAKE_Fortran_COMPILER=mpiifort\n\t\t```\n\t\tOptionally, you may link the trexio library using the following command:\n\t\t```bash\n\t\tcmake -S. -Bbuild  \\\n  \t\t\t-DCMAKE_Fortran_COMPILER=mpiifort  \\\n  \t\t\t-DENABLE_TREXIO=ON  \\\n  \t\t\t-DTREXIO_LIBRARY=$HOME/lib/libtrexio.so  \\\n  \t\t\t-DTREXIO_INCLUDE_DIR=$HOME/include/\n\t\t```\n\t\tand finally build:\n\t\t```bash\n\t\tcmake --build build -j8 --clean-first\n\t\t```\n\t- To run the code, you need to submit a job to the queue system:\n\t\t```bash\n\t\tsbatch job.cmd\n\t\t```\n\t\twhere `job.cmd` is a SLURM script for `genoa` partition that looks like this:\n\n\t\t```bash\n\t\t#!/bin/bash\n        #SBATCH -t 0-12:00:00            # time in (day-hours:min:sec)\n        #SBATCH -N 1                     # number of nodes (change this number to use more nodes)\n        #SBATCH --ntasks-per-node 192    # tasks per node (Use 192 for genoa and 128 for rome partition)\n        #SBATCH -J vmc                   # name of the job\n        #SBATCH -o vmc.%j.out            # std output file name for slurm\n        #SBATCH -e vmc.%j.err            # std error file name for slurm\n        #SBATCH --exclusive              # specific requirements about node\n        #SBATCH --partition genoa        # partition (queue)\n        #\n        module purge\n        module load 2022\n        module load intel/2022a\n        module load HDF5/1.12.2-iimpi-2022a\n        #\n        export I_MPI_PMI_LIBRARY=/usr/lib64/libpmi2.so\n        cd $PWD\n\t\tsrun champ/bin/vmc.mov1 -i input.inp -o output.out -e error\n\t\t```\n* **CCPhead**:\n\t- To build with mpiifort, load the required modules of the Intel Compiler and MPI:\n\n\t\t```bash\n \t\tmodule load cmake/latest\n \t\tmodule load compiler-rt/latest\n \t\tmodule load debugger/latest\n \t\tmodule load compiler/latest\n \t\tmodule load icc/latest\n \t\tmodule load mpi/latest\n \t\tmodule load hdf5/latest\n \t\tmodule load tbb/latest\n \t\tmodule load dpl/latest\n \t\tmodule load dev-utilities/latest\n \t\tmodule load mkl/latest\n \t\tmodule load trexio/latest\n \t\t```\n\t\tSetup the build:\n\t\t```\n\t\tcmake -H. -Bbuild -DCMAKE_Fortran_COMPILER=mpiifort\n\t\t```\n\t- To enable TREXIO library:\n\t\t```\n\t\tcmake -H. -Bbuild  \\\n  \t\t\t-DCMAKE_Fortran_COMPILER=mpiifort -DENABLE_TREXIO=ON  \\\n  \t\t\t-DTREXIO_LIBRARY=/software/libraries/trexio/latest/lib/libtrexio.so  \\\n\t\t\t-DTREXIO_INCLUDE_DIR=/software/libraries/trexio/latest/include/\n\t\t```\n\t- To disable vectorization of the code:\n\t\t```\n\t\tcmake -H. -Bbuild -DCMAKE_Fortran_COMPILER=mpiifort -DVECTORIZED=no\n\t\t```\n\n\t- To run the code, you need to submit a job to the queue system:\n\t\t```bash\n\t\tsbatch job.cmd\n\t\t```\n\t\twhere `job.cmd` is a SLURM script for `genoa` partition that looks like this:\n\n\t\t```bash\n\t\t#!/bin/bash\n\t\t#SBATCH -t 2-0\n\t\t#SBATCH -p ccp22\n\t\t#SBATCH -N 2 --exclusive --ntasks-per-node 32\n\t\t#SBATCH -J champ\n\t\t#SBATCH --output=o%j\n\t\t#SBATCH --ntasks-per-core=1\n\t\t#SBATCH --error=e%j\n\n \t\tmodule load compiler-rt/latest\n \t\tmodule load debugger/latest\n \t\tmodule load compiler/latest\n \t\tmodule load icc/latest\n \t\tmodule load mpi/latest\n \t\tmodule load hdf5/latest\n \t\tmodule load tbb/latest\n \t\tmodule load dpl/latest\n \t\tmodule load dev-utilities/latest\n \t\tmodule load mkl/latest\n \t\tmodule load trexio/latest\n\n\t \tcd $PWD\n\t\tmpirun -np 64 champ/bin/vmc.mov1 -i input.inp -o output.out -e error\n\t\t```\n\n \t- To build with gfortran:\n\n\t\tSetup the build:\n\t\t```\n\t\tcmake -H. -Bbuild -DCMAKE_Fortran_COMPILER=/usr/bin/mpif90\n\t\t```\n\t\twhich will use LAPACK & BLAS from the Ubuntu repository. (Cmake should find them already if none of the Intel MKL variables are set.) Combining gfortran with the Intel MKL is possible but requires special care to work with the compiler flag `-mcmodel=large`.\n\t- To run the code:\n\t\t```\n\t\tmpirun -s all -np \"n process\" -machinefile \"machinefile\"\n\t\t```\n* **Ubuntu desktop**:\n\t- Ubuntu 20:\n\t\tInstall the required packages:\n\t\t```\n\t\tsudo apt install gfortran openmpi-bin libopenmpi-dev gawk libblacs-mpi-dev liblapack-dev\n\t\t```\n\t\tSet-up the build:\n\t\t```\n\t\tcmake -H. -Bbuild -DCMAKE_Fortran_COMPILER=mpifort\n\t\t```\n\t\tBuild:\n\t\t```\n\t\tcmake --build build -- -j2\n\t\t```\n\t\tTo run in parallel:\n\t\t```\n\t\tmpirun --stdin all -n 2 path_to_CHAMP/bin/vmc.mov1 -i vmc.inp -o vmc.out -e error\n\t\t```\n\t- Ubuntu 18:\n\tInstall the dependencies using conda instead of apt\n\t- WSL:\n\tThe code also compiles on WSL.\n------------------------------------------------------------------------\n"
      },
      "source": "https://raw.githubusercontent.com/filippi-claudia/champ/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "User's manual and documentation",
        "type": "Text_excerpt",
        "value": "The user's manual and documentation is hosted at [https://trex-coe.github.io/champ-user-manual/](https://trex-coe.github.io/champ-user-manual)\n\n"
      },
      "source": "https://raw.githubusercontent.com/filippi-claudia/champ/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Preparing the input files",
        "type": "Text_excerpt",
        "value": "CHAMP needs the following input files to describe a system\n1. Geometry\n1. ECP / Pseudopotentials\n1. Basis Set (Radial Grid files)\n1. Basis pointers\n1. MO coefficients\n1. Determinants and/or CSF files\n1. Molecular orbital symmetries (Optional)\n1. Molecular orbital eigenvalues (Optional)\n1. Jastrow parameters file\n1. Jastrow derivative parameters file (Optional)\n\n\nCHAMP input file itself has a modular structure. For example,\n\n```\n1. general\n2. electrons\n3. blocking_vmc\n4. blocking_dmc\n5. optwf\n6. ...\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/filippi-claudia/champ/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Option 1 (Using trexio file)",
        "parent_header": [
          "Preparing the input files"
        ],
        "type": "Text_excerpt",
        "value": "We can use trexio file (in hdf5 or text backend format) to specify all the inputs (except Jastrow and Jastrow derivatives)\n\nA sample input file would look like:\n\n```perl\n%module general\n    title           'VMC Calculation for a molecule'\n    pool            './pool/'\n    mode            'vmc_one_mpi'\n    ipr \t    -1\n%endmodule\n\nload trexio          molecule.hdf5\nload determinants    determinants.det\nload jastrow         jastrow.jas\n\n%module electrons\n    nup           20\n    nelec         40\n%endmodule\n\n\n%module blocking_vmc\n    vmc_nstep     20\n    vmc_nblk      100000\n    vmc_nblkeq    1\n    vmc_nconf_new 0\n%endmodule\n```\n"
      },
      "source": "https://raw.githubusercontent.com/filippi-claudia/champ/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Obtaining a trexio file from GAMESS-US output",
        "parent_header": [
          "Preparing the input files",
          "Option 1 (Using trexio file)"
        ],
        "type": "Text_excerpt",
        "value": "Make sure that the recent version of `trexio_tools` has been installed.\n```bash\npip install trexio_tools\n```\n\nThis will provide `trexio` executable in the path. Use the following command to generate a trexio file.\n\n```bash\ntrexio convert-from --type gamess --input gamess_output.out --motype \"RHF\" victor.hdf5 --back_end=HDF5\n```\nAllowed values of MOtype are `'RHF', 'ROHF', 'MCSCF', 'NATURAL', 'GUGA' ...`\n\n> **NOTE** : Use `trexio --help` for a verbose list of options.\n"
      },
      "source": "https://raw.githubusercontent.com/filippi-claudia/champ/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Option 2 (Specification using individual text files)",
        "parent_header": [
          "Preparing the input files"
        ],
        "type": "Text_excerpt",
        "value": "The trexio file can be converted into several text files to be used with CHAMP. The Python converter is provided in the CHAMP's repository in the `champ/tools/trex_tools` folder.\n\nA sample script is given below:\n\n```python\npython3 /home/user/champ/tools/trex_tools/trex2champ.py \\\n\t--trex \t\"COH2_GS.trexio\" \\\n\t--backend\t\"HDF5\" \\\n\t--basis_prefix  \"BFD-aug-cc-pVDZ\" \\\n\t--lcao \\\n\t--ecp \\\n\t--sym \\\n\t--geom \\\n\t--basis \\\n\t--det\n```\n\n\n> **NOTE** : Use `python3 trex2champ.py --help` for a verbose list of options.\n"
      },
      "source": "https://raw.githubusercontent.com/filippi-claudia/champ/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Molecular coordinates",
        "parent_header": [
          "Preparing the input files"
        ],
        "type": "Text_excerpt",
        "value": "Molecular coordinates can be provided directly in the vmc or dmc input files using the `%block` structure of the parser.\n\nThe following are the valid examples\n\n1. ### Geometry in the (XYZ in Bohr units) format with automatic Zvalence\n```perl\n%block molecule\n10\n# molecular complex (Symbol, X,Y,Z in Bohr)\n  Si  -0.59659972  0.06162019  0.21100680\n  S   -2.60025162 -2.54807062 -2.52884266\n  S    2.14594449  2.17606672 -2.44253887\n  S    1.75703132 -2.78062975  2.53564756\n  S   -1.40663455  3.06742023  3.14712509\n  H   -3.50597461  0.49044059  0.39864337\n  H    0.96753971  3.57914102  3.86259992\n  H   -0.57825615 -3.70197321 -3.52433897\n  H    0.37416575  3.66039924 -3.47898554\n  H   -0.21164931 -3.70953211  3.82669513\n%endblock\n```\n\n2. ### Geometry in the (XYZ in Bohr units) format with explicit Zvalence. This also allows different labels for the same element.\n```perl\n%block molecule\n10\n# molecular complex (Symbol, X,Y,Z in Bohr, Zvalence)\n  Si   -0.59659972  0.06162019  0.21100680    4.0\n  S    -2.60025162 -2.54807062 -2.52884266    6.0\n  S     2.14594449  2.17606672 -2.44253887    6.0\n  S     1.75703132 -2.78062975  2.53564756    6.0\n  S    -1.40663455  3.06742023  3.14712509    6.0\n  H1   -3.50597461  0.49044059  0.39864337    1.0\n  H2    0.96753971  3.57914102  3.86259992    1.0\n  H2   -0.57825615 -3.70197321 -3.52433897    1.0\n  H2    0.37416575  3.66039924 -3.47898554    1.0\n  H2   -0.21164931 -3.70953211  3.82669513    1.0\n%endblock\n```\n\n3. ### Geometry in the (XYZ in Bohr units) format to be read from a separate .xyz file.\n\n` %block molecule < molecule.xyz `\n\n4. ### Geometry in the (XYZ in Bohr units) format to be read from a separate .xyz file.\n\n` load molecule  molecule.xyz `\n\n\n## ECP / Pseudopotential files\n\nECP or pseudopotential files have a fixed format. Most of the BFD ECP files can be found in the `champ/pool/BFD/ECP_champ` folder. The files generated from the trexio file can also be used (except if it is coming from GAMESS. In this case, GAMESS truncates the digits of ECP information in its output, so the trexio file will not have all the digits stored.)\n\nFile format: BFD ECP for Silicon\n\n`BFD.gauss_ecp.dat.Si`\n\n```perl\nBFD Si pseudo\n3\n3\n4.00000000 1 1.80721061\n7.22884246 3 9.99633089\n-13.06725590 2 2.50043232\n1\n21.20531613 2 2.26686403\n1\n15.43693603 2 2.11659661\n```\nThese files are generally kept in the `pool` directory of the calculation folder. You just need to specify the name `BFD` in the general module of the CHAMP input file under the keyword `pseudopot`. There should be a file for each type of an atom.\n\n```python\n%module general\n    title           'VMC Calculation for a molecule'\n    pool            './pool/'\n    mode            'vmc_one_mpi'\n    pseudopot       BFD\n    basis           ccpVTZ\n    ipr             -1\n%endmodule\n```\n\n## Basis set (Basis on the radial grid) files\n\nBasis files have a fixed format. The files generated from the trex2champ converter can also be used as they are.\nThese files are generally kept in the `pool` directory of the calculation folder. You just need to specify the name of the basis file (say, `ccpVTZ`) in the general module of the CHAMP input file under the keyword `basis`. This will read the file `ccpVTZ.basis.Si` for the element `Si`.\n\nThe top few lines of `BFD-T.basis.C` look like\n\n```python\n9 3 2000 1.003000 20.000000 0\n 0.000000000000e+00  5.469976184517e-01  2.376319920758e+00  5.557936498748e-01  3.412818210005e+00  2.206803021951e-01  8.610719484857e-01  3.738901952004e-01  3.289926074834e+00  1.106692909826e+00\n 1.508957441883e-04  5.469976454488e-01  2.376319870895e+00  5.557936481942e-01  3.412817957941e+00  2.206803015581e-01  8.610719410992e-01  3.738901923954e-01  3.289925989316e+00  1.106692890335e+00\n ...\n ```\nThis means there are 9 radial shells in the basis set of carbon put on a radial grid of 2000 points (up to 20 bohr).\n\n\n## Basis pointers (formerly bfinfo) files\n\nThe new format of the basis pointers file is given below. This file should be kept in the `pool` directory.\nThis file is generated automatically by the `trex2champ.py` converter.\n\n```python\n# Format of the new basis information file champ_v3\n# num_ao_per_center, n(s), n(p), n(d), n(f), n(g)\n# Index of Slm (Range 1 to 35)\n# Index of the column from numerical basis file\nqmc_bf_info 1\n54 4 4 3 2 0\n1 1 1 1 2 3 4 2 3 4 2 3 4 2 3 4 5 6 7 8 9 10 5 6 7 8 9 10 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 11 12 13 14 15 16 17 18 19 20\n1 2 3 4 5 5 5 6 6 6 7 7 7 8 8 8 9 9 9 9 9 9 10 10 10 10 10 10 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 13 13 13\n35 4 3 2 1 0\n1 1 1 1 2 3 4 2 3 4 2 3 4 5 6 7 8 9 10 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\n1 2 3 4 5 5 5 6 6 6 7 7 7 8 8 8 8 8 8 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10\nend\n```\n\nEach unique type of atom will have a pair of lines in the basis pointers file.\n\nThe first line after the comments `qmc_bf_info 1` is a specification line to make sure that we are reading the basis function information file.\n\nThe second line is for the first unique atom in the system. It contains the number of atomic orbitals for that atom, the number of s-type functions, the number of p-type functions, the number of d-type functions, the number of f-type functions, and the number of g-type functions.\n`num_ao_per_center, n(s), n(p), n(d), n(f), n(g)`\n\nThe third line gives the index of Slm (or real Ylm). The numbers depend on how many radial shells are there in the basis set.\n\nThe fourth line tells which column of the radial grid file to be read for the construction of MO from the AOs.\n\n\n## Molecular Orbitals file\n\nThis file contains the molecular orbital coefficients. These are arranged as [num_ao, num_mo] array. This file is obtained automatically from the `trex2champ.py` converter. Please note that the AOs in this file follow the trexio convention of AO ordering.\n\nFor example,\nFour p-type shells of AOs will be arranged alphabetically as\n\n`X Y Z   X Y Z   X Y Z   X Y Z`\n\nTwo d-type shells of AOs will be arranged alphabetically as\n\n`XX XY XZ YY YZ ZZ   XX XY XZ YY YZ ZZ`\n\nand so on.\n\nThe `.lcao` or `.orb` file has the following format.\n\n```python\nlcao  226 200  1\n...\n...\n\nend\n```\n\nThe number 226 will be the number of AOs, 200 will be the number of orbitals, and 1 will be the number of types of orbitals.\n\n## Determinants and/or CSF file\nThe determinant file is automatically obtained from the `trex2champ.py` converter. Note that the `trex2champ.py` can also provide CSF and CSF map information if the corresponding GAMESS output file is provided with `--gamess` option.\n\nThe below is a typical file.\n\n```python\n# Determinants, CSF, and CSF mapping from the GAMESS output / TREXIO file.\n# Converted from the trexio file using trex2champ converter https://github.com/TREX-CoE/trexio_tools\ndeterminants 36 1\n-0.92276500 0.08745570 0.08745570 -0.03455773 -0.03455773 0.15892000 -0.00958342 -0.00958342 0.03141700 0.06827967 0.06827967 -0.02315988 -0.02315988 0.01639443 -0.00751472 0.00887972 0.00887972 -0.00751472 0.01639443 0.14336029 0.14336029 -0.06358518 -0.06358518 -0.00177625 -0.00177625 -0.01588657 -0.01588657 0.16425900 0.02504927 0.02504927 0.11380000 0.00560594 0.00560594 0.01069429 0.01069429 -0.04482000\n   1    2    3    4    5    6    7    8    9   10   11      1    2    3    4    5    6    7    8    9   10   11\n   1    2    3    4    5    6    7    8    9   10   11      1    2    3    4    5    6    7    8    9   10   13\n   1    2    3    4    5    6    7    8    9   10   13      1    2    3    4    5    6    7    8    9   10   11\n   1    2    3    4    5    6    7    8    9   10   11      1    2    3    4    5    6    7    8    9   11   13\n   1    2    3    4    5    6    7    8    9   11   13      1    2    3    4    5    6    7    8    9   10   11\n   1    2    3    4    5    6    7    8    9   10   13      1    2    3    4    5    6    7    8    9   10   13\n   1    2    3    4    5    6    7    8    9   10   13      1    2    3    4    5    6    7    8    9   11   13\n   1    2    3    4    5    6    7    8    9   11   13      1    2    3    4    5    6    7    8    9   10   13\n   1    2    3    4    5    6    7    8    9   11   13      1    2    3    4    5    6    7    8    9   11   13\n   1    2    3    4    5    6    7    8    9   10   11      1    2    3    4    5    6    7    8    9   10   12\n   1    2    3    4    5    6    7    8    9   10   12      1    2    3    4    5    6    7    8    9   10   11\n   1    2    3    4    5    6    7    8    9   10   11      1    2    3    4    5    6    7    8    9   11   12\n   1    2    3    4    5    6    7    8    9   11   12      1    2    3    4    5    6    7    8    9   10   11\n   1    2    3    4    5    6    7    8    9   10   11      1    2    3    4    5    6    7    8    9   12   13\n   1    2    3    4    5    6    7    8    9   10   13      1    2    3    4    5    6    7    8    9   11   12\n   1    2    3    4    5    6    7    8    9   10   12      1    2    3    4    5    6    7    8    9   11   13\n   1    2    3    4    5    6    7    8    9   11   13      1    2    3    4    5    6    7    8    9   10   12\n   1    2    3    4    5    6    7    8    9   11   12      1    2    3    4    5    6    7    8    9   10   13\n   1    2    3    4    5    6    7    8    9   12   13      1    2    3    4    5    6    7    8    9   10   11\n   1    2    3    4    5    6    7    8    9   10   13      1    2    3    4    5    6    7    8    9   10   12\n   1    2    3    4    5    6    7    8    9   10   12      1    2    3    4    5    6    7    8    9   10   13\n   1    2    3    4    5    6    7    8    9   11   13      1    2    3    4    5    6    7    8    9   11   12\n   1    2    3    4    5    6    7    8    9   11   12      1    2    3    4    5    6    7    8    9   11   13\n   1    2    3    4    5    6    7    8    9   10   13      1    2    3    4    5    6    7    8    9   12   13\n   1    2    3    4    5    6    7    8    9   12   13      1    2    3    4    5    6    7    8    9   10   13\n   1    2    3    4    5    6    7    8    9   11   13      1    2    3    4    5    6    7    8    9   12   13\n   1    2    3    4    5    6    7    8    9   12   13      1    2    3    4    5    6    7    8    9   11   13\n   1    2    3    4    5    6    7    8    9   10   12      1    2    3    4    5    6    7    8    9   10   12\n   1    2    3    4    5    6    7    8    9   10   12      1    2    3    4    5    6    7    8    9   11   12\n   1    2    3    4    5    6    7    8    9   11   12      1    2    3    4    5    6    7    8    9   10   12\n   1    2    3    4    5    6    7    8    9   11   12      1    2    3    4    5    6    7    8    9   11   12\n   1    2    3    4    5    6    7    8    9   10   12      1    2    3    4    5    6    7    8    9   12   13\n   1    2    3    4    5    6    7    8    9   12   13      1    2    3    4    5    6    7    8    9   10   12\n   1    2    3    4    5    6    7    8    9   11   12      1    2    3    4    5    6    7    8    9   12   13\n   1    2    3    4    5    6    7    8    9   12   13      1    2    3    4    5    6    7    8    9   11   12\n   1    2    3    4    5    6    7    8    9   12   13      1    2    3    4    5    6    7    8    9   12   13\nend\ncsf 20 2\n0.92276500 -0.12368100 0.04887200 -0.15892000 0.01355300 -0.03141700 -0.09656200 0.03275300 0.02839600 -0.20274200 -0.00136500 0.08992300 -0.00251200 -0.02246700 -0.16425900 -0.03542500 -0.11380000 0.00792800 0.01512400 0.04482000\n0.13390600 -0.08999000 -0.04327600 0.07929200 0.06217900 -0.00658100 0.96025800 -0.00444100 0.01898800 0.15434900 -0.04594200 -0.01868700 0.00187600 0.04520300 -0.06578900 -0.04536600 0.04834200 -0.00269300 -0.04316900 -0.02239200\nend\ncsfmap\n20 36 40\n1\n  1  -1.000000\n2\n  2  -0.707107\n  3  -0.707107\n2\n  4  -0.707107\n  5  -0.707107\n1\n  6  -1.000000\n2\n  7  -0.707107\n  8  -0.707107\n1\n  9  -1.000000\n2\n  10  -0.707107\n  11  -0.707107\n2\n  12  -0.707107\n  13  -0.707107\n6\n  14  0.577350\n  15  -0.288675\n  16  0.288675\n  17  0.288675\n  18  -0.288675\n  19  0.577350\n2\n  20  -0.707107\n  21  -0.707107\n4\n  15  -0.500000\n  16  -0.500000\n  17  -0.500000\n  18  -0.500000\n2\n  22  -0.707107\n  23  -0.707107\n2\n  24  0.707107\n  25  0.707107\n2\n  26  0.707107\n  27  0.707107\n1\n  28  -1.000000\n2\n  29  -0.707107\n  30  -0.707107\n1\n  31  -1.000000\n2\n  32  0.707107\n  33  0.707107\n2\n  34  0.707107\n  35  0.707107\n1\n  36  -1.000000\nend\n```\n\n## Molecular orbital symmetries file [Optional; useful when doing orbital optimization]\nThis file is also generated using the `trex2champ.py` converter if the parent .hdf5 file contains the orbital symmetries.\n\nA typical file looks like this:\n\n```python\nsym_labels 4 226\n 1 AG 2 AU 3 BG 4 BU\n1 4 4 1 1 4 1 4 1 2 3 2 3 4 1 4 1 4 4 1 1 4 4 1 4 1 3 1 4 1 2 4 1 2 4 1 3 2 4 3 2 1 4 4 3 1 1 4 4 4 2 1 3 1 4 1 1 4 1 4 3 1 4 2 2 3 1 4 1 4 1 1 4 2 3 4 1 4 2 1 3 1 4 1 4 2 4 4 1 3 4 1 3 4 2 1 2 3 4 1 2 4 1 3 4 2 3 1 1 4 4 1 2 1 3 1 4 1 4 2 3 4 1 4 2 1 4 3 1 4 2 3 2 3 4 1 2 3 1 2 4 2 3 4 1 4 3 2 1 1 3 4 4 1 4 1 2 4 1 3 1 2 4 4 4 3 1 1 3 1 1 2 2 4 4 2 1 4 3 1 1 4 3 4 2 1 1 2 4 3 4 3 2 1 3 4 1 3 1 4 4 2 1 4 1 4 1 1 4 4 4 1 1 1 4 1 4 4 1 4 1 4 1 4 1 4\nend\n```\n\nThe numbers in front of irreducible representations are used as correspondence to identify the symmetry type of each orbital. Here in this case there are 226 molecular orbitals with 4 irreps.\n\n## Molecular orbital eigenvalues file [Optional]\nThis file is also generated using the `trex2champ.py` converter if the parent .hdf5 file contains the orbital eigenvalues.\n\nA typical file looks like this:\n\n```python\n# File created using the trex2champ converter https://github.com/TREX-CoE/trexio_tools\n# Eigenvalues correspond to the RHF orbitals\neigenvalues 64\n-1.3659 -0.7150 -0.5814 -0.5081 0.1201 0.1798 0.4846 0.5148 0.5767 0.6085 0.7153 0.7820 0.8691 0.8699 0.9642 1.2029 1.4091 1.4388 1.6082 1.6342 2.0787 2.1179 2.1776 2.2739 2.4123 2.5591 2.8217 3.3480 3.3840 3.4544 3.4607 3.6199 3.6237 3.9628 3.9661 4.0439 4.0481 4.2212 4.3500 4.4225 4.4577 4.5747 4.7271 4.8382 5.0086 5.5800 5.8020 6.0317 6.3754 6.5827 6.6970 6.7474 6.9245 7.0790 7.1820 7.2121 7.3257 7.3865 7.8607 8.4146 8.4733 9.0201 16.4980 27.1462\nend\n\n```\n\nThe first line contains the keyword `eigenvalues` followed by the number of orbitals. The following line contains\n eigenvalues as they appear in GAMESS or similar output. The file ends with the keyword `end`.\n\n## Jastrow parameters file\nThe Jastrow parameters can be provided using this file. It has the following format [Example: water].\n\n```python\njastrow_parameter   1\n  5  5  0           norda,nordb,nordc\n   0.60000000         scalek\n   0.00000000   0.00000000  -0.41907755  -0.22916790  -0.04194614   0.08371252 (a(iparmj),iparmj=1,nparma)\n   0.00000000   0.00000000  -0.09956809  -0.00598089   0.00503028   0.00600649 (a(iparmj),iparmj=1,nparma)\n   0.50000000   0.36987319   0.06971895   0.00745636  -0.00306208  -0.00246314 (b(iparmj),iparmj=1,nparmb)\n (c(iparmj),iparmj=1,nparmc)\n (c(iparmj),iparmj=1,nparmc)\nend\n```\n\nThe set `a` should appear for each unique atom type (in the same order as in the .xyz file).\n\nThe set `b` should appear once.\n\nThree-body Jastrow terms `c` should appear for each unique atom type (in the same order as in the .xyz file)\n\n\n## Jastrow derivatives file\nThe Jastrow derivative parameters can be provided using this file. It has the following format [Example: water].\n\n```python\njasderiv\n4 4 5 15 15 0 0 nparma,nparmb,nparmc,nparmf\n  3 4 5 6 (iwjasa(iparm),iparm=1,nparma)\n  3 4 5 6 (iwjasa(iparm),iparm=1,nparma)\n2 3 4 5 6 (iwjasb(iparm),iparm=1,nparmb)\n3 5 7 8 9         11 13 14 15 16     17 18 20 21 23 (c(iparmj),iparmj=1,nparmc)\n3 5 7 8 9         11 13 14 15 16     17 18 20 21 23 (c(iparmj),iparmj=1,nparmc)\nend\n```\n"
      },
      "source": "https://raw.githubusercontent.com/filippi-claudia/champ/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Geometry in the (XYZ in Bohr units) format with automatic Zvalence",
        "parent_header": [
          "Preparing the input files",
          "Molecular coordinates"
        ],
        "type": "Text_excerpt",
        "value": "![Logo](https://github.com/filippi-claudia/champ/blob/main//docs/logo_small.jpg?raw=true)\n\n[![CHAMP release build with Intel](https://github.com/filippi-claudia/champ/actions/workflows/build_champ_intel.yml/badge.svg)](https://github.com/filippi-claudia/champ/actions/workflows/build_champ_intel.yml) [![CHAMP debug build with Intel and GNU](https://github.com/filippi-claudia/champ/actions/workflows/debug_champ_intel_and_gnu.yml/badge.svg)](https://github.com/filippi-claudia/champ/actions/workflows/debug_champ_intel_and_gnu.yml) [![CHAMP with QMCkl and TREXIO build with Intel](https://github.com/filippi-claudia/champ/actions/workflows/build_champ_trexio_qmckl.yml/badge.svg)](https://github.com/filippi-claudia/champ/actions/workflows/build_champ_trexio_qmckl.yml) [![Build Docker Image](https://github.com/filippi-claudia/champ/actions/workflows/docker-image.yml/badge.svg)](https://github.com/filippi-claudia/champ/actions/workflows/docker-image.yml) [![Publish Docker image](https://github.com/filippi-claudia/champ/actions/workflows/docker-publish.yml/badge.svg?branch=main)](https://github.com/filippi-claudia/champ/actions/workflows/docker-publish.yml) [![TREXIO python interface](https://github.com/filippi-claudia/champ/actions/workflows/test_python.yml/badge.svg)](https://github.com/filippi-claudia/champ/actions/workflows/test_python.yml)\n\n\n![Github Issues](https://img.shields.io/github/issues/filippi-claudia/champ) ![Github Pull Requests](https://img.shields.io/github/issues-pr/filippi-claudia/champ) ![Github Last Commit](https://img.shields.io/github/last-commit/filippi-claudia/champ) [![Commit Activity](https://img.shields.io/github/commit-activity/w/filippi-claudia/champ)](https://img.shields.io/github/commit-activity/t/filippi-claudia/champ\n)\n\n![Last release tag](https://img.shields.io/github/v/tag/filippi-claudia/champ) ![Github forks](https://img.shields.io/github/forks/filippi-claudia/champ) ![Github stars](https://img.shields.io/github/stars/filippi-claudia/champ) ![Repo Size](https://img.shields.io/github/repo-size/filippi-claudia/champ) ![Code Size](https://img.shields.io/github/languages/code-size/filippi-claudia/champ)\n\n![Github license](https://img.shields.io/github/license/filippi-claudia/champ)\n\n\n\n\nThe Cornell-Holland Ab-initio Materials Package (CHAMP) is a quantum Monte Carlo suite of programs for electronic structure calculations of atomic and molecular systems. The code is a sister code of the homonymous program originally developed by Cyrus Umrigar and Claudia Filippi of which it retains the accelerated Metropolis method and the efficient diffusion Monte Carlo algorithms.\n\nThe European branch of the code is currently developed by Claudia Filippi and Saverio Moroni,\nwith significant contributions by Ravindra Shinde, Nicolas Renaud, Victor Azizi, Edgar Landinez, and Stuart Shepard.\n\n\n\n\n\n\nCHAMP has three basic capabilities:\n\n* Metropolis or variational Monte Carlo (VMC)\n* Diffusion Monte Carlo (DMC)\n* Optimization of many-body wave functions by energy minimization (VMC) for ground and excited states\n\nNoteworthy features of CHAMP are:\n\n* Efficient wave function optimization also in a state-average and a state-specific fashion for multiple states of the same symmetry (VMC)\n* Efficient computation of analytical interatomic forces (VMC)\n* Compact formulation for a fast evaluation of multi-determinant expansions and their derivatives (VMC and DMC)\n* Multiscale VMC and DMC calculations in classical point charges (MM), polarizable continuum model (PCM), and polarizable force fields (MMpol)\n\n**Note**\n\nThe code is available for free under the GPL-3.0 license. Developers and contributors are welcome to use and contribute back to the code. If you have used the code for your publications, please cite this source.\n\n**Usual disclaimer**\n\nThe authors make no claims about the correctness of the program suite and people who use it do so at their own risk.\n\n------------------------------------------------------------------------\n\nCHAMP utilizes various other program packages:\n\n1. [Parser](https://github.com/neelravi/mpi-libfdf-parser):\n   An easy-to-use and easy-to-extend keyword-value pair-based input file parser written in Fortran 2008.  This parser uses a heavily modified libFDF library and is written by [Ravindra Shinde](https://github.com/neelravi). It can parse keyword-value pairs, blocks of data, and general variables with different physical units in an order-independent manner. Our implementation can handle multiple data types and file formats. The parser is kept as a library in the code, however, it can be easily adapted by any other Fortran-based code.\n\n2. [TREXIO](https://github.com/TREX-CoE/trexio):\n   TREXIO is an open-source file format and library developed for the storage and manipulation of data produced by quantum chemistry calculations. CHAMP can read the starting wavefunction from a trexio file. The library has interfaces to a lot of quantum chemical programs.\n   CHAMP can directly read the contents of this file with a single load statement in the input file. This library is currently optional.\n\n  <p align=\"center\">\n    <img src=\"docs/trexio.png\" alt=\"trexio interface\" width=\"150\"/>\n  </p>\n\n\n3. [TREXIO Tools](https://github.com/TREX-CoE/trexio_tools):\n   We provide a Python package inside the CHAMP's tool directory to extract all the necessary information from a TREXIO file in the hdf5 file format to a human-readable text format. This allows one to bypass the TREXIO library within CHAMP and input the necessary data via the Parser (see Option 2 in Section \"Preparing the Input File\" below).\n\n4. [QMCKL](https://github.com/TREX-CoE/qmckl):\n  This library provides a high-performance implementation of the main kernels of Quantum Monte Carlo methods. This library is currently optional.\n\n------------------------------------------------------------------------\n### CHAMP in a container\n\nCHAMP is available as a container image from Dockerhub. Here are the instructions to obtain the images:\n\n1. CHAMP built with Intel oneAPI compilers:\n\t- `docker pull neelravi/champ:latest`\n \t- `docker pull neelravi/champ:intel`\n  \t- `docker pull neelravi/champ:intel-trexio`\n2. CHAMP built with GNU compilers\n   \t- `docker pull neelravi/champ:2.3.0`\n   \t- `docker pull neelravi/champ:gnu`\n   \t- `docker pull neelravi/champ:gnu-trexio`\n------------------------------------------------------------------------\n\n### Compiling CHAMP for the source\n#### Requirements\n1. cmake >= 3.17\n2. gfortran/gcc >= 9.3.0 or Intel Fortran 2020 onwards\n3. BLAS/LAPACK or Intel MKL\n4. openMPI >= 3.0 or Intel MPI\n5. [Optional] TREXIO library >= 2.4.0\n6. [Optional] QMCkl library >= 1.0.0\n7. [Optional] doxygen (for documentation)\n\n\n### Installation Using CMake\nTo install **Champ** using [cmake](https://cmake.org/) you need to run the following commands:\n```\ncmake -H. -Bbuild\ncmake --build build -- -j4\n```\nThe first command is only required to set up the build directory and needs to be\nexecuted only once. Compared to the previous Makefiles the dependencies for the\ninclude files (e.g include/vmc.h) are correctly setup and no `--clean-first` is\nrequired.\n\n#### CMAKE Options\n\nTo select a given compiler, you can type:\n```\ncmake -H. -Bbuild -D CMAKE_Fortran_COMPILER=mpif90\n```\nTo use LAPACK and BLAS installed locally, include the path to the libraries:\n```\ncmake -H. -Bbuild \\\n\t-DCMAKE_Fortran_COMPILER=mpif90 \\\n\t-DBLAS_blas_LIBRARY=/home/user/lib/BLAS/blas_LINUX.a \\\n\t-DLAPACK_lapack_LIBRARY=/home/user/lib/LAPACK/liblapack.a\n```\nTo enable/disable vectorization based on the architecture:\n```bash\ncmake -H. -Bbuild -DCMAKE_Fortran_COMPILER=mpif90 -DVECTORIZED=yes/no/auto\n```\n\nTo compile only e.g. VMC serial:\n```\ncmake --build build --target vmc.mov1\n```\nClean and build:\n```\ncmake --build build --clean-first\n```\n\n#### CMAKE Recipes\n\nHere are a couple of recipes for commonly used computing facilities, which can be easily adapted.\n* **Snellius** (snellius.surfa.nl):\n\t- To compile the code, first load the required modules:\n\t\t```bash\n\t\tmodule purge\n\t\tmodule load 2022\n\t\tmodule load intel/2022a\n\t\tmodule load HDF5/1.12.2-iimpi-2022a\n\t\t```\n\t\tthen set-up the build:\n\t\t```bash\n\t\tcmake -H. -Bbuild -DCMAKE_Fortran_COMPILER=mpiifort\n\t\t```\n\t\tOptionally, you may link the trexio library using the following command:\n\t\t```bash\n\t\tcmake -S. -Bbuild  \\\n  \t\t\t-DCMAKE_Fortran_COMPILER=mpiifort  \\\n  \t\t\t-DENABLE_TREXIO=ON  \\\n  \t\t\t-DTREXIO_LIBRARY=$HOME/lib/libtrexio.so  \\\n  \t\t\t-DTREXIO_INCLUDE_DIR=$HOME/include/\n\t\t```\n\t\tand finally build:\n\t\t```bash\n\t\tcmake --build build -j8 --clean-first\n\t\t```\n\t- To run the code, you need to submit a job to the queue system:\n\t\t```bash\n\t\tsbatch job.cmd\n\t\t```\n\t\twhere `job.cmd` is a SLURM script for `genoa` partition that looks like this:\n\n\t\t```bash\n\t\t#!/bin/bash\n        #SBATCH -t 0-12:00:00            # time in (day-hours:min:sec)\n        #SBATCH -N 1                     # number of nodes (change this number to use more nodes)\n        #SBATCH --ntasks-per-node 192    # tasks per node (Use 192 for genoa and 128 for rome partition)\n        #SBATCH -J vmc                   # name of the job\n        #SBATCH -o vmc.%j.out            # std output file name for slurm\n        #SBATCH -e vmc.%j.err            # std error file name for slurm\n        #SBATCH --exclusive              # specific requirements about node\n        #SBATCH --partition genoa        # partition (queue)\n        #\n        module purge\n        module load 2022\n        module load intel/2022a\n        module load HDF5/1.12.2-iimpi-2022a\n        #\n        export I_MPI_PMI_LIBRARY=/usr/lib64/libpmi2.so\n        cd $PWD\n\t\tsrun champ/bin/vmc.mov1 -i input.inp -o output.out -e error\n\t\t```\n* **CCPhead**:\n\t- To build with mpiifort, load the required modules of the Intel Compiler and MPI:\n\n\t\t```bash\n \t\tmodule load cmake/latest\n \t\tmodule load compiler-rt/latest\n \t\tmodule load debugger/latest\n \t\tmodule load compiler/latest\n \t\tmodule load icc/latest\n \t\tmodule load mpi/latest\n \t\tmodule load hdf5/latest\n \t\tmodule load tbb/latest\n \t\tmodule load dpl/latest\n \t\tmodule load dev-utilities/latest\n \t\tmodule load mkl/latest\n \t\tmodule load trexio/latest\n \t\t```\n\t\tSetup the build:\n\t\t```\n\t\tcmake -H. -Bbuild -DCMAKE_Fortran_COMPILER=mpiifort\n\t\t```\n\t- To enable TREXIO library:\n\t\t```\n\t\tcmake -H. -Bbuild  \\\n  \t\t\t-DCMAKE_Fortran_COMPILER=mpiifort -DENABLE_TREXIO=ON  \\\n  \t\t\t-DTREXIO_LIBRARY=/software/libraries/trexio/latest/lib/libtrexio.so  \\\n\t\t\t-DTREXIO_INCLUDE_DIR=/software/libraries/trexio/latest/include/\n\t\t```\n\t- To disable vectorization of the code:\n\t\t```\n\t\tcmake -H. -Bbuild -DCMAKE_Fortran_COMPILER=mpiifort -DVECTORIZED=no\n\t\t```\n\n\t- To run the code, you need to submit a job to the queue system:\n\t\t```bash\n\t\tsbatch job.cmd\n\t\t```\n\t\twhere `job.cmd` is a SLURM script for `genoa` partition that looks like this:\n\n\t\t```bash\n\t\t#!/bin/bash\n\t\t#SBATCH -t 2-0\n\t\t#SBATCH -p ccp22\n\t\t#SBATCH -N 2 --exclusive --ntasks-per-node 32\n\t\t#SBATCH -J champ\n\t\t#SBATCH --output=o%j\n\t\t#SBATCH --ntasks-per-core=1\n\t\t#SBATCH --error=e%j\n\n \t\tmodule load compiler-rt/latest\n \t\tmodule load debugger/latest\n \t\tmodule load compiler/latest\n \t\tmodule load icc/latest\n \t\tmodule load mpi/latest\n \t\tmodule load hdf5/latest\n \t\tmodule load tbb/latest\n \t\tmodule load dpl/latest\n \t\tmodule load dev-utilities/latest\n \t\tmodule load mkl/latest\n \t\tmodule load trexio/latest\n\n\t \tcd $PWD\n\t\tmpirun -np 64 champ/bin/vmc.mov1 -i input.inp -o output.out -e error\n\t\t```\n\n \t- To build with gfortran:\n\n\t\tSetup the build:\n\t\t```\n\t\tcmake -H. -Bbuild -DCMAKE_Fortran_COMPILER=/usr/bin/mpif90\n\t\t```\n\t\twhich will use LAPACK & BLAS from the Ubuntu repository. (Cmake should find them already if none of the Intel MKL variables are set.) Combining gfortran with the Intel MKL is possible but requires special care to work with the compiler flag `-mcmodel=large`.\n\t- To run the code:\n\t\t```\n\t\tmpirun -s all -np \"n process\" -machinefile \"machinefile\"\n\t\t```\n* **Ubuntu desktop**:\n\t- Ubuntu 20:\n\t\tInstall the required packages:\n\t\t```\n\t\tsudo apt install gfortran openmpi-bin libopenmpi-dev gawk libblacs-mpi-dev liblapack-dev\n\t\t```\n\t\tSet-up the build:\n\t\t```\n\t\tcmake -H. -Bbuild -DCMAKE_Fortran_COMPILER=mpifort\n\t\t```\n\t\tBuild:\n\t\t```\n\t\tcmake --build build -- -j2\n\t\t```\n\t\tTo run in parallel:\n\t\t```\n\t\tmpirun --stdin all -n 2 path_to_CHAMP/bin/vmc.mov1 -i vmc.inp -o vmc.out -e error\n\t\t```\n\t- Ubuntu 18:\n\tInstall the dependencies using conda instead of apt\n\t- WSL:\n\tThe code also compiles on WSL.\n------------------------------------------------------------------------\n\n## User's manual and documentation\nThe user's manual and documentation is hosted at [https://trex-coe.github.io/champ-user-manual/](https://trex-coe.github.io/champ-user-manual)\n\n\n# Preparing the input files\n\nCHAMP needs the following input files to describe a system\n1. Geometry\n1. ECP / Pseudopotentials\n1. Basis Set (Radial Grid files)\n1. Basis pointers\n1. MO coefficients\n1. Determinants and/or CSF files\n1. Molecular orbital symmetries (Optional)\n1. Molecular orbital eigenvalues (Optional)\n1. Jastrow parameters file\n1. Jastrow derivative parameters file (Optional)\n\n\nCHAMP input file itself has a modular structure. For example,\n\n```\n1. general\n2. electrons\n3. blocking_vmc\n4. blocking_dmc\n5. optwf\n6. ...\n```\n\n\n## Option 1 (Using trexio file)\n\nWe can use trexio file (in hdf5 or text backend format) to specify all the inputs (except Jastrow and Jastrow derivatives)\n\nA sample input file would look like:\n\n```perl\n%module general\n    title           'VMC Calculation for a molecule'\n    pool            './pool/'\n    mode            'vmc_one_mpi'\n    ipr \t    -1\n%endmodule\n\nload trexio          molecule.hdf5\nload determinants    determinants.det\nload jastrow         jastrow.jas\n\n%module electrons\n    nup           20\n    nelec         40\n%endmodule\n\n\n%module blocking_vmc\n    vmc_nstep     20\n    vmc_nblk      100000\n    vmc_nblkeq    1\n    vmc_nconf_new 0\n%endmodule\n```\n\n### Obtaining a trexio file from GAMESS-US output\n\nMake sure that the recent version of `trexio_tools` has been installed.\n```bash\npip install trexio_tools\n```\n\nThis will provide `trexio` executable in the path. Use the following command to generate a trexio file.\n\n```bash\ntrexio convert-from --type gamess --input gamess_output.out --motype \"RHF\" victor.hdf5 --back_end=HDF5\n```\nAllowed values of MOtype are `'RHF', 'ROHF', 'MCSCF', 'NATURAL', 'GUGA' ...`\n\n> **NOTE** : Use `trexio --help` for a verbose list of options.\n\n## Option 2 (Specification using individual text files)\n\nThe trexio file can be converted into several text files to be used with CHAMP. The Python converter is provided in the CHAMP's repository in the `champ/tools/trex_tools` folder.\n\nA sample script is given below:\n\n```python\npython3 /home/user/champ/tools/trex_tools/trex2champ.py \\\n\t--trex \t\"COH2_GS.trexio\" \\\n\t--backend\t\"HDF5\" \\\n\t--basis_prefix  \"BFD-aug-cc-pVDZ\" \\\n\t--lcao \\\n\t--ecp \\\n\t--sym \\\n\t--geom \\\n\t--basis \\\n\t--det\n```\n\n\n> **NOTE** : Use `python3 trex2champ.py --help` for a verbose list of options.\n\n## Molecular coordinates\n\nMolecular coordinates can be provided directly in the vmc or dmc input files using the `%block` structure of the parser.\n\nThe following are the valid examples\n\n1. ### Geometry in the (XYZ in Bohr units) format with automatic Zvalence\n```perl\n%block molecule\n10\n# molecular complex (Symbol, X,Y,Z in Bohr)\n  Si  -0.59659972  0.06162019  0.21100680\n  S   -2.60025162 -2.54807062 -2.52884266\n  S    2.14594449  2.17606672 -2.44253887\n  S    1.75703132 -2.78062975  2.53564756\n  S   -1.40663455  3.06742023  3.14712509\n  H   -3.50597461  0.49044059  0.39864337\n  H    0.96753971  3.57914102  3.86259992\n  H   -0.57825615 -3.70197321 -3.52433897\n  H    0.37416575  3.66039924 -3.47898554\n  H   -0.21164931 -3.70953211  3.82669513\n%endblock\n```\n\n2. ### Geometry in the (XYZ in Bohr units) format with explicit Zvalence. This also allows different labels for the same element.\n```perl\n%block molecule\n10\n# molecular complex (Symbol, X,Y,Z in Bohr, Zvalence)\n  Si   -0.59659972  0.06162019  0.21100680    4.0\n  S    -2.60025162 -2.54807062 -2.52884266    6.0\n  S     2.14594449  2.17606672 -2.44253887    6.0\n  S     1.75703132 -2.78062975  2.53564756    6.0\n  S    -1.40663455  3.06742023  3.14712509    6.0\n  H1   -3.50597461  0.49044059  0.39864337    1.0\n  H2    0.96753971  3.57914102  3.86259992    1.0\n  H2   -0.57825615 -3.70197321 -3.52433897    1.0\n  H2    0.37416575  3.66039924 -3.47898554    1.0\n  H2   -0.21164931 -3.70953211  3.82669513    1.0\n%endblock\n```\n\n3. ### Geometry in the (XYZ in Bohr units) format to be read from a separate .xyz file.\n\n` %block molecule < molecule.xyz `\n\n4. ### Geometry in the (XYZ in Bohr units) format to be read from a separate .xyz file.\n\n` load molecule  molecule.xyz `\n\n\n## ECP / Pseudopotential files\n\nECP or pseudopotential files have a fixed format. Most of the BFD ECP files can be found in the `champ/pool/BFD/ECP_champ` folder. The files generated from the trexio file can also be used (except if it is coming from GAMESS. In this case, GAMESS truncates the digits of ECP information in its output, so the trexio file will not have all the digits stored.)\n\nFile format: BFD ECP for Silicon\n\n`BFD.gauss_ecp.dat.Si`\n\n```perl\nBFD Si pseudo\n3\n3\n4.00000000 1 1.80721061\n7.22884246 3 9.99633089\n-13.06725590 2 2.50043232\n1\n21.20531613 2 2.26686403\n1\n15.43693603 2 2.11659661\n```\nThese files are generally kept in the `pool` directory of the calculation folder. You just need to specify the name `BFD` in the general module of the CHAMP input file under the keyword `pseudopot`. There should be a file for each type of an atom.\n\n```python\n%module general\n    title           'VMC Calculation for a molecule'\n    pool            './pool/'\n    mode            'vmc_one_mpi'\n    pseudopot       BFD\n    basis           ccpVTZ\n    ipr             -1\n%endmodule\n```\n\n## Basis set (Basis on the radial grid) files\n\nBasis files have a fixed format. The files generated from the trex2champ converter can also be used as they are.\nThese files are generally kept in the `pool` directory of the calculation folder. You just need to specify the name of the basis file (say, `ccpVTZ`) in the general module of the CHAMP input file under the keyword `basis`. This will read the file `ccpVTZ.basis.Si` for the element `Si`.\n\nThe top few lines of `BFD-T.basis.C` look like\n\n```python\n9 3 2000 1.003000 20.000000 0\n 0.000000000000e+00  5.469976184517e-01  2.376319920758e+00  5.557936498748e-01  3.412818210005e+00  2.206803021951e-01  8.610719484857e-01  3.738901952004e-01  3.289926074834e+00  1.106692909826e+00\n 1.508957441883e-04  5.469976454488e-01  2.376319870895e+00  5.557936481942e-01  3.412817957941e+00  2.206803015581e-01  8.610719410992e-01  3.738901923954e-01  3.289925989316e+00  1.106692890335e+00\n ...\n ```\nThis means there are 9 radial shells in the basis set of carbon put on a radial grid of 2000 points (up to 20 bohr).\n\n\n## Basis pointers (formerly bfinfo) files\n\nThe new format of the basis pointers file is given below. This file should be kept in the `pool` directory.\nThis file is generated automatically by the `trex2champ.py` converter.\n\n```python\n# Format of the new basis information file champ_v3\n# num_ao_per_center, n(s), n(p), n(d), n(f), n(g)\n# Index of Slm (Range 1 to 35)\n# Index of the column from numerical basis file\nqmc_bf_info 1\n54 4 4 3 2 0\n1 1 1 1 2 3 4 2 3 4 2 3 4 2 3 4 5 6 7 8 9 10 5 6 7 8 9 10 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 11 12 13 14 15 16 17 18 19 20\n1 2 3 4 5 5 5 6 6 6 7 7 7 8 8 8 9 9 9 9 9 9 10 10 10 10 10 10 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 13 13 13\n35 4 3 2 1 0\n1 1 1 1 2 3 4 2 3 4 2 3 4 5 6 7 8 9 10 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\n1 2 3 4 5 5 5 6 6 6 7 7 7 8 8 8 8 8 8 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10\nend\n```\n\nEach unique type of atom will have a pair of lines in the basis pointers file.\n\nThe first line after the comments `qmc_bf_info 1` is a specification line to make sure that we are reading the basis function information file.\n\nThe second line is for the first unique atom in the system. It contains the number of atomic orbitals for that atom, the number of s-type functions, the number of p-type functions, the number of d-type functions, the number of f-type functions, and the number of g-type functions.\n`num_ao_per_center, n(s), n(p), n(d), n(f), n(g)`\n\nThe third line gives the index of Slm (or real Ylm). The numbers depend on how many radial shells are there in the basis set.\n\nThe fourth line tells which column of the radial grid file to be read for the construction of MO from the AOs.\n\n\n## Molecular Orbitals file\n\nThis file contains the molecular orbital coefficients. These are arranged as [num_ao, num_mo] array. This file is obtained automatically from the `trex2champ.py` converter. Please note that the AOs in this file follow the trexio convention of AO ordering.\n\nFor example,\nFour p-type shells of AOs will be arranged alphabetically as\n\n`X Y Z   X Y Z   X Y Z   X Y Z`\n\nTwo d-type shells of AOs will be arranged alphabetically as\n\n`XX XY XZ YY YZ ZZ   XX XY XZ YY YZ ZZ`\n\nand so on.\n\nThe `.lcao` or `.orb` file has the following format.\n\n```python\nlcao  226 200  1\n...\n...\n\nend\n```\n\nThe number 226 will be the number of AOs, 200 will be the number of orbitals, and 1 will be the number of types of orbitals.\n\n## Determinants and/or CSF file\nThe determinant file is automatically obtained from the `trex2champ.py` converter. Note that the `trex2champ.py` can also provide CSF and CSF map information if the corresponding GAMESS output file is provided with `--gamess` option.\n\nThe below is a typical file.\n\n```python\n# Determinants, CSF, and CSF mapping from the GAMESS output / TREXIO file.\n# Converted from the trexio file using trex2champ converter https://github.com/TREX-CoE/trexio_tools\ndeterminants 36 1\n-0.92276500 0.08745570 0.08745570 -0.03455773 -0.03455773 0.15892000 -0.00958342 -0.00958342 0.03141700 0.06827967 0.06827967 -0.02315988 -0.02315988 0.01639443 -0.00751472 0.00887972 0.00887972 -0.00751472 0.01639443 0.14336029 0.14336029 -0.06358518 -0.06358518 -0.00177625 -0.00177625 -0.01588657 -0.01588657 0.16425900 0.02504927 0.02504927 0.11380000 0.00560594 0.00560594 0.01069429 0.01069429 -0.04482000\n   1    2    3    4    5    6    7    8    9   10   11      1    2    3    4    5    6    7    8    9   10   11\n   1    2    3    4    5    6    7    8    9   10   11      1    2    3    4    5    6    7    8    9   10   13\n   1    2    3    4    5    6    7    8    9   10   13      1    2    3    4    5    6    7    8    9   10   11\n   1    2    3    4    5    6    7    8    9   10   11      1    2    3    4    5    6    7    8    9   11   13\n   1    2    3    4    5    6    7    8    9   11   13      1    2    3    4    5    6    7    8    9   10   11\n   1    2    3    4    5    6    7    8    9   10   13      1    2    3    4    5    6    7    8    9   10   13\n   1    2    3    4    5    6    7    8    9   10   13      1    2    3    4    5    6    7    8    9   11   13\n   1    2    3    4    5    6    7    8    9   11   13      1    2    3    4    5    6    7    8    9   10   13\n   1    2    3    4    5    6    7    8    9   11   13      1    2    3    4    5    6    7    8    9   11   13\n   1    2    3    4    5    6    7    8    9   10   11      1    2    3    4    5    6    7    8    9   10   12\n   1    2    3    4    5    6    7    8    9   10   12      1    2    3    4    5    6    7    8    9   10   11\n   1    2    3    4    5    6    7    8    9   10   11      1    2    3    4    5    6    7    8    9   11   12\n   1    2    3    4    5    6    7    8    9   11   12      1    2    3    4    5    6    7    8    9   10   11\n   1    2    3    4    5    6    7    8    9   10   11      1    2    3    4    5    6    7    8    9   12   13\n   1    2    3    4    5    6    7    8    9   10   13      1    2    3    4    5    6    7    8    9   11   12\n   1    2    3    4    5    6    7    8    9   10   12      1    2    3    4    5    6    7    8    9   11   13\n   1    2    3    4    5    6    7    8    9   11   13      1    2    3    4    5    6    7    8    9   10   12\n   1    2    3    4    5    6    7    8    9   11   12      1    2    3    4    5    6    7    8    9   10   13\n   1    2    3    4    5    6    7    8    9   12   13      1    2    3    4    5    6    7    8    9   10   11\n   1    2    3    4    5    6    7    8    9   10   13      1    2    3    4    5    6    7    8    9   10   12\n   1    2    3    4    5    6    7    8    9   10   12      1    2    3    4    5    6    7    8    9   10   13\n   1    2    3    4    5    6    7    8    9   11   13      1    2    3    4    5    6    7    8    9   11   12\n   1    2    3    4    5    6    7    8    9   11   12      1    2    3    4    5    6    7    8    9   11   13\n   1    2    3    4    5    6    7    8    9   10   13      1    2    3    4    5    6    7    8    9   12   13\n   1    2    3    4    5    6    7    8    9   12   13      1    2    3    4    5    6    7    8    9   10   13\n   1    2    3    4    5    6    7    8    9   11   13      1    2    3    4    5    6    7    8    9   12   13\n   1    2    3    4    5    6    7    8    9   12   13      1    2    3    4    5    6    7    8    9   11   13\n   1    2    3    4    5    6    7    8    9   10   12      1    2    3    4    5    6    7    8    9   10   12\n   1    2    3    4    5    6    7    8    9   10   12      1    2    3    4    5    6    7    8    9   11   12\n   1    2    3    4    5    6    7    8    9   11   12      1    2    3    4    5    6    7    8    9   10   12\n   1    2    3    4    5    6    7    8    9   11   12      1    2    3    4    5    6    7    8    9   11   12\n   1    2    3    4    5    6    7    8    9   10   12      1    2    3    4    5    6    7    8    9   12   13\n   1    2    3    4    5    6    7    8    9   12   13      1    2    3    4    5    6    7    8    9   10   12\n   1    2    3    4    5    6    7    8    9   11   12      1    2    3    4    5    6    7    8    9   12   13\n   1    2    3    4    5    6    7    8    9   12   13      1    2    3    4    5    6    7    8    9   11   12\n   1    2    3    4    5    6    7    8    9   12   13      1    2    3    4    5    6    7    8    9   12   13\nend\ncsf 20 2\n0.92276500 -0.12368100 0.04887200 -0.15892000 0.01355300 -0.03141700 -0.09656200 0.03275300 0.02839600 -0.20274200 -0.00136500 0.08992300 -0.00251200 -0.02246700 -0.16425900 -0.03542500 -0.11380000 0.00792800 0.01512400 0.04482000\n0.13390600 -0.08999000 -0.04327600 0.07929200 0.06217900 -0.00658100 0.96025800 -0.00444100 0.01898800 0.15434900 -0.04594200 -0.01868700 0.00187600 0.04520300 -0.06578900 -0.04536600 0.04834200 -0.00269300 -0.04316900 -0.02239200\nend\ncsfmap\n20 36 40\n1\n  1  -1.000000\n2\n  2  -0.707107\n  3  -0.707107\n2\n  4  -0.707107\n  5  -0.707107\n1\n  6  -1.000000\n2\n  7  -0.707107\n  8  -0.707107\n1\n  9  -1.000000\n2\n  10  -0.707107\n  11  -0.707107\n2\n  12  -0.707107\n  13  -0.707107\n6\n  14  0.577350\n  15  -0.288675\n  16  0.288675\n  17  0.288675\n  18  -0.288675\n  19  0.577350\n2\n  20  -0.707107\n  21  -0.707107\n4\n  15  -0.500000\n  16  -0.500000\n  17  -0.500000\n  18  -0.500000\n2\n  22  -0.707107\n  23  -0.707107\n2\n  24  0.707107\n  25  0.707107\n2\n  26  0.707107\n  27  0.707107\n1\n  28  -1.000000\n2\n  29  -0.707107\n  30  -0.707107\n1\n  31  -1.000000\n2\n  32  0.707107\n  33  0.707107\n2\n  34  0.707107\n  35  0.707107\n1\n  36  -1.000000\nend\n```\n\n## Molecular orbital symmetries file [Optional; useful when doing orbital optimization]\nThis file is also generated using the `trex2champ.py` converter if the parent .hdf5 file contains the orbital symmetries.\n\nA typical file looks like this:\n\n```python\nsym_labels 4 226\n 1 AG 2 AU 3 BG 4 BU\n1 4 4 1 1 4 1 4 1 2 3 2 3 4 1 4 1 4 4 1 1 4 4 1 4 1 3 1 4 1 2 4 1 2 4 1 3 2 4 3 2 1 4 4 3 1 1 4 4 4 2 1 3 1 4 1 1 4 1 4 3 1 4 2 2 3 1 4 1 4 1 1 4 2 3 4 1 4 2 1 3 1 4 1 4 2 4 4 1 3 4 1 3 4 2 1 2 3 4 1 2 4 1 3 4 2 3 1 1 4 4 1 2 1 3 1 4 1 4 2 3 4 1 4 2 1 4 3 1 4 2 3 2 3 4 1 2 3 1 2 4 2 3 4 1 4 3 2 1 1 3 4 4 1 4 1 2 4 1 3 1 2 4 4 4 3 1 1 3 1 1 2 2 4 4 2 1 4 3 1 1 4 3 4 2 1 1 2 4 3 4 3 2 1 3 4 1 3 1 4 4 2 1 4 1 4 1 1 4 4 4 1 1 1 4 1 4 4 1 4 1 4 1 4 1 4\nend\n```\n\nThe numbers in front of irreducible representations are used as correspondence to identify the symmetry type of each orbital. Here in this case there are 226 molecular orbitals with 4 irreps.\n\n## Molecular orbital eigenvalues file [Optional]\nThis file is also generated using the `trex2champ.py` converter if the parent .hdf5 file contains the orbital eigenvalues.\n\nA typical file looks like this:\n\n```python\n# File created using the trex2champ converter https://github.com/TREX-CoE/trexio_tools\n# Eigenvalues correspond to the RHF orbitals\neigenvalues 64\n-1.3659 -0.7150 -0.5814 -0.5081 0.1201 0.1798 0.4846 0.5148 0.5767 0.6085 0.7153 0.7820 0.8691 0.8699 0.9642 1.2029 1.4091 1.4388 1.6082 1.6342 2.0787 2.1179 2.1776 2.2739 2.4123 2.5591 2.8217 3.3480 3.3840 3.4544 3.4607 3.6199 3.6237 3.9628 3.9661 4.0439 4.0481 4.2212 4.3500 4.4225 4.4577 4.5747 4.7271 4.8382 5.0086 5.5800 5.8020 6.0317 6.3754 6.5827 6.6970 6.7474 6.9245 7.0790 7.1820 7.2121 7.3257 7.3865 7.8607 8.4146 8.4733 9.0201 16.4980 27.1462\nend\n\n```\n\nThe first line contains the keyword `eigenvalues` followed by the number of orbitals. The following line contains\n eigenvalues as they appear in GAMESS or similar output. The file ends with the keyword `end`.\n\n## Jastrow parameters file\nThe Jastrow parameters can be provided using this file. It has the following format [Example: water].\n\n```python\njastrow_parameter   1\n  5  5  0           norda,nordb,nordc\n   0.60000000         scalek\n   0.00000000   0.00000000  -0.41907755  -0.22916790  -0.04194614   0.08371252 (a(iparmj),iparmj=1,nparma)\n   0.00000000   0.00000000  -0.09956809  -0.00598089   0.00503028   0.00600649 (a(iparmj),iparmj=1,nparma)\n   0.50000000   0.36987319   0.06971895   0.00745636  -0.00306208  -0.00246314 (b(iparmj),iparmj=1,nparmb)\n (c(iparmj),iparmj=1,nparmc)\n (c(iparmj),iparmj=1,nparmc)\nend\n```\n\nThe set `a` should appear for each unique atom type (in the same order as in the .xyz file).\n\nThe set `b` should appear once.\n\nThree-body Jastrow terms `c` should appear for each unique atom type (in the same order as in the .xyz file)\n\n\n## Jastrow derivatives file\nThe Jastrow derivative parameters can be provided using this file. It has the following format [Example: water].\n\n```python\njasderiv\n4 4 5 15 15 0 0 nparma,nparmb,nparmc,nparmf\n  3 4 5 6 (iwjasa(iparm),iparm=1,nparma)\n  3 4 5 6 (iwjasa(iparm),iparm=1,nparma)\n2 3 4 5 6 (iwjasb(iparm),iparm=1,nparmb)\n3 5 7 8 9         11 13 14 15 16     17 18 20 21 23 (c(iparmj),iparmj=1,nparmc)\n3 5 7 8 9         11 13 14 15 16     17 18 20 21 23 (c(iparmj),iparmj=1,nparmc)\nend\n```\n"
      },
      "source": "https://raw.githubusercontent.com/filippi-claudia/champ/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Geometry in the (XYZ in Bohr units) format with explicit Zvalence. This also allows different labels for the same element.",
        "parent_header": [
          "Preparing the input files",
          "Molecular coordinates"
        ],
        "type": "Text_excerpt",
        "value": "![Logo](https://github.com/filippi-claudia/champ/blob/main//docs/logo_small.jpg?raw=true)\n\n[![CHAMP release build with Intel](https://github.com/filippi-claudia/champ/actions/workflows/build_champ_intel.yml/badge.svg)](https://github.com/filippi-claudia/champ/actions/workflows/build_champ_intel.yml) [![CHAMP debug build with Intel and GNU](https://github.com/filippi-claudia/champ/actions/workflows/debug_champ_intel_and_gnu.yml/badge.svg)](https://github.com/filippi-claudia/champ/actions/workflows/debug_champ_intel_and_gnu.yml) [![CHAMP with QMCkl and TREXIO build with Intel](https://github.com/filippi-claudia/champ/actions/workflows/build_champ_trexio_qmckl.yml/badge.svg)](https://github.com/filippi-claudia/champ/actions/workflows/build_champ_trexio_qmckl.yml) [![Build Docker Image](https://github.com/filippi-claudia/champ/actions/workflows/docker-image.yml/badge.svg)](https://github.com/filippi-claudia/champ/actions/workflows/docker-image.yml) [![Publish Docker image](https://github.com/filippi-claudia/champ/actions/workflows/docker-publish.yml/badge.svg?branch=main)](https://github.com/filippi-claudia/champ/actions/workflows/docker-publish.yml) [![TREXIO python interface](https://github.com/filippi-claudia/champ/actions/workflows/test_python.yml/badge.svg)](https://github.com/filippi-claudia/champ/actions/workflows/test_python.yml)\n\n\n![Github Issues](https://img.shields.io/github/issues/filippi-claudia/champ) ![Github Pull Requests](https://img.shields.io/github/issues-pr/filippi-claudia/champ) ![Github Last Commit](https://img.shields.io/github/last-commit/filippi-claudia/champ) [![Commit Activity](https://img.shields.io/github/commit-activity/w/filippi-claudia/champ)](https://img.shields.io/github/commit-activity/t/filippi-claudia/champ\n)\n\n![Last release tag](https://img.shields.io/github/v/tag/filippi-claudia/champ) ![Github forks](https://img.shields.io/github/forks/filippi-claudia/champ) ![Github stars](https://img.shields.io/github/stars/filippi-claudia/champ) ![Repo Size](https://img.shields.io/github/repo-size/filippi-claudia/champ) ![Code Size](https://img.shields.io/github/languages/code-size/filippi-claudia/champ)\n\n![Github license](https://img.shields.io/github/license/filippi-claudia/champ)\n\n\n\n\nThe Cornell-Holland Ab-initio Materials Package (CHAMP) is a quantum Monte Carlo suite of programs for electronic structure calculations of atomic and molecular systems. The code is a sister code of the homonymous program originally developed by Cyrus Umrigar and Claudia Filippi of which it retains the accelerated Metropolis method and the efficient diffusion Monte Carlo algorithms.\n\nThe European branch of the code is currently developed by Claudia Filippi and Saverio Moroni,\nwith significant contributions by Ravindra Shinde, Nicolas Renaud, Victor Azizi, Edgar Landinez, and Stuart Shepard.\n\n\n\n\n\n\nCHAMP has three basic capabilities:\n\n* Metropolis or variational Monte Carlo (VMC)\n* Diffusion Monte Carlo (DMC)\n* Optimization of many-body wave functions by energy minimization (VMC) for ground and excited states\n\nNoteworthy features of CHAMP are:\n\n* Efficient wave function optimization also in a state-average and a state-specific fashion for multiple states of the same symmetry (VMC)\n* Efficient computation of analytical interatomic forces (VMC)\n* Compact formulation for a fast evaluation of multi-determinant expansions and their derivatives (VMC and DMC)\n* Multiscale VMC and DMC calculations in classical point charges (MM), polarizable continuum model (PCM), and polarizable force fields (MMpol)\n\n**Note**\n\nThe code is available for free under the GPL-3.0 license. Developers and contributors are welcome to use and contribute back to the code. If you have used the code for your publications, please cite this source.\n\n**Usual disclaimer**\n\nThe authors make no claims about the correctness of the program suite and people who use it do so at their own risk.\n\n------------------------------------------------------------------------\n\nCHAMP utilizes various other program packages:\n\n1. [Parser](https://github.com/neelravi/mpi-libfdf-parser):\n   An easy-to-use and easy-to-extend keyword-value pair-based input file parser written in Fortran 2008.  This parser uses a heavily modified libFDF library and is written by [Ravindra Shinde](https://github.com/neelravi). It can parse keyword-value pairs, blocks of data, and general variables with different physical units in an order-independent manner. Our implementation can handle multiple data types and file formats. The parser is kept as a library in the code, however, it can be easily adapted by any other Fortran-based code.\n\n2. [TREXIO](https://github.com/TREX-CoE/trexio):\n   TREXIO is an open-source file format and library developed for the storage and manipulation of data produced by quantum chemistry calculations. CHAMP can read the starting wavefunction from a trexio file. The library has interfaces to a lot of quantum chemical programs.\n   CHAMP can directly read the contents of this file with a single load statement in the input file. This library is currently optional.\n\n  <p align=\"center\">\n    <img src=\"docs/trexio.png\" alt=\"trexio interface\" width=\"150\"/>\n  </p>\n\n\n3. [TREXIO Tools](https://github.com/TREX-CoE/trexio_tools):\n   We provide a Python package inside the CHAMP's tool directory to extract all the necessary information from a TREXIO file in the hdf5 file format to a human-readable text format. This allows one to bypass the TREXIO library within CHAMP and input the necessary data via the Parser (see Option 2 in Section \"Preparing the Input File\" below).\n\n4. [QMCKL](https://github.com/TREX-CoE/qmckl):\n  This library provides a high-performance implementation of the main kernels of Quantum Monte Carlo methods. This library is currently optional.\n\n------------------------------------------------------------------------\n### CHAMP in a container\n\nCHAMP is available as a container image from Dockerhub. Here are the instructions to obtain the images:\n\n1. CHAMP built with Intel oneAPI compilers:\n\t- `docker pull neelravi/champ:latest`\n \t- `docker pull neelravi/champ:intel`\n  \t- `docker pull neelravi/champ:intel-trexio`\n2. CHAMP built with GNU compilers\n   \t- `docker pull neelravi/champ:2.3.0`\n   \t- `docker pull neelravi/champ:gnu`\n   \t- `docker pull neelravi/champ:gnu-trexio`\n------------------------------------------------------------------------\n\n### Compiling CHAMP for the source\n#### Requirements\n1. cmake >= 3.17\n2. gfortran/gcc >= 9.3.0 or Intel Fortran 2020 onwards\n3. BLAS/LAPACK or Intel MKL\n4. openMPI >= 3.0 or Intel MPI\n5. [Optional] TREXIO library >= 2.4.0\n6. [Optional] QMCkl library >= 1.0.0\n7. [Optional] doxygen (for documentation)\n\n\n### Installation Using CMake\nTo install **Champ** using [cmake](https://cmake.org/) you need to run the following commands:\n```\ncmake -H. -Bbuild\ncmake --build build -- -j4\n```\nThe first command is only required to set up the build directory and needs to be\nexecuted only once. Compared to the previous Makefiles the dependencies for the\ninclude files (e.g include/vmc.h) are correctly setup and no `--clean-first` is\nrequired.\n\n#### CMAKE Options\n\nTo select a given compiler, you can type:\n```\ncmake -H. -Bbuild -D CMAKE_Fortran_COMPILER=mpif90\n```\nTo use LAPACK and BLAS installed locally, include the path to the libraries:\n```\ncmake -H. -Bbuild \\\n\t-DCMAKE_Fortran_COMPILER=mpif90 \\\n\t-DBLAS_blas_LIBRARY=/home/user/lib/BLAS/blas_LINUX.a \\\n\t-DLAPACK_lapack_LIBRARY=/home/user/lib/LAPACK/liblapack.a\n```\nTo enable/disable vectorization based on the architecture:\n```bash\ncmake -H. -Bbuild -DCMAKE_Fortran_COMPILER=mpif90 -DVECTORIZED=yes/no/auto\n```\n\nTo compile only e.g. VMC serial:\n```\ncmake --build build --target vmc.mov1\n```\nClean and build:\n```\ncmake --build build --clean-first\n```\n\n#### CMAKE Recipes\n\nHere are a couple of recipes for commonly used computing facilities, which can be easily adapted.\n* **Snellius** (snellius.surfa.nl):\n\t- To compile the code, first load the required modules:\n\t\t```bash\n\t\tmodule purge\n\t\tmodule load 2022\n\t\tmodule load intel/2022a\n\t\tmodule load HDF5/1.12.2-iimpi-2022a\n\t\t```\n\t\tthen set-up the build:\n\t\t```bash\n\t\tcmake -H. -Bbuild -DCMAKE_Fortran_COMPILER=mpiifort\n\t\t```\n\t\tOptionally, you may link the trexio library using the following command:\n\t\t```bash\n\t\tcmake -S. -Bbuild  \\\n  \t\t\t-DCMAKE_Fortran_COMPILER=mpiifort  \\\n  \t\t\t-DENABLE_TREXIO=ON  \\\n  \t\t\t-DTREXIO_LIBRARY=$HOME/lib/libtrexio.so  \\\n  \t\t\t-DTREXIO_INCLUDE_DIR=$HOME/include/\n\t\t```\n\t\tand finally build:\n\t\t```bash\n\t\tcmake --build build -j8 --clean-first\n\t\t```\n\t- To run the code, you need to submit a job to the queue system:\n\t\t```bash\n\t\tsbatch job.cmd\n\t\t```\n\t\twhere `job.cmd` is a SLURM script for `genoa` partition that looks like this:\n\n\t\t```bash\n\t\t#!/bin/bash\n        #SBATCH -t 0-12:00:00            # time in (day-hours:min:sec)\n        #SBATCH -N 1                     # number of nodes (change this number to use more nodes)\n        #SBATCH --ntasks-per-node 192    # tasks per node (Use 192 for genoa and 128 for rome partition)\n        #SBATCH -J vmc                   # name of the job\n        #SBATCH -o vmc.%j.out            # std output file name for slurm\n        #SBATCH -e vmc.%j.err            # std error file name for slurm\n        #SBATCH --exclusive              # specific requirements about node\n        #SBATCH --partition genoa        # partition (queue)\n        #\n        module purge\n        module load 2022\n        module load intel/2022a\n        module load HDF5/1.12.2-iimpi-2022a\n        #\n        export I_MPI_PMI_LIBRARY=/usr/lib64/libpmi2.so\n        cd $PWD\n\t\tsrun champ/bin/vmc.mov1 -i input.inp -o output.out -e error\n\t\t```\n* **CCPhead**:\n\t- To build with mpiifort, load the required modules of the Intel Compiler and MPI:\n\n\t\t```bash\n \t\tmodule load cmake/latest\n \t\tmodule load compiler-rt/latest\n \t\tmodule load debugger/latest\n \t\tmodule load compiler/latest\n \t\tmodule load icc/latest\n \t\tmodule load mpi/latest\n \t\tmodule load hdf5/latest\n \t\tmodule load tbb/latest\n \t\tmodule load dpl/latest\n \t\tmodule load dev-utilities/latest\n \t\tmodule load mkl/latest\n \t\tmodule load trexio/latest\n \t\t```\n\t\tSetup the build:\n\t\t```\n\t\tcmake -H. -Bbuild -DCMAKE_Fortran_COMPILER=mpiifort\n\t\t```\n\t- To enable TREXIO library:\n\t\t```\n\t\tcmake -H. -Bbuild  \\\n  \t\t\t-DCMAKE_Fortran_COMPILER=mpiifort -DENABLE_TREXIO=ON  \\\n  \t\t\t-DTREXIO_LIBRARY=/software/libraries/trexio/latest/lib/libtrexio.so  \\\n\t\t\t-DTREXIO_INCLUDE_DIR=/software/libraries/trexio/latest/include/\n\t\t```\n\t- To disable vectorization of the code:\n\t\t```\n\t\tcmake -H. -Bbuild -DCMAKE_Fortran_COMPILER=mpiifort -DVECTORIZED=no\n\t\t```\n\n\t- To run the code, you need to submit a job to the queue system:\n\t\t```bash\n\t\tsbatch job.cmd\n\t\t```\n\t\twhere `job.cmd` is a SLURM script for `genoa` partition that looks like this:\n\n\t\t```bash\n\t\t#!/bin/bash\n\t\t#SBATCH -t 2-0\n\t\t#SBATCH -p ccp22\n\t\t#SBATCH -N 2 --exclusive --ntasks-per-node 32\n\t\t#SBATCH -J champ\n\t\t#SBATCH --output=o%j\n\t\t#SBATCH --ntasks-per-core=1\n\t\t#SBATCH --error=e%j\n\n \t\tmodule load compiler-rt/latest\n \t\tmodule load debugger/latest\n \t\tmodule load compiler/latest\n \t\tmodule load icc/latest\n \t\tmodule load mpi/latest\n \t\tmodule load hdf5/latest\n \t\tmodule load tbb/latest\n \t\tmodule load dpl/latest\n \t\tmodule load dev-utilities/latest\n \t\tmodule load mkl/latest\n \t\tmodule load trexio/latest\n\n\t \tcd $PWD\n\t\tmpirun -np 64 champ/bin/vmc.mov1 -i input.inp -o output.out -e error\n\t\t```\n\n \t- To build with gfortran:\n\n\t\tSetup the build:\n\t\t```\n\t\tcmake -H. -Bbuild -DCMAKE_Fortran_COMPILER=/usr/bin/mpif90\n\t\t```\n\t\twhich will use LAPACK & BLAS from the Ubuntu repository. (Cmake should find them already if none of the Intel MKL variables are set.) Combining gfortran with the Intel MKL is possible but requires special care to work with the compiler flag `-mcmodel=large`.\n\t- To run the code:\n\t\t```\n\t\tmpirun -s all -np \"n process\" -machinefile \"machinefile\"\n\t\t```\n* **Ubuntu desktop**:\n\t- Ubuntu 20:\n\t\tInstall the required packages:\n\t\t```\n\t\tsudo apt install gfortran openmpi-bin libopenmpi-dev gawk libblacs-mpi-dev liblapack-dev\n\t\t```\n\t\tSet-up the build:\n\t\t```\n\t\tcmake -H. -Bbuild -DCMAKE_Fortran_COMPILER=mpifort\n\t\t```\n\t\tBuild:\n\t\t```\n\t\tcmake --build build -- -j2\n\t\t```\n\t\tTo run in parallel:\n\t\t```\n\t\tmpirun --stdin all -n 2 path_to_CHAMP/bin/vmc.mov1 -i vmc.inp -o vmc.out -e error\n\t\t```\n\t- Ubuntu 18:\n\tInstall the dependencies using conda instead of apt\n\t- WSL:\n\tThe code also compiles on WSL.\n------------------------------------------------------------------------\n\n## User's manual and documentation\nThe user's manual and documentation is hosted at [https://trex-coe.github.io/champ-user-manual/](https://trex-coe.github.io/champ-user-manual)\n\n\n# Preparing the input files\n\nCHAMP needs the following input files to describe a system\n1. Geometry\n1. ECP / Pseudopotentials\n1. Basis Set (Radial Grid files)\n1. Basis pointers\n1. MO coefficients\n1. Determinants and/or CSF files\n1. Molecular orbital symmetries (Optional)\n1. Molecular orbital eigenvalues (Optional)\n1. Jastrow parameters file\n1. Jastrow derivative parameters file (Optional)\n\n\nCHAMP input file itself has a modular structure. For example,\n\n```\n1. general\n2. electrons\n3. blocking_vmc\n4. blocking_dmc\n5. optwf\n6. ...\n```\n\n\n## Option 1 (Using trexio file)\n\nWe can use trexio file (in hdf5 or text backend format) to specify all the inputs (except Jastrow and Jastrow derivatives)\n\nA sample input file would look like:\n\n```perl\n%module general\n    title           'VMC Calculation for a molecule'\n    pool            './pool/'\n    mode            'vmc_one_mpi'\n    ipr \t    -1\n%endmodule\n\nload trexio          molecule.hdf5\nload determinants    determinants.det\nload jastrow         jastrow.jas\n\n%module electrons\n    nup           20\n    nelec         40\n%endmodule\n\n\n%module blocking_vmc\n    vmc_nstep     20\n    vmc_nblk      100000\n    vmc_nblkeq    1\n    vmc_nconf_new 0\n%endmodule\n```\n\n### Obtaining a trexio file from GAMESS-US output\n\nMake sure that the recent version of `trexio_tools` has been installed.\n```bash\npip install trexio_tools\n```\n\nThis will provide `trexio` executable in the path. Use the following command to generate a trexio file.\n\n```bash\ntrexio convert-from --type gamess --input gamess_output.out --motype \"RHF\" victor.hdf5 --back_end=HDF5\n```\nAllowed values of MOtype are `'RHF', 'ROHF', 'MCSCF', 'NATURAL', 'GUGA' ...`\n\n> **NOTE** : Use `trexio --help` for a verbose list of options.\n\n## Option 2 (Specification using individual text files)\n\nThe trexio file can be converted into several text files to be used with CHAMP. The Python converter is provided in the CHAMP's repository in the `champ/tools/trex_tools` folder.\n\nA sample script is given below:\n\n```python\npython3 /home/user/champ/tools/trex_tools/trex2champ.py \\\n\t--trex \t\"COH2_GS.trexio\" \\\n\t--backend\t\"HDF5\" \\\n\t--basis_prefix  \"BFD-aug-cc-pVDZ\" \\\n\t--lcao \\\n\t--ecp \\\n\t--sym \\\n\t--geom \\\n\t--basis \\\n\t--det\n```\n\n\n> **NOTE** : Use `python3 trex2champ.py --help` for a verbose list of options.\n\n## Molecular coordinates\n\nMolecular coordinates can be provided directly in the vmc or dmc input files using the `%block` structure of the parser.\n\nThe following are the valid examples\n\n1. ### Geometry in the (XYZ in Bohr units) format with automatic Zvalence\n```perl\n%block molecule\n10\n# molecular complex (Symbol, X,Y,Z in Bohr)\n  Si  -0.59659972  0.06162019  0.21100680\n  S   -2.60025162 -2.54807062 -2.52884266\n  S    2.14594449  2.17606672 -2.44253887\n  S    1.75703132 -2.78062975  2.53564756\n  S   -1.40663455  3.06742023  3.14712509\n  H   -3.50597461  0.49044059  0.39864337\n  H    0.96753971  3.57914102  3.86259992\n  H   -0.57825615 -3.70197321 -3.52433897\n  H    0.37416575  3.66039924 -3.47898554\n  H   -0.21164931 -3.70953211  3.82669513\n%endblock\n```\n\n2. ### Geometry in the (XYZ in Bohr units) format with explicit Zvalence. This also allows different labels for the same element.\n```perl\n%block molecule\n10\n# molecular complex (Symbol, X,Y,Z in Bohr, Zvalence)\n  Si   -0.59659972  0.06162019  0.21100680    4.0\n  S    -2.60025162 -2.54807062 -2.52884266    6.0\n  S     2.14594449  2.17606672 -2.44253887    6.0\n  S     1.75703132 -2.78062975  2.53564756    6.0\n  S    -1.40663455  3.06742023  3.14712509    6.0\n  H1   -3.50597461  0.49044059  0.39864337    1.0\n  H2    0.96753971  3.57914102  3.86259992    1.0\n  H2   -0.57825615 -3.70197321 -3.52433897    1.0\n  H2    0.37416575  3.66039924 -3.47898554    1.0\n  H2   -0.21164931 -3.70953211  3.82669513    1.0\n%endblock\n```\n\n3. ### Geometry in the (XYZ in Bohr units) format to be read from a separate .xyz file.\n\n` %block molecule < molecule.xyz `\n\n4. ### Geometry in the (XYZ in Bohr units) format to be read from a separate .xyz file.\n\n` load molecule  molecule.xyz `\n\n\n## ECP / Pseudopotential files\n\nECP or pseudopotential files have a fixed format. Most of the BFD ECP files can be found in the `champ/pool/BFD/ECP_champ` folder. The files generated from the trexio file can also be used (except if it is coming from GAMESS. In this case, GAMESS truncates the digits of ECP information in its output, so the trexio file will not have all the digits stored.)\n\nFile format: BFD ECP for Silicon\n\n`BFD.gauss_ecp.dat.Si`\n\n```perl\nBFD Si pseudo\n3\n3\n4.00000000 1 1.80721061\n7.22884246 3 9.99633089\n-13.06725590 2 2.50043232\n1\n21.20531613 2 2.26686403\n1\n15.43693603 2 2.11659661\n```\nThese files are generally kept in the `pool` directory of the calculation folder. You just need to specify the name `BFD` in the general module of the CHAMP input file under the keyword `pseudopot`. There should be a file for each type of an atom.\n\n```python\n%module general\n    title           'VMC Calculation for a molecule'\n    pool            './pool/'\n    mode            'vmc_one_mpi'\n    pseudopot       BFD\n    basis           ccpVTZ\n    ipr             -1\n%endmodule\n```\n\n## Basis set (Basis on the radial grid) files\n\nBasis files have a fixed format. The files generated from the trex2champ converter can also be used as they are.\nThese files are generally kept in the `pool` directory of the calculation folder. You just need to specify the name of the basis file (say, `ccpVTZ`) in the general module of the CHAMP input file under the keyword `basis`. This will read the file `ccpVTZ.basis.Si` for the element `Si`.\n\nThe top few lines of `BFD-T.basis.C` look like\n\n```python\n9 3 2000 1.003000 20.000000 0\n 0.000000000000e+00  5.469976184517e-01  2.376319920758e+00  5.557936498748e-01  3.412818210005e+00  2.206803021951e-01  8.610719484857e-01  3.738901952004e-01  3.289926074834e+00  1.106692909826e+00\n 1.508957441883e-04  5.469976454488e-01  2.376319870895e+00  5.557936481942e-01  3.412817957941e+00  2.206803015581e-01  8.610719410992e-01  3.738901923954e-01  3.289925989316e+00  1.106692890335e+00\n ...\n ```\nThis means there are 9 radial shells in the basis set of carbon put on a radial grid of 2000 points (up to 20 bohr).\n\n\n## Basis pointers (formerly bfinfo) files\n\nThe new format of the basis pointers file is given below. This file should be kept in the `pool` directory.\nThis file is generated automatically by the `trex2champ.py` converter.\n\n```python\n# Format of the new basis information file champ_v3\n# num_ao_per_center, n(s), n(p), n(d), n(f), n(g)\n# Index of Slm (Range 1 to 35)\n# Index of the column from numerical basis file\nqmc_bf_info 1\n54 4 4 3 2 0\n1 1 1 1 2 3 4 2 3 4 2 3 4 2 3 4 5 6 7 8 9 10 5 6 7 8 9 10 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 11 12 13 14 15 16 17 18 19 20\n1 2 3 4 5 5 5 6 6 6 7 7 7 8 8 8 9 9 9 9 9 9 10 10 10 10 10 10 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 13 13 13\n35 4 3 2 1 0\n1 1 1 1 2 3 4 2 3 4 2 3 4 5 6 7 8 9 10 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\n1 2 3 4 5 5 5 6 6 6 7 7 7 8 8 8 8 8 8 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10\nend\n```\n\nEach unique type of atom will have a pair of lines in the basis pointers file.\n\nThe first line after the comments `qmc_bf_info 1` is a specification line to make sure that we are reading the basis function information file.\n\nThe second line is for the first unique atom in the system. It contains the number of atomic orbitals for that atom, the number of s-type functions, the number of p-type functions, the number of d-type functions, the number of f-type functions, and the number of g-type functions.\n`num_ao_per_center, n(s), n(p), n(d), n(f), n(g)`\n\nThe third line gives the index of Slm (or real Ylm). The numbers depend on how many radial shells are there in the basis set.\n\nThe fourth line tells which column of the radial grid file to be read for the construction of MO from the AOs.\n\n\n## Molecular Orbitals file\n\nThis file contains the molecular orbital coefficients. These are arranged as [num_ao, num_mo] array. This file is obtained automatically from the `trex2champ.py` converter. Please note that the AOs in this file follow the trexio convention of AO ordering.\n\nFor example,\nFour p-type shells of AOs will be arranged alphabetically as\n\n`X Y Z   X Y Z   X Y Z   X Y Z`\n\nTwo d-type shells of AOs will be arranged alphabetically as\n\n`XX XY XZ YY YZ ZZ   XX XY XZ YY YZ ZZ`\n\nand so on.\n\nThe `.lcao` or `.orb` file has the following format.\n\n```python\nlcao  226 200  1\n...\n...\n\nend\n```\n\nThe number 226 will be the number of AOs, 200 will be the number of orbitals, and 1 will be the number of types of orbitals.\n\n## Determinants and/or CSF file\nThe determinant file is automatically obtained from the `trex2champ.py` converter. Note that the `trex2champ.py` can also provide CSF and CSF map information if the corresponding GAMESS output file is provided with `--gamess` option.\n\nThe below is a typical file.\n\n```python\n# Determinants, CSF, and CSF mapping from the GAMESS output / TREXIO file.\n# Converted from the trexio file using trex2champ converter https://github.com/TREX-CoE/trexio_tools\ndeterminants 36 1\n-0.92276500 0.08745570 0.08745570 -0.03455773 -0.03455773 0.15892000 -0.00958342 -0.00958342 0.03141700 0.06827967 0.06827967 -0.02315988 -0.02315988 0.01639443 -0.00751472 0.00887972 0.00887972 -0.00751472 0.01639443 0.14336029 0.14336029 -0.06358518 -0.06358518 -0.00177625 -0.00177625 -0.01588657 -0.01588657 0.16425900 0.02504927 0.02504927 0.11380000 0.00560594 0.00560594 0.01069429 0.01069429 -0.04482000\n   1    2    3    4    5    6    7    8    9   10   11      1    2    3    4    5    6    7    8    9   10   11\n   1    2    3    4    5    6    7    8    9   10   11      1    2    3    4    5    6    7    8    9   10   13\n   1    2    3    4    5    6    7    8    9   10   13      1    2    3    4    5    6    7    8    9   10   11\n   1    2    3    4    5    6    7    8    9   10   11      1    2    3    4    5    6    7    8    9   11   13\n   1    2    3    4    5    6    7    8    9   11   13      1    2    3    4    5    6    7    8    9   10   11\n   1    2    3    4    5    6    7    8    9   10   13      1    2    3    4    5    6    7    8    9   10   13\n   1    2    3    4    5    6    7    8    9   10   13      1    2    3    4    5    6    7    8    9   11   13\n   1    2    3    4    5    6    7    8    9   11   13      1    2    3    4    5    6    7    8    9   10   13\n   1    2    3    4    5    6    7    8    9   11   13      1    2    3    4    5    6    7    8    9   11   13\n   1    2    3    4    5    6    7    8    9   10   11      1    2    3    4    5    6    7    8    9   10   12\n   1    2    3    4    5    6    7    8    9   10   12      1    2    3    4    5    6    7    8    9   10   11\n   1    2    3    4    5    6    7    8    9   10   11      1    2    3    4    5    6    7    8    9   11   12\n   1    2    3    4    5    6    7    8    9   11   12      1    2    3    4    5    6    7    8    9   10   11\n   1    2    3    4    5    6    7    8    9   10   11      1    2    3    4    5    6    7    8    9   12   13\n   1    2    3    4    5    6    7    8    9   10   13      1    2    3    4    5    6    7    8    9   11   12\n   1    2    3    4    5    6    7    8    9   10   12      1    2    3    4    5    6    7    8    9   11   13\n   1    2    3    4    5    6    7    8    9   11   13      1    2    3    4    5    6    7    8    9   10   12\n   1    2    3    4    5    6    7    8    9   11   12      1    2    3    4    5    6    7    8    9   10   13\n   1    2    3    4    5    6    7    8    9   12   13      1    2    3    4    5    6    7    8    9   10   11\n   1    2    3    4    5    6    7    8    9   10   13      1    2    3    4    5    6    7    8    9   10   12\n   1    2    3    4    5    6    7    8    9   10   12      1    2    3    4    5    6    7    8    9   10   13\n   1    2    3    4    5    6    7    8    9   11   13      1    2    3    4    5    6    7    8    9   11   12\n   1    2    3    4    5    6    7    8    9   11   12      1    2    3    4    5    6    7    8    9   11   13\n   1    2    3    4    5    6    7    8    9   10   13      1    2    3    4    5    6    7    8    9   12   13\n   1    2    3    4    5    6    7    8    9   12   13      1    2    3    4    5    6    7    8    9   10   13\n   1    2    3    4    5    6    7    8    9   11   13      1    2    3    4    5    6    7    8    9   12   13\n   1    2    3    4    5    6    7    8    9   12   13      1    2    3    4    5    6    7    8    9   11   13\n   1    2    3    4    5    6    7    8    9   10   12      1    2    3    4    5    6    7    8    9   10   12\n   1    2    3    4    5    6    7    8    9   10   12      1    2    3    4    5    6    7    8    9   11   12\n   1    2    3    4    5    6    7    8    9   11   12      1    2    3    4    5    6    7    8    9   10   12\n   1    2    3    4    5    6    7    8    9   11   12      1    2    3    4    5    6    7    8    9   11   12\n   1    2    3    4    5    6    7    8    9   10   12      1    2    3    4    5    6    7    8    9   12   13\n   1    2    3    4    5    6    7    8    9   12   13      1    2    3    4    5    6    7    8    9   10   12\n   1    2    3    4    5    6    7    8    9   11   12      1    2    3    4    5    6    7    8    9   12   13\n   1    2    3    4    5    6    7    8    9   12   13      1    2    3    4    5    6    7    8    9   11   12\n   1    2    3    4    5    6    7    8    9   12   13      1    2    3    4    5    6    7    8    9   12   13\nend\ncsf 20 2\n0.92276500 -0.12368100 0.04887200 -0.15892000 0.01355300 -0.03141700 -0.09656200 0.03275300 0.02839600 -0.20274200 -0.00136500 0.08992300 -0.00251200 -0.02246700 -0.16425900 -0.03542500 -0.11380000 0.00792800 0.01512400 0.04482000\n0.13390600 -0.08999000 -0.04327600 0.07929200 0.06217900 -0.00658100 0.96025800 -0.00444100 0.01898800 0.15434900 -0.04594200 -0.01868700 0.00187600 0.04520300 -0.06578900 -0.04536600 0.04834200 -0.00269300 -0.04316900 -0.02239200\nend\ncsfmap\n20 36 40\n1\n  1  -1.000000\n2\n  2  -0.707107\n  3  -0.707107\n2\n  4  -0.707107\n  5  -0.707107\n1\n  6  -1.000000\n2\n  7  -0.707107\n  8  -0.707107\n1\n  9  -1.000000\n2\n  10  -0.707107\n  11  -0.707107\n2\n  12  -0.707107\n  13  -0.707107\n6\n  14  0.577350\n  15  -0.288675\n  16  0.288675\n  17  0.288675\n  18  -0.288675\n  19  0.577350\n2\n  20  -0.707107\n  21  -0.707107\n4\n  15  -0.500000\n  16  -0.500000\n  17  -0.500000\n  18  -0.500000\n2\n  22  -0.707107\n  23  -0.707107\n2\n  24  0.707107\n  25  0.707107\n2\n  26  0.707107\n  27  0.707107\n1\n  28  -1.000000\n2\n  29  -0.707107\n  30  -0.707107\n1\n  31  -1.000000\n2\n  32  0.707107\n  33  0.707107\n2\n  34  0.707107\n  35  0.707107\n1\n  36  -1.000000\nend\n```\n\n## Molecular orbital symmetries file [Optional; useful when doing orbital optimization]\nThis file is also generated using the `trex2champ.py` converter if the parent .hdf5 file contains the orbital symmetries.\n\nA typical file looks like this:\n\n```python\nsym_labels 4 226\n 1 AG 2 AU 3 BG 4 BU\n1 4 4 1 1 4 1 4 1 2 3 2 3 4 1 4 1 4 4 1 1 4 4 1 4 1 3 1 4 1 2 4 1 2 4 1 3 2 4 3 2 1 4 4 3 1 1 4 4 4 2 1 3 1 4 1 1 4 1 4 3 1 4 2 2 3 1 4 1 4 1 1 4 2 3 4 1 4 2 1 3 1 4 1 4 2 4 4 1 3 4 1 3 4 2 1 2 3 4 1 2 4 1 3 4 2 3 1 1 4 4 1 2 1 3 1 4 1 4 2 3 4 1 4 2 1 4 3 1 4 2 3 2 3 4 1 2 3 1 2 4 2 3 4 1 4 3 2 1 1 3 4 4 1 4 1 2 4 1 3 1 2 4 4 4 3 1 1 3 1 1 2 2 4 4 2 1 4 3 1 1 4 3 4 2 1 1 2 4 3 4 3 2 1 3 4 1 3 1 4 4 2 1 4 1 4 1 1 4 4 4 1 1 1 4 1 4 4 1 4 1 4 1 4 1 4\nend\n```\n\nThe numbers in front of irreducible representations are used as correspondence to identify the symmetry type of each orbital. Here in this case there are 226 molecular orbitals with 4 irreps.\n\n## Molecular orbital eigenvalues file [Optional]\nThis file is also generated using the `trex2champ.py` converter if the parent .hdf5 file contains the orbital eigenvalues.\n\nA typical file looks like this:\n\n```python\n# File created using the trex2champ converter https://github.com/TREX-CoE/trexio_tools\n# Eigenvalues correspond to the RHF orbitals\neigenvalues 64\n-1.3659 -0.7150 -0.5814 -0.5081 0.1201 0.1798 0.4846 0.5148 0.5767 0.6085 0.7153 0.7820 0.8691 0.8699 0.9642 1.2029 1.4091 1.4388 1.6082 1.6342 2.0787 2.1179 2.1776 2.2739 2.4123 2.5591 2.8217 3.3480 3.3840 3.4544 3.4607 3.6199 3.6237 3.9628 3.9661 4.0439 4.0481 4.2212 4.3500 4.4225 4.4577 4.5747 4.7271 4.8382 5.0086 5.5800 5.8020 6.0317 6.3754 6.5827 6.6970 6.7474 6.9245 7.0790 7.1820 7.2121 7.3257 7.3865 7.8607 8.4146 8.4733 9.0201 16.4980 27.1462\nend\n\n```\n\nThe first line contains the keyword `eigenvalues` followed by the number of orbitals. The following line contains\n eigenvalues as they appear in GAMESS or similar output. The file ends with the keyword `end`.\n\n## Jastrow parameters file\nThe Jastrow parameters can be provided using this file. It has the following format [Example: water].\n\n```python\njastrow_parameter   1\n  5  5  0           norda,nordb,nordc\n   0.60000000         scalek\n   0.00000000   0.00000000  -0.41907755  -0.22916790  -0.04194614   0.08371252 (a(iparmj),iparmj=1,nparma)\n   0.00000000   0.00000000  -0.09956809  -0.00598089   0.00503028   0.00600649 (a(iparmj),iparmj=1,nparma)\n   0.50000000   0.36987319   0.06971895   0.00745636  -0.00306208  -0.00246314 (b(iparmj),iparmj=1,nparmb)\n (c(iparmj),iparmj=1,nparmc)\n (c(iparmj),iparmj=1,nparmc)\nend\n```\n\nThe set `a` should appear for each unique atom type (in the same order as in the .xyz file).\n\nThe set `b` should appear once.\n\nThree-body Jastrow terms `c` should appear for each unique atom type (in the same order as in the .xyz file)\n\n\n## Jastrow derivatives file\nThe Jastrow derivative parameters can be provided using this file. It has the following format [Example: water].\n\n```python\njasderiv\n4 4 5 15 15 0 0 nparma,nparmb,nparmc,nparmf\n  3 4 5 6 (iwjasa(iparm),iparm=1,nparma)\n  3 4 5 6 (iwjasa(iparm),iparm=1,nparma)\n2 3 4 5 6 (iwjasb(iparm),iparm=1,nparmb)\n3 5 7 8 9         11 13 14 15 16     17 18 20 21 23 (c(iparmj),iparmj=1,nparmc)\n3 5 7 8 9         11 13 14 15 16     17 18 20 21 23 (c(iparmj),iparmj=1,nparmc)\nend\n```\n"
      },
      "source": "https://raw.githubusercontent.com/filippi-claudia/champ/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Geometry in the (XYZ in Bohr units) format to be read from a separate .xyz file.",
        "parent_header": [
          "Preparing the input files",
          "Molecular coordinates"
        ],
        "type": "Text_excerpt",
        "value": "![Logo](https://github.com/filippi-claudia/champ/blob/main//docs/logo_small.jpg?raw=true)\n\n[![CHAMP release build with Intel](https://github.com/filippi-claudia/champ/actions/workflows/build_champ_intel.yml/badge.svg)](https://github.com/filippi-claudia/champ/actions/workflows/build_champ_intel.yml) [![CHAMP debug build with Intel and GNU](https://github.com/filippi-claudia/champ/actions/workflows/debug_champ_intel_and_gnu.yml/badge.svg)](https://github.com/filippi-claudia/champ/actions/workflows/debug_champ_intel_and_gnu.yml) [![CHAMP with QMCkl and TREXIO build with Intel](https://github.com/filippi-claudia/champ/actions/workflows/build_champ_trexio_qmckl.yml/badge.svg)](https://github.com/filippi-claudia/champ/actions/workflows/build_champ_trexio_qmckl.yml) [![Build Docker Image](https://github.com/filippi-claudia/champ/actions/workflows/docker-image.yml/badge.svg)](https://github.com/filippi-claudia/champ/actions/workflows/docker-image.yml) [![Publish Docker image](https://github.com/filippi-claudia/champ/actions/workflows/docker-publish.yml/badge.svg?branch=main)](https://github.com/filippi-claudia/champ/actions/workflows/docker-publish.yml) [![TREXIO python interface](https://github.com/filippi-claudia/champ/actions/workflows/test_python.yml/badge.svg)](https://github.com/filippi-claudia/champ/actions/workflows/test_python.yml)\n\n\n![Github Issues](https://img.shields.io/github/issues/filippi-claudia/champ) ![Github Pull Requests](https://img.shields.io/github/issues-pr/filippi-claudia/champ) ![Github Last Commit](https://img.shields.io/github/last-commit/filippi-claudia/champ) [![Commit Activity](https://img.shields.io/github/commit-activity/w/filippi-claudia/champ)](https://img.shields.io/github/commit-activity/t/filippi-claudia/champ\n)\n\n![Last release tag](https://img.shields.io/github/v/tag/filippi-claudia/champ) ![Github forks](https://img.shields.io/github/forks/filippi-claudia/champ) ![Github stars](https://img.shields.io/github/stars/filippi-claudia/champ) ![Repo Size](https://img.shields.io/github/repo-size/filippi-claudia/champ) ![Code Size](https://img.shields.io/github/languages/code-size/filippi-claudia/champ)\n\n![Github license](https://img.shields.io/github/license/filippi-claudia/champ)\n\n\n\n\nThe Cornell-Holland Ab-initio Materials Package (CHAMP) is a quantum Monte Carlo suite of programs for electronic structure calculations of atomic and molecular systems. The code is a sister code of the homonymous program originally developed by Cyrus Umrigar and Claudia Filippi of which it retains the accelerated Metropolis method and the efficient diffusion Monte Carlo algorithms.\n\nThe European branch of the code is currently developed by Claudia Filippi and Saverio Moroni,\nwith significant contributions by Ravindra Shinde, Nicolas Renaud, Victor Azizi, Edgar Landinez, and Stuart Shepard.\n\n\n\n\n\n\nCHAMP has three basic capabilities:\n\n* Metropolis or variational Monte Carlo (VMC)\n* Diffusion Monte Carlo (DMC)\n* Optimization of many-body wave functions by energy minimization (VMC) for ground and excited states\n\nNoteworthy features of CHAMP are:\n\n* Efficient wave function optimization also in a state-average and a state-specific fashion for multiple states of the same symmetry (VMC)\n* Efficient computation of analytical interatomic forces (VMC)\n* Compact formulation for a fast evaluation of multi-determinant expansions and their derivatives (VMC and DMC)\n* Multiscale VMC and DMC calculations in classical point charges (MM), polarizable continuum model (PCM), and polarizable force fields (MMpol)\n\n**Note**\n\nThe code is available for free under the GPL-3.0 license. Developers and contributors are welcome to use and contribute back to the code. If you have used the code for your publications, please cite this source.\n\n**Usual disclaimer**\n\nThe authors make no claims about the correctness of the program suite and people who use it do so at their own risk.\n\n------------------------------------------------------------------------\n\nCHAMP utilizes various other program packages:\n\n1. [Parser](https://github.com/neelravi/mpi-libfdf-parser):\n   An easy-to-use and easy-to-extend keyword-value pair-based input file parser written in Fortran 2008.  This parser uses a heavily modified libFDF library and is written by [Ravindra Shinde](https://github.com/neelravi). It can parse keyword-value pairs, blocks of data, and general variables with different physical units in an order-independent manner. Our implementation can handle multiple data types and file formats. The parser is kept as a library in the code, however, it can be easily adapted by any other Fortran-based code.\n\n2. [TREXIO](https://github.com/TREX-CoE/trexio):\n   TREXIO is an open-source file format and library developed for the storage and manipulation of data produced by quantum chemistry calculations. CHAMP can read the starting wavefunction from a trexio file. The library has interfaces to a lot of quantum chemical programs.\n   CHAMP can directly read the contents of this file with a single load statement in the input file. This library is currently optional.\n\n  <p align=\"center\">\n    <img src=\"docs/trexio.png\" alt=\"trexio interface\" width=\"150\"/>\n  </p>\n\n\n3. [TREXIO Tools](https://github.com/TREX-CoE/trexio_tools):\n   We provide a Python package inside the CHAMP's tool directory to extract all the necessary information from a TREXIO file in the hdf5 file format to a human-readable text format. This allows one to bypass the TREXIO library within CHAMP and input the necessary data via the Parser (see Option 2 in Section \"Preparing the Input File\" below).\n\n4. [QMCKL](https://github.com/TREX-CoE/qmckl):\n  This library provides a high-performance implementation of the main kernels of Quantum Monte Carlo methods. This library is currently optional.\n\n------------------------------------------------------------------------\n### CHAMP in a container\n\nCHAMP is available as a container image from Dockerhub. Here are the instructions to obtain the images:\n\n1. CHAMP built with Intel oneAPI compilers:\n\t- `docker pull neelravi/champ:latest`\n \t- `docker pull neelravi/champ:intel`\n  \t- `docker pull neelravi/champ:intel-trexio`\n2. CHAMP built with GNU compilers\n   \t- `docker pull neelravi/champ:2.3.0`\n   \t- `docker pull neelravi/champ:gnu`\n   \t- `docker pull neelravi/champ:gnu-trexio`\n------------------------------------------------------------------------\n\n### Compiling CHAMP for the source\n#### Requirements\n1. cmake >= 3.17\n2. gfortran/gcc >= 9.3.0 or Intel Fortran 2020 onwards\n3. BLAS/LAPACK or Intel MKL\n4. openMPI >= 3.0 or Intel MPI\n5. [Optional] TREXIO library >= 2.4.0\n6. [Optional] QMCkl library >= 1.0.0\n7. [Optional] doxygen (for documentation)\n\n\n### Installation Using CMake\nTo install **Champ** using [cmake](https://cmake.org/) you need to run the following commands:\n```\ncmake -H. -Bbuild\ncmake --build build -- -j4\n```\nThe first command is only required to set up the build directory and needs to be\nexecuted only once. Compared to the previous Makefiles the dependencies for the\ninclude files (e.g include/vmc.h) are correctly setup and no `--clean-first` is\nrequired.\n\n#### CMAKE Options\n\nTo select a given compiler, you can type:\n```\ncmake -H. -Bbuild -D CMAKE_Fortran_COMPILER=mpif90\n```\nTo use LAPACK and BLAS installed locally, include the path to the libraries:\n```\ncmake -H. -Bbuild \\\n\t-DCMAKE_Fortran_COMPILER=mpif90 \\\n\t-DBLAS_blas_LIBRARY=/home/user/lib/BLAS/blas_LINUX.a \\\n\t-DLAPACK_lapack_LIBRARY=/home/user/lib/LAPACK/liblapack.a\n```\nTo enable/disable vectorization based on the architecture:\n```bash\ncmake -H. -Bbuild -DCMAKE_Fortran_COMPILER=mpif90 -DVECTORIZED=yes/no/auto\n```\n\nTo compile only e.g. VMC serial:\n```\ncmake --build build --target vmc.mov1\n```\nClean and build:\n```\ncmake --build build --clean-first\n```\n\n#### CMAKE Recipes\n\nHere are a couple of recipes for commonly used computing facilities, which can be easily adapted.\n* **Snellius** (snellius.surfa.nl):\n\t- To compile the code, first load the required modules:\n\t\t```bash\n\t\tmodule purge\n\t\tmodule load 2022\n\t\tmodule load intel/2022a\n\t\tmodule load HDF5/1.12.2-iimpi-2022a\n\t\t```\n\t\tthen set-up the build:\n\t\t```bash\n\t\tcmake -H. -Bbuild -DCMAKE_Fortran_COMPILER=mpiifort\n\t\t```\n\t\tOptionally, you may link the trexio library using the following command:\n\t\t```bash\n\t\tcmake -S. -Bbuild  \\\n  \t\t\t-DCMAKE_Fortran_COMPILER=mpiifort  \\\n  \t\t\t-DENABLE_TREXIO=ON  \\\n  \t\t\t-DTREXIO_LIBRARY=$HOME/lib/libtrexio.so  \\\n  \t\t\t-DTREXIO_INCLUDE_DIR=$HOME/include/\n\t\t```\n\t\tand finally build:\n\t\t```bash\n\t\tcmake --build build -j8 --clean-first\n\t\t```\n\t- To run the code, you need to submit a job to the queue system:\n\t\t```bash\n\t\tsbatch job.cmd\n\t\t```\n\t\twhere `job.cmd` is a SLURM script for `genoa` partition that looks like this:\n\n\t\t```bash\n\t\t#!/bin/bash\n        #SBATCH -t 0-12:00:00            # time in (day-hours:min:sec)\n        #SBATCH -N 1                     # number of nodes (change this number to use more nodes)\n        #SBATCH --ntasks-per-node 192    # tasks per node (Use 192 for genoa and 128 for rome partition)\n        #SBATCH -J vmc                   # name of the job\n        #SBATCH -o vmc.%j.out            # std output file name for slurm\n        #SBATCH -e vmc.%j.err            # std error file name for slurm\n        #SBATCH --exclusive              # specific requirements about node\n        #SBATCH --partition genoa        # partition (queue)\n        #\n        module purge\n        module load 2022\n        module load intel/2022a\n        module load HDF5/1.12.2-iimpi-2022a\n        #\n        export I_MPI_PMI_LIBRARY=/usr/lib64/libpmi2.so\n        cd $PWD\n\t\tsrun champ/bin/vmc.mov1 -i input.inp -o output.out -e error\n\t\t```\n* **CCPhead**:\n\t- To build with mpiifort, load the required modules of the Intel Compiler and MPI:\n\n\t\t```bash\n \t\tmodule load cmake/latest\n \t\tmodule load compiler-rt/latest\n \t\tmodule load debugger/latest\n \t\tmodule load compiler/latest\n \t\tmodule load icc/latest\n \t\tmodule load mpi/latest\n \t\tmodule load hdf5/latest\n \t\tmodule load tbb/latest\n \t\tmodule load dpl/latest\n \t\tmodule load dev-utilities/latest\n \t\tmodule load mkl/latest\n \t\tmodule load trexio/latest\n \t\t```\n\t\tSetup the build:\n\t\t```\n\t\tcmake -H. -Bbuild -DCMAKE_Fortran_COMPILER=mpiifort\n\t\t```\n\t- To enable TREXIO library:\n\t\t```\n\t\tcmake -H. -Bbuild  \\\n  \t\t\t-DCMAKE_Fortran_COMPILER=mpiifort -DENABLE_TREXIO=ON  \\\n  \t\t\t-DTREXIO_LIBRARY=/software/libraries/trexio/latest/lib/libtrexio.so  \\\n\t\t\t-DTREXIO_INCLUDE_DIR=/software/libraries/trexio/latest/include/\n\t\t```\n\t- To disable vectorization of the code:\n\t\t```\n\t\tcmake -H. -Bbuild -DCMAKE_Fortran_COMPILER=mpiifort -DVECTORIZED=no\n\t\t```\n\n\t- To run the code, you need to submit a job to the queue system:\n\t\t```bash\n\t\tsbatch job.cmd\n\t\t```\n\t\twhere `job.cmd` is a SLURM script for `genoa` partition that looks like this:\n\n\t\t```bash\n\t\t#!/bin/bash\n\t\t#SBATCH -t 2-0\n\t\t#SBATCH -p ccp22\n\t\t#SBATCH -N 2 --exclusive --ntasks-per-node 32\n\t\t#SBATCH -J champ\n\t\t#SBATCH --output=o%j\n\t\t#SBATCH --ntasks-per-core=1\n\t\t#SBATCH --error=e%j\n\n \t\tmodule load compiler-rt/latest\n \t\tmodule load debugger/latest\n \t\tmodule load compiler/latest\n \t\tmodule load icc/latest\n \t\tmodule load mpi/latest\n \t\tmodule load hdf5/latest\n \t\tmodule load tbb/latest\n \t\tmodule load dpl/latest\n \t\tmodule load dev-utilities/latest\n \t\tmodule load mkl/latest\n \t\tmodule load trexio/latest\n\n\t \tcd $PWD\n\t\tmpirun -np 64 champ/bin/vmc.mov1 -i input.inp -o output.out -e error\n\t\t```\n\n \t- To build with gfortran:\n\n\t\tSetup the build:\n\t\t```\n\t\tcmake -H. -Bbuild -DCMAKE_Fortran_COMPILER=/usr/bin/mpif90\n\t\t```\n\t\twhich will use LAPACK & BLAS from the Ubuntu repository. (Cmake should find them already if none of the Intel MKL variables are set.) Combining gfortran with the Intel MKL is possible but requires special care to work with the compiler flag `-mcmodel=large`.\n\t- To run the code:\n\t\t```\n\t\tmpirun -s all -np \"n process\" -machinefile \"machinefile\"\n\t\t```\n* **Ubuntu desktop**:\n\t- Ubuntu 20:\n\t\tInstall the required packages:\n\t\t```\n\t\tsudo apt install gfortran openmpi-bin libopenmpi-dev gawk libblacs-mpi-dev liblapack-dev\n\t\t```\n\t\tSet-up the build:\n\t\t```\n\t\tcmake -H. -Bbuild -DCMAKE_Fortran_COMPILER=mpifort\n\t\t```\n\t\tBuild:\n\t\t```\n\t\tcmake --build build -- -j2\n\t\t```\n\t\tTo run in parallel:\n\t\t```\n\t\tmpirun --stdin all -n 2 path_to_CHAMP/bin/vmc.mov1 -i vmc.inp -o vmc.out -e error\n\t\t```\n\t- Ubuntu 18:\n\tInstall the dependencies using conda instead of apt\n\t- WSL:\n\tThe code also compiles on WSL.\n------------------------------------------------------------------------\n\n## User's manual and documentation\nThe user's manual and documentation is hosted at [https://trex-coe.github.io/champ-user-manual/](https://trex-coe.github.io/champ-user-manual)\n\n\n# Preparing the input files\n\nCHAMP needs the following input files to describe a system\n1. Geometry\n1. ECP / Pseudopotentials\n1. Basis Set (Radial Grid files)\n1. Basis pointers\n1. MO coefficients\n1. Determinants and/or CSF files\n1. Molecular orbital symmetries (Optional)\n1. Molecular orbital eigenvalues (Optional)\n1. Jastrow parameters file\n1. Jastrow derivative parameters file (Optional)\n\n\nCHAMP input file itself has a modular structure. For example,\n\n```\n1. general\n2. electrons\n3. blocking_vmc\n4. blocking_dmc\n5. optwf\n6. ...\n```\n\n\n## Option 1 (Using trexio file)\n\nWe can use trexio file (in hdf5 or text backend format) to specify all the inputs (except Jastrow and Jastrow derivatives)\n\nA sample input file would look like:\n\n```perl\n%module general\n    title           'VMC Calculation for a molecule'\n    pool            './pool/'\n    mode            'vmc_one_mpi'\n    ipr \t    -1\n%endmodule\n\nload trexio          molecule.hdf5\nload determinants    determinants.det\nload jastrow         jastrow.jas\n\n%module electrons\n    nup           20\n    nelec         40\n%endmodule\n\n\n%module blocking_vmc\n    vmc_nstep     20\n    vmc_nblk      100000\n    vmc_nblkeq    1\n    vmc_nconf_new 0\n%endmodule\n```\n\n### Obtaining a trexio file from GAMESS-US output\n\nMake sure that the recent version of `trexio_tools` has been installed.\n```bash\npip install trexio_tools\n```\n\nThis will provide `trexio` executable in the path. Use the following command to generate a trexio file.\n\n```bash\ntrexio convert-from --type gamess --input gamess_output.out --motype \"RHF\" victor.hdf5 --back_end=HDF5\n```\nAllowed values of MOtype are `'RHF', 'ROHF', 'MCSCF', 'NATURAL', 'GUGA' ...`\n\n> **NOTE** : Use `trexio --help` for a verbose list of options.\n\n## Option 2 (Specification using individual text files)\n\nThe trexio file can be converted into several text files to be used with CHAMP. The Python converter is provided in the CHAMP's repository in the `champ/tools/trex_tools` folder.\n\nA sample script is given below:\n\n```python\npython3 /home/user/champ/tools/trex_tools/trex2champ.py \\\n\t--trex \t\"COH2_GS.trexio\" \\\n\t--backend\t\"HDF5\" \\\n\t--basis_prefix  \"BFD-aug-cc-pVDZ\" \\\n\t--lcao \\\n\t--ecp \\\n\t--sym \\\n\t--geom \\\n\t--basis \\\n\t--det\n```\n\n\n> **NOTE** : Use `python3 trex2champ.py --help` for a verbose list of options.\n\n## Molecular coordinates\n\nMolecular coordinates can be provided directly in the vmc or dmc input files using the `%block` structure of the parser.\n\nThe following are the valid examples\n\n1. ### Geometry in the (XYZ in Bohr units) format with automatic Zvalence\n```perl\n%block molecule\n10\n# molecular complex (Symbol, X,Y,Z in Bohr)\n  Si  -0.59659972  0.06162019  0.21100680\n  S   -2.60025162 -2.54807062 -2.52884266\n  S    2.14594449  2.17606672 -2.44253887\n  S    1.75703132 -2.78062975  2.53564756\n  S   -1.40663455  3.06742023  3.14712509\n  H   -3.50597461  0.49044059  0.39864337\n  H    0.96753971  3.57914102  3.86259992\n  H   -0.57825615 -3.70197321 -3.52433897\n  H    0.37416575  3.66039924 -3.47898554\n  H   -0.21164931 -3.70953211  3.82669513\n%endblock\n```\n\n2. ### Geometry in the (XYZ in Bohr units) format with explicit Zvalence. This also allows different labels for the same element.\n```perl\n%block molecule\n10\n# molecular complex (Symbol, X,Y,Z in Bohr, Zvalence)\n  Si   -0.59659972  0.06162019  0.21100680    4.0\n  S    -2.60025162 -2.54807062 -2.52884266    6.0\n  S     2.14594449  2.17606672 -2.44253887    6.0\n  S     1.75703132 -2.78062975  2.53564756    6.0\n  S    -1.40663455  3.06742023  3.14712509    6.0\n  H1   -3.50597461  0.49044059  0.39864337    1.0\n  H2    0.96753971  3.57914102  3.86259992    1.0\n  H2   -0.57825615 -3.70197321 -3.52433897    1.0\n  H2    0.37416575  3.66039924 -3.47898554    1.0\n  H2   -0.21164931 -3.70953211  3.82669513    1.0\n%endblock\n```\n\n3. ### Geometry in the (XYZ in Bohr units) format to be read from a separate .xyz file.\n\n` %block molecule < molecule.xyz `\n\n4. ### Geometry in the (XYZ in Bohr units) format to be read from a separate .xyz file.\n\n` load molecule  molecule.xyz `\n\n"
      },
      "source": "https://raw.githubusercontent.com/filippi-claudia/champ/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "ECP / Pseudopotential files",
        "parent_header": [
          "Preparing the input files"
        ],
        "type": "Text_excerpt",
        "value": "ECP or pseudopotential files have a fixed format. Most of the BFD ECP files can be found in the `champ/pool/BFD/ECP_champ` folder. The files generated from the trexio file can also be used (except if it is coming from GAMESS. In this case, GAMESS truncates the digits of ECP information in its output, so the trexio file will not have all the digits stored.)\n\nFile format: BFD ECP for Silicon\n\n`BFD.gauss_ecp.dat.Si`\n\n```perl\nBFD Si pseudo\n3\n3\n4.00000000 1 1.80721061\n7.22884246 3 9.99633089\n-13.06725590 2 2.50043232\n1\n21.20531613 2 2.26686403\n1\n15.43693603 2 2.11659661\n```\nThese files are generally kept in the `pool` directory of the calculation folder. You just need to specify the name `BFD` in the general module of the CHAMP input file under the keyword `pseudopot`. There should be a file for each type of an atom.\n\n```python\n%module general\n    title           'VMC Calculation for a molecule'\n    pool            './pool/'\n    mode            'vmc_one_mpi'\n    pseudopot       BFD\n    basis           ccpVTZ\n    ipr             -1\n%endmodule\n```\n"
      },
      "source": "https://raw.githubusercontent.com/filippi-claudia/champ/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Basis set (Basis on the radial grid) files",
        "parent_header": [
          "Preparing the input files"
        ],
        "type": "Text_excerpt",
        "value": "Basis files have a fixed format. The files generated from the trex2champ converter can also be used as they are.\nThese files are generally kept in the `pool` directory of the calculation folder. You just need to specify the name of the basis file (say, `ccpVTZ`) in the general module of the CHAMP input file under the keyword `basis`. This will read the file `ccpVTZ.basis.Si` for the element `Si`.\n\nThe top few lines of `BFD-T.basis.C` look like\n\n```python\n9 3 2000 1.003000 20.000000 0\n 0.000000000000e+00  5.469976184517e-01  2.376319920758e+00  5.557936498748e-01  3.412818210005e+00  2.206803021951e-01  8.610719484857e-01  3.738901952004e-01  3.289926074834e+00  1.106692909826e+00\n 1.508957441883e-04  5.469976454488e-01  2.376319870895e+00  5.557936481942e-01  3.412817957941e+00  2.206803015581e-01  8.610719410992e-01  3.738901923954e-01  3.289925989316e+00  1.106692890335e+00\n ...\n ```\nThis means there are 9 radial shells in the basis set of carbon put on a radial grid of 2000 points (up to 20 bohr).\n\n"
      },
      "source": "https://raw.githubusercontent.com/filippi-claudia/champ/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Basis pointers (formerly bfinfo) files",
        "parent_header": [
          "Preparing the input files"
        ],
        "type": "Text_excerpt",
        "value": "The new format of the basis pointers file is given below. This file should be kept in the `pool` directory.\nThis file is generated automatically by the `trex2champ.py` converter.\n\n```python\n# Format of the new basis information file champ_v3\n# num_ao_per_center, n(s), n(p), n(d), n(f), n(g)\n# Index of Slm (Range 1 to 35)\n# Index of the column from numerical basis file\nqmc_bf_info 1\n54 4 4 3 2 0\n1 1 1 1 2 3 4 2 3 4 2 3 4 2 3 4 5 6 7 8 9 10 5 6 7 8 9 10 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 11 12 13 14 15 16 17 18 19 20\n1 2 3 4 5 5 5 6 6 6 7 7 7 8 8 8 9 9 9 9 9 9 10 10 10 10 10 10 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 13 13 13\n35 4 3 2 1 0\n1 1 1 1 2 3 4 2 3 4 2 3 4 5 6 7 8 9 10 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\n1 2 3 4 5 5 5 6 6 6 7 7 7 8 8 8 8 8 8 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10\nend\n```\n\nEach unique type of atom will have a pair of lines in the basis pointers file.\n\nThe first line after the comments `qmc_bf_info 1` is a specification line to make sure that we are reading the basis function information file.\n\nThe second line is for the first unique atom in the system. It contains the number of atomic orbitals for that atom, the number of s-type functions, the number of p-type functions, the number of d-type functions, the number of f-type functions, and the number of g-type functions.\n`num_ao_per_center, n(s), n(p), n(d), n(f), n(g)`\n\nThe third line gives the index of Slm (or real Ylm). The numbers depend on how many radial shells are there in the basis set.\n\nThe fourth line tells which column of the radial grid file to be read for the construction of MO from the AOs.\n\n"
      },
      "source": "https://raw.githubusercontent.com/filippi-claudia/champ/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Molecular Orbitals file",
        "parent_header": [
          "Preparing the input files"
        ],
        "type": "Text_excerpt",
        "value": "This file contains the molecular orbital coefficients. These are arranged as [num_ao, num_mo] array. This file is obtained automatically from the `trex2champ.py` converter. Please note that the AOs in this file follow the trexio convention of AO ordering.\n\nFor example,\nFour p-type shells of AOs will be arranged alphabetically as\n\n`X Y Z   X Y Z   X Y Z   X Y Z`\n\nTwo d-type shells of AOs will be arranged alphabetically as\n\n`XX XY XZ YY YZ ZZ   XX XY XZ YY YZ ZZ`\n\nand so on.\n\nThe `.lcao` or `.orb` file has the following format.\n\n```python\nlcao  226 200  1\n...\n...\n\nend\n```\n\nThe number 226 will be the number of AOs, 200 will be the number of orbitals, and 1 will be the number of types of orbitals.\n"
      },
      "source": "https://raw.githubusercontent.com/filippi-claudia/champ/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Determinants and/or CSF file",
        "parent_header": [
          "Preparing the input files"
        ],
        "type": "Text_excerpt",
        "value": "The determinant file is automatically obtained from the `trex2champ.py` converter. Note that the `trex2champ.py` can also provide CSF and CSF map information if the corresponding GAMESS output file is provided with `--gamess` option.\n\nThe below is a typical file.\n\n```python\n# Determinants, CSF, and CSF mapping from the GAMESS output / TREXIO file.\n# Converted from the trexio file using trex2champ converter https://github.com/TREX-CoE/trexio_tools\ndeterminants 36 1\n-0.92276500 0.08745570 0.08745570 -0.03455773 -0.03455773 0.15892000 -0.00958342 -0.00958342 0.03141700 0.06827967 0.06827967 -0.02315988 -0.02315988 0.01639443 -0.00751472 0.00887972 0.00887972 -0.00751472 0.01639443 0.14336029 0.14336029 -0.06358518 -0.06358518 -0.00177625 -0.00177625 -0.01588657 -0.01588657 0.16425900 0.02504927 0.02504927 0.11380000 0.00560594 0.00560594 0.01069429 0.01069429 -0.04482000\n   1    2    3    4    5    6    7    8    9   10   11      1    2    3    4    5    6    7    8    9   10   11\n   1    2    3    4    5    6    7    8    9   10   11      1    2    3    4    5    6    7    8    9   10   13\n   1    2    3    4    5    6    7    8    9   10   13      1    2    3    4    5    6    7    8    9   10   11\n   1    2    3    4    5    6    7    8    9   10   11      1    2    3    4    5    6    7    8    9   11   13\n   1    2    3    4    5    6    7    8    9   11   13      1    2    3    4    5    6    7    8    9   10   11\n   1    2    3    4    5    6    7    8    9   10   13      1    2    3    4    5    6    7    8    9   10   13\n   1    2    3    4    5    6    7    8    9   10   13      1    2    3    4    5    6    7    8    9   11   13\n   1    2    3    4    5    6    7    8    9   11   13      1    2    3    4    5    6    7    8    9   10   13\n   1    2    3    4    5    6    7    8    9   11   13      1    2    3    4    5    6    7    8    9   11   13\n   1    2    3    4    5    6    7    8    9   10   11      1    2    3    4    5    6    7    8    9   10   12\n   1    2    3    4    5    6    7    8    9   10   12      1    2    3    4    5    6    7    8    9   10   11\n   1    2    3    4    5    6    7    8    9   10   11      1    2    3    4    5    6    7    8    9   11   12\n   1    2    3    4    5    6    7    8    9   11   12      1    2    3    4    5    6    7    8    9   10   11\n   1    2    3    4    5    6    7    8    9   10   11      1    2    3    4    5    6    7    8    9   12   13\n   1    2    3    4    5    6    7    8    9   10   13      1    2    3    4    5    6    7    8    9   11   12\n   1    2    3    4    5    6    7    8    9   10   12      1    2    3    4    5    6    7    8    9   11   13\n   1    2    3    4    5    6    7    8    9   11   13      1    2    3    4    5    6    7    8    9   10   12\n   1    2    3    4    5    6    7    8    9   11   12      1    2    3    4    5    6    7    8    9   10   13\n   1    2    3    4    5    6    7    8    9   12   13      1    2    3    4    5    6    7    8    9   10   11\n   1    2    3    4    5    6    7    8    9   10   13      1    2    3    4    5    6    7    8    9   10   12\n   1    2    3    4    5    6    7    8    9   10   12      1    2    3    4    5    6    7    8    9   10   13\n   1    2    3    4    5    6    7    8    9   11   13      1    2    3    4    5    6    7    8    9   11   12\n   1    2    3    4    5    6    7    8    9   11   12      1    2    3    4    5    6    7    8    9   11   13\n   1    2    3    4    5    6    7    8    9   10   13      1    2    3    4    5    6    7    8    9   12   13\n   1    2    3    4    5    6    7    8    9   12   13      1    2    3    4    5    6    7    8    9   10   13\n   1    2    3    4    5    6    7    8    9   11   13      1    2    3    4    5    6    7    8    9   12   13\n   1    2    3    4    5    6    7    8    9   12   13      1    2    3    4    5    6    7    8    9   11   13\n   1    2    3    4    5    6    7    8    9   10   12      1    2    3    4    5    6    7    8    9   10   12\n   1    2    3    4    5    6    7    8    9   10   12      1    2    3    4    5    6    7    8    9   11   12\n   1    2    3    4    5    6    7    8    9   11   12      1    2    3    4    5    6    7    8    9   10   12\n   1    2    3    4    5    6    7    8    9   11   12      1    2    3    4    5    6    7    8    9   11   12\n   1    2    3    4    5    6    7    8    9   10   12      1    2    3    4    5    6    7    8    9   12   13\n   1    2    3    4    5    6    7    8    9   12   13      1    2    3    4    5    6    7    8    9   10   12\n   1    2    3    4    5    6    7    8    9   11   12      1    2    3    4    5    6    7    8    9   12   13\n   1    2    3    4    5    6    7    8    9   12   13      1    2    3    4    5    6    7    8    9   11   12\n   1    2    3    4    5    6    7    8    9   12   13      1    2    3    4    5    6    7    8    9   12   13\nend\ncsf 20 2\n0.92276500 -0.12368100 0.04887200 -0.15892000 0.01355300 -0.03141700 -0.09656200 0.03275300 0.02839600 -0.20274200 -0.00136500 0.08992300 -0.00251200 -0.02246700 -0.16425900 -0.03542500 -0.11380000 0.00792800 0.01512400 0.04482000\n0.13390600 -0.08999000 -0.04327600 0.07929200 0.06217900 -0.00658100 0.96025800 -0.00444100 0.01898800 0.15434900 -0.04594200 -0.01868700 0.00187600 0.04520300 -0.06578900 -0.04536600 0.04834200 -0.00269300 -0.04316900 -0.02239200\nend\ncsfmap\n20 36 40\n1\n  1  -1.000000\n2\n  2  -0.707107\n  3  -0.707107\n2\n  4  -0.707107\n  5  -0.707107\n1\n  6  -1.000000\n2\n  7  -0.707107\n  8  -0.707107\n1\n  9  -1.000000\n2\n  10  -0.707107\n  11  -0.707107\n2\n  12  -0.707107\n  13  -0.707107\n6\n  14  0.577350\n  15  -0.288675\n  16  0.288675\n  17  0.288675\n  18  -0.288675\n  19  0.577350\n2\n  20  -0.707107\n  21  -0.707107\n4\n  15  -0.500000\n  16  -0.500000\n  17  -0.500000\n  18  -0.500000\n2\n  22  -0.707107\n  23  -0.707107\n2\n  24  0.707107\n  25  0.707107\n2\n  26  0.707107\n  27  0.707107\n1\n  28  -1.000000\n2\n  29  -0.707107\n  30  -0.707107\n1\n  31  -1.000000\n2\n  32  0.707107\n  33  0.707107\n2\n  34  0.707107\n  35  0.707107\n1\n  36  -1.000000\nend\n```\n"
      },
      "source": "https://raw.githubusercontent.com/filippi-claudia/champ/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Molecular orbital symmetries file [Optional; useful when doing orbital optimization]",
        "parent_header": [
          "Preparing the input files"
        ],
        "type": "Text_excerpt",
        "value": "This file is also generated using the `trex2champ.py` converter if the parent .hdf5 file contains the orbital symmetries.\n\nA typical file looks like this:\n\n```python\nsym_labels 4 226\n 1 AG 2 AU 3 BG 4 BU\n1 4 4 1 1 4 1 4 1 2 3 2 3 4 1 4 1 4 4 1 1 4 4 1 4 1 3 1 4 1 2 4 1 2 4 1 3 2 4 3 2 1 4 4 3 1 1 4 4 4 2 1 3 1 4 1 1 4 1 4 3 1 4 2 2 3 1 4 1 4 1 1 4 2 3 4 1 4 2 1 3 1 4 1 4 2 4 4 1 3 4 1 3 4 2 1 2 3 4 1 2 4 1 3 4 2 3 1 1 4 4 1 2 1 3 1 4 1 4 2 3 4 1 4 2 1 4 3 1 4 2 3 2 3 4 1 2 3 1 2 4 2 3 4 1 4 3 2 1 1 3 4 4 1 4 1 2 4 1 3 1 2 4 4 4 3 1 1 3 1 1 2 2 4 4 2 1 4 3 1 1 4 3 4 2 1 1 2 4 3 4 3 2 1 3 4 1 3 1 4 4 2 1 4 1 4 1 1 4 4 4 1 1 1 4 1 4 4 1 4 1 4 1 4 1 4\nend\n```\n\nThe numbers in front of irreducible representations are used as correspondence to identify the symmetry type of each orbital. Here in this case there are 226 molecular orbitals with 4 irreps.\n"
      },
      "source": "https://raw.githubusercontent.com/filippi-claudia/champ/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Molecular orbital eigenvalues file [Optional]",
        "parent_header": [
          "Preparing the input files"
        ],
        "type": "Text_excerpt",
        "value": "This file is also generated using the `trex2champ.py` converter if the parent .hdf5 file contains the orbital eigenvalues.\n\nA typical file looks like this:\n\n```python\n# File created using the trex2champ converter https://github.com/TREX-CoE/trexio_tools\n# Eigenvalues correspond to the RHF orbitals\neigenvalues 64\n-1.3659 -0.7150 -0.5814 -0.5081 0.1201 0.1798 0.4846 0.5148 0.5767 0.6085 0.7153 0.7820 0.8691 0.8699 0.9642 1.2029 1.4091 1.4388 1.6082 1.6342 2.0787 2.1179 2.1776 2.2739 2.4123 2.5591 2.8217 3.3480 3.3840 3.4544 3.4607 3.6199 3.6237 3.9628 3.9661 4.0439 4.0481 4.2212 4.3500 4.4225 4.4577 4.5747 4.7271 4.8382 5.0086 5.5800 5.8020 6.0317 6.3754 6.5827 6.6970 6.7474 6.9245 7.0790 7.1820 7.2121 7.3257 7.3865 7.8607 8.4146 8.4733 9.0201 16.4980 27.1462\nend\n\n```\n\nThe first line contains the keyword `eigenvalues` followed by the number of orbitals. The following line contains\n eigenvalues as they appear in GAMESS or similar output. The file ends with the keyword `end`.\n"
      },
      "source": "https://raw.githubusercontent.com/filippi-claudia/champ/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Jastrow parameters file",
        "parent_header": [
          "Preparing the input files"
        ],
        "type": "Text_excerpt",
        "value": "The Jastrow parameters can be provided using this file. It has the following format [Example: water].\n\n```python\njastrow_parameter   1\n  5  5  0           norda,nordb,nordc\n   0.60000000         scalek\n   0.00000000   0.00000000  -0.41907755  -0.22916790  -0.04194614   0.08371252 (a(iparmj),iparmj=1,nparma)\n   0.00000000   0.00000000  -0.09956809  -0.00598089   0.00503028   0.00600649 (a(iparmj),iparmj=1,nparma)\n   0.50000000   0.36987319   0.06971895   0.00745636  -0.00306208  -0.00246314 (b(iparmj),iparmj=1,nparmb)\n (c(iparmj),iparmj=1,nparmc)\n (c(iparmj),iparmj=1,nparmc)\nend\n```\n\nThe set `a` should appear for each unique atom type (in the same order as in the .xyz file).\n\nThe set `b` should appear once.\n\nThree-body Jastrow terms `c` should appear for each unique atom type (in the same order as in the .xyz file)\n\n"
      },
      "source": "https://raw.githubusercontent.com/filippi-claudia/champ/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Jastrow derivatives file",
        "parent_header": [
          "Preparing the input files"
        ],
        "type": "Text_excerpt",
        "value": "The Jastrow derivative parameters can be provided using this file. It has the following format [Example: water].\n\n```python\njasderiv\n4 4 5 15 15 0 0 nparma,nparmb,nparmc,nparmf\n  3 4 5 6 (iwjasa(iparm),iparm=1,nparma)\n  3 4 5 6 (iwjasa(iparm),iparm=1,nparma)\n2 3 4 5 6 (iwjasb(iparm),iparm=1,nparmb)\n3 5 7 8 9         11 13 14 15 16     17 18 20 21 23 (c(iparmj),iparmj=1,nparmc)\n3 5 7 8 9         11 13 14 15 16     17 18 20 21 23 (c(iparmj),iparmj=1,nparmc)\nend\n```\n"
      },
      "source": "https://raw.githubusercontent.com/filippi-claudia/champ/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9933986675181917,
      "result": {
        "original_header": "CHAMP in a container",
        "type": "Text_excerpt",
        "value": "1. CHAMP built with Intel oneAPI compilers:\n\t- `docker pull neelravi/champ:latest`\n \t- `docker pull neelravi/champ:intel`\n  \t- `docker pull neelravi/champ:intel-trexio`\n2. CHAMP built with GNU compilers\n   \t- `docker pull neelravi/champ:2.3.0`\n   \t- `docker pull neelravi/champ:gnu`\n   \t- `docker pull neelravi/champ:gnu-trexio`\n------------------------------------------------------------------------\n \n"
      },
      "source": "https://raw.githubusercontent.com/filippi-claudia/champ/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8010568129263953,
      "result": {
        "original_header": "Geometry in the (XYZ in Bohr units) format with automatic Zvalence",
        "type": "Text_excerpt",
        "value": "**Note** \n"
      },
      "source": "https://raw.githubusercontent.com/filippi-claudia/champ/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8545362525224733,
      "result": {
        "type": "Text_excerpt",
        "value": "\n3. :\n   We provide a Python package inside the CHAMP's tool directory to extract all the necessary information from a TREXIO file in the hdf5 file format to a human-readable text format. This allows one to bypass the TREXIO library within CHAMP and input the necessary data via the Parser (see Option 2 in Section \"Preparing the Input File\" below). \n"
      },
      "source": "https://raw.githubusercontent.com/filippi-claudia/champ/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/filippi-claudia/champ/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "GNU General Public License v3.0",
        "spdx_id": "GPL-3.0",
        "type": "License",
        "url": "https://api.github.com/licenses/gpl-3.0",
        "value": "https://api.github.com/licenses/gpl-3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<https://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<https://www.gnu.org/licenses/why-not-lgpl.html>.\n"
      },
      "source": "https://raw.githubusercontent.com/filippi-claudia/champ/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/filippi-claudia/champ/main//docs/logo_small.jpg?raw=true"
      },
      "source": "https://raw.githubusercontent.com/filippi-claudia/champ/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "champ"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "filippi-claudia"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 10078645,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Fortran",
        "size": 2790516,
        "type": "Programming_language",
        "value": "Fortran"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Nemerle",
        "size": 1504372,
        "type": "Programming_language",
        "value": "Nemerle"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 114947,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 106347,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 53567,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 26192,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Awk",
        "size": 2135,
        "type": "Programming_language",
        "value": "Awk"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 1668,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Roff",
        "size": 1150,
        "type": "Programming_language",
        "value": "Roff"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Gnuplot",
        "size": 716,
        "type": "Programming_language",
        "value": "Gnuplot"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Common Lisp",
        "size": 147,
        "type": "Programming_language",
        "value": "Common Lisp"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Assembly",
        "size": 146,
        "type": "Programming_language",
        "value": "Assembly"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "OpenEdge ABL",
        "size": 146,
        "type": "Programming_language",
        "value": "OpenEdge ABL"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Modula-3",
        "size": 145,
        "type": "Programming_language",
        "value": "Modula-3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Nearley",
        "size": 124,
        "type": "Programming_language",
        "value": "Nearley"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Forth",
        "size": 123,
        "type": "Programming_language",
        "value": "Forth"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Brainfuck",
        "size": 119,
        "type": "Programming_language",
        "value": "Brainfuck"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Berry",
        "size": 118,
        "type": "Programming_language",
        "value": "Berry"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/filippi-claudia/champ/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "neelravi",
          "type": "User"
        },
        "date_created": "2024-09-13T13:30:54Z",
        "date_published": "2024-09-13T13:33:38Z",
        "description": "## What's Changed\r\n* Optimizing orbitals with QMCkl by @neelravi in https://github.com/filippi-claudia/champ/pull/275\r\n* Modifications to compile with llvm compilers (aocc-flang) by @krahmouasy in https://github.com/filippi-claudia/champ/pull/277\r\n* CHAMP compilation using NVHPC compiler by @neelravi in https://github.com/filippi-claudia/champ/pull/276\r\n* Bugfix orbital optimization when QMCKL is used by @neelravi in https://github.com/filippi-claudia/champ/pull/278\r\n* Bugfix in transition to freeform f90 version by @neelravi in https://github.com/filippi-claudia/champ/pull/279\r\n* Intel LLVM compiler support added by @neelravi in https://github.com/filippi-claudia/champ/pull/280\r\n* Fujitsu compiler support added by @neelravi in https://github.com/filippi-claudia/champ/pull/281\r\n* Add support for \"classic\" flang and aocc flang compiler in CMakeLists and FindSIMD by @krahmouasy in https://github.com/filippi-claudia/champ/pull/282\r\n* setting nucleus cusp via qmckl by @neelravi in https://github.com/filippi-claudia/champ/pull/283\r\n* Changes to include metropolis move dritf vmc and kofk by @josuelandinez in https://github.com/filippi-claudia/champ/pull/284\r\n* introducing long range Jastrow + cleaning by @filippi-claudia in https://github.com/filippi-claudia/champ/pull/285\r\n* Fixlm by @filippi-claudia in https://github.com/filippi-claudia/champ/pull/292\r\n* Force 3body by @filippi-claudia in https://github.com/filippi-claudia/champ/pull/293\r\n* 3-body Jastrow test added by @neelravi in https://github.com/filippi-claudia/champ/pull/294\r\n* added improved T-move and APU24 branching by @EmielSlootman in https://github.com/filippi-claudia/champ/pull/295\r\n\r\n## New Contributors\r\n* @krahmouasy made their first contribution in https://github.com/filippi-claudia/champ/pull/277\r\n\r\n**Full Changelog**: https://github.com/filippi-claudia/champ/compare/v2.3.0...v2.4.0",
        "html_url": "https://github.com/filippi-claudia/champ/releases/tag/v2.4.0",
        "name": "v2.4.0",
        "release_id": 174962504,
        "tag": "v2.4.0",
        "tarball_url": "https://api.github.com/repos/filippi-claudia/champ/tarball/v2.4.0",
        "type": "Release",
        "url": "https://api.github.com/repos/filippi-claudia/champ/releases/174962504",
        "value": "https://api.github.com/repos/filippi-claudia/champ/releases/174962504",
        "zipball_url": "https://api.github.com/repos/filippi-claudia/champ/zipball/v2.4.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "neelravi",
          "type": "User"
        },
        "date_created": "2023-11-15T10:42:34Z",
        "date_published": "2023-11-15T10:45:29Z",
        "description": "## What's Changed\r\n* Changes to simplify distances and improve performance by @josuelandinez in https://github.com/filippi-claudia/champ/pull/264\r\n* fix missing CMake entries by @EmielSlootman in https://github.com/filippi-claudia/champ/pull/267\r\n* fix write statements by @EmielSlootman in https://github.com/filippi-claudia/champ/pull/268\r\n* fix finite difference force error by @EmielSlootman in https://github.com/filippi-claudia/champ/pull/269\r\n* Integration qmckl for periodic systems by @josuelandinez in https://github.com/filippi-claudia/champ/pull/265\r\n* DMC forces by @EmielSlootman in https://github.com/filippi-claudia/champ/pull/271\r\n* trexio case with all electron calc by @neelravi in https://github.com/filippi-claudia/champ/pull/273\r\n* Cleanup forces by @EmielSlootman in https://github.com/filippi-claudia/champ/pull/272\r\n* FindSIMD being modified for more compilers and architectures by @neelravi in https://github.com/filippi-claudia/champ/pull/274\r\n* changing fixed form to free form by @v1kko in https://github.com/filippi-claudia/champ/pull/253\r\n\r\n\r\n**Full Changelog**: https://github.com/filippi-claudia/champ/compare/v2.2.0...v2.3.0",
        "html_url": "https://github.com/filippi-claudia/champ/releases/tag/v2.3.0",
        "name": "v2.3.0",
        "release_id": 129522997,
        "tag": "v2.3.0",
        "tarball_url": "https://api.github.com/repos/filippi-claudia/champ/tarball/v2.3.0",
        "type": "Release",
        "url": "https://api.github.com/repos/filippi-claudia/champ/releases/129522997",
        "value": "https://api.github.com/repos/filippi-claudia/champ/releases/129522997",
        "zipball_url": "https://api.github.com/repos/filippi-claudia/champ/zipball/v2.3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "neelravi",
          "type": "User"
        },
        "date_created": "2023-07-18T09:08:04Z",
        "date_published": "2023-07-18T11:05:00Z",
        "description": "# CHAMP for periodic systems and multistate molecular systems\r\n\r\n## What's Changed\r\n* New random number routine, xoroshiro, reproducible between compilers by @v1kko in https://github.com/filippi-claudia/champ/pull/231\r\n* Merging the ortho branch by @sshepar2 in https://github.com/filippi-claudia/champ/pull/243\r\n* Switch to xoroshiro256starstar by @v1kko in https://github.com/filippi-claudia/champ/pull/250\r\n* Remove f77 by @v1kko in https://github.com/filippi-claudia/champ/pull/249\r\n* Fix conflicts jastrow subroutines and modules names by @josuelandinez in https://github.com/filippi-claudia/champ/pull/254\r\n* fixing orbitals vectorization by @josuelandinez in https://github.com/filippi-claudia/champ/pull/255\r\n* remove rshift by @josuelandinez in https://github.com/filippi-claudia/champ/pull/256\r\n* step 1 for periodic by @josuelandinez in https://github.com/filippi-claudia/champ/pull/257\r\n* Enabling multiple orbitals, multiple states trexio route with @sshepar2 by @neelravi in https://github.com/filippi-claudia/champ/pull/260\r\n* Testing changes periodic step 1  by @josuelandinez in https://github.com/filippi-claudia/champ/pull/259\r\n* Checking changes by stu and readme and workflow additions by @josuelandinez in https://github.com/filippi-claudia/champ/pull/261\r\n\r\n## New Contributors\r\n* @sshepar2 made their first contribution in https://github.com/filippi-claudia/champ/pull/243\r\n* @josuelandinez made their first contribution in https://github.com/filippi-claudia/champ/pull/254\r\n\r\n**Full Changelog**: https://github.com/filippi-claudia/champ/compare/v2.1.5...v2.2.0",
        "html_url": "https://github.com/filippi-claudia/champ/releases/tag/v2.2.0",
        "name": "v2.2.0",
        "release_id": 112649130,
        "tag": "v2.2.0",
        "tarball_url": "https://api.github.com/repos/filippi-claudia/champ/tarball/v2.2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/filippi-claudia/champ/releases/112649130",
        "value": "https://api.github.com/repos/filippi-claudia/champ/releases/112649130",
        "zipball_url": "https://api.github.com/repos/filippi-claudia/champ/zipball/v2.2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "josuelandinez",
          "type": "User"
        },
        "date_created": "2023-04-21T11:46:09Z",
        "date_published": "2023-04-21T11:48:00Z",
        "description": "## What's Changed\r\n* Fix architecture flag for Intel Fortran compilers. by @lopeztarifa in https://github.com/filippi-claudia/champ/pull/152\r\n* Recaf problematic dmc cmake by @neelravi in https://github.com/filippi-claudia/champ/pull/154\r\n* Refactored all do-label loops to do-enddo loops by @v1kko in https://github.com/filippi-claudia/champ/pull/155\r\n* Initialize uninitialized heap variables by @v1kko in https://github.com/filippi-claudia/champ/pull/157\r\n* merge main in moduli_version by @filippi-claudia in https://github.com/filippi-claudia/champ/pull/159\r\n* Fix the test values  by @NicoRenaud in https://github.com/filippi-claudia/champ/pull/160\r\n* workflow to run the tests in DEBUG mode by @v1kko in https://github.com/filippi-claudia/champ/pull/162\r\n* [Ready to merge] ]Merging the self-hosted workflow branch by @neelravi in https://github.com/filippi-claudia/champ/pull/164\r\n* Feature/debug ci revert2nico by @NicoRenaud in https://github.com/filippi-claudia/champ/pull/166\r\n* reorganize modules by @NicoRenaud in https://github.com/filippi-claudia/champ/pull/156\r\n* Clean up the yaml file for the CI by @NicoRenaud in https://github.com/filippi-claudia/champ/pull/170\r\n* Fix the merge issue of `create_module_library` in `main`  by @NicoRenaud in https://github.com/filippi-claudia/champ/pull/171\r\n* don't use b_t array with vmc by @v1kko in https://github.com/filippi-claudia/champ/pull/172\r\n* remove source=0.0_dp  by @NicoRenaud in https://github.com/filippi-claudia/champ/pull/175\r\n* [Mergeable after careful review] Fix common blocks by @NicoRenaud in https://github.com/filippi-claudia/champ/pull/177\r\n* Add f-projectors for nonlocal ecps by @tiihonej in https://github.com/filippi-claudia/champ/pull/182\r\n* Switching to fully cartesian AO with trexio ordering. by @neelravi in https://github.com/filippi-claudia/champ/pull/183\r\n* [Mergeable] Add libopenmpi-dev to README by @EmielSlootman in https://github.com/filippi-claudia/champ/pull/173\r\n* [Review] Feature/no implicit interfaces + bugfixes by @v1kko in https://github.com/filippi-claudia/champ/pull/180\r\n* [WIP] Add g orbitals for VMC by @tiihonej in https://github.com/filippi-claudia/champ/pull/184\r\n* cleaned up unecessary files in tools by @NicoRenaud in https://github.com/filippi-claudia/champ/pull/188\r\n* CMAKELISTS: allow different build folder location, fix GNU compiler l\u2026 by @v1kko in https://github.com/filippi-claudia/champ/pull/189\r\n* added debug build of gnu to CI to test for out of bounds values by @v1kko in https://github.com/filippi-claudia/champ/pull/190\r\n* disable gnu debug run for now (reference values dont match by @v1kko in https://github.com/filippi-claudia/champ/pull/191\r\n* checking new features for the workflow by @neelravi in https://github.com/filippi-claudia/champ/pull/192\r\n* [WIP] read trexio data within fortran by @neelravi in https://github.com/filippi-claudia/champ/pull/194\r\n* WIP: Fix nup/ndn checks and nmat_dim for open-shell runs by @tiihonej in https://github.com/filippi-claudia/champ/pull/195\r\n* Reading input data from a single trexio file natively. by @neelravi in https://github.com/filippi-claudia/champ/pull/198\r\n* Moduli refac merge by @NicoRenaud in https://github.com/filippi-claudia/champ/pull/201\r\n* Trexio orbitals by @neelravi in https://github.com/filippi-claudia/champ/pull/202\r\n* Moduli refac by @v1kko in https://github.com/filippi-claudia/champ/pull/205\r\n* Moduli refac by @v1kko in https://github.com/filippi-claudia/champ/pull/208\r\n* cmake requirement downgraded from 3.20 to 3.17 by @neelravi in https://github.com/filippi-claudia/champ/pull/211\r\n* revert work size in matinv by @NicoRenaud in https://github.com/filippi-claudia/champ/pull/212\r\n* trexio orbital ordering adapted by @neelravi in https://github.com/filippi-claudia/champ/pull/213\r\n* Rmax cutoff  by @neelravi in https://github.com/filippi-claudia/champ/pull/216\r\n* Moduli refactor, squashed by @v1kko in https://github.com/filippi-claudia/champ/pull/215\r\n* reintroducing orbital printing to output.log by @neelravi in https://github.com/filippi-claudia/champ/pull/217\r\n* enabling the strict parsing of keywords in the input file; case-insen\u2026 by @neelravi in https://github.com/filippi-claudia/champ/pull/219\r\n* Unit tests [work in progress] by @v1kko in https://github.com/filippi-claudia/champ/pull/210\r\n* run all gnu ci tests on github by @v1kko in https://github.com/filippi-claudia/champ/pull/220\r\n* refactor nonloc potential files by @filippi-claudia in https://github.com/filippi-claudia/champ/pull/223\r\n* In progress: Refactor ci tests by @neelravi in https://github.com/filippi-claudia/champ/pull/225\r\n* fixing the warning: for temporary slice of dphin by @neelravi in https://github.com/filippi-claudia/champ/pull/227\r\n* removing warning about dcopy by changing stride by @neelravi in https://github.com/filippi-claudia/champ/pull/228\r\n* bugfix in multideterminant by @neelravi in https://github.com/filippi-claudia/champ/pull/229\r\n* bugfix step 4 read bas num dwfn restored by @neelravi in https://github.com/filippi-claudia/champ/pull/230\r\n* bugfix step 5 deriv nonloc by @neelravi in https://github.com/filippi-claudia/champ/pull/232\r\n* Bugfix 4 dwfn trexio by @neelravi in https://github.com/filippi-claudia/champ/pull/233\r\n* bugfix in the slm index of the second converter; converter cleanup by @neelravi in https://github.com/filippi-claudia/champ/pull/234\r\n* new keywords added for icasula=0; fixed long term bug in r_ee by @neelravi in https://github.com/filippi-claudia/champ/pull/236\r\n* generating and printing basis pointer information when trexio file is used by @neelravi in https://github.com/filippi-claudia/champ/pull/235\r\n* reading orbitals from .lcao and rest of the info from trexio by @neelravi in https://github.com/filippi-claudia/champ/pull/240\r\n* fixing a memory leak in trexio route by @neelravi in https://github.com/filippi-claudia/champ/pull/241\r\n* Small fixes by @v1kko in https://github.com/filippi-claudia/champ/pull/237\r\n* making walkalize and problem files optional by @neelravi in https://github.com/filippi-claudia/champ/pull/245\r\n* making walkalize files writing available through input option by @neelravi in https://github.com/filippi-claudia/champ/pull/246\r\n\r\n## New Contributors\r\n* @tiihonej made their first contribution in https://github.com/filippi-claudia/champ/pull/182\r\n* @EmielSlootman made their first contribution in https://github.com/filippi-claudia/champ/pull/173\r\n\r\n**Full Changelog**: https://github.com/filippi-claudia/champ/compare/v2.0.0...v2.1.5\r\n\r\n## Recent issues fixed \r\n* nonloc\r\n* trex2champ (csf) converter",
        "html_url": "https://github.com/filippi-claudia/champ/releases/tag/v2.1.5",
        "name": "v2.1.5",
        "release_id": 100326956,
        "tag": "v2.1.5",
        "tarball_url": "https://api.github.com/repos/filippi-claudia/champ/tarball/v2.1.5",
        "type": "Release",
        "url": "https://api.github.com/repos/filippi-claudia/champ/releases/100326956",
        "value": "https://api.github.com/repos/filippi-claudia/champ/releases/100326956",
        "zipball_url": "https://api.github.com/repos/filippi-claudia/champ/zipball/v2.1.5"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "parent_header": [
          "Compiling CHAMP for the source"
        ],
        "type": "Text_excerpt",
        "value": "1. cmake >= 3.17\n2. gfortran/gcc >= 9.3.0 or Intel Fortran 2020 onwards\n3. BLAS/LAPACK or Intel MKL\n4. openMPI >= 3.0 or Intel MPI\n5. [Optional] TREXIO library >= 2.4.0\n6. [Optional] QMCkl library >= 1.0.0\n7. [Optional] doxygen (for documentation)\n\n"
      },
      "source": "https://raw.githubusercontent.com/filippi-claudia/champ/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "usage",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:40:28",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 18
      },
      "technique": "GitHub_API"
    }
  ]
}