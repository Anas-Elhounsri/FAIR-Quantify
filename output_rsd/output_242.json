{
  "application_domain": [
    {
      "confidence": 41.41,
      "result": {
        "type": "String",
        "value": "Natural Language Processing"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jhidding/check-deps"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-12-17T23:25:19Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-02-01T13:16:51Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A Python script that checks for installed dependencies."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9378675800311083,
      "result": {
        "original_header": "Implementation",
        "type": "Text_excerpt",
        "value": "I'll start with a bit of version logic, and then show how this script runs the checks in parallel using `asyncio`.\n``` {.python #boilerplate}\nassert sys.version_info[0] == 3, \"This script only works with Python 3.\"\n\nclass ConfigError(Exception):\n    pass\n\nT = TypeVar(\"T\")\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/jhidding/check-deps/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9926629867478541,
      "result": {
        "original_header": "Versions",
        "type": "Text_excerpt",
        "value": "It is common to label software versions with series of ascending numbers. A often recommended pattern is that of *major*, *minor*, *patch* semantic versioning, where a version contains three numbers separated by dots, sometimes post-fixed with addenda for alpha, beta or release candidates. There are notable exceptions, chief among them $\\TeX$, which has version numbers converging to the digits of $\\pi$. \nWe would like to express version constraints using comparison operators along with the murky semantics of version numbers found in the wild. So we have the following relations in an enum:\n``` {.python #relation}\nclass Relation(Enum):\n    \"\"\"Encodes ordinal relations among versions. Currently six operators are\n    supported: `>=`, `<=`, `<`, `>`, `==`, `!=`.\"\"\" \n    GE = 1\n    LE = 2\n    LT = 3\n    GT = 4\n    EQ = 5\n    NE = 6\n\n    def __str__(self):\n        return {\n            Relation.GE: \">=\",\n            Relation.LE: \"<=\",\n            Relation.LT: \"<\",\n            Relation.GT: \">\",\n            Relation.EQ: \"==\",\n            Relation.NE: \"!=\"}[self]\n```\nI'm going out on a limb and say that versions consist of a `tuple` of `int`, optionally with a suffix that can be stored in a `str`. We need to define an ordering on this system:\n``` {.python #version}\n@dataclass\nclass Version:\n    \"\"\"Stores a version in the form of a tuple of ints and an optional string extension.\n    This class supports (in)equality operators listed in `Relation`.\"\"\"\n    number: tuple[int, ...]\n    extra: Optional[str]\n\n    <<version-methods>>\n```\n<details>\n<summary>Implementation of `Version` operators</summary>\nBASH3*\n</details>\nA combination of a `Version` with a `Relation` form a `VersionConstraint`. Such a constraint can be called with another `Version` which should give a `bool`.\n``` {.python #version-constraint}\n@dataclass\nclass VersionConstraint:\n    \"\"\"A VersionConstraint is a product of a `Version` and a `Relation`.\"\"\"\n    version: Version\n    relation: Relation\n\n    def __call__(self, other: Version) -> bool:\n        method = f\"__{self.relation.name}__\".lower()\n        return getattr(other, method)(self.version)\n\n    def __str__(self):\n        return f\"{self.relation}{self.version}\"\n```\n \nNow, we also need to be able to read a version constraint from input.\nEach parser takes a `str` and returns a tuple of `(value, str)`, where the second part of the tuple is the text that is not yet parsed. \n"
      },
      "source": "https://raw.githubusercontent.com/jhidding/check-deps/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9838970885305377,
      "result": {
        "original_header": "Literate Programming",
        "type": "Text_excerpt",
        "value": "This script is composed from the code blocks in this README using [Entangled](https://entangled.github.io). To generate the HTML renedered documentation, I used [Pdoc](https://pdoc.dev/) in conjunction with some Awk scripts. \n"
      },
      "source": "https://raw.githubusercontent.com/jhidding/check-deps/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "API Documentation",
        "type": "Text_excerpt",
        "value": "While this script strictly speaking is in no need for API docs, here they are anyway.\n\n"
      },
      "source": "https://raw.githubusercontent.com/jhidding/check-deps/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jhidding/check-deps/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "faq": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Job",
        "parent_header": [
          "Implementation",
          "Running"
        ],
        "type": "Text_excerpt",
        "value": "The logistics for each job checking a version are stored in `VersionTest`. This is basically a giant closure wrapped in `async_cache`. \n\nThe `run` method takes an argument `recurse`. This is used to call dependencies of the current version test.\n\n``` {.python #running}\n@dataclass\nclass VersionTest:\n    name: str\n    require: VersionConstraint\n    get_version: str\n    platform: Optional[str] = None\n    pattern: Optional[str] = None\n    suggestion_text: Optional[str] = None\n    suggestion: Optional[str] = None\n    depends: List[str] = field(default_factory=list)\n    template: Optional[str] = None\n\n    _lock: asyncio.Lock = field(default_factory=asyncio.Lock)\n    _done: bool = False\n\n    def print_formatted(self, msg):\n        prefix = f\"{self.name} {self.require}\"\n        print(f\"{prefix:25}: {msg}\")\n\n    def print_not_found(self):\n        self.print_formatted(\"not found\")\n\n    @async_cache\n    async def run(self, recurse):\n        for dep in self.depends:\n            if not await recurse(dep):\n                return Result(self, False,\n                              failure_text=f\"Failed dependency: {dep}\")\n\n        proc = await asyncio.create_subprocess_shell(\n            self.get_version,\n            stdout=asyncio.subprocess.PIPE,\n            stderr=asyncio.subprocess.PIPE)\n        (stdout, stderr) = await proc.communicate()\n        if proc.returncode != 0:\n            self.print_not_found()\n            return Result(\n                self,\n                success=False,\n                failure_text=f\"{stderr.decode().strip()}\")\n        try:\n            if self.pattern is not None:\n                m = re.match(self.pattern, stdout.decode())\n                if m is not None:\n                    out, _ = parse_version(m.group(1).strip())\n                else:\n                    self.print_not_found()\n                    msg = f\"No regex match on pattern '{self.pattern}'\"\n                    return Result(self, False, failure_text=msg)\n            else:\n                out, _ = parse_version(stdout.decode().strip())\n        except ConfigError as e:\n            return Result(self, False, failure_text=str(e))\n\n        if self.require(out):\n            self.print_formatted(f\"{str(out):10} Ok\")\n            return Result(self, True)\n        else:\n            self.print_formatted(f\"{str(out):10} Fail\")\n            return Result(self, False, failure_text=\"Too old.\",\n                          found_version=out)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/jhidding/check-deps/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jhidding/check-deps/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "jhidding/check-deps"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A dependency checker in Async Python"
      },
      "source": "https://raw.githubusercontent.com/jhidding/check-deps/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9997106004767994,
      "result": {
        "original_header": "Implementation",
        "type": "Text_excerpt",
        "value": "I'll start with a bit of version logic, and then show how this script runs the checks in parallel using `asyncio`.\n``` {.python #boilerplate}\nassert sys.version_info[0] == 3, \"This script only works with Python 3.\"\n\nclass ConfigError(Exception):\n    pass\n\nT = TypeVar(\"T\")\n```\n \n``` {.python file=check-deps header=1}\n#!/usr/bin/env python3\nfrom __future__ import annotations\n\n<<imports>>\n<<boilerplate>>\n\n<<relation>>\n<<version>>\n<<version-constraint>>\n<<parsing>>\n<<running>>\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/jhidding/check-deps/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9921173223222728,
      "result": {
        "original_header": "Versions",
        "type": "Text_excerpt",
        "value": "We would like to express version constraints using comparison operators along with the murky semantics of version numbers found in the wild. So we have the following relations in an enum:\n``` {.python #relation}\nclass Relation(Enum):\n    \"\"\"Encodes ordinal relations among versions. Currently six operators are\n    supported: `>=`, `<=`, `<`, `>`, `==`, `!=`.\"\"\" \n    GE = 1\n    LE = 2\n    LT = 3\n    GT = 4\n    EQ = 5\n    NE = 6\n\n    def __str__(self):\n        return {\n            Relation.GE: \">=\",\n            Relation.LE: \"<=\",\n            Relation.LT: \"<\",\n            Relation.GT: \">\",\n            Relation.EQ: \"==\",\n            Relation.NE: \"!=\"}[self]\n```\nI'm going out on a limb and say that versions consist of a `tuple` of `int`, optionally with a suffix that can be stored in a `str`. We need to define an ordering on this system:\n``` {.python #version}\n@dataclass\nclass Version:\n    \"\"\"Stores a version in the form of a tuple of ints and an optional string extension.\n    This class supports (in)equality operators listed in `Relation`.\"\"\"\n    number: tuple[int, ...]\n    extra: Optional[str]\n\n    <<version-methods>>\n```\n<details>\n<summary>Implementation of `Version` operators</summary>\nBASH3*\n</details>\nA combination of a `Version` with a `Relation` form a `VersionConstraint`. Such a constraint can be called with another `Version` which should give a `bool`.\n``` {.python #version-constraint}\n@dataclass\nclass VersionConstraint:\n    \"\"\"A VersionConstraint is a product of a `Version` and a `Relation`.\"\"\"\n    version: Version\n    relation: Relation\n\n    def __call__(self, other: Version) -> bool:\n        method = f\"__{self.relation.name}__\".lower()\n        return getattr(other, method)(self.version)\n\n    def __str__(self):\n        return f\"{self.relation}{self.version}\"\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/jhidding/check-deps/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8498475457930255,
      "result": {
        "original_header": "Literate Programming",
        "type": "Text_excerpt",
        "value": "This script is composed from the code blocks in this README using [Entangled](https://entangled.github.io). To generate the HTML renedered documentation, I used [Pdoc](https://pdoc.dev/) in conjunction with some Awk scripts. \n"
      },
      "source": "https://raw.githubusercontent.com/jhidding/check-deps/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.844408714308853,
      "result": {
        "original_header": "Implementation",
        "type": "Text_excerpt",
        "value": "``` {.python file=check-deps header=1}\n#!/usr/bin/env python3\nfrom __future__ import annotations\n\n<<imports>>\n<<boilerplate>>\n\n<<relation>>\n<<version>>\n<<version-constraint>>\n<<parsing>>\n<<running>>\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/jhidding/check-deps/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8347550298890489,
      "result": {
        "original_header": "Imports",
        "type": "Text_excerpt",
        "value": "We use a lot of things that should be in the standard library, chiefly typing and dataclasses. Then, some `textwrap` and `redirect_stdout` for fancy output.\n``` {.python #imports}\nimport sys\nimport configparser\nfrom dataclasses import dataclass, field\nfrom typing import Optional, List, Mapping, Tuple, Callable, TypeVar\nfrom enum import Enum\nimport asyncio\nimport re\nfrom contextlib import contextmanager, redirect_stdout\nimport textwrap\nimport io\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/jhidding/check-deps/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8944674061801335,
      "result": {
        "original_header": "Literate Programming",
        "type": "Text_excerpt",
        "value": "Note, all output from the shell scripts in the tutorial are expanded by Awk in CI. That means that the tutorial doubles up for integration test as well.\n``` {.python file=checkdeps/__init__.py}\nfrom __future__ import annotations\n\nimport subprocess\nproc_eval = subprocess.run(\n    [\"awk\", \"-f\", \"eval_shell_pass.awk\"],\n    input=open(\"README.md\", \"rb\").read(), capture_output=True)\nproc_label = subprocess.run(\n    [\"awk\", \"-f\", \"noweb_label_pass.awk\"],\n    input=proc_eval.stdout, capture_output=True)\n__doc__ = proc_label.stdout.decode()\n\n<<imports>>\n<<boilerplate>>\n\n<<relation>>\n<<version>>\n<<version-constraint>>\n<<parsing>>\n<<running>>\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/jhidding/check-deps/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jhidding/check-deps/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Apache License 2.0",
        "spdx_id": "Apache-2.0",
        "type": "License",
        "url": "https://api.github.com/licenses/apache-2.0",
        "value": "https://api.github.com/licenses/apache-2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
      },
      "source": "https://raw.githubusercontent.com/jhidding/check-deps/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "check-deps"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "jhidding"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 21625,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CSS",
        "size": 4898,
        "type": "Programming_language",
        "value": "CSS"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Awk",
        "size": 1584,
        "type": "Programming_language",
        "value": "Awk"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dhall",
        "size": 446,
        "type": "Programming_language",
        "value": "Dhall"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 172,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jhidding/check-deps/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "A dependency checker in Async Python",
        "type": "Text_excerpt",
        "value": "[![website](https://github.com/jhidding/check-deps/actions/workflows/main.yml/badge.svg)](https://github.com/jhidding/check-deps/actions/workflows/main.yml)\n[![Entangled badge](https://img.shields.io/badge/entangled-Use%20the%20source!-%2300aeff)](https://entangled.github.io/)\n\nSometimes, when you have a project that uses many components there are no easy ways to systematically check if dependencies are installed. If you stick to a single programming language, this problem is better handled by a package manager. When you step outside the bounds of a single language however, there is no easy to use tool. Maybe you need some UNIX tools to be present along with utilities from Python and some scripts that run on top of Node.\n\nThe goal of this script is to check software dependencies for you. If you have some complicated setup which requires a combination of executables, libraries for different languages etc., this script can check if those are in order.\n\nYou specify the dependencies in a `dependencies.ini` file, then this script checks them. You only need Python installed, nothing else for this script to work. [You simply ship this script with your distribution.](https://github.com/jhidding/check-deps/blob/main/check-deps)\n"
      },
      "source": "https://raw.githubusercontent.com/jhidding/check-deps/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "parent_header": [
          "Tutorial"
        ],
        "type": "Text_excerpt",
        "value": "Now for some Python packages. First we need to ensure that the correct version of Python in installed. This follows the pattern that we saw before.\n\n``` {.ini file=example/depends/dependencies.ini #example-depends}\n[python3]\nrequire = >=3.12\nget_version = python3 --version\npattern = Python (.*)\nsuggestion_text = This is a problem. The easiest is probably to install Anaconda from https://www.anaconda.com/.\n```\n\nTo check the version of an installed package we may use `pip`.\n\n``` {.ini #example-depends}\n[numpy]\nrequire = >=1.0\nget_version = pip show numpy | grep \"Version:\"\npattern = Version: (.*)\nsuggestion_text = This is a Python package that can be installed through pip.\nsuggestion = pip install numpy\ndepends = python3\n```\n\nNow `check-deps` knows to check for Python before checking for `numpy`.\n\n``` {.bash .eval}\ncd example/depends; ../../check-deps\n```\n\nOnce we ask for one Python package, it is not so strange to ask for more. In that case it can be advantageous to use a template.\n"
      },
      "source": "https://raw.githubusercontent.com/jhidding/check-deps/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running",
        "parent_header": [
          "Implementation"
        ],
        "type": "Text_excerpt",
        "value": "Some check may need to be preceded by another check. Say if we want to see if we have some Python module installed, first we need to see if the correct Python version is here, then if `pip` is actually installed, then if we can see the module. If we have many such modules, how do we make sure that we check for Python and `pip` only once? One way is to plan everything in advance, then run the workflow. That's nice, but adds a lot of complication on top of what we can get out of the box with `asyncio`. Another way is to cache results, and then when we need the result a second time, we used the cached value.\n\n``` {.python #running}\ndef async_cache(f):\n    \"\"\"Caches results from the `async` function `f`. This assumes `f` is a\n    member of a class, where we have `_lock`, `_result` and `_done` members\n    available.\"\"\"\n    async def g(self, *args, **kwargs):\n        async with self._lock:\n            if self._done:\n                return self._result\n            self._result = await f(self, *args, **kwargs)\n            self._done = True\n            return self._result\n    return g\n```\n"
      },
      "source": "https://raw.githubusercontent.com/jhidding/check-deps/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Result",
        "parent_header": [
          "Implementation",
          "Running"
        ],
        "type": "Text_excerpt",
        "value": "The result of a version check is stored in `Result`.\n\n``` {.python #running}\n@dataclass\nclass Result:\n    test: VersionTest\n    success: bool\n    failure_text: Optional[str] = None\n    found_version: Optional[Version] = None\n\n    def __bool__(self):\n        return self.success\n```\n"
      },
      "source": "https://raw.githubusercontent.com/jhidding/check-deps/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Parsing input",
        "parent_header": [
          "Implementation",
          "Running"
        ],
        "type": "Text_excerpt",
        "value": "``` {.python #running}\ndef parse_config(name: str, config: Mapping[str, str], templates):\n    if \"template\" in config:\n        _config = {}\n        for k, v in templates[config[\"template\"]].items():\n            if isinstance(v, str):\n                _config[k] = v.format(name=name)\n            else:\n                _config[k] = v\n        _config.update(config)\n    else:\n        _config = dict(config)\n\n    _deps = map(str.strip, _config.get(\"depends\", \"\").split(\",\"))\n    deps = list(filter(lambda x: x != \"\", _deps))\n\n    assert \"require\" in _config, \"Every item needs a `require` field\"\n    assert \"get_version\" in _config, \"Every item needs a `get_version` field\"\n\n    require, _ = parse_version_constraint(_config[\"require\"])\n\n    return VersionTest(\n        name=name,\n        require=require,\n        get_version=_config[\"get_version\"],\n        platform=_config.get(\"platform\", None),\n        pattern=_config.get(\"pattern\", None),\n        suggestion_text=_config.get(\"suggestion_text\", None),\n        suggestion=_config.get(\"suggestion\", None),\n        depends=deps,\n        template=_config.get(\"template\", None))\n```\n"
      },
      "source": "https://raw.githubusercontent.com/jhidding/check-deps/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Indentation",
        "parent_header": [
          "Implementation",
          "Running"
        ],
        "type": "Text_excerpt",
        "value": "It looks nice to indent some output. This captures `stdout` and forwards it by printing each line with a given prefix.\n\n``` {.python #running}\n@contextmanager\ndef indent(prefix: str):\n    f = io.StringIO()\n    with redirect_stdout(f):\n        yield\n    output = f.getvalue()\n    print(textwrap.indent(output, prefix), end=\"\")\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/jhidding/check-deps/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Main",
        "parent_header": [
          "Implementation",
          "Running"
        ],
        "type": "Text_excerpt",
        "value": "``` {.python #running}\nasync def main():\n    config = configparser.ConfigParser()\n    config.read(\"dependencies.ini\")\n\n    templates = {\n        name[9:]: config[name]\n        for name in config if name.startswith(\"template:\")\n    }\n\n    try:\n        tests = {\n            name: parse_config(name, config[name], templates)\n            for name in config if \":\" not in name and name != \"DEFAULT\"\n        }\n    except (AssertionError, ConfigError) as e:\n        print(\"Configuration error:\", e)\n        sys.exit(1)\n\n    async def test_version(name: str):\n        assert name in tests, f\"unknown dependency {name}\"\n        x = await tests[name].run(test_version)\n        return x\n\n    result = await asyncio.gather(*(test_version(k) for k in tests))\n    if all(r.success for r in result):\n        print(\"Success\")\n        sys.exit(0)\n    else:\n        print(\"Failure\")\n        with indent(\"  |  \"):\n            for r in (r for r in result if not r.success):\n                if r.failure_text:\n                    print(f\"{r.test.name}: {r.failure_text}\")\n                if r.found_version:\n                    print(f\"    found version {r.found_version}\")\n        sys.exit(1)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n"
      },
      "source": "https://raw.githubusercontent.com/jhidding/check-deps/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:40:49",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Tutorial",
        "type": "Text_excerpt",
        "value": "Suppose your project needs a specific version of GNU Awk. According to the GNU guidelines for writing command-line applications, every program should support the `--version` flag. If we run `awk --version`, what do we get?\n\n``` {.bash .eval}\nawk --version\n```\n\nThat's a lot of information, but all we need is a version number. From all that output we need to extract a version number, which is best done by regex. Let's ask for an impossible version:\n\n``` {.ini file=example/first/dependencies.ini}\n[awk]\nrequire = >=6\nget_version = awk --version\npattern = GNU Awk (.*), API: .*\nsuggestion_text = This should be available from your package manager.\n```\n\nNow run `check-deps`\n\n``` {.bash .eval}\ncd example/first; ../../check-deps\n```\n\nThe output of `check-deps`, out of necessity, is the most spectacular when a problem is detected. For a second example let's try one that succeeds. We add GNU Make to our dependencies.\n\n``` {.ini file=example/second/dependencies.ini}\n[awk]\nrequire = >=5\nget_version = awk --version\npattern = GNU Awk (.*), API: .*\nsuggestion_text = This should be available from your package manager.\n\n[make]\nrequire = >=4\nget_version = make --version\npattern = GNU Make (.*)\nsuggestion_text = This should be available from your package manager.\n```\n\n``` {.bash .eval}\ncd example/second; ../../check-deps\n```\n"
      },
      "source": "https://raw.githubusercontent.com/jhidding/check-deps/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Templates",
        "parent_header": [
          "Tutorial"
        ],
        "type": "Text_excerpt",
        "value": "Because we may need many Python packages, it is possible to define a template. The template defines all the fields that we would expect from a normal entry, but uses Python formating syntax to define some wildcards. These wildcards are interpolated using values given at instantiation of a template. In this case we only ask for `name`, but this key is not fixed. Then the output of the template is merged with the specifics. If keys clash, the instance overrules the template's defaults.\n\n``` {.ini file=example/template/dependencies.ini}\n[template:pip]\nget_version = pip show {name} | grep \"Version:\"\npattern = Version: (.*)\nsuggestion_text = This is a Python package that can be installed through pip.\nsuggestion = pip install {name}\ndepends = python3\n\n[python3]\nrequire = >=3.8\nget_version = python3 --version\npattern = Python (.*)\nsuggestion_text = This is a problem. The easiest is probably to install Anaconda from https://www.anaconda.com/.\n\n[numpy]\nrequire = >=1.0\ntemplate = pip\n```\n\n``` {.bash .eval}\ncd example/template; ../../check-deps\n```\n\nThat covers all the features of this script. The rest of this README is the actual implementation of `check-deps`.\n"
      },
      "source": "https://raw.githubusercontent.com/jhidding/check-deps/main/README.md",
      "technique": "header_analysis"
    }
  ]
}