{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/TREX-CoE/aiida-champ"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-07-09T10:25:02Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-03-07T20:22:43Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "aiida-champ plugin to handle workflow of CHAMP using AiiDA."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9007468262488263,
      "result": {
        "original_header": "aiida-champ",
        "type": "Text_excerpt",
        "value": "AiiDA plugin that wraps the `vmc` executable of the CHAMP code for computing the total energy of a molecular system. \n"
      },
      "source": "https://raw.githubusercontent.com/TREX-CoE/aiida-champ/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9267895316975906,
      "result": {
        "original_header": "Repository contents",
        "type": "Text_excerpt",
        "value": "* [`.github/`](.github/): [Github Actions](https://github.com/features/actions) configuration\n  * [`ci.yml`](.github/workflows/ci.yml): runs tests, checks test coverage and builds documentation at every new commit\n  * [`publish-on-pypi.yml`](.github/workflows/publish-on-pypi.yml): automatically deploy git tags to PyPI - just generate a [PyPI API token](https://pypi.org/help/#apitoken) for your PyPI account and add it to the `pypi_token` secret of your github repository\n* [`aiida_champ/`](aiida_champ/): The main source code of the plugin package\n  * [`data/`](aiida_champ/data/): A new `CHAMPParameters` data class, used as input to the `CHAMPCalculation` `CalcJob` class\n  * [`calculations.py`](aiida_champ/calculations.py): A new `CHAMPCalculation` `CalcJob` class\n  * [`cli.py`](aiida_champ/cli.py): Extensions of the `verdi data` command line interface for the `champParameters` class\n  * [`helpers.py`](aiida_champ/helpers.py): Helpers for setting up an AiiDA code for `champ` automatically\n  * [`parsers.py`](aiida_champ/parsers.py): A new `Parser` for the `CHAMPCalculation`\n* [`docs/`](docs/): A documentation template ready for publication on [Read the Docs](http://aiida-champ.readthedocs.io/en/latest/)\n* [`examples/`](examples/): An example of how to submit a calculation using this plugin\n* [`tests/`](tests/): Basic regression tests using the [pytest](https://docs.pytest.org/en/latest/) framework (submitting a calculation, ...). Install `pip install -e .[testing]` and run `pytest`.\n* [`.coveragerc`](.coveragerc): Configuration of [coverage.py](https://coverage.readthedocs.io/en/latest) tool reporting which lines of your plugin are covered by tests\n* [`.gitignore`](.gitignore): Telling git which files to ignore\n* [`.pre-commit-config.yaml`](.pre-commit-config.yaml): Configuration of [pre-commit hooks](https://pre-commit.com/) that sanitize coding style and check for syntax errors. Enable via `pip install -e .[pre-commit] && pre-commit install`\n* [`.readthedocs.yml`](.readthedocs.yml): Configuration of documentation build for [Read the Docs](https://readthedocs.org/)\n* [`LICENSE`](LICENSE): License for your plugin\n* [`MANIFEST.in`](MANIFEST.in): Configure non-Python files to be included for publication on [PyPI](https://pypi.org/)\n* [`README.md`](README.md): This file\n* [`conftest.py`](conftest.py): Configuration of fixtures for [pytest](https://docs.pytest.org/en/latest/)\n* [`pytest.ini`](pytest.ini): Configuration of [pytest](https://docs.pytest.org/en/latest/) test discovery\n* [`setup.json`](setup.json): Plugin metadata for registration on [PyPI](https://pypi.org/) and the [AiiDA plugin registry](https://aiidateam.github.io/aiida-registry/) (including entry points)\n* [`setup.py`](setup.py): Installation script for pip / [PyPI](https://pypi.org/) \nFor more information, see the [developer guide](https://aiida-champ.readthedocs.io/en/latest/developer_guide) of your plugin. \n"
      },
      "source": "https://raw.githubusercontent.com/TREX-CoE/aiida-champ/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "http://aiida-champ.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/TREX-CoE/aiida-champ/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://aiida-champ.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/TREX-CoE/aiida-champ/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/TREX-CoE/aiida-champ/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/TREX-CoE/aiida-champ/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "TREX-CoE/aiida-champ"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "aiida-champ"
      },
      "source": "https://raw.githubusercontent.com/TREX-CoE/aiida-champ/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/TREX-CoE/aiida-champ/master/.github/install_aiida_github.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/TREX-CoE/aiida-champ/master/.ci/install_aiida_github.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "aiida-champ"
        ],
        "type": "Text_excerpt",
        "value": "```shell\npip install aiida-champ\nverdi quicksetup  # better to set up a new profile\nverdi plugin list aiida.calculations  # should now show your calclulation plugins\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/TREX-CoE/aiida-champ/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9108147434889755,
      "result": {
        "original_header": "aiida-champ",
        "type": "Text_excerpt",
        "value": "AiiDA plugin that wraps the `vmc` executable of the CHAMP code for computing the total energy of a molecular system. \n"
      },
      "source": "https://raw.githubusercontent.com/TREX-CoE/aiida-champ/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9127215375587894,
      "result": {
        "original_header": "Repository contents",
        "type": "Text_excerpt",
        "value": "* [`.github/`](.github/): [Github Actions](https://github.com/features/actions) configuration\n  * [`ci.yml`](.github/workflows/ci.yml): runs tests, checks test coverage and builds documentation at every new commit\n  * [`publish-on-pypi.yml`](.github/workflows/publish-on-pypi.yml): automatically deploy git tags to PyPI - just generate a [PyPI API token](https://pypi.org/help/#apitoken) for your PyPI account and add it to the `pypi_token` secret of your github repository\n* [`aiida_champ/`](aiida_champ/): The main source code of the plugin package\n  * [`data/`](aiida_champ/data/): A new `CHAMPParameters` data class, used as input to the `CHAMPCalculation` `CalcJob` class\n  * [`calculations.py`](aiida_champ/calculations.py): A new `CHAMPCalculation` `CalcJob` class\n  * [`cli.py`](aiida_champ/cli.py): Extensions of the `verdi data` command line interface for the `champParameters` class\n  * [`helpers.py`](aiida_champ/helpers.py): Helpers for setting up an AiiDA code for `champ` automatically\n  * [`parsers.py`](aiida_champ/parsers.py): A new `Parser` for the `CHAMPCalculation`\n* [`docs/`](docs/): A documentation template ready for publication on [Read the Docs](http://aiida-champ.readthedocs.io/en/latest/)\n* [`examples/`](examples/): An example of how to submit a calculation using this plugin\n* [`tests/`](tests/): Basic regression tests using the [pytest](https://docs.pytest.org/en/latest/) framework (submitting a calculation, ...). Install `pip install -e .[testing]` and run `pytest`.\n* [`.coveragerc`](.coveragerc): Configuration of [coverage.py](https://coverage.readthedocs.io/en/latest) tool reporting which lines of your plugin are covered by tests\n* [`.gitignore`](.gitignore): Telling git which files to ignore\n* [`.pre-commit-config.yaml`](.pre-commit-config.yaml): Configuration of [pre-commit hooks](https://pre-commit.com/) that sanitize coding style and check for syntax errors. Enable via `pip install -e .[pre-commit] && pre-commit install`\n* [`.readthedocs.yml`](.readthedocs.yml): Configuration of documentation build for [Read the Docs](https://readthedocs.org/)\n* [`LICENSE`](LICENSE): License for your plugin\n* [`MANIFEST.in`](MANIFEST.in): Configure non-Python files to be included for publication on [PyPI](https://pypi.org/)\n* [`README.md`](README.md): This file\n* [`conftest.py`](conftest.py): Configuration of fixtures for [pytest](https://docs.pytest.org/en/latest/)\n* [`pytest.ini`](pytest.ini): Configuration of [pytest](https://docs.pytest.org/en/latest/) test discovery\n* [`setup.json`](setup.json): Plugin metadata for registration on [PyPI](https://pypi.org/) and the [AiiDA plugin registry](https://aiidateam.github.io/aiida-registry/) (including entry points)\n* [`setup.py`](setup.py): Installation script for pip / [PyPI](https://pypi.org/) \n\nSee also the following video sequences from the 2019-05 AiiDA tutorial: \n"
      },
      "source": "https://raw.githubusercontent.com/TREX-CoE/aiida-champ/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 1.0,
      "result": {
        "original_header": "Development",
        "type": "Text_excerpt",
        "value": "```shell\ngit clone https://github.com/neelravi/aiida-champ .\ncd aiida-champ\npip install -e .[pre-commit,testing]  # install extra dependencies\npre-commit install  # install pre-commit hooks\npytest -v  # discover and run all tests\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/TREX-CoE/aiida-champ/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/TREX-CoE/aiida-champ/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 The AiiDA Team.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/TREX-CoE/aiida-champ/master/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "aiida-champ"
        ],
        "type": "Text_excerpt",
        "value": "MIT\n\n"
      },
      "source": "https://raw.githubusercontent.com/TREX-CoE/aiida-champ/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/TREX-CoE/aiida-champ/master/docs/source/images/logo_champ_reduced.png"
      },
      "source": "https://raw.githubusercontent.com/TREX-CoE/aiida-champ/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "aiida-champ"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "TREX-CoE"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 18234,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 195,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/TREX-CoE/aiida-champ/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://coverage.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/TREX-CoE/aiida-champ/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:34:41",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 8
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "aiida-champ"
        ],
        "type": "Text_excerpt",
        "value": "Here goes a complete example of how to submit a test calculation using this plugin.\n\nA quick demo of how to submit a calculation:\n```shell\nverdi daemon start     # make sure the daemon is running\ncd examples\npython example_01.py        # run test calculation\nverdi process list -a  # check record of calculation\n```\n\nThe plugin also includes verdi commands to inspect its data types:\n```shell\nverdi data champ list\nverdi data champ export <PK>\n```\n"
      },
      "source": "https://raw.githubusercontent.com/TREX-CoE/aiida-champ/master/README.md",
      "technique": "header_analysis"
    }
  ]
}