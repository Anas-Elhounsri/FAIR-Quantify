{
  "acknowledgement": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Acknowledgments",
        "parent_header": [
          "CircularSTAR3D: a stack-based RNA 3D structural alignment tool for circular matching"
        ],
        "type": "Text_excerpt",
        "value": "CircularSTAR3D is developed for an NIH funded project (R01GM102515).\n\nCircularSTAR3D uses java packages Commons CLI and EJML.  \nCommons CLI: http://commons.apache.org/proper/commons-cli/  \nEJML: http://ejml.org/wiki/index.php?title=Main_Page  \n\nCircularSTAR3D modified and reused code from [STAR3D](http://genome.ucf.edu/STAR3D/) for stack detection and loop alignment.  \n  "
      },
      "source": "https://raw.githubusercontent.com/ucfcbb/CircularSTAR3D/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "application_domain": [
    {
      "confidence": 14.93,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ucfcbb/CircularSTAR3D"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact",
        "parent_header": [
          "CircularSTAR3D: a stack-based RNA 3D structural alignment tool for circular matching"
        ],
        "type": "Text_excerpt",
        "value": "Xiaoli Chen is the contact author of CircularSTAR3D software package. For bug reports or comments please contact xiaoli.chen@knights.ucf.edu.\n"
      },
      "source": "https://raw.githubusercontent.com/ucfcbb/CircularSTAR3D/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-10-08T18:07:20Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-04-03T01:52:32Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9006846486003397,
      "result": {
        "original_header": "Terms",
        "type": "Text_excerpt",
        "value": "Where appropriate, please cite the following circularSTAR3D paper:\nChen and Zhang, \"CircularSTAR3D: a stack-based RNA 3D structural alignment tool for circular matching\", Nucleic Acids Research, Volume 51, Issue 9, 22 May 2023, Page e53,\n \n"
      },
      "source": "https://raw.githubusercontent.com/ucfcbb/CircularSTAR3D/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9054966585776516,
      "result": {
        "original_header": "Preprocessing",
        "type": "Text_excerpt",
        "value": "CircularSTAR3D downloads PDB files and preprocesses them to retrieve the \nsecondary structural information. \nPreprocess for circular matching, go to the root directory of CircularSTAR3D and execute \n\"python3 run_circularSTAR3D.py --preprocess --pdb-id [PDB ID] --chain-id [CHAIN ID]\". \nPreprocess for regular local alignment, go to the root directory of CircularSTAR3D and execute \n\"python3 run_circularSTAR3D.py --non-rotate --preprocess --pdb-id [PDB ID] --chain-id [CHAIN ID]\". \nIf you want to use your custom PDB files, copy them into PDB/ before running the preprocess command. CircularSTAR3D will skip downloading from PDB website if the PDB files present in the PDB folder. Please use suffix \".pdb\" for PDB format and suffix \".cif\" for PDBx/mmcif format files.     \nCircularSTAR3D extracts base-pair information from DSSR's annotations. CircularSTAR3D has been tested with DSSR basic version 1.5.3 and the version in http://skmatic.x3dna.org/ as of 01/31/2023. The DSSR annotation files that were used to generate the results in our manuscript are provided along with CircularSTAR3D package. There are two ways for users to use DSSR for their PDB files.\n1. If you have DSSR software, copy DSSR into CircularSTAR3D/tools/. After that, you will have CircularSTAR3D/tools/DSSR/x3dna-dssr.\n2. If you don't have DSSR software, you can copy DSSR annotation files for your PDBs into CircularSTAR3D/STAR3D_struct_info/.\n   For example, if you want to preprocess PDB 6d90, you can copy your 6d90.dssr file into CircularSTAR3D/STAR3D_struct_info/. The DSSR annotation files can be downloaded from http://skmatic.x3dna.org/, where you can specifiy the PDB ID if it is in PDB database or upload the PDB file to run DSSR webserver. Then copy the content in \"DSSR-derived features in text format\" into a file in CircularSTAR3D/STAR3D_struct_info with file name \"PDB_ID.dssr\", replace PDB_ID with the PDB ID that you use to run CircularSTAR3D. \n"
      },
      "source": "https://raw.githubusercontent.com/ucfcbb/CircularSTAR3D/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9781256297291255,
      "result": {
        "original_header": "Output files",
        "type": "Text_excerpt",
        "value": "The PDB output files have the suffix \"alnx.pdb\", where \"x\" is the rank of the local alignment. The PDB files store the coordinate data for the local alignment that can be used for visualization and futher analysis. These files are in PDB format ([an introduction of PDB format](https://www.cgl.ucsf.edu/chimera/docs/UsersGuide/tutorials/pdbintro.html)). Each PDB ouput file includes 2 models. Model 1 and Model 2 are the aligned substructures in input RNA 1 and RNA 2 respectively. The coodinates of the aligned substructure in input RNA 1 are rotated and translated to superimpose with RNA 2. The coodinates of the aligned substructure in input RNA 2 are the same with the original input files. To view the alignment in PyMOL, click \"Movie\" in the menu and select \"Show All States\".  \n \n"
      },
      "source": "https://raw.githubusercontent.com/ucfcbb/CircularSTAR3D/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ucfcbb/CircularSTAR3D/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ucfcbb/CircularSTAR3D/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ucfcbb/CircularSTAR3D"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/ucfcbb/CircularSTAR3D/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ucfcbb/CircularSTAR3D/master/setup.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "CircularSTAR3D: a stack-based RNA 3D structural alignment tool for circular matching"
        ],
        "type": "Text_excerpt",
        "value": "CircularSTAR3D package provides compiled jar files that you can run directly.  \nIf you want to build from the source code, go to the root directory of this package and run \"chmod +x ./setup.sh && ./setup.sh\". \n"
      },
      "source": "https://raw.githubusercontent.com/ucfcbb/CircularSTAR3D/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9949407834961749,
      "result": {
        "original_header": "Preprocessing",
        "type": "Text_excerpt",
        "value": "Preprocess for circular matching, go to the root directory of CircularSTAR3D and execute \n\"python3 run_circularSTAR3D.py --preprocess --pdb-id [PDB ID] --chain-id [CHAIN ID]\". \nPreprocess for regular local alignment, go to the root directory of CircularSTAR3D and execute \n\"python3 run_circularSTAR3D.py --non-rotate --preprocess --pdb-id [PDB ID] --chain-id [CHAIN ID]\". \nIf you want to use your custom PDB files, copy them into PDB/ before running the preprocess command. CircularSTAR3D will skip downloading from PDB website if the PDB files present in the PDB folder. Please use suffix \".pdb\" for PDB format and suffix \".cif\" for PDBx/mmcif format files.     \nCircularSTAR3D extracts base-pair information from DSSR's annotations. CircularSTAR3D has been tested with DSSR basic version 1.5.3 and the version in http://skmatic.x3dna.org/ as of 01/31/2023. The DSSR annotation files that were used to generate the results in our manuscript are provided along with CircularSTAR3D package. There are two ways for users to use DSSR for their PDB files.\n1. If you have DSSR software, copy DSSR into CircularSTAR3D/tools/. After that, you will have CircularSTAR3D/tools/DSSR/x3dna-dssr.\n2. If you don't have DSSR software, you can copy DSSR annotation files for your PDBs into CircularSTAR3D/STAR3D_struct_info/.\n   For example, if you want to preprocess PDB 6d90, you can copy your 6d90.dssr file into CircularSTAR3D/STAR3D_struct_info/. The DSSR annotation files can be downloaded from http://skmatic.x3dna.org/, where you can specifiy the PDB ID if it is in PDB database or upload the PDB file to run DSSR webserver. Then copy the content in \"DSSR-derived features in text format\" into a file in CircularSTAR3D/STAR3D_struct_info with file name \"PDB_ID.dssr\", replace PDB_ID with the PDB ID that you use to run CircularSTAR3D. \nNotice: Make sure the fold \"tools\" and file \"CircularSTAR3D.jar\" in the same directory. If you see \"Exception in thread \"main\" java.lang.UnsupportedClassVersionError\", try to delete the files in class/ folder and run \"ant jar\".\n \n"
      },
      "source": "https://raw.githubusercontent.com/ucfcbb/CircularSTAR3D/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9536526884888445,
      "result": {
        "original_header": "Structural Alignment",
        "type": "Text_excerpt",
        "value": "Go to the CircularSTAR3D home directory and execute \n\"python3 run_circularSTAR3D.py [options]\"  \nMore options for the program can be seen by executing \n\"python3 run_circularSTAR3D.py -h\" \nUse \"--non-rotate\" to generate local alignment from LocalSTAR3D.  \nUse \"--output-prefix\" to set the prefix of the output files, The default prefix is \"output\".  \nUse \"--print-PDB n\" to generate PDB for top n alignments. The output PDB files will be named by using the same prefix of the output alingment file. For example, if the prefix is \"4frn_B_3f2x_X\", the output alignment file will be 4frn_B_3f2x_X.aln and the PDB file of the first alignment will be 4frn_B_3f2x_X.aln1.pdb. The default prefix is \"output\". The users can add path string to the prefix. The output files will be in the CircularSTAR3D root directory by default.   \nNotice: Make sure the folds \"PDB\", \"STAR3D_struct_info\" and the file \"CircularSTAR3D.jar\" \nin the same directory. \n \n"
      },
      "source": "https://raw.githubusercontent.com/ucfcbb/CircularSTAR3D/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ucfcbb/CircularSTAR3D/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2022 S. Zhang Lab at UCF\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/ucfcbb/CircularSTAR3D/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CircularSTAR3D"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "ucfcbb"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Java",
        "size": 234751,
        "type": "Programming_language",
        "value": "Java"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 3586,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 72,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ucfcbb/CircularSTAR3D/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "parent_header": [
          "CircularSTAR3D: a stack-based RNA 3D structural alignment tool for circular matching"
        ],
        "type": "Text_excerpt",
        "value": "CircularSTAR3D is implemented by using java 1.8 and can be executed in 64-bit \nLinux. Two java packages, \"commons-cli-1.2.jar\" and \"EJML-core-0.26.jar\", \nare used in the program to support argument parsing and efficient \nmatrix computation. The two jar files have been already included into the package.\n\n \"Apache ant\" is required to compile the source code.\n\nApache ant: http://ant.apache.org/bindownload.cgi \nFor Linux system, ant can be installed directly by using command line.  \nDebian/Ubuntu: \"apt-get install ant\"  \nFedora/CentOS: \"yum install ant\"   \n"
      },
      "source": "https://raw.githubusercontent.com/ucfcbb/CircularSTAR3D/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "run",
    "download",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 09:38:14",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Examples",
        "parent_header": [
          "CircularSTAR3D: a stack-based RNA 3D structural alignment tool for circular matching"
        ],
        "type": "Text_excerpt",
        "value": "```\npython3 run_circularSTAR3D.py --preprocess --pdb-id 3f2x --chain-id X\npython3 run_circularSTAR3D.py --preprocess --pdb-id 4frn --chain-id B\npython3 run_circularSTAR3D.py --print-PDB 1 --minimum-stack-size 2 --pdb-id1 4frn --chain-id1 B --pdb-id2 3f2x --chain-id2 X\n\npython3 run_circularSTAR3D.py --non-rotate --preprocess --pdb-id 3f2x --chain-id X  \npython3 run_circularSTAR3D.py --non-rotate --preprocess --pdb-id 4frn --chain-id B  \npython3 run_circularSTAR3D.py --non-rotate --minimum-stack-size 2 --pdb-id1 4frn --chain-id1 B --pdb-id2 3f2x --chain-id2 X\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ucfcbb/CircularSTAR3D/master/README.md",
      "technique": "header_analysis"
    }
  ]
}