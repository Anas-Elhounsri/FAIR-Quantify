{
  "application_domain": [
    {
      "confidence": 45.31,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "When using this script, please cite the NanoJ paper and our pre-print",
        "type": "Text_excerpt",
        "value": "Laine, R. F., Tosheva, K. L., Gustafsson, N., Gray, R., Almada, P., Albrecht, D., Risa, G. T., Hurtig, F., Lind\u00e5s, A. C., Baum, B., Mercer, J., Leterrier, C., Pereira, P. M., Culley, S., & Henriques, R. (2019). NanoJ: a high-performance open-source super-resolution microscopy toolbox. Journal of physics D: Applied physics, 52(16), 163001. https://doi.org/10.1088/1361-6463/ab0261\n\nPylv\u00e4n\u00e4inen J.W., Laine, R. F., Ghimire, S., Follain G., Henriques, R & Jacquemet G. (2022). Fast4DReg: Fast registration of 4D microscopy datasets. bioRxiv 2022.08.22.504744; https://doi.org/10.1101/2022.08.22.504744\n"
      },
      "source": "https://raw.githubusercontent.com/guijacquemet/Fast4DReg/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/CellMigrationLab/Fast4DReg"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributors": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contributors",
        "type": "Text_excerpt",
        "value": "* [Joanna Pylv\u00e4n\u00e4inen](https://twitter.com/JwPylvanainen)\n* [Romain F. Laine](https://twitter.com/LaineBioImaging)\n* [Bruno Manuel Santos Saraiva](https://twitter.com/Bruno_MSaraiva)\n* [Ricardo Henriques](https://twitter.com/HenriquesLab)\n* [Guillaume Jacquemet](https://twitter.com/guijacquemet)\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/guijacquemet/Fast4DReg/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-11-26T13:38:54Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-21T11:12:04Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Fast4DReg is a Fiji script for quick drift correction in time-lapse 3D-stacks. The script can be used to correct drift in all x-, y- and/or z-directions."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9978726067099928,
      "result": {
        "original_header": "Overview",
        "type": "Text_excerpt",
        "value": "Fast4DReg is a Fiji macro for drift correction for 2D and 3D video and is able to correct drift in all x-, y- and/or z-directions. Fast4DReg creates intensity projections along both axes and estimates their drift using cross-correlation based drift correction, and then translates the video frame by frame (Figure 1). Additionally, Fast4DReg can be used for aligning multi-channel 2D or 3D images which is particularly useful for instruments that suffer from a misalignment of channels. \n"
      },
      "source": "https://raw.githubusercontent.com/guijacquemet/Fast4DReg/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9540998497486839,
      "result": {
        "original_header": "Fast4DReg tools",
        "type": "Text_excerpt",
        "value": "Fast4DReg consists of four scripts, and two sub-menus. The Legacy 2D menu stores estimate and apply functions used in the script. These function are macro callable. NanoJTable IO menu stores functions for opening and saving the NanoJ tables, also macro callable.  \n"
      },
      "source": "https://raw.githubusercontent.com/guijacquemet/Fast4DReg/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9131136216642186,
      "result": {
        "original_header": "Fast4DReg scripts",
        "type": "Text_excerpt",
        "value": "- **time_estimate+apply:** This script estimates drift in a 2D or 3D video and applies the correction to the same dataset. Correction can be performed for a single or multiple 2D and/or 3D videos in batch. The script will also output a *settings.csv* file with relevant script parameters and file paths. This file can be use to correct a similar drift in another dataset, for example another channel. \n- **channel_estimate+apply:** This script estimates misalignement of channels in a 2D or 3D dataset and applies the correction to the same dataset. Correction can be performed for a single or multiple 2D and/or 3D videos in batch. The script will also output a *settings.csv* file with relevant script parameters and file paths. This file can be use to correct a similar drift in another dataset. \n"
      },
      "source": "https://raw.githubusercontent.com/guijacquemet/Fast4DReg/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9142464989929966,
      "result": {
        "original_header": "Drift correction workflow",
        "type": "Text_excerpt",
        "value": "**xy-correction (2D and 3D)**\n1. First Fast4DReg creates intensity lateral projections (average or maximum) at each time point to create 2D videos. This part is skipped if using 2D videos. \n2. Second, Fast4DReg uses a drift correction algorithm to estimate the linear x-y drift between two images by calculating their cross-correlation matrix (CCM). The location of the peak intensity in the CCM determines the linear shift between the two images. Depending on the data, either the first frame or the previous frame of the raw data can be set as the reference frame.\n3. Once the drift is estimated, the dataset can be directly corrected frame by frame according to the amount of estimated drift. \n4. Fast4DReg creates lateral intensity projections (average or maximum) at each time point to create 2D videos along the y- or z-axis.\n5. Fast4DReg uses a drift correction algorithm to estimate the linear z-drift between two images by calculating their cross-correlation matrix (CCM). The location of the peak intensity in the CCM determines the linear shift between the two images. Depending on the data, either the first frame or the previous frame of the raw data can be set as the reference frame.\n6. Once the z-drift is estimated, the dataset can be directly corrected frame by frame according to the amount of estimated drift. \n***Figure 1: Fast4DReg pipeline.*** *Fast4DReg corrects for drift in x-y direction by first creating intensity projections to create 2D videos. Then it estimates the linear x-y drift between two images by calculating their cross-correlation matrix and applying the correction to the stack. To correct the drift in the z-direction Fast4DReg creates frontal intensity and corrects the drift as described above. Lateral and axial drift corrections can also be used independently. Fast4DReg outputs a folder containing the corrected images, drift plots, a drift table and a settings file that can be applied to correct another image with the same settings.* \n"
      },
      "source": "https://raw.githubusercontent.com/guijacquemet/Fast4DReg/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.890405398858447,
      "result": {
        "original_header": "Estimate and apply drift",
        "type": "Text_excerpt",
        "value": "*Figure 2: Estimate and apply user interface* \n2. In the user interface\n- **Experiment number:** Will be used for the output folder identifier.\n- **Select the path to the file to be corrected:** Navigate to your image by using *Add files..* or drag and drop into the white box. Files can be 2D and 3D videos or a mixture of those.\n- **xy-drift correction:** if you want to correct for xy-drift, tick the xy-drift correction box.\n- **Projection type:** Select the projection type used for xy-drift estimation (maximum or average intensity). Average projection usually works better for very noisy images.\n- **Time averaging:** This sets the number of frames to average together to make coarser time points on which the\ncross-correlation analysis will be run to calculate drift. Setting this value to 1 will calculate\nstraight frame-to-frame cross-correlations and while this should capture drift very accurately, it\nwill also be very susceptible to noise. Conversely, setting this value high will average out noise\nbut will also give a lower sample of the drift (which is then interpolated).\n- **Maximum expected drift:** This refers to the maximum expected drift between the first frame of the dataset and the last\nframe of the dataset in units of pixels. Setting this to 0 will allow the algorithm to automatically\ndetermine the drift without any limitations. It is only really worth changing this value from 0 if\nrunning the algorithm gives incorrect results with too large jumps in estimated drift.\n- **Reference frame:** If this is set to \u2018first frame (default, better for fixed)\u2019 then every averaged group of frames will be\ncompared to the first average group of frames to calculate drift. If this is set to \u2018previous frame\n(better for live)\u2019 then every averaged group of frames will be compared to the previous averaged\ngroup of frames. For static samples, it is best to compare to the first frame, and for live samples where there may be slow scale drift overlaying\nthe faster scale sample motion, it is better to compare to the previous frame.\n- **Crop output:** Crop output will crop out the black frame created by the image moving.\n- **z-drift correction:** If you want to correct for z-drift, tick the z-drift correction box.\n- **Reslice mode:** Reslice mode lets you decide if you want to create the projection along the x-axis (top) or y-axis (left). \n- **Projection type:** Select the projection type used for z-drift estimation (maximum or average intensity). Average projection usually works better for very noisy images.\n- **Extend stack to fit:** Extend stack to fit will create extra slices to the stack to ensure that the whole stack is saved while moving up and/or down.\n- **Save RAM:** If ticked the image will be converted to 32-bit, but the original bit-depth is kept. This saves RAM and speeds up the process.\n  \n3. Click ok. The script will run.\n4. When the script has completed the process, you will have the following files in a new folder:\n       - corrected images\n       - drift plots\n       - drift tables\n       - a settings file, that you can use to run the script on another image with identical parameters (e.g. other channel). \n   \n   The folder will have an unique identifier: *fileName + date + experiment number*. \n   If you plan to apply the correction to another channel, make sure not to move these files to another folder.\n   \n"
      },
      "source": "https://raw.githubusercontent.com/guijacquemet/Fast4DReg/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8324298372269451,
      "result": {
        "original_header": "Apply drift",
        "type": "Text_excerpt",
        "value": "\n- **Select the path to the file to be corrected:** Navigate to your image by using *Add files..* or drag and drop into the white box. The files can be located in different folders. \n"
      },
      "source": "https://raw.githubusercontent.com/guijacquemet/Fast4DReg/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9981497350834174,
      "result": {
        "original_header": "Change log",
        "type": "Text_excerpt",
        "value": " Fast4DReg runs now independent of NanoJ and is able to correct drift in both, 2D and 3D images.  \n"
      },
      "source": "https://raw.githubusercontent.com/guijacquemet/Fast4DReg/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/guijacquemet/Fast4DReg/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/guijacquemet/Fast4DReg/main/scripts/registration_assesment_notebook.ipynb"
      },
      "source": "https://raw.githubusercontent.com/guijacquemet/Fast4DReg/main/scripts/registration_assesment_notebook.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/CellMigrationLab/Fast4DReg/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CellMigrationLab/Fast4DReg"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Overview"
      },
      "source": "https://raw.githubusercontent.com/guijacquemet/Fast4DReg/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://user-images.githubusercontent.com/74545655/174895500-48bf89f0-3bbe-4073-9dff-b7da828d78ef.gif"
      },
      "source": "https://raw.githubusercontent.com/guijacquemet/Fast4DReg/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/guijacquemet/Fast4DReg/main/images/Fast4DReg-menu.png"
      },
      "source": "https://raw.githubusercontent.com/guijacquemet/Fast4DReg/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/guijacquemet/Fast4DReg/main/images/Fast4DReg-methodDescription.png"
      },
      "source": "https://raw.githubusercontent.com/guijacquemet/Fast4DReg/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/guijacquemet/Fast4DReg/main/images/Fast4DReg-install-0.png"
      },
      "source": "https://raw.githubusercontent.com/guijacquemet/Fast4DReg/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/guijacquemet/Fast4DReg/main/images/Fast4DReg-install-1.png"
      },
      "source": "https://raw.githubusercontent.com/guijacquemet/Fast4DReg/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/guijacquemet/Fast4DReg/main/images/Fast4Dreg-estimateUI.png"
      },
      "source": "https://raw.githubusercontent.com/guijacquemet/Fast4DReg/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/guijacquemet/Fast4DReg/main/images/Fast4DReg-applyUI.png"
      },
      "source": "https://raw.githubusercontent.com/guijacquemet/Fast4DReg/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Fast4DReg",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Fast4DReg is easy to istall by enabling the Fast4DReg update site:\n- Open ImageJ \n- Navigate to *Help -> Update -> Manage update sites*\n- Select Fast4DReg\n\n![image](images/Fast4DReg-install-0.png)\n\n- When selected select *Close* and *Apply changes*. \n- Restart Fiji.\n"
      },
      "source": "https://raw.githubusercontent.com/guijacquemet/Fast4DReg/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8222023290503322,
      "result": {
        "original_header": "Drift correction workflow",
        "type": "Text_excerpt",
        "value": "If using multichannel images, the channels need to be split. The drift will be estimated according to the channel that has more stable structures (for example endothelium instead of migrating cancer cells). The drift correction can then be applied to the second (or more) channels by using the time_apply script. \n"
      },
      "source": "https://raw.githubusercontent.com/guijacquemet/Fast4DReg/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8981675794198868,
      "result": {
        "original_header": "Estimate and apply drift",
        "type": "Text_excerpt",
        "value": "**Before starting** \nPrepare your image to have one channel. If you have multiple channels they can all be in the same folder as separate files. \n**Running the script**\n1. Open the \"time_estimate+apply\" from the Fiji Plugins menu: *Plugins -> Fast4FReg -> time_estimate+apply.* The user interface opens. \n"
      },
      "source": "https://raw.githubusercontent.com/guijacquemet/Fast4DReg/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9222359993224244,
      "result": {
        "original_header": "Apply drift",
        "type": "Text_excerpt",
        "value": "\n- **Select the path to the file to be corrected:** Navigate to your image by using *Add files..* or drag and drop into the white box. The files can be located in different folders. \n- **Select where to save the corrected images:** All corrected images will be saved to this folder.\n \n2. Click ok.  \n"
      },
      "source": "https://raw.githubusercontent.com/guijacquemet/Fast4DReg/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.939972471428919,
      "result": {
        "original_header": "Known issues",
        "type": "Text_excerpt",
        "value": "Make sure not to move the drift table from the results folder as the path to the drift table is hardcoded to the settings.csv file.  \nIf you create a settings file with the *estimate+apply* -script and use it to correct other image by using the *apply*-script, make sure you use the same operating system (i.g PC, Mac, Linux). \n"
      },
      "source": "https://raw.githubusercontent.com/guijacquemet/Fast4DReg/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8238717405760196,
      "result": {
        "original_header": "Change log",
        "type": "Text_excerpt",
        "value": "  **230923 Version 2.1 (the clean 'n fast dimensionalist)** \n  **230112 Version 2.1 (the clean 'n fast dimensionalist)** \nFast4Dreg code has been cleaned and the RAM saving mode improved. The RAM saving mode now runs significantly faster than before.\n \n  **221014 Version 2.0 (the dimensionalist)** \n"
      },
      "source": "https://raw.githubusercontent.com/guijacquemet/Fast4DReg/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8836985003078629,
      "result": {
        "original_header": "Apply drift",
        "type": "Text_excerpt",
        "value": "- **Select the settings file (csv.):** Navigate to your settings file (called settings.csv). \n"
      },
      "source": "https://raw.githubusercontent.com/guijacquemet/Fast4DReg/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/CellMigrationLab/Fast4DReg/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/guijacquemet/Fast4DReg/main/images/Fast4DReg-logo.png"
      },
      "source": "https://raw.githubusercontent.com/guijacquemet/Fast4DReg/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Fast4DReg"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "CellMigrationLab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Java",
        "size": 122899,
        "type": "Programming_language",
        "value": "Java"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "ImageJ Macro",
        "size": 66919,
        "type": "Programming_language",
        "value": "ImageJ Macro"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 14426,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/guijacquemet/Fast4DReg/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jpylvanainen",
          "type": "User"
        },
        "date_created": "2023-01-12T09:23:32Z",
        "date_published": "2023-01-12T09:26:47Z",
        "description": "This is the version to be submitted to JSC - code has been cleaned, and ram saving mode improved.",
        "html_url": "https://github.com/CellMigrationLab/Fast4DReg/releases/tag/v2.1",
        "name": "v2.1 (the clean 'n fast dimensionalist)",
        "release_id": 88697168,
        "tag": "v2.1",
        "tarball_url": "https://api.github.com/repos/CellMigrationLab/Fast4DReg/tarball/v2.1",
        "type": "Release",
        "url": "https://api.github.com/repos/CellMigrationLab/Fast4DReg/releases/88697168",
        "value": "https://api.github.com/repos/CellMigrationLab/Fast4DReg/releases/88697168",
        "zipball_url": "https://api.github.com/repos/CellMigrationLab/Fast4DReg/zipball/v2.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jpylvanainen",
          "type": "User"
        },
        "date_created": "2022-10-13T14:31:49Z",
        "date_published": "2022-10-14T11:40:10Z",
        "description": "Fast4DReg runs now independent of NanoJ and is able to correct both 2D and 3D images (time and channels).",
        "html_url": "https://github.com/CellMigrationLab/Fast4DReg/releases/tag/v2.0",
        "name": "v2.0 (the dimensionalist)",
        "release_id": 79910285,
        "tag": "v2.0",
        "tarball_url": "https://api.github.com/repos/CellMigrationLab/Fast4DReg/tarball/v2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/CellMigrationLab/Fast4DReg/releases/79910285",
        "value": "https://api.github.com/repos/CellMigrationLab/Fast4DReg/releases/79910285",
        "zipball_url": "https://api.github.com/repos/CellMigrationLab/Fast4DReg/zipball/v2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jpylvanainen",
          "type": "User"
        },
        "date_created": "2022-09-14T10:21:29Z",
        "date_published": "2022-09-15T07:15:33Z",
        "description": "**Pre-print version**\r\n\r\nFast4DReg: Fast registration of 4D microscopy datasets\r\ndoi: https://doi.org/10.1101/2022.08.22.504744",
        "html_url": "https://github.com/CellMigrationLab/Fast4DReg/releases/tag/v1.0",
        "name": "v1.0",
        "release_id": 77256859,
        "tag": "v1.0",
        "tarball_url": "https://api.github.com/repos/CellMigrationLab/Fast4DReg/tarball/v1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/CellMigrationLab/Fast4DReg/releases/77256859",
        "value": "https://api.github.com/repos/CellMigrationLab/Fast4DReg/releases/77256859",
        "zipball_url": "https://api.github.com/repos/CellMigrationLab/Fast4DReg/zipball/v1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Fast4DReg is dependent on **Bio-Formats**, which can be installed through the Fiji update site: \n- Open ImageJ \n- Navigate to *Help -> Update -> Manage update sites*\n- Select Bio-Formats\n\n![image](images/Fast4DReg-install-1.png)\n\n- When selected select *Close* and *Apply changes*. \n- Restart Fiji.\n\n"
      },
      "source": "https://raw.githubusercontent.com/guijacquemet/Fast4DReg/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-04 10:20:23",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 37
      },
      "technique": "GitHub_API"
    }
  ]
}