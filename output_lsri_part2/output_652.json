{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/scicompuu/prophaser"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-04-26T12:58:38Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-19T06:23:41Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Imputation of genotype data based on the full probabilistic Li and Stephens model"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.943302599034384,
      "result": {
        "original_header": "phaser",
        "type": "Text_excerpt",
        "value": "Phasing and imputation using the Li & Stephens approximate coalescent algorithm for haplotype frequencies.  \nOriginal reference for algorithm:\n> [1] Modeling Linkage Disequilibrium and Identifying Recombination Hotspots Using Single-Nucleotide Polymorphism Data. N. Li and M. Stephens. 2013. \nAnother reference where the same underlying model is implemented. Some of the optimizations explained in this paper have also been implemented in this code:\n> [2] MaCH: Using Sequence and Genotype Data to Estimate Haplotypes and Unobserved Genotypes. Y. Li, C. J. Willer, J. Ding, et al. 2010. \n\nThis software implementes a normalized forward-backward algorithm for hidden markov models explained in e.g.\n>https://pdfs.semanticscholar.org/54dc/c2a758e7fa34b8c2ef19826f39f16c4d1731.pdf \n"
      },
      "source": "https://raw.githubusercontent.com/scicompuu/prophaser/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8531408565272011,
      "result": {
        "original_header": "build",
        "type": "Text_excerpt",
        "value": "these need to be downloaded and the path to them updated in makefile \n"
      },
      "source": "https://raw.githubusercontent.com/scicompuu/prophaser/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9479624758504728,
      "result": {
        "original_header": "branches",
        "type": "Text_excerpt",
        "value": "Two of the branches are current: *master* and *ompmod*:\n \n"
      },
      "source": "https://raw.githubusercontent.com/scicompuu/prophaser/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9674476725400271,
      "result": {
        "original_header": "master",
        "type": "Text_excerpt",
        "value": "This branch implements the optimization based on collapsing of transition probabilities from [2], resulting in an effective computational complexity quadratic in the number of haplotypes. \nThis outputs two VCF files, one with phased haplotypes (.phased) and one with the most likely genotypes, calculated by summing together all the posterior state probabilities for each genotype (.genos). The genos tends to give much better imputation performance.\n \n"
      },
      "source": "https://raw.githubusercontent.com/scicompuu/prophaser/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9929332949546728,
      "result": {
        "original_header": "ompmod",
        "type": "Text_excerpt",
        "value": "This branch implements an additional optimization for memory usage, using a two-level version of the checkpointing scheme from [2] to obtain a more cache-friendly algorithm that can be executed on GPUs. Uses OpenMP offloading pragmas and can be compiled for multicore CPUs and GPUs. \nThis branch corresponds to the implementation described in the paper \"Achieving improved accuracy for imputation of ancient DNA\". \n"
      },
      "source": "https://raw.githubusercontent.com/scicompuu/prophaser/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9686165038938209,
      "result": {
        "original_header": "genetic maps",
        "type": "Text_excerpt",
        "value": "Currently, the code assumes that all markers present in the reference file (= the markers that will be considered during imputation) are present in the map file. The directory [/examples](/examples) contains a script that performs linear interpolation of a genetic map to extend it to a specific set of genomic positions. If no mapfile is specified, the distance is set to 0.01 for all sites, which tends to give not so good performance. \n"
      },
      "source": "https://raw.githubusercontent.com/scicompuu/prophaser/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9758457753587964,
      "result": {
        "original_header": "template VCF",
        "type": "Text_excerpt",
        "value": "I couldnt get the libStatGen utilities to work for creating new VCFs, so now a temporary solution is to use a template vcf. The imputation code assumes a template VCF file with a specific name exists for every input filename. Such a file is created by the script create_template_vcf.sh, which is called in the example script [/examples/run_phaser.sh](/examples/run_phaser.sh). \n"
      },
      "source": "https://raw.githubusercontent.com/scicompuu/prophaser/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/scicompuu/prophaser/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/scicompuu/prophaser/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "scicompuu/prophaser"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "phaser"
      },
      "source": "https://raw.githubusercontent.com/scicompuu/prophaser/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/scicompuu/prophaser/master/create_template_vcf.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/scicompuu/prophaser/master/examples/run_phaser.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.9694299973392592,
      "result": {
        "original_header": "build",
        "type": "Text_excerpt",
        "value": "build using makefile \n* https://github.com/statgen/libStatGen\n* http://eigen.tuxfamily.org/index.php?title=Main_Page \nthese need to be downloaded and the path to them updated in makefile \n"
      },
      "source": "https://raw.githubusercontent.com/scicompuu/prophaser/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9911689778500508,
      "result": {
        "original_header": "template VCF",
        "type": "Text_excerpt",
        "value": "**The run will fail if:**\n * If the directory specified for output does not exist.\n * If a proper template does not exist.\n \n**Don't do big runs before ensuring the above.** \n"
      },
      "source": "https://raw.githubusercontent.com/scicompuu/prophaser/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/scicompuu/prophaser/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "BSD 3-Clause \"New\" or \"Revised\" License",
        "spdx_id": "BSD-3-Clause",
        "type": "License",
        "url": "https://api.github.com/licenses/bsd-3-clause",
        "value": "https://api.github.com/licenses/bsd-3-clause"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "BSD 3-Clause License\n\nCopyright (c) 2022, Kristiina Ausmees\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
      },
      "source": "https://raw.githubusercontent.com/scicompuu/prophaser/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "prophaser"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "scicompuu"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 70496,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 712,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 515,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/scicompuu/prophaser/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running",
        "type": "Text_excerpt",
        "value": "Example scripts in [/examples](/examples)\n\n```\n./run_phaser.sh\n```\n"
      },
      "source": "https://raw.githubusercontent.com/scicompuu/prophaser/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 11:29:52",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ]
}