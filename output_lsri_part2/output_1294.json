{
  "application_domain": [
    {
      "confidence": 12.9,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ablab/viralVerify"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-10-02T16:50:55Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-11T07:13:08Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "viralVerify: viral contig verification tool"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.949895166010876,
      "result": {
        "original_header": "viralVerify: viral contig verification tool",
        "type": "Text_excerpt",
        "value": "viralVerify classifies contigs (output of metaviralSPAdes or other assemblers) as viral, non-viral or uncertain, \nbased on gene content. Also for non-viral contigs it can optionally provide plasmid/non-plasmid classification. \nviralVerify predicts genes in the contig using Prodigal in the metagenomic mode, runs hmmsearch on the predicted proteins \nand classifies the contig as vrial or non-viral by applying the Naive Bayes classifier (NBC). \nFor the set of predicted HMMs, viralVerify uses trained NBC to classify this set to be viral or chromosomal.  \nTo improve results in the case of metagenomes with possible host contamination, we recommend users to filter out reads that align to the host genome prior to assembly.\nSince viralVerify is based on gene classification, it can be used on contigs on any length, and short viruses can be detected as long as they contain a recognizable virus-specific gene. To help analyze the rapidly growing amount of novel data, we have added a script that allows users to construct their own training database from a set of viral, chromosomal and plasmid contigs, as well as custom HMM database\n \n"
      },
      "source": "https://raw.githubusercontent.com/ablab/viralVerify/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9506480941821577,
      "result": {
        "original_header": "Optional BLAST verification",
        "type": "Text_excerpt",
        "value": "You can verify your output by BLAST to check if you found novel viruses or plasmids. In this case, you need to have blastn in your $PATH, Biopython installed, and provide a path to the nucleotide database (e.g. local copy of the NCBI nt database). For each contig we report information (e-value, query coverage, identity and subject title) about its best blast hit in the provided database. \n"
      },
      "source": "https://raw.githubusercontent.com/ablab/viralVerify/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9766998581022278,
      "result": {
        "original_header": "Retraining classifier",
        "type": "Text_excerpt",
        "value": "You can retrain the classifier with your custom data using provided *training_script*. It takes viral, chromosomal and plasmid (optionally) training sequences in fasta format and set of HMMS, predict genes and HMM hits, and returns the frequency table. To use the retrained classifier, replace the \"classifier_table.txt\" file in the viralVerify directory with the obtained table.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ablab/viralVerify/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ablab/viralVerify/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 12
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ablab/viralVerify/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ablab/viralVerify"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "viralVerify: viral contig verification tool"
      },
      "source": "https://raw.githubusercontent.com/ablab/viralVerify/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.8990398058845578,
      "result": {
        "original_header": "viralVerify: viral contig verification tool",
        "type": "Text_excerpt",
        "value": "**Version: 1.1** \n"
      },
      "source": "https://raw.githubusercontent.com/ablab/viralVerify/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ablab/viralVerify/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021 Center for Algorithmic Biotechnology\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/ablab/viralVerify/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "viralVerify"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "ablab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 26745,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ablab/viralVerify/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "mikeraiko",
          "type": "User"
        },
        "date_created": "2021-08-21T10:39:39Z",
        "date_published": "2021-08-21T11:29:13Z",
        "description": "Release 1.1",
        "html_url": "https://github.com/ablab/viralVerify/releases/tag/1.1",
        "name": "v.1.1",
        "release_id": 48203387,
        "tag": "1.1",
        "tarball_url": "https://api.github.com/repos/ablab/viralVerify/tarball/1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/ablab/viralVerify/releases/48203387",
        "value": "https://api.github.com/repos/ablab/viralVerify/releases/48203387",
        "zipball_url": "https://api.github.com/repos/ablab/viralVerify/zipball/1.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "parent_header": [
          "viralVerify: viral contig verification tool"
        ],
        "type": "Text_excerpt",
        "value": "viralVerify is a Python script, thus, installation is not required. However, it has the following dependencies:\n\n* Python 3.6+,\n* Prodigal (https://github.com/hyattpd/Prodigal, available via conda),\n* hmmsearch (from the hmmer package, http://hmmer.org/download.html),\n* provided *decompressed* database of virus/chromosome-specific HMMs (https://figshare.com/s/f897d463b31a35ad7bf0)\n\n or \n \n* recent release of the Pfam-A database (ftp://ftp.ebi.ac.uk/pub/databases/Pfam/releases/).\n\nTo work properly, viralVerify require Prodigal and hmmsearch in your PATH environment variable.\n\n"
      },
      "source": "https://raw.githubusercontent.com/ablab/viralVerify/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 13:54:08",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 65
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "viralVerify: viral contig verification tool"
        ],
        "type": "Text_excerpt",
        "value": "    viralverify \n            -f Input fasta file\n            -o output_directory \n            --hmm HMM  Path to HMM database\n\n            Optional arguments:\n            -h, --help  Show the help message and exit\n            --db DB     Run BLAST on input contigs against provided db\n            -t          Number of threads\n            -thr THR    Sensitivity threshold (minimal absolute score to classify sequence, default = 7)\n            -p          Output predicted plasmidic contigs separately\n\n\nOutput file: comma-separated table *<input_file>_result_table.csv*\n\nOutput format: contig name, prediction result, log-likelihood ratio, list of predicted HMMs\n  \nFasta files with prediction results can be found in the *Prediction_results_fasta* folder\n  \nTo decrease number of false positives (at the expense of potential false negatives) you may increase the detection threshold, provided as an optional argument.\n"
      },
      "source": "https://raw.githubusercontent.com/ablab/viralVerify/master/README.md",
      "technique": "header_analysis"
    }
  ]
}