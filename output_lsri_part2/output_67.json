{
  "acknowledgement": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Acknowledgements",
        "type": "Text_excerpt",
        "value": "Unicycler would not have been possible without [Kat Holt](https://holtlab.net/), my fellow researchers in her lab and the many other people I work with at the University of Melbourne's [Bio21 Molecular Science & Biotechnology Institute](http://www.bio21.unimelb.edu.au/). In particular, [Margaret Lam](https://scholar.google.com.au/citations?user=cWmhzUIAAAAJ), [Kelly Wyres](https://scholar.google.com.au/citations?user=anwFM9oAAAAJ), [David Edwards](https://scholar.google.com.au/citations?hl=en&user=rZ1RJK0AAAAJ) and [Claire Gorrie](https://scholar.google.com.au/citations?user=mSO9WPUAAAAJ) worked with me on many challenging genomes during Unicycler's development. [Louise Judd](https://scholar.google.com.au/citations?user=eO22mYUAAAAJ) is great with the MinION and produced many of the long reads I have used when developing Unicycler.\n\nUnicycler uses [SeqAn](https://www.seqan.de/) to perform alignments and other sequence manipulations. The authors of this library have been very helpful during Unicycler's development and I owe them a great deal of thanks! It also uses [minimap](https://github.com/lh3/minimap) for alignment and [miniasm](https://github.com/lh3/miniasm) for long-read assembly, and so I'd like to thank [Heng Li](https://github.com/lh3) for these tools. Finally, Unicycler uses [nanoflann](https://github.com/jlblancoc/nanoflann), a delightfully fast and lightweight nearest neighbour library, to perform its line-finding in semi-global alignment.\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "application_domain": [
    {
      "confidence": 4.53,
      "result": {
        "type": "String",
        "value": "Audio"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/rrwick/Unicycler"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2016-03-14T06:57:02Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-03T23:09:02Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "hybrid assembly pipeline for bacterial genomes"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "type": "Text_excerpt",
        "value": "As input, Unicycler takes one of the following:\n* Illumina reads from a bacterial isolate (ideally paired-end, but unpaired works too)\n* A set of long reads (either PacBio or Nanopore) from a bacterial isolate\n* Illumina reads and long reads from the same isolate (best case)\n\nReasons to use Unicycler:\n* It circularises replicons without the need for a separate tool like [Circlator](http://sanger-pathogens.github.io/circlator/).\n* It handles plasmid-rich genomes.\n* It can use long reads of any depth and quality in hybrid assembly. 20\u00d7 or more may be required to complete a genome, but Unicycler can make nearly-complete genomes with far fewer long reads.\n* It produces an assembly _graph_ in addition to a contigs FASTA file, viewable in [Bandage](https://github.com/rrwick/Bandage).\n* It filters out low-depth contigs, giving clean assemblies even when the read set has low-level contamination.\n* It has low misassembly rates.\n* It can cope with highly repetitive genomes, such as [_Shigella_](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC153260/).\n* It's easy to use: runs with just one command and usually doesn't require tinkering with parameters.\n\nReasons to __not__ use Unicycler:\n* You're assembling a eukaryotic genome or a metagenome (Unicycler is designed exclusively for bacterial isolates).\n* Your Illumina reads and long reads are from different isolates (Unicycler struggles with sample heterogeneity).\n* You're impatient (Unicycler is thorough but not especially fast).\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9811167732959782,
      "result": {
        "original_header": "2022 update",
        "type": "Text_excerpt",
        "value": "Unicycler was initially made in 2016, back when long reads could be sparse and very noisy. For example, our early Oxford Nanopore sequencing runs might generate only 15\u00d7 read depth for a single bacterial isolate, and most of the reads had a _lot_ of errors. So Unicycler was designed to use low-depth and low-accuracy long reads to scaffold a short-read assembly graph to completion, an approach I call short-read-first hybrid assembly. Assuming the short-read assembly graph is in good shape, Unicycler does this quite well! \nHowever, things have changed in the last six years. Nanopore sequencing yield is now much higher, making >100\u00d7 depth easy to obtain, even on multiplexed runs. Read accuracy has also improved and continues to get better each year. High-depth and high-accuracy long reads make long-read-first hybrid assembly (long-read assembly followed by short-read polishing) a viable approach that's often preferable to Unicycler. I have developed [Trycycler](https://github.com/rrwick/Trycycler/wiki) and [Polypolish](https://github.com/rrwick/Polypolish/wiki) in the pursuit of ideal long-read-first assemblies. \nUnicycler is not completely out-of-date, as it is still (in my opinion) the best tool for short-read-first hybrid assembly of bacterial genomes. But I think it should only be used for hybrid assembly when long-read-first is not an option \u2013 i.e. when long-read depth is low. I also think that Unicycler is good for short-read-only bacterial genomes, as it produces cleaner assembly graphs than SPAdes alone. So while Unicycler doesn't get a lot of my time and attention these days, I don't yet consider it to be abandonware. \nFor some up-to-date bacterial genome assembly tips, check out these parts of Trycycler's wiki:\n* [Should I use Unicycler or Trycycler to assemble my bacterial genome?](https://github.com/rrwick/Trycycler/wiki/FAQ-and-miscellaneous-tips#should-i-use-unicycler-or-trycycler-to-assemble-my-bacterial-genome)\n* [Guide to bacterial genome assembly](https://github.com/rrwick/Trycycler/wiki/Guide-to-bacterial-genome-assembly) \n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9777090658455759,
      "result": {
        "original_header": "Assembly graphs",
        "type": "Text_excerpt",
        "value": "To understand what Unicycler is doing, you need to know about assembly graphs. For a thorough introduction, I'd suggest [this tutorial](http://homolog.us/Tutorials/index.php?p=1.1&s=1) or the [Velvet paper](http://genome.cshlp.org/content/genome/18/5/821.full.html). But in short, an assembly graph is a data structure where contigs aren't disconnected sequences but can have connections to each other:\n```\nJust contigs:               Assembly graph:\n\nTCGAAACTTGACGCGAGTCGC                             CTTGTTTA\nTGCTACTGCTTGATGATGCGG                            /        \\\nTGTCCATT                    TCGAAACTTGACGCGAGTCGC          TGCTACTGCTTGATGATGCGG\nCTTGTTTA                                         \\        /\n                                                  TGTCCATT\n``` \nMost assemblers use graphs internally to produce their assemblies, but users often ignore the graph in favour of the conceptually simpler FASTA file of contigs. When a genome assembly is 100% complete, we have one contig per chromosome/plasmid and there's no real need for the graph. But most short-read assemblies are not complete, and a graph can describe an incomplete assembly much better than contigs alone. \n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9294347106858987,
      "result": {
        "original_header": "Limitations of short reads",
        "type": "Text_excerpt",
        "value": "The main reason we can't get a complete assembly from short reads is that DNA usually contains _repeats_ \u2013 the same sequence occurring two or more times in the genome. When a repeat is longer than the reads (or for paired-end sequencing, longer than the insert size), it forms a single contig in the assembly graph with multiple connections in and multiple connections out. \nHere is what happens to a simple bacterial assembly graph as you add repeats to the genome:\n<p align=\"center\"><img src=\"misc/repeats_in_graph.png\" alt=\"Repeats in graph\"></p> \nAs repeats are added, the graph becomes increasingly tangled (and real assembly graphs get a lot more tangled than that). \nTo complete a bacterial genome assembly (i.e. find the one correct sequence for each chromosome/plasmid), we need to resolve the repeats. This means finding which way into a repeat matches up with which way out. Short reads don't have enough information for this but _long reads_ do. \n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9480056665004115,
      "result": {
        "original_header": "SPAdes graphs",
        "type": "Text_excerpt",
        "value": "Assembly graphs come in many different varieties, but we are particularly interested in the kind produced by SPAdes, because that is what Unicycler uses. \nSPAdes graphs are made by performing a de Bruijn graph assembly with a range of different _k_-mer sizes, from small to large (see the [SPAdes paper](http://online.liebertpub.com/doi/abs/10.1089/cmb.2012.0021)). Each assembly builds on the previous one, which allows SPAdes to get the advantages of both small _k_-mer assemblies (a more connected graph) and large _k_-mer assemblies (better ability to resolve repeats). Two contigs in a SPAdes graph that connect will overlap by their _k_-mer size (more info on the [Bandage wiki page](https://github.com/rrwick/Bandage/wiki/Assembler-differences)). \nAfter producing the graph, SPAdes can perform further repeat resolution by using paired-end information. Since two reads in a pair are close to each other in the original DNA, SPAdes can use this to trace paths in the graph to form larger contigs (see [their paper on ExSPAnder](http://bioinformatics.oxfordjournals.org/content/30/12/i293.short)). However, the SPAdes contigs with repeat resolution do not come in graph form \u2013 they are only available in a FASTA file. \n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.911279006475282,
      "result": {
        "original_header": "Method: Illumina-only assembly",
        "type": "Text_excerpt",
        "value": "When assembling just Illumina reads, Unicycler functions mainly as a SPAdes optimiser. It offers a few benefits over using SPAdes alone:\n* Tries a wide range of _k_-mer sizes and automatically selects the best.\n* Filters out low-depth parts of the assembly to remove contamination.\n* Applies SPAdes repeat resolution to the graph (as opposed to disconnected contigs in a FASTA file).\n* Rejects low-confidence repeat resolution to reduce the rate of misassembly.\n* Trims off graph overlaps so sequences aren't repeated where contigs join. \nMore information on the Illumina-only assembly process is described in the steps below. \n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9248224104385632,
      "result": {
        "original_header": "SPAdes assembly",
        "type": "Text_excerpt",
        "value": "A raw SPAdes graph can also contain some 'junk' sequences due to sequencer artefacts or contamination, so Unicycler performs some graph cleaning to remove these. Therefore, small amounts of contamination in the Illumina reads should not be a problem. \n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9676417661696923,
      "result": {
        "original_header": "Multiplicity",
        "type": "Text_excerpt",
        "value": "To scaffold the graph, Unicycler must distinguish between single copy contigs and repeats. It does this with a greedy algorithm that uses both read depth and graph connectivity: \nThis process does _not_ assume that all single copy contigs have the same read depth, which allows it to identify single copy contigs from plasmids as well as the chromosome. After it has determined multiplicity, Unicycler chooses a set of 'anchor' contigs. These are sufficiently-long single-copy contigs suitable for bridging in later steps. \n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9240058735598825,
      "result": {
        "original_header": "Overlap removal",
        "type": "Text_excerpt",
        "value": "To reduce redundancy and allow for neatly circularised contigs, Unicycler removes all overlap in the graphs:\n<pre>\nBefore:                                       After:\n                   <b>GACGCGT</b>TGACAAGGAAAT                           TGACAAGGAAAT\n                  /                                             /\nTTGACTACCCA<b>GACGCGT</b>                            TTGACTACCCAGACGCGT\n                  \\                                             \\\n                   <b>GACGCGT</b>CCTCTCATTCTA                           CCTCTCATTCTA\n</pre> \n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8872605844124588,
      "result": {
        "original_header": "Bridging",
        "type": "Text_excerpt",
        "value": "At this point, the assembly graph does not contain the SPAdes repeat resolution. To apply this to the graph, Unicycler builds bridges between single copy contigs using the [path information](https://github.com/GFA-spec/GFA-spec/blob/master/GFA1.md#p-path-line) in the SPAdes assembly. \nBridges are given a quality score, most importantly based on the length of the bridge compared to the length of the paired end insert size, so bridges which span a long repeat are given a low score. Since paired-end sequencing cannot resolve repeats longer than the insert size, bridges which attempt to span long repeats cannot be trusted. This selectivity helps to reduce the number of misassemblies. \n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9159379200120259,
      "result": {
        "original_header": "Method: long-read-only assembly",
        "type": "Text_excerpt",
        "value": "When assembling just long reads, Unicycler uses a miniasm+Racon pipeline. It offers a couple advantages over using other long-read-only assemblers:\n* Multiple rounds of Racon polishing give a good final sequence accuracy.\n* Circular replicons (like most bacterial chromosomes and plasmids) assemble into circular replicons with no start-end overlap. \nMore information on the long-read-only assembly process is described in the steps below. \n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9764571071986512,
      "result": {
        "original_header": "miniasm assembly",
        "type": "Text_excerpt",
        "value": "Unicycler uses minimap and miniasm to assemble the long reads in essentially the same manner as described in the [miniasm README](https://github.com/lh3/miniasm). This produces an uncorrected assembly which is made directly of pieces of reads \u2013 the assembly error rate will be similar to the read error rate. \nThe version of miniasm that comes with Unicycler is slightly modified in a couple of ways. The first modification is to help circular replicons assemble into circular string graphs. The other modification only applies to hybrid assembly, so I'll come back to that! \n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9207965519517736,
      "result": {
        "original_header": "Racon polishing",
        "type": "Text_excerpt",
        "value": "After miniasm assembly, Unicycler carries out multiple rounds of polishing with [Racon](https://github.com/lbcb-sci/racon) to improve the sequence accuracy. It will polish until the assembly stops improving, as measured by the agreement between the reads and the assembly. Circular replicons are 'rotated' (have their starting position shifted) between rounds of polishing to ensure that no part of the sequence is left unpolished. \n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9674869332663596,
      "result": {
        "original_header": "Method: hybrid assembly",
        "type": "Text_excerpt",
        "value": "Hybrid assembly (using both Illumina read and long reads) is where Unicycler really shines. Like with the Illumina-only pipeline described above, Unicycler will produce an Illumina assembly graph. It then uses long reads to build bridges, which often allows it to resolve all repeats in the genome, resulting in a complete genome assembly. \n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9618138685279214,
      "result": {
        "original_header": "Long-read plus contig assembly",
        "type": "Text_excerpt",
        "value": "This step uses miniasm and Racon, and is very much like the [long-read-only assembly method](#method-long-read-only-assembly) described above. Here however, the assembly is not just on long reads but a mixture of long reads and anchor contigs from the Illumina-only assembly. Since these anchor contigs can often be much longer than long reads (sometimes hundreds of kbp), they can significantly help the assembly. This takes advantage of the other modification to miniasm which was teased above. In Unicycler's miniasm, contigs and long reads are treated slightly differently in the string graph manipulations to better perform this step. \nAfter the assembly is finished, Unicycler finds anchor contigs in the assembled sequence and uses the intervening sequences to create bridges:\n```\nassembled sequence:                 TATGGTCTCGCATGTTAATTCTACTCCCGAACTTGGCCCATCCCCGGCTAGGCTGGGCACTAGACGGTGGAT\nanchor contigs:                         GTCTCGCATGTTAA    ACTCCCGAACTTGGCCCATCCCCGGC       GGCACTAGACGGTGG\nintervening sequences for bridges:                    TTCT                          TAGGCTG\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9048299531168333,
      "result": {
        "original_header": "Direct long-read bridging",
        "type": "Text_excerpt",
        "value": "Unicycler also attempts to make long-read bridges directly by semi-globally aligning the long reads to the assembly graph. For each pair of single copy contigs which are linked by read alignments, Unicycler uses the read consensus sequence to find a connecting path and creates a bridge. \nThis step and the previous step are somewhat redundant, as both use long reads to build bridges between short-read contigs. They are both included because they have different strengths. The previous approach can tolerate low long-read depth but requires a good short-read assembly graph (i.e. few dead ends). This step requires decent long-read depth but can tolerate poor short-read assembly graphs. By using the two strategies together, Unicycler can successfully handle many types of input. \n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9668681550090754,
      "result": {
        "original_header": "Bridge application",
        "type": "Text_excerpt",
        "value": "At this point of the pipeline there can be many bridges, some of which may conflict. Unicycler therefore assigns a quality score to each based on all available evidence (e.g. read alignment quality, graph path match, read depth consistency). Bridges are then applied in order of decreasing quality so whenever there is a conflict, the most supported bridge is used. A minimum quality threshold prevents the application of low evidence bridges (see [Conservative, normal and bold](#conservative-normal-and-bold) for more information). \n<p align=\"center\"><img src=\"misc/bridge_application.png\" alt=\"Application of bridges\"></p> \n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9484389646823318,
      "result": {
        "original_header": "Conservative, normal and bold",
        "type": "Text_excerpt",
        "value": "Unicycler can be run in three modes: conservative, normal (the default) and bold, set with the `--mode` option. Conservative mode is least likely to produce a complete assembly but has a very low risk of misassembly. Bold mode is most likely to produce a complete assembly but carries greater risk of misassembly. Normal mode is intermediate regarding both completeness and misassembly risk. \nIf the structural accuracy of your assembly is paramount to your research, conservative mode is recommended. If you want a completed genome, even if it contains a mistake or two, then use bold mode. \nIn the above example, the conservative assembly is incomplete because some bridges fell below the quality threshold and were not applied. Its contigs, however, are very reliable. Normal mode nearly gave a complete assembly, but a couple of unmerged contigs remain. Bold mode completed the assembly, but since lower confidence regions were bridged and merged, there is a larger risk of error. \n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9868399421810049,
      "result": {
        "original_header": "Output files",
        "type": "Text_excerpt",
        "value": "Unicycler's most important output files are `assembly.gfa`, `assembly.fasta` and `unicycler.log`. These are produced by every Unicycler run. Which other files are saved to its output directory depends on the value of `--keep`:\n* `--keep 0` retains only the important files. Use this setting to save drive space.\n* `--keep 1` (the default) also saves some intermediate graphs which can be useful for investigating an assembly more deeply.\n* `--keep 2` also retains the SAM file of long-read alignments to the graph. This ensures that if you rerun Unicycler with the same output directory (for example changing the mode to conservative or bold) it will run faster because it does not have to repeat the alignment step.\n* `--keep 3` retains all files and saves many intermediate graphs. This is for debugging purposes and uses a lot of space, so most users should probably avoid this setting. \nAll files and directories are described in the table below. Intermediate output files (everything except for `assembly.gfa`, `assembly.fasta` and `unicycler.log`) will be prefixed with a number so they are in chronological order. Whether or not a file is in the output depends on the `--keep` level and type of input reads (e.g. short-read-only or hybrid). \nFile/directory                 | Description                                                                                       | `--keep` level\n:----------------------------- | :------------------------------------------------------------------------------------------------ | :------------:\n`spades_assembly/`             | directory containing SPAdes files log (can be useful for debugging if SPAdes crashes)             | 3\n`*_spades_graph_k*.gfa`        | unaltered SPAdes assembly graphs at each _k_-mer size                                             | 1\n`*_depth_filter.gfa`           | best SPAdes short-read assembly graph after low-depth contigs have been removed and multiplicity determination | 1\n`*_overlaps_removed.gfa`       | overlap-free version of the best SPAdes graph, with some more graph clean-up                      | 1\n`miniasm_assembly/`            | directory containing miniasm string graphs and unitig graphs                                      | 3\n`simple_bridging/`             | directory containing files for the simple long-read bridging step                                 | 3\n`*_long_read_assembly.gfa`     | the long-read+contig miniasm+Racon assembly                                                       | 1\n`read_alignment/`              | directory containing `long_read_alignments.sam`                                                   | 2\n`*_bridges_applied.gfa`        | bridges applied, before any cleaning or merging                                                   | 1\n`*_cleaned.gfa`                | redundant contigs removed from the graph                                                          | 3\n`*_merged.gfa`                 | contigs merged together where possible                                                            | 3\n`*_final_clean.gfa`            | more redundant contigs removed                                                                    | 1\n`blast/`                       | directory containing files for the assembly-rotation BLAST search                                 | 3\n`*_rotated.gfa`                | circular replicons rotated and/or flipped to a start position                                     | 1\n__`assembly.gfa`__             | final assembly in [GFA v1](https://github.com/GFA-spec/GFA-spec/blob/master/GFA1.md) graph format | 0\n__`assembly.fasta`__           | final assembly in FASTA format (same sequences as in assembly.gfa expect for very short contigs)  | 0\n__`unicycler.log`__            | Unicycler log file (same info as was printed to stdout)                                           | 0 \n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.889059829341765,
      "result": {
        "original_header": "Necessary read length",
        "type": "Text_excerpt",
        "value": "The length of a long read is very important, typically more than its accuracy, because longer reads are more likely to align to multiple single copy contigs, allowing Unicycler to build bridges. \nIn order to resolve the repeat, a read must span it by aligning to some sequence on either side. In this example, the 1 kb reads are shorter than the repeat and are useless. The 2.5 kb reads _can_ resolve the repeat, but they have to be in _just the right place_ to do so. Only one out of the six in this example is useful. The 5 kb reads, however, have a much easier time spanning the repeat and all three are useful. \nSo how long must your reads be for Unicycler to complete an assembly? _Longer than the longest repeat in the genome._ Depending on the genome, that might be a 1 kb insertion sequence, a 6 kb rRNA operon or a 50 kb prophage. If your reads are just a bit longer than the longest repeat, you'll probably need a lot of them. If they are much longer, then fewer reads should suffice. But in any scenario, _longer is better!_ \n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9511354438879723,
      "result": {
        "original_header": "Bad Illumina reads",
        "type": "Text_excerpt",
        "value": "Unicycler prefers decent Illumina reads as input \u2013 ideally with uniform read depth and 100% genome coverage. Bad Illumina read sets can still work in Unicycler, but greater long-read depth will be required to compensate. \nYou can look at Unicycler graphs in Bandage to get a quick impression of the Illumina read quality: \n<p align=\"center\"><img src=\"misc/illumina_graph_comparison.png\" alt=\"Graphs of varying quality\" width=\"750\"></p> \n__A__ is an very good Illumina read graph \u2013 the contigs are long and there are no dead ends. This read set is ideally suited for use in Unicycler and shouldn't require too many long reads to complete (10\u201320\u00d7 would probably be enough). \n__B__ is also a good graph. The genome is more complex, resulting in a more tangled structure, but there are still very few dead ends (you can see one in the lower left). This read set would also work well in Unicycler, though more long reads may be required to get a complete genome (maybe 30\u00d7 or so). \n__C__ is a disaster! It is broken into many pieces, probably because parts of the genome got no read depth at all. This genome may take lots of long reads to complete in Unicycler, possibly 50\u00d7 or more. The final assembly will probably have more small errors (SNPs and indels), as parts of the genome cannot be polished well with Illumina reads. If your graph looks like this, I'd recommend trying a long-read-first assembly approach (see [2022 update](#2022-update)). \n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9027702848108696,
      "result": {
        "original_header": "Very short contigs",
        "type": "Text_excerpt",
        "value": "Confused by very small (e.g. 2 bp) contigs in Unicycler assemblies? Unlike a SPAdes graph where neighbouring sequences overlap by their _k_-mer size, Unicycler's final graph has no overlaps and the sequences adjoin directly. This means that contigs in complex regions can be quite short. They may be useless as stand-alone contigs but are still important in the graph structure. \n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.88797565545408,
      "result": {
        "original_header": "Chromosomes and plasmid depth",
        "type": "Text_excerpt",
        "value": "Unicycler normalises the depth of contigs in the graph to the median value. This typically means that the chromosome has a depth near 1\u00d7 and plasmids may have different (typically higher) depths. \nIn the above graph, the chromosome is at the top (you can only see part of it) and there are two plasmids.  The plasmid on the left occurs in approximately 4 or 5 copies per cell. For the larger plasmid on the right, most cells probably had one copy but some had more. Since sequencing biases can affect read depth, these per cell counts should be interpreted loosely. \n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8906180119487987,
      "result": {
        "original_header": "Known contamination",
        "type": "Text_excerpt",
        "value": "If your long reads have known contamination, you can use the `--contamination` option to give Unicycler a FASTA file of the contaminant sequences. Unicycler will then discard any reads for which the best alignment is to the contaminant. \nFor example, if you've sequenced two isolates in succession on the same Nanopore flow cell, there may be residual reads from the first sample in the second run. In this case, you can supply a reference/assembly of the first sample to Unicycler when assembling the second sample. \nSome Oxford Nanopore protocols include a lambda phage spike-in as a control. Since this is a common contaminant, you can simply use `--contamination lambda` to filter these out (no need to supply a FASTA file). \n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9609766644795081,
      "result": {
        "original_header": "Using an external long-read assembly",
        "type": "Text_excerpt",
        "value": "If you have a long-read assembly that you've prepared outside Unicycler and trust (e.g. with Canu), you can give it to Unicycler with `--existing_long_read_assembly`. Unicycler will then skip its miniasm/Racon step and use this assembly instead. \n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8990708599851105,
      "result": {
        "original_header": "Assemblies with contig overlaps",
        "type": "Text_excerpt",
        "value": "Unicycler [removes overlaps between contigs](#overlap-removal), resulting in cleaner assembly graphs. However, in some contexts, you might want these overlaps. In particular, if you are analysing your assemblies with a _k_-mer-based algorithm, overlaps might be a good thing so _k_-mers at contig boundaries aren't lost. \nIf this applies to you, I'd recommend using Unicycler's `002_depth_filter.gfa` file (the last of the intermediate files before overlaps are removed) instead of the final `assembly.fasta` file. If you need this in FASTA format, Torsten's [any2fasta tool](https://github.com/tseemann/any2fasta) can do the conversion. \n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9144275074527194,
      "result": {
        "type": "Text_excerpt",
        "value": "Unicycler is an assembly pipeline for bacterial genomes. It can assemble -only read sets where it functions as a -optimiser. It can also assembly long-read-only sets ( or ) where it runs a + pipeline. For the best possible assemblies, give it both Illumina reads _and_ long reads, and it will conduct a short-read-first hybrid assembly. \nAnd read about how we use it to complete bacterial genomes here:\n> \n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/rrwick/Unicycler/tree/main/docs"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/rrwick/Trycycler/wiki"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/rrwick/Polypolish/wiki"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/rrwick/Bandage/wiki/Assembler-differences"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/rrwick/Unicycler/wiki/Tips-for-finishing-genomes"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/rrwick/Unicycler/wiki"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/rrwick/Unicycler/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 131
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/rrwick/Unicycler/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "rrwick/Unicycler"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Table of contents"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rrwick/Unicycler/main/misc/repeats_in_graph.png"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rrwick/Unicycler/main/misc/k-mer_plot.png"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rrwick/Unicycler/main/misc/multiplicity.png"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rrwick/Unicycler/main/misc/short_read_bridging.png"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rrwick/Unicycler/main/misc/long_read_bridging.png"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rrwick/Unicycler/main/misc/bridge_application.png"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rrwick/Unicycler/main/misc/conservative_normal_bold.png"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rrwick/Unicycler/main/misc/read_length.png"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rrwick/Unicycler/main/misc/illumina_graph_comparison.png"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rrwick/Unicycler/main/misc/short_contigs.png"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rrwick/Unicycler/main/misc/depth.png"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Install from source",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "These instructions install the most up-to-date version of Unicycler:\n```bash\ngit clone https://github.com/rrwick/Unicycler.git\ncd Unicycler\npython3 setup.py install\n```\n\nNotes:\n* If the last command complains about permissions, you may need to run it with `sudo`.\n* If you want a particular version of Unicycler, download the source from the [releases page](https://github.com/rrwick/Unicycler/releases) instead of cloning from GitHub.\n* Install just for your user: `python3 setup.py install --user`\n    * If you get a strange 'can't combine user with prefix' error, read [this](http://stackoverflow.com/questions/4495120).\n* Install to a specific location: `python3 setup.py install --prefix=$HOME/.local`\n* Install with pip (local copy): `pip3 install path/to/Unicycler`\n* Install with pip (from GitHub): `pip3 install git+https://github.com/rrwick/Unicycler.git`\n* Install with specific Makefile options: `python3 setup.py install --makeargs \"CXX=icpc\"`\n\n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Build and run without installation",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "This approach compiles Unicycler code, but doesn't copy executables anywhere:\n```bash\ngit clone https://github.com/rrwick/Unicycler.git\ncd Unicycler\nmake\n```\nNow instead of running `unicycler`, you instead use `path/to/unicycler-runner.py`.\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Manual multiplicity",
        "parent_header": [
          "Tips"
        ],
        "type": "Text_excerpt",
        "value": "If Unicycler makes a serious mistake during its multiplicity determination, this can have detrimental effects on the rest of the assembly. I've seen this happen when:\n* the Illumina graph is badly fragmented (multiplcity determination has few graph connections to work with).\n* there are multiple very similar plasmids in the genome (shared sequences between plasmids can be huge, 10s of kbp).\n* there is genomic heterogeneity.\n\nIf you believe this has happened in your assembly, you can manually assign multiplicities and try the assembly again. Here's the process:\n* View the short read assembly (`002_depth_filter.gfa`) in Bandage and view the region in question. Note that Unicycler's graph colour scheme uses green for single-copy segments and yellow/orange/red for multi-copy segments.\n* For any segments where you disagree with Unicycler's multiplicity, add a `ML` tag to the GFA segment line in `002_depth_filter.gfa`. Examples:\n  * If Unicycler called segment 50 single-copy but you think it's actually a 2-copy repeat, add `ML:i:2` to the end of the GFA line starting with `S    50`.\n  * If Unicycler called segment 107 multi-copy but you think it's actually single-copy, add `ML:i:1` to the end of the GFA line starting with `S    107`.\n* Run Unicycler again, pointing to the same output directory (with your modified `002_depth_filter.gfa` file). It will take your manually assigned multiplicities into account and hopefully do better!\n\n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Manual completion",
        "parent_header": [
          "Tips"
        ],
        "type": "Text_excerpt",
        "value": "If Unicycler doesn't complete your bacterial genome assembly on its own, you may be able to complete it manually with a bit of bioinformatics detective work. There's no single, straight-forward procedure for doing so, but I've put together [a few examples on the Unicycler wiki](https://github.com/rrwick/Unicycler/wiki/Tips-for-finishing-genomes) which may be helpful.\n\n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8769972236139578,
      "result": {
        "original_header": "Method: hybrid assembly",
        "type": "Text_excerpt",
        "value": "In hybrid assembly, Unicycler carries out all the steps in the Illumina-only pipeline, plus the additional steps below: \n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9589845710738077,
      "result": {
        "original_header": "Finalisation",
        "type": "Text_excerpt",
        "value": "If the above steps have resulted in any simple, circular sequences, then Unicycler will attempt to rotate/flip them to begin at a consistent starting gene. By default this is [dnaA](http://www.uniprot.org/uniprot/?query=gene_exact%3AdnaA&sort=score) or [repA](http://www.uniprot.org/uniprot/?query=gene_exact%3ArepA&sort=score), but users can specify their own with the `--start_genes` option. \n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9601811600503579,
      "result": {
        "original_header": "Assemblies with contig overlaps",
        "type": "Text_excerpt",
        "value": "If this applies to you, I'd recommend using Unicycler's `002_depth_filter.gfa` file (the last of the intermediate files before overlaps are removed) instead of the final `assembly.fasta` file. If you need this in FASTA format, Torsten's [any2fasta tool](https://github.com/tseemann/any2fasta) can do the conversion. \n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.824894028441809,
      "result": {
        "original_header": "SPAdes assembly",
        "type": "Text_excerpt",
        "value": "<img align=\"right\" src=\"misc/k-mer_plot.png\" width=\"156\" height=\"179\"> \n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8075398090184058,
      "result": {
        "original_header": "Multiplicity",
        "type": "Text_excerpt",
        "value": "<p align=\"center\"><img src=\"misc/multiplicity.png\" alt=\"Multiplicity assignment\" width=\"700\"></p> \n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8295206434409436,
      "result": {
        "original_header": "Bridging",
        "type": "Text_excerpt",
        "value": "<p align=\"center\"><img src=\"misc/short_read_bridging.png\" alt=\"Short read bridging\" width=\"600\"></p> \n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.821780626048244,
      "result": {
        "original_header": "Direct long-read bridging",
        "type": "Text_excerpt",
        "value": "<p align=\"center\"><img src=\"misc/long_read_bridging.png\" alt=\"Long-read bridging\"></p> \n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8544784552500883,
      "result": {
        "original_header": "Chromosomes and plasmid depth",
        "type": "Text_excerpt",
        "value": "<p align=\"center\"><img src=\"misc/depth.png\" alt=\"Plasmid depths\"></p> \n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/rrwick/Unicycler/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "GNU General Public License v3.0",
        "spdx_id": "GPL-3.0",
        "type": "License",
        "url": "https://api.github.com/licenses/gpl-3.0",
        "value": "https://api.github.com/licenses/gpl-3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "type": "Text_excerpt",
        "value": "[GNU General Public License, version 3](https://www.gnu.org/licenses/gpl-3.0.html)\n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rrwick/Unicycler/main/misc/logo.png"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Unicycler"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "rrwick"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 11976230,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 750785,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 594596,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 3294,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "rrwick",
          "type": "User"
        },
        "date_created": "2024-06-05T01:57:24Z",
        "date_published": "2024-07-25T04:22:35Z",
        "description": "Just a couple small changes in this release:\r\n* Compatibility with [SPAdes](https://ablab.github.io/spades/) version 4.\r\n* A [bug fix](https://github.com/rrwick/Unicycler/commit/96ffea71e3a78d63ade19d6124946773e65cf129) for a recursion error crash. Addresses [#86](https://github.com/rrwick/Unicycler/issues/86) and [#221](https://github.com/rrwick/Unicycler/issues/221).",
        "html_url": "https://github.com/rrwick/Unicycler/releases/tag/v0.5.1",
        "name": "Unicycler v0.5.1",
        "release_id": 167053499,
        "tag": "v0.5.1",
        "tarball_url": "https://api.github.com/repos/rrwick/Unicycler/tarball/v0.5.1",
        "type": "Release",
        "url": "https://api.github.com/repos/rrwick/Unicycler/releases/167053499",
        "value": "https://api.github.com/repos/rrwick/Unicycler/releases/167053499",
        "zipball_url": "https://api.github.com/repos/rrwick/Unicycler/zipball/v0.5.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "rrwick",
          "type": "User"
        },
        "date_created": "2022-01-23T02:23:23Z",
        "date_published": "2022-01-23T02:27:48Z",
        "description": "This release contains the most changes in a while! They include:\r\n\r\n* Fixed compatibility with modern versions of [SPAdes](http://cab.spbu.ru/spades).\r\n  * Unicycler now works with SPAdes v3.15.3 (current at the time of writing).\r\n  * Starting with version v3.13.1, SPAdes stopped saving graph files for each _k_-mer size (read more [here](https://github.com/ablab/spades/issues/353)). Since Unicycler depends on having a graph for each _k_-mer size, it was necessary to change how Unicycler run SPAdes.\r\n  * Addresses #218, #225, #244, #251, #269, #275.\r\n* Removed Pilon polishing at the end of Unicycler's pipeline.\r\n  * I have learned a lot about polishing in recent years (see the [Polypolish paper](https://www.biorxiv.org/content/10.1101/2021.10.14.464465v2)), and have decided that it's best to leave this out of Unicycler. I.e. if you want to polish your assemblies, that will need to be done in a separate post-Unicycler step.\r\n  * Pilon, Samtools and Bowtie2 are no longer dependencies of Unicycler.\r\n  * Addresses #198, #212, #216, #246, #262, #265, #280, #283.\r\n* Removed read correction at the start of Unicycler's pipeline.\r\n  * I have found that read correction isn't usually necessary or helpful, so I was in the habit of using the `--no_correct` option in previous versions of Unicycler to turn this off. That option no longer exists, as read correction isn't available in Unicycler anymore.\r\n  * I still recommend that you do some read QC before assembly ([fastp](https://github.com/OpenGene/fastp) is one of my favourite tools for this).\r\n  * Addresses #208, #214.\r\n* Unicycler now saves raw SPAdes graphs for each _k_-mer size with the default `--keep` level.\r\n  * This is because I often found it useful to look at lower-_k_-mer graphs when investigating tricky parts of genomes.\r\n* Removed some old and/or experimental components:\r\n  * `unicycler_align` command\r\n  * `unicycler_check` command\r\n  * `unicycler_polish` command (#202, #226, #228, #229, #239)\r\n  * `unicycler_scrub` command\r\n  * `pilon_polish.py` command\r\n  * `--vcf` option (#259, #271)\r\n  * Sorry to anyone that actually used these \u2013 you can still find them in previous versions of Unicycler!\r\n* A couple new command line options:\r\n  * `--no_simple_bridges` to turn off simple long-read bridging (#256)\r\n  * `--spades_options` to provide additional options for SPAdes (#215, #279)\r\n* Added `-m` option to SPAdes call to fix issue with macOS v12 (ablab/spades#839)\r\n* A few bug fixes in long-read bridging (#181, #203, #245, #256).",
        "html_url": "https://github.com/rrwick/Unicycler/releases/tag/v0.5.0",
        "name": "Unicycler v0.5.0",
        "release_id": 57737892,
        "tag": "v0.5.0",
        "tarball_url": "https://api.github.com/repos/rrwick/Unicycler/tarball/v0.5.0",
        "type": "Release",
        "url": "https://api.github.com/repos/rrwick/Unicycler/releases/57737892",
        "value": "https://api.github.com/repos/rrwick/Unicycler/releases/57737892",
        "zipball_url": "https://api.github.com/repos/rrwick/Unicycler/zipball/v0.5.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "rrwick",
          "type": "User"
        },
        "date_created": "2021-05-03T00:13:58Z",
        "date_published": "2021-05-03T00:17:08Z",
        "description": "Nothing major here - just making a release to include a handful of fixes that were on the main branch but not yet in a release.\r\n\r\nThe most significant one is that Unicycler now enforces that SPAdes cannot be a version later than v3.13.0. This is because after that version, SPAdes stopped saving intermediate files that Unicycler needs. Unicycler users that had later versions of SPAdes were getting suboptimal assemblies.",
        "html_url": "https://github.com/rrwick/Unicycler/releases/tag/v0.4.9",
        "name": "Unicycler v0.4.9",
        "release_id": 42337314,
        "tag": "v0.4.9",
        "tarball_url": "https://api.github.com/repos/rrwick/Unicycler/tarball/v0.4.9",
        "type": "Release",
        "url": "https://api.github.com/repos/rrwick/Unicycler/releases/42337314",
        "value": "https://api.github.com/repos/rrwick/Unicycler/releases/42337314",
        "zipball_url": "https://api.github.com/repos/rrwick/Unicycler/zipball/v0.4.9"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "rrwick",
          "type": "User"
        },
        "date_created": "2019-08-16T01:34:04Z",
        "date_published": "2019-08-16T01:36:26Z",
        "description": "Just a couple little changes:\r\n* New `--largest_component` will make Unicycler toss out all connected components in the assembly graph expect for the largest one. Useful for heavily contaminated read sets.\r\n* Reduced the number of Racon polishing rounds for better speed performance.",
        "html_url": "https://github.com/rrwick/Unicycler/releases/tag/v0.4.8",
        "name": "Unicycler v0.4.8",
        "release_id": 19327553,
        "tag": "v0.4.8",
        "tarball_url": "https://api.github.com/repos/rrwick/Unicycler/tarball/v0.4.8",
        "type": "Release",
        "url": "https://api.github.com/repos/rrwick/Unicycler/releases/19327553",
        "value": "https://api.github.com/repos/rrwick/Unicycler/releases/19327553",
        "zipball_url": "https://api.github.com/repos/rrwick/Unicycler/zipball/v0.4.8"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "rrwick",
          "type": "User"
        },
        "date_created": "2018-09-05T23:13:45Z",
        "date_published": "2018-09-06T00:24:42Z",
        "description": "A few small features and bug fixes:\r\n* Support for higher SPAdes k-mers (#108, thanks @ilnamkang)\r\n* Fixed crash with `--kmer_count` (#94, thanks @sjackman)\r\n* Fix a possible Pilon-related crash when running in a VM (#84, thanks @sulheim)\r\n* Fix issue where `--start_genes` required an absolute path (#109, thanks @edawine)\r\n* New `--no_fix_local` option for `unicycler_polish` (#136, thanks @sjackman)",
        "html_url": "https://github.com/rrwick/Unicycler/releases/tag/v0.4.7",
        "name": "Unicycler v0.4.7",
        "release_id": 12753250,
        "tag": "v0.4.7",
        "tarball_url": "https://api.github.com/repos/rrwick/Unicycler/tarball/v0.4.7",
        "type": "Release",
        "url": "https://api.github.com/repos/rrwick/Unicycler/releases/12753250",
        "value": "https://api.github.com/repos/rrwick/Unicycler/releases/12753250",
        "zipball_url": "https://api.github.com/repos/rrwick/Unicycler/zipball/v0.4.7"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "rrwick",
          "type": "User"
        },
        "date_created": "2018-05-28T02:50:40Z",
        "date_published": "2018-05-28T03:03:02Z",
        "description": "Changes in this release:\r\n* Support for newer versions (v1.0+) of Racon\r\n* Improved assembly graph cleaning - can help with assembly of messy small plasmids",
        "html_url": "https://github.com/rrwick/Unicycler/releases/tag/v0.4.6",
        "name": "Unicycler v0.4.6",
        "release_id": 11197953,
        "tag": "v0.4.6",
        "tarball_url": "https://api.github.com/repos/rrwick/Unicycler/tarball/v0.4.6",
        "type": "Release",
        "url": "https://api.github.com/repos/rrwick/Unicycler/releases/11197953",
        "value": "https://api.github.com/repos/rrwick/Unicycler/releases/11197953",
        "zipball_url": "https://api.github.com/repos/rrwick/Unicycler/zipball/v0.4.6"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "rrwick",
          "type": "User"
        },
        "date_created": "2018-04-10T03:56:31Z",
        "date_published": "2018-04-10T04:36:01Z",
        "description": "Changes in this release:\r\n* Improved checking for dependencies when installing (thanks @kblin!)\r\n* New option `--min_anchor_seg_len` to explicitly set the minimum length for scaffolding anchors\r\n* New option `--kmers` to explicitly set SPAdes assembly k-mer sizes\r\n* New option `--spades_tmp_dir` to specify a location for SPAdes' temporary directory (solves #69 and #82, thanks @rec3141!)\r\n* Tweaks to logic which determine chromosomal depth - improves performance on some contaminated read sets",
        "html_url": "https://github.com/rrwick/Unicycler/releases/tag/v0.4.5",
        "name": "Unicycler v0.4.5",
        "release_id": 10468028,
        "tag": "v0.4.5",
        "tarball_url": "https://api.github.com/repos/rrwick/Unicycler/tarball/v0.4.5",
        "type": "Release",
        "url": "https://api.github.com/repos/rrwick/Unicycler/releases/10468028",
        "value": "https://api.github.com/repos/rrwick/Unicycler/releases/10468028",
        "zipball_url": "https://api.github.com/repos/rrwick/Unicycler/zipball/v0.4.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "rrwick",
          "type": "User"
        },
        "date_created": "2018-01-09T01:21:20Z",
        "date_published": "2018-01-09T01:24:53Z",
        "description": "A small release with a few bug fixes:\r\n* Makefile fix for GCC 7 (thanks @cerebis!)\r\n* Fixed crash when using contamination filter (thanks @phbrito!)\r\n* Fixed a bug leading to unnecessarily slow path finding in hybrid assemblies\r\n* Fixed some bugs related to dead-end trimming in hybrid assemblies\r\n* Fixed an off-by-one error in contig placement into miniasm assemblies\r\n\r\nand one new feature:\r\n* Added `--existing_long_read_assembly` option. Allows a high quality long-read assembly (e.g. from Nanopolish or Arrow) to be injected into Unicycler's hybrid assembly pipeline. Can improve final assembly accuracy when short reads have incomplete coverage.",
        "html_url": "https://github.com/rrwick/Unicycler/releases/tag/v0.4.4",
        "name": "Unicycler v0.4.4",
        "release_id": 9154941,
        "tag": "v0.4.4",
        "tarball_url": "https://api.github.com/repos/rrwick/Unicycler/tarball/v0.4.4",
        "type": "Release",
        "url": "https://api.github.com/repos/rrwick/Unicycler/releases/9154941",
        "value": "https://api.github.com/repos/rrwick/Unicycler/releases/9154941",
        "zipball_url": "https://api.github.com/repos/rrwick/Unicycler/zipball/v0.4.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "rrwick",
          "type": "User"
        },
        "date_created": "2017-10-30T04:00:16Z",
        "date_published": "2017-10-30T04:01:55Z",
        "description": "Just a couple little fixes:\r\n* Fixes to polishing logic when using unpaired reads or a mixture of paired and unpaired reads (thanks, @swlong and @shyamrallapalli)\r\n* Fixes for Java version parsing (thanks @natefoo and @dsladevt)",
        "html_url": "https://github.com/rrwick/Unicycler/releases/tag/v0.4.3",
        "name": "Unicycler v0.4.3",
        "release_id": 8305302,
        "tag": "v0.4.3",
        "tarball_url": "https://api.github.com/repos/rrwick/Unicycler/tarball/v0.4.3",
        "type": "Release",
        "url": "https://api.github.com/repos/rrwick/Unicycler/releases/8305302",
        "value": "https://api.github.com/repos/rrwick/Unicycler/releases/8305302",
        "zipball_url": "https://api.github.com/repos/rrwick/Unicycler/zipball/v0.4.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "rrwick",
          "type": "User"
        },
        "date_created": "2017-09-28T07:07:12Z",
        "date_published": "2017-09-28T07:17:43Z",
        "description": "Mostly bug fixes in this release:\r\n* Improvement in logic for bridging loops with long reads.\r\n* Fix for `'UINT32_MAX' was not declared in this scope` issue (thanks, Shyam Rallapalli)\r\n* Fix for a possible crash during the repeat expansion step of graph cleanup (thanks, @sergiarredondo)\r\n* Fix misleading error message for SPAdes Python version incompatibility (thanks, @conra91)\r\n* Fix crash when SPAdes doesn't make `contigs.paths` file (thanks, @smehringer)\r\n* Fix possible crash with Bowtie v2.3.3 (thanks, Danielle Ingle)",
        "html_url": "https://github.com/rrwick/Unicycler/releases/tag/v0.4.2",
        "name": "Unicycler v0.4.2",
        "release_id": 7921423,
        "tag": "v0.4.2",
        "tarball_url": "https://api.github.com/repos/rrwick/Unicycler/tarball/v0.4.2",
        "type": "Release",
        "url": "https://api.github.com/repos/rrwick/Unicycler/releases/7921423",
        "value": "https://api.github.com/repos/rrwick/Unicycler/releases/7921423",
        "zipball_url": "https://api.github.com/repos/rrwick/Unicycler/zipball/v0.4.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "rrwick",
          "type": "User"
        },
        "date_created": "2017-08-23T02:03:21Z",
        "date_published": "2017-08-23T02:06:57Z",
        "description": "Small changes and bug fixes:\r\n* Tweak logic to better include plasmids in the final assembly, even when the Illumina assembly graph is weird (thanks Matthew Croxen)\r\n* Makefile fix which caused some people to have compilation issues with zlib (thanks @tomasyeo, @andersgs and @swlong)\r\n* Made compilation less specific to avoid problems in heterogeneous environments (thanks @cerebis)\r\n* Fixed potential issues with read name parsing (thanks @cerebis)\r\n* Set a SPAdes thread limit to avoid memory issues (thanks @ConstantinV)\r\n* Better error messages with bad Illumina input reads (thanks Gabriele Margos)\r\n* Ability to manually set multiplicities in the Illumina graph, to override Unicycler's multiplicities when you think it's made a mistake\r\n* Efficiency improvements in assembly graph manipulations",
        "html_url": "https://github.com/rrwick/Unicycler/releases/tag/v0.4.1",
        "name": "Unicycler v0.4.1",
        "release_id": 7487097,
        "tag": "v0.4.1",
        "tarball_url": "https://api.github.com/repos/rrwick/Unicycler/tarball/v0.4.1",
        "type": "Release",
        "url": "https://api.github.com/repos/rrwick/Unicycler/releases/7487097",
        "value": "https://api.github.com/repos/rrwick/Unicycler/releases/7487097",
        "zipball_url": "https://api.github.com/repos/rrwick/Unicycler/zipball/v0.4.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "rrwick",
          "type": "User"
        },
        "date_created": "2017-07-03T07:15:22Z",
        "date_published": "2017-07-05T00:20:30Z",
        "description": "This release contains lots of changes and improvements! Some highlights:\r\n* Unicycler can now assemble long-read-only data using a [miniasm](https://github.com/lh3/miniasm)+[Racon](https://github.com/isovic/racon) pipeline.\r\n* Hybrid assemblies use this new long-read-only functionality to better handle low-quality Illumina reads.\r\n* New bridge type added, simple long read bridges, to better handle two-way junctions and loops.\r\n* The read depth filter has been relaxed (was previously too aggressive) and exposed as an option: `--depth_filter`.\r\n\r\nOther bug fixes include:\r\n* Fix polishing problem when assembling unpaired Illumina reads.\r\n* Fix crash with duplicate read names in FASTA read input (occurred with Canu-corrected reads).\r\n* Avoid BLAST crash due to threading (affects some BLAST versions).\r\n* Fix alignment failure due very long, perfect alignments.",
        "html_url": "https://github.com/rrwick/Unicycler/releases/tag/v0.4.0",
        "name": "Unicycler v0.4.0",
        "release_id": 6930750,
        "tag": "v0.4.0",
        "tarball_url": "https://api.github.com/repos/rrwick/Unicycler/tarball/v0.4.0",
        "type": "Release",
        "url": "https://api.github.com/repos/rrwick/Unicycler/releases/6930750",
        "value": "https://api.github.com/repos/rrwick/Unicycler/releases/6930750",
        "zipball_url": "https://api.github.com/repos/rrwick/Unicycler/zipball/v0.4.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "rrwick",
          "type": "User"
        },
        "date_created": "2017-04-13T00:20:50Z",
        "date_published": "2017-04-13T00:24:55Z",
        "description": "A few small improvements and fixes:\r\n- Bug fix for read alignment crash\r\n- Fix BLAST issue with space-containing directory paths\r\n- Add table of program dependencies to stdout\r\n- Other stdout tweaks",
        "html_url": "https://github.com/rrwick/Unicycler/releases/tag/v0.3.1",
        "name": "Unicycler v0.3.1",
        "release_id": 6066879,
        "tag": "v0.3.1",
        "tarball_url": "https://api.github.com/repos/rrwick/Unicycler/tarball/v0.3.1",
        "type": "Release",
        "url": "https://api.github.com/repos/rrwick/Unicycler/releases/6066879",
        "value": "https://api.github.com/repos/rrwick/Unicycler/releases/6066879",
        "zipball_url": "https://api.github.com/repos/rrwick/Unicycler/zipball/v0.3.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "rrwick",
          "type": "User"
        },
        "date_created": "2017-02-16T04:26:40Z",
        "date_published": "2017-02-16T04:30:38Z",
        "description": "Plenty of improvements in this release:\n- Improved alignment algorithm, especially for reads with repeated sequence\n- Bug fix for Unicode related crash\n- Better handling of the Pilon executable\n- And lots more!\n",
        "html_url": "https://github.com/rrwick/Unicycler/releases/tag/v0.3.0",
        "name": "Unicycler v0.3.0",
        "release_id": 5473336,
        "tag": "v0.3.0",
        "tarball_url": "https://api.github.com/repos/rrwick/Unicycler/tarball/v0.3.0",
        "type": "Release",
        "url": "https://api.github.com/repos/rrwick/Unicycler/releases/5473336",
        "value": "https://api.github.com/repos/rrwick/Unicycler/releases/5473336",
        "zipball_url": "https://api.github.com/repos/rrwick/Unicycler/zipball/v0.3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "rrwick",
          "type": "User"
        },
        "date_created": "2016-12-15T11:42:52Z",
        "date_published": "2016-12-16T11:32:44Z",
        "description": "Beta release!\n",
        "html_url": "https://github.com/rrwick/Unicycler/releases/tag/v0.2.0",
        "name": "Unicycler v0.2.0",
        "release_id": 4940006,
        "tag": "v0.2.0",
        "tarball_url": "https://api.github.com/repos/rrwick/Unicycler/tarball/v0.2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/rrwick/Unicycler/releases/4940006",
        "value": "https://api.github.com/repos/rrwick/Unicycler/releases/4940006",
        "zipball_url": "https://api.github.com/repos/rrwick/Unicycler/zipball/v0.2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "rrwick",
          "type": "User"
        },
        "date_created": "2016-08-20T03:29:54Z",
        "date_published": "2016-08-25T04:52:48Z",
        "description": "First alpha release of Unicycler.\n",
        "html_url": "https://github.com/rrwick/Unicycler/releases/tag/v0.1.0",
        "name": "Unicycler v0.1.0",
        "release_id": 3968929,
        "tag": "v0.1.0",
        "tarball_url": "https://api.github.com/repos/rrwick/Unicycler/tarball/v0.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/rrwick/Unicycler/releases/3968929",
        "value": "https://api.github.com/repos/rrwick/Unicycler/releases/3968929",
        "zipball_url": "https://api.github.com/repos/rrwick/Unicycler/zipball/v0.1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "type": "Text_excerpt",
        "value": "* Linux or macOS\n* [Python](https://www.python.org/) 3.4 or later\n* C++ compiler with C++14 support:\n    * [GCC](https://gcc.gnu.org/) 4.9.1 or later\n    * [Clang](http://clang.llvm.org/) 3.5 or later\n    * [ICC](https://software.intel.com/en-us/c-compilers) also works (though I don't know the minimum required version number)\n* [setuptools](https://packaging.python.org/installing/#install-pip-setuptools-and-wheel) (only required for installation of Unicycler)\n* For short-read or hybrid assembly:\n  * [SPAdes](http://bioinf.spbau.ru/spades) v3.14.0 or later (`spades.py`)\n* For long-read or hybrid assembly:\n  * [Racon](https://github.com/lbcb-sci/racon) (`racon`)\n* For rotating circular contigs:\n  * [BLAST+](https://www.ncbi.nlm.nih.gov/books/NBK279690/) (`makeblastdb` and `tblastn`)\n\nUnicycler expects external tools to be available in `$PATH`. If they aren't, you can specify their location using Unicycler options (e.g. `--spades_path`).\n\n[Bandage](https://github.com/rrwick/Bandage) isn't required to run Unicycler, but it is very helpful for manually investigating assemblies (the graph images in this README were made with Bandage).\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Build and run without installation",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "This approach compiles Unicycler code, but doesn't copy executables anywhere:\n```bash\ngit clone https://github.com/rrwick/Unicycler.git\ncd Unicycler\nmake\n```\nNow instead of running `unicycler`, you instead use `path/to/unicycler-runner.py`.\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running time",
        "parent_header": [
          "Tips"
        ],
        "type": "Text_excerpt",
        "value": "Unicycler is thorough and accurate, but not particularly fast. For hybrid assemblies, the [direct long-read bridging](#direct-long-read-bridging) step of the pipeline can take a while to complete. Two main factors influence the running time: the number of long reads (more reads take longer to align) and the genome size/complexity (finding bridge paths is more difficult in complex graphs).\n\nUnicycler may only take an hour or so to assemble a small, simple genome with low depth long reads. On the other hand, a complex genome with many long reads may take 12 hours to finish or more. If you have a very high depth of long reads (e.g. >100\u00d7), you can make Unicycler run faster by subsampling for only the best/longest reads (check out [Filtlong](https://github.com/rrwick/Filtlong)).\n\nUsing a lot of threads (with the `--threads` option) can make Unicycler run faster too. It will only use up to 8 threads by default, but if you're running it on a big machine with lots of CPU and RAM, feel free to use more!\n\nUnicycler also works with [PyPy](https://pypy.org/) which can speed up parts of its pipeline. However, some of Unicycler's slowest steps are when it calls other tools (like SPAdes) or uses C++ code, so PyPy may not help much. I haven't tested this thoroughly \u2013 if you try it, let me know how you go!\n\n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "download",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 09:10:58",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 554
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick usage",
        "type": "Text_excerpt",
        "value": "__Illumina-only assembly:__<br>\n`unicycler -1 short_reads_1.fastq.gz -2 short_reads_2.fastq.gz -o output_dir`\n\n__Long-read-only assembly:__<br>\n`unicycler -l long_reads.fastq.gz -o output_dir`\n\n__Hybrid assembly:__<br>\n`unicycler -1 short_reads_1.fastq.gz -2 short_reads_2.fastq.gz -l long_reads.fastq.gz -o output_dir`\n\nIf you don't have any reads of your own, take a look in the [`sample_data`](sample_data/) directory for links to some small read sets.\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Standard options",
        "parent_header": [
          "Options and usage"
        ],
        "type": "Text_excerpt",
        "value": "Run `unicycler --help` to view the program's most commonly used options:\n\n```\nusage: unicycler [-h] [--help_all] [--version] [-1 SHORT1] [-2 SHORT2] [-s UNPAIRED] [-l LONG] -o OUT\n                 [--verbosity VERBOSITY] [--min_fasta_length MIN_FASTA_LENGTH] [--keep KEEP]\n                 [-t THREADS] [--mode {conservative,normal,bold}] [--linear_seqs LINEAR_SEQS]\n\n       __\n       \\ \\___\n        \\ ___\\\n        //\n   ____//      _    _         _                     _\n //_  //\\\\    | |  | |       |_|                   | |\n//  \\//  \\\\   | |  | | _ __   _   ___  _   _   ___ | |  ___  _ __\n||  (O)  ||   | |  | || '_ \\ | | / __|| | | | / __|| | / _ \\| '__|\n\\\\    \\_ //   | |__| || | | || || (__ | |_| || (__ | ||  __/| |\n \\\\_____//     \\____/ |_| |_||_| \\___| \\__, | \\___||_| \\___||_|\n                                        __/ |\n                                       |___/\n\nUnicycler: an assembly pipeline for bacterial genomes\n\nHelp:\n  -h, --help                      Show this help message and exit\n  --help_all                      Show a help message with all program options\n  --version                       Show Unicycler's version number\n\nInput:\n  -1 SHORT1, --short1 SHORT1      FASTQ file of first short reads in each pair\n  -2 SHORT2, --short2 SHORT2      FASTQ file of second short reads in each pair\n  -s UNPAIRED, --unpaired UNPAIRED\n                                  FASTQ file of unpaired short reads\n  -l LONG, --long LONG            FASTQ or FASTA file of long reads\n\nOutput:\n  -o OUT, --out OUT               Output directory (required)\n  --verbosity VERBOSITY           Level of stdout and log file information (default: 1)\n                                    0 = no stdout, 1 = basic progress indicators, 2 = extra info,\n                                    3 = debugging info\n  --min_fasta_length MIN_FASTA_LENGTH\n                                  Exclude contigs from the FASTA file which are shorter than this\n                                  length (default: 100)\n  --keep KEEP                     Level of file retention (default: 1)\n                                    0 = only keep final files: assembly (FASTA, GFA and log),\n                                    1 = also save graphs at main checkpoints,\n                                    2 = also keep SAM (enables fast rerun in different mode),\n                                    3 = keep all temp files and save all graphs (for debugging)\n\nOther:\n  -t THREADS, --threads THREADS   Number of threads used (default: 8)\n  --mode {conservative,normal,bold}\n                                  Bridging mode (default: normal)\n                                    conservative = smaller contigs, lowest misassembly rate\n                                    normal = moderate contig size and misassembly rate\n                                    bold = longest contigs, higher misassembly rate\n  --linear_seqs LINEAR_SEQS       The expected number of linear (i.e. non-circular) sequences in the\n                                  underlying sequence (default: 0)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Advanced options",
        "parent_header": [
          "Options and usage"
        ],
        "type": "Text_excerpt",
        "value": "Run `unicycler --help_all` to see a complete list of the program's options. These allow you to turn off parts of the pipeline, specify the location of tools (only necessary if they are not in PATH) and adjust various settings:\n\n```\nusage: unicycler [-h] [--help_all] [--version] [-1 SHORT1] [-2 SHORT2] [-s UNPAIRED] [-l LONG] -o OUT\n                 [--verbosity VERBOSITY] [--min_fasta_length MIN_FASTA_LENGTH] [--keep KEEP]\n                 [-t THREADS] [--mode {conservative,normal,bold}] [--min_bridge_qual MIN_BRIDGE_QUAL]\n                 [--linear_seqs LINEAR_SEQS] [--min_anchor_seg_len MIN_ANCHOR_SEG_LEN]\n                 [--spades_path SPADES_PATH] [--min_kmer_frac MIN_KMER_FRAC]\n                 [--max_kmer_frac MAX_KMER_FRAC] [--kmers KMERS] [--kmer_count KMER_COUNT]\n                 [--depth_filter DEPTH_FILTER] [--largest_component] [--spades_options SPADES_OPTIONS]\n                 [--no_miniasm] [--racon_path RACON_PATH]\n                 [--existing_long_read_assembly EXISTING_LONG_READ_ASSEMBLY] [--no_simple_bridges]\n                 [--no_long_read_alignment] [--contamination CONTAMINATION] [--scores SCORES]\n                 [--low_score LOW_SCORE] [--min_component_size MIN_COMPONENT_SIZE]\n                 [--min_dead_end_size MIN_DEAD_END_SIZE] [--no_rotate] [--start_genes START_GENES]\n                 [--start_gene_id START_GENE_ID] [--start_gene_cov START_GENE_COV]\n                 [--makeblastdb_path MAKEBLASTDB_PATH] [--tblastn_path TBLASTN_PATH]\n\n       __\n       \\ \\___\n        \\ ___\\\n        //\n   ____//      _    _         _                     _\n //_  //\\\\    | |  | |       |_|                   | |\n//  \\//  \\\\   | |  | | _ __   _   ___  _   _   ___ | |  ___  _ __\n||  (O)  ||   | |  | || '_ \\ | | / __|| | | | / __|| | / _ \\| '__|\n\\\\    \\_ //   | |__| || | | || || (__ | |_| || (__ | ||  __/| |\n \\\\_____//     \\____/ |_| |_||_| \\___| \\__, | \\___||_| \\___||_|\n                                        __/ |\n                                       |___/\n\nUnicycler: an assembly pipeline for bacterial genomes\n\nHelp:\n  -h, --help                      Show this help message and exit\n  --help_all                      Show a help message with all program options\n  --version                       Show Unicycler's version number\n\nInput:\n  -1 SHORT1, --short1 SHORT1      FASTQ file of first short reads in each pair\n  -2 SHORT2, --short2 SHORT2      FASTQ file of second short reads in each pair\n  -s UNPAIRED, --unpaired UNPAIRED\n                                  FASTQ file of unpaired short reads\n  -l LONG, --long LONG            FASTQ or FASTA file of long reads\n\nOutput:\n  -o OUT, --out OUT               Output directory (required)\n  --verbosity VERBOSITY           Level of stdout and log file information (default: 1)\n                                    0 = no stdout, 1 = basic progress indicators, 2 = extra info,\n                                    3 = debugging info\n  --min_fasta_length MIN_FASTA_LENGTH\n                                  Exclude contigs from the FASTA file which are shorter than this\n                                  length (default: 100)\n  --keep KEEP                     Level of file retention (default: 1)\n                                    0 = only keep final files: assembly (FASTA, GFA and log),\n                                    1 = also save graphs at main checkpoints,\n                                    2 = also keep SAM (enables fast rerun in different mode),\n                                    3 = keep all temp files and save all graphs (for debugging)\n\nOther:\n  -t THREADS, --threads THREADS   Number of threads used (default: 8)\n  --mode {conservative,normal,bold}\n                                  Bridging mode (default: normal)\n                                    conservative = smaller contigs, lowest misassembly rate\n                                    normal = moderate contig size and misassembly rate\n                                    bold = longest contigs, higher misassembly rate\n  --min_bridge_qual MIN_BRIDGE_QUAL\n                                  Do not apply bridges with a quality below this value\n                                    conservative mode default: 25.0\n                                    normal mode default: 10.0\n                                    bold mode default: 1.0\n  --linear_seqs LINEAR_SEQS       The expected number of linear (i.e. non-circular) sequences in the\n                                  underlying sequence (default: 0)\n  --min_anchor_seg_len MIN_ANCHOR_SEG_LEN\n                                  If set, Unicycler will not use segments shorter than this as\n                                  scaffolding anchors (default: automatic threshold)\n\nSPAdes assembly:\n  These options control the short-read SPAdes assembly at the beginning of the Unicycler pipeline.\n\n  --spades_path SPADES_PATH       Path to the SPAdes executable (default: spades.py)\n  --min_kmer_frac MIN_KMER_FRAC   Lowest k-mer size for SPAdes assembly, expressed as a fraction of\n                                  the read length (default: 0.2)\n  --max_kmer_frac MAX_KMER_FRAC   Highest k-mer size for SPAdes assembly, expressed as a fraction of\n                                  the read length (default: 0.95)\n  --kmers KMERS                   Exact k-mers to use for SPAdes assembly, comma-separated (example:\n                                  21,51,71, default: automatic)\n  --kmer_count KMER_COUNT         Number of k-mer steps to use in SPAdes assembly (default: 8)\n  --depth_filter DEPTH_FILTER     Filter out contigs lower than this fraction of the chromosomal\n                                  depth, if doing so does not result in graph dead ends (default:\n                                  0.25)\n  --largest_component             Only keep the largest connected component of the assembly graph\n                                  (default: keep all connected components)\n  --spades_options SPADES_OPTIONS\n                                  Additional options to be given to SPAdes (example: \"--phred-offset\n                                  33\", default: no additional options)\n\nminiasm+Racon assembly:\n  These options control the use of miniasm and Racon to produce long-read bridges.\n\n  --no_miniasm                    Skip miniasm+Racon bridging (default: use miniasm and Racon to\n                                  produce long-read bridges)\n  --racon_path RACON_PATH         Path to the Racon executable (default: racon)\n  --existing_long_read_assembly EXISTING_LONG_READ_ASSEMBLY\n                                  A pre-prepared long-read assembly for the sample in GFA or FASTA\n                                  format. If this option is used, Unicycler will skip the\n                                  miniasm/Racon steps and instead use the given assembly (default:\n                                  perform long-read assembly using miniasm/Racon)\n\nLong-read alignment and bridging:\n  These options control the use of long-read alignment to produce long-read bridges.\n\n  --no_simple_bridges             Skip simple long-read bridging (default: use simple long-read\n                                  bridging)\n  --no_long_read_alignment        Skip long-read-alignment-based bridging (default: use long-read\n                                  alignments to produce bridges)\n  --contamination CONTAMINATION   FASTA file of known contamination in long reads\n  --scores SCORES                 Comma-delimited string of alignment scores: match, mismatch, gap\n                                  open, gap extend (default: 3,-6,-5,-2)\n  --low_score LOW_SCORE           Score threshold - alignments below this are considered poor\n                                  (default: set threshold automatically)\n\nGraph cleaning:\n  These options control the removal of small leftover sequences after bridging is complete.\n\n  --min_component_size MIN_COMPONENT_SIZE\n                                  Graph components smaller than this size (bp) will be removed from\n                                  the final graph (default: 1000)\n  --min_dead_end_size MIN_DEAD_END_SIZE\n                                  Graph dead ends smaller than this size (bp) will be removed from the\n                                  final graph (default: 1000)\n\nAssembly rotation:\n  These options control the rotation of completed circular sequence near the end of the Unicycler\n  pipeline.\n\n  --no_rotate                     Do not rotate completed replicons to start at a standard gene\n                                  (default: completed replicons are rotated)\n  --start_genes START_GENES       FASTA file of genes for start point of rotated replicons (default:\n                                  start_genes.fasta)\n  --start_gene_id START_GENE_ID   The minimum required BLAST percent identity for a start gene search\n                                  (default: 90.0)\n  --start_gene_cov START_GENE_COV\n                                  The minimum required BLAST percent coverage for a start gene search\n                                  (default: 95.0)\n  --makeblastdb_path MAKEBLASTDB_PATH\n                                  Path to the makeblastdb executable (default: makeblastdb)\n  --tblastn_path TBLASTN_PATH     Path to the tblastn executable (default: tblastn)\n```\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/rrwick/Unicycler/main/README.md",
      "technique": "header_analysis"
    }
  ]
}