{
  "application_domain": [
    {
      "confidence": 0.8386182666136118,
      "result": {
        "type": "String",
        "value": "Semantic web"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/noefp/easy_gdb"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-03-09T11:23:07Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-02T14:08:59Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9241494862572006,
      "result": {
        "original_header": "Easy GDB",
        "type": "Text_excerpt",
        "value": "Welcome to easy GDB. \nThis tool will help you to create your own genomic database with tools such as BLAST, \nGenome browser (JBrowse), file downloads, sequence extraction, annotation search, \nbulk annotation extraction and gene list lookup. For more information check [this YouTube playlist](https://youtu.be/JTE-8zR5ogk)\n \n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Downloads",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker",
          "Customize your site"
        ],
        "type": "Text_excerpt",
        "value": "You can use the `downloads` folder to can place the files you want to provide for downloading.\nThe content of that folder will be read and presented in the web site, replicating the folder, subfolder and file structure.\nIt is recommended to compress the files before place them there for sharing.\n\nYou will be able to see this section at `localhost:8000/easy_gdb/downloads.php` or following the link `downloads` in the toolbar.\n\nYou can create your own structure of files and folders and place them in the downloads folder.\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/noefp/easy_gdb/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/noefp/easy_gdb/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "noefp/easy_gdb"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Easy GDB"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "docker_compose",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/noefp/easy_gdb/main/install/docker-compose.yml"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/install/docker-compose.yml",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/noefp/easy_gdb/main/install/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/install/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/noefp/easy_gdb/main/install/setup.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "Easy GDB"
        ],
        "type": "Text_excerpt",
        "value": "Easy GDB requires PHP and PostgreSQL to run. \nYou can use Docker (https://docs.docker.com/get-docker/) to install our easy GDB container or follow the steps at the bottom to install easy GDB from scratch in a Linux system (https://github.com/noefp/easy_gdb#instalation-in-linux-system-without-docker).\n\nIt should be easy to install it in a linux computer, such as the ones usually provided in servers to hosts genomic database applications.\nTo use it in Mac or Windows it would be recommendable to use the Docker container or VirtualBox to run it in a linux virtual machine.\n\nIn most of the servers is probable that some of the tools needed are already installed, \nand if you work often with linux you would probably have some of them already.\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Set up easy GDB using the template example and Docker",
        "parent_header": [
          "Easy GDB",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Using the Docker, the first step will be cloning the docker-compose repository. \nGo to the path where you want to save your genomics database and clone the easyGDB_docker repository from GitHub:\n\n\n    git clone https://github.com/noefp/easyGDB_docker.git\n\n\nGo into the easyGDB_docker folder\n\n    cd easyGDB_docker\n\n\nThen, build the container (in the easyGDB_docker folder):\n\n    docker-compose build\n\nand start the container using `docker-compose` or the Docker desktop application (in the easyGDB_docker folder):\n\n    docker-compose up\n\n\nUsing the Docker container we install easy GDB at `/var/www/html/` (`src/` in the Docker container).\nOpen the easy_GDB Docker container terminal or the Docker desktop application (in the easyGDB_docker folder).\n\n    docker-compose exec easy_gdb /bin/bash\n\nClone the easy_GBD code from Github:\n\n    git clone https://github.com/noefp/easy_gdb.git\n\nNow, we will create the configuration and example folder structure.\nGo to the install folder inside easy_gdb (`easy_gdb/install`):\n\n    cd easy_gdb/install/\n\nand run the `setup.sh` script:\n\n    bash setup.sh\n\nWhen running the easy GDB setup, installing JBrowse Perl pre-requisites might take some minutes.\nPlease be patient.\n\nWhen the setup finishes, this should create some folders, subfolders and files at the same level as easy_gdb.\nYou can take a look using your file browser at `src` or in the terminal using the commands below.\n\n    ls -lh /var/www/html\n\nYou should be able to see the folders `blast_dbs`, `downloads`, `expression_data`, `easy_gdb`, `egdb_files`, `jbrowse` and `lookup`, \nand inside them there are some example templates to help you customize your own genomic web portal.\n\nAt this moment most of the features of easy_gdb should be already available (all but the parts depending on the annotation database).\n\n\nIn web browser (Chrome, Firefox, etc) go to: `localhost:8000/easy_gdb/`\n\nYou should be able to see an example of easy_gdb running.\n\n![easy GDB home](templates/egdb_images/easy_gdb_home.png)\n\n\n> In case of installing easy GDB in a Linux system, not using Docker, run the next command to start a local PHP server:\n>\n>    example_db$ php -S localhost:8000\n\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Set up easyGDB database",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker"
        ],
        "type": "Text_excerpt",
        "value": "We need to set up the database so the easy GDB code is able to find it. \nRemember to change the password by the password you will use for web_usr [below](#create-a-new-role-db-user)\n\nopen the file `egdb_files/egdb_conf/database_access.php`.\n\nAnd setup the database connection based on the user, password and database name you used. The host is `DB` for the Docker installation and `localhost` for linux installations in servers or personal computers:\n\n```php\nfunction getConnectionString(){return \"host=DB dbname=annot1 user=web_usr password=password\";};\n```\n\nOr in the case you will not use the relational database (for gene annotations):\n\n```php\nfunction getConnectionString(){return null;};\n```\n\n\n> If not using the Docker container the host for the postgreSQL database is usually `localhost`\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Set up password",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Installation in linux system without Docker",
          "Install easyGDB"
        ],
        "type": "Text_excerpt",
        "value": "[in the Docker container you already have a postgres password defined]\n\nOpen a terminal using docker-compose, docker exec or Docker desktop\n\n    docker-compose exec DB /bin/bash\n\nenter the postgres console:\n\n    psql -U postgres\n\nor\n\n    docker exec -ti DB psql -U postgres\n    \nYou can use `\\q` to exit the PostgreSQL console or exit to leave the Docker bash console.\n\nTo change the password for the postgres user:\n```sql\n\\password postgres\nYou will be asked to type your new password\n\\q\n```\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Create a new database",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker",
          "Set up easyGDB database"
        ],
        "type": "Text_excerpt",
        "value": "Here, we will create a new database `annot1`. Any time you want to create a new database to test some data or new versions, \nyou can create a new one and point to it in the file `egdb_files/egdb_conf/database_access.php`.\n\nOpen a terminal using docker-compose, docker exec or Docker desktop if you need to and create a new database:\n\n```sql\nCREATE DATABASE annot1;\n\\l\n\\q\n```\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Create a new role (DB user)",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker",
          "Set up easyGDB database"
        ],
        "type": "Text_excerpt",
        "value": "It is recommended to use a different user than postgres to access the database (it will have limited control).\nHere, we will create the user `web_usr`. Note that in this example the password you type will be visible in the terminal,\nand the history, so we will create a temporal password and then we will change it in the next step.\n\nOpen a terminal using docker-compose, docker exec or Docker desktop if you need to and create a new database:\n\n```sql\nCREATE ROLE web_usr WITH LOGIN ENCRYPTED PASSWORD 'tmp_password' CREATEDB;\n\\password web_usr\ntype a new password\n\\q\n```\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Import annotation schema to database",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker",
          "Set up easyGDB database"
        ],
        "type": "Text_excerpt",
        "value": "Now we should have an empty database called `annot1` created.\nIn this step we will create the database schema:\n\n    docker exec -i DB psql --username postgres annot1 < src/easy_gdb/scripts/create_annot_schema2.sql\n\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Import annotations",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker"
        ],
        "type": "Text_excerpt",
        "value": "Here, we will learn how to import annotations to the database.\nFirst we will import all the gene names, for that we will need a file such as\n`easy_gdb/templates/anotations/gene_list.txt` with all the gene identifiers from our organism. \nIt is recommended to use the transcript name (gene1.1).\n\nWe will import all the gene names using the script `import_genes.pl` and we will provide the gene list file, \nspecies name, gene annotation version, and folder name for JBrowse (remember this name to use it when you set up JBrowse).\nThis way we can link the genes with the genome browser.\n\nOpen a terminal using docker-compose or Docker desktop\n\n    docker-compose exec easy_gdb /bin/bash\n\nuse a Perl script to import the gene list:\n\n    perl easy_gdb/scripts/import_genes.pl egdb_files/annotations/gene_list.txt \"Homo sapiens\" \"1.0\" \"easy_gdb_sample\"\n\nIt will ask for the host name (`DB`), DB name (`annot1`), and the postgres password.\n\nNow we will add annotations to the genes using the script `import_annots_sch2.pl`. \nFor that, we will need a file such as `annotation_example_SwissProt.txt`, \nwhere we have the first column with the gene name, the second column with the annotation term \n(ID for SwissProt, or a close related model species, GO term, InterProscan term, EC, KEGG, etc.),\nand a third column with the annotation description. \nAs an example we will import annotations for SwissProt and TAIR10 (for model plant arabidopsis).\nThe script needs the annotations file, name of the annotation (SwissProt, TAIR10, etc.), species name and annotation version.\n\nExample for SwissProt annotations:\n\n    perl easy_gdb/scripts/import_annots_sch2.pl egdb_files/annotations/annotation_example_SwissProt.txt SwissProt \"Homo sapiens\" \"1.0\"\n\nExample for TAIR10 annotations:\n\n    perl easy_gdb/scripts/import_annots_sch2.pl egdb_files/annotations/annotation_example_TAIR10.txt TAIR10 \"Homo sapiens\" \"1.0\"\n\nYou can add custom annotation links in the annotation_links.json file:\n`egdb_files/annotations/annotation_links.json`\n\n```json\n{\n  \"TAIR10\":\"http://www.arabidopsis.org/servlets/TairObject?type=locus&name=query_id\",\n  \"Araport11\":\"http://www.arabidopsis.org/servlets/TairObject?type=locus&name=query_id\",\n  \"SwissProt\":\"http://www.uniprot.org/uniprot/query_id\",\n  \"InterPro\":\"https://www.ebi.ac.uk/interpro/entry/InterPro/query_id\",\n  \"NCBI\":\"https://www.ncbi.nlm.nih.gov/protein/query_id\"\n}\n```\n\nThis file includes example links for TAIR10, Araport11, SwissProt, InterPro and NCBI. \nThe name used (TAIR10, Araport11, SwissProt ...) should be used in the import_annots_sch2.pl script, as shown above.\nIn the link, `query_id` will be replaced by the gene id or annotation term.\n\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Customize file paths",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker"
        ],
        "type": "Text_excerpt",
        "value": "By default all configuration files contain the default paths used in the Docker container and everything should work without changing any path.\nHowever, it is possible to customize the paths to have your own file organization system.\n\nIn the file `easy_gdb/configuration_path.php` you could change the configuration path\n to `/abosolute_path_to/egdb_files/egdb_conf`. By default it is pointing to `/var/www/html/egdb_files/egdb_conf` \nwhere the files will be placed using the docker container and could be the standard location in a server.\n\nIn the file `egdb_files/egdb_conf/easyGDB_conf.php` is possible to set the root path where the `easy_db` folder is.\nIn the Docker container and usually in a server it could be `/var/www/html`.\nLocally, for example, you could have them in `/home/your_user_name/Desktop/example_db`.\n\nAfer the changes, reload the web browser `localhost:8000/easy_gdb/index.php` and check if you can see the home page of easy GDB.\n\nIf you want use a different names for your folders remember to change the names in the file paths included in `easy_gdb/configuration_path.php` and `egdb_files/egdb_conf/easyGDB_conf.php`.\nFor example, for development you could have multiple sites or multiple versions. \nYou could easily change between them having different file folders and just changing the path to the active one in `easy_gdb/configuration_path.php`\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Customize your site",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker"
        ],
        "type": "Text_excerpt",
        "value": "In the configuration file `egdb_files/egdb_conf/easyGDB_conf.php` together with other data files you can customize your site.\nOne way to manage multiple sites is to create a copy of the `egdb_files` folder with its content and adding it to the path in the configuration file,\nwriting the new name in the value of the `$egdb_files_folder` variable. It is a good practice to create always a copy of the `egdb_files` folder to keep\nalways a reference of the example configuration.\n\n\nBelow we will see how to customize each page of the genomic portal step by step.\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Customize application name and header image",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker",
          "Customize your site"
        ],
        "type": "Text_excerpt",
        "value": "In the configuration file `egdb_files/egdb_conf/easyGDB_conf.php` you can customize the header variables `$dbTitle` and `$header_img` to change the site title and header image.\nThe images are stored at `egdb_files/egdb_images/`\nTry to change them and reload the web browser `localhost:8000/easy_gdb/index.php` to see the changes.\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Customize logos",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker",
          "Customize your site"
        ],
        "type": "Text_excerpt",
        "value": "In `egdb_files/egdb_images/logos/` you can place logo images, and you can use the file `logos.json` to customize size and link.\nLogos are displayed in all pages at the footer.\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Customize the toolbar",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker",
          "Customize your site"
        ],
        "type": "Text_excerpt",
        "value": "Below, in the toolbar variables, you can customize wich links will be displayed in the toolbar, enabling and disabling the tools and sections available.\nA value `1` enable the link and `0` disable it. Choose the links you want to show or hide.\n\nAdditionally, you can enable the variable `$tb_custom` to add your own links to the tool bar just by editing the `custom_toolbar.php` file in the `egdb_custom_text` directory.\n\nLets take a look to each one of the links below.\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Home page",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker",
          "Customize your site"
        ],
        "type": "Text_excerpt",
        "value": "The home page is always available. In the `egdb_custom_text` folder, \nyou should be able to see the example text for the welcome page. \nYou can open the file `egdb_files/egdb_custom_text/welcome_text.php` in a text editor to customize the content.\nIt is possible to use PHP or HTML. There you could include CSS and JS. \nEasy GDB uses Bootstrap 4 for the style and some elements.\nYou could find examples to create you own elements at https://www.w3schools.com/bootstrap4/default.asp\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "About Us",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker",
          "Customize your site"
        ],
        "type": "Text_excerpt",
        "value": "If the variable `$tb_about` is equal `1` in the configuration file (`easyGDB_conf.php`),\nthen you should be able to see the example text for the `About Us` section.\n\nYou can open the file `egdb_files/egdb_custom_text/about.php` in a text editor to customize the content.\nAdditionally, you can set the about variables `$ab_citation` to `0` or `1` to display, or not, \nthe citation of the papers where the genomic database or data were published. \nYou can add the citation in `db_citation.php`.\n\nYou can also add here information about the participant labs.\nFor this, the `$ab_labs` should be enabled (equal to `1`) in `egdb_files/egdb_conf/easyGDB_conf.php`.\n\nYou can create a json file for each lab or you can copy and modify the provided examples to add your own information.\nThere, you can include the lab name and, for each person, you can include name, position, a picture (placed in `egdb_files/egdb_images/people/`),\nlink to a personal page, and, in the more_info array you could add data such as phone, email, and any other custom information.\n\nEvery time you change something reload the page `localhost:8000/easy_gdb/about.php` to see the changes.\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Species",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker",
          "Customize your site"
        ],
        "type": "Text_excerpt",
        "value": "If you want to host data for multiple species or accessions you shold enable the variable `$tb_species = 1`.\nIf not you can disable it by setting it to `$tb_species = 0`.\n\nThen, you will be able to see them at `localhost:8000/easy_gdb/species.php`\n\nTo customize the list of species, use the file `egdb_species/species_list.json`.\nThere you can include species name, common name, image and link to a \ndescriptive custom PHP file (`human.php`, `species1.php` and `species2.php`) \nwhere you can write all the information about the species.\nCreate as many PHP species files as you need, customize the content and add them in the `egdb_species/species_list.json` file. \nImages for species menu are placed in `egdb_files/egdb_images/species/`\nIt is recommendable to use the template as an example to avoid errors.\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Tools",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker",
          "Customize your site"
        ],
        "type": "Text_excerpt",
        "value": "It is possible to enable or disable the tools `Search page`, `Search box` in toolbar, `BLAST`, `Genome browser`, `Sequence extraction`, `Annotation extraction`, and `Gene version lookup`.\nTurn the variables to `1` or to `0` to enable or disable them.\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Search",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker",
          "Customize your site"
        ],
        "type": "Text_excerpt",
        "value": "To enable the search and the toolbar search box first we must install the PostgreSQL database \nand import the annotations. See [Install PostgreSQL](#install-postgresql)\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "BLAST",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker",
          "Customize your site"
        ],
        "type": "Text_excerpt",
        "value": "In the web browser, follow the link to `BLAST` in the tools toolbar menu. There you will see the BLAST input page.\nIn `egdb_files/egdb_conf/easyGDB_conf.php`, you can change the input example sequence changing the variable `$blast_example`.\n\nTo add BLAST datasets we need to copy the blast databases in the `blast_dbs` folder (path can be changed in `easyGDB_conf.php`).\nThe BLAST databases should copied inside a category folder, such as `category_1` and `category_2` in the example template. \nIf all the BLAST databases are included in a single category folder, \nthere will be only a dropdown menu to select the BLAST database in the select Dataset section in the BLAST input page.\nIf the BLAST databases are organized in two or more category folders, \nthere will be an extra dropdown menu to select the category and then it will be posible to select the databases within the category.\n\nBLAST database files and category folders MUST NOT include spaces in their names. \nUnderscores can be used in the file and folder names and they will be displayed as spaces in the web.\n\nThe template example include the folders `category_1` and `category_2`, but any other name can be used to name the category folders (without spaces or special characters).\nFor example, we could create folders to organize BLAST databases for several species such as `Danio_rerio`, `Mola_mola`, `Salmo_salar`, etc.\n\nYou can use the next command lines to create your own blast databases from fasta sequence files:\n\nFor protein sequences:\n\n    makeblastdb -in your_protein_sequence_file.fasta -dbtype 'prot' -parse_seqids\n\nFor nucleotide sequences:\n\n    makeblastdb -in your_nucleotide_sequence_file.fasta -dbtype 'nucl' -parse_seqids\n\nIt is important to use the option `-parse_seqids` to create the indexes needed to extract sequences, \nwhich will be used by the gene views and the `Sequence extraction` tool.\n\nThe variable `$max_blast_input` (in `egdb_files/egdb_conf/easyGDB_conf.php`) \ncontrols the maximum number of sequences allowed as input in `BLAST`.\n\nYou can also add custom links for the BLAST output by customizing the blast_links.json file in the `blast_dbs` folder:\n\n```json\n{\n  \"sample_blast_DB_genome.fasta\":\"/jbrowse/?data=data%2Feasy_gdb_sample&loc={chr}%3A{start}..{end}\",\n  \"sample_blast_DB_proteins.fasta\":\"#\",\n  \"sample_uniprot.fasta\":\"https://www.uniprot.org/uniprot/{subject}\"\n}\n```\n\nJust include the name of your database on the left and the link on the right. By default if the database name is not included in the JSON file, the BLAST output will link to the easy GDB gene page.\nYou can provide any other links and use the variables in the example (`{subject}`, `{chr}`, `{start}`, `{end}`) to add gene names or coordinates extracted from the BLAST results.\nIn this file several link examples are shown:\n\n* Link to genome browser: the variables `{chr}`, `{start}`, `{end}` will be replaced by the ones found in the results. Very useful for genome sequence BLAST databases.\n* No link: using a value of `#` will produce self links. For example for genes not included in your easy GDB database.\n* Gene name external links: the variable `{subject}` will be replaced by the subject gene name. It can be use to link to external databases, such as UniProt in the example above.\n\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Sequence extraction",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker",
          "Customize your site"
        ],
        "type": "Text_excerpt",
        "value": "This tool uses the datasets in the `blast_dbs` folder to extract the sequences from a list of genes.\n\nIf you have the folder `blast_dbs` and added the blast databases there (explained above), then the tool should be ready to use.\nYou can modify the example input gene list changing the variable `$input_gene_list` in `easyGDB_conf.php`.\n\nThe variable `$max_extract_seq_input` (in `easyGDB_conf.php`) controls the maximum number of input gene names to extract.\n\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Genome browser",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker",
          "Customize your site"
        ],
        "type": "Text_excerpt",
        "value": "As we ran the setup file after cloning easy GDB, at this point, and example of JBrowse should be ready.\nYou should be able to check it following the `Tools/Genome Browser` link in the menu bar, or at http://localhost:8000/jbrowse/.\n\n\nFor more information about how to add a new species and to add tracks see `Install and set up JBrowse` [below](#customize-jbrowse).\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Annotation extraction",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker",
          "Customize your site"
        ],
        "type": "Text_excerpt",
        "value": "To enable the annotation extraction first we must install the PostgreSQL database and import the annotations.\nSee [Install PostgreSQL](#install-postgresql)\n\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Gene expression atlas",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker",
          "Customize your site"
        ],
        "type": "Text_excerpt",
        "value": "Switching `$tb_gene_expr` to 1 (in `easyGDB_conf.php`) will enable the link to the gene expression atlas in the tools dropdown menu of the toolbar.\nThe expression datasets should be placed in the `expression data` folder (by default defined as `$expression_path` = `\"$root_path/expression_data\"`;).\n\nIn the `expression_data` folder you can find two examples of tab-delimited files, with extension `.txt`, containing expression data, and a JSON file (`expression_info.json`) including\nthe names of the dataset description files, a link to the gene annotation page (by default it will check in the local database, but it is possible to add external links or remove links), \nand names of images used for each sample in case of enabling the expression card visualization. Link will appear in the gene names of the Average values table.\n\nPlace your expression data files in the `expression_data` folder, as tab delimited text files with normalized data for each replicates in the columns (header), \nand each gene in the rows (first column), as shown in the examples.\nAll replicates should have the same name in the header to be group together (For example: leaf, leaf, leaf, root, root, root, heat, heat, heat, etc.).\n\nAdditionally, you can switch the variable `$expr_cards` to 1 in the `easyGDB_conf.php` file to enable the expression card visualization. \nIn that case, you can add image files in the images path (`egdb_images/expr/`) and add the names of the sample with their corresponding image\nin the JSON file `expression_info.json`. It is important that the sample name in the JSON is identical to the sample name in the tab-delimited expression data file,\n and the image file name correspond with the name in the images path.\n\n```json\n  {\n    \"Example1 - Plant_gene_expression (RPKM).txt\":\n      {\"link\":\"/easy_gdb/gene.php?name=query_id\",\n        \"description\":\"example1_description.php\",\n        \"images\":\n          {\n            \"Leaf\":\"leaf.jpeg\",\n            \"Fruit\":\"fruit.jpeg\",\n            \"Root\":\"root.jpeg\",\n            \"Peel\":\"peel.jpeg\",\n            \"Seed\":\"seed.jpeg\",\n            \"Germinating Seed\":\"germinating_seed.jpeg\",\n            \"Darkness\":\"darkness.jpeg\",\n            \"Drought\":\"drought.jpeg\",\n            \"Heat\":\"heat.jpeg\",\n            \"Cold\":\"cold.jpeg\"\n          }\n      },\n    \"Example2 - Organism dataset name (Units).txt\":\n      {\"link\":\"#\",\n        \"description\":\"example2_description.php\"\n      }\n  }\n```\n\nThe variable `$expr_menu` can be enabled in the configuration file to activate a link to the datasets information, \nwhich will display the information from all the datasets based on the information in the JSON file.\n\nDataset description PHP files should be placed in `egdb_custom_text/custom_pages/expr_datasets/`.\nExpression images should be placed in `egdb_images/expr/`.\n\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Gene version lookup",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker",
          "Customize your site"
        ],
        "type": "Text_excerpt",
        "value": "It should work correctly if some lookup files are placed in the `lookup` folder.\nRemove the provided examples and create your own lookup files following the same format.\nThis tool is useful to, for example, get or provide a list of identifiers of the closest model organism genes, \ndifferent gene versions or orthologs in other species.\n\nThe variable `$max_lookup_input` (in `easyGDB_conf.php`) controls the maximum number of gene names allowed as input.\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "More custom pages",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker",
          "Customize your site"
        ],
        "type": "Text_excerpt",
        "value": "Enabling the variable `$tb_more` in `egdb_files/egdb_conf/easyGDB_conf.php` we will see a new tab in the toolbar\ncalled More. There, you could add as many custom pages as you want. They are stored at  `egdb_files/custom_text/custom_pages/`,\nand we included two examples called `genome.php` and `other page.php`. You just need to create your own PHP pages and place them there.\nThe name shown in the toolbar will be taken from the file name, and the content will be automatically wrapped by the header and footer.\n\nHere, for example you can include statistics of your genome assembly, news and events page or anything you like.\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Tables",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker",
          "Customize your site",
          "More custom pages"
        ],
        "type": "Text_excerpt",
        "value": "In the `custom_pages` directory we can find an example of a custom page to visualize tab delimited files as formatted tables. \nThe file `table_menu.php` provides the code to list all the files in the folder `custom_pages/tables`, and the file `table_to_page.php` is a template to format the file passed in the URL using the variable `table_name`.\nThe variable `link_field` passed in the URL defines which column contains an unique id that can be used to link to the page `row_data.php`, \nwhich is a template to show the data contained in the row of the table where the linked id belongs to.\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Customize JBrowse",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker"
        ],
        "type": "Text_excerpt",
        "value": "An example of JBrowse is already implemented but \nwhen you want to include the genome browser for your species of interest you can find more information in the \nJBrowse manual (http://gmod.org/wiki/JBrowse_Configuration_Guide#prepare-refseqs.pl). Additionally, below you can find some suggestions.\n\nOpen a terminal using docker-compose or Docker desktop\n\n    docker-compose exec easy_gdb /bin/bash\n    \nUpload your sequences to JBrowse. This is how the gene models were uploaded in the example:\n\n    jbrowse$ bin/prepare-refseqs.pl --fasta ../easy_gdb/templates/jbrowse/genome.fasta --out data/easy_gdb_sample\n    jbrowse$ bin/flatfile-to-json.pl -gff ../easy_gdb/templates/jbrowse/gene_models.gff --key \"EasyGDB gene models\" --trackLabel egdb_gene_models --trackType CanvasFeatures --type mRNA --out data/easy_gdb_sample\n    jbrowse$ bin/generate-names.pl --tracks egdb_gene_models --out data/easy_gdb_sample/\n\nWhen adding new tracks, edit the file `data/easy_gdb_sample/trackList.json` to customize them in JBrowse.\nBelow there is an example of the gene model track with link to the database (`url`).\n\n```json\n    {\n       \"category\" : \"02 Annotations\",\n       \"compress\" : 0,\n       \"key\" : \"EasyGDB gene models\",\n       \"label\" : \"egdb_gene_models\",\n       \"onClick\" : {\n          \"action\" : \"newWindow\",\n          \"label\" : \"Go to gene view\",\n          \"url\" : \"/easy_gdb/gene.php?name={id}\"\n       },\n       \"storeClass\" : \"JBrowse/Store/SeqFeature/NCList\",\n       \"style\" : {\n          \"className\" : \"feature\"\n       },\n       \"trackType\" : \"CanvasFeatures\",\n       \"type\" : \"CanvasFeatures\",\n       \"urlTemplate\" : \"tracks/egdb_gene_models/{refseq}/trackData.json\"\n    }\n```\n\nTo allow multiple genome browser species, accessions or versions we need to modify the file `data/easy_gdb_sample/tracks.conf`\nto include the folder name where the data are stored (remember the jbrowse folder name in import_genes.pl)\n\n    [general]\n    dataset_id = easy_gdb_sample\n\n\n\nIn the file `jbrowse/jbrowse.conf` we can include as many species as we want. It is possible also to include external links in the URL field.\nHere we use the easy GDB example and the volvox and yeast examples from JBrowse:\n\n    [datasets.easyGDB]\n    url  = ?data=data/easy_gdb_sample\n    name = Easy GDB Example\n\n    [datasets.volvox]\n    url  = ?data=sample_data/json/volvox\n    name = Volvox Example\n\n    [datasets.yeast]\n    url  = ?data=sample_data/json/yeast\n    name = Yeast Example\n\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Private application",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker"
        ],
        "type": "Text_excerpt",
        "value": "In the file easy_gdb_apache.conf we are overwriting the apache configuration insidie the Docker repository.\nThere there is a block of code that is commented out. If you want to have a private genomics database you can\nenalbe that piece of code to make private everything in /var/www/html/.\n\n        <Directory \"/var/www/html\">\n            AuthType Basic\n            AuthName \"Restricted Content\"\n            AuthUserFile /etc/apache2/.htpasswd\n            Require valid-user\n        </Directory>\n\n\nCreate the first user to access private data (Create the passwdfile. If passwdfile already exists, it is rewritten and truncated.)\n    htpasswd -c /etc/apache2/.htpasswd First_user\n\nAdd new user\n    htpasswd /etc/apache2/.htpasswd another_user\n\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Install Git, PHP, BLAST and useful tools",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Installation in linux system without Docker"
        ],
        "type": "Text_excerpt",
        "value": "Lets install git to download the easy GDB code, PHP to be able to run the web and some other useful tools.\n```bash\nsudo apt-get update\nsudo apt-get install gcc\nsudo apt-get install libpq-dev\nsudo apt-get install git\nsudo apt-get install php\nsudo apt-get install zlib1g-dev\nsudo apt-get install libexpat1-dev\nsudo apt-get install ncbi-blast+\nsudo apt-get install vim\nsudo apt-get install less\nsudo apt-get install wget\nsudo apt-get install zip\nsudo apt-get install make\nsudo apt-get install lsb-release\n```\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Install Perl dependencies for JBrowse and importing scripts",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Installation in linux system without Docker"
        ],
        "type": "Text_excerpt",
        "value": "    apt-get install cpanminus\n    cpanm -L ~/local-lib/ DBI\n    cpanm -L ~/local-lib/ Term::ReadKey\n    cpanm -L ~/local-lib/ DBD::Pg\n    cpanm -L ~/local-lib/ local::lib\n    cpanm -L ~/local-lib/ PerlIO::gzip\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "load local-lib in Perl5lib",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Installation in linux system without Docker"
        ],
        "type": "Text_excerpt",
        "value": "    vim ~/.bashrc\n\nAdd the line below at the end of the file. Remember to change your user name.\n\n    export PERL5LIB=/home/your_username/local-lib/lib/perl5:$PERL5LIB\n\nEnable the changes in the opened terminal.\n    source ~/.bashrc\n\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Install PostgreSQL",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Installation in linux system without Docker"
        ],
        "type": "Text_excerpt",
        "value": "[Already installed in the Docker container] To install Postgres you can follow the instructions at:\nhttps://www.postgresql.org/download/linux/ubuntu/\n\nThe next commands worked well at the time this documentation was writen:\n```bash\nsudo sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list'\nwget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\n\nsudo apt-get update\nsudo apt-get -y install postgresql\nsudo apt-get install php-pgsql\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Install easyGDB",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Installation in linux system without Docker"
        ],
        "type": "Text_excerpt",
        "value": "Ideally in a server or Linux system you should clone easy GDB at /var/www/html\n\n\nAlternatively, if you do not have permissions or prefer otherwise, you could create a folder to contain your genomic database, using the location and name you like. For example you could use `example_db`, and you could create the folder with next command:\n\n    mkdir example_db\n    \nEnter into the folder:\n\n    cd example_db\n\nThen follow the steps as in [Set up easy GDB using the template example and Docker](#set-up-easy-gdb-using-the-template-example-and-docker), \nbut directly in your terminal, not using any of the docker commands.\n\nat /var/www/html or example_db:\n\nclone the repository:\n\n     git clone https://github.com/noefp/easy_gdb.git\n\ngo to the install folder:\n\n    cd easy_gdb/install/\n\nRun the setup script (in the install folder):\n\n    bash setup.sh\n\nGo back from the install folder to the example_db folder:\n\n    cd ../../\n    \nTo start the PHP server that run the service to show the web, you can run this command in the same location where you installed easy_gdb:\n\n    php -S localhost:8000\n\nIn web browser (Chrome, Firefox, etc) go to: `localhost:8000/easy_gdb/`\n\nDo not forget to change configuration path in the file `easy_gdb/configuration_path.php`. \nBy default it is `/var/www/html`, for the Docker installation and for linux servers. If you used a different path, you should change the variable\nfrom `$conf_path = \"/var/www/html/egdb_files/egdb_conf\"` to your path, for example `$conf_path = \"/home/user/example_db/egdb_files/egdb_conf\"`.\n\nThen open the file `easyGDB_conf.php` in the folder `egdb_files/egdb_conf/` and change the `$root_path` to the path where you installed the example_db,\n in the previous example `$root_path = \"/home/user/example_db\"`.\n\nopen the file `egdb_files/egdb_conf/database_access.php` and setup the database connection based on the user, password and database name you used. The host is `DB` for the Docker installation and `localhost` for linux installations in servers or personal computers:\n\n```php\nfunction getConnectionString(){return \"host=localhost dbname=annot1 user=web_usr password=password\";};\n```\n\nOr in the case you will not use the relational database (for gene annotations):\n\n```php\nfunction getConnectionString(){return null;};\n```\n\n\n##### Set up password\n\nIf we installed PostgreSQL from scratch we need to create a password for postgres (it would be like the database default/root user).\n\nYou can use `\\q` to exit the PostgreSQL console.\n\nConnect to the database the first time:\n```bash\nsudo -u postgres psql postgres\n```\n\nCreate a password for the postgres user:\n```sql\n\\du\n\\password postgres\nYou will be asked to type your new password\n\\q\n```\n\n\n\n    psql -U postgres -h localhost -W\n\nIn Postgres console\n\nHere, we will create a new database `annot1`. Any time you want to create a new database to test some data or new versions, \nyou can create a new one and point to it in the file `egdb_files/egdb_conf/database_access.php`.\n\n    CREATE DATABASE annot1;\n\n\n    CREATE ROLE web_usr WITH LOGIN ENCRYPTED PASSWORD 'tmp_password' CREATEDB;\n    \\password web_usr\n\n    \\q\n\nBack in your bash terminal\n\nIn this step we will create the database schema:\n\n    psql -U postgres -d annot1 -h localhost -a -f easy_gdb/scripts/create_annot_schema2.sql\n\nHere, we will learn how to import annotations to the database.\nFirst we will import all the gene names, for that we will need a file such as\n`easy_gdb/templates/anotations/gene_list.txt` with all the gene identifiers from our organism. \nIt is recommended to use the transcript name (gene1.1).\n\nWe will import all the gene names using the script `import_genes.pl` and we will provide the gene list file, \nspecies name, gene annotation version, and folder name for JBrowse (remember this name to use it when you set up JBrowse).\nThis way we can link the genes with the genome browser.\n\nin (/var/www/html):\n\n\n    perl easy_gdb/scripts/import_genes.pl egdb_files/annotations/gene_list.txt \"Homo sapiens\" \"1.0\" \"easy_gdb_sample\"\n    \n    perl easy_gdb/scripts/import_annots_sch2.pl egdb_files/annotations/annotation_example_SwissProt.txt SwissProt \"Homo sapiens\" \"1.0\"\n    \n    perl easy_gdb/scripts/import_annots_sch2.pl egdb_files/annotations/annotation_example_TAIR10.txt TAIR10 \"Homo sapiens\" \"1.0\"\n\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Set up server",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Installation in linux system without Docker"
        ],
        "type": "Text_excerpt",
        "value": "In a server (not mandatory for local instalations) you would need to use Apache or Nginx webservers to host your application in a server.\nFor example, you could install apache:\n\n```bash\nsudo apt-get install apache2\n\ncd /etc/apache2/\nsudo cp 000-default.conf easy_gdb.conf\nsudo a2dissite 000-default.conf\nsudo a2ensite easy_gdb.conf\nsystemctl reload apache2\n```\n\nFor example, you can add the database directory as DocumentRoot to serve easy_gdb in your server (server_address/easy_gdb)\n\n    DocumentRoot /var/www/html\n\nor:\n\n    DocumentRoot /home/user/example_db\n\n\n\nRemember to change the paths in the configuration file.\n\nIn many cases, after applying some changes you will need to restart the server to make the changes effective:\n```bash\nsudo service apache2 restart\n```\n\n\n\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/noefp/easy_gdb/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021 No\u00e9 Fern\u00e1ndez Pozo\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/noefp/easy_gdb/main/templates/egdb_images/easy_gdb_home.png"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "easy_gdb"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "noefp"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "PHP",
        "size": 359809,
        "type": "Programming_language",
        "value": "PHP"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CSS",
        "size": 37288,
        "type": "Programming_language",
        "value": "CSS"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "JavaScript",
        "size": 32642,
        "type": "Programming_language",
        "value": "JavaScript"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Hack",
        "size": 13004,
        "type": "Programming_language",
        "value": "Hack"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 12234,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 1528,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 808,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "noefp",
          "type": "User"
        },
        "date_created": "2022-03-03T13:57:52Z",
        "date_published": "2022-03-03T17:46:33Z",
        "description": "First version of easyGDB.",
        "html_url": "https://github.com/noefp/easy_gdb/releases/tag/v1.0",
        "name": "easy GDB v1.0",
        "release_id": 60919776,
        "tag": "v1.0",
        "tarball_url": "https://api.github.com/repos/noefp/easy_gdb/tarball/v1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/noefp/easy_gdb/releases/60919776",
        "value": "https://api.github.com/repos/noefp/easy_gdb/releases/60919776",
        "zipball_url": "https://api.github.com/repos/noefp/easy_gdb/zipball/v1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "noefp",
          "type": "User"
        },
        "date_created": "2021-07-01T17:55:13Z",
        "date_published": "2021-07-02T10:52:30Z",
        "description": "Under development",
        "html_url": "https://github.com/noefp/easy_gdb/releases/tag/v0.1",
        "name": "easy GDB v0.1",
        "release_id": 45615509,
        "tag": "v0.1",
        "tarball_url": "https://api.github.com/repos/noefp/easy_gdb/tarball/v0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/noefp/easy_gdb/releases/45615509",
        "value": "https://api.github.com/repos/noefp/easy_gdb/releases/45615509",
        "zipball_url": "https://api.github.com/repos/noefp/easy_gdb/zipball/v0.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Install Perl dependencies for JBrowse and importing scripts",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Installation in linux system without Docker"
        ],
        "type": "Text_excerpt",
        "value": "    apt-get install cpanminus\n    cpanm -L ~/local-lib/ DBI\n    cpanm -L ~/local-lib/ Term::ReadKey\n    cpanm -L ~/local-lib/ DBD::Pg\n    cpanm -L ~/local-lib/ local::lib\n    cpanm -L ~/local-lib/ PerlIO::gzip\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 14:05:35",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 10
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Set up easy GDB using the template example and Docker",
        "parent_header": [
          "Easy GDB",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Using the Docker, the first step will be cloning the docker-compose repository. \nGo to the path where you want to save your genomics database and clone the easyGDB_docker repository from GitHub:\n\n\n    git clone https://github.com/noefp/easyGDB_docker.git\n\n\nGo into the easyGDB_docker folder\n\n    cd easyGDB_docker\n\n\nThen, build the container (in the easyGDB_docker folder):\n\n    docker-compose build\n\nand start the container using `docker-compose` or the Docker desktop application (in the easyGDB_docker folder):\n\n    docker-compose up\n\n\nUsing the Docker container we install easy GDB at `/var/www/html/` (`src/` in the Docker container).\nOpen the easy_GDB Docker container terminal or the Docker desktop application (in the easyGDB_docker folder).\n\n    docker-compose exec easy_gdb /bin/bash\n\nClone the easy_GBD code from Github:\n\n    git clone https://github.com/noefp/easy_gdb.git\n\nNow, we will create the configuration and example folder structure.\nGo to the install folder inside easy_gdb (`easy_gdb/install`):\n\n    cd easy_gdb/install/\n\nand run the `setup.sh` script:\n\n    bash setup.sh\n\nWhen running the easy GDB setup, installing JBrowse Perl pre-requisites might take some minutes.\nPlease be patient.\n\nWhen the setup finishes, this should create some folders, subfolders and files at the same level as easy_gdb.\nYou can take a look using your file browser at `src` or in the terminal using the commands below.\n\n    ls -lh /var/www/html\n\nYou should be able to see the folders `blast_dbs`, `downloads`, `expression_data`, `easy_gdb`, `egdb_files`, `jbrowse` and `lookup`, \nand inside them there are some example templates to help you customize your own genomic web portal.\n\nAt this moment most of the features of easy_gdb should be already available (all but the parts depending on the annotation database).\n\n\nIn web browser (Chrome, Firefox, etc) go to: `localhost:8000/easy_gdb/`\n\nYou should be able to see an example of easy_gdb running.\n\n![easy GDB home](templates/egdb_images/easy_gdb_home.png)\n\n\n> In case of installing easy GDB in a Linux system, not using Docker, run the next command to start a local PHP server:\n>\n>    example_db$ php -S localhost:8000\n\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Create a new database",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker",
          "Set up easyGDB database"
        ],
        "type": "Text_excerpt",
        "value": "Here, we will create a new database `annot1`. Any time you want to create a new database to test some data or new versions, \nyou can create a new one and point to it in the file `egdb_files/egdb_conf/database_access.php`.\n\nOpen a terminal using docker-compose, docker exec or Docker desktop if you need to and create a new database:\n\n```sql\nCREATE DATABASE annot1;\n\\l\n\\q\n```\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Create a new role (DB user)",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker",
          "Set up easyGDB database"
        ],
        "type": "Text_excerpt",
        "value": "It is recommended to use a different user than postgres to access the database (it will have limited control).\nHere, we will create the user `web_usr`. Note that in this example the password you type will be visible in the terminal,\nand the history, so we will create a temporal password and then we will change it in the next step.\n\nOpen a terminal using docker-compose, docker exec or Docker desktop if you need to and create a new database:\n\n```sql\nCREATE ROLE web_usr WITH LOGIN ENCRYPTED PASSWORD 'tmp_password' CREATEDB;\n\\password web_usr\ntype a new password\n\\q\n```\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Import annotation schema to database",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker",
          "Set up easyGDB database"
        ],
        "type": "Text_excerpt",
        "value": "Now we should have an empty database called `annot1` created.\nIn this step we will create the database schema:\n\n    docker exec -i DB psql --username postgres annot1 < src/easy_gdb/scripts/create_annot_schema2.sql\n\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Import annotations",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker"
        ],
        "type": "Text_excerpt",
        "value": "Here, we will learn how to import annotations to the database.\nFirst we will import all the gene names, for that we will need a file such as\n`easy_gdb/templates/anotations/gene_list.txt` with all the gene identifiers from our organism. \nIt is recommended to use the transcript name (gene1.1).\n\nWe will import all the gene names using the script `import_genes.pl` and we will provide the gene list file, \nspecies name, gene annotation version, and folder name for JBrowse (remember this name to use it when you set up JBrowse).\nThis way we can link the genes with the genome browser.\n\nOpen a terminal using docker-compose or Docker desktop\n\n    docker-compose exec easy_gdb /bin/bash\n\nuse a Perl script to import the gene list:\n\n    perl easy_gdb/scripts/import_genes.pl egdb_files/annotations/gene_list.txt \"Homo sapiens\" \"1.0\" \"easy_gdb_sample\"\n\nIt will ask for the host name (`DB`), DB name (`annot1`), and the postgres password.\n\nNow we will add annotations to the genes using the script `import_annots_sch2.pl`. \nFor that, we will need a file such as `annotation_example_SwissProt.txt`, \nwhere we have the first column with the gene name, the second column with the annotation term \n(ID for SwissProt, or a close related model species, GO term, InterProscan term, EC, KEGG, etc.),\nand a third column with the annotation description. \nAs an example we will import annotations for SwissProt and TAIR10 (for model plant arabidopsis).\nThe script needs the annotations file, name of the annotation (SwissProt, TAIR10, etc.), species name and annotation version.\n\nExample for SwissProt annotations:\n\n    perl easy_gdb/scripts/import_annots_sch2.pl egdb_files/annotations/annotation_example_SwissProt.txt SwissProt \"Homo sapiens\" \"1.0\"\n\nExample for TAIR10 annotations:\n\n    perl easy_gdb/scripts/import_annots_sch2.pl egdb_files/annotations/annotation_example_TAIR10.txt TAIR10 \"Homo sapiens\" \"1.0\"\n\nYou can add custom annotation links in the annotation_links.json file:\n`egdb_files/annotations/annotation_links.json`\n\n```json\n{\n  \"TAIR10\":\"http://www.arabidopsis.org/servlets/TairObject?type=locus&name=query_id\",\n  \"Araport11\":\"http://www.arabidopsis.org/servlets/TairObject?type=locus&name=query_id\",\n  \"SwissProt\":\"http://www.uniprot.org/uniprot/query_id\",\n  \"InterPro\":\"https://www.ebi.ac.uk/interpro/entry/InterPro/query_id\",\n  \"NCBI\":\"https://www.ncbi.nlm.nih.gov/protein/query_id\"\n}\n```\n\nThis file includes example links for TAIR10, Araport11, SwissProt, InterPro and NCBI. \nThe name used (TAIR10, Araport11, SwissProt ...) should be used in the import_annots_sch2.pl script, as shown above.\nIn the link, `query_id` will be replaced by the gene id or annotation term.\n\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Customize file paths",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker"
        ],
        "type": "Text_excerpt",
        "value": "By default all configuration files contain the default paths used in the Docker container and everything should work without changing any path.\nHowever, it is possible to customize the paths to have your own file organization system.\n\nIn the file `easy_gdb/configuration_path.php` you could change the configuration path\n to `/abosolute_path_to/egdb_files/egdb_conf`. By default it is pointing to `/var/www/html/egdb_files/egdb_conf` \nwhere the files will be placed using the docker container and could be the standard location in a server.\n\nIn the file `egdb_files/egdb_conf/easyGDB_conf.php` is possible to set the root path where the `easy_db` folder is.\nIn the Docker container and usually in a server it could be `/var/www/html`.\nLocally, for example, you could have them in `/home/your_user_name/Desktop/example_db`.\n\nAfer the changes, reload the web browser `localhost:8000/easy_gdb/index.php` and check if you can see the home page of easy GDB.\n\nIf you want use a different names for your folders remember to change the names in the file paths included in `easy_gdb/configuration_path.php` and `egdb_files/egdb_conf/easyGDB_conf.php`.\nFor example, for development you could have multiple sites or multiple versions. \nYou could easily change between them having different file folders and just changing the path to the active one in `easy_gdb/configuration_path.php`\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Customize your site",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker"
        ],
        "type": "Text_excerpt",
        "value": "In the configuration file `egdb_files/egdb_conf/easyGDB_conf.php` together with other data files you can customize your site.\nOne way to manage multiple sites is to create a copy of the `egdb_files` folder with its content and adding it to the path in the configuration file,\nwriting the new name in the value of the `$egdb_files_folder` variable. It is a good practice to create always a copy of the `egdb_files` folder to keep\nalways a reference of the example configuration.\n\n\nBelow we will see how to customize each page of the genomic portal step by step.\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Customize application name and header image",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker",
          "Customize your site"
        ],
        "type": "Text_excerpt",
        "value": "In the configuration file `egdb_files/egdb_conf/easyGDB_conf.php` you can customize the header variables `$dbTitle` and `$header_img` to change the site title and header image.\nThe images are stored at `egdb_files/egdb_images/`\nTry to change them and reload the web browser `localhost:8000/easy_gdb/index.php` to see the changes.\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Customize logos",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker",
          "Customize your site"
        ],
        "type": "Text_excerpt",
        "value": "In `egdb_files/egdb_images/logos/` you can place logo images, and you can use the file `logos.json` to customize size and link.\nLogos are displayed in all pages at the footer.\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Customize the toolbar",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker",
          "Customize your site"
        ],
        "type": "Text_excerpt",
        "value": "Below, in the toolbar variables, you can customize wich links will be displayed in the toolbar, enabling and disabling the tools and sections available.\nA value `1` enable the link and `0` disable it. Choose the links you want to show or hide.\n\nAdditionally, you can enable the variable `$tb_custom` to add your own links to the tool bar just by editing the `custom_toolbar.php` file in the `egdb_custom_text` directory.\n\nLets take a look to each one of the links below.\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Home page",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker",
          "Customize your site"
        ],
        "type": "Text_excerpt",
        "value": "The home page is always available. In the `egdb_custom_text` folder, \nyou should be able to see the example text for the welcome page. \nYou can open the file `egdb_files/egdb_custom_text/welcome_text.php` in a text editor to customize the content.\nIt is possible to use PHP or HTML. There you could include CSS and JS. \nEasy GDB uses Bootstrap 4 for the style and some elements.\nYou could find examples to create you own elements at https://www.w3schools.com/bootstrap4/default.asp\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "About Us",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker",
          "Customize your site"
        ],
        "type": "Text_excerpt",
        "value": "If the variable `$tb_about` is equal `1` in the configuration file (`easyGDB_conf.php`),\nthen you should be able to see the example text for the `About Us` section.\n\nYou can open the file `egdb_files/egdb_custom_text/about.php` in a text editor to customize the content.\nAdditionally, you can set the about variables `$ab_citation` to `0` or `1` to display, or not, \nthe citation of the papers where the genomic database or data were published. \nYou can add the citation in `db_citation.php`.\n\nYou can also add here information about the participant labs.\nFor this, the `$ab_labs` should be enabled (equal to `1`) in `egdb_files/egdb_conf/easyGDB_conf.php`.\n\nYou can create a json file for each lab or you can copy and modify the provided examples to add your own information.\nThere, you can include the lab name and, for each person, you can include name, position, a picture (placed in `egdb_files/egdb_images/people/`),\nlink to a personal page, and, in the more_info array you could add data such as phone, email, and any other custom information.\n\nEvery time you change something reload the page `localhost:8000/easy_gdb/about.php` to see the changes.\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Species",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker",
          "Customize your site"
        ],
        "type": "Text_excerpt",
        "value": "If you want to host data for multiple species or accessions you shold enable the variable `$tb_species = 1`.\nIf not you can disable it by setting it to `$tb_species = 0`.\n\nThen, you will be able to see them at `localhost:8000/easy_gdb/species.php`\n\nTo customize the list of species, use the file `egdb_species/species_list.json`.\nThere you can include species name, common name, image and link to a \ndescriptive custom PHP file (`human.php`, `species1.php` and `species2.php`) \nwhere you can write all the information about the species.\nCreate as many PHP species files as you need, customize the content and add them in the `egdb_species/species_list.json` file. \nImages for species menu are placed in `egdb_files/egdb_images/species/`\nIt is recommendable to use the template as an example to avoid errors.\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Tools",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker",
          "Customize your site"
        ],
        "type": "Text_excerpt",
        "value": "It is possible to enable or disable the tools `Search page`, `Search box` in toolbar, `BLAST`, `Genome browser`, `Sequence extraction`, `Annotation extraction`, and `Gene version lookup`.\nTurn the variables to `1` or to `0` to enable or disable them.\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Search",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker",
          "Customize your site"
        ],
        "type": "Text_excerpt",
        "value": "To enable the search and the toolbar search box first we must install the PostgreSQL database \nand import the annotations. See [Install PostgreSQL](#install-postgresql)\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "BLAST",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker",
          "Customize your site"
        ],
        "type": "Text_excerpt",
        "value": "In the web browser, follow the link to `BLAST` in the tools toolbar menu. There you will see the BLAST input page.\nIn `egdb_files/egdb_conf/easyGDB_conf.php`, you can change the input example sequence changing the variable `$blast_example`.\n\nTo add BLAST datasets we need to copy the blast databases in the `blast_dbs` folder (path can be changed in `easyGDB_conf.php`).\nThe BLAST databases should copied inside a category folder, such as `category_1` and `category_2` in the example template. \nIf all the BLAST databases are included in a single category folder, \nthere will be only a dropdown menu to select the BLAST database in the select Dataset section in the BLAST input page.\nIf the BLAST databases are organized in two or more category folders, \nthere will be an extra dropdown menu to select the category and then it will be posible to select the databases within the category.\n\nBLAST database files and category folders MUST NOT include spaces in their names. \nUnderscores can be used in the file and folder names and they will be displayed as spaces in the web.\n\nThe template example include the folders `category_1` and `category_2`, but any other name can be used to name the category folders (without spaces or special characters).\nFor example, we could create folders to organize BLAST databases for several species such as `Danio_rerio`, `Mola_mola`, `Salmo_salar`, etc.\n\nYou can use the next command lines to create your own blast databases from fasta sequence files:\n\nFor protein sequences:\n\n    makeblastdb -in your_protein_sequence_file.fasta -dbtype 'prot' -parse_seqids\n\nFor nucleotide sequences:\n\n    makeblastdb -in your_nucleotide_sequence_file.fasta -dbtype 'nucl' -parse_seqids\n\nIt is important to use the option `-parse_seqids` to create the indexes needed to extract sequences, \nwhich will be used by the gene views and the `Sequence extraction` tool.\n\nThe variable `$max_blast_input` (in `egdb_files/egdb_conf/easyGDB_conf.php`) \ncontrols the maximum number of sequences allowed as input in `BLAST`.\n\nYou can also add custom links for the BLAST output by customizing the blast_links.json file in the `blast_dbs` folder:\n\n```json\n{\n  \"sample_blast_DB_genome.fasta\":\"/jbrowse/?data=data%2Feasy_gdb_sample&loc={chr}%3A{start}..{end}\",\n  \"sample_blast_DB_proteins.fasta\":\"#\",\n  \"sample_uniprot.fasta\":\"https://www.uniprot.org/uniprot/{subject}\"\n}\n```\n\nJust include the name of your database on the left and the link on the right. By default if the database name is not included in the JSON file, the BLAST output will link to the easy GDB gene page.\nYou can provide any other links and use the variables in the example (`{subject}`, `{chr}`, `{start}`, `{end}`) to add gene names or coordinates extracted from the BLAST results.\nIn this file several link examples are shown:\n\n* Link to genome browser: the variables `{chr}`, `{start}`, `{end}` will be replaced by the ones found in the results. Very useful for genome sequence BLAST databases.\n* No link: using a value of `#` will produce self links. For example for genes not included in your easy GDB database.\n* Gene name external links: the variable `{subject}` will be replaced by the subject gene name. It can be use to link to external databases, such as UniProt in the example above.\n\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Sequence extraction",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker",
          "Customize your site"
        ],
        "type": "Text_excerpt",
        "value": "This tool uses the datasets in the `blast_dbs` folder to extract the sequences from a list of genes.\n\nIf you have the folder `blast_dbs` and added the blast databases there (explained above), then the tool should be ready to use.\nYou can modify the example input gene list changing the variable `$input_gene_list` in `easyGDB_conf.php`.\n\nThe variable `$max_extract_seq_input` (in `easyGDB_conf.php`) controls the maximum number of input gene names to extract.\n\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Genome browser",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker",
          "Customize your site"
        ],
        "type": "Text_excerpt",
        "value": "As we ran the setup file after cloning easy GDB, at this point, and example of JBrowse should be ready.\nYou should be able to check it following the `Tools/Genome Browser` link in the menu bar, or at http://localhost:8000/jbrowse/.\n\n\nFor more information about how to add a new species and to add tracks see `Install and set up JBrowse` [below](#customize-jbrowse).\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Annotation extraction",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker",
          "Customize your site"
        ],
        "type": "Text_excerpt",
        "value": "To enable the annotation extraction first we must install the PostgreSQL database and import the annotations.\nSee [Install PostgreSQL](#install-postgresql)\n\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Gene expression atlas",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker",
          "Customize your site"
        ],
        "type": "Text_excerpt",
        "value": "Switching `$tb_gene_expr` to 1 (in `easyGDB_conf.php`) will enable the link to the gene expression atlas in the tools dropdown menu of the toolbar.\nThe expression datasets should be placed in the `expression data` folder (by default defined as `$expression_path` = `\"$root_path/expression_data\"`;).\n\nIn the `expression_data` folder you can find two examples of tab-delimited files, with extension `.txt`, containing expression data, and a JSON file (`expression_info.json`) including\nthe names of the dataset description files, a link to the gene annotation page (by default it will check in the local database, but it is possible to add external links or remove links), \nand names of images used for each sample in case of enabling the expression card visualization. Link will appear in the gene names of the Average values table.\n\nPlace your expression data files in the `expression_data` folder, as tab delimited text files with normalized data for each replicates in the columns (header), \nand each gene in the rows (first column), as shown in the examples.\nAll replicates should have the same name in the header to be group together (For example: leaf, leaf, leaf, root, root, root, heat, heat, heat, etc.).\n\nAdditionally, you can switch the variable `$expr_cards` to 1 in the `easyGDB_conf.php` file to enable the expression card visualization. \nIn that case, you can add image files in the images path (`egdb_images/expr/`) and add the names of the sample with their corresponding image\nin the JSON file `expression_info.json`. It is important that the sample name in the JSON is identical to the sample name in the tab-delimited expression data file,\n and the image file name correspond with the name in the images path.\n\n```json\n  {\n    \"Example1 - Plant_gene_expression (RPKM).txt\":\n      {\"link\":\"/easy_gdb/gene.php?name=query_id\",\n        \"description\":\"example1_description.php\",\n        \"images\":\n          {\n            \"Leaf\":\"leaf.jpeg\",\n            \"Fruit\":\"fruit.jpeg\",\n            \"Root\":\"root.jpeg\",\n            \"Peel\":\"peel.jpeg\",\n            \"Seed\":\"seed.jpeg\",\n            \"Germinating Seed\":\"germinating_seed.jpeg\",\n            \"Darkness\":\"darkness.jpeg\",\n            \"Drought\":\"drought.jpeg\",\n            \"Heat\":\"heat.jpeg\",\n            \"Cold\":\"cold.jpeg\"\n          }\n      },\n    \"Example2 - Organism dataset name (Units).txt\":\n      {\"link\":\"#\",\n        \"description\":\"example2_description.php\"\n      }\n  }\n```\n\nThe variable `$expr_menu` can be enabled in the configuration file to activate a link to the datasets information, \nwhich will display the information from all the datasets based on the information in the JSON file.\n\nDataset description PHP files should be placed in `egdb_custom_text/custom_pages/expr_datasets/`.\nExpression images should be placed in `egdb_images/expr/`.\n\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Gene version lookup",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker",
          "Customize your site"
        ],
        "type": "Text_excerpt",
        "value": "It should work correctly if some lookup files are placed in the `lookup` folder.\nRemove the provided examples and create your own lookup files following the same format.\nThis tool is useful to, for example, get or provide a list of identifiers of the closest model organism genes, \ndifferent gene versions or orthologs in other species.\n\nThe variable `$max_lookup_input` (in `easyGDB_conf.php`) controls the maximum number of gene names allowed as input.\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "More custom pages",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker",
          "Customize your site"
        ],
        "type": "Text_excerpt",
        "value": "Enabling the variable `$tb_more` in `egdb_files/egdb_conf/easyGDB_conf.php` we will see a new tab in the toolbar\ncalled More. There, you could add as many custom pages as you want. They are stored at  `egdb_files/custom_text/custom_pages/`,\nand we included two examples called `genome.php` and `other page.php`. You just need to create your own PHP pages and place them there.\nThe name shown in the toolbar will be taken from the file name, and the content will be automatically wrapped by the header and footer.\n\nHere, for example you can include statistics of your genome assembly, news and events page or anything you like.\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Tables",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker",
          "Customize your site",
          "More custom pages"
        ],
        "type": "Text_excerpt",
        "value": "In the `custom_pages` directory we can find an example of a custom page to visualize tab delimited files as formatted tables. \nThe file `table_menu.php` provides the code to list all the files in the folder `custom_pages/tables`, and the file `table_to_page.php` is a template to format the file passed in the URL using the variable `table_name`.\nThe variable `link_field` passed in the URL defines which column contains an unique id that can be used to link to the page `row_data.php`, \nwhich is a template to show the data contained in the row of the table where the linked id belongs to.\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Customize JBrowse",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker"
        ],
        "type": "Text_excerpt",
        "value": "An example of JBrowse is already implemented but \nwhen you want to include the genome browser for your species of interest you can find more information in the \nJBrowse manual (http://gmod.org/wiki/JBrowse_Configuration_Guide#prepare-refseqs.pl). Additionally, below you can find some suggestions.\n\nOpen a terminal using docker-compose or Docker desktop\n\n    docker-compose exec easy_gdb /bin/bash\n    \nUpload your sequences to JBrowse. This is how the gene models were uploaded in the example:\n\n    jbrowse$ bin/prepare-refseqs.pl --fasta ../easy_gdb/templates/jbrowse/genome.fasta --out data/easy_gdb_sample\n    jbrowse$ bin/flatfile-to-json.pl -gff ../easy_gdb/templates/jbrowse/gene_models.gff --key \"EasyGDB gene models\" --trackLabel egdb_gene_models --trackType CanvasFeatures --type mRNA --out data/easy_gdb_sample\n    jbrowse$ bin/generate-names.pl --tracks egdb_gene_models --out data/easy_gdb_sample/\n\nWhen adding new tracks, edit the file `data/easy_gdb_sample/trackList.json` to customize them in JBrowse.\nBelow there is an example of the gene model track with link to the database (`url`).\n\n```json\n    {\n       \"category\" : \"02 Annotations\",\n       \"compress\" : 0,\n       \"key\" : \"EasyGDB gene models\",\n       \"label\" : \"egdb_gene_models\",\n       \"onClick\" : {\n          \"action\" : \"newWindow\",\n          \"label\" : \"Go to gene view\",\n          \"url\" : \"/easy_gdb/gene.php?name={id}\"\n       },\n       \"storeClass\" : \"JBrowse/Store/SeqFeature/NCList\",\n       \"style\" : {\n          \"className\" : \"feature\"\n       },\n       \"trackType\" : \"CanvasFeatures\",\n       \"type\" : \"CanvasFeatures\",\n       \"urlTemplate\" : \"tracks/egdb_gene_models/{refseq}/trackData.json\"\n    }\n```\n\nTo allow multiple genome browser species, accessions or versions we need to modify the file `data/easy_gdb_sample/tracks.conf`\nto include the folder name where the data are stored (remember the jbrowse folder name in import_genes.pl)\n\n    [general]\n    dataset_id = easy_gdb_sample\n\n\n\nIn the file `jbrowse/jbrowse.conf` we can include as many species as we want. It is possible also to include external links in the URL field.\nHere we use the easy GDB example and the volvox and yeast examples from JBrowse:\n\n    [datasets.easyGDB]\n    url  = ?data=data/easy_gdb_sample\n    name = Easy GDB Example\n\n    [datasets.volvox]\n    url  = ?data=sample_data/json/volvox\n    name = Volvox Example\n\n    [datasets.yeast]\n    url  = ?data=sample_data/json/yeast\n    name = Yeast Example\n\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Private application",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker"
        ],
        "type": "Text_excerpt",
        "value": "In the file easy_gdb_apache.conf we are overwriting the apache configuration insidie the Docker repository.\nThere there is a block of code that is commented out. If you want to have a private genomics database you can\nenalbe that piece of code to make private everything in /var/www/html/.\n\n        <Directory \"/var/www/html\">\n            AuthType Basic\n            AuthName \"Restricted Content\"\n            AuthUserFile /etc/apache2/.htpasswd\n            Require valid-user\n        </Directory>\n\n\nCreate the first user to access private data (Create the passwdfile. If passwdfile already exists, it is rewritten and truncated.)\n    htpasswd -c /etc/apache2/.htpasswd First_user\n\nAdd new user\n    htpasswd /etc/apache2/.htpasswd another_user\n\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Start local server",
        "parent_header": [
          "Easy GDB",
          "Installation",
          "Set up easy GDB using the template example and Docker"
        ],
        "type": "Text_excerpt",
        "value": "In many cases, after applying some changes you will need to restart the server to make the changes effective.\nIn a local installation you can stop the application and them start it again from the terminal using the next command:\n\n```bash\nphp -S localhost:8000\n```\n\nOr restarting the the docker-compose service when using the Docker container.\n\nIn a server:\n```bash\nsudo service apache2 restart\n```\n"
      },
      "source": "https://raw.githubusercontent.com/noefp/easy_gdb/main/README.md",
      "technique": "header_analysis"
    }
  ]
}