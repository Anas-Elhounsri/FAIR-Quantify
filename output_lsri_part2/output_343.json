{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/boweny920/AcaFinder"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-01-18T00:49:44Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-25T13:27:04Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "An anti-CRISPR associated protein identification tool"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9970205315683629,
      "result": {
        "original_header": "AcaFinder allows for automated genome mining for reliable Acas.",
        "type": "Text_excerpt",
        "value": "To more confidently identify Acas given a genome or metagenome assembled genome, we implemented two approaches. The first approach is based on guilt-by-association (GBA), meaning that we identify homologs of Acrs first and then search for HTH-containing proteins in the acr gene neighborhood. The second approach is to build an HMM (hidden markov model) database using training data of the 12 known Aca families, and then search for Aca homologs with this Aca-HMMdb instead of Pfam HTH HMMs. In addition to the two implemented approaches, AcaFinder also integrates a CRISPR-Cas search tool (CRISPRCasTyper), a prophage search tool (VIBRANT), and in-house a Self-targeting spacer (STSS) searching tool, providing users with detailed information vital to the assessment of Aca predictions \n"
      },
      "source": "https://raw.githubusercontent.com/boweny920/AcaFinder/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9034227488687687,
      "result": {
        "original_header": "Input",
        "type": "Text_excerpt",
        "value": "AcrFinder needs **.fna**, **.gff** and **.faa** as input. Only **.fna** file as input is also acceptable; in that case, the **.gff** and **.faa** file will be generated by running <a href='https://github.com/hyattpd/Prodigal'>Prodigal</a>.\n \n"
      },
      "source": "https://raw.githubusercontent.com/boweny920/AcaFinder/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8915288158527781,
      "result": {
        "original_header": "List of Options",
        "type": "Text_excerpt",
        "value": "| Option | Alternative | Purpose                     |\n| -----  | ----------- | --------------------------- |\n| -h     | --help      | Shows all available options |\n| -n     | --FNA_file  | <span style=\"color:red\">Required</span> fna file |\n| -g     | --GFF_file     | <span style=\"color:red\">Required</span> Path to gff file to use/parse |\n| -p     | --FAA_file     | <span style=\"color:red\">Required</span> Path to faa file to use/parse |\n| -m     | --mode_prodiagal  | Mode prodigal will be run choices=[\"single\",\"meta\"], default=meta |\n| -o     | --outputFolder      | Folder containing all output results, default=AcaFinder_Output |\n| -a     | --Acr_alignment_evalue      | Evalue cut-off for Acr homolog search, default=1e-3 |\n| -c     | --Acr_alignment_coverage      | Coverage cut-off for Acr homolog search, default=0.6 |\n| -t     | --HTH_alignment_evalue    | Evalue cut-off for HTH domian hummer search, default=1e-3 |\n| -v     | --HTH_alignment_coverage    | Coverage cut-off for HTH domian hummer search, default=\"0.4 |\n| -l     | --all_protein_length_in_AcrAca_operon    | Max proten length in Acr-Aca operon when length of Acr homolog < 200aa, default=600 |\n| -i     | --intergenic_dist_in_AcrAca_operon      | Maximum Intergenic distance in Acr-Aca operon, default=250 |\n| -r     | --Acr_protein_database     | The Acr proteins that will be used search for Acas, default are the published Acrs + AcrHub predicted Acrs + 2500 high confident Acr prediction of AcrCatalog, default=AcrDatabase.faa |\n| -e     | --HTH_hmm_strict     | Provide option -e/--HTH_hmm_strict to use the more strict HTH HMM database (HTH-HMM_strict) for potential Aca protein search in Aca-Acr operons |\n| -b     | --Acr_Aca_inBetweenGenes     | Maximum number of genes allowed between Aca and Acr proteins + 1 (e.g if the input is 4, then maximum 3 genes are allowed between the potental Aca genes to its closest Acr homolog), default=4 |\n| -w     | --Virus     | Provide option -w/--Virus if input data is of viral origin |\n| -d     | --threads     | Number of cpu cores to run the program with, default=1 |\n| -z     | --phamDir     | Directory of all pfam hmm files with .dat files and other binaries, default=AcaFinder/all_pFam_hmm | \n| -y     | --published_acaHMM     | HMM for all 13 publsihed Aca proteins, recommended to use the default hmm provided from us, default=AcaFinder/HMM/AcaHMMs |\n| -x     | --acaHMM_evalue     | Evalue cut-off for acaHMM hummer search, recommended to use default, default=1e-10 |\n| -u     | --acaHMM_cov     | Coverage cut-off for acaHMM hummer search, recommended to use default, default=0.6 | \n"
      },
      "source": "https://raw.githubusercontent.com/boweny920/AcaFinder/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.898348796188953,
      "result": {
        "original_header": "Output files",
        "type": "Text_excerpt",
        "value": "| Name                 | Meaning               |\n| -------------------- | --------------------- |\n|*<output_dir>*/Acr_homolog_positive_Short_Gene_Operons   | Folder containing intermediate Acr-Aca operon result files |\n|*<output_dir>*/CRISPR_Cas_Found   | CCtyper direct output folder |\n|*<output_dir>*/VIBRANT_*<input_ID>*_genomic   | VIBRANT direct output folder |\n|*<output_dir>*/Aca-like_protein.csv    | Final results from the AcaHMM search approach |\n|*<output_dir>*/Aca-like_protein.faa    | Final results from the AcaHMM search approach, the Aca-like protein fasta sequences | \n|*<output_dir>*/Aca_HMM_hits.hmmOut    | AcaHMM hmmersearch output | \n|*<output_dir>*/log_acaHMM.hmm    | AcaHMM hmmersearch log file | \n|*<output_dir>*/Acr_homologs.faa    | Protein seuqnces of Acr homologs found from input genomic sequences | \n|*<output_dir>*/All_Aca_operons.csv    | Final results from the GBA search approach |\n|*<output_dir>*/CRISPR-Cas_found.csv   | Summary of Complete CRISPR-Cas systems discovered |\n|*<output_dir>*/diamond_blastp_result.txt   | Diamond blastp output from Acr homolog search |\n|*<output_dir>*/diamond_blastp_result.coverageParsed.txt   | Diamond blastp output from Acr homolog search, parsed for coverage | \n|*<output_dir>*/log_HTH.hmm    | HTH domain hmmerscan log file | \n|*<output_dir>*/prophage_locations.csv    | Summary of prophage regions discovered |\n|*<output_dir>*/Acr_homolog_positive_Short_Gene_Operons/Aca_candidates_within_Acr_Homolog_poisitve_SGO_OperonNumber-*<operon_ID>*.faa   | Protein fast file of final Aca-Acr operon | \n|*<output_dir>*/Acr_homolog_positive_Short_Gene_Operons/GBA_identified_AcrAca_loci_OperonNumber-*<operon_ID>*.check_Result  | Summary file of final Aca-Acr operon | \n|*<output_dir>*/Acr_homolog_positive_Short_Gene_Operons/Acr_Homolog_poisitve_SGO_OperonNumber-*<operon_ID>*.faa | Protein fast file of short-Gene-Operons with Acr homologs |\n|*<output_dir>*/Acr_homolog_positive_Short_Gene_Operons/Acr_Homolog_poisitve_SGO_OperonNumber-*<operon_ID>*.faa.hmmout | hmmscan output of HTH search within short-Gene-Operons with Acr homologs |\n|*<output_dir>*/Acr_homolog_positive_Short_Gene_Operons/Acr_Homolog_poisitve_SGO_OperonNumber-*<operon_ID>*.faa.hmmout.Coverage_parsed | hmmscan output of HTH search within short-Gene-Operons with Acr homologs |\n|*<output_dir>*/Acr_homolog_positive_Short_Gene_Operons/Acr_Homolog_poisitve_SGO_OperonNumber-*<operon_ID>*.faa.hmmout.Coverage_parsed.new_found_ACA.faa | HTH positive proteins fasta sequences within short-Gene-Operons with Acr homologs |\n|*<output_dir>*/Acr_homolog_positive_Short_Gene_Operons/Acr_Homolog_poisitve_SGO_OperonNumber-*<operon_ID>*.faa.pfamScanOut | Pfam annoatations of proteins of short-Gene-Operons with Acr homologs |\n|*<output_dir>*/Inverted_Repeats/OperonNumber-*<operon_ID>*_promoter-region.fna | Nucleotide sequence of promoter region extracted from predicted Acr-Aca operon |\n|*<output_dir>*/Inverted_Repeats/OperonNumber-*<operon_ID>*_promoter-region.fna.pal | Palindromic repeat regions found in operon promoter region | \n"
      },
      "source": "https://raw.githubusercontent.com/boweny920/AcaFinder/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/boweny920/AcaFinder/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/boweny920/AcaFinder/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "boweny920/AcaFinder"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/boweny920/AcaFinder/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "http://bcb.unl.edu/AcaFinder/img/Figure2_Pipeline.png"
      },
      "source": "https://raw.githubusercontent.com/boweny920/AcaFinder/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "I. Installation / Dependencies",
        "type": "Text_excerpt",
        "value": "Git clone the Github directory to your own, and go to the AcaFinder directory\n"
      },
      "source": "https://raw.githubusercontent.com/boweny920/AcaFinder/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9109585568610684,
      "result": {
        "original_header": "Contents:",
        "type": "Text_excerpt",
        "value": "<a href='#installation'>I. Installation / Dependencies</a> \n\n<a href='#examples'>V. Examples</a> \n<div id='installation' />\n \n"
      },
      "source": "https://raw.githubusercontent.com/boweny920/AcaFinder/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9986804604043656,
      "result": {
        "original_header": "**IV. <span style='color:RebeccaPurple'>Examples</span>**",
        "type": "Text_excerpt",
        "value": "```sh\npython3 AcaFind_runner.py --FNA_file sample_organism/GCF_000381965.1_ASM38196v1_genomic.fna --GFF_file sample_organism/GCF_000381965.1_ASM38196v1_genomic.gff --FAA_file sample_organism/GCF_000381965.1_ASM38196v1_protein.faa -o [output_dir] \n```\nor you can only use **.fna** file as input.\n```sh\npython3 AcaFind_runner.py --FNA_file sample_organism/GCF_000381965.1_ASM38196v1_genomic.fna -o [output_dir] \n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/boweny920/AcaFinder/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8768524827003716,
      "result": {
        "original_header": "**V. <span style='color:RebeccaPurple'>Workflow of AcaFinder</span>**",
        "type": "Text_excerpt",
        "value": "<img src=\"http://bcb.unl.edu/AcaFinder/img/Figure2_Pipeline.png\"> \n**All generated information will be associated together, and provided to the users as tables.**  \n"
      },
      "source": "https://raw.githubusercontent.com/boweny920/AcaFinder/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8565317517320893,
      "result": {
        "original_header": "Contents:",
        "type": "Text_excerpt",
        "value": "\n<a href='#examples'>V. Examples</a> \n"
      },
      "source": "https://raw.githubusercontent.com/boweny920/AcaFinder/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8431472303646121,
      "result": {
        "original_header": "Output files",
        "type": "Text_excerpt",
        "value": "<div id='examples' />\n \n"
      },
      "source": "https://raw.githubusercontent.com/boweny920/AcaFinder/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9076089402773323,
      "result": {
        "original_header": "**IV. <span style='color:RebeccaPurple'>Examples</span>**",
        "type": "Text_excerpt",
        "value": "```sh\npython3 AcaFind_runner.py --FNA_file sample_organism/GCF_000381965.1_ASM38196v1_genomic.fna --GFF_file sample_organism/GCF_000381965.1_ASM38196v1_genomic.gff --FAA_file sample_organism/GCF_000381965.1_ASM38196v1_protein.faa -o [output_dir] \n```\nor you can only use **.fna** file as input.\n```sh\npython3 AcaFind_runner.py --FNA_file sample_organism/GCF_000381965.1_ASM38196v1_genomic.fna -o [output_dir] \n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/boweny920/AcaFinder/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/boweny920/AcaFinder/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "http://bcb.unl.edu/AcaFinder/img/AcaFinder-logos.jpeg"
      },
      "source": "https://raw.githubusercontent.com/boweny920/AcaFinder/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "AcaFinder"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "boweny920"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 93700,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/boweny920/AcaFinder/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://diamond.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/boweny920/AcaFinder/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "I. Installation / Dependencies",
        "type": "Text_excerpt",
        "value": "Git clone the Github directory to your own, and go to the AcaFinder directory\n"
      },
      "source": "https://raw.githubusercontent.com/boweny920/AcaFinder/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependences",
        "parent_header": [
          "I. Installation / Dependencies"
        ],
        "type": "Text_excerpt",
        "value": "Program expects these versions and using other versions can result in unexpected behavior.\n\n`Python` - Your python version should be ==3.8. It is recommended that you create a conda enviroment and install all the below dependences within said enviroment:\n```sh\n## Environment named \"AcaFinder\" is created here as an example\nconda create -n AcaFinder python=3.8\n```\n\n`VIBRANT` - Used to search for potential prophage regions from input genomic sequences\n\nVersion used v1.2.0. We recommend installing VIBRANT using Anaconda, but you may also install VIBRANT with other methods from https://github.com/AnantharamanLab/VIBRANT\n\nTo install using Anaconda, \nInstall dependencies. See Requirements section https://github.com/AnantharamanLab/VIBRANT.\nInstall directly to $PATH using bioconda. \n```sh\nconda install -c bioconda vibrant==1.2.0\n```\n\nDownload and setup databases. This will take some time due to file sizes, but it only needs to be run once. This step requires ~20GB of temporary storage space and ~11GB of final storage space. To do this, run download-db.sh which should be in your system's $PATH. download-db.sh\n```sh\ndownload-db.sh\n```\n\n`Cctyper` - Used for complete CRISPR-Cas system search\n\nCan be installed either through conda or pip.\nIt is advised to use conda, since this installs CRISPRCasTyper and all dependencies, and downloads the database in one go.\n\nTo use conda:\n```sh\nconda install -c conda-forge -c bioconda -c russel88 cctyper\n```\n\nTo use pip:\npython -m pip install cctyper\n\nWhen installing with pip, you need to download the database manually:\n\n```sh\n# Download and unpack\nsvn checkout https://github.com/Russel88/CRISPRCasTyper/trunk/data\ntar -xvzf data/Profiles.tar.gz\nmv Profiles/ data/\nrm data/Profiles.tar.gz\n\n# Tell CRISPRCasTyper where the data is:\n# either by setting an environment variable (has to be done for each terminal session, or added to .bashrc):\nexport CCTYPER_DB=\"/path/to/data/\"\n# or by using the --db argument each time you run CRISPRCasTyper:\ncctyper input.fa output --db /path/to/data/\n```\n\nDetailed information can be found at : https://github.com/Russel88/CRISPRCasTyper#install\n\n`PfamScan/Pfam Database` - For protein annotation \n\nInstall PfamScan with Anaconda:\n```sh\nconda install -c bioconda pfam_scan\n#or\nconda install -c bioconda/label/cf201901 pfam_scan\n```\n\nDownloading Pfam database\n```sh\n# a. Go to the all_pFam_hmm/ folder\ncd all_pFam_hmm/\n\n# b. Download database: \nwget http://ftp.ebi.ac.uk/pub/databases/Pfam/current_release/Pfam-A.hmm.gz\n\n#c. Unpack \ngunzip Pfam-A.hmm.gz\n\n#d. Prepare HMM files \nhmmpress Pfam-A.hmm\n```\n`EMBOSS package` - For palindromic repeats scanning in operon promoters\n\nInstal with Anaconda\n```sh\nconda install -c bioconda emboss\n```\nCheck out other installation methods at : http://emboss.open-bio.org/html/use/ch02s07.html\n\n\nMake sure your system also has the following packages:\n1. <a href='https://diamond.readthedocs.io/en/latest/Getting-Started/Installation/'>Diamond</a>\n2. <a href='http://hmmer.org/documentation.html'>HMMER</a>\n3. <a href='https://github.com/hyattpd/Prodigal'>Prodigal</a>\n\n****\n\n\n<div id='about' />\n"
      },
      "source": "https://raw.githubusercontent.com/boweny920/AcaFinder/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 10:19:47",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ]
}