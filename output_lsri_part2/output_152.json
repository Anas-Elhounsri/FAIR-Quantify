{
  "application_domain": [
    {
      "confidence": 3.66,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8216247892326796,
      "result": {
        "type": "String",
        "value": "Graphs"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/zhaow-01/PyAGH"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-07-04T15:06:46Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-25T09:03:46Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A package for calculating kinship matrix"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "parent_header": [
          "PyAGH"
        ],
        "type": "Text_excerpt",
        "value": "\r\n`PyAGH` is a Python package developed for calculating relationship matrix using pedigree, genotype or microbiology data as well as  processing, analysis and visualization for data. `PyAGH` provides fast and concise methods for calculating Amatrix (based on pedigree), Gmatrix (based on genotype), Mmatrix(based on OTU) and Hmatrix (based on pedigree and genotype) used in breeding. `PyAGH` supports  high marker density typing data, large pedigree data, microbiome data, additive, dominant and epistatic effects relationship matrix, relationship matrix construction across population. With the obtained relationship matrix, you can use `PyAGH` for fast visualization, including PCA analysis, Cluster analysis and drawing Heatmaps.\r\n\r\nTo make it easier to use pedigree information, `PyAGH ` also provides targeted tools for specific needs, such as detecting pedigree errors,  selection individuals, pedigree visualization, sorting pedigree, calculating inbreeding coefficients and calculating  relationship coefficients . The latest stable release of the software can be installed conveniently via pip .\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/zhaow-01/PyAGH/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Target Audience",
        "parent_header": [
          "PyAGH",
          "Introduction"
        ],
        "type": "Text_excerpt",
        "value": "\r\nThe target audience of `PyAGH` includes:\r\n\r\n- Students and researchers in the field of breeding and genetics, particularly those who want to perform genomic prediction.\r\n- Government, enterprises, or other entities who expect efficient processing of pedigree and genomic information.\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/zhaow-01/PyAGH/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Technical Features",
        "parent_header": [
          "PyAGH",
          "Introduction"
        ],
        "type": "Text_excerpt",
        "value": "\r\n- Provide a variety of  methods for calculating kinship matrix including combined reference population.\r\n- Fast and support tens of millions of genotypes.\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/zhaow-01/PyAGH/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Main Functions",
        "parent_header": [
          "PyAGH",
          "Introduction"
        ],
        "type": "Text_excerpt",
        "value": "\r\nCurrently, `PyAGH` mainly provides the following methods:\r\n\r\n- **Pedigree sorting:** Provides methods to quickly obtain the correct pedigree in chronological order of birth clean multiple types of data error.\r\n- **Pedigree selection:** Provides methods to select pedigree based on specific individuals and generations.\r\n- **Calculation of coefficients:** Provides methods to easily obtain the inbreeding and relationship coefficients of specific individuals.\r\n- **Kinship matrix:** Provides different methods to calculating Amatix, Gmatrix and Hmatrix.\r\n- **Visualization:** Provides methods to display results.\r\n\r\n---\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/zhaow-01/PyAGH/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/zhaow-01/PyAGH/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/zhaow-01/PyAGH/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "zhaow-01/PyAGH"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PyAGH"
      },
      "source": "https://raw.githubusercontent.com/zhaow-01/PyAGH/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://app.travis-ci.com/zhaow-01/PyAGH.svg?branch=main"
      },
      "source": "https://raw.githubusercontent.com/zhaow-01/PyAGH/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zhaow-01/PyAGH/main/picture/cluster_example.png"
      },
      "source": "https://raw.githubusercontent.com/zhaow-01/PyAGH/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zhaow-01/PyAGH/main/picture/pca_example.png"
      },
      "source": "https://raw.githubusercontent.com/zhaow-01/PyAGH/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zhaow-01/PyAGH/main/picture/heat_example.png"
      },
      "source": "https://raw.githubusercontent.com/zhaow-01/PyAGH/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zhaow-01/PyAGH/main/picture/ped_example.png"
      },
      "source": "https://raw.githubusercontent.com/zhaow-01/PyAGH/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "PyAGH"
        ],
        "type": "Text_excerpt",
        "value": "\r\nIt is recommended to use `Python 3.9`\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/zhaow-01/PyAGH/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Using pypi",
        "parent_header": [
          "PyAGH",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "\r\n`PyAGH`can be installed by using `pip install`.\r\n\r\n```shell\r\npip install PyAGH\r\n```\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/zhaow-01/PyAGH/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1.0,
      "result": {
        "original_header": "PyAGH",
        "type": "Text_excerpt",
        "value": "\r\n<div align=center>\r\n<img src=\"https://raw.githubusercontent.com/zhaow-01/PyAGH/main/picture/logo.png\" width=\"600\" />\r\n</div>\r\n<p> \r\n  <a href=\"https://badge.fury.io/py/PyAGH\"><img src=\"https://badge.fury.io/py/PyAGH.svg\" alt=\"PyPI version\" height=\"18\"></a>\r\n  <img alt=\"GitHub\" src=\"https://img.shields.io/github/license/zhaow-01/PyAGH\">\r\n  <img alt=\"GitHub commit activity\" src=\"https://img.shields.io/github/commit-activity/m/zhaow-01/PyAGH\">\r\n  <img alt=\"GitHub top language\" src=\"https://img.shields.io/github/languages/top/zhaow-01/PyAGH\">\r\n  <img alt=\"GitHub language count\" src=\"https://img.shields.io/github/languages/count/zhaow-01/PyAGH?color=green\">\r\n  <img alt=\"travis-ci\" src=\"https://app.travis-ci.com/zhaow-01/PyAGH.svg?branch=main\">\r\n</p>\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/zhaow-01/PyAGH/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/zhaow-01/PyAGH/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) [2022] [PyAGH]\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
      },
      "source": "https://raw.githubusercontent.com/zhaow-01/PyAGH/main/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "PyAGH"
        ],
        "type": "Text_excerpt",
        "value": "\r\n`PyAGH` is MIT licensed.\r\n"
      },
      "source": "https://raw.githubusercontent.com/zhaow-01/PyAGH/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zhaow-01/PyAGH/main/picture/logo.png"
      },
      "source": "https://raw.githubusercontent.com/zhaow-01/PyAGH/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PyAGH"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "zhaow-01"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 108706,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 9356,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zhaow-01/PyAGH/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 09:34:19",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 8
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Load the example data",
        "parent_header": [
          "PyAGH",
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "\r\n`loadEgPed()` and `loadEgGeno()` functions can load the example data.\r\n\r\n```python\r\nimport PyAGH\r\nped = PyAGH.loadEgPed()\r\ngenofile = PyAGH.loadEgGeno() #is a filename\r\nped\r\n```\r\n\r\n| index | id | sire | dam |\r\n| :---: | -: | ---: | --: |\r\n|   0   |  9 |    1 |   2 |\r\n|   1   | 10 |    3 |   4 |\r\n|   2   | 11 |    5 |   6 |\r\n|   3   | 12 |    7 |   8 |\r\n|   4   | 13 |    9 |  10 |\r\n|   5   | 14 |   11 |  12 |\r\n|   6   | 15 |   11 |   4 |\r\n|   7   | 16 |   13 |  15 |\r\n|   8   | 17 |   13 |  14 |\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/zhaow-01/PyAGH/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Sort pedigree",
        "parent_header": [
          "PyAGH",
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "\r\n`sortPed()` is a function that can sort the pedigree according to the correct birth date of individuals and check for various errors in the  pedigree.\r\n\r\n```python\r\nped_sorted = PyAGH.sortPed(ped)\r\nped_sorted\r\n```\r\n\r\n| index | id | sire | dam |\r\n| :---: | :-: | :--: | :-: |\r\n|   0   | 1 |  0  |  0  |\r\n|   1   | 3 |  0  |  0  |\r\n|   2   | 5 |  0  |  0  |\r\n|   3   | 7 |  0  |  0  |\r\n|   4   | 2 |  0  |  0  |\r\n|   5   | 4 |  0  |  0  |\r\n|   6   | 6 |  0  |  0  |\r\n|   7   | 8 |  0  |  0  |\r\n|   8   | 9 |  1  |  2  |\r\n|   9   | 10 |  3  |  4  |\r\n|  10  | 11 |  5  |  6  |\r\n|  11  | 12 |  7  |  8  |\r\n|  12  | 15 |  11  |  4  |\r\n|  13  | 13 |  9  | 10 |\r\n|  14  | 14 |  11  | 12 |\r\n|  15  | 16 |  13  | 15 |\r\n|  16  | 17 |  13  | 14 |\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/zhaow-01/PyAGH/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Select pedigree",
        "parent_header": [
          "PyAGH",
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "\r\n`selectPed()` function can select pedigree based on specific individuals and generations.\r\n\r\n```python\r\nped_selected = PyAGH.selectPed(data=ped,id=['9','10'],generation=3)\r\nped_selected\r\n```\r\n\r\n| index | id | sire | dam |\r\n| :---: | :-: | :--: | :-: |\r\n|   0   | 1 |  0  |  0  |\r\n|   1   | 3 |  0  |  0  |\r\n|   2   | 2 |  0  |  0  |\r\n|   3   | 4 |  0  |  0  |\r\n|   4   | 9 |  1  |  2  |\r\n|   5   | 10 |  3  |  4  |\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/zhaow-01/PyAGH/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Calculate kinship matrix",
        "parent_header": [
          "PyAGH",
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "\r\n`makeA()`, `makeG()` and `makeH()` functions can calculate the kinship matrix using various methods based on pedigree , genotype and both together, respectively.\r\n\r\n```python\r\nA = PyAGH.makeA(ped_sorted)\r\nG = PyAGH.makeG(File=genofile,method=1,File_list=False)\r\nG_inter = PyAGH.makeG_inter(geno,method=\"dd\")\r\nM = PyAGH.makeM(OTU)\r\nH = PyAGH.makeH(G,A,w=0.05)\r\n####A,G and H are lists with 2 elements. The first one is kinship matrix in numpy.ndarray type and the other one is id labels in pandas.Series type. \r\n```\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/zhaow-01/PyAGH/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Calculate coefficients",
        "parent_header": [
          "PyAGH",
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "\r\n```python\r\ncoef_inbreeding = PyAGH.coefInbreeding(A)\r\ncoef_inbreeding\r\n```\r\n\r\n| index | ID |    F    |\r\n| :---: | :-: | :-----: |\r\n|   0   |  1  | 0.0000 |\r\n|   1   |  3  | 0.0000 |\r\n|   2   |  5  | 0.0000 |\r\n|   3   |  7  | 0.0000 |\r\n|   5   |  4  | 0.0000 |\r\n|  11  | 12 | -0.0000 |\r\n|  ...  | ... |   ...   |\r\n|  12  | 15 | -0.0000 |\r\n|  13  | 13 | -0.0000 |\r\n|  14  | 14 | -0.0000 |\r\n|  15  | 16 | 0.0625 |\r\n|  16  | 17 | -0.0000 |\r\n\r\n```python\r\ncoef_kinship = PyAGH.coefKinship(A)\r\ncoef_kinship\r\n```\r\n\r\n|     | ID1 | ID2 |        r |\r\n| --: | --: | --: | -------: |\r\n|   0 |   1 |   1 | 1.000000 |\r\n|   1 |   1 |   3 | 0.000000 |\r\n|   2 |   1 |   5 | 0.000000 |\r\n|   3 |   1 |   7 | 0.000000 |\r\n|   4 |   1 |   2 | 0.000000 |\r\n| ... | ... | ... |      ... |\r\n| 148 |  14 |  16 | 0.121268 |\r\n| 149 |  14 |  17 | 0.500000 |\r\n| 150 |  16 |  16 | 1.000000 |\r\n| 151 |  16 |  17 | 0.333486 |\r\n| 152 |  17 |  17 | 1.000000 |\r\n\r\n153 rows \u00d7 3 columns\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/zhaow-01/PyAGH/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Visualization",
        "parent_header": [
          "PyAGH",
          "Examples"
        ],
        "type": "Text_excerpt",
        "value": "\r\n```python\r\ncluster_example = PyAGH.cluster(A)\r\nplt.savefig('cluster_example.png', facecolor='w',dpi=300)\r\n```\r\n\r\n<div align=center>\r\n<img src=\"https://raw.githubusercontent.com/zhaow-01/PyAGH/main/picture/cluster_example.png\" width=\"600\" />\r\n</div>\r\n\r\n```python\r\ngroup=['1','1','1','1','1','1','1','2','2','2','2','2','2','2','2','2','2']\r\npca_example = PyAGH.pca(A,group=group)\r\npca_example.savefig('pca_example.png', facecolor='w',dpi=300)\r\n```\r\n\r\n![pca](https://raw.githubusercontent.com/zhaow-01/PyAGH/main/picture/pca_example.png)\r\n\r\n```python\r\nheatmap_example = PyAGH.heat(A)\r\nplt.savefig('heatmap_example.png', facecolor='w',dpi=300)\r\n```\r\n\r\n<div align=center>\r\n<img src=\"https://raw.githubusercontent.com/zhaow-01/PyAGH/main/picture/heat_example.png\" alt=\"heat\" width=\"600\" />\r\n</div>\r\n\r\n```python\r\nimport graphviz\r\nped_selected = PyAGH.selectPed(data=ped,id=['17'],generation=3)\r\np = PyAGH.gragh(ped_selected)\r\ngraphviz.Source(p)\r\n```\r\n\r\n![output](https://raw.githubusercontent.com/zhaow-01/PyAGH/main/picture/ped_example.png)\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/zhaow-01/PyAGH/main/README.md",
      "technique": "header_analysis"
    }
  ]
}