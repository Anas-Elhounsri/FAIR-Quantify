{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "Protein Stability Prediction with a Gaussian Network Model <br> (PSP-GNM)"
        ],
        "type": "Text_excerpt",
        "value": "Mishra, S.K. PSP-GNM: Predicting Protein Stability Changes upon Point Mutations with a Gaussian Network Model. Int. J. Mol. Sci. 2022, 23, 10711. https://doi.org/10.3390/ijms231810711\n\n"
      },
      "source": "https://raw.githubusercontent.com/sambitmishra0628/PSP-GNM/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/sambitmishra0628/PSP-GNM"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact",
        "parent_header": [
          "Protein Stability Prediction with a Gaussian Network Model <br> (PSP-GNM)"
        ],
        "type": "Text_excerpt",
        "value": "Sambit Mishra - sambitmishra0628@gmail.com\n\nProject Link: [PSP-GNM](https://github.com/sambitmishra0628/PSP-GNM)\n\n"
      },
      "source": "https://raw.githubusercontent.com/sambitmishra0628/PSP-GNM/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-02-09T06:09:56Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-02T01:45:18Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Prediction of protein thermodynamic stability changes upon mutations through a Gaussian Network Model simulating protein unfolding behavior"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9919316542339165,
      "result": {
        "original_header": "About The Project",
        "type": "Text_excerpt",
        "value": "Protein stability prediction upon point mutation is a key biological problem. Single point mutations can alter protein function resulting in disease incidence. A very significant example is that of sickle cell anemia, wherein a single genomic mutation results in a single amino acid change and impairs the function of hemoglobin. It is therefore essential to develop methods that can predict the impact of point mutations on protein stability. More specifically, such methods should enable the estimation of free energy change (ddG) upon point mutation and be able to tell us whether a mutation reduces, increases or doesn't change the thermodynamic stability of proteins. \nIn this project, we introduce a novel approach to estimate the changes in free energy (\u0394\u0394G) associated with point mutations. We refer to our approach as Protein Stability Prediction using Gaussian Network Model (PSP-GNM). For a given wildtype-mutant pair, PSP-GNM utilizes the Gaussian Network Model (GNM) to identify putative contacts and the order in which they are broken during simulated partial protein unfolding. We then use the knowledge of these broken contacts to estimate the \u0394\u0394G.  \n \n"
      },
      "source": "https://raw.githubusercontent.com/sambitmishra0628/PSP-GNM/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/sambitmishra0628/PSP-GNM/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/sambitmishra0628/PSP-GNM/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "sambitmishra0628/PSP-GNM"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Protein Stability Prediction with a Gaussian Network Model  (PSP-GNM)"
      },
      "source": "https://raw.githubusercontent.com/sambitmishra0628/PSP-GNM/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sambitmishra0628/PSP-GNM/master/./Github_image.png"
      },
      "source": "https://raw.githubusercontent.com/sambitmishra0628/PSP-GNM/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9990126408569278,
      "result": {
        "original_header": "Repository Contents",
        "type": "Text_excerpt",
        "value": "The repository includes 4 directories containing the relevant datasets and scripts for running PSP-GNM. It also includes a conda environment file (psp_gnm_env.yaml) that can be used to re-create the environment where the scripts can be run. \n"
      },
      "source": "https://raw.githubusercontent.com/sambitmishra0628/PSP-GNM/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/sambitmishra0628/PSP-GNM/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "amino-acid-mutation, elastic-network-models, nonsynonymous, prediction-algorithm, protein-dynamics, protein-stability, protein-structure"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "Protein Stability Prediction with a Gaussian Network Model <br> (PSP-GNM)"
        ],
        "type": "Text_excerpt",
        "value": "Distributed under the MIT License. See `LICENSE` for more information.\n\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/sambitmishra0628/PSP-GNM/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PSP-GNM"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "sambitmishra0628"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 69290,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/sambitmishra0628/PSP-GNM/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "sambitmishra0628",
          "type": "User"
        },
        "date_created": "2022-09-17T23:36:25Z",
        "date_published": "2022-09-17T23:38:46Z",
        "description": "The first release of PSP-GNM",
        "html_url": "https://github.com/sambitmishra0628/PSP-GNM/releases/tag/v1.0",
        "name": "Release 1",
        "release_id": 77464993,
        "tag": "v1.0",
        "tarball_url": "https://api.github.com/repos/sambitmishra0628/PSP-GNM/tarball/v1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/sambitmishra0628/PSP-GNM/releases/77464993",
        "value": "https://api.github.com/repos/sambitmishra0628/PSP-GNM/releases/77464993",
        "zipball_url": "https://api.github.com/repos/sambitmishra0628/PSP-GNM/zipball/v1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Prerequisites",
        "parent_header": [
          "Protein Stability Prediction with a Gaussian Network Model <br> (PSP-GNM)",
          "Getting Started"
        ],
        "type": "Text_excerpt",
        "value": "You will need access to a Linux machine (or a MacOS or Windows 10 with Windows Subsystem for Linux enabled). You will need to have conda installed.\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/sambitmishra0628/PSP-GNM/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 12:57:05",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 9
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Getting Started",
        "parent_header": [
          "Protein Stability Prediction with a Gaussian Network Model <br> (PSP-GNM)"
        ],
        "type": "Text_excerpt",
        "value": "\n\nYou will need access to a Linux terminal (or a MacOS, or even a Windows 10 having Windows Subsystem for Linux enabled and Ubuntu installed). The specific instructions below work best in a Linux (Ubuntu 18.02/Ubuntu20.04) platform.\n\nTo get a local copy up and execute the scripts, follow these simple steps:\n- Install miniconda: \n\n```\nwget https://repo.anaconda.com/miniconda/Miniconda3-py38_4.11.0-Linux-x86_64.sh\nchmod +x Miniconda3-latest-Linux-x86_64.sh\n./Miniconda3-latest-Linux-x86_64.sh\n```\n\n- Clone the repository with `git clone https://github.com/sambitmishra0628/PSP-GNM`\n- On a terminal window, go to the PSP-GNM directory\n- Create the conda environment using the provided yaml file: `conda env create -f psp_gnm_env.yaml` \n- Activate the environment: conda activate psp_gnm\n- Checkout the command line arguments needed to run psp_gnm: `python scripts/psp_gnm.py --help`\n\nThe following help manual should be displayed\n\n```\nUsage: psp_gnm.py [OPTIONS]\n\nOptions:\n  --data_file TEXT    Name of the .csv file containing the information on ddG\n                      for the mutants  [required]\n  --outfile TEXT      Name of the file to which the PSP-GNM-calculated\n                      energies and experimental energies will be written\n                      [required]\n  --outdir TEXT       Name of the directory to which the intermittent result\n                      files will be written to  [required]\n  --wt_pdb_dir TEXT   Directory containing the wild type atomic pdb files. For\n                      a reverse mutant, the wildtype is the forward mutant.\n                      [required]\n  --num_jobs TEXT     Maximum number of jobs to be run in parallel  [required]\n  --dist_cutoff TEXT  Distance cutoff for interactions in GNM  [default: 9;\n                      required]\n  --num_modes TEXT    Number of modes to be used  [default: 10; required]\n  --rev_mut_pdb       Set this option if data_file includes reverse mutants\n                      and all the reverse mutants have the corresponding pdb\n                      files of the forward mutant in wt_pdb_dir.  [default:\n                      False]\n  --help              Show this message and exit.\n```\n"
      },
      "source": "https://raw.githubusercontent.com/sambitmishra0628/PSP-GNM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "Protein Stability Prediction with a Gaussian Network Model <br> (PSP-GNM)"
        ],
        "type": "Text_excerpt",
        "value": "Before running **make sure that your current working directory is the `PSP_GNM/scripts/` directory.**\n\n```\npython psp_gnm.py --data_file ../test_data/S350_test_benchmark_run.csv --outdir ../S350_test_run_output --outfile ../S350_test_benchmark_run_out.csv --wt_pdb_dir ../test_data/pdb_test --num_jobs 4 --dist_cutoff 9 --num_modes 10\n```\n\nIn the above:\n  - `num_jobs` is the number of parallel jobs you intend to run. Ideally, it should be set to the number of cores in your machine (N) - 1. \n  \n  - The above run will create an output directory `S350_test_run_output`, where all the intermediate files containing information on the contacts broken during partial unfolding will be stored.\n  \n  - The `data_file` should have **comma separated values** and at least include the following columns (the column names should exactly match as given below)\n\n| Column Name  | Expected value|\n| ------------- | ------------- |\n| PDB_CHAIN  | The 4-lettered PDB ID + Chain ID (e.g., 1AJ3A, 1AONU) (Case-sensitive)  |\n| WILD_RES  | The single amino acid alphabet of the wildtype residue in the PDB file (Case-sensitive) |\n| RES_NUM_PDB  | The PDB residue number for the mutation position  |\n| MUTANT_RES  | The single amino acid alphabet of the variant/mutant residue (Case-sensitive)|\n| Category  | Should be one of Forward or Reverse (case-sensitive). If unsure, then use Forward and then use the value under column ddG_PSP_GNM_unscaled in the output file for your analysis. |\n<br>\n\nIn the above, it is expected that position `RES_NUM_PDB` in the PDB file has the residue given by `WILD_RES`.\n\n  - The output file `S350_test_benchmark_run_out.csv` will include the calculated ddG. Note that this output file will include all the columns present in the data file. Additionally, it will have the columns corresponding to calculations made by PSP-GNM. Explanation of the different output columns are as follows.\n\n| Column Name  | Explanation |\n| ------------- | ------------- |\n| RES_IND_SEQ  | The serial index of the mutation position. Starts from 0   |\n| Calc_ddG  | The raw calculated energy difference between wildtype and mutant |\n| Calc_ddI  | The raw calculated entropy difference between wildtype and mutant. The entropy difference is measured as the difference in mean-squared fluctuation in distance. |\n| Calc_ddG_mean  | The average calculated energy difference between wildtype and mutant. Averaged across all residues considered for calculations.|\n| Calc_ddI_mean  | The average calculated entropy difference between wildtype and mutant. Averaged across all residues considered for calculations.|\n| Num_contacts  | Total contacts broken during partial unfolding involving the mutation residue and considered for calculations. We suggest considering only those calculations having Num_contacts > 0.|\n| Calc_Energy_scaled  | The scaled values for Calc_ddG   |\n| Calc_Entropy_scaled  | The scaled values for Calc_ddI  |\n| ddG_PSP_GNM_unscaled  | The unscaled prediction for ddG that incorporates both energy and entropy changes   |\n| ddG_PSP_GNM_scaled  | The scaled prediction for ddG that incorporates both energy and entropy changes. This value is meaningless if the user is not sure of the category of mutation. If that's the case, then use the unscaled values.  |\n\n- The output directory will include *_contact_breaks.csv files. These files include information on the contacts broken during the partial unfolding simulation. A separate contact_break file will be created for each mutant listed in the S350_test_benchmark_run.csv file and its corresponding wildtype. For example, the 2nd row of the S350_test_benchmark_run.csv includes the following mutant.\n\n|PDB_CHAIN | WILD_RES | RES_NUM_PDB | MUTANT_RES | Category|\n|----------|----------|-------------|------------|---------|\n|1AJ3A |I | 23 | A| Forward |\n\nIn the above case, the PDB ID is 1AJ3, the chain is A, wildtype residue is I, mutant residue is A and the position of mutation (according to the PDB file) is 23. The resulting contact_break file created during the unfolding simulation of the mutant form is 1AJ3A_I23A_contact_breaks.csv and the wildtype is 1AJ3A_wt_contact_breaks.csv. The first few rows for 1AJ3A_wt_contact_breaks.csv are shown below.\n\n|PDB_ID|WT_or_Mut|Mutation_position|Contact_Position|Res_at_Mut_Position|Res_at_Contact_Pos|Energy_MJ|Int_dist_change|Contact_break_rank|\n|------|---------|-----------------|----------------|-------------------|------------------|---------|---------------|------------------|\n|1AJ3A|wt|17|88|K|L|-3.37|2.355|1|\n|1AJ3A|wt|88|17|L|K|-3.37|2.355|1|\n|1AJ3A|wt|46|89|L|K|-3.37|2.301|2|\n|1AJ3A|wt|89|46|K|L|-3.37|2.301|2|\n|1AJ3A|wt|39|92|H|A|-2.41|2.305|3|\n|1AJ3A|wt|92|39|A|H|-2.41|2.305|3|\n|1AJ3A|wt|39|93|H|A|-2.41|2.308|4|\n|1AJ3A|wt|93|39|A|H|-2.41|2.308|4|\n\n*Note that there are duplicate rows for the same broken contact (e.g., 17 and 88) in this file. However, PSP-GNM only utilizes information on the unique broken contacts for \u0394\u0394G calculations. A newer version of the code will be released in the future to output only the unique broken contacts in the \\*_contact_breaks file.*\n\nAn explanation of each column in the table above is as follows. \n\n| Column Name | Explanation |\n|-------------|-------------|\n| PDB_ID | Name of the 4-lettered PDB ID with chain |\n| WT_of_Mut | Whether the simulation was carried out for the wildtype (wt) or the mutant form |\n| Mutation_postion | This is  the sequential index (not the PDB residue number) of the first residue in the contact pair|\n| Contact_position | This is just the sequential index (not the PDB residue number) of the second residue in the contact pair | \n| Res_at_Mut_Position| Residue present at Mutation_position|\n| Res_at_Contact_Position| Residue present at the Contact_Position |\n| Energy_MJ| Interaction energy between Res_at_Mut_Position and Res_at_Contact_Position obtained from the MJ potential |\n| Int_dist_change | Mean-squared fluctuation in distance, which we use to estimate entropy, between the contact pair|\n| Contact_break_rank | The rank/order based on when this contact was broken during the simulation |\n\nFor example, in the first row, residues at position 17 (K) and 88 (L) were originally in contact. That is, the spatial distance between their C-alpha atoms in the native structure was <= 9 Angstroms. During the unfolding simulation, this was the first residue pair that was broken as it had the highest mean-squared fluctuation in distance. Therefore, we assign the residue pair a Contact_break_rank of 1.\n\n"
      },
      "source": "https://raw.githubusercontent.com/sambitmishra0628/PSP-GNM/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Use cases",
        "parent_header": [
          "Protein Stability Prediction with a Gaussian Network Model <br> (PSP-GNM)"
        ],
        "type": "Text_excerpt",
        "value": "<b> 1. Predicting ddG for reverse mutants using the structure of the native wildtype </b>\n \nFor PDB ID 1AJ3 and chain A (wildtype PDB), the wildtype residue at position 18 is ASP. Let us assume a theoretical mutant form of this protein that has PHE at position 18. The forward mutant then is ASP18 -> PHE18 and the reverse mutant is PHE18 -> ASP18. If you want to test the antisymmetric property (\u0394\u0394G_forward mutant = -\u0394\u0394G_reverse mutant) of PSP-GNM, then use the following instance of the `--data_file` to calculate \u0394\u0394G of the forward mutant.\n\n| PDB_CHAIN  | WILD_RES| RES_NUM_PDB | MUTANT_RES | Category |\n| ------------- | ------------- | ------------- | ------------- | ------------- |\n| 1AJ3A  | D | 18 | F | Forward |\n\n\nYou can then calculate the \u0394\u0394G of the reverse mutant using the same PDB file having the following content in the `--data_file`\n\n| PDB_CHAIN  | WILD_RES| RES_NUM_PDB | MUTANT_RES | Category |\n| ------------- | ------------- | ------------- | ------------- | ------------- |\n| 1AJ3A  | F | 18 | D | Reverse |\n\n<br>\n<b> 2. Predicting ddG for reverse mutants using the structure of the forward mutant </b>\nFor PDB ID 1AJ3 and chain A, the wildtype residue at position 18 is ASP. Let us assume a theoretical mutant form of this protein that has PHE at position 18. Let us say you have the PDB structure of the forward mutant i.e, position 18 in your PDB contains PHE. Now to predict \u0394\u0394G for the reverse mutant use the following instance of  `--data_file`.\n\n| PDB_CHAIN  | WILD_RES| RES_NUM_PDB | MUTANT_RES | Category |\n| ------------- | ------------- | ------------- | ------------- | ------------- |\n| 1AJ3A  | F | 18 | D | Reverse |\n\nYou will also need to include the `--rev_mut_pdb` runtime argument while running PSP-GNM.\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/sambitmishra0628/PSP-GNM/master/README.md",
      "technique": "header_analysis"
    }
  ]
}