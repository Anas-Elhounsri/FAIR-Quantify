{
  "code_of_conduct": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nThe m6Anet community values an open approach to science that promotes\n\n- sharing of ideas, code, software and expertise\n- collaboration\n- diversity and inclusivity\n- a kind and welcoming environment\n- community contributions\n\nWe as members, contributors, and leaders of the m6Anet project pledge to make \nparticipation in our community a welcoming, supportive, collegial experience \nfree of harassment, intimidation, and bullying regardless of age, body size, \nvisible or invisible disability, ethnicity, sex characteristics, gender identity \nand expression, level of experience, education, socio-economic status, nationality, \npersonal appearance, race, religion, or sexual identity and orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces of the m6Anet project, \nand also applies when an individual is officially representing the community in \npublic spaces. Examples of representing our community include using an official \ne-mail address, posting via an official social media account, or \nrepresenting the project at an online or offline event.\n\n## Enforcement and Reporting\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leader responsible for enforcement at\nWan_Yuk_Kei@gis.a-star.edu.sg (Yuk Kei Wan).\n\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nand the Bioconductor Code of Conduct version 1.2.0 available at \nhttps://bioconductor.org/about/code-of-conduct/\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n"
      },
      "source": "https://raw.githubusercontent.com/GoekeLab/m6anet/master/CODE_OF_CONDUCT.md",
      "technique": "file_exploration"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/GoekeLab/m6anet"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "## How to contribute to m6Anet\n\n#### **Did you find a bug?**\n\n* **Ensure the bug was not already reported** by searching on GitHub under [Issues](https://github.com/GoekeLab/m6anet/issues).\n\n* If you're unable to find an open issue addressing the problem, [open a new one](https://github.com/GoekeLab/m6anet/issues/new). Be sure to include a **title and clear description**, as much relevant information as possible, and a **code sample** or an **executable test case** demonstrating the expected behavior that is not occurring.\n\n#### **Did you write a patch that fixes a bug?**\n\n* Open a new GitHub pull request with the patch.\n\n* Ensure the PR description clearly describes the problem and solution. Include the relevant issue number if applicable.\n\n* Before submitting, please read the [PEP 8 \u2013 Style Guide for Python Code](https://peps.python.org/pep-0008/) to know more about coding conventions used in m6Anet.\n\n#### **Do you intend to add a new feature or change an existing one?**\n\n* Suggest your change in the [Discussions (ideas)](https://github.com/GoekeLab/m6anet/discussions/categories/ideas)\n\n* Do not open an issue on GitHub until you have collected positive feedback about the change. GitHub issues are primarily intended for bug reports and fixes.\n\n#### **Do you have questions about the source code, publication, or use cases of m6Anet?**\n\n* Ask any question about how to use m6Anet, where to find data sets, or possible extensions in the [Discussions (Q&A)](https://github.com/GoekeLab/m6anet/discussions/categories/q-a).\n\n#### **Have you used m6Anet and was it helpful for your research?**\n\n* Let us and the community know how you used m6Anet! You can post a summary with links to a preprint or manuscript in the [Discussions (show and tell)](https://github.com/GoekeLab/m6anet/discussions/categories/show-and-tell)\n\nThanks! :heart: :heart: :heart:\n\nthe m6Anet team\n\n## Attribution\n\nThese community contribution guidelines are adapted from Ruby on Rails contribution guidelines available at https://github.com/rails/rails/blob/main/CONTRIBUTING.md\n"
      },
      "source": "https://raw.githubusercontent.com/GoekeLab/m6anet/master/CONTRIBUTING.md",
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-07-23T06:09:33Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-12T07:22:26Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Detection of m6A from direct RNA-Seq data"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.957375147339269,
      "result": {
        "original_header": "m6anet",
        "type": "Text_excerpt",
        "value": "m6anet is a python tool that leverages Multiple Instance Learning framework to detect m6a modifications from Nanopore Direct RNA Sequencing data\n \n"
      },
      "source": "https://raw.githubusercontent.com/GoekeLab/m6anet/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9142844129480161,
      "result": {
        "original_header": "m6anet model trained with RNA004 chemistry (development version)",
        "type": "Text_excerpt",
        "value": "\nThe default m6Anet model was trained with the currently available RNA002 direct RNA-Seq kit. Oxford Nanopore is currently providing access to the development version of the next version, RNA004. To make m6A detection possible with RNA004, we now provide an m6Anet model trained on direct RNA\nSeq data from the HEK293T cell line using the development version of RNA004. In order to call m6A on data from the RNA004 kit, the following commands can be used: \n1. <b>Pre-processing/segmentation/dataprep.</b> <br>\n    + Please use f5c with the RNA004 kmer model, as described [here](https://github.com/hasindu2008/f5c/releases/tag/v1.3)\n    +   The kmer model can be downloaded [here](https://raw.githubusercontent.com/hasindu2008/f5c/v1.3/test/rna004-models/rna004.nucleotide.5mer.model) \n2. <b>Inference</b> <br>\nIn order to identify m6A from RNA004 data, the RNA004 model has to be specified:\n    ```\n        m6anet inference --input_dir [INPUT_DIR] --out_dir [OUT_DIR] --pretrained_model HEK293T_RNA004\n    ```\n    The RNA004 model is trained on the development version and only underwent limited evaluation on site-level prediction compared to the RNA002 model. The individual read probability accuracy for RNA004 has not been tested. Please report any feedback to us (https://github.com/GoekeLab/m6anet/discussions) \n"
      },
      "source": "https://raw.githubusercontent.com/GoekeLab/m6anet/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9586681061774224,
      "result": {
        "original_header": "Training and evaluating the RNA004 m6anet",
        "type": "Text_excerpt",
        "value": "\nWe trained m6anet using an RNA004 direct RNA-Seq run of the HEK293T cell line, with m6A positions defined by m6ACE-Seq. We then evaluated the RNA004-based m6anet performance on RNA004 data from the Hek293T and the Hct116 cell line. Here, we used the intersection of all sites identified both in the RNA002 and the RNA004 data to compare the RN004 model (tested on RNA004 data) and the RNA002 model (tested on RNA002 data), using m6ACE-Seq as ground truth (Figure 1-2). The results suggest a comparable performance between the RNA002-trained and the RNA004-trained m6anet. \n\nFigure 1: ROC curve comparing the m6Anet model trained on RNA002 and evaluated on RNA002 data with the model trained on RNA004 and evaluated on RNA004. Only sites that were detected in both data sets are used in this comparison. Here, a MAPQ filter of 20 was applied. \nFigure 2: ROC curve comparing the m6Anet model trained on RNA002 and evaluated on RNA002 data with the model trained on RNA004 and evaluated on RNA004. Only sites that were detected in both data sets are used in this comparison. Here, a MAPQ filter of 0 was applied to the RNA004 data, leading to a higher number of sites which are detected. \n\nWe thank Hasindu Gamaarachchi, Hiruna Samarakoon, James Ferguson, and Ira Deveson from the Garvan Institute of Medical Research in Sydney, Australia for enabling the eventalign of the RNA004 data with f5c. We thank Bing Shao Chia, Wei Leong Chew, Arnaud Perrin, Jay Shin, and Hwee Meng Low from the Genome Institute of Singapore for providing the RNA and generating the direct RNA-Seq data, and we thank Paola Florez De Sessions, Lin Yang, Adrien Leger, Lakmal Jayasinghe, Libby Snell, Etienne Raimondeau, and Oxford Nanopore Technologies for providing early access to RNA004, generating the Hek293T data that was used to train the m6Anet model, and for feedback on the results. The model was trained and implemented by Yuk Kei Wan. \nThe m6Anet functions for preprocessing, inference, and training have now been simplified. We now provide a single entry point for all m6anet functionalities through the m6anet module. This means\nthat all the old functionalities of m6Anet are now available through the m6anet module call, such as ``m6anet dataprep``, ``m6anet inference`` and ``m6anet train`` functions. The command ``m6anet-dataprep``,\n``m6anet-run_inference`` and ``m6anet-train`` are deprecated and will be removed in the next version. Please check our updated [Quickstart](https://m6anet.readthedocs.io/en/latest/quickstart.html) and [Training page](https://m6anet.readthedocs.io/en/latest/training.html) for more details on running m6Anet. \nWe have also made some changes to the m6anet dataprep function. Previously m6anet-dataprep produces data.index and data.readcount files to run inference, and we realized that this can be simplified by combining the two files together. The current m6anet dataprep (and also the deprecated ``m6anet-dataprep``) now produces a single data.info file that combines the information from both data.index and data.readcount. Furthermore, m6anet inference (also the deprecated m6anet-run_inference) now requires data.info file to be present in the input directory. We have also provided a function for users to convert older dataprep output files to the newest format using:\n```\n   m6anet convert --input_dir /path/to/old/dataprep/output --out_dir /path/to/old/dataprep/output\n```\nThis function will create data.info file by combining the old data.index and data.readcount files. The users still need to make sure that data.info file is located in the same folder as data.json file \n\n### Faster and Better Inference Implementation \nIn order to minimize the effect of sequencing depth in m6Anet prediction, a fixed number of reads are sampled from each site during m6Anet training.\nThis process is repeated during inference where the sampling will be repeated several times for each candidate site to stabilize the modification probability.\nThe number of sampling rounds is controlled through the option `--num_iterations` and the default was set to 5 in the previous version of m6Anet to minimize running time. \n\\\nA low number of sampling iterations results in unstable probability value for individual sites and while the overall performance of m6Anet on large datasets remains unaffected, users looking to identify\nand study modifications on individual sites will benefit from a more consistent modification score. In m6Anet 2.0.0, we have improved the inference process so that it can accommodate a higher\nnumber of sampling iterations while still maintaining a relatively fast inference time. Here we include the comparison between the older m6Anet version against the current release in terms of their peak memory usage and running time\nover a different number of sampling rounds on our HEK293T dataset with 95030 sites and 8019824 reads. The calculation is done on AMD EPYC 7R32 with `--num_processes` set to 25. \n\nAs we can see, the latest version of m6Anet has relatively constant peak memory usage with minimal difference in running time between 100 and 1000 iteration runs. To achieve this, m6Anet\nsaves each individual read probability file in `data.indiv_proba.csv` before sampling the required amount of reads for each site in parallel. The site level probability is then\nsaved in `data.site_proba.csv`. \n\n### Rounding of Dataprep Output \nUsers can now add `--compress` flag to `m6anet dataprep` to round the dataprep output features to 3 decimal places. In our experience, this reduces the file size for\ndata.json significantly without compromising model performance. \nThe single-molecule m6A predictions of the Arabidopsis model seem to be comparable with the human model with ROC AUC of 0.89 and PR AUC of 0.90 on the synthetic. We also validate the ability to predict per-molecule\nmodifications of the Arabidopsis model on the human HEK293T METTL3-KO and wild-type samples that were mixed to achieve an expected relative m6A stoichiometry of 0%, 25%, 50%, 75%, and 100% from [xPore](https://www.nature.com/articles/s41587-021-00949-w) on the sites predicted to be modified in wild-type samples $(\\textrm{probability} \\geq 0.7)$. As we can see, from the 1041 shared sites that we inspect across the HEK293T mixtures, the median prediction of the model follows the expected modification ratio. \n# Getting help\nWe appreciate your feedback and questions! You can report any error or suggestion related to m6Anet as an issue on [github](https://github.com/GoekeLab/m6anet/issues). If you have questions related to the manuscript, data, or any general comment or suggestion please use the [Discussions](https://github.com/GoekeLab/m6anet/discussions). \nWe appreciate contributions on bug fixes and potential new features. Please read our [Contribution Guidelines](https://github.com/GoekeLab/m6anet/blob/master/CONTRIBUTING.md) for more information. \nIf you use m6Anet in your research, please cite\n[Christopher Hendra, et al.,Detection of m6A from direct RNA sequencing using a Multiple Instance Learning framework. *Nat Methods* (2022)](https://doi.org/10.1038/s41592-022-01666-1) \nThis package is developed and maintaned by [Christopher Hendra](https://github.com/chrishendra93) and [Jonathan G\u00f6ke](https://github.com/jonathangoeke). If you want to contribute, please leave an issue or submit a pull request. Thank you. \n# License\nm6Anet is licensed under the terms of the MIT license.\n \n"
      },
      "source": "https://raw.githubusercontent.com/GoekeLab/m6anet/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://m6anet.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/GoekeLab/m6anet/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/GoekeLab/m6anet/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 19
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/GoekeLab/m6anet/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "GoekeLab/m6anet"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "m6anet"
      },
      "source": "https://raw.githubusercontent.com/GoekeLab/m6anet/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/GoekeLab/m6anet/master/./docs/source/_images/arabidopsis_hek293t_mixtures.png"
      },
      "source": "https://raw.githubusercontent.com/GoekeLab/m6anet/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/GoekeLab/m6anet/master/./docs/source/_images/RNA004_mapq20_HEK293T.jpg"
      },
      "source": "https://raw.githubusercontent.com/GoekeLab/m6anet/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/GoekeLab/m6anet/master/./docs/source/_images/RNA004_mapq20_Hct116.jpg"
      },
      "source": "https://raw.githubusercontent.com/GoekeLab/m6anet/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/GoekeLab/m6anet/master/./docs/source/_images/RNA004_mapq0_HEK293T.jpg"
      },
      "source": "https://raw.githubusercontent.com/GoekeLab/m6anet/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/GoekeLab/m6anet/master/./docs/source/_images/RNA004_mapq0_Hct116.jpg"
      },
      "source": "https://raw.githubusercontent.com/GoekeLab/m6anet/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "Running m6Anet"
        ],
        "type": "Text_excerpt",
        "value": "m6anet requires [Python version 3.7 or higher](https://www.python.org). To install the latest release with PyPI (recommended) run\n\n```sh\n$ pip install m6anet\n```\n\nOr, one can also install via conda with the following command:\n```sh\n$ conda install m6anet\n```\n\nSee our documentation [here](https://m6anet.readthedocs.io/)!\n"
      },
      "source": "https://raw.githubusercontent.com/GoekeLab/m6anet/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9990315563864993,
      "result": {
        "original_header": "m6anet model trained with RNA004 chemistry (development version)",
        "type": "Text_excerpt",
        "value": "    The output can then be used with m6Anet dataprep (see https://m6anet.readthedocs.io/en/latest/quickstart.html) \n"
      },
      "source": "https://raw.githubusercontent.com/GoekeLab/m6anet/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9652638521663486,
      "result": {
        "original_header": "Training and evaluating the RNA004 m6anet",
        "type": "Text_excerpt",
        "value": "\n## Release Note 2.0.0 \nThis package is developed and maintaned by [Christopher Hendra](https://github.com/chrishendra93) and [Jonathan G\u00f6ke](https://github.com/jonathangoeke). If you want to contribute, please leave an issue or submit a pull request. Thank you. \n"
      },
      "source": "https://raw.githubusercontent.com/GoekeLab/m6anet/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/GoekeLab/m6anet/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021 G\u00f6ke Lab\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/GoekeLab/m6anet/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/GoekeLab/m6anet/master/./figures/m6anet_logo.png"
      },
      "source": "https://raw.githubusercontent.com/GoekeLab/m6anet/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "m6anet"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "GoekeLab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 184598,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/GoekeLab/m6anet/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "chrishendra93",
          "type": "User"
        },
        "date_created": "2023-07-23T09:56:50Z",
        "date_published": "2023-07-23T15:09:10Z",
        "description": "- Add --pretrained model flag for users to specify m6Anet models to be run\r\n- Add m6Anet model trained on RNA004 kit\r\n- Modify README to include installation and quickstart intructions",
        "html_url": "https://github.com/GoekeLab/m6anet/releases/tag/v-2.1.0",
        "name": "v-2.1.0",
        "release_id": 113225024,
        "tag": "v-2.1.0",
        "tarball_url": "https://api.github.com/repos/GoekeLab/m6anet/tarball/v-2.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/GoekeLab/m6anet/releases/113225024",
        "value": "https://api.github.com/repos/GoekeLab/m6anet/releases/113225024",
        "zipball_url": "https://api.github.com/repos/GoekeLab/m6anet/zipball/v-2.1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "chrishendra93",
          "type": "User"
        },
        "date_created": "2023-04-29T13:15:26Z",
        "date_published": "2023-04-29T13:17:07Z",
        "description": "- Relax package requirement for m6anet\r\n- Modify documentation to install using pip from source\r\n- Add pytest-dependency custom mark for dataprep test\r\n\r\n\r\n",
        "html_url": "https://github.com/GoekeLab/m6anet/releases/tag/v-2.0.2",
        "name": "v-2.0.2",
        "release_id": 101374645,
        "tag": "v-2.0.2",
        "tarball_url": "https://api.github.com/repos/GoekeLab/m6anet/tarball/v-2.0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/GoekeLab/m6anet/releases/101374645",
        "value": "https://api.github.com/repos/GoekeLab/m6anet/releases/101374645",
        "zipball_url": "https://api.github.com/repos/GoekeLab/m6anet/zipball/v-2.0.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "chrishendra93",
          "type": "User"
        },
        "date_created": "2023-03-16T14:51:28Z",
        "date_published": "2023-03-16T15:10:27Z",
        "description": "Github action on on publishing v-2.0.0 was run wrongly, resulting in users not being able to install the package from PyPI. This minor release fixes the issue",
        "html_url": "https://github.com/GoekeLab/m6anet/releases/tag/v-2.0.1",
        "name": "v-2.0.1",
        "release_id": 95860382,
        "tag": "v-2.0.1",
        "tarball_url": "https://api.github.com/repos/GoekeLab/m6anet/tarball/v-2.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/GoekeLab/m6anet/releases/95860382",
        "value": "https://api.github.com/repos/GoekeLab/m6anet/releases/95860382",
        "zipball_url": "https://api.github.com/repos/GoekeLab/m6anet/zipball/v-2.0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "chrishendra93",
          "type": "User"
        },
        "date_created": "2023-02-24T09:41:55Z",
        "date_published": "2023-02-24T09:43:32Z",
        "description": "- Single entry point for all m6Anet functionalities such as m6anet dataprep, m6anet inference, and m6anet train\r\n- Faster inference procedure by first saving individual read probability on data.indiv_proba.csv before sampling the required number of reads and averaging the calculated site probabilities\r\n- Dataprep option to round data.json output to 3 decimal places\r\n- Provides m6Anet model trained on Arabidopsis VIRc dataset from `https://elifesciences.org/articles/78808` and the corresponding normalization factors",
        "html_url": "https://github.com/GoekeLab/m6anet/releases/tag/v-2.0.0",
        "name": "v-2.0.0",
        "release_id": 93550511,
        "tag": "v-2.0.0",
        "tarball_url": "https://api.github.com/repos/GoekeLab/m6anet/tarball/v-2.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/GoekeLab/m6anet/releases/93550511",
        "value": "https://api.github.com/repos/GoekeLab/m6anet/releases/93550511",
        "zipball_url": "https://api.github.com/repos/GoekeLab/m6anet/zipball/v-2.0.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "chrishendra93",
          "type": "User"
        },
        "date_created": "2022-11-24T03:07:47Z",
        "date_published": "2022-11-24T03:11:21Z",
        "description": "- Fixed torch version to prevent failed installation when latest version of pytorch is installed in a machine without GPU\r\n- Fixed wrong naming convention with training demo data data.readcount.labelled \r\n- Filter warning messages from pandas for less cluttering \r\n- Fix typo m6anet-run_inference  --infer_mod_rate flag (it is now --infer_mod_rate instead of --infer_mod-rate)",
        "html_url": "https://github.com/GoekeLab/m6anet/releases/tag/v-1.1.1",
        "name": "v-1.1.1",
        "release_id": 84054408,
        "tag": "v-1.1.1",
        "tarball_url": "https://api.github.com/repos/GoekeLab/m6anet/tarball/v-1.1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/GoekeLab/m6anet/releases/84054408",
        "value": "https://api.github.com/repos/GoekeLab/m6anet/releases/84054408",
        "zipball_url": "https://api.github.com/repos/GoekeLab/m6anet/zipball/v-1.1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "chrishendra93",
          "type": "User"
        },
        "date_created": "2022-04-29T04:43:51Z",
        "date_published": "2022-04-29T08:04:19Z",
        "description": "- Output kmer motif on the result file from m6anet-run_inference\r\n- Add an option to automatically filter segments with low number of reads during m6anet-dataprep to reduce output size\r\n- Add new functionality for pooling of reads from multiple replicates during training and inference\r\n- Add new functionality for single molecule stoichiometry prediction\r\n- Update to documentations",
        "html_url": "https://github.com/GoekeLab/m6anet/releases/tag/v-1.1.0",
        "name": "v-1.1.0",
        "release_id": 65653729,
        "tag": "v-1.1.0",
        "tarball_url": "https://api.github.com/repos/GoekeLab/m6anet/tarball/v-1.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/GoekeLab/m6anet/releases/65653729",
        "value": "https://api.github.com/repos/GoekeLab/m6anet/releases/65653729",
        "zipball_url": "https://api.github.com/repos/GoekeLab/m6anet/zipball/v-1.1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "chrishendra93",
          "type": "User"
        },
        "date_created": "2021-09-17T07:05:41Z",
        "date_published": "2021-09-17T07:55:39Z",
        "description": "- Minor bug fix on m6anet-dataprep (previous versions impose more stringent requirements on the number of neighboring positions)\r\n- Removed unused arguments on dataprep and training scripts\r\n- Documentation on m6anet-train command and formats of config files for training ",
        "html_url": "https://github.com/GoekeLab/m6anet/releases/tag/v-1.0.0",
        "name": "Version 1.0",
        "release_id": 49729437,
        "tag": "v-1.0.0",
        "tarball_url": "https://api.github.com/repos/GoekeLab/m6anet/tarball/v-1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/GoekeLab/m6anet/releases/49729437",
        "value": "https://api.github.com/repos/GoekeLab/m6anet/releases/49729437",
        "zipball_url": "https://api.github.com/repos/GoekeLab/m6anet/zipball/v-1.0.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "chrishendra93",
          "type": "User"
        },
        "date_created": "2021-04-23T03:34:58Z",
        "date_published": "2021-04-23T03:36:36Z",
        "description": "- Fix a minor issue with indexing step in dataprep\r\n- Fix typo in version numbers\r\n- Remove unused files\r\n",
        "html_url": "https://github.com/GoekeLab/m6anet/releases/tag/v-0.1.1-pre",
        "name": "Pre-release",
        "release_id": 41879805,
        "tag": "v-0.1.1-pre",
        "tarball_url": "https://api.github.com/repos/GoekeLab/m6anet/tarball/v-0.1.1-pre",
        "type": "Release",
        "url": "https://api.github.com/repos/GoekeLab/m6anet/releases/41879805",
        "value": "https://api.github.com/repos/GoekeLab/m6anet/releases/41879805",
        "zipball_url": "https://api.github.com/repos/GoekeLab/m6anet/zipball/v-0.1.1-pre"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "chrishendra93",
          "type": "User"
        },
        "date_created": "2021-04-16T05:41:07Z",
        "date_published": "2021-04-15T09:45:54Z",
        "description": "A pre-release version of m6anet, it should run well with demo data but several functionalities have yet to be tested\r\n\r\n",
        "html_url": "https://github.com/GoekeLab/m6anet/releases/tag/v-0.1.0-pre",
        "name": "Pre-release",
        "release_id": 41469643,
        "tag": "v-0.1.0-pre",
        "tarball_url": "https://api.github.com/repos/GoekeLab/m6anet/tarball/v-0.1.0-pre",
        "type": "Release",
        "url": "https://api.github.com/repos/GoekeLab/m6anet/releases/41469643",
        "value": "https://api.github.com/repos/GoekeLab/m6anet/releases/41469643",
        "zipball_url": "https://api.github.com/repos/GoekeLab/m6anet/zipball/v-0.1.0-pre"
      },
      "technique": "GitHub_API"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dataprep",
        "parent_header": [
          "Running m6Anet"
        ],
        "type": "Text_excerpt",
        "value": "m6Anet dataprep requires eventalign.txt from ``nanopolish eventalign``:\n```\n    nanopolish eventalign --reads reads.fastq --bam reads.sorted.bam --genome transcript.fa --scale-events --signal-index --summary /path/to/summary.txt  --threads 50 > /path/to/eventalign.txt\n```\nThis function segments raw fast5 signals to each position within the transcriptome, allowing m6Anet to predict modification based on the segmented signals. In order to run eventalign, users will need:\n* ``reads.fastq``: fastq file generated from basecalling the raw .fast5 files\n* ``reads.sorted.bam``: sorted bam file obtained from aligning reads.fastq to the reference transcriptome file\n* ``transcript.fa``: reference transcriptome file\n\nWe have also provided a demo eventalign.txt dataset in the repository under /path/to/m6anet/m6anet/tests/data/eventalign.txt. Please see [Nanopolish](https://github.com/jts/nanopolish) for more information.\n\nAfter running nanopolish eventalign, we need to preprocess the segmented raw signal file using 'm6anet dataprep'::\n```\n    m6anet dataprep --eventalign /path/to/m6anet/m6anet/tests/data/eventalign.txt \\\n                    --out_dir /path/to/output --n_processes 4\n```\n\nThe output files are stored in ``/path/to/output``:\n\n* ``data.json``: json file containing the features to feed into m6Anet model for prediction\n* ``data.log``: Log file containing all the transcripts that have been successfully preprocessed\n* ``data.info``: File containing indexing information of data.json for faster file access and the number of reads for each DRACH positions in eventalign.txt\n* ``eventalign.index``: Index file created during dataprep to allow faster access of Nanopolish eventalign.txt during dataprep\n\n"
      },
      "source": "https://raw.githubusercontent.com/GoekeLab/m6anet/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Inference",
        "parent_header": [
          "Running m6Anet"
        ],
        "type": "Text_excerpt",
        "value": "Once `m6anet dataprep` finishes running, we can run `m6anet inference` on the dataprep output:\n```\n    m6anet inference --input_dir path/to/output --out_dir path/to/output  --n_processes 4 --num_iterations 1000\n```\n\nm6anet inference will run default human model trained on the HCT116 cell line. In order to run Arabidopsis-based model or the HEK293T-RNA004-based model, please supply the `--pretrained_model` argument:\n```\n    ## For the Arabidopsis-based model\n\n    m6anet inference --input_dir path/to/output --out_dir path/to/output  --pretrained_model arabidopsis_RNA002 --n_processes 4 --num_iterations 1000\n\n    ## For the HEK293T-RNA004-based model\n\n    m6anet inference --input_dir path/to/output --out_dir path/to/output  --pretrained_model HEK293T_RNA004 --n_processes 4 --num_iterations 1000\n```\nm6Anet will sample 20 reads from each candidate site and average the probability of modification across several round of sampling according to the --num_iterations parameter.\nThe output file `data.indiv_proba.csv` contains the probability of modification for each read\n\n* ``transcript_id``: The transcript id of the predicted position\n* ``transcript_position``: The transcript position of the predicted position\n* ``read_index``: The read identifier from nanopolish that corresponds to the actual read_id from nanopolish summary.txt\n* ``probability_modified``: The probability that a given read is modified\n\nThe output file `data.site_proba.csv` contains the probability of modification at each individual position for each transcript. The output file will have 6 columns\n\n* ``transcript_id``: The transcript id of the predicted position\n* ``transcript_position``: The transcript position of the predicted position\n* ``n_reads``: The number of reads for that particular position\n* ``probability_modified``: The probability that a given site is modified\n* ``kmer``: The 5-mer motif of a given site\n* ``mod_ratio``: The estimated percentage of reads in a given site that is modified\n\nThe mod_ratio column is calculated by thresholding the ``probability_modified`` from `data.indiv_proba.csv` based on the ``--read_proba_threshold`` parameter during ``m6anet inference`` call,\nwith a default value of 0.033379376 for the default human model HCT116_RNA002 and 0.0032978046219796 for arabidopsis_RNA002 model. We also recommend a threshold of 0.9 to select m6A sites from the ``probability_modified`` column in ``data.site_proba.csv``.\nThe total run time should not exceed 10 minutes on a normal laptop.\n\n\nm6Anet also supports pooling over multiple replicates. To do this, simply input multiple folders containing m6anet-dataprep outputs::\n```\n        m6anet inference --input_dir data_folder_1 data_folder_2 ... --out_dir output_folder --n_processes 4 --num_iterations 1000\n```\n"
      },
      "source": "https://raw.githubusercontent.com/GoekeLab/m6anet/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 09:12:45",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 104
      },
      "technique": "GitHub_API"
    }
  ]
}