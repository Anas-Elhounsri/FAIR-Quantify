{
  "application_domain": [
    {
      "confidence": 55.21,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/KawashimaLab/PyZebraScope_public"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-02-09T21:55:08Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-13T21:17:58Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "This is a public repository for PyZebrascope, an open-source Python software for controlling light-sheet microscopes for zebrafish"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9913530787203516,
      "result": {
        "original_header": "PyZebraScope: an open-source platform for brain-wide neural activity imaging in zebrafish",
        "type": "Text_excerpt",
        "value": "This is a repository for PyZebrascope, an open-source Python platform for brain-wide neural activity imaging in zebrafish. \nLight-sheet microscopy for whole-brain neural activity imaging in zebrafish requires specific features not available in commercially distributed microscopes. Such features include scanning of two orthogonal excitation beams and eye damage prevention. These particular requirements, as well as numerous device parameters required for the experimenter to manipulate, have been the main bottlenecks for disseminating / developing technology and performing daily experiments. We developed PyZebrascope to address these issues. \nPyZebrascope is a high-level interface designed for neural activity imaging experiments based on light-sheet microscopy in zebrafish. It incorporates functionalities from other open-source microscopy projects such as \u03bcManager and additional modules for device control, signal processing, computer vision, and machine learning. \nA list of hardware that we used to develop PyZebrascope is described in detail in our manuscript\nhttps://www.frontiersin.org/articles/10.3389/fcell.2022.875044/full\n \n"
      },
      "source": "https://raw.githubusercontent.com/KawashimaLab/PyZebraScope_public/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9959282033005886,
      "result": {
        "original_header": "Device configuration",
        "type": "Text_excerpt",
        "value": "PyZebrascope supports two laser systems, up to three scanning arms for the front and side illumination of excitation beams, a piezoelectric objective scanner and two sCMOS cameras for multicolor imaging. Below is a configuration with which we tested PyZebrascope. \n"
      },
      "source": "https://raw.githubusercontent.com/KawashimaLab/PyZebraScope_public/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8017499541692149,
      "result": {
        "original_header": "Software interface",
        "type": "Text_excerpt",
        "value": "PyZebrascope has two main tabbed interfaces with a camera view window. Additionally, it has an interface to set a laser exclusion area for eye damage prevention. \n"
      },
      "source": "https://raw.githubusercontent.com/KawashimaLab/PyZebraScope_public/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9765914533347317,
      "result": {
        "original_header": "File writing",
        "type": "Text_excerpt",
        "value": "Image data from cameras are processed like below. Three Qthreads (Reader, Writer, CamView) run in parallel for each camera to support file writing and image previewing. This structure achieves over 800 MB/s writing performances on a fast NVMe drive (Micron 9300) or SSD RAID system while maintaining a stable resource usage of CPU and system memory. \n"
      },
      "source": "https://raw.githubusercontent.com/KawashimaLab/PyZebraScope_public/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9761197307764142,
      "result": {
        "original_header": "Automatic focusing",
        "type": "Text_excerpt",
        "value": "The alignment of the excitation beam to the focus of the detection objective is a time-consuming process for users. We implemented in auto_focusing.py a module for automatically aligning the side laser position to the position of the detection objective lens. It also works for volumetric scans (5-point sampling between the start and the end position) and two excitation arms to fully compensate for the nonlinear relationship between the position of the detection objective positions and analog voltage input to scanning galvanometers. \n"
      },
      "source": "https://raw.githubusercontent.com/KawashimaLab/PyZebraScope_public/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8782882612335997,
      "result": {
        "original_header": "Whole-brain imaging",
        "type": "Text_excerpt",
        "value": "We were able to achieve whole-brain imaging at cellular resolution in a zebrafish performing a motor learning task (kawashima et al., 2016). The imaging volume covers the extremities of the most dorsal part (cerebellum), the most ventral part (hypothalamus), the most rostral part (forebrain), and the most caudal part (hindbrain) at the speed of 1 Hz, 45 planes, 2304 x 1600 pixel resolution. \n"
      },
      "source": "https://raw.githubusercontent.com/KawashimaLab/PyZebraScope_public/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/KawashimaLab/PyZebraScope_public/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/KawashimaLab/PyZebraScope_public/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "KawashimaLab/PyZebraScope_public"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PyZebraScope"
      },
      "source": "https://raw.githubusercontent.com/KawashimaLab/PyZebraScope_public/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://user-images.githubusercontent.com/61713599/153410661-dba6a690-caa8-4bfd-ae97-e86001c326c8.png"
      },
      "source": "https://raw.githubusercontent.com/KawashimaLab/PyZebraScope_public/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://user-images.githubusercontent.com/61713599/162279736-80e5c9c7-3fc6-4e4b-80b3-042a9b5fbaea.png"
      },
      "source": "https://raw.githubusercontent.com/KawashimaLab/PyZebraScope_public/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://user-images.githubusercontent.com/61713599/162588133-11872ee5-a6ba-4180-ba83-0d9f87b90d84.png"
      },
      "source": "https://raw.githubusercontent.com/KawashimaLab/PyZebraScope_public/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://user-images.githubusercontent.com/61713599/162566708-50fa7c9d-6110-41fb-b40b-775a64c4e580.png"
      },
      "source": "https://raw.githubusercontent.com/KawashimaLab/PyZebraScope_public/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://user-images.githubusercontent.com/61713599/162587830-deebf83b-2858-462e-a70e-0be9b199ebd5.png"
      },
      "source": "https://raw.githubusercontent.com/KawashimaLab/PyZebraScope_public/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://user-images.githubusercontent.com/61713599/162566738-d485a29b-5234-4a9e-a7d6-70658dd3e0cf.png"
      },
      "source": "https://raw.githubusercontent.com/KawashimaLab/PyZebraScope_public/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation requirements",
        "parent_header": [
          "PyZebraScope",
          "PyZebraScope: an open-source platform for brain-wide neural activity imaging in zebrafish"
        ],
        "type": "Text_excerpt",
        "value": "PyZebrascope requires the preinstallation of the following hardware drivers and low-level interfaces:\n\n- Hardware drivers from manufacturers for miscellaneous devices, including cameras\n- DAQmx driver from National Instruments (https://www.ni.com/en-il/support/downloads/drivers/download.ni-daqmx.html)\n- \u03bcManager (https://micro-manager.org/) for camera interface\n- CUDA toolkit (https://developer.nvidia.com/cuda-toolkit) for fast autofocusing based on nVidia GPU\n\nThe below Python packages are required to run PyZebrascope:\n\n- Anaconda package (https://anaconda.org/anaconda/python)\n- PyQt5 (https://pypi.org/project/PyQt5/)\n- pyqtgraph (https://www.pyqtgraph.org/)\n- pymmcore (https://github.com/micro-manager/pymmcore, need to match its version with \u03bcManager)\n- ni-daqmx for Python (https://nidaqmx-python.readthedocs.io/)\n- h5py (https://www.h5py.org/)\n- CuPy (https://cupy.dev/, need to match its version with CUDA toolkit)\n\nNote that nVidia GPU board, CUDA toolkit and CuPy are only necessary for speeding up the computation time for the autofocusing feature. We still have CPU-based codes in auto_focusing.py\n\nAs of December 2023, we confirmed its functionality in Windows10 (x64) with Anaconda 2023.09 which include below Python packages\n\n- conda 23.11.0\n- Python 3.11.5\n- numpy 1.26.2\n- spyder 5.4.3\n- PyQt5 5.15.10\n- pyqtgraph 0.13.3\n- nidaqmx 0.9.0\n- h5py 3.9.0\n- pyserial 3.5\n- cupy-cuda12x: 12.3.0 (for CUDA 12)\n\n- micro-manager-2.0.0\n- pymmcore: 10.1.1.70.6\n  (not the latest but is compatible with an available Hamamatsu \u03bcManager API, which requires Device v70 and Module v10)\n\n"
      },
      "source": "https://raw.githubusercontent.com/KawashimaLab/PyZebraScope_public/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/KawashimaLab/PyZebraScope_public/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2022 KawashimaLab\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/KawashimaLab/PyZebraScope_public/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PyZebraScope_public"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "KawashimaLab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 179667,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KawashimaLab/PyZebraScope_public/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://nidaqmx-python.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/KawashimaLab/PyZebraScope_public/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation requirements",
        "parent_header": [
          "PyZebraScope",
          "PyZebraScope: an open-source platform for brain-wide neural activity imaging in zebrafish"
        ],
        "type": "Text_excerpt",
        "value": "PyZebrascope requires the preinstallation of the following hardware drivers and low-level interfaces:\n\n- Hardware drivers from manufacturers for miscellaneous devices, including cameras\n- DAQmx driver from National Instruments (https://www.ni.com/en-il/support/downloads/drivers/download.ni-daqmx.html)\n- \u03bcManager (https://micro-manager.org/) for camera interface\n- CUDA toolkit (https://developer.nvidia.com/cuda-toolkit) for fast autofocusing based on nVidia GPU\n\nThe below Python packages are required to run PyZebrascope:\n\n- Anaconda package (https://anaconda.org/anaconda/python)\n- PyQt5 (https://pypi.org/project/PyQt5/)\n- pyqtgraph (https://www.pyqtgraph.org/)\n- pymmcore (https://github.com/micro-manager/pymmcore, need to match its version with \u03bcManager)\n- ni-daqmx for Python (https://nidaqmx-python.readthedocs.io/)\n- h5py (https://www.h5py.org/)\n- CuPy (https://cupy.dev/, need to match its version with CUDA toolkit)\n\nNote that nVidia GPU board, CUDA toolkit and CuPy are only necessary for speeding up the computation time for the autofocusing feature. We still have CPU-based codes in auto_focusing.py\n\nAs of December 2023, we confirmed its functionality in Windows10 (x64) with Anaconda 2023.09 which include below Python packages\n\n- conda 23.11.0\n- Python 3.11.5\n- numpy 1.26.2\n- spyder 5.4.3\n- PyQt5 5.15.10\n- pyqtgraph 0.13.3\n- nidaqmx 0.9.0\n- h5py 3.9.0\n- pyserial 3.5\n- cupy-cuda12x: 12.3.0 (for CUDA 12)\n\n- micro-manager-2.0.0\n- pymmcore: 10.1.1.70.6\n  (not the latest but is compatible with an available Hamamatsu \u03bcManager API, which requires Device v70 and Module v10)\n\n"
      },
      "source": "https://raw.githubusercontent.com/KawashimaLab/PyZebraScope_public/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 14:20:17",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ]
}