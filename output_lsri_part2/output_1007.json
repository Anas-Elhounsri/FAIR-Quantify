{
  "application_domain": [
    {
      "confidence": 11.83,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citing",
        "parent_header": [
          "Alignstein"
        ],
        "type": "Text_excerpt",
        "value": "> Grzegorz Skoraczy\u0144ski, Anna Gambin, B\u0142a\u017cej Miasojedow, Alignstein: Optimal transport for improved LC-MS retention time alignment, *GigaScience*, Volume 11, 2022, giac101, https://doi.org/10.1093/gigascience/giac101\n"
      },
      "source": "https://raw.githubusercontent.com/grzsko/Alignstein/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/grzsko/Alignstein"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-07-13T22:32:10Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-10-19T07:33:21Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/grzsko/Alignstein/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/grzsko/Alignstein/master/notebooks/CAAP_benchmarking.ipynb"
      },
      "source": "https://raw.githubusercontent.com/grzsko/Alignstein/master/notebooks/CAAP_benchmarking.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/grzsko/Alignstein/master/tutorials/Alignstein_tutorial.ipynb"
      },
      "source": "https://raw.githubusercontent.com/grzsko/Alignstein/master/tutorials/Alignstein_tutorial.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/grzsko/Alignstein/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "grzsko/Alignstein"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Alignstein"
      },
      "source": "https://raw.githubusercontent.com/grzsko/Alignstein/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/grzsko/Alignstein/master/docker/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/grzsko/Alignstein/master/docker/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "Alignstein"
        ],
        "type": "Text_excerpt",
        "value": "2. Install requirements `pip install -r requirements.txt`.\n3. Install Alignstein into your environment: `python setup.py develop`.\n"
      },
      "source": "https://raw.githubusercontent.com/grzsko/Alignstein/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/grzsko/Alignstein/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "\nThe MIT License (MIT)\nCopyright (c) 2021, Grzegorz Skoraczynski\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n"
      },
      "source": "https://raw.githubusercontent.com/grzsko/Alignstein/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Alignstein"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "grzsko"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 48344,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 33759,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 404,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/grzsko/Alignstein/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "description",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier"
  ],
  "somef_provenance": {
    "date": "2024-10-04 12:48:03",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "Alignstein"
        ],
        "type": "Text_excerpt",
        "value": "Moreover, it is possible to use Alignstein from bash.\nTo perform alignment of chromatograms written in files `file1.mzml`, `file2.mzml` (accepted formats: mzData, mzXML, and mzML) run:\n```\n$ align file1.mzml file2.mzml ...\n```\nAs a result the detected features are dumped as well as consenus features consensus.csv file.\n\nMore help under:\n```$ align --help\n\nParse mzml files and perform alignment\n\nUsage: align.py -h\n       align.py [-c SCALING_CONST] [-t MIDS_THRSH] [-m MIDS_UP_BOUND]\n                [-i MONOISO_THRSH] [-w GWD_UP_BOUND] [-p PENALTY] [-s]\n                [-n WORKERS_NUMB] [-o OUT_FILENAME] [-f FEATURE_FILE]...\n                MZML_FILE...\n\nArguments:\n    MZML_FILE      names of files with chromatograms to be aligned\n\nOptions:\n    -f FEATURE_FILE   names of files with detected features in chromatograms,\n                      order of filenames should conform order of input data\n                      files. POSIX compliance requires to every features\n                      filename be preceded by -f. Detected features are dumped\n                      chromatogram directory with additional featureXML\n                      extention.\n    -o OUT_FILENAME   Output consensus filename [default: consensus.out]\n    -c SCALING_CONST  Additional constant by which RT should be scaled.\n                      [default: 1]\n    -t MIDS_THRSH     Distance threshold between centroid in one cluster. Not\n                      applicable when aligning two chromatograms. [default: 1.5]\n    -m MIDS_UP_BOUND  Maximum cetroid distance between which GWD will be computed.\n                      For efficiency reasons should be reasonably small.\n                      [default: 10]\n    -i MONOISO_THRSH  Maximum ppm difference of feature monoisotopic massess for\n                      which GWD will be computed. [default: 20]\n    -w GWD_UP_BOUND   Cost of not transporting a part of signal, aka the\n                      lambda parameter. Can be interpreted as maximal distance\n                      over which signal is transported while computing GWD.\n                      [default: 10]\n    -p PENALTY        penalty for feature not matching. [default: 10]\n    -s                Indicates if as a result only feature indices should be\n                      dumped. Otherwise basic feature data are dumped.\n                      [default: False]\n    -n WORKERS_NUMB   max number of processes used for parallelization. For\n                      multialignment it should not be larger than 16\n                      [default: 16]\n```\n"
      },
      "source": "https://raw.githubusercontent.com/grzsko/Alignstein/master/README.md",
      "technique": "header_analysis"
    }
  ]
}