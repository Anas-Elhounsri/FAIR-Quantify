{
  "application_domain": [
    {
      "confidence": 29.93,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "RefHiC: Reference panel guided topological structure annotation of Hi-C data",
        "type": "Text_excerpt",
        "value": "![RefHiC Model](RefHiC_overview.png \"RefHiC\")\n\n<b>We suggest users run RefHiC on GPU. \nYou can run RefHiC on CPU for TAD/loop annotations, but it is much slower than on GPU. Model training on CPU is <s>almost</s> impossible.</b>\n\nWe also provide examples with data for TAD and loop annotations under **example folder**.\n\nYou can find scripts (i.e. .R and .ipynb scripts) and data to **reproduce our analysis** in the manuscript at \nhttps://zenodo.org/record/7011277 .\n"
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/RefHiC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Known compatibility issues",
        "parent_header": [
          "RefHiC: Reference panel guided topological structure annotation of Hi-C data",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "In RefHiC, we used LARS (torchlars) for contrastive pretraining. However, we find torchlars often introduces many compatibility issues. Thus, we removed LARS from RefHiC. \n\nIf you want to use LARS for model training, please uncomment line 6 and 10 in pretrain.py and install torchlars as follows,\n<pre>pip install torchlars</pre>\nYou can also do contrastive pretraining with Adam, but the performance may be slightly worse than with LARS. You could try to increase pre-train epochs for better accuracy."
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/RefHiC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Initialization (configuration)",
        "parent_header": [
          "RefHiC: Reference panel guided topological structure annotation of Hi-C data"
        ],
        "type": "Text_excerpt",
        "value": "After RefHiC installation, you need to initialize RefHiC. It loads reference panel and trained models into your local space. You can run the following command:\n<pre>\nrefhic config init</pre>\nThen you will be asked to select (1) download the default reference panel or (2) load your own panel. The default one (~3GB) is for hg38 and contains 29 samples. The easiest way to run RefHiC is to load the default panel.\n\nIf you want to use the mouse reference panel (mm10), you need to dowmload it from http://repo.cs.mcgill.ca/PUB/blanchem/RefHiC/mouseRefPanel.zip and deploy it by selecting option (2) load your own panel.\n\n\n<b>Our reference panel and trained models are for data at 5kb resolution only!</b>"
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/RefHiC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Select the right device in RefHiC",
        "parent_header": [
          "RefHiC: Reference panel guided topological structure annotation of Hi-C data"
        ],
        "type": "Text_excerpt",
        "value": "1. Loop and TAD prediction:\n\n    use CPU: please set <i>--cpu True</i>\n    \n    use GPU: please leave <i>--cpu</i> and <i>--gpu</i> as default vaules or set <i>--gpu</i> as the index of the GPU that you want to use.\n2. Training:\n\n    use CPU: Impossible\n    \n    use GPU: please leave <i>--gpu</i> as default vaules or set <i>--gpu</i> as the index of the GPU that you want to use.\n"
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/RefHiC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Loop annotation",
        "parent_header": [
          "RefHiC: Reference panel guided topological structure annotation of Hi-C data"
        ],
        "type": "Text_excerpt",
        "value": "It involves two steps,\n1. Get a list of candidate loops <pre>refhic loop pred</pre> It outputs candidate loops from both the target (i.e. input contact map) and decoy (i.e. permuted target)\n    ### output format\n    It contains tab separated fields as follows:\n    <pre>Chr1    Start1    End1    Chr2    Start2    End2    Score    IF    P2LL    Label</pre>\n    |     Field     |                                  Detail                                 |\n    |:-------------:|:-----------------------------------------------------------------------:|\n    |   Chr1/Chr2   | chromosome names                                                        |\n    | Start1/Start2 | start genomic coordinates                                               |\n    |   End1/End2   | end genomic coordinates (i.e. End1=Start1+resol)                        |\n    |     Score     | RefHiC's loop score [0~1]                                               |\n    |       IF      | Interaction frequency                                                   |\n    |      P2LL     | Peak to lower left ratio [for information only, RefHiC does not use it] |\n    |     Label     | loop candidate is from target/decoy set [will be used in pool]          |\n2. slect loops from loop candidates<pre>refhic loop pool</pre> It outputs loops detected from the target data by FDR control. You may need to increase <i>alpha</i> to 0.1 or higher for very low coverage or low quality Hi-C data to select more loops. Sadlly, it will also produce more false positive annotations.  \n    ### output format\n    Same as above but without the Label field (all loops are from the target)."
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/RefHiC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "TAD annotation",
        "parent_header": [
          "RefHiC: Reference panel guided topological structure annotation of Hi-C data"
        ],
        "type": "Text_excerpt",
        "value": "TAD annotation is simply, you can run <pre>refhic tad pred</pre>\nFor FDR control, you can to increase <i>alpha</i> to 0.1 or higher for very low coverage or low quality Hi-C data to select more TAD boundaries. Sadlly, you will see more false positive annotations."
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/RefHiC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "output format",
        "parent_header": [
          "RefHiC: Reference panel guided topological structure annotation of Hi-C data",
          "TAD annotation"
        ],
        "type": "Text_excerpt",
        "value": "<b>output file 1. Boundary scores:</b>\n\nRefHiC outputs 7 columns tab separated fields (without header) to a file (named user_specific_prefix.bed) for TAD annotation. Each row contains genomic coordinate, boundary scores and 0/1 fields to indicate boundary annotation:\n\n<pre>\nChr    Start    End    LeftScore    LeftBoundary    RightScore    RigihtBoundary\n</pre>\n|            Field            |                        Detail                       |\n|:---------------------------:|:---------------------------------------------------:|\n|             Chr             | chromosome name                                     |\n|            Start            | start genomic coordinate                            |\n|             End             | end genomic coordinate (i.e. End=Start+resol)       |\n|     LeftScore/RightScore    | boundary scores [-1~1]                              |\n| LeftBoundary/RigihtBoundary | boundary annotations [1: boundary, 0: non-boundary] |\n\n<b>output file 2. TAD: </b>\n\na bed file contains TADs (1 TAD per line) "
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/RefHiC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Sanity check",
        "parent_header": [
          "RefHiC: Reference panel guided topological structure annotation of Hi-C data"
        ],
        "type": "Text_excerpt",
        "value": "It is hard to evaluate TAD or loop annotations in the real experiments as we don't have ground truth. You can use the pileup option for a quick check\n<pre>refhic util pileup</pre> \nIt will produce a pileup image for given foci (i.e. predicted loops or TAD boundaries). You can turn on <i>p2ll</i> option to compute P2LL for the averaged contact pairs. It is helpful for loop analysis."
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/RefHiC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1. How to create my own reference panel?",
        "parent_header": [
          "RefHiC: Reference panel guided topological structure annotation of Hi-C data",
          "Advanced usage"
        ],
        "type": "Text_excerpt",
        "value": "Let's assume you already have a group of Hi-C contact maps in .mcool format. If your data is in other format, you can use try cooler (https://cooler.readthedocs.io/) to convert data into .mcool. Alternatively, you can use 4dn pipeline (https://github.com/4dn-dcic/docker-4dn-hic) to process your fastq data.\nTo create your own reference panel, you need to:\n1. Convert all .mcool files to .bcool files (band matrix based cooler format). .bcool is our own format. We discard useless interactions (i.e. contact distance >3MB) to save space:<pre>refhic util cool2bcool [OPTIONS] COOL BCOOL</pre>\n2. create a <b>meta.csv</b> file for your reference panel [header name: sample, file]: <pre>sample,file\nprostate,HIC00001.hg38.mapq_10.1000.bcool\nHuman embryonic kidney,HIC00002.hg38.mapq_10.1000.bcool\n... </pre>\n3. compress all .bcool files and meta.csv into a zip file.\n4. Load reference panel by run, <pre>refhic config init</pre>\nselect (2) load your own panel.\n\nNB: We believe you can still use our trained models with your own reference panel as we used several approaches to train RefHiC to be robust to referenced samples. But, the performance might be worse than with the default panel. You may need to retrain a model with your own reference panel.\n"
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/RefHiC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2. How to train my own model?",
        "parent_header": [
          "RefHiC: Reference panel guided topological structure annotation of Hi-C data",
          "Advanced usage"
        ],
        "type": "Text_excerpt",
        "value": "The core steps are get labelled data and study Hi-C contact maps.\n1. <b> Labelled data:</b> Similar to our manuscript, you have at least two options. (1) Whenever orthogonal data existed (i.e. ChIA-PET, HiCHIP, etc.), use them to get positive cases. For negative cases please refer to our paper. (2) If you don't have high quality orthogonal data, you may get labels by applying conventional tools on the most high quality contact map that you have to get labels. \n2. <b> contact maps: </b> One significant contribution of RefHiC is the introducing of data augmentation by downsampling technique. So you need to downsample your original contact map into a series of downsamplings. You can do it by applying <i>FANC</i> on .mcool or use <i>shuf</i> to shuffle contact pair list and run 4DN pipeline to create .mcool for downsamplings.  \n3. run the following command to create training dataset, you will be asked to provide labels (i.e. foci) and comma separated downsampled .mcool files: <pre>refhic util traindata</pre>  You wiil be aksed to select window size. We found win=21 (i.e. w=10) for loop and win=41 (i.e. w=20) for TAD work well for 5kb data.\n4. train loop model: <pre>refhic loop train</pre> train TAD model <pre>refhic tad train</pre> labelled data (foci) format:<pre>\n      chr1 bin1_start bin1_end chr2 bin2_start bin2_end class_1 <class_2 ...></pre> You could have more than one label for each training case (i.e. TAD has two labels (left,right), loop has one label)\n      "
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/RefHiC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3. How to edit config file?",
        "parent_header": [
          "RefHiC: Reference panel guided topological structure annotation of Hi-C data",
          "Advanced usage"
        ],
        "type": "Text_excerpt",
        "value": "User We don't ask to edit config file manually, but you can still do it if you want: <pre>refhic config edit</pre>\n"
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/RefHiC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4. How to use local reference panel, or models?",
        "parent_header": [
          "RefHiC: Reference panel guided topological structure annotation of Hi-C data",
          "Advanced usage"
        ],
        "type": "Text_excerpt",
        "value": "RefHiC will load reference panel and models from the configuration file by default. But you can still use your own models or reference panel without write them into the configuration file.\nThere are two parameters: (1) --reference for reference panel; (2) --modelState for model. You can specific them when you run <i>pred</i> for loop or TAD annotation. The <i>reference</i> parameter takes a meta.csv as input. (NB: <i>file</i> field should contain absolute path to data)\n"
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/RefHiC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "RefHiC: Reference panel guided topological structure annotation of Hi-C data"
        ],
        "type": "Text_excerpt",
        "value": "If you use RefHiC in your work, please cite our paper:\n\nZhang, Y., Blanchette, M. Reference panel guided topological structure annotation of Hi-C data. Nat Commun 13, 7426 (2022). https://doi.org/10.1038/s41467-022-35231-3\n"
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/RefHiC/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/BlanchetteLab/RefHiC"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact",
        "parent_header": [
          "RefHiC: Reference panel guided topological structure annotation of Hi-C data"
        ],
        "type": "Text_excerpt",
        "value": "A GitHub issue is preferable for all problems related to using RefHiC. \n\nFor other concerns, please email Yanlin Zhang or Mathieu Blanchette (yanlin.zhang2@mail.mcgill.ca, blanchem@cs.mcgill.ca)."
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/RefHiC/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-06-07T18:16:07Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-31T09:57:05Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A reference panel guided topological structure annotation of Hi-C data"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.819018048851672,
      "result": {
        "type": "Text_excerpt",
        "value": "NEW feature:  introduced in RefHiC v1.1. \n"
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/RefHiC/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/BlanchetteLab/RefHiC/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/BlanchetteLab/RefHiC/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BlanchetteLab/RefHiC"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RefHiC: Reference panel guided topological structure annotation of Hi-C data"
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/RefHiC/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BlanchetteLab/RefHiC/main/RefHiC_overview.png"
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/RefHiC/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "RefHiC: Reference panel guided topological structure annotation of Hi-C data",
        "type": "Text_excerpt",
        "value": "![RefHiC Model](RefHiC_overview.png \"RefHiC\")\n\n<b>We suggest users run RefHiC on GPU. \nYou can run RefHiC on CPU for TAD/loop annotations, but it is much slower than on GPU. Model training on CPU is <s>almost</s> impossible.</b>\n\nWe also provide examples with data for TAD and loop annotations under **example folder**.\n\nYou can find scripts (i.e. .R and .ipynb scripts) and data to **reproduce our analysis** in the manuscript at \nhttps://zenodo.org/record/7011277 .\n"
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/RefHiC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "RefHiC: Reference panel guided topological structure annotation of Hi-C data"
        ],
        "type": "Text_excerpt",
        "value": "RefHiC relies on several libraries including pytorch, scipy, etc. \nWe suggest users using conda to create a virtual environment for it (It should also work without using conda, i.e. with pip). You can run the command snippets below to install RefHiC:\n<pre>\ngit clone https://github.com/BlanchetteLab/RefHiC.git\ncd RefHiC\nconda create --name refhic  --file requirements.txt python=3.9\nconda activate refhic\n</pre>\nFollow https://pytorch.org/get-started/locally/ to install pytorch. It might be the following command depending on your cuda version:\n<pre>\npip install torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cu113\n</pre>\nInstall additional library:\n<pre>\npip install torchmetrics\npip install -U git+https://github.com/fadel/pytorch_ema\npip install tensorboard\npip install -U scikit-learn\npip install scipy==1.7.3\n</pre>\nInstall RefHiC:\n<pre>pip install --editable .</pre>\nIf fail, please try `python setup build` and `python setup install` first.\n\nThe installation requires network access to download libraries. Usually, the installation will finish within 5 minutes. The installation time is longer if network access is slow and/or unstable.\n"
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/RefHiC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Known compatibility issues",
        "parent_header": [
          "RefHiC: Reference panel guided topological structure annotation of Hi-C data",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "In RefHiC, we used LARS (torchlars) for contrastive pretraining. However, we find torchlars often introduces many compatibility issues. Thus, we removed LARS from RefHiC. \n\nIf you want to use LARS for model training, please uncomment line 6 and 10 in pretrain.py and install torchlars as follows,\n<pre>pip install torchlars</pre>\nYou can also do contrastive pretraining with Adam, but the performance may be slightly worse than with LARS. You could try to increase pre-train epochs for better accuracy."
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/RefHiC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Initialization (configuration)",
        "parent_header": [
          "RefHiC: Reference panel guided topological structure annotation of Hi-C data"
        ],
        "type": "Text_excerpt",
        "value": "After RefHiC installation, you need to initialize RefHiC. It loads reference panel and trained models into your local space. You can run the following command:\n<pre>\nrefhic config init</pre>\nThen you will be asked to select (1) download the default reference panel or (2) load your own panel. The default one (~3GB) is for hg38 and contains 29 samples. The easiest way to run RefHiC is to load the default panel.\n\nIf you want to use the mouse reference panel (mm10), you need to dowmload it from http://repo.cs.mcgill.ca/PUB/blanchem/RefHiC/mouseRefPanel.zip and deploy it by selecting option (2) load your own panel.\n\n\n<b>Our reference panel and trained models are for data at 5kb resolution only!</b>"
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/RefHiC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Select the right device in RefHiC",
        "parent_header": [
          "RefHiC: Reference panel guided topological structure annotation of Hi-C data"
        ],
        "type": "Text_excerpt",
        "value": "1. Loop and TAD prediction:\n\n    use CPU: please set <i>--cpu True</i>\n    \n    use GPU: please leave <i>--cpu</i> and <i>--gpu</i> as default vaules or set <i>--gpu</i> as the index of the GPU that you want to use.\n2. Training:\n\n    use CPU: Impossible\n    \n    use GPU: please leave <i>--gpu</i> as default vaules or set <i>--gpu</i> as the index of the GPU that you want to use.\n"
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/RefHiC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Loop annotation",
        "parent_header": [
          "RefHiC: Reference panel guided topological structure annotation of Hi-C data"
        ],
        "type": "Text_excerpt",
        "value": "It involves two steps,\n1. Get a list of candidate loops <pre>refhic loop pred</pre> It outputs candidate loops from both the target (i.e. input contact map) and decoy (i.e. permuted target)\n    ### output format\n    It contains tab separated fields as follows:\n    <pre>Chr1    Start1    End1    Chr2    Start2    End2    Score    IF    P2LL    Label</pre>\n    |     Field     |                                  Detail                                 |\n    |:-------------:|:-----------------------------------------------------------------------:|\n    |   Chr1/Chr2   | chromosome names                                                        |\n    | Start1/Start2 | start genomic coordinates                                               |\n    |   End1/End2   | end genomic coordinates (i.e. End1=Start1+resol)                        |\n    |     Score     | RefHiC's loop score [0~1]                                               |\n    |       IF      | Interaction frequency                                                   |\n    |      P2LL     | Peak to lower left ratio [for information only, RefHiC does not use it] |\n    |     Label     | loop candidate is from target/decoy set [will be used in pool]          |\n2. slect loops from loop candidates<pre>refhic loop pool</pre> It outputs loops detected from the target data by FDR control. You may need to increase <i>alpha</i> to 0.1 or higher for very low coverage or low quality Hi-C data to select more loops. Sadlly, it will also produce more false positive annotations.  \n    ### output format\n    Same as above but without the Label field (all loops are from the target)."
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/RefHiC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "TAD annotation",
        "parent_header": [
          "RefHiC: Reference panel guided topological structure annotation of Hi-C data"
        ],
        "type": "Text_excerpt",
        "value": "TAD annotation is simply, you can run <pre>refhic tad pred</pre>\nFor FDR control, you can to increase <i>alpha</i> to 0.1 or higher for very low coverage or low quality Hi-C data to select more TAD boundaries. Sadlly, you will see more false positive annotations."
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/RefHiC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "output format",
        "parent_header": [
          "RefHiC: Reference panel guided topological structure annotation of Hi-C data",
          "TAD annotation"
        ],
        "type": "Text_excerpt",
        "value": "<b>output file 1. Boundary scores:</b>\n\nRefHiC outputs 7 columns tab separated fields (without header) to a file (named user_specific_prefix.bed) for TAD annotation. Each row contains genomic coordinate, boundary scores and 0/1 fields to indicate boundary annotation:\n\n<pre>\nChr    Start    End    LeftScore    LeftBoundary    RightScore    RigihtBoundary\n</pre>\n|            Field            |                        Detail                       |\n|:---------------------------:|:---------------------------------------------------:|\n|             Chr             | chromosome name                                     |\n|            Start            | start genomic coordinate                            |\n|             End             | end genomic coordinate (i.e. End=Start+resol)       |\n|     LeftScore/RightScore    | boundary scores [-1~1]                              |\n| LeftBoundary/RigihtBoundary | boundary annotations [1: boundary, 0: non-boundary] |\n\n<b>output file 2. TAD: </b>\n\na bed file contains TADs (1 TAD per line) "
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/RefHiC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Sanity check",
        "parent_header": [
          "RefHiC: Reference panel guided topological structure annotation of Hi-C data"
        ],
        "type": "Text_excerpt",
        "value": "It is hard to evaluate TAD or loop annotations in the real experiments as we don't have ground truth. You can use the pileup option for a quick check\n<pre>refhic util pileup</pre> \nIt will produce a pileup image for given foci (i.e. predicted loops or TAD boundaries). You can turn on <i>p2ll</i> option to compute P2LL for the averaged contact pairs. It is helpful for loop analysis."
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/RefHiC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2. How to train my own model?",
        "parent_header": [
          "RefHiC: Reference panel guided topological structure annotation of Hi-C data",
          "Advanced usage"
        ],
        "type": "Text_excerpt",
        "value": "The core steps are get labelled data and study Hi-C contact maps.\n1. <b> Labelled data:</b> Similar to our manuscript, you have at least two options. (1) Whenever orthogonal data existed (i.e. ChIA-PET, HiCHIP, etc.), use them to get positive cases. For negative cases please refer to our paper. (2) If you don't have high quality orthogonal data, you may get labels by applying conventional tools on the most high quality contact map that you have to get labels. \n2. <b> contact maps: </b> One significant contribution of RefHiC is the introducing of data augmentation by downsampling technique. So you need to downsample your original contact map into a series of downsamplings. You can do it by applying <i>FANC</i> on .mcool or use <i>shuf</i> to shuffle contact pair list and run 4DN pipeline to create .mcool for downsamplings.  \n3. run the following command to create training dataset, you will be asked to provide labels (i.e. foci) and comma separated downsampled .mcool files: <pre>refhic util traindata</pre>  You wiil be aksed to select window size. We found win=21 (i.e. w=10) for loop and win=41 (i.e. w=20) for TAD work well for 5kb data.\n4. train loop model: <pre>refhic loop train</pre> train TAD model <pre>refhic tad train</pre> labelled data (foci) format:<pre>\n      chr1 bin1_start bin1_end chr2 bin2_start bin2_end class_1 <class_2 ...></pre> You could have more than one label for each training case (i.e. TAD has two labels (left,right), loop has one label)\n      "
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/RefHiC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3. How to edit config file?",
        "parent_header": [
          "RefHiC: Reference panel guided topological structure annotation of Hi-C data",
          "Advanced usage"
        ],
        "type": "Text_excerpt",
        "value": "User We don't ask to edit config file manually, but you can still do it if you want: <pre>refhic config edit</pre>\n"
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/RefHiC/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/BlanchetteLab/RefHiC/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2022 BlanchetteLab\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/RefHiC/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RefHiC"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "BlanchetteLab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 168151,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/BlanchetteLab/RefHiC/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://cooler.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/RefHiC/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "zhyanlin",
          "type": "User"
        },
        "date_created": "2023-01-19T03:40:11Z",
        "date_published": "2023-01-19T03:42:01Z",
        "description": "New feature:\r\nContact map enhancement via Reference panel guided super-resolution inference of Hi-C data (RefHiC-SR)\r\n\r\n",
        "html_url": "https://github.com/BlanchetteLab/RefHiC/releases/tag/v1.1.0",
        "name": "RefHiC v1.1",
        "release_id": 89485691,
        "tag": "v1.1.0",
        "tarball_url": "https://api.github.com/repos/BlanchetteLab/RefHiC/tarball/v1.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/BlanchetteLab/RefHiC/releases/89485691",
        "value": "https://api.github.com/repos/BlanchetteLab/RefHiC/releases/89485691",
        "zipball_url": "https://api.github.com/repos/BlanchetteLab/RefHiC/zipball/v1.1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "BlanchetteLab",
          "type": "User"
        },
        "date_created": "2022-10-03T00:43:40Z",
        "date_published": "2022-11-15T19:05:07Z",
        "description": "This is the version we used to prepare our paper: Reference panel guided topological structure annotation of Hi-C data.",
        "html_url": "https://github.com/BlanchetteLab/RefHiC/releases/tag/v1.0.0",
        "name": "Nature Communications version",
        "release_id": 83162310,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/BlanchetteLab/RefHiC/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/BlanchetteLab/RefHiC/releases/83162310",
        "value": "https://api.github.com/repos/BlanchetteLab/RefHiC/releases/83162310",
        "zipball_url": "https://api.github.com/repos/BlanchetteLab/RefHiC/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "software dependencies",
        "parent_header": [
          "RefHiC: Reference panel guided topological structure annotation of Hi-C data"
        ],
        "type": "Text_excerpt",
        "value": "RefHiC is developed and tested on Linux machines and relies on the following packages:\n<pre>appdirs==1.4.4\nclick==8.0.1\ncooler==0.8.11\neinops\nh5py\nimportlib_resources>=5.4.0\nmatplotlib\nnumpy\npandas\nrequests\nsetuptools\ntqdm</pre>"
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/RefHiC/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 11:07:28",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 9
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "2. How to train my own model?",
        "parent_header": [
          "RefHiC: Reference panel guided topological structure annotation of Hi-C data",
          "Advanced usage"
        ],
        "type": "Text_excerpt",
        "value": "The core steps are get labelled data and study Hi-C contact maps.\n1. <b> Labelled data:</b> Similar to our manuscript, you have at least two options. (1) Whenever orthogonal data existed (i.e. ChIA-PET, HiCHIP, etc.), use them to get positive cases. For negative cases please refer to our paper. (2) If you don't have high quality orthogonal data, you may get labels by applying conventional tools on the most high quality contact map that you have to get labels. \n2. <b> contact maps: </b> One significant contribution of RefHiC is the introducing of data augmentation by downsampling technique. So you need to downsample your original contact map into a series of downsamplings. You can do it by applying <i>FANC</i> on .mcool or use <i>shuf</i> to shuffle contact pair list and run 4DN pipeline to create .mcool for downsamplings.  \n3. run the following command to create training dataset, you will be asked to provide labels (i.e. foci) and comma separated downsampled .mcool files: <pre>refhic util traindata</pre>  You wiil be aksed to select window size. We found win=21 (i.e. w=10) for loop and win=41 (i.e. w=20) for TAD work well for 5kb data.\n4. train loop model: <pre>refhic loop train</pre> train TAD model <pre>refhic tad train</pre> labelled data (foci) format:<pre>\n      chr1 bin1_start bin1_end chr2 bin2_start bin2_end class_1 <class_2 ...></pre> You could have more than one label for each training case (i.e. TAD has two labels (left,right), loop has one label)\n      "
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/RefHiC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3. How to edit config file?",
        "parent_header": [
          "RefHiC: Reference panel guided topological structure annotation of Hi-C data",
          "Advanced usage"
        ],
        "type": "Text_excerpt",
        "value": "User We don't ask to edit config file manually, but you can still do it if you want: <pre>refhic config edit</pre>\n"
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/RefHiC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4. How to use local reference panel, or models?",
        "parent_header": [
          "RefHiC: Reference panel guided topological structure annotation of Hi-C data",
          "Advanced usage"
        ],
        "type": "Text_excerpt",
        "value": "RefHiC will load reference panel and models from the configuration file by default. But you can still use your own models or reference panel without write them into the configuration file.\nThere are two parameters: (1) --reference for reference panel; (2) --modelState for model. You can specific them when you run <i>pred</i> for loop or TAD annotation. The <i>reference</i> parameter takes a meta.csv as input. (NB: <i>file</i> field should contain absolute path to data)\n"
      },
      "source": "https://raw.githubusercontent.com/BlanchetteLab/RefHiC/main/README.md",
      "technique": "header_analysis"
    }
  ]
}