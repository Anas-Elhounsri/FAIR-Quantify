{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Cite this article",
        "parent_header": [
          "LncDC"
        ],
        "type": "Text_excerpt",
        "value": "Li, M., Liang, C. LncDC: a machine learning-based tool for long non-coding RNA detection from RNA-Seq data. Sci Rep 12, 19083 (2022). https://doi.org/10.1038/s41598-022-22082-7\n"
      },
      "source": "https://raw.githubusercontent.com/lim74/LncDC/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/lim74/LncDC"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact",
        "parent_header": [
          "LncDC"
        ],
        "type": "Text_excerpt",
        "value": "lim74@miamioh.edu\n"
      },
      "source": "https://raw.githubusercontent.com/lim74/LncDC/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-07-31T21:51:15Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-03T03:39:33Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "LncDC: a machine-learning based tool for long non-coding RNA detection from RNA-Seq data"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9183933794964754,
      "result": {
        "original_header": "LncDC",
        "type": "Text_excerpt",
        "value": "LncDC: a machine learning based tool for long non-coding RNA detection from RNA-Seq data.\n \n"
      },
      "source": "https://raw.githubusercontent.com/lim74/LncDC/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/lim74/LncDC/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/lim74/LncDC/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "lim74/LncDC"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "LncDC"
      },
      "source": "https://raw.githubusercontent.com/lim74/LncDC/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "LncDC"
        ],
        "type": "Text_excerpt",
        "value": "1. Download the source code from https://github.com/lim74/LncDC\n\n2. Unzip the package\n```\nunzip LncDC-master.zip\n```\n\n3. Go to LncDC-master directory\n```\ncd LncDC-master\n```\n\n4. Install LncDC\n```\npython setup.py install\n```\nIf you want to install the required side packages in a certain conda environment, make sure the environment is activated. \n"
      },
      "source": "https://raw.githubusercontent.com/lim74/LncDC/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9906865216649976,
      "result": {
        "original_header": "Conda environment",
        "type": "Text_excerpt",
        "value": "1. Download and install Anaconda.\nhttps://docs.anaconda.com/anaconda/install/ \n2. Create an environment \n```\nconda create -n lncdc python=3.9     \n```\nHere, 'lncdc' is the name of the conda environment, which can be replaced by any names. \n3. Activate the environment (before we run LncDC)\n```\nconda activate lncdc\n``` \n4. Install ViennaRNA for secondary structure features extraction (Optional) \nYou can install the package by CONDA\n```\nconda install -c bioconda viennarna\n```\nOr you can install it from the official ViennaRNA website: https://www.tbi.univie.ac.at/RNA/ \nTo confirm that ViennaRNA is properly installed, you can test it by:\n```\npython\n>>> import RNA\n```\nViennaRNA is successfully installed if there are no error messages poped up.\n \n"
      },
      "source": "https://raw.githubusercontent.com/lim74/LncDC/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.808940144778939,
      "result": {
        "original_header": "Requisite check",
        "type": "Text_excerpt",
        "value": "```\npython test_requirements.py\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/lim74/LncDC/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.9169068710902528,
      "result": {
        "original_header": "Requisite check",
        "type": "Text_excerpt",
        "value": "```\npython test_requirements.py\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/lim74/LncDC/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/lim74/LncDC/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bioinformatics, lncrna, machine-learning, prediction, rna-seq, sequencing"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 lim74\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/lim74/LncDC/master/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "LncDC"
        ],
        "type": "Text_excerpt",
        "value": "This project is licensed under the MIT License. \nCopyright (c) 2020 lim74\n"
      },
      "source": "https://raw.githubusercontent.com/lim74/LncDC/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "LncDC"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "lim74"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 117395,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lim74/LncDC/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "lim74",
          "type": "User"
        },
        "date_created": "2024-05-23T03:17:52Z",
        "date_published": "2024-05-23T03:27:54Z",
        "description": "update dependency requisite to solve compatible issues.",
        "html_url": "https://github.com/lim74/LncDC/releases/tag/v1.3.6",
        "name": "version 1.3.6",
        "release_id": 157028529,
        "tag": "v1.3.6",
        "tarball_url": "https://api.github.com/repos/lim74/LncDC/tarball/v1.3.6",
        "type": "Release",
        "url": "https://api.github.com/repos/lim74/LncDC/releases/157028529",
        "value": "https://api.github.com/repos/lim74/LncDC/releases/157028529",
        "zipball_url": "https://api.github.com/repos/lim74/LncDC/zipball/v1.3.6"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "lim74",
          "type": "User"
        },
        "date_created": "2023-03-20T20:20:26Z",
        "date_published": "2023-03-20T20:30:49Z",
        "description": "1. update README.md file with descriptions regarding model training for non-model organisms.\r\n2. add a constraint of sequence length allowed for lncRNA prediction with secondary structure features because RNAfold can't predict secondary structure for a very long sequence.  ",
        "html_url": "https://github.com/lim74/LncDC/releases/tag/v1.3.5",
        "name": "version 1.3.5",
        "release_id": 96263631,
        "tag": "v1.3.5",
        "tarball_url": "https://api.github.com/repos/lim74/LncDC/tarball/v1.3.5",
        "type": "Release",
        "url": "https://api.github.com/repos/lim74/LncDC/releases/96263631",
        "value": "https://api.github.com/repos/lim74/LncDC/releases/96263631",
        "zipball_url": "https://api.github.com/repos/lim74/LncDC/zipball/v1.3.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "lim74",
          "type": "User"
        },
        "date_created": "2022-11-11T18:08:11Z",
        "date_published": "2022-11-11T18:41:40Z",
        "description": "1. Update the requirement of scikit-learn and xgboost to the latest version.\r\n2. Update the default model to allow it to work with the latest scikit-learn and xgboost module. ",
        "html_url": "https://github.com/lim74/LncDC/releases/tag/v1.3.4",
        "name": "version 1.3.4",
        "release_id": 82835872,
        "tag": "v1.3.4",
        "tarball_url": "https://api.github.com/repos/lim74/LncDC/tarball/v1.3.4",
        "type": "Release",
        "url": "https://api.github.com/repos/lim74/LncDC/releases/82835872",
        "value": "https://api.github.com/repos/lim74/LncDC/releases/82835872",
        "zipball_url": "https://api.github.com/repos/lim74/LncDC/zipball/v1.3.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "lim74",
          "type": "User"
        },
        "date_created": "2022-07-11T19:26:01Z",
        "date_published": "2022-07-11T19:33:52Z",
        "description": "1. update library requirement for scikit-learn\r\n2. add examples for FASTA format",
        "html_url": "https://github.com/lim74/LncDC/releases/tag/v1.3.3",
        "name": "version 1.3.3",
        "release_id": 71738966,
        "tag": "v1.3.3",
        "tarball_url": "https://api.github.com/repos/lim74/LncDC/tarball/v1.3.3",
        "type": "Release",
        "url": "https://api.github.com/repos/lim74/LncDC/releases/71738966",
        "value": "https://api.github.com/repos/lim74/LncDC/releases/71738966",
        "zipball_url": "https://api.github.com/repos/lim74/LncDC/zipball/v1.3.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "lim74",
          "type": "User"
        },
        "date_created": "2022-06-28T00:54:47Z",
        "date_published": "2022-06-28T23:54:04Z",
        "description": "Update instructions for ViennaRNA installation",
        "html_url": "https://github.com/lim74/LncDC/releases/tag/v1.3.2",
        "name": "version 1.3.2",
        "release_id": 70812502,
        "tag": "v1.3.2",
        "tarball_url": "https://api.github.com/repos/lim74/LncDC/tarball/v1.3.2",
        "type": "Release",
        "url": "https://api.github.com/repos/lim74/LncDC/releases/70812502",
        "value": "https://api.github.com/repos/lim74/LncDC/releases/70812502",
        "zipball_url": "https://api.github.com/repos/lim74/LncDC/zipball/v1.3.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "lim74",
          "type": "User"
        },
        "date_created": "2022-06-15T07:06:19Z",
        "date_published": "2022-06-15T07:17:24Z",
        "description": "1. update the version of required side packages.\r\n2. update the default models\r\n3. fix some bugs caused by newer version of side packages. ",
        "html_url": "https://github.com/lim74/LncDC/releases/tag/v1.3.1",
        "name": "version 1.3.1",
        "release_id": 69488895,
        "tag": "v1.3.1",
        "tarball_url": "https://api.github.com/repos/lim74/LncDC/tarball/v1.3.1",
        "type": "Release",
        "url": "https://api.github.com/repos/lim74/LncDC/releases/69488895",
        "value": "https://api.github.com/repos/lim74/LncDC/releases/69488895",
        "zipball_url": "https://api.github.com/repos/lim74/LncDC/zipball/v1.3.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Pre-requisite",
        "parent_header": [
          "LncDC"
        ],
        "type": "Text_excerpt",
        "value": "python 3 >= 3.9; pandas == 1.5; numpy == 1.23; scikit-learn == 1.1.3; xgboost == 1.7.1; imbalanced-learn == 0.9.1; biopython >= 1.79; tqdm >= 4.64\n\nViennaRNA (Optional, only required when using secondary structure features for prediction) \nCan be installed by:\n1) CONDA: conda install -c bioconda viennarna \n2) Or install from the official ViennaRNA website: https://www.tbi.univie.ac.at/RNA/\n"
      },
      "source": "https://raw.githubusercontent.com/lim74/LncDC/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 11:22:30",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How to conduct a prediction",
        "parent_header": [
          "LncDC",
          "Usage and Examples"
        ],
        "type": "Text_excerpt",
        "value": "```\npython lncDC.py -i input.fa -o output -x hexamer_table.csv -m model.pkl -p imputer.pkl -s scaler.pkl -r -k ss_table -t number_of_threads\n```\n    -i The inputfile with RNA sequences in fasta format. The fasta file could be regular text file or gzip compressed file (*.gz).\n    -o The output file that will contain the prediction results in csv format. Long noncoding RNAs are labeled as 'lncrna', and message RNAs are labeled as 'mrna'. Default: lncdc.output.csv\n    -x (Optional) Prebuilt hexamer table in csv format. Run lncDC-train.py to obtain the hexamer table of your own training data. Default: train_hexamer_table.csv\n    -m (Optional) Prebuilt training model. Run lncDC-train.py to obtain the model trained from your own training data. Default: XGB_model_SIF_PF.pkl\n    -p (Optional) Prebuilt imputer from training data. Run lncDC-train.py to obtain the imputer from your own training data. Default: imputer_SIF_PF.pkl\n    -s (Optional) Prebuilt scaler from training data. Run lncDC-train.py to obtain the imputer from your own training data. Default: scaler_SIF_PF.pkl\n    -r (Optional) Turn on to predict with secondary structure features. Default: turned off.\n    -k (Optional) Prefix of the sequence and secondary structure kmer tables. Need to specify -r first. For example, the prefix of secondary structure kmer table file 'mouse_ss_table_k1.csv' is 'mouse_ss_table'. Run lncDC-train.py to obtain the tables from your own training data. Default: train_ss_table\n    -t (Optional) The number of threads assigned to use. Set -1 to use all cpus. Default value: -1."
      },
      "source": "https://raw.githubusercontent.com/lim74/LncDC/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Examples for prediction",
        "parent_header": [
          "LncDC",
          "Usage and Examples"
        ],
        "type": "Text_excerpt",
        "value": "1. Predict with the default model (human).\n```\ncd LncDC-master/\npython bin/lncDC.py -i test/human_test_toy.fasta -o lncdc_human.csv -t 8\n```\nHere, the human_test_toy.fasta file includes human RNA sequences in fasta format. The prediction results will be stored in the file lncdc_human.csv. 8 threads are used for this prediction.\n\n2. Predict by the default human model with secondary structure features. This may take a longer time because secondary structure calculation by RNAfold (The main program of ViennaRNA) is time-consuming.\n```\ncd LncDC-master/\npython bin/lncDC.py -i test/mouse_test_toy.fasta -o lncdc_mouse.csv -r -t 8\n```\nHere, the mouse_test_toy.fasta file includes mouse RNA sequences in fasta format. The prediction results will be stored in the file lncdc_mouse.csv. -r is specified so the program will perform prediction with secondary structure features added. 8 threads are used for this prediction.  \n\n3. Predict with the self-trained model (without secondary structure features).\n```\ncd LncDC-master/\npython bin/lncDC.py -i test/mouse_test_toy.fasta -o lncdc_mouse.csv -x data/train_hexamer_table.csv -m data/XGB_model_SIF_PF.pkl -p data/imputer_SIF_PF.pkl -s data/scaler_SIF_PF.pkl -t 8\n```\nThe input file in this prediction is mouse_test_toy.fasta, which contains mouse RNA sequences in fasta format. The output file is lncdc_mouse.csv. The parameter '-x' is applied, and the hexamer table train_hexamer_table.csv is provided. '-m' is used, follewed by the self-trained model XGB_model_SIF_PF.pkl. The self-trained model only used sequence intrinsic and protein features in this case. The imputer file imputer_SIF_PF.pkl and the sclar file scaler_SIF_PF.pkl are provided with parameter '-p' and '-s', respectively.  8 threads are used for the prediction.\n\n4. Predict with the self-trained model (with secondary structure features).\n```\ncd LncDC-master/\npython bin/lncDC.py -i test/mouse_test_toy.fasta -o lncdc_ss_mouse.csv -x data/train_hexamer_table.csv -m data/XGB_model_SIF_PF_SSF.pkl -p data/imputer_SIF_PF_SSF.pkl -s data/scaler_SIF_PF_SSF.pkl -r -k data/train_ss_table -t 8\n```\nThe input file is mouse_test_toy.fasta and the output file is lncdc_ss_mouse.csv. In addition to the parameters requried for the prediction without using secondary structure based features, '-r' and '-k' are requried for prediction with secondary structure features. The '-r' parameter will turn on the prediction with secondary structure features, and the '-k' parameter will provide the prefix of the requried train_ss_table(s). For example, the prefix of secondary structure kmer table file 'mouse_ss_table_k1.csv' is 'mouse_ss_table'. The '-t' parameter indicates that the program will use 8 threads for prediction. \n"
      },
      "source": "https://raw.githubusercontent.com/lim74/LncDC/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "How to train a model with my own data",
        "parent_header": [
          "LncDC",
          "Usage and Examples"
        ],
        "type": "Text_excerpt",
        "value": "```\npython lncDC-train.py -m mrna.fa -c cds.fa -l lncrna.fa -o output -t number_of_threads -r\n```\n    -m The file with mRNA sequences in fasta format. The fasta file could be regular text file or gzip compressed file (*.gz). \n    -c The CDS sequences of the mRNAs in fasta format. The fasta file could be regular text file or gzip compressed file (*.gz). The order and number of the CDS sequences should be the same as the mRNA sequences.\n    -l The file with lncRNA sequences in fasta format. The fasta file could be regular text file or gzip compressed file (*.gz).\n    -o The prefix of the output files, including a hexamer table, a prediction model, an imputer and a scaler. If the '-r' parameter turned on, the output files will also include secondary structure kmer tables.\n    -t (Optional) The number of threads assigned to use. Set -1 to use all cpus. Default value: -1.\n    -r (Optional) Turn on to train a model with secondary structure features. This will generate secondary structure kmer tables. Default: turned off.\n\nFASTA format example:\n```\n>id or name for transcript 1\nAGGGCCAACGAACGCAACACAGGGACATGGGGGACAGAGAGGAATGTCTCTCTACCCCCCAACC\nCCCCATGTCTGTGGTGAAGTCGATCGAATTAGTGCTGCCCGAGGATAGAATCTACCTGGGGACC\nCCATACTGGCTCCAGCATAAAGGGCAGGTGATCTTAACCCTGAACA\n>id or name for transcript 2\nAACAGCACCCTGGTGGACCCCATAAGGGCCAACGAACCGGGAATTCCCCCCAACCCCCCATGTC\nCGAATTAGTGCTGCCCGAGGATAGAATCTACCTGGCTGGCTCCAGCATAAAGGGCAGGTGATCT\nAAGAATTGCAACAAC\n```\n\nNOTE:\nSuppose you use LncDC to predict lncRNAs from non-model organisms and don't have enough well-annotated lncRNAs for model training. In that case, you could train a model with the data from evolutionary closed model organisms, such as Zebrafish, Yeast, Soybean, *Drosophila melanogaster*, *Caenorhabditis elegans*, *Arabidopsis thaliana*, *Oryza sativa*, and etc.\n"
      },
      "source": "https://raw.githubusercontent.com/lim74/LncDC/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Examples for training models",
        "parent_header": [
          "LncDC",
          "Usage and Examples"
        ],
        "type": "Text_excerpt",
        "value": "1. Train a model (No secondary structure features) using mouse data\n```\ncd LncDC-master/\npython bin/lncDC-train.py -m mrna_mouse.fasta -c cds_mouse.fasta -l lncrna_mouse.fasta -o self_mouse -t 8\n```\nTo train a model with mouse data, we need to provide the mRNA and lncRNA sequences, respectively. The mRNA sequences are stored in the mrna_mouse.fasta file, and their corresponding CDS sequences are stored in the cds_mouse.fasta file. The lncrna_mouse.fasta file includes the long noncoding RNA sequences. 'self_mouse' is the prefix of the output files, which include four files: self_mouse_hexamer_table.csv, self_mouse_xgb_model_SIF_PF.pkl, self_mouse_imputer_SIF_PF.pkl and self_mouse_scaler_SIF_PF.pkl. We set '-t' to 8 so that there are 8 threads will be used for the model training. \n\n2. Train a model (with secondary structure features) using mouse data. This may take a longer time because secondary structure calculation by RNAfold (The main program of ViennaRNA) is time-consuming.\n```\ncd LncDC-master/\npython bin/lncDC-train.py -m mrna_mouse.fasta -c cds_mouse.fasta -l lncrna_mouse.fasta -o SS_mouse -r -t 8\n```\nTo train a model with secondary structure features, we only need to add the '-r' parameter. In addition to the outputs with a prefix 'SS_mouse' that are similar to the first example, five ss tables will also be generated, including SS_mouse_ss_table_k1.csv, SS_mouse_ss_table_k2.csv, SS_mouse_ss_table_k3.csv, SS_mouse_ss_table_k4.csv and SS_mouse_ss_table_k5.csv.\n"
      },
      "source": "https://raw.githubusercontent.com/lim74/LncDC/master/README.md",
      "technique": "header_analysis"
    }
  ]
}