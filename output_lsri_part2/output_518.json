{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Zhangxf-ccnu/EnDecon"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-11-30T06:49:59Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-06-03T13:11:08Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9468424229624898,
      "result": {
        "original_header": "Recommendation for the selection of base deconvolution methods",
        "type": "Text_excerpt",
        "value": "\r\n![alt\r\ntext](https://github.com/keyalone/EnDecon/blob/master/docs/Figure4.png?raw=true)\r\n![alt\r\ntext](https://github.com/keyalone/EnDecon/blob/master/docs/Figure2.png?raw=true)\r\nFor a computational method, the accuracy is important, but the running time also needs to be considered. Therefore, we also report the computational time required for the deconvolution methods. To obtain the running time, we run the deconvolution methods on a workstation with Intel core i7-10700 CPU (2.90GHz*16), 64 RAM and RTX 3080 GPU. The first figure presents the running times of the 14 individual methods as well as our ensemble process on the six datasets across the three scenarios in the simulation experiments. Cell2location, DestVI, DWLS and Stereoscope require more time than other methods. Note that after running the individual deconvolution methods, EnDecon can integrate the results from individual methods in a short time. In addition, we also provide an overview of the deconvolution methods in terms of PCC, 1-RMSE, 1-JSD and running time on all simulated datasets (the second figure) for the users to select appropriate individual deconvolution methods for integration.\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/Zhangxf-ccnu/EnDecon/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Zhangxf-ccnu/EnDecon/tree/master/docs"
      },
      "technique": "file_exploration"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Zhangxf-ccnu/EnDecon/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Zhangxf-ccnu/EnDecon/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Zhangxf-ccnu/EnDecon"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "EnDecon"
      },
      "source": "https://raw.githubusercontent.com/Zhangxf-ccnu/EnDecon/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/keyalone/EnDecon/master/docs/Figure1.png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/Zhangxf-ccnu/EnDecon/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/keyalone/EnDecon/master/docs/Figure4.png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/Zhangxf-ccnu/EnDecon/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/keyalone/EnDecon/master/docs/Figure2.png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/Zhangxf-ccnu/EnDecon/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Install individual dependencies",
        "parent_header": [
          "EnDecon"
        ],
        "type": "Text_excerpt",
        "value": "* **Install python dependencies**\r\n ``` buildoutcfg\r\n ### construct EnDecon python environment with pytorch GPU version \r\n conda env create -f requirments_EnDecon_GPU.yml\r\n ### construct EnDecon python environment with pytorch CPU version\r\n conda env create -f requirments_EnDecon_CPU.yml\r\n```\r\nIf you want to run the DWLS, SpatialDWLS, Stereoscope and cell2location for the ensemble learning, we advise that the user should install [anaconda]( https://www.anaconda.com/) and run the upper command on the terminal (ubuntu)/CMD (windows) to install the python dependencies for running the methods. In our application, due to the computer with RTX3080 GPU, we install the [pytorch with cudatookit]( https://pytorch.org/). If you don\u2019t want to use the *.yml provided. You can install the python dependencies by the following code.\r\n```buildoutcfg\r\n pip install scvi-tools\r\n pip install cell2location\r\n pip install scanpy\r\n pip install anadata\r\n pip install igraph\r\n pip install networkx\r\n pip install leidenalg\r\n pip install community\r\n pip install smfishHmrf\r\n pip install scikit-learn\r\n# install pytorch with CPU or GPU version\r\n```\r\nAfter install the python dependencies, the user need to get the path of environment of conda and set the path to the python_env variable in the function of EnDecon_individual_methods in our package. The path is similar to \"\\~/.conda/envs/EnDecon\\_env/bin/python\" on the ubuntu and \"\\~/anaconda3/envs/EnDecon\\_env/python.ext\" on Windows.\r\n* **Install R dependencies**\r\n\r\nSCDC\r\n```buildoutcfg\r\ninstall.packages(\"remotes\")\r\nremotes::install_github(\"renozao/xbioc\")\r\ninstall.packages(\"devtools\")\r\ndevtools::install_github(\"meichendong/SCDC\")\r\n```\r\nRCTD\r\n```buildoutcfg\r\ndevtools::install_github(\"dmcable/spacexr\", build_vignettes = FALSE)\r\n```\r\nMuSiC\r\n```buildoutcfg\r\ndevtools::install_github('xuranw/MuSiC')\r\n```\r\nDeconRNASeq\r\n```buildoutcfg\r\nif (!require(\"BiocManager\", quietly = TRUE))\r\n  install.packages(\"BiocManager\")\r\nBiocManager::install(\"DeconRNASeq\")\r\n```\r\nDWLS\r\n```buildoutcfg\r\nremotes::install_github(\"sistia01/DWLS\")\r\n```\r\nSeurat\r\n```buildoutcfg\r\ninstall.packages(\"Seurat\")\r\n```\r\nSPOTlight (Version 0.1.7)\r\n```buildoutcfg\r\ndevtools::install_github(\"https://github.com/MarcElosua/SPOTlight/tree/spotlight-0.1.7\")\r\n```\r\nGiotto\r\n```buildoutcfg\r\ndevtools::install_github('RubD/Giotto')\r\n```\r\nspatstat.geom\r\n```buildoutcfg\r\ninstall.packages(\"spatstat.geom\")\r\n```\r\nCARD\r\n```buildoutcfg\r\ndevtools::install_github('YingMa0107/CARD')\r\n```\r\nSTdeconvolve\r\n```buildoutcfg\r\nrequire(remotes)\r\nremotes::install_github('JEFworks-Lab/STdeconvolve')\r\n```\r\nparallel and doParallel\r\n```buildoutcfg\r\ninstall.packages(\"parallel\")\r\ninstall.packages(\"doParallel\")\r\n```\r\nreticulate\r\n```buildoutcfg\r\ninstall.packages('reticulate')\r\n```\r"
      },
      "source": "https://raw.githubusercontent.com/Zhangxf-ccnu/EnDecon/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Zhangxf-ccnu/EnDecon/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "EnDecon"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "Zhangxf-ccnu"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 103551,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Zhangxf-ccnu/EnDecon/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Install individual dependencies",
        "parent_header": [
          "EnDecon"
        ],
        "type": "Text_excerpt",
        "value": "* **Install python dependencies**\r\n ``` buildoutcfg\r\n ### construct EnDecon python environment with pytorch GPU version \r\n conda env create -f requirments_EnDecon_GPU.yml\r\n ### construct EnDecon python environment with pytorch CPU version\r\n conda env create -f requirments_EnDecon_CPU.yml\r\n```\r\nIf you want to run the DWLS, SpatialDWLS, Stereoscope and cell2location for the ensemble learning, we advise that the user should install [anaconda]( https://www.anaconda.com/) and run the upper command on the terminal (ubuntu)/CMD (windows) to install the python dependencies for running the methods. In our application, due to the computer with RTX3080 GPU, we install the [pytorch with cudatookit]( https://pytorch.org/). If you don\u2019t want to use the *.yml provided. You can install the python dependencies by the following code.\r\n```buildoutcfg\r\n pip install scvi-tools\r\n pip install cell2location\r\n pip install scanpy\r\n pip install anadata\r\n pip install igraph\r\n pip install networkx\r\n pip install leidenalg\r\n pip install community\r\n pip install smfishHmrf\r\n pip install scikit-learn\r\n# install pytorch with CPU or GPU version\r\n```\r\nAfter install the python dependencies, the user need to get the path of environment of conda and set the path to the python_env variable in the function of EnDecon_individual_methods in our package. The path is similar to \"\\~/.conda/envs/EnDecon\\_env/bin/python\" on the ubuntu and \"\\~/anaconda3/envs/EnDecon\\_env/python.ext\" on Windows.\r\n* **Install R dependencies**\r\n\r\nSCDC\r\n```buildoutcfg\r\ninstall.packages(\"remotes\")\r\nremotes::install_github(\"renozao/xbioc\")\r\ninstall.packages(\"devtools\")\r\ndevtools::install_github(\"meichendong/SCDC\")\r\n```\r\nRCTD\r\n```buildoutcfg\r\ndevtools::install_github(\"dmcable/spacexr\", build_vignettes = FALSE)\r\n```\r\nMuSiC\r\n```buildoutcfg\r\ndevtools::install_github('xuranw/MuSiC')\r\n```\r\nDeconRNASeq\r\n```buildoutcfg\r\nif (!require(\"BiocManager\", quietly = TRUE))\r\n  install.packages(\"BiocManager\")\r\nBiocManager::install(\"DeconRNASeq\")\r\n```\r\nDWLS\r\n```buildoutcfg\r\nremotes::install_github(\"sistia01/DWLS\")\r\n```\r\nSeurat\r\n```buildoutcfg\r\ninstall.packages(\"Seurat\")\r\n```\r\nSPOTlight (Version 0.1.7)\r\n```buildoutcfg\r\ndevtools::install_github(\"https://github.com/MarcElosua/SPOTlight/tree/spotlight-0.1.7\")\r\n```\r\nGiotto\r\n```buildoutcfg\r\ndevtools::install_github('RubD/Giotto')\r\n```\r\nspatstat.geom\r\n```buildoutcfg\r\ninstall.packages(\"spatstat.geom\")\r\n```\r\nCARD\r\n```buildoutcfg\r\ndevtools::install_github('YingMa0107/CARD')\r\n```\r\nSTdeconvolve\r\n```buildoutcfg\r\nrequire(remotes)\r\nremotes::install_github('JEFworks-Lab/STdeconvolve')\r\n```\r\nparallel and doParallel\r\n```buildoutcfg\r\ninstall.packages(\"parallel\")\r\ninstall.packages(\"doParallel\")\r\n```\r\nreticulate\r\n```buildoutcfg\r\ninstall.packages('reticulate')\r\n```\r"
      },
      "source": "https://raw.githubusercontent.com/Zhangxf-ccnu/EnDecon/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Run the example",
        "parent_header": [
          "EnDecon"
        ],
        "type": "Text_excerpt",
        "value": "```buildoutcfg\r\ndata(\"breast.sc.ref\")\r\ndata(\"breast.sc.cell.label\")\r\ndata(\"breast.st\")\r\ndata(\"breast.st.loc\")\r\n##### path on ubuntu platform on our computer\r\npython_env <- \"~/.conda/envs/EnDecon_GPU/bin/python\"\r\n# Run 14 individual deconvolution methods with default setting\r\nResults.dec.mouse <- EnDecon_individual_methods(sc_exp = breast.sc.ref,\r\nsc_label = breast.sc.cell.label, spot_exp = breast.st,\r\nspot_loc = breast.st.loc, python_env = python_env,\r\nuse_gpu = TRUE,gene_det_in_min_cells_per = 0.01,\r\nRCTD.CELL_MIN_INSTANCE = 5, saving_results = FALSE)\r\nensemble.results <- solve_ensemble(Results.dec.mouse[[1]])\r\n```\r\nUsers could choose individual deconvolution methods for ensemble learning by setting the parameters in EnDecon\\_individual\\_methods function. \r\nFor example, we could use the following codes running the cell2location, RCTD and CARD for ensemble learning.\r\n```buildoutcfg\r\nResults.dec.mouse <- EnDecon_individual_methods(sc_exp = breast.sc.ref,\r\nsc_label = breast.sc.cell.label, spot_exp = breast.st,\r\nspot_loc = breast.st.loc, python_env = python_env,\r\nuse_gpu = TRUE,gene_det_in_min_cells_per = 0.01,\r\nRCTD.CELL_MIN_INSTANCE = 5, saving_results = FALSE, \r\nSCDC = FALSE, RCTD = TRUE, MuSiC = FALSE, DeconRNASeq = FALSE,\r\nDestVI = FALSE, DWLS = FALSE, SPOTlight = FALSE, SpatialDWLS = FALSE,\r\nStereoscope = FALSE, cell2location = TRUE, CARD = TRUE, STdeconvolve = FALSE)\r\nensemble.results <- solve_ensemble(Results.dec.mouse[[1]])\r\n```\r"
      },
      "source": "https://raw.githubusercontent.com/Zhangxf-ccnu/EnDecon/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 11:00:25",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Run the example",
        "parent_header": [
          "EnDecon"
        ],
        "type": "Text_excerpt",
        "value": "```buildoutcfg\r\ndata(\"breast.sc.ref\")\r\ndata(\"breast.sc.cell.label\")\r\ndata(\"breast.st\")\r\ndata(\"breast.st.loc\")\r\n##### path on ubuntu platform on our computer\r\npython_env <- \"~/.conda/envs/EnDecon_GPU/bin/python\"\r\n# Run 14 individual deconvolution methods with default setting\r\nResults.dec.mouse <- EnDecon_individual_methods(sc_exp = breast.sc.ref,\r\nsc_label = breast.sc.cell.label, spot_exp = breast.st,\r\nspot_loc = breast.st.loc, python_env = python_env,\r\nuse_gpu = TRUE,gene_det_in_min_cells_per = 0.01,\r\nRCTD.CELL_MIN_INSTANCE = 5, saving_results = FALSE)\r\nensemble.results <- solve_ensemble(Results.dec.mouse[[1]])\r\n```\r\nUsers could choose individual deconvolution methods for ensemble learning by setting the parameters in EnDecon\\_individual\\_methods function. \r\nFor example, we could use the following codes running the cell2location, RCTD and CARD for ensemble learning.\r\n```buildoutcfg\r\nResults.dec.mouse <- EnDecon_individual_methods(sc_exp = breast.sc.ref,\r\nsc_label = breast.sc.cell.label, spot_exp = breast.st,\r\nspot_loc = breast.st.loc, python_env = python_env,\r\nuse_gpu = TRUE,gene_det_in_min_cells_per = 0.01,\r\nRCTD.CELL_MIN_INSTANCE = 5, saving_results = FALSE, \r\nSCDC = FALSE, RCTD = TRUE, MuSiC = FALSE, DeconRNASeq = FALSE,\r\nDestVI = FALSE, DWLS = FALSE, SPOTlight = FALSE, SpatialDWLS = FALSE,\r\nStereoscope = FALSE, cell2location = TRUE, CARD = TRUE, STdeconvolve = FALSE)\r\nensemble.results <- solve_ensemble(Results.dec.mouse[[1]])\r\n```\r"
      },
      "source": "https://raw.githubusercontent.com/Zhangxf-ccnu/EnDecon/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Tutorials",
        "parent_header": [
          "EnDecon"
        ],
        "type": "Text_excerpt",
        "value": "- [Analysis of Scenario 1 data with `EnDecon`](https://github.com/keyalone/EnDecon/blob/master/docs/simulation.md)\r\n\r\n- [Analysis of breast cancer data with `EnDecon`](https://github.com/keyalone/EnDecon/blob/master/docs/EnDecon.md)\r\n\r\nPlease do not hesitate to contact Prof. Zhang at zhangxf@ccnu.edu.cn to seek any clarifications regarding any content or operation of the archive.\r\n\r\n \r\n"
      },
      "source": "https://raw.githubusercontent.com/Zhangxf-ccnu/EnDecon/master/README.md",
      "technique": "header_analysis"
    }
  ]
}