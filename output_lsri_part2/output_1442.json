{
  "application_domain": [
    {
      "confidence": 48.38,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/WilsonLabMiami/SymbiQuant"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-11-10T16:42:37Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-11-10T17:14:49Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "An AI tool for phenotyping endosymbionts"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.8945092175229589,
      "result": {
        "original_header": "SymbiQuant (Previously Buchnearer)",
        "type": "Text_excerpt",
        "value": "Machine learning tool for polyploid independent population estimates for endosymbionts. The included dataset works to phenotype Buchnera and aphid bacteriocytes in DAPI stained confocal microscope images.\nPlease see https://www.frontiersin.org/articles/10.3389/fmicb.2022.816608/abstract for information. \n2. Divide images and annotations into tiles using 'split_json.py' \n3. Randomly divide tiles into training, test, and validation datasets, and convert j \n4. Train maskRCNN on your datasets using Detectron2. A basic Detectron2 tutorial is here: https://colab.research.google.com/drive/16jcaJoc6bCFAQ96jDe2HwtXj7BMD_-m5\nThe specific training settings we used are in 'trainer_settings.py', although these settings may need adjustments for other endosymbiotic systems i.e. non-spherical endosymbionts. Our data augmentation settings are in 'trainer_augmentation.py'. \n5. The resultant model weights (the '.pth' file) can be used in place of ours in a detector - see 'detector_example.py' and 'Buchnearer.py' for examples. \n6. Assess performance of your model - i.e. prediction & recall - and use a GUI (like 'GUI.py') to curate results. GUI may need to be altered for non-spherical endosymbionts. \n"
      },
      "source": "https://raw.githubusercontent.com/WilsonLabMiami/SymbiQuant/main/readme",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/WilsonLabMiami/SymbiQuant/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/WilsonLabMiami/SymbiQuant/main/SymbiQuant.ipynb"
      },
      "source": "https://raw.githubusercontent.com/WilsonLabMiami/SymbiQuant/main/SymbiQuant.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/WilsonLabMiami/SymbiQuant/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "WilsonLabMiami/SymbiQuant"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SymbiQuant (Previously Buchnearer)"
      },
      "source": "https://raw.githubusercontent.com/WilsonLabMiami/SymbiQuant/main/readme",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9925453788580032,
      "result": {
        "original_header": "SymbiQuant (Previously Buchnearer)",
        "type": "Text_excerpt",
        "value": "\nTo use Buchnera dataset, use this colab: https://colab.research.google.com/drive/1YZlQgm9Hf4qAFVPvb6JbNHlYyvS2cNN4#scrollTo=AcLEB5XJpH0b, 'GUI.py', and 'buchnera_metrics.py'.\nBuchnera dataset can be installed within that colab notebook, or from figshare here: https://figshare.com/articles/online_resource/model_final_randomscale_0_5_1_40000_pth/19583713 \n1. Annotate images of endosymbiotic tissue using Labelme (https://github.com/wkentaro/labelme) \n"
      },
      "source": "https://raw.githubusercontent.com/WilsonLabMiami/SymbiQuant/main/readme",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8186256477399528,
      "result": {
        "original_header": "SymbiQuant (Previously Buchnearer)",
        "type": "Text_excerpt",
        "value": "2. Divide images and annotations into tiles using 'split_json.py' \n3. Randomly divide tiles into training, test, and validation datasets, and convert j \n5. The resultant model weights (the '.pth' file) can be used in place of ours in a detector - see 'detector_example.py' and 'Buchnearer.py' for examples. \n"
      },
      "source": "https://raw.githubusercontent.com/WilsonLabMiami/SymbiQuant/main/readme",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/WilsonLabMiami/SymbiQuant/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SymbiQuant"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "WilsonLabMiami"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 59422,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 6101,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/WilsonLabMiami/SymbiQuant/main/readme"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/WilsonLabMiami/SymbiQuant/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-04 14:26:13",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ]
}