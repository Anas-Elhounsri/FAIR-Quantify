{
  "application_domain": [
    {
      "confidence": 25.88,
      "result": {
        "type": "String",
        "value": "Natural Language Processing"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Thakar-Lab/mBONITA"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-11-10T19:31:49Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-06-24T20:05:21Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9991067974902952,
      "result": {
        "original_header": "Abstract:",
        "type": "Text_excerpt",
        "value": "Multi-omics profiling provides a holistic picture of a condition being examined and capture the complexity of signaling events, beginning from the original cause (environmental or genetic), to downstream functional changes at multiple molecular layers. Pathway enrichment analysis has been used with multi-omics datasets to characterize signaling mechanisms. However, technical and biological variability between these layered datasets are challenges for integrative computational analyses. We present a Boolean network-based method, multi-omics Boolean Omics Network Invariant-Time Analysis (mBONITA) to integrate omics datasets that quantify multiple molecular layers. *mBONITA* utilizes prior knowledge networks to perform topology-based pathway analysis. In addition, *mBONITA* identifies genes that are consistently modulated across molecular measurements by combining observed fold-changes and variance with a measure of node (i.e., gene or protein) influence over signaling, and a measure of the strength of evidence for that gene across datasets. We used *mBONITA* to integrate multi-omics datasets from RAMOS B cells treated with the immunosuppressant drug cyclosporine A under varying oxygen tensions to identify pathways involved in hypoxia-mediated chemotaxis. We compare *mBONITA*'s performance with 6 other pathway analysis methods designed for multi-omics data and show that *mBONITA* identifies a set of pathways with evidence of modulation across all omics layers. \n"
      },
      "source": "https://raw.githubusercontent.com/Thakar-Lab/mBONITA/main/README.tex",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9421141013028362,
      "result": {
        "original_header": "Inferred Boolean rules",
        "type": "Text_excerpt",
        "value": "These scripts contain code to open the local1.pickle files generated during the rule inference process (these files contain the inferred network model in a slightly complex data structure) and process the information into a single dataframe. \n**One row in the dataframe contains information for one node. The dataframe has the following columns:**\n  - Network name - readable, descriptive KEGG network name\n  - Method name - subfolder of the main directory in which the pickle was found\n  - andNodeList - indices of parent nodes\n  - andNodeInvertList - a bitstring encoding the activation and inhibition edges. True implies that the edge from the corresponding parent node in the andNodeList is an inhibitory edge\n  - ruleLengths - length (ie, size) of the ERS for the node\n  - equivs - bitstring representation of the equivalent rule set\n  - plainRules - plain text representation of the rules in the ERS\n  - randomERSIndividual - random individual from the ERS\n  - minLocalSearchError - lowest error for the rules tried for each node\n \n"
      },
      "source": "https://raw.githubusercontent.com/Thakar-Lab/mBONITA/main/README.tex",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9410356371253336,
      "result": {
        "original_header": "Node importance scores",
        "type": "Text_excerpt",
        "value": "Importance scores are stored as node attributes in the **xyz_rules.graphml** files generated after the node importance score calculation step (Step 2 above). These graphml files can be visualized in software such as Gephi or Cytoscape. \nAlternatively, Figure4.py has some suggestions for reading in these graphml files and aggregating these node importance scores using pandas and networkx and generating a single dataframe. \n"
      },
      "source": "https://raw.githubusercontent.com/Thakar-Lab/mBONITA/main/README.tex",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 1: Download and prepare KEGG pathways for pathway analysis",
        "parent_header": [
          "mBONITA: multi-omics Boolean Omics Network Invariant-Time Analysis"
        ],
        "type": "Text_excerpt",
        "value": "Ensure that you are in the same working directory as all files associated with the mBONITA module.\n\nThen compile the portions of mBONITA written in C by typing the following into your terminal. \n\n```make```\n\nUse the command ```python3 pathway_analysis_setup.py --help``` for more information on each parameter. The examples below cover most use cases.\n\n- Option 1: On a gmt of human pathways *mBONITA* needs omics data, gmt file, and an indication of what character is used to separate columns in the file\n\n**comma separated**\n\n```python pathway_analysis_setup.py -gmt Your_gmt_file -sep , --data Your_omics_data```\n\n**tab separated**\n\n```python pathway_analysis_setup.py -t -gmt Your_gmt_file --data Your_omics_data```\n\n- Option 2: On all KEGG pathways for any organism *mBONITA* needs omics data, organism code, and an indication of what character is used to separate columns in the file.\n\n**comma separated, human:** *MOST COMMON USAGE*\n\n```python pathway_analysis_setup.py -org hsa -sep , --data Your_omics_data``` \n\n**comma separated, mouse**\n\n```python pathway_analysis_setup.py -org mmu -sep , --data Your_omics_data```\n\n**tab separated:**\n\n```python pathway_analysis_setup.py -sep , -org hsa --data Your_omics_data```\n\n- Option 3: On a list of KEGG pathways for any organism *mBONITA* needs omics data, organism code, the list of pathways, and an indication of what character is used to separate columns in the file. \n\nThe pathway list should be a plain-text file formatted like so. The codes are KEGG network codes (Example: https://www.genome.jp/pathway/hsa04066) and hsa stands for *Homo sapiens*. \n\n```\nhsa04066\nhsa04151\nhsa04514\nhsa04670\nhsa04810\n```\n\n**comma separated, human**\n\n```python pathway_analysis_setup.py -org hsa -sep , -paths Your_pathway_list --data Your_omics_data```\n\n**comma separated, mouse**\n\n```python pathway_analysis_setup.py -org mmu -sep , -paths Your_pathway_list --data Your_omics_data```\n\n**tab separated**\n\n```python pathway_analysis_setup.py -t -org Your_org_code -paths Your_pathway_list --data Your_omics_data```\n\n- Option 4: On a custom network in graphml format *mBONITA* needs omics data, the path to the custom network, and an indication of what character is used to separate columns in the file. \n\nNote that the default value for the ```customNetwork``` parameter is the string ```False```. Any other value will trigger a search for a network with that name.\n\n**comma separated, custom network 'network.graphml'**\n\n```python pathway_analysis_setup.py --sep , --data Your_omics_data --customNetwork network.graphml```\n"
      },
      "source": "https://raw.githubusercontent.com/Thakar-Lab/mBONITA/main/README.tex",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Thakar-Lab/mBONITA/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Thakar-Lab/mBONITA/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Thakar-Lab/mBONITA"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "mBONITA: multi-omics Boolean Omics Network Invariant-Time Analysis"
      },
      "source": "https://raw.githubusercontent.com/Thakar-Lab/mBONITA/main/README.tex",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Thakar-Lab/mBONITA/main/mBonita_reviews_experiments/shuffled_kegg_networks_experiments/calcNodeImportancesubmit.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Thakar-Lab/mBONITA/main/mBonita_reviews_experiments/shuffled_kegg_networks_experiments/calcNodeImportancesubmit_copy.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Thakar-Lab/mBONITA/main/mBonita_reviews_experiments/shuffled_kegg_networks_experiments/find_rules_pathway_analysis_copy.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Thakar-Lab/mBONITA/main/mBonita_reviews_experiments/shuffled_kegg_networks_experiments/Figure4.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Thakar-Lab/mBONITA/main/mBonita_reviews_experiments/shuffled_kegg_networks_experiments/find_rules_pathway_analysis.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Thakar-Lab/mBONITA/main/mBonita_reviews_experiments/shuffled_kegg_networks_experiments/run_pathway_analysis.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Thakar-Lab/mBONITA/main/mBonita_reviews_experiments/shuffled_kegg_networks_experiments/cleanup.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Thakar-Lab/mBONITA/main/mBonita_reviews_experiments/shuffled_kegg_networks_experiments/moBONITA_Setup.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Thakar-Lab/mBONITA/main/mBonita_reviews_experiments/shuffled_kegg_networks_experiments/find_rules_metaNetwork_pathway_analysis.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Thakar-Lab/mBONITA/main/mBonita_reviews_experiments/shuffled_kegg_networks_experiments/pathwayPreparation.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Thakar-Lab/mBONITA/main/mBonita_reviews_experiments/shuffled_metanetwork_experiment/calcNodeImportancesubmit_copy.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Thakar-Lab/mBONITA/main/mBonita_reviews_experiments/shuffled_metanetwork_experiment/find_rules_pathway_analysis_copy.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Thakar-Lab/mBONITA/main/data/mBONITA%20figures/Figure4.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Thakar-Lab/mBONITA/main/mBONITA%20module/calcNodeImportancesubmit.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Thakar-Lab/mBONITA/main/mBONITA%20module/calcNodeImportancesubmit_copy.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Thakar-Lab/mBONITA/main/mBONITA%20module/find_rules_pathway_analysis_copy.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Thakar-Lab/mBONITA/main/mBONITA%20module/Figure4.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Thakar-Lab/mBONITA/main/mBONITA%20module/find_rules_pathway_analysis.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Thakar-Lab/mBONITA/main/mBONITA%20module/run_pathway_analysis.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Thakar-Lab/mBONITA/main/mBONITA%20module/cleanup.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Thakar-Lab/mBONITA/main/mBONITA%20module/moBONITA_Setup.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Thakar-Lab/mBONITA/main/mBONITA%20module/find_rules_metaNetwork_pathway_analysis.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Thakar-Lab/mBONITA/main/mBONITA%20module/pathwayPreparation.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/mgp13/moBONITA/main/Picture1.png?raw=true#gh-light-mode-only"
      },
      "source": "https://raw.githubusercontent.com/Thakar-Lab/mBONITA/main/README.tex",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/mgp13/moBONITA/main/Picture2.png?raw=true#gh-dark-mode-only"
      },
      "source": "https://raw.githubusercontent.com/Thakar-Lab/mBONITA/main/README.tex",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 1: Download and prepare KEGG pathways for pathway analysis",
        "parent_header": [
          "mBONITA: multi-omics Boolean Omics Network Invariant-Time Analysis"
        ],
        "type": "Text_excerpt",
        "value": "Ensure that you are in the same working directory as all files associated with the mBONITA module.\n\nThen compile the portions of mBONITA written in C by typing the following into your terminal. \n\n```make```\n\nUse the command ```python3 pathway_analysis_setup.py --help``` for more information on each parameter. The examples below cover most use cases.\n\n- Option 1: On a gmt of human pathways *mBONITA* needs omics data, gmt file, and an indication of what character is used to separate columns in the file\n\n**comma separated**\n\n```python pathway_analysis_setup.py -gmt Your_gmt_file -sep , --data Your_omics_data```\n\n**tab separated**\n\n```python pathway_analysis_setup.py -t -gmt Your_gmt_file --data Your_omics_data```\n\n- Option 2: On all KEGG pathways for any organism *mBONITA* needs omics data, organism code, and an indication of what character is used to separate columns in the file.\n\n**comma separated, human:** *MOST COMMON USAGE*\n\n```python pathway_analysis_setup.py -org hsa -sep , --data Your_omics_data``` \n\n**comma separated, mouse**\n\n```python pathway_analysis_setup.py -org mmu -sep , --data Your_omics_data```\n\n**tab separated:**\n\n```python pathway_analysis_setup.py -sep , -org hsa --data Your_omics_data```\n\n- Option 3: On a list of KEGG pathways for any organism *mBONITA* needs omics data, organism code, the list of pathways, and an indication of what character is used to separate columns in the file. \n\nThe pathway list should be a plain-text file formatted like so. The codes are KEGG network codes (Example: https://www.genome.jp/pathway/hsa04066) and hsa stands for *Homo sapiens*. \n\n```\nhsa04066\nhsa04151\nhsa04514\nhsa04670\nhsa04810\n```\n\n**comma separated, human**\n\n```python pathway_analysis_setup.py -org hsa -sep , -paths Your_pathway_list --data Your_omics_data```\n\n**comma separated, mouse**\n\n```python pathway_analysis_setup.py -org mmu -sep , -paths Your_pathway_list --data Your_omics_data```\n\n**tab separated**\n\n```python pathway_analysis_setup.py -t -org Your_org_code -paths Your_pathway_list --data Your_omics_data```\n\n- Option 4: On a custom network in graphml format *mBONITA* needs omics data, the path to the custom network, and an indication of what character is used to separate columns in the file. \n\nNote that the default value for the ```customNetwork``` parameter is the string ```False```. Any other value will trigger a search for a network with that name.\n\n**comma separated, custom network 'network.graphml'**\n\n```python pathway_analysis_setup.py --sep , --data Your_omics_data --customNetwork network.graphml```\n"
      },
      "source": "https://raw.githubusercontent.com/Thakar-Lab/mBONITA/main/README.tex",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9998959707254166,
      "result": {
        "original_header": "Step 2: Infer Boolean regulatory/signaling rules and calculate node importance scores for KEGG pathways using the combined multi-omics dataset",
        "type": "Text_excerpt",
        "value": "Simply run the script **find_rules_pathway_analysis.sh** which will automatically submit appropriate jobs to a SLURM queue:\n```bash find_rules_pathway_analysis.sh```\n \n"
      },
      "source": "https://raw.githubusercontent.com/Thakar-Lab/mBONITA/main/README.tex",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9887988178311083,
      "result": {
        "original_header": "Step 3: Perform topology-informed pathway analysis for user-specified pairs of experimental conditions",
        "type": "Text_excerpt",
        "value": "Run the Python script pathway_analysis_score_pathways_mBonita.py with the following parameters. An example is listed below.  \n"
      },
      "source": "https://raw.githubusercontent.com/Thakar-Lab/mBONITA/main/README.tex",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9557569086921521,
      "result": {
        "original_header": "Inferred Boolean rules",
        "type": "Text_excerpt",
        "value": "Jupyter notebook: **Figure4.ipynb** \nPython script: **Figure4.py** \n"
      },
      "source": "https://raw.githubusercontent.com/Thakar-Lab/mBONITA/main/README.tex",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8137477094286797,
      "result": {
        "original_header": "Step 2: Infer Boolean regulatory/signaling rules and calculate node importance scores for KEGG pathways using the combined multi-omics dataset",
        "type": "Text_excerpt",
        "value": "Simply run the script **find_rules_pathway_analysis.sh** which will automatically submit appropriate jobs to a SLURM queue:\n```bash find_rules_pathway_analysis.sh```\n \n"
      },
      "source": "https://raw.githubusercontent.com/Thakar-Lab/mBONITA/main/README.tex",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8976390382609815,
      "result": {
        "original_header": "Step 3: Perform topology-informed pathway analysis for user-specified pairs of experimental conditions",
        "type": "Text_excerpt",
        "value": "Run the Python script pathway_analysis_score_pathways_mBonita.py with the following parameters. An example is listed below.  \n- path to training dataset file (concatenated)\n- conditions file\n- contrast file \nHere is an example command:\n```python3 pathway_analysis_score_pathways_mBonita.py concatenated_datasets.csv concatenated_conditions.csv contrasts.csv -sep ,```\n \n"
      },
      "source": "https://raw.githubusercontent.com/Thakar-Lab/mBONITA/main/README.tex",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9289435967163571,
      "result": {
        "original_header": "Inferred Boolean rules",
        "type": "Text_excerpt",
        "value": "Python script: **Figure4.py** \n"
      },
      "source": "https://raw.githubusercontent.com/Thakar-Lab/mBONITA/main/README.tex",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8663171441038657,
      "result": {
        "original_header": "Pathway analysis",
        "type": "Text_excerpt",
        "value": "Results are returned as a single csv file, **pvalues.csv**. \n"
      },
      "source": "https://raw.githubusercontent.com/Thakar-Lab/mBONITA/main/README.tex",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Thakar-Lab/mBONITA/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2022 Mukta G. Palshikar\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/Thakar-Lab/mBONITA/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "mBONITA"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "Thakar-Lab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 8914349,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 650081,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 47675,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 8238,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 5808,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Roff",
        "size": 309,
        "type": "Programming_language",
        "value": "Roff"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 174,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Thakar-Lab/mBONITA/main/README.tex"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Thakar-Lab/mBONITA/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "parent_header": [
          "mBONITA: multi-omics Boolean Omics Network Invariant-Time Analysis",
          "*mBONITA* tutorial"
        ],
        "type": "Text_excerpt",
        "value": "The *mBONITA* tool is written in Python3 and C. I strongly recommend that *mBONITA* be run on a computing cluster such as the University of Rochester's BlueHive, and that jobs are submitted using a scheduler such as SLURM. Dependencies are listed in the conda environment file (SPECIFY FILENAME HERE).\n\n**Minor caveat** - *mBONITA* is not a Python package like numpy or scipy, which allow users to import individual functions and (re)use them in custom code. *mBONITA* is an all-in-one pipeline that doesn't allow function import or much customization beyond the pre-specified parameters. I welcome advanced users to modify code and submit pull requests, but this is beyond what most users will need. \n\n*mBONITA* requires the following inputs (Step 0):\n\n- A pre-preprocessed multi-omics dataset from matched samples, prepared in a combined matrix format as in (link to Python notebook here)\n- A conditions file in matrix format, which specfies the experimental conditions for each sample in the training dataset above\n- A contrast file that specifies which pairs of experimental conditions are to be compared during pathway analysis\n\nto perform the following tasks:\n\n- Download and prepare KEGG pathways for pathway analysis (Step 1)\n- Infer Boolean regulatory/signaling rules for KEGG pathways using the combined multi-omics dataset (Step 2)\n- Perform topology-informed pathway analysis for user-specified pairs of experimental conditions (Step 3)\n\nThis tutorial will go through the *mBONITA* pipeline using a multi-omics dataset of transcriptomics, proteomics, and phosphoproteomics from RAMOS B cells, as described in the *mBONITA* publication.\n"
      },
      "source": "https://raw.githubusercontent.com/Thakar-Lab/mBONITA/main/README.tex",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 09:27:09",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 0: Process multi-omics data and generate conditions and contrast files",
        "parent_header": [
          "mBONITA: multi-omics Boolean Omics Network Invariant-Time Analysis",
          "*mBONITA* tutorial"
        ],
        "type": "Text_excerpt",
        "value": "I expect that most users will begin with 2 or more processed datasets from separate multi-omics datasets. These datasets will usually be log2-normalized. The Jupyter notebook (**Figure1.ipynb**) outlines how to combine log2-normalized proteomics, phosphoproteomics and transcriptomics datasets as in the *mBONITA* publication and prepare them in a matrix format for mBONITA.\n\nmBONITA also requires a condition and contrast file for pathway analysis. An example of how to prepare these files is in (**Figure1.ipynb**).\n\nBriefly, if your dataset looks something like this:\n\n| Genes | Condition1_ replicate1_ proteomics  | Condition1_ replicate2_ proteomics | Condition2_ replicate1_ proteomics  | Condition2_ replicate2_ proteomics | Condition1_ replicate1_ phospho proteomics | Condition1_ replicate2_ phospho proteomics | Condition2_ replicate1_ phospho proteomics | Condition2_ replicate2_ phospho proteomics |\n| ------------- | ------------- | ------------- | ------------- | ------------- | ------------- | ------------- | ------------- | ------------- |\n| Gene1 | - | - | - | - | - | - | - | - |\n| Gene2  | - | - | - | - | - | - | - | - |\n| Gene3  | - | - | - | - | - | - | - | - |\n| Gene4  | - | - | - | - | - | - | - | - |\n\nThen your condition file will look like this:\n\n| Sample |  Condition1 | Condition2  | \n| ------------- | ------------- | ------------- | \n| Condition1_replicate1_proteomics | 1  | 0  | \n| Condition1_replicate2_proteomics  | 1  | 0  |\n| Condition2_replicate1_proteomics | 0  | 1  | \n| Condition2_replicate2_proteomics  | 0  | 1  |\n| Condition1_replicate1_phosphoproteomics | 1  | 0  | \n| Condition1_replicate2_phosphoproteomics  | 1  | 0  |\n| Condition2_replicate1_phosphoproteomics | 0  | 1  | \n| Condition2_replicate2_phosphoproteomics  | 0  | 1  |\n\n\nAnd your contrast file will look like this:\n\n|  Condition1 | Condition2  |\n"
      },
      "source": "https://raw.githubusercontent.com/Thakar-Lab/mBONITA/main/README.tex",
      "technique": "header_analysis"
    }
  ]
}