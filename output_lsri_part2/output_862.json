{
  "application_domain": [
    {
      "confidence": 13.48,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/kevinjohncutler/omnipose"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-11-05T17:34:52Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-27T08:43:04Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Omnipose: a high-precision solution for morphology-independent cell segmentation"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.977536315850674,
      "result": {
        "original_header": "Try out Omnipose online",
        "type": "Text_excerpt",
        "value": "New users can check out the\n`ZeroCostDL4Mic <https://github.com/HenriquesLab/ZeroCostDL4Mic/wiki>`__\nCellpose notebook on `Google\nColab <https://colab.research.google.com/github/HenriquesLab/ZeroCostDL4Mic/blob/master/Colab_notebooks/Beta%20notebooks/Cellpose_2D_ZeroCostDL4Mic.ipynb>`__\nto try out our original release of Omnipose. We need to make sure this\ngets updated to the most recent version of Omnipose with advanced 3D\nfeatures and more built-in models.\n \n"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9335649417427206,
      "result": {
        "original_header": "How to train Omnipose",
        "type": "Text_excerpt",
        "value": "On bacterial phase contrast data, I found that Cellpose does not benefit\nmuch from more than 500 epochs but Omnipose continues to improve until\naround 4000 epochs. Omnipose outperforms Cellpose at 500 epochs but is\nsignificantly better at 4000. You can use ``--save_every <n>`` and\n``--save_each`` to store intermediate model training states to explore\nthis behavior. \n"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8282548971572788,
      "result": {
        "original_header": "3D Omnipose",
        "type": "Text_excerpt",
        "value": "To evaluate Omnipose models on 3D data, see the\n`examples <docs/examples/>`__. If you run out of GPU memory, consider\n(a) evaluating on CPU or (b) using ``tile=True``.\n \n"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9844140871072588,
      "result": {
        "original_header": "Known limitations",
        "type": "Text_excerpt",
        "value": "Cell size remains the only practical limitation of Omnipose. On the low\nend, cells need to be at least 3 pixels wide in each dimension. On the\nhigh end, 60px appears to work well, with 150px being too large. The\ncurrent workaround is to first downscale your images so that cells are\nwithin an appropriate size range (3-60px). This can be done\nautomatically during training with ``--diameter <X>``. The mean cell\ndiameter ``D`` is calculated from the ground truth masks and images are\nrescaled by ``X/D``.\n \n"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9368642557027202,
      "result": {
        "original_header": "Project structure, feature requests, and issues",
        "type": "Text_excerpt",
        "value": "Omnipose is built on `Cellpose <https://github.com/MouseLand/cellpose>`__, and functionally\nthat means Cellpose actually imports Omnipose to replace many of its\noperations with the Omnipose versions with ``omni=True``. Omnipose was\nfirst packaged into the Cellpose repo before I began making too many\nND-generalizations (full rewrites) for the authors to maintain. Thus was\nbirthed my ``cellpose_omni`` fork, which I published to PyPi separately\nfrom Omnipose for some time. I later decided that maintaining two\npackages for one project was overcomplicated for me and users\n(especially for installations from the repo), so the latest version of\n``cellpose_omni`` now lives here. ``cellpose_omni`` still gets installed\nas its own subpackage when you install Omnipose. If you have issues\nmigrating to the new version, make sure to\n``pip uninstall omnipose cellpose_omni`` before re-installing Omnipose.\nThe ``install.py`` script simply runs ``pip install -e .{extras}`` in\nthe ``omnipose`` and ``cellpose`` directories. \nIf you encounter bugs with Omnipose, you can check the `main Cellpose\nrepo <https://github.com/MouseLand/cellpose>`__ for related issues and\nalso post them here. I do my best to keep up with with bug fixes and\nfeatures from the main branch, but it helps me out a lot if users bring\nthem to my attention. If there are any features or pull requests in\nCellpose that you want to see in Omnipose ASAP, please let me know. \n"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8660347002236887,
      "result": {
        "original_header": "Building the GUI app",
        "type": "Text_excerpt",
        "value": "PyInstaller can be used to compile Omnipose into a standalone app. The\nlimitation is that the build process itself needs to run within the OS\non which the app will be run. We plan to release app versions for macOS\n12.3, Windows 10, and Ubuntu 20.04, which should also work on newer\nversions of each OS. I will periodically update these apps for the\npublic, but we will also post notes below to guide others in compiling\nthe code: \n1. Start with a fresh conda environment with only the dependencies that\n   Omnipose and pyinstaller need. \n   This will make a ``build`` and ``dist`` folder. ``--onefile`` makes\n   an executable that opens up a terminal window. This is important\n   because the GUI still outputs information there, especially with the\n   debug box checked. This bare-bones command generates the omni.spec\n   file that can be further edited. At this point, this minimal setup\n   produces very large executibles (>300MB) depending on the OS, but\n   they are functional. \n3. numpy seems to be the limiting factor preventing us from making\n   universal2 executibles. This means that Intel (osx_64) and Apple\n   Silicon (osx_arm64) apps need to be frozen separately on their\n   respective platforms. The former works just the same as Windows and\n   Ubuntu. The latter was a bit of a nightmare, as I had to ensure that\n   all possible dependencies of Omnipose *and* Cellpose were manually\n   installed from miniforge into a clean conda environment to get the\n   osx_arm64 builds. I then installed Omnipose, which only needed to pip\n   install the few other packages like ncolor and mgen that were not\n   already installed via conda. I also needed to upgrade my fork of\n   Cellpose, where the GUI lives, to PyQt6 (previously PyQt5). An\n   environment.yaml is sorely needed to make this process easier.\n   However, on osx_arm64 I found it necessary to additionally include a\n   ``--collect all skimage``: \n"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8457035942144406,
      "result": {
        "original_header": "Licensing",
        "type": "Text_excerpt",
        "value": "See ``LICENSE.txt`` for details. This license does not affect anyone\nusing Omnipose for noncommercial applications. \n"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9882224352311395,
      "result": {
        "type": "Text_excerpt",
        "value": "Omnipose is a general image segmentation tool that builds on\n`Cellpose `__ in a number of ways\ndescribed in our\n`paper `__. It works\nfor both 2D and 3D images and on any imaging modality or cell shape, so\nlong as you train it on representative images. We have several\npre-trained models for: \n-  **bacterial phase contrast**: trained on a diverse range of bacterial\n   species and morphologies.\n-  **bacterial fluorescence**: trained on the subset of the phase data\n   that had a membrane or cytosol tag.\n-  **C. elegans**: trained on a couple OpenWorm videos and the\n   `BBBC010 `__ alive/dead\n   assay. We are working on expanding this significantly with the help\n   of other labs contributing ground-truth data.\n-  **cyto2**: trained on user data submitted through the Cellpose GUI.\n   Very diverse data, but not necessarily the best quality. This model\n   can be a good starting point for users making their own ground-truth\n   datasets. \n"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/README.rst",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/kevinjohncutler/omnipose/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Figure_SX_DeLTA.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Figure_SX_DeLTA.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/export_models.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/export_models.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Figure_S5.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Figure_S5.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Figure_S7.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Figure_S7.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Figure_S3.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Figure_S3.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Figures_3_4_S1.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Figures_3_4_S1.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/3D_omnipose.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/3D_omnipose.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Figure_5_S6_Tre1.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Figure_5_S6_Tre1.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/scale_bars.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/scale_bars.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Figure_1.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Figure_1.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Figure_2A_4AB_CP_OM_Compare.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Figure_2A_4AB_CP_OM_Compare.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Figure_S2.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Figure_S2.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Ground_truth_export_and_thumbnails.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Ground_truth_export_and_thumbnails.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Figure_6_cyto2_example.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Figure_6_cyto2_example.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Figure_6_worm_high_res.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Figure_6_worm_high_res.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Figure_6_fluroescence.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Figure_6_fluroescence.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Figure_6_C_elegans_cyto2.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Figure_6_C_elegans_cyto2.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Diameter_metric.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Diameter_metric.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/image_cell_counting.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/image_cell_counting.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Figure_3_S5.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Figure_3_S5.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/DeLTA/DeLTA.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/DeLTA/DeLTA.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/PlantSeg/plantseg_root.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/PlantSeg/plantseg_root.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/PlantSeg/Export_slices.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/PlantSeg/Export_slices.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/PlantSeg/Figure_6_plantseg_root.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/PlantSeg/Figure_6_plantseg_root.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Cellpose/comparisons_final_bacteria.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Cellpose/comparisons_final_bacteria.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Cellpose/train_size.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Cellpose/train_size.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Cellpose/comparisons_OGdata.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Cellpose/comparisons_OGdata.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Cellpose/Figure_6_C_elegans-Copy1-convert%20to%20all.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Cellpose/Figure_6_C_elegans-Copy1-convert%20to%20all.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Cellpose/comparisons_c_elegans.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Cellpose/comparisons_c_elegans.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Cellpose/comparisons.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Cellpose/comparisons.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/BBBC027/Untitled.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/BBBC027/Untitled.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/BBBC027/bbbc.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/BBBC027/bbbc.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/StarDist/3_prediction_kevin_Tre1_Figure_6.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/StarDist/3_prediction_kevin_Tre1_Figure_6.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/StarDist/2_training_kevin.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/StarDist/2_training_kevin.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/StarDist/3_prediction_kevin.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/StarDist/3_prediction_kevin.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Mask%20R-CNN/Mask%20R-CNN%20torchvision.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Mask%20R-CNN/Mask%20R-CNN%20torchvision.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Mask%20R-CNN/Mask%20R-CNN%20torchvision-Copy1.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/Mask%20R-CNN/Mask%20R-CNN%20torchvision-Copy1.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/MiSiC/Figure_1_misic.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/MiSiC/Figure_1_misic.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/MiSiC/misic_Tre1_Figure6.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/MiSiC/misic_Tre1_Figure6.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/MiSiC/misic_retraining_script.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/scripts/MiSiC/misic_retraining_script.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/docs/affinity.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/docs/affinity.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/docs/contours.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/docs/contours.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/docs/diameter.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/docs/diameter.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/docs/logo.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/docs/logo.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/docs/train_via_notebook.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/docs/train_via_notebook.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/docs/gamma.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/docs/gamma.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/docs/ncolor.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/docs/ncolor.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/docs/examples/mono_channel_3D.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/docs/examples/mono_channel_3D.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/docs/examples/multi_channel_cyto.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/docs/examples/multi_channel_cyto.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/docs/examples/mono_channel_bact.ipynb"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/docs/examples/mono_channel_bact.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 29
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/kevinjohncutler/omnipose/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "kevinjohncutler/omnipose"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/README.rst",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/docs/install.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How to install Omnipose",
        "type": "Text_excerpt",
        "value": ".. _install_start:\n\n1. Install an `Anaconda <https://www.anaconda.com/download/>`__\n   distribution of Python. Note you might need to use an anaconda prompt\n   if you did not add anaconda to the path. Alternatives like miniconda\n   also work just as well.\n\n2. Open an anaconda prompt / command prompt with ``conda`` for **python\n   3** in the path.\n\n3. To create a new environment for CPU only, run\n\n   ::\n\n      conda create -n omnipose 'python==3.10.12' pytorch\n\n   For users with NVIDIA GPUs, add these additional arguments:\n\n   ::\n\n      torchvision pytorch-cuda=11.8 -c pytorch -c nvidia \n\n   See `GPU support <#gpu-support>`__ for more details. Python 3.10 is\n   not a strict requirement; see `Python\n   compatibility <#python-compatibility>`__ for more about choosing your\n   python version.\n\n4. To activate this new environment, run\n\n   ::\n\n      conda activate omnipose\n\n5. To install the latest PyPi release of Omnipose, run\n\n   ::\n\n      pip install omnipose\n\n   or, for the most up-to-date development version,\n\n   ::\n\n      git clone https://github.com/kevinjohncutler/omnipose.git\n      cd omnipose\n      pip install -e .\n\n.. _install_stop:\n\n.. warning::\n   If you previously installed Omnipose, please run\n\n   .. code-block::\n   \n      pip uninstall cellpose_omni && pip cache remove cellpose_omni\n\n   to prevent version conflicts. See :ref:`project structure <project-structure>` for more details. \n\n\nPython compatibility\n~~~~~~~~~~~~~~~~~~~~\n\n.. _python_start:\n\nWe have tested Omnipose extensively on Python version 3.8.5 and have\nencountered issues on some lower versions. Versions up to 3.10.11 have\nbeen confirmed compatible, but we have encountered bugs with the GUI\ndependencies on 3.11+. For those users with system or global pyenv\npython3 installations, check your python version by running\n``python -V`` before making your conda environment and choose a\ndifferent version. That way, there is no crosstalk between pip-installed\npackages inside and outside your environment. So if you have 3.x.y\ninstalled via pyenv etc., install your environment with 3.x.z instead.\n\n.. _python_stop:\n\nPyenv versus Conda\n~~~~~~~~~~~~~~~~~~\n\n.. _pyenv_start:\n\nPyenv also works great for creating an environment for installing\nOmnipose (and it also works a lot better for installing Napari alongside\nit, in my experience - use `pip install \"napari[pyqt6]\"`` to ensure no Qt conflicts). \nSimply set your global version anywhere from\n3.8.5-3.10.11 and run ``pip install omnipose``. I've had no problems\nwith GPU compatibility with this method on Linux, as pip collects all\nthe required packages. Conda is technically more reproducible, but often\nfinicky. You can use pyenv on Windows and macOS too, and as of mid 2024, \nit works perfectly on Apple Silicon (better than conda!).\n\n.. _pyenv_stop:\n\nGPU support\n~~~~~~~~~~~\n\n.. _gpu_start:\n\nOmnipose runs on CPU on macOS, Windows, and Linux. PyTorch has\nhistorically only supported NVIDIA GPUs, but has more more recently\nbegun supporting Apple Silicon GPUs. It looks AMD support may be\navaiable these days (ROCm), but I have not tested that out. Windows and\nLinux installs are straightforward:\n\nYour PyTorch version (>=1.6) needs to be compatible with your NVIDIA\ndriver. Older cards may not be supported by the latest drivers and thus\nnot supported by the latest PyTorch version. See the official\ndocumentation on installing both the `most recent <https://pytorch.org/get-started/locally/>`__ and\n`previous <https://pytorch.org/get-started/previous-versions/>`__\ncombinations of CUDA and PyTorch to suit your needs. Accordingly, you\ncan get started with CUDA 11.8 by making the following environment:\n\n::\n\n   conda create -n omnipose 'python==3.10.12' pytorch torchvision pytorch-cuda=11.8 \\\n   -c pytorch -c nvidia \n\nNote that the official PyTorch command includes torchaudio, but that is\nnot needed for Omnipose. (*torchvision appears to be necessary these\ndays*). If you are on older drivers, you can get started with an older\nversion of CUDA, *e.g.* 10.2:\n\n::\n\n   conda create -n omnipose pytorch=1.8.2 cudatoolkit=10.2 -c pytorch-lts\n\nFor Apple Silicon, download\n`omnipose_mac_environment.yml <omnipose_mac_environment.yml>`__ and\ninstall the environment:\n\n::\n\n   conda env create -f <path_to_environment_file>\n   conda activate omnipose\n\nYou may edit this yml to change the name or python version etc. For more\nnotes on Apple Silicon development, see `this\nthread <https://github.com/kevinjohncutler/omnipose/issues/14>`__. On\nall systems, remember that you may need to use ipykernel to use the\nomnipose environment in a notebook.\n\n.. _gpu_stop:\n"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/README.rst",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.999881620409086,
      "result": {
        "original_header": "Try out Omnipose online",
        "type": "Text_excerpt",
        "value": "New users can check out the\n`ZeroCostDL4Mic <https://github.com/HenriquesLab/ZeroCostDL4Mic/wiki>`__\nCellpose notebook on `Google\nColab <https://colab.research.google.com/github/HenriquesLab/ZeroCostDL4Mic/blob/master/Colab_notebooks/Beta%20notebooks/Cellpose_2D_ZeroCostDL4Mic.ipynb>`__\nto try out our original release of Omnipose. We need to make sure this\ngets updated to the most recent version of Omnipose with advanced 3D\nfeatures and more built-in models.\n \n"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9775655552429193,
      "result": {
        "original_header": "How to train Omnipose",
        "type": "Text_excerpt",
        "value": "   omnipose --train --use_gpu --dir <bacterial dataset directory> --mask_filter _masks \\\n            --n_epochs 4000 --pretrained_model None --learning_rate 0.1 --diameter 0 \\\n            --batch_size 16 --RAdam --img_filter _img --nclasses 3 \n"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9554902027922032,
      "result": {
        "original_header": "3D Omnipose",
        "type": "Text_excerpt",
        "value": "   omnipose --use_gpu --train --dir <path> --mask_filter _masks \\\n            --n_epochs 4000 --pretrained_model None --learning_rate 0.1 --save_every 50 \\\n            --save_each  --verbose --look_one_level_down --all_channels --dim 3 \\\n            --RAdam --batch_size 4 --diameter 0 --nclasses 3 \n"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999915423511774,
      "result": {
        "original_header": "Project structure, feature requests, and issues",
        "type": "Text_excerpt",
        "value": "Omnipose is built on `Cellpose <https://github.com/MouseLand/cellpose>`__, and functionally\nthat means Cellpose actually imports Omnipose to replace many of its\noperations with the Omnipose versions with ``omni=True``. Omnipose was\nfirst packaged into the Cellpose repo before I began making too many\nND-generalizations (full rewrites) for the authors to maintain. Thus was\nbirthed my ``cellpose_omni`` fork, which I published to PyPi separately\nfrom Omnipose for some time. I later decided that maintaining two\npackages for one project was overcomplicated for me and users\n(especially for installations from the repo), so the latest version of\n``cellpose_omni`` now lives here. ``cellpose_omni`` still gets installed\nas its own subpackage when you install Omnipose. If you have issues\nmigrating to the new version, make sure to\n``pip uninstall omnipose cellpose_omni`` before re-installing Omnipose.\nThe ``install.py`` script simply runs ``pip install -e .{extras}`` in\nthe ``omnipose`` and ``cellpose`` directories. \nIf you encounter bugs with Omnipose, you can check the `main Cellpose\nrepo <https://github.com/MouseLand/cellpose>`__ for related issues and\nalso post them here. I do my best to keep up with with bug fixes and\nfeatures from the main branch, but it helps me out a lot if users bring\nthem to my attention. If there are any features or pull requests in\nCellpose that you want to see in Omnipose ASAP, please let me know. \n"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9577831638867046,
      "result": {
        "original_header": "Building the GUI app",
        "type": "Text_excerpt",
        "value": "PyInstaller can be used to compile Omnipose into a standalone app. The\nlimitation is that the build process itself needs to run within the OS\non which the app will be run. We plan to release app versions for macOS\n12.3, Windows 10, and Ubuntu 20.04, which should also work on newer\nversions of each OS. I will periodically update these apps for the\npublic, but we will also post notes below to guide others in compiling\nthe code: \n1. Start with a fresh conda environment with only the dependencies that\n   Omnipose and pyinstaller need. \n2. ``cd`` into the pyinstaller directory and run \n   This will make a ``build`` and ``dist`` folder. ``--onefile`` makes\n   an executable that opens up a terminal window. This is important\n   because the GUI still outputs information there, especially with the\n   debug box checked. This bare-bones command generates the omni.spec\n   file that can be further edited. At this point, this minimal setup\n   produces very large executibles (>300MB) depending on the OS, but\n   they are functional. \n3. numpy seems to be the limiting factor preventing us from making\n   universal2 executibles. This means that Intel (osx_64) and Apple\n   Silicon (osx_arm64) apps need to be frozen separately on their\n   respective platforms. The former works just the same as Windows and\n   Ubuntu. The latter was a bit of a nightmare, as I had to ensure that\n   all possible dependencies of Omnipose *and* Cellpose were manually\n   installed from miniforge into a clean conda environment to get the\n   osx_arm64 builds. I then installed Omnipose, which only needed to pip\n   install the few other packages like ncolor and mgen that were not\n   already installed via conda. I also needed to upgrade my fork of\n   Cellpose, where the GUI lives, to PyQt6 (previously PyQt5). An\n   environment.yaml is sorely needed to make this process easier.\n   However, on osx_arm64 I found it necessary to additionally include a\n   ``--collect all skimage``: \n      pyinstaller --clean --noconfirm --onefile omni.py --collect-all pyqtgraph --collect-all skimage \n-  the mgen dependency had some version declarations that are\n   incompatible with pyinstaller. Install my fork of mgen prior to\n   building the app. \npyinstaller --clean --noconfirm --onefile omni.py --collect-all\npyqtgraph --collect-all skimage --collect-all torch\n \n"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9420343443816768,
      "result": {
        "original_header": "Licensing",
        "type": "Text_excerpt",
        "value": "See ``LICENSE.txt`` for details. This license does not affect anyone\nusing Omnipose for noncommercial applications. \n.. |Downloads| image:: https://static.pepy.tech/personalized-badge/omnipose?period=total&units=international_system&left_color=grey&right_color=green&left_text=Downloads\n   :target: https://pepy.tech/project/omnipose\n.. |PyPI version| image:: https://badge.fury.io/py/omnipose.svg\n   :target: https://badge.fury.io/py/omnipose\n \n"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9506797522088126,
      "result": {
        "type": "Text_excerpt",
        "value": ".. raw:: html \n|Downloads| |PyPI version| \n"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/README.rst",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8639463698819049,
      "result": {
        "original_header": "How to train Omnipose",
        "type": "Text_excerpt",
        "value": "Training is best done on CLI. I trained the ``bact_phase_omni`` model\nusing the following command, and you can train custom Omnipose models\nsimilarly: \n   omnipose --train --use_gpu --dir <bacterial dataset directory> --mask_filter _masks \\\n            --n_epochs 4000 --pretrained_model None --learning_rate 0.1 --diameter 0 \\\n            --batch_size 16 --RAdam --img_filter _img --nclasses 3 \n"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8573797518072674,
      "result": {
        "original_header": "3D Omnipose",
        "type": "Text_excerpt",
        "value": "   omnipose --use_gpu --train --dir <path> --mask_filter _masks \\\n            --n_epochs 4000 --pretrained_model None --learning_rate 0.1 --save_every 50 \\\n            --save_each  --verbose --look_one_level_down --all_channels --dim 3 \\\n            --RAdam --batch_size 4 --diameter 0 --nclasses 3 \n"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/README.rst",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/kevinjohncutler/omnipose/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "deep-learning, pytorch, segmentation"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Omnipose NonCommercial License\nCopyright (c) 2021 University of Washington.\n\nRedistribution and use for noncommercial purposes in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n1.\tThe software is used solely for noncommercial purposes. For commercial use rights, contact University of Washington, CoMotion, at license@uw.edu.\n2.\tRedistributions of source code must retain the above copyright notice, this list of conditions and the below disclaimer.\n3.\tRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n4.\tRedistributions, with or without modifications, shall only be licensed under this NonCommercial License.\n5.\tNeither the name of the University of Washington nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE UNIVERSITY OF WASHINGTON OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/logo.png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/README.rst",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "omnipose"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "kevinjohncutler"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 1280519,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 1067511,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/README.rst"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-04 12:16:37",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 96
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Use the GUI",
        "type": "Text_excerpt",
        "value": "Launch the Omnipose-optimized version of the Cellpose GUI from terminal:\n``omnipose``. Version 0.4.0 and onward will *not* install the GUI\ndependencies by default. When you first run the GUI command, you will be\nprompted to install the GUI dependencies. On Ubuntu 2022.04 (and\npossibly earlier), we found it necessary to run the following to install\na missing system package:\n\n::\n\n   sudo apt install libxcb-xinerama0\n\nOur version of the GUI gives easy access to the parameters you need to\nrun Omnipose in large batches via CLI or Jupyter notebooks. The\n`ncolor <https://github.com/kevinjohncutler/ncolor>`__ label\nrepresentation is now default and can be toggled off for saving masks in\nstandard format.\n\nStandalone versions of this GUI for Windows, macOS, and Linux are\navailable on the `OSF repository <https://osf.io/xmury/>`__.\n"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/README.rst",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "How to use Omnipose",
        "type": "Text_excerpt",
        "value": "I have a few Jupyter notebooks in the `docs/examples <docs/examples/>`__\ndirectory that demonstrate how to use built-in models. You can also find\nall the scripts I used for generating our figures in the\n`scripts <scripts/>`__ directory. These cover specific settings for all\nof the images found in our paper.\n\nTo use Omnipose on bacterial cells, use ``model_type=bact_omni``. For\nother cell types, try ``model_type=cyto2_omni``. You can also choose\nCellpose models with ``omni=True`` to engage the Omnipose mask\nreconstruction algorithm to alleviate over-segmentation.\n"
      },
      "source": "https://raw.githubusercontent.com/kevinjohncutler/omnipose/main/README.rst",
      "technique": "header_analysis"
    }
  ]
}