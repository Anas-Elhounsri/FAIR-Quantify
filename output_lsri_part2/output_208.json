{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/esalkovic/outsingle"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-11-14T21:50:55Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-08-21T20:21:24Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Tool for finding outliers in RNA-Seq gene expression data"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9791039595855203,
      "result": {
        "original_header": "OutSingle - A Python tool for finding outliers in RNA-Seq gene expression count data using SVD/OHT",
        "type": "Text_excerpt",
        "value": "\r\nOutSingle has been tested on Windows (11).\r\nNote that OutSingle is still in\r\nalpha stage,\r\nso encountering bugs while\r\nrunning it is expected.\r\nIf you use OutSingle in your research\r\nyou can cite our paper::\r\n\r\nEdin Salkovic, Mohammad Amin Sadeghi, Abdelkader Baggag, Ahmed Gamal Rashed Salem, Halima Bensmail, OutSingle: A Novel Method of Detecting and Injecting Outliers in RNA-seq Count Data Using the Optimal Hard Threshold for Singular Values, Bioinformatics, 2023;, btad142, https://doi.org/10.1093/bioinformatics/btad142\r\n\r\nAnd please also check our other older models (both have related published papers)::\r\n\r\nhttps://github.com/esalkovic/outpyr\r\n\r\nhttps://github.com/esalkovic/outpyrx\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/esalkovic/outsingle/master/README.rst",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/esalkovic/outsingle/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/esalkovic/outsingle/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "esalkovic/outsingle"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "OutSingle - A Python tool for finding outliers in RNA-Seq gene expression count data using SVD/OHT"
      },
      "source": "https://raw.githubusercontent.com/esalkovic/outsingle/master/README.rst",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "OutSingle - A Python tool for finding outliers in RNA-Seq gene expression count data using SVD/OHT"
        ],
        "type": "Text_excerpt",
        "value": "The recommended way is to just clone/download\r\nthe repository and open a terminal/CMD.exe,\r\ncd/chdir to the downloaded directory and\r\nrun the following command\r\n(preferably inside of a\r\nvirtualenv virtual environment)::\r\n\r\n  pip install -r requirements.txt\r\n\r\nIt might take some time to install all dependencies.\r\n\r\nNote that OutSingle comes with an optht.py file copied\r\nfrom https://github.com/erichson/optht and its licence\r\nis included in this repository inside the file optht_LICENSE.\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/esalkovic/outsingle/master/README.rst",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999843879027401,
      "result": {
        "original_header": "Further info",
        "type": "Text_excerpt",
        "value": "You can check OutPyR's documentation regarding how you can obtain a publicly available\r\ndataset file on which you can apply OutSingle:\r\nhttps://github.com/esalkovic/outpyr\r\n \n"
      },
      "source": "https://raw.githubusercontent.com/esalkovic/outsingle/master/README.rst",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/esalkovic/outsingle/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "The author of the software does not guarantee anything to anybody who is accessing (including using) the software in any way.\nYou can use this software only \"as is\", and completely at your own risk.\nYou can use this software only in an ethical manner.\nYou can use this software for good, not evil."
      },
      "source": "https://raw.githubusercontent.com/esalkovic/outsingle/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "outsingle"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "esalkovic"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 23267,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/esalkovic/outsingle/master/README.rst"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 09:46:54",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "OutSingle - A Python tool for finding outliers in RNA-Seq gene expression count data using SVD/OHT"
        ],
        "type": "Text_excerpt",
        "value": "We recommend that you create a\r\nseparate workspace\r\ndirectory for every data file that you\r\nprocess as OutSingle's sub-tools will create\r\nsome files and folders inside the\r\ndirectory where the file you run it on\r\nis located.\r\n\r\nYou can run the various OutSingle sub-tools\r\non your data as follows::\r\n\r\n python fast_zscore_estimation.py some-dataset/some-dataset.csv\r\n\r\nThat will estimate a simple z-score for the dataset.\r\nThe only parameter that you have to supply\r\nto ``fast_zscore_estimation.py`` is the path to the dataset file\r\n(here it's ``some-dataset/some-dataset.csv``).\r\nThe dataset file should be a tab-separated\r\npandas-compatible CSV file containing\r\ngene expression counts.\r\nIts index (first column) should\r\ncontain names of genes,\r\nwhile its columns header (first row)\r\nshould contain the names of samples\r\nthat the counts were sequenced from.\r\nOther cells should contain\r\ninteger count data.\r\n\r\nAfter z-score estimation, you can calculate the final\r\nOutSingle score with::\r\n\r\n python optht_svd_zs.py some-dataset/some-dataset-fzse-zs.csv\r\n \r\nThat will produce a file ``some-dataset/some-dataset-fzse-zs-svd-optht-zs.csv``\r\nwhich can be considered as the final OutSingle \"outlierness\" score\r\nfor the dataset.\r\n\r\nYou can also inject artificial outliers that are masked by\r\nconfounding effects (present in the data) with::\r\n\r\n python inject_outliers_fzse_pysvdcc.py some-dataset/some-dataset.csv\r\n\r\nThat command will produce several files with artificial outliers\r\n(i.e., original data + outliers). These are CSV files but with a \".txt\"\r\nextension.\r\nYou can edit that script to change some parameters of the injection\r\nprocess: frequency, magnitudes of outliers, whether the outliers\r\nhave only large positive z-scores, only negative, or both (50%/50%).\r\n\r\nAs an example the tool might produce the following file::\r\n\r\n some-dataset/some-dataset-wo-f1-b-z6.00.txt\r\n\r\n``-f1-`` indicates that the frequency of outliers is 1 per sample,\r\n``-b-`` indicates that both outliers with positive and negative z-scores\r\nare present in the data, and ``-z6.00`` indicates that the z-score magnitude\r\nof the outliers is 6.\r\n\r\nThe tool will also produce corresponding outlier mask (omask) files which\r\nare CSV files (again ending with \".txt\")\r\ncontaining information about the exact \"coordinates\"\r\nof injected outliers' positions.\r\nBoth types of CSV files contain data matrices that are of the same \"dimension\"\r\nas the data matrix of some-dataset.csv, and the outlier mask files\r\nhave all zeros except the \"coordinates\" of outilers which are 1 or -1\r\n(depending on the z-score of the outlier).\r\n\r\nAfter injecting outliers, you can run the above two tools on files\r\ncontaining artificial outliers to produce\r\nan OutSingle score for them. E.g.::\r\n\r\n python fast_zscore_estimation.py some-dataset/some-dataset-wo-f1-b-z6.00.txt\r\n python optht_svd_zs.py some-dataset/some-dataset-wo-f1-b-z6.00-fzse-zs.txt\r\n\r\nThat will produce a ``some-dataset/some-dataset-wo-f1-b-z6.00-fzse-zs-svd-optht-zs.csv``\r\nOutSingle score file.\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/esalkovic/outsingle/master/README.rst",
      "technique": "header_analysis"
    }
  ]
}