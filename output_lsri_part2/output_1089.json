{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/yangfangs/KPP"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-04-20T02:08:30Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-11-09T10:55:54Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "KPP (kmer phylogenetic profile) algorithm"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9954099694238369,
      "result": {
        "original_header": "**KPP: constructing phylogenetic profile and extracting feature for the prediction of PHI.**",
        "type": "Text_excerpt",
        "value": "The KPP (Kmer Phylogenetic Profile) is a new algorithm for constructing phylogenetic profile by compressing sequences to contig and generating evolutionary information features. \nUsing this feature or concatenating other features with the ML framework for the prediction of PHI (pathogen-host interaction).\n \n"
      },
      "source": "https://raw.githubusercontent.com/yangfangs/KPP/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9365077736072576,
      "result": {
        "original_header": "options",
        "type": "Text_excerpt",
        "value": "  | option  |  Description                                                                                             |\n  |:------- |:---------------------------------------------------------------------------------------------------------|\n  |  -i     |  The AA file path of species proteome.                                                                   |\n  |  -o     |  Setting output file path.                                                                               |\n  |  -k     |  Setting the parameter of kmer value (kmer length).                                                      |\n  |  -s     |  Max split file number, default is 1 (parameter for large proteome).                                     |\n  |  -m     |  Max add species number, default is 1 (equal input proteome).                                            |\n  |  -d     |  Choose profile model, default is AA(AA, CH, PO, CHP, HY).                                               | \n"
      },
      "source": "https://raw.githubusercontent.com/yangfangs/KPP/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Download test data",
        "parent_header": [
          "Example"
        ],
        "type": "Text_excerpt",
        "value": "* Test data: [Test_data.tar.gz](https://bit.ly/3fU9xJA)\n\n> If you can not clink the hyperlink, you can download test data from `ftp://23.105.208.65`\n"
      },
      "source": "https://raw.githubusercontent.com/yangfangs/KPP/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/yangfangs/KPP/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/yangfangs/KPP/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "yangfangs/KPP"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "KPP: constructing phylogenetic profile and extracting feature for the prediction of PHI."
      },
      "source": "https://raw.githubusercontent.com/yangfangs/KPP/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/yangfangs/KPP/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/yangfangs/KPP/master/algorithm/KPP.png"
      },
      "source": "https://raw.githubusercontent.com/yangfangs/KPP/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "KPP"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "yangfangs"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Java",
        "size": 67636,
        "type": "Programming_language",
        "value": "Java"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/yangfangs/KPP/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "installation",
    "citation",
    "acknowledgement",
    "run",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 13:09:07",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage:",
        "parent_header": [
          "Step3: extracting phylogenetic profile feature.",
          "Method:"
        ],
        "type": "Text_excerpt",
        "value": "```angular2html\n$ java -Xmx10190m -jar KPP.jar Index -i protein -k 19 -s 1 -m 4 -o k19_ch_index.txt -d CH\n```\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/yangfangs/KPP/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example",
        "type": "Text_excerpt",
        "value": "* Here we provide an example about using KPP algorithm create contig index, construct phylogenetic profile and extract feature by command line.\n"
      },
      "source": "https://raw.githubusercontent.com/yangfangs/KPP/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Uncompress test data",
        "parent_header": [
          "Example"
        ],
        "type": "Text_excerpt",
        "value": "```angular2html\n\n$ tar -zxvf Test_data.tar.gz\n\n```\n* This test data contains:\n\n```\nabb_species_503/  \n                aaf.fasta\n                abi.fasta\n                acan.fasta\n                acf.fasta\n                ...\nprotein/\n        ath.fasta\n        Gor.fasta\n        Hpa.fasta\n        Psy.fasta\nath_psy_hpa_gor_sequence.fasta\nKPP.jar\nReadme.txt\n\n```\n* **abb_species_503**: The folder contains proteome of 503 species for constructing phylogenetic profile. \n* **protein**: The folder contains the proteome of 4 species for build contig index.\n* **ath_psy_hpa_gor_sequence.fasta**: The protein sequence for extract feature.\n* **KPP.jar**: The jar package for KPP algorithm.\n* **Readme.txt**: command line.\n\n**Citation:** Fang Y, Yang Y and Liu C (2022) New feature extraction from phylogenetic profiles improved the performance of pathogen-host interactions. Front. Cell. Infect. Microbiol. 12:931072. doi: 10.3389/fcimb.2022.931072\n"
      },
      "source": "https://raw.githubusercontent.com/yangfangs/KPP/master/README.md",
      "technique": "header_analysis"
    }
  ]
}