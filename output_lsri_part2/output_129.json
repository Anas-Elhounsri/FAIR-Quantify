{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/yixuanh/PXStools"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-10-07T21:20:33Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-12-21T18:57:51Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Parameter Descriptions",
        "parent_header": [
          "PXStools"
        ],
        "type": "Text_excerpt",
        "value": "``xwas()``: conducts exposure wide univariate associations between the phenotype of interest and a set of exposures. \n\n*df* the data frame input\n\n*X* column name of exposure variables to run XWAS\n\n*cov* column name of covariates\n\n*mod* type of model to run; 'lm' for linear regression, 'logistic' for logistic regression; 'cox' for Cox regression\n\n*IDA* list of IDs to include in XWAS\n\n*removes* any exposure response, categorical or numerical, to remove from XWAS. This should be in the form of a list\n\n*adjust* method for adjusting for multiple comparison, see ?p.adjust to see other options\n\n*intermdiate* saves an intermediate file containing the coefficients of covariates. Default is False\n_________\n\n``manhattan_xwas()``: plots the p values of the XWAS results, analogous to a GWAS manhattan plot. Note: since the y axis is in the -log scale, there may be issues with plotting if the p value is zero or very close to zero (taking the neg log of it will be infinite)\n\n*xdff*  matrix returned from XWAS function, row names of matrix should be the X variables\n\n*pval* column name of p value\n\n*thresh* p value threshold for significance\n\n*angle* rotation of x axis labels. please refer to ggplot2 manual for more detailed description\n\n*va* vertical adjustment of x axis labels. please refer to ggplot2 manual for more detailed description\n\n*ha* horizontal adjustment of x axis labels. please refer to ggplot2 manual for more detailed description\n\n*size* text size of x axis labels. please refer to ggplot2 manual for more detailed description\n_________\n\n``plot_coeff_xwas()``: plots the coefficients of XWAS results\n\n*xdff*  matrix returned from XWAS function, rownames of matrix should be the X variables\n\n*pval* column name of p value\n\n*coeff* column name of coefficients\n\n*thresh* p value threshold for signficance\n\n*all* default is to plot only signficant associaitons, all=TRUE plots all associatons\n_________\n\n``PXS()``: builds a polyexposure risk score\n\n*df* the data frame input\n\n*X* column name of significant exposure variables from XWAS\n\n*cov* column name of covariates\n\n*mod* type of model to run; 'lm' for linear regression, 'logistic' for logistic regression; 'cox' for Cox regression\n\n*IDA* list of IDs to from XWAS procedure\n\n*IDB* list of IDs for testing set\n\n*IDC* list of IDs in the final prediction set\n\n*seed* setting a seed\n\n*removes* any exposure response, categorical or numerical, to remove from the analysis. This should be in the form of a list\n\n*fdr* whether or not to adjust for multiple hypothesis correction\n\n*intermediate* whether or not to save intermediate files\n\n*folds* number of folds for glmnet cross validation, default is 10\n\n*alph* the alpha value used in glmnet, alpha = 1 is assumed by default (lasso), setting alpha = 0 for ridge, and anything in between 0 and 1 for elastic net. please refer to glmnet documentation for more details\n_________\n\n``PXSgl()``: builds a polyexposure risk score with consideration of pairwise interactions between exposures using the group lasso method \n\n*df* the data frame input\n\n*X* column name of significant exposure variables from XWAS\n\n*cov* column name of covariates\n\n*mod* type of model to run; 'lm' for linear regression, 'logistic' for logistic regression; 'cox' for Cox regression\n\n*IDA* list of IDs to from XWAS procedure\n\n*IDB* list of IDs for testing set\n\n*IDC* list of IDs in the final prediction set\n\n*seed* setting a seed\n\n*removes* any exposure response, categorical or numerical, to remove from the analysis This should be in the form of a list\n\n*fdr* whether or not to adjust for multiple hypothesis correction\n\n*intermediate* whether or not to save intermediate files\n\n*folds* number of folds for the cross validation step, default is 10\n_________\n\n``delta_pred()``: calculates the change in predictive ability between two models. For linear models, a change in R2 wil be reported; for logistic regression models, a change in AUC will be reported; for Cox regresison models, a change in C index will be reported. The column name of the Y variable must be \"PHENO\". For Cox regression models, the time to event column name must be \"TIME\".\n\n*df* the data frame input\n\n*xvarsA* column name of variables to include in first model\n\n*xvarsB* column name of variables to include in second  model\n\n*mod* type of model to run; 'lm' for linear regression, 'logistic' for logistic regression; 'cox' for Cox regression\n\n*boot* number of bootstrap samples, default is 100\n"
      },
      "source": "https://raw.githubusercontent.com/yixuanh/PXStools/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9321267815109636,
      "result": {
        "original_header": "PXStools",
        "type": "Text_excerpt",
        "value": "PXStools is a R software package to provide tools for conducting exposure association studies. The accompanying paper can be found at: \n \n"
      },
      "source": "https://raw.githubusercontent.com/yixuanh/PXStools/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9604600110977688,
      "result": {
        "original_header": "Functions",
        "type": "Text_excerpt",
        "value": "``PXS`` : conducts the LASSO-based selection procedure on a set of given exposures to build a poly-exposure risk score for a single phenotype. It is recommended that the inputed exposures for ``PXS`` are the signficant associations from the XWAS to minimize sample loss.  \n``PXSgl`` : conducts group LASSO-based procedure on a set of given exposures to build a poly-exposure risk score for a single phenotype. It is recommended that the inputed exposures for ``PXSgl`` are the signficant associations from the XWAS to minimize sample loss.  \n``delta_pred`` : calculates the change in predictive power between two models, e.g. one with and without PXS. For linear mdoels, a change in R2 wil be reported; for logistic regression models, a change in AUC will be reported; for Cox regresison modelx, a change in C index will be reported.  \nconducts group LASSO-based procedure on a set of given exposures to build a poly-exposure risk score for a single phenotype. It is recommended that the inputed exposures for ``PXSgl`` are the signficant associations from the XWAS to minimize sample loss. \n \n"
      },
      "source": "https://raw.githubusercontent.com/yixuanh/PXStools/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9991230183658086,
      "result": {
        "original_header": "Options",
        "type": "Text_excerpt",
        "value": "In ``xwas``, ``PXS``, and ``PXSgl`` functions, the user can input any set of exposures of interest. It is also possible to run different types of regression analysis including ``lm`` for linear models, ``logistic`` for binary phenotypes, and ``cox`` for cox regression. The user can choose a set of covariates (``cov``) to adjust for at each stage of the analysis as well as which exposure factors to remove (``removes``) from the analysis. In ``PXS``, the type of regularization (LASSO, elastic net, or ridge regression) can be specificied with ``alph`` parameter. Additional documentation for function parameters are described below. \n"
      },
      "source": "https://raw.githubusercontent.com/yixuanh/PXStools/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/yixuanh/PXStools/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/yixuanh/PXStools/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "yixuanh/PXStools"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PXStools"
      },
      "source": "https://raw.githubusercontent.com/yixuanh/PXStools/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://user-images.githubusercontent.com/54297194/146267701-afa47654-6b01-4c86-bc43-42f747c27d38.png"
      },
      "source": "https://raw.githubusercontent.com/yixuanh/PXStools/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://user-images.githubusercontent.com/54297194/177420970-8d032bfb-174e-406a-8456-f4eee7b1b18f.jpeg"
      },
      "source": "https://raw.githubusercontent.com/yixuanh/PXStools/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://user-images.githubusercontent.com/54297194/177424791-310418d5-f778-48e9-bcbe-69f1b85af5a3.jpeg"
      },
      "source": "https://raw.githubusercontent.com/yixuanh/PXStools/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "PXStools"
        ],
        "type": "Text_excerpt",
        "value": "The package can be directly downloaded from R: \n```R\ninstall.packages(\"devtools\")\n```\n\nThe development version from GitHub can be downloaded with: \n```R\ndevtools::install_github(\"yixuanh/PXStools\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/yixuanh/PXStools/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/yixuanh/PXStools/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PXStools"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "yixuanh"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 32307,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/yixuanh/PXStools/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "parent_header": [
          "PXStools"
        ],
        "type": "Text_excerpt",
        "value": "The input data frame must have the following columns: \n\n``ID``: ID of individuals in dataframe\n\n``PHENO``: phenotype of interest (binary (0/1) or continuous)\n\nif running survival analysis, it must also have \n\n``TIME``: time to event or censoring\n\nIn addition to the the final prediction group, two other groups are needed to train the model. \n"
      },
      "source": "https://raw.githubusercontent.com/yixuanh/PXStools/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 09:27:50",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Example (Continuous Phenotype)",
        "parent_header": [
          "PXStools"
        ],
        "type": "Text_excerpt",
        "value": "This will be an example using the ``CONT_DF.RData`` dataset provided in the package. The CONT_DF dataset contains the individual ID, sex, gender, continuous and categorical variables, and a continuous phenotype. We will use SEX, AGE, COV_Q_OTHER, and COV_C_OTHER, as our covariate. The initial set of exposures that we are interested in are VAR_1 through VAR_33. We will be using a linear model. \n\nStore variable names: \n```R\nset.seed(7)\n\nCOV=colnames(CONT_DF)[2:5] #covariate names\nXVAR=colnames(CONT_DF)[16:48] #exposure names\nREM='L' #remove the response 'L' from our analysis \n\n#randomly sort data into three equal sized group, group C will contain individuals with a final predicted PXS\nss <- sample(1:3,size=nrow(CONT_DF),replace=TRUE,prob=c(1/5,1/5,3/5))\nid_A<-CONT_DF$ID[ss==1]\nid_B<-CONT_DF$ID[ss==2]\nid_C<-CONT_DF$ID[ss==3]\n\n```\nRun XWAS: \n```R\nXWAS_results=xwas(df=CONT_DF,X=XVAR,cov = COV,mod = 'lm',IDA = id_A,removes = REM)\nhead(XWAS_results)\n#       Estimate Std..Error   t.value     Pr...t.. nrow.stored.          fdr\n#VAR_1 494.19110   24.95760 19.801225 1.376340e-73          982 7.384411e-71\n#VAR_2 265.40248   32.29990  8.216821 6.619720e-16          982 3.382520e-14\n#VAR_3  74.70753   34.29551  2.178347 2.961965e-02          982 9.414615e-01\n#VAR_4  77.64219   34.79878  2.231175 2.589671e-02          982 8.683898e-01\n#VAR_5  35.98990   34.30748  1.049039 2.944205e-01          982 1.000000e+00\n#VAR_6 475.00995   25.62860 18.534368 6.504983e-66          982 2.326725e-63\n\n#obtain significant X's\nsigx=row.names(XWAS_results)[which(XWAS_results$fdr<0.05)]\nsigx[11:length(sigx)]=substr(sigx[11:length(sigx)],1,nchar(sigx[11:length(sigx)])-1) #remove levels and only keep name of variable\nsigx=unique(sigx)\n\nsigx\n#[1] \"VAR_1\"   \"VAR_2\"   \"VAR_6\"   \"VAR_8\"   \"VAR_9\"   \"VAR_10\"  \"VAR_14\"  \"VAR_16\"  \"VAR_17\"  \"VAR_18\"  \"VAR_22\"  \"VAR_25\" \n\n```\nVisualize results from XWAS: \n```R\nmanhattan_xwas(xdff = XWAS_results,pval = 'fdr',thresh = 0.05) #plots p values on -log10 scale\nplot_coeff_xwas(xdff = XWAS_results,pval = 'fdr',coeff='Estimate',thresh = 0.05) #plots coefficients of significant results, set all=TRUE to plot all results\n```\n![image](https://user-images.githubusercontent.com/54297194/146267701-afa47654-6b01-4c86-bc43-42f747c27d38.png)\n\nRun PXS (with only signficant exposures): \n```R\nPXSS=PXS(df=CONT_DF,X=sigx,cov=COV,removes = REM,mod = 'lm',IDA = id_A,IDB = id_B,IDC = id_C,seed=5)\n\n# \"intiating PXS procedure with 13 variables\"\n# \"excluding individuals...\"\n# \"914 individuals remain\"\n# \"transformed responsetab\"\n# \"LASSO step initiating...\"\n# \"cross validated LASSO complete\"\n# \"the  min lamda  is: 0.0181050587125221\"\n# \"11 variables remain after LASSO\"\n# \"excluding individuals...\"\n# \"930 individuals remain\"\n# \"8 remain after FS iteration 1\"\n# 8 remain after final FS iteration, they are:  VAR_22 VAR_25 VAR_1 VAR_2 VAR_6 VAR_8 VAR_10 VAR_17 \n# \"0 individuals removed due to factor having a new level\"\n\nnrow(PXSS) #number of individuals with PXS\n# 2831  \n\nhead(PXSS)\n#    ID    SEX AGE COV_Q_OTHER COV_C_OTHER        VAR_1         VAR_2        VAR_6         VAR_8      VAR_10       VAR_17 VAR_22 VAR_25 PHENO       PXS\n# 4572 FEMALE  47    7.738711  CATEGORY_5  0.003945463 -0.0007426558 -0.009524965 -0.0007623313 -0.02206128 -0.028053092      C      B    95 115.48074\n# 2754   MALE  44   15.349081  CATEGORY_5 -0.005833392 -0.0070134080  0.018185588 -0.0192416176 -0.04251531  0.004848575      D      C    77  82.13151\n# 2678   MALE  45   15.081943  CATEGORY_4 -0.004395898 -0.0047589039  0.009265629 -0.0152872580  0.00294643  0.018504878      C      B    95 116.52842\n# 3064   MALE  50    5.657369  CATEGORY_3 -0.001120768  0.0061214494 -0.007926178  0.0099030477  0.03748063  0.012897271      E      B   116 112.84812\n# 3976   MALE  66    1.470289  CATEGORY_2  0.012189827  0.0047791377  0.003133365  0.0117178749 -0.01354368 -0.017855771      G      C   102  93.11601\n# 4364 FEMALE  48   16.530377  CATEGORY_1 -0.036801092 -0.0207197737 -0.011525390  0.0050126760 -0.01347574 -0.001232650      D      C    79  77.92055\n```\nGet the change in R2 between a model with just baseline covariates versus with the addition of PXS\n```R\nvarsA=COV\nvarsB=c(COV,'PXS')\ndelta_pred(PXSS,varsA,varsB,'lm')\n# change in R2: 0.835 (0.821, 0.845)\n# first model R2:  0.001 (0.001, 0.007)\n# second model R2:  0.836 (0.824, 0.846)\n````\n\nIf you would like to consider interactions in calculate PXS, please use the PXSgl function instead:\n```R\nPXSinter=PXSgl(df=CONT_DF,X=sigx,cov=COV,removes = REM,mod = 'lm',IDA = id_A,IDB = id_B,IDC = id_C,seed=5)\n \n# \"intiating group lasso PXS procedure with 14 variables\"\n# \"excluding individuals...\"\n# \"878 individuals remain\"\n# \"cross validation with 10 folds\"\n# \"the  min lamda  is: 0.00561177934844416\"\n# \"recalibrating model in group B...\"\n# \"excluding individuals...\"\n# \"3614 individuals remain\"\n\nnrow(PXSinter) #number of individuals with PXS\n# 2727\n\nhead(PXSinter)\n#    ID    SEX AGE COV_Q_OTHER COV_C_OTHER      PC_1      PC_2       PC_3      PC_4        VAR_1         VAR_2        VAR_6         VAR_8\n# 4572 FEMALE  47    7.738711  CATEGORY_5 1.2674114 0.9203929  2.6974477 0.9914804  0.003945463 -0.0007426558 -0.009524965 -0.0007623313\n# 2754   MALE  44   15.349081  CATEGORY_5 0.5550317 0.9852589 -2.4922787 2.0085929 -0.005833392 -0.0070134080  0.018185588 -0.0192416176\n# 2678   MALE  45   15.081943  CATEGORY_4 0.5632954 1.1129693 -1.5017750 2.6902221 -0.004395898 -0.0047589039  0.009265629 -0.0152872580\n# 3064   MALE  50    5.657369  CATEGORY_3 0.1701464 0.9345670  0.5661696 1.1395434 -0.001120768  0.0061214494 -0.007926178  0.0099030477\n# 3976   MALE  66    1.470289  CATEGORY_2 1.1001742 0.4358340  0.8061108 1.1374945  0.012189827  0.0047791377  0.003133365  0.0117178749\n# 4364 FEMALE  48   16.530377  CATEGORY_1 0.9128850 1.3486736  0.5913076 0.3542070 -0.036801092 -0.0207197737 -0.011525390  0.0050126760\n#        VAR_9      VAR_10       VAR_14       VAR_16       VAR_18 VAR_22 VAR_25 VAR_27 PHENO      pred\n#  0.014674896 -0.02206128  0.028193331 -0.003030358 -0.021275163      C      B      J    95 117.08439\n#  0.010574598 -0.04251531 -0.004591859 -0.021717874  0.026210946      D      C      P    77  90.66943\n# -0.037871902  0.00294643 -0.073432151 -0.015424781  0.006503829      C      B      Q    95 125.55657\n# -0.001291723  0.03748063  0.002486285  0.009385328 -0.036010278      E      B      Y   116 119.09216\n#  0.018172056 -0.01354368  0.030513644 -0.002688886  0.010949063      G      C      U   102 100.76497\n# -0.010092473 -0.01347574 -0.010005814 -0.007991927 -0.031461808      D      C      Q    79  77.73137\n```\n"
      },
      "source": "https://raw.githubusercontent.com/yixuanh/PXStools/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example (Binary Phenotype)",
        "parent_header": [
          "PXStools"
        ],
        "type": "Text_excerpt",
        "value": "This will be an example using the ``BINARY_DF.RData`` dataset provided in the package. The BINARY_DF dataset contains the individual ID, sex, gender, continuous and categorical variables, a binary phenotype, and time to event data. We will use SEX, AGE, COV_Q_OTHER, and COV_C_OTHER, as our covariate. The initial set of exposures that we are interested in are VAR_1 through VAR_33. We will be using the logistic model. \n\n```R\nset.seed(7)\nCOV=colnames(BINARY_DF)[2:9] #covariate names\nXVAR=colnames(BINARY_DF)[16:50] #exposure names\nREM='L' #remove the response 'B' from our analysis \n\n#randomly sort data into three equal sized group, group C will contain individuals with a final predicted PXS\nss <- sample(1:3,size=nrow(BINARY_DF),replace=TRUE,prob=c(1/5,1/5,3/5))\nid_A<-BINARY_DF$ID[ss==1]\nid_B<-BINARY_DF$ID[ss==2]\nid_C<-BINARY_DF$ID[ss==3]\n```\nRun XWAS: \n```R\nXWAS_results=xwas(df=BINARY_DF,X=XVAR,cov = COV,mod = 'logistic',IDA = id_A,removes = REM)\nhead(XWAS_results)\n#        Estimate Std..Error    z.value     Pr...z.. nrow.stored.          fdr\n#VAR_1 66.8837233   5.362552 12.4723671 1.056406e-35          982 1.307498e-32\n#VAR_2 24.7163927   4.629661  5.3387043 9.361316e-08          982 1.655195e-05\n#VAR_3  5.7229386   4.568069  1.2528136 2.102736e-01          982 1.000000e+00\n#VAR_4 10.7767723   4.657384  2.3139112 2.067259e-02          982 8.822817e-01\n#VAR_5 -0.8885037   4.547791 -0.1953704 8.451030e-01          982 1.000000e+00\n#VAR_6 64.0887303   5.296899 12.0992930 1.065247e-33          982 6.592203e-31\n\n#obtain significant X's\nsigx=row.names(XWAS_results)[which(XWAS_results$fdr<0.05)]\nsigx[8:length(sigx)]=substr(sigx[8:length(sigx)],1,nchar(sigx[8:length(sigx)])-1) #remove levels and only keep name of variable\nsigx=unique(sigx)\n\nsigx\n# \"VAR_1\"   \"VAR_2\"   \"VAR_6\"   \"VAR_8\"   \"VAR_9\"   \"VAR_10\"  \"VAR_18\"  \"VAR_22\"  \"VAR_25\"\n```\n\nVisualize results from XWAS: \n```R\nmanhattan_xwas(xdff = XWAS_results,pval = 'fdr',thresh = 0.05) #plots p values on -log10 scale\nplot_coeff_xwas(xdff = XWAS_results,pval = 'fdr',coeff='Estimate',thresh = 0.05) #plots coefficients of significant results, set all=TRUE to plot all results\n```\n![Untitled 4 001](https://user-images.githubusercontent.com/54297194/177420970-8d032bfb-174e-406a-8456-f4eee7b1b18f.jpeg)\n\nRun PXS (with only signficant exposures): \n```R\n#PXSS=PXS(df=BINARY_DF,X=sigx,cov=COV,removes = REM,mod = 'logistic',IDA = id_A,IDB = id_B,IDC = id_C,seed=5)\n#intiating PXS procedure with 9 variables\n#excluding individuals...\n#914 individuals remain\n#transformed responsetab\n#LASSO initiating...\n#cross validation complete\n#the  min lamda  is: 0.0313078739623684\n#9 variables remain after regularization\n#excluding individuals...\n#930 individuals remain\n#5 remain after BackS iteration 1\n#5 remain after final BackS iteration, they are:  VAR_22 VAR_25 VAR_1 VAR_6 VAR_8\n#0 individuals removed due to factor having a new level\n```\n\nBy default, PXS uses LASSO regularization. Elastic net or ridge regression can also be implemented by specifying the alpha value. As an example, we can rerun PXS with ridge regression:\n```R\nPXSS=PXS(df=BINARY_DF,X=sigx,cov=COV,removes = REM,mod = 'logistic',IDA = id_A,IDB = id_B,IDC = id_C,seed=5,alph=0)\n#intiating PXS procedure with 10 variables\n#excluding individuals...\n#914 individuals remain\n#transformed responsetab\n#ridge regression initiating...\n#cross validation complete\n#the  min lamda  is: 0.0313078739623684\n#9 variables remain after regularization\n#excluding individuals...\n#930 individuals remain\n#5 remain after BackS iteration 1\n#5 remain after final BackS iteration, they are:  VAR_22 VAR_25 VAR_1 VAR_6 VAR_8 \n#0 individuals removed due to factor having a new level\n```\n\nTo get the change in AUC between a model with just baseline covariates versus with the addition of PXS:\n\n```R\nvarsA=COV\nvarsB=c(COV,'PXS')\ndelta_pred(PXSS,varsA,varsB,'logistic')\n# change in AUC: 0.377 (0.338, 0.385)\n# first model AUC: 0.526 (0.527, 0.563)\n# second model AUC: 0.903 (0.892, 0.914)\n````\n"
      },
      "source": "https://raw.githubusercontent.com/yixuanh/PXStools/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example (Survival Analysis)",
        "parent_header": [
          "PXStools"
        ],
        "type": "Text_excerpt",
        "value": "This will be an example using the ``BINARY_DF.RData`` dataset provided in the package. The BINARY_DF dataset contains the individual ID, sex, gender, continuous and categorical variables, a binary phenotype, and time to event data. We will use SEX, AGE, COV_Q_OTHER, and COV_C_OTHER, as our covariate. The initial set of exposures that we are interested in are VAR_1 through VAR_33. We will be using the logistic model. \n\n```R\nset.seed(7)\nload('/Users/yixuanhe/Dropbox (HMS)/PATEL/R_Packages/PXStools/PXStools/data/BINARY_DF.RData')\nCOV=colnames(BINARY_DF)[2:9] #covariate names\nXVAR=colnames(BINARY_DF)[16:50] #exposure names\nREM='L' #remove the response 'B' from our analysis \n\n#randomly sort data into three equal sized group, group C will contain individuals with a final predicted PXS\nss <- sample(1:3,size=nrow(BINARY_DF),replace=TRUE,prob=c(1/5,1/5,3/5))\nid_A<-BINARY_DF$ID[ss==1]\nid_B<-BINARY_DF$ID[ss==2]\nid_C<-BINARY_DF$ID[ss==3]\n```\n\nRun XWAS\n```R\nXWAS_results=xwas(df=BINARY_DF,X=XVAR,cov = COV,mod = 'cox',IDA = id_A,removes = REM)\nhead(XWAS_results)\n\n#           coef    exp.coef. se.coef.          z     Pr...z.. nrow.stored.          fdr\n#VAR_1 27.877006 1.278880e+12 2.669075 10.4444442 1.553628e-25          982 1.922903e-22\n#VAR_2  8.728393 6.175793e+03 2.853299  3.0590533 2.220377e-03          982 2.217052e-01\n#VAR_3  5.004221 1.490409e+02 3.054618  1.6382478 1.013700e-01          982 1.000000e+00\n#VAR_4 10.088868 2.407353e+04 3.079373  3.2762737 1.051866e-03          982 1.446532e-01\n#VAR_5  1.307285 3.696126e+00 3.061649  0.4269873 6.693886e-01          982 1.000000e+00\n#VAR_6 27.202800 6.516670e+11 2.730609  9.9621720 2.231337e-23          982 9.205645e-21\n\n#obtain significant X's\nsigx=row.names(XWAS_results)[which(XWAS_results$fdr<0.05)]\nsigx[5:length(sigx)]=substr(sigx[5:length(sigx)],1,nchar(sigx[5:length(sigx)])-1) #remove levels and only keep name of variable\nsigx=unique(sigx)\n\nsigx\n#\"VAR_1\"  \"VAR_6\"  \"VAR_10\" \"VAR_18\" \"VAR_22\" \"VAR_25\"\n```\n\nVisualize results from XWAS: \n```R\nmanhattan_xwas(xdff = XWAS_results,pval = 'fdr',thresh = 0.05) #plots p values on -log10 scale\nplot_coeff_xwas(xdff = XWAS_results,pval = 'fdr',coeff='coef',thresh = 0.05) #plots coefficients of significant results, set all=TRUE to plot all results\n```\n![Untitled 4 001](https://user-images.githubusercontent.com/54297194/177424791-310418d5-f778-48e9-bcbe-69f1b85af5a3.jpeg)\n\nBuild PXS:\n```R\nPXSS=PXS(df=BINARY_DF,X=sigx,cov=COV,removes = REM,mod = 'cox',IDA = id_A,IDB = id_B,IDC = id_C,seed=5)\n#intiating PXS procedure with 6 variables\n#excluding individuals...\n#914 individuals remain\n#transformed responsetab\n#LASSO initiating...\n#cross validated LASSO complete\n#the  min lamda  is: 0.026512783464246\n#5 variables remain after LASSO\n#excluding individuals...\n#930 individuals remain\n#4 remain after BackS iteration 1\n#4 remain after final BackS iteration, they are:  VAR_25 VAR_1 VAR_10 VAR_18 \n#0 individuals removed due to factor having a new level\n```\nTo get the change in C index between a model with just baseline covariates versus with the addition of PXS:\n\n```R\nvarsA=COV\nvarsB=c(COV,'PXS')\ndelta_pred(PXSS,varsA,varsB,'lm')\n# change in C index: 0.148 (0.123, 0.162)\n# first model C index: 0.522 (0.512, 0.547)\n# second model C index: 0.67 (0.658, 0.683)\n````\nTo note: for survival anlysis, delta_pred() is only able to get change in C index. If you would like to get the net reclassification index (NRI), please check out existing methods such as the ['nricens'](https://cran.r-project.org/web/packages/nricens/nricens.pdf) R package.\n"
      },
      "source": "https://raw.githubusercontent.com/yixuanh/PXStools/main/README.md",
      "technique": "header_analysis"
    }
  ]
}