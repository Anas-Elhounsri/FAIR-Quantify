{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/bihealth/clear-cnv"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-06-30T21:49:01Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-07-25T16:31:45Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ClearCNV - CNV analysis in the presence of ambiguity and noise"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9259172091486289,
      "result": {
        "original_header": "Case two",
        "type": "Text_excerpt",
        "value": "You have several panels and you're not really sure if the bam files are assigned correctly to each panel. You want the panels and batches separated and to call CNVs on each of them.\n* Write a 'meta-file' like [this one](tests/testdata/meta.tsv).\n  * Copy all full paths of your bam files that you think belong to panel 1 to a txt-file e.g. '/path/to/p1_bamfiles.txt'.\n  * Copy all full paths of your bam files that you think belong to panel 2 to a txt-file e.g. '/path/to/p2_bamfiles.txt'. Do that for all panels. \n  * Your '/path/to/meta.tsv' file would look like this: `genepanel\\t/path/to/bams.txt\\t/path/to/genepanel.bed`\n* Run `clearCNV workflow_reassignment`. Type `clearCNV workflow_reassignment --help` to see how.\n* Run `clearCNV visualize_reassignment`. Type `clearCNV visualize_reassignment --help` to see how. You'll need to open the URL with your browser.\n* After you ran each step in your browser, there will be a folder that contains all newly assigned batches. In each panel/batch you'll find a txt file that contains patchs to .bam files. These are your batches! Proceed with the `clearCNV workflow_cnv_calling` step for each batch. Type `clearCNV workflow_cnv_calling --help` to see how.\n* Read more: https://github.com/bihealth/clear-cnv/blob/master/README.md#how-to-and-workflow\n \n"
      },
      "source": "https://raw.githubusercontent.com/bihealth/clear-cnv/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9706119041649199,
      "result": {
        "original_header": "HOW TO and WORKFLOW",
        "type": "Text_excerpt",
        "value": "clearCNV comprises of two major workflows and three major commads:\n \n"
      },
      "source": "https://raw.githubusercontent.com/bihealth/clear-cnv/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9118940932676866,
      "result": {
        "original_header": "NOTES",
        "type": "Text_excerpt",
        "value": "The chromosome name scheme in the reference and .bed-file should be of the forms: ChrX, chrX, X or Chr1, chr1, 1. \nCNV calling on chr X or chr Y: clearCNV automatically determines the copy number of the gonosomes. If your panel targets only a single gene per chromosome, then it is better to delete according targets from the original .bed file to exclude them. It is necessary to have about double as many samples in your data set to enable meaningful CNV calling on the X or Y chromosomes with roughly equally many women and men in the samples. \nIf you do sample re-assignment on your own data, followed by CNV-calling, then only one metafile, one coverages file, and one bedfile will be used. This means that `--metafile`, `--coverages` and `--bedfile` are given the same file paths in both workflow steps `clearCNV workflow_reassignment` and `clearCNV visualize_reassignment` of clearCNV. The coverages file can not be re-used for the CNV calling steps.\n \n"
      },
      "source": "https://raw.githubusercontent.com/bihealth/clear-cnv/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/bihealth/clear-cnv/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/bihealth/clear-cnv/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bihealth/clear-cnv"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ClearCNV: Clinical sequencing panel CNV caller and visualizer"
      },
      "source": "https://raw.githubusercontent.com/bihealth/clear-cnv/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bihealth/clear-cnv/master/clearCNV/coverage.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "conda",
        "parent_header": [
          "ClearCNV: Clinical sequencing panel CNV caller and visualizer",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "ClearCNV is available on conda: https://anaconda.org/bioconda/clearcnv\n\nI'd recommend to create a conda env:\n\n```mamba create -n clearcnv clearcnv -c conda-forge -c bioconda```\n\nor\n\n```conda create -n clearcnv clearcnv -c conda-forge -c bioconda```\n\n\nThen clone this repo to your favorite location ```git clone git@github.com:bihealth/clear-cnv.git``` and `cd clear-cnv` into it. Lastly, activate the environment via ```mamba activate clearcnv``` or ```conda activate clearcnv```. Now you can run the commands listed below.\n"
      },
      "source": "https://raw.githubusercontent.com/bihealth/clear-cnv/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "preparations",
        "parent_header": [
          "ClearCNV: Clinical sequencing panel CNV caller and visualizer",
          "HOW TO and WORKFLOW"
        ],
        "type": "Text_excerpt",
        "value": "Some files have to be acquired or created before these commands can be run:\n1) re-assignment:\n    \n    a) For each sequencing panel a .bed file is needed following this [form](tests/testdata/panel1.bed).\n    \n    b) For each sequencing panel (or .bed-file containing all target informations) a simple list of the according .bam files is needed. An example can be found [here](tests/testdata/reassignment_p1_bamfiles.txt). Make sure to use absolute paths for this file.\n    \n    c) meta-file. This file is a tab-separated file and one example can be found [here](tests/testdata/meta.tsv). To avoid any confusion, we recommend using absolute paths here again.\n\n2) CNV calling:\n\n    a) A genome reference file. It must be the same that was used to create the read alignment files (.bam files).\n    \n    b) `workflow_cnv_calling` does CNV calling for each batch (or sequencing panel associated data set) separately. A text file with all .bam file paths for each batch and panel must be created. [Here](tests/testdata/test_reassignment_p1_bamfiles.txt) is an example showing only one .bam file path. Multiple paths are separated with a newline. This file is usually an output of `clearCNV visualize_reassignment`.\n    \n    c) The .bed-file for the sequencing panel for which this batch is put to CNV calling. An example can be found [here](tests/testdata/panel1.bed). Note that `gene` is optimally replaced with the real name of the exon, gene or target.\n    \n    d) A k-mer alignability file in .bed format. Such files can be downloaded from UCSC (e.g. for Hg19 [here](http://genome.ucsc.edu/cgi-bin/hgFileUi?db=hg19&g=wgEncodeMapability)). A k-mer mappability track can also be created for example using [GenMap](https://github.com/cpockrandt/genmap). In both cases the resulting Wig or BigWig files need to be converted to .bed to be used by clearCNV.\n"
      },
      "source": "https://raw.githubusercontent.com/bihealth/clear-cnv/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999999961358981,
      "result": {
        "original_header": "Case one",
        "type": "Text_excerpt",
        "value": "You have one gene panel (e.g. called '/path/to/genepanel.bed') and a collection of aligned short reads (sample_xy0.bam, sample_xy1.bam, ..) and you want to call CNVs.\n* Write a 'meta-file' like [this one](tests/testdata/meta.tsv).\n  * Copy all full paths of your bam files to a txt-file e.g. '/path/to/bams.txt'.\n  * Your '/path/to/meta.tsv' file would look like this: `genepanel\\t/path/to/bams.txt\\t/path/to/genepanel.bed`\n* Use `clearCNV workflow_cnv_calling`. Type `clearCNV workflow_cnv_calling --help` to see how.\n* Check the QC files to see if everything went well.\n* Read more: https://github.com/bihealth/clear-cnv/blob/master/README.md#how-to-and-workflow\n \n"
      },
      "source": "https://raw.githubusercontent.com/bihealth/clear-cnv/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999999997696705,
      "result": {
        "original_header": "Case two",
        "type": "Text_excerpt",
        "value": "You have several panels and you're not really sure if the bam files are assigned correctly to each panel. You want the panels and batches separated and to call CNVs on each of them.\n* Write a 'meta-file' like [this one](tests/testdata/meta.tsv).\n  * Copy all full paths of your bam files that you think belong to panel 1 to a txt-file e.g. '/path/to/p1_bamfiles.txt'.\n  * Copy all full paths of your bam files that you think belong to panel 2 to a txt-file e.g. '/path/to/p2_bamfiles.txt'. Do that for all panels. \n  * Your '/path/to/meta.tsv' file would look like this: `genepanel\\t/path/to/bams.txt\\t/path/to/genepanel.bed`\n* Run `clearCNV workflow_reassignment`. Type `clearCNV workflow_reassignment --help` to see how.\n* Run `clearCNV visualize_reassignment`. Type `clearCNV visualize_reassignment --help` to see how. You'll need to open the URL with your browser.\n* After you ran each step in your browser, there will be a folder that contains all newly assigned batches. In each panel/batch you'll find a txt file that contains patchs to .bam files. These are your batches! Proceed with the `clearCNV workflow_cnv_calling` step for each batch. Type `clearCNV workflow_cnv_calling --help` to see how.\n* Read more: https://github.com/bihealth/clear-cnv/blob/master/README.md#how-to-and-workflow\n \n"
      },
      "source": "https://raw.githubusercontent.com/bihealth/clear-cnv/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.973031486697727,
      "result": {
        "original_header": "workflow",
        "type": "Text_excerpt",
        "value": "1) re-assignment (not necessary for CNV calling)\n    \n    a) `clearCNV workflow_reassignment`\n    \n    b) `clearCNV visualize_reassignment`\n    \n2) CNV calling\n    \n    a) `clearCNV workflow_cnv_calling`\n \n"
      },
      "source": "https://raw.githubusercontent.com/bihealth/clear-cnv/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/bihealth/clear-cnv/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2019-2020, Berlin Institute of Health\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/bihealth/clear-cnv/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "clear-cnv"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "bihealth"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 198501,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CSS",
        "size": 619,
        "type": "Programming_language",
        "value": "CSS"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 388,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bihealth/clear-cnv/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "vinzenzmay",
          "type": "User"
        },
        "date_created": "2022-07-08T10:06:43Z",
        "date_published": "2022-07-08T10:27:18Z",
        "description": "pinned Dash and werkzeug; Changed default value from \"\" to None for default os.abspath in 'visualize_reassignment' subcommand.",
        "html_url": "https://github.com/bihealth/clear-cnv/releases/tag/v0.306",
        "name": "fixed version pinning in install via pip",
        "release_id": 71552500,
        "tag": "v0.306",
        "tarball_url": "https://api.github.com/repos/bihealth/clear-cnv/tarball/v0.306",
        "type": "Release",
        "url": "https://api.github.com/repos/bihealth/clear-cnv/releases/71552500",
        "value": "https://api.github.com/repos/bihealth/clear-cnv/releases/71552500",
        "zipball_url": "https://api.github.com/repos/bihealth/clear-cnv/zipball/v0.306"
      },
      "technique": "GitHub_API"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Create all files",
        "parent_header": [
          "ClearCNV: Clinical sequencing panel CNV caller and visualizer",
          "Quick run checks and examples",
          "Sample reassignment:"
        ],
        "type": "Text_excerpt",
        "value": "Execute the shell commamd (from within the cloned repo directory):\n```clearCNV workflow_reassignment --workdir tests/testdata/ --reference tests/testdata/test_reassignment_ref.fa --metafile tests/testdata/test_reassign_meta.tsv --coverages tests/testdata/test_reassignment_coverages.tsv --bedfile tests/testdata/test_reassignment_union.bed --cores 2```\n\n - INPUT: working directory given by `--workdir`, the files given by `--reference` and `--metafile`.\n - OUTPUT: files created at `--coverages` and `--bedfile`. They are used in the next step.\n\nIf you want to create the necessary files for yourown data just edit the meta.tsv file analogously to the example at `clearCNV/tests/testdata/meta.tsv`, where you can add more rows for each targets file (BED-file). It is recommended to use absolute paths in the meta file.\n\nOptionally, **drmaa** can be used, if the two flags are present:\n`--drmaa_mem 1600 --drmaa_time 4:00`,\nwhere drmaa is given 16 Gb memory per core and and four hours maximum running time.\nAlso, a cluster config file in .json format can be given with `--cluster_configfile config.json`\n"
      },
      "source": "https://raw.githubusercontent.com/bihealth/clear-cnv/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Visualize and adjust the clusterings and final panel assignments",
        "parent_header": [
          "ClearCNV: Clinical sequencing panel CNV caller and visualizer",
          "Quick run checks and examples",
          "Visualize sample reassignment:"
        ],
        "type": "Text_excerpt",
        "value": "Execute the shell commamd (from within the cloned repo directory):\n```clearCNV visualize_reassignment --metafile tests/testdata/meta.tsv --coverages tests/testdata/cov_reassignment.tsv --bedfile tests/testdata/reassignment_union.bed --new_panel_assignments_directory tests/testdata/panel_assignments```\n\n - INPUT: files given by `--metafile`, `--coverages` and `--bedfile`.\n - OUTPUT: files found in given directory `--new_panel_assignments_directory`.\n"
      },
      "source": "https://raw.githubusercontent.com/bihealth/clear-cnv/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Match scores",
        "parent_header": [
          "ClearCNV: Clinical sequencing panel CNV caller and visualizer",
          "Quick run checks and examples",
          "CNV calling"
        ],
        "type": "Text_excerpt",
        "value": "At first, match scores are claculated. Go to the directory `clear-cnv/` and execute the shell command:\n\n```clearCNV matchscores -p testpanel -c tests/testdata/cov.tsv -m tests/testdata/matchscores.tsv```\n\nThis creates a match score matrix which is used in the CNV calling step.\n"
      },
      "source": "https://raw.githubusercontent.com/bihealth/clear-cnv/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "CNV calls",
        "parent_header": [
          "ClearCNV: Clinical sequencing panel CNV caller and visualizer",
          "Quick run checks and examples",
          "CNV calling"
        ],
        "type": "Text_excerpt",
        "value": "Now execute this shell command:\n\n```clearCNV cnv_calling -p testpanel -c tests/testdata/cov.tsv -a tests/testdata/testpanel/analysis -m tests/testdata/matchscores.tsv -C tests/testdata/testpanel/results/cnv_calls.tsv -r tests/testdata/testpanel/results/rscores.tsv -z tests/testdata/testpanel/results/zscores.tsv -g 15 -u 3```\n\nThis creates the file `tests/testdata/testpanel/results/cnv_calls.tsv` which shows one called deletion. if you copy & paste this for your own data, please don't use the `-g 15 -u 3` configuration. We use these in here just to be able to work with a tiny example.\n\nMore files for analysis can now be found in `tests/testdata/testpanel/analysis`.\n"
      },
      "source": "https://raw.githubusercontent.com/bihealth/clear-cnv/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running Checks",
        "parent_header": [
          "ClearCNV: Clinical sequencing panel CNV caller and visualizer",
          "HOW TO and WORKFLOW"
        ],
        "type": "Text_excerpt",
        "value": "Checks are automatically run on the `master` branch and pull requests.\nUnit and integration tests are based on pytest and formatting is enforced with black.\n\n\n```bash\n$ make test\n```\n"
      },
      "source": "https://raw.githubusercontent.com/bihealth/clear-cnv/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 14:09:52",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Create all files",
        "parent_header": [
          "ClearCNV: Clinical sequencing panel CNV caller and visualizer",
          "Quick run checks and examples",
          "Sample reassignment:"
        ],
        "type": "Text_excerpt",
        "value": "Execute the shell commamd (from within the cloned repo directory):\n```clearCNV workflow_reassignment --workdir tests/testdata/ --reference tests/testdata/test_reassignment_ref.fa --metafile tests/testdata/test_reassign_meta.tsv --coverages tests/testdata/test_reassignment_coverages.tsv --bedfile tests/testdata/test_reassignment_union.bed --cores 2```\n\n - INPUT: working directory given by `--workdir`, the files given by `--reference` and `--metafile`.\n - OUTPUT: files created at `--coverages` and `--bedfile`. They are used in the next step.\n\nIf you want to create the necessary files for yourown data just edit the meta.tsv file analogously to the example at `clearCNV/tests/testdata/meta.tsv`, where you can add more rows for each targets file (BED-file). It is recommended to use absolute paths in the meta file.\n\nOptionally, **drmaa** can be used, if the two flags are present:\n`--drmaa_mem 1600 --drmaa_time 4:00`,\nwhere drmaa is given 16 Gb memory per core and and four hours maximum running time.\nAlso, a cluster config file in .json format can be given with `--cluster_configfile config.json`\n"
      },
      "source": "https://raw.githubusercontent.com/bihealth/clear-cnv/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Visualize and adjust the clusterings and final panel assignments",
        "parent_header": [
          "ClearCNV: Clinical sequencing panel CNV caller and visualizer",
          "Quick run checks and examples",
          "Visualize sample reassignment:"
        ],
        "type": "Text_excerpt",
        "value": "Execute the shell commamd (from within the cloned repo directory):\n```clearCNV visualize_reassignment --metafile tests/testdata/meta.tsv --coverages tests/testdata/cov_reassignment.tsv --bedfile tests/testdata/reassignment_union.bed --new_panel_assignments_directory tests/testdata/panel_assignments```\n\n - INPUT: files given by `--metafile`, `--coverages` and `--bedfile`.\n - OUTPUT: files found in given directory `--new_panel_assignments_directory`.\n"
      },
      "source": "https://raw.githubusercontent.com/bihealth/clear-cnv/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Match scores",
        "parent_header": [
          "ClearCNV: Clinical sequencing panel CNV caller and visualizer",
          "Quick run checks and examples",
          "CNV calling"
        ],
        "type": "Text_excerpt",
        "value": "At first, match scores are claculated. Go to the directory `clear-cnv/` and execute the shell command:\n\n```clearCNV matchscores -p testpanel -c tests/testdata/cov.tsv -m tests/testdata/matchscores.tsv```\n\nThis creates a match score matrix which is used in the CNV calling step.\n"
      },
      "source": "https://raw.githubusercontent.com/bihealth/clear-cnv/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "CNV calls",
        "parent_header": [
          "ClearCNV: Clinical sequencing panel CNV caller and visualizer",
          "Quick run checks and examples",
          "CNV calling"
        ],
        "type": "Text_excerpt",
        "value": "Now execute this shell command:\n\n```clearCNV cnv_calling -p testpanel -c tests/testdata/cov.tsv -a tests/testdata/testpanel/analysis -m tests/testdata/matchscores.tsv -C tests/testdata/testpanel/results/cnv_calls.tsv -r tests/testdata/testpanel/results/rscores.tsv -z tests/testdata/testpanel/results/zscores.tsv -g 15 -u 3```\n\nThis creates the file `tests/testdata/testpanel/results/cnv_calls.tsv` which shows one called deletion. if you copy & paste this for your own data, please don't use the `-g 15 -u 3` configuration. We use these in here just to be able to work with a tiny example.\n\nMore files for analysis can now be found in `tests/testdata/testpanel/analysis`.\n"
      },
      "source": "https://raw.githubusercontent.com/bihealth/clear-cnv/master/README.md",
      "technique": "header_analysis"
    }
  ]
}