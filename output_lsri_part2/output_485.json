{
  "application_domain": [
    {
      "confidence": 18.49,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/netbiolab/scHumanNet"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-03-10T22:23:44Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-14T03:42:25Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Analysis cell-type-specific functional gene network, with SCINET and HumanNetv3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Framework Introduction",
        "parent_header": [
          "scHumanNet"
        ],
        "type": "Text_excerpt",
        "value": "scHumanNet enables cell-type specific networks with scRNA-seq data. The\n[SCINET framework (Mohammade et al.\u00a0Cell Syst.\n2019)](https://www-sciencedirect-com.ezp-prod1.hul.harvard.edu/science/article/pii/S2405471219303837?via%3Dihub)\ntakes a single cell gene expression profile and the \u201creference\ninteractome\u201d HumanNet v3, to construct a list of cell-type specific\nnetwork. With the modified version of SCINET source code and the\ndetailed tutorial described below, researchers could take any\nsingle-cell RNA sequencing (scRNA-seq) data of any biological context\n(e.g., disease) and construct their own cell-type specific network for\ndownstream analysis.\n\n![](images/Figure1A.png)\n\nFor a given scRNA-seq data set, the SCINET framework utilize imputation,\ntransformation, and normalization from the [ACTIONet package(Mohammadi\net al.\u00a0Nat. Commun.\n2018)](https://doi.org/10.1038/s41467-020-18416-6)\nto robustly capture cell-level gene interactions. HumanNet v3 with 1.1\nmillion weighted edges are used as a scaffold information to infer the\nlikelihood of each gene interactions. A subsampling scheme for each\ncell-type clusters (cell groups) ensures retaining of accurate gene\ninteraction strength despite the incompleteness of single cell dataset\nat high resolution. Overall, we show that HumanNet v3 not only allow\ngene prioritization in broad spectrum of diseases, but through\nconstruction of context specific cell-type networks, also allow an\nin-depth study of disease heterogeneity and its underlying mechanism at\na cellular level.\n"
      },
      "source": "https://raw.githubusercontent.com/netbiolab/scHumanNet/main/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9953623838822158,
      "result": {
        "original_header": "scHumanNet",
        "type": "Text_excerpt",
        "value": "Construction and analysis of cell-type-specific functional gene network, with SCINET\nand HumanNetv3\n \n"
      },
      "source": "https://raw.githubusercontent.com/netbiolab/scHumanNet/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9736124082095898,
      "result": {
        "original_header": "Network Connectivity Deconvolution with user input geneset",
        "type": "Text_excerpt",
        "value": "With scHumanNet we also provide a computaitonal framework to statistically asssess the connectivty of a given geneset at the cellular level of scHumanNets. In this example we use the Immune Checkpoint molecules(ICMs) as a geneset to assess in what celltypes these genesets have strong co-functional characteristic. In common cases user may use a DEG derived genesets or bulk sample derived signatures genes to find whether the genesets' cofunctionality is supported constructed scHumanNet models.  \nThe output of `Connectivity()` is a list with three elements: 1. the null distribution vector of selected random gene's connectivity. 2. non-parametric pvalue of the user-input geneset. 3. geneset vector that was detected in the input scHumanNet.\n``` r\ndata(\"ICMs_auslander\")\nicm.connectivity <- DeconvoluteNet(network = sorted.net.list, geneset = icm.genes)\nicm.connectivity.tcell <- Connectivity(network = sorted.net.list[[\"T_cell\"]], geneset = icm.genes, simulate.num = 10000)\n\n#we can also perform a conncectivity test for all scHumanNets. this will take some time...\nicm.connectivity.nulltest.list <- lapply(sorted.net.list, function(net){Connectivity(network = net, geneset = icm.genes, simulate.num=10000)})\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/netbiolab/scHumanNet/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9527992109374335,
      "result": {
        "original_header": "Using multiple user genesets for comparison",
        "type": "Text_excerpt",
        "value": "Of note, we can also compare the functional connectivity of multiple genesets. In this case, the geneset is provided as a named list for parameter geneset of `DeconvoluteNet()`. In this case the output dataframe contains column Connectivity number normlalized for the length of detected signatures. It is often informative to find which geneset have the most co-functional properties by utilizing scatter plots. Here we show that in the breast cancer signature genesets, signature GGI97, Robust, Tcell have most connectivity. In practice, this function can be potentially used to deconvolute previously identified genesets and analyze the cellular context of co-functionality of user's scRNA seq dataset. \nIt is often times useful to see which geneset has most co-functionality. We show in the example here that geneset GGI97, Robust, Tcell is the most cofunctional geneset when assessed for their connectivty in the entire HumanNetv3 interactiome compared to the numeber of geneset. For detailed use of the reference interactome, please refer to [the HumanNetv3 Web Server](https://www.inetbio.org/humannet/).\n``` r\nlibrary(ggpubr)\nlibrary(ggplot2)\nlibrary(ggrepel)\nlibrary(patchwork) \n\ndata(\"BC_signatures\")\nbcsig.connectivity <- DeconvoluteNet(network = sorted.net.list, geneset = bc.sig.list)\n\n\n#get sum of connectivity for each signature\nconnectivity.sum <- with(bcsig.connectivity,tapply(connectivity.normalized,signature_name,FUN=sum))\nmylevels <- names(connectivity.sum[order(connectivity.sum, decreasing = T)])\n\nbcsig.connectivity$signature_name <- factor(bcsig.connectivity$signature_name, levels = mylevels)\n\np1 <- ggplot(bcsig.connectivity, aes(x=signature_name, y=connectivity.normalized, fill=scHumanNet))+\n  geom_bar(position = 'stack', stat = 'identity') +\n  theme_classic()+\n  theme(\n    panel.grid=element_blank(),\n    legend.text=element_text(size=10),\n    text = element_text(size=12),\n    legend.title = element_blank(),\n    axis.title.x = element_blank()\n  )+  \n  ylab(\"Normalized # of within group connectivity\")+\n  xlab(\"Breast Cancer prognostic signatures\") +\n  rotate_x_text(45) +\n  scale_y_continuous(expand = c(0, 0))\n\n\nhnv3.connectivity.sig <- GenesetHnv3(geneset = bc.sig.list)\n  \np2 <- ggscatter(hnv3.connectivity.sig, x = \"siggene_num_detected\", y = \"connectivity\", \n                label = \"name\", repel = TRUE,\n                add = 'reg.line', conf.int = T,\n                add.params = list(color='blue', fill = 'lightgray')) +\n  stat_cor(method = \"pearson\", label.x = 200, label.y = 1000)\n  \n\n```\nFinally with the `Connectivity()` user can assess whether their geneset's connectivity is statistically enriched compared to a random model. the random model is contructed via rejecion sampling where topological similar set of random nodes are slected and assessed for their connectivity. Here, we test the connectivity of geneset GGI97 in Breast Cancer Tcell, and show that it is statiscally significant.\n \n``` r\nggi.genes <- bc.sig.list[[\"GGI97\"]]\ntnet.ggi <- Connectivity(network = sorted.net.list[[\"T_cell\"]], geneset = ggi.genes, simulate.num = 10000)\ntnet.ggi[[\"p.value\"]]\n\np3 <- ggplot() + aes(tnet.ggi[[\"null.distribution\"]])  +\n  geom_histogram(binwidth=0.1, colour=\"black\", fill=\"steelblue\") +\n  scale_x_continuous(trans='log10') +\n  theme_minimal() +\n  ggtitle('GGI Connectivity in BC Tnet') +\n  ylab('Occurence') + xlab('Number of links') +\n  geom_vline(aes(xintercept=tnet.ggi[[\"observed\"]]), colour=\"red\", linetype=\"dashed\") +\n  geom_text(aes(tnet.ggi[[\"observed\"]], 2000, label = paste0(\"Pvalue = \\n\",tnet.ggi[[\"p.value\"]])))\n\n\np1+p2+p3\n\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/netbiolab/scHumanNet/main/README.Rmd",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/netbiolab/scHumanNet/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/netbiolab/scHumanNet/main/packages/ACTIONet_2.0.18_HNv3/docker/.ipynb_checkpoints/Untitled-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/netbiolab/scHumanNet/main/packages/ACTIONet_2.0.18_HNv3/docker/.ipynb_checkpoints/Untitled-checkpoint.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/netbiolab/scHumanNet/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "netbiolab/scHumanNet"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "scHumanNet"
      },
      "source": "https://raw.githubusercontent.com/netbiolab/scHumanNet/main/README.Rmd",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/netbiolab/scHumanNet/main/packages/ACTIONet_2.0.18_HNv3/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/netbiolab/scHumanNet/main/packages/ACTIONet_2.0.18_HNv3/Dockerfile",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/netbiolab/scHumanNet/main/packages/ACTIONet_2.0.18_HNv3/docker/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/netbiolab/scHumanNet/main/packages/ACTIONet_2.0.18_HNv3/docker/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/netbiolab/scHumanNet/main/packages/ACTIONet_2.0.18_HNv3/format_code.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/netbiolab/scHumanNet/main/images/Figure1A.png"
      },
      "source": "https://raw.githubusercontent.com/netbiolab/scHumanNet/main/README.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/netbiolab/scHumanNet/main/images/BCsig_analysis.jpg"
      },
      "source": "https://raw.githubusercontent.com/netbiolab/scHumanNet/main/README.Rmd",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Setting up the Environment",
        "parent_header": [
          "scHumanNet"
        ],
        "type": "Text_excerpt",
        "value": "For running scHumanNet, we recommend a `conda` envrionment to install\npackages in the `packages` folder.\n\n``` bash\n#if this is the first time you are using conda envrionment add following channels for installation of scHumanNet\n$ conda config --add channels conda-forge\n$ conda config --add channels bioconda\n$ git clone https://github.com/netbiolab/scHumanNet.git\n\n$ conda env create -n scHumanNet -f ./scHumanNet/packages/scHumanNet_env.yml\n$ conda activate scHumanNet\n\n#check whether appropriate dependencies have been installed\n(scHumanNet) $ conda install --file ./scHumanNet/packages/requirements_scHumanNet.txt\n```\n\n\n\nInstall the modified version of ACTIONet.\n\n``` bash\n(scHumanNet) $ R CMD INSTALL ./scHumanNet/packages/ACTIONet_2.0.18_HNv3\n```\n\nStart R and install SCINET and scHumanNet.\n\n``` r\ndevtools::install_github(\"shmohammadi86/SCINET\")\ndevtools::install_github(\"netbiolab/scHumanNet\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/netbiolab/scHumanNet/main/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9948991204101165,
      "result": {
        "original_header": "Load required libraries",
        "type": "Text_excerpt",
        "value": "(add Seurat if necessary)\n``` r\nlibrary(scHumanNet)\nlibrary(ACTIONet)\nlibrary(SCINET)\nlibrary(Seurat)\nlibrary(igraph)\nlibrary(SingleCellExperiment)\nlibrary(purrr)\nlibrary(dplyr)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/netbiolab/scHumanNet/main/README.Rmd",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/netbiolab/scHumanNet/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "GNU General Public License v3.0",
        "spdx_id": "GPL-3.0",
        "type": "License",
        "url": "https://api.github.com/licenses/gpl-3.0",
        "value": "https://api.github.com/licenses/gpl-3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "The GNU General Public License, Version 2, June 1991 (GPLv2)\n============================================================\n\n> Copyright (C) 1989, 1991 Free Software Foundation, Inc.\n> 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA\n\nEveryone is permitted to copy and distribute verbatim copies of this license\ndocument, but changing it is not allowed.\n\n\nPreamble\n--------\n\nThe licenses for most software are designed to take away your freedom to share\nand change it. By contrast, the GNU General Public License is intended to\nguarantee your freedom to share and change free software--to make sure the\nsoftware is free for all its users. This General Public License applies to most\nof the Free Software Foundation's software and to any other program whose\nauthors commit to using it. (Some other Free Software Foundation software is\ncovered by the GNU Lesser General Public License instead.) You can apply it to\nyour programs, too.\n\nWhen we speak of free software, we are referring to freedom, not price. Our\nGeneral Public Licenses are designed to make sure that you have the freedom to\ndistribute copies of free software (and charge for this service if you wish),\nthat you receive source code or can get it if you want it, that you can change\nthe software or use pieces of it in new free programs; and that you know you can\ndo these things.\n\nTo protect your rights, we need to make restrictions that forbid anyone to deny\nyou these rights or to ask you to surrender the rights. These restrictions\ntranslate to certain responsibilities for you if you distribute copies of the\nsoftware, or if you modify it.\n\nFor example, if you distribute copies of such a program, whether gratis or for a\nfee, you must give the recipients all the rights that you have. You must make\nsure that they, too, receive or can get the source code. And you must show them\nthese terms so they know their rights.\n\nWe protect your rights with two steps: (1) copyright the software, and (2) offer\nyou this license which gives you legal permission to copy, distribute and/or\nmodify the software.\n\nAlso, for each author's protection and ours, we want to make certain that\neveryone understands that there is no warranty for this free software. If the\nsoftware is modified by someone else and passed on, we want its recipients to\nknow that what they have is not the original, so that any problems introduced by\nothers will not reflect on the original authors' reputations.\n\nFinally, any free program is threatened constantly by software patents. We wish\nto avoid the danger that redistributors of a free program will individually\nobtain patent licenses, in effect making the program proprietary. To prevent\nthis, we have made it clear that any patent must be licensed for everyone's free\nuse or not licensed at all.\n\nThe precise terms and conditions for copying, distribution and modification\nfollow.\n\n\nTerms And Conditions For Copying, Distribution And Modification\n---------------------------------------------------------------\n\n**0.** This License applies to any program or other work which contains a notice\nplaced by the copyright holder saying it may be distributed under the terms of\nthis General Public License. The \"Program\", below, refers to any such program or\nwork, and a \"work based on the Program\" means either the Program or any\nderivative work under copyright law: that is to say, a work containing the\nProgram or a portion of it, either verbatim or with modifications and/or\ntranslated into another language. (Hereinafter, translation is included without\nlimitation in the term \"modification\".) Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not covered by\nthis License; they are outside its scope. The act of running the Program is not\nrestricted, and the output from the Program is covered only if its contents\nconstitute a work based on the Program (independent of having been made by\nrunning the Program). Whether that is true depends on what the Program does.\n\n**1.** You may copy and distribute verbatim copies of the Program's source code\nas you receive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice and\ndisclaimer of warranty; keep intact all the notices that refer to this License\nand to the absence of any warranty; and give any other recipients of the Program\na copy of this License along with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and you may at\nyour option offer warranty protection in exchange for a fee.\n\n**2.** You may modify your copy or copies of the Program or any portion of it,\nthus forming a work based on the Program, and copy and distribute such\nmodifications or work under the terms of Section 1 above, provided that you also\nmeet all of these conditions:\n\n*   **a)** You must cause the modified files to carry prominent notices stating\n    that you changed the files and the date of any change.\n\n*   **b)** You must cause any work that you distribute or publish, that in whole\n    or in part contains or is derived from the Program or any part thereof, to\n    be licensed as a whole at no charge to all third parties under the terms of\n    this License.\n\n*   **c)** If the modified program normally reads commands interactively when\n    run, you must cause it, when started running for such interactive use in the\n    most ordinary way, to print or display an announcement including an\n    appropriate copyright notice and a notice that there is no warranty (or\n    else, saying that you provide a warranty) and that users may redistribute\n    the program under these conditions, and telling the user how to view a copy\n    of this License. (Exception: if the Program itself is interactive but does\n    not normally print such an announcement, your work based on the Program is\n    not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole. If identifiable\nsections of that work are not derived from the Program, and can be reasonably\nconsidered independent and separate works in themselves, then this License, and\nits terms, do not apply to those sections when you distribute them as separate\nworks. But when you distribute the same sections as part of a whole which is a\nwork based on the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the entire whole,\nand thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest your\nrights to work written entirely by you; rather, the intent is to exercise the\nright to control the distribution of derivative or collective works based on the\nProgram.\n\nIn addition, mere aggregation of another work not based on the Program with the\nProgram (or with a work based on the Program) on a volume of a storage or\ndistribution medium does not bring the other work under the scope of this\nLicense.\n\n**3.** You may copy and distribute the Program (or a work based on it, under\nSection 2) in object code or executable form under the terms of Sections 1 and 2\nabove provided that you also do one of the following:\n\n*   **a)** Accompany it with the complete corresponding machine-readable source\n    code, which must be distributed under the terms of Sections 1 and 2 above on\n    a medium customarily used for software interchange; or,\n\n*   **b)** Accompany it with a written offer, valid for at least three years, to\n    give any third party, for a charge no more than your cost of physically\n    performing source distribution, a complete machine-readable copy of the\n    corresponding source code, to be distributed under the terms of Sections 1\n    and 2 above on a medium customarily used for software interchange; or,\n\n*   **c)** Accompany it with the information you received as to the offer to\n    distribute corresponding source code. (This alternative is allowed only for\n    noncommercial distribution and only if you received the program in object\n    code or executable form with such an offer, in accord with Subsection b\n    above.)\n\nThe source code for a work means the preferred form of the work for making\nmodifications to it. For an executable work, complete source code means all the\nsource code for all modules it contains, plus any associated interface\ndefinition files, plus the scripts used to control compilation and installation\nof the executable. However, as a special exception, the source code distributed\nneed not include anything that is normally distributed (in either source or\nbinary form) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component itself\naccompanies the executable.\n\nIf distribution of executable or object code is made by offering access to copy\nfrom a designated place, then offering equivalent access to copy the source code\nfrom the same place counts as distribution of the source code, even though third\nparties are not compelled to copy the source along with the object code.\n\n**4.** You may not copy, modify, sublicense, or distribute the Program except as\nexpressly provided under this License. Any attempt otherwise to copy, modify,\nsublicense or distribute the Program is void, and will automatically terminate\nyour rights under this License. However, parties who have received copies, or\nrights, from you under this License will not have their licenses terminated so\nlong as such parties remain in full compliance.\n\n**5.** You are not required to accept this License, since you have not signed\nit. However, nothing else grants you permission to modify or distribute the\nProgram or its derivative works. These actions are prohibited by law if you do\nnot accept this License. Therefore, by modifying or distributing the Program (or\nany work based on the Program), you indicate your acceptance of this License to\ndo so, and all its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n**6.** Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the original\nlicensor to copy, distribute or modify the Program subject to these terms and\nconditions. You may not impose any further restrictions on the recipients'\nexercise of the rights granted herein. You are not responsible for enforcing\ncompliance by third parties to this License.\n\n**7.** If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues), conditions\nare imposed on you (whether by court order, agreement or otherwise) that\ncontradict the conditions of this License, they do not excuse you from the\nconditions of this License. If you cannot distribute so as to satisfy\nsimultaneously your obligations under this License and any other pertinent\nobligations, then as a consequence you may not distribute the Program at all.\nFor example, if a patent license would not permit royalty-free redistribution of\nthe Program by all those who receive copies directly or indirectly through you,\nthen the only way you could satisfy both it and this License would be to refrain\nentirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under any\nparticular circumstance, the balance of the section is intended to apply and the\nsection as a whole is intended to apply in other circumstances.\n\nIt is not the purpose of this section to induce you to infringe any patents or\nother property right claims or to contest validity of any such claims; this\nsection has the sole purpose of protecting the integrity of the free software\ndistribution system, which is implemented by public license practices. Many\npeople have made generous contributions to the wide range of software\ndistributed through that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing to\ndistribute software through any other system and a licensee cannot impose that\nchoice.\n\nThis section is intended to make thoroughly clear what is believed to be a\nconsequence of the rest of this License.\n\n**8.** If the distribution and/or use of the Program is restricted in certain\ncountries either by patents or by copyrighted interfaces, the original copyright\nholder who places the Program under this License may add an explicit\ngeographical distribution limitation excluding those countries, so that\ndistribution is permitted only in or among countries not thus excluded. In such\ncase, this License incorporates the limitation as if written in the body of this\nLicense.\n\n**9.** The Free Software Foundation may publish revised and/or new versions of\nthe General Public License from time to time. Such new versions will be similar\nin spirit to the present version, but may differ in detail to address new\nproblems or concerns.\n\nEach version is given a distinguishing version number. If the Program specifies\na version number of this License which applies to it and \"any later version\",\nyou have the option of following the terms and conditions either of that version\nor of any later version published by the Free Software Foundation. If the\nProgram does not specify a version number of this License, you may choose any\nversion ever published by the Free Software Foundation.\n\n**10.** If you wish to incorporate parts of the Program into other free programs\nwhose distribution conditions are different, write to the author to ask for\npermission. For software which is copyrighted by the Free Software Foundation,\nwrite to the Free Software Foundation; we sometimes make exceptions for this.\nOur decision will be guided by the two goals of preserving the free status of\nall derivatives of our free software and of promoting the sharing and reuse of\nsoftware generally.\n\n\nNo Warranty\n-----------\n\n**11.** BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR\nTHE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE\nSTATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM\n\"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,\nBUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\nPARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE\nPROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n**12.** IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR\nINABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA\nBEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A\nFAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER\nOR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n"
      },
      "source": "https://raw.githubusercontent.com/netbiolab/scHumanNet/main/packages/ACTIONet_2.0.18_HNv3/LICENSE.md",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/netbiolab/scHumanNet/main/images/scHumanNet_diff.png"
      },
      "source": "https://raw.githubusercontent.com/netbiolab/scHumanNet/main/README.Rmd",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "scHumanNet"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "netbiolab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 5019441,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 2183470,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 520054,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 6846,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 2243,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 1083,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 445,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 72,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/netbiolab/scHumanNet/main/README.Rmd"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/netbiolab/scHumanNet/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier"
  ],
  "somef_provenance": {
    "date": "2024-10-04 10:52:31",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 38
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Construction of scHumanNet (Example 1)",
        "parent_header": [
          "scHumanNet"
        ],
        "type": "Text_excerpt",
        "value": "For the first example case, we showcase the construction of scHumanNet\nusing publically accessible pan-cancer dataset from [Qian et al.\u00a0Cell\nResearch\n2020](https://www.nature.com/articles/s41422-020-0355-0).\nThe 10X count folder and the metadata can be downloaded from\n<http://blueprint.lambrechtslab.org>.\n\n``` r\ncounts <- Read10X('/your/path/to/BC_counts/')\nmeta <- read.table('/your/path/to/BC_metadata.csv', header = T, sep = ',')\n```"
      },
      "source": "https://raw.githubusercontent.com/netbiolab/scHumanNet/main/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Create sce object",
        "parent_header": [
          "scHumanNet",
          "Construction of scHumanNet (Example 1)"
        ],
        "type": "Text_excerpt",
        "value": "This tutorial converts count data and metadata to sce obeject from\n`SingleCellExperiment`, to be used as intput for network construction.\n\n``` r\ndata <- SingleCellExperiment(assays = list(logcounts = counts), colData = meta)\n```\n\nFor seurat objects, manually insert count data and metadata within the\n`SingleCellExperiment()`, or use the `as.SingleCellExperiment()`\nprovided in the `Seurat` package.\n\n``` r\ndata <- SingleCellExperiment(assays = list(logcounts = seurat_object@assays$RNA@counts), colData = seurat_object@meta.data)\ndata <- Seurat::as.SingleCellExperiment(seurat.object)\n```\n\nPrior to scHumanNet construction, reduce data and use the ace class from\nthe ACTIONet package. `run.ACTIONet()` is optional, this wrapper function performs matrix transformation via revese-rank normalization and imputation. For more information, refer to [Mohammadi et al. Nat Communication](https://www.nature.com/articles/s41467-020-18416-6)\n\n``` r\nace <- reduce.ace(data)\n#ace = run.ACTIONet(ace = ace, thread_no = 8)\n```\n\nThe column `CellType` of the metadata here indicates the column where\neach barcode is annotated from the user\u2019s preferred choice of methods.\n\n``` r\nace[['Labels']] <- meta$CellType\n```\n\nLoad HumanNetv3 interactome and retrieve cell-type specific interactions. Command `data('HNv3_XC_LLS')` loads the interactome as an igraph object named `graph.hn3`.\n``` r\ndata('HNv3_XC_LLS')\nace <- compute.cluster.feature.specificity(ace, ace$Labels, \"celltype_specificity_scores\")\nCelltype.specific.networks = run.SCINET.clusters(ace, specificity.slot.name = \"celltype_specificity_scores_feature_specificity\")\n```\n\nSort each genepair alphabetically and add LLS weight from HumanNetv3.\nElements of `sorted.net.list` are stored as edgelist. This is later useful for assessing edge overlap between scHumanNets.\n\n``` r\nsorted.net.list <- SortAddLLS(Celltype.specific.networks, reference.network = graph.hn3)\n```\n\nCheck each element of list and save scHumanNets, with both SCINET and LLS weights included in the edgelist for downstream analysis. R code used to analyze pan-cancer scHumanNet is included in the `figures` folder.\n\n``` r\nlapply(sorted.net.list, head)\nsaveRDS(sorted.net.list, './sorted_el_list.rds')\n```\n\nscHumanNet package provides a statistical framework to threshold functional hub genes from each cell-type specific networks via `FindAllHub()`. Briefly, it creates a null model of random networks by swapping edges with equal probability, thus creating a distribution of centrality values. Each hub's centrality is measured against this null distribution and a p-value is calculated. Default correction method is Benjamini-Hochberg method and the default threshold cut value is FDR < 0.05. To filter for genes, use the `gene` column and not the rownames.\n\n``` r\nsig.hub.df <- FindAllHub(sorted.net.list, centrality=\"degree\")\nsig.hub.df\n```\n\n\n| Centrality  | gene | pvalue   | qvalue | celltype |\n|-------------|------|----------|--------|----------|\n| 1                 | CD19            |  0.0000891981090000892   | 0.00428745577260429   | B_cell |\n| 0.9995374         | CD40            |  0.0000891981090000892   |0.00428745577260429    | B_cell |\n| \u2026                 | \u2026               | \u2026                        | ...                   | ...    |\n| 0.9635941         | TRAF3           | 0.00172331258975586      | 0.0463678793681187 | T_cell    |\n| 0.963206816421379 | LAT             | 0.00172331258975586      | 0.0463678793681187 | T_cell    |\n\n"
      },
      "source": "https://raw.githubusercontent.com/netbiolab/scHumanNet/main/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Differential Network analysis with scHumanNet (Example 2)",
        "parent_header": [
          "scHumanNet"
        ],
        "type": "Text_excerpt",
        "value": "In this example we provide a framework for a common downstream network\nanalysis, identification of differential hub in a control vs disease\nscRNA-seq study. Here we present an example cell-type-specific gene\nprioritization associated with ASD. Differential hub gene is identified\nthat significantly differs in centrality for each neuronal celltypes of\nhealthy vs ASD scHumanNet(data derived from [Velmeshev et al.\u00a0Science\n2019](https://pubmed.ncbi.nlm.nih.gov/31097668/)).\n\n![](images/scHumanNet_diff.png)\n\nDownload the publically accessible data `meta.txt` and `10X folder` from\n<https://autism.cells.ucsc.edu>.\n\n``` r\ncounts <- Seurat::Read10X('/your/path/to/10X_out/')\nmeta <- read.table('/your/path/to/meta.txt', header = T, sep = '\\t')\n\n#check if barcodes match\nrownames(meta) <- meta$cell\nmeta$cell <- NULL\nidentical(colnames(counts), rownames(meta))\n\n#merge annotated celltypes to larger granularity\n#neu_mat, NRGN neurons are seperated and will be excluded because it is either similar to Excitatory neurons based on UMAP analysis and is thus considered ambiguous\nmeta$celltypes_merged <- ifelse(meta$cluster %in% c('AST-FB','AST-PP'), 'Astrocyte',\n                                ifelse(meta$cluster %in% c('IN-PV', 'IN-SST','IN-SV2C', 'IN-VIP'), 'Inhibitory',\n                                       ifelse(meta$cluster %in% c('L2/3', 'L4', 'L5/6','L5/6-CC'), 'Excitatory',\n                                              ifelse(meta$cluster %in% c('Neu-mat','Neu-NRGN-I', 'Neu-NRGN-II'), 'Others', \n                                                     as.character(meta$cluster)))))\n```\n\nTo make a control vs disease network for each celltype we make a new\ncolumn that combines celltype and disease annotation For the Velmeshev\n2019 data, column name `diagnosis` and `celltypes_merged` includes\ndisease and celltype annotation respectively.\n\n``` r\nmeta$celltype_condition <- paste(meta$diagnosis, meta$celltypes_merged, sep = '_')\n```\n\nConstruct celltype specific networks for control and disease similarly\nas above.\n\n``` r\ndata <- SingleCellExperiment(assays = list(logcounts = counts), colData = meta)\nace = reduce.ace(data)\nace[['Labels']] <- meta$celltype_condition\nace = compute.cluster.feature.specificity(ace, ace$Labels, \"celltype_specificity_scores\")\nCelltype.specific.networks = run.SCINET.clusters(ace, specificity.slot.name = \"celltype_specificity_scores_feature_specificity\")\n```\n\nAdd LLS weight from HumanNetv3 for downstream analysis.\n\n``` r\ndata('HNv3_XC_LLS')\nsorted.net.list <- SortAddLLS(Celltype.specific.networks, reference.network = graph.hn3)\n```\n\nIn this tutorial we will select degree, sum of all weights connecting\nthe node, as a centrality measure to prioritize genes. The function\n`GetCentrality` also supports betweenness, closeness, and eigenvector\ncentrality as well.\n\n``` r\nstrength.list <- GetCentrality(method='degree', net.list = sorted.net.list)\n```\n\nPercentile rank is used to account for netork size differences. For\nevery gene in the reference interactome, if a node is not existent in\nthe scHumanNet, 0 value is assigned.\n\n``` r\nrank.df.final <- CombinePercRank(strength.list)\n```\n\nGet top 50 central genes for each celltype\n\n``` r\ntop.df <- TopHub(rank.df.final, top.n = 50)\nhead(top.df)\n```\n\n| ASD\\_Astrocyte  | ASD\\_Endothelial | \u2026   | Control\\_Others |\n|-----------------|------------------|-----|-----------------|\n| ALDH1L1         | CD4              | \u2026   | COX4I1          |\n| SLC27A1         | STAT1            | \u2026   | UQCRC1          |\n| \u2026                   | \u2026                | \u2026   | \u2026               |\n| PAX6            | CD14             | \u2026   | COX6B1          |\n\nGet the differential percentile rank value for each genes with function\n`DiffPR()`, where the output is a dataframe with genes and the\ncorresponding diffPR value for each scHumanNets. The input of DiffPR\nincludes the output of CombinePercRank(), metadata, column name of the\nannotated celltypes and condition(disease & control), and of the two\nannotation which will be used as a control. This example dataset\n`diagnosis` contains `Control` and `ASD`, and the column\n`celltypes_merged` stores the annotated celltypes.\n\n``` r\ndiffPR.df <- DiffPR(rank.df.final, celltypes = 'celltypes_merged', condition = 'diagnosis', control = 'Control', meta = meta)\nhead(diffPR.df)\n```\n\n| Astrocyte | Astrocyte\\_ASD-Control | \u2026   | Others | Others\\_ASD-Control |\n|-----------|------------------------|-----|--------|---------------------|\n| AR        | -1.0000000             | \u2026   | UQCRC2 | -0.9993515          |\n| FASN      | -0.9996066             | \u2026   | TFAM   | -0.9990272          |\n| \u2026         | \u2026                      | \u2026   | \u2026      | \u2026                   |\n| ACAA1     | 0.9967962              | \u2026   | BCS1L  | -0.9951362          |\n\nFinally, we provide two methods to prioritize genes. The first is the nonparametric, statistical method to filter differential hubs\nwith the function `FindDiffHub()`. Input requires the output of DiffPR,\nand the user-defined pvalue threshold. The output consists of a gene\ncolumn, diffPR value sorted from negative to positive value, pvalue, and\nthe celltype. To extract genes, use the `gene` column instead of\n`rownames()`.\n\n``` r\ndiffPR.df.sig <- FindDiffHub(rank.df.final = rank.df.final, celltypes = 'celltypes_merged', condition = 'diagnosis', control = 'Control', meta = meta, net.list=sorted.net.list, q.method='BH', centrality=\"degree\")\ndiffPR.df.sig\n```\n\n|          | Control_scHumanNet   | Disease_scHumanNet     | gene      | diffPR      | pvalue  | qvalue  | celltype  |\n|----------|--------|------------|-------------|-------------|-----------| -----------|-----------|\n| ALDH1L1   |  0.9992135 | 1.0000000 |ALDH1L1  |0.0007864727  | 9.982880e-01 | 0.999598937 | Astrocyte\n| SLC27A1   | 0.9980338  | 0.9995997 | SLC27A1  |0.0015658614  | 9.971936e-01 | 0.999598937 | Astrocyte\n| \u2026        | \u2026      | \u2026          | \u2026           | \u2026          | \u2026         |  \u2026         |  \u2026         |\n| C12orf71  | 0.0012836970  | 0  | C12orf71  |-0.0012836970    | 0.9972975 |  0.9996602 |  Others\n| ZNF222 | 0.0009627728 | 0  | ZNF222 | -0.0009627728    | 0.9981590 | 0.9996602 | Others\n\n\nThe second, is to extract top n percent of diffPR genes with the function `TopDiffHub()`. Input requires the output of `DiffPR()`,\nand the user-defined top_percentage threshold (default 0.05). The output consists of a gene\ncolumn, diffPR value sorted by absolute value, the top percengate value, and\nthe celltype. To extract genes, use the `gene` column instead of\n`rownames()`.\n\n``` r\ndiffPR.df.top <- TopDiffHub(diffPR.df, top.percent = 0.05)\ndiffPR.df.top\n```\n\n|          | gene   | diffPR     | top_percentage | celltype  |\n|----------|--------|------------|-------------|-------------|\n| TRIM21   | TRIM21 | -0.8537161 | 0.04973245  | Astrocyte |\n| FOXH1    | FOXH1  | -0.8568620 | 0.04910293  | Astrocyte |\n| \u2026        | \u2026      | \u2026          | \u2026           | \u2026         |\n| COX16.1  | COX16  | 0.9793814  | 0.007617547 | Others    |\n| MAP2K1.1 | MAP2K1 | 0.9888977  | 0.003414762 | Others    |\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/netbiolab/scHumanNet/main/README.Rmd",
      "technique": "header_analysis"
    }
  ]
}