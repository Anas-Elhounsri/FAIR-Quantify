{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/febos/SQUARNA"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contacts",
        "type": "Text_excerpt",
        "value": "Eugene F. Baulin, *e-mail: ebaulin@iimcb.gov.pl, efbaulin@gmail.com* \n"
      },
      "source": "https://raw.githubusercontent.com/febos/SQUARNA/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-04-13T18:43:37Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-22T14:53:06Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RNA secondary structure prediction tool"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9056778136408737,
      "result": {
        "original_header": "Input format",
        "type": "Text_excerpt",
        "value": "    For inputfile SQUARNA uses a fasta-like format with the \"name\" lines\n    starting with \">\" symbol and the following lines treated as the data\n    lines. The order of lines in which SQUARNA will read the data \n    is defined by the inputformat (if) parameter, see below. By default,\n    the order is \"qtrf\", meaning the first line will be read as the\n    seQuence, the second line as the reacTivities line, the third line\n    as the Restraints line, the fourth line as the reFerence structure \n    line, and all the following lines will be ignored until the new \n    \"name\" line. \n    \n    The starting lines in the input file faced before the first \">\"\n    symbol will be treated as default reactivities/restraints/reference\n    lines according to the inputformat value. The default lines will be \n    used for the individual sequences of appropriate length if the \n    matching individual line is empty or absent. See ali_input.afa file\n    in the examples sub-folder for an example of default lines. \n    \n    Sequence is the only mandatory field. Symbols \"AaCcGgUu\" will be \n    treated as the four types of RNA bases in the case-insensitive\n    manner. Symbols \"Tt\" will be replaced with \"U\". Symbols \";&\" will be\n    treated as the separators of different RNA chains. Symbols \".-~\"\n    will be treated as gaps and ignored accordingly (the sequence along \n    with the other data lines will be unaligned for the prediction and \n    the predicted structures will be then realigned back to the initial \n    sequence). All the other symbols will be treated as bases that cannot\n    form any base pairs unless they are present in the bpweights parameter\n    as defined within the used config file.\n    \n    Reactivities can be given either as a space/tab separated sequence \n    of float values from 0.0 to 1.0 (with the number of values equal \n    to the sequence length, including the separator positions whose \n    values will be ignored), or as an encoded line of sequence length, \n    see the description of reactformat (rf) parameter below (the mix \n    of the encoded values is allowed), or be an empty line. \n    \n    Restraints line should be either a sequence length line or an empty\n    line. All pairs of brackets ((),[],{},<>) and pairs of latin letters \n    (Aa,Bb,...Yy,Zz) will be treated as base pairs. The underscore sign\n    \"_\" will be treated as an unpaired base. The slash sign \"/\" will be\n    treated as the base that cannot form any base pairs \"to the left\" \n    (i.e. with the counterpart being closer to the 5'-end). In contrast,\n    the backslash sign \"\\\" will be treated as the base that cannot form\n    any base pairs \"to the right\" (i.e. with the counterpart being closer\n    to the 3'-end). All the other symbols will be treated as unrestrained\n    positions.\n    \n    Reference line should be either a sequence length line or an empty \n    line. In the reference line all pairs of brackets ((),[],{},<>) and \n    pairs of latin letters (Aa,Bb,...Yy,Zz) will be treated as base pairs \n    and all the other characters will be ignored. \n    \n    For examples of an appropriate default input file format see \n    examples/seq_input.fas. \n    \n    Alternatively, SQUARNA can read standard Fasta, Stockholm \n    and Clustal (.aln) formats. The input format is recognized \n    automatically. In the case of Stockholm format the \"SS_cons\"\n    structure will be treated as default reference line. In the case\n    of Fasta or Clustal formats only the sequences will be processed. \n \n"
      },
      "source": "https://raw.githubusercontent.com/febos/SQUARNA/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9593540590994469,
      "result": {
        "original_header": "Output format (single-sequence mode)",
        "type": "Text_excerpt",
        "value": "    The output format is a fasta-like format with the \"name\" lines \n    starting with \">\" sign and followed by a number of data sections:\n    (a) the input sequence; (b) the input data lines with the \n    appropriate marks (reactivities/restraints/reference), the scores\n    for the reference structure are printed if the reference is \n    specified (if non-canonical base pairs are present in the reference\n    structure, they are considered with 0.0 weight); (c) a break line \n    of underscores (\"_\"-line); (d) the predicted consensus structure with \n    the mark top-X_consensus, where X is defined with conslim parameter, \n    see below. If a reference was specified the metrics values will be \n    printed in the same line (TP - number of correctly predicted base pairs; \n    FP - number of wrongly predicted base pairs; FN - number of missed \n    base pairs; FS - F-score; PR - precision; RC=recall); (e) a break \n    line of equality signs (\"=\"-line); (f) N lines with the predicted \n    structures, where N is defined with outplim parameter, see below. \n    The structures are followed by a tab-separated list of values: \n    the rank of the structure (starting with \"#\" sign), total_score, \n    structure_score, reactivity_score, name of the generative parameter \n    set, and (if a reference was specified) the metrics values will be \n    printed for the best of the top-K structures (the format is the same \n    as for the consensus structure with the only addition of RK (rank) \n    value), where K is defined with toplim parameter, see below. The chain \n    separators are introduced into all the lines as they appear \n    in the sequence.\n     \n"
      },
      "source": "https://raw.githubusercontent.com/febos/SQUARNA/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8965135867375115,
      "result": {
        "original_header": "Options",
        "type": "Text_excerpt",
        "value": "    c=FILENAME / config=FILENAME [DEFAULT: see description]\n    \n        Path to a config file or a name of a built-in config, \n        see file \"def.conf\" for the format details. \n        In the alignment-based mode, the default config \n        file is ali.conf. In the single-sequence mode the default\n        config for sequences under 500nts is def.conf, for sequences\n        between 500 and 1000nts - 500.conf, and for sequences over\n        1000nts in length - 1000.conf.\n        Built-in configs:\n        c=def (def.conf) is recommended by default for RNAs under 500nts.\n        c=alt (alt.conf) is recommended for short pseudoknotted RNAs.\n        c=500 (500.conf) is recommended for RNAs longer 500 nts.\n        c=1000 (1000.conf) is recommended for RNAs longer 1000 nts.\n        c=sk (sk.conf) is recommended with SHAPE data input.\n        \n    s=STRING / seq=STRING / sequence=STRING [DEFAULT: None]\n    \n        Input RNA sequence. If specified, inputfile will be ignored. \n    if={qtrfx} / inputformat={qtrfx} [DEFAULT: if=qtrf]\n    \n        The order of the lines in the input file. By default, SQUARNA \n        reads the first line of the entry (among the lines after \n        the \">\" line) as the seQuence (q), the second line as the \n        reacTivities (t), the third line as the Restraints (r), \n        the fourth line as the reFerence (f), and all the further lines \n        are ignored. inputformat should be a subset of qtrfx letters \n        in any order, with q being mandatory. All \"x\" lines will be ignored.\n  \n    rb={rsd} / rankby={rsd} [DEFAULT: rb=s]\n    \n        How to rank the predicted structures. rankby should be a subset of\n        letters r, s, and d in any order (r / s / rs / rd / sd / rsd).\n        If both r and s are present, the structures will be ranked according\n        to the total_score = structure_score * reactivity_score. If only \n        r is present, the structures will be ranked by the reactivity_score,\n        and if only s is present, the structures will be ranked by the \n        structure_score. Independently, if d is present, the mutually \n        divergent structures will be put first.  \n        \n    fl=INT / freqlim=INT [DEFAULT: fl=0.35]\n    \n        Ignored in the single-sequence mode.\n        The percentage of sequences required to contain a base pair,\n        in order for it to be added to the predicted consensus structure\n        at step-2. The consensus will include all the base pairs present\n        in at least \"fl\" share of the sequences given that the base pair\n        is not in conflict (does not share a position) with a more \n        populated base pair. \n    hr / hardrest [DEFAULT: FALSE]\n    \n        If specified, all the base pairs from the restraints line will be\n        forced to be present in the predicted structures. However, it will\n        not affect the structure scores, as the forced base pairs won't\n        contribute to the structure score unless they were predicted without\n        forcing as well.\n        \n    ico / interchainonly [DEFAULT: FALSE]\n    \n        Allow only inter-chain base pairs to be predicted.  \n        \n    iw / ignore [DEFAULT: FALSE]\n    \n        Ignore warnings.  \n        \n    t=INT / threads=INT [DEFAULT: t=cpu_count]\n    \n        Number of CPUs to use. \n        \n    bs / byseq [DEFAULT: FALSE]\n    \n        Parallelize the execution over the input sequences\n        in the single-sequence mode. \n        By default, the execution in the single-sequence mode\n        is parallelized over the structure pool within each sequence.\n        Parallelizing over input sequences is recommended for \n        large input files along with fast configs.\n        \n    v / verbose [DEFAULT: FALSE]\n    \n        Run SQUARNA in the verbose mode.\n        Ignored in the single-sequence mode.  \n"
      },
      "source": "https://raw.githubusercontent.com/febos/SQUARNA/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/febos/SQUARNA/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/febos/SQUARNA/main/demo.ipynb"
      },
      "source": "https://raw.githubusercontent.com/febos/SQUARNA/main/demo.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/febos/SQUARNA/main/benchmarks/Violins.ipynb"
      },
      "source": "https://raw.githubusercontent.com/febos/SQUARNA/main/benchmarks/Violins.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/febos/SQUARNA/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "febos/SQUARNA"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SQUARNA, version 1.05 [09.07.2024]"
      },
      "source": "https://raw.githubusercontent.com/febos/SQUARNA/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation &amp; Dependencies",
        "type": "Text_excerpt",
        "value": "Clone the GitHub repository by typing:\n\n\tgit clone https://github.com/febos/SQUARNA\n\t\nSQUARNA requires Python3 of at least 3.8 version along with\na (hopefully) arbitrary version of NumPy library. \n\nTo use as a Python function:\n\n\tpip install SQUARNA\n"
      },
      "source": "https://raw.githubusercontent.com/febos/SQUARNA/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8147730183856395,
      "result": {
        "original_header": "Options",
        "type": "Text_excerpt",
        "value": "    i=FILENAME / input=FILENAME [REQUIRED OPTION]\n    \n        Path to an input file in fasta-like format, see \"Input format\" \n        section for details.\n        \n    ff=STRING / fileformat=STRING [DEFAULT: unknown]\n    \n        \"unknown\"   - the format will be identified automatically.\n        \"default\"   - default fasta-like format.\n        \"fasta\"     - FASTA format.\n        \"stockholm\" - STOCKHOLM format.\n        \"clustal\"   - CLUSTAL format. \n"
      },
      "source": "https://raw.githubusercontent.com/febos/SQUARNA/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/febos/SQUARNA/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Apache License 2.0",
        "spdx_id": "Apache-2.0",
        "type": "License",
        "url": "https://api.github.com/licenses/apache-2.0",
        "value": "https://api.github.com/licenses/apache-2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
      },
      "source": "https://raw.githubusercontent.com/febos/SQUARNA/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SQUARNA"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "febos"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 6121259,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 261902,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/febos/SQUARNA/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "febos",
          "type": "User"
        },
        "date_created": "2024-07-09T10:36:35Z",
        "date_published": "2024-07-09T10:37:46Z",
        "description": "version 1.05 [09.07.2024] \r\nintroduced built-in configs, see README\r\nimplemented SQUARNA as a Python function\r\nadded demo.ipynb",
        "html_url": "https://github.com/febos/SQUARNA/releases/tag/pythonfunc",
        "name": "version 1.05",
        "release_id": 164584639,
        "tag": "pythonfunc",
        "tarball_url": "https://api.github.com/repos/febos/SQUARNA/tarball/pythonfunc",
        "type": "Release",
        "url": "https://api.github.com/repos/febos/SQUARNA/releases/164584639",
        "value": "https://api.github.com/repos/febos/SQUARNA/releases/164584639",
        "zipball_url": "https://api.github.com/repos/febos/SQUARNA/zipball/pythonfunc"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "febos",
          "type": "User"
        },
        "date_created": "2024-04-02T10:08:31Z",
        "date_published": "2024-04-02T10:23:17Z",
        "description": "version 1.01 [02.04.2024] - adjusted for very large inputs in the single-sequence mode: \r\n\t\t\t\t\t    handle fasta/default input formats on the fly, not storing them; \r\n\t\t\t\t\t    added byseq parameter for parallelizing over input sequences; \r\n\t\t\t\t\t    added fastest.conf for fast crude predictions;\r\n\t\t\t\t\t    see the usage example #6.\r\n",
        "html_url": "https://github.com/febos/SQUARNA/releases/tag/largeinput",
        "name": "version 1.01",
        "release_id": 149363581,
        "tag": "largeinput",
        "tarball_url": "https://api.github.com/repos/febos/SQUARNA/tarball/largeinput",
        "type": "Release",
        "url": "https://api.github.com/repos/febos/SQUARNA/releases/149363581",
        "value": "https://api.github.com/repos/febos/SQUARNA/releases/149363581",
        "zipball_url": "https://api.github.com/repos/febos/SQUARNA/zipball/largeinput"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "febos",
          "type": "User"
        },
        "date_created": "2024-03-23T08:17:41Z",
        "date_published": "2024-03-23T08:22:27Z",
        "description": "SQUARNA - an RNA secondary structure prediction method based on a greedy stem formation model\r\nversion 1.0c, dated 23.03.2024.",
        "html_url": "https://github.com/febos/SQUARNA/releases/tag/covarying",
        "name": "version 1.0c",
        "release_id": 148035552,
        "tag": "covarying",
        "tarball_url": "https://api.github.com/repos/febos/SQUARNA/tarball/covarying",
        "type": "Release",
        "url": "https://api.github.com/repos/febos/SQUARNA/releases/148035552",
        "value": "https://api.github.com/repos/febos/SQUARNA/releases/148035552",
        "zipball_url": "https://api.github.com/repos/febos/SQUARNA/zipball/covarying"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "febos",
          "type": "User"
        },
        "date_created": "2024-02-26T13:10:23Z",
        "date_published": "2024-02-26T13:12:10Z",
        "description": "SQUARNA - an RNA secondary structure prediction method based on a greedy stem formation model\r\nversion 1.0, dated 26.02.2024.",
        "html_url": "https://github.com/febos/SQUARNA/releases/tag/submit",
        "name": "version 1.0",
        "release_id": 143622543,
        "tag": "submit",
        "tarball_url": "https://api.github.com/repos/febos/SQUARNA/tarball/submit",
        "type": "Release",
        "url": "https://api.github.com/repos/febos/SQUARNA/releases/143622543",
        "value": "https://api.github.com/repos/febos/SQUARNA/releases/143622543",
        "zipball_url": "https://api.github.com/repos/febos/SQUARNA/zipball/submit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "febos",
          "type": "User"
        },
        "date_created": "2023-08-27T20:16:23Z",
        "date_published": "2023-08-28T20:42:19Z",
        "description": "SQUARNA - an RNA secondary structure prediction method based on a greedy stem formation model\r\nversion 0.9, dated 28.08.2023.",
        "html_url": "https://github.com/febos/SQUARNA/releases/tag/biorxiv",
        "name": "version 0.9",
        "release_id": 118984331,
        "tag": "biorxiv",
        "tarball_url": "https://api.github.com/repos/febos/SQUARNA/tarball/biorxiv",
        "type": "Release",
        "url": "https://api.github.com/repos/febos/SQUARNA/releases/118984331",
        "value": "https://api.github.com/repos/febos/SQUARNA/releases/118984331",
        "zipball_url": "https://api.github.com/repos/febos/SQUARNA/zipball/biorxiv"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation &amp; Dependencies",
        "type": "Text_excerpt",
        "value": "Clone the GitHub repository by typing:\n\n\tgit clone https://github.com/febos/SQUARNA\n\t\nSQUARNA requires Python3 of at least 3.8 version along with\na (hopefully) arbitrary version of NumPy library. \n\nTo use as a Python function:\n\n\tpip install SQUARNA\n"
      },
      "source": "https://raw.githubusercontent.com/febos/SQUARNA/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-04 09:36:43",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 10
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "type": "Text_excerpt",
        "value": "pathto/python3 pathto/SQUARNA.py i=inputfile [OPTIONS]\n\npathto/python3 pathto/SQUARNA.py s=ACGUACGUG [OPTIONS]\n\nAs a Python function: see demo.ipynb\n"
      },
      "source": "https://raw.githubusercontent.com/febos/SQUARNA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage examples",
        "type": "Text_excerpt",
        "value": "    1) python3 SQUARNA.py i=examples/seq_input.fas c=alt.conf\n    \n    Demonstration example.\n    \n    2) python3 SQUARNA.py i=datasets/SRtrain150.fas if=qf \n    \n    An example reproducing the benchmarks.\n    \n    3) python3 SQUARNA.py i=examples/ali_input.afa if=q\n    \n    An example of running single-sequence predictions for a set\n    of aligned sequences. \"if=q\" tells SQUARNA to ignore all the\n    default input lines and read only the sequences.\n    \n    4) python3 SQUARNA.py i=examples/ali_input.afa a\n    \n    An example of running alignment-based predictions.\n    \n    5) python3 SQUARNA.py i=examples/ali_input.afa if=q a v\n    \n    An example of running alignment-based predictions \n    in the verbose mode.\n    \n    6) python3 SQUARNA.py i=huge.fasta byseq pl=1 c=fastest.conf\n    \n    An example of running single-sequence predictions \n    in the fast mode. Recommended for very large inputs.\n"
      },
      "source": "https://raw.githubusercontent.com/febos/SQUARNA/main/README.md",
      "technique": "header_analysis"
    }
  ]
}