{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "format": "cff",
        "type": "File_dump",
        "value": "cff-version: 1.2.0\nmessage: \"If you use this software, please cite it as below.\"\ntitle: \"PredPrIn - Scientific workflow to predict protein-protein interactions based in a combined analysis of multiple protein characteristics.\"\nversion: 1.0.0\ndate-released: 2023-07-12\nurl: \"https://github.com/YasCoMa/predprin\"\nauthors:\n- family-names: \"Martins\"\n  given-names: \"Yasmmin\"\n  orcid: \"https://orcid.org/0000-0002-6830-1948\"\n"
      },
      "source": "https://raw.githubusercontent.com/YasCoMa/predprin/master/CITATION.cff",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Reference",
        "parent_header": [
          "PredPrIn"
        ],
        "type": "Text_excerpt",
        "value": "Martins YC, Ziviani A, Nicol\u00e1s MF, de Vasconcelos AT. Large-Scale Protein Interactions Prediction by Multiple Evidence Analysis Associated With an In-Silico Curation Strategy. Frontiers in Bioinformatics. 2021:38.\nhttps://www.frontiersin.org/articles/10.3389/fbinf.2021.731345/full\n"
      },
      "source": "https://raw.githubusercontent.com/YasCoMa/predprin/master/readme.md",
      "technique": "header_analysis"
    }
  ],
  "code_of_conduct": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, gender identity and expression, level of experience,\neducation, socio-economic status, nationality, personal appearance, race,\nreligion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n  advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at {{ email }}. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\n"
      },
      "source": "https://raw.githubusercontent.com/YasCoMa/predprin/master/CODE_OF_CONDUCT.md",
      "technique": "file_exploration"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/YasCoMa/predprin"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "## Contributing\n\n[fork]: /fork\n[pr]: /compare\n[style]: https://standardjs.com/\n[code-of-conduct]: CODE_OF_CONDUCT.md\n\nHi there! We're thrilled that you'd like to contribute to this project. Your help is essential for keeping it great.\n\nPlease note that this project is released with a [Contributor Code of Conduct][code-of-conduct]. By participating in this project you agree to abide by its terms.\n\n## Issues and PRs\n\nIf you have suggestions for how this project could be improved, or want to report a bug, open an issue! We'd love all and any contributions. If you have questions, too, we'd love to hear them.\n\nWe'd also love PRs. If you're thinking of a large PR, we advise opening up an issue first to talk about it, though! Look at the links below if you're not sure how to open a PR.\n\n## Submitting a pull request\n\n1. [Fork][fork] and clone the repository.\n2. Configure and install the dependencies: `pip3 install -r requirements.txt`. Follow the data requirements in Preparation section of readme.md\n3. Create a new branch: `git checkout -b my-branch-name`.\n4. Make your change, add tests, and make sure the tests still pass.\n5. Push to your fork and [submit a pull request][pr].\n6. Pat your self on the back and wait for your pull request to be reviewed and merged.\n\nHere are a few things you can do that will increase the likelihood of your pull request being accepted:\n\n- Follow the [style guide][style] which is using standard. Any linting errors should be shown when running `npm test`.\n- Write and update tests.\n- Keep your changes as focused as possible. If there are multiple changes you would like to make that are not dependent upon each other, consider submitting them as separate pull requests.\n- Write a [good commit message](http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html).\n\nWork in Progress pull requests are also welcome to get feedback early on, or if there is something blocked you.\n\n## Resources\n\n- [How to Contribute to Open Source](https://opensource.guide/how-to-contribute/)\n- [Using Pull Requests](https://help.github.com/articles/about-pull-requests/)\n- [GitHub Help](https://help.github.com)\n"
      },
      "source": "https://raw.githubusercontent.com/YasCoMa/predprin/master/CONTRIBUTING.md",
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-01-31T14:33:56Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-12-17T17:01:10Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Scientific workflow to predict protein-protein interactions based in a combined analysis of multiple protein characteristics."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Summary",
        "parent_header": [
          "PredPrIn"
        ],
        "type": "Text_excerpt",
        "value": "PredPrIn is a scientific workflow to predict Protein-Protein Interactions (PPIs) using machine learning to combine multiple PPI detection methods of proteins according to three categories: structural,  based on primary aminoacid sequence and functional annotations.<br>\n\nPredPrIn contains three main steps: (i) acquirement and treatment of protein information, (ii) feature generation, and (iii) classification and analysis.\n\n(i) The first step builds a knowledge base with the available annotations of proteins and reuses this base for other prediction experiments, saving time and becoming more efficient. \n\n(ii) The feature generation step involves several evidence from different classes, such as: Gene Ontology (GO) information, domain interaction, metabolic pathway participation and sequence-based interaction. For the GO branches, we made a study to evaluate the best method to calculate semantic similarity to enhance the workflow performance. This step can be easily modified by adding new metrics, making PredPrIn flexible for future improvements. \n\nFinally, (iii) in the third step, the adaboost classifier is responsible for predicting the final scores from the numerical features dataset, exporting results of performance evaluation metrics.\n\nThe figure below illustrates the steps of this workflow.\n\n<div style=\"text-align: center\">\n\t<img src=\"workflow.png\" alt=\"pipeline\"\n\ttitle=\"PredPrIn\" width=\"680px\" />\n</div>\n"
      },
      "source": "https://raw.githubusercontent.com/YasCoMa/predprin/master/readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9847158358767584,
      "result": {
        "original_header": "PredPrIn",
        "type": "Text_excerpt",
        "value": "Scientific workflow to predict protein-protein interactions based in a combined analysis of multiple protein characteristics.\n \n"
      },
      "source": "https://raw.githubusercontent.com/YasCoMa/predprin/master/readme.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/YasCoMa/predprin/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/YasCoMa/predprin/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "YasCoMa/predprin"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PredPrIn"
      },
      "source": "https://raw.githubusercontent.com/YasCoMa/predprin/master/readme.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/YasCoMa/predprin/master/workflow.png"
      },
      "source": "https://raw.githubusercontent.com/YasCoMa/predprin/master/readme.md",
      "technique": "regular_expression"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/YasCoMa/predprin/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Copyright 2023 Yasmmin Martins\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/YasCoMa/predprin/master/LICENSE.md",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "predprin"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "YasCoMa"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 85518,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 75390,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 648,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/YasCoMa/predprin/master/readme.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements:",
        "parent_header": [
          "PredPrIn"
        ],
        "type": "Text_excerpt",
        "value": "* Python packages needed:\n    - pip3 install luigi\n\t- pip3 install sqlalchemy\n\t- pip3 install rdflib\n\t- pip3 install sklearn\n\t- pip3 install matplotlib\n\t- pip3 install numpy\n\n* Other instalation:\n\t- sqlite (to be able to see the documentation generated by luigi about the tasks after execution)\n"
      },
      "source": "https://raw.githubusercontent.com/YasCoMa/predprin/master/readme.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "installation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 12:18:57",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Bug Report",
        "parent_header": [
          "PredPrIn"
        ],
        "type": "Text_excerpt",
        "value": "Please, use the [Issues](https://github.com/YasCoMa/PredPrIn/issues) tab to report any bug.\n"
      },
      "source": "https://raw.githubusercontent.com/YasCoMa/predprin/master/readme.md",
      "technique": "header_analysis"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage Instructions",
        "parent_header": [
          "PredPrIn"
        ],
        "type": "Text_excerpt",
        "value": "The steps below consider the creation of a sqlite database file with all he tasks events which can be used after to retrieve the execution time taken by the tasks. It is possible run locally too (see luigi's documentation to change the running command). <br ><br>\n* Preparation:\n\t1. ````git clone https://github.com/YasCoMa/predprin.git````\n\t2. ````cd PredPrIn````\n\t3. `pip3 install -r requirements.txt`\n\t4. Download annotation_data.zip (https://drive.google.com/file/d/1bWPSyULaooj7GTrDf6QBY3ZyeyH5MRpm/view?usp=share_link)\n\t5. Download rdf_data.zip (https://drive.google.com/file/d/1Cp511ioXiw2PiOHdkxa4XsZnxOeM3Pan/view?usp=share_link)\n\t6. Download sequence_data.zip (https://drive.google.com/file/d/1uEKh5EF9X_6fgZ9cTTp0jW3XaL48stxA/view?usp=share_link)\n\t7. Unzip annotation_data.zip\n\t8. Unzip rdf_data.zip\n\t9. Unzip sequence_data.zip\n\t10. Download SPRINT pre-computed similarities in https://www.csd.uwo.ca/~ilie/SPRINT/precomputed_similarities.zip and unzip it inside core/sprint/HSP/\n\t11. Certify that there is a file named client.cfg (to configure the history log and feed the sqlite database). It must have the following data:\n\t````\n\t[core]\n\tdefault-scheduler-host=localhost\n\tdefault-scheduler-port=8082\n\trpc-connect-timeout=60.0 \n\trpc-retry-attempts=10    \n\trpc-retry-wait=60        \n\n\t[scheduler]\n\trecord_task_history = True\n\n\t[task_history]\n\tdb_connection = sqlite:///luigi-task-hist.db\n\t````\n* Parameters:\n\t1. parameters-file -> json file with all the information to process the prediction experiment (example: params.json)\n\t2. mode -> it can have two values: train (executes cross validation and save the model as a .joblib file) or test (uses a model obtained in train mode to test in some dataset listed in the parameters file)\n\t3. model -> it is the model file full path saved in train mode as .joblib\n\t\n* Running:\n\t1. ````mkdir luigi_log```` (or other name for the log folder of your choice)\n\t2. ````luigid --background --logdir luigi_log```` (start luigi server)\n\t3. ````nohup python3.5 -m luigi --module main RunPPIExperiment --parameters-file params.json --mode 'train' --model none.joblib --workers 3 &```` <br >\n\t   ````nohup python3.5 -m luigi --module main RunPPIExperiment --parameters-file params.json --mode 'test' --model model.jolib --workers 3 &```` <br >\n\t\t- Replace python3.5 by the command python of your environment <br>\n\t\t- Replace the data given as example in params.json using your own data <br > \n\t\t- Adapt the number of workers to use as you need and the capacity of your computational resource available\n\n\tYou can monitor the prediction experiment execution in localhost:8082\n"
      },
      "source": "https://raw.githubusercontent.com/YasCoMa/predprin/master/readme.md",
      "technique": "header_analysis"
    }
  ]
}