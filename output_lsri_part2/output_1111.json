{
  "application_domain": [
    {
      "confidence": 13.67,
      "result": {
        "type": "String",
        "value": "Natural Language Processing"
      },
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8443495629516244,
      "result": {
        "type": "String",
        "value": "Semantic web"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Kirovez/nanoTRF"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-06-10T07:00:26Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-06T13:33:17Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A pipeline for detection and annotation of tandem repeats in raw nanopore reads"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9931748320908317,
      "result": {
        "original_header": "<a name=\"introduction\"></a>Introduction",
        "type": "Text_excerpt",
        "value": "NanoTRF is a software tool to *de novo* search high-copy tandem repeats designed for raw long-read sequences. It works with Oxford Nanopore Technologies (ONT) and Pacific Biosciences (PacBio) sequencing data.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Kirovez/NanoTRF/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9867673603957241,
      "result": {
        "original_header": "<a name=\"cmd\"></a>Command and options",
        "type": "Text_excerpt",
        "value": "```\n\nusage: nanoTRF.py [-h] [-r READS] [-pTH PATH_TH] [-T RUN_TH] [-cap CAP3] [-diamond DIAMOND] [-o OUT_DIRECTORY]\n                  [-b BLAST] [-mb MAKEDB] [-w WORDSIZE] [-w_f WORDSIZE_F] [-ev EVALUE] [-mid MIN_ID]\n                  [-bld QUERY_SBJ_LENGTH_DIFFERENCES_ALLOWED] [-mad MIN_ABUNDANCY_TO_DRAW] [-m MIN_COPY]\n                  [-nano NANO_TRF] [-tab NANO_TAB] [-rexdb_fasta REXDB_FASTA] [-rexdb_tab REXDB_TAB] [-th THREADS]\n                  [-lg LOG_FILE] [-mOVe MIN_OVERLAP] [-ca PERC_ABUND] [-c] [-maskws MASK_BLAST_WORD_SIZE]\n                  [-maskcov MASK_BLAST_QUERY_COVERAGE] [-maskiden MASK_BLAST_IDENTITY]\n\nA tool to clustering sequences in fasta file and searching consensus among the many sequences for each cluster\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -r READS, --reads READS\n                        Path to FastQ or Fasta file\n  -pTH PATH_TH, --path_TH PATH_TH\n                        Path to the location of the TideHunter\n  -T RUN_TH, --run_th RUN_TH\n                        If you do not want to run TideHunter again and you have table file (-f 2 option in Tide\n                        Hunter), type the path to this file here\n  -cap CAP3, --cap3 CAP3\n                        Path to the location of the Cap3\n  -diamond DIAMOND, --diamond DIAMOND\n                        Path to the location of DIAMOND\n  -o OUT_DIRECTORY, --out_directory OUT_DIRECTORY\n                        Path to work directory for output files where will be saved\n  -b BLAST, --blast BLAST\n                        Path to blastn executabled\n  -mb MAKEDB, --makedb MAKEDB\n                        Path to makeblastdb executable\n  -w WORDSIZE, --wordsize WORDSIZE\n                        Word size for wordfinder algorithm (length of best perfect match)\n  -w_f WORDSIZE_F, --wordsize_f WORDSIZE_F\n                        Word size for Reblusting(length of best perfect match)\n  -ev EVALUE, --evalue EVALUE\n                        Expectation value (E) threshold for saving hits\n  -mid MIN_ID, --min_id MIN_ID\n                        minimum identity between monomers to be selected for clustering\n  -bld QUERY_SBJ_LENGTH_DIFFERENCES_ALLOWED, --query_sbj_length_differences_allowed QUERY_SBJ_LENGTH_DIFFERENCES_ALLOWED\n                        maximum differences in length between query and subject\n  -mad MIN_ABUNDANCY_TO_DRAW, --min_abundancy_to_draw MIN_ABUNDANCY_TO_DRAW\n                        Minimum genome abundancy for cluster of repeats to be drawn\n  -m MIN_COPY, --min_copy MIN_COPY\n                        The minimum number of TRs copy in the data\n  -nano NANO_TRF, --nano_trf NANO_TRF\n                        File name with consensus sequences, default name - nanoTRF.fasta\n  -tab NANO_TAB, --nano_tab NANO_TAB\n                        Table file with the TRs abundancy\n  -rexdb_fasta REXDB_FASTA, --rexdb_fasta REXDB_FASTA\n                        Fasta file with the RExDB protein sequences\n  -rexdb_tab REXDB_TAB, --rexdb_tab REXDB_TAB\n                        Table file with the RExDB annotation\n  -th THREADS, --threads THREADS\n                        Number of threads for running the module Blast and TideHunter\n  -lg LOG_FILE, ---log_file LOG_FILE\n                        This file list analysis parameters, modules and files, contains messages generated on the\n                        various stages of the NanoTRF work. It allows tracking events that happens when NanoTRF runs.\n                        Default =loging.log\n  -mOVe MIN_OVERLAP, --min_Overlap MIN_OVERLAP\n                        Number of overlapping nucleotides between repeats in one cluster\n  -ca PERC_ABUND, --perc_abund PERC_ABUND\n                        Minimum value of the TR cluster abundancy\n  -c, --cleanup         Remove unncessary large files and directories from working directory\n  -maskws MASK_BLAST_WORD_SIZE, --mask_blast_word_size MASK_BLAST_WORD_SIZE\n                        word size of blastn masking of raw reads by cluster contig sequences\n  -maskcov MASK_BLAST_QUERY_COVERAGE, --mask_blast_query_coverage MASK_BLAST_QUERY_COVERAGE\n                        query (contig sequence) coverage in blastn masking of raw reads by cluster contig sequences\n  -maskiden MASK_BLAST_IDENTITY, --mask_blast_identity MASK_BLAST_IDENTITY\n                        minimum identity between query (contig sequence) and raw reads in blastn masking of raw reads\n                        by cluster contig sequences\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/Kirovez/NanoTRF/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9596881673006529,
      "result": {
        "original_header": "<a name=\"input_output\"></a>Input",
        "type": "Text_excerpt",
        "value": "NanoTRF works with FASTA and FASTQ formats.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Kirovez/NanoTRF/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9832516147236415,
      "result": {
        "original_header": "<a name=\"output\"></a>Tabular file `clust_abund.tab`",
        "type": "Text_excerpt",
        "value": "NanoTRF generates output in tabular format:\n| \u2116   | Column name | Description | \n|:---:|   :---      | ---        |\n|  1  | Cluster     | Name and cluster number |\n|  2  | min.Contig.Cap3.Length  | Min length of the contigs assembled by Cap3 |\n|  3  | max.Contig.Cap3.Length   | Max length of the contigs assembled by Cap3\n|  4  | Genome.portion   | Cluster abundancy in the genome (%)\n|  5  | Contig1.sequence   | Sequence of Contig1 from consensus.fasta\n|  6  | Subrepeats.seq   | Sequences of any detected subrepeats in Contig 1 by second run of TideHunter \n|  7  | Subrepeats.len   | Length of subrepeats sequences\n|  8  | Annotation  | Transposon domains and number of reads with similarity to \n"
      },
      "source": "https://raw.githubusercontent.com/Kirovez/NanoTRF/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.906774959333732,
      "result": {
        "original_header": "<a name=\"output\"></a>Html file `index.html`",
        "type": "Text_excerpt",
        "value": "This file containes the information from tabular file and some pictures including graph layout, read coverage histogram and read coverage pie chart \n"
      },
      "source": "https://raw.githubusercontent.com/Kirovez/NanoTRF/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9855542026824529,
      "result": {
        "original_header": "<a name=\"output\"></a> Folder `clusters`",
        "type": "Text_excerpt",
        "value": "This folder contains information for each cluster including consensus contig files, reads from each cluster and figures used for html generation \n"
      },
      "source": "https://raw.githubusercontent.com/Kirovez/NanoTRF/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9762301573417399,
      "result": {
        "original_header": "<a name=\"license\"></a>License",
        "type": "Text_excerpt",
        "value": "This project is licensed under the [MIT](https://github.com/git/git-scm.com/blob/main/MIT-LICENSE.txt) License \n"
      },
      "source": "https://raw.githubusercontent.com/Kirovez/NanoTRF/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Kirovez/NanoTRF/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Kirovez/nanoTRF/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Kirovez/nanoTRF"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "NanoTRF: a software tool to de novo search high-copy tandem repeats in Oxford Nanopore Technologies (ONT) plant DNA sequencing data"
      },
      "source": "https://raw.githubusercontent.com/Kirovez/NanoTRF/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Kirovez/NanoTRF/main/nanoTRF.png"
      },
      "source": "https://raw.githubusercontent.com/Kirovez/NanoTRF/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.999999986647211,
      "result": {
        "original_header": "NanoTRF: a software tool to *de novo* search high-copy tandem repeats in Oxford Nanopore Technologies (ONT) plant DNA sequencing data",
        "type": "Text_excerpt",
        "value": "Download the [latest release](https://github.com/Kirovez/nanoTRF/releases):\n```\nwget https://github.com/Kirovez/nanoTRF/archive/refs/tags/nanoTRF.tar.gz\ntar -zxvf nanoTRF.tar.gz\n```\n \n \n"
      },
      "source": "https://raw.githubusercontent.com/Kirovez/NanoTRF/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999999999676277,
      "result": {
        "original_header": "<a name=\"conda\"></a>Installing NanoTRF via conda",
        "type": "Text_excerpt",
        "value": "On Linux/Unix, NanoTRF can be installed via creating an environment from an environment.yml file:\n ```\n conda env create -f nanoTRF.yml\n ```\nFor running NanoTRF, please activate the conda environment:\n BASH2*\n Your environment is ready to be used! \n"
      },
      "source": "https://raw.githubusercontent.com/Kirovez/NanoTRF/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999715396106078,
      "result": {
        "original_header": "<a name=\"usage\"></a>Usage",
        "type": "Text_excerpt",
        "value": "To generate consensus sequences in FASTA format file (with usage default optional arguments):\n```\npython3 ./nanoTRF.py -r ./test_seq/test_4th_Linum.fasta -pTH TideHunter  -o ./test/ -mad 0.01\n```\nIf TideHunter output table (run with -f option) was generated before then you can pass this file via -T option and NanoTRF will skip TideHunter step\n```\npython3 ./nanoTRF.py -r ./test_seq/test_4th_Linum.fasta -pTH TideHunter  -o ./test/ -mad 0.01 -T TH.tab\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/Kirovez/NanoTRF/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.9376554938069714,
      "result": {
        "original_header": "<a name=\"usage\"></a>Usage",
        "type": "Text_excerpt",
        "value": "To generate consensus sequences in FASTA format file (with usage default optional arguments):\n```\npython3 ./nanoTRF.py -r ./test_seq/test_4th_Linum.fasta -pTH TideHunter  -o ./test/ -mad 0.01\n```\nIf TideHunter output table (run with -f option) was generated before then you can pass this file via -T option and NanoTRF will skip TideHunter step\n```\npython3 ./nanoTRF.py -r ./test_seq/test_4th_Linum.fasta -pTH TideHunter  -o ./test/ -mad 0.01 -T TH.tab\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/Kirovez/NanoTRF/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Kirovez/nanoTRF/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "nanoTRF"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "Kirovez"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 147391,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Kirovez/NanoTRF/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "Kirovez",
          "type": "User"
        },
        "date_created": "2022-06-10T07:50:14Z",
        "date_published": "2022-06-10T12:14:54Z",
        "description": "The first release of nanoTRF with html report etc.",
        "html_url": "https://github.com/Kirovez/nanoTRF/releases/tag/nanoTRF",
        "release_id": 69149437,
        "tag": "nanoTRF",
        "tarball_url": "https://api.github.com/repos/Kirovez/nanoTRF/tarball/nanoTRF",
        "type": "Release",
        "url": "https://api.github.com/repos/Kirovez/nanoTRF/releases/69149437",
        "value": "https://api.github.com/repos/Kirovez/nanoTRF/releases/69149437",
        "zipball_url": "https://api.github.com/repos/Kirovez/nanoTRF/zipball/nanoTRF"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 13:14:09",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ]
}