{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/JGuan-lab/SRGS"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-01-07T04:07:44Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-07-12T03:48:17Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Sparse partial least squares-based recursive gene selection for gene regulatory network inference"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Introduction",
        "parent_header": [
          "SRGS </br>"
        ],
        "type": "Text_excerpt",
        "value": "SRGS, SPLS (sparse partial least squares)-based recursive gene selection, can be used for gene regulatory network inference from bulk or single-cell expression data. Based on SPLS, SRGS can achieve the purpose of regression and feature selection simultaneously. SRGS recursively selects and scores the genes which may have regulations on the considered target gene. To consider the characteristic of single-cell data, we randomly scramble samples, set some expression values to zeroes, and generate multiple copies of data through multiple iterations, making SRGS more robust.\n\nSRGS corresponds to the following paper:\nGuan, J., Wang, Y., Wang, Y. et al. SRGS: sparse partial least squares-based recursive gene selection for gene regulatory network inference. BMC Genomics 23, 782 (2022). https://doi.org/10.1186/s12864-022-09020-7\n  "
      },
      "source": "https://raw.githubusercontent.com/JGuan-lab/SRGS/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/JGuan-lab/SRGS/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/JGuan-lab/SRGS/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "JGuan-lab/SRGS"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SRGS "
      },
      "source": "https://raw.githubusercontent.com/JGuan-lab/SRGS/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Installation",
        "parent_header": [
          "SRGS </br>"
        ],
        "type": "Text_excerpt",
        "value": "Depends: \n\n       R (>= 3.6.3)   \n\nRequirements: \n\n      library(\"spls\")\n      library(\"reshape2\")\n      library(\"parallel\")\n      library(\"pROC\")\n      "
      },
      "source": "https://raw.githubusercontent.com/JGuan-lab/SRGS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.1 Prepare data",
        "parent_header": [
          "SRGS </br>",
          "3. Quick start"
        ],
        "type": "Text_excerpt",
        "value": "The SRGS() function takes a gene expression dataframe or matrix data as input.\nEach row of the matrix must correspond to a sample and each column must correspond to a gene.\nThe gene names must be specified.\n\n      data<-read.table('/data/Simulate/Without dropout/Size50/data/sample500/Ecoli1.txt',sep = ',')\n      net<-read.table('/data/Simulate/Without dropout/Size50/gold standards/InSilicoSize50-Ecoli1_goldstandard.tsv')\n\n      > data[1:5,1:5]\n            G1        G2        G3        G4        G5\n      1 0.6232604 0.7038660 0.5866520 0.7534090 0.6247685\n      2 0.6607892 0.4835473 0.2811439 0.5049232 0.7115181\n      3 0.5951789 0.6791481 0.2123983 0.6271043 0.7488240\n      4 0.6397211 0.5582082 0.1787238 0.6244249 0.5817057\n      5 0.6271739 0.4982657 0.3603228 0.5544687 0.7246676\n      \n      > net[1:5,]\n        V1 V2 V3\n      1 G1 G2  1\n      2 G3 G2  1\n      3 G4 G2  1\n      4 G4 G5  1\n      5 G4 G6  1\n      "
      },
      "source": "https://raw.githubusercontent.com/JGuan-lab/SRGS/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/JGuan-lab/SRGS/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SRGS"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "JGuan-lab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 7218,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/JGuan-lab/SRGS/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "3.2.1 Run SRGS with the nodropout data",
        "parent_header": [
          "SRGS </br>",
          "3. Quick start"
        ],
        "type": "Text_excerpt",
        "value": "   \n    library(SRGS)\n    \n    data<-read.table('/data/Simulate/Without dropout/Size50/data/sample500/Ecoli1.txt',sep = ',')\n    net<-read.table('/data/Simulate/Without dropout/Size50/gold standards/InSilicoSize50-Ecoli1_goldstandard.tsv')\n    \n    predictNetwork <- SRGS(data, FALSE, iter = 10, k = 1, stepsize = 0.01, num.cores=1) # when SRGS is tested on a dense expression data, the parameter 'dropout' could be set as FALSE.\n    ### If one would like to run in parallel, SRGS can provide parallel computing by using the function of parSRGS instead ###\n    predictNetwork <- parSRGS(data, FALSE, iter = 10, k = 1, stepsize = 0.01, num.cores = 5)\n    \n    > predictNetwork[1:5,]\n      regulatoryGene targetGene     weight\n    1             G2         G1 0.04123711\n    2             G3         G1 0.76288660\n    3             G4         G1 0.76288660\n    4             G5         G1 0.21649485\n    5             G6         G1 0.43298969\nThe result contains the links. Each row corresponds to a regulatory link. The first column shows the regulator, the second column shows the target gene, and the last column indicates the weight of the link.\n"
      },
      "source": "https://raw.githubusercontent.com/JGuan-lab/SRGS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.3.1 Run SRGS with the dropout data",
        "parent_header": [
          "SRGS </br>",
          "3. Quick start"
        ],
        "type": "Text_excerpt",
        "value": "  \n    library(SRGS)\n    \n    data<-read.table('/data/Simulate/With dropout/Size50/data/50/Ecoli1.txt',sep = ',')\n    net<-read.table('/data/Simulate/With dropout/Size50/gold standards/InSilicoSize50-Ecoli1_goldstandard.tsv')\n    \n    set.seed(30)\n    predictNetwork <- SRGS(data, TRUE, 0.6, iter = 10, k = 1, stepsize = 0.01, num.cores=1) # when SRGS is tested on a sparse expression data, the parameter 'dropout' should be set as TRUE.\n    \n    ### If one would like to run in parallel, SRGS can provide parallel computing by using the function of parSRGS instead ###\n    predictNetwork <- parSRGS(data, TRUE, iter = 10, k = 1, stepsize = 0.01, num.cores = 5)\n    \n    > predictNetwork[1:5,]\n      regulatoryGene targetGene     weight\n    1             G2         G1 0.04123711\n    2             G3         G1 0.76288660\n    3             G4         G1 0.76288660\n    4             G5         G1 0.21649485\n    5             G6         G1 0.43298969\nThe result contains the links. Each row corresponds to a regulatory link. The first column shows the regulator, the second column shows the target gene, and the last column indicates the weight of the link.   \n"
      },
      "source": "https://raw.githubusercontent.com/JGuan-lab/SRGS/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 11:12:37",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "3. Quick start",
        "parent_header": [
          "SRGS </br>"
        ],
        "type": "Text_excerpt",
        "value": "Run `main.R`. The parameters can be changed as below.\n"
      },
      "source": "https://raw.githubusercontent.com/JGuan-lab/SRGS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.2.2 Calculate AUC",
        "parent_header": [
          "SRGS </br>",
          "3. Quick start"
        ],
        "type": "Text_excerpt",
        "value": "    AUCROC<-calcROC(n,net)\n    \n    > AUCROC\n    Area under the curve: 0.8051\n    "
      },
      "source": "https://raw.githubusercontent.com/JGuan-lab/SRGS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.3.2 Calculate AUC",
        "parent_header": [
          "SRGS </br>",
          "3. Quick start"
        ],
        "type": "Text_excerpt",
        "value": "  \n    AUCROC<-calcROC(n,net)\n    \n    > AUCROC\n    Area under the curve: 0.6639\n"
      },
      "source": "https://raw.githubusercontent.com/JGuan-lab/SRGS/master/README.md",
      "technique": "header_analysis"
    }
  ]
}