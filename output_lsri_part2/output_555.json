{
  "application_domain": [
    {
      "confidence": 27.76,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ailabstw/scDrug"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-11-15T07:26:35Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-13T14:54:17Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "scDrug: From scRNA-seq to Drug Repositioning"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9602715233337955,
      "result": {
        "original_header": "scDrug: From scRNA-seq to Drug Repositioning",
        "type": "Text_excerpt",
        "value": "The scDrug constructed a workflow for comprehensive analysis on single-cell RNA sequencing (scRNA-seq) data. It provided a powerful tool with various functions, from fundamental data analysis to drug response prediction, and treatment suggestions. \nThe scDrug went through three parts on raw scRNA-seq data investigation: **Single-Cell Data Analysis**, **Drug Response Prediction**, and **Treatment Selection**. \n- **Single-Cell Data Analysis** performed data preprocessing, clustering, cell type annotation, Gene Set Enrichment Analysis (GSEA), and survival analysis.  \n- **Drug Response Prediction** estimated the half maximal inhibitory concentration (IC50) of cell clusters, and reported the cell death percentages as drug kill efficacy. \n- **Treatment Selection** listed treatment combinations of given cell clusters. \n"
      },
      "source": "https://raw.githubusercontent.com/ailabstw/scDrug/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Download and Installation",
        "parent_header": [
          "scDrug: From scRNA-seq to Drug Repositioning"
        ],
        "type": "Text_excerpt",
        "value": "1.  Clone the repository to local directory, e.g., `./scDrug`.\n\n    ```\n    git clone https://github.com/ailabstw/scDrug.git ./scDrug\n    ```\n\n\n2.  Build the Docker image tagged `sc-drug`.\n\n    ```\n    docker build -t sc-drug ./scDrug\n    ```\n\n\n3.  Run the Docker container named `scDrug` with `/docker/path` mounted to `/server/path` to access files within the Docker container.\n    \n    ```\n    docker run -it --name scDrug -v /server/path:/docker/path --privileged sc-drug\n    ```\n\n    \n4.  In the Docker container `scDrug`, pull the Docker image `cibersortx/fractions` used in treatment selection.\n\n    ```\n    /etc/init.d/docker start\n    docker pull cibersortx/fractions\n    ```\n    \n    Note 1: Get `CONTAINER_ID` with command `docker ps -a` and start the container with `docker start -i CONTAINER_ID`.\n    Note 2: If docker-in-docker cannot be operated on the user's computer, the user can pull and run the CIBERSORTx container outside the scDrug container as long as a shared folder is mounted on both containers for file sharing.\n"
      },
      "source": "https://raw.githubusercontent.com/ailabstw/scDrug/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ailabstw/scDrug/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ailabstw/scDrug/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ailabstw/scDrug"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "scDrug: From scRNA-seq to Drug Repositioning"
      },
      "source": "https://raw.githubusercontent.com/ailabstw/scDrug/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ailabstw/scDrug/master/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/ailabstw/scDrug/master/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Download and Installation",
        "parent_header": [
          "scDrug: From scRNA-seq to Drug Repositioning"
        ],
        "type": "Text_excerpt",
        "value": "1.  Clone the repository to local directory, e.g., `./scDrug`.\n\n    ```\n    git clone https://github.com/ailabstw/scDrug.git ./scDrug\n    ```\n\n\n2.  Build the Docker image tagged `sc-drug`.\n\n    ```\n    docker build -t sc-drug ./scDrug\n    ```\n\n\n3.  Run the Docker container named `scDrug` with `/docker/path` mounted to `/server/path` to access files within the Docker container.\n    \n    ```\n    docker run -it --name scDrug -v /server/path:/docker/path --privileged sc-drug\n    ```\n\n    \n4.  In the Docker container `scDrug`, pull the Docker image `cibersortx/fractions` used in treatment selection.\n\n    ```\n    /etc/init.d/docker start\n    docker pull cibersortx/fractions\n    ```\n    \n    Note 1: Get `CONTAINER_ID` with command `docker ps -a` and start the container with `docker start -i CONTAINER_ID`.\n    Note 2: If docker-in-docker cannot be operated on the user's computer, the user can pull and run the CIBERSORTx container outside the scDrug container as long as a shared folder is mounted on both containers for file sharing.\n"
      },
      "source": "https://raw.githubusercontent.com/ailabstw/scDrug/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ailabstw/scDrug/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "scDrug"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "ailabstw"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 66415,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 3003,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ailabstw/scDrug/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 11:09:26",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 29
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "scDrug: From scRNA-seq to Drug Repositioning"
        ],
        "type": "Text_excerpt",
        "value": "Note: Refer to [example](example) for a detail illustration of the usage for the scDrug.\n"
      },
      "source": "https://raw.githubusercontent.com/ailabstw/scDrug/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Single-Cell Data Analysis",
        "parent_header": [
          "scDrug: From scRNA-seq to Drug Repositioning",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "**Single-Cell Data Analysis** took the scRNA-seq data in a 10x-Genomics-formatted mtx directory or a CSV file as input, performed fundamental data analysis, and output a Scanpy Anndata object `scanpyobj.h5ad`, a UMAP `umap_cluster.png` and differentially expressed genes (DEGs) `cluster_DEGs.csv` of the clustering result, and a gene expression profile (GEP) file `GEP.txt`.\n\nOptionally, **Single-Cell Data Analysis** carried out batch correction, cell type annotation and Gene Set Enrichment Analysis (GSEA), and provided additional UMAPs showing batch effects and cell types (`umap_batch.png` and `umap_cell_type.png`), and the GSEA result `GSEA_results.csv`. For cell type annotation, we used [scMatch: a single-cell gene expression profile annotation tool using reference datasets](https://github.com/asrhou/scMatch).\n\nFurthermore, **Single-Cell Data Analysis** could take previously produced Anndata as input and applied sub-clustering on specified clusters.\n\n\n- Run `python3 single_cell_analysis.py -h` to show the help messages as follow for **Single-Cell Data Analysis**.\n\n```\nusage: single_cell_analysis.py [-h] -i INPUT [-f FORMAT] [-o OUTPUT] [-r RESOLUTION] [--impute] [--auto-resolution] [-m METADATA]\n                               [-b BATCH] [-c CLUSTERS] [--cname CNAME] [--GEP] [--annotation] [--gsea] [--cpus CPUS] [--survival]\n                               [--tcga TCGA] [--id ID] [--prefix PREFIX] [--not_treated]\n\nscRNA-seq data analysis\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i INPUT, --input INPUT\n                        path to input 10x directory or CSV file\n  -f FORMAT, --format FORMAT\n                        input format, 10x (default) | csv | h5ad (Anndata object for subclustering with --clusters CLUSTERS)\n  -o OUTPUT, --output OUTPUT\n                        path to output directory, default='./'\n  -r RESOLUTION, --resolution RESOLUTION\n                        resolution for clustering, default=0.6\n  --impute              do imputation. default: no\n  --auto-resolution     automatically determine resolution for clustering\n  -m METADATA, --metadata METADATA\n                        path to metadata CSV file for batch correction (index as input in first column)\n  -b BATCH, --batch BATCH\n                        column in metadata (or adata.obs) for batch correction, e.g. 'PatientID'\n  -c CLUSTERS, --clusters CLUSTERS\n                        perform single cell analysis only on specified clusters, e.g. '1,3,8,9'\n  --cname CNAME         which variable should be used when selecting clusters; required when clusters are provided. Default:\n                        'louvain'\n  --GEP                 generate Gene Expression Profile file.\n  --annotation          perform cell type annotation\n  --gsea                perform gene set enrichment analysis (GSEA)\n  --cpus CPUS           number of CPU used for auto-resolution and annotation, default=1\n  --survival            perform survival analysis\n  --tcga TCGA           path to TCGA data\n  --id ID               Specify TCGA project id in the format \"TCGA-xxxx\", e.g., \"TCGA-LIHC\"\n  --prefix PREFIX       Any prefix before matrix.mtx, genes.tsv and barcodes.tsv.\n  --not_treated         only consider untreated samples from TCGA for survival analysis.\n```\n\n- Apply **Single-Cell Data Analysis** with batch correction, clustering resolution 1.0, cell type annotation and GSEA.\n\n```\npython3 single_cell_analysis.py --input INPUT --metadata METADATA --batch BATCH --resolution 1.0 --annotation --gsea\n```\n\n- **Single-Cell Data Analysis** for sub-clustering on specified clusters at automatically determined resolution run under 4 cpus.\n\n```\npython3 single_cell_analysis.py -f h5ad --input scanpyobj.h5ad --clusters CLUSTERS --auto-resolution --cpus 4\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/ailabstw/scDrug/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Drug Response Prediction",
        "parent_header": [
          "scDrug: From scRNA-seq to Drug Repositioning",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "**Drug Response Prediction** examined  `scanpyobj.h5ad` generated in **Single-Cell Data Analysis**, reported clusterwise IC50 and cell death percentages to drugs in the GDSC database via [CaDRReS-Sc](https://github.com/CSB5/CaDRReS-SC) (a recommender system framework for *in silico* drug response prediction), or drug sensitivity AUC in the PRISM database from [DepMap Portal PRISM-19Q4] (https://doi.org/10.1038/s43018-019-0018-6). The output the prediction results are `IC50_prediction.csv` and `drug_kill_prediction.csv` while using parameter `--model GDSC`, and `AUC_prediction.csv` whlie using parameter `--model PRISM`.\n\n- Run `python3 drug_response_prediction.py -h` to show the help messages as follow for **Drug Response Prediction**.\n\n```\nusage: drug_response_prediction.py [-h] -i INPUT [-o OUTPUT] [-c CLUSTERS] [-m MODEL] [--n_drugs N_DRUGS]\n\nDrug response prediction\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i INPUT, --input INPUT\n                        path to input Anndata object (h5ad file)\n  -o OUTPUT, --output OUTPUT\n                        path to output directory, default='./'\n  -c CLUSTERS, --clusters CLUSTERS\n                        perform sensitivity prediction on specified clusters, e.g. '1,3,8,9', default='All'\n  -m MODEL, --model MODEL\n                        the sensitivity screening is from GDSC ic50/PRISM auc, e.g. GDSC, PRISM\n  --n_drugs N_DRUGS     the number of drugs to visualize for each cluster\n```\n\n- Predict drug response on specified clusters (here for default all clusters) with **Drug Response Prediction**.\n\n```\npython3 drug_response_prediction.py --input scanpyobj.h5ad\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/ailabstw/scDrug/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Treatment Selection",
        "parent_header": [
          "scDrug: From scRNA-seq to Drug Repositioning",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "In **Treatment Selection**, we first **imputed cell fractions** of bulk GEPs from the LINCS L1000 database with single-cell GEP `GEP.txt` created in **Single-Cell Data Analysis** via Docker version of [CIBERSORTx Cell Fractions](https://cibersortx.stanford.edu), which enumerated the proportions of distinct cell subpopulations in tissue expression profiles. Then, we **selected treatment combinations** from the LINCS L1000 database with the CIBERSORTx result, and generated plots and a dataframe to show the drug effect.\n"
      },
      "source": "https://raw.githubusercontent.com/ailabstw/scDrug/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Impute Cell Fractions",
        "parent_header": [
          "scDrug: From scRNA-seq to Drug Repositioning",
          "Usage",
          "Treatment Selection"
        ],
        "type": "Text_excerpt",
        "value": "**Impute Cell Fractions** took the reference sample file `GEP.txt` as input to run CIBERSORTx Cell Fractions with bulk GEP of user specified or automatically determined cell type, and output CIBERSORTx result files to the output directory, including `CIBERSORTx_Adjusted.txt`. The cell type for bulk GEP involved A375 (malignant melanoma),  A549 (non-small cell lung carcinoma),  HCC515 (non-small cell lung adenocarcinoma),  HEPG2 (hepatocellular carcinoma), HT29 (colorectal adenocarcinoma),  MCF7 (breast adenocarcinoma),  PC3 (prostate adenocarcinoma),  YAPC (Pancreatic carcinoma).\n\n- Run `python3 CIBERSORTx_fractions.py -h` to show the help messages as follow for **Impute Cell Fractions**.\n\n```\nusage: CIBERSORTx_fractions.py [-h] -i INPUT [-o OUTPUT] [-l LINCS] [-c CLUSTERS] -u USERNAME -t TOKEN\n                               [--celltype CELLTYPE] [--develop]\n\nimpute the fractions of previous identified cell subsets under each bulk sample in the LINCS L1000 database.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i INPUT, --input INPUT\n                        path to input single-cell GEP file\n  -o OUTPUT, --output OUTPUT\n                        path to output directory, default='./'\n  -l LINCS, --lincs LINCS\n                        path to LINCS data directory\n  -c CLUSTERS, --clusters CLUSTERS\n                        perform combined treatment prediction on specified clusters, e.g. '1,3,8,9'\n  -u USERNAME, --username USERNAME\n                        email address registered on CIBERSORTx website\n  -t TOKEN, --token TOKEN\n                        token obtained from CIBERSORTx website\n  --celltype CELLTYPE   choose a cell line from the options. If no name is provided, we will automatically\n                        determine the cell type. Options: A375 (malignant melanoma), A549 (non-small cell lung\n                        carcinoma), HCC515 (non-small cell lung adenocarcinoma), HEPG2 (hepatocellular carcinoma),\n                        HT29 (colorectal adenocarcinoma), MCF7 (breast adenocarcinoma), PC3 (prostate\n                        adenocarcinoma), YAPC (Pancreatic carcinoma)\n  --develop             Only for development version.\n\n```\n\n-  **Impute Cell Fractions** via CIBERSORTx Cell Fractions with single-cell GEP `GEP.txt` and LINCS L1000 bulk GEP of automatically determined cell type.\n\n```\npython3 CIBERSORTx_fractions.py --input GEP.txt --username USERNAME --token TOKEN\n```\n\nNote: To obtain `USERNAME` and `TOKEN`, register and request for access to CIBERSORTx Docker on [CIBERSORTx](https://cibersortx.stanford.edu) website.\n"
      },
      "source": "https://raw.githubusercontent.com/ailabstw/scDrug/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Select Treatment Combinations",
        "parent_header": [
          "scDrug: From scRNA-seq to Drug Repositioning",
          "Usage",
          "Treatment Selection"
        ],
        "type": "Text_excerpt",
        "value": "**Select Treatment Combinations** takes the CIBERSORTx result `CIBERSORTx_Results.txt` and the L1000 instance info file as input, selects treatment combinations for the given cell type from the LINCS L1000 database, and output the report of the identified treatment combinations (`treatment_combinations.pdf`).\n\n- Run `python3 treatment_selection.py -h` to show the help messages as follow for **Select Treatment Combinations**.\n\n```\nusage: treatment_selection.py [-h] -i INPUT [-o OUTDIR] [-t THRESHOLD] [-c CON_THRESHOLD] --celltype CELLTYPE\n                              [--metadata METADATA]\n\nSelect treatment combination from the LINCS L1000 database.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i INPUT, --input INPUT\n                        CIBERSORTx output file.\n  -o OUTDIR, --outdir OUTDIR\n                        path to output directory, default='./'\n  -t THRESHOLD, --threshold THRESHOLD\n                        Sensitivity threshold. Range: [-1,0), default:-0.9\n  -c CON_THRESHOLD, --con_threshold CON_THRESHOLD\n                        Consistency threshold. Range: [-1,0), default:-0.75\n  --celltype CELLTYPE   Same as the cell type for decomposition. Options: A375 | A549 | HEPG2 | HT29 | MCF7 | PC3 | YAPC\n  --metadata METADATA   the L1000 instance info file, e.g., 'GSE70138_Broad_LINCS_inst_info_2017-03-06.txt'\n```\n\n- **Select Treatment Combinations** with the L1000 metadata.\n\n```\npython3 treatment_selection.py --input CIBERSORTx_Adjusted.txt --celltype CELLTYPE --metadata METADATA\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/ailabstw/scDrug/master/README.md",
      "technique": "header_analysis"
    }
  ]
}