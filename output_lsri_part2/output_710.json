{
  "acknowledgement": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Acknowledgements",
        "type": "Text_excerpt",
        "value": "Thank you to Michael Cormier for code review, improvements, and contributions.\n"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/SVAFotate/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/fakedrtom/SVAFotate"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-05-14T17:12:36Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-02T17:31:29Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.8936166186450614,
      "result": {
        "original_header": "SVAFotate",
        "type": "Text_excerpt",
        "value": "Structural Variant Allele Frequency annotate or SVAFotate is a tool for\nannotating structural variant VCFs with population level allele frequency\ninformation and other related metrics. \nPlease see the [SVAFotate publication](https://doi.org/10.1186/s12859-022-05008-y) \nfor more information and for citing purposes.\n \n"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/SVAFotate/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.996781125240726,
      "result": {
        "original_header": "Overview",
        "type": "Text_excerpt",
        "value": "Being able to distinguish whether a mutation or variant is common or\nrare in the general population is crucial in many genomic analyses, including\nstructural variant (SV) analysis. More and more large population SV cohorts,\nwith population level allele frequencies (AFs), are becoming available, but\neach consist of primarily rare variants that are unique to the individual\ndataset. SVAFotate provides the means to aggregate and combine AF and related\ndata from multiple population datasets into simple annotations that are\nthen added to a SV VCF. These annotations are then readily available and\ncan be used for different filtering schemes or other analyses. SVAFotate\nis a command-line tool and provides a variety of annotation options related\nto AF metrics.\n \n"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/SVAFotate/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/fakedrtom/SVAFotate/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/fakedrtom/SVAFotate/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "fakedrtom/SVAFotate"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SVAFotate"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/SVAFotate/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/fakedrtom/SVAFotate/master/images/max_AF_example_fig.png"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/SVAFotate/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/fakedrtom/SVAFotate/master/images/calculating_ofp.png"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/SVAFotate/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/fakedrtom/SVAFotate/master/images/ofp_range.png"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/SVAFotate/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/fakedrtom/SVAFotate/master/images/SV_Cov_example_fig.png"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/SVAFotate/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/fakedrtom/SVAFotate/master/images/SV_Uniq_example_fig.png"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/SVAFotate/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "0) Installing Miniconda\n\n- If Miniconda is not installed on your system, install it from [miniconda](https://conda.io/en/latest/miniconda.html)\n\n\n1) Set up new conda environment \n\n```\n$ conda create --name svafotate-env python=3\n```\n\n```\n$ conda activate svafotate-env\n```\n\n\n2) Install package requirements \n\n```\n$ conda install --file https://raw.githubusercontent.com/fakedrtom/SVAFotate/master/requirements.txt\n```\n\n\n3) Install SVAFotate\n\n```\n$ pip install git+https://github.com/fakedrtom/SVAFotate.git\n```\n\n\n4) Check that SVAFotate installed Correctly \n\n```\n$ svafotate --version\n\nsvafotate 0.1.0\n```\n"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/SVAFotate/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/fakedrtom/SVAFotate/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021 Thomas Nicholas\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/SVAFotate/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SVAFotate"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "fakedrtom"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 87146,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/fakedrtom/SVAFotate/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 11:41:03",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 39
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "type": "Text_excerpt",
        "value": "There are currently three SVAFotate subcommands: `annotate`,\n`pickle-source`, and `custom-annotation`.\n\n```\n$ svafotate -h\nusage: svafotate [-h] [-v] {annotate,pickle-source,custom-annotation} ...\n\nSVAFotate: Structural Variant Allele Frequency annotator ==================================================\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v, --version         Installed version\n\n[sub-commands]:\n  {annotate,pickle-source,custom-annotation}"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/SVAFotate/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "annotate",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "    custom-annotation   Add custom annotation(s) to source annotation file\n```\n\nannotate\n------------------------\nThis is the main functionality of SVAFotate and adds AF related metrics to\nyour SV VCF based on overlapping matches between SVs in an input VCF and SVs\nin a provided BED file.\n\n```\nRequired Arguments:\n  -v INPUT VCF, --vcf INPUT VCF\n                        Path and/or name of the VCF file to annotate.\n  -o OUTPUT VCF, --out OUTPUT VCF\n                        Path and/or name of the output VCF file.\n\t\t\tsources [SOURCES TO ANNOTATE [SOURCES TO ANNOTATE ...]]\n\nRequires Only One Argument:\n  -b SOURCE BED, --bed SOURCE BED\n                        Path and/or name of the combined sources AF bed file (--pickled-source can be used instead of --bed) (NOTE: --bed takes higher priority than --pickled-source).\n  -p Pickled Source Data, --pickled-source Pickled Source Data\n                        Path and/or name of the pickled source data to use (--bed can be used instead of --pickled-source) (NOTE: if --bed is provided, --pickled-source is ignored).\n```\n\n\nAs stated, this requires an input VCF (`-v`) and output VCF name (`-o`). SVAFotate was\ndeveloped using SV VCFs derived from the Lumpy SV caller, however it has\nbeen tested on VCFs created by other SV callers. As long as SVTYPE and END\n(preferably SVLEN as well) are included in the INFO fields, any SV VCF that\nfollows expected VCF conventions should be usable with SVAFotate. Please note that a\nunique SV ID (column 3 or the `ID` column of the VCF) is also expected. \n\nSVAFotate also requires a BED file corresponding to population SV data (`-b`) that you\nwish to compare the SVs in the input VCF against. A BED file with currently available\nlarge population SV data is available, called:\n\n```\nSVAFotate_core_SV_popAFs.GRCh38.v4.1.bed.gz\n```\n\nThis file can be found [here](https://zenodo.org/records/11642574) while \nprevious versions of similar data can be found in the [supporting_data](https://github.com/fakedrtom/SVAFotate/tree/master/supporting_data) \ndirectory. The BED file was compiled using information gathered from the publicly available\nCCDG, gnomAD, 1000G, and TOPMed SV callsets. AF related data (including HOM_REF, HET,\nand HOM_ALT genotype counts, where available), were parsed from these into a single BED\nfile. All of these data were prepared from GRCh38 alignments. A different BED file could \nbe used or customized, user-specific data could be added to the provided BED file, but \nplease note that SVAFotate expects specific columns, their header names, and their order \nplacement to be present in the BED file. If a different BED file is used or additional \ndata is added to the provided BED, please ensure that it follows the same ordering and \ncolumn information as found in `SVAFotate_core_SV_popAFs.GRCh38.v4.1.bed.gz`. As a minimum, \nit is necessary that any other BED file used or other data added to this provided\nBED file include: CHROM, START, END, SVLEN, SVTYPE, SOURCE, SV_ID, and AF. \nPlease note that all other columns do *not* need to be populated with actual data and where\ndata is unavailable an 'NA' should be added.\n\n**CURRENTLY UNAVAILABLE**: \nA serialized pickle object of the BED file can be used in place of the BED file (`-p`).\nThis may result in faster performance when using the SVAFotate `annotate` subcommand.\nIncluded with SVAFotate is the subcommand [pickle-source](https://github.com/fakedrtom/SVAFotate#pickle-source)\nwhich enables a pickle object of a BED file to be generated and then repeatedly used\nwith the `annotate` subcommand.\n\nThe bare minimum to run the `annotate` subcommand is:\n\n```\nsvafotate annotate -v in.vcf.gz -o out.vcf -b SVAFotate_core_SV_popAFs.GRCh38.bed.gz\n```\n\nThe `annotate` subcommand considers each SV in the VCF input individually and identifies\nall matching SVs from the BED file. **Matching SVs are defined as SVs from the input VCF\nthat share overlapping genomic coordinates with SVs provided in the BED file and that are\ndescribed as having the same SVTYPE**. Under default settings even a single basepair overlap\ncan qualify as a matching SV which may result in many matches being rather imprecise (and also\nan overabundance of matches). There are options to require more stringent overlap requirements\nto help avoid this (please see [Minimum Overlap Fraction](https://github.com/fakedrtom/SVAFotate#minimum-overlap-fraction)\n). Once SVAFotate collects all matching SVs, it assesses individual metrics from each matching\nSV and creates new population AF related annotations for each SV from the input VCF. By\ndefault, SVAFotate will add the following annotations to the INFO field of the input VCF:\n\n```\nMax_AF\t\t The maximum AF from all matching SVs across all specified data sources found in the provided BED file\nMax_Het\t      \t The maximum Het count from all matching SVs across all specified data sources found in the provided BED file\nMax_HomAlt    \t The maximum HomAlt count from all matching SVs across all specified data sources found in the provided BED file\nMax_PopMax_AF\t The maximum PopMax_AF from all matching SVs across all specified data sources found in the provided BED file\n```\n\nFor each of these annotations the maximum values from all matching SVs is returned.\nIf there are no matching SVs, each of these annotations will be added with a 0 or 0.0 value.\nThe following figure provides example input SVs compared to SVs of the same SVTYPE derived\nfrom the CCDG, gnomAD, and 1000G datasets, which are included with the input BED file.\nConsider the example SV on the far right which has matches with 4 different SVs of the same\nSVTYPE from CCDG, gnomAD, and 1000G in the BED file, and these have reported AFs of\n0.01, 0.03, 0.63, and 0.09. In this case the `Max_AF` annotation that is added to the\ninput SV will be 0.63.\n\n![max_af](https://github.com/fakedrtom/SVAFotate/blob/master/images/max_AF_example_fig.png)\n\nPlease note that each of these annotations is determined independently of one another.\nThat is to say, just because the SV with an AF of 0.63 is returned for the `Max_AF`\nannotation, the HET or HOM_ALT genotype counts corresponding to the SV with the AF\nof 0.63 are not necessarily going to be returned for the `Max_Het` and `Max_HomAlt`\nannotations unless they are also the maximum values from all matching SVs (in this\ncase they likely would be added given the wide disparity between AFs in all matching SVs).\nAlso by default an annotation reflecting the number of matches per data source in the\nBED file is also added. For example, if CCDG is one of the data sources in the input\nBED file, then `CCDG_Count` is added and lists the number of CCDG matching SVs. \n"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/SVAFotate/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Matching more complex SVs",
        "parent_header": [
          "Usage",
          "annotate"
        ],
        "type": "Text_excerpt",
        "value": "an overlap of genomic coordinates with an SV in the BED file, provided that these SVs share\nthe same SVTYPE. This is fairly straightforward for many SVTYPES, such as, DELs, DUPs,\nand INVs. This matching scheme can be more complicted for other SVTYPEs. Insertions\n(INSs), for example, are often reported as a single basepair (or 2bp) genomic coordinate\nwith an accompanying SVLEN that reflects the size of the insertion. INSs are still matched\nbased on overlapping coordinates, which generally means that INSs from the input VCF only match\nwhen their coordinates are (nearly) the same as those in the BED file (even if SVLENs differ).\nReported SVLENs for INSs are then used if certain options (such as `-f` or `-a best`) are\nrequested to better refine the matching INSs. Other even more complex SVTYPES may require more\nspecialized attention. In some of these cases, it may be helpful to include the `-a mis`\nparameter which would add annotations regarding overlapping SVs that have different SVTYPEs.\nFor more information please see the [Extra Annotations](https://github.com/fakedrtom/SVAFotate#extra-annotations)\nsection.\n\nThere are many additional options beyond the defaults of SVAFotate that may result\nin improved or more detailed annotations. Some of these are highly recommended for\nmost uses of SVAFotate. These options are listed here along with explanations:\n"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/SVAFotate/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Minimum Overlap Fraction",
        "parent_header": [
          "Usage",
          "annotate"
        ],
        "type": "Text_excerpt",
        "value": "  -f [MINIMUM OVERLAP FRACTION [MINIMUM OVERLAP FRACTION ...]], --minf [MINIMUM OVERLAP FRACTION [MINIMUM OVERLAP FRACTION ...]]\n                        A space seperated list of minimum reciprocal overlap fractions required between SVs for each source listed with the `-s` option. If `-s` is not used, only the first minf will be\n                        used and will be applied to all sources. minf values must be between 0.0 and 1.0 (Default = 0.001).\n```\n\nBy default, SVAFotate will consider any overlap of genomic coordinates between SVs from the\ninput VCF and SVs in the supplied BED file, even those of a single base pair, as matching SVs.\nWhile this represents all possible overlaps, it could result in imprecise matching of SVs\nthat do not actually reflect similar SV alleles. **It is highly recommended to use the `-f` option\nto increase the required amount of reciprocal overlap between putative matching SVs**. The\nhigher the value of `-f`, the more exact the overlapping match between SVs must be (and\nlikely the more precise and limited the number of overlapping matches will be). For example,\na `-f` value of 0.9 would require that 90% of the genomic region belonging to an SV from\nthe input VCF must overlap with at least 90% of the genomic region belonging to an SV in\nthe BED file in order to be considered a matching SV (provided they have the same SVTYPE).\nIf this requirement is not met, the SV from the BED file will not be added as a matching SV.\nGiven the inherent variance of SV breakpoints, it is difficult to presume what the best value\nfor `-f` is, but a minimum of 0.5 should be a decent starting value to consider.\n"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/SVAFotate/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Sources to Annotate",
        "parent_header": [
          "Usage",
          "annotate"
        ],
        "type": "Text_excerpt",
        "value": "  -s [SOURCES TO ANNOTATE [SOURCES TO ANNOTATE ...]], --sources [SOURCES TO ANNOTATE [SOURCES TO ANNOTATE ...]]\n                        Space seperated list of data sources to use for annotation. If '-s' is not used, all sources available in the source bed file will be used (Example: ' -s CCDG gnomAD ' ).\n```\n\nThe required BED file for running the `annotate` subcommand may contain SV data from multiple\ndatasets. The `SOURCE` column in this BED file refers to the data source for the given SVs. For\nexample, the supplied `SVAFotate_core_SV_popAFs.GRCh38.v4.1.bed.gz` file contains SVs from the CCDG,\ngnomAD, 1000G, and TOPMed dataset sources. By default SVAFotate will consider all SVs in the BED file for\ndetermining potential matches (and can report metrics specifc to each source). If annotations\nbased on comparisons with select sources only is desired, the `-s` parameter will reduce the\nconsidered SVs from the BED file to only those belonging to the requested sources. A single\nsource could be selected or any combination of included sources from the BED file.\n"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/SVAFotate/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Extra Annotations",
        "parent_header": [
          "Usage",
          "annotate"
        ],
        "type": "Text_excerpt",
        "value": "  -a [EXTRA ANNOTATIONS [EXTRA ANNOTATIONS ...]], --ann [EXTRA ANNOTATIONS [EXTRA ANNOTATIONS ...]]\n                        By default, only the Max_AF, Max_Hets and Max_HomAlt counts, and Max_PopMax_AF are annotated in the output VCF file. `-a` can be used to add additional annotations, with each\n                        anntotation seperated by a space (Example ' -a mf best pops ' ). Choices = [all, mf, best, pops, AFR, AMR, EAS, EUR, OTH, SAS, full, mis]\n```\n\nA number of optional annotations are available and can be included using the `-a` option. This\noption requires one or more of the following choices which each add more annotations as described\nhere:\n\n***all***\n\nAdds all of the annotations described by each of the other choices available with `-a`.\n\n***mf***\n\nAdds male and female annotations including:\n\n```\nMax_Male_AF\t    The maximum Male AF from all matching SVs across all specified data sources\nMax_Male_Het\t    The maximum Male Het count from all matching SVs across all specified data sources\nMax_Male_HomAlt\t    The maximum Male HomAlt count from all matching SVs across all specified data sources\nMax_Female_AF\t    The maximum Female AF from all matching SVs across all specified data sources\nMax_Female_Het\t    The maximum Female Het count from all matching SVs across all specified data sources\nMax_Female_HomAlt   The maximum Female HomAlt count from all matching SVs across all specified data sources\n```\n\nIf used alongside `best`, `pops` or any of the individual population choices, those annotations\nwill also include male and female specific annotations regarding AF and genotype counts.\n\n***best***\n\nAdds the \"best\" match for each data source included in the BED file (or as specified)\nand creates the following annotations:\n\n```\nBest_[data_source]_ID\t\tThe SV_ID of the best matching SV for that data source\nBest_[data_source]_OFP\t\tThe OFP of the best matching SV for that data source\nBest_[data_source]_AF\t    \tThe AF from the best SV_ID for that data source\nBest_[data_source]_Het    \tThe Het count from the best SV_ID for that data source\nBest_[data_source]_HomAlt \tThe HomAlt count from the best SV_ID for that data source\nBest_[data_source]_PopMax_AF\tThe PopMax_AF from the best SV_ID for that data source\n```\n\nThe \"best\" match here is defined by the matching SVs with the highest overlap fraction\nproduct (OFP) and considers all overlaps even those that may be filtered out using `-f` \noption. Calculating the OFP is straightforward and relies on the genomic size of\noverlapping SVs and the amount of overlap that is shared between them.\n\n![calculating_ofp](https://github.com/fakedrtom/SVAFotate/blob/master/images/calculating_ofp.png)\n\nFrom this example, an overlap fraction is calculated for each SV by dividing the amount\nof overlap by the size of each SV, respectively. Then these fractions are multiplied to\ncreate the OFP which will range between 0.0 and 1.0. As illustrated below, high OFP scores\nreflect matching SVs that are more identical in terms of both their genomic sizes and the\namount of overlap they share while low OFP scores suggest a disparity in genomic sizes\nbetween matching SVs or a low amount of shared overlap between them (or both a discrepancy\nin sizes and low overlap).\n\n![ofp](https://github.com/fakedrtom/SVAFotate/blob/master/images/ofp_range.png)\n\nIf used alongside `mf`, `pops` or any of the individual population choices, \"best\" annotations\nwill also be included for those annotations.\n\n***pops***\n\nThe suggested BED file `SVAFotate_core_SV_popAFs.GRCh38.v4.1.bed.gz` contains data from gnomAD, 1000G, \nand TOPMed which include population specific metrics belonging to the following populations:\nAFR, AMI, AMR, ASJ, EAS, EUR, FIN, MID, NFE, OTH, and SAS. The `pops` choice will add the \nfollowing annotations for all populations:\n\n```\nMax_[population]_AF\t    The maximum population AF from all matching SVs across all specified data sources\nMax_[population]_Het\t    The maximum population Het count from all matching SVs across all specified data sources\nMax_[population]_HomAlt\t    The maximum population HomAlt count from all matching SVs across all specified data sources\n```\n\nIf preferred, individual population designations can be selected instead to add annotations\npertaining to that population only. If used alongside `mf` or `best`, male and female or \"best\"\nannotations will also be added for the designated populations.\n\n***full***\n\nAdds all information available for all matches. This will add the following data source specific\nannotations:\n\n```\n[data_source]_Matches\tComma-separated list of each SV match with the data source\n```\n\nPlease note that this annotation will include all information available in the BED file\nfor all matching SVs. This is the \"kitchen sink\" annotation for matches and will potentially\nadd very lengthy annotations to the INFO field. For example, if an SV from the input\nVCF is found to have 4 matches with SVs from the gnomAD dataset, all information from\nthe BED file for all 4 of those matches will be listed.\n\n***mis***\n\nWhile matching SVs are defined as having the same SVTYPE it is possible to see if any SVs with a\ndifferent SVTYPE also overlap with an SV from the input VCF (a mismatched SV) with the `mis`\noption. This will add the following annotations:\n\n```\n[data_source]_Mismatches\t\tComma-separated list of the SV_IDs of overlapping SVs from the data source with different SVTYPEs\n[data_source]_Mismatches_Count\t\tThe number of overlapping SVs from the data source with different SVTYPEs\n[data_source]_Mismatch_SVTYPEs\t\tComma-separated list of the other overlapping SVTYPEs from the data source\n```\n\nThe same requirements for traditional matching SVs will be applied here. For example, if the `-f`\noption is used, mismatched SVs will be required to meet those same thresholds. Additionally, the \nfollowing annotations will also be added reflecting the \"best\" mismatch based on OFP scores:\n\n```\nBest_[data_source]_Mismatch_ID\t\tThe SV_ID of the best overlapping SV with different SVTYPE from the data source\nBest_[data_source]_Mismatch_OFP\t\tThe OFP of the best overlapping SV with different SVTYPE from the data source\nBest_[data_source]_Mismatch_SVTYPE\tThe SVTYPE of the best mismatch SV_ID from the data source\nBest_[data_source]_Mismatch_AF\t\tThe AF of the best mismatch SV_ID from the data source \nBest_[data_source]_Mismatch_Het\t\tThe Het count of the best mismatch SV_ID from the data source \nBest_[data_source]_Mismatch_HomAlt\tThe HomAlt count of the best mismatch SV_ID from the data source \n```\n\nWhen using the `-a` option, any combination of the above (`mf`, `best`, `pops`, `full`, and \n`mis`) choices can be selected, but if `all` is included than all of these annotations will \nbe added to the VCF.\n"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/SVAFotate/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Observed SV Coverage",
        "parent_header": [
          "Usage",
          "annotate"
        ],
        "type": "Text_excerpt",
        "value": "  -c OBSERVED SV COVERAGE, --cov OBSERVED SV COVERAGE\n                        Add an annotation reflecting how much of the queried SV genomic space has been previously observed with the same SVTYPE. Uses the data sources listed with -s as the previously\n                        observed SVs. Please provide minimum AF to exclude all SVs from data sources with a total AF below that value (must be between 0 and 1.0).\n```\n\nTo see how much of a given SV in the input VCF has been observed with the same SVTYPE from SVs\nin the BED file, the `-c` option is provided. This will add the `SV_Cov` annotation\nwhich reflects the fraction of the genomic coordinates for an SV in the input VCF that\nare found to overlap with SVs of the same SVTYPE in the BED file. The following figure provides example\nscenarios with all SVs being the same SVTYPE and the resulting `SV_Cov` annotations that would\nbe added to the given SVs. \n\n![max_af](https://github.com/fakedrtom/SVAFotate/blob/master/images/SV_Cov_example_fig.png)\n\nAll overlaps from all given sources in the BED file are considered when calculating `SV_Cov`, \nprovided that the SVs share the same SVTYPE, but source specific `SV_Cov` annotations are also \nadded. For example, if `CCDG` is one of the sources in the input BED file (and has not been excluded \nusing the `-s` parameter), `CCDG_SV_Cov` will be added and reflects the `SV_Cov` calculation \nusing only SVs from the input BED file that come from `CCDG`. All `SV_Cov` annotations measure \n*all* overlaps and not just those restricted by the `-f` option. This parameter does expect \na minimum AF value to be included which restricts SVs from the BED file to only those meeting \nthat value. In this manner, SVs from the BED file, perhaps very rare ones, can be exlcuded from \nthe calculation of `SV_Cov`.\n"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/SVAFotate/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Unique SV Regions",
        "parent_header": [
          "Usage",
          "annotate"
        ],
        "type": "Text_excerpt",
        "value": "  -u UNIQUE SV REGIONS, --uniq UNIQUE SV REGIONS\n                        Generate a file of unique SV regions called 'unique.bed'. These regions reflect genomic space within the queried SV region that have not been previously observed with the same\n                        SVTYPE. This will also add an annotation regarding the number of unique regions within a given SV. Please provide minimum AF to exclude all SVs from data sources with a total AF\n                        below that value (must be between 0 and 1.0).\n```\n\nThe opposite of the `-c` option is availble with the `-u` option. This will identify\n\"unique\" regions within a given SV from the input VCF that are defined as sharing no overlap\nwith any of the SVs of the same SVTYPE in the BED file. This option will create an additional\noutput file named `unique.bed` which will list the coordinates of these unique regions, their\ncorresponding SVTYPE, the SV_ID of the SV from which they are found, as well the sample names that\nare genotyped as heterozygous (0/1) and homozygous (1/1) for the alternate allele. The following\nfigure illustrates how these regions are determined in a variety of matching SV scenarios.\n\n![max_af](https://github.com/fakedrtom/SVAFotate/blob/master/images/SV_Uniq_example_fig.png)\n\nAdditionally, the `-u` option will also add the `SV_Uniq` annotation to the VCF which represents\nthe number of unique regions found within a given SV from the input VCF. Similar to the `-c`\noption, unique regions do not consider restrictions from the `-f` option and this parameter\nalso expects a minimum AF value to be provided that can restict the inclusion of SVs from the BED\nfile.\n"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/SVAFotate/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "SV Size Limit",
        "parent_header": [
          "Usage",
          "annotate"
        ],
        "type": "Text_excerpt",
        "value": "  -l SV SIZE LIMIT, --lim SV SIZE LIMIT\n                        Only include previously observed SVs from data sources with a size less than or equal to this value (only available when using --cov or --uniq).\n```\n\nIf any SVs in the BED file are exceedingly large, they may have big effects on the determination\nof observed SV coverage and unique SV regions. For example, CCDG reports an exceptionally rare\ndeletion that is over 61Mb in size. This event is likely to overlap with many putative deletions\nthat likely represent distinct SV events. Considering this may obscure meaningful coverage and\nunique region annotations and interpretations, the SV size limit `-l` is available. Without\nincluding a size limit with the `-l` option all of these example events overlapping with the\nvery large and rare deletion from CCDG would show observed SV coverage of 1.0 and no\nunique SV regions regardless of other more precise and potentially more meaningful comparisons.\nBy including an SV size limit alongside the `-c` or `-u` options, such scenarios can be avoided.\n"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/SVAFotate/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Targets BED File",
        "parent_header": [
          "Usage",
          "annotate"
        ],
        "type": "Text_excerpt",
        "value": "  -t TARGETS BED FILE, --target TARGETS BED FILE\n                        Path to target regions BED file. Expected format is a tab delimited file listing CHROM START END ID where ID is a genomic region identifier that will be listed as an annotation\n                        if an overlap exists between a given SV and the target regions.\n```\n\nThere may be particular genomic regions where an overlap with any reported SV event would be of\ninterest. Using the `-t` option and supplying a simple BED file consisting of CHROM, START, END,\nand a region identifier will create a `Target_Overlaps` annotation that lists the supplied\nregion identifier for all overlaps between the SV and the regions in this targets BED file. Regions\nof interest may include genes, specific exons, promoters, enhancers, etc. If the `-t` option is\nused when the `-u` option has also been invoked, then the resulting `unique.bed` file from the\n`-u` option will also include a column corresponding to any overlaps found between the unique\nregions and the regions provided by the `-t` option. This column will be populated with the\nregion identifier found in the BED file used with the `-t` option.\n"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/SVAFotate/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Use CI Boundaries",
        "parent_header": [
          "Usage",
          "annotate"
        ],
        "type": "Text_excerpt",
        "value": "  -ci USE CI BOUNDARIES, --ci USE CI BOUNDARIES\n                        Expects CIPOS and CIEND to be included in the INFO field of the input VCF (--vcf). If argument is selected, use 'inner' or 'outer' confidence intervals (CIPOS, CIEND) for SV\n                        boundaries. Choices = [in, out]\n  -ci95 USE CI BOUNDARIES, --ci95 USE CI BOUNDARIES\n                        Expects CIPOS95 and CIEND95 to be included in the INFO field of the input VCF (--vcf). If argument is selected, use 'inner' or 'outer' confidence intervals (CIPOS95, CIEND95) for\n                        SV boundaries. Choices = [in, out]\n```\n\nLumpy and other SV callers may generate confidence interval metrics for predicted SV breakpoints. To\nuse these confidence intervals instead of the given START and END coordinates, the `-ci` or `-ci95`\noptions may be used. There are two choices for each of these parameters: `in` and `out`. The `in` choice\nwill use the CIPOS and CIEND (or CIPOS95 and CIEND95) that will result in a smaller SV while the `out`\nchoice will use the intervals resulting in a larger SV. If CIPOS and CIEND or CIPOS95 and CIEND95 are\nnot present in the INFO field for a given SV in the input VCF these options will not work. Please be\nsure to consider the adjustments to SV genomic coordinates when using the `-f` option for requiring\nreciprocal overlaps.\n"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/SVAFotate/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Change SV Size",
        "parent_header": [
          "Usage",
          "annotate"
        ],
        "type": "Text_excerpt",
        "value": "  -e EMBIGGEN THE SV SIZE, --emb EMBIGGEN THE SV SIZE\n                        Increase the size of the SV coordinates in the input VCF (--vcf) by a single integer; Subtract that value from the start and add it to the end of each set of coordinates.\n  -r REDUCE THE SV SIZE, --red REDUCE THE SV SIZE\n                        Reduce the size of the SV coordinates in the input VCF (--vcf) by a single integer; Add that value to the start and subtract it from the end of each set of coordinates.\n```\n\nIt may be helpful in some cases to adjust the reported SV breakpoints for the SVs in the\ninput VCF. The genomic space corresponding to a reported SV may be enlarged using the\n`-e` option or reduced using the `-r` option. Please be sure to consider the adjustments to SV\ngenomic coordinates when using the `-f` option for requiring reciprocal overlaps.\n"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/SVAFotate/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "CPU Count",
        "parent_header": [
          "Usage",
          "annotate"
        ],
        "type": "Text_excerpt",
        "value": "  --cpu CPU Count       The number of cpus to use for multi-threading (Default = 1).\n```\n\n**Currently experiencing technical difficulties; mileage may vary** \n\nSVAFotate may use additional cpus for multi-threading purposes which can be \ndesignated using the `--cpu` option.\n"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/SVAFotate/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "pickle-source",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "**Please note that pickle-sources are currently unavaible for use with `annotate`; `pickle-source` \nshould still work, but its application with `annotate` may render this less useful for now** \n\nSince SVAFotate may be used repeatedly on different SV VCFs with the same BED file, it\nmay be advantageous to create a pickle object of the BED file to improve SVAFotate's\nperformance when running the `annotate` subcommand. This is optional. If SVAFotate or\nthe BED file used with the `annotate` subcommand is seldom needed, creating a pickle object\nof that BED file is probably not necessary. Nevertheless, creating a pickle object out\nof a BED file is straightforward and can be accomplished with the following command:\n\n```\nsvafotate pickle-source --bed SVAFotate_core_SV_popAFs.GRCh38.v4.1.bed.gz --out SVAFotate_core_SV_popAFs.GRCh38.v4.1.pickle\n```\n"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/SVAFotate/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "custom-annotation",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "This is not currently used, but is a placeholder for potential\nfuture developments.\n"
      },
      "source": "https://raw.githubusercontent.com/fakedrtom/SVAFotate/master/README.md",
      "technique": "header_analysis"
    }
  ]
}