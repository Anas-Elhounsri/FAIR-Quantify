{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Publications &amp; Citation",
        "type": "Text_excerpt",
        "value": "John, M., Korte, A. & Grimm, D. G. (2023). \n**permGWAS2: Enhanced and Accelerated Permutation-based Genome-wide Association Studies**. bioRxiv.\n\nDOI: https://doi.org/10.1101/2023.11.28.569016\n\nJohn, M., Ankenbrand, M. J., Artmann, C., Freudenthal, J. A., Korte, A., & Grimm, D. G. (2022).  \n**Efficient Permutation-based Genome-wide Association Studies for Normal and Skewed Phenotypic Distributions**.  \nBioinformatics, 2022.   \n\nDOI: https://doi.org/10.1093/bioinformatics/btac455\n"
      },
      "source": "https://raw.githubusercontent.com/grimmlab/permGWAS/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/grimmlab/permGWAS"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-12-08T08:29:19Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-21T02:08:15Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Efficient Permutation-based GWAS for Normal and Skewed Phenotypic Distributions"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.956330107328954,
      "result": {
        "original_header": "permGWAS2",
        "type": "Text_excerpt",
        "value": "This is an improved version of permGWAS. The original version can be found at [permGWAS Version1](https://github.com/grimmlab/permGWAS/releases/tag/permGWAS) \npermGWAS2 is an open source software tool written in python to efficiently perform genome-wide association studies (GWAS)\nwith permutation-based thresholds. It uses a batch-wise Linear Mixed Model to compute several univariate tests simultaneously. \npermGWAS2 provides support for multiple CPUs as well as for GPUs.  \nIn contrast to the original version, permGWAS2 allows for two different permutation strategies: \nx (default): permute the fixed effects matrix including covariates and the SNP of interest (equivalent to permuting y and the covariance matrix) \ny: permute only the phenotype vector (same method as in the original permGWAS) \nDetails on the architecture of permGWAS and permGWAS2, benchmarking results of the framework and on permutation-based thresholds can be found in our publications.\n \n"
      },
      "source": "https://raw.githubusercontent.com/grimmlab/permGWAS/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/grimmlab/permGWAS/tree/main/docs"
      },
      "technique": "file_exploration"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/grimmlab/permGWAS/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/grimmlab/permGWAS/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "grimmlab/permGWAS"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/grimmlab/permGWAS/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/grimmlab/permGWAS/main/Docker/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/grimmlab/permGWAS/main/Docker/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Requirements\n\nTo ensure a stable working environment, we recommend using [Docker](https://www.docker.com). To follow this recommendation, \ndocker needs to be installed and running on your machine. We provide a Dockerfile based on CUDA 11.5 and Ubuntu 20.4.\n\nIf you want to use permGWAS2 without Docker, you need to install all packages mentioned in the \n[requirements file](../Docker/requirements.txt). \n\n# Installation Guide\n\n1. Clone the repository into the directory where you want to set up the project\n\n```shell\ngit clone https://github.com/grimmlab/permGWAS.git\n```\n\n2. To use permGWAS2 within a Docker environment, navigate to `Docker` and build a Docker image using the provided Dockerfile.\n\n```shell\ncd permGWAS/Docker\ndocker build -t IMAGENAME .\n```\n\n3. Run an interactive Docker container based on the created image.\\\nYou have to mount the directory where the repository is located on your machine in the Docker container. \nIf you want to work on GPU, specify the GPUs to mount.\n\n```shell\ndocker run -it -v PATH_TO_REPO_FOLDER:/NAME_OF_DIRECTORY_IN_CONTAINER --gpus device=DEVICE_NUMBER --name CONTAINERNAME IMAGENAME\n```\n\n### Example\n\n1. Assume our repository is located in a folder called `/myhome` and we want to name our image `permGWAS_image`\n\n```shell\ncd /myhome/permGWAS/Docker\ndocker build -t permGWAS_image .\n```\n\n2. Further, assume that we want to call our container `permGWAS_container`, our data is located in (subfolders of)\n`/myhome` (i.e. we only need to mount one directory) and we want to use GPU 1. Then we have to run the following command:\n\n```shell\ndocker run -it -v /myhome/:/myhome_in_container/ --gpus device=1 --name permGWAS_container permGWAS_image\n```\n\n3. If we need to mount a second directory (e.g. we want to save our results in a different folder called `/results`), \nwe can run the following:\n\n```shell\ndocker run -it -v /myhome/:/myhome_in_container/ -v /results/:/results/ --gpus device=1 --name permGWAS_container permGWAS_image\n```\n\nWith this the setup is finished. For details on how to run permGWAS, see our [Quickstart Guide](./QUICKSTART.md)."
      },
      "source": "https://raw.githubusercontent.com/grimmlab/permGWAS/main/docs/INSTALLATION.md",
      "technique": "file_exploration"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/grimmlab/permGWAS/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "gpu-acceleration, gwas, linear-mixed-models, permutations, skewed-data, westfall-young"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2022 Grimm Lab - Bioinformatics and Machine Learning\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/grimmlab/permGWAS/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/grimmlab/permGWAS/main//permGWAS_logo.png"
      },
      "source": "https://raw.githubusercontent.com/grimmlab/permGWAS/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "permGWAS"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "grimmlab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 116120,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 383,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/grimmlab/permGWAS/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "dominikgrimm",
          "type": "User"
        },
        "date_created": "2023-09-22T07:32:37Z",
        "date_published": "2023-11-22T15:51:10Z",
        "description": "Original permGWAS version 1, as published in: https://doi.org/10.1093/bioinformatics/btac455\r\n\r\nJohn, M., Ankenbrand, M. J., Artmann, C., Freudenthal, J. A., Korte, A., & Grimm, D. G. (2022). Efficient permutation-based genome-wide association studies for normal and skewed phenotypic distributions. Bioinformatics, 38(Supplement_2), ii5-ii12.\r\n",
        "html_url": "https://github.com/grimmlab/permGWAS/releases/tag/permGWAS",
        "name": "permGWAS Version 1",
        "release_id": 131020434,
        "tag": "permGWAS",
        "tarball_url": "https://api.github.com/repos/grimmlab/permGWAS/tarball/permGWAS",
        "type": "Release",
        "url": "https://api.github.com/repos/grimmlab/permGWAS/releases/131020434",
        "value": "https://api.github.com/repos/grimmlab/permGWAS/releases/131020434",
        "zipball_url": "https://api.github.com/repos/grimmlab/permGWAS/zipball/permGWAS"
      },
      "technique": "GitHub_API"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How to run permGWAS2",
        "type": "Text_excerpt",
        "value": "1. [Requirements & Installation](./docs/INSTALLATION.md)\n2. [Quickstart Guide](./docs/QUICKSTART.md)\n3. [Data Guide](./docs/DATAGUIDE.md)\n4. [permGWAS2 with permutations](./docs/PERMUTATIONS.md)\n5. [Create plots](./docs/PLOTS.md)\n6. [Optional settings](./docs/OPTIONS.md)\n\n"
      },
      "source": "https://raw.githubusercontent.com/grimmlab/permGWAS/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "usage",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 12:54:35",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 24
      },
      "technique": "GitHub_API"
    }
  ]
}