{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/HKU-BAL/Clair3-Trio"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-04-24T07:52:41Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-26T03:15:30Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Clair3-Trio: variant calling in trio using Nanopore long-reads"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "parent_header": [
          "Clair3-Trio: variant calling in trio using Nanopore long-reads"
        ],
        "type": "Text_excerpt",
        "value": "Accurate identification of genetic variants from family child-mother-father trio sequencing data is important in genomics. However, state-of-the-art approaches treat variant calling from trios as three independent tasks, which limits their calling accuracy for Nanopore long-read sequencing data. For better trio variant calling, we introduce Clair3-Trio, the first variant caller tailored for family trio data from Nanopore long-reads. Clair3-Trio employs a Trio-to-Trio deep neural network model, which allows it to input the trio sequencing information and output all of the trio\u2019s predicted variants within a single model to improve variant calling. We also present MCVLoss, a novel loss function tailor-made for variant calling in trios, leveraging the explicit encoding of the Mendelian inheritance. Clair3-Trio showed comprehensive improvement in experiments. It predicted far fewer Mendelian inheritance violation variations than current state-of-the-art methods. \n\nDetailed descriptions of the methodology and results for Clair3-Trio are available in [this paper](https://academic.oup.com/bib/advance-article/doi/10.1093/bib/bbac301/6645484).\n\n----\n"
      },
      "source": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Folder Structure and Submodule Descriptions",
        "parent_header": [
          "Clair3-Trio: variant calling in trio using Nanopore long-reads"
        ],
        "type": "Text_excerpt",
        "value": "Clair3-Trio shares the same folder structure as Clair3, except for an additional folder `trio`. For descriptions for Clair3 folder, please check [Clair3's Descriptions](https://github.com/HKU-BAL/Clair3#folder-structure-and-submodule-descriptions) for more inforamtion.\n\nSubmodules in __`clair3/`__ are for variant calling and model training. Submodules in __`preprocess`__ are for data preparation.\n\n*For all the submodules listed below, you can use `-h` or `--help` for available options.*\n\n`trio/` | submodules under this folder are pypy incompatible, please run using python\n---: | ---\n`CheckEnvs_Trio`| Check the environment and  validity of the input variables, preprocess the BED input if necessary, `--chunk_size` sets the chuck size to be processed per parallel job. \n`SelectCandidates_Trio`| Select trio candidates for clair3-trio calling.\n`CallVarBam_Trio` | Call variants using a trained model and three BAM files.\n`SortVcf_Trio` | Sort Trio's VCF file. \n`MergeTenorsBam_Trio` | Create and merge three tensors into trio's tensors.\n`CallVariants_Trio` | Call variants using a trained model and merged tensors of candidate variants.\n`model` | define Clair3-Trio model\n`Training` | -\n`SelectHetSnp_Trio` | Select heterozygous SNP candidates from pileup model and true set.\n`Merge_Tenors_Trio` | Merge three tensors into trio's tensors.\n`Tensor2Bin_Trio` | Convert trio's tensors into Bin file for training.\n`Train_Trio` | Training a trio model using the `RectifiedAdam` optimizer. We also use the `Lookahead` optimizer to adjust the `RectifiedAdam` parameters dynamically. The initial learning rate is `1e-3` with `0.1` learning rate warm-up. Input a binary containing tensors created by `Tensor2Bin_Trio`. \n`Evaluation` | -\n`Check_de_novo` | Benchmark calling results in terms of de novo variants.\n\n\n\n\n----\n"
      },
      "source": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9503532429526277,
      "result": {
        "original_header": "Clair3-Trio: variant calling in trio using Nanopore long-reads",
        "type": "Text_excerpt",
        "value": "Clair3-Trio is archived. Please visit the new version [Clair3-Nova](https://github.com/HKU-BAL/Clair3-nova) that extended Clair3-Trio to support accurate *de novo* variant calling. \n"
      },
      "source": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8924109257815762,
      "result": {
        "original_header": "Latest Updates",
        "type": "Text_excerpt",
        "value": "*v0.7 (July 9, 2023)*: Added the source/version/command tag into the VCF header. Fixed a bug of AF for 1/2 genotypes. Added AD into VCF output. Added document for [output](#output-files) files. Added a [page](docs/trio/merge.md) for the method of merging VCF. \n*v0.6 (April 25, 2023)*: Bumped up Python from 3.6 to 3.9, Whatshap from v1.0 to v1.7 [Clair3 #193](https://github.com/HKU-BAL/Clair3/issues/193). Fixed gVCF format mistake [#3](https://github.com/HKU-BAL/Clair3-Trio/issues/3). Added options \"--enable_phasing\", \"--enable_output_phasing\", and \"enable_output_haplotagging\" [#4](https://github.com/HKU-BAL/Clair3-Trio/issues/4). Added singularity support. \n*v0.3 (June 20, 2022)*: Optimized Clair3-Trio speed, the runtime of Clair3-Trio to call variants from the whole genome is about 2.4 times of calling a single sample form Clair3 (v0.1-r10). \n*v0.2 (May 15, 2022)*:  A guppy5 model for Clair3-Trio is available now. Check [this page](https://github.com/HKU-BAL/Clair3-Trio/blob/trio/docs/trio/guppy5.md) for more information about the Guppy5 model. \n"
      },
      "source": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9922597439646661,
      "result": {
        "original_header": "What's New in Clair3-Trio",
        "type": "Text_excerpt",
        "value": "* **New Architecture.** Clair3-Trio employs a Trio-to-Trio deep neural network model that allows it to take three samples as input and output the varaints of all three samples in one go.\n* **Mendelian violations aware.**  Clair3-Trio uses MCVLoss to improve variants calling in trio by penalizing mendelian violoations. \n* **Improved Performance.** Using only 10x of HG002, 3 and 4 ONT data, Clair3-Trio achieved 97.30% SNP F1-score and 56.48% Indel F1-score. Compared to Clair3, Clair3-Trio reduced SNP errors by **~78%**,  and Indel errors by **~22%**. Clair3-Trio signficantly reduced Mendelian violations from 48,345 to 7,072. \n"
      },
      "source": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8205477287478774,
      "result": {
        "original_header": "Clair3's Pre-trained Models",
        "type": "Text_excerpt",
        "value": "When using the Clair3-Trio model, please use a corresponding Clair3 model for Pileup calling. Check [here](https://github.com/HKU-BAL/Clair3#pre-trained-models) or [here](https://github.com/nanoporetech/rerio) for more information about Clair3 pretrained model. \n"
      },
      "source": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9126784266854662,
      "result": {
        "original_header": "Output Files",
        "type": "Text_excerpt",
        "value": "Clair3-Trio outputs files in VCF/GVCF format for the trio genotype. The output files (for a trio [C ], [P1], [P2]) including: \n    .\n    \u251c\u2500\u2500 run_clair3_trio.log\t\t        # Clair3-Trio running log\n    \u251c\u2500\u2500 [C ].vcf.gz\t\t\t\t# Called variants in vcf format for [C ]\n    \u251c\u2500\u2500 [P1].vcf.gz\t\t\t\t# Called variants in vcf format for [P1]\n    \u251c\u2500\u2500 [P2].vcf.gz\t\t\t\t# Called variants in vcf format for [P2]\n    \u251c\u2500\u2500 [C ].gvcf.gz\t\t\t# Called variants in gvcf format for [C ] (when enabled `--gvcf`)\n    \u251c\u2500\u2500 [P1].gvcf.gz\t\t\t# Called variants in gvcf format for [P2] (when enabled `--gvcf`)\n    \u251c\u2500\u2500 [P2].gvcf.gz\t\t\t# Called variants in gvcf format for [P2] (when enabled `--gvcf`)\n    \u251c\u2500\u2500 phased_[C ].vcf.gz\t\t\t# Called phased variants for [C ] (when enabled `--enable_output_phasing`)\t\t\n    \u251c\u2500\u2500 phased_[P1].vcf.gz\t\t\t# Called phased variants for [P1] (when enabled `--enable_output_phasing`)\t\t\n    \u251c\u2500\u2500 phased_[P2].vcf.gz\t\t\t# Called phased variants for [P2] (when enabled `--enable_output_phasing`)\t\t\n    \u251c\u2500\u2500 phased_[C ].bam\t\t\t# alignment tagged with phased variants info. for [C ] (when enabled `--enable_output_haplotagging`)\t\t\n    \u251c\u2500\u2500 phased_[P1].bam\t\t\t# alignment tagged with phased variants info. for [P1] (when enabled `--enable_output_haplotagging`)\t\t\n    \u251c\u2500\u2500 phased_[P2].bam\t\t\t# alignment tagged with phased variants info. for [P2] (when enabled `--enable_output_haplotagging`)\t\t\n    \u251c\u2500\u2500 [C ]_c3t.vcf.gz\t\t\t# raw variants from Clair-Trio's trio model for [C ]\n    \u251c\u2500\u2500 [P1]_c3t.vcf.gz\t\t\t# raw variants from Clair-Trio's trio model for [P1]\n    \u251c\u2500\u2500 [P2]_c3t.vcf.gz\t\t\t# raw variants from Clair-Trio's trio model for [P2]\n    \u251c\u2500\u2500 /log\t\t\t\t# folder for detailed running log\n    \u2514\u2500\u2500 /tmp\t\t\t\t# folder for all running temporary files  \n"
      },
      "source": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8343746569859252,
      "result": {
        "original_header": "Training Data",
        "type": "Text_excerpt",
        "value": "Clair3-Trio trained its trio models using four GIAB samples (HG002, HG003 and HG004). All models were trained with chr20 excluded (including only chr1-19, 21, 22). All data links can be found at this [page](https://github.com/HKU-BAL/Clair3-Trio/blob/trio/docs/trio/training_data.md). \n"
      },
      "source": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8726419882144703,
      "result": {
        "original_header": "VCF/GVCF Output Formats",
        "type": "Text_excerpt",
        "value": "Clair3-Trio outputs a GATK-compatible GVCF format that passes GATK's `ValidateVariants` module. Different from DeepVariant that uses `<*>` to represent any possible alternative allele, Clair3-Trio uses `<NON_REF>`, the same as GATK. \nClair3-Trio GVCF files can be merged with GLNexus. A GLNexus caller-based configuration file is available [Download](http://www.bio8.cs.hku.hk/clair3_trio/config/clair3.yml). \nNote that the reference call in VCF is called via Model, and Refcall in GVCF may be **inferred** from allele depth. \nWe left some comments for merging multiple VCF/GVCF [here](docs/trio/merge.md). \n"
      },
      "source": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9776682843417943,
      "result": {
        "original_header": "Publication",
        "type": "Text_excerpt",
        "value": "- Zheng Z, Li S, Su J, Leung AW, Lam TW, Luo R. Symphonizing pileup and full-alignment for deep learning-based long-read variant calling. Nature Computational Science. 2022 Dec;2(12):797-803.\n- Su J, Zheng Z, Ahmed SS, Lam TW, Luo R. Clair3-trio: high-performance Nanopore long-read variant calling in family trios with trio-to-trio deep neural networks. Briefings in Bioinformatics. 2022 Sep;23(5):bbac301. \n"
      },
      "source": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/HKU-BAL/Clair3-Trio/tree/trio/docs"
      },
      "technique": "file_exploration"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/HKU-BAL/Clair3-Trio/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/colab/clair3_illumina_quick_demo.ipynb"
      },
      "source": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/colab/clair3_illumina_quick_demo.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/colab/clair3_pacbio_hifi_quick_demo.ipynb"
      },
      "source": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/colab/clair3_pacbio_hifi_quick_demo.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/colab/clair3_ont_quick_demo.ipynb"
      },
      "source": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/colab/clair3_ont_quick_demo.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/HKU-BAL/Clair3-Trio/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "HKU-BAL/Clair3-Trio"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Clair3-Trio: variant calling in trio using Nanopore long-reads"
      },
      "source": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/run_clair3_trio.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/run_clair3.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/scripts/clair3_ilmn_quick_demo.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/scripts/clair3_hifi_quick_demo.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/scripts/clair3_ont_quick_demo.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/scripts/clair3.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/docs/trio/4_create_tensors.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/docs/trio/4_1_downsample_bin_1.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/docs/trio/5_train.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/docs/trio/4_create_tensors_sub.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/docs/trio/1_run_RU.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/docs/trio/3_generate_downsample_pileup.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/docs/trio/4_1_downsample_bin.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/docs/trio/2_generate_downsample_phased_bam.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/docs/trio/0_generate_trio_bed.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/docs/trio/trio_training.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/docs/trio/trio_quick_demo_chr20.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/docs/trio/trio_quick_demo.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/docs/trio/trio_quick_demo_docker.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/docs/trio/5_1_train.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/trio/Call_Clair3_Trio_VarBam.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/trio/Call_Clair3_Trio.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/trio/Call_Clair3_Trio_rerun.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/docs/images/clair3_trio_nova.png"
      },
      "source": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Option 1. Docker pre-built image",
        "parent_header": [
          "Clair3-Trio: variant calling in trio using Nanopore long-reads",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "A pre-built docker image is available [here](https://hub.docker.com/r/hkubal/clair3-trio). With it you can run Clair3-Trio using a single command.\n\nCaution: Absolute path is needed for both `INPUT_DIR` and `OUTPUT_DIR`.\n\n```bash\nINPUT_DIR=\"[YOUR_INPUT_FOLDER]\"            # e.g. /input\nREF=${_INPUT_DIR}/ref.fa                   # change your reference file name here\nOUTPUT_DIR=\"[YOUR_OUTPUT_FOLDER]\"          # e.g. /output\nTHREADS=\"[MAXIMUM_THREADS]\"                # e.g. 8\nMODEL_C3=\"[Clair3 MODEL NAME]\"         \t   # e.g. Clair3 model, r941_prom_hac_g360+g422 for Guppy4 data, r941_prom_sup_g5014 for Guppy5 data\nMODEL_C3T=\"[Clair3-Trio MODEL NAME]\"       # e.g. Clair3-Trio model, c3t_hg002_g422 for Guppy4 data, c3t_hg002_r941_prom_sup_g5014 for Guppy5 data\n\n\ndocker run -it \\\n  -v ${INPUT_DIR}:${INPUT_DIR} \\\n  -v ${OUTPUT_DIR}:${OUTPUT_DIR} \\\n  hkubal/clair3-trio:latest \\\n  /opt/bin/run_clair3_trio.sh \\\n  --ref_fn=${INPUT_DIR}/ref.fa \\                  ## change your reference file name here\n  --bam_fn_c=${INPUT_DIR}/child_input.bam \\       ## change your child's bam file name here \n  --bam_fn_p1=${INPUT_DIR}/parent1_input.bam \\    ## change your parent-1's bam file name here     \n  --bam_fn_p2=${INPUT_DIR}/parenet2_input.bam \\   ## change your parent-2's bam file name here   \n  --sample_name_c=${SAMPLE_C} \\                   ## change your child's name here\n  --sample_name_p1=${SAMPLE_P1} \\                 ## change your parent-1's name here\n  --sample_name_p2=${SAMPLE_P2} \\                 ## change your parent-2's name here\n  --threads=${THREADS} \\                          ## maximum threads to be used\n  --model_path_clair3=\"/opt/models/clair3_models/${MODEL_C3}\" \\\n  --model_path_clair3_trio=\"/opt/models/clair3_trio_models/${MODEL_C3T}\" \\\n  --output=${OUTPUT_DIR}                          ## absolute output path prefix \n\n```\n"
      },
      "source": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Option 2. Singularity",
        "parent_header": [
          "Clair3-Trio: variant calling in trio using Nanopore long-reads",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Caution: Absolute path is needed for both `INPUT_DIR` and `OUTPUT_DIR`.\n\n```\nINPUT_DIR=\"[YOUR_INPUT_FOLDER]\"            # e.g. /input\nREF=${_INPUT_DIR}/ref.fa                   # change your reference file name here\nOUTPUT_DIR=\"[YOUR_OUTPUT_FOLDER]\"          # e.g. /output\nTHREADS=\"[MAXIMUM_THREADS]\"                # e.g. 8\nMODEL_C3=\"[Clair3 MODEL NAME]\"         \t   # e.g. Clair3 model, r941_prom_hac_g360+g422 for Guppy4 data, r941_prom_sup_g5014 for Guppy5 data\nMODEL_C3T=\"[Clair3-Trio MODEL NAME]\"       # e.g. Clair3-Trio model, c3t_hg002_g422 for Guppy4 data, c3t_hg002_r941_prom_sup_g5014 for Guppy5 data\n\nconda config --add channels defaults\nconda create -n singularity-env -c conda-forge singularity -y\nconda activate singularity-env\n\n# singularity pull docker pre-built image\nsingularity pull docker://hkubal/clair3-trio:latest\n\nsingularity exec \\\n-B ${INPUT_DIR},${OUTPUT_DIR} \\\nclair3-trio_latest.sif \\\n/opt/bin/run_clair3_trio.sh \\\n--ref_fn=${INPUT_DIR}/ref.fa \\                  ## change your reference file name here\n--bam_fn_c=${INPUT_DIR}/child_input.bam \\       ## change your child's bam file name here \n--bam_fn_p1=${INPUT_DIR}/parent1_input.bam \\    ## change your parent-1's bam file name here     \n--bam_fn_p2=${INPUT_DIR}/parenet2_input.bam \\   ## change your parent-2's bam file name here   \n--sample_name_c=${SAMPLE_C} \\                   ## change your child's name here\n--sample_name_p1=${SAMPLE_P1} \\                 ## change your parent-1's name here\n--sample_name_p2=${SAMPLE_P2} \\                 ## change your parent-2's name here\n--threads=${THREADS} \\                          ## maximum threads to be used\n--model_path_clair3=\"/opt/models/clair3_models/${MODEL_C3}\" \\\n--model_path_clair3_trio=\"/opt/models/clair3_trio_models/${MODEL_C3T}\" \\\n--output=${OUTPUT_DIR}                          ## absolute output path prefix \n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Option 3. Build an anaconda virtual environment",
        "parent_header": [
          "Clair3-Trio: variant calling in trio using Nanopore long-reads",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "**Anaconda install**:\n\nPlease install anaconda using the official [guide](https://docs.anaconda.com/anaconda/install) or using the commands below:\n\n```bash\nwget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\nchmod +x ./Miniconda3-latest-Linux-x86_64.sh \n./Miniconda3-latest-Linux-x86_64.sh\n```\n\n**Install Clair3 env and Clair3-Trio using anaconda step by step:**\n\n\n```bash\n# create and activate an environment named clair3\nconda create -n clair3 python=3.9.0 -y\nsource activate clair3\n\n# install pypy and packages in the environemnt\nconda install -c conda-forge pypy3.6 -y\npypy3 -m ensurepip\npypy3 -m pip install mpmath==1.2.1\n\n# install python packages in environment\nconda install -c conda-forge tensorflow==2.8.0 -y\nconda install -c conda-forge pytables -y\nconda install -c anaconda pigz cffi==1.14.4 -y\nconda install -c conda-forge parallel=20191122 zstd -y\nconda install -c conda-forge -c bioconda samtools=1.15.1 -y\nconda install -c conda-forge -c bioconda whatshap=1.7 -y\nconda install -c conda-forge xz zlib bzip2 automake curl -y\n# tensorflow-addons is required in training\npip install tensorflow-addons\n\n# clone Clair3-Trio\ngit clone https://github.com/HKU-BAL/Clair3-Trio.git\ncd Clair3-Trio\n\n# download Clair3's pre-trained models\nmkdir -p models/clair3_models\nwget http://www.bio8.cs.hku.hk/clair3_trio/clair3_models/clair3_models.tar.gz \ntar -zxvf clair3_models.tar.gz -C ./models/clair3_models\n\n\n# download Clair3-Trio's pre-trained models\nmkdir -p models/clair3_trio_models\nwget http://www.bio8.cs.hku.hk/clair3_trio/clair3_trio_models/clair3_trio_models.tar.gz \ntar -zxvf clair3_trio_models.tar.gz -C ./models/clair3_trio_models\n\n\n# run clair3-trio\n_INPUT_DIR=\"[YOUR_INPUT_FOLDER]\"            # e.g. ./input\n_BAM_C=${_INPUT_DIR}/input_child.bam        # chnage your child's bam file name here\n_BAM_P1=${_INPUT_DIR}/input_parent1.bam     # chnage your parent-1's bam file name here\n_BAM_P2=${_INPUT_DIR}/input_parent2.bam     # chnage your parent-2's bam file name here\n_SAMPLE_C=\"[Child sample ID]\"               # child sample ID, e.g. HG002\n_SAMPLE_P1=\"[Parent1 sample ID]\"            # parent1 sample ID, e.g. HG003\n_SAMPLE_P2=\"[Parent2 sample ID]\"            # parent2 sample ID, e.g. HG004\n_REF=${_INPUT_DIR}/ref.fa                   # change your reference file name here\n_OUTPUT_DIR=\"[YOUR_OUTPUT_FOLDER]\"          # e.g. ./output\n_THREADS=\"[MAXIMUM_THREADS]\"                # e.g. 8\n_MODEL_DIR_C3=\"[Clair3 MODEL NAME]\"         # e.g. ./models/clair3_models/ont\n_MODEL_DIR_C3T=\"[Clair3-Trio MODEL NAME]\"   # e.g. ./models/clair3_trio_models/c3t_hg002_g422\n\n./run_clair3_trio.sh \\\n  --bam_fn_c=${_BAM_C} \\    \n  --bam_fn_p1=${_BAM_P1} \\\n  --bam_fn_p2=${_BAM_P2} \\\n  --output=${_OUTPUT_DIR} \\\n  --ref_fn=${_REF} \\\n  --threads=${_THREADS} \\\n  --model_path_clair3=\"${_MODEL_DIR_C3}\" \\\n  --model_path_clair3_trio=\"${_MODEL_DIR_C3T}\" \\\n  --sample_name_c=${_SAMPLE_C} \\\n  --sample_name_p1=${_SAMPLE_P1} \\\n  --sample_name_p2=${_SAMPLE_P2}\n\n```"
      },
      "source": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Option 4. Bioconda",
        "parent_header": [
          "Clair3-Trio: variant calling in trio using Nanopore long-reads",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "\n```bash\n# make sure channels are added in conda\nconda config --add channels defaults\nconda config --add channels bioconda\nconda config --add channels conda-forge\n\n# create conda environment named \"clair3-trio\"\nconda create -n clair3-trio -c bioconda clair3-trio python=3.9.0 -y\nconda activate clair3-trio\n\n# run clair3-trio like this afterward\n_INPUT_DIR=\"[YOUR_INPUT_FOLDER]\"            # e.g. ./input\n_BAM_C=${_INPUT_DIR}/input_child.bam        # chnage your child's bam file name here\n_BAM_P1=${_INPUT_DIR}/input_parent1.bam     # chnage your parent-1's bam file name here\n_BAM_P2=${_INPUT_DIR}/input_parent2.bam     # chnage your parent-2's bam file name here\n_SAMPLE_C=\"[Child sample ID]\"               # child sample ID, e.g. HG002\n_SAMPLE_P1=\"[Parent1 sample ID]\"            # parent1 sample ID, e.g. HG003\n_SAMPLE_P2=\"[Parent2 sample ID]\"            # parent2 sample ID, e.g. HG004\n_REF=${_INPUT_DIR}/ref.fa                   # change your reference file name here\n_OUTPUT_DIR=\"[YOUR_OUTPUT_FOLDER]\"          # e.g. ./output\n_THREADS=\"[MAXIMUM_THREADS]\"                # e.g. 8\n_MODEL_DIR_C3=\"[Clair3 MODEL NAME]\"         # e.g. r941_prom_sup_g5014\n_MODEL_DIR_C3T=\"[Clair3-Trio MODEL NAME]\"   # e.g. c3t_hg002_r941_prom_sup_g5014\n\nrun_clair3_trio.sh \\\n  --bam_fn_c=${_BAM_C} \\    \n  --bam_fn_p1=${_BAM_P1} \\\n  --bam_fn_p2=${_BAM_P2} \\\n  --output=${_OUTPUT_DIR} \\\n  --ref_fn=${_REF} \\\n  --threads=${_THREADS} \\\n  --model_path_clair3=\"${CONDA_PREFIX}/bin/models/${_MODEL_DIR_C3}\" \\ \n  --model_path_clair3_trio=\"${CONDA_PREFIX}/bin/models/${_MODEL_DIR_C3T}\" \\ \n  --sample_name_c=${_SAMPLE_C} \\\n  --sample_name_p1=${_SAMPLE_P1} \\\n  --sample_name_p2=${_SAMPLE_P2}\n```\n\nCheck [Usage](#Usage) for more options. [Pre-trained models](#pre-trained-models) are already included in the bioconda package.\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Option 5. Docker Dockerfile",
        "parent_header": [
          "Clair3-Trio: variant calling in trio using Nanopore long-reads",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Building a docker image.\n```\n# clone Clair3-Trio\ngit clone https://github.com/hku-bal/Clair3-Trio.git\ncd Clair3-Trio\n\n# build a docker image named hkubal/clair3-trio:latest\n# might require docker authentication to build docker image \ndocker build -f ./Dockerfile -t hkubal/clair3-trio:latest .\n\n# run clair3-trio docker image like \ndocker run -it hkubal/clair3-trio:latest /opt/bin/run_clair3_trio.sh --help\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9470469002503822,
      "result": {
        "original_header": "Latest Updates",
        "type": "Text_excerpt",
        "value": "*v0.7.1 (Oct 17, 2023)*: Fix memory error [issue](https://github.com/HKU-BAL/Clair3-Trio/issues/10). \n*v0.5 (April 10, 2023)*: Added support for gVCF output. Use `--gvcf` to enable gVCF output. \n*v0.1 (April 22, 2022)*: Initial release. \n"
      },
      "source": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9952733325691777,
      "result": {
        "original_header": "Pre-trained Models",
        "type": "Text_excerpt",
        "value": "Download models from [here](http://www.bio8.cs.hku.hk/clair3_trio/clair3_trio_models/) or click on the links below. \n|           Model name           |  Platform   |    Training samples         |   Date   |  Basecaller  | File    |          Link            |\n| :----------------------------: | :---------: | :----------------------------------------------------------: | -------------------------------- | :--------------------------: | ----------------| :-------------------: |\n|    c3t_hg002_dna_r1041_e82_400bps_sup |     ONT 10.4.1    |                         HG002,3,4      |             20230322 | Dorado v4.0.0 SUP | c3t_hg002_dna_r1041_e82_400bps_sup.tar.gz      | [Download](http://www.bio8.cs.hku.hk/clair3_trio/clair3_trio_models/c3t_hg002_dna_r1041_e82_400bps_sup.tar.gz) |\n|    c3t_hg002_r941_prom_sup_g5014 |     ONT r9.4.1    |                         HG002,3,4      |             20220514 | Guppy5 sup | c3t_hg002_r941_prom_sup_g5014.tar.gz      | [Download](http://www.bio8.cs.hku.hk/clair3_trio/clair3_trio_models/c3t_hg002_r941_prom_sup_g5014.tar.gz) |\n|    c3t_hg002_g422 |     ONT r9.4.1     |                         HG002,3,4      |             20220422 | Guppy4 hac | c3t_hg002_g422.tar.gz      | [Download](http://www.bio8.cs.hku.hk/clair3_trio/clair3_trio_models/c3t_hg002_g422.tar.gz) | \n"
      },
      "source": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.999743874356087,
      "result": {
        "original_header": "Clair3's Pre-trained Models",
        "type": "Text_excerpt",
        "value": "|           Model name           |  Platform   |                       Training samples                       | Date   |  Basecaller  | File                                |                             Link                             |\n| :----------------------------: | :---------: | :----------------------------------------------------------: | -------------------------------- | :--------------------------: | ----------------------------------- | :----------------------------------------------------------: |\n|      r1041_e82_400bps_sup_v400       |     ONT r10.4.1   |                    HG002,4,5  | - |  Dorado v4.0.0 SUP | r1041_e82_400bps_sup_v400.tar.gz          | [Download](http://www.bio8.cs.hku.hk/clair3_trio/clair3_models/r1041_e82_400bps_sup_v400.tar.gz) |\n|      r941_prom_sup_g5014       |     ONT r9.4.1     |                    HG002,4,5 (Guppy5_sup)                    | 20220112 |  Guppy5 sup  | r941_prom_sup_g5014.tar.gz          | [Download](http://www.bio8.cs.hku.hk/clair3_trio/clair3_models/r941_prom_sup_g5014.tar.gz) |\n|    r941_prom_hac_g360+g422     |     ONT r9.4.1    |                         HG001,2,4,5                          | 20210517 | Guppy3,4 hac | r941_prom_hac_g360+g422.tar.gz      | [Download](http://www.bio8.cs.hku.hk/clair3_trio/clair3_models/r941_prom_hac_g360+g422.tar.gz) | \n"
      },
      "source": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999999925239536,
      "result": {
        "original_header": "Output Files",
        "type": "Text_excerpt",
        "value": "    .\n    \u251c\u2500\u2500 run_clair3_trio.log\t\t        # Clair3-Trio running log\n    \u251c\u2500\u2500 [C ].vcf.gz\t\t\t\t# Called variants in vcf format for [C ]\n    \u251c\u2500\u2500 [P1].vcf.gz\t\t\t\t# Called variants in vcf format for [P1]\n    \u251c\u2500\u2500 [P2].vcf.gz\t\t\t\t# Called variants in vcf format for [P2]\n    \u251c\u2500\u2500 [C ].gvcf.gz\t\t\t# Called variants in gvcf format for [C ] (when enabled `--gvcf`)\n    \u251c\u2500\u2500 [P1].gvcf.gz\t\t\t# Called variants in gvcf format for [P2] (when enabled `--gvcf`)\n    \u251c\u2500\u2500 [P2].gvcf.gz\t\t\t# Called variants in gvcf format for [P2] (when enabled `--gvcf`)\n    \u251c\u2500\u2500 phased_[C ].vcf.gz\t\t\t# Called phased variants for [C ] (when enabled `--enable_output_phasing`)\t\t\n    \u251c\u2500\u2500 phased_[P1].vcf.gz\t\t\t# Called phased variants for [P1] (when enabled `--enable_output_phasing`)\t\t\n    \u251c\u2500\u2500 phased_[P2].vcf.gz\t\t\t# Called phased variants for [P2] (when enabled `--enable_output_phasing`)\t\t\n    \u251c\u2500\u2500 phased_[C ].bam\t\t\t# alignment tagged with phased variants info. for [C ] (when enabled `--enable_output_haplotagging`)\t\t\n    \u251c\u2500\u2500 phased_[P1].bam\t\t\t# alignment tagged with phased variants info. for [P1] (when enabled `--enable_output_haplotagging`)\t\t\n    \u251c\u2500\u2500 phased_[P2].bam\t\t\t# alignment tagged with phased variants info. for [P2] (when enabled `--enable_output_haplotagging`)\t\t\n    \u251c\u2500\u2500 [C ]_c3t.vcf.gz\t\t\t# raw variants from Clair-Trio's trio model for [C ]\n    \u251c\u2500\u2500 [P1]_c3t.vcf.gz\t\t\t# raw variants from Clair-Trio's trio model for [P1]\n    \u251c\u2500\u2500 [P2]_c3t.vcf.gz\t\t\t# raw variants from Clair-Trio's trio model for [P2]\n    \u251c\u2500\u2500 /log\t\t\t\t# folder for detailed running log\n    \u2514\u2500\u2500 /tmp\t\t\t\t# folder for all running temporary files  \n"
      },
      "source": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8536846006313863,
      "result": {
        "original_header": "VCF/GVCF Output Formats",
        "type": "Text_excerpt",
        "value": "Clair3-Trio GVCF files can be merged with GLNexus. A GLNexus caller-based configuration file is available [Download](http://www.bio8.cs.hku.hk/clair3_trio/config/clair3.yml). \n"
      },
      "source": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8246878217532743,
      "result": {
        "original_header": "Pre-trained Models",
        "type": "Text_excerpt",
        "value": "|           Model name           |  Platform   |    Training samples         |   Date   |  Basecaller  | File    |          Link            |\n| :----------------------------: | :---------: | :----------------------------------------------------------: | -------------------------------- | :--------------------------: | ----------------| :-------------------: |\n|    c3t_hg002_dna_r1041_e82_400bps_sup |     ONT 10.4.1    |                         HG002,3,4      |             20230322 | Dorado v4.0.0 SUP | c3t_hg002_dna_r1041_e82_400bps_sup.tar.gz      | [Download](http://www.bio8.cs.hku.hk/clair3_trio/clair3_trio_models/c3t_hg002_dna_r1041_e82_400bps_sup.tar.gz) |\n|    c3t_hg002_r941_prom_sup_g5014 |     ONT r9.4.1    |                         HG002,3,4      |             20220514 | Guppy5 sup | c3t_hg002_r941_prom_sup_g5014.tar.gz      | [Download](http://www.bio8.cs.hku.hk/clair3_trio/clair3_trio_models/c3t_hg002_r941_prom_sup_g5014.tar.gz) |\n|    c3t_hg002_g422 |     ONT r9.4.1     |                         HG002,3,4      |             20220422 | Guppy4 hac | c3t_hg002_g422.tar.gz      | [Download](http://www.bio8.cs.hku.hk/clair3_trio/clair3_trio_models/c3t_hg002_g422.tar.gz) | \n"
      },
      "source": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8259507889947582,
      "result": {
        "original_header": "Clair3's Pre-trained Models",
        "type": "Text_excerpt",
        "value": "|           Model name           |  Platform   |                       Training samples                       | Date   |  Basecaller  | File                                |                             Link                             |\n| :----------------------------: | :---------: | :----------------------------------------------------------: | -------------------------------- | :--------------------------: | ----------------------------------- | :----------------------------------------------------------: |\n|      r1041_e82_400bps_sup_v400       |     ONT r10.4.1   |                    HG002,4,5  | - |  Dorado v4.0.0 SUP | r1041_e82_400bps_sup_v400.tar.gz          | [Download](http://www.bio8.cs.hku.hk/clair3_trio/clair3_models/r1041_e82_400bps_sup_v400.tar.gz) |\n|      r941_prom_sup_g5014       |     ONT r9.4.1     |                    HG002,4,5 (Guppy5_sup)                    | 20220112 |  Guppy5 sup  | r941_prom_sup_g5014.tar.gz          | [Download](http://www.bio8.cs.hku.hk/clair3_trio/clair3_models/r941_prom_sup_g5014.tar.gz) |\n|    r941_prom_hac_g360+g422     |     ONT r9.4.1    |                         HG001,2,4,5                          | 20210517 | Guppy3,4 hac | r941_prom_hac_g360+g422.tar.gz      | [Download](http://www.bio8.cs.hku.hk/clair3_trio/clair3_models/r941_prom_hac_g360+g422.tar.gz) | \n"
      },
      "source": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/HKU-BAL/Clair3-Trio/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bioinformatics, computational-biology, deep-learning, genomics, long-reads, nanopore, ont-models, trio-variant-calling, variant-calling"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "BSD 3-Clause \"New\" or \"Revised\" License",
        "spdx_id": "BSD-3-Clause",
        "type": "License",
        "url": "https://api.github.com/licenses/bsd-3-clause",
        "value": "https://api.github.com/licenses/bsd-3-clause"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Copyright 2022 The University of Hong Kong, Department of Computer Science\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\n   may be used to endorse or promote products derived from this software without\n   specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
      },
      "source": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/LICENSE.md",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Clair3-Trio"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "HKU-BAL"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 1122758,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 293551,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 115488,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 74978,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 35105,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 2320,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier"
  ],
  "somef_provenance": {
    "date": "2024-10-04 11:50:24",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 14
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick Demo",
        "parent_header": [
          "Clair3-Trio: variant calling in trio using Nanopore long-reads"
        ],
        "type": "Text_excerpt",
        "value": "*   see [Trio Quick Demo](docs/trio/trio_quick_demo.md).\n\n----\n"
      },
      "source": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "General Usage",
        "parent_header": [
          "Clair3-Trio: variant calling in trio using Nanopore long-reads",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "**Caution**:  Use `=value` for optional parameters, e.g. `--bed_fn=fn.bed` instead of `--bed_fn fn.bed`.\n\n```bash\n./run_clair3_trio.sh \\\n  --bam_fn_c=${_BAM_C} \\\n  --bam_fn_p1=${_BAM_P1} \\\n  --bam_fn_p2=${_BAM_P2} \\\n  --output=${_OUTPUT_DIR} \\\n  --ref_fn=${_REF} \\\n  --threads=${_THREADS} \\\n  --model_path_clair3=\"${_MODEL_DIR_C3}\" \\\n  --model_path_clair3_trio=\"${_MODEL_DIR_C3T}\" \\\n  --bed_fn=${_INPUT_DIR}/quick_demo.bed \\\n  --sample_name_c=${_SAMPLE_C} \\\n  --sample_name_p1=${_SAMPLE_P1} \\\n  --sample_name_p2=${_SAMPLE_P2}\n\n```\n"
      },
      "source": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Options",
        "parent_header": [
          "Clair3-Trio: variant calling in trio using Nanopore long-reads",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "**Required parameters:**\n\n```bash\n  --bam_fn_c=FILE             \t Child's BAM file input. The input file must be samtools indexed.\n  --bam_fn_p1=FILE             \t Parent1's BAM file input (Parent1 can be father or mother). The input file must be samtools indexed.\n  --bam_fn_p2=FILE             \t Parent2's BAM file input (Parent2 can be father or mother). The input file must be samtools indexed.\n  -f, --ref_fn=FILE              FASTA reference file input. The input file must be samtools indexed.\n  --model_path_clair3=STR        The folder path containing a Clair3 model (requiring six files in the folder, including pileup.data-00000-of-00002, pileup.data-00001-of-00002 pileup.index, full_alignment.data-00000-of-00002, full_alignment.data-00001-of-00002  and full_alignment.index.\n  --model_path_clair3_trio=STR   The folder path containing a Clair3-Trio model.\n  -t, --threads=INT              Max threads to be used. The full genome will be divided into small chunks for parallel processing. Each chunk will use 4 threads. The chunks being processed simultaneously is ceil($threads/4)*3. 3 is the overloading factor.\n  -o, --output=PATH              VCF output directory.\n```\n\n**Other parameters:**\n\n**Caution**:  Use `=value` for optional parameters, e.g., `--bed_fn=fn.bed` instead of `--bed_fn fn.bed`\n\n```bash\n  --sample_name_c=STR       Define the sample name for Child to be shown in the VCF file.[Child].\n  --sample_name_p1=STR      Define the sample name for Parent1 to be shown in the VCF file.[Parent1].\n  --sample_name_p2=STR      Define the sample name for Parent2 to be shown in the VCF file.[Parent2].\n  --bed_fn=FILE             Call variants only in the provided bed regions.\n  --vcf_fn=FILE             Candidate sites VCF file input, variants will only be called at the sites in the VCF file if provided.\n  --ctg_name=STR            The name of the sequence to be processed.\n  --qual=INT                If set, variants with >$qual will be marked PASS, or LowQual otherwise.\n  --samtools=STR            Path of samtools, samtools version >= 1.10 is required.\n  --python=STR              Path of python, python3 >= 3.6 is required.\n  --pypy=STR                Path of pypy3, pypy3 >= 3.6 is required.\n  --parallel=STR            Path of parallel, parallel >= 20191122 is required.\n  --whatshap=STR            Path of whatshap, whatshap >= 1.0 is required.\n  --chunk_size=INT          The size of each chuck for parallel processing, default: 5Mbp.\n  --gvcf                    Enable GVCF output, default: disable.\n  --print_ref_calls         Show reference calls (0/0) in vcf file, default: disable.\n  --include_all_ctgs        Call variants on all contigs, otherwise call in chr{1..22,X,Y} and {1..22,X,Y}, default: disable.\n  --snp_min_af=FLOAT        Minimum SNP AF required for a candidate variant. Lowering the value might increase a bit of sensitivity in trade of speed and accuracy, default: ont:0.08.\n  --indel_min_af=FLOAT      Minimum INDEL AF required for a candidate variant. Lowering the value might increase a bit of sensitivity in trade of speed and accuracy, default: ont:0.15.\n\n  --pileup_model_prefix=STR EXPERIMENTAL: Model prefix in pileup calling, including $prefix.data-00000-of-00002, $prefix.data-00001-of-00002 $prefix.index. default: pileup.\n  --fa_model_prefix=STR     EXPERIMENTAL: Model prefix in full-alignment calling, including $prefix.data-00000-of-00002, $prefix.data-00001-of-00002 $prefix.index, default: full_alignment.\n  --trio_model_prefix=STR   EXPERIMENTAL: Model prefix in trio calling, including $prefix.data-00000-of-00002, $prefix.data-00001-of-00002 $prefix.index, default: trio.\n  --var_pct_full=FLOAT      EXPERIMENTAL: Specify an expected percentage of low quality 0/1 and 1/1 variants called in the pileup mode for full-alignment mode calling, default: 0.3.\n  --ref_pct_full=FLOAT      EXPERIMENTAL: Specify an expected percentage of low quality 0/0 variants called in the pileup mode for full-alignment mode calling, default: 0.3 for ilmn and hifi, 0.1 for ont.\n  --var_pct_phasing=FLOAT   EXPERIMENTAL: Specify an expected percentage of high quality 0/1 variants used in Clair3 WhatsHap phasing, default: 0.8 for ont guppy5 and 0.7 for other platforms.\n  --enable_output_phasing        Output phased variants using whatshap, default: disable.\n  --enable_output_haplotagging   Output enable_output_haplotagging BAM variants using whatshap, default: disable.\n  --enable_phasing               It means `--enable_output_phasing`. The option is retained for backward compatibility.\n```\n\n\n----\n"
      },
      "source": "https://raw.githubusercontent.com/HKU-BAL/Clair3-Trio/trio/README.md",
      "technique": "header_analysis"
    }
  ]
}