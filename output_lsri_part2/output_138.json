{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Selected References",
        "parent_header": [
          "pyInfinityFlow"
        ],
        "type": "Text_excerpt",
        "value": "[<font size=\"2\"><sup>1</sup> Chen, T., Guestrin, C. XGBoost: A scalable tree boosting system, in Proceedings of the 22nd ACM SIGKDD International Conference on Knowledge Discovery and Data Mining (Association for Computing Machinery, 2016), pp. 785\u2013794.</font>](https://dl.acm.org/doi/abs/10.1145/2939672.2939785)\n\n[<font size=\"2\"><sup>2</sup> Becht, E., Tolstrup, D., Dutertre, C. A., Morawski, P. A., Campbell, D. J., Ginhoux, F., ... & Headley, M. B. (2021). High-throughput single-cell quantification of hundreds of proteins using conventional flow cytometry and machine learning. Science advances, 7(39), eabg0505. </font>](https://www.science.org/doi/full/10.1126/sciadv.abg0505)\n\n[<font size=\"2\"><sup>3</sup> Wolf, F. A., Angerer, P., & Theis, F. J. (2018). SCANPY: large-scale single-cell gene expression data analysis. Genome biology, 19(1), 1-5. </font>](https://genomebiology.biomedcentral.com/articles/10.1186/s13059-017-1382-0?ref=https://githubhelp.com)\n\n[<font size=\"2\"><sup>4</sup> McInnes, L., Healy, J., & Melville, J. (2018). Umap: Uniform manifold approximation and projection for dimension reduction. arXiv preprint arXiv:1802.03426. </font>](https://arxiv.org/abs/1802.03426)\n"
      },
      "source": "https://raw.githubusercontent.com/KyleFerchen/pyInfinityFlow/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/KyleFerchen/pyInfinityFlow"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-10-29T03:22:56Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-30T19:27:37Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Python package to generate high dimensional Flow Cytometry datasets using imputation by XGBoost regression"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Graphical Summary",
        "parent_header": [
          "pyInfinityFlow"
        ],
        "type": "Text_excerpt",
        "value": "<img src=\"https://github.com/KyleFerchen/pyInfinityFlow/blob/main/images/graphical_summary.png?raw=true\"\n    style=\"width: 1600px\"\n    alt=\"Graphical Summary\" \n    onerror=\"this.src='./images/graphical_summary.png';\" />\n"
      },
      "source": "https://raw.githubusercontent.com/KyleFerchen/pyInfinityFlow/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9967347344270238,
      "result": {
        "original_header": "pyInfinityFlow",
        "type": "Text_excerpt",
        "value": "**pyInfinityFlow** is a Python package that enables imputation of hundreds of features from Flow Cytometry using XGBoost regression[<sup>1</sup>](https://dl.acm.org/doi/abs/10.1145/2939672.2939785). It is an adaptation of the [original implementation in R](https://github.com/ebecht/infinityFlow)[<sup>2</sup>](https://www.science.org/doi/full/10.1126/sciadv.abg0505) with the goal of optimizing the workflow for large datasets by increasing the speed and memory efficiency of the analysis pipeline.  \nThe package includes tools to read and write FCS files, following the FCS3.1 file standard, into AnnData objects, allowing for easy downstream analysis of single-cell data with [Scanpy](https://scanpy.readthedocs.io/en/stable/index.html)[<sup>3</sup>](https://genomebiology.biomedcentral.com/articles/10.1186/s13059-017-1382-0?ref=https://githubhelp.com) and [UMAP](https://umap-learn.readthedocs.io/en/latest/index.html)[<sup>4</sup>](https://arxiv.org/abs/1802.03426). \n"
      },
      "source": "https://raw.githubusercontent.com/KyleFerchen/pyInfinityFlow/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://pyinfinityflow.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/KyleFerchen/pyInfinityFlow/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/KyleFerchen/pyInfinityFlow/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KyleFerchen/pyInfinityFlow/main/docs/build/html/notebooks/pyInfinityFlow_API_Tutorial.ipynb"
      },
      "source": "https://raw.githubusercontent.com/KyleFerchen/pyInfinityFlow/main/docs/build/html/notebooks/pyInfinityFlow_API_Tutorial.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KyleFerchen/pyInfinityFlow/main/docs/build/html/.doctrees/nbsphinx/notebooks/pyInfinityFlow_API_Tutorial.ipynb"
      },
      "source": "https://raw.githubusercontent.com/KyleFerchen/pyInfinityFlow/main/docs/build/html/.doctrees/nbsphinx/notebooks/pyInfinityFlow_API_Tutorial.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KyleFerchen/pyInfinityFlow/main/docs/source/notebooks/subclustering_example.ipynb"
      },
      "source": "https://raw.githubusercontent.com/KyleFerchen/pyInfinityFlow/main/docs/source/notebooks/subclustering_example.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KyleFerchen/pyInfinityFlow/main/docs/source/notebooks/pyInfinityFlow_API_Tutorial.ipynb"
      },
      "source": "https://raw.githubusercontent.com/KyleFerchen/pyInfinityFlow/main/docs/source/notebooks/pyInfinityFlow_API_Tutorial.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KyleFerchen/pyInfinityFlow/main/docs/source/notebooks/.ipynb_checkpoints/pyInfinityFlow_API_Tutorial-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/KyleFerchen/pyInfinityFlow/main/docs/source/notebooks/.ipynb_checkpoints/pyInfinityFlow_API_Tutorial-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KyleFerchen/pyInfinityFlow/main/docs/source/notebooks/.ipynb_checkpoints/Untitled-checkpoint.ipynb"
      },
      "source": "https://raw.githubusercontent.com/KyleFerchen/pyInfinityFlow/main/docs/source/notebooks/.ipynb_checkpoints/Untitled-checkpoint.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KyleFerchen/pyInfinityFlow/main/analysis_scripts/py3_cellharmony_centroid_alignment.ipynb"
      },
      "source": "https://raw.githubusercontent.com/KyleFerchen/pyInfinityFlow/main/analysis_scripts/py3_cellharmony_centroid_alignment.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/KyleFerchen/pyInfinityFlow/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "KyleFerchen/pyInfinityFlow"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "pyInfinityFlow"
      },
      "source": "https://raw.githubusercontent.com/KyleFerchen/pyInfinityFlow/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KyleFerchen/pyInfinityFlow/main/analysis_scripts/pyInfinityFlow_vs_R_infinityFlow_Comparisons/pyInfinityFlow/subset_25_features/run_pyinfinityflow_test_subset_25_features.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KyleFerchen/pyInfinityFlow/main/analysis_scripts/pyInfinityFlow_vs_R_infinityFlow_Comparisons/pyInfinityFlow/full_dataset/run_pyinfinityflow_test_full_dataset.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KyleFerchen/pyInfinityFlow/main/analysis_scripts/pyInfinityFlow_vs_R_infinityFlow_Comparisons/pyInfinityFlow/subset_100_features/run_pyinfinityflow_test_subset_100_features.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KyleFerchen/pyInfinityFlow/main/analysis_scripts/pyInfinityFlow_vs_R_infinityFlow_Comparisons/pyInfinityFlow/subset_200_features/run_pyinfinityflow_test_subset_200_features.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KyleFerchen/pyInfinityFlow/main/analysis_scripts/pyInfinityFlow_vs_R_infinityFlow_Comparisons/pyInfinityFlow/subset_50_features/run_pyinfinityflow_test_subset_50_features.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KyleFerchen/pyInfinityFlow/main/analysis_scripts/pyInfinityFlow_vs_R_infinityFlow_Comparisons/pyInfinityFlow/subset_10_features/run_pyinfinityflow_test_subset_10_features.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KyleFerchen/pyInfinityFlow/main/analysis_scripts/pyInfinityFlow_vs_R_infinityFlow_Comparisons/R_infinityFlow/subset_25_features/start_r_infinityFlow.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KyleFerchen/pyInfinityFlow/main/analysis_scripts/pyInfinityFlow_vs_R_infinityFlow_Comparisons/R_infinityFlow/full_dataset/start_r_infinityFlow.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KyleFerchen/pyInfinityFlow/main/analysis_scripts/pyInfinityFlow_vs_R_infinityFlow_Comparisons/R_infinityFlow/subset_100_features/start_r_infinityFlow.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KyleFerchen/pyInfinityFlow/main/analysis_scripts/pyInfinityFlow_vs_R_infinityFlow_Comparisons/R_infinityFlow/subset_200_features/start_r_infinityFlow.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KyleFerchen/pyInfinityFlow/main/analysis_scripts/pyInfinityFlow_vs_R_infinityFlow_Comparisons/R_infinityFlow/subset_50_features/start_r_infinityFlow.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KyleFerchen/pyInfinityFlow/main/analysis_scripts/pyInfinityFlow_vs_R_infinityFlow_Comparisons/R_infinityFlow/subset_10_features/start_r_infinityFlow.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KyleFerchen/pyInfinityFlow/main/images/graphical_summary.png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/KyleFerchen/pyInfinityFlow/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Installation\nSee below for instructions on how to download **pyInfinityFlow**. It must be installed on a system with Python>=3.8.\n\n## Using Conda Virtual Environment - **RECOMMENDED**\nIt is best to use a virtual environment so that each of the dependencies can be installed correctly. First, download and install [conda](\"https://conda.io/projects/conda/en/latest/user-guide/install/download.html) on your machine if it is not already available.\n\nAfter conda is installed, you can create a virtual environment with conda create and activate it with the conda activate command-line tool:\n```\nconda create -n pyInfinityFlow python=3.8\nconda activate pyInfinityFlow\n```\n\n### Using GitHub\nFollow the below steps to download the most up-to-date version of the pyInfinityFlow \npackage from GitHub. Create and/or move to the directory in which you want to \ninstall the package files. Then change directories into the package parent \ndirectory and install with pip:\n\n```\ncd <directory_to_save_repository>\ngit clone https://github.com/KyleFerchen/pyInfinityFlow.git\ncd pyInfinityFlow\npip install .\n```\n\n### Using PyPI\nThe package is also available from the [Python packaging index](https://pypi.org/project/pyInfinityFlow/). \n(Though the GitHub repository is likely to be more up to date)\n\nAfter the environment is set up and you have activated it in your current terminal \ninstance, you can install the pyInfinityFlow package onto this environment with pip:\n```\npip install pyInfinityFlow\n```\n\n\n## Using PyPI alone\nIf you have a Python environment (>=3.8) set up on your machine onto which you \nwould like to try to add the pyInfinityFlow package, you can simply install it\nusing pip with the command below:\n```\npip install pyInfinityFlow\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/KyleFerchen/pyInfinityFlow/main/docs/source/installation.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Recommended Installation",
        "parent_header": [
          "pyInfinityFlow"
        ],
        "type": "Text_excerpt",
        "value": "It is recommended to set up a virtual environment to install the package.\n\nCreating a new conda environment and installing pyInfinityFlow:\n```BASH\nconda create -n pyInfinityFlow python=3.8\nconda activate pyInfinityFlow\n\npip install pyInfinityFlow\n```\n\nThen pyInfinityFlow will be installed in a conda environment named 'pyInfinityFlow'.\n\n"
      },
      "source": "https://raw.githubusercontent.com/KyleFerchen/pyInfinityFlow/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999726135207458,
      "result": {
        "original_header": "Quickstart",
        "type": "Text_excerpt",
        "value": "To run the pyInfinityFlow pipeline, we can use this command:\n```BASH\npyInfinityFlow --data_dir /home/kyle/Documents/GitHub/pyInfinityFlow/example_data/mouse_lung_dataset_subset/ \\\n    --out_dir /media/kyle_ssd1/example_outputs/ \\\n    --backbone_annotation /home/kyle/Documents/GitHub/pyInfinityFlow/example_data/mouse_lung_dataset_subset_backbone_anno.csv \\\n    --infinity_marker_annotation /home/kyle/Documents/GitHub/pyInfinityFlow/example_data/mouse_lung_dataset_subset_infinity_marker_anno.csv\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/KyleFerchen/pyInfinityFlow/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/KyleFerchen/pyInfinityFlow/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2022 Kyle Ferchen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/KyleFerchen/pyInfinityFlow/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "pyInfinityFlow"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "KyleFerchen"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 427199,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 29245,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 17335,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 9637,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/KyleFerchen/pyInfinityFlow/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://scanpy.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/KyleFerchen/pyInfinityFlow/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://umap-learn.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/KyleFerchen/pyInfinityFlow/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "related_papers": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/1802.03426"
      },
      "source": "https://raw.githubusercontent.com/KyleFerchen/pyInfinityFlow/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/1802.03426. </font>](https://arxiv.org/abs/1802.03426)"
      },
      "source": "https://raw.githubusercontent.com/KyleFerchen/pyInfinityFlow/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-04 09:30:55",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 9
      },
      "technique": "GitHub_API"
    }
  ]
}