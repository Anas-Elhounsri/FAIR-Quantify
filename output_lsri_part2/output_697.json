{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/rivas-lab/multisnpnet-Cox"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-05-05T05:28:01Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-30T14:40:42Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Multiresponse time-to-event Cox proportional hazards model - CPU"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.8968749349511979,
      "result": {
        "original_header": "Multi-snpnet-Cox (mrcox) Efficient Group-Sparse Lasso solver for multi-response Cox model",
        "type": "Text_excerpt",
        "value": "Where <img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;\\beta_k\" title=\"\\beta_k\" /> is the coefficient vector of the kth (out of K) responses, and  <img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;\\beta^j\" title=\"\\beta^j\" /> are the coefficients of the jth variable on the K responses. \nFor genetics data in [PLINK2](https://www.cog-genomics.org/plink/2.0/) format, we provide a screening procedure similar to the one in [this paper](https://journals.plos.org/plosgenetics/article?rev=2&id=10.1371/journal.pgen.1009141).\n \n"
      },
      "source": "https://raw.githubusercontent.com/rivas-lab/multisnpnet-Cox/keepresponse/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/rivas-lab/multisnpnet-Cox/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/rivas-lab/multisnpnet-Cox/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "rivas-lab/multisnpnet-Cox"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Multi-snpnet-Cox (mrcox) Efficient Group-Sparse Lasso solver for multi-response Cox model"
      },
      "source": "https://raw.githubusercontent.com/rivas-lab/multisnpnet-Cox/keepresponse/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://latex.codecogs.com/svg.latex?%5Cmin_%7B%5Cbeta_1%2C%5Ccdots%2C%26space%3B%5Cbeta_K%7D%26space%3B%5Csum_%7Bk%3D1%7D%5EK%26space%3B%5Cfrac%7B1%7D%7Bn_k%7D%26space%3B%5Cleft%5B%5Csum_%7Bi%3AO_i%5Ek%26space%3B%3D%26space%3B1%7D%26space%3B-%5Cbeta_k%5ET%26space%3BX_i%26space%3B%26plus%3B%26space%3B%5Clog%26space%3B%5Cleft%28%5Csum_%7Bj%3AT%5Ek_j%26space%3B%5Cge%26space%3BT%5Ek_i%7D%26space%3B%5Cexp%28%5Cbeta_k%5ET%26space%3BX_j%29%5Cright%29%5Cright%5D%26space%3B%26plus%3B%26space%3B%5Clambda%26space%3B%5Cleft%28%26space%3B%5Csum_%7Bj%3D1%7D%5Ed%26space%3B%5C%7C%5Cbeta%5Ej%5C%7C_1%26space%3B%26plus%3B%26space%3B%5Calpha%26space%3B%5C%7C%5Cbeta%5Ej%5C%7C_2%26space%3B%5Cright%29"
      },
      "source": "https://raw.githubusercontent.com/rivas-lab/multisnpnet-Cox/keepresponse/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://latex.codecogs.com/gif.latex?\\inline&space;\\beta_k"
      },
      "source": "https://raw.githubusercontent.com/rivas-lab/multisnpnet-Cox/keepresponse/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://latex.codecogs.com/gif.latex?\\inline&space;\\beta^j"
      },
      "source": "https://raw.githubusercontent.com/rivas-lab/multisnpnet-Cox/keepresponse/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "Multi-snpnet-Cox (mrcox) Efficient Group-Sparse Lasso solver for multi-response Cox model"
        ],
        "type": "Text_excerpt",
        "value": "Currently mrcox only supports linux and 64-bit intel processors. It requires Intel's Math Kernel Library (MKL). I suspect you can still get it to run on AMD processors but performance could be significantly worse. To install MKL:\n1. Register and download MKL from https://software.intel.com/content/www/us/en/develop/tools/math-kernel-library/choose-download/linux.html\n2. Under Choose Product to Download, select Intel Math Kernel Library for linux\n3. Untar the downloaded file, run `./install.sh`. After installation is done, `source intel/mkl/bin/mklvars.sh intel64`. \n\nYou will also need to install the R dependencies of mrcox (Rcpp, RcppEigen). "
      },
      "source": "https://raw.githubusercontent.com/rivas-lab/multisnpnet-Cox/keepresponse/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/rivas-lab/multisnpnet-Cox/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "biobank, cox-model, cox-ph, cox-regression, cpu, human-genetics, multiresponse-sparse-regression, survival-analysis, survival-prediction"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "YEAR: 2020\nCOPYRIGHT HOLDER: Ruilin Li\n"
      },
      "source": "https://raw.githubusercontent.com/rivas-lab/multisnpnet-Cox/keepresponse/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "multisnpnet-Cox"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "rivas-lab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 71143,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 18206,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rivas-lab/multisnpnet-Cox/keepresponse/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Additional dependencies for genetics data",
        "parent_header": [
          "Multi-snpnet-Cox (mrcox) Efficient Group-Sparse Lasso solver for multi-response Cox model",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "1. [zstd(>=1.4.4)](https://github.com/facebook/zstd). It can be built from source or simply available from [conda](https://anaconda.org/conda-forge/zstd), [pip](https://pypi.org/project/zstd/) or [brew](https://formulae.brew.sh/formula/zstd)\n2. [PLINK2](https://www.cog-genomics.org/plink/2.0/)\n3. \n```r\nlibrary(devtools)\ninstall_github(\"chrchang/plink-ng\", subdir=\"/2.0/cindex\")\ninstall_github(\"chrchang/plink-ng\", subdir=\"/2.0/pgenlibr\")\n```\n\nOnce dependencies are installed, run the following in R\n```r\ndevtools::install_github(\"rivas-lab/multisnpnet-Cox\")\n```"
      },
      "source": "https://raw.githubusercontent.com/rivas-lab/multisnpnet-Cox/keepresponse/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 11:38:18",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Example of Usage",
        "parent_header": [
          "Multi-snpnet-Cox (mrcox) Efficient Group-Sparse Lasso solver for multi-response Cox model",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "```r\nlibrary(mrcox)\n# Simulate some data\nn = 1000\np = 5000\nX = matrix(rnorm(n*p), n, p)\ny1 = rexp(n) * exp(X %*% rbinom(p, 1, 0.1))\ny2 = rexp(n) * exp(X %*% rbinom(p, 1, 0.1))\ns1 = rbinom(n, 1, 0.3)\ns2 = rbinom(n, 1, 0.3)\ny_list = list(y1, y2)\ns_list = list(s1, s2)\n\n# Initialize coefficient matrix at 0\nB = matrix(0.0, p, 2)\n\n# Compute residual at B\nres = get_residual(X, y_list, s_list, B)\n\n# Compute the gradient of B\ng = t(X) %*% res\n\n# Get the dual norm and lambda sequence\nalpha = sqrt(2)\ndnorm = get_dual_norm(g, alpha)\nlambda_max = max(dnorm)\nlambda_min = 0.001 * lambda_max\nlambda_seq = exp(seq(from = log(lambda_max), to = log(lambda_min), length.out = 100))\n\n# Fit a model\nfit = solve_aligned(X, y_list, s_list, lambda_seq, lambda_seq * alpha)\nfit = fit[['result']] # fit also contains the residuals at each solution\n\n\n```\n"
      },
      "source": "https://raw.githubusercontent.com/rivas-lab/multisnpnet-Cox/keepresponse/README.md",
      "technique": "header_analysis"
    }
  ]
}