{
  "application_domain": [
    {
      "confidence": 8.51,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/super-resolution/ReCSAI"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-06-17T12:07:40Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-11-30T14:45:03Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SMLM reconstruction software"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9962778049842251,
      "result": {
        "original_header": "*ReCSAI:* Recursive Compressed Sensing Artificial Intelligence",
        "type": "Text_excerpt",
        "value": "is a SMLM (Single Molecule Localisation Microscopy) software to determine the location of sparse fluorescent emitters with subpixel accuracy. The provided trainings are optimized to work with disrupted, nonlinear or varying PSF's occuring in confocal *d*STORM measurements. The software currently implements the following features:\n* Prefilter ROIs with potential localisations using a trainable wavelet filterbank\n* Choose from several CS (Compressive Sensing) based network architectures\n* Use the `Emitter` class to filter localisations, apply drift corrections, concatenate sets, save and read localisation files in multiple formats or compute metrics like the jaccard index\n* Render your data in a visualization pipeline\n \n"
      },
      "source": "https://raw.githubusercontent.com/super-resolution/ReCSAI/airy_disc/Readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8710282725108716,
      "result": {
        "original_header": "Customizing main.py",
        "type": "Text_excerpt",
        "value": "1. Import stuff and enable memory growth in your GPU\n```\nimport os\nimport numpy as np\nimport tensorflow as tf\ngpus = tf.config.experimental.list_physical_devices('GPU')\nfor gpu in gpus:\n  tf.config.experimental.set_memory_growth(gpu, True)\n\nfrom plot_emitter_set\nfrom src.trainings.train_cs_net import ResUNetFacade\nfrom src.emitters import Emitter\n```\n2. Define the path to your data\nBASH2*\n3. Build a network instance and set parameters\nBASH3*\n4. Run and safe the evaluation in a tmp file\nBASH4*\n5. Filter for parameters\nBASH5*\n5.1. Apply dme drift correct (should work out of the box for windows) [skip if not required]\nBASH6*\n5.2. Or apply your own drift correction [skip if not required]\nBASH7*\n6. Plot stuff\nBASH8*\nIf something does not work out, feel free to contact me. \n"
      },
      "source": "https://raw.githubusercontent.com/super-resolution/ReCSAI/airy_disc/Readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9590956470916387,
      "result": {
        "original_header": "Creating data",
        "type": "Text_excerpt",
        "value": "You can extend the `create_data.py` file to create custom data for your purposes.\n1. Import data generation and visualization:\n```\nfrom src.data import *\nfrom src.data import DataGeneration, GPUDataGeneration\nfrom src.visualization import plot_data_gen\n```\n2. Build a data generator instance:\nBASH2*\n3. Get a small test batch and plot it to visually check your parameters\nBASH3*\n4. Run the dataset generation.\nBASH4*\n \n"
      },
      "source": "https://raw.githubusercontent.com/super-resolution/ReCSAI/airy_disc/Readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8957968010991316,
      "result": {
        "original_header": "Paper",
        "type": "Text_excerpt",
        "value": "If you use ReCSAI for your work please cite: \n"
      },
      "source": "https://raw.githubusercontent.com/super-resolution/ReCSAI/airy_disc/Readme.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/super-resolution/ReCSAI/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/super-resolution/ReCSAI/airy_disc/notebooks/ReCSAI_training.ipynb"
      },
      "source": "https://raw.githubusercontent.com/super-resolution/ReCSAI/airy_disc/notebooks/ReCSAI_training.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/super-resolution/ReCSAI/airy_disc/notebooks/ReCSAI_reconstruction.ipynb"
      },
      "source": "https://raw.githubusercontent.com/super-resolution/ReCSAI/airy_disc/notebooks/ReCSAI_reconstruction.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/super-resolution/ReCSAI/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "super-resolution/ReCSAI"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ReCSAI: Recursive Compressed Sensing Artificial Intelligence"
      },
      "source": "https://raw.githubusercontent.com/super-resolution/ReCSAI/airy_disc/Readme.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://colab.research.google.com/assets/colab-badge.svg"
      },
      "source": "https://raw.githubusercontent.com/super-resolution/ReCSAI/airy_disc/Readme.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://colab.research.google.com/assets/colab-badge.svg"
      },
      "source": "https://raw.githubusercontent.com/super-resolution/ReCSAI/airy_disc/Readme.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Local setup",
        "parent_header": [
          "*ReCSAI:* Recursive Compressed Sensing Artificial Intelligence"
        ],
        "type": "Text_excerpt",
        "value": "To install ReCSAI on your local machine, you need a CUDA capable GPU and a [Tensorflow](https://www.tensorflow.org/install/gpu) installation.\nFor the Wavelet prefiltering, [tf-wavelets](https://github.com/UiO-CS/tf-wavelets) is needed. The rest of the packages can be installed using the `requirements.txt`.\n1. Create an [Anaconda](https://www.anaconda.com/products/distribution) environment and activate it:\n``` \nconda create --name recsai\nconda activate recsai\n```\n2. Clone [tf-wavelets](https://github.com/UiO-CS/tf-wavelets) \n3. Open a command line, *cd* into the cloned repository and run:\n```\npython setup.py --install\n```\n4. Clone this repository\n5. cd into the cloned folder and run:\n```\npip install -r requirements.txt\n```\n6. Edit `main.py` for your fitting purposes."
      },
      "source": "https://raw.githubusercontent.com/super-resolution/ReCSAI/airy_disc/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9997444143426807,
      "result": {
        "original_header": "Customizing main.py",
        "type": "Text_excerpt",
        "value": "1. Import stuff and enable memory growth in your GPU\n```\nimport os\nimport numpy as np\nimport tensorflow as tf\ngpus = tf.config.experimental.list_physical_devices('GPU')\nfor gpu in gpus:\n  tf.config.experimental.set_memory_growth(gpu, True)\n\nfrom plot_emitter_set\nfrom src.trainings.train_cs_net import ResUNetFacade\nfrom src.emitters import Emitter\n```\n2. Define the path to your data\nBASH2*\n3. Build a network instance and set parameters\nBASH3*\n4. Run and safe the evaluation in a tmp file\nBASH4*\n5. Filter for parameters\nBASH5*\n5.1. Apply dme drift correct (should work out of the box for windows) [skip if not required]\nBASH6*\n5.2. Or apply your own drift correction [skip if not required]\nBASH7*\n6. Plot stuff\nBASH8*\nIf something does not work out, feel free to contact me. \n"
      },
      "source": "https://raw.githubusercontent.com/super-resolution/ReCSAI/airy_disc/Readme.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8402132344478886,
      "result": {
        "original_header": "Customizing main.py",
        "type": "Text_excerpt",
        "value": "1. Import stuff and enable memory growth in your GPU\n```\nimport os\nimport numpy as np\nimport tensorflow as tf\ngpus = tf.config.experimental.list_physical_devices('GPU')\nfor gpu in gpus:\n  tf.config.experimental.set_memory_growth(gpu, True)\n\nfrom plot_emitter_set\nfrom src.trainings.train_cs_net import ResUNetFacade\nfrom src.emitters import Emitter\n```\n2. Define the path to your data\nBASH2*\n3. Build a network instance and set parameters\nBASH3*\n4. Run and safe the evaluation in a tmp file\nBASH4*\n5. Filter for parameters\nBASH5*\n5.1. Apply dme drift correct (should work out of the box for windows) [skip if not required]\nBASH6*\n5.2. Or apply your own drift correction [skip if not required]\nBASH7*\n6. Plot stuff\nBASH8*\nIf something does not work out, feel free to contact me. \n"
      },
      "source": "https://raw.githubusercontent.com/super-resolution/ReCSAI/airy_disc/Readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9280857260820051,
      "result": {
        "original_header": "Creating data",
        "type": "Text_excerpt",
        "value": "You can extend the `create_data.py` file to create custom data for your purposes.\n1. Import data generation and visualization:\n```\nfrom src.data import *\nfrom src.data import DataGeneration, GPUDataGeneration\nfrom src.visualization import plot_data_gen\n```\n2. Build a data generator instance:\nBASH2*\n3. Get a small test batch and plot it to visually check your parameters\nBASH3*\n4. Run the dataset generation.\nBASH4*\n \n"
      },
      "source": "https://raw.githubusercontent.com/super-resolution/ReCSAI/airy_disc/Readme.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/super-resolution/ReCSAI/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2022 Biotechnologie und Biophysik - Universit\u00e4t W\u00fcrzburg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/super-resolution/ReCSAI/airy_disc/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ReCSAI"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "super-resolution"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 252795,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 236967,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/super-resolution/ReCSAI/airy_disc/Readme.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running a custom training",
        "parent_header": [
          "*ReCSAI:* Recursive Compressed Sensing Artificial Intelligence"
        ],
        "type": "Text_excerpt",
        "value": "A basic file for training is implemented under `src.trainings.train_cs_net.py`\n1. Import the training interface and some helper packages:\n```\nimport os, sys\n\nfrom src.models.cs_model import CompressedSensingInceptionNet, CompressedSensingCVNet, CompressedSensingUNet,\\\n    CompressedSensingResUNet, StandardUNet, CompressedSensingConvNet\nfrom src.facade import NetworkFacade\nfrom src.utility import get_root_path\n```\n2. Set up a facade instance\n```\nCURRENT_RES_U_PATH = get_root_path()+r\"/trainings/cs_u/_final2_training_100_gpu_data\"\n\nCURRENT_WAVELET_PATH = get_root_path()+r\"/trainings/wavelet/training_lvl5/cp-5000.ckpt\"\nclass ResUNetFacade(NetworkFacade):\n    def __init__(self):\n        super(ResUNetFacade, self).__init__(CompressedSensingResUNet, CURRENT_RES_U_PATH,\n                                           CURRENT_WAVELET_PATH, shape=128)\n        self.train_loops = 120\n```\n3. Start the training\n```\ntraining = ResUNetFacade()\ntraining.train_saved_data()\n```\nIf you want to use your own data you can put it under current dataset and update the path in the `NetworkFacade` initialization\n\n\nCustom trainings can be implemented by `editing train_cs_net.py`, creating a folder in datasets and defining this folder as the current dataset in `facade.py`."
      },
      "source": "https://raw.githubusercontent.com/super-resolution/ReCSAI/airy_disc/Readme.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-04 11:06:50",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "*ReCSAI:* Recursive Compressed Sensing Artificial Intelligence"
        ],
        "type": "Text_excerpt",
        "value": "* Ready to use Colab notebook: [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/super-resolution/ReCSAI/blob/airy_disc/notebooks/ReCSAI_reconstruction.ipynb)\n* Train on your own network: [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/super-resolution/ReCSAI/blob/airy_disc/notebooks/ReCSAI_training.ipynb)\n"
      },
      "source": "https://raw.githubusercontent.com/super-resolution/ReCSAI/airy_disc/Readme.md",
      "technique": "header_analysis"
    }
  ]
}