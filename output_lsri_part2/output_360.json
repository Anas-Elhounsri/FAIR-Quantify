{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/G2Lab/ldmat"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-08-01T18:10:16Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-25T21:23:08Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.8658041318237467,
      "result": {
        "original_header": "Public Methods",
        "type": "Text_excerpt",
        "value": "You may wish to select a submatrix without having to read to or write from the filesystem, for example if you are \nwriting a script which needs to select a submatrix on the fly. For this reason, several ldmat methods have been created\nspecifically for public use. You can import all of these methods with `import ldmat`.\n```\nselect_submatrix_by_range(\n    ld_h5: h5py.File,\n    row_start: int,\n    row_end: int,\n    col_start: int,\n    col_end: int,\n    stream: bool = None,\n) -> Union[pd.DataFrame, str]\n```\nThe inputs to this method are:\n- The LD file, opened with h5py, like: `import h5py; ld_h5 = h5py.File(ld_file, \"r\")`.\n- The start row of the range.\n- The end row of the range.\n- The start column of the range.\n- The end column of the range.\n- Whether to stream the results to a CSV. If not specified, this is decided automatically based on the expected matrix size.\n \n```\nselect_submatrix_by_list(\n    ld_h5: h5py.File,\n    row_list: List[int],\n    col_list: List[int],\n    stream: bool = None,\n) -> Union[pd.DataFrame, str]\n```\nThe inputs to this method are:\n- The LD file, opened with h5py, like: `import h5py; ld_h5 = h5py.File(ld_file, \"r\")`.\n- The list of rows to include.\n- The list of columns to include.\n- Whether to stream the results to a CSV. If not specified, this is decided automatically based on the expected matrix size.\n```\nselect_submatrix_by_maf(\n    ld_h5: h5py.File,\n    lower_bound: float,\n    upper_bound: float,\n    stream: bool = None,\n) -> Union[pd.DataFrame, str]\n```\nThe inputs to this method are:\n- The LD file, opened with h5py, like: `import h5py; ld_h5 = h5py.File(ld_file, \"r\")`.\n- The smallest MAF to include.\n- The largest MAF to include.\n- Whether to stream the results to a CSV. If not specified, this is decided automatically based on the expected matrix size.\n \nTypically, the results of each of these methods will be a pandas DataFrame. However, if the data is streamed, the result\nwill be a string, the path to the CSV result.\n \n"
      },
      "source": "https://raw.githubusercontent.com/G2Lab/ldmat/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9127872489932085,
      "result": {
        "original_header": "Input Loaders",
        "type": "Text_excerpt",
        "value": "The default input format to this tool is the files found [here](https://alkesgroup.broadinstitute.org/UKBB_LD/).\nHowever, CSVs and TSVs are also supported natively, if they are in the same format as the output of the `submatrix` commands.\nIn this case, use the `--loader` option to specify the format, like:\n```\nldmat convert-chromosome \"examples/chr0_*.csv\" YOUR_OUTPUT.h5 --loader csv\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/G2Lab/ldmat/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.95984956523038,
      "result": {
        "original_header": "Custom Loaders",
        "type": "Text_excerpt",
        "value": "If your data is in a different format, you may wish to write a custom loader.\nThis is easy, and simply requires implementing a few methods in a new subclass of `Loader`. \nThe two methods that must be implemented are `load_as_sparse_matrix` and `load_metadata`.\nIf you have a custom MAF format, implement `load_maf` as well. \nIf you think your input format is generic enough, or otherwise likely to be reused, feel free to submit\na pull request to add your loader to the package. \n"
      },
      "source": "https://raw.githubusercontent.com/G2Lab/ldmat/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Downloading Example Files",
        "parent_header": [
          "Efficient Storage and Querying of Linkage Disequilibrium Matrices",
          "Setup"
        ],
        "type": "Text_excerpt",
        "value": "THIS IS A TEMPORARY WORKAROUND UNTIL A MORE PERMANENT STORAGE SOLUTION IS FOUND.\n\nRun the following commands to create a directory called `examples` with all of the example and test files in it. \n```\nmkdir ldmat_tmp\ncd ldmat_tmp\ngit init\ngit config core.sparseCheckout true\ngit remote add origin https://github.com/G2Lab/ldmat.git\necho \"examples/\" > .git/info/sparse-checkout\ngit fetch --depth 1 origin\ngit pull origin main\ncd ..\nmv ldmat_tmp/examples .\nrm -rf ldmat_tmp\n```\n"
      },
      "source": "https://raw.githubusercontent.com/G2Lab/ldmat/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/G2Lab/ldmat/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/G2Lab/ldmat/main/notebooks/triangular.ipynb"
      },
      "source": "https://raw.githubusercontent.com/G2Lab/ldmat/main/notebooks/triangular.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/G2Lab/ldmat/main/notebooks/scratch.ipynb"
      },
      "source": "https://raw.githubusercontent.com/G2Lab/ldmat/main/notebooks/scratch.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/G2Lab/ldmat/main/notebooks/matrix_sizes.ipynb"
      },
      "source": "https://raw.githubusercontent.com/G2Lab/ldmat/main/notebooks/matrix_sizes.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/G2Lab/ldmat/main/notebooks/block_size.ipynb"
      },
      "source": "https://raw.githubusercontent.com/G2Lab/ldmat/main/notebooks/block_size.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/G2Lab/ldmat/main/notebooks/hyperparameters.ipynb"
      },
      "source": "https://raw.githubusercontent.com/G2Lab/ldmat/main/notebooks/hyperparameters.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/G2Lab/ldmat/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "G2Lab/ldmat"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Efficient Storage and Querying of Linkage Disequilibrium Matrices"
      },
      "source": "https://raw.githubusercontent.com/G2Lab/ldmat/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Setup",
        "parent_header": [
          "Efficient Storage and Querying of Linkage Disequilibrium Matrices"
        ],
        "type": "Text_excerpt",
        "value": "Install the package with:\n\n```\npip install ldmat\n```\n"
      },
      "source": "https://raw.githubusercontent.com/G2Lab/ldmat/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.97765993070259,
      "result": {
        "original_header": "Custom Loaders",
        "type": "Text_excerpt",
        "value": "If you think your input format is generic enough, or otherwise likely to be reused, feel free to submit\na pull request to add your loader to the package. \n"
      },
      "source": "https://raw.githubusercontent.com/G2Lab/ldmat/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/G2Lab/ldmat/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Copyright (c) 2022 Rockwell Weiner \n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/G2Lab/ldmat/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ldmat"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "G2Lab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 53145,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 32281,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/G2Lab/ldmat/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-04 10:24:05",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Downloading Example Files",
        "parent_header": [
          "Efficient Storage and Querying of Linkage Disequilibrium Matrices",
          "Setup"
        ],
        "type": "Text_excerpt",
        "value": "THIS IS A TEMPORARY WORKAROUND UNTIL A MORE PERMANENT STORAGE SOLUTION IS FOUND.\n\nRun the following commands to create a directory called `examples` with all of the example and test files in it. \n```\nmkdir ldmat_tmp\ncd ldmat_tmp\ngit init\ngit config core.sparseCheckout true\ngit remote add origin https://github.com/G2Lab/ldmat.git\necho \"examples/\" > .git/info/sparse-checkout\ngit fetch --depth 1 origin\ngit pull origin main\ncd ..\nmv ldmat_tmp/examples .\nrm -rf ldmat_tmp\n```\n"
      },
      "source": "https://raw.githubusercontent.com/G2Lab/ldmat/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Getting Started",
        "parent_header": [
          "Efficient Storage and Querying of Linkage Disequilibrium Matrices"
        ],
        "type": "Text_excerpt",
        "value": "To see all the commands available, run `ldmat`.\n\nFor any specific command, you can get more information with the `--help` flag, like: `ldmat submatrix --help`.\n\nThe package includes some [example files](https://github.com/G2Lab/ldmat/tree/main/examples).\n\nThe unprocessed LD matrices are too large to include here, but there is a sample \nprocessed matrix, `chr21_partial.h5`, which includes LD values for chromosome 21\nfrom positions 13000001 to 22000001 (although there is no data between positions 13000001 and 14000001).\nThis file contains all LD values greater than 0.1, rounded to 2 decimals.\n"
      },
      "source": "https://raw.githubusercontent.com/G2Lab/ldmat/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Sample Query",
        "parent_header": [
          "Efficient Storage and Querying of Linkage Disequilibrium Matrices",
          "Getting Started"
        ],
        "type": "Text_excerpt",
        "value": "For a sample query, we can extract the square submatrix of positions 14300001 through 14400001 with the following command:\n```\nldmat submatrix examples/chr21_partial.h5 --row-start 14300001 --row-end 14400001\n```\nThis will simply print the results as a Pandas DataFrame, so you'll probably want\nto save the results by adding an output file, like: `ldmat submatrix ... -o YOUR_OUTPUT.csv`\n"
      },
      "source": "https://raw.githubusercontent.com/G2Lab/ldmat/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Sample Compression",
        "parent_header": [
          "Efficient Storage and Querying of Linkage Disequilibrium Matrices",
          "Getting Started"
        ],
        "type": "Text_excerpt",
        "value": "To try compressing a file, we've included a single LD matrix with mock data, generated from a very approximate \nGaussian fit of the values in an actual LD matrix. In order to convert it to the compressed format, run:\n```\nldmat convert-chromosome \"examples/chr0_*.npz\" YOUR_OUTPUT.h5 -c 0 -d 2 -m .1\n```\nThis will find all files matching \"examples/chr0_*.npz\" (which is just the single provided file) and compress them,\ndropping any values less than 0.1, and only keeping 2 decimals for everything. The output file can then be queried as \ndescribed above.\n"
      },
      "source": "https://raw.githubusercontent.com/G2Lab/ldmat/main/README.md",
      "technique": "header_analysis"
    }
  ]
}