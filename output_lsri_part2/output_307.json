{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/T-B-F/pyHCA"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2017-02-06T01:25:01Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-03-13T14:53:26Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "pyHCA repo @callebautlab"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9940894916941402,
      "result": {
        "type": "Text_excerpt",
        "value": "pyHCA and hcatk (HCA toolkit) are a python library and executable for the Hydrophobic Cluster Analysis of protein sequences.\npyHCA implements various class and function for handling sequences and analyses them\nhcatk provides off the hands set of program to perform hydrophobic cluster analyses. \n"
      },
      "source": "https://raw.githubusercontent.com/T-B-F/pyHCA/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/T-B-F/pyHCA/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/T-B-F/pyHCA/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "T-B-F/pyHCA"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Requires"
      },
      "source": "https://raw.githubusercontent.com/T-B-F/pyHCA/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/T-B-F/pyHCA/master/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/T-B-F/pyHCA/master/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "http://etetoolkit.org/download/"
      },
      "source": "https://raw.githubusercontent.com/T-B-F/pyHCA/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "http://www.xquartz.org/"
      },
      "source": "https://raw.githubusercontent.com/T-B-F/pyHCA/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "A quick install can be perform using:\n\n    pip3 install .\n \n\nThe 'domOnTree' functionality of **hcatk** requires that ete3, and therefore PyQt4, are installed.\nHowever, the ete3 can be difficult to install as some features requires PyQt4 and sip.\nPlease refer to the official ete3 insallation guidelines ![http://etetoolkit.org/download/](http://etetoolkit.org/download/) for any support.\nOn Mac OS X, you will also need to install XQuartz to use ete3, please refer to ![XQuartz documentation](http://www.xquartz.org/).\n\nIf you do not plan to use this feature you can proceed to the installation without PyQt4 and ete3.\n\nWe recommend you to work on a conda virtual environment to properly build the non Python extention of the ete3 package and afterward install pyHCA in this new environment.\n\n\nA Dockerfile is also available to install the executable inside a container:\n\n    docker build -t hcatk .\n    docker run hcatk -h\n    docker run --rm -v /path/to/data:/data hcatk draw -i /data/orc1.fasta -o /data/orc1_output.svg\n\n\nCurrently ete3/PyQt4 don't seem to be properly installed using this method, therefore the 'domOnTree' is not available if hcatk is built using docker.\n\n\nExample\n*******\n\ndownload and install conda from miniconda website using the correct installer (64 bits / 32 bits, MacOSC / Linux):\n\non MacOSX\n\n    wget https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh\n    bash Miniconda3-latest-MacOSX-x86_64.sh\n\non Linux (64 bits installer)\n\n    https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\n    bash Miniconda3-latest-Linux-x86_64.sh\n\ncreate a virtual environment and switch to the environment\n\n    conda create -n test_pyHCA python=3.6 pip\n    source activate test_pyHCA\n    \nand install pyqt4 before running pyHCA installer\n\n    conda install -n test_pyHCA pyqt=4.11.4\n    cd <path to pyHCA directory>\n    pip install .\n    \n\n"
      },
      "source": "https://raw.githubusercontent.com/T-B-F/pyHCA/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9997804857951906,
      "result": {
        "original_header": "Requires",
        "type": "Text_excerpt",
        "value": "- python3      >= 3.6\n- Biopython    >= 1.65\n- scipy        >= 1.0\n- numpy        >= 1.14\n- scikit-learn >= 0.19\n- requests     >= 2.18\n- ete3         >= 3.1.1 \n"
      },
      "source": "https://raw.githubusercontent.com/T-B-F/pyHCA/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/T-B-F/pyHCA/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "pyHCA"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "T-B-F"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 278755,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 376,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Batchfile",
        "size": 31,
        "type": "Programming_language",
        "value": "Batchfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/T-B-F/pyHCA/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "T-B-F",
          "type": "User"
        },
        "date_created": "2017-07-29T03:17:54Z",
        "date_published": "2017-07-29T03:21:25Z",
        "description": "pre-release before review",
        "html_url": "https://github.com/T-B-F/pyHCA/releases/tag/v0.9",
        "name": "pre-release",
        "release_id": 7214951,
        "tag": "v0.9",
        "tarball_url": "https://api.github.com/repos/T-B-F/pyHCA/tarball/v0.9",
        "type": "Release",
        "url": "https://api.github.com/repos/T-B-F/pyHCA/releases/7214951",
        "value": "https://api.github.com/repos/T-B-F/pyHCA/releases/7214951",
        "zipball_url": "https://api.github.com/repos/T-B-F/pyHCA/zipball/v0.9"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 10:08:54",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "dispred",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Predict protein disorder at the amino acid level using HCA and physico-chemical features from AAIndex\n\n    $ hcatk dispred -h\n\n    usage: hcatk dispred [-h] -i FASTAFILE -o OUTPUTFILE -m MODEL [--verbose]\n\n\nArguments:\n**********\n\n    -h, --help            show help message and exit\n    \nrequired arguments:\n\n    -i FASTAFILE   the fasta file\n    -o OUTPUTFILE  output file in svg format\n    -m MODEL       model to use\n\noptional arguments:\n\n    -v --verbose      print information\n\n\nExample:\n********\n\n    $ hcatk dispred -i data/orc1.fasta -o data/orc1.allowDSoverlap.txt -m pyHCA/model_weights/allowDSoverlap.h5\n\n\nModels `allowDSoverlap.h5` and `noDSoverlap.h5` can be found in the `pyHCA/model_weights/` directory of the github repository.\n\n\nOutput format:\n**************\n\nThe output is formated in a fasta like file, with an header storing the protein name\n\n    >protein_name\n\nfollowed by four columns (index, amino acid, score, prediction: 0=ordered, 1=disordered)\n\n\t1 M 0.202 0\n\t2 V 0.223 0\n\t3 N 0.270 1\n\t4 K 0.292 1\n\t5 E 0.353 1\n\t6 N 0.450 1\n\t7 A 0.312 1\n\n"
      },
      "source": "https://raw.githubusercontent.com/T-B-F/pyHCA/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "segment",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Use the composition in hydrophobic cluster of a sequence to detect domains.\n\n    $ hcatk segment -h\n\n    usage: hcatk segment [-h] -i INPUTF -o OUTPUTF [-v]\n                          [-m {cluster,domain}]\n                          [-t {aminoacid,nucleotide}]\n\nArguments:\n**********\n\n    -h, --help            show help message and exit\n    \nrequired arguments:\n\n    -i INPUTF             an amino-acid sequence files in fasta format\n    -o OUTPUTF            the output file with annotation\n    \noptional arguments:\n\n    -v                    keep temporary results\n    -m {cluster,domain}   method to use, cluster: will report *the hydrophobic\n                          clusters found in the sequence, domain: will delineate\n                          domains based on the hydrophobic cluster profile of\n                          the sequence\n    -t {aminoacid,nucleotide}\n                          the type of the biological sequences passed in the\n                          input file\n\nExample:\n********\n\n    $ hcatk segment -i data/orc1.fasta -o data/orc1.hca -m domain\n\n\nOutput Format:\n**************\n\nThe output is formated in a fasta like style, with an header storing the protein name, size and HCA score over the full protein sequence:\n\n    >protein_name protein_size protein_hca_score\n    \nfollowed by four columns:\n\n    domain  524     527     nan 9.5\n    domain  552     923     0.0032921164246364487 2.3978494623655915\n    cluster 1       2       11\n    cluster 10      17      10001011\n    cluster 23      23      1\n    \nThe first column correspond to the hca element identified, either a domain or a cluster.\nThe second and third columns correspond to the start and stop (indexed from 1 to the sequence length) of the hca element.\nThe fourth column either corresponds to a p-value if the element is a hca domain or to the hydrophobic cluster in binary mode if the element is a cluster.\nThe p-value of the domain is computed against a reference distribution made of intrinsically disordered proteins and describe the \"degree of foldability\" associated to the hca domain element.\nA nan value is returned if the domain has less than 30 residues.\nThe fourth column corresponds to the HCA score of the domain sequence.\n\n/!\\ Warning /!\\\n\nHCA scores are provided for the whole protein sequence and domain with less than 30 amino acids for information only.\nThe scores and p-values associated where designed on globular protein domains and intrinsically disordered regions of comparable lengths and with more than 30 amino acids.\n\n\n\n    "
      },
      "source": "https://raw.githubusercontent.com/T-B-F/pyHCA/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "draw",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Draw the HCA diagram of a sequence.\nOptionnaly, can display the domain annotation of a sequence if provied.\n\n    $ hcatk draw -h\n\n    \n    usage: hcatk draw [-h] -i FASTAFILE [-w WINDOW] [-d DOMAIN] [-f {pfam,seghca}]\n                  [--color-msa {rainbow,identity}] -o OUTPUTFILE\n\nArguments:\n**********\n\n    -h, --help            show help message and exit\n    \nrequired arguments:\n    \n    -i FASTAFILE          the fasta file\n    -o OUTPUTFILE         output file in svg format\n\noptional arguments:\n\n    -w WINDOW             sequence len before breaking the sequence to the next\n                          plot (-1 the whole sequence are used, minimum size is\n                          80)\n    -d DOMAIN             [optionnal] provide domain annoation\n    -f {pfam,seghca}      the domain file format\n    --cons-msa {aa,hca}   method to use to compare sequences (aa, hca)\n\nExample:\n********\n    \n    $ hcatk draw -i data/PF00533_sub.txt -o data/PF00533_sub.svg --cons-msa aa\n\nOutput Format:\n**************    \n\nThe output is a svg text file and can be vizualised using any svg viewer (inkscape, modern web browser ...).\n    \n"
      },
      "source": "https://raw.githubusercontent.com/T-B-F/pyHCA/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "tremolo",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Use Tremolo-HCA to find remote homologous proteins with domain context.\n\n    $ hcatk tremolo -h\n\n    usage: hcatk [-h] -i INPUTFASTA [-d DOMAINS [DOMAINS ...]] \n                 [-w WORKDIR] [--pp2ipr P2IPR] [--cpnfig CONFIGFILE] \n                 [-o OUTPUT] --target-db\n\n\nArguments:\n**********\n\n    -h, --help            show help message and exit\n\nrequired arguments:\n\n    -i INPUTFASTA         input fasta file\n    -o OUTPUT             output file\n    -w WORKDIR            working directory\n\noptional arguments:\n\n    -d DOMAINS [DOMAINS ...] list of domain positions (start and stop inclusive\n                             and separated by comma : -d 1,10 20,30 60,100. \n                             If not provided the search will be performed on \n                             each domain found after segmentation of the input \n                             sequence. To use the whole protein use -d all.\n    --p2ipr P2IPR            path to the Interpro annotation of UniproKB proteins,\n                             gzip format supported.\n    -config CONFIGFILE       path to the configuration file for optional arguments\n    --target-db HTARGETDB    path to the target sequences database\n\nExample:\n********\n    \n    $ echo \"using hhblits\"\n    $ hcatk tremolo -i data/orc1.fasta -d 10,143 --p2ipr data/protein2ipr.dat.gz --config tremolo_config.ini --target-db hhsuite/uniprot20_2016_02/uniprot20_2016_02 -o data/orc1_tremolo.txt -w tremolo_tmp\n\n\nOutput Format:\n**************    \n\nTremolo output format is made of multiple parts.\n\nA header part storing the protein sequence information used as query:\n\n    Qname   protein_sequence_name\n    Qdesc   protein_description\n    Qseq    protein_sequence\n\n    Qdom    domain_index       domain_start      domain_stop\n\nIf multiple domains were given as query (through the -d option), multiple Qdom fields will be present:\n\n    Qdom    1       10      50\n    Qdom    2       60      80\n    \nThe header is followed by a two summaries of the results.\nThe first summary give for each hit of each query domain, the name of the protein target, the id of the hit (in case of multiple hits per target) , the domain arrangement of the protein target (with interpro ID and domain specific ID spearated by a \"/\"), the e-value and the bit-score of the hit.\nThe second summary give some information on the protein domain arrangement diversity associated with the domain query.\nThe second summary fields start with \"INFO\" and look like:\n\n    INFO    1       IPR001025/PF01426;IPR001025/SM00439;IPR001025/PS51038   11\n    \nAfter the header and the summary, a detailled description of the results are provided per domain query sorted by domain arrangement and protein target:\n\n    ## <- start of a domain arrangement results\n    >protein_target protein_size\n    Qdom    1       IPR001025/PS51038       167     286      <- Qdom <query domain index> <interpro domain/db specific name> <start> <stop>\n    Qdom    1       IPR001025/SM00439       167     286      <- Qdom <query domain index> <interpro domain/db specific name> <start> <stop>\n    Qdom    1       IPR001025/PF01426       168     261      <- ...\n    Qdom    1       IPR008395/PF05641       386     459     \n    Qdom    1       IPR014002/SM00743       466     524     \n    Hit     1       0       7e-06   97.16   79.55   17.0    0.195 <- Hit <query domain index> <hit index, starts from 0 and increase if multiple hits> <HHblits e-value> <HHblits proba score> <HHblits bit-score> <identity> <similarity>\n    HitQali 1       0       22      134     HKNVYFYQKCIYGPLTLSVGDFILVSNADAAE ... <- HitQali <query domain index> <hit index> <hit start> <hit stop> <sequence>\n    HitQcon 1       0       22      134     ~k~~~fy~kc~~~~~~i~vGdfVLIen~D~ae ...\n    HitTcon 1       0       154     248     gKqLkHYpsFcRNGtTI~VqSFVfVMake--- ...\n    HitTali 1       0       154     248     GKQLKHYPSFCRNGTTISVQSFVFVMSKE--- ...\n    \n    //  <---- End of a hit\n    ## <---- End / beginning of domain arrangement\n    \n    >tr|V5HB40|V5HB40_IXORI 420\n    Qdom    1       IPR001025/PS51038       1       103\n    Hit     1       0       7.9e-06 97.21   74.04   22.0    0.412\n    HitQali 1       0       77      134     REPCRAIVQWYSWPKAIPHNKYDDDEVAIDF ...\n    HitQcon 1       0       77      134     ~~~krA~VQWfsR~~eiP~~kr~ll~r~~~~ ...\n    HitTcon 1       0       7       63      kdhrfvtvqwylrvtelpptqqgrlghcdyf ...\n    HitTali 1       0       7       63      KDHRFVTVQWYLRVTELPPTQQGRLGHCDYF ...\n    \n    // <---- End of a hit but next target hit is a different protein but with the same domain arrangement so no double # symbol\n    \n    >tr|H2ZNF4|H2ZNF4_CIOSA 222\n    Qdom    1       IPR001025/PS51038       53      176\n    Hit     1       0       3.7e-05 96.89   65.49   21.0    0.288\n    HitQali 1       0       36      133     LTLSVGDFILVSNADAAEPDTVSGCDVARIL ...\n    HitQcon 1       0       36      133     ~~i~vGdfVLIen~D~aepd~~d~~~VAki~ ...\n    HitTcon 1       0       54      139     nlisigdgvviacges-----kqdfylaqvs ...\n    HitTali 1       0       54      139     NLISIGDGVVIACGES-----KQDFYLAQVS ...\n    //\n    ...\n\n"
      },
      "source": "https://raw.githubusercontent.com/T-B-F/pyHCA/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "domOnTree",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Vizualise Tremolo-HCA results on a taxonomic tree with protein domain arrangement information\n\n\n    $ hcatk domOnTree -h\n\n    usage: hcatk [-h] [-i TREMOLORES] [-t TREEFILE] [-s PROT2SPECIES]\n                 [-n NCBITAXID [NCBITAXID ...]] [-o OUTPUT]\n\n\nArguments:\n**********\n\n    -h, --help            show help message and exit\n    \nrequired arguments:\n\n    -i TREMOLORES         tremolo results with domain matchs\n    -o OUTPUT             phylogenetic tree with tremolo hits\n    \noptional arguments:\n\n\n    -t TREEFILE           phylogenetic tree with node as ncbi taxonomic ids\n    -s PROT2SPECIES       file with prot to species informations\n    -n NCBITAXID [NCBITAXID ...]\n                          list of node for which leaves will be merged (internal\n                          node need to be in tree)\n\n\nExample:\n********\n\n    $ hcatk domOnTree -i data/tremolo_result.txt -o data/tremolo_result.pdf\n                          \nOutput Format:\n**************    \n\nThe output is a pdf file representing the domain arrangement of each sequence associated with the protein domain query used in tremolo. \nEach sequence is positioned on a taxonomic tree according to the species to which the sequence belongs to.\n\n"
      },
      "source": "https://raw.githubusercontent.com/T-B-F/pyHCA/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Additional ressources",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "The interpo domain annoation can be downloaded at:\n    wget ftp://ftp.ebi.ac.uk/pub/databases/interpro/protein2ipr.dat.gz\n\nHHblits of the HH-suite package can be downlad at (v3 or higher):\n    git clone git@github.com:soedinglab/hh-suite.git\n\nAnd the uniprot hhblits compatible database at:\n    http://wwwuser.gwdg.de/~compbiol/data/hhsuite/databases/hhsuite_dbs/\n"
      },
      "source": "https://raw.githubusercontent.com/T-B-F/pyHCA/master/README.md",
      "technique": "header_analysis"
    }
  ]
}