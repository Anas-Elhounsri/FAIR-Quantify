{
  "application_domain": [
    {
      "confidence": 39.31,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "type": "Text_excerpt",
        "value": "Wang, X., Luan, Y., Yue, F. EagleC: A deep-learning framework for detecting a full range of\nstructural variations from bulk and single-cell contact maps. Sci Adv. 2022.\n"
      },
      "source": "https://raw.githubusercontent.com/XiaoTaoWang/EagleC/master/README.rst",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/XiaoTaoWang/EagleC"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Visualize predicted SVs on contact maps",
        "type": "Text_excerpt",
        "value": "Here are example commands to visualize SVs on chromosome-wide contact maps::\n\n    $ plot-interSVs --cool-uri SKNAS-MboI-allReps-filtered.mcool::resolutions/1000000 \\\n                    --full-sv-file SK-N-AS.CNN_SVs.5K_combined.txt --output-figure-name chr4-chr8.png \\\n                    -C chr4 chr8 --balance-type Raw --dpi 800 # panel A\n    $ plot-interSVs --cool-uri SKNAS-MboI-allReps-filtered.mcool::resolutions/1000000 \\\n                    --full-sv-file SK-N-AS.CNN_SVs.5K_combined.txt --output-figure-name chr7-chr22.png \\\n                    -C chr7 chr22 --balance-type Raw --dpi 800 # panel B\n\n.. image:: ./images/interSVs.png\n        :align: center\n\nHere are example commands to visualize SVs on local intra-chromosomal contact maps::\n\n    $ wget -O SKNAS_merged.dedup.bam_ratio.bw -L https://www.dropbox.com/s/usjjc6neqs5fk3a/SKNAS_merged.dedup.bam_ratio.bw?dl=0\n    $ plot-intraSVs --cool-uri SKNAS-MboI-allReps-filtered.mcool::resolutions/10000 \\\n                    --full-sv-file SK-N-AS.CNN_SVs.5K_combined.txt \\\n                    --cnv-file SKNAS_merged.dedup.bam_ratio.bw \\\n                    --region chr9:128940000-129835000 --output-figure-name intraSV-example1.png \\\n                    --coordinates-to-display 129240000 129535000 \\ \n                    --balance-type CNV --dpi 800 # panel A\n    $ plot-intraSVs --cool-uri SKNAS-MboI-allReps-filtered.mcool::resolutions/5000 \\\n                    --full-sv-file SK-N-AS.CNN_SVs.5K_combined.txt \\\n                    --cnv-file SKNAS_merged.dedup.bam_ratio.bw \\\n                    --region chr5:98735000-98970000 --output-figure-name intraSV-example2.png \\\n                    --coordinates-to-display 98815000 98890000 \\\n                    --contact-max-value 0.04 \\\n                    --balance-type CNV --dpi 800 # panel B\n\n.. image:: ./images/intraSVs.png\n        :align: center\n\nIn above figures, the predicted SVs are marked by black dashed circles.\n"
      },
      "source": "https://raw.githubusercontent.com/XiaoTaoWang/EagleC/master/README.rst",
      "technique": "header_analysis"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Locate high-resolution coordinates given a list of low-resolution SVs",
        "type": "Text_excerpt",
        "value": "Suppose you have a high-resolution contact map at the 1kb or 2kb resolution, and a list of\nSVs detected from relatively low-resolution (50kb/10kb) contact maps of the same sample,\nyou want to use the high-resolution map to find more precise breakpoint coordinates for\nthese SVs, rather than perform a genome-wide SV prediction on the high-resolution map.\nWith the *predictSV-single-resolution* command, you can easily get this job done by specifying\nthe \"--low-resolution-breaks\" parameter.\n\nFor example, the coordinate of the duplication showed in the previous figure (panel A) were\ndetermined as (\"chr9\", 129,240,000, \"chr9\", 129,535,000) at the 5kb resolution. Now let's try\nto use the *predictSV-single-resolution* command to find more precise coordinates at the 1kb resolution.\n\nFirst, let's extract the line containing this duplication from \"SK-N-AS.CNN_SVs.5K_combined.txt\"\nand put it into a new TXT file::\n\n    $ head -1 SK-N-AS.CNN_SVs.5K_combined.txt > test.txt\n    $ grep '129240000\\|129535000' SK-N-AS.CNN_SVs.5K_combined.txt >> test.txt\n    $ cat test.txt\n\n    chrom1\tpos1\tchrom2\tpos2\t++\t+-\t-+\t--\n    chr9\t129240000\tchr9\t129535000\t1.35e-13\t5.094e-14\t0.8477\t6.37e-18\n\nThen download the SK-N-AS Hi-C map at the 1kb resolution::\n\n    $ wget -O SKNAS-MboI-allReps-filtered.1kb.cool -L https://www.dropbox.com/s/m8tqsr7ics9juas/SKNAS-MboI-allReps-filtered.1kb.cool?dl=0\n\nAnd execute the command below::\n\n    $ predictSV-single-resolution -H SKNAS-MboI-allReps-filtered.1kb.cool -O test.1k.txt \\\n                                  -g hg38 --balance-type Raw --low-resolution-breaks test.txt \\\n                                  --region-size 10000\n\nHere by specifying ``--region-size 10000``, we limit the program to perform a local search within\n+/-10kb of the input coordinates. Wait ~1 minutes, then you can find more precise breakpoint\ncoordinates in \"test.1k.txt\"::\n\n    $ cat test.1k.txt\n\n    chrom1\tpos1\tchrom2\tpos2\t++\t+-\t-+\t--\n    chr9\t129239000\tchr9\t129536000\t1.35e-13\t5.094e-14\t0.8477\t6.37e-18\n\nNote that when you run *predictSV-single-resolution* with the parameter \"--low-resolution-breaks\",\nthe program will keep the probability scores the same and only change the coordinates in the 2nd\nand 4th columns.\n\n.. image:: ./images/intraSVs-panelA-zoom_in.png\n        :align: center\n\n"
      },
      "source": "https://raw.githubusercontent.com/XiaoTaoWang/EagleC/master/README.rst",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-06-02T04:42:10Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-06-20T11:51:10Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A deep-learning framework for predicting a full range of structural variations from bulk and single-cell contact maps"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9971456519541477,
      "result": {
        "original_header": "Unique features of EagleC",
        "type": "Text_excerpt",
        "value": "- EagleC is able to accurately detect a full range of SVs including short-range SVs with\n  breakpoint distance less than 100kb or even 50kb\n- EagleC is designed to accept any 3C-based contact maps, including Hi-C, Micro-C, HiChIP,\n  ChIA-PET, capture Hi-C, and single-cell Hi-C\n- EagleC can be used to predict SVs in any species (it has been tested in human, mouse, and\n  zebrafish) \n"
      },
      "source": "https://raw.githubusercontent.com/XiaoTaoWang/EagleC/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8982999113749014,
      "result": {
        "original_header": "Navigation",
        "type": "Text_excerpt",
        "value": "- `Installation`_\n- `Download pre-trained models`_\n- `Overview of the commands`_\n- `Quick Start`_\n- `Annotate gene fusions`_\n- `Visualize predicted SVs on contact maps`_\n- `Locate high-resolution coordinates given a list of low-resolution SVs`_\n- `Predict SVs at higher resolutions`_\n- `Predict SVs in other species`_\n \n"
      },
      "source": "https://raw.githubusercontent.com/XiaoTaoWang/EagleC/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.894052113996997,
      "result": {
        "original_header": "Overview of the commands",
        "type": "Text_excerpt",
        "value": "EagleC is distributed with 6 command-line tools. Type ``command [-h]`` in a terminal\nwindow to learn the basic usage of each command. \n  *predictSV* is the main command we used to predict SVs from bulk Hi-C/HiChIP/ChIA-PET\n  contact maps in this work. It is based on *predictSV-single-resolution* and automatically\n  combines predictions from 5kb, 10kb, and 50kb resolutions. For 10kb and 50kb predictions,\n  it further searches for the most probable breakpoint coordinates within a local region on\n  5kb contact maps so that all the reported SVs are at the 5kb resolution.  \n  The inputs to this command are three genome-wide contact maps at 5kb, 10kb, and 50kb\n  resolutions in .cool format (cool URIs, refer to `cooler <https://github.com/open2c/cooler>`_\n  if you are not familiar with this format). If you only have `.hic files <https://github.com/aidenlab/juicer>`_,\n  consider converting your files to the \".cool\" format using `hic2cool <https://github.com/4dn-dcic/hic2cool>`_\n  or `pairLiftOver <https://github.com/XiaoTaoWang/pairLiftOver#usage>`_. The predicted SVs can\n  be selected to be reported in two formats: 1) \"--output-format full\" will report 8 columns\n  for each SV, including breakpoint coordinates (chrom1, pos1, chrom2, pos2) and probability\n  values of each fusion type (++, +-, -+, and --) (refer to Figures S1-S2 for the definition\n  of each fusion type); 2) \"--output-format NeoLoopFinder\" will output a file (6 columns) that\n  can be directly used as the `NeoLoopFinder <https://github.com/XiaoTaoWang/NeoLoopFinder>`_ input. \n  This command can be used to annotate gene fusion events for a list of SV breakpoints. The input to\n  this command is an SV file with breakpoint coordinate information (chrom1, pos1, chrom2, pos2)\n  in the first four columns and a release number of ensembl genes. \n  This command can be used to plot a chromosome-wide contact map with predicted SVs marked on it. \n"
      },
      "source": "https://raw.githubusercontent.com/XiaoTaoWang/EagleC/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8794394404883668,
      "result": {
        "original_header": "Annotate gene fusions",
        "type": "Text_excerpt",
        "value": "Here by specifying \"--ensembl-release 93 --species human\", *annotate-gene-fusion* uses\nthe Ensembl gene release 93 of the human genome as a database to search for genes at any\ngenomic loci. The \"--buff-size\" parameter determines the genomic span (in base pair)\nof the breakpoints for each SV. Here, a gene will be considered at a breakpoint if its\ninterval is overlapped with the +/-10kb region centered at the breakpoint:: \n"
      },
      "source": "https://raw.githubusercontent.com/XiaoTaoWang/EagleC/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9180142439940856,
      "result": {
        "original_header": "Predict SVs at higher resolutions",
        "type": "Text_excerpt",
        "value": "If you want to predict smaller SVs, try \"predictSV-single-resolution\" on high-resolution\nmaps (1kb or 2kb) without specifying the \"--low-resolution-breaks\" parameter. \nIn this example, we will use a CTCF ChIA-PET dataset (containing ~266M usable reads) to\npredict SVs in MCF7 at the 2kb resolution:: \nAnd submit it for a number of times:: \nNote that identifying SVs on 1kb/2kb contact maps is really time consuming. Here by specifying\n``-C 1 18 --maximum-size 100000``, we limit our search space to chromosomes 1 and 18, and only\nconsider SV candidates with breakpoint distance less than 100kb. \n"
      },
      "source": "https://raw.githubusercontent.com/XiaoTaoWang/EagleC/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9092965070324626,
      "result": {
        "type": "Text_excerpt",
        "value": "EagleC\n******\nHi-C technique has been shown to be a promising method to detect structural variations (SVs)\nin human genomes. However, algorithms that can use Hi-C data for a full-range SV detection\nhave been severely lacking. Current methods can only identify inter-chromosomal translocations\nand long-range intra-chromosomal SVs (>1Mb) at less-than-optimal resolution. Therefore, we\ndevelop EagleC, a framework that combines deep-learning and ensemble-learning strategies to\npredict a full-range of SVs at high-resolution. Importantly, we show that EagleC can uniquely\ncapture a set of fusion genes that are missed by WGS or nanopore. Furthermore, EagleC also\neffectively captures SVs in other chromatin interaction platforms, such as HiChIP, ChIA-PET,\nand capture Hi-C. We apply EagleC in over 100 cancer cell lines and primary tumors, and\nidentify a valuable set of high-quality SVs. Finally, we demonstrate that EagleC can be\napplied to single-cell Hi-C and used to study the SV heterogeneity in primary tumors. \n.. image:: ./images/framework.png\n        :align: center \n"
      },
      "source": "https://raw.githubusercontent.com/XiaoTaoWang/EagleC/master/README.rst",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Download pre-trained models",
        "type": "Text_excerpt",
        "value": "We have trained a series of EagleC models covering various sequencing depths\nfor both bulk Hi-C maps and single-cell Hi-C maps. Before running EagleC,\nwe recommend downloading these pre-trained models by simply executing the\ncommand below. In prediction, EagleC will automatically select the most\nappropriate models according to the number of contacts in your contact map::\n\n    $ download-pretrained-models\n"
      },
      "source": "https://raw.githubusercontent.com/XiaoTaoWang/EagleC/master/README.rst",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/XiaoTaoWang/EagleC/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 8
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/XiaoTaoWang/EagleC/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "XiaoTaoWang/EagleC"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/XiaoTaoWang/EagleC/master/README.rst",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "First, install following python packages using `mamba <https://mamba.readthedocs.io/en/latest/installation.html>`_::\n\n    $ conda config --add channels defaults\n    $ conda config --add channels bioconda\n    $ conda config --add channels conda-forge\n    $ mamba create -n EagleC scikit-learn statsmodels matplotlib cooler pyBigWig pyensembl python=3.8 joblib=1.0.1 cython=0.29.24 \"tensorflow<=2.11\"\n\n.. note:: *matplotlib* and *pyBigWig* are only required if you want to use the visualization module\n   to view the predicted SVs on contact maps, and *pyensembl* is only required if you want to annotate\n   potential gene fusions given a list of SV breakpoints.\n\nIf you are installing EagleC in Linux, just execute the command below to install\nEagleC from `PyPI <https://pypi.org/project/eaglec/>`_::\n\n    $ pip install eaglec\n\nIf you are installing EagleC in MacOS, please download and install an appropriate package\nfrom `here <https://github.com/XiaoTaoWang/EagleC/releases>`_::\n\n    $ pip install eaglec-0.1.9-cp38-cp38-macosx_10_9_x86_64.whl\n"
      },
      "source": "https://raw.githubusercontent.com/XiaoTaoWang/EagleC/master/README.rst",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9973820670296124,
      "result": {
        "original_header": "Overview of the commands",
        "type": "Text_excerpt",
        "value": "  The inputs to this command are three genome-wide contact maps at 5kb, 10kb, and 50kb\n  resolutions in .cool format (cool URIs, refer to `cooler <https://github.com/open2c/cooler>`_\n  if you are not familiar with this format). If you only have `.hic files <https://github.com/aidenlab/juicer>`_,\n  consider converting your files to the \".cool\" format using `hic2cool <https://github.com/4dn-dcic/hic2cool>`_\n  or `pairLiftOver <https://github.com/XiaoTaoWang/pairLiftOver#usage>`_. The predicted SVs can\n  be selected to be reported in two formats: 1) \"--output-format full\" will report 8 columns\n  for each SV, including breakpoint coordinates (chrom1, pos1, chrom2, pos2) and probability\n  values of each fusion type (++, +-, -+, and --) (refer to Figures S1-S2 for the definition\n  of each fusion type); 2) \"--output-format NeoLoopFinder\" will output a file (6 columns) that\n  can be directly used as the `NeoLoopFinder <https://github.com/XiaoTaoWang/NeoLoopFinder>`_ input. \n"
      },
      "source": "https://raw.githubusercontent.com/XiaoTaoWang/EagleC/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9137099560114005,
      "result": {
        "original_header": "Annotate gene fusions",
        "type": "Text_excerpt",
        "value": "To annotate potential gene fusion events from the predicted SVs above, just execute\nthe command below:: \n    $ annotate-gene-fusion --sv-file SK-N-AS.CNN_SVs.5K_combined.txt \\\n                           --output-file SK-N-AS.gene-fusions.txt \\\n                           --buff-size 10000 --skip-rows 1 --ensembl-release 93 --species human \n    $ head -5 SK-N-AS.gene-fusions.txt \n"
      },
      "source": "https://raw.githubusercontent.com/XiaoTaoWang/EagleC/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9720983295640512,
      "result": {
        "original_header": "Predict SVs at higher resolutions",
        "type": "Text_excerpt",
        "value": "    $ wget -O ChIA-PET_hg38_MCF7_CTCF_pairs.2K.cool -L https://www.dropbox.com/s/bqz71zn9pg5si6a/ChIA-PET_hg38_MCF7_CTCF_pairs.2K.cool?dl=0 \nAgain, let's create a job submission script \"slurm-predictSV-2k.sh\":: \n    #!/bin/bash\n    #SBATCH -A b1042\n    #SBATCH -p genomicsguestA\n    #SBATCH -t 48:00:00\n    #SBATCH -N 1\n    #SBATCH --mem=20G\n    #SBATCH --cpus-per-task=1 \n    #SBATCH --job-name=eaglec\n    #SBATCH --output=eaglec.%j.%N.txt\n    #SBATCH --error=eaglec.%j.%N.err \n"
      },
      "source": "https://raw.githubusercontent.com/XiaoTaoWang/EagleC/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9939118894732988,
      "result": {
        "original_header": "Quick Start",
        "type": "Text_excerpt",
        "value": "    source /home/xwl2576/.bashrc\n    mamba activate EagleC \n"
      },
      "source": "https://raw.githubusercontent.com/XiaoTaoWang/EagleC/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8810683498632694,
      "result": {
        "original_header": "Predict SVs at higher resolutions",
        "type": "Text_excerpt",
        "value": "    $ cat MCF7_CTCF-ICE.SVs.2k.txt \n"
      },
      "source": "https://raw.githubusercontent.com/XiaoTaoWang/EagleC/master/README.rst",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8638316220537748,
      "result": {
        "original_header": "Overview of the commands",
        "type": "Text_excerpt",
        "value": "- plot-interSVs \n- plot-intraSVs \n"
      },
      "source": "https://raw.githubusercontent.com/XiaoTaoWang/EagleC/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8581378540324167,
      "result": {
        "original_header": "Annotate gene fusions",
        "type": "Text_excerpt",
        "value": "    $ annotate-gene-fusion --sv-file SK-N-AS.CNN_SVs.5K_combined.txt \\\n                           --output-file SK-N-AS.gene-fusions.txt \\\n                           --buff-size 10000 --skip-rows 1 --ensembl-release 93 --species human \n"
      },
      "source": "https://raw.githubusercontent.com/XiaoTaoWang/EagleC/master/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9059841588419906,
      "result": {
        "original_header": "Predict SVs at higher resolutions",
        "type": "Text_excerpt",
        "value": "    #SBATCH --job-name=eaglec\n    #SBATCH --output=eaglec.%j.%N.txt\n    #SBATCH --error=eaglec.%j.%N.err \n    $ wget -O MCF7_merged.dedup.bam_ratio.bw -L https://www.dropbox.com/s/rstx3lzvpin8d0m/MCF7_merged.dedup.bam_ratio.bw?dl=0\n    $ plot-intraSVs --cool-uri ChIA-PET_hg38_MCF7_CTCF_pairs.2K.cool \\\n                    --full-sv-file MCF7_CTCF-ICE.SVs.2k.txt \\\n                    --cnv-file MCF7_merged.dedup.bam_ratio.bw \\\n                    --region chr1:152547000-152649000 --output-figure-name intraSV-example3.png \\\n                    --coordinates-to-display 152582000 152614000 \\\n                    --balance-type ICE --dpi 800 # panel A\n    $ plot-intraSVs --cool-uri ChIA-PET_hg38_MCF7_CTCF_pairs.2K.cool \\\n                    --full-sv-file MCF7_CTCF-ICE.SVs.2k.txt \\\n                    --cnv-file MCF7_merged.dedup.bam_ratio.bw \\\n                    --region chr18:3142000-3348000 --output-figure-name intraSV-example4.png \\\n                    --coordinates-to-display 3212000 3278000 \\\n                    --balance-type ICE --dpi 800 # panel B \n"
      },
      "source": "https://raw.githubusercontent.com/XiaoTaoWang/EagleC/master/README.rst",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/XiaoTaoWang/EagleC/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Copyright (c) 2022, Xiaotao Wang and Feng Yue\nAll rights reserved.\n\nThis software is provided free of charge to the academic research community for non-commercial\nresearch and educational purposes only. It may not be redistributed in any form, without prior\nwritten permission from the authors. Permission is granted to modify the code for your own personal\nuse, but modified versions must retain this copyright notice and must not be distributed.\nIt cannot be used for commercial purposes without permission from the authors. For information on\nthe use for a commercial purpose or by a commercial or for-profit entity, please contact\nDr. Feng Yue (yue@northwestern.edu).\n\nIf utilization of EagleC (or the modified versions) results in a publication, please cite\nthe following publication:\n\nWang, X., Luan, Y., Yue, F. EagleC: A deep-learning framework for detecting a full range of\nstructural variations from bulk and single-cell contact maps. Sci Adv. 2022.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT\nLIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO\nEVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR\nTHE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/XiaoTaoWang/EagleC/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "EagleC"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "XiaoTaoWang"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/XiaoTaoWang/EagleC/master/README.rst"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://mamba.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/XiaoTaoWang/EagleC/master/README.rst",
      "technique": "regular_expression"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "XiaoTaoWang",
          "type": "User"
        },
        "date_created": "2022-08-09T02:09:35Z",
        "date_published": "2023-03-07T14:10:40Z",
        "description": "Fixed a bug of ``plot-intraSVs`` when adjusting the limits of the y-axis for copy number profiles. ",
        "html_url": "https://github.com/XiaoTaoWang/EagleC/releases/tag/v0.1.9",
        "name": "EagleC-v0.1.9",
        "release_id": 94776692,
        "tag": "v0.1.9",
        "tarball_url": "https://api.github.com/repos/XiaoTaoWang/EagleC/tarball/v0.1.9",
        "type": "Release",
        "url": "https://api.github.com/repos/XiaoTaoWang/EagleC/releases/94776692",
        "value": "https://api.github.com/repos/XiaoTaoWang/EagleC/releases/94776692",
        "zipball_url": "https://api.github.com/repos/XiaoTaoWang/EagleC/zipball/v0.1.9"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "XiaoTaoWang",
          "type": "User"
        },
        "date_created": "2022-07-28T17:11:16Z",
        "date_published": "2022-08-09T02:09:10Z",
        "description": "Migrated pre-trained models from dropbox to the 3D genome browser server",
        "html_url": "https://github.com/XiaoTaoWang/EagleC/releases/tag/v0.1.8",
        "name": "EagleC-v0.1.8",
        "release_id": 73943141,
        "tag": "v0.1.8",
        "tarball_url": "https://api.github.com/repos/XiaoTaoWang/EagleC/tarball/v0.1.8",
        "type": "Release",
        "url": "https://api.github.com/repos/XiaoTaoWang/EagleC/releases/73943141",
        "value": "https://api.github.com/repos/XiaoTaoWang/EagleC/releases/73943141",
        "zipball_url": "https://api.github.com/repos/XiaoTaoWang/EagleC/zipball/v0.1.8"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "XiaoTaoWang",
          "type": "User"
        },
        "date_created": "2022-07-22T15:00:27Z",
        "date_published": "2022-07-28T16:03:35Z",
        "description": "Removed the ``--logFile`` parameter of the ``predictSV`` command. Since this version, the log file name will use the value of ``--output-prefix`` as its prefix.",
        "html_url": "https://github.com/XiaoTaoWang/EagleC/releases/tag/v0.1.7",
        "name": "EagleC-v0.1.7",
        "release_id": 73081518,
        "tag": "v0.1.7",
        "tarball_url": "https://api.github.com/repos/XiaoTaoWang/EagleC/tarball/v0.1.7",
        "type": "Release",
        "url": "https://api.github.com/repos/XiaoTaoWang/EagleC/releases/73081518",
        "value": "https://api.github.com/repos/XiaoTaoWang/EagleC/releases/73081518",
        "zipball_url": "https://api.github.com/repos/XiaoTaoWang/EagleC/zipball/v0.1.7"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "XiaoTaoWang",
          "type": "User"
        },
        "date_created": "2022-06-14T19:21:31Z",
        "date_published": "2022-07-22T14:59:44Z",
        "description": "Migrated pre-trained models from dropbox to northwestern server",
        "html_url": "https://github.com/XiaoTaoWang/EagleC/releases/tag/v0.1.6",
        "name": "EagleC-v0.1.6",
        "release_id": 72625431,
        "tag": "v0.1.6",
        "tarball_url": "https://api.github.com/repos/XiaoTaoWang/EagleC/tarball/v0.1.6",
        "type": "Release",
        "url": "https://api.github.com/repos/XiaoTaoWang/EagleC/releases/72625431",
        "value": "https://api.github.com/repos/XiaoTaoWang/EagleC/releases/72625431",
        "zipball_url": "https://api.github.com/repos/XiaoTaoWang/EagleC/zipball/v0.1.6"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "XiaoTaoWang",
          "type": "User"
        },
        "date_created": "2022-06-14T15:46:52Z",
        "date_published": "2022-06-02T04:52:36Z",
        "description": "Initial release of EagleC",
        "html_url": "https://github.com/XiaoTaoWang/EagleC/releases/tag/v0.1.5",
        "name": "EagleC",
        "release_id": 68411602,
        "tag": "v0.1.5",
        "tarball_url": "https://api.github.com/repos/XiaoTaoWang/EagleC/tarball/v0.1.5",
        "type": "Release",
        "url": "https://api.github.com/repos/XiaoTaoWang/EagleC/releases/68411602",
        "value": "https://api.github.com/repos/XiaoTaoWang/EagleC/releases/68411602",
        "zipball_url": "https://api.github.com/repos/XiaoTaoWang/EagleC/zipball/v0.1.5"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "requirements",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 14:06:02",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 51
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick Start",
        "type": "Text_excerpt",
        "value": "First, let's download a processed Hi-C dataset (~163M contact pairs) in SK-N-AS\n(a neuroblastoma cell line)::\n\n    $ wget -O SKNAS-MboI-allReps-filtered.mcool -L https://www.dropbox.com/s/f80bgn11d7wfgq8/SKNAS-MboI-allReps-filtered.mcool?dl=0\n\nThe downloaded \".mcool\" file contains contact matrices at multiple resolutions. To list all\nindividual cool URIs within it, execute the ``cooler ls`` command below::\n\n    $ cooler ls SKNAS-MboI-allReps-filtered.mcool\n\n    SKNAS-MboI-allReps-filtered.mcool::/resolutions/5000\n    SKNAS-MboI-allReps-filtered.mcool::/resolutions/10000\n    SKNAS-MboI-allReps-filtered.mcool::/resolutions/25000\n    SKNAS-MboI-allReps-filtered.mcool::/resolutions/50000\n    SKNAS-MboI-allReps-filtered.mcool::/resolutions/100000\n    SKNAS-MboI-allReps-filtered.mcool::/resolutions/250000\n    SKNAS-MboI-allReps-filtered.mcool::/resolutions/500000\n    SKNAS-MboI-allReps-filtered.mcool::/resolutions/1000000\n    SKNAS-MboI-allReps-filtered.mcool::/resolutions/2500000\n    SKNAS-MboI-allReps-filtered.mcool::/resolutions/5000000\n\nNext, let's use the *predictSV* command to predict SVs on this dataset::\n\n    $ predictSV --hic-5k SKNAS-MboI-allReps-filtered.mcool::/resolutions/5000 \\\n                --hic-10k SKNAS-MboI-allReps-filtered.mcool::/resolutions/10000 \\\n                --hic-50k SKNAS-MboI-allReps-filtered.mcool::/resolutions/50000 \\\n                -O SK-N-AS -g hg38 --balance-type CNV --output-format full \\\n                --prob-cutoff-5k 0.8 --prob-cutoff-10k 0.8 --prob-cutoff-50k 0.99999\n\nAs we mentioned in `Overview of the commands`_, contact matrices at three resolutions\n5kb, 10kb, and 50kb will be used. Here are some suggestions for individual parameters:\n\n1) ``--balance-type``, here by specifying \"--balance-type CNV\", *predictSV* will perform\n   predictions on CNV-normalized matrices. You can also select to use ICE-normalized matrices\n   by specifying \"--balance-type ICE\" or Raw matrices by specifying \"--balance-type Raw\".\n   According to our test, for the same sample, running on the Raw matrix tends to detect\n   more SVs with lower accuracy, while running on the CNV/ICE normalized matrices usually\n   achieves higher accuracy but detects fewer SVs.\n\n.. note:: If you choose CNV, make sure you have run \"correct-cnv\" of the\n   `NeoLoopFinder <https://github.com/XiaoTaoWang/NeoLoopFinder>`_\n   toolkit before you run this command; if you choose ICE, make sure you have run\n   \"cooler balance\" on your Hi-C matrices before you run this command.\n\n2) By default, we apply probability cutoffs of 0.8, 0.8, and 0.99999 at 5kb, 10kb, and 50kb\n   resolutions, respectively. We found this set of cutoffs achieved a good tradeoff between\n   sensitivity and specificity in most of our tests. If you care more about sensitivity,\n   just tune down these cutoffs.\n\nRunning *predictSV* on a single CPU core is expected to be slow, as it iterates submatrices of all\ncandidate pixels on these contact matrices. To speed up the calculation, *predictSV* supports\nparallel computation for different intra-chromosomal and inter-chromosomal matrices, by creating\nhidden lock files to avoid conflicts between jobs. This strategy is especially efficient when\nyou are performing the calculation in a computational cluster. Depending on your cluster environment,\nyou need to create a job submission script. Here is an example slurm script named as \"slurm-predictSV.sh\"::\n\n    #!/bin/bash\n    #SBATCH -A b1042\n    #SBATCH -p genomicsguestA\n    #SBATCH -t 48:00:00\n    #SBATCH -N 1\n    #SBATCH --mem=16G\n    #SBATCH --cpus-per-task=1\n\n    #SBATCH --job-name=predictSV\n    #SBATCH --output=predictSV.%j.%N.txt\n    #SBATCH --error=predictSV.%j.%N.err\n\n    source /home/xwl2576/.bashrc\n    mamba activate EagleC\n\n    predictSV --hic-5k SKNAS-MboI-allReps-filtered.mcool::/resolutions/5000 \\\n              --hic-10k SKNAS-MboI-allReps-filtered.mcool::/resolutions/10000 \\\n              --hic-50k SKNAS-MboI-allReps-filtered.mcool::/resolutions/50000 \\\n              -O SK-N-AS -g hg38 --balance-type CNV --output-format full \\\n              --prob-cutoff-5k 0.8 --prob-cutoff-10k 0.8 --prob-cutoff-50k 0.99999\n\nThen all you need to do is to submit this script for a certain number of times::\n\n    $ for i in {1..16}; do sbatch slurm-predictSV.sh; sleep 40s; done\n\nThe above command will launch 16 parallelized jobs and should be able to finish within 2 hours.\n\n.. note:: EagleC will cache all the intermediate results within hidden folders in\n   your current working directory. In this example, these folders will be prefixed with\n   \".SKNAS-MboI-allReps-filtered.mcool\". If you want to start a fresh job without using\n   previous cached results, or if your previous jobs were killed or terminated\n   by the system, you may need to first remove those intermediate files by executing\n   ``rm -rf .SKNAS-MboI-allReps-filtered.mcool*``.\n\n\nIf no errors occurred, 6 files (\"SK-N-AS.CNN_SVs.10K_highres.txt\", \"SK-N-AS.CNN_SVs.10K.txt\",\n\"SK-N-AS.CNN_SVs.50K_highres.txt\", \"SK-N-AS.CNN_SVs.50K.txt\", \"SK-N-AS.CNN_SVs.5K_combined.txt\",\nand \"SK-N-AS.CNN_SVs.5K.txt\") will be outputed in current working directory. Among them,\nthe file \"SK-N-AS.CNN_SVs.5K_combined.txt\" contains the final non-redundant SVs combined from 5kb,\n10kb, and 50kb resolutions::\n\n    $ head SK-N-AS.CNN_SVs.5K_combined.txt\n\n    chrom1\tpos1\tchrom2\tpos2\t++\t+-\t-+\t--\n    chr10\t100540000\tchr10\t101175000\t1.885e-15\t4.558e-22\t1\t1.827e-16\n    chr11\t100080000\tchr11\t100160000\t1.319e-26\t1\t1.47e-23\t1.292e-15\n    chr11\t40120000\tchr11\t40300000\t2.869e-13\t7.797e-17\t0.964\t1.603e-17\n    chr11\t71720000\tchr17\t32285000\t3.397e-23\t1\t8.086e-15\t1.674e-18\n    chr12\t111605000\tchr16\t83395000\t6.232e-29\t1.972e-28\t1\t8.747e-27\n    chr13\t63030000\tchr17\t22155000\t1.812e-10\t1.975e-16\t0.9197\t2.687e-12\n    chr16\t21580000\tchr16\t22695000\t1\t4.339e-28\t6.561e-27\t1.242e-17\n    chr17\t73790000\tchr19\t780000\t1.392e-21\t2.4e-29\t2.071e-24\t1\n    chr18\t47755000\tchr18\t48025000\t1.861e-13\t3.204e-14\t0.9863\t1.928e-16\n"
      },
      "source": "https://raw.githubusercontent.com/XiaoTaoWang/EagleC/master/README.rst",
      "technique": "header_analysis"
    }
  ]
}