{
  "application_domain": [
    {
      "confidence": 0.8681157187607308,
      "result": {
        "type": "String",
        "value": "Graphs"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Please Cite the Following paper when using 4D-FED-GNN++:",
        "type": "Text_excerpt",
        "value": "\r\n@article{gurler2022, <br/>\r\ntitle={Federated Brain Graph Evolution Prediction using Decentralized Connectivity Datasets with Temporally-varying Acquisitions }, <br/>\r\nauthor={Gurler Zeynep and Rekik Islem}, <br/>\r\njournal={IEEE Transactions on Medical Imaging},<br/>\r\nvolume={}, <br/>\r\npages={}, <br/>\r\nyear={2022}, <br/>\r\npublisher={IEEE} <br/>\r\n}<br/>\r\n\r\n\r\n\r\n\r\n\r\n\r\n"
      },
      "source": "https://raw.githubusercontent.com/basiralab/4D-FedGNN-Plus/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/basiralab/4D-FedGNN-Plus"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-08-29T13:40:20Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-24T02:31:11Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Federating temporally-varying graph timeseries"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9993420573040986,
      "result": {
        "original_header": "4D-FED-GNN++",
        "type": "Text_excerpt",
        "value": "4D-FED-GNN++, a federated brain graph evolution trajectory prediction framework that learns from brain connectivity data with missing timepoints, coded up in Python\r\nby Zeynep G\u00fcrler and Pavel Bozmarov. Please contact zeynepgurler1998@gmail.com or pavel1818@gmail.com for inquiries. Thanks.\r\n \r\n> **Federated Brain Graph Evolution Prediction using Decentralized Connectivity Datasets with Temporally-varying Acquisitions**\r\n\r\n> [Zeynep G\u00fcrler](https://github.com/zeynepgurler)<sup>1</sup>, [Islem Rekik](https://basira-lab.com/)<sup>1</sup>\r\n> \r\n> <sup>1</sup>BASIRA Lab, Faculty of Computer and Informatics, Istanbul Technical University, Istanbul, Turkey\r\n>\r\n> **Abstract:** Foreseeing the evolution of brain connectivity between anatomical regions from a baseline observation can propel early disease diagnosis and clinical decision making. Such task becomes challenging when learning from multiple decentralized datasets with missing timepoints (e.g., datasets collected from different hospitals with a varying sequence of acquisitions).  Federated learning (FL) is an emerging paradigm that enables collaborative learning among multiple clients (i.e., hospitals) in a fully privacy-preserving fashion. However, to the best of our knowledge, there is no FL work that foresees the time-dependent brain connectivity evolution from a single timepoint --let alone learning from non-iid decentralized longitudinal datasets with \\emph{varying acquisition timepoints}. In this paper, we propose the first FL framework to significantly boost the predictive performance of local hospitals with missing acquisition timepoints while benefiting from other hospitals with available data at those timepoints without sharing data. Specifically, we introduce 4D-FED-GNN+, a novel longitudinal federated GNN framework that  acts as (i) a graph self-encoder if the next timepoint is locally missing or (ii) a graph generator if the local follow-up data is available. Further, we propose a dual federation strategy, where (i) GNN layer-wise weight aggregation and (ii) pairwise GNN weight exchange between hospitals in a random order. To improve the performance of the poorly-conditioned hospitals (e.g., consecutive missing timepoints, intermediate missing timepoint), we further propose a second variant, namely 4D-FED-GNN++, which federates based on an ordering of the local hospitals computed using their incomplete sequential patterns. Our comprehensive experiments on real longitudinal datasets show that overall 4D-FED-GNN+ and 4D-FED-GNN++ significantly outperform benchmark methods.\r\n \r \n"
      },
      "source": "https://raw.githubusercontent.com/basiralab/4D-FedGNN-Plus/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9961636217016604,
      "result": {
        "original_header": "Detailed 4D-FED-GNN++ pipeline",
        "type": "Text_excerpt",
        "value": "\r\nAn earlier version of this work is published as a MICCAI PRIME workshop paper and available at https://github.com/basiralab/4D-FedGNN\r\n\r\nOur framework is a brain graph evolution trajectory prediction framework that learns from decentralized \r\ndatasets with different acquisition timepoints resulting with missing timepoints for some data owners. \r\nOur Federated learning-based framework comprises two key steps: (1) Time-dependent hospital ordering,\r\n (2) GNN-based time-dependent prediction, and (3) Mixed federation strategy. Experimental results against comparison methods demonstrate that our\r\n framework can achieve the best results in terms of Mean Absolute Error (MAE). \r\nWe used the OASIS-2 longitudinal dataset collected by (https://www.oasis-brains.org/) to evaluate our 4D-FED-GNN++.\r\nFurther, we also evaluated our proposed framework using a simulated dataset.\r\n\r\nMore details can be found at: (link to the paper) and our research paper video on the BASIRA Lab YouTube channel (link). \r\n\r\n![gnn pipeline](main_figure.png)\r\n\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/basiralab/4D-FedGNN-Plus/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9951373682552124,
      "result": {
        "original_header": "New experiments",
        "type": "Text_excerpt",
        "value": "We have worked on upgrading 4D-FED-GNN++. To achieve that we have\r\nworked on two areas of improvement:\r\n* **Custom federated strategy**. We have essentially devised new methods for stronger hospitals to transfer their weights to weaker ones. In addition, we have defined *strength* based not only on the availability of training data but also on the quality of the training samples and the performance of the models.\r\n* **Model Architecture**. We have utilised different GNN and CNN architectures. Although we are working with graph data, CNNs are well-known for capturing patterns in grid-like data structures which is the type of data we are working with (matrices).\r\n\r\nOur best GNN model is called TAG++. It uses the same federated strategy as 4D-FED-GNN++ but we have altered the training architecture. It consists of TAGConv layers which allow incorporating information for more distant neighbours in the aggregation step. Our Best CNN-based model is named VGG19++ and utilised the VGG19 architecture and the agin the custom federated setting proposed by 4D-FED-GNN++. The results for all the main new experiments are presented as follows.\r\n<img width=\"749\" alt=\"Screenshot 2023-09-08 at 12 59 30\" src=\"https://github.com/basiralab/4D-FedGNN-Plus/assets/77898273/0012eb96-0310-475e-8fd7-5b3dbab45efe\">\r\n\r\n\r\n\r\n\r\nUse main.ipynb as your main file to see in detail the architecture and usage of the aforementioned models.\r\n\r \n"
      },
      "source": "https://raw.githubusercontent.com/basiralab/4D-FedGNN-Plus/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/basiralab/4D-FedGNN-Plus/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/basiralab/4D-FedGNN-Plus/main/main.ipynb"
      },
      "source": "https://raw.githubusercontent.com/basiralab/4D-FedGNN-Plus/main/main.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/basiralab/4D-FedGNN-Plus/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "basiralab/4D-FedGNN-Plus"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "4D-FED-GNN++"
      },
      "source": "https://raw.githubusercontent.com/basiralab/4D-FedGNN-Plus/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "http://raw.githubusercontent.com/basiralab/4D-FedGNN-Plus/main/main_figure.png"
      },
      "source": "https://raw.githubusercontent.com/basiralab/4D-FedGNN-Plus/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "http://raw.githubusercontent.com/basiralab/4D-FedGNN-Plus/main/outputs.png"
      },
      "source": "https://raw.githubusercontent.com/basiralab/4D-FedGNN-Plus/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/basiralab/4D-FedGNN-Plus/assets/77898273/0012eb96-0310-475e-8fd7-5b3dbab45efe"
      },
      "source": "https://raw.githubusercontent.com/basiralab/4D-FedGNN-Plus/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/basiralab/4D-FedGNN-Plus/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "4d-gnn, brain-connectivity, brain-networks, federated-learning, generative, generative-learning, gnn, graph-neural-networks, graph-synthesis, missing-data, network-neuroscience, temporal-data, timeseries-forecasting"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "4D-FedGNN-Plus"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "basiralab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 1629605,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 102930,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/basiralab/4D-FedGNN-Plus/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "installation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-04 11:43:01",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 8
      },
      "technique": "GitHub_API"
    }
  ]
}