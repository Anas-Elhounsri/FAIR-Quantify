{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Cite",
        "parent_header": [
          "RabbitFX: Efficient Framework for FASTA/Q File Parsing on Modern Multi-Core Platforms"
        ],
        "type": "Text_excerpt",
        "value": "Zhang H, Song H, Xu X, Chang Q, Wang M, Wei Y, Yin Z, Schmidt B, Liu W. RabbitFX: Efficient Framework for FASTA/Q File Parsing on Modern Multi-Core Platforms. IEEE/ACM Trans Comput Biol Bioinform. 2022 Nov 3;PP. doi: 10.1109/TCBB.2022.3219114. Epub ahead of print. PMID: 36327193.\n"
      },
      "source": "https://raw.githubusercontent.com/RabbitBio/RabbitFX/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/RabbitBio/RabbitFX"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-11-06T08:48:22Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-24T16:27:59Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9773230393579674,
      "result": {
        "original_header": "Highlight",
        "type": "Text_excerpt",
        "value": " + RabbitFX highly support multi-core paltform\n + RabbitFX efficiency processing FASTQ/FASTA files\n + Concurrency data pool and data queue.\n + Non-copy read format\n + Bit-based sequencing processing\n \n"
      },
      "source": "https://raw.githubusercontent.com/RabbitBio/RabbitFX/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8873876275967277,
      "result": {
        "original_header": "Document",
        "type": "Text_excerpt",
        "value": "Tutorial and reference documentation of RabbitFX are provided at [rabbitfx-doc.readthedocs.io](https://rabbitfx-doc.readthedocs.io/en/latest/index.html).\n \n"
      },
      "source": "https://raw.githubusercontent.com/RabbitBio/RabbitFX/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/RabbitBio/RabbitFX/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/RabbitBio/RabbitFX/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RabbitBio/RabbitFX"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RabbitFX: Efficient Framework for FASTA/Q File Parsing on Modern Multi-Core Platforms"
      },
      "source": "https://raw.githubusercontent.com/RabbitBio/RabbitFX/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Using Cmake",
        "parent_header": [
          "RabbitFX: Efficient Framework for FASTA/Q File Parsing on Modern Multi-Core Platforms",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Copy folder io to your program, and then\nyou can integrate RabbitFX in your `CMakeLists.txt`:\n```cmake\nAUX_SOURCE_DIRECTORY(. SOURCE_LIST)\nADD_LIBRARY(rabbitfx ${SOURCE_LIST})\nTARGET_LINK_LIBRARIES(rabbitfx z)\n```"
      },
      "source": "https://raw.githubusercontent.com/RabbitBio/RabbitFX/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Using build libray",
        "parent_header": [
          "RabbitFX: Efficient Framework for FASTA/Q File Parsing on Modern Multi-Core Platforms",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "```\nmkdir build\ncmake .. -DCMAKE_INSTALL_PREFIX=/your/install/path\nmake && make install\ng++ -std=c++11 YOURFILE.cpp -I/your/install/path/include -L/your/install/path/lib -lrabbitfx -lz -lpthread\n```\n"
      },
      "source": "https://raw.githubusercontent.com/RabbitBio/RabbitFX/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Build with libisal libray for processing gziped file faster",
        "parent_header": [
          "RabbitFX: Efficient Framework for FASTA/Q File Parsing on Modern Multi-Core Platforms",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "+ step1: install [ISA-L](https://github.com/intel/isa-l) \n+ step2: build RabbitFX\n```\nmkdir build\ncmake .. -DCMAKE_INSTALL_PREFIX=/your/install/path -DIGZIP_PREFIX=/path/to/libisal\nmake && make install\ng++ -std=c++11 YOURFILE.cpp -I/your/install/path/include -L/your/install/path/lib -lrabbitfx -lz -lpthread\n```\n"
      },
      "source": "https://raw.githubusercontent.com/RabbitBio/RabbitFX/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/RabbitBio/RabbitFX/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RabbitFX"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "RabbitBio"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 137684,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 2722,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RabbitBio/RabbitFX/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://rabbitfx-doc.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/RabbitBio/RabbitFX/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependency",
        "parent_header": [
          "RabbitFX: Efficient Framework for FASTA/Q File Parsing on Modern Multi-Core Platforms",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": " 1. c++11\n 2. [zlib](https://zlib.net/)\n 3. [ISA-L](https://github.com/intel/isa-l) (optional)\n\n"
      },
      "source": "https://raw.githubusercontent.com/RabbitBio/RabbitFX/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Runing Example in main.cpp and TestCount.cpp",
        "parent_header": [
          "RabbitFX: Efficient Framework for FASTA/Q File Parsing on Modern Multi-Core Platforms"
        ],
        "type": "Text_excerpt",
        "value": "``` bash\ncd RabbitFX\nmkdir build && cd build\ncmake ..\nmake\n#then there is an test file in build file\ntime ./test\ntime ./testcount\n```\n\n**Note:** We integrated [CLI](https://github.com/CLIUtils/CLI11) as default command line patser.\n"
      },
      "source": "https://raw.githubusercontent.com/RabbitBio/RabbitFX/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 11:30:34",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 9
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Case study",
        "parent_header": [
          "RabbitFX: Efficient Framework for FASTA/Q File Parsing on Modern Multi-Core Platforms"
        ],
        "type": "Text_excerpt",
        "value": "- [RabbitFX-Ktrim](https://github.com/RabbitBio/RabbitFX-Casestudy/tree/master/RabbitFX-Ktrim)\n- [RabbitFX-fastp](https://github.com/RabbitBio/RabbitFX-Casestudy/tree/master/RabbitFX-fastp)\n- [RabbitFX-Mash](https://github.com/RabbitBio/RabbitFX-Casestudy/tree/master/RabbitFX-Mash)\n\n"
      },
      "source": "https://raw.githubusercontent.com/RabbitBio/RabbitFX/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Illustration",
        "parent_header": [
          "RabbitFX: Efficient Framework for FASTA/Q File Parsing on Modern Multi-Core Platforms"
        ],
        "type": "Text_excerpt",
        "value": " ![Pipeline](pipeline.png)\n"
      },
      "source": "https://raw.githubusercontent.com/RabbitBio/RabbitFX/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Runing Example in main.cpp and TestCount.cpp",
        "parent_header": [
          "RabbitFX: Efficient Framework for FASTA/Q File Parsing on Modern Multi-Core Platforms"
        ],
        "type": "Text_excerpt",
        "value": "``` bash\ncd RabbitFX\nmkdir build && cd build\ncmake ..\nmake\n#then there is an test file in build file\ntime ./test\ntime ./testcount\n```\n\n**Note:** We integrated [CLI](https://github.com/CLIUtils/CLI11) as default command line patser.\n"
      },
      "source": "https://raw.githubusercontent.com/RabbitBio/RabbitFX/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Single-end data processing example",
        "parent_header": [
          "RabbitFX: Efficient Framework for FASTA/Q File Parsing on Modern Multi-Core Platforms",
          "FASTQ data example"
        ],
        "type": "Text_excerpt",
        "value": "1. Example of defining a mult-threading task:\n\n``` c++\nint test_fastq_se(int argc, char** argv){\n  std::string file = \"/home/old_home/haoz/workspace/QC/out_1.fq\";\n  //---------------cmd parser----------------\n  CLI::App app{\"Wellcome to RabbitFX\"};\n  CLI::Option* opt;\n  std::string filename ;\n  int th;\n  app.add_option(\"-f, --file\", filename, \"input file name\")\n    ->default_val(file);\n  app.add_option(\"-t, --threads\", th, \"worktreads\")\n    ->default_val(2);\n  //----------------------------------------\n  CLI11_PARSE(app, argc, argv);\n  if(app.count(\"-f\"))\n    std::cout << \"filename: \" << filename << std::endl;\n  else{\n    std::cout << \"-f not find, use default: \" << filename << std::endl;\n  }\n  rabbit::fq::FastqDataPool fastqPool(32, 1<<22);\n  rabbit::core::TDataQueue<rabbit::fq::FastqDataChunk> queue1(64, 1);\n  std::thread producer(producer_fastq_task, filename, std::ref(fastqPool), std::ref(queue1));\n  std::vector<thread> threads;\n  for(int t = 0; t < th; t++){\n\tthreads.emplace_back(std::thread(consumer_fastq_task, std::ref(fastqPool), std::ref(queue1)));\n  }\n  producer.join();\n  for(int t = 0; t < th; t++){\n    threads[t].join();\n  }\n  return 0;\n}\n```\n2. An example of defining producer and consumer tasks:\n``` c++\nint producer_fastq_task(std::string file, rabbit::fq::FastqDataPool& fastqPool, rabbit::core::TDataQueue<rabbit::fq::FastqDataChunk> &dq){\n  rabbit::fq::FastqFileReader *fqFileReader;\n  fqFileReader = new rabbit::fq::FastqFileReader(file, fastqPool);\n  rabbit::int64 n_chunks = 0;\n  while(true){\n    rabbit::fq::FastqDataChunk* fqdatachunk;\n    fqdatachunk = fqFileReader->readNextChunk();\n    if (fqdatachunk == NULL) break;\n    n_chunks++;\n    //std::cout << \"readed chunk: \" << n_chunks << std::endl;\n    dq.Push(n_chunks, fqdatachunk);\n  }\n  dq.SetCompleted();\n  std::cout << \"file \" << file << \" has \" << n_chunks << \" chunks\" << std::endl;\n  return 0;\n}\n\nvoid consumer_fastq_task(rabbit::fq::FastqDataPool& fastqPool, rabbit::core::TDataQueue<rabbit::fq::FastqDataChunk> &dq){\n    long line_sum = 0;\n    rabbit::int64 id = 0;\n    std::vector<neoReference> data;\n    rabbit::fq::FastqDataChunk* fqdatachunk;// = new rabbit::fq::FastqDataChunk;\n    data.resize(10000);\n    while(dq.Pop(id, fqdatachunk)){\n      line_sum += rabbit::fq::chunkFormat(fqdatachunk, data);\n      fastqPool.Release(fqdatachunk);\n    }\n    std::cout << \"line_sum: \" << line_sum << std::endl;\n}\n\n```\n"
      },
      "source": "https://raw.githubusercontent.com/RabbitBio/RabbitFX/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Paired-end data processing example",
        "parent_header": [
          "RabbitFX: Efficient Framework for FASTA/Q File Parsing on Modern Multi-Core Platforms",
          "FASTQ data example"
        ],
        "type": "Text_excerpt",
        "value": "An example of processing paired-end sequencing data is showed in file [TestCount.cpp](./TestCount.cpp).\nIt is tested that compared to [FQFeeder](https://github.com/rob-p/FQFeeder), in the task of counting ATCG of pair-end data, RabbitFX is 2 times faster in 20 thread.\n\nRabbitFX is about 2G/s I/O speed now\n"
      },
      "source": "https://raw.githubusercontent.com/RabbitBio/RabbitFX/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "FASTA data example",
        "parent_header": [
          "RabbitFX: Efficient Framework for FASTA/Q File Parsing on Modern Multi-Core Platforms"
        ],
        "type": "Text_excerpt",
        "value": "This is an example of reading and processing FASTA files:\n\n- example code of using only one thread (count chunk number of input file):\n``` c++\nint proces_fasta_task(std::string file) {\n  rabbit::fa::FastaDataPool fastaPool(256, 1 << 22);\n  rabbit::fa::FastaFileReader faFileReader(file, *fastaPool, false);\n  int n_chunks = 0;\n  int line_sum = 0;\n  while (true) {\n    rabbit::fa::FastaChunk *fachunk = faFileReader.readNextChunkList();\n    if (fachunk == NULL) break;\n    n_chunks++;\n    //-----relaease\n    rabbit::fa::FastaDataChunk *tmp = fachunk->chunk;\n    do {\n      fastaPool->Release(tmp);\n      tmp = tmp->next;\n    } while (tmp != NULL);\n    // line_sum += rabbit::fa::chunkFormat(*fachunk, data);\n  }\n  std::cout << \"file \" << file << \" has \" << line_sum << \" lines\" << std::endl;\n  return 0;\n}\n\nint test_fasta(int argc, char** argv){\n  producer_fasta_task(\"/home/old_home/haoz/workspace/data/hg19/hg19.fa\");\n  return 0;\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/RabbitBio/RabbitFX/master/README.md",
      "technique": "header_analysis"
    }
  ]
}