{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "type": "Text_excerpt",
        "value": "* Espinoza JL, Phillips A, Prentice MB, Tan GS, Kamath PL, Lloyd KG, Dupont CL. Unveiling the microbial realm with VEBA 2.0: a modular bioinformatics suite for end-to-end genome-resolved prokaryotic, (micro)eukaryotic and viral multi-omics from either short- or long-read sequencing. Nucleic Acids Res. 2024 Jun 22:gkae528. [doi: 10.1093/nar/gkae528](https://doi.org/10.1093/nar/gkae528). PMID: 38909293.\n* Espinoza JL, Dupont CL. VEBA: a modular end-to-end suite for in silico recovery, clustering, and analysis of prokaryotic, microeukaryotic, and viral genomes from metagenomes. BMC Bioinformatics. 2022 Oct 12;23(1):419. [doi: 10.1186/s12859-022-04973-8](https://doi.org/10.1186/s12859-022-04973-8). PMID: 36224545.\n\nIn addition to the above, please cite the software dependencies described under the [*Dependency Citation Table*](CITATIONS.md).\n\n<p align=\"right\"><a href=\"#readme-top\">^__^</a></p>\n\n___________________________________________________________________\n"
      },
      "source": "https://raw.githubusercontent.com/jolespin/veba/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jolespin/veba"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-04-20T08:10:10Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-01T21:42:18Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A modular end-to-end suite for in silico recovery, clustering, and analysis of prokaryotic, microeukaryotic, and viral genomes from metagenomes "
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9986071616848058,
      "result": {
        "original_header": "What is VEBA?",
        "type": "Text_excerpt",
        "value": "The *Viral Eukaryotic Bacterial Archaeal* (VEBA) open-source software suite was developed with characterizing all domains of microorganisms as the primary objective (not post hoc adjustments) including prokaryotic, eukaryotic, and viral organisms.  VEBA is an end-to-end metagenomics and bioprospecting software suite that can directly recover and analyze eukaryotic and viral genomes in addition to prokaryotic genomes with native support for candidate phyla radiation (CPR). VEBA implements a novel iterative binning procedure and an optional hybrid sample-specific/multi-sample framework that recovers more genomes than non-iterative methods.  To optimize the microeukaryotic gene calling and taxonomic classifications, VEBA includes a consensus microeukaryotic database containing protists and fungi compiled from several existing databases. VEBA also provides a unique clustering-based dereplication strategy allowing for sample-specific genomes and proteins to be directly compared across non-overlapping biological samples. VEBA also automates biosynthetic gene cluster identification and novelty scores for bioprospecting. \nVEBA's mission is to make robust (meta-)genomics/transcriptomics analysis effortless.  The philosophy of VEBA is that workflows should be modular, generalizable, and easy-to-use with minimal intermediate steps.  The approach implemented in VEBA is to (try and) think 2 steps ahead of what you may need to do and automate the task for you. \n"
      },
      "source": "https://raw.githubusercontent.com/jolespin/veba/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9205105757761343,
      "result": {
        "original_header": "Tell developers what you do and what you need",
        "type": "Text_excerpt",
        "value": "The objective of VEBA is to provide high-quality metagenomics and metatranscriptomics workflows to the community.  Understanding the user-base's needs will help me develop VEBA so it can make your research life easier.   \n"
      },
      "source": "https://raw.githubusercontent.com/jolespin/veba/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9275708679626936,
      "result": {
        "original_header": "Announcements",
        "type": "Text_excerpt",
        "value": "\tIf you are updating to \u2265v2.2.0 you will need to modify your existing database.  \n\tPlease see [FAQs](FAQ.md#how-can-i-update-the-database-from-veba-v210-veba-database-vdb_v6-to-veba-v230-veba-database-vdb_v8) for more details. \n\t<details>\n\t\t<summary>New features and updates:</summary> \n\t* **`VEBA` Modules:**\n\t\t* Expanded functionality, streamlined user-interface, and Docker containerization\n\t\t* Fast and memory-efficient genome- and protein-level clustering\n\t\t* Automatic calculation of feature compression ratios\n\t\t* Large/complex metagenomes and long-read technology support\n\t\t* Bioprospecting and natural product discovery support\n\t\t* Ribosomal RNA, transfer RNA, and organelle support\n\t\t* Genome-resolved taxonomic and pathway profiling\n\t\t* Identification and classification of mobile genetic elements\n\t\t* Native support for candidate phyla radiation quality assessment and memory- efficient genome classification\n\t\t* Standalone support for generalized multi-split binning\n\t\t* Automated phylogenomic functional category feature engineering support\n\t\t* Visualizations of hierarchical data and phylogenies\n\t\t* Added minimum alignment fraction threshold for genome clustering\n\t\t* Faster HMM protein annotations with PyHMMER\n\t\t* Replaced [MicrobeAnnotator-KEGG](https://zenodo.org/records/10020074) reimplementation with [KEGG Pathway Profiler](https://github.com/jolespin/kegg_pathway_profiler) \n"
      },
      "source": "https://raw.githubusercontent.com/jolespin/veba/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9408540054204451,
      "result": {
        "original_header": "Output structure",
        "type": "Text_excerpt",
        "value": "*VEBA*'s is built on the [*GenoPype*](https://github.com/jolespin/genopype) archituecture which creates a reproducible and easy-to-navigate directory structure.  *GenoPype*'s philosophy is to use the same names for all files but to have sample names as subdirectories.  This makes it easier to glob files for grepping, concatenating, etc. *NextFlow* support is in the works... \nFor *VEBA*, it has all the directories created by `GenoPype` above but is built for having multiple samples under the same project.  \n"
      },
      "source": "https://raw.githubusercontent.com/jolespin/veba/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jolespin/veba/tree/main/walkthroughs/docs"
      },
      "technique": "file_exploration"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jolespin/veba/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 8
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jolespin/veba/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "jolespin/veba"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/jolespin/veba/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jolespin/veba/main/install/docker/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/jolespin/veba/main/install/docker/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jolespin/veba/main/install/download_databases-markers.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jolespin/veba/main/install/download_databases-annotate.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jolespin/veba/main/install/install.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jolespin/veba/main/install/update_environment_scripts.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jolespin/veba/main/install/download_databases-contamination.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jolespin/veba/main/install/download_databases.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jolespin/veba/main/install/download_databases-classify.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jolespin/veba/main/install/update_environment_variables.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jolespin/veba/main/install/check_installation.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jolespin/veba/main/install/uninstall.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jolespin/veba/main/install/devel/cmd_databases.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jolespin/veba/main/install/devel/cmd_install.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jolespin/veba/main/install/docker/push_docker_images.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jolespin/veba/main/install/docker/containerize_environments.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jolespin/veba/main/install/docker/check_containers.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jolespin/veba/main/install/docker/build_docker_image.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jolespin/veba/main/bin/veba_versions.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jolespin/veba/main/images/graphical-abstract.png"
      },
      "source": "https://raw.githubusercontent.com/jolespin/veba/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9416272746507515,
      "result": {
        "original_header": "Announcements",
        "type": "Text_excerpt",
        "value": "* **Current Stable Version:** [`v2.3.0`](https://github.com/jolespin/veba/releases/tag/v2.3.0) \n* **Current Database Version:** [`VDB_v8`](install/DATABASE.md) \n\tIf you are updating to \u2265v2.2.0 you will need to modify your existing database.  \n\tPlease see [FAQs](FAQ.md#how-can-i-update-the-database-from-veba-v210-veba-database-vdb_v6-to-veba-v230-veba-database-vdb_v8) for more details. \n"
      },
      "source": "https://raw.githubusercontent.com/jolespin/veba/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999999059520563,
      "result": {
        "original_header": "Output structure",
        "type": "Text_excerpt",
        "value": "```\n# Project directory\nproject_directory/\n\n# Temporary directory\nproject_directory/tmp/\n\n# Log directory\nproject_directory/logs/\nproject_directory/logs/[step]__[program-name].e\nproject_directory/logs/[step]__[program-name].o\nproject_directory/logs/[step]__[program-name].returncode\n\n# Checkpoint directory\nproject_directory/checkpoints/\nproject_directory/checkpoints/\n\n# Intermediate directories for each step\nproject_directory/intermediate/\nproject_directory/intermediate/[step]__[program-name]/\n\n# Output directory\nproject_directory/output/\n\n# Commands\nproject_directory/commands.sh\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/jolespin/veba/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8926159830238597,
      "result": {
        "original_header": "Frequently Asked Questions",
        "type": "Text_excerpt",
        "value": "If perusing the [*Frequently Asked Questions*](FAQ.md) doesn't address your question, feel free to submit a [[`Question`]](https://github.com/jolespin/veba/issues/new)  \n"
      },
      "source": "https://raw.githubusercontent.com/jolespin/veba/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 1.0,
      "result": {
        "type": "Text_excerpt",
        "value": "[forks-shield]: https://img.shields.io/github/forks/jolespin/veba.svg?style=for-the-badge\n[forks-url]: https://github.com/jolespin/veba/members\n[stars-shield]: https://img.shields.io/github/stars/jolespin/veba.svg?style=for-the-badge\n[stars-url]: https://github.com/jolespin/veba/stargazers\n[issues-shield]: https://img.shields.io/github/issues/jolespin/veba.svg?style=for-the-badge\n[issues-url]: https://github.com/jolespin/veba/issues \n"
      },
      "source": "https://raw.githubusercontent.com/jolespin/veba/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8531091341588437,
      "result": {
        "original_header": "Output structure",
        "type": "Text_excerpt",
        "value": "Example of *VEBA*'s default directory layout:\n```\nID=\"sample_1\"\n\n# Main output directory\nveba_output/\n\n# Assembly directory\nveba_output/assembly\n\n# Assembly output for ${ID} sample\nveba_output/assembly/${ID}/output/\n\n# Prokaryotic binning for ${ID} sample\nveba_output/binning/prokaryotic/${ID}/output/ \n\n# Eukaryotic binning\nveba_output/binning/eukaryotic/${ID}/output/\n\n# Viral binning\nveba_output/binning/viral/${ID}/output/\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/jolespin/veba/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jolespin/veba/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bioinformatics, genomics, metagenomics, metatranscriptomics, microbial, microbiome"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "GNU Affero General Public License v3.0",
        "spdx_id": "AGPL-3.0",
        "type": "License",
        "url": "https://api.github.com/licenses/agpl-3.0",
        "value": "https://api.github.com/licenses/agpl-3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "                    GNU AFFERO GENERAL PUBLIC LICENSE\n                       Version 3, 19 November 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU Affero General Public License is a free, copyleft license for\nsoftware and other kinds of works, specifically designed to ensure\ncooperation with the community in the case of network server software.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nour General Public Licenses are intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  Developers that use our General Public Licenses protect your rights\nwith two steps: (1) assert copyright on the software, and (2) offer\nyou this License which gives you legal permission to copy, distribute\nand/or modify the software.\n\n  A secondary benefit of defending all users' freedom is that\nimprovements made in alternate versions of the program, if they\nreceive widespread use, become available for other developers to\nincorporate.  Many developers of free software are heartened and\nencouraged by the resulting cooperation.  However, in the case of\nsoftware used on network servers, this result may fail to come about.\nThe GNU General Public License permits making a modified version and\nletting the public access it on a server without ever releasing its\nsource code to the public.\n\n  The GNU Affero General Public License is designed specifically to\nensure that, in such cases, the modified source code becomes available\nto the community.  It requires the operator of a network server to\nprovide the source code of the modified version running there to the\nusers of that server.  Therefore, public use of a modified version, on\na publicly accessible server, gives the public access to the source\ncode of the modified version.\n\n  An older license, called the Affero General Public License and\npublished by Affero, was designed to accomplish similar goals.  This is\na different license, not a version of the Affero GPL, but Affero has\nreleased a new version of the Affero GPL which permits relicensing under\nthis license.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU Affero General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Remote Network Interaction; Use with the GNU General Public License.\n\n  Notwithstanding any other provision of this License, if you modify the\nProgram, your modified version must prominently offer all users\ninteracting with it remotely through a computer network (if your version\nsupports such interaction) an opportunity to receive the Corresponding\nSource of your version by providing access to the Corresponding Source\nfrom a network server at no charge, through some standard or customary\nmeans of facilitating copying of software.  This Corresponding Source\nshall include the Corresponding Source for any work covered by version 3\nof the GNU General Public License that is incorporated pursuant to the\nfollowing paragraph.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the work with which it is combined will remain governed by version\n3 of the GNU General Public License.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU Affero General Public License from time to time.  Such new versions\nwill be similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU Affero General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU Affero General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU Affero General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If your software can interact with users remotely through a computer\nnetwork, you should also make sure that it provides a way for users to\nget its source.  For example, if your program is a web application, its\ninterface could display a \"Source\" link that leads users to an archive\nof the code.  There are many ways you could offer source, and different\nsolutions will be better for different programs; see section 13 for the\nspecific requirements.\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU AGPL, see\n<http://www.gnu.org/licenses/>."
      },
      "source": "https://raw.githubusercontent.com/jolespin/veba/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "veba"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "jolespin"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 1779808,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 49326,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Rich Text Format",
        "size": 2391,
        "type": "Programming_language",
        "value": "Rich Text Format"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 1627,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 1461,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jolespin/veba/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jolespin",
          "type": "User"
        },
        "date_created": "2024-09-22T06:40:18Z",
        "date_published": "2024-09-22T16:52:17Z",
        "description": "* [2024.9.21] - Added `KEGG Pathway Profiler` to `VEBA-database_env` and `VEBA-annotate_env` which replaces `MicrobeAnnotator-KEGG` for module completion ratios.  Replacing `${VEBA_DATABASE}/Annotate/MicrobeAnnotator-KEGG` with `${VEBA_DATABASE}/Annotate/KEGG-Pathway-Profiler/` database files.  **Note: New module completion ratio output does not have classes labels for KEGG modules.**\r\n* [2024.8.30] - Added ${N_JOBS} to download scripts with default set to maximum threads available",
        "html_url": "https://github.com/jolespin/veba/releases/tag/v2.3.0",
        "name": "VEBA_v2.3.0",
        "release_id": 176286092,
        "tag": "v2.3.0",
        "tarball_url": "https://api.github.com/repos/jolespin/veba/tarball/v2.3.0",
        "type": "Release",
        "url": "https://api.github.com/repos/jolespin/veba/releases/176286092",
        "value": "https://api.github.com/repos/jolespin/veba/releases/176286092",
        "zipball_url": "https://api.github.com/repos/jolespin/veba/zipball/v2.3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jolespin",
          "type": "User"
        },
        "date_created": "2024-08-30T00:35:59Z",
        "date_published": "2024-08-30T00:38:45Z",
        "description": "* [2024.8.29] - Added `VERSION` file created in `download_databases.sh`\r\n* [2024.7.11] - Alignment fraction threshold for genome clustering only applied to reference but should also apply to query.  Added `--af_mode` with either `relaxed = max([Alignment_fraction_ref, Alignment_fraction_query]) > minimum_af` or `strict = (Alignment_fraction_ref > minimum_af) & (Alignment_fraction_query > minimum_af)` to `edgelist_to_clusters.py`, `global_clustering.py`, `local_clustering.py`, and `cluster.py`.\r\n* [2024.7.3] - Added `pigz` to `VEBA-annotate_env` which isn't a problem with most `conda` installations but needed for `docker` containers.\r\n* [2024.6.21] - Changed `choose_fastest_mirror.py` to `determine_fastest_mirror.py`\r\n* [2024.6.20] - Added `-m/--include_mrna` to `compile_metaeuk_identifiers.py` for [Issue #110](https://github.com/jolespin/veba/issues/110)",
        "html_url": "https://github.com/jolespin/veba/releases/tag/v2.2.1",
        "name": "VEBA_v2.2.1",
        "release_id": 172671282,
        "tag": "v2.2.1",
        "tarball_url": "https://api.github.com/repos/jolespin/veba/tarball/v2.2.1",
        "type": "Release",
        "url": "https://api.github.com/repos/jolespin/veba/releases/172671282",
        "value": "https://api.github.com/repos/jolespin/veba/releases/172671282",
        "zipball_url": "https://api.github.com/repos/jolespin/veba/zipball/v2.2.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jolespin",
          "type": "User"
        },
        "date_created": "2024-05-22T20:46:26Z",
        "date_published": "2024-06-10T01:16:47Z",
        "description": "**Disclaimer:** \r\nI made some large updates in this version and I believe everything has been adequately tested but just in case anything has slipped between the cracks you can use v2.1.0 which has been thoroughly tested in accordance to the NAR Espinoza 2024 paper.  Benefits of using this version include much faster and robust prokaryotic classifications and fast/scalable HMM-based annotation modeling.\r\n\r\n**Large performance updates for this version including:** \r\n* Updating GTDB-Tk 2.3.0 -> 2.4.0 which means the GTDB needed to be updated from r214.1 -> r220\r\n* VEBA-classify_env was split up into VEBA-classify-eukaryotic_env, VEBA-classify-prokaryotic_env, and VEBA-prokaryotic_env\r\n* annotate.py, classify-eukaryotic.py, and phylogeny.py were rewritten (and their utility scripts) were updated to used PyHMMER ([pyhmmsearch](https://github.com/jolespin/pyhmmsearch) and [pykofamsearch](https://github.com/jolespin/pykofamsearch)) which is faster than HMMSearch when multithreaded. \r\n* KOFAM was changed to KOfam\r\n\r\nNOTE:  Please don't use the tar.gz as it contains the 2.1.0 version for some reason: \r\n\r\n```\r\nVERSION=\"2.2.0\"\r\n# wget https://github.com/jolespin/veba/archive/refs/tags/v${VERSION}.tar.gz # The .tar.gz is out of date in this release\r\n# tar -xvf v${VERSION}.tar.gz && mv veba-${VERSION} veba\r\n\r\n# Alternative download\r\nwget https://github.com/jolespin/veba/releases/download/v${VERSION}/v${VERSION}.zip\r\nunzip -d veba v${VERSION}.zip\r\n```",
        "html_url": "https://github.com/jolespin/veba/releases/tag/v2.2.0",
        "name": "VEBA_v2.2.0",
        "release_id": 159582495,
        "tag": "v2.2.0",
        "tarball_url": "https://api.github.com/repos/jolespin/veba/tarball/v2.2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/jolespin/veba/releases/159582495",
        "value": "https://api.github.com/repos/jolespin/veba/releases/159582495",
        "zipball_url": "https://api.github.com/repos/jolespin/veba/zipball/v2.2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jolespin",
          "type": "User"
        },
        "date_created": "2024-05-22T20:46:26Z",
        "date_published": "2024-06-03T18:46:16Z",
        "description": "This is the exact same version as VEBA_v2.1.0.  New VEBA releases will now automatically be synced to Zenodo. ",
        "html_url": "https://github.com/jolespin/veba/releases/tag/v2.1.0-zen",
        "name": "VEBA_v2.1.0-zen",
        "release_id": 158668274,
        "tag": "v2.1.0-zen",
        "tarball_url": "https://api.github.com/repos/jolespin/veba/tarball/v2.1.0-zen",
        "type": "Release",
        "url": "https://api.github.com/repos/jolespin/veba/releases/158668274",
        "value": "https://api.github.com/repos/jolespin/veba/releases/158668274",
        "zipball_url": "https://api.github.com/repos/jolespin/veba/zipball/v2.1.0-zen"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jolespin",
          "type": "User"
        },
        "date_created": "2024-05-17T14:08:12Z",
        "date_published": "2024-05-17T14:13:04Z",
        "description": "Official release of VEBA v2.1.0 with updates to address peer reviewers.  Mostly documentation but also including the following: \r\n\r\n* [2024.4.30] - Added `concatenate_files.py` which can concatenate files (and mixed compressed/decompressed files) using either arguments, list file, or glob.  Reason for this is that unix has a limit of arguments that can be used (e.g., `cat *.fasta > output.fasta` where *.fasta results in 50k files will crash)\r\n* [2024.4.29] - Added `/volumes/workspace/` directory to Docker containers for situations when your input and output directories are the same. \r\n* [2024.4.29] - `featureCounts` can only handle 64 threads at a time so added `min(64, opts.n_jobs)` for all the modules/scripts that use `featureCounts` commands.\r\n* [2024.4.23] - Added `uniprot_to_enzymes.py` which reformats tables and fasta from https://www.uniprot.org/uniprotkb?query=ec%3A* \r\n* [2024.4.18] - Developed a faster CLI implementation of `KofamScan` called [`PyKofamSearch`](https://github.com/jolespin/pykofamsearch) which leverage `PyHmmer`.  This will be used in future versions of VEBA.\r\n* [2024.4.18] - Developed a faster CLI implementation of `HMMSearch` called [`PyHMMSearch`](https://github.com/jolespin/pyhmmsearch) which leverage `PyHmmer`.  This will be used in future versions of VEBA.\r\n* [2024.3.26] - Added `--metaeuk_split_memory_limit` to `metaeuk_wrapper.py`.\r\n* [2024.3.26] - Added `-d/--genome_identifier_directory_index` to `scaffolds_to_bins.py` for directories that are structured `path/to/genomes/bin_a/reference.fasta` where you would use `-d -2`.\r\n* [2024.3.26] - Added `--minimum_af` to `edgelist_to_clusters.py` with an option to accept 4 column inputs `[id_1]<tab>[id_2]<tab>[weight]<tab>[alignment_fraction]`.  `global_clustering.py`, `local_clustering.py`, and `cluster.py` now use this by default `--af_threshold 30.0`.  If you want to retain previous behavior, just use `--af_threshold 0.0`.\r\n* [2024.3.18] - `edgelist_to_clusters.py` only includes edges where both nodes are in identifiers set.  If `--identifiers` are provided, then only those identifiers are used.  If not, then it includes all nodes.\r\n* [2024.3.18] - Added `--export_representatives` argument for `edgelist_to_clusters.py` to output table with `[id_node]<tab>[id_cluster]<tab>[intra-cluster_connectivity]<tab>[representative]`.  Also includes this information in `nx.Graph` objects.\r\n* [2024.3.18] - Changed singleton weight to `np.nan` instead of `np.inf` for `edgelist_to_clusters.py` to allow for representative calculations. \r\n* YouTube channel (https://www.youtube.com/@VEBA-Multiomics)",
        "html_url": "https://github.com/jolespin/veba/releases/tag/v2.1.0",
        "name": "VEBA_v2.1.0",
        "release_id": 156279249,
        "tag": "v2.1.0",
        "tarball_url": "https://api.github.com/repos/jolespin/veba/tarball/v2.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/jolespin/veba/releases/156279249",
        "value": "https://api.github.com/repos/jolespin/veba/releases/156279249",
        "zipball_url": "https://api.github.com/repos/jolespin/veba/zipball/v2.1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jolespin",
          "type": "User"
        },
        "date_created": "2024-03-11T16:41:14Z",
        "date_published": "2024-05-08T21:11:06Z",
        "description": "Beta release of VEBA v2.1.0b with updates to address peer reviewers.  Mostly documentation but also including the following: \r\n\r\n* [2024.4.30] - Added `concatenate_files.py` which can concatenate files (and mixed compressed/decompressed files) using either arguments, list file, or glob.  Reason for this is that unix has a limit of arguments that can be used (e.g., `cat *.fasta > output.fasta` where *.fasta results in 50k files will crash)\r\n* [2024.4.29] - Added `/volumes/workspace/` directory to Docker containers for situations when your input and output directories are the same. \r\n* [2024.4.29] - `featureCounts` can only handle 64 threads at a time so added `min(64, opts.n_jobs)` for all the modules/scripts that use `featureCounts` commands.\r\n* [2024.4.23] - Added `uniprot_to_enzymes.py` which reformats tables and fasta from https://www.uniprot.org/uniprotkb?query=ec%3A* \r\n* [2024.4.18] - Developed a faster implementation of `KofamScan` called [`PyKofamSearch`](https://github.com/jolespin/pykofamsearch) which leverage `PyHmmer`.  This will be used in future versions of VEBA.\r\n* [2024.3.26] - Added `--metaeuk_split_memory_limit` to `metaeuk_wrapper.py`.\r\n* [2024.3.26] - Added `-d/--genome_identifier_directory_index` to `scaffolds_to_bins.py` for directories that are structured `path/to/genomes/bin_a/reference.fasta` where you would use `-d -2`.\r\n* [2024.3.26] - Added `--minimum_af` to `edgelist_to_clusters.py` with an option to accept 4 column inputs `[id_1]<tab>[id_2]<tab>[weight]<tab>[alignment_fraction]`.  `global_clustering.py`, `local_clustering.py`, and `cluster.py` now use this by default `--af_threshold 30.0`.  If you want to retain previous behavior, just use `--af_threshold 0.0`.\r\n* [2024.3.18] - `edgelist_to_clusters.py` only includes edges where both nodes are in identifiers set.  If `--identifiers` are provided, then only those identifiers are used.  If not, then it includes all nodes.\r\n* [2024.3.18] - Added `--export_representatives` argument for `edgelist_to_clusters.py` to output table with `[id_node]<tab>[id_cluster]<tab>[intra-cluster_connectivity]<tab>[representative]`.  Also includes this information in `nx.Graph` objects.\r\n* [2024.3.18] - Changed singleton weight to `np.nan` instead of `np.inf` for `edgelist_to_clusters.py` to allow for representative calculations. \r\n* ",
        "html_url": "https://github.com/jolespin/veba/releases/tag/v2.1.0b",
        "name": "VEBA_v2.1.0b (pre-release)",
        "release_id": 154848511,
        "tag": "v2.1.0b",
        "tarball_url": "https://api.github.com/repos/jolespin/veba/tarball/v2.1.0b",
        "type": "Release",
        "url": "https://api.github.com/repos/jolespin/veba/releases/154848511",
        "value": "https://api.github.com/repos/jolespin/veba/releases/154848511",
        "zipball_url": "https://api.github.com/repos/jolespin/veba/zipball/v2.1.0b"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jolespin",
          "type": "User"
        },
        "date_created": "2024-03-10T20:11:18Z",
        "date_published": "2024-03-10T20:12:45Z",
        "description": "* Changed default assembly algorithm to `metaflye` instead of `flye` in `assembly-long.py`\r\n* Added `number_of_genomes`, `number_of_genome-clusters`, `number_of_proteins`, and `number_of_protein-clusters` to `feature_compression_ratios.tsv.gz` from `cluster.py`\r\n* Added `-A/--from_antismash` in `biosynthetic.py` to use preexisting `antiSMASH` results.  Also changed `-i/--input` to `-i/--from_genomes`.\r\n* Changed `antimash_genbanks_to_table.py` to `biosynthetic_genbanks_to_table.py` for future support of `DeepBGC` and `GECCO`\r\n* Added `busco_version` parameter to `merge_busco_json.py` with default set to `5.4.x` and additional support for `5.6.x`.\r\n* Added `CONDA_ENVS_PATH` to `update_environment_scripts.sh`, `update_environment_variables.sh`, and `check_installation.sh`\r\n* Added `CONDA_ENVS_PATH` to `veba` to allow for custom environment locations\r\n* Changed `install.sh` to support custom `CONDA_ENVS_PATH` argument `bash install.sh path/to/log path/to/envs/`\r\n*  Added `merge_counts_with_taxonomy.py`",
        "html_url": "https://github.com/jolespin/veba/releases/tag/v2.0.0",
        "name": "VEBA_v2.0.0",
        "release_id": 145738314,
        "tag": "v2.0.0",
        "tarball_url": "https://api.github.com/repos/jolespin/veba/tarball/v2.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/jolespin/veba/releases/145738314",
        "value": "https://api.github.com/repos/jolespin/veba/releases/145738314",
        "zipball_url": "https://api.github.com/repos/jolespin/veba/zipball/v2.0.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jolespin",
          "type": "User"
        },
        "date_created": "2023-12-28T23:28:37Z",
        "date_published": "2024-01-30T21:46:30Z",
        "description": "**Warning:** \r\nFor this release, use the `https://github.com/jolespin/veba/releases/download/v1.5.0/v1.5.0.zip` asset not the \"Source code\" assets as those are out of date. \r\n\r\n**Release v1.5.0 Highlights:**\r\n\r\n* Added `VeryFastTree` to `phylogeny.py`\r\n* Added `--blacklist` to `compile_eukaryotic_classifications.py`\r\n* Added compatibility for `antismash_genbanks_to_table.py` to operate on `antiSMASH v7` genbanks\r\n* Added `compile_phylogenomic_functional_categories.py` script which automates the methodology from [Espinoza et al. 2022 (doi:10.1093/pnasnexus/pgac239)](https://academic.oup.com/pnasnexus/article/1/5/pgac239/6762943)\r\n* Fixed error in `annotations.protein_clusters.tsv` formatting from `annotate.py`\r\n* Fixed situation where `unbinned.fasta` were not added in `binning-prokaryotic.py` and bad symlinks were created for GFF, rRNA, and tRNA when no genoems were detected.\r\n* Fixed critical error where `classify_eukaryotic.py` was trying to access a deprecated database file from MicroEuk_v2.\r\n\r\n<details>\r\n\t<summary><b>Release v1.5.0 Details</b></summary>\r\n\r\n* Cleaned up installation files\r\n* Changed `veba/src/` to `veba/bin/`\r\n* Checked `SCRIPT_VERSIONS` to `VEBA_SCRIPT_VERSIONS` which are now in `bin/` of conda environment\r\n* Fixed header being offset in `annotations.protein_clusters.tsv` where it could not be read with Pandas.\r\n* Fixed `binning-prokaryotic.py` the creation of non-existing symlinks where \"'*.gff'\", \"'*.rRNA'\", and \"'*.tRNA'\" were created.\r\n* Fixed .strip method on Pandas series in `antismash_genbanks_to_table.py` for compatibilty with `antiSMASH 6 and 7`\r\n* Fixed situation where `unbinned.fasta` is empty in `binning-prokaryotic.py` when there are no bins that pass qc.\r\n* Fixed minor error in `coverage.py` where `samtools sort --reference` was getting `reads_table.tsv` and not `reference.fasta`\r\n* Changed default behavior from deterministic to not deterministic for increase in speed in `assembly-long.py`. (i.e., `--no_deterministic` --> `--deterministic`)\r\n* Added `VeryFastTree` as an option to `phylogeny.py` with `FastTree` remaining as the default.\r\n* Changed default `--leniency` parameter on `classify_eukaryotic.py` and `consensus_genome_classification_ranked.py` to `1.0` and added `--leniecy_genome_classification` as a separate option.\r\n* Added `--blacklist` option to `compile_eukaryotic_classifications.py` with a default value of `species:uncultured eukaryote` in `classify_eukaryotic.py`\r\n* Fixed critical error where `classify_eukaryotic.py` was trying to access a deprecated database file from MicrEuk_v2.\r\n* Fixed minor error with `eukaryotic_gene_modeling_wrapper.py` not allowing for `Tiara` to run in backend.\r\n* Added `compile_phylogenomic_functional_categories.py` script which automates the methodology from [Espinoza et al. 2022 (doi:10.1093/pnasnexus/pgac239)](https://academic.oup.com/pnasnexus/article/1/5/pgac239/6762943)\r\n\r\n</details>\r\n",
        "html_url": "https://github.com/jolespin/veba/releases/tag/v1.5.0",
        "name": "VEBA_v1.5.0",
        "release_id": 139211131,
        "tag": "v1.5.0",
        "tarball_url": "https://api.github.com/repos/jolespin/veba/tarball/v1.5.0",
        "type": "Release",
        "url": "https://api.github.com/repos/jolespin/veba/releases/139211131",
        "value": "https://api.github.com/repos/jolespin/veba/releases/139211131",
        "zipball_url": "https://api.github.com/repos/jolespin/veba/zipball/v1.5.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jolespin",
          "type": "User"
        },
        "date_created": "2023-12-19T23:28:35Z",
        "date_published": "2023-12-22T03:41:47Z",
        "description": "* [2023.12.21] - `GTDB-Tk` changed name of archaea summary file so VEBA was not adding this to final classification. Fixed this in `classify-prokaryotic.py`.\r\n* [2023.12.20] - Fixed files not being closed in `compile_custom_humann_database_from_annotations.py` and added options to use different annotation file formats (i.e., multilevel, header, and no header).",
        "html_url": "https://github.com/jolespin/veba/releases/tag/v1.4.2",
        "name": "VEBA_v1.4.2",
        "release_id": 134858563,
        "tag": "v1.4.2",
        "tarball_url": "https://api.github.com/repos/jolespin/veba/tarball/v1.4.2",
        "type": "Release",
        "url": "https://api.github.com/repos/jolespin/veba/releases/134858563",
        "value": "https://api.github.com/repos/jolespin/veba/releases/134858563",
        "zipball_url": "https://api.github.com/repos/jolespin/veba/zipball/v1.4.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jolespin",
          "type": "User"
        },
        "date_created": "2023-12-19T22:54:09Z",
        "date_published": "2023-12-19T23:22:04Z",
        "description": "**Release v1.4.1 Highlights:**\r\n\r\n* **`VEBA` Modules:**\r\n\r\n\t* Added `profile-taxonomic.py` module which uses `sylph` to build a sketch database for genomes and queries the genome database for taxonomic abundance.\r\n\t* Added long read support for `fastq_preprocessor`, `preprocess.py`, `assembly-long.py`, `coverage-long`, and all binning modules.\r\n\t* Redesign `binning-eukaryotic` module to handle custom `MetaEuk` databases\r\n\t* Added new usage syntax `veba --module preprocess --params \u201c${PARAMS}\u201d` where the Conda environment is abstracted and determined automatically in the backend.  Changed all the walkthroughs to reflect this change.\r\n\t* Added `skani` which is the new default for genome-level clustering based on ANI.\r\n\t* Added `Diamond DeepClust` as an alternative to `MMSEQS2` for protein clustering.\r\n\r\n* **`VEBA` Database (`VDB_v6`)**:\r\n\r\n\t* Completely rebuilt `VEBA's Microeukaryotic Protein Database` to produce a clustered database `MicroEuk100/90/50` similar to `UniRef100/90/50`. Available on [doi:10.5281/zenodo.10139450](https://zenodo.org/records/10139451).\r\n\r\n\t* **Number of sequences:**\r\n\r\n\t\t * MicroEuk100 = 79,920,431 (19 GB)\r\n\t\t * MicroEuk90  = 51,767,730 (13 GB)\r\n\t\t * MicroEuk50  = 29,898,853 (6.5 GB)\r\n\r\n \r\n\r\n\t* **Number of source organisms per dataset:**\r\n\r\n\t\t* MycoCosm = 2503\r\n\t\t* PhycoCosm = 174\r\n\t\t* EnsemblProtists = 233\r\n\t\t* MMETSP = 759\r\n\t\t* TARA_SAGv1 = 8\r\n\t\t* EukProt = 366\r\n\t\t* EukZoo = 27\r\n\t\t* TARA_SMAGv1 = 389\r\n\t\t* NR_Protists-Fungi = 48217\r\n\r\n<details>\r\n\t<summary>**Release v1.4.0 Details**</summary>\r\n* [2023.12.15] - Added `profile-taxonomic.py` module which uses `sylph` to build a sketch database for genomes and queries the genome database similar to `Kraken` for taxonomic abundance.\r\n* [2023.12.14] - Removed requirement to have `--estimated_assembly_size` for Flye per [Flye Issue #652](https://github.com/fenderglass/Flye/issues/652).\r\n* [2023.12.14] - Added `sylph` to `VEBA-profile_env` for abundance profiling of genomes.\r\n* [2023.12.13] - Dereplicate duplicate contigs in `concatenate_fasta.py`.\r\n* [2023.12.12] - Added `--reference_gzipped` to `index.py` and `mapping.py` with new default being that the reference fasta is not gzipped.\r\n* [2023.12.11] - Added `skani` as new default for genome clustering in `cluster.py`, `global_clustering.py`, and `local_clustering.py`.\r\n* [2023.12.11] - Added support for long reads in `fastq_preprocessor`, `preprocess.py`, `assembly-long.py`, `coverage-long`, and all binning modules.\r\n* [2023.11.28] - Fixed `annotations.protein_clusters.tsv.gz` from `merge_annotations.py` added in patch update of `v1.3.1`.\r\n* [2023.11.14] - Added support for missing values in `compile_eukaryotic_classifications.py`.\r\n* [2023.11.13] - Added `--metaeuk_split_memory_limit` argument with (experimental) default set to `36G` in `binning-eukaryotic.py` and `eukaryotic_gene_modeling.py`.\r\n* [2023.11.10] - Added `--compressed 1` to `mmseqs createdb` in `download_databases.sh` installation script.\r\n* [2023.11.10] - Added a check to `check_fasta_duplicates.py` and `clean_fasta.py` to make sure there are no `>` characters in fasta sequence caused from concatenating fasta files that are missing linebreaks.\r\n* [2023.11.10] - Added `Diamond DeepClust` to `clustering_wrapper.py`, `global/local_clustering.py`, and `cluster.py`.  Changed `mmseqs2_wrapper.py` to `clustering_wrapper.py`.  Changed `easy-cluster` and `easy-linclust` to `mmseqs-cluster` and `mmseqs-linclust`.\r\n* [2023.11.9] - Fixed viral quality in `merge_genome_quality_assessments.py`\r\n* [2023.11.3] - Changed `consensus_genome_classification.py` to `consensus_genome_classification_ranked.py`.  Also, default behavior to allow for missing taxonomic levels.\r\n* [2023.11.2] - Fixed the `merge_annotations.py` resulting in a memory leak when creating the `annotations.protein_clusters.tsv.gz` output table.  However, still need to correct the formatting for empty sets and string lists.\r\n\r\n</details>\r\n",
        "html_url": "https://github.com/jolespin/veba/releases/tag/v1.4.1",
        "name": "VEBA_v1.4.1",
        "release_id": 134549894,
        "tag": "v1.4.1",
        "tarball_url": "https://api.github.com/repos/jolespin/veba/tarball/v1.4.1",
        "type": "Release",
        "url": "https://api.github.com/repos/jolespin/veba/releases/134549894",
        "value": "https://api.github.com/repos/jolespin/veba/releases/134549894",
        "zipball_url": "https://api.github.com/repos/jolespin/veba/zipball/v1.4.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jolespin",
          "type": "User"
        },
        "date_created": "2023-10-27T21:12:30Z",
        "date_published": "2023-10-27T21:13:37Z",
        "description": "**Release v1.3.0:**\r\n\r\n* **`VEBA` Modules:**\r\n\t* Added `profile-pathway.py` module and associated scripts for building `HUMAnN` databases from *de novo* genomes and annotations.  Essentially, a reads-based functional profiling method via `HUMAnN` using binned genomes as the database.\r\n\t* Added `marker_gene_clustering.py` script which identifies core marker proteins that are present in all genomes within a genome cluster (i.e., pangenome) and unique to only that genome cluster.  Clusters in either protein or nucleotide space.\r\n\t* Added `module_completion_ratios.py` script which calculates KEGG module completion ratios for genomes and pangenomes. Automatically run in backend of `annotate.py`.\r\n\t* Updated `annotate.py` and `merge_annotations.py` to provide better annotations for clustered proteins.\r\n\t* Added `merge_genome_quality.py` and `merge_taxonomy_classifications.py` which compiles genome quality and taxonomy, respectively, for all organisms.\r\n\t* Added BGC clustering in protein and nucleotide space to `biosynthetic.py`.  Also, produces prevalence tables that can be used for further clustering of BGCs.\r\n\t* Added `pangenome_core_sequences` in `cluster.py` writes both protein and CDS sequences for each genome cluster.\r\n\t* Added PDF visualization of newick trees in `phylogeny.py`.\r\n\r\n\t\r\n* **`VEBA` Database (`VDB_v5.2`)**:\r\n\t* Added `CAZy`\r\n\t* Added `MicrobeAnnotator-KEGG`\r\n\r\n<details>\r\n\t<summary>**Release v1.3.0 Details**</summary>\r\n\t\r\n* Update `annotate.py` and `merge_annotations.py` to handle `CAZy`.  They also properly address clustered protein annotations now. \r\n* Added `module_completion_ratio.py` script which is a fork of `MicrobeAnnotator` [`ko_mapper.py`](https://github.com/cruizperez/MicrobeAnnotator/blob/master/microbeannotator/pipeline/ko_mapper.py).  Also included a database [Zenodo: 10020074](https://zenodo.org/records/10020074) which will be included in `VDB_v5.2`\r\n* Added a checkpoint for `tRNAscan-SE` in `binning-prokaryotic.py` and `eukaryotic_gene_modeling_wrapper.py`.\r\n* Added `profile-pathway.py` module and `VEBA-profile_env` environments which is a wrapper around `HUMAnN` for the custom database created from `annotate.py` and `compile_custom_humann_database_from_annotations.py`\r\n* Added `GenoPype version` to log output\r\n* Added `merge_genome_quality.py` which combines `CheckV`, `CheckM2`, and `BUSCO` results.\r\n* Added `compile_custom_humann_database_from_annotations.py` which compiles a `HUMAnN` protein database table from the output of `annotate.py` and taxonomy classifications.\r\n* Added functionality to `merge_taxonomy_classifications.py` to allow for `--no_domain` and `--no_header` which will serve as input to `compile_custom_humann_database_from_annotations.py`\r\n* Added `marker_gene_clustering.py` script which gets core marker genes unique to each SLC (i.e., pangenome). `average_number_of_copies_per_genome` to protein clusters.\r\n* Added `--minimum_core_prevalence` in `global_clustering.py`, `local_clustering.py`, and `cluster.py` which indicates prevalence ratio of protein clusters in a SLC will be considered core.  Also remove `--no_singletons` from `cluster.py` to avoid complications with marker genes.  Relabeled `--input` to `--genomes_table` in clustering scripts/module.\r\n* Added a check in `coverage.py` to see if the `mapped.sorted.bam` files are created, if they are then skip them.  Not yet implemented for GNU parallel option.\r\n* Changed default representative sequence format from table to fasta for `mmseqs2_wrapper.py`.\r\n* Added `--nucleotide_fasta_output` to `antismash_genbank_to_table.py` which outputs the actual BGC DNA sequence. Changed `--fasta_output` to `--protein_fasta_output` and added output to `biosynthetic.py`. Changed BGC component identifiers to `[bgc_id]_[position_in_bgc]|[start]:[end]([strand])` to match with `MetaEuk` identifiers. Changed `bgc_type` to `protocluster_type`.  `biosynthetic.py` now supports GFF files from `MetaEuk` (exon and gene features not supported by `antiSMASH`).  Fixed error related to `antiSMASH` adding CDS (i.e., `allorf_[start]_[end]`) that are not in GFF so `antismash_genbank_to_table.py` failed in those cases. \r\n* Added `ete3` to `VEBA-phylogeny_env.yml` and automatically renders trees to PDF.\r\n* Added presets for `MEGAHIT` using the `--megahit_preset` option. \r\n* The change for using `--mash_db` with `GTDB-Tk` violated the assumption that all prokaryotic classifications had a `msa_percent` field which caused the cluster-level taxonomy to fail.  `compile_prokaryotic_genome_cluster_classification_scores_table.py` fixes this by uses `fastani_ani` as the weight when genomes were classified using ANI and `msa_percent` for everything else.  Initial error caused unclassified prokaryotic for all cluster-level classifications.\r\n* Fixed small error where empty gff files with an asterisk in the name were created for samples that didn't have any prokaryotic MAGs.\r\n* Fixed critical error where descriptions in header were not being removed in `eukaryota.scaffolds.list` and did not remove eukaryotic scaffolds in `seqkit grep` so `DAS_Tool` output eukaryotic MAGs in `identifier_mapping.tsv` and `__DASTool_scaffolds2bin.no_eukaryota.txt`\r\n* Fixed `krona.html` in `biosynthetic.py` which was being created incorrectly from `compile_krona.py` script.\r\n* Create `pangenome_core_sequences` in `global_clustering.py` and `local_clustering.py` which writes both protein and CDS sequences for each SLC.  Also made default in `cluster.py` to NOT do local clustering switching `--no_local_clustering` to `--local_clustering`.\r\n* `pandas.errors.InvalidIndexError: Reindexing only valid with uniquely valued Index objects` in `biosynthetic.py` when `Diamond` finds multiple regions in one hit that matches.  Added `--sort_by` and `--ascending` to `concatenate_dataframes.py` along with automatic detection and removal of duplicate indices.  Also added `--sort_by bitscore` in `biosynthetic.py`.\r\n* Added core pangenome and singleton hits to clustering output\r\n* Updated `--megahit_memory` default from 0.9 to 0.99\r\n* Fixed error in `genomad_taxonomy_wrapper.py` where `viral_taxonomy.tsv` should have been `taxonomy.tsv`.\r\n* Fixed minor error in `assembly.py` that was preventing users from using `SPAdes` programs that were not `spades.py`, `metaspades.py`, or `rnaspades.py` that was the result of using an incorrect string formatting.\r\n* Updated `bowtie2` in preprocess, assembly, and mapping modules.  Updated `fastp` and `fastq_preprocessor` in preprocess module.\r\n\r\n</details>\r\n",
        "html_url": "https://github.com/jolespin/veba/releases/tag/v1.3.0",
        "name": "VEBA_v1.3.0",
        "release_id": 127016035,
        "tag": "v1.3.0",
        "tarball_url": "https://api.github.com/repos/jolespin/veba/tarball/v1.3.0",
        "type": "Release",
        "url": "https://api.github.com/repos/jolespin/veba/releases/127016035",
        "value": "https://api.github.com/repos/jolespin/veba/releases/127016035",
        "zipball_url": "https://api.github.com/repos/jolespin/veba/zipball/v1.3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jolespin",
          "type": "User"
        },
        "date_created": "2023-07-12T00:21:51Z",
        "date_published": "2023-07-12T00:22:32Z",
        "description": "**Release v1.2.0:**\r\n\r\n* Fixed minor error in `binning-prokaryotic.py` where the `--veba_database` argument wasn't utilized and only the environment variable `VEBA_DATABASE` could be used.\r\n* Updated the Docker images to have `/volumes/input`, `/volumes/output`, and `/volumes/database` directories to mount. \r\n* Replaced `prodigal` with `pyrodigal` as it is faster and under active development.\r\n* Added support for missing classifications in `compile_krona.py` and `consensus_genome_classification.py`.\r\n* Updated `GTDB-Tk` from version `2.1.3` \u2192 `2.3.0` and `GTDB` from version `r202_v2` \u2192 `r214`. Changed `${VEBA_DATABASE}/Classify/GTDBTk` \u2192 `${VEBA_DATABASE}/Classify/GTDB`.  Added `gtdb_r214.msh` to `GTDB` database for ANI screening.\r\n* Added pangenome and singularity tables to `cluster.py` (and associated global/local clustering scripts) to output automatically.\r\n* Added `compile_gff.py` to merge CDS, rRNA, and tRNA GFF files.  Used in `binning-prokaryotic.py` and `binning-viral.py`.  `binning-eukaryotic.py` uses the source of this in the backend of `filter_busco_results.py`. Includes GC content for contigs and various tags. \r\n* Updated `BUSCO v5.3.2 -> v5.4.3` which changes the json output structure and made the appropriate changes in `filter_busco_results.py`.\r\n* Added `eukaryotic_gene_modeling_wrapper.py` which 1) splits nuclear, mitochondrial, and plastid genomes; 2) performs gene modeling via `MetaEuk` and `Pyrodigal`; 3) performs rRNA detection via `BARRNAP`; 4) performs tRNA detection via `tRNAscan-SE`; 5) merges processed GFF files; and 5) calculates sequences statistics. \r\n* Added `gene_biotype=protein_coding` to `P(y)rodigal(-GV)` GFF output. \r\n* Added `VFDB` to `annotate.py` and database.\r\n* Compiled and pushed `gtdb_r214.msh` mash file to [Zenodo:8048187](https://zenodo.org/record/8048187) which is now used by default in `classify-prokaryotic.py`.  It is now included in `VDB_v5.1`.\r\n* Cleaned up global and local clustering intermediate files.  Added pangenome tables and singelton information to outputs.\r\n",
        "html_url": "https://github.com/jolespin/veba/releases/tag/v1.2.0",
        "name": "VEBA_v1.2.0",
        "release_id": 111876543,
        "tag": "v1.2.0",
        "tarball_url": "https://api.github.com/repos/jolespin/veba/tarball/v1.2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/jolespin/veba/releases/111876543",
        "value": "https://api.github.com/repos/jolespin/veba/releases/111876543",
        "zipball_url": "https://api.github.com/repos/jolespin/veba/zipball/v1.2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jolespin",
          "type": "User"
        },
        "date_created": "2023-05-16T20:02:57Z",
        "date_published": "2023-05-17T03:34:58Z",
        "description": "##### Release v1.1.2\r\n* Created Docker images for all modules\r\n* Replaced all absolute path symlinks with relative symlinks\r\n* Changed `prokaryotic_taxonomy.tsv` and `prokaryotic_taxonomy.clusters.tsv` in `classify-prokaryotic.py` (along with eukaryotic and viral) files to `taxonomy.tsv` and `taxonomy.clusters.tsv` for uniformity.\r\n* Updating all symlinks to relative links (also in `fastq_preprocessor`) to prepare for dockerization and updating all environments to use updated GenoPype 2023.4.13.\r\n* Changed `nr` to `uniref` in `annotate.py` and added `propagate_annotations_from_representatives.py` script while simplifying `merge_annotations_and_taxonomy.py` to `merge_annotations.py` and excluding taxonomy operations.\r\n* Changed `nr` to `UniRef90` and `UniRef50` in `VDB_v5` \r\n* Changed `orfs_to_orthogroups.tsv` to `proteins_to_orthogroups.tsv` for consistency with the `cluster.py` module.  Will eventually find some consitency with `scaffolds_to_bins/scaffolds_to_mags` but this will be later.\r\n* Added a `scaffolds_to_mags.tsv` in the clustering output.\r\n* Added `convert_counts_table.py` which converts a counts table (and metadata) to [Pandas pickle](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_pickle.html), [Anndata h5ad](https://anndata.readthedocs.io/en/latest/generated/anndata.AnnData.write_h5ad.html), or [Biom hdf5](https://biom-format.org/documentation/generated/biom.table.Table.to_hdf5.html#biom.table.Table.to_hdf5)\r\n* Fixed output directory for `mapping.py` which now uses `output_directory/${NAME}` structure like `binning-*.py`.\r\n* Removed \"python\" prefix for script calls and now uses shebang in script for executable. Also added single paranthesis around script filepath (e.g., `'[script_filepath]'`) to escape characters/spaces in filepath.\r\n* Added support for `index.py` to accept individual `--references [file.fasta]` and `--gene_models [file.gff]`.\r\n* Added `stdin` support for `scaffolds_to_bins.py` along with the ability to input genome tables [id_genome]<tab>[filepath].  Also added progress bars.\r\n* As a result of [issues/22](https://github.com/jolespin/veba/issues/22), `assembly.py`, `assembly-sequential.py`, `binning-*.py`, and `mapping.py` will use `-p --countReadPairs` for `featureCounts` and updates `subread 2.0.1 -> subread 2.0.3`.  For `binning-*.py`, long reads can be used with the `--long_reads` flag.\r\n* Updated `cluster.py` and associated `global_clustering.py`/`local_clustering.py` scripts to use `mmseqs2_wrapper.py` which now automatically outputs representative sequences.  \r\n* Added `check_fasta_duplicates.py` script that gives `0` and `1` exit codes for fasta without and with duplicates, respectively.  Added `reformat_representative_sequences.py` to reformat representative sequences from `MMSEQS2` into either a table or fasta file where the identifers are cluster labels.  Removed `--dbtype` from `[global/local]_clustering.py`.  Removed appended prefix for `.graph.pkl` and `dict.pkl` in `edgelist_to_clusters.py`.  Added `mmseqs2_wrapper.py` and `hmmer_wrapper.py` scripts.\r\n* Added an option to `merge_generalized_mapping.py` to include the sample index in a filepath and also an option to remove empty features (useful for Salmon).  Added an `executable='/bin/bash'` option to the `subprocess.Popen` calls in `GenoPype` to address [issues/23](https://github.com/jolespin/veba/issues/23).\r\n* Added `genbanks/[id_genome]/` to output directory of `biosynthetic.py` which has symlinks to all the BGC genbanks from `antiSMASH`.\r\n",
        "html_url": "https://github.com/jolespin/veba/releases/tag/v1.1.2",
        "name": "VEBA_v1.1.2",
        "release_id": 103253190,
        "tag": "v1.1.2",
        "tarball_url": "https://api.github.com/repos/jolespin/veba/tarball/v1.1.2",
        "type": "Release",
        "url": "https://api.github.com/repos/jolespin/veba/releases/103253190",
        "value": "https://api.github.com/repos/jolespin/veba/releases/103253190",
        "zipball_url": "https://api.github.com/repos/jolespin/veba/zipball/v1.1.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jolespin",
          "type": "User"
        },
        "date_created": "2023-03-20T18:43:00Z",
        "date_published": "2023-03-21T00:20:07Z",
        "description": "Minor updates from v1.1.0.\r\n\r\n* Most important update includes fixing a broken `VEBA-binning-viral.yml` install recipe which had package conflicts for aria2 https://github.com/jolespin/veba/commit/30e8b0a6aa6612c4db201423b304fc57362f996b.  \r\n* Fixes on conda-related environment variables in the install scripts.\r\n* Added MIBiG to database and `annotate.py`\r\n* Added a composite label for annotations in `annotate.py`\r\n* Added `--dastool_minimum_score` to `binning-prokaryotic.py` module\r\n* Added a wrapper around `STAR` aligner\r\n* Updated `merge_generalized_mapping.py` script to take in BAM files instead of being dependent on a specific directory.\r\n* Added option to have no header in `subst_table.py`",
        "html_url": "https://github.com/jolespin/veba/releases/tag/v1.1.1",
        "name": "VEBA_v1.1.1",
        "release_id": 96278887,
        "tag": "v1.1.1",
        "tarball_url": "https://api.github.com/repos/jolespin/veba/tarball/v1.1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/jolespin/veba/releases/96278887",
        "value": "https://api.github.com/repos/jolespin/veba/releases/96278887",
        "zipball_url": "https://api.github.com/repos/jolespin/veba/zipball/v1.1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jolespin",
          "type": "User"
        },
        "date_created": "2023-03-02T20:42:57Z",
        "date_published": "2023-03-02T20:44:45Z",
        "description": "##### Release v1.1.0\r\n\r\n* **Modules**:\r\n\t* `annotate.py`\r\n\t\t* Added `NCBIfam-AMRFinder` AMR domain annotations\r\n\t\t* Added `AntiFam` contimination annotations\r\n\t\t* Uses `taxopy` instead of `ete3` in backend with `merge_annotations_and_score_taxonomy.py`\r\n\t\r\n\t* `assembly.py`\r\n\t\t* Added a `transcripts_to_genes.py` script which creates a `genes_to_transcripts.tsv` table that can be used with `TransDecoder`.\r\n\r\n\t* `binning-prokaryotic.py`\r\n\t\t* Updated `CheckM` \u2192 `CheckM2`.  This removes the dependency of `GTDB-Tk` and EXTREMELY REDUCES compute resource requirements (e.g., memory and time) as `CheckM2` automatically handles candidate phyla radiation.  With this, several backend scripts were deprecated.  This cleans up the binning pipeline and error messages SUBSTANTIALLY.\r\n\t\t* Uses `binning_wrapper.py` for all binning.  This makes it easier to add new binning algorithms in the future (e.g., `VAMB`).  Also, check out the new multi-split binning functionality described below.\r\n\t\t* Added `--skip_concoct` in addition to the already existing `--skip_maxbin2` option as `MaxBin2` takes very long when there's a lot of contigs and `CONCOCT` takes a long time when there are a lot of samples (i.e., BAM files).  `MetaBAT2` is not optional.  \r\n\t\t\r\n\t* `binning-viral.py`\r\n\t\t* Complete rewrite of this module which now uses `geNomad` as the default binning algorithm but still supports `VirFinder`.\r\n\t\t* If `VirFinder` is used, the `genomad annotate` is run via the `genomad_taxonomy_wrapper.py` script included in the update. \r\n\t\t* Updated `Prodigal` \u2192 `Prodigal-GV` to handle additional viral genetic codes.\r\n\t\t\r\n\t* `biosynthetic.py`\r\n\t\t* Introduces `component_id` and `bgc_id` which are unique, pareseable, and informative.  For example, `component_id = SRR17458614__CONCOCT__P.2__9|NODE_3319_length_2682_cov_2.840502|region001_1|2-2681(+)` contains the unique `bgc_id` (i.e., `SRR17458614__CONCOCT__P.2__9|NODE_3319_length_2682_cov_2.840502|region001`), shows that it is the 1st gene in the cluster (the `_1` in `region001_1`), and the gene start/end/strand.  The `bgc_id` is composed of the `genome_id|contig_id|region_id`.\r\n\t\t\r\n\t* `classify-prokaryotic.py`\r\n\t\t* Updated `GTDB-Tk v2.1.1` \u2192  `GTDB-Tk v2.2.3`.  For now, `--skip_ani_screen` is the only option because of [this thread](https://forum.gtdb.ecogenomic.org/t/how-can-i-use-the-mash-db-option-of-classify-wf/429/4).  However, `--mash_db` may be an option in the near future.\r\n\t\t* Added functionality to classify prokaryotic genomes that were not binned via `VEBA` which is available with the `--genomes` option (`--prokaryotic_binning_directory` is still available which can leverage existing intermediate files).\t\t\r\n\t* `classify-eukaryotic.py`\r\n\t\t* Added functionality to classify eukaryotic genomes that were not binned via `VEBA` which is available with the `--genomes` option (`--eukaryotic_binning_directory` is still available which can leverage existing intermediate files). This is implemented by using the `eukaryota_odb10` markers from the `VEBA Microeukaryotic Database` to substantially improve performance and decrease resources required for gene models.\r\n\t\r\n\t* `classify-viral.py`\r\n\t\t* Complete rewrite of this module which does not rely on (deprecated) intermediate files from `CheckV`.\r\n\t\t* Uses taxonomy generated from `geNomad` and `consensus_genome_classification_unranked.py` (a wrapper around `taxopy`) that can handle the chaotic taxonomy of viruses.\r\n\t\t* Added functionality to classify viral genomes that were not binned via `VEBA` which is available with the `--genomes` option (`--viral_binning_directory` is still available which can leverage existing intermediate files).\r\n\r\n\t* `cluster.py`\r\n\t\t* Complete rewrite of this module which now uses `MMSEQS2` as the orthogroup detection algorithm instead of `OrthoFinder`.  `OrthoFinder` is overkill for creating protein clusters and it generates thousands of intermediate files (e.g., fasta, alignments, trees, etc.) which substantially increases the compute time.  `MMSEQS2` has very similar performance with a fraction of the resources and compute time.  Clustered the entire [*Plastisphere* dataset](https://figshare.com/articles/dataset/Genome_assemblies_gene_models_gene_annotations_taxonomy_classifications_clusters_and_counts_tables/20263974) on a local machine in ~30 minutes compared to several days on a HPC.\r\n\t\t* Now that the resources are minimal, clustering is performed at global level as before (i.e., all samples in the dataset) and now at the local level, optionally but ON by default, which clusters all genomes within a sample.  Accompanying wrapper scripts are `global_clustering.py` and `local_clustering.py`.\r\n\t\t* The genomic and functional feature compression ratios (FCR) (described [here](https://bmcbioinformatics.biomedcentral.com/articles/10.1186/s12859-022-04973-8)]) are now calculated automatically.  The calculation is `1 - number_of_clusters/number_of_features` which can easily be converted into an unsupervised biodiversity metric.  This is calculated at the global (original implementation) and local levels.\r\n\t\t* Input is now a table with the following columns: `[organism_type]<tab>[id_sample]<tab>[id_mag]<tab>[genome]<tab>[proteins]` and is generated easily with the `compile_genomes_table.py` script.  This allows clustering to be performed for prokaryotes, eukaryotes, and viruses all at the same time.\r\n\t\t* SLC-specific orthogroups (SSO) are now refered to as SLC-specific protein clusters (SSPC).\r\n\t\t* Support zfilling (e.g., `zfill=3, SLC7 \u2192 SLC007`) for genomic and protein clusters.\r\n\t\t* Deprecated `fastani_to_clusters.py` to now use the more generalizable `edgelist_to_clusters.py` which is used for both genomic and protein clusters.  This also outputs a `NetworkX` graph and a pickled dictionary `{\"cluster_a\":{\"component_1\", \"component_2\", ..., \"component_n\"}}`\r\n\t\t\r\n\t* `phylogeny.py`\r\n\t\t* Updated `MUSCLE` to `v5` which has `-align` and `-super5` algorithms which are now accessible with `--alignment_algorithm`.  Cannot use `stdin` so now the fasta files are not gzipped.  The `merge_msa.py` now output uncompressed fasta as default and can output gzipped with the `--gzip` flag.\r\n\r\n\t\t\r\n* **`VEBA Database`**:\r\n\t* `VDB_v3.1` \u2192 `VDB_v4`\r\n\t\t* Updated `CheckV DB v1.0` \u2192 `CheckV DB v1.5`\r\n\t\t* Added `geNomad DB v1.2`\r\n\t\t* Added `CheckM2 DB`\r\n\t\t* Removed `CheckM DB`\r\n\t\t* Removed `taxa.sqlite` and `taxa.sqlite.traverse.pkl`\r\n\t\t* Added `reference.eukaryota_odb10.list` and corresponding `MMSEQS2` database (i.e., `microeukaryotic.eukaryota_odb10`)\r\n\t\t* Added `NCBIfam-AMRFinder` marker set for annotation\r\n\t\t* Added `AntiFam` marker set for contamination\r\n\t\t* Marker sets HMMs are now all gzipped (previously could not gzip because `CheckM` CPR workflow)\r\n\r\n* **Scripts:**\r\n\t* Added:\r\n\t\t* `append_geneid_to_transdecoder_gff.py`\r\n\t\t* `bowtie2_wrapper.py`\r\n\t\t* `compile_genomes_table.py`\r\n\t\t* `consensus_genome_classification_unranked.py`\r\n\t\t* `cut_table.py`\r\n\t\t* `cut_table_by_column_labels.py`\r\n\t\t* `drop_missing_values.py`\r\n\t\t* `edgelist_to_clusters.py`\r\n\t\t* `filter_checkm2_results.py`\r\n\t\t* `genomad_taxonomy_wrapper.py`\r\n\t\t* `global_clustering.py`\r\n\t\t* `local_clustering.py`\r\n\t\t* `partition_multisplit_bins.py`\r\n\t\t* `scaffolds_to_clusters.py`\r\n\t\t* `scaffolds_to_samples.py`\r\n\t\t* `transcripts_to_genes.py`\r\n\t\t* `transdecoder_wrapper.py` (Note: Requires separate environment to run due to dependency conflicts)\r\n\r\n\t* Updated:\r\n\t\t* `antismash_genbanks_to_table.py` - Added option to output biosynthetic gene cluster (BGC) fasta. Adds unique (and parseable) BGC identifiers making the output much more useful.\r\n\t\t* `binning_wrapper.py` - This binning wrapper now includes functionality to use multi-split binning (i.e., concatenated contigs from different assemblies, map all reads to the contigs, bin all together, and then parition bins by sample).  This concept AFAIK was first introduced in the [`VAMB`](https://www.nature.com/articles/s41587-020-00777-4) paper.\r\n\t\t* `compile_reads_table.py` - Minimal change but now the extension excludes the `.` to make usage more consistent with other tools.\r\n\t\t* `consensus_genome_classification.py` - Changed the output to match that of `consensus_genome_classification_unranked.py`.\r\n\t\t* `filter_checkv_results.py` - Option to use taxonomy and viral summaries generated by `geNomad`.\r\n\t\t* `scaffolds_to_bins.py` - Support for getting scaffolds to bins for a list of genomes via `--genomes` argument while maintaining original support with `--binning_directory` argument.\r\n\t\t* `subset_table.py` - Added option to set index column and to drop duplicates.\r\n\t\t* `virfinder_wrapper.r` - Used to be `VirFinder_wrapper.R`.  This now has an option to use FDR values instead of P values.\r\n\t\t* `merge_annotations_and_score_taxonomy.py` - Completely rewritten.  Uses `taxopy` instead of `ete3`.\r\n\t\t* `merge_msa.py` - Output uncompressed protein fasta files by default and can compress with `--gzip` flag.\r\n\r\n\t* Deprecated:\r\n\t\t* `adjust_genomes_for_cpr.py`\r\n\t\t* `filter_checkm_results.py`\r\n\t\t* `fastani_to_clusters.py`\r\n\t\t* `partition_orthogroups.py`\r\n\t\t* `partition_clusters.py`\r\n\t\t* `compile_viral_classifications.py`\r\n\t\t* `build_taxa_sqlite.py`\r\n\r\n* **Miscellaneous**:\r\n\t* Updated environments and now add versions to environments.\r\n\t* Added `mamba` to installation to speed up.\r\n\t* Added `transdecoder_wrapper.py` which is a wrapper around `TransDecoder` with direct support for `Diamond` and `HMMSearch` homology searches.  Also includes `append_geneid_to_transdecoder_gff.py` which is run in the backend to clean up the GFF file and make them compatible with what is output by `Prodigal` and `MetaEuk` runs of `VEBA`.\r\n\t* Added support for using `n_jobs -1` to use all available threads (similar to `scikit-learn` methodology).\r\n",
        "html_url": "https://github.com/jolespin/veba/releases/tag/v1.1.0",
        "name": "VEBA_v1.1.0",
        "release_id": 94313085,
        "tag": "v1.1.0",
        "tarball_url": "https://api.github.com/repos/jolespin/veba/tarball/v1.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/jolespin/veba/releases/94313085",
        "value": "https://api.github.com/repos/jolespin/veba/releases/94313085",
        "zipball_url": "https://api.github.com/repos/jolespin/veba/zipball/v1.1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jolespin",
          "type": "User"
        },
        "date_created": "2022-12-28T06:03:02Z",
        "date_published": "2022-12-28T06:04:57Z",
        "description": "##### Release v1.0.4\r\n* Added `biopython` to `VEBA-assembly_env` which is needed when running `MEGAHIT` as the scaffolds are rewritten and [an error](https://github.com/jolespin/veba/issues/17) was raised. [aea51c3](https://github.com/jolespin/veba/commit/aea51c3e0b775aec90f7343f01cad6911f526f0a)\r\n* Updated Microeukaryotic protein database to exclude a few higher eukaryotes that were present in database, changed naming scheme to hash identifiers (from `cat reference.faa | seqkit fx2tab -s -n > id_to_hash.tsv`).  Switching database from [FigShare](https://figshare.com/articles/dataset/Microeukaryotic_Protein_Database/19668855) to [Zenodo](https://zenodo.org/record/7485114#.Y6vZO-zMKDU).  Uses database version `VDB_v3` which has the updated microeukaryotic protein database (`VDB-Microeukaryotic_v2`) [0845ba6](https://github.com/jolespin/veba/commit/0845ba6be65f3486d61fe7ae21a2937efeb42ee9)",
        "html_url": "https://github.com/jolespin/veba/releases/tag/v1.0.4",
        "name": "VEBA_v1.0.4",
        "release_id": 87370641,
        "tag": "v1.0.4",
        "tarball_url": "https://api.github.com/repos/jolespin/veba/tarball/v1.0.4",
        "type": "Release",
        "url": "https://api.github.com/repos/jolespin/veba/releases/87370641",
        "value": "https://api.github.com/repos/jolespin/veba/releases/87370641",
        "zipball_url": "https://api.github.com/repos/jolespin/veba/zipball/v1.0.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jolespin",
          "type": "User"
        },
        "date_created": "2022-12-14T18:40:54Z",
        "date_published": "2022-12-14T18:47:00Z",
        "description": "**If you have 1.0.3 \u2264 version < 1.0.3e, you can update easily on [Patch Fix #1](https://github.com/jolespin/veba/blob/main/install/PATCHES.md#1-update-veba-environments-with-existing-or-most-recent-scripts)**\r\n\r\n##### Release v1.0.3e\r\n* Patch fix for `install_veba.sh` where `install/environments/VEBA-assembly_env.yml` raised [a compatibilty error](https://github.com/jolespin/veba/issues/15) when creating the `VEBA-assembly_env` environment [c2ab957](https://github.com/jolespin/veba/commit/c2ab957be132d34e6b99d6dea394be4572b83066)\r\n* Patch fix for `VirFinder_wrapper.R` where `__version__ = ` variable was throwing [an R error](https://github.com/jolespin/veba/issues/13) when running `binning-viral.py` module. [19e8f38](https://github.com/jolespin/veba/commit/19e8f38a5050328b7ba88b2271f0221073748cbb)\r\n* Patch fix for `filter_busco_results.py` where [an error](https://github.com/jolespin/veba/issues/12) arose that produced empty `identifier_mapping.metaeuk.tsv` subset tables. [359e4569](https://github.com/jolespin/veba/commit/359e45699fc6d6fdf739350263fd34c6e4a62f94)\r\n* Patch fix for `compile_metaeuk_identifiers.py` where [a Python error](https://github.com/jolespin/veba/issues/11) arised when duplicate gene identifiers were present.  [c248527](https://github.com/jolespin/veba/commit/c248527da9edef5ba2ebee348d707d8ece29fbee)\r\n* Patch fix for `install_veba.sh` where `install/environments/VEBA-preprocess_env.yml` raised [a compatibilty error](https://github.com/jolespin/veba/issues/10) when creating the `VEBA-preprocess_env` environment [8ed6eea](https://github.com/jolespin/veba/commit/8ed6eeaee1037694cf324d8fa4da6190578b9688)\r\n\r\n___\r\n\r\n* Added `biosynthetic.py` module which runs antiSMASH and converts genbank files to tabular format. [6c0ed82](https://github.com/jolespin/veba/commit/6c0ed82c804ad60a4f1ae51f3e5fecd14dba845f)\r\n* Added `megahit` support for `assembly.py` module (not yet available in `assembly-sequential.py`). [6c0ed82](https://github.com/jolespin/veba/commit/6c0ed82c804ad60a4f1ae51f3e5fecd14dba845f) \r\n* Changed `-P/--spades_program` to `-P/--program` for `assembly.py`. [6c0ed82](https://github.com/jolespin/veba/commit/6c0ed82c804ad60a4f1ae51f3e5fecd14dba845f)\r\n* Replaced penultimate step in `binning-prokaryotic.py` to use `adjust_genomes_for_cpr.py` instead of the extremely long series of bash commands.  This will make it easier to diagnose errors in this critical step.  [6c0ed82](https://github.com/jolespin/veba/commit/6c0ed82c804ad60a4f1ae51f3e5fecd14dba845f)\r\n* Added support for contig descriptions and added MAG identifier in fasta files in `binning-eukaryotic.py`.  Now uses the `metaeuk_wrapper.py` script for the `MetaEuk` step.  [6c0ed82](https://github.com/jolespin/veba/commit/6c0ed82c804ad60a4f1ae51f3e5fecd14dba845f)\r\n* Added separate option of `--run_metaplasmidspades` for `assembly-sequential.py` instead of making it mandatory (now it just runs `biosyntheticSPAdes` and `metaSPAdes` by default). [6c0ed82](https://github.com/jolespin/veba/commit/6c0ed82c804ad60a4f1ae51f3e5fecd14dba845f)\r\n* Added `--use_mag_as_description` in `parition_gene_models.py` script to include the MAG identifier in the contig description of the fasta header which is default in `binning-prokaryotic.py`. [6c0ed82](https://github.com/jolespin/veba/commit/6c0ed82c804ad60a4f1ae51f3e5fecd14dba845f)\r\n* Added `adjust_genomes_for_cpr.py` script to easier run and understand the CPR adjustment step of `binning-prokaryotic.py`. [6c0ed82](https://github.com/jolespin/veba/commit/6c0ed82c804ad60a4f1ae51f3e5fecd14dba845f)\r\n* Added support for fasta header descriptions in `binning-prokaryotic.py`. [6c0ed82](https://github.com/jolespin/veba/commit/6c0ed82c804ad60a4f1ae51f3e5fecd14dba845f)\r\n* Added functionality to `replace_fasta_descriptions.py` script to be able to use a string for replacing fasta headers in addition to the original functionality. [6c0ed82](https://github.com/jolespin/veba/commit/6c0ed82c804ad60a4f1ae51f3e5fecd14dba845f)",
        "html_url": "https://github.com/jolespin/veba/releases/tag/v1.0.3e",
        "name": "VEBA_v1.0.3e",
        "release_id": 86069468,
        "tag": "v1.0.3e",
        "tarball_url": "https://api.github.com/repos/jolespin/veba/tarball/v1.0.3e",
        "type": "Release",
        "url": "https://api.github.com/repos/jolespin/veba/releases/86069468",
        "value": "https://api.github.com/repos/jolespin/veba/releases/86069468",
        "zipball_url": "https://api.github.com/repos/jolespin/veba/zipball/v1.0.3e"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jolespin",
          "type": "User"
        },
        "date_created": "2022-10-27T00:39:15Z",
        "date_published": "2022-10-27T00:57:14Z",
        "description": "##### Release v1.0.2a\r\n\r\n_Not to be confused with v1.0.2 which is deprecated_\r\n\r\n* Updated *GTDB-Tk* in `VEBA-binning-prokaryotic_env` from `1.x` to `2.x` (this version uses much less memory): [f3507dd](https://github.com/jolespin/veba/commit/f3507dd13a42960e3671c9f8a106c9974fbfce21)\r\n* Updated the *GTDB-Tk* database from `R202` to `R207_v2` to be compatible with *GTDB-Tk v2.x*: [f3507dd](https://github.com/jolespin/veba/commit/f3507dd13a42960e3671c9f8a106c9974fbfce21)\r\n* Updated the [GRCh38 no-alt analysis set](https://genome-idx.s3.amazonaws.com/bt/GRCh38_noalt_as.zip) to [T2T CHM13v2.0](https://genome-idx.s3.amazonaws.com/bt/chm13v2.0.zip) for the default human reference: [5ccb4e2](https://github.com/jolespin/veba/commit/5ccb4e20564513707fcc3420b18237974455e196)\r\n* Added an experimental `amplicon.py` module for short-read ASV detection via the *DADA2* workflow of *QIIME2*: [cd4ed2b](https://github.com/jolespin/veba/commit/cd4ed2bfe35d5379a63dd3294c229f2c861f6f77)\r\n* Added additional functionality to `compile_reads_table.py` to handle advanced parsing of samples from fastq directories while also maintaining support for parsing filenames from `veba_output/preprocess`: [cd4ed2b](https://github.com/jolespin/veba/commit/cd4ed2bfe35d5379a63dd3294c229f2c861f6f77)\r\n* Added `sra-tools` to `VEBA-preprocess_env`: [f3507dd](https://github.com/jolespin/veba/commit/f3507dd13a42960e3671c9f8a106c9974fbfce21)\r\n* Fixed symlinks to scripts for `install_veba.sh`: [d1fad03](https://github.com/jolespin/veba/commit/d1fad03b71537cc6cc0d47fee426b6610000752a)\r\n* Added missing `CHECKM_DATA_PATH` environment variable to `VEBA-binning-prokaryotic_env` and `VEBA-classify_env`: [d1fad03](https://github.com/jolespin/veba/commit/d1fad03b71537cc6cc0d47fee426b6610000752a)\r\n* \u26a0\ufe0f In this version, contigs/scaffolds cannot have descriptions in fasta header for prokaryotic binning (Fixed in versions after 2022.11.07)\r\n\r\n**Module Versions:**\r\n\r\n```\r\namplicon.py __version__ = \"2022.10.24\"\r\nannotate.py __version__ = \"2021.7.8\"\r\nassembly.py __version__ = \"2022.03.25\"\r\nbinning-eukaryotic.py __version__ = \"2022.10.20\"\r\nbinning-prokaryotic.py __version__ = \"2022.10.25\"\r\nbinning-viral.py __version__ = \"2022.7.13\"\r\nclassify-eukaryotic.py __version__ = \"2022.7.8\"\r\nclassify-prokaryotic.py __version__ = \"2022.06.07\"\r\nclassify-viral.py __version__ = \"2022.7.13\"\r\ncluster.py __version__ = \"2022.10.16\"\r\ncoverage.py __version__ = \"2022.06.03\"\r\nindex.py __version__ = \"2022.02.17\"\r\nmapping.py __version__ = \"2022.8.17\"\r\nphylogeny.py __version__ = \"2022.06.22\"\r\npreprocess.py __version__ = \"2022.01.19\"\r\nscripts/append_geneid_to_prodigal_gff.py __version__ = \"2021.06.19\"\r\nscripts/binning_wrapper.py __version__ = \"2022.04.11\"\r\nscripts/build_taxa_sqlite.py __version__ = \"2022.04.18\"\r\nscripts/check_scaffolds_to_bins.py __version__ = \"2021.08.20\"\r\nscripts/compile_binning.py __version__ = \"2022.03.23\"\r\nscripts/compile_eukaryotic_classifications.py __version__ = \"2022.7.8\"\r\nscripts/compile_metaeuk_identifiers.py __version__ = \"2022.03.18\"\r\nscripts/compile_reads_table.py __version__ = \"2022.10.24\"\r\nscripts/compile_scaffold_identifiers.py __version__ = \"2022.02.23\"\r\nscripts/compile_viral_classifications.py __version__ = \"2022.03.08\"\r\nscripts/concatenate_dataframes.py __version__ = \"2022.03.24\"\r\nscripts/concatenate_fasta.py __version__ = \"2022.02.17\"\r\nscripts/concatenate_gff.py __version__ = \"2022.02.17\"\r\nscripts/consensus_domain_classification.py __version__ = \"2022.02.28\"\r\nscripts/consensus_genome_classification.py __version__ = \"2022.7.13\"\r\nscripts/consensus_orthogroup_annotation.py __version__ = \"2022.02.02\"\r\nscripts/determine_trim_position.py __version__ = \"2022.8.11\"\r\nscripts/fasta_to_saf.py __version__ = \"2021.04.04\"\r\nscripts/fasta_utility.py __version__ = \"2021.07.31\"\r\nscripts/fastani_to_clusters.py __version__ = \"2021.11.16\"\r\nscripts/fastq_position_statistics.py __version__ = \"2022.10.24\"\r\nscripts/filter_busco_results.py __version__ = \"2022.04.04\"\r\nscripts/filter_checkm_results.py __version__ = \"2022.03.28\"\r\nscripts/filter_checkv_results.py __version__ = \"2021.08.10\"\r\nscripts/filter_hmmsearch_results.py __version__ = \"2021.06.16\"\r\nscripts/genome_coverage_from_spades.py __version__ = \"2022.7.14\"\r\nscripts/genome_spatial_coverage.py __version__ = \"2022.08.17\"\r\nscripts/groupby_table.py __version__ = \"2022.08.17\"\r\nscripts/hmmer_to_proteins.py __version__ = \"2021.08.03\"\r\nscripts/insert_column_to_table.py __version__ = \"2022.03.24\"\r\nscripts/merge_annotations_and_score_taxonomy.py __version__ = \"2021.08.25\"\r\nscripts/merge_busco_json.py __version__ = \"2022.03.10\"\r\nscripts/merge_contig_mapping.py __version__ = \"2022.06.27\"\r\nscripts/merge_fastq_statistics.py __version__ = \"2022.03.08\"\r\nscripts/merge_gtdbtk.py __version__ = \"2022.03.24\"\r\nscripts/merge_msa.py __version__ = \"2022.06.21\"\r\nscripts/merge_orf_mapping.py __version__ = \"2021.03.27\"\r\nscripts/metaeuk_wrapper.py __version__ = \"2022.08.27\"\r\nscripts/partition_clusters.py __version__ = \"2021.08.12\"\r\nscripts/partition_gene_models.py __version__ = \"2021.08.24\"\r\nscripts/partition_hmmsearch.py __version__ = \"2022.06.20\"\r\nscripts/partition_multisplit_bins.py __version__ = \"2022.04.08\"\r\nscripts/partition_orthogroups.py __version__ = \"2022.04.01\"\r\nscripts/partition_unbinned.py __version__ = \"2021.08.05\"\r\nscripts/replace_fasta_descriptions.py __version__ = \"2022.9.1\"\r\nscripts/scaffolds_to_bins.py __version__ = \"2021.03.26\"\r\nscripts/subset_table.py __version__ = \"2022.04.20\"\r\nscripts/subset_table_by_column.py __version__ = \"2022.04.20\"\r\n```",
        "html_url": "https://github.com/jolespin/veba/releases/tag/v1.0.2a",
        "name": "VEBA_v1.0.2a",
        "release_id": 81136976,
        "tag": "v1.0.2a",
        "tarball_url": "https://api.github.com/repos/jolespin/veba/tarball/v1.0.2a",
        "type": "Release",
        "url": "https://api.github.com/repos/jolespin/veba/releases/81136976",
        "value": "https://api.github.com/repos/jolespin/veba/releases/81136976",
        "zipball_url": "https://api.github.com/repos/jolespin/veba/zipball/v1.0.2a"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jolespin",
          "type": "User"
        },
        "date_created": "2022-10-20T23:05:52Z",
        "date_published": "2022-10-21T00:42:36Z",
        "description": "Small patch fix:\r\n* Fixed the fatal binning-eukaryotic.py error: https://github.com/jolespin/veba/commit/7c5addf9ed6e8e45502274dd353f20b211838a41\r\n* Fixed the minor file naming in cluster.py: https://github.com/jolespin/veba/commit/58038451dac0791899aa7fca3f9d79454cb9ed46\r\n* Removes left-over human genome tar.gz during database download/config:  https://github.com/jolespin/veba/commit/58038451dac0791899aa7fca3f9d79454cb9ed46\r\n* \u26a0\ufe0f In this version, contigs/scaffolds cannot have descriptions in fasta header for prokaryotic binning (Fixed in versions after 2022.11.07)\r\n\r\n**Module Versions:**\r\n\r\n```\r\nannotate.py\t__version__ = \"2021.7.8\"\r\nassembly.py\t__version__ = \"2022.03.25\"\r\nbinning-eukaryotic.py\t__version__ = \"2022.10.20\"\r\nbinning-prokaryotic.py\t__version__ = \"2022.7.8\"\r\nbinning-viral.py\t__version__ = \"2022.7.13\"\r\nclassify-eukaryotic.py\t__version__ = \"2022.7.8\"\r\nclassify-prokaryotic.py\t__version__ = \"2022.06.07\"\r\nclassify-viral.py\t__version__ = \"2022.7.13\"\r\ncluster.py\t__version__ = \"2022.10.16\"\r\ncoverage.py\t__version__ = \"2022.06.03\"\r\nindex.py\t__version__ = \"2022.02.17\"\r\nmapping.py\t__version__ = \"2022.8.17\"\r\nphylogeny.py\t__version__ = \"2022.06.22\"\r\npreprocess.py\t__version__ = \"2022.01.19\"\r\nscripts/append_geneid_to_prodigal_gff.py\t__version__ = \"2021.06.19\"\r\nscripts/binning_wrapper.py\t__version__ = \"2022.04.11\"\r\nscripts/build_taxa_sqlite.py\t__version__ = \"2022.04.18\"\r\nscripts/check_scaffolds_to_bins.py\t__version__ = \"2021.08.20\"\r\nscripts/compile_binning.py\t__version__ = \"2022.03.23\"\r\nscripts/compile_eukaryotic_classifications.py\t__version__ = \"2022.7.8\"\r\nscripts/compile_metaeuk_identifiers.py\t__version__ = \"2022.03.18\"\r\nscripts/compile_reads_table.py\t__version__ = \"2021.7.18\"\r\nscripts/compile_scaffold_identifiers.py\t__version__ = \"2022.02.23\"\r\nscripts/compile_viral_classifications.py\t__version__ = \"2022.03.08\"\r\nscripts/concatenate_dataframes.py\t__version__ = \"2022.03.24\"\r\nscripts/concatenate_fasta.py\t__version__ = \"2022.02.17\"\r\nscripts/concatenate_gff.py\t__version__ = \"2022.02.17\"\r\nscripts/consensus_domain_classification.py\t__version__ = \"2022.02.28\"\r\nscripts/consensus_genome_classification.py\t__version__ = \"2022.7.13\"\r\nscripts/consensus_orthogroup_annotation.py\t__version__ = \"2022.02.02\"\r\nscripts/fasta_to_saf.py\t__version__ = \"2021.04.04\"\r\nscripts/fasta_utility.py\t__version__ = \"2021.07.31\"\r\nscripts/fastani_to_clusters.py\t__version__ = \"2021.06.16\"\r\nscripts/filter_busco_results.py\t__version__ = \"2022.04.04\"\r\nscripts/filter_checkm_results.py\t__version__ = \"2022.03.28\"\r\nscripts/filter_checkv_results.py\t__version__ = \"2021.08.10\"\r\nscripts/filter_hmmsearch_results.py\t__version__ = \"2021.06.16\"\r\nscripts/genome_coverage_from_spades.py\t__version__ = \"2022.7.14\"\r\nscripts/genome_spatial_coverage.py\t__version__ = \"2022.08.17\"\r\nscripts/groupby_table.py\t__version__ = \"2022.08.17\"\r\nscripts/hmmer_to_proteins.py\t__version__ = \"2021.08.03\"\r\nscripts/insert_column_to_table.py\t__version__ = \"2022.03.24\"\r\nscripts/merge_annotations_and_score_taxonomy.py\t__version__ = \"2021.08.25\"\r\nscripts/merge_busco_json.py\t__version__ = \"2022.03.10\"\r\nscripts/merge_contig_mapping.py\t__version__ = \"2022.06.27\"\r\nscripts/merge_fastq_statistics.py\t__version__ = \"2022.03.08\"\r\nscripts/merge_gtdbtk.py\t__version__ = \"2022.03.24\"\r\nscripts/merge_msa.py\t__version__ = \"2022.06.21\"\r\nscripts/merge_orf_mapping.py\t__version__ = \"2021.03.27\"\r\nscripts/metaeuk_wrapper.py\t__version__ = \"2022.08.27\"\r\nscripts/partition_clusters.py\t__version__ = \"2021.08.12\"\r\nscripts/partition_gene_models.py\t__version__ = \"2021.08.24\"\r\nscripts/partition_hmmsearch.py\t__version__ = \"2022.06.20\"\r\nscripts/partition_multisplit_bins.py\t__version__ = \"2022.04.08\"\r\nscripts/partition_orthogroups.py\t__version__ = \"2022.04.01\"\r\nscripts/partition_unbinned.py\t__version__ = \"2021.08.05\"\r\nscripts/scaffolds_to_bins.py\t__version__ = \"2021.03.26\"\r\nscripts/subset_table.py\t__version__ = \"2022.04.20\"\r\nscripts/subset_table_by_column.py\t__version__ = \"2022.04.20\"\r\n```",
        "html_url": "https://github.com/jolespin/veba/releases/tag/v1.0.1",
        "name": "VEBA_v1.0.1",
        "release_id": 80534004,
        "tag": "v1.0.1",
        "tarball_url": "https://api.github.com/repos/jolespin/veba/tarball/v1.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/jolespin/veba/releases/80534004",
        "value": "https://api.github.com/repos/jolespin/veba/releases/80534004",
        "zipball_url": "https://api.github.com/repos/jolespin/veba/zipball/v1.0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jolespin",
          "type": "User"
        },
        "date_created": "2022-09-13T03:32:14Z",
        "date_published": "2022-09-18T22:46:46Z",
        "description": "Version released for manuscript submission.\r\n\r\n* \u26a0\ufe0f In this version, contigs/scaffolds cannot have descriptions in fasta header for prokaryotic binning (Fixed in versions after 2022.11.07)\r\n\r\n**Module Versions:** \r\n\r\n```\r\nannotate.py\t__version__ = \"2021.7.8\"\r\nassembly.py\t__version__ = \"2022.03.25\"\r\nbinning-eukaryotic.py\t__version__ = \"2022.7.8\"\r\nbinning-prokaryotic.py\t__version__ = \"2022.7.8\"\r\nbinning-viral.py\t__version__ = \"2022.7.13\"\r\nclassify-eukaryotic.py\t__version__ = \"2022.7.8\"\r\nclassify-prokaryotic.py\t__version__ = \"2022.06.07\"\r\nclassify-viral.py\t__version__ = \"2022.7.13\"\r\ncluster.py\t__version__ = \"2022.06.04\"\r\ncoverage.py\t__version__ = \"2022.06.03\"\r\nindex.py\t__version__ = \"2022.02.17\"\r\nmapping.py\t__version__ = \"2022.8.17\"\r\nphylogeny.py\t__version__ = \"2022.06.22\"\r\npreprocess.py\t__version__ = \"2022.01.19\"\r\nscripts/append_geneid_to_prodigal_gff.py\t__version__ = \"2021.06.19\"\r\nscripts/binning_wrapper.py\t__version__ = \"2022.04.11\"\r\nscripts/build_taxa_sqlite.py\t__version__ = \"2022.04.18\"\r\nscripts/check_scaffolds_to_bins.py\t__version__ = \"2021.08.20\"\r\nscripts/compile_binning.py\t__version__ = \"2022.03.23\"\r\nscripts/compile_eukaryotic_classifications.py\t__version__ = \"2022.7.8\"\r\nscripts/compile_metaeuk_identifiers.py\t__version__ = \"2022.03.18\"\r\nscripts/compile_reads_table.py\t__version__ = \"2021.7.18\"\r\nscripts/compile_scaffold_identifiers.py\t__version__ = \"2022.02.23\"\r\nscripts/compile_viral_classifications.py\t__version__ = \"2022.03.08\"\r\nscripts/concatenate_dataframes.py\t__version__ = \"2022.03.24\"\r\nscripts/concatenate_fasta.py\t__version__ = \"2022.02.17\"\r\nscripts/concatenate_gff.py\t__version__ = \"2022.02.17\"\r\nscripts/consensus_domain_classification.py\t__version__ = \"2022.02.28\"\r\nscripts/consensus_genome_classification.py\t__version__ = \"2022.7.13\"\r\nscripts/consensus_orthogroup_annotation.py\t__version__ = \"2022.02.02\"\r\nscripts/fasta_to_saf.py\t__version__ = \"2021.04.04\"\r\nscripts/fasta_utility.py\t__version__ = \"2021.07.31\"\r\nscripts/fastani_to_clusters.py\t__version__ = \"2021.06.16\"\r\nscripts/filter_busco_results.py\t__version__ = \"2022.04.04\"\r\nscripts/filter_checkm_results.py\t__version__ = \"2022.03.28\"\r\nscripts/filter_checkv_results.py\t__version__ = \"2021.08.10\"\r\nscripts/filter_hmmsearch_results.py\t__version__ = \"2021.06.16\"\r\nscripts/genome_coverage_from_spades.py\t__version__ = \"2022.7.14\"\r\nscripts/genome_spatial_coverage.py\t__version__ = \"2022.08.17\"\r\nscripts/groupby_table.py\t__version__ = \"2022.08.17\"\r\nscripts/hmmer_to_proteins.py\t__version__ = \"2021.08.03\"\r\nscripts/insert_column_to_table.py\t__version__ = \"2022.03.24\"\r\nscripts/merge_annotations_and_score_taxonomy.py\t__version__ = \"2021.08.25\"\r\nscripts/merge_busco_json.py\t__version__ = \"2022.03.10\"\r\nscripts/merge_contig_mapping.py\t__version__ = \"2022.06.27\"\r\nscripts/merge_fastq_statistics.py\t__version__ = \"2022.03.08\"\r\nscripts/merge_gtdbtk.py\t__version__ = \"2022.03.24\"\r\nscripts/merge_msa.py\t__version__ = \"2022.06.21\"\r\nscripts/merge_orf_mapping.py\t__version__ = \"2021.03.27\"\r\nscripts/metaeuk_wrapper.py\t__version__ = \"2022.08.27\"\r\nscripts/partition_clusters.py\t__version__ = \"2021.08.12\"\r\nscripts/partition_gene_models.py\t__version__ = \"2021.08.24\"\r\nscripts/partition_hmmsearch.py\t__version__ = \"2022.06.20\"\r\nscripts/partition_multisplit_bins.py\t__version__ = \"2022.04.08\"\r\nscripts/partition_orthogroups.py\t__version__ = \"2022.04.01\"\r\nscripts/partition_unbinned.py\t__version__ = \"2021.08.05\"\r\nscripts/scaffolds_to_bins.py\t__version__ = \"2021.03.26\"\r\nscripts/subset_table.py\t__version__ = \"2022.04.20\"\r\nscripts/subset_table_by_column.py\t__version__ = \"2022.04.20\"\r\n```",
        "html_url": "https://github.com/jolespin/veba/releases/tag/v1.0.0",
        "name": "VEBA_v1.0.0",
        "release_id": 77493409,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/jolespin/veba/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/jolespin/veba/releases/77493409",
        "value": "https://api.github.com/repos/jolespin/veba/releases/77493409",
        "zipball_url": "https://api.github.com/repos/jolespin/veba/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 12:30:37",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 76
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Getting started with *VEBA*",
        "type": "Text_excerpt",
        "value": "\n\n\n[*Installation and Database Configuration Guide*](install/README.md) for software installation and database configuration.\n\n[*Usage and Resource Requirements Guide*](bin/README.md) for parameters and module descriptions\n\n[*Walkthrough Guides*](walkthroughs/README.md) for tutorials and workflows on how to use VEBA\n\n[*Visual Guides*](https://www.youtube.com/@VEBA-Multiomics) for video walkthroughs on how to use VEBA\n\n[*Quick Guides*](walkthroughs/docs/interpreting_module_outputs.md) for interpreting module outputs.\n\n[*Test Data*](data/README.md) for testing installation/methods.\n\n\n**Usage Example:**\n\ne.g., Running `preprocess` module. \n\n1) Syntax compatible with Conda:\n\n```\nsource activate VEBA\nveba --module preprocess --params \"{PARAMS}\" \n```\n\n2) Syntax compatible with Conda and Docker/Singularity containers:\n\n```\nsource activate VEBA-preprocess_env\npreprocess.py \"{PARAMS}\"\n```\n\nCheck out the [*VEBA* Change Log](CHANGELOG.md) for details between each update and insight into what is being implemented in the upcoming version.\n\n<p align=\"right\"><a href=\"#readme-top\">^__^</a></p>\n\n___________________________________________________________________\n\n"
      },
      "source": "https://raw.githubusercontent.com/jolespin/veba/main/README.md",
      "technique": "header_analysis"
    }
  ]
}