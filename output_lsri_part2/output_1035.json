{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/cbib/virhunter"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-01-17T13:51:36Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-06-24T09:55:08Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Deep Learning method for novel virus detection in sequencing data"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9785115198607537,
      "result": {
        "original_header": "VirHunter",
        "type": "Text_excerpt",
        "value": "**VirHunter** is a tool that uses deep learning to identify viruses in plant virome sequencing datasets. In particular, VirHunter classifies previously assembled contigs into virus, host and bacteria classes.\n \n"
      },
      "source": "https://raw.githubusercontent.com/cbib/virhunter/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9971912348706856,
      "result": {
        "original_header": "Useful Info",
        "type": "Text_excerpt",
        "value": "* Recently we uploaded VirHunter to [Galaxy Europe](https://usegalaxy.eu/root?tool_id=toolshed.g2.bx.psu.edu/repos/iuc/virhunter/virhunter/1.0.0+galaxy1). This means that now you can run VirHunter on your data without installation!\n* If you want to get rid of phage or fungi contamination please check out [Decontaminator](https://github.com/cbib/decontaminator). \nIt goes well along with VirHunter!\n* Finally, [here](https://www.frontiersin.org/articles/10.3389/fbinf.2022.867111/full) is the original publication on VirHunter. Please cite it, when you use VirHunter.\nIf you are looking for a more practical explanation of VirHunter check out this [presentation](media/virhunter_description.pdf).\n \n"
      },
      "source": "https://raw.githubusercontent.com/cbib/virhunter/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9239090375650285,
      "result": {
        "original_header": "Using VirHunter for prediction",
        "type": "Text_excerpt",
        "value": "1. The first file ends with `_predicted_fragments.csv`\nIt is an intermediate result containing predictions of the three CNN networks (probabilities of belonging to each of the virus/plant/bacteria class) and of the RF classifier for each fragment of every contig. \n2. The second file ends with `_predicted.csv`. \nThis file contains final predictions for contigs calculated from the previous file. \n   - `id` - fasta header of a contig.\n   - `length` - length of the contig.\n   - `# viral fragments`, `# plant fragments` and `# bacterial fragments` - the number of fragments of the contig that received corresponding class prediction by the RF classifier.\n   - `decision` - class given by the VirHunter to the contig.\n   - `# viral / # total` - number of viral fragments divided by the total number of fragments of the contig. \n3. The optional fasta file ends with `_viral.fasta`. It contains contigs that were predicted as viral by VirHunter.\nTo generate it you need to set flag `return_viral` to `True` in the config file. \n`configs/predict_config.yaml` has a field `limit` that is used to discard contigs that are shorter than `limit` from prediction. \nWe tested limit of 750 in the paper and suggest using it as a default one. You can change the limit, but we do not guarantee VirHunter performance then. \n"
      },
      "source": "https://raw.githubusercontent.com/cbib/virhunter/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9316024855331138,
      "result": {
        "original_header": "Available models",
        "type": "Text_excerpt",
        "value": "We have trained 8 models of VirHunter:  _carrot_, _grapevine_, _lettuce_, _peach_, _rice_, _sugar beet_, _tomato_ and _generalistic_.\nThe last model was prepared with a mixture of plants from _dicots_ and _monocots_ clades.  \nWe recommend to use individual plant models, when the host plant of the virome belongs to the same family. \nIn other cases you can use _generalistic_ model.  \n"
      },
      "source": "https://raw.githubusercontent.com/cbib/virhunter/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9089195790060802,
      "result": {
        "original_header": "Training your own model",
        "type": "Text_excerpt",
        "value": "You can train your own model, for example for a specific host species. Before training, you need to collect sequence \ndata for training for three reference datasets: _viruses_, _bacteria_ and _host_. \nExamples are provided by running `scripts/download_test_installation.sh` that will download `viruses.fasta`, \n`host.fasta` and `bacteria.fasta` files (real reference datasets should correspond \ne.g. to the whole genome of the host, all bacteria and all viruses from the NCBI). \nTraining requires execution of the following steps:\n- prepare the training dataset for the neural network and Random Forest modules from fasta files with `prepare_ds.py`.\n- train the neural network and Random Forest modules with `train.py` \nThe training will be done twice - for fragment sizes of 500 and 1000. \nThe successful training of VirHunter produces weights for the three neural networks from the first module and weights for the \ntrained Random Forest classifier for fragment sizes of 500 and 1000. They can be subsequently used for prediction. \nTo execute the steps of the training you must first create a copy of the `template_config.yaml`. \nThen fill in the necessary parts of the config file. No need to fill in all tasks! \nOnce config file is filled you can launch the scripts consecutively providing them with the config file like this:\n```shell\npython virhunter/prepare_ds.py configs/config.yaml\n```\nAnd then\nBASH2*\nImportant to note, the suggested number of epochs for the training of neural networks is 10.\n \n"
      },
      "source": "https://raw.githubusercontent.com/cbib/virhunter/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9552252182746251,
      "result": {
        "original_header": "Training VirHunter on GPU",
        "type": "Text_excerpt",
        "value": "If you plan to train VirHunter on GPU, please use `environment_gpu.yml` or `requirements_gpu.txt` for dependencies installation.\nThose recipes were tested only on the Linux cluster with multiple GPUs.\nIf you plan to train VirHunter on cluster with multiple GPUs, you will need to uncomment line with\n`CUDA_VISIBLE_DEVICES` variable and replace `\"\"` with `\"N\"` in header of `train_nn.py`, where N is the number of GPU you want to use.\n```python\nimport os\nos.environ[\"CUDA_VISIBLE_DEVICES\"] = \"N\"\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/cbib/virhunter/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9458528963067544,
      "result": {
        "original_header": "VirHunter for galaxy",
        "type": "Text_excerpt",
        "value": "`virhunter_galaxy` folder contains modified scripts for the galaxy version of virhunter.\n \n"
      },
      "source": "https://raw.githubusercontent.com/cbib/virhunter/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/cbib/virhunter/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/cbib/virhunter/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "cbib/virhunter"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "VirHunter"
      },
      "source": "https://raw.githubusercontent.com/cbib/virhunter/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/cbib/virhunter/main/scripts/download_test_installation.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/cbib/virhunter/main/scripts/download_weights.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/cbib/virhunter/main/scripts/test_installation.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "VirHunter"
        ],
        "type": "Text_excerpt",
        "value": "To install VirHunter, you need to download it from github and then to install the dependencies.\n\nFirst, clone the repository from [github](https://github.com/cbib/virhunter)\n\n```shell\ngit clone https://github.com/cbib/virhunter.git\n```\n\nGo to the VirHunter root folder\n\n```shell\ncd virhunter/\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/cbib/virhunter/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing dependencies with Conda",
        "parent_header": [
          "VirHunter",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "First, you have to create the environment from the `envs/environment.yml` file. \nThe installation may take around 500 Mb of drive space. \n\n```shell\nconda env create -f envs/environment.yml\n```\n\nSecond, activate the environment:\n\n```shell\nconda activate virhunter\n```\n"
      },
      "source": "https://raw.githubusercontent.com/cbib/virhunter/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing dependencies with pip",
        "parent_header": [
          "VirHunter",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "If you don't have Conda installed in your system, you can install python dependencies via pip program:\n\n```shell\npip install -r envs/requirements.txt\n```\n\nThen if you have macOS you will need to install `wget` library to run some scripts (Conda installation already has it). You can do this with `brew` package manager.\n\n```shell\nbrew install wget\n```\n"
      },
      "source": "https://raw.githubusercontent.com/cbib/virhunter/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Testing your installation of VirHunter",
        "parent_header": [
          "VirHunter",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "You can test that VirHunter was successfully installed on the toy dataset we provide. \nIMPORTANT: the toy dataset is intended only to test that VirHunter has been well installed and all the scripts can be executed. \nThese modules should not be used for prediction on your owd datasets!\n\nFirst, you have to download the toy dataset\n```shell\nbash scripts/download_test_installation.sh\n```\nThen run the bash script that calls the testing, training and prediction python scripts of VirHunter.\nAttention, the training process may take some time (up to an hour).\n```shell\nbash scripts/test_installation.sh\n```\n"
      },
      "source": "https://raw.githubusercontent.com/cbib/virhunter/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Complex dataset preparation",
        "parent_header": [
          "VirHunter",
          "Training your own model"
        ],
        "type": "Text_excerpt",
        "value": "If you want to prepare dataset that would have host oversampling for chloroplast and CDS (like it was done in the paper), \nyou can use `prepare_ds_complex.py` script. Compared to `prepare_ds.py` it will require paths to CDS and chlroplast containing fasta files.\n"
      },
      "source": "https://raw.githubusercontent.com/cbib/virhunter/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9991214715998161,
      "result": {
        "original_header": "Using VirHunter for prediction",
        "type": "Text_excerpt",
        "value": "To run VirHunter you can use the already pre-trained models or train VirHunter yourself (described in the next section).\nPre-trained model weights are already available for the multiple host plants. \nYou can download them using the `download_weights.sh` script.\n```shell\nbash scripts/download_weights.sh \n```\n \nVirHunter supports prediction for multiple test files at once. \nFor that you need to change a bit the field `test_ds` in the\n`configs/predict_config.yaml`. \n```yaml\npredict:\n    test_ds:\n      - /path/to/test_ds_1\n      - /path/to/test_ds_2\n      - /path/to/test_ds_3  \n```\nOnce the config file is ready, you can start the prediction:\n```shell\npython virhunter/predict.py configs/predict_config.yaml\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/cbib/virhunter/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9957605119935868,
      "result": {
        "original_header": "Training your own model",
        "type": "Text_excerpt",
        "value": "To execute the steps of the training you must first create a copy of the `template_config.yaml`. \nThen fill in the necessary parts of the config file. No need to fill in all tasks! \nOnce config file is filled you can launch the scripts consecutively providing them with the config file like this:\n```shell\npython virhunter/prepare_ds.py configs/config.yaml\n```\nAnd then\nBASH2*\nImportant to note, the suggested number of epochs for the training of neural networks is 10.\n \n"
      },
      "source": "https://raw.githubusercontent.com/cbib/virhunter/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.999999999980389,
      "result": {
        "original_header": "Training VirHunter on GPU",
        "type": "Text_excerpt",
        "value": "If you plan to train VirHunter on GPU, please use `environment_gpu.yml` or `requirements_gpu.txt` for dependencies installation.\nThose recipes were tested only on the Linux cluster with multiple GPUs.\nIf you plan to train VirHunter on cluster with multiple GPUs, you will need to uncomment line with\n`CUDA_VISIBLE_DEVICES` variable and replace `\"\"` with `\"N\"` in header of `train_nn.py`, where N is the number of GPU you want to use.\n```python\nimport os\nos.environ[\"CUDA_VISIBLE_DEVICES\"] = \"N\"\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/cbib/virhunter/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8172575783355891,
      "result": {
        "original_header": "Using VirHunter for prediction",
        "type": "Text_excerpt",
        "value": "To run VirHunter you can use the already pre-trained models or train VirHunter yourself (described in the next section).\nPre-trained model weights are already available for the multiple host plants. \nYou can download them using the `download_weights.sh` script.\n```shell\nbash scripts/download_weights.sh \n```\n \nAfter prediction VirHunter produces two `csv` files and one optional `fasta` file: \n"
      },
      "source": "https://raw.githubusercontent.com/cbib/virhunter/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/cbib/virhunter/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# LICENSE MIT\n\nCopyright (c) 2022\n    Grigorii Sukhorukov (1,2)  (grigorii.sukhorukov@u-bordeaux.fr),\n    Macha Nikolski (1,2)    (macha.nikolski@u-bordeaux.fr)\n\n        (1) CBiB - University of Bordeaux,\n        146, rue Leo Saignat, 33076 Bordeaux, France\n\n        (2) CNRS, IBGC - University of Bordeaux,\n        1, rue Camille Saint-Saens, 33077 Bordeaux, France\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
      },
      "source": "https://raw.githubusercontent.com/cbib/virhunter/main/LICENSE.md",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/cbib/virhunter/main/media/logo.png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/cbib/virhunter/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "virhunter"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "cbib"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 85465,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 873,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/cbib/virhunter/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "System Requirements",
        "parent_header": [
          "VirHunter"
        ],
        "type": "Text_excerpt",
        "value": "VirHunter installation requires a Unix environment with [python 3.8](http://www.python.org/). \nIt was tested on Linux and macOS operating systems. \nFor now, VirHunter is still not fully compatible with M1 chip MacBook.\n\nIn order to run VirHunter you need to have git and conda already installed. \nIf you are installing conda for the first time, we suggest you to use \na lightweight [miniconda](https://docs.conda.io/en/latest/miniconda.html).\nOtherwise, you can use pip for the dependencies' installation.\n         "
      },
      "source": "https://raw.githubusercontent.com/cbib/virhunter/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing dependencies with Conda",
        "parent_header": [
          "VirHunter",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "First, you have to create the environment from the `envs/environment.yml` file. \nThe installation may take around 500 Mb of drive space. \n\n```shell\nconda env create -f envs/environment.yml\n```\n\nSecond, activate the environment:\n\n```shell\nconda activate virhunter\n```\n"
      },
      "source": "https://raw.githubusercontent.com/cbib/virhunter/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing dependencies with pip",
        "parent_header": [
          "VirHunter",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "If you don't have Conda installed in your system, you can install python dependencies via pip program:\n\n```shell\npip install -r envs/requirements.txt\n```\n\nThen if you have macOS you will need to install `wget` library to run some scripts (Conda installation already has it). You can do this with `brew` package manager.\n\n```shell\nbrew install wget\n```\n"
      },
      "source": "https://raw.githubusercontent.com/cbib/virhunter/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 12:58:17",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ]
}