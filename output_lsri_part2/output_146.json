{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "OTTERS: **O**mnibus **T**ranscriptome **T**est using **E**xpression **R**eference **S**ummary data",
        "type": "Text_excerpt",
        "value": "![OTTERS Framework](F1.png)\n\nA powerful TWAS framework leveraging summary-level reference data. \n\nWe provide an integrated tool that can \n -  perform LD-clumping \n -  prepare the required inputs (LD reference and eQTL summary statistics) in the required formats for P+T, lassosum, SDPR, and PRS-CS\n -  perform TWAS Stage I: run P+T, lassosum, SDPR, and PRS-CS to train eQTL weights.\n -  perform TWAS Stage II: gene-based association test using GWAS summary statistics.\n\nIn this tool, we \n - integrate [TABIX](http://www.htslib.org/doc/tabix.html) and [PLINK 1.9](https://www.cog-genomics.org/plink) tools to extract input data per target gene more efficiently\n - integrate [PRS-CS software](https://github.com/getian107/PRScs), [lassosum R package](https://github.com/tshmak/lassosum), and [SDPR software](https://github.com/eldronzhou/SDPR) to train eQTL weights\n - enable parallel computation to train GReX imputation models / perform gene-based association test simultaneously for multiple genes. \n\n"
      },
      "source": "https://raw.githubusercontent.com/daiqile96/OTTERS/main/README.html",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Required Inputs",
        "parent_header": [
          "OTTERS: **O**mnibus **T**ranscriptome **T**est using **E**xpression **R**eference **S**ummary data"
        ],
        "type": "Text_excerpt",
        "value": " - Annotation File should contain following columns with the same name in same order (text file): \n\n    | CHROM | GeneStart | GeneEnd |     TargetID    | \n    |:-----:|:---------:|:-------:|:---------------:|\n    |   1   |    100    |   200   |     ENSG0000    |\n\n    Example: Example/exp_anno.txt\n\n - Genotype data from LD reference panel in PLINK binary files :\n\n    Example: Example/Exp_geno.bed; Example/Exp_geno.bim; Example/Exp_geno.fam\n\n - eQTL summary statistics should contain following columns with the same name in same order (text file):\n\n    *Please sort by chromosome and then by SNP position in ascending order*\n\n    | CHROM | POS | A1 | A2 | Zscore |  TargetID   |   N  |\n    |:-----:|:---:|:--:|:--:|:------:|:-----------:|:----:|\n    |   1   | 100 |  C |  T |   3    |   ENSG0000  |  200 |\n\n    To convert a two-sided pvalue and beta (coefficients) to Zscore, in python, we can do:\n    ```python\n    import numpy as np\n    from scipy.stats import norm\n    Z = np.sign(beta) * abs(norm.ppf(pvalue/2.0))\n    ```\n    Example: Example/Exp_eQTLSumStats.txt\n\n - GWAS summary statistics should contain following columns with the same name in same order (text file):\n  \n    *Not required to be sorted*\n\n    | CHROM | POS | A1 | A2 | Zscore |  \n    |:-----:|:---:|:--:|:--:|:------:|\n    |   1   | 100 |  C |  T |   2    |\n\n    Example: Example/Exp_GWASSumStats.txt\n"
      },
      "source": "https://raw.githubusercontent.com/daiqile96/OTTERS/main/README.html",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Notes:",
        "parent_header": [
          "OTTERS: **O**mnibus **T**ranscriptome **T**est using **E**xpression **R**eference **S**ummary data"
        ],
        "type": "Text_excerpt",
        "value": "- OTTERS is based on [PLINK 1.9](https://www.cog-genomics.org/plink/), [PRS-CS software](https://github.com/getian107/PRScs), [lassosum R package](https://github.com/tshmak/lassosum), and [SDPR software](https://github.com/eldronzhou/SDPR). We really appreciate the authors of these softwares. \n"
      },
      "source": "https://raw.githubusercontent.com/daiqile96/OTTERS/main/README.html",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/daiqile96/OTTERS"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-03-12T01:12:08Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-26T06:11:18Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A powerful TWAS framework leveraging summary-level reference data"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "OTTERS: **O**mnibus **T**ranscriptome **T**est using **E**xpression **R**eference **S**ummary data",
        "type": "Text_excerpt",
        "value": "![OTTERS Framework](F1.png)\n\nA powerful TWAS framework leveraging summary-level reference data. \n\nWe provide an integrated tool that can \n -  perform LD-clumping \n -  prepare the required inputs (LD reference and eQTL summary statistics) in the required formats for P+T, lassosum, SDPR, and PRS-CS\n -  perform TWAS Stage I: run P+T, lassosum, SDPR, and PRS-CS to train eQTL weights.\n -  perform TWAS Stage II: gene-based association test using GWAS summary statistics.\n\nIn this tool, we \n - integrate [TABIX](http://www.htslib.org/doc/tabix.html) and [PLINK 1.9](https://www.cog-genomics.org/plink) tools to extract input data per target gene more efficiently\n - integrate [PRS-CS software](https://github.com/getian107/PRScs), [lassosum R package](https://github.com/tshmak/lassosum), and [SDPR software](https://github.com/eldronzhou/SDPR) to train eQTL weights\n - enable parallel computation to train GReX imputation models / perform gene-based association test simultaneously for multiple genes. \n\n"
      },
      "source": "https://raw.githubusercontent.com/daiqile96/OTTERS/main/README.html",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Required Inputs",
        "parent_header": [
          "OTTERS: **O**mnibus **T**ranscriptome **T**est using **E**xpression **R**eference **S**ummary data"
        ],
        "type": "Text_excerpt",
        "value": " - Annotation File should contain following columns with the same name in same order (text file): \n\n    | CHROM | GeneStart | GeneEnd |     TargetID    | \n    |:-----:|:---------:|:-------:|:---------------:|\n    |   1   |    100    |   200   |     ENSG0000    |\n\n    Example: Example/exp_anno.txt\n\n - Genotype data from LD reference panel in PLINK binary files :\n\n    Example: Example/Exp_geno.bed; Example/Exp_geno.bim; Example/Exp_geno.fam\n\n - eQTL summary statistics should contain following columns with the same name in same order (text file):\n\n    *Please sort by chromosome and then by SNP position in ascending order*\n\n    | CHROM | POS | A1 | A2 | Zscore |  TargetID   |   N  |\n    |:-----:|:---:|:--:|:--:|:------:|:-----------:|:----:|\n    |   1   | 100 |  C |  T |   3    |   ENSG0000  |  200 |\n\n    To convert a two-sided pvalue and beta (coefficients) to Zscore, in python, we can do:\n    ```python\n    import numpy as np\n    from scipy.stats import norm\n    Z = np.sign(beta) * abs(norm.ppf(pvalue/2.0))\n    ```\n    Example: Example/Exp_eQTLSumStats.txt\n\n - GWAS summary statistics should contain following columns with the same name in same order (text file):\n  \n    *Not required to be sorted*\n\n    | CHROM | POS | A1 | A2 | Zscore |  \n    |:-----:|:---:|:--:|:--:|:------:|\n    |   1   | 100 |  C |  T |   2    |\n\n    Example: Example/Exp_GWASSumStats.txt\n"
      },
      "source": "https://raw.githubusercontent.com/daiqile96/OTTERS/main/README.html",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Notes:",
        "parent_header": [
          "OTTERS: **O**mnibus **T**ranscriptome **T**est using **E**xpression **R**eference **S**ummary data"
        ],
        "type": "Text_excerpt",
        "value": "- OTTERS is based on [PLINK 1.9](https://www.cog-genomics.org/plink/), [PRS-CS software](https://github.com/getian107/PRScs), [lassosum R package](https://github.com/tshmak/lassosum), and [SDPR software](https://github.com/eldronzhou/SDPR). We really appreciate the authors of these softwares. \n"
      },
      "source": "https://raw.githubusercontent.com/daiqile96/OTTERS/main/README.html",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/daiqile96/OTTERS/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/daiqile96/OTTERS/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "daiqile96/OTTERS"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "OTTERS: Omnibus Transcriptome Test using Expression Reference Summary data"
      },
      "source": "https://raw.githubusercontent.com/daiqile96/OTTERS/main/README.html",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/daiqile96/OTTERS/main/Example/Exp_otters_env.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/daiqile96/OTTERS/main/F1.png"
      },
      "source": "https://raw.githubusercontent.com/daiqile96/OTTERS/main/README.html",
      "technique": "regular_expression"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/daiqile96/OTTERS/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "OTTERS"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "daiqile96"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 72025,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 4180,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 497,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/daiqile96/OTTERS/main/README.html"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/daiqile96/OTTERS/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://pysam.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/daiqile96/OTTERS/main/README.html",
      "technique": "regular_expression"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "daiqile96",
          "type": "User"
        },
        "date_created": "2023-01-24T13:05:32Z",
        "date_published": "2023-01-24T13:12:18Z",
        "description": "**Full Changelog**: https://github.com/daiqile96/OTTERS/commits/v1.0.0",
        "html_url": "https://github.com/daiqile96/OTTERS/releases/tag/v1.0.0",
        "name": "v1.0.0",
        "release_id": 90039449,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/daiqile96/OTTERS/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/daiqile96/OTTERS/releases/90039449",
        "value": "https://api.github.com/repos/daiqile96/OTTERS/releases/90039449",
        "zipball_url": "https://api.github.com/repos/daiqile96/OTTERS/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "installation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 09:32:53",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 19
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Getting Started",
        "parent_header": [
          "OTTERS: **O**mnibus **T**ranscriptome **T**est using **E**xpression **R**eference **S**ummary data"
        ],
        "type": "Text_excerpt",
        "value": "Download and install following required tools, modules, and packages:\n\n  - Download OTTERS using:\n    \n    ```bash\n    git clone https://github.com/daiqile96/OTTERS.git \n    ```\n\n  - [BGZIP](http://www.htslib.org/doc/bgzip.html) and [TABIX](http://www.htslib.org/doc/tabix.html)\n\n     *Here is my code to download and install BGZIP and TABIX:*\n\n     ```bash\n     wget https://sourceforge.net/projects/samtools/files/tabix/tabix-0.2.6.tar.bz2\n     tar jxvf tabix-0.2.6.tar.bz2\n     cd tabix-0.2.6\n     make\n\n     # copy the binary bgzip and tabix to my path: ~/projects/bin\n     cp bgzip tabix ~/projects/bin\n\n     # test if BGZIP and TABIX are successfully installed\n     export PATH=~/projects/bin:$PATH \n     bgzip\n     tabix\n     ```\n\n  - [PLINK 1.9](https://www.cog-genomics.org/plink/)\n    \n    *Here is my code to download and install PLINK 1.9:*\n\n    ```bash\n    # Download the latest binary of PLINK 1.9\n    wget https://s3.amazonaws.com/plink1-assets/plink_linux_x86_64_20220402.zip\n\n    # Unzip the archive\n    unzip plink_linux_x86_64_20220402.zip -d ~/projects/bin\n\n    # Remove archive\n    rm plink2_linux_x86_64_latest.zip\n\n    # Test if PLINK 1.9 is successfully installed\n    export PATH=~/projects/bin:$PATH \n    plink\n    ```\n  - To permanently store the path, please add `export PATH=~/projects/bin:$PATH` to your ~/.bash_profile (or ~/.bashrc).\n\n    Then reload file .bash_profile from the command line:\n    ```bash\n    source ~/.bash_profile\n    ```\n\n  - Python modules/libraries:\n\n    - [pandas 1.4.4](https://pandas.pydata.org)\n    - [scipy 1.7.3](https://scipy.org)\n    - [numpy 1.21.5](https://numpy.org)\n    - [pysam 0.19.1](https://pysam.readthedocs.io/en/latest/api.html) \n\n    If you're new to python, [here](Example/Exp_otters_env.sh) is an example to set up the Python Environment to use OTTERS.\n\n  - To apply SDPR and lassosum as imputation models, please install:\n    - [SDPR](https://github.com/eldronzhou/SDPR) to perform SDPR\n      \n      *Here is my code to download SDPR*\n      \n      ```bash\n      cd ~/projects/bin\n      git clone https://github.com/eldronzhou/SDPR.git\n\n      # make sure that dynamic libraries gsl/lib/libgsl.so and MKL/lib/libmkl_rt.so are not changed\n      export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/projects/bin/SDPR/MKL/lib\n      export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/projects/bin/SDPR/gsl/lib\n      ```\n      **Please make sure that dynamic libraries are not changed every time when use SDPR.**\n    \n    - R packages:\n      - [lassosum](https://github.com/tshmak/lassosum) to perform lassosum (lassosum requires several R packages, please follow the lassosum installation guidance to install all of them).\n      - [fdrtool](https://cran.r-project.org/web/packages/fdrtool/index.html) to perform pseudo-validation implemented in lassosum. \n    \n"
      },
      "source": "https://raw.githubusercontent.com/daiqile96/OTTERS/main/README.html",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example:",
        "parent_header": [
          "OTTERS: **O**mnibus **T**ranscriptome **T**est using **E**xpression **R**eference **S**ummary data"
        ],
        "type": "Text_excerpt",
        "value": "  ```bash\n  # activate the environment\n  conda activate otters\n\n  # set number of threads to be used\n  N_THREADS=1\n\n  # set up my OTTERS directory and SDPR directory\n  OTTERS_DIR=/home/qdai8/projects/bin/OTTERS\n  SDPR_DIR=/home/qdai8/projects/bin/SDPR\n\n  # make sure the dynamic libraries of SDPR are not changed (For SDPR)\n  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:${SDPR_DIR}/MKL/lib\n  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:${SDPR_DIR}/gsl/lib\n\n  # prevent automatically using  all available cores on a compute node (For SDPR and PRS-CS)\n  export MKL_NUM_THREADS=$N_THREADS\n  export NUMEXPR_NUM_THREADS=$N_THREADS\n  export OMP_NUM_THREADS=$N_THREADS\n\n  # Load R to perform lassosum\n  module load R\n\n  # Start to run OTTERS\n  cd ${OTTERS_DIR}/Example\n\n  # Input for OTTERS STAGE I \n  # Annotation File \n  exp_anno=exp_anno.txt\n  # Genotype data from LD reference panel\n  geno_dir=Exp_geno\n  # eQTL summary statistics \n  sst_file=Exp_eQTLSumStats.txt\n  # Input for OTTERS STAGE II\n  # GWAS summary statistics \n  gwas_sst_file=Exp_GWASSumStats.txt\n\n  # Set chromosome number (The example is for chromosome 4)\n  chr=4\n  # Set LD-clumping threshold in STAGE I\n  clump_r2=0.99\n  # Set output directory for STAGE I\n  out_dir=Results\n  \n  # STAGE I\n  # train eQTL weights using P+T, lassosum, SDPR and PRS-CS. \n  # It may take several minutes to complete.\n  python3 ${OTTERS_DIR}/training.py \\\n  --OTTERS_dir=${OTTERS_DIR} \\\n  --SDPR_dir=${SDPR_DIR} \\\n  --anno_dir=${exp_anno} \\\n  --geno_dir=${geno_dir} \\\n  --sst_file=${sst_file} \\\n  --out_dir=${out_dir} \\\n  --chrom=${chr} \\\n  --r2=${clump_r2} \\\n  --models=PT,lassosum,SDPR,PRScs \\\n  --thread=$N_THREADS\n  \n  # Set output directory for STAGE II\n  twas_dir=TWAS\n\n  # STAGE II\n  # gene-based association test using eQTL-weight trained from P+T, lassosum, SDPR and PRS-CS.\n  python3 ${OTTERS_DIR}/testing.py \\\n  --OTTERS_dir=${OTTERS_DIR} \\\n  --weight_dir=${OTTERS_DIR}/Example/Results \\\n  --models=P0.001,P0.05,lassosum,SDPR,PRScs \\\n  --anno_dir=${exp_anno} \\\n  --geno_dir=${geno_dir} \\\n  --out_dir=${twas_dir} \\\n  --gwas_file=${gwas_sst_file} \\\n  --chrom=${chr} \\\n  --thread=$N_THREADS\n\n  # get imputed genetically regulated gene expression\n  impute_dir=GReX\n  # samples to perform imputation\n  samples=Exp_samples.txt\n  # imputation\n  python3 ${OTTERS_DIR}/imputing.py \\\n  --OTTERS_dir=${OTTERS_DIR} \\\n  --weight_dir=${OTTERS_DIR}/Example/Results \\\n  --models=P0.001,P0.05,lassosum,SDPR,PRScs \\\n  --anno_dir=${exp_anno} \\\n  --geno_dir=${geno_dir} \\\n  --out_dir=${impute_dir} \\\n  --chrom=${chr} \\\n  --samples=${samples} \\\n  --thread=$N_THREADS\n  ```\n"
      },
      "source": "https://raw.githubusercontent.com/daiqile96/OTTERS/main/README.html",
      "technique": "header_analysis"
    }
  ]
}