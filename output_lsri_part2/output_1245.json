{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/smilejeen/PNGseqR"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-04-10T07:35:09Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-21T11:36:59Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9540558259964511,
      "result": {
        "original_header": "Rapid candidate gene Selection and Visualization through multiple Bulk Segregate Analysis with next-generation sequencing",
        "type": "Text_excerpt",
        "value": "PNGseqR provides a convenient tool to map genetic loci controlling both quantitative and qualitative trait by performing BSA analysis, which integrates multiple algorithms and methods to indicate the magnitude of genome wide signals and to define the candidate regions, and prioritizes the causal genes through DEG and GO analysis. It takes single nucleotide polymorphism (SNP) markers from Next-generation sequencing (NGS) data in Variant Call Format (VCF) format as the input file, and provides four published BSA algorithms to rapidly define the candidate region through permutation test and fractile quantile. Users can choose the appropriate methods according to their data and experimental design. In addition, it also supports performing DEG analysis and GO analysis in order to prioritize the target gene. Once the analysis is completed, the plots can conveniently be exported. \nPNGseqR is still under development and is offered with out any guarantee, our article has also been published\uff0cuser can download through  https://www.mdpi.com/2223-7747/11/14/1821/pdf for more detailed information \nPNGseqR was developed in R version `3.5.0` and depends on a number of packages for various aspects of its implementation  \n"
      },
      "source": "https://raw.githubusercontent.com/smilejeen/PNGseqR/main/ReadMe.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8628791518954908,
      "result": {
        "original_header": "Table of Contents",
        "type": "Text_excerpt",
        "value": "**If you use PNGseqR in published research, please cite:** \nWe also recommend citing the paper for the corresponding method you work with. \n\u25b3SNP method: \n> Takagi, H., Abe, A., Yoshida, K., Kosugi, S., Natsume, S., Mitsuoka, C., Uemura, A., Utsushi, H., Tamiru, M., Takuno, S., Innan, H., Cano, L. M., Kamoun, S. and Terauchi, R. (2013), QTL-seq: rapid mapping of quantitative trait loci in rice by whole genome resequencing of DNA from two bulked populations. *Plant J*, 74: 174\u2013183. [doi:10.1111/tpj.12105](https://onlinelibrary.wiley.com/doi/full/10.1111/tpj.12105) \nG prime method: \n> Magwene PM, Willis JH, Kelly JK (2011) The Statistics of Bulk Segregant Analysis Using Next Generation Sequencing. *PLOS Computational Biology* 7(11): e1002255. [doi.org/10.1371/journal.pcbi.1002255](http://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1002255) \nEuclidean Distance method: \n> Hill JT, Demarest BL, Bisgrove BW, Gorsi B, Yost HJ (2013) Mmappr: mutation mapping analysis pipeline for pooled rna-seq. Genome Research 23(4):687-697. [doi: 10.1101/gr.146936.112](https://genome.cshlp.org/content/23/4/687) \n"
      },
      "source": "https://raw.githubusercontent.com/smilejeen/PNGseqR/main/ReadMe.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8913927188627266,
      "result": {
        "original_header": "Input files",
        "type": "Text_excerpt",
        "value": "<ol>\n<li>a dataset containing reads count of replicate samples for bulks</li>\n<li>go terms corresponding to gene id for analysis species</li> \n<li>a dataset in GTF format contain the position information of genes</li>\n</ol> \nThe formatting parameters of required and all optional input files are summarized below.\n \n"
      },
      "source": "https://raw.githubusercontent.com/smilejeen/PNGseqR/main/ReadMe.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9825074193712109,
      "result": {
        "original_header": "vcf_data",
        "type": "Text_excerpt",
        "value": "**Column**|**Description**\n-----|:-----\n  `CHROM`|The chromosome which SNP fall in. Data type: character\n  `POS`|The position on each chromosome of SNP, in base pairs. Data type: character\n  `ID`|The name of each SNP. Data type: character  \n  `REF`|The base type at this position of reference genome. Data type: character\n  `ALT`|Compare to the reference genome,the of alternative base type at this position. Data type: character\n  `QUAL`|Quality value of variation site detection. Data type: character \n  `FILTER`|Used to judge if the site passed the filter criteria. Data type: character\n  `FORMAT`|Including the genotype information(GT),allele depth in each sample information(AD), total depth of this site information(DP), Genotype quality value(GQ), Likelihood value of genotype(PL). Data type: character  \n  `BULK1`|The value cprresponding to FORMAT in BULK1 sample, i.e. \"B73_MU\". Data type: character \n  `BULK2`|The value cprresponding to FORMAT in BULK2 sample, i.e. \"B73_WT\". Data type: character  \n"
      },
      "source": "https://raw.githubusercontent.com/smilejeen/PNGseqR/main/ReadMe.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9747338203464218,
      "result": {
        "original_header": "DEG_reads",
        "type": "Text_excerpt",
        "value": "`DEG_reads` is an optional dataframe containing multiple replicates reads count of each bulk, one row per gene, with at least five columns: \n**Column**|**Description**\n-----|:-----\n  `Gene id`|Gene symbol/name used for differential expression analysis refers to. Data type: character\n  `BULK1-1`|Reads number of each gene in the first sample of bulk1 replicate. Data type: integer\n  `BULK1-2`|Reads number of each gene in the second sample of bulk1 replicate. Data type: integer\n  `BULK1-n`|Reads number of each gene in the nth sample of bulk1*Note: DEG_reads can contain multiple samples such as BULK1-4, BULK1-5 but the number of sample must corresponding with BULK2-n*. Data type: integer \n  `BULK2-1`|Reads number of each gene in the first sample of bulk2 replicate. Data type: integer\n  `BULK2-2`|Reads number of each gene in the second sample of bulk2 replicate. Data type: integer\n  `BULK2-n`|Reads number of each gene in the nth sample of bulk2*Note: DEG_reads can contain multiple samples such as BULK2-4, BULK2-5 but the number of sample must corresponding with BULK1-n*. Data type: integer \n```\n> data(\"DEG_reads.example\")\n> tail(DEG_reads.example)\n             Gene id  MU1  MU2  WT1  WT2\n46113 Zm00001d054106 1606 1810 1318 1431\n46114 Zm00001d054107 4746 4490 5527 7359\n46115 Zm00001d054109    0    0    0    0\n46116 Zm00001d054110   55   46   16    4\n46117 Zm00001d054111    6    4   27   10\n46118 Zm00001d054112   26    5   29   23\n```\n  \n<p>&nbsp;</p>\n \n"
      },
      "source": "https://raw.githubusercontent.com/smilejeen/PNGseqR/main/ReadMe.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9522104622694054,
      "result": {
        "original_header": "GO_Term",
        "type": "Text_excerpt",
        "value": "`GO_Term` is an optional data frame, one row per gene and a go term, which should contain the following columns:  \n"
      },
      "source": "https://raw.githubusercontent.com/smilejeen/PNGseqR/main/ReadMe.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.921898149999898,
      "result": {
        "original_header": "gtf_data",
        "type": "Text_excerpt",
        "value": "`gtf_data` is an optional GRanges object with 6 ranges and 15 metadata columns which should contain the following columns:  \n*Note: The example is a dataset containing part of maize genes positional information of B73 version4 from ensembl plant(ftp://ftp.ensemblgenomes.org/pub/plants/release-34/gtf/zea_mays/Zea_mays.AGPv4.34.gtf.gz)* \n**Column**|**Description**\n-----|:-----\n`seqnames`|The ID of the sequence, which can be the ID of chromosome, scaffold or contig.. Data type: factor\n`start`|The start position of the feature on the sequence. Data type: integer\n`end`|The end position of the feature on the sequence. Data type: integer\n`width`|The width of the feature on the sequence. Data type: integer\n`source`|The source of this file. Data type: factor\n`type`|The feature represented by the region between start and end can be gene, non coding RNA, TE, exon, trascript, etc. Data type: factor\n`score`|A floating-point value. When there is a value, it represents the reliability of the above features. Data type: numeric\n`phase`|Only valid for comment type \"CDS\", indicating the position of the starting code. The valid values are 0, 1 and 2. Data type: integer\n`gene_id`|The name of this sequence. Data type: character\n`gene_biotype`|optional column.The biological type of this sequence such as gene, lincRNA, snoRNA, etc. Data type: character\n`transcript_id`|The name of this sequence, if the sequence is a transcript. Data type: character\n`transcript_source`|optional column.The source of this transcript. Data type: character\n`transcript_biotype`|optional column.The biological type of this sequence. Data type: character\n`exon_number`|optional column.The exon number of the transcript. Data type: character\n`exon_id`|optional column.The name of exon if above feature is an exon. Data type: character\n`protein_id`|optional column.The name of corresponding protein. Data type: character\n`protein_version`|optional column.The version of protein function annotation. Data type: character\n`gene_name`|optional column.indicate the function of gene. Data type: character\n```\n> library(rtracklayer)\n> gtf_data.example <- import(\"zma.v4.example.gtf\")\n> head(gtf_data.example)\nGRanges object with 6 ranges and 15 metadata columns:\n      seqnames      ranges strand |   source        type     score     phase        gene_id  gene_source   gene_biotype       transcript_id transcript_source transcript_biotype  exon_number                exon_id          protein_id protein_version   gene_name\n         <Rle>   <IRanges>  <Rle> | <factor>    <factor> <numeric> <integer>    <character>   <character>    <character>         <character>       <character>        <character>      <character>          <character>         <character>     <character> <character>\n  [1]        8 77622-80307      + |  gramene gene               NA      <NA> Zm00001d008171    gramene protein_coding                <NA>              <NA>               <NA>              <NA>                   <NA>                <NA>            <NA>        <NA>\n  [2]        8 77622-80307      + |  gramene transcript         NA      <NA> Zm00001d008171    gramene protein_coding Zm00001d008171_T001           gramene     protein_coding              <NA>                   <NA>                <NA>            <NA>        <NA>\n  [3]        8 77622-78130      + |  gramene exon               NA      <NA> Zm00001d008171    gramene protein_coding Zm00001d008171_T001           gramene     protein_coding              <NA>                   <NA>                <NA>            <NA>        <NA>\n  [4]        8 77951-78130      + |  gramene CDS                NA         0 Zm00001d008171    gramene protein_coding Zm00001d008171_T001           gramene     protein_coding                 1 Zm00001d008171_T001...                <NA>            <NA>        <NA>\n  [5]        8 77951-77953      + |  gramene start_codon        NA         0 Zm00001d008171    gramene protein_coding Zm00001d008171_T001           gramene     protein_coding                 1                   <NA> Zm00001d008171_P001               1        <NA>\n  [6]        8 78839-79033      + |  gramene exon               NA      <NA> Zm00001d008171    gramene protein_coding Zm00001d008171_T001           gramene     protein_coding                 2 Zm00001d008171_T001...                <NA>            <NA>        <NA>\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/smilejeen/PNGseqR/main/ReadMe.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9844790535111791,
      "result": {
        "original_header": "Function arguments",
        "type": "Text_excerpt",
        "value": "Function | Parameter | Description\n-----|-----|-----\n`vcf2table()`| | The function converts file in VCF format into a data frame\n``|file|The name of genotype file in VCF format from GATK SNP calling pipeline\n``|BulkA|The sample name of one bulk\n``|BulkB|The sample name of the other bulk\n``|chromlist|A string vector of the chromosomes to be used in the analysis, used to filter out unneeded contigs etc.\n`BSA_filter()`| |The function to filter SNPs based on read depth and quality of each bulk\n``|file|The data frame exported by vcf2table()\n``|Bulk.DP|The minimum total read depth for a SNP\n``|Bulk2.Ref|The minimum read depth of a reference SNP allele \n``|Bulk2.Alt|The minimum read depth of a alternative SNP allele\n``|Depth.diff|The maximum absolute differences between the read depths of the bulks\n``|min.GQ|The minimum Genotype Quality output by GATK\n``|verbose|Default value is \u201cTRUE\u201d. If the value is \"TRUE\", the number of SNPs filtered in each step will print\n`DeltaSNP()`| |The function to perform BSA analysis with \u25b3SNP algorithm\n``|file|The data frame exported by BSA_filter()\n``|Windowsize|A numeric value indicates the window size (in base pairs) containing SNPs subjected to calculating \u25b3SNP\t\n``|threshold|From 0 to 1, default value is \u201c0.95\u201d. A numeric threshold value to extract candidate region by fractile quantile\n``|pval|A numeric threshold value. Default value is \u201c0.05\u201d\n`Bayesian()`| |The function to perform BSA analysis with empirical bayesian algorithm \n``|file|The data frame exported by BSA_filter()\n``|Bulksize|The number of samples in each pool\n``|Genomelength|The total length of reference genome\n``|Windowsize|A numeric value indicates the window size (in base pairs) containing SNPs subjected to calculating empirical bayesian\n``|threshold|From 0 to 1, default value is \u201c0.95\u201d. A numeric threshold value to extract candidate region by fractile quantile\n``|pval|A numeric threshold value. Default value is \u201c0.05\u201d\n`ED()`| |The function to perform BSA analysis with Euclidean distance algorithm\n``|file|The data frame exported by BSA_filter() \n``|power|A numeric value indicates the power to raise ED. It was suggested to be 4~6\n``|Windowsize|A numeric value indicates the window size (in base pairs) containing SNPs subjected to calculating Euclidean distance\n``|threshold|From 0 to 1, default value is \u201c0.95\u201d. A numeric threshold value to extract candidate region by fractile quantile\n``|pval|A numeric threshold value, default value is \u201c0.05\u201d\n`Gprime()`| |The function to perform BSA analysis with G-test algorithm\t\n``|file|The data frame exported by BSA_filter()\n``|Windowsize|A numeric value indicates the window size (in base pairs) containing SNPs subjected to calculating G statistic\n``|threshold|From 0 to 1, default value is \u201c0.95\u201d. A numeric threshold value to extract candidate region by fractile quantile\n``|pval|A numeric threshold value. Default value is \u201c0.05\u201d\n`plot_BSA()`| |The function to output BSA analysis result into scatter and line plots\n``|file|The data frame exported by the BSA analysis functions \n``|chromlist|A string vector of the chromosome names used to plot line plots specific chromosomes, default value is \u201cNULL\u201d\n``|type|A character to indicate the selected algorithm\t\n``|file.name|A character to name the output plot\n``|threshold|From 0 to 1, default value is \u201cNULL\u201d. The red threshold line displayed in the output plot\n``|pval|Default value is \u201cNULL\u201d. A numeric threshold value drawn in blue line in the output plot\n`DEG_analysis()`| |The function to perform differential expression analysis\n``|file|A data frame containing read count of each pool\n``|rep.num|A numeric value indicates the number of replications in differential expression analysis\n``|sig.level|A numeric value indicates the FDR threshold in differential expression analysis \n``|exp.fold|A numeric value indicates the log2FoldChange threshold in differential expression analysis \n``|plot|Default value is \u201cTRUE\u201d. If \"TRUE\", the volcano plot will be created\n`GO_analysis()`| |The function to perform GO analysis\n``|GO_term|A data frame contains at least two columns, one column is genes' name and the other column is the GO term\n``|DEG_id|A vector containing the names of the differential expression genes\n``|type|A character indicates the mode of GO analysis. There are four options: \"CC\" indicates cellular component; \"BP\" indicates biological process, \"MF\" indicates molecular function, and \"all\" indicates all three modes. The default is \u201call\u201d\n``|algorithm|A character indicates the algorithm for GO analysis. Three options \"classic\",\"weight01\", and \"elim\" indicate three different algorithms\n``|statistic|A character indicates two different significance test methods. Two options \"fisher\" and \"ks\" indicates two different methods\n``|top_num|A numeric value to indicate the number of significant GO terms\n``|plot|Default value is \u201cTRUE\u201d. If \"TRUE\", the acyclic, bubble, and histogram plots will be created\n`result_anno()`| |The function to extract genes fall in the candidate region and judge whether gene is differential expression\n``|BSA_data|A data frame contains three columns, including the chromosome name, the start and the end positions of the candidate regions\n``|gtf_data|The name of reference genome in GTF format\n``|DEG_data|A vector containing the names of differential expression genes,default is \"NULL\" \n"
      },
      "source": "https://raw.githubusercontent.com/smilejeen/PNGseqR/main/ReadMe.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/smilejeen/PNGseqR/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/smilejeen/PNGseqR/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "smilejeen/PNGseqR"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PNGseqR"
      },
      "source": "https://raw.githubusercontent.com/smilejeen/PNGseqR/main/ReadMe.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/smilejeen/PNGseqR/main/BSA_analysis_plots.jpg"
      },
      "source": "https://raw.githubusercontent.com/smilejeen/PNGseqR/main/ReadMe.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/smilejeen/PNGseqR/main/expression_analysis_plots.jpg"
      },
      "source": "https://raw.githubusercontent.com/smilejeen/PNGseqR/main/ReadMe.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.984215900903125,
      "result": {
        "original_header": "Table of Contents",
        "type": "Text_excerpt",
        "value": "\n ## Installation\n  \nPNGseqR can be install using `devtools`, either directly from GitHub, \n`devtools::install_github(\"https://github.com/smilejeen/PNGseqR\")` \nor by downloading the repository to your computer, unzipping, and installing the `PNGseqR` folder. \n`devtools::install(\"PNGseqR\")` \nor users can download the archive file from \u201chttps://github.com/smilejeen/PNGseqR/raw/main/PNGseqR_0.0.0.9.tar.gz\u201d, \nand installed the package by following command: \n`install.packages(\"{Your PATH}/PNGseqR_0.0.0.9.tar.gz\", repos = NULL, type = \"source\")` \n**Note:** Apart from regular package dependencies, there are some Bioconductor tools that we use as well, as such you will be prompted to install support for Bioconductor, if you haven\u2019t already. Because of this, in order to install PNGseqR from github you will be required to install some compiling tools (Rtools for Windowsand Mac, respectively). \n"
      },
      "source": "https://raw.githubusercontent.com/smilejeen/PNGseqR/main/ReadMe.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9299172958992767,
      "result": {
        "original_header": "Input files",
        "type": "Text_excerpt",
        "value": "<ol>\n<li>genotype information of SNP Calling in VCF format(produce from GATK https://github.com/broadinstitute/gatk/releases VCF format http://gatkforums.broadinstitute.org/discussion/1268/how-should-i-interpret-vcf-files-produced-by-the-gatk) </li>\n</ol> \n\nThree optional data frames may also be supplied: \n"
      },
      "source": "https://raw.githubusercontent.com/smilejeen/PNGseqR/main/ReadMe.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8784811259096377,
      "result": {
        "original_header": "gtf_data",
        "type": "Text_excerpt",
        "value": "*Note: The example is a dataset containing part of maize genes positional information of B73 version4 from ensembl plant(ftp://ftp.ensemblgenomes.org/pub/plants/release-34/gtf/zea_mays/Zea_mays.AGPv4.34.gtf.gz)* \n"
      },
      "source": "https://raw.githubusercontent.com/smilejeen/PNGseqR/main/ReadMe.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8073739016024999,
      "result": {
        "original_header": "Function arguments",
        "type": "Text_excerpt",
        "value": "**Required Arguments** \n"
      },
      "source": "https://raw.githubusercontent.com/smilejeen/PNGseqR/main/ReadMe.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/smilejeen/PNGseqR/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PNGseqR"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "smilejeen"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 51957,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/smilejeen/PNGseqR/main/ReadMe.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 13:43:56",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Use Examples:",
        "parent_header": [
          "PNGseqR"
        ],
        "type": "Text_excerpt",
        "value": "This is a basic example which shows you how to import and analyze\nNGS-BSA data.\n\n``` r\n\n#load the package\nlibrary(\"PNGseqR\")\n\n#Set file and sample names\nfl <- \"snp.vcf\"\nMutBulk <- \"B73_MU\"\nWtBulk <- \"B73_WT\"\n\n\n\n#Choose which chromosomes will be included in the analysis (i.e. exclude smaller contigs)\nseqname <- c(1:10)\n\n\n#Import SNP data from file\ndf <- vcf2table(\n        file = fl,\n        BulkA = MutBulk,\n        BulkB = WtBulk,\n        chromlist = seqname\n     )\n\nhead(df) # The genotype data frame convert from vcf file\n\n#Filter SNPs based on some criteria\ndata_filt <- BSA_filter(file=df,\n                        Bulk.DP=6,\n                        Bulk2.Ref=3,\n                        Bulk2.Alt=3,\n                        Depth.diff=100,\n                        min.GQ=99,\n                        verbose = TRUE)\n\nhead(data_filt) # The remaining SNPs after filter\n\t\t\t\t\t \n```\n"
      },
      "source": "https://raw.githubusercontent.com/smilejeen/PNGseqR/main/ReadMe.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Four algorithms for BSA analysis, for more detailed instructions please read the supplement materials",
        "parent_header": [
          "PNGseqR",
          "Use Examples:"
        ],
        "type": "Text_excerpt",
        "value": "``` r\t\t\n\t\t\t \n#BSA analysis\n\n#Run Delta SNP analysis\ndf_deltaSNP <- DeltaSNP(file = data_filt,\n                        Windowsize = 5e6,\n                        threshold = 0.995,\n                        pval = 0.001)\n\nhead(df_deltaSNP$total.result) # The total analysis result \nhead(df_deltaSNP$sigthreshold) # The SNPs selected based on the fractile quntile threshold\nhead(df_deltaSNP$sigpval.result) #The SNPs selected based on the permutation test threshold\n\n#Run Baysian analysis\ndf_bayes <- Bayesian(file = data_filt,\n                     Bulksize = 30,     #The number of samples in the mixing bulks is 30\n                     Genomelength = 2338,\n                     Windowsize = 5e6,\n                     threshold = 0.995,\n                     pval = 0.001)\n\n#Run Euclidean Distance analysis\ndf_ED <- ED(file = data_filt,\n            power = 4,\n            Windowsize = 5e6,\n            threshold = 0.995,\n            pval = 0.001)\n\n#Run G-test analysis\ndf_G <- Gprime(file = data_filt,\n               Windowsize = 5e6,\n               threshold = 0.995,\n               pval = 0.001)\n\t\t\t   \n```\n"
      },
      "source": "https://raw.githubusercontent.com/smilejeen/PNGseqR/main/ReadMe.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Figure 1",
        "parent_header": [
          "PNGseqR",
          "Use Examples:",
          "Four algorithms for BSA analysis, for more detailed instructions please read the supplement materials"
        ],
        "type": "Text_excerpt",
        "value": "![](https://github.com/smilejeen/PNGseqR/blob/main/BSA_analysis_plots.jpg)\nFigure 1 Candidate region identified by different algorithms in PNGseqR for maize small kernel mutant. Plots produced by the *plot_BSA()* function with a 5 Mb sliding window: (A-D).The scatter plots exported from the BSA results, the used algorithms are \u0394(SNP-index), empirical bayes, ED, and G-test. (E-H) the tricube-smoothed values on the genome. Red line threshold shows the region containing SNPs whose tricube-smoothed values are higher than 99.5% of all values, and blue line threshold shows the SNPs whose P-values are lower than 0.001 based on permutation test.\n \n``` r\t\t\t  \n#Plot\n\n##deltaSNP\nplot_BSA(file = df_deltaSNP$total.result,\n         chromlist = seqname,\n         type = \"DeltaSNP\",\n         file.name = \"DS\",\n         threshold = 0.995,\n              pval = 0.001)\n         \n##Baysian\nplot_BSA(file = df_bayes$total.result,\n         chromlist = seqname,\n         type = \"Bayesian\",\n         file.name = \"Bayesian\",\n         threshold = 0.995,\n         pval = 0.001)\n\n##Euclidean Distance\nplot_BSA(file = df_ED$total.result,\n         chromlist = seqname,\n         type = \"ED\",\n         file.name = \"ED\",\n         threshold = 0.995,\n         pval = 0.001)\n\n##Gprime\nplot_BSA(file = df_G$total.result,\n         chromlist = seqname,\n         type = \"Gprime\",\n         file.name = \"Gprime\",\n         threshold = 0.995,\n         pval = 0.001)\n\t\t \n```\n"
      },
      "source": "https://raw.githubusercontent.com/smilejeen/PNGseqR/main/ReadMe.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Figure 2",
        "parent_header": [
          "PNGseqR",
          "Use Examples:",
          "Plots for DEG analysis and GO analysis,the plot can be found"
        ],
        "type": "Text_excerpt",
        "value": "![](https://github.com/smilejeen/PNGseqR/blob/main/expression_analysis_plots.jpg)\nFigure 2 Differential expression analysis and GO analysis for maize small kernel mutant. (A) The volcano plot shows the DEGs for maize small kernel mutant, the analysis was performed by using *DEG_analysis()*. (B) The histogram shows the result of GO analysis for maize small kernel mutant, the analysis was performed by using *GO_analysis()*. Top 20 terms of each mode (BP, CC, MF) are showed in this plot. (C)  A part of directed acyclic plot plotted by using the \u201cMF\u201d mode of *GO_analysis()*. (D)  Bubble plot shows the result of GO analysis, the GO terms are same as (B). \n\n\n``` r\n#Differential expression analysis\n\n## Set data and parameters\nDEG_reads <- DEG_reads.example\nrep <- 2\npvalue <- 0.05\nlog2fold <- 1.5\nres <- DEG_analysis(file = DEG_reads,\n                    rep.num = rep,\n                    sig.level = pvalue,\n                    exp.fold = log2fold,\n                    file.name = \"test\",\n                    plot = TRUE)\n\nhead(res$DEG_total) # The differential expression of all genes\nhead(res$DEG_sig) # The significant differential expression genes based on the threshold\n\n#GO analysis\n## Set data and parameters\nsigDEG <- res$DEG_sig\ngeneid <- sigDEG$id\ngo_term <- GO_Term.example\nmode <- \"all\"\nalgorithm <- \"classic\"\nstatistic <- \"fisher\"\nnum <- 20\n\nGO_result <- GO_analysis(GO_term = go_term,\n                         DEG_id = geneid,\n                         type = mode,\n                         algorithm = algorithm,\n                         statistic = statistic,\n                         top_num = num,\n                         plot = TRUE)\n\nhead(GO_result) # Get the top significant gene ontology analysis result\n\nwrite.table(GO_result,\"GO_terms.txt\",sep = \"\\t\",quote = F,row.names = F)\n\n#result annotation\n## Set data and parameters\ngtf <- \"zma.v4.example.gtf\"\nchr <- 8\nstart <- 79943\nend <- 3418075\nBSA_position <- data.frame(chr,start,end) # Construct the candidate region of data frame format\n\nsigDEG <- res$DEG_sig\n\n                           \nBSA_gene <- result_anno(BSA_data = BSA_position,\n                        gtf_data = gtf,\n                        DEG_data = sigDEG)\n\nBSA_gene$genes_in_region # The genes fall in the candidate region\nBSA_gene$DEGgenes_in_region # The differential expression genes fall in the candidate region\n\n```\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n"
      },
      "source": "https://raw.githubusercontent.com/smilejeen/PNGseqR/main/ReadMe.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Pipeline to get genotype file in VCF format",
        "parent_header": [
          "PNGseqR"
        ],
        "type": "Text_excerpt",
        "value": "To help users got genotype and reads count files suitable for our package, we offer command line here:\n\nFor DNA sequencing data, the pipeline to get genotype data need install software BWA SAMtools Picard GATK baesd on a Linux system \n\n``` Linux\nFirst create index for reference genome([Reference.Genome.fa]) by bwa SAMtools and Picard\n\nbwa index [Reference.Genome.fa]\n\nsamtools faidx [Reference.Genome.fa]\n\njava -jar picard.jar CreateSequenceDictionary R=[Reference.Genome.fa] O=Reference.Genome.dict\n```\n\nSecond mapping the sequencing data to the reference genome by bwa and transform result to Binary format\n\n``` Linux\nbwa mem -t 16 -M [Reference.Genome.fa] *R1.fq.gz *R2.fq.gz > *.sam\n# * R1. fq Gz * R2.fq.gz are the paired-end sequencing data\n\nsamtools view -b -S *.sam > *.bam\n```\n\n\nThird The pretreatment for mapping result,including clean sort and adding group information for mapping result, getting unique reads and create index\n\n``` Linux\njava -jar picard.jar CleanSam INPUT=*.bam OUTPUT=*.cleaned.bam\n\njava -jar picard.jar FixMateInformation INPUT=*.cleaned.bam OUTPUT=*.cleaned_fixed.bam SO=coordinate\n\njava -jar picard.jar AddOrReplaceReadGroups INPUT=*.cleaned_fixed.bam OUTPUT=*cleaned_fixed_group.bam LB=WH SO=coordinate RGPL=ILLUMINA PU=barcode SM=WH\n\nsamtools index *cleaned_fixed_group.bam\n\njava -jar picard.jar MarkDuplicatesWithMateCigar INPUT=*cleaned_fixed_group.bam OUTPUT=*cleaned_fixed_group_DEDUP.bam M=*cleaned_fixed_group_DEDUP.mx AS=true REMOVE_DUPLICATES=true MINIMUM_DISTANCE=500\n\nsamtools index *cleaned_fixed_group_DEDUP.bam\n```\n\nThen,last perform SNP Calling by GATK for each pool\n``` Linux\njava -jar GenomeAnalysisTK.jar -T HaplotypeCaller -R [Reference.Genome.fa] -I *cleaned_fixed_group_DEDUP.bam -o *.gvcf \n```\n\nAt last, combining the SNP Calling result of different pools to obtain the final file for BSA analysis by GATK\n``` Linux\njava -jar GenomeAnalysisTK.jar CombineGVCFs -R [Reference.Genome.fa] -V bulk1.gvcf -V bulk2.gvcf -O bsa.gvcf \n# bulk1.gvcf and bulk2.gvcf are SNP Calling result of different pool\n\njava -jar GenomeAnalysisTK.jar GenotypeGVCFs -R [Reference.Genome.fa] -V bsa.gvcf -O bsa.vcf  \n```\n\n\nFor RNA sequencing data, the pipeline to get genotype data need install software Hisat2 SAMtools Picard GATK baesd on a Linux system \n\nFirst,create index for reference genome by hisat2 \n``` Linux\nhisat2/extract_exons.py [Reference.Genome.gtf] > exons.txt \nhisat2/extract_splice_sites.py [Reference.Genome.gtf] > splicesites.txt\nhisat2/hisat2-build -f [Reference.Genome.fa] --ss splicesites.txt --exon exons.txt [Reference.Genome.index]\n# [Reference.Genome.fa] is reference genome\uff0c[Reference.Genome.gtf] is the reference genome annotation file\uff0c[Reference.Genome.index] is the created reference genome index file\n```\n\nSecond,mapping RNA sequencing data to reference genome by hisat2\n``` Linux\nhisat2 --dta -x [Reference.Genome.index] -1 *R1.fq.gz -2 *R2.fq.gz -S *.sam --known-splicesite-infile splicesites.txt\n# *R1.fq.gz *R2.fq.gz are the paired-end sequencing data\n```\n\nThird,The pretreatment for mapping result,including clean sort and adding group information for mapping result, getting unique reads and create index\n``` Linux\nsamtools view -h -q 50 *.sam | samtools view -bS -> unique.*.bam\n\nsamtools sort unique.*.bam unique.*.sort\n\nsamtools index unique.*.sort.bam \n\njava -jar picard.jar AddOrReplaceReadGroups.jar I=unique.*.sort.bam O=unique.*.GR.bam RGID=unique.* RGLB=A RGPL=illumina RGPU=nounit RGSM=unique.*\n\nsamtools sort unique.*.GR.bam unique.sort.*.GR\n\nsamtools index unique.sort.*.GR.bam\n```\n\nAt last,perform SNP calling by GATK\n``` Linux\njava -jar GenomeAnalysisTK.jar -T UnifiedGenotyper -R [Reference.Genome.fa] -I unique.sort.bulk1.GR.bam -I unique.sort.bulk2.GR.bam --heterozygosity 0.1 -stand_call_conf 50.0 -stand_emit_conf 20.0 -glm BOTH --num_threads 2 -ploidy 2 -U ALLOW_N_CIGAR_READS -o bsr_snp.vcf\n# unique.sort.bulk1.GR.bam and unique.sort.bulk2.GR.bam is the pretreated mapping result of two different pools\n```\n\ncount the reads fall in each gene region by HT-seqcount\n``` Linux\nhtseq-count unique.*.sort.bam -f bam [Reference.Genome.gtf] > *.htseq.RC.txt\n# unique.*.sort.bam is the mapping result after cleaning and sorting\n```\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/smilejeen/PNGseqR/main/ReadMe.md",
      "technique": "header_analysis"
    }
  ]
}