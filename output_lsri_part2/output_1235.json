{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/rocioespci/single"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-04-20T13:00:33Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-04-26T11:14:29Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Rpackage for SINGLe (SNIPS in Nanopore reads of Gene Libraries)"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "type": "Text_excerpt",
        "value": "SINGLe computes consensus sequence of DNA reads by (noisy) nanopore sequencing. It is focused on long amplicons sequencing, and it aims to the reads of gene libraries, typically used in directed evolution experiments.\n\nSINGLe takes advantage that gene libraries are created from an original wild type or reference sequence, and it characterizes the systematic errors made by nanopore sequencing. Then, uses that information to correct the confidence values (QUAL) assigned to each nucleotide read in the mutants library.\n\nFinally, given that you can identify which variant was read in each case (for example by the use of unique molecular identifiers or DNA barcodes), SINGLe groups them and computes the consensus sequence by weighting the frequencies with the corrected confidence values.\n\nFor more details, please refer to our pre-print \"Accurate gene consensus at low nanopore coverage\" doi: https://doi.org/10.1101/2020.03.25.007146 for more information.\n\n"
      },
      "source": "https://raw.githubusercontent.com/rocioespci/single/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9685054942110546,
      "result": {
        "original_header": "SINGLe",
        "type": "Text_excerpt",
        "value": "SNIPs In Nanopore reads of Gene Libraries \n"
      },
      "source": "https://raw.githubusercontent.com/rocioespci/single/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/rocioespci/single/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/rocioespci/single/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "rocioespci/single"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SINGLe"
      },
      "source": "https://raw.githubusercontent.com/rocioespci/single/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "Using bioconductor:\n\n```{r}\nif (!require(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\n\nBiocManager::install(\"single\")\n```\n\nOr from git-hub:\n\n```{r}\n require(devtools)\n install_github(\"rocioespci/single\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/rocioespci/single/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/rocioespci/single/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Copyright (c) 2022 single authors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/rocioespci/single/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "single"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "rocioespci"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 47171,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rocioespci/single/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Run SINGLe in R",
        "parent_header": [
          "How to use"
        ],
        "type": "Text_excerpt",
        "value": "SINGLe consists on three steps: train model, evaluate model, compute consensus. As it can be time consuming, I will only analyze a subset of positions\n```{r}\nlibrary(single)\npos_start <- 1\npos_end <- 10\n\nrefseq_fasta <- system.file(\"extdata\", \"ref_seq.fasta\", package = \"single\")\nref_seq <- Biostrings::subseq(Biostrings::readDNAStringSet(refseq_fasta), pos_start,pos_end)\n\n```\n\nFirst, train the model using nanopore reads of the reference (wild type).\n```{r}\nREF_READS <- system.file(\"extdata\", \"train_seqs_500.sorted.bam\",package = \"single\")\ntrain <- single_train(bamfile=REF_READS,\n                      output=\"train\",\n                      refseq_fasta=refseq_fasta,\n                      rates.matrix=mutation_rate,\n                      mean.n.mutations=5.4,\n                      pos_start=pos_start,\n                      pos_end=pos_end,\n                      verbose=FALSE,\n                      save_partial=FALSE,\n                      save_final= FALSE)\nprint(head(train))\n```\n\n\nSecond, evaluate model: use the fitted model to evaluate the reads of your library, and re-weight the QUAL (quality scores).\n```{r}\nLIB_READS <- system.file(\"extdata\",\"test_sequences.sorted.bam\",package =\"single\")\ncorrected_reads <- single_evaluate(bamfile = LIB_READS,\n                single_fits = train,\n                ref_seq = ref_seq,\n                pos_start=pos_start,pos_end=pos_end,\n                verbose=FALSE,\n                gaps_weights = \"minimum\",\n                save = FALSE)\ncorrected_reads\n```\n\nFinally, use the reads of the library with the corrected QUAL scores to compute a weighted consensus sequences in subsets of reads. The sets of reads corresponding to each variant are indicated in a table (here BC_TABLE) of two columns: SeqID (name of the read) and BCid (barcode or group identity).\n```{r}\nBC_TABLE = system.file(\"extdata\", \"Barcodes_table.txt\",package = \"single\")\nconsensus <- single_consensus_byBarcode(barcodes_table = BC_TABLE,\n                           sequences = corrected_reads,\n                           verbose = FALSE)\nconsensus\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/rocioespci/single/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Other functions included in the package",
        "parent_header": [
          "How to use",
          "Run SINGLe in R"
        ],
        "type": "Text_excerpt",
        "value": "Use pileup to create a data.frame with counts by position nucleotide and quality score\n```{r}\ncounts_pnq <- pileup_by_QUAL(bam_file=REF_READS,\n                    pos_start=pos_start,\n                    pos_end=pos_end)\nhead(counts_pnq)\n```\n\nCompute a priori probability of making errors\n```{r}\np_prior_errors <- p_prior_errors(counts_pnq=counts_pnq,\n                                  save=FALSE)\np_prior_errors\n```\n\nCompute a priori probability of having a mutation\n```{r}\np_prior_mutations <- p_prior_mutations(rates.matrix = mutation_rate,\n                        mean.n.mut = 5,ref_seq = ref_seq,save = FALSE)\nhead(p_prior_mutations)\n```\n\nFit SINGLe logistic regression using the prior probabilities and the counts\n```{r}\nfits <- fit_logregr(counts_pnq = counts_pnq,ref_seq=ref_seq,\n                    p_prior_errors = p_prior_errors,\n                    p_prior_mutations = p_prior_mutations,\n                    save=FALSE)\nhead(fits)\n```\n\nUse the fits to obtain the replacement Qscores after SINGLe fit, for all possible QUAL, nucleotide and position values\n```{r}\nevaluated_fits <- evaluate_fits(pos_range = c(1,5),q_range = c(0,10),\n                                data_fits = fits,ref_seq = ref_seq,\n                                save=FALSE,verbose = FALSE)\nhead(evaluated_fits)\n```\n\nCompute one consensus sequence weighted by QUAL values.\n```{r}\ndata_barcode = data.frame(\n    nucleotide=unlist(sapply(as.character(corrected_reads),strsplit, split=\"\")),\n    p_SINGLe=unlist(1-as(Biostrings::quality(corrected_reads),\"NumericList\")),\n    pos=rep(1:Biostrings::width(corrected_reads[1]),length(corrected_reads)))\nconsensus_seq <- weighted_consensus(df = data_barcode, cutoff_prob = 0.9)\nconsensus_seq\nanother_consensus_seq <- weighted_consensus(df = data_barcode, cutoff_prob = 0.999)\nanother_consensus_seq\nlist_mismatches(ref_seq[[1]],another_consensus_seq)\n```\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/rocioespci/single/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 13:40:59",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Before starting",
        "parent_header": [
          "How to use"
        ],
        "type": "Text_excerpt",
        "value": "To use SINGLe you must have the following data:\n\n- A fasta file with the reference sequence (ex. a wild type from which you generated the library) (__REF.fasta__).\n- Nanopore reads of a reference sequence (__REF_READS.fastq__).\n- Nanopore reads of a gene libraries (__LIB_READS.fastq__).\n- Identification of each read in the gene library with a gene variant (ex via the use of DNA barcodes on your experiment) (__BC_TABLE.txt__).\n"
      },
      "source": "https://raw.githubusercontent.com/rocioespci/single/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Preprocessing data",
        "parent_header": [
          "How to use"
        ],
        "type": "Text_excerpt",
        "value": "Align nanopore reads to the reference sequence and create a sorted bam file.\n\nFor the reads of the reference:\n```{bash, eval=F}\nminimap2 -ax map-ont --sam-hit-only REF.fasta REF_READS.fastq > REF_READS.sam\nsamtools view -S -b REF_READS.sam > REF_READS.bam\nsamtools sort REF_READS.bam -o REF_READS.sorted.bam\n```\n\nAnd for the reads of the library:\n```{bash, eval=F}\nminimap2 -ax map-ont --sam-hit-only  REF.fasta LIB_READS.fastq >LIB_READS.sam\nsamtools view -S -b LIB_READS.sam > LIB_READS.bam\nsamtools sort LIB_READS.bam -o LIB_READS.sorted.bams\n```\n\nRecommendation: SINGLe works better if you work separately with nanopore reads of the forward and the reverse strand separately. To do that, you can add --for-only and --rev-only in minimap2 options, and follow the downstream analysis independently for each set of aligned reads.\n\n"
      },
      "source": "https://raw.githubusercontent.com/rocioespci/single/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Other functions included in the package",
        "parent_header": [
          "How to use",
          "Run SINGLe in R"
        ],
        "type": "Text_excerpt",
        "value": "Use pileup to create a data.frame with counts by position nucleotide and quality score\n```{r}\ncounts_pnq <- pileup_by_QUAL(bam_file=REF_READS,\n                    pos_start=pos_start,\n                    pos_end=pos_end)\nhead(counts_pnq)\n```\n\nCompute a priori probability of making errors\n```{r}\np_prior_errors <- p_prior_errors(counts_pnq=counts_pnq,\n                                  save=FALSE)\np_prior_errors\n```\n\nCompute a priori probability of having a mutation\n```{r}\np_prior_mutations <- p_prior_mutations(rates.matrix = mutation_rate,\n                        mean.n.mut = 5,ref_seq = ref_seq,save = FALSE)\nhead(p_prior_mutations)\n```\n\nFit SINGLe logistic regression using the prior probabilities and the counts\n```{r}\nfits <- fit_logregr(counts_pnq = counts_pnq,ref_seq=ref_seq,\n                    p_prior_errors = p_prior_errors,\n                    p_prior_mutations = p_prior_mutations,\n                    save=FALSE)\nhead(fits)\n```\n\nUse the fits to obtain the replacement Qscores after SINGLe fit, for all possible QUAL, nucleotide and position values\n```{r}\nevaluated_fits <- evaluate_fits(pos_range = c(1,5),q_range = c(0,10),\n                                data_fits = fits,ref_seq = ref_seq,\n                                save=FALSE,verbose = FALSE)\nhead(evaluated_fits)\n```\n\nCompute one consensus sequence weighted by QUAL values.\n```{r}\ndata_barcode = data.frame(\n    nucleotide=unlist(sapply(as.character(corrected_reads),strsplit, split=\"\")),\n    p_SINGLe=unlist(1-as(Biostrings::quality(corrected_reads),\"NumericList\")),\n    pos=rep(1:Biostrings::width(corrected_reads[1]),length(corrected_reads)))\nconsensus_seq <- weighted_consensus(df = data_barcode, cutoff_prob = 0.9)\nconsensus_seq\nanother_consensus_seq <- weighted_consensus(df = data_barcode, cutoff_prob = 0.999)\nanother_consensus_seq\nlist_mismatches(ref_seq[[1]],another_consensus_seq)\n```\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/rocioespci/single/master/README.md",
      "technique": "header_analysis"
    }
  ]
}