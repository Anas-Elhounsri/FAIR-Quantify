{
  "application_domain": [
    {
      "confidence": 20.64,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/cpmsnuh/ITDetect"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact",
        "parent_header": [
          "ITDetect"
        ],
        "type": "Text_excerpt",
        "value": "If you have any questions, bugs to report, or suggestions, please send us an email.\n\n[Heejun Jang](mailto:starz77@snu.ac.kr)\n\n[sungyoung Lee](mailto:me@lsy.io)\n\n[Hongseok Yun](mailto:entropy.yun@gmail.com)\n\n"
      },
      "source": "https://raw.githubusercontent.com/cpmsnuh/itdetect/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-10-03T10:19:30Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-03-20T01:20:08Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "parent_header": [
          "ITDetect"
        ],
        "type": "Text_excerpt",
        "value": "ITDetect (Internal Tandem Duplication Detector) is a sensitive ITD variant caller for next-generation sequencing data.\n\nIt detects candidate ITD position from soft-clipped reads and determines if actual ITD may exist based on the reads whose alignment pattern supports presumed ITD. \n\nIts performance was validated using whole exome sequencing data of AML patient samples with FLT3-ITD.\n\nITD in FLT3 gene is well known as an indication for poor prognosis and >25% of AML patients are positive for FLT3-ITD.\n\nEven though some ITD can be detected by popular variant callers such as Pindel as insertion, researchers can expect to find ITD with better sensitivity using ITDetect which is specifically designed for ITD detection.\n\n"
      },
      "source": "https://raw.githubusercontent.com/cpmsnuh/itdetect/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9310088463449065,
      "result": {
        "original_header": "Commands",
        "type": "Text_excerpt",
        "value": "> For initial detection of candidate ITDs, ITDetect uses reads aligned as soft-clipped by aligner. \n> BWA-mem is well known aligner allowing reads aligned soft-clipped. \n> ITDetect has been only tested with BWA-mem generated BAM files so we highly recommend BWA-mem as your aligner for you to generate BAM file for ITDetect. \n> Along with input BAM file, BAM index file (.bai) should be exist.\n```\n-o (--output)\toutput VCF file\n```\n> For each ITD called by ITDetect, additional information for the ITD (e.g. read count) is given in INFO column.\n> The description for the information is in below.\n```\n-r (--reference)\treference genome file\n```\n> For reference genome file, both of fasta (.fa) and fasta index (.fai) files are required.\n \n> path where you unzip ITDetect.tar.gz.\n```\n-c (--rcnt)     minimum number of support reads for the ITD called (default: 3)\n```\n \n```\n-p (--repeat)   minimum number of repeats in the region where ITD is called (default: 10)\n```\n```\n-n (--ecnt)\tfiltering cutoff for another FLT3-ITD when more than one type of ITD is identified (default: 6)\n```\n \n> In repeat regions, false positive insertion/deletion (including ITD) is often called. \n> You can avoid it by filtering out candidate ITD in repeat regions. \n> If this file is not given, ITDetect scan all regions where all reads in input BAM file are aligned. \n> You can limit the search space with this target gene file. Each line of the file should be as follows: \n\u2022\tThe description of TXT output:\n```\nINFO\t\t\tDescription\nTotalReadCount\t  \tTotal number of reads mapped to the variant position\nRefReadCount\t\tTotal number of reference allele support reads\nAltReadCount\t\tTotal number of alternative allele (ITD) support reads\nVAF\t\t\tAlternative allele fraction; AltReadCount/(RefReadCount+AltReadCount)\nAR\t\t\tAllelic Ratio; AltReadCount/RefReadCount\nDupSize\t\t     \tITD size (without inserted bases)\nInsertion\t\tInserted bases between duplication\nGene\t\t\tGene name (as in target gene file (-t))\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/cpmsnuh/itdetect/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Download",
        "parent_header": [
          "ITDetect"
        ],
        "type": "Text_excerpt",
        "value": "**Last Updated: 2021-04-30**\n\n\u2022\tEntire Package: [ITDetect.tar.gz](https://github.com/cpmsnuh/ITDetect/blob/main/ITDetect.tar.gz)\n\n\u2022\tREADME\n\n**JAVA Runtime Environment**\n\n\u2022\tJRE: [download site](https://java.com/download/)\n\t(Recommended version: v.1.8.0)\n\n**Python**\n\n\u2022\tPython: [download site](https://www.python.org/downloads/)\n\t(Recommended version: v.3.7.5)\n\n**Reference Genome Sequence**\n\n\u2022\thg19, GRCh37 FASTA: [download site](https://gatk.broadinstitute.org/hc/en-us/articles/360035890711-GRCh37-hg19-b37-humanG1Kv37-Human-Reference-Discrepancies)\n\n**Example Input Data**\n\n\u2022 \tDownload WES / Panel sequecing example Data (FLT3 region BAM): [download site](https://github.com/cpmsnuh/ITDetect/tree/main/BAM)\n\t\n\t\n\t\n"
      },
      "source": "https://raw.githubusercontent.com/cpmsnuh/itdetect/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/cpmsnuh/itdetect/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/cpmsnuh/ITDetect/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "cpmsnuh/ITDetect"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ITDetect"
      },
      "source": "https://raw.githubusercontent.com/cpmsnuh/itdetect/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "ITDetect"
        ],
        "type": "Text_excerpt",
        "value": "ITDetect is released in a precompiled binary package. For installation, download the package ([ITDetect.tar.gz](https://github.com/cpmsnuh/ITDetect/blob/main/ITDetect.tar.gz)) and unzip/untar it.\n\n```bash\ntar -xzf ITDetect.tar.gz\n```\n\nWhen you finish installation, under the installation directory (i.e. YOURPATH),\n\nyou can see three sub-directories such as /bin with ITDetect executable file, /lib with library files and /data with the sample data files for your test.\n\nYou can test ITDetect simply by running the executable ITDetect.jar file in YOURPATH/bin directory.\n\nIf you want to move the installation directory, just copy the whole directory including /bin and /lib directories.\n\nITDetect needs `Java Runtime Environment (> ver 1.8.0)` and `Python (> ver 3.7.0)`.\n\nIf you want a reference genome such as hs37d5, download the genome sequences and unzip/untar it. (recommended: hg19)\n\n"
      },
      "source": "https://raw.githubusercontent.com/cpmsnuh/itdetect/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9446822221922604,
      "result": {
        "original_header": "Commands",
        "type": "Text_excerpt",
        "value": "To run ITDetect, you call ITDetect.py with mandatory parameters set as follows:\n```bash\npython ITDetect.py \\\n\t-p [path to ITDetect] \\\n\t-b [input BAM file] \\\n\t-o [output VCF file] \\\n\t-r [reference genome file] \\\n\t-t [target gene region file]\n```\n \n> ITDetect has been only tested with BWA-mem generated BAM files so we highly recommend BWA-mem as your aligner for you to generate BAM file for ITDetect. \n\u2022\tThe following parameters are optional.\n```\n-p (--path)\tpath to ITDetect (default: .)\n``` \n> path where you unzip ITDetect.tar.gz.\n```\n-c (--rcnt)     minimum number of support reads for the ITD called (default: 3)\n```\n \n> Please refer the files `YOURPATH/data`\n```\n-m (--tmp)      temporary directory (default: output directory)\n```\n \n> You may not want to delete the files while ITD is running.\n```\n-v(--verbose)  Run ITDetect in verbose mode (default: disabled)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/cpmsnuh/itdetect/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8683130989891498,
      "result": {
        "original_header": "Commands",
        "type": "Text_excerpt",
        "value": "To run ITDetect, you call ITDetect.py with mandatory parameters set as follows:\n```bash\npython ITDetect.py \\\n\t-p [path to ITDetect] \\\n\t-b [input BAM file] \\\n\t-o [output VCF file] \\\n\t-r [reference genome file] \\\n\t-t [target gene region file]\n```\n \n> To generate .fai file from .fa file, you can use samtools \n(e.g., samtools faidx hg19.fa) \n\n```\n-t (--target)\ttarget gene file (default: FLT3.exon.14.15.hg19.txt)\n``` \n> Please refer the files `YOURPATH/data`\n```\n-m (--tmp)      temporary directory (default: output directory)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/cpmsnuh/itdetect/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/cpmsnuh/ITDetect/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 cpmsnuh\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/cpmsnuh/itdetect/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ITDetect"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "cpmsnuh"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/cpmsnuh/itdetect/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Prerequisites",
        "parent_header": [
          "ITDetect"
        ],
        "type": "Text_excerpt",
        "value": "ITDetect requires both Java 8 and Python 3 to properly executed.\nIn default, ITDetect assumes the chromosomes are named with 'chr' prefix (i.e., chr1, chr2, ...).\n\n"
      },
      "source": "https://raw.githubusercontent.com/cpmsnuh/itdetect/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 10:22:32",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "non-software"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Example",
        "parent_header": [
          "ITDetect"
        ],
        "type": "Text_excerpt",
        "value": "\u2022\tCommand Example: S01_FLT3.bam\n\n```bash\npython $PATH/ITDetect.py \\\n\t-p $PATH \\\n\t-b $INPUT/\"S01_FLT3.bam\" \\\n\t-o $OUTPUT/\"S01.Panel.ITDetect.vcf\" \\\n\t-r $REFERENCE/hg19/hg19_1-22-X-Y-M.fa \\\n\t-t $PATH/data/FLT3.exon.hg19.txt\n```\n\n\u2022\tFinal Result Example: S01.Panel.ITDetect.vcf.filtered.result.txt\n```\n\nChrom   StartPos        Ref     Alt     TotalReadCount  RefReadCount    AltReadCount    VAF     AR      DupSize Insertion       Gene\nchr13   28608253        G       GAGATCATATTCATATTCTCTGAAATCAACGTAGAAGTACTCATTATCTGAGGAGCCGGTCACCCCT     352     337     15      0.0426  0.0445  63      CCT     FLT3\n\n```\n"
      },
      "source": "https://raw.githubusercontent.com/cpmsnuh/itdetect/main/README.md",
      "technique": "header_analysis"
    }
  ]
}