{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/CZhouLab/Flnc"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-07-27T20:38:12Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-07-28T01:00:20Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "parent_header": [
          "Flnc"
        ],
        "type": "Text_excerpt",
        "value": "Flnc is software that can accurately identify full-length long noncoding RNAs (lncRNAs) from human RNA-seq data. lncRNAs are linear transcripts of more than 200 nucleotides that do not encode proteins. The most common approach for identifying lncRNAs from RNA-seq data which examines the coding abilities of assembled transcripts will result in a very high false-positive rate (30%-75%) of lncRNA identification. The falsely discovered lncRNAs lack transcriptional start sites and most of them are RNA fragments or result from transcriptional noise. Unlike the false-positive lncRNAs, true lncRNAs are full-length lncRNA transcripts that include transcriptional start sites (TSSs). To exclude these false lncRNAs, H3K4me3 chromatin immunoprecipitation sequencing (ChIP-seq) data had been used to examine transcriptional start sites of putative lncRNAs, which are transcripts without coding abilities. However, because of cost, time, and the limited availability of sample materials for generating H3K4me3 ChIP-seq data, most samples (especially clinical biospecimens) may have available RNA-seq data but lack matched H3K4me3 ChIP-seq data. This Flnc method solves the problem of lacking transcriptional initiation profiles when identifying lncRNAs. \n\nFlnc integrates seven machine-learning algorithms built with four genomic features. Flnc achieves state-of-the-art prediction power with a AUROC score over 0.92. Flnc significantly improves the prediction accuracy from less than 50% using the common approach to over 85% on five independent datasets without requiring matched H3K4me3 ChIP-seq data. In addition to the stranded polyA-selected RNA-seq data, Flnc can also be applied to identify lncRNAs from stranded RNA-seq data of ribosomal RNA depleted samples or unstranded RNA-seq data of polyA-selected samples. \n\n![workflow](Picture1.png)\n\n**Please cite our paper at *Non-Coding RNA* journal (https://doi.org/10.3390/ncrna8050070), if you find Flnc useful for your research. \n\nVersion: 1.0.0\n\nLast Modified: 07/27/2022\n\nAuthors: Zixiu Li (zixiu.li@umassmed.edu), Chan Zhou (chan.zhou@umassmed.edu)\n\nMaintainer: Zixiu Li\n\n"
      },
      "source": "https://raw.githubusercontent.com/CZhouLab/Flnc/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.959747484495079,
      "result": {
        "original_header": "Recommendations for the model options",
        "type": "Text_excerpt",
        "value": "For stranded polyA-selected RNA-seq data, --model ensemble is recommended if the users would like to have the best prediction precision and specificity; If the users would like to balance the prediction sensitivity and specificity, --model rf is recommended. \nFor rRNA-depleted RNA-seq and unstranded RNA-seq data, --model lsvm or --model nb is recommended.\n \n"
      },
      "source": "https://raw.githubusercontent.com/CZhouLab/Flnc/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8785244195892102,
      "result": {
        "original_header": "Output files",
        "type": "Text_excerpt",
        "value": "(4) putative_lncRNA_infor.txt: contains the expression and genomic features information of all putative lncRNAs with the same format as the \u201ctrue_lncRNA_infor.\\<model\\>.txt\u201d outfile. \n"
      },
      "source": "https://raw.githubusercontent.com/CZhouLab/Flnc/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 1: Download Flnc software from GitHub",
        "parent_header": [
          "Flnc",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "```bash\ncd /home/username/\ngit clone https://github.com/CZhouLab/Flnc\ncd Flnc\nchmod 755 *.py\n```\n"
      },
      "source": "https://raw.githubusercontent.com/CZhouLab/Flnc/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 2: Download LIB folder from Zenodo",
        "parent_header": [
          "Flnc",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "```bash\ncd /home/username/Flnc\nwget -c https://zenodo.org/record/7853855/files/LIB.zip?download=1\nunzip zenodo.org/record/7853855/files/LIB.zip\\?download\\=1\nrm -f zenodo.org/record/7853855/files/LIB.zip\\?download\\=1\n```\n"
      },
      "source": "https://raw.githubusercontent.com/CZhouLab/Flnc/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/CZhouLab/Flnc/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/CZhouLab/Flnc/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CZhouLab/Flnc"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Flnc"
      },
      "source": "https://raw.githubusercontent.com/CZhouLab/Flnc/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/CZhouLab/Flnc/master/Picture1.png"
      },
      "source": "https://raw.githubusercontent.com/CZhouLab/Flnc/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/CZhouLab/Flnc/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Flnc"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "CZhouLab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 82462,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/CZhouLab/Flnc/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Prerequisites",
        "parent_header": [
          "Flnc"
        ],
        "type": "Text_excerpt",
        "value": "To use Flnc, you will need the following programs in your PATH:\n\n\u2022       singularity (>=3.7.1)\n\n\u2022       python2 (>=2.7) \n\n\u2022       gcc (>=4.8.5)\n\n\u2022       OS: high performance computing cluster in Linux (suggested)\n\n\u2022       Reference genome: hg38\n\n"
      },
      "source": "https://raw.githubusercontent.com/CZhouLab/Flnc/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running Flnc",
        "parent_header": [
          "Flnc"
        ],
        "type": "Text_excerpt",
        "value": "The Flnc tool has two subcommands single and pair. The single subcommand can take three types of input files: single-end RNA-seq data in FASTQ format, and transcript data either in BED format or in FASTA format. The pair subcommand can take two ends of the paired-end RNA-seq data in FASTQ format as the input.\n\n**Note:**\n\n-\tFlnc can accept the FASTQ files uncompressed (.fastq) or compressed by gzip (.fastq.gz) as input files. \n\n-\tThe input file should be in Linux format. If the file was created in DOS/Windows, it should be converted to Linux format (e.g. using dos2unix. See https://phoenixnap.com/kb/convert-dos-to-unix for detail).  \n\n-\tThe reference gene annotation should be the GTF format file for hg38 assembly.\n\n-\t**Make sure that singularity software have read permission for the input files, and have both read and write permission for files in the output folder. We recommend depositing the input files and specifying output folder to be on the same hard drive (disk) with the Flnc software.**\n\n**Usage** \n```bash\npython2 Flnc.py {pair,single} -l LIBRARY -o OUTPUT_DIR -f {fastq,fasta,bed} {-1 FILE1 -2 FILE2 | -u FILE} [optional options]\n\nWhen running Flnc with paired RNA-seq data, it is critical that the *_1 files and the *_2 files of replicates appear in separate comma-delimited lists, and that the order of the files in the two lists is the same.\n\nSubcommands:\t\tchoose one of the subcommands {pair,single}                \n\nArguments:\n\n\t-f, --format\tThe format of the input file: fastq, or fasta or bed.\n                  \tIf using the pair subcommand, the format must be \"fastq\".\t    \n                  \tIf using single subcommand, the format can be fastq, or fasta, or bed.\n\t-1 FILE1\tThis argument is mandatory if using the pair subcommand. \n\t\t\tFull path of the mate 1 file of paired FASTQ files, paired with the mate 2 file specified with \"-2 \" option.\n\t\t\tThe mate 1 of replicates can be input through comma delimitation, e.g., \"<path>/Rep1_1.fastq,<path>/Rep2_1.fastq\".\n\t-2 FILE2\tThis argument is mandatory if using the pair subcommand.\n\t\t\tFull path of the mate 2 file of paired FASTQ files, paired with the mate 1 file specified with \"-1 \" option. \n\t\t\tThe mate 2 of replicates can be input through comma delimitation, e.g., \"<path>/Rep1_2.fastq,<path>/Rep2_2.fastq\".\n\t-u FILE\t\tThis argument is mandatory if using the single subcommand.\n\t\t\tFull path of the single input file. \n\t\t\tIf \"-f fastq\", please input the full path of FASTQ file of single-end RNA-seq data. FASTQ files for replicates can be input through comma delimitation, For example, \"<path>/Rep1.fastq,<path>/Rep2.fastq\". \n\t\t\tIf \"-f fasta\", please input the full path of files with transcripts in FASTA format.\n\t\t\tIf \"-f bed\", please input the full path of files with transcripts in BED format.\n\t-l --library\tFull path of the LIB folder, which can be downloaded from https://zenodo.org/record/7853855/files/LIB.zip?download=1\n\t-o --output_dir\tPlease specify the name of the output folder. This must be specified as a full path. For example, \"-o /home/username/Flnc_sample1_output\".\n\nOptions:\n\t-g --gtf_file\tFull path of the reference gene annotation file in GTF format. \n\t\t\tDefault: gencode.v29.annotation.gtf in the LIB folder.\n\t-m --model\tChoose the abbreviation of one of the following models: \n\t\t\trf: random forest\n\t\t\tlr: logistic regression\n\t\t\tnb: na\u00efve Bayes\n\t\t\tdt: decision tree\n\t\t\tknn: k-nearest neighbors\n\t\t\trbfsvm: support vector machines with RBF kernel\n\t\t\tlsvm: support vector machines with linear kernel\n\t\t\tensemble: the common result predicted by all models \n\t\t\tDefault: rf\n\t-s --strand\tThis option is required only if \"-f fastq\", otherwise this argument is not needed.\n\t\t\tSpecify strand-specific information with the following three options: \n\t\t\tfirst: corresponds to fr-firststrand of the \u2013library-type option in the TopHat tool for stranded RNA-seq data\n\t\t\tsecond: corresponds to fr-secondstrand of the \u2013library-type option in the TopHat tool for stranded RNA-seq data\n\t\t\tunstrand: specific for unstranded RNA-seq data\n\t\t\tDefault: first \n\t-h/--help \tShow help message and exit\n\t-v/--version\tPrint version\n```\n"
      },
      "source": "https://raw.githubusercontent.com/CZhouLab/Flnc/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running time",
        "parent_header": [
          "Flnc"
        ],
        "type": "Text_excerpt",
        "value": "\t\nThe time required to execute the entire Flnc pipeline (starting from raw RNA-seq reads) launched on a cluster of standard Linux nodes (Intel\u00ae Xeon\u00ae CPU E5-2650 v3 @ 2.30GHz, 128G memory and 20 cores) varied for test cases with different replicates and different sequencing techniques (single end vs paired-end). For single-end RNA-seq data with 30-40 million reads per replicate, the running time ranges from 2-3 hours for test cases with one replicate per condition to 4-6 h for test cases with 2-3 replicates per condition. For paired-end RNA-seq data with 30-40 million reads per replicate, the running time ranges from 5-10 h for test cases with one replicate per condition to 8-20 h for test cases with 2-3 replicates per condition. About one-third to one-half of the computing time was consumed by the feature extraction.\n"
      },
      "source": "https://raw.githubusercontent.com/CZhouLab/Flnc/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "installation",
    "citation",
    "acknowledgement",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 12:11:14",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Examples",
        "parent_header": [
          "Flnc"
        ],
        "type": "Text_excerpt",
        "value": "The sample input files are available from https://zenodo.org/record/7853855/files/example.zip?download=1\n\n**Example 1: Identify lncRNAs from single-end RNA-seq data with single replicate by default parameters**\n```bash\npython2 Flnc.py single -f fastq -u /home/username/Flnc/example/GSM3039399.fastq.gz -l /home/username/Flnc/LIB -o /home/username/Flnc/sample_output1 -s first\n```\n**Example 2: Identify lncRNAs with customized model**\n```bash\npython2 Flnc.py single -f fastq -u /home/username/Flnc/example/GSM3039399.fastq.gz -l /home/username/Flnc/LIB -o /home/username/Flnc/sample_output2 -s first -m ensemble\n```\n**Example 3: Identify lncRNAs with customized gene annotation file (e.g. /home/username/Flnc/gencode.v30.gtf)**\n```bash\npython2 Flnc.py single -f fastq -u /home/username/Flnc/example/GSM3039399.fastq.gz -l /home/username/Flnc/LIB -o /home/username/Flnc/sample_output3 -s first -g /home/username/Flnc/gencode.v30.gtf\n```\n**Example 4: Identify lncRNAs from single-end RNA-seq data with three replicates by default parameters**\n```bash\npython2 Flnc.py single -f fastq -u /home/username/Flnc/example/GSM1462975.fastq.gz, /home/username/Flnc/example/GSM1462976.fastq.gz,/home/username/Flnc/example/ GSM1462977.fastq.gz -l /home/username/Flnc/LIB -o /home/username/Flnc/sample_output4 -s first\n```\n**Example 5: Identify lncRNAs from paired-end RNA-seq data with single replicate by default parameters**\n```bash\npython2 Flnc.py pair -f fastq -1 /home/username/Flnc/example/GSM4193226_1.fastq.gz -2 /hom/username/Flnc/example/GSM4193226_2.fastq.gz -l /home/username/Flnc/LIB -o /home/username/Flnc/sample_output5 -s first\n```\n**Example 6: Evaluate if or not the input transcripts (in FASTA format) are true lncRNAs**\n```bash\npython2 Flnc.py single -f fasta -u /home/username/Flnc/example/Test.fa -l /home/username/Flnc/LIB -o /home/username/Flnc/sample_output6\n```\n**Example 7: Evaluate if or not the input transcripts (in BED format) are true lncRNAs**\n```bash\npython2 Flnc.py single -f bed -u /home/username/Flnc/example/Test.bed -l /home/username/Flnc/LIB -o /home/username/Flnc/sample_output7\n```\n"
      },
      "source": "https://raw.githubusercontent.com/CZhouLab/Flnc/master/README.md",
      "technique": "header_analysis"
    }
  ]
}