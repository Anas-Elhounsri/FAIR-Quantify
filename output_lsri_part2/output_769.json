{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "format": "bibtex",
        "type": "File_dump",
        "value": "pkgVer <- function(pkg) {\n    if (!exists(\"meta\") || is.null(meta)) meta <- packageDescription(pkg)\n    ver <- meta$Version\n    paste0('https://github.com/dzhang32/', pkg, ' - R package version ', ver)\n}\n\nc(\n    bibentry(bibtype=\"article\",\n        title = \"ggtranscript: an R package for the visualization and interpretation of transcript isoforms using ggplot2\",\n        author = personList(\n            as.person(\"Emil K Gustavsson\"), \n            as.person(\"David Zhang\"),\n            as.person(\"Regina H Reynolds\"), \n            as.person(\"Sonia Garcia-Ruiz\"),\n            as.person(\"Mina Ryten\")\n        ),\n        year = 2022,\n        journal = \"Bioinformatics\",\n        doi = \"https://doi.org/10.1093/bioinformatics/btac409\",\n        url = \"https://academic.oup.com/bioinformatics/article/38/15/3844/6617821\"\n    )\n)\n"
      },
      "source": "https://raw.githubusercontent.com/dzhang32/ggtranscript/v0.99.3/inst/CITATION",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "ggtranscript <img src=\"man/figures/ggtranscript_logo_cropped.svg\" align=\"right\" height=\"139\" />"
        ],
        "type": "Text_excerpt",
        "value": "``` r\n\ncitation(\"ggtranscript\")\n#> To cite package 'ggtranscript' in publications use:\n#> \n#>   Gustavsson EK, Zhang D, Reynolds RH, Garcia-Ruiz S, Ryten M (2022).\n#>   \"ggtranscript: an R package for the visualization and interpretation\n#>   of transcript isoforms using ggplot2.\" _Bioinformatics_.\n#>   doi:10.1093/bioinformatics/btac409\n#>   <https://doi.org/10.1093/bioinformatics/btac409>,\n#>   <https://academic.oup.com/bioinformatics/article/38/15/3844/6617821>.\n#> \n#> A BibTeX entry for LaTeX users is\n#> \n#>   @Article{,\n#>     title = {ggtranscript: an R package for the visualization and interpretation of transcript isoforms using ggplot2},\n#>     author = {Emil K Gustavsson and David Zhang and Regina H Reynolds and Sonia Garcia-Ruiz and Mina Ryten},\n#>     year = {2022},\n#>     journal = {Bioinformatics},\n#>     doi = {https://doi.org/10.1093/bioinformatics/btac409},\n#>     url = {https://academic.oup.com/bioinformatics/article/38/15/3844/6617821},\n#>   }\n```\n"
      },
      "source": "https://raw.githubusercontent.com/dzhang32/ggtranscript/v0.99.3/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Credits",
        "parent_header": [
          "ggtranscript <img src=\"man/figures/ggtranscript_logo_cropped.svg\" align=\"right\" height=\"139\" />"
        ],
        "type": "Text_excerpt",
        "value": "- `ggtranscript` was developed using `biocthis`.\n"
      },
      "source": "https://raw.githubusercontent.com/dzhang32/ggtranscript/v0.99.3/README.Rmd",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/dzhang32/ggtranscript"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-12-23T15:28:55Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-11T09:22:09Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Visualizing transcript structure and annotation using ggplot2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9785852982628402,
      "result": {
        "original_header": "ggtranscript <img src=\"man/figures/ggtranscript_logo_cropped.svg\" align=\"right\" height=\"139\" />",
        "type": "Text_excerpt",
        "value": "\n`ggtranscript` is a `ggplot2` extension that makes it to easy to\nvisualize transcript structure and annotation.\n \n"
      },
      "source": "https://raw.githubusercontent.com/dzhang32/ggtranscript/v0.99.3/README.Rmd",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/dzhang32/ggtranscript/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 9
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/dzhang32/ggtranscript/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "dzhang32/ggtranscript"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ggtranscript "
      },
      "source": "https://raw.githubusercontent.com/dzhang32/ggtranscript/v0.99.3/README.Rmd",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dzhang32/ggtranscript/v0.99.3/man/figures/README-geom-range-intron-1.png"
      },
      "source": "https://raw.githubusercontent.com/dzhang32/ggtranscript/v0.99.3/README.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dzhang32/ggtranscript/v0.99.3/man/figures/README-shorten-gaps-1.png"
      },
      "source": "https://raw.githubusercontent.com/dzhang32/ggtranscript/v0.99.3/README.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dzhang32/ggtranscript/v0.99.3/man/figures/README-geom-range-intron-w-cds-1.png"
      },
      "source": "https://raw.githubusercontent.com/dzhang32/ggtranscript/v0.99.3/README.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dzhang32/ggtranscript/v0.99.3/man/figures/README-geom-half-range-1.png"
      },
      "source": "https://raw.githubusercontent.com/dzhang32/ggtranscript/v0.99.3/README.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dzhang32/ggtranscript/v0.99.3/man/figures/README-geom-half-range-zoomed-1.png"
      },
      "source": "https://raw.githubusercontent.com/dzhang32/ggtranscript/v0.99.3/README.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dzhang32/ggtranscript/v0.99.3/man/figures/README-geom-junction-1.png"
      },
      "source": "https://raw.githubusercontent.com/dzhang32/ggtranscript/v0.99.3/README.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dzhang32/ggtranscript/v0.99.3/man/figures/README-geom-junction-pub-1.png"
      },
      "source": "https://raw.githubusercontent.com/dzhang32/ggtranscript/v0.99.3/README.Rmd",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "ggtranscript <img src=\"man/figures/ggtranscript_logo_cropped.svg\" align=\"right\" height=\"139\" />"
        ],
        "type": "Text_excerpt",
        "value": "``` r\n# you can install the development version of ggtranscript from GitHub:\n# install.packages(\"devtools\")\ndevtools::install_github(\"dzhang32/ggtranscript\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/dzhang32/ggtranscript/v0.99.3/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1.0,
      "result": {
        "original_header": "ggtranscript <img src=\"man/figures/ggtranscript_logo_cropped.svg\" align=\"right\" height=\"139\" />",
        "type": "Text_excerpt",
        "value": "[![GitHub\nissues](https://img.shields.io/github/issues/dzhang32/ggtranscript)](https://github.com/dzhang32/ggtranscript/issues)\n[![GitHub\npulls](https://img.shields.io/github/issues-pr/dzhang32/ggtranscript)](https://github.com/dzhang32/ggtranscript/pulls)\n[![Lifecycle:\nexperimental](https://img.shields.io/badge/lifecycle-experimental-orange.svg)](https://lifecycle.r-lib.org/articles/stages.html#experimental)\n[![R-CMD-check-bioc](https://github.com/dzhang32/ggtranscript/workflows/R-CMD-check-bioc/badge.svg)](https://github.com/dzhang32/ggtranscript/actions)\n[![Codecov test\ncoverage](https://codecov.io/gh/dzhang32/ggtranscript/branch/main/graph/badge.svg)](https://app.codecov.io/gh/dzhang32/ggtranscript?branch=main) \n"
      },
      "source": "https://raw.githubusercontent.com/dzhang32/ggtranscript/v0.99.3/README.Rmd",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/dzhang32/ggtranscript/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "gene-annotation, ggplot-extension, transcripts, visualization"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "YEAR: 2022\nCOPYRIGHT HOLDER: ggtranscript authors\n"
      },
      "source": "https://raw.githubusercontent.com/dzhang32/ggtranscript/v0.99.3/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dzhang32/ggtranscript/v0.99.3/man/figures/ggtranscript_logo_cropped.svg"
      },
      "source": "https://raw.githubusercontent.com/dzhang32/ggtranscript/v0.99.3/README.Rmd",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ggtranscript"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "dzhang32"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 123624,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dzhang32/ggtranscript/v0.99.3/README.Rmd"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/dzhang32/ggtranscript/v0.99.3/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 11:57:00",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 130
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "ggtranscript <img src=\"man/figures/ggtranscript_logo_cropped.svg\" align=\"right\" height=\"139\" />"
        ],
        "type": "Text_excerpt",
        "value": "`ggtranscript` introduces 5 new geoms (`geom_range()`,\n`geom_half_range()`, `geom_intron()`, `geom_junction()` and\n`geom_junction_label_repel()`) and several helper functions designed to\nfacilitate the visualization of transcript structure and annotation. The\nfollowing guide takes you on a quick tour of using these geoms, for a\nmore detailed overview see the [Getting Started\ntutorial](https://dzhang32.github.io/ggtranscript/articles/ggtranscript.html).\n\n`geom_range()` and `geom_intron()` enable the plotting of exons and\nintrons, the core components of transcript annotation. `ggtranscript`\nalso provides `to_intron()`, which converts exon co-ordinates to the\ncorresponding introns. Together, `ggtranscript` enables users to plot\ntranscript structures with only exons as the required input and just a\nfew lines of code.\n\n``` r\nlibrary(magrittr)\nlibrary(dplyr)\n#> \n#> Attaching package: 'dplyr'\n#> The following objects are masked from 'package:stats':\n#> \n#>     filter, lag\n#> The following objects are masked from 'package:base':\n#> \n#>     intersect, setdiff, setequal, union\nlibrary(ggplot2)\nlibrary(ggtranscript)\n\n# to illustrate the package's functionality\n# ggtranscript includes example transcript annotation\nsod1_annotation %>% head()\n#> # A tibble: 6 \u00d7 8\n#>   seqnames    start      end strand type        gene_name transcript_name\n#>   <fct>       <int>    <int> <fct>  <fct>       <chr>     <chr>          \n#> 1 21       31659666 31668931 +      gene        SOD1      <NA>           \n#> 2 21       31659666 31668931 +      transcript  SOD1      SOD1-202       \n#> 3 21       31659666 31659784 +      exon        SOD1      SOD1-202       \n#> 4 21       31659770 31659784 +      CDS         SOD1      SOD1-202       \n#> 5 21       31659770 31659772 +      start_codon SOD1      SOD1-202       \n#> 6 21       31663790 31663886 +      exon        SOD1      SOD1-202       \n#> # \u2139 1 more variable: transcript_biotype <chr>\n\n# extract exons\nsod1_exons <- sod1_annotation %>% dplyr::filter(type == \"exon\")\n\nsod1_exons %>%\n    ggplot(aes(\n        xstart = start,\n        xend = end,\n        y = transcript_name\n    )) +\n    geom_range(\n        aes(fill = transcript_biotype)\n    ) +\n    geom_intron(\n        data = to_intron(sod1_exons, \"transcript_name\"),\n        aes(strand = strand)\n    )\n```\n\n<img src=\"man/figures/README-geom-range-intron-1.png\" width=\"100%\" />\n\n`ggtranscript` provides the helper function `shorten_gaps()`, which\nreduces the size of the gaps. `shorten_gaps()` then rescales the exon\nand intron co-ordinates to preserve the original exon alignment. This\nallows you to hone in the differences in the exonic structure, which can\nbe particularly useful if the transcript has relatively long introns.\n\n``` r\n\nsod1_rescaled <- shorten_gaps(\n  sod1_exons, \n  to_intron(sod1_exons, \"transcript_name\"), \n  group_var = \"transcript_name\"\n  )\n\nsod1_rescaled %>%\n    dplyr::filter(type == \"exon\") %>%\n    ggplot(aes(\n        xstart = start,\n        xend = end,\n        y = transcript_name\n    )) +\n    geom_range(\n      aes(fill = transcript_biotype)\n    ) +\n    geom_intron(\n        data = sod1_rescaled %>% dplyr::filter(type == \"intron\"), \n        arrow.min.intron.length = 200\n    )\n```\n\n<img src=\"man/figures/README-shorten-gaps-1.png\" width=\"100%\" />\n\n`geom_range()` can be used for any range-based genomic annotation. For\nexample, when plotting protein-coding transcripts, users may find it\nhelpful to visually distinguish the coding segments from UTRs.\n\n``` r\n# filter for only exons from protein coding transcripts\nsod1_exons_prot_cod <- sod1_exons %>%\n    dplyr::filter(transcript_biotype == \"protein_coding\")\n\n# obtain cds\nsod1_cds <- sod1_annotation %>% dplyr::filter(type == \"CDS\")\n\nsod1_exons_prot_cod %>%\n    ggplot(aes(\n        xstart = start,\n        xend = end,\n        y = transcript_name\n    )) +\n    geom_range(\n        fill = \"white\",\n        height = 0.25\n    ) +\n    geom_range(\n        data = sod1_cds\n    ) +\n    geom_intron(\n        data = to_intron(sod1_exons_prot_cod, \"transcript_name\"),\n        aes(strand = strand),\n        arrow.min.intron.length = 500,\n    )\n```\n\n<img src=\"man/figures/README-geom-range-intron-w-cds-1.png\" width=\"100%\" />\n\n`geom_half_range()` takes advantage of the vertical symmetry of\ntranscript annotation by plotting only half of a range on the top or\nbottom of a transcript structure. One use case of `geom_half_range()` is\nto visualize the differences between transcript structure more clearly.\n\n``` r\n\n# extract exons and cds for the two transcripts to be compared\nsod1_201_exons <- sod1_exons %>% dplyr::filter(transcript_name == \"SOD1-201\")\nsod1_201_cds <- sod1_cds %>% dplyr::filter(transcript_name == \"SOD1-201\")\nsod1_202_exons <- sod1_exons %>% dplyr::filter(transcript_name == \"SOD1-202\")\nsod1_202_cds <- sod1_cds %>% dplyr::filter(transcript_name == \"SOD1-202\")\n\nsod1_201_202_plot <- sod1_201_exons %>%\n    ggplot(aes(\n        xstart = start,\n        xend = end,\n        y = \"SOD1-201/202\"\n    )) +\n    geom_half_range(\n        fill = \"white\",\n        height = 0.125\n    ) +\n    geom_half_range(\n        data = sod1_201_cds\n    ) +\n    geom_intron(\n        data = to_intron(sod1_201_exons, \"transcript_name\")\n    ) +\n    geom_half_range(\n        data = sod1_202_exons,\n        range.orientation = \"top\",\n        fill = \"white\",\n        height = 0.125\n    ) +\n    geom_half_range(\n        data = sod1_202_cds,\n        range.orientation = \"top\",\n        fill = \"purple\"\n    ) +\n    geom_intron(\n        data = to_intron(sod1_202_exons, \"transcript_name\")\n    )\n\nsod1_201_202_plot\n```\n\n<img src=\"man/figures/README-geom-half-range-1.png\" width=\"100%\" />\n\nAs a `ggplot2` extension, `ggtranscript` inherits the the familiarity\nand functionality of `ggplot2`. For instance, by leveraging\n`coord_cartesian()` users can zoom in on regions of interest.\n\n``` r\n\nsod1_201_202_plot + coord_cartesian(xlim = c(31659500, 31660000))\n```\n\n<img src=\"man/figures/README-geom-half-range-zoomed-1.png\" width=\"100%\" />\n\n`geom_junction()` enables to plotting of junction curves, which can be\noverlaid across transcript structures. `geom_junction_label_repel()`\nadds a label to junction curves, which can often be useful to mark\njunctions with a metric of their usage such as read counts.\n\n``` r\n\n# ggtranscript includes a set of example (unannotated) junctions\n# originating from GTEx and downloaded via the Bioconductor package snapcount\nsod1_junctions\n#> # A tibble: 5 \u00d7 5\n#>   seqnames    start      end strand mean_count\n#>   <fct>       <int>    <int> <fct>       <dbl>\n#> 1 chr21    31659787 31666448 +           0.463\n#> 2 chr21    31659842 31660554 +           0.831\n#> 3 chr21    31659842 31663794 +           0.316\n#> 4 chr21    31659842 31667257 +           4.35 \n#> 5 chr21    31660351 31663789 +           0.324\n\n# add transcript_name to junctions for plotting\nsod1_junctions <- sod1_junctions %>%\n    dplyr::mutate(transcript_name = \"SOD1-201\")\n\nsod1_201_exons %>%\n  ggplot(aes(\n    xstart = start,\n    xend = end,\n    y = transcript_name\n  )) +\n  geom_range(\n    fill = \"white\", \n    height = 0.25\n  ) +\n  geom_range(\n    data = sod1_201_cds\n  ) + \n  geom_intron(\n    data = to_intron(sod1_201_exons, \"transcript_name\")\n  ) + \n  geom_junction(\n    data = sod1_junctions,\n    junction.y.max = 0.5\n  ) +\n  geom_junction_label_repel(\n    data = sod1_junctions,\n    aes(label = round(mean_count, 2)),\n    junction.y.max = 0.5\n  )\n```\n\n<img src=\"man/figures/README-geom-junction-1.png\" width=\"100%\" />\n\nAlternatively, users may prefer to map junction read counts to the\nthickness of the junction curves. As a `ggplot2` extension, this can be\ndone intuitively by modifying the size `aes()` of `geom_junction()`. In\naddition, by modifying `ggplot2` scales and themes, users can easily\ncreate informative, publication-ready plots.\n\n``` r\n\nsod1_201_exons %>%\n  ggplot(aes(\n    xstart = start,\n    xend = end,\n    y = transcript_name\n  )) +\n  geom_range(\n    fill = \"white\", \n    height = 0.25\n  ) +\n  geom_range(\n    data = sod1_201_cds\n  ) + \n  geom_intron(\n    data = to_intron(sod1_201_exons, \"transcript_name\")\n  ) + \n  geom_junction(\n    data = sod1_junctions,\n    aes(size = mean_count),\n    junction.y.max = 0.5, \n    ncp = 30, \n    colour = \"purple\"\n  ) + \n  scale_size_continuous(range = c(0.1, 1), guide = \"none\") + \n  xlab(\"Genomic position (chr21)\") + \n  ylab(\"Transcript name\") + \n  theme_bw()\n#> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n#> \u2139 Please use `linewidth` instead.\n#> This warning is displayed once every 8 hours.\n#> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was\n#> generated.\n```\n\n<img src=\"man/figures/README-geom-junction-pub-1.png\" width=\"100%\" />\n"
      },
      "source": "https://raw.githubusercontent.com/dzhang32/ggtranscript/v0.99.3/README.Rmd",
      "technique": "header_analysis"
    }
  ]
}