{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Cite",
        "type": "Text_excerpt",
        "value": "https://doi.org/10.1093/bioinformatics/btac469\n"
      },
      "source": "https://raw.githubusercontent.com/OrensteinLab/DeepZF/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/OrensteinLab/DeepZF"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-03-04T08:06:27Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-04T16:07:23Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.8146317158185532,
      "result": {
        "original_header": "Model evaluation:",
        "type": "Text_excerpt",
        "value": "For PWMpredictor evaluation, we computed the Pearson correlation of each quartet in the PWM matrix representing one position in the binding site.\nThe fallowing script calcultes the Pearson correlation and saves the Pearson correlation scv file\n```\npython3.6 eval_PWMpredictor.py -p_add /predictions_folder/ --c_rc_add /path/to/c_rc_df.csv -s_add /path_for savings >> out\n```\n### Flags\nBASH2* \n"
      },
      "source": "https://raw.githubusercontent.com/OrensteinLab/DeepZF/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8667705091545466,
      "result": {
        "original_header": "Model training",
        "type": "Text_excerpt",
        "value": "2. Run model:\n```\n\tpython3.6 main_loo_PWMpredictor.py -d_add /path_to_data/ -add ${f} -zf_p_df zf_pred.csv -lr $lr -e $i -res_num 12 -r 0 -t_v retrain -ac_x False >> ${f}_out\n```\n### Flags\nSame as in PWMpredictor\n(-zf_p_df is different now) \n### Model evaluation:\nFor DeepZF evaluation we calculated the similarity of two motif pairs (on the predicted and experimentally based PWM), using [MoSBAT](https://github.com/csglab/MoSBAT).\nRun bash script: (update paths)\n```\n./eval_DeepZF.sh\n```\nThe script above creates 2 folder:\n1. mosbat_input: includes mosbat input txt  files: ground ruth and predicted PWMs.\n2. mosbat_output: includes: \n   * results.energy.correl.txt\n   * correlation data frame: Pearson correlation score for each protein.\n   * out_eval_mosbat.txt: a txt file with mean and std score.\n \n"
      },
      "source": "https://raw.githubusercontent.com/OrensteinLab/DeepZF/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/OrensteinLab/DeepZF/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OrensteinLab/DeepZF/main/PWMpredictor.ipynb"
      },
      "source": "https://raw.githubusercontent.com/OrensteinLab/DeepZF/main/PWMpredictor.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OrensteinLab/DeepZF/main/BindZFPredictor.ipynb"
      },
      "source": "https://raw.githubusercontent.com/OrensteinLab/DeepZF/main/BindZFPredictor.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/OrensteinLab/DeepZF/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "OrensteinLab/DeepZF"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DeepZF"
      },
      "source": "https://raw.githubusercontent.com/OrensteinLab/DeepZF/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OrensteinLab/DeepZF/main/PWMpredictor/result_analysis/eval_DeepZF.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.9961817695983849,
      "result": {
        "original_header": "Flags",
        "type": "Text_excerpt",
        "value": "```\n   '-b_n', '--benchmark_name', help='zfs data and labels name ', type=str, required=True\n   '-b_d', '--benchmark_dir', help='zfs data and labels directory ', type=str, required=True\n    '-m_d', '--model_dir', help='ProteinBERT pretrained model directory', type=str, required=True\n    '-r', '--run_gpu', help='equal 1 if should run on gpu', type=int, required=True\n    '-p_add', '--pred_add', help='predictions saving folders add ', type=str, required=True\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/OrensteinLab/DeepZF/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8436959953400018,
      "result": {
        "original_header": "Flags",
        "type": "Text_excerpt",
        "value": "```\n   '-b_n', '--benchmark_name', help='zfs data and labels name ', type=str, required=True\n   '-b_d', '--benchmark_dir', help='zfs data and labels directory ', type=str, required=True\n    '-m_d', '--model_dir', help='ProteinBERT pretrained model directory', type=str, required=True\n    '-r', '--run_gpu', help='equal 1 if should run on gpu', type=int, required=True\n    '-p_add', '--pred_add', help='predictions saving folders add ', type=str, required=True\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/OrensteinLab/DeepZF/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8420675021684342,
      "result": {
        "original_header": "Model training",
        "type": "Text_excerpt",
        "value": "2. Run model:\n```\n\tpython3.6 main_loo_PWMpredictor.py -d_add /path_to_data/ -add ${f} -zf_p_df zf_pred.csv -lr $lr -e $i -res_num 12 -r 0 -t_v retrain -ac_x False >> ${f}_out\n```\n### Flags\nSame as in PWMpredictor\n(-zf_p_df is different now) \n### Model evaluation:\nFor DeepZF evaluation we calculated the similarity of two motif pairs (on the predicted and experimentally based PWM), using [MoSBAT](https://github.com/csglab/MoSBAT).\nRun bash script: (update paths)\n```\n./eval_DeepZF.sh\n```\nThe script above creates 2 folder:\n1. mosbat_input: includes mosbat input txt  files: ground ruth and predicted PWMs.\n2. mosbat_output: includes: \n   * results.energy.correl.txt\n   * correlation data frame: Pearson correlation score for each protein.\n   * out_eval_mosbat.txt: a txt file with mean and std score.\n \n"
      },
      "source": "https://raw.githubusercontent.com/OrensteinLab/DeepZF/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/OrensteinLab/DeepZF/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DeepZF"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "OrensteinLab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 126749,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 61163,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 1046,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OrensteinLab/DeepZF/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Prerequisites",
        "parent_header": [
          "DeepZF"
        ],
        "type": "Text_excerpt",
        "value": "BindZFpredictor architecture is based on [ProteinBERT](https://github.com/nadavbra/protein_bert) which was implemented using Tensorflow.\n\nBy installing [ProteinBERT](https://github.com/nadavbra/protein_bert) you will get all BindZFpredictor requirements:\n\n```bash\npip install protein-bert\n```\n\nBindZFpredictor was run on python 3.6.8 with keras 2.6.0 and tensorflow 2.6.2\n"
      },
      "source": "https://raw.githubusercontent.com/OrensteinLab/DeepZF/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-04 13:00:35",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Predicting using BindZFpredictor",
        "parent_header": [
          "BindZFpredictor",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Create trained model file model.p by concatenating its splits:\n```\ncd BindZF_predictor/code/\n\ncat x?? > model.p\n```\n\nRun under BindZFpredictor/code dir:\n```\npython3.6 main_bindzfpredictor_predict.py -in <input_file> -out <output_file> -m model.p -e encoder.p -r <gpu-0/1>\n```\nExample:\n```\npython3.6 main_bindzfpredictor_predict.py -in 40_zf_40_b.csv -out results.tsv -m model.p -e encoder.p -r 1\n```\n\nNote that you will need to identify the zinc fingers according to the regular expression by yourself. Then, append each finger by its adajcent 40aa residues on each side, and proive them as input to the command line above to obtain their DNA-binding probabilities.\n"
      },
      "source": "https://raw.githubusercontent.com/OrensteinLab/DeepZF/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Training BindZFpredictor",
        "parent_header": [
          "BindZFpredictor",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "After installing ProteinBERT you can update finetunning.py as in this git for saving predictions.\n\n\n1.\n ```\n cd path/to/BindZFpredictor/directory\n```\n2. Create saving folders \n```\n   data_name=\"${i}_zf_${i}_b\"\n   (where i = 10k k= [0,10] see Data/BindZFpredictor folder)\n   f=\"path/to/BindZFpredictor/directory/${data_name}\"\n   mkdir -p $f\n   mkdir -p ${f}/predictions\n```\n3. Run model\n```\n   python3.6 main_bindzfpredictor.py -b_n ${data_name} -b_d path/to/bemchmark_directory -m_d path/to/ProteinBERT_pretrained_model -r 1 -p_add ${f} >> out\n```"
      },
      "source": "https://raw.githubusercontent.com/OrensteinLab/DeepZF/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Creating predicted binding ZF dataframe and evaluate model",
        "parent_header": [
          "BindZFpredictor",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```\npython3.6 create_zf_pred_df_and_cal_auc.py -p_add path/to/predicted ZF -m_p path/to/Data\n```\n### Flags\n```\n'-p_add', '--pred_add', help='predictions saving folders add ', type=str, required=True\n'-m_p', '--main_path', help='main path add ', type=str, required=True\n```"
      },
      "source": "https://raw.githubusercontent.com/OrensteinLab/DeepZF/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Predicting using PWMpredictor",
        "parent_header": [
          "PWMpredictor",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Run under PWMpredictor/code dir:\n```\npython3.6 main_PWMpredictor.py -in <input_file> -out <output_file> -m <model_file>\n```\nExample:\n```\npython3.6 main_PWMpredictor.py -in ../../Data/PWMpredictor/c_rc_df.csv -out predictions.txt -m ../models/transfer_model.h5\n```\n"
      },
      "source": "https://raw.githubusercontent.com/OrensteinLab/DeepZF/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Training PWMpredictor",
        "parent_header": [
          "PWMpredictor",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "1. Create saving folders:\n```\n\tf=\"path/to/PWMpredictor_directory\"\n\n\tmkdir -p $f\n\t\n\tmkdir -p ${f}/history\n\t\n\tmkdir -p ${f}/models\n\t\n\tmkdir -p ${f}/predictions\n  ```\n2. Run model:\n```\n\tpython3.6 main_loo_PWMpredictor.py -d_add /path_to_data/ -add ${f} -zf_p_df c_rc_df.csv -lr $lr -e $i -res_num 12 -r 0 -t_v retrain -ac_x False >> ${f}_out\n```\n### Flags\n```\n'-d_add', '--data_folder_address', help='main data and labels folder', type=str, required=True)\n'-add', '--folder_address', help='main folder address for savings', type=str, required=True\n'-zf_p_df', '--pred_zf_df', help='predicted binding zinc fingers df', type=str, required=True\n'-lr', '--learning_rate', help='learning rate of adam optimizer', type=float, required=True\n'-e', '--epochs', help='number of epochs', type=int, required=True\n'-res_num', '--residual_num', help='number of residuals to use: 4, 7, 12', type=int, required=True \n'-r', '--run_gpu', help='equal 1 if should run on gpu', type=int, required=True\n'-t_v', '--transfer_version', help='last_layer or retrain', type=str, required=True\n'-ac_x', '--amino_acid_x', help='use b1h data with amino acid x', type=str, required=True\n```\n"
      },
      "source": "https://raw.githubusercontent.com/OrensteinLab/DeepZF/main/README.md",
      "technique": "header_analysis"
    }
  ]
}