{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jtlovell/GENESPACE"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-10-08T19:09:16Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-03T03:19:07Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.8425485328896756,
      "result": {
        "original_header": "3. Formatting your annotations",
        "type": "Text_excerpt",
        "value": "This can be the trickiest part of running GENESPACE. If you are having trouble, open an issue. \n \n"
      },
      "source": "https://raw.githubusercontent.com/jtlovell/GENESPACE/master/readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8390755048926289,
      "result": {
        "original_header": "3.1 GENESPACE-readable annotation format",
        "type": "Text_excerpt",
        "value": "For each genome, GENESPACE needs: \n"
      },
      "source": "https://raw.githubusercontent.com/jtlovell/GENESPACE/master/readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9894412538322738,
      "result": {
        "original_header": "3.3 Naming and storing raw annotation files",
        "type": "Text_excerpt",
        "value": "Its usually preferable to have a static repository containing the raw versions of all of your genome annotations, lets call this directory `/genomeRepo`. Each unique genome annotation should be stored in its own subdirectory with an informative name. Here, each genome is given a species id, genotype id and genome version. The annotation files of interest are the gff3-formated protein coding gene features and the primary transcript translated cds (peptides). These are the two most common types of annotation files available. Download them from your favorite repositories and place them in a directory structure like below. The file names within each genome directory can be anything as long as they have file names that can be found through regular expression matching (see `parse_annotations(gffString, faString)`).\n```\n/genomeRepo\n\u2514\u2500 species1_genoX_v1.0_NCBI\n    \u2514\u2500 peptidesGenoX.fa\n    \u2514\u2500 genesGenoX.gff3\n\u2514\u2500 species2_genoY_v1.0_NCBI\n    \u2514\u2500 peptidesSpecies2.fa\n    \u2514\u2500 genes.gff3\n\u2514\u2500 species3_genoW_v1.0_phytozome\n    \u2514\u2500 peptides.fa\n    \u2514\u2500 genesSpecies2v1.gff3\n\u2514\u2500 species4_genoZ_v1.0_otherRepo\n    \u2514\u2500 peptides.fa\n    \u2514\u2500 genes.gff3\n  ...\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/jtlovell/GENESPACE/master/readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9394163339267668,
      "result": {
        "original_header": "3.4 Partially-automated annotation parsing",
        "type": "Text_excerpt",
        "value": "Assuming the directory structure from 2.4, we want to parse the raw annotations into the directory structure outlined in 2.3. The convenience function `parse_annotations` does this. Lets take the simple case where we have translatedCDS and gene.gff3 files from NCBI. In this case, we can specify the \"ncbi\" present which will automatically parse these files correctly:\n```\nparsedPaths <- parse_annotations(\n  rawGenomeRepo = \"/genomeRepo\", \n  genomeDirs = c(\"species1_genoX_v1.0_NCBI\", \"species2_genoY_v1.0_NCBI\"),\n  genomeIDs = c(\"species1\", \"species2\"),\n  gffString = \"gff3\",\n  faString = \"fa\",\n  presets = \"ncbi\", \n  genespaceWd = \"/path/to/GENESPACE/workingDir\")\n```\n \nThis will parse the two NCBI-formatted annotations into matched bed and fasta files and place those in the /bed and /peptide subdirectories of the GENESPACE working directory. Importantly, it will re-name the annotations with the genomeIDs. This allows for informative naming conventions in the raw file repo, but simpler names for plotting and analysis. \n \n"
      },
      "source": "https://raw.githubusercontent.com/jtlovell/GENESPACE/master/readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9160047372200325,
      "result": {
        "original_header": "3.5 Non-standard annotation formats",
        "type": "Text_excerpt",
        "value": "Most repositories have their own annotation formats. You may want to combine annotations from NCBI with those from phytozome (plant genome repo) or non-standard repositories. To do this, you simply re-run parse_annotations with different genomes. For example add a phytozome-formatted annotation:\n```\nparsedPaths <- parse_annotations(\n  rawGenomeRepo = \"/genomeRepo\", \n  genomeDirs = \"species3_genoW_v1.0_phytozome\",\n  genomeIDs = \"species3\",\n  gffString = \"gff3\",\n  faString = \"fa\",\n  presets = \"phytozome\",\n  genespaceWd = \"/path/to/GENESPACE/workingDir\")\n```\nThen add a non-standard annotation where there is only a simple geneID header on the peptide and the gene names are in the \"GeneID\" ';'-delimited 9th gff column. \n```\nparsedPaths <- parse_annotations(\n  rawGenomeRepo = \"/genomeRepo\", \n  genomeDirs = \"species4_genoZ_v1.0_otherRepo\",\n  genomeIDs = \"species4\",\n  gffString = \"gff3\",\n  faString = \"fa\",\n  headerEntryIndex = 1, \n  gffIdColumn = \"GeneID\",\n  genespaceWd = \"/path/to/GENESPACE/workingDir\")\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/jtlovell/GENESPACE/master/readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8508749003791195,
      "result": {
        "original_header": "3.6 Additional parameterization",
        "type": "Text_excerpt",
        "value": "Parsing can take some troubleshooting, which can be aided by setting `troubleshoot = TRUE`. This prints the first 10 lines of the raw and parsed gff and fasta headers. For some annotation types, you may need to give a fairly complex regular expression to gffStripText or headerStripText. For example, if the fasta name has some additional unwanted info after the last \".\" in the name: `headerStripText = '[.][^.]+$'`.  \n"
      },
      "source": "https://raw.githubusercontent.com/jtlovell/GENESPACE/master/readme.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jtlovell/GENESPACE/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 25
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jtlovell/GENESPACE/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "jtlovell/GENESPACE"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/jtlovell/GENESPACE/master/readme.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Software installation",
        "type": "Text_excerpt",
        "value": "Installation for v1 is identical to v0.9.4. Use the same conda (or other) installation environment as before. To install from scratch, you need R, a few 3rd party programs and a few R packages. Here is how to install these:\n"
      },
      "source": "https://raw.githubusercontent.com/jtlovell/GENESPACE/master/readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2.1 Install R",
        "parent_header": [
          "2. Software installation"
        ],
        "type": "Text_excerpt",
        "value": "GENESPACE is meant to be run interactively in the R environment for statistical computing. So, you need to have R installed. See [CRAN](https://www.r-project.org/) for the most recent release. \n"
      },
      "source": "https://raw.githubusercontent.com/jtlovell/GENESPACE/master/readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2.2 Install orthofinder",
        "parent_header": [
          "2. Software installation"
        ],
        "type": "Text_excerpt",
        "value": "`OrthoFinder` (which includes `DIAMOND2`) is most simply installed via conda (in the shell, not R). \n\n```\nconda create -n orthofinder\nconda activate orthofinder\nconda install -c bioconda orthofinder \n```\n\nIf conda is not available on your machine, you can install orthofinder from a number of other sources. See [orthofinder documentation](https://github.com/davidemms/OrthoFinder) for details.  \nRegardless of how `OrthoFinder` is installed, ensure that you have `OrthoFinder` version >= 2.5.4 and `DIAMOND` version >= 2.0.14.152.\n"
      },
      "source": "https://raw.githubusercontent.com/jtlovell/GENESPACE/master/readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2.3 Install MCScanX",
        "parent_header": [
          "2. Software installation"
        ],
        "type": "Text_excerpt",
        "value": "`MCScanX` should be installed from [github](https://github.com/wyp1125/MCScanX). \n"
      },
      "source": "https://raw.githubusercontent.com/jtlovell/GENESPACE/master/readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2.4 Install GENESPACE",
        "parent_header": [
          "2. Software installation"
        ],
        "type": "Text_excerpt",
        "value": "Once the above 3rd party dependencies are installed, get into R. If you made a conda environment, its useful to open R directly from that environment so that OrthoFinder stays in the path. \n\n```\nconda activate orthofinder\nopen -na rstudio # if using rstudio, otherwise, simply `R`\n```\n\nOnce in R, the easiest way to install GENESPACE uses the package `devtools` (which may need to be installed separately):\n\n```\nif (!requireNamespace(\"devtools\", quietly = TRUE))\n    install.packages(\"devtools\")\ndevtools::install_github(\"jtlovell/GENESPACE\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/jtlovell/GENESPACE/master/readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2.5 Install R dependencies",
        "parent_header": [
          "2. Software installation"
        ],
        "type": "Text_excerpt",
        "value": "If they are not yet installed, `install_github` will install a few dependencies directly (ggplot2, igraph, dbscan, R.utils, parallel). However, you will need to install the bioconductor packages separately:\n\n```\nif (!requireNamespace(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\nBiocManager::install(c(\"Biostrings\", \"rtracklayer\"))\n\nlibrary(GENESPACE)\n```\n\n##################\n"
      },
      "source": "https://raw.githubusercontent.com/jtlovell/GENESPACE/master/readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.2 Manual parsing of raw annotation files",
        "parent_header": [
          "3. Formatting your annotations"
        ],
        "type": "Text_excerpt",
        "value": "It's possible to format all files using custom scripts. If you opt for this route, re-name and place the genespace-formatted annotations in your working directory. For example for two genomes (\"genome1\", \"genome2\"):\n\n```\n/workingDirectory\n\u2514\u2500 peptide\n    \u2514\u2500 genome1.fa\n    \u2514\u2500 genome2.fa\n\u2514\u2500 bed\n    \u2514\u2500 genome1.bed\n    \u2514\u2500 genome2.bed\n```\n"
      },
      "source": "https://raw.githubusercontent.com/jtlovell/GENESPACE/master/readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9894799046056421,
      "result": {
        "original_header": "3.4 Partially-automated annotation parsing",
        "type": "Text_excerpt",
        "value": "Assuming the directory structure from 2.4, we want to parse the raw annotations into the directory structure outlined in 2.3. The convenience function `parse_annotations` does this. Lets take the simple case where we have translatedCDS and gene.gff3 files from NCBI. In this case, we can specify the \"ncbi\" present which will automatically parse these files correctly:\n```\nparsedPaths <- parse_annotations(\n  rawGenomeRepo = \"/genomeRepo\", \n  genomeDirs = c(\"species1_genoX_v1.0_NCBI\", \"species2_genoY_v1.0_NCBI\"),\n  genomeIDs = c(\"species1\", \"species2\"),\n  gffString = \"gff3\",\n  faString = \"fa\",\n  presets = \"ncbi\", \n  genespaceWd = \"/path/to/GENESPACE/workingDir\")\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/jtlovell/GENESPACE/master/readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9465673998500951,
      "result": {
        "original_header": "3.5 Non-standard annotation formats",
        "type": "Text_excerpt",
        "value": "Most repositories have their own annotation formats. You may want to combine annotations from NCBI with those from phytozome (plant genome repo) or non-standard repositories. To do this, you simply re-run parse_annotations with different genomes. For example add a phytozome-formatted annotation:\n```\nparsedPaths <- parse_annotations(\n  rawGenomeRepo = \"/genomeRepo\", \n  genomeDirs = \"species3_genoW_v1.0_phytozome\",\n  genomeIDs = \"species3\",\n  gffString = \"gff3\",\n  faString = \"fa\",\n  presets = \"phytozome\",\n  genespaceWd = \"/path/to/GENESPACE/workingDir\")\n```\nThen add a non-standard annotation where there is only a simple geneID header on the peptide and the gene names are in the \"GeneID\" ';'-delimited 9th gff column. \n```\nparsedPaths <- parse_annotations(\n  rawGenomeRepo = \"/genomeRepo\", \n  genomeDirs = \"species4_genoZ_v1.0_otherRepo\",\n  genomeIDs = \"species4\",\n  gffString = \"gff3\",\n  faString = \"fa\",\n  headerEntryIndex = 1, \n  gffIdColumn = \"GeneID\",\n  genespaceWd = \"/path/to/GENESPACE/workingDir\")\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/jtlovell/GENESPACE/master/readme.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.9305178626400554,
      "result": {
        "original_header": "3.1 GENESPACE-readable annotation format",
        "type": "Text_excerpt",
        "value": "Example bed file:\n```\ncat /bed/genome1.bed | head -2\nchr1  1500  2000  gene1\nchr1  2500  2200  gene2\n```\nExample peptide fasta file: \n```\ncat /peptide/genome1.fa | head -4\n>gene1\nMGASGRGAGEQQSPSSTG\n>gene2\nMLVMSECKGRDRSPSSSM\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/jtlovell/GENESPACE/master/readme.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jtlovell/GENESPACE/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "GENESPACE R Package (GENESPACE) Copyright (c) 2021, HudsonAlpha Institute for Biotechnology. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n(1) Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n(2) Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n(3) Neither the name of the HudsonAlpha Institute for Biotechnology nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\nCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nYou are under no obligation whatsoever to provide any bug fixes, patches, or upgrades to the features, functionality or performance of the source code (\"Enhancements\") to anyone; however, if you choose to make your Enhancements available either publicly, or directly to Lawrence Berkeley National Laboratory, without imposing a separate written license agreement for such Enhancements, then you hereby grant the following license: a non-exclusive, royalty-free perpetual license to install, use, modify, prepare derivative works, incorporate into other computer software, distribute, and sublicense such enhancements or derivative works thereof, in binary and source code form.\n"
      },
      "source": "https://raw.githubusercontent.com/jtlovell/GENESPACE/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "GENESPACE"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "jtlovell"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 380088,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jtlovell/GENESPACE/master/readme.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jtlovell",
          "type": "User"
        },
        "date_created": "2023-04-21T15:36:19Z",
        "date_published": "2023-05-03T01:01:09Z",
        "description": "Stable release of v1.2.3",
        "html_url": "https://github.com/jtlovell/GENESPACE/releases/tag/v1.2.3",
        "name": "v1.2.3",
        "release_id": 101656096,
        "tag": "v1.2.3",
        "tarball_url": "https://api.github.com/repos/jtlovell/GENESPACE/tarball/v1.2.3",
        "type": "Release",
        "url": "https://api.github.com/repos/jtlovell/GENESPACE/releases/101656096",
        "value": "https://api.github.com/repos/jtlovell/GENESPACE/releases/101656096",
        "zipball_url": "https://api.github.com/repos/jtlovell/GENESPACE/zipball/v1.2.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jtlovell",
          "type": "User"
        },
        "date_created": "2023-04-17T20:16:26Z",
        "date_published": "2023-04-17T20:18:12Z",
        "description": "Same basic functionality as v1.1.10, but now with a suite of tools for genome QC, sliding windows and other viz.",
        "html_url": "https://github.com/jtlovell/GENESPACE/releases/tag/v1.2.2",
        "name": "v1.2.2",
        "release_id": 99813626,
        "tag": "v1.2.2",
        "tarball_url": "https://api.github.com/repos/jtlovell/GENESPACE/tarball/v1.2.2",
        "type": "Release",
        "url": "https://api.github.com/repos/jtlovell/GENESPACE/releases/99813626",
        "value": "https://api.github.com/repos/jtlovell/GENESPACE/releases/99813626",
        "zipball_url": "https://api.github.com/repos/jtlovell/GENESPACE/zipball/v1.2.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jtlovell",
          "type": "User"
        },
        "date_created": "2023-04-05T19:06:48Z",
        "date_published": "2023-04-05T19:17:35Z",
        "description": "Updated riparian plotting, better handling of issues with synteny-constrained orthogroups, bug fixes. Some updates to parse_annotations too. ",
        "html_url": "https://github.com/jtlovell/GENESPACE/releases/tag/v1.1.10",
        "name": "v1.1.10",
        "release_id": 98238966,
        "tag": "v1.1.10",
        "tarball_url": "https://api.github.com/repos/jtlovell/GENESPACE/tarball/v1.1.10",
        "type": "Release",
        "url": "https://api.github.com/repos/jtlovell/GENESPACE/releases/98238966",
        "value": "https://api.github.com/repos/jtlovell/GENESPACE/releases/98238966",
        "zipball_url": "https://api.github.com/repos/jtlovell/GENESPACE/zipball/v1.1.10"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jtlovell",
          "type": "User"
        },
        "date_created": "2023-03-28T14:33:58Z",
        "date_published": "2023-03-28T14:40:49Z",
        "description": "Updated handling of non-standard situations. New querying tools for CNVs.",
        "html_url": "https://github.com/jtlovell/GENESPACE/releases/tag/v1.1.8",
        "release_id": 97191564,
        "tag": "v1.1.8",
        "tarball_url": "https://api.github.com/repos/jtlovell/GENESPACE/tarball/v1.1.8",
        "type": "Release",
        "url": "https://api.github.com/repos/jtlovell/GENESPACE/releases/97191564",
        "value": "https://api.github.com/repos/jtlovell/GENESPACE/releases/97191564",
        "zipball_url": "https://api.github.com/repos/jtlovell/GENESPACE/zipball/v1.1.8"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jtlovell",
          "type": "User"
        },
        "date_created": "2023-03-06T16:13:20Z",
        "date_published": "2023-03-06T16:19:54Z",
        "description": "GENESPACE v1.1.4 release (updated 6-March 2023)",
        "html_url": "https://github.com/jtlovell/GENESPACE/releases/tag/v1.1.4",
        "name": "v1.1.4",
        "release_id": 94657796,
        "tag": "v1.1.4",
        "tarball_url": "https://api.github.com/repos/jtlovell/GENESPACE/tarball/v1.1.4",
        "type": "Release",
        "url": "https://api.github.com/repos/jtlovell/GENESPACE/releases/94657796",
        "value": "https://api.github.com/repos/jtlovell/GENESPACE/releases/94657796",
        "zipball_url": "https://api.github.com/repos/jtlovell/GENESPACE/zipball/v1.1.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jtlovell",
          "type": "User"
        },
        "date_created": "2022-02-24T18:46:58Z",
        "date_published": "2022-03-13T16:56:58Z",
        "description": "This is the current release of GENESPACE\r\n\r\nUpdates here include a modified riparian plot plot_riparianHits, which will eventually replace the previous plot_riparian.\r\nThe pan-genome annotation construction method has also been updated to use directed acyclic graphs generated from syntenic hits, rather than enforcing undirected cyclic graphs from orthogroups.\r\nThe plot_hits routine has been much simplified and most previous functionality has been removed due to incompatibility issues with low-contiguity genomes. Future versions will restore some of this functionality.\r\n\r\nMinor bug fixes to parse_annotations and synteny are also included.",
        "html_url": "https://github.com/jtlovell/GENESPACE/releases/tag/v0.9.3",
        "name": "GENESPACE v0.9.3",
        "release_id": 61708433,
        "tag": "v0.9.3",
        "tarball_url": "https://api.github.com/repos/jtlovell/GENESPACE/tarball/v0.9.3",
        "type": "Release",
        "url": "https://api.github.com/repos/jtlovell/GENESPACE/releases/61708433",
        "value": "https://api.github.com/repos/jtlovell/GENESPACE/releases/61708433",
        "zipball_url": "https://api.github.com/repos/jtlovell/GENESPACE/zipball/v0.9.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jtlovell",
          "type": "User"
        },
        "date_created": "2021-10-27T21:49:15Z",
        "date_published": "2021-10-29T20:21:01Z",
        "description": "GENESPACE initial production release. Synteny, basic pan-genome annotation, dotplots and riparian plots. Vignettes available for the main pipeline and riparian plots.\r\n*Note* this update (29-Oct 2021) updates default parameters to more effectively trim duplicate arrays in the pan-genome and replaces the 26-Oct release with the same title. ",
        "html_url": "https://github.com/jtlovell/GENESPACE/releases/tag/v0.8.5",
        "name": "GENESPACE v0.8.5",
        "release_id": 52343545,
        "tag": "v0.8.5",
        "tarball_url": "https://api.github.com/repos/jtlovell/GENESPACE/tarball/v0.8.5",
        "type": "Release",
        "url": "https://api.github.com/repos/jtlovell/GENESPACE/releases/52343545",
        "value": "https://api.github.com/repos/jtlovell/GENESPACE/releases/52343545",
        "zipball_url": "https://api.github.com/repos/jtlovell/GENESPACE/zipball/v0.8.5"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "1.1 Input files and dependencies",
        "parent_header": [
          "1. Quick start"
        ],
        "type": "Text_excerpt",
        "value": "To run GENESPACE, you need:\n\n1. A valid installation of OrthoFinder, MCScanX and R (see part 2: software installation)\n2. A peptide (protein) fasta and a bed-formatted gene model annotation file for 2 or more genomes (see part 3: formatting your annotations)\n"
      },
      "source": "https://raw.githubusercontent.com/jtlovell/GENESPACE/master/readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2.5 Install R dependencies",
        "parent_header": [
          "2. Software installation"
        ],
        "type": "Text_excerpt",
        "value": "If they are not yet installed, `install_github` will install a few dependencies directly (ggplot2, igraph, dbscan, R.utils, parallel). However, you will need to install the bioconductor packages separately:\n\n```\nif (!requireNamespace(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\nBiocManager::install(c(\"Biostrings\", \"rtracklayer\"))\n\nlibrary(GENESPACE)\n```\n\n##################\n"
      },
      "source": "https://raw.githubusercontent.com/jtlovell/GENESPACE/master/readme.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "1.2 Running GENESPACE",
        "parent_header": [
          "1. Quick start"
        ],
        "type": "Text_excerpt",
        "value": "With these data in hand, you initialize a GENESPACE run, then run the pipeline from R:\n\n```\nlibrary(GENESPACE)\ngpar <- init_genespace(\n  wd = \"/path/to/your/workingDirectory\", \n  path2mcscanx = \"/path/to/MCScanX/\")\ngpar <- run_genespace(gsParam = gpar) \n```\n\n`run_genespace` completes the full pipeline, which includes:\n\n1. Tandem array discovery\n2. Syntenic block coordinate calculation\n3. Synteny-constrained orthogroups\n4. Pairwise dotplots\n5. Syntenic position interpolation of all genes\n6. Pan-genome annotation construction\n7. Multi-genome riparian plotting\n\nSee the tutorial for more details\n"
      },
      "source": "https://raw.githubusercontent.com/jtlovell/GENESPACE/master/readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1.3 Running with example data",
        "parent_header": [
          "1. Quick start"
        ],
        "type": "Text_excerpt",
        "value": "We recommend doing a test run with real data before applying GENESPACE to your own datasets. To help facilitate this, run these commands in R (assuming valid installation):\n\n```\n###############################################\n# -- change paths to those valid on your system\ngenomeRepo <- \"~/path/to/store/rawGenomes\"\nwd <- \"~/path/to/genespace/workingDirectory\"\npath2mcscanx <- \"~/path/to/MCScanX/\"\n###############################################\n\n# -- download raw data from NCBI for human and chicken genomes\ndir.create(genomeRepo)\nrawFiles <- download_exampleData(filepath = genomeRepo)\n\n# -- parse the annotations to fastas with headers that match a gene bed file\nparsedPaths <- parse_annotations(\n  rawGenomeRepo = genomeRepo,\n  genomeDirs = c(\"human\", \"chicken\"),\n  genomeIDs = c(\"human\", \"chicken\"),\n  presets = \"ncbi\",\n  genespaceWd = wd)\n\n# -- initalize the run and QC the inputs\ngpar <- init_genespace(\n  wd = wd, \n  path2mcscanx = path2mcscanx)\n\n# -- accomplish the run\nout <- run_genespace(gpar)\n```\n\n##################\n"
      },
      "source": "https://raw.githubusercontent.com/jtlovell/GENESPACE/master/readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.7 Convert a previous run and re-run GENESPACE",
        "parent_header": [
          "3. Formatting your annotations"
        ],
        "type": "Text_excerpt",
        "value": "Earlier versions of GENESPACE used 'simplified gff3' annotation files. To make GENESPACE compatible with existing bioinformatic software, we have opted to use the bed format for v1 onward. If you have a previous GENESPACE run, you can easily convert the input to v1 as follows (this also copies over orthofinder results so those can be re-used too): \n\n```\nwd <- \"/place/to/store/new/run\"\nconvert_input2v1(\n  v1Dir = wd, \n  existingDir = \"/path/to/existing/run\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/jtlovell/GENESPACE/master/readme.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 09:03:59",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 187
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "1.3 Running with example data",
        "parent_header": [
          "1. Quick start"
        ],
        "type": "Text_excerpt",
        "value": "We recommend doing a test run with real data before applying GENESPACE to your own datasets. To help facilitate this, run these commands in R (assuming valid installation):\n\n```\n###############################################\n# -- change paths to those valid on your system\ngenomeRepo <- \"~/path/to/store/rawGenomes\"\nwd <- \"~/path/to/genespace/workingDirectory\"\npath2mcscanx <- \"~/path/to/MCScanX/\"\n###############################################\n\n# -- download raw data from NCBI for human and chicken genomes\ndir.create(genomeRepo)\nrawFiles <- download_exampleData(filepath = genomeRepo)\n\n# -- parse the annotations to fastas with headers that match a gene bed file\nparsedPaths <- parse_annotations(\n  rawGenomeRepo = genomeRepo,\n  genomeDirs = c(\"human\", \"chicken\"),\n  genomeIDs = c(\"human\", \"chicken\"),\n  presets = \"ncbi\",\n  genespaceWd = wd)\n\n# -- initalize the run and QC the inputs\ngpar <- init_genespace(\n  wd = wd, \n  path2mcscanx = path2mcscanx)\n\n# -- accomplish the run\nout <- run_genespace(gpar)\n```\n\n##################\n"
      },
      "source": "https://raw.githubusercontent.com/jtlovell/GENESPACE/master/readme.md",
      "technique": "header_analysis"
    }
  ]
}