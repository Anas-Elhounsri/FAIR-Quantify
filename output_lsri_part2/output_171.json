{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Reference",
        "parent_header": [
          "Snapshot: a package for clustering and visualizing epigenetic history during cell differentiation"
        ],
        "type": "Text_excerpt",
        "value": "[Xiang, G., Giardine, B., An, L., Sun, C., Keller, C.A., Heuston, E.F., Anderson, S.M., Kirby, M., Bodine, D., Zhang, Y. and Hardison, R.C., 2023. Snapshot: a package for clustering and visualizing epigenetic history during cell differentiation. BMC bioinformatics, 24(1), p.102.](https://bmcbioinformatics.biomedcentral.com/articles/10.1186/s12859-023-05223-1)\n\n"
      },
      "source": "https://raw.githubusercontent.com/guanjue/Snapshot/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/guanjue/snapshot"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-02-28T23:37:53Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-02-08T18:56:50Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Snapshot: a package for clustering and visualizing epigenetic history during cell differentiation"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9812942650277087,
      "result": {
        "original_header": "Snapshot: a package for clustering and visualizing epigenetic history during cell differentiation",
        "type": "Text_excerpt",
        "value": "Here we developed a package, called Snapshot, for clustering and visualizing the cCREs and their functional epigenetic states during cell differentiation. The package uses a binarized indexing strategy for grouping each cCRE into different clusters (Fig. 1). The strategy guarantees to identify all binarized cCRE clusters in the data and further merges them into interpretable groups. It also automatically determines the number of clusters. Furthermore, the clusters and the corresponding dominant epigenetic states in each of the cell types can be visualized by incorporating the user provided cell-differentiation-tree, and thus can highlight the epigenetic history specific to any particular cell lineage. \n \n"
      },
      "source": "https://raw.githubusercontent.com/guanjue/Snapshot/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8768323879251378,
      "result": {
        "original_header": "Snapshot Input data",
        "type": "Text_excerpt",
        "value": "User can choose to either directly input the index matrix, signal matrix, and functional epigenetic state matrix. The format for these matrices can be found at [Input Matrix format](https://github.com/guanjue/snapshot/blob/main/INPUT_format_matrix.md). \nAlternatively, the user can generate these matrices from raw data, including a peak bed file, a signal bigWig file, and a functional epigenetic state bigBed file. Information on how to use raw data as input for Snapshot can be found at [Input format for Raw data](https://github.com/guanjue/snapshot/blob/main/INPUT_format_raw.md). \n"
      },
      "source": "https://raw.githubusercontent.com/guanjue/Snapshot/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/guanjue/Snapshot/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/guanjue/snapshot/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "guanjue/snapshot"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Snapshot: a package for clustering and visualizing epigenetic history during cell differentiation"
      },
      "source": "https://raw.githubusercontent.com/guanjue/Snapshot/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/guanjue/Snapshot/main/Step1_run_Snapshot.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/guanjue/Snapshot/main/previous_scripts/01_Prepare_inputs_for_test_RUN.mm10.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/guanjue/Snapshot/main/previous_scripts/runall_commandline.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/guanjue/Snapshot/main/previous_scripts/01_Prepare_epigenetic_state_bedinputs_for_snapshot.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/guanjue/Snapshot/main/previous_scripts/runall.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/guanjue/Snapshot/main/previous_scripts/01_Prepare_inputs_for_test_RUN.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/guanjue/Snapshot/main/previous_scripts/runall_commandline.pre.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/guanjue/Snapshot/main/previous_scripts/runall_commandline%202.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/guanjue/snapshot/master/test_data/example/snapshot_test_run_merge.meta_cluster_cCRE_ave_merge.png"
      },
      "source": "https://raw.githubusercontent.com/guanjue/Snapshot/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/guanjue/snapshot/master/test_data/example/8.peak_signal_state_list.merge.txt8.tree.png"
      },
      "source": "https://raw.githubusercontent.com/guanjue/Snapshot/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/guanjue/snapshot/main/test_data/example/8.peak_signal_state_list.merge.txt.tree.png"
      },
      "source": "https://raw.githubusercontent.com/guanjue/Snapshot/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/guanjue/snapshot/master/test_data/example/8.violin.png"
      },
      "source": "https://raw.githubusercontent.com/guanjue/Snapshot/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/guanjue/snapshot/master/test_data/example/8.metaIS.bar.png"
      },
      "source": "https://raw.githubusercontent.com/guanjue/Snapshot/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Snapshot Installation Guide\n\n## Dependencies\nThe following packages and tools are required to run Snapshot:\n- Python3:\n  - numpy\n  - sklearn\n- R:\n  - ggplot2\n  - pheatmap\n  - igraph\n  - networkD3\n  - data.table\n  - mclust\n  - dplyr\n  - lsa\n  - cba\n  - RColorBrewer\n  - tidyverse\n- bedtools\n- ucsc_tools\n\n\n## Installation Steps\n1. Clone the Github repository:\n```\ngit clone https://github.com/guanjue/snapshot.git\n```\n2. Update conda channels\n```\nconda config --add channels defaults\nconda config --add channels bioconda\nconda config --add channels conda-forge\nconda config --add channels mvdbeek\n```\n3. Set up a conda environment named \"snapshot\":\n```\nconda create -n snapshot python=3 r=3.6 bedtools ucsc_tools numpy scikit-learn r-ggplot2 r-pheatmap r-igraph r-networkD3 r-data.table r-mclust r-dplyr r-lsa r-cba r-RColorBrewer r-tidyverse\nconda activate snapshot\n```\n\nNote: Detailed instructions on how to install conda can be found in the [conda documentation](https://docs.conda.io/projects/conda/en/latest/user-guide/index.html).\n"
      },
      "source": "https://raw.githubusercontent.com/guanjue/Snapshot/main/INSTALL.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Snapshot Installation Guide",
        "type": "Text_excerpt",
        "value": "The Snapshot Installation Guide can be found at [Installation Guide](https://github.com/guanjue/snapshot/blob/main/INSTALL.md).\n\n## "
      },
      "source": "https://raw.githubusercontent.com/guanjue/Snapshot/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999916991015481,
      "result": {
        "original_header": "Output matrix and bed files",
        "type": "Text_excerpt",
        "value": "- The bed file of each Meta-Index-Set and each Index-Set\n```\n### bed files for each Meta-Index-Set\nls -ltrh snapshot_test_run_merge_MetaISs_bed_files | head\ntotal 5328\n-rw-r--r--  1 universe    59K Feb  3 13:34 MetaIS.19.bed\n-rw-r--r--  1 universe   469K Feb  3 13:34 MetaIS.1.bed\n-rw-r--r--  1 universe    28K Feb  3 13:34 MetaIS.5.bed\n-rw-r--r--  1 universe   635K Feb  3 13:34 MetaIS.3.bed\n-rw-r--r--  1 universe   206K Feb  3 13:34 MetaIS.7.bed\n-rw-r--r--  1 universe   197K Feb  3 13:34 MetaIS.10.bed\n-rw-r--r--  1 universe    67K Feb  3 13:34 MetaIS.12.bed\n-rw-r--r--  1 universe    87K Feb  3 13:34 MetaIS.16.bed\n-rw-r--r--  1 universe    92K Feb  3 13:34 MetaIS.2.bed\n\n### bed files for each Index-Set\nls -ltrh snapshot_test_run_merge_IndexSets_bed_files | head\ntotal 9408\n-rw-r--r--  1 universe    73K Feb  3 13:34 1.0_0_0_0_0_0_0_0_0_0_0_0_1.index_set.bed\n-rw-r--r--  1 universe   137K Feb  3 13:34 2.0_0_0_0_0_0_0_0_0_0_0_1_0.index_set.bed\n-rw-r--r--  1 universe   152K Feb  3 13:34 3.0_0_0_0_0_0_0_0_0_0_0_1_1.index_set.bed\n-rw-r--r--  1 universe    67K Feb  3 13:34 4.0_0_0_0_0_0_0_0_0_0_1_0_0.index_set.bed\n-rw-r--r--  1 universe    86K Feb  3 13:34 5.0_0_0_0_0_0_0_0_0_0_1_0_1.index_set.bed\n-rw-r--r--  1 universe    87K Feb  3 13:34 6.0_0_0_0_0_0_0_0_0_0_1_1_1.index_set.bed\n-rw-r--r--  1 universe   242K Feb  3 13:34 7.0_0_0_0_0_0_0_0_0_1_0_0_0.index_set.bed\n-rw-r--r--  1 universe    47K Feb  3 13:34 8.0_0_0_0_0_0_0_0_0_1_0_0_1.index_set.bed\n-rw-r--r--  1 universe    43K Feb  3 13:34 9.0_0_0_0_0_0_0_0_0_1_0_1_0.index_set.bed\n\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/guanjue/Snapshot/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9928818195627748,
      "result": {
        "original_header": "Average ATAC-seq signals heatmap in all MetaISs.",
        "type": "Text_excerpt",
        "value": "<img src=\"https://raw.githubusercontent.com/guanjue/snapshot/master/test_data/example/snapshot_test_run_merge.meta_cluster_cCRE_ave_merge.png\" width=\"500\" height=\"600\">\n \n"
      },
      "source": "https://raw.githubusercontent.com/guanjue/Snapshot/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9789452023853255,
      "result": {
        "original_header": "Cell type differentiation tree (MetaIS-8): Cell differentiation Tree of Average signals",
        "type": "Text_excerpt",
        "value": "<img src=\"https://raw.githubusercontent.com/guanjue/snapshot/master/test_data/example/8.peak_signal_state_list.merge.txt8.tree.png\" width=\"500\" height=\"500\">\n \n"
      },
      "source": "https://raw.githubusercontent.com/guanjue/Snapshot/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9953857383471855,
      "result": {
        "original_header": "Cell type differentiation tree (MetaIS-8): Cell differentiation Tree of Functional Epigenetic States",
        "type": "Text_excerpt",
        "value": "<img src=\"https://raw.githubusercontent.com/guanjue/snapshot/main/test_data/example/8.peak_signal_state_list.merge.txt.tree.png\" width=\"500\" height=\"500\">\n \n"
      },
      "source": "https://raw.githubusercontent.com/guanjue/Snapshot/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8098659141896123,
      "result": {
        "original_header": "Snapshot Input data",
        "type": "Text_excerpt",
        "value": "Alternatively, the user can generate these matrices from raw data, including a peak bed file, a signal bigWig file, and a functional epigenetic state bigBed file. Information on how to use raw data as input for Snapshot can be found at [Input format for Raw data](https://github.com/guanjue/snapshot/blob/main/INPUT_format_raw.md). \n"
      },
      "source": "https://raw.githubusercontent.com/guanjue/Snapshot/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8198762052560339,
      "result": {
        "original_header": "Cell type differentiation tree (MetaIS-8): Cell differentiation Tree of Functional Epigenetic States",
        "type": "Text_excerpt",
        "value": "<img src=\"https://raw.githubusercontent.com/guanjue/snapshot/main/test_data/example/8.peak_signal_state_list.merge.txt.tree.png\" width=\"500\" height=\"500\">\n \n"
      },
      "source": "https://raw.githubusercontent.com/guanjue/Snapshot/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/guanjue/snapshot/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2018 BioLin\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
      },
      "source": "https://raw.githubusercontent.com/guanjue/Snapshot/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/guanjue/snapshot/master/test_data/example/snahpshot_revision.fig1.Snapshot_workflow.png"
      },
      "source": "https://raw.githubusercontent.com/guanjue/Snapshot/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "snapshot"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "guanjue"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 411090,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 127203,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 15812,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/guanjue/Snapshot/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 1: Modify the Script",
        "parent_header": [
          "Running Snapshot"
        ],
        "type": "Text_excerpt",
        "value": "Before running Snapshot, you need to provide the required input parameters and file paths in a `run_snapshot.parameter.settings.info.txt` file. The file should include the following information:\n\nThe details about the parameters and the alternative options can be found as [Parameter Settings](https://github.com/guanjue/snapshot/blob/main/parameter_settings.md)\n\n```\ncat test_data/run_snapshot.parameter.settings.info.hg38.ct13.txt \n##################################\n### required parameters or input files\noutput_name\tsnapshot_test_run_merge\npeak_signal_list_file\tpeak_signal_state_list.merge.txt\nIDEAS_state_color_list_file\tfunction_color_list.txt\ncell_type_tree_file\tcd_tree.txt\ngenome_size_file\t/Users/universe/Downloads/Snapshot_test/input_data_hg38/hg38.chrom.1_22XY.sizes\n\n### required folder path\ninput_folder\t/Users/universe/Downloads/Snapshot_test/input_data_hg38/\noutput_folder\t/Users/universe/Downloads/Snapshot_test/input_data_hg38/hg38_outputs/hg38_chrAll_analysis_merge/\nscript_folder\t/Users/universe/Documents/projects/snapshot/bin/\n\n### optional parameters or input files\nmaster_peak_bed\t/Users/universe/Downloads/Snapshot_test/input_data_hg38/snapshot_test_run_merge.hg38.ct13.bed\nmin_number_per_indexset\t0\nnormalization_method\tS3norm\nhave_function_state_files\tT\n\n### input matrix\nindex_matrix_txt\t/Users/universe/Downloads/Snapshot_test/input_data_hg38/used_input_matrix/snapshot_test_run_merge.index.matrix.txt\nsignal_matrix_txt\t/Users/universe/Downloads/Snapshot_test/input_data_hg38/used_input_matrix/snapshot_test_run_merge.signal.matrix.txt\nfunction_state_matrix_txt\t/Users/universe/Downloads/Snapshot_test/input_data_hg38/used_input_matrix/snapshot_test_run_merge.function.matrix.txt\n\n```\n"
      },
      "source": "https://raw.githubusercontent.com/guanjue/Snapshot/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 2: Execute the Script",
        "parent_header": [
          "Running Snapshot"
        ],
        "type": "Text_excerpt",
        "value": "The `Step1_run_Snapshot.sh` script is a pipeline that runs the `snapshot_v2.py` program, which is the main component of Snapshot. The script read various required and optional parameters and input files in the `run_snapshot.parameter.settings.info.txt` file, which are passed as arguments to the snapshot_v2.py program. The following bash command can be use to run Snapshot:\n```\n### run Snapshot\ntime bash Step1_run_Snapshot.sh run_snapshot.parameter.settings.info.hg38.ct13.txt 2> run_snapshot.parameter.settings.info.hg38.ct13.log.txt\n\n```\n\nFor the test data using matrice as input data, the Snapshot take 2min to run (Macbook Pro, Apple M1 Pro chip; 16GB RAM)\n\n\n\n## "
      },
      "source": "https://raw.githubusercontent.com/guanjue/Snapshot/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 09:39:44",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ]
}