{
  "application_domain": [
    {
      "confidence": 32.72,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Lab513/CyberSco.Py"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact",
        "parent_header": [
          "CyberSco.py"
        ],
        "type": "Text_excerpt",
        "value": "Pascal Hersen pascal.hersen@curie.fr\n"
      },
      "source": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-03-16T10:58:09Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-12-15T00:09:54Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "parent_header": [
          "CyberSco.py"
        ],
        "type": "Text_excerpt",
        "value": "**CyberSco.py** is a software written in Python for performing *Conditional Microscopy*.\nIt was conceived to be available to none expert users with a simple intuitive GUI interface\nand easy syntax for predefined experiments. It uses *Machine Learning* segmentation\nfor extracting information for the conditional steps.\n"
      },
      "source": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9279129961182099,
      "result": {
        "original_header": "CyberSco.py",
        "type": "Text_excerpt",
        "value": "Flexible and user friendly *Conditional Microscopy*\n \n"
      },
      "source": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.821235412373376,
      "result": {
        "original_header": "Launching the application",
        "type": "Text_excerpt",
        "value": "It will launch *two consoles*, one for the *camera* and another for the\n*CyberSco.py* interface.\n**Do not click inside of these cmd windows as it can perturb the script execution**.\nThe loading page takes around half a minute to finish due to machine\n learning models loading. Once the models loaded a *Begin* button appears.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8662037550373319,
      "result": {
        "original_header": "How to add your own machine learning model",
        "type": "Text_excerpt",
        "value": "Machine learning models are stored in the folder *CyberSco.py/models*.\nThey can be used for segmentation or for event detection. For the moment,\n *CyberSco.py* only accepts models produced with *Tensorflow*. \n"
      },
      "source": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.984204033835943,
      "result": {
        "original_header": "Image analysis method to extract cell information",
        "type": "Text_excerpt",
        "value": "The different experiments presented in this paper rely on the utilization of\n *two segmentation models* with the UNET architecture.  The trainings were\n performed using *Nvidia  GeForce GTX 1080 GPU* card with *Tensorflow 2.2.0* and\n  with data augmentation spanning the transformations of rotation\n   (6 angles), flip operation, noise,\n   colors, and contrast.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8272304430389346,
      "result": {
        "original_header": "Segmentation",
        "type": "Text_excerpt",
        "value": "The  second model (60x) was trained on 5 epochs (in 5 minutes) from a training\n set of 20 pictures. This training set was obtained from fluorescence signal\n  RFP images which were used for creating a model which trained multiple\n   times permitted to enlarge the masks until having a good cell segmentation.   \n"
      },
      "source": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9252079282792651,
      "result": {
        "original_header": "Tracking",
        "type": "Text_excerpt",
        "value": "In the current *CyberSco.py* version, the tracking for a given cell is simply done by selecting\nthe cell the nearest from one image to the following.  \nWhen changing of position, the tracking is performed using correlation between images.  \n"
      },
      "source": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9186777899272967,
      "result": {
        "original_header": "Graphical User Interface",
        "type": "Text_excerpt",
        "value": "The interface is divided in tree parts. A window for selecting the view and\n making snapshots, a middle panel for building the MDA experiment and a\n  green vertical bar for accessing to various utilities like the\n  Settings Channels, a panel for controlling the quality of the segmentation etc ... \nTake snapshot with different illuminations with superimposing on the BF image. \n### Control of segmentation quality \nCheck the quality of the segmentation in real time. \n### Hand back and sweep chip \nRetrieve the hand control of the microscope and make composite image of\n the chip in a larger field of view. \n"
      },
      "source": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8954543674181679,
      "result": {
        "original_header": "free MDA and Tree tool",
        "type": "Text_excerpt",
        "value": "It is easy to build a MDAs experiment using the tree graphical tool.\nThe tree is available once the user has selected, *predefined MDA* or *free MDA*\nIn the case of the *predefined MDA* all the elements of the tree are yet there.\nThe user can only duplicate, move them but cannot add new ones. \nThe tree encapsulates graphically the MDA through the hierarchy of the serial\n instructions (sent to the microscope and the associated devices) and the loops.\nTo add a new elementary action just drag and drop it from the three select menus\n (blue selectors) inside the tree. You can modify the hierarchy position of the\n  actions using ```ctrl+arrow```. To modify the parameters of each action in\nthe tree, click on the corresponding *wrench icon*. \nThe tree tool for conceiving a MDA (for free MDA option) is three folds: A part for creating,\n changing or deleting MDAs,\na part for dragging and dropping actions in the tree (three blue selectors) and\nfinally the tree itself containing the loops and actions of the MDAs. \n#### Changing the parameters of each action \nIt is possible to set the parameters for each step of the MDA by clicking\non the *wrench button*. This opens a windows in which the parameters can be modified. \n"
      },
      "source": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Lab513/CyberSco.Py/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/dashboard/make%20database.ipynb"
      },
      "source": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/dashboard/make%20database.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/scripts/clean_microflu.ipynb"
      },
      "source": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/scripts/clean_microflu.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/interface/make%20database.ipynb"
      },
      "source": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/interface/make%20database.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/modules/check_ports.ipynb"
      },
      "source": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/modules/check_ports.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/modules/modules_mda/test_mail.ipynb"
      },
      "source": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/modules/modules_mda/test_mail.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Lab513/CyberSco.Py/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Lab513/CyberSco.Py"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CyberSco.py"
      },
      "source": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/interface/static/imgs/lag_july30th_2021_t96_BF.png"
      },
      "source": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/interface/static/imgs/lag_july30th_2021_t96_superp.png"
      },
      "source": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/interface/static/imgs/img_BF_for_segm.png"
      },
      "source": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/interface/static/imgs/segm_ep5_v3.png"
      },
      "source": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/interface/static/imgs/track_mitosis_10ev_oct15th2021.png"
      },
      "source": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/interface/static/imgs/interf__freeMDA_071221.png"
      },
      "source": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/interface/static/imgs/central_window.png"
      },
      "source": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/interface/static/imgs/snap_superpRFP0_nov11th2022.png"
      },
      "source": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/interface/static/imgs/setting_channels_with_filter_alone.png"
      },
      "source": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/interface/static/imgs/interf__monitoringML_071221.png"
      },
      "source": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/interface/static/imgs/settings_with_choice.png"
      },
      "source": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/interface/static/imgs/infos_GPU_nov11th2022.png"
      },
      "source": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/interface/static/imgs/simple_tree.png"
      },
      "source": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/interface/static/imgs/step_params.png"
      },
      "source": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/interface/static/imgs/image_phare.png"
      },
      "source": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Anaconda installation",
        "parent_header": [
          "CyberSco.py",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Go to https://www.anaconda.com/products/individual and install Anaconda\n"
      },
      "source": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Virtual environment",
        "parent_header": [
          "CyberSco.py",
          "Installation",
          "Anaconda installation"
        ],
        "type": "Text_excerpt",
        "value": "<details>\n<summary>Creation of a virtual environment, click here to expand</summary>\n\nin a terminal write:\n```bash\nconda create -n env_name python=3.7.7 anaconda\n```\nFor activating :\n```bash\nconda activate env_name\n```\nFor deactivating :\n```bash\nconda deactivate\n```\n\n</details>\n"
      },
      "source": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "GPU installation :",
        "parent_header": [
          "CyberSco.py",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "full information for installation procedure can be found here :\n[GPU support for Windows](https://shawnhymel.com/1961/how-to-install-tensorflow-with-gpu-support-on-windows/)\n\n<details>\n<summary> installation in short, Click here to expand</summary>\n\n    Here is a summary of the different steps for the GPU installation:\n    1. cuda_10.1.243_426.00_win10.exe\n\n       can be found at https://www.filehorse.com/download-nvidia-cuda-toolkit/42676/\n\n    2. cudnn-10.1-windows10-x64-v7.6.5.32.zip\n\n       can be found at https://developer.nvidia.com/rdp/cudnn-archive\n       In the unfolded list of Download cuDNN v7.6.5 (November 5th, 2019), for CUDA 10.1\n\n    3. Copy 3 files from cudnn to Cuda\n\n       - bin: Copy <cuDNN directory>\\cuda\\bin\\*.dll to C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\vxx.x\\bin\n       - include : Copy <cuDNN directory>\\cuda\\include\\*.h to C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\vxx.x\\include\n       - lib : Copy <cuDNN directory>\\cuda\\lib\\x64\\*.lib to C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\vxx.x\\lib\\x64\n\n    4. check that you have in the environment variables those 2 paths :\n\n       - C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\vxx.x\\bin\n       - C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\vxx.x\\libnvvp\n\n</details>\n"
      },
      "source": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation of few devices",
        "parent_header": [
          "CyberSco.py",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "<details>\n<summary>Click here to expand</summary>\n\n### Installing *XCite exacte*\n\nGo to :\n[Xcite dlls](https://www.excelitas.com/product/x-cite-xled1-multi-triggering-led-illumination-system)  \nExtract the zip file, turn on the XCite device, then in device manager,\nadd new device using the extracted folder with all the dlls\n\n### Installing *Zyla Andor* camera\n\nGo inside *CyberSco.py/drivers/pyAndorSDK3*\nand run :\n```bash\npython3 \u2013m pip install .\n```\n\n</details>\n"
      },
      "source": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing Python dependencies",
        "parent_header": [
          "CyberSco.py",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Open an Anaconda terminal in *CyberSco.py* folder,\nactivate the *virtual environment* and run:\n```bash\npython setup.py install  \n```\n"
      },
      "source": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8526833676863222,
      "result": {
        "original_header": "How to add your own machine learning model",
        "type": "Text_excerpt",
        "value": "<details>\n <summary> Configuration files for the models, Click here to expand</summary> \n"
      },
      "source": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Lab513/CyberSco.Py/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "CyberSco.py"
        ],
        "type": "Text_excerpt",
        "value": "Distributed under the MIT License. See `LICENSE.txt` for more information.\n"
      },
      "source": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CyberSco.Py"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "Lab513"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "JavaScript",
        "size": 6682544,
        "type": "Programming_language",
        "value": "JavaScript"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 656581,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CSS",
        "size": 506319,
        "type": "Programming_language",
        "value": "CSS"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 370682,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 285134,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 224774,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Less",
        "size": 91881,
        "type": "Programming_language",
        "value": "Less"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 11280,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Batchfile",
        "size": 1480,
        "type": "Programming_language",
        "value": "Batchfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "phersen",
          "type": "User"
        },
        "date_created": "2022-11-11T15:44:04Z",
        "date_published": "2024-01-08T15:20:23Z",
        "description": "Release of the Cybersco.py code in line with the article  https://doi.org/10.1038/s41598-022-15207-5",
        "html_url": "https://github.com/Lab513/CyberSco.Py/releases/tag/v1.0.0",
        "name": "V1 release",
        "release_id": 136197893,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/Lab513/CyberSco.Py/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/Lab513/CyberSco.Py/releases/136197893",
        "value": "https://api.github.com/repos/Lab513/CyberSco.Py/releases/136197893",
        "zipball_url": "https://api.github.com/repos/Lab513/CyberSco.Py/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing Python dependencies",
        "parent_header": [
          "CyberSco.py",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Open an Anaconda terminal in *CyberSco.py* folder,\nactivate the *virtual environment* and run:\n```bash\npython setup.py install  \n```\n"
      },
      "source": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-04 13:33:09",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Example of a conditional experiment preset",
        "parent_header": [
          "CyberSco.py",
          "Doing MultiDimensional Acquisitions (MDAs)",
          "predefined MDA"
        ],
        "type": "Text_excerpt",
        "value": "<details>\n<summary> Plugin code example for <i> Sucrose lag </i> experiment, Click here to expand </summary>\n\n```python\n\nfrom datetime import datetime\nfrom modules.mda import MDA\n\n\nclass PROTOCOL_SUCROSE(MDA):\n    '''\n    Sucrose protocol for observing lag time according to the number of cells..\n    '''\n    def __init__(self, ldevices=None):\n        '''\n        name : Sucrose lag experiment\n        description : the cells (which are able to use sucrose cooperatively) of different chambers are fed with glucose and counted in real time. Their supply is then stopped and replaced with sucrose when the number of cells reaches a given limit. For each chamber this limit is different. The counting continues and it is possible at the end of the experiment to observe from the cells counting, the lag phenomenon which is  characterized by a time during which the cells do not divide or very slowly until being able to exploit cooperatively the sucrose.\n        '''\n        MDA.__init__(self, ldevices)\n\n    def define(self, debug=[0]):\n        '''\n        '''\n        self.refocus()                       # add refocusing\n        self.take_pic()                      # add take BF pic\n        ##\n        self.analyse_pic()                   # analyse the pic\n        self.cond = 'sucrose'                # apply the conditions 2, sucrose\n        ##\n        self.launch_loop()                   # Loop\n\n    def init_on_positions(self):\n        '''\n        Initialize the protocol\n        '''\n        for pos in self.list_pos:\n            pos.event = self.event\n            pos.first_time = self.first_time\n            if pos.event.name:            # same event on all the positions\n                pos.event.exists = True\n\n    def init_conditions(self):\n        '''\n        Setup parameters and initial conditions\n        '''\n        self.init_on_positions()\n        ##\n        lthresh = [ 100, 500, 2000, 500 ]      # list of the thresholds\n        for i,pos in enumerate( self.list_pos ):\n            pos.thresh_cells = lthresh[i]        # initial delay\n        self.delay = self.delay_init = 2\n        self.repeat = 2400                       # number of repetitions\n\n    def check_conditions(self, rep):\n        '''\n        At a given threshold trigger the sucrose\n        '''\n        for pos in self.list_pos:\n            if pos.nb_cells > pos.thresh_cells and not pos.switched :\n                # pos.num_gate exists\n                if pos.num_gate:                                                  \n                    pos.switched = True       # position blocked\n                    # adding num gate to self.gates_blocked\n                    self.gates_switched += [ pos.num_gate ]                       \n                    print( f'self.gates_switched '\n                      '{ self.gates_switched } for nb cell of { pos.nb_cells } ' )\n                    #  change gates value\n                    self.ga.set_pos_indices( self.gates_switched, 1 )             \n\n\n```\n\n</details>\n"
      },
      "source": "https://raw.githubusercontent.com/Lab513/CyberSco.Py/master/README.md",
      "technique": "header_analysis"
    }
  ]
}