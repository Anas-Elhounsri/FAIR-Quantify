{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/rainyrubyzhou/AccuVIR"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact",
        "parent_header": [
          "AccuVIR: Accurate viral genome assembler and polisher using long reads"
        ],
        "type": "Text_excerpt",
        "value": "Other than raising issues on Github, you can also contact YU Runzhou (runzhouyu2-c@my.cityu.edu.hk) for help in installation/usage or any other related query.\r\n\r\n\r\n\r\n\r\n"
      },
      "source": "https://raw.githubusercontent.com/rainyrubyzhou/AccuVIR/main/readme.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-04-23T11:43:43Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-28T09:33:22Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9936449473642326,
      "result": {
        "original_header": "AccuVIR: Accurate viral genome assembler and polisher using long reads",
        "type": "Text_excerpt",
        "value": "=======================================================================\r\n\r\n**AccuVIR**--an **Acc**urate **VIR**al genome assembler and polisher -- utilizes path searching and sampling in sequence alignment graphs to assemble or polish draft assembly of viral genomes. Users are welcome to read our published paper at Bioinformatics [here](https://doi.org/10.1093/bioinformatics/btac827) and try our tool as guided below.\r\n\r\nAccuVIR requires the following as input:\r\n+ Error corrected reads file from Canu for graph construction (Optimized for third-generation sequencing data).\r\n+ Backbone sequence file for graph construction (Can be either draft assembly from assembly tools including Canu/Shasta/Flye etc, or an available genome of another viral subtype/haplotype).\r\n \r \n"
      },
      "source": "https://raw.githubusercontent.com/rainyrubyzhou/AccuVIR/main/readme.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/rainyrubyzhou/AccuVIR/wiki"
      },
      "source": "https://raw.githubusercontent.com/rainyrubyzhou/AccuVIR/main/readme.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/rainyrubyzhou/AccuVIR/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/rainyrubyzhou/AccuVIR/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "rainyrubyzhou/AccuVIR"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "AccuVIR: Accurate viral genome assembler and polisher using long reads"
      },
      "source": "https://raw.githubusercontent.com/rainyrubyzhou/AccuVIR/main/readme.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rainyrubyzhou/AccuVIR/main/src/pipeline_example.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "AccuVIR: Accurate viral genome assembler and polisher using long reads",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "\r"
      },
      "source": "https://raw.githubusercontent.com/rainyrubyzhou/AccuVIR/main/readme.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/rainyrubyzhou/AccuVIR/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bioinformatics"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "AccuVIR"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "rainyrubyzhou"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 102280,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 555,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/rainyrubyzhou/AccuVIR/main/readme.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "parent_header": [
          "AccuVIR: Accurate viral genome assembler and polisher using long reads",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "- Conda\r\n- python\r\n- [blasr](https://anaconda.org/bioconda/blasr)\r\n- Required python package: Biopython>=1.70, networkx >= 2.5.1, pandas >= 1.1.3, seaborn >= 0.11.1\r\n\r\n#### Installation\r\n```console\r\ngit clone --recursive https://github.com/rainyrubyzhou/AccuVIR AccuVIR\r\ncd AccuVIR/src\r\npython AccuVIR_main.py -h\r\n```\r\nSuccessful installation will end with usage information using the above commands.\r\n\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/rainyrubyzhou/AccuVIR/main/readme.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contributors",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 11:22:11",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage of the AccuVIR:",
        "parent_header": [
          "AccuVIR: Accurate viral genome assembler and polisher using long reads"
        ],
        "type": "Text_excerpt",
        "value": "An example can be found in Data availability. \r"
      },
      "source": "https://raw.githubusercontent.com/rainyrubyzhou/AccuVIR/main/readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 1: Paths generation using two modules.",
        "parent_header": [
          "AccuVIR: Accurate viral genome assembler and polisher using long reads",
          "Usage of the AccuVIR:"
        ],
        "type": "Text_excerpt",
        "value": ">**Command Usage:**\r\n```console\r\npython AccuVIR_main.py <args>\r\n```\r\n\r\n>**Mandatory args:**\r\n```console\r\n-r | <str, e.g. \"error_corrected_reads.fasta\">\r\nReads file for graph construction (in fasta format). \r\n\r\n-b | <str, e.g. \"canu_contig.fasta\">\r\nBackbone sequence file for graph construction (in fasta format). \r\n```\r\n>**Optional args:**\r\n```console\r\n--beamwidth | <int, e.g. 100>\r\nBeamwidth for diverse beam search (default: 500).\r\n\r\n-m | <int, e.g., 3>\r\nSelect mode for the path searching (default: 3): '1' for diverse beam search (DBS); '2' for branched sampling; '3' for both search modules.\r\n\r\n-p | <str, e.g. accuvir>\r\nPreifx of the output file name (default: accuvir).\r\n\r\n-o | <str, e.g., result>\r\nOutput folder (default: result).\r\n\r\n-h | Print the usage information. \r\n```\r\n>**Example Command:**\r\n\r\nWe suggest using the following two substeps:\r\n\r\n- First, find a path with the longest length using DBS (-m 1). Then, rebuild the alignment graph by using it as the backbone. This step is to obtain a better-quality alignment graph.\r\n\r\n- Second, use the path in the first substep as the backbone sequence. Then, generate a set of paths using two searching modules (-m 3).\r\n\r\n```console\r\npython AccuVIR_main.py -r reads.fa -b backbone.fa -p prefix -o output_folder -m 1\r\n\r\npython AccuVIR_main.py -r reads.fa -b prefix_DBS_longest.fa -p prefix -o output_folder -m 3\r\n\r\n```\r\n\r\n\r\n>**Output Results:**\r\n+ `prefix_DBS_longest.fa` is the output of the first substep. It contains a path with the longest length from the DBS searching module.  \r\n\r\n+ `prefix_merge.fa` is the intermediate output before MRR. It contains multiple sequences from both DBS and path sampling modules.  \r\n\r\n    Outputs will be created in the input file directory. \r\n\r"
      },
      "source": "https://raw.githubusercontent.com/rainyrubyzhou/AccuVIR/main/readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 2: Apply gene prediction tool (Genemark recommended)",
        "parent_header": [
          "AccuVIR: Accurate viral genome assembler and polisher using long reads",
          "Usage of the AccuVIR:"
        ],
        "type": "Text_excerpt",
        "value": "\r\nDue to the license requirement of [Genemark](http://exon.gatech.edu/GeneMark/) tools, users need to preinstall the tool or run it [online](http://exon.gatech.edu/GeneMark/gmhmmp.cgi) in this step.   \r\nFor online running, please \r\n1. upload the file `X_ON_Y_filtered.fa` as input\r\n2. tick `GFF` as output format \r\n3. save the output as `X_ON_Y_filtered.fa.gtf` for next step\r\n\r\nFor offline running, we use the version `GeneMark.hmm for prokaryotes`. Users need to \r\n1. download `GeneMarkS` at [this page](http://exon.gatech.edu/GeneMark/license_download.cgi)\r\n2. download `gm_key` and put it at users home directory (cp gm_key ~/.gm_key)\r\n3. run Genemark using the command below\r\n>**Example usage of Genemark (GeneMark.hmm for prokaryotes in this example):**\r\n```console\r\ngmhmmp -m heu_11.mod -f G -o prefix_merge.fa.gtf prefix_merge.fa\r\n```\r\n\r\n`.gtf` output file is required for next step. (e.g. `prefix_merge.fa.gtf`)\r\n\r\n\r"
      },
      "source": "https://raw.githubusercontent.com/rainyrubyzhou/AccuVIR/main/readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 3: Call ranking module for final output.",
        "parent_header": [
          "AccuVIR: Accurate viral genome assembler and polisher using long reads",
          "Usage of the AccuVIR:"
        ],
        "type": "Text_excerpt",
        "value": "Pass in the `prefix_merge.fa` and the sequence of greatest MRR value will be output.\r\n>**Command Usage:**\r\n```console\r\npython AccuVIR_MRR.py -r prefix_merge.fa\r\n```\r\n>**Output Results:** \r\n\r\n + `prefix_merge.fa_final.fa` is final output of AccuVIR. It contains the single sequence that ranks best using MRR. \r\n\r\n    Users can also pass this sequence as the backbone to step 1 to iteratively refine the output. \r\n\r"
      },
      "source": "https://raw.githubusercontent.com/rainyrubyzhou/AccuVIR/main/readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Data availability and Example",
        "parent_header": [
          "AccuVIR: Accurate viral genome assembler and polisher using long reads"
        ],
        "type": "Text_excerpt",
        "value": "Users can test our tool using the test data [here](https://drive.google.com/drive/folders/1iCNVjkw_LEhd8pYfS4QDXEAmVAHZW2N9). The test data is the error-corrected reads from Canu. `ref.fa` is the ground truth for this dataset. \r\n```console\r\npython AccuVIR_main.py -r test_reads.fa -b backbone.fa -p test -o result -m 1\r\n\r\npython AccuVIR_main.py -r test_reads.fa -b test_DBS_longest.fa -p test -o result -m 3\r\n\r\ngmhmmp -m heu_11.mod -f G -o result/test_merge.fa.gtf result/test_merge.fa\r\n\r\npython AccuVIR_MRR.py -r result/prefix_merge.fa\r\n\r\n```\r\n\r\nTo obtain error-corrected reads by applying Canu to the original reads, you can refer to the following example:\r\n\r\n```console\r\ncanu -p prefix -d output_folder genomeSize=10k -nanopore raw_reads.fastq useGrid=false\r\n\r\n```\r\n\r\n\r\nSimulated datasets used in our experimentd are available [here](https://drive.google.com/drive/folders/1jIIBaANO5Gi0EeECuxq_7IHYScds4dDB).\r"
      },
      "source": "https://raw.githubusercontent.com/rainyrubyzhou/AccuVIR/main/readme.md",
      "technique": "header_analysis"
    }
  ]
}