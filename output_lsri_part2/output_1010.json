{
  "application_domain": [
    {
      "confidence": 38.37,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DevelopmentalImagingMCRI/karawun"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributors": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contributors",
        "type": "Text_excerpt",
        "value": "Richard Beare, Joseph Yang, Chris Adamson, Andrew Perry.\n "
      },
      "source": "https://raw.githubusercontent.com/DevelopmentalImagingMCRI/karawun/master/Readme.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-09-05T04:15:52Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-29T13:45:21Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Convert tractography studies from mrtrix into dicom for use in navigation software"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "parent_header": [
          "Karawun"
        ],
        "type": "Text_excerpt",
        "value": "[_Karawun_](https://DevelopmentalImagingMCRI.github.io/karawun) converts the results of a diffusion MRI tractography study,\nas might be used for surgical planning, to a form that is readable by\nthe Brainlab software suite.\n\nThe planning results will consist of a set of co-registered nifti images\n(for example T1, FA, contrast enhanced T1 etc) and associated tract files\ncreated using the [mrtrix3](https://www.mrtrix.org/) tools. _Karawun_ converts\nthe nifti images to dicom images and the tck files to the dicom object format\nused by Brainlab to represent tracts produced by the internal tracking tool.\n\nTracts generated by mrtrix3 can thus be used in Brainlab in the same\nway as tracts generated by Brainlab. This allows you to experiment\nwith your favourite diffusion sequence or post processing method and\nvisualize the results in the planning suite.\n\nMask or label images can also be converted to a dicom segmentation\nformat compatible with Brainlab. There are currently 30 predfined\ncolours that are selected based on the mask value. Multiple\nlabel values are allowed per image. Mask/label images must have a matching\n\"raw\" image in the nifti set. For example, if you wish to include a tumour\nmask drawn over a contrast enhanced scan, then the raw scan must also\nbe converted. Note that images with many labels can be take a while\nto be interpreted by Brainlab.\n\n_Karawun_ is a grass used as a source of fibre by Aboriginal\ntribes in south-eastern Australia.\n"
      },
      "source": "https://raw.githubusercontent.com/DevelopmentalImagingMCRI/karawun/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9515149912100954,
      "result": {
        "original_header": "Explanation",
        "type": "Text_excerpt",
        "value": "The dicom template is a dicom file from which dicom tags are copied,\nincluding all patient information. Ideally this dicom file should be\none of the originals from which the nifti files were derived. All\npatient, physician and institutional details are copied from this\ntemplate. A single dicom template file is required. A single,\nanonymised, dicom is provided with the testing data (see below), that\nmay be appropriate for other testing purposes, if you do not have\noriginal dicoms available. \nThe nifti files are the volume images that will be converted to dicom\nimages. They are assumed to be co-registered, as would typically be\nthe case for multiple nifti files used in a common image processing\npipeline. The conversion process creates a dicom \"frame of reference\" to\nwhich all volume images belong. Brainlab requires that the user accept\nthis registration. \nThe tract files are the mrtrix .tck files that need to be\ndisplayed in Brainlab. The conversion of these files\ncreates the dicom fibre object format that can be viewed as a 3D\nobject in Brainlab. \n"
      },
      "source": "https://raw.githubusercontent.com/DevelopmentalImagingMCRI/karawun/master/Readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9557261730085506,
      "result": {
        "original_header": "Typical workflow",
        "type": "Text_excerpt",
        "value": "A typical workflow involves extracting dicom images from the scanner\nsystem, converting them to nifti formats and peforming image\nprocessing steps using a range of approaches. Examples include\nco-registration, tissue classification, brain extraction, activation\ndetection, distortion correction, etc with tools like FSL, FreeSurfer and\nSPM as well as diffusion tractography using mrtrix. The resulting dataset is then\nconverted to dicom ready for import. \nWe do not attempt to make the new dicoms align with the original\ndicoms from which the nifti were derived. Always treat the images\nderived from the external workup as a new and independent set of data. \nWe anonymise dicoms before import to Brainlab (using\n[gdcm](https://sourceforge.net/p/gdcm/gdcm/) ) to avoid any chance of\noverwriting other patient data. In theory, copying tags from an\noriginal dicom will make the converted dicoms appear to derive from\nthe correct patient. Please test very thoroughly before relying on\nthis facility.\n \n"
      },
      "source": "https://raw.githubusercontent.com/DevelopmentalImagingMCRI/karawun/master/Readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8472263284578184,
      "result": {
        "original_header": "Licensing",
        "type": "Text_excerpt",
        "value": "_Karawun_ is distributed under the Apache License 2.0\n \n"
      },
      "source": "https://raw.githubusercontent.com/DevelopmentalImagingMCRI/karawun/master/Readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9230439294019886,
      "result": {
        "original_header": "Developer Notes",
        "type": "Text_excerpt",
        "value": "Documentation is stored in the `gh-pages-source` branch. A github\naction (BuildGHPages in docpages_action.yaml) builds the html\ndocumentation using sphinx and force pushes the results to the\n`gh-pages` branch for github to display. \nThe `master` branch is protected, requiring CI tests to pass and a review\nor admin permission for merging. Testing is performed on pull request to master, release and dev\nbranches and push to any branch. \nThe test matrix is covering python version 3.6, 3.7, 3.8 and 3.9 and\nubuntu-latest, windows-latest and macos-latest.\n \n"
      },
      "source": "https://raw.githubusercontent.com/DevelopmentalImagingMCRI/karawun/master/Readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9058277405026337,
      "result": {
        "original_header": "PyPI publication",
        "type": "Text_excerpt",
        "value": "The `release` branch should be chosen as the target for the release,\nand a new tag created. \n"
      },
      "source": "https://raw.githubusercontent.com/DevelopmentalImagingMCRI/karawun/master/Readme.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DevelopmentalImagingMCRI/karawun/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/DevelopmentalImagingMCRI/karawun/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DevelopmentalImagingMCRI/karawun"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Karawun"
      },
      "source": "https://raw.githubusercontent.com/DevelopmentalImagingMCRI/karawun/master/Readme.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/DevelopmentalImagingMCRI/karawun/master/Pics/brainlab_screenshot.png"
      },
      "source": "https://raw.githubusercontent.com/DevelopmentalImagingMCRI/karawun/master/Readme.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/DevelopmentalImagingMCRI/karawun/master/Pics/brainlab_objects.png"
      },
      "source": "https://raw.githubusercontent.com/DevelopmentalImagingMCRI/karawun/master/Readme.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick Installation",
        "parent_header": [
          "Karawun"
        ],
        "type": "Text_excerpt",
        "value": "_Karawun_ is a python package that can be installed using various\nstandard python options. It is recommended that some form of virtual environment\nis used to isolate _karawun_ and its dependencies from other packages. Installation\nwith miniconda is illustrated below:\n"
      },
      "source": "https://raw.githubusercontent.com/DevelopmentalImagingMCRI/karawun/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Pip",
        "parent_header": [
          "Karawun",
          "Quick Installation"
        ],
        "type": "Text_excerpt",
        "value": "```bash\n\npip install karawun\n\n```\n"
      },
      "source": "https://raw.githubusercontent.com/DevelopmentalImagingMCRI/karawun/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Conda",
        "parent_header": [
          "Karawun",
          "Quick Installation"
        ],
        "type": "Text_excerpt",
        "value": "```\nconda config --append channels conda-forge --append channels anaconda --append channels SimpleITK\nconda create --name KarawunEnv python=3.8 karawun\n\n```\n"
      },
      "source": "https://raw.githubusercontent.com/DevelopmentalImagingMCRI/karawun/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Miniconda",
        "parent_header": [
          "Karawun",
          "Installation from source"
        ],
        "type": "Text_excerpt",
        "value": "1. [Install miniconda for python 3.7](https://docs.conda.io/en/latest/miniconda.html)\n\n   Subsequent commands need to be entered in a commandline shell - either the anaconda shell under windows or the terminal under Linux or Mac.\n   \n1. Add package channels:\n    ```bash\n    conda config --append channels conda-forge --append channels anaconda --append channels SimpleITK\n    ```\n1. For Windows:\n   ```bash\n   conda install git\n   ```    \n1. Create a conda environment (using a name of your own choice) and install the dependencies:\n    ```bash\n    conda create --name KarawunEnv --file https://github.com/DevelopmentalImagingMCRI/karawun/raw/master/requirements.txt\n    ```\n1. Activate the environment:\n    ```bash\n    conda activate KarawunEnv\n    ```\n1. Install _karawun_ (internet access required)\n    ```bash\n    pip install git+https://github.com/DevelopmentalImagingMCRI/karawun.git@master\n    ```\n1. Test the installation by running the main script:\n    ```bash\n    importTractography -h\n    ```\n    This will produce the help information if the installation was successful.\n\nSubsequent uses of karawun only require the `conda activate KarawunEnv` step.\n\nSee below for recommended testing procedure.\n"
      },
      "source": "https://raw.githubusercontent.com/DevelopmentalImagingMCRI/karawun/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Longer install, with testing (recommended)",
        "parent_header": [
          "Karawun"
        ],
        "type": "Text_excerpt",
        "value": "1. Create and activate an environment, as above, then [download the package sources](https://github.com/DevelopmentalImagingMCRI/karawun/archive/master.zip) *OR* fetch via git:\n    ```bash\n    git clone https://github.com/DevelopmentalImagingMCRI/karawun.git\n    ```\n1. Install the dependencies\n    ```bash\n    cd karawun\n    conda install --name KarawunEnv --file requirements.txt\n    ```\n\n1. Run the test:\n    ```bash\n    python -m pytest -s tests/\n    ```\n\nThis test uses some data distributed with the package. A successful\nresult is indicated by 1 passed and 1 skipped test. Success means that\nthe dicom files created on your system are identical to those created\non the development system. The test destination is displayed as the\ntest is run.\n"
      },
      "source": "https://raw.githubusercontent.com/DevelopmentalImagingMCRI/karawun/master/Readme.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999999999582769,
      "result": {
        "original_header": "Using",
        "type": "Text_excerpt",
        "value": "The simplest way of using _karawun_ is via the _importTractograpy_ command, as follows:\n```bash\nimportTractography --dicom-template path/to/a/dicom --nifti T1.nii.gz fa.nii.gz --tract-files left_cst.tck right_cst.tck -o path/to/output/folder\n```\nor, with label images\n```bash\nimportTractography --dicom-template path/to/a/dicom --nifti T1.nii.gz fa.nii.gz --tract-files left_cst.tck right_cst.tck --label-files lesion.nii.gz white_matter.nii.gz  -o path/to/output/folder\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/DevelopmentalImagingMCRI/karawun/master/Readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9345164293297138,
      "result": {
        "original_header": "Problems/Requests",
        "type": "Text_excerpt",
        "value": "Please use the github [issue tracker](https://github.com/DevelopmentalImagingMCRI/karawun/issues) to ask questions or report problems. \n"
      },
      "source": "https://raw.githubusercontent.com/DevelopmentalImagingMCRI/karawun/master/Readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9510149225816509,
      "result": {
        "original_header": "Developer Notes",
        "type": "Text_excerpt",
        "value": "Documentation is stored in the `gh-pages-source` branch. A github\naction (BuildGHPages in docpages_action.yaml) builds the html\ndocumentation using sphinx and force pushes the results to the\n`gh-pages` branch for github to display. \nThe `master` branch is protected, requiring CI tests to pass and a review\nor admin permission for merging. Testing is performed on pull request to master, release and dev\nbranches and push to any branch. \nThe test matrix is covering python version 3.6, 3.7, 3.8 and 3.9 and\nubuntu-latest, windows-latest and macos-latest.\n \n"
      },
      "source": "https://raw.githubusercontent.com/DevelopmentalImagingMCRI/karawun/master/Readme.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999964597881208,
      "result": {
        "original_header": "PyPI publication",
        "type": "Text_excerpt",
        "value": "The master branch should be merged manually with release by an\nadministrator, using the command line as follows:\n```bash\ngit fetch --all\ngit checkout release\ngit merge --ff-only upstream/master\ngit push\n```\n \nPublishing a release triggers the action (same as used for pull\nrequests etc), but additional steps will be run to publish the package\non pypi.org. \n"
      },
      "source": "https://raw.githubusercontent.com/DevelopmentalImagingMCRI/karawun/master/Readme.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/DevelopmentalImagingMCRI/karawun/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Apache License 2.0",
        "spdx_id": "Apache-2.0",
        "type": "License",
        "url": "https://api.github.com/licenses/apache-2.0",
        "value": "https://api.github.com/licenses/apache-2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
      },
      "source": "https://raw.githubusercontent.com/DevelopmentalImagingMCRI/karawun/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "karawun"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "DevelopmentalImagingMCRI"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 209466,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/DevelopmentalImagingMCRI/karawun/master/Readme.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "richardbeare",
          "type": "User"
        },
        "date_created": "2021-12-30T04:08:12Z",
        "date_published": "2021-12-30T04:24:31Z",
        "description": "Update of metadata - url points to newly deployed documentation pages",
        "html_url": "https://github.com/DevelopmentalImagingMCRI/karawun/releases/tag/v0.2.5.4",
        "name": "Release v0.2.5.4",
        "release_id": 56170800,
        "tag": "v0.2.5.4",
        "tarball_url": "https://api.github.com/repos/DevelopmentalImagingMCRI/karawun/tarball/v0.2.5.4",
        "type": "Release",
        "url": "https://api.github.com/repos/DevelopmentalImagingMCRI/karawun/releases/56170800",
        "value": "https://api.github.com/repos/DevelopmentalImagingMCRI/karawun/releases/56170800",
        "zipball_url": "https://api.github.com/repos/DevelopmentalImagingMCRI/karawun/zipball/v0.2.5.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "richardbeare",
          "type": "User"
        },
        "date_created": "2021-12-05T23:52:47Z",
        "date_published": "2021-12-06T00:01:15Z",
        "html_url": "https://github.com/DevelopmentalImagingMCRI/karawun/releases/tag/v0.2.5.3",
        "name": "Trove classification",
        "release_id": 54671553,
        "tag": "v0.2.5.3",
        "tarball_url": "https://api.github.com/repos/DevelopmentalImagingMCRI/karawun/tarball/v0.2.5.3",
        "type": "Release",
        "url": "https://api.github.com/repos/DevelopmentalImagingMCRI/karawun/releases/54671553",
        "value": "https://api.github.com/repos/DevelopmentalImagingMCRI/karawun/releases/54671553",
        "zipball_url": "https://api.github.com/repos/DevelopmentalImagingMCRI/karawun/zipball/v0.2.5.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "richardbeare",
          "type": "User"
        },
        "date_created": "2021-12-05T02:29:19Z",
        "date_published": "2021-12-05T04:04:04Z",
        "description": "Corrected some dependencies",
        "html_url": "https://github.com/DevelopmentalImagingMCRI/karawun/releases/tag/v0.2.5.2",
        "name": "v0.2.5.2",
        "release_id": 54646769,
        "tag": "v0.2.5.2",
        "tarball_url": "https://api.github.com/repos/DevelopmentalImagingMCRI/karawun/tarball/v0.2.5.2",
        "type": "Release",
        "url": "https://api.github.com/repos/DevelopmentalImagingMCRI/karawun/releases/54646769",
        "value": "https://api.github.com/repos/DevelopmentalImagingMCRI/karawun/releases/54646769",
        "zipball_url": "https://api.github.com/repos/DevelopmentalImagingMCRI/karawun/zipball/v0.2.5.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "richardbeare",
          "type": "User"
        },
        "date_created": "2021-12-03T11:55:01Z",
        "date_published": "2021-12-03T12:10:05Z",
        "description": "Release via PyPI",
        "html_url": "https://github.com/DevelopmentalImagingMCRI/karawun/releases/tag/v0.2.5.1",
        "name": "Release v0.2.5.1",
        "release_id": 54572754,
        "tag": "v0.2.5.1",
        "tarball_url": "https://api.github.com/repos/DevelopmentalImagingMCRI/karawun/tarball/v0.2.5.1",
        "type": "Release",
        "url": "https://api.github.com/repos/DevelopmentalImagingMCRI/karawun/releases/54572754",
        "value": "https://api.github.com/repos/DevelopmentalImagingMCRI/karawun/releases/54572754",
        "zipball_url": "https://api.github.com/repos/DevelopmentalImagingMCRI/karawun/zipball/v0.2.5.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 12:48:29",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 14
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}