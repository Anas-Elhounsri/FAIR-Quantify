{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Slugger70/VelvetOptimiser"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "CONTACT",
        "type": "Text_excerpt",
        "value": "Simon Gladman <simon.gladman@unimelb.edu.au>\nTorsten Seemann <torsten.seemann@unimelb.edu.au>\n\n"
      },
      "source": "https://raw.githubusercontent.com/Slugger70/VelvetOptimiser/master/README",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2015-07-28T05:52:32Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2015-07-28T05:52:33Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Automatically optimise three of Velvet's assembly parameters."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "INTRODUCTION",
        "type": "Text_excerpt",
        "value": "The VelvetOptimiser is designed to run as a wrapper script for the Velvet\nassembler (Daniel Zerbino, EBI UK) and to assist with optimising the\nassembly.  It searches a supplied hash value range for the optimum,\nestimates the expected coverage and then searches for the optimum coverage\ncutoff.  It uses Velvet's internal mechanism for estimating insert lengths\nfor paired end libraries.  It can optimise the assemblies by either the\ndefault optimisation condition or by a user supplied one.  It outputs the\nresults to a subdirectory and records all its operations in a logfile.\n\nExpected coverage is estimated using the length weighted mode of the contig\ncoverage in all active short columns of the stats.txt file.\n\n"
      },
      "source": "https://raw.githubusercontent.com/Slugger70/VelvetOptimiser/master/README",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8493725454224448,
      "result": {
        "original_header": "COMMAND LINE",
        "type": "Text_excerpt",
        "value": "\t\n\tVelvetOptimiser.pl [options] -f 'velveth input line'\n  \n  Options:\n  \n  --help          \tThis help.\n  --V|version!\t\tPrint version to stdout and exit.\n  --v|verbose+    \tVerbose logging, includes all velvet output in the logfile. (default '0').\n  --s|hashs=i     \tThe starting (lower) hash value (default '19').\n  --e|hashe=i     \tThe end (higher) hash value (default '31').\n  --x|step=i      \tThe step in hash search..  min 2, no odd numbers (default '2').\n  --f|velvethfiles=s The file section of the velveth command line. (default '0').\n  --a|amosfile!   \tTurn on velvet's read tracking and amos file output. (default '0').\n  --o|velvetgoptions=s Extra velvetg options to pass through.  eg. -long_mult_cutoff -max_coverage etc (default '').\n  --t|threads=i   \tThe maximum number of simulataneous velvet instances to run. (default '4').\n  --g|genomesize=f \tThe approximate size of the genome to be assembled in megabases.\n\t\t\t\t\tOnly used in memory use estimation. If not specified, memory use estimation\n\t\t\t\t\twill not occur. If memory use is estimated, the results are shown and then program exits. (default '0').\n  --k|optFuncKmer=s The optimisation function used for k-mer choice. (default 'n50').\n  --c|optFuncCov=s \tThe optimisation function used for cov_cutoff optimisation. (default 'Lbp').\n  --p|prefix=s    \tThe prefix for the output filenames, the default is the date and time in the format DD-MM-YYYY-HH-MM_. (default 'auto').\n  --d|dir_final=s The name of the directory to put the final output into. (default '.')\n  --z|upperCovCutoff=f The maximum coverage cutoff to consider as a multiplier of the expected coverage. (default '0.8').\n   \nVelvet optimiser assembly optimisation function can be built from the following variables.\n\tLNbp = The total number of Ns in large contigs\n\tLbp = The total number of base pairs in large contigs\n\tLcon = The number of large contigs\n\tmax = The length of the longest contig\n\tn50 = The n50\n\tncon = The total number of contigs\n\ttbp = The total number of basepairs in contigs\nExamples are:\n\t'Lbp' = Just the total basepairs in contigs longer than 1kb\n\t'n50*Lcon' = The n50 times the number of long contigs.\n\t'n50*Lcon/tbp+log(Lbp)' = The n50 times the number of long contigs divided\n\t\tby the total bases in all contigs plus the log of the number of bases\n\t\tin long contigs. \n"
      },
      "source": "https://raw.githubusercontent.com/Slugger70/VelvetOptimiser/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9243661518299121,
      "result": {
        "original_header": "DETAILED OPTIONS",
        "type": "Text_excerpt",
        "value": "\tPrints the program name and version to STDOUT. Note that other information is still \n\tprinted to STDERR. You can ignore this by redirecting the output like this:\n\t% VelvetOptimiser.pl --version 2> /dev/null \n\tAdds the full velveth and velvetg output to the logfile. (Handy for\n        looking at the insert lengths and sds that Velvet has chosen for each library.) \n\tParameter type required: odd integer > 0 & <= the MAXKMERLENGTH velvet was compiled with.\n\tDefault: 19\n\t\n\tThis is the lower end of the hash value range that the optimiser will search for the optimum.\n\tIf the supplied value is even, it will be lowered by 1.\n\tIf the supplied value is higher than MAXKMERLENGTH, it will be dropped to MAXKMERLENGTH.\n\t\n-e or --hashe \n\tParameter type required: odd integer >= 'hashs' & <= the MAXKMERLENGTH velvet was compiled with.\n\tDefault: MAXKMERLENGTH\n\t\n\tThis is the upper end of the hash value range that the optimiser will search for the optimum.\n\tIf the supplied value is even, it will be lowered by 1.\n\tIf the supplied value is higher than MAXKMERLENGTH, it will be dropped to MAXKMERLENGTH.\n\tIf the supplied value is lower than 'hashs' then it will be set to equal 'hashs'.\n\t\n-x or --step \n\tParameter type required: even integer < difference between 'hashs' and 'hashe'.\n\tDefault: 2\n\t\n\tThis parameter details the number of hash values to skip each increment from 'hashs' to 'hashe' when searching for the optimum. \n\tIf the supplied value is odd, it will be lowered by 1.\n\tIf the supplied value is less than 2, it will be set to 2.\n\tIf the supplied value is greater than the 'hashs' to 'hashe' range, it will be set to the range.\n\t\n-f or --velvethfiles \n\tParameter type required: string with '' or \"\"\n\tNo default.\n\t\n\tThis is a required parameter.  If this option is not specified, then the optimisers usage will be displayed.\n\t\n\tYou need to supply everything you would normally supply velveth at this point except for the hash size and the \n        directory name in the following format.  \n\t\t\n\t{[-file_format][-read_type] filename} repeated for as many read files as you have. \n\tExamples:\n\t\n\t-f 'reads.fna'\n\t\treads.fna is short not paired and fasta.  (these are the defaults: -short and -fasta)\n\t\t\n\t-f '-shortPaired -fastq paired_reads.fastq -long long_reads.fna'\n\t\tTwo read files supplied, first one is a paired end fastq file and the second is a long single ended read file.\n\t\t\n\t-f '-shortPaired paired_reads_1.fna -shortPaired2 paired_reads_2.fna'\n\t\tTwo read files supplied, both are short paired fastas but come from two different libraries, therefore needing two different CATEGORIES.\n\t\t\n\tThere is a fairly extensive checker built into the optimiser to check if the format of the string is correct.  However, it won't check the read files for their format (fasta, fastq, eland etc.)\n\t\n-a or --amosfile \n\tTurns on Velvets read tracking and amos file output.\n\tThis option is the same as specifying '-amos_file yes -read_trkg yes' in velvetg.  However, it will only be added to the final assembly and not to the intermediate ones. \n\tParameter type required: string.\n\tDefault: 'n50'\n\t\t\n\tThis option will change the function that the Optimiser uses to find the best hash value from the given range.  The default is to use the n50.  I have found this function to work for me better than the previous single optimisation function, but you may wish to change it.  A list of possible variables to use in your optimisation function and some examples are shown below. \n\tParameter type required: string.\n\tDefault: 'Lbp'\n\t\t\n\tThis option will change the function that the Optimiser uses to find the best hash value from the given range.  The default is to use the number of basepairs in contigs greater than 1 kilobase in length.  I have found this function to work for me but you may wish to change it.  A list of possible variables to use in your optimisation function and some examples are shown below.\n\t\t\n\tVelvet optimiser assembly optimisation functions can be built from the following variables:\n\t\t\n\t\tLNbp = The total number of Ns in large contigs\n\t\tLbp = The total number of base pairs in large contigs\n\t\tLcon = The number of large contigs\n\t\tmax = The length of the longest contig\n\t\tn50 = The n50\n\t\tncon = The total number of contigs\n\t\ttbp = The total number of basepairs in contigs \n\tExamples are:\n\t\n\t\t'Lbp' = Just the total basepairs in contigs longer than 1kb\n\t\t'n50*Lcon' = The n50 times the number of long contigs.\n\t\t'n50*Lcon/tbp+log(Lbp)' = The n50 times the number of long contigs divided\n\t\t\tby the total bases in all contigs plus the log of the number of bases\n\t\t\tin long contigs. \n\tBe warned! The optimiser doesn't care what you supply in this string and will attempt to run anyway.  If you give it a nonsensical optimisation function be prepared to receive a nonsensical assembly!\n\t\n-p or --prefix \n\tParameter type required: string\n\tDefault: The current date and time in the format \"DD-MM-YYYY-HH-MM-SS_\"\n\t\n\tNames the logfile and the output directory with whatever prefix is supplied followed by \"_logfile.txt\" for the logfile and \"_data_k\" where k is the optimum hash value for the ouput data directory.\n\t\n-d or --dir_final \n\tParameter type required: float\n\tDefault: 0.8\n\t\n\tUses this fraction of the expected coverage to set the upper limit of the coverage cutoff range to search for the optimum in.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Slugger70/VelvetOptimiser/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8970258299680738,
      "result": {
        "original_header": "TO DO",
        "type": "Text_excerpt",
        "value": "* Make the auto_XXX folders be in --dir_final when set, not in the current directory.\n* Use velvetk.pl script to choose suitable -s and -e parameters.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Slugger70/VelvetOptimiser/master/README",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/Slugger70/VelvetOptimiser/wiki"
      },
      "source": "https://raw.githubusercontent.com/Slugger70/VelvetOptimiser/master/README",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Slugger70/VelvetOptimiser/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Slugger70/VelvetOptimiser/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Slugger70/VelvetOptimiser"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "NAME"
      },
      "source": "https://raw.githubusercontent.com/Slugger70/VelvetOptimiser/master/README",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Slugger70/VelvetOptimiser/master/maketar.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.8990398058845578,
      "result": {
        "original_header": "VERSION",
        "type": "Text_excerpt",
        "value": "Version 2.2.5\n \n"
      },
      "source": "https://raw.githubusercontent.com/Slugger70/VelvetOptimiser/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.971224936427204,
      "result": {
        "original_header": "DETAILED OPTIONS",
        "type": "Text_excerpt",
        "value": "-V or --version \n\tPrints the program name and version to STDOUT. Note that other information is still \n\tprinted to STDERR. You can ignore this by redirecting the output like this:\n\t% VelvetOptimiser.pl --version 2> /dev/null \n\n\tFile format options:\n\t\t-fasta\n\t\t-fastq\n\t\t-fasta.gz\n\t\t-fastq.gz\n\t\t-bam\n\t\t-sam\n\t\t-eland\n\t\t-gerald \n\tParameter type required: string.\n\tNo default\n\t\n\tString should contain extra options to be passed to velvetg as required such as \"-long_mult_cutoff 1\" or \"-max_coverage 50\" etc.  Warning, there is no sanity check, so be careful.  The optimiser will crash if you give velvetg something it doesn't handle.\n\t\n-t or --threads \n\tParameter type required: float.\n\tNo default.\n\t\n\tThis option will run the Optimiser's memory estimator.  It will estimate the memory required to run Velvet with the current -f parameter and number of threads.  Once the estimator has finsihed its calulations, it will display the required memory, make a recommendation and then exit the script.  This is useful for determining if you will have sufficient free RAM to run the assembly before you start.\n\tYou need to supply the approximate size of the genome you are assembling in mega bases.  For example, for a Salmonella genome I would use: -g 5\n\t\n-k or --optFuncKmer \n"
      },
      "source": "https://raw.githubusercontent.com/Slugger70/VelvetOptimiser/master/README",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9641197810140797,
      "result": {
        "original_header": "TO DO",
        "type": "Text_excerpt",
        "value": "* Make the auto_XXX folders be in --dir_final when set, not in the current directory.\n* Use velvetk.pl script to choose suitable -s and -e parameters.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Slugger70/VelvetOptimiser/master/README",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Slugger70/VelvetOptimiser/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "GNU General Public License v2.0",
        "spdx_id": "GPL-2.0",
        "type": "License",
        "url": "https://api.github.com/licenses/gpl-2.0",
        "value": "https://api.github.com/licenses/gpl-2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.,\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n                            NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.\n"
      },
      "source": "https://raw.githubusercontent.com/Slugger70/VelvetOptimiser/master/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "LICENCE",
        "type": "Text_excerpt",
        "value": "Copyright 2008- Simon Gladman & Torsten Seemann\n\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation; either version 2 of the License, or\n(at your option) any later version.\n    \nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n        \nYou should have received a copy of the GNU General Public License\nalong with this program; if not, write to the Free Software\nFoundation, Inc., 51 Franklin Street, Fifth Floor, Boston,\nMA 02110-1301, USA.\n\n"
      },
      "source": "https://raw.githubusercontent.com/Slugger70/VelvetOptimiser/master/README",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "VelvetOptimiser"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "Slugger70"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 67899,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 940,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Slugger70/VelvetOptimiser/master/README"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "PREREQUISITES",
        "type": "Text_excerpt",
        "value": "Velvet => 0.7.51\nPerl => 5.8.8\nBioPerl >= 1.4\nGNU utilities: grep sed free cut\n\n"
      },
      "source": "https://raw.githubusercontent.com/Slugger70/VelvetOptimiser/master/README",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 09:10:49",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "EXAMPLES",
        "type": "Text_excerpt",
        "value": "Find the best assembly for a lane of Illumina single-end reads, trying k-values between 27 and 31:\n\n% VelvetOptimiser.pl -s 27 -e 31 -f '-short -fastq s_1_sequence.txt'\n\nPrint an estimate of how much RAM is needed by the above command, if we use eight threads at once,\nand we estimate our assembled genome to be 4.5 megabases long:\n\n% VelvetOptimiser.pl -s 27 -e 31 -f '-short -fastq s_1_sequence.txt' -g 4.5 -t 8\n\nFind the best assembly for Illumina paired end reads just for k=31, using four threads (eg. quad core CPU), \nbut optimizing for N50 for k-mer length rather than sum of large contig sizes:\n\n% VelvetOptimiser.pl -s 31 -e 31 -f '-shortPaired -fasta interleaved.fasta' -t 4 --optFuncKmer 'n50'\n\n"
      },
      "source": "https://raw.githubusercontent.com/Slugger70/VelvetOptimiser/master/README",
      "technique": "header_analysis"
    }
  ]
}