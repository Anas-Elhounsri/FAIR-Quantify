{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Downloading required reference data",
        "parent_header": [
          "maxATAC: genome-scale transcription-factor binding prediction from ATAC-seq with deep neural networks",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "In order to run the maxATAC models that were described in the [maxATAC pre-print](https://www.biorxiv.org/content/10.1101/2022.01.28.478235v1), the following files are required to be downloaded from the [maxATAC_data](https://github.com/MiraldiLab/maxATAC_data) repository and installed in the correct directory:\n\n* hg38 reference genome `.2bit` file\n* hg38 chromosome sizes file\n* maxATAC extended blacklist\n* TF specific `.h5` model files\n* TF specific thresholding files\n* Bash scripts for preparing data\n\nThe easiest option is to use the command `maxatac data` to download the data to the required directory. The `maxatac data` function will download the maxATAC_data repo and reference data into your `~/opt/` directory under `~/opt/maxatac`. Only the hg38 reference genome has been extensively tested.\n"
      },
      "source": "https://raw.githubusercontent.com/MiraldiLab/maxATAC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Using custom reference data",
        "parent_header": [
          "maxATAC: genome-scale transcription-factor binding prediction from ATAC-seq with deep neural networks",
          "Installation",
          "Downloading required reference data"
        ],
        "type": "Text_excerpt",
        "value": "The directory `~/opt/maxatac/data` is the default location where maxATAC will look for the maxATAC models, hg38 reference annotations, etc.\n\nIf you want to use your own references (e.g., hg19) or models, set the appropriate flags for each file with the path to your custom files. You can also adjust the relative paths in `constants.py` to be the default values for all functions.\n\n___\n"
      },
      "source": "https://raw.githubusercontent.com/MiraldiLab/maxATAC/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_of_conduct": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\nfaizrizvi1993@gmail.com.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n"
      },
      "source": "https://raw.githubusercontent.com/MiraldiLab/maxATAC/main/CODE_OF_CONDUCT.md",
      "technique": "file_exploration"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/MiraldiLab/maxATAC"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "<!-- omit in toc -->\n# Contributing to maxATAC\n\nFirst off, thanks for taking the time to contribute! \u2764\ufe0f\n\nAll types of contributions are encouraged and valued. See the [Table of Contents](#table-of-contents) for different ways to help and details about how this project handles them. Please make sure to read the relevant section before making your contribution. It will make it a lot easier for us maintainers and improve the experience for all involved. The community looks forward to your contributions. \ud83c\udf89\n\n> And if you like the project, but just don't have time to contribute, that's fine. There are other easy ways to support the project and show your appreciation, which we would also be very happy about:\n> - Star the project\n> - Tweet about it\n> - Refer to this project in your project's readme\n> - Mention the project at local meetups and tell your friends/colleagues\n\n<!-- omit in toc -->\n## Table of Contents\n\n- [Code of Conduct](#code-of-conduct)\n- [I Have a Question](#i-have-a-question)\n- [I Want To Contribute](#i-want-to-contribute)\n  - [Reporting Bugs](#reporting-bugs)\n  - [Suggesting Enhancements](#suggesting-enhancements)\n\n\n\n## Code of Conduct\n\nThis project and everyone participating in it is governed by the\n[maxATAC Code of Conduct](https://github.com/MiraldiLab/maxATAC/blob/main/CODE_OF_CONDUCT.md).\nBy participating, you are expected to uphold this code. Please report unacceptable behavior\nto <>.\n\n\n## I Have a Question\n\n> If you want to ask a question, we assume that you have read the available [Documentation](https://github.com/MiraldiLab/maxATAC).\n\nBefore you ask a question, it is best to search for existing [Issues](https://github.com/MiraldiLab/maxATAC/issues) that might help you. In case you have found a suitable issue and still need clarification, you can write your question in this issue. It is also advisable to search the internet for answers first.\n\nIf you then still feel the need to ask a question or request clarification, we recommend the following:\n\n- Open an [Issue](https://github.com/MiraldiLab/maxATAC/issues/new).\n- Provide as much context as you can about what you're running into.\n- Provide project and platform versions (nodejs, npm, etc), depending on what seems relevant.\n\nWe will then take care of the issue as soon as possible.\n\n<!--\nYou might want to create a separate issue tag for questions and include it in this description. People should then tag their issues accordingly.\n\nDepending on how large the project is, you may want to outsource the questioning, e.g. to Stack Overflow or Gitter. You may add additional contact and information possibilities:\n- IRC\n- Slack\n- Gitter\n- Stack Overflow tag\n- Blog\n- FAQ\n- Roadmap\n- E-Mail List\n- Forum\n-->\n\n## I Want To Contribute\n\n> ### Legal Notice <!-- omit in toc -->\n> When contributing to this project, you must agree that you have authored 100% of the content, that you have the necessary rights to the content and that the content you contribute may be provided under the project license.\n\n### Reporting Bugs\n\n<!-- omit in toc -->\n#### Before Submitting a Bug Report\n\nA good bug report shouldn't leave others needing to chase you down for more information. Therefore, we ask you to investigate carefully, collect information and describe the issue in detail in your report. Please complete the following steps in advance to help us fix any potential bug as fast as possible.\n\n- Make sure that you are using the latest version.\n- Determine if your bug is really a bug and not an error on your side e.g. using incompatible environment components/versions (Make sure that you have read the [documentation](https://github.com/MiraldiLab/maxATAC). If you are looking for support, you might want to check [this section](#i-have-a-question)).\n- To see if other users have experienced (and potentially already solved) the same issue you are having, check if there is not already a bug report existing for your bug or error in the [bug tracker](https://github.com/MiraldiLab/maxATAC/issues/new) and label it with \"bug\".\n- Also make sure to search the internet (including Stack Overflow) to see if users outside of the GitHub community have discussed the issue.\n- Collect information about the bug:\n  - Stack trace (Traceback)\n  - OS, Platform and Version (Windows, Linux, macOS, x86, ARM)\n  - Version of the interpreter, compiler, SDK, runtime environment, package manager, depending on what seems relevant.\n  - Possibly your input and the output\n  - Can you reliably reproduce the issue? And can you also reproduce it with older versions?\n\n<!-- omit in toc -->\n#### How Do I Submit a Good Bug Report?\n\n> You must never report security related issues, vulnerabilities or bugs to the issue tracker, or elsewhere in public. Instead sensitive bugs must be sent by email to faizrizvi1993@gmail.com.\n<!-- You may add a PGP key to allow the messages to be sent encrypted as well. -->\n\nWe use GitHub issues to track bugs and errors. If you run into an issue with the project:\n\n- Open an [Issue](https://github.com/MiraldiLab/maxATAC/issues/new). (Since we can't be sure at this point whether it is a bug or not, we ask you not to talk about a bug yet and not to label the issue.)\n- Explain the behavior you would expect and the actual behavior.\n- Please provide as much context as possible and describe the *reproduction steps* that someone else can follow to recreate the issue on their own. This usually includes your code. For good bug reports you should isolate the problem and create a reduced test case.\n- Provide the information you collected in the previous section.\n\nOnce it's filed:\n\n- The project team will label the issue accordingly.\n- A team member will try to reproduce the issue with your provided steps. If there are no reproduction steps or no obvious way to reproduce the issue, the team will ask you for those steps and mark the issue as `needs-repro`. Bugs with the `needs-repro` tag will not be addressed until they are reproduced.\n- If the team is able to reproduce the issue, it will be marked `needs-fix`, as well as possibly other tags (such as `critical`), and the issue will be left to be implemented.\n\n<!-- You might want to create an issue template for bugs and errors that can be used as a guide and that defines the structure of the information to be included. If you do so, reference it here in the description. -->\n\n\n### Suggesting Enhancements\n\nThis section guides you through submitting an enhancement suggestion for maxATAC, **including completely new features and minor improvements to existing functionality**. Following these guidelines will help maintainers and the community to understand your suggestion and find related suggestions.\n\n<!-- omit in toc -->\n#### Before Submitting an Enhancement\n\n- Make sure that you are using the latest version.\n- Read the [documentation](https://github.com/MiraldiLab/maxATAC) carefully and find out if the functionality is already covered, maybe by an individual configuration.\n- Perform a [search](https://github.com/MiraldiLab/maxATAC/issues/new) to see if the enhancement has already been suggested. If it has, add a comment to the existing issue instead of opening a new one.\n- Find out whether your idea fits with the scope and aims of the project. It's up to you to make a strong case to convince the project's developers of the merits of this feature. Keep in mind that we want features that will be useful to the majority of our users and not just a small subset. If you're just targeting a minority of users, consider writing an add-on/plugin library.\n\n<!-- omit in toc -->\n#### How Do I Submit a Good Enhancement Suggestion?\n\nEnhancement suggestions are tracked as [GitHub issues](https://github.com/MiraldiLab/maxATAC/issues/new).\n\n- Use a **clear and descriptive title** for the issue to identify the suggestion.\n- Provide a **step-by-step description of the suggested enhancement** in as many details as possible.\n- **Describe the current behavior** and **explain which behavior you expected to see instead** and why. At this point you can also tell which alternatives do not work for you.\n- You may want to **include screenshots and animated GIFs** which help you demonstrate the steps or point out the part which the suggestion is related to. You can use [this tool](https://www.cockos.com/licecap/) to record GIFs on macOS and Windows, and [this tool](https://github.com/colinkeenan/silentcast) or [this tool](https://github.com/GNOME/byzanz) on Linux. <!-- this should only be included if the project has a GUI -->\n- **Explain why this enhancement would be useful** to most maxATAC users. You may also want to point out the other projects that solved it better and which could serve as inspiration.\n\n<!-- You might want to create an issue template for enhancement suggestions that can be used as a guide and that defines the structure of the information to be included. If you do so, reference it here in the description. -->\n\n\n<!-- omit in toc -->\n## Attribution\nThis guide is based on the **torus**. [Make your own](https://github.com/torus-online/torus/blob/master/CONTRIBUTING.MD)!\n"
      },
      "source": "https://raw.githubusercontent.com/MiraldiLab/maxATAC/main/CONTRIBUTING.MD",
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-12-05T22:43:04Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-02T15:04:05Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Transcription Factor Binding Prediction from ATAC-seq and scATAC-seq with Deep Neural Networks"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "parent_header": [
          "maxATAC: genome-scale transcription-factor binding prediction from ATAC-seq with deep neural networks"
        ],
        "type": "Text_excerpt",
        "value": "maxATAC is a Python package for transcription factor (TF) binding prediction from ATAC-seq signal and DNA sequence in *human* cell types. maxATAC works with both population-level (bulk) ATAC-seq and pseudobulk ATAC-seq profiles derived from single-cell (sc)ATAC-seq. maxATAC makes TF binding site (TFBS) predictions at 32 bp resolution.\nmaxATAC requires three inputs:\n\n* DNA sequence, in [`.2bit`](https://genome.ucsc.edu/goldenPath/help/twoBit.html) file format.\n* ATAC-seq signal, processed as described [below](#Preparing-your-ATAC-seq-signal).\n* Trained maxATAC TF Models, in [`.h5`](https://www.tensorflow.org/tutorials/keras/save_and_load) file format.\n\n> **maxATAC was trained and evaluated on data generated using the hg38 reference genome. The default paths and files that are used for each function will reference hg38 files. If you want to use maxATAC with any other species or reference, you will need to provide the appropriate chromosome sizes file, blacklist, and `.2bit` file specific to your data.**\n\n___\n"
      },
      "source": "https://raw.githubusercontent.com/MiraldiLab/maxATAC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8999400933513677,
      "result": {
        "original_header": "Predicting TF binding from ATAC-seq",
        "type": "Text_excerpt",
        "value": "Following maxATAC-specific processing of ATAC-seq signal inputs, use the [`maxatac predict`](./docs/readme/predict.md#Predict) function to predict TF binding with a maxATAC model. \nTF binding predictions can be made genome-wide, for a single chromosome, or, alternatively, the user can provide a `.bed` file of genomic intervals for maxATAC predictions to be made.\n \n"
      },
      "source": "https://raw.githubusercontent.com/MiraldiLab/maxATAC/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9196245030689898,
      "result": {
        "original_header": "Prediction in a specific genomic region(s)",
        "type": "Text_excerpt",
        "value": "For TFBS predictions within specific regions of the genome, a `BED` file of genomic intervals, `roi` (regions of interest) are supplied:\n```bash\nmaxatac predict -tf CTCF --signal GM12878_IS_slop20_RP20M_minmax01.bw  --roi ROI.bed\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/MiraldiLab/maxATAC/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9524427253561832,
      "result": {
        "original_header": "Raw signal tracks (prediction bigwigs) are large",
        "type": "Text_excerpt",
        "value": "Each output prediction file for a whole genome is ~700 MB per TF. \nThere are 127 TF models x ~700MB per TF model = ~88.9 GB of bigwig files for a single ATAC-seq input track. (Note: it only makes sense to generate maxATAC predicitons for TFs expressed in your cell type / conditions of interest, so this is a worst-case estimate.) \n"
      },
      "source": "https://raw.githubusercontent.com/MiraldiLab/maxATAC/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/MiraldiLab/maxATAC/wiki"
      },
      "source": "https://raw.githubusercontent.com/MiraldiLab/maxATAC/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Downloading required reference data",
        "parent_header": [
          "maxATAC: genome-scale transcription-factor binding prediction from ATAC-seq with deep neural networks",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "In order to run the maxATAC models that were described in the [maxATAC pre-print](https://www.biorxiv.org/content/10.1101/2022.01.28.478235v1), the following files are required to be downloaded from the [maxATAC_data](https://github.com/MiraldiLab/maxATAC_data) repository and installed in the correct directory:\n\n* hg38 reference genome `.2bit` file\n* hg38 chromosome sizes file\n* maxATAC extended blacklist\n* TF specific `.h5` model files\n* TF specific thresholding files\n* Bash scripts for preparing data\n\nThe easiest option is to use the command `maxatac data` to download the data to the required directory. The `maxatac data` function will download the maxATAC_data repo and reference data into your `~/opt/` directory under `~/opt/maxatac`. Only the hg38 reference genome has been extensively tested.\n"
      },
      "source": "https://raw.githubusercontent.com/MiraldiLab/maxATAC/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/MiraldiLab/maxATAC/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 8
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/MiraldiLab/maxATAC/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MiraldiLab/maxATAC"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "maxATAC: genome-scale transcription-factor binding prediction from ATAC-seq with deep neural networks"
      },
      "source": "https://raw.githubusercontent.com/MiraldiLab/maxATAC/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MiraldiLab/maxATAC/main/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/MiraldiLab/maxATAC/main/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MiraldiLab/maxATAC/main/packaging/portable/linux/pack_linux_docker.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MiraldiLab/maxATAC/main/packaging/portable/linux/private/pack_linux.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://user-images.githubusercontent.com/47329147/137503708-86d000ef-d6d4-4f75-99aa-39f8aab6dec5.png"
      },
      "source": "https://raw.githubusercontent.com/MiraldiLab/maxATAC/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://static.pepy.tech/personalized-badge/maxatac?period=total&amp;units=international_system&amp;left_color=black&amp;right_color=blue&amp;left_text=Downloads"
      },
      "source": "https://raw.githubusercontent.com/MiraldiLab/maxATAC/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MiraldiLab/maxATAC/main/./docs/figs/quickstart.svg"
      },
      "source": "https://raw.githubusercontent.com/MiraldiLab/maxATAC/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# maxATAC: a suite of user-friendly, deep neural network models for transcription factor binding prediction from ATAC-seq\n\n## Install Instructions\n\n### 1. To install maxATAC begin by downloading the data reopository located on github: maxATAC_data\n\n `git clone https://github.com/MiraldiLab/maxATAC_data.git`\n\n### 2. To ensure that the data is located in a central location copy maxATAC_data to local location:\n\n```bash\nmkdir -p /opt/maxatac/data/\ncp -r ./maxATAC_data /opt/maxatac/\n```\n\n### 3. Then Download hg38.2bit file from UCSC in a location of your choice\n\n```bash\nwget https://hgdownload.soe.ucsc.edu/goldenPath/hg38/bigZips/hg38.2bit\n```\n\n### 4. Installing maxATAC\n\n#### Installing with Conda\n\n1. Create a conda environment for maxATAC with `conda create -n maxatac python=3.9 samtools wget bedtools ucsc-bedgraphtobigwig pigz`\n\n> If you get an error installing ucsc-bedgraphtobigwig try `conda install -c bioconda ucsc-bedgraphtobigwig`\n\n2. Install maxATAC with `pip install maxatac`\n\n3. Test installation with `maxatac -h`\n\n4. Download reference data with `maxatac data`\n\n#### Installing with python virtualenv\n\n1. Create a virtual environment for maxATAC with `virtualenv -p python3.9 maxatac`.\n\n2. Install required packages and make sure they are on your PATH: samtools, bedtools, bedGraphToBigWig, wget, git, pigz.\n\n3. Install maxatac with `pip install maxatac`\n\n4. Test installation with `maxatac -h`\n\n#### Running maxATAC with a docker\n\nA docker image of maxATAC can be found on our lab [dockerpage](https://hub.docker.com/repository/docker/miraldi/maxatac)\n\n1. install and run docker\n2. Run `docker pull miraldi/maxatac:v0.0.3` to pull the docker image onto your device\n3. Run maxATAC through docker `docker run --rm -ti miraldi/maxatac:v0.0.3 /bin/bash`\n\n"
      },
      "source": "https://raw.githubusercontent.com/MiraldiLab/maxATAC/main/INSTALL.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "maxATAC: genome-scale transcription-factor binding prediction from ATAC-seq with deep neural networks"
        ],
        "type": "Text_excerpt",
        "value": "It is best to install maxATAC into a dedicated virtual environment.\n\nThis version requires python 3.9, `bedtools`, `samtools`, `pigz`, `wget`, `git`, `graphviz`, and `ucsc-bedgraphtobigwig` in order to run all functions.\n\n> The total install data requirements for maxATAC is ~2 GB.\n"
      },
      "source": "https://raw.githubusercontent.com/MiraldiLab/maxATAC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing with Conda",
        "parent_header": [
          "maxATAC: genome-scale transcription-factor binding prediction from ATAC-seq with deep neural networks",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "1. Create a conda environment for maxATAC with `conda create -n maxatac -c bioconda python=3.9 samtools wget bedtools ucsc-bedgraphtobigwig pigz`\n\n> If you get an error regarding graphviz while training a model, re-install graphviz with `conda install graphviz`\n\n2. Install maxATAC with `pip install maxatac`\n\n3. Test installation with `maxatac -h`\n\n4. Download reference data with `maxatac data`\n\n> If you have an error related to pybigwig, reference issues: [96](https://github.com/MiraldiLab/maxATAC/issues/96) and [87](https://github.com/MiraldiLab/maxATAC/issues/87#issue-1139117054)\n"
      },
      "source": "https://raw.githubusercontent.com/MiraldiLab/maxATAC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing with python virtualenv",
        "parent_header": [
          "maxATAC: genome-scale transcription-factor binding prediction from ATAC-seq with deep neural networks",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "1. Create a virtual environment for maxATAC with `virtualenv -p python3.9 maxatac`.\n\n2. Install required packages and make sure they are on your PATH: samtools, bedtools, bedGraphToBigWig, wget, git, pigz.\n\n3. Install maxatac with `pip install maxatac`\n\n4. Test installation with `maxatac -h`\n\n5. Download reference data with `maxatac data`\n"
      },
      "source": "https://raw.githubusercontent.com/MiraldiLab/maxATAC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Preparing the ATAC-seq signal",
        "parent_header": [
          "maxATAC: genome-scale transcription-factor binding prediction from ATAC-seq with deep neural networks",
          "ATAC-seq Data Requirements"
        ],
        "type": "Text_excerpt",
        "value": "The current `maxatac predict` function requires a normalized ATAC-seq signal in a bigwig format. Use `maxatac prepare` to generate a normalized signal track from a `.bam` file of aligned reads. See [the prepare documentation](./docs/readme/prepare.md) for more details about the expected outputs and file name descriptions.\n"
      },
      "source": "https://raw.githubusercontent.com/MiraldiLab/maxATAC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Bulk ATAC-seq",
        "parent_header": [
          "maxATAC: genome-scale transcription-factor binding prediction from ATAC-seq with deep neural networks",
          "ATAC-seq Data Requirements",
          "Preparing the ATAC-seq signal"
        ],
        "type": "Text_excerpt",
        "value": "The function `maxatac prepare` was designed to take an input BAM file that has aligned to the hg38 reference genome. The inputs to `maxatac prepare` are the input bam file, the output directory, and the filename prefix.\n\n```bash\nmaxatac prepare -i SRX2717911.bam -o ./output -prefix SRX2717911 -dedup\n```\n\nThis function took 38 minutes for a sample with 52,657,164 reads in the BAM file. This was tested on a 2019 Macbook Pro with a 2.6 GHz 6-Core Intel Core i7 and 16 GB of memory.\n"
      },
      "source": "https://raw.githubusercontent.com/MiraldiLab/maxATAC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Pseudo-bulk scATAC-seq",
        "parent_header": [
          "maxATAC: genome-scale transcription-factor binding prediction from ATAC-seq with deep neural networks",
          "ATAC-seq Data Requirements",
          "Preparing the ATAC-seq signal"
        ],
        "type": "Text_excerpt",
        "value": "First, convert the `.tsv.gz` output fragments file from CellRanger into pseudo-bulk specific fragment files. Then, use `maxatac prepare` with each of the fragment files in order to generate a normalized bigwig file for input into `maxatac predict`.\n\n```bash\nmaxatac prepare -i HighLoading_GM12878.tsv -o ./output -prefix HighLoading_GM12878\n```\n\nThe prediction parameters and steps are the same for scATAC-seq data after normalization.\n"
      },
      "source": "https://raw.githubusercontent.com/MiraldiLab/maxATAC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9991035896426746,
      "result": {
        "original_header": "Whole genome prediction",
        "type": "Text_excerpt",
        "value": "Example command for TFBS prediction across the whole genome:\n```bash\nmaxatac predict -tf CTCF --signal GM12878_IS_slop20_RP20M_minmax01.bw -o outputdir/\n```\nIf data has been installed with maxATAC data, then the following command will use the best model and call peaks using the TF specific threshold statistics. \n```bash\nmaxatac predict -tf CTCF -s GM12878_IS_slop20_RP20M_minmax01.bw  -o outputdir/\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/MiraldiLab/maxATAC/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9648847378277534,
      "result": {
        "original_header": "Prediction on a specific chromosome(s)",
        "type": "Text_excerpt",
        "value": "For TFBS predictions on a single chromosome or subset of chromosomes, these can be provided using the `--chromosomes` argument:\n```bash\nmaxatac predict -tf CTCF --signal GM12878_IS_slop20_RP20M_minmax01.bw  --chromosomes chr3 chr5\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/MiraldiLab/maxATAC/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8149074157541212,
      "result": {
        "original_header": "Whole genome prediction",
        "type": "Text_excerpt",
        "value": "Example command for TFBS prediction across the whole genome:\n```bash\nmaxatac predict -tf CTCF --signal GM12878_IS_slop20_RP20M_minmax01.bw -o outputdir/\n```\nIf data has been installed with maxATAC data, then the following command will use the best model and call peaks using the TF specific threshold statistics. \n```bash\nmaxatac predict -tf CTCF -s GM12878_IS_slop20_RP20M_minmax01.bw  -o outputdir/\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/MiraldiLab/maxATAC/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/MiraldiLab/maxATAC/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "atac-seq, chip-seq, deeplearning, genome-analysis, maxatac, transcription-factor-binding"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Apache License 2.0",
        "spdx_id": "Apache-2.0",
        "type": "License",
        "url": "https://api.github.com/licenses/apache-2.0",
        "value": "https://api.github.com/licenses/apache-2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2017 Michael Kotliar\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License."
      },
      "source": "https://raw.githubusercontent.com/MiraldiLab/maxATAC/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "maxATAC"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "MiraldiLab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 303507,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 10574,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 2733,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MiraldiLab/maxATAC/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "tacazares",
          "type": "User"
        },
        "date_created": "2022-02-17T18:05:00Z",
        "date_published": "2022-02-17T18:19:10Z",
        "description": "This release of maxATAC is the companion code for the [preprint available on bioRxiv](https://doi.org/10.1101/2022.01.28.478235).\r\n\r\n**Full Changelog**: https://github.com/MiraldiLab/maxATAC/commits/v1.0-alpha\r\n\r\n**Pypi link**: https://pypi.org/project/maxatac/\r\n\r\n**Dockerhub link**: https://hub.docker.com/r/miraldi/maxatac\r\n\r\nAttached:\r\n\r\n**maxATAC-x86_64.AppImage** is an AppImage that can be used on any linux system. \r\n> Use `chmod +x maxATAC-x86_64.AppImage`, then `./maxATAC-x86_64.AppImage -h` to test.\r\n\r\n**maxatac-1.0.3.tar.gz** is the pypi source file. ",
        "html_url": "https://github.com/MiraldiLab/maxATAC/releases/tag/v1.0-alpha",
        "name": "Preprint release",
        "release_id": 59160772,
        "tag": "v1.0-alpha",
        "tarball_url": "https://api.github.com/repos/MiraldiLab/maxATAC/tarball/v1.0-alpha",
        "type": "Release",
        "url": "https://api.github.com/repos/MiraldiLab/maxATAC/releases/59160772",
        "value": "https://api.github.com/repos/MiraldiLab/maxATAC/releases/59160772",
        "zipball_url": "https://api.github.com/repos/MiraldiLab/maxATAC/zipball/v1.0-alpha"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "ATAC-seq Data Requirements",
        "parent_header": [
          "maxATAC: genome-scale transcription-factor binding prediction from ATAC-seq with deep neural networks"
        ],
        "type": "Text_excerpt",
        "value": "As described in the [maxATAC pre-print](https://www.biorxiv.org/content/10.1101/2022.01.28.478235v1), **maxATAC processing of ATAC-seq signal is critical to maxATAC prediction**. Key maxATAC processing steps, summarized in a single command [`maxatac prepare`](./docs/readme/prepare.md#Prepare), include identification of Tn5 cut sites from ATAC-seq fragments, ATAC-seq signal smoothing, filtering with an extended \"maxATAC\" blacklist, and robust, min-max-like normalization. \n\nThe maxATAC models were trained on paired-end ATAC-seq data in human. For this reason, we recommend paired-end sequencing with sufficient sequencing depth (e.g., ~20M reads for bulk ATAC-seq). Until these models are benchmarked in other species, we recommend limiting their use to human ATAC-seq datasets. \n"
      },
      "source": "https://raw.githubusercontent.com/MiraldiLab/maxATAC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Bulk ATAC-seq",
        "parent_header": [
          "maxATAC: genome-scale transcription-factor binding prediction from ATAC-seq with deep neural networks",
          "ATAC-seq Data Requirements",
          "Preparing the ATAC-seq signal"
        ],
        "type": "Text_excerpt",
        "value": "The function `maxatac prepare` was designed to take an input BAM file that has aligned to the hg38 reference genome. The inputs to `maxatac prepare` are the input bam file, the output directory, and the filename prefix.\n\n```bash\nmaxatac prepare -i SRX2717911.bam -o ./output -prefix SRX2717911 -dedup\n```\n\nThis function took 38 minutes for a sample with 52,657,164 reads in the BAM file. This was tested on a 2019 Macbook Pro with a 2.6 GHz 6-Core Intel Core i7 and 16 GB of memory.\n"
      },
      "source": "https://raw.githubusercontent.com/MiraldiLab/maxATAC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Pseudo-bulk scATAC-seq",
        "parent_header": [
          "maxATAC: genome-scale transcription-factor binding prediction from ATAC-seq with deep neural networks",
          "ATAC-seq Data Requirements",
          "Preparing the ATAC-seq signal"
        ],
        "type": "Text_excerpt",
        "value": "First, convert the `.tsv.gz` output fragments file from CellRanger into pseudo-bulk specific fragment files. Then, use `maxatac prepare` with each of the fragment files in order to generate a normalized bigwig file for input into `maxatac predict`.\n\n```bash\nmaxatac prepare -i HighLoading_GM12878.tsv -o ./output -prefix HighLoading_GM12878\n```\n\nThe prediction parameters and steps are the same for scATAC-seq data after normalization.\n"
      },
      "source": "https://raw.githubusercontent.com/MiraldiLab/maxATAC/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 10:26:32",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 25
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "maxATAC Quick Start Overview",
        "parent_header": [
          "maxATAC: genome-scale transcription-factor binding prediction from ATAC-seq with deep neural networks"
        ],
        "type": "Text_excerpt",
        "value": "![maxATAC Quick Start Overview](./docs/figs/quickstart.svg)\n\n>*Schematic: Overview of a typical maxATAC workflow. First, ATAC-seq data is prepared using the maxatac prepare function. The prepare function processes bulk and scATAC-seq into normalized signal files. The normalized signal track can then be used to make TF binding predictions for the TF of interest. The IGV screenshot shows the maxATAC-normalized ATAC-seq signal (blue) and maxATAC TFBS predictions for the FOXP1 model (magenta), predictions are represented as signal tracks (.bw, bigwig) and TFBS (.bed files), the default outputs from maxATAC.*\n"
      },
      "source": "https://raw.githubusercontent.com/MiraldiLab/maxATAC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Inputs",
        "parent_header": [
          "maxATAC: genome-scale transcription-factor binding prediction from ATAC-seq with deep neural networks",
          "maxATAC Quick Start Overview"
        ],
        "type": "Text_excerpt",
        "value": "* DNA sequence, in [`.2bit`](https://genome.ucsc.edu/goldenPath/help/twoBit.html) file format.\n* ATAC-seq signal, processed as described [below](#preparing-the-atac-seq-signal).\n* Trained maxATAC TF Models, in [`.h5`](https://www.tensorflow.org/tutorials/keras/save_and_load) file format.\n"
      },
      "source": "https://raw.githubusercontent.com/MiraldiLab/maxATAC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Outputs",
        "parent_header": [
          "maxATAC: genome-scale transcription-factor binding prediction from ATAC-seq with deep neural networks",
          "maxATAC Quick Start Overview"
        ],
        "type": "Text_excerpt",
        "value": "* Raw maxATAC TFBS scores tracks in [`.bw`](https://genome.ucsc.edu/FAQ/FAQformat.html#format6.1) file format.\n* [`.bed`](https://genome.ucsc.edu/FAQ/FAQformat.html#format1) file of TF binding sites, thresholded according to a user-supplied confidence cut off (e.g., corresponding to an estimated precision, recall value or $log_2(precision:precision_{random} > 7$) or default ($max(F1score)$)).\n"
      },
      "source": "https://raw.githubusercontent.com/MiraldiLab/maxATAC/main/README.md",
      "technique": "header_analysis"
    }
  ]
}