{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/cnickh/wgdtree"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-06-05T20:55:38Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-05-02T16:26:08Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.948963385815419,
      "result": {
        "original_header": "wgdtree Package",
        "type": "Text_excerpt",
        "value": "\n**sim(species_tree,n,path,ssd_rate,loss_rate)** | This function accepts a species tree, an integer value 'n', a path, a loss rate floating point and a ssd rate also floating point. The function will simulate n statistically probable gene trees and then write them as newick files to the given path. This function allows for wgd duplications that are labelled on the species tree to be accounted for. Annotations are expected to be in NHX format. \n\n**root(species_tree,gene_tree)** | This function accepts a gene tree and species tree. This function will pick the best rooting of the gene tree to minimize the number of loss and duplication events.\n```python\nspecies_tree = PhyloTree(\"example_species_tree.newick\")\n\ngene_tree = PhyloTree(\"example_gene_tree.newick\")\n\nrooted_gene_tree = wgdtree.root(species_tree,gene_tree)\n````\n**place_wgd(species_tree, gene_tree)** |  This function accepts a rooted gene tree and a species tree labelled with one pair of consecutive whole genome duplication events. The function will return a copy of the gene tree with labels added to nodes that represent wgd events. The added events will either be marked with a 'P' for present or 'M' for missing. All annotations will be made in NHX format.\n```python\nspecies_tree = PhyloTree(\"example_species_tree.newick\")\n\ngene_tree = PhyloTree(\"example_gene_tree.newick\")\n\nlabelled_gene_tree = wgdtree.place_wgd(species_tree, gene_tree)\n````\n \n\n**rrates(labelled_gene_tree, pSpecies)** |  This function accepts a gene tree labelled using the place_wgd() method and a string corresponding to a taxa on the given gene tree. This function then returns two floating point values representing the conditional probably of genes being retained retained and lossed retained of the given taxa.  \n***run(list_of_gene_tree,species_tree)*** | This function accepts an array of gene tree files in newick format and a species tree \nlabelled with all whole genome duplication events on the lineage. The function will calculate the conditional probability statistic \nfor all consecutive pairs of events on the species tree. The function will return a dictionary where species names as they appear on the\nspecies trees are used as keys that correspond to a list of tuples of the form (P(L|R),P(R|R)). There will be a seperate tuple for each event \npair that species was present for.\n```python\n\nlist_of_gene_trees = [\"gene_tree0.newick\",\"gene_tree1.newick\",\"gene_tree2.newick\",\"gene_tree3.newick\"]\n\nspecies_tree = PhyloTree(\"species_tree\")\n\nresults_dict = wgdtree.run(list_of_gene_trees,species_tree)\n```\n \n\n*all trees must be in .newick format, and the ete3 package is required.\n \n"
      },
      "source": "https://raw.githubusercontent.com/cnickh/wgdtree/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/cnickh/wgdtree/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/cnickh/wgdtree/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "cnickh/wgdtree"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "wgdtree Package"
      },
      "source": "https://raw.githubusercontent.com/cnickh/wgdtree/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9543825236877805,
      "result": {
        "original_header": "wgdtree Package",
        "type": "Text_excerpt",
        "value": "\ninstall with ```$ pip install wgdtree ```\n```python\nimport wgdtree\nfrom ete3 import PhyloTree\n````\n \n\n```python\npath=\"/home/user/simulated_trees_dir\"\n\nn = 10\n\nssd_rate = 0.002\n\nloss_rate = 0.002\n\nspecies_tree = PhyloTree(\"example_species_tree.newick\")\n\nwgdtree.sim(species_tree,n,path,ssd_rate,loss_rate)\n\n```` \nexample results_dict.txt\n```\n{\n\n'species_A': [], \n\n'species_B': [(0.647454313863336, 0.5535554282888006)], \n\n'species_C': [(0.448686400377538, 0.2861785837493464)], \n\n'species_D': [(0.37466663338849644, 0.3420519777168986)], \n\n'species_E': [(0.205555576769, 0.2314676413445378)], \n\n'species_F': [(0.21592868256170894, 0.18623158187378372), (0.3076854227579211, 0.2671778530173272), (0.29352608422375864, 0.2732342007434944)], \n\n'species_G': [(0.26377679954349065, 0.23002217890987298), (0.3769475818129163, 0.33331715367440057), (0.36203343256239984, 0.33394428152492667)]\n\n}\n\n``` \n\n*all trees must be in .newick format, and the ete3 package is required.\n \n"
      },
      "source": "https://raw.githubusercontent.com/cnickh/wgdtree/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8973520162454807,
      "result": {
        "original_header": "wgdtree Package",
        "type": "Text_excerpt",
        "value": "example results_dict.txt\n```\n{\n\n'species_A': [], \n\n'species_B': [(0.647454313863336, 0.5535554282888006)], \n\n'species_C': [(0.448686400377538, 0.2861785837493464)], \n\n'species_D': [(0.37466663338849644, 0.3420519777168986)], \n\n'species_E': [(0.205555576769, 0.2314676413445378)], \n\n'species_F': [(0.21592868256170894, 0.18623158187378372), (0.3076854227579211, 0.2671778530173272), (0.29352608422375864, 0.2732342007434944)], \n\n'species_G': [(0.26377679954349065, 0.23002217890987298), (0.3769475818129163, 0.33331715367440057), (0.36203343256239984, 0.33394428152492667)]\n\n}\n\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/cnickh/wgdtree/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/cnickh/wgdtree/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Copyright (c) 2018 The Python Packaging Authority\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/cnickh/wgdtree/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "wgdtree"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "cnickh"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 33702,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/cnickh/wgdtree/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 11:46:24",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ]
}