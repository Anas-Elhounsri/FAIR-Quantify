{
  "application_domain": [
    {
      "confidence": 21.11,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/cylab-tw/bluelight"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-04-01T15:16:51Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-03T15:59:30Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "a browser-based DICOM viewer"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9409871697930016,
      "result": {
        "type": "Text_excerpt",
        "value": "<div> \n  <div style=\"float: left;width: 15%;\"><img src=\"https://raw.githubusercontent.com/cylab-tw/bluelight/master/bluelight/image/icon/black/BLLogoSmall.png\" width=\"90px\"></div>\n  <div style=\"float: left;width: 85%;\"><h1>BlueLight Web-based DICOM Viewer (BlueLight Viewer)</h1> \n</div>\n<p><strong>Blue Light</strong> is a browser-based medical image viewer is primarily maintained by the <a href=\"https://cylab.dicom.tw/\">Imaging Informatics Labs</a>. It is a pure single-page application (SPA), lightweight, and using only JavaScript and HTML5 technologies so as to deploy it on any HTTP server easily (just put it in HTTP server). It supports not only opening local data, but also connecting to medical image archives which support <a href=\"https://www.dicomstandard.org/using/dicomweb/\">DICOMweb</a>. It can display the various image markups and annotations such as Annotation and Image Markup (AIM), DICOM-RT structure set (RTSS), DICOM Overlay, and DICOM Presentation State. It provides tools for medical image interpretation and 3D image reconstruction, e.g., Multiplanar Rreformation or Reconstruction (MPR) and Volume Rendering (VR).</p> \n## DICOMWeb Configuration\n* go to `./bluelight/data/config.json` and change the configuration of DICOM server.\n - **Reminder** the DICOMWeb Plugin of the DICOM server shall be installed first. \n \n## About\n* BlueLight\u662f\u5c11\u6578\u80fd\u5728\u7db2\u9801\u4e0a\u986f\u793a3D VR\u3001MIP\u53caMPR\u7684\u958b\u6e90DICOM\u700f\u89bd\u7cfb\u7d71\uff0c\u5b83\u64c1\u6709\u5e73\u6613\u8fd1\u4eba\u7684\u64cd\u4f5c\u4ecb\u9762\u4e26\u652f\u63f4RWD\u53caWeb\u96f6\u8db3\u8de1\u700f\u89bd\uff0c\u53ef\u5728\u4efb\u610f\u5927\u5c0f\u7684\u88dd\u7f6e\u4e0a\u57f7\u884c\u3002\n* \u6a19\u8a18\u986f\u793a\u65b9\u9762\u652f\u63f4RTSS\u3001Overlay\u3001Graphic Annotation\u3001AIM\u7b49\u6a19\u8a18\uff0c\u4ea6\u53ef\u65bc3D\u7cfb\u7d71\u4e2d\u8f49\u63db\u62103D\u6a19\u8a18\u3002\n* \u6b64\u5c08\u6848\u4ea6\u652f\u63f4LabelImg\u683c\u5f0f\u7684\u6a19\u8a18\u7e6a\u88fd\u3002\n* 3D VR\u986f\u793a\u6a21\u5f0f\u652f\u63f4\u67d3\u8272\u3001\u7a97\u5ea6\u3001\u900f\u660e\u3001\u58d3\u7e2e\u3001\u8cbc\u76ae\u3001\u5167\u63d2\u3001\u964d\u566a\u3001\u6253\u5149\u3001\u6316\u6d1e\u53ca\u6700\u5927\u5bc6\u5ea6\u6295\u5f71\uff0c\u91dd\u5c0d\u9aa8\u9abc\u53ca\u80ba\u6c23\u7ba1\u6709\u5c08\u9580\u7684\u986f\u793a\u6a21\u5f0f\uff0cMPR\u6a21\u5f0f\u5247\u652f\u63f4\u5167\u63d2\u3001\u8cbc\u76ae\u3001\u67d3\u8272\u4ee5\u53ca3D\u5207\u9762\u7684\u986f\u793a\u3002\n* \u901a\u904e\u53f0\u7063\u91ab\u5b78\u8cc7\u8a0a\u806f\u6e2c MI-TW 2020 - Track 4: DICOMWeb Query/Retrieve Consumer \n## Key Features\n### Network support\n* Load local files\n* Integration with any DICOMWeb Image Archive, including Raccoon, Orthanc, and dcm4chee server\n  - Retrieve methods: WADO-URI (as default) and WADO-RS: specify one of them in config.json\n* Integration with XNAT by plugin [xnat.js](/bluelight/scripts/plugin/xnat.js). BlueLight will query the XNAT's API to get the XML and retrieve the DICOM stored in experiments and its scans. Currently we doesn't build it as an XNAT plugin. [issue: XNAT Connection](https://github.com/cylab-tw/bluelight/issues/11)\n  - Step1: copy BlueLight to XNAT deployment folder\n  - Step2: type URL: https://{XNAT's hostname}/bluelight/search/html/start.html?experiments={XNAT expID}&scans={scanID}&format=json\n```html\n  http://{XNAT's hostname}/REST/projects/test/subjects/XNAT_S00001/experiments/XNAT_E00002/scans/1/files?format=json\n```\n \n### Native features for 2D image interpretation \n* Pan, zoom, move\n* Scroll images within a series\n* Rotation, Flip, Invert\n* Windowing\n* Cine\n* viewports:  4\u00d74\n* Cross-Studies synchronization\n* Magnifier, etc\n* Line and angle measurement\n* hide/display markups and annotations\n* Export image \n### support the display of the kinds of markups and annotations\n* GSPS: DICOM Graphic Annotation\n* DICOM Overlay\n* DICOM-RT structure set (RTSS)\n* Annotation and Image Markup (AIM)\n* DICOM SEG (Segementation)\n* [LabelImg](https://github.com/tzutalin/labelImg)\n* Provide the function to convert the DICOM Overalys to a DICOM SEG object. \n## Plugins\n* Some advanced features are separated from the native parts of Bluelight to facilitate better performance. All supported functions are placed in folder `/scripts/plugin`. Using the [config](/bluelight/data/plugin.json) enable the selected plugins. If disableCatch is set as false, the plugin is enabled.\n```json\n{\n    \"plugin\": [\n    /*  path: the location of plugin\n     *  name: the name of plugin\n     *  disableCatch: enable the plugin or not.\n     *  examples show as follows:        \n     * /\n        {\"path\":\"../scripts/plugin/oauth.js\", \"name\": \"oauth\", \"disableCatch\": \"true\"},\n        {\"path\":\"../scripts/plugin/mpr.js\", \"name\": \"MPR\", \"disableCatch\": \"true\"},        \n    ]\n}\n\n```\n* We welcome any idea of adding new plugins from any third party, such as:\n  - Create the customized annotations encoded as a xml - see [xml_format.js](/bluelight/scripts/plugin/xml_format.js)\n  \n### Plugin: Authentication\n* OAuth2 - see [oauth.js](/bluelight/scripts/plugin/oauth.js). If OAuth2 is enabled, and then modify the [config](/bluelight/data/configOAuth.json). \n   - **Note:** we used Keycloak to test the function of OAuth2.\n \n# Special projects\n* **BlueLight-WSI**: :construction: please visit the project [mainecoon](https://github.com/cylab-tw/mainecoon)\n* **BlueLight@Orthanc**: :secret:\n* **BlueLight@XANT**: :white_check_mark:\n* **BlueLight@Raccoon.net**: :white_check_mark: - [Raccoon.net](https://github.com/cylab-tw/raccoon) is a noSQL-based medical image repository. \n# Acknowledgement\n* To acknowledge the BlueLight in an academic publication, please cite \n* This project was supported by a grant from the Ministry of Science and Technology Taiwan.\n* We acknowledge AI99 teams at Taipei Veterans General Hospital (TVGH) for validation and provides many useful suggestions in many aspects of the clinical domain, especially to thank Dr. Ying-Chou Sun and his professional team.\n* Thanks [\u7426\u96efQueenie](https://www.cakeresume.com/Queenie0814?locale=zh-TW), [Queenie's github](https://github.com/Queenie0814) for contributing the logo design. \n \n"
      },
      "source": "https://raw.githubusercontent.com/cylab-tw/bluelight/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/cylab-tw/bluelight/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 45
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/cylab-tw/bluelight/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "cylab-tw/bluelight"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/cylab-tw/bluelight/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9789859232786079,
      "result": {
        "type": "Text_excerpt",
        "value": "<a href=\"https://blsearch.dicom.tw\"><strong>Live DEMO</strong></a>&ensp;&ensp;&ensp;\n<a href=\"https://bl.dicom.tw\"><strong>Online Viewer</strong></a>&ensp;&ensp;&ensp; \n## Install\n* Put all files into any directory in the static directory on any HTTP server. \n## DICOMWeb Configuration\n* go to `./bluelight/data/config.json` and change the configuration of DICOM server.\n - **Reminder** the DICOMWeb Plugin of the DICOM server shall be installed first. \n \n## About\n* BlueLight\u662f\u5c11\u6578\u80fd\u5728\u7db2\u9801\u4e0a\u986f\u793a3D VR\u3001MIP\u53caMPR\u7684\u958b\u6e90DICOM\u700f\u89bd\u7cfb\u7d71\uff0c\u5b83\u64c1\u6709\u5e73\u6613\u8fd1\u4eba\u7684\u64cd\u4f5c\u4ecb\u9762\u4e26\u652f\u63f4RWD\u53caWeb\u96f6\u8db3\u8de1\u700f\u89bd\uff0c\u53ef\u5728\u4efb\u610f\u5927\u5c0f\u7684\u88dd\u7f6e\u4e0a\u57f7\u884c\u3002\n* \u6a19\u8a18\u986f\u793a\u65b9\u9762\u652f\u63f4RTSS\u3001Overlay\u3001Graphic Annotation\u3001AIM\u7b49\u6a19\u8a18\uff0c\u4ea6\u53ef\u65bc3D\u7cfb\u7d71\u4e2d\u8f49\u63db\u62103D\u6a19\u8a18\u3002\n* \u6b64\u5c08\u6848\u4ea6\u652f\u63f4LabelImg\u683c\u5f0f\u7684\u6a19\u8a18\u7e6a\u88fd\u3002\n* 3D VR\u986f\u793a\u6a21\u5f0f\u652f\u63f4\u67d3\u8272\u3001\u7a97\u5ea6\u3001\u900f\u660e\u3001\u58d3\u7e2e\u3001\u8cbc\u76ae\u3001\u5167\u63d2\u3001\u964d\u566a\u3001\u6253\u5149\u3001\u6316\u6d1e\u53ca\u6700\u5927\u5bc6\u5ea6\u6295\u5f71\uff0c\u91dd\u5c0d\u9aa8\u9abc\u53ca\u80ba\u6c23\u7ba1\u6709\u5c08\u9580\u7684\u986f\u793a\u6a21\u5f0f\uff0cMPR\u6a21\u5f0f\u5247\u652f\u63f4\u5167\u63d2\u3001\u8cbc\u76ae\u3001\u67d3\u8272\u4ee5\u53ca3D\u5207\u9762\u7684\u986f\u793a\u3002\n* \u901a\u904e\u53f0\u7063\u91ab\u5b78\u8cc7\u8a0a\u806f\u6e2c MI-TW 2020 - Track 4: DICOMWeb Query/Retrieve Consumer \n## Key Features\n### Network support\n* Load local files\n* Integration with any DICOMWeb Image Archive, including Raccoon, Orthanc, and dcm4chee server\n  - Retrieve methods: WADO-URI (as default) and WADO-RS: specify one of them in config.json\n* Integration with XNAT by plugin [xnat.js](/bluelight/scripts/plugin/xnat.js). BlueLight will query the XNAT's API to get the XML and retrieve the DICOM stored in experiments and its scans. Currently we doesn't build it as an XNAT plugin. [issue: XNAT Connection](https://github.com/cylab-tw/bluelight/issues/11)\n  - Step1: copy BlueLight to XNAT deployment folder\n  - Step2: type URL: https://{XNAT's hostname}/bluelight/search/html/start.html?experiments={XNAT expID}&scans={scanID}&format=json\n```html\n  http://{XNAT's hostname}/REST/projects/test/subjects/XNAT_S00001/experiments/XNAT_E00002/scans/1/files?format=json\n```\n \n## Plugins\n* Some advanced features are separated from the native parts of Bluelight to facilitate better performance. All supported functions are placed in folder `/scripts/plugin`. Using the [config](/bluelight/data/plugin.json) enable the selected plugins. If disableCatch is set as false, the plugin is enabled.\n```json\n{\n    \"plugin\": [\n    /*  path: the location of plugin\n     *  name: the name of plugin\n     *  disableCatch: enable the plugin or not.\n     *  examples show as follows:        \n     * /\n        {\"path\":\"../scripts/plugin/oauth.js\", \"name\": \"oauth\", \"disableCatch\": \"true\"},\n        {\"path\":\"../scripts/plugin/mpr.js\", \"name\": \"MPR\", \"disableCatch\": \"true\"},        \n    ]\n}\n\n```\n* We welcome any idea of adding new plugins from any third party, such as:\n  - Create the customized annotations encoded as a xml - see [xml_format.js](/bluelight/scripts/plugin/xml_format.js)\n  \n### Plugin: Authentication\n* OAuth2 - see [oauth.js](/bluelight/scripts/plugin/oauth.js). If OAuth2 is enabled, and then modify the [config](/bluelight/data/configOAuth.json). \n   - **Note:** we used Keycloak to test the function of OAuth2.\n \n```json\n{\n    \"enabled\":false,\n    \"hostname\":\"127.0.0.1\",\n    \"port\":\"8080\",\n    \"http\":\"http\",\n    \"client_id\":\"account\",\n    \"endpoints\":\n    {\n        \"auth\":\"realms/TestRealm/protocol/openid-connect/auth\",\n        \"validation\":\"realms/TestRealm/protocol/openid-connect/userinfo\", \n        \"token\":\"realms/TestRealm/protocol/openid-connect/token\" \n    },\n    \"tokenInRequest\":true\n}\n```\n### Plugin : 3D Post-Processing\n* MPR (Multiplanar Reconstruction) - see [mpr.js](/bluelight/scripts/plugin/mpr.js)\n* MIP (maximum intensity projection) - implemented in MPR \n* 3D Volume Rendering - see [vr2.js](/bluelight/scripts/plugin/vr2.js) \n### Plugin : General\n* Display DICOM TAG - see [tag.js](/bluelight/scripts/plugin/tag.js)\n* Display LUT- see [table.js](/bluelight/scripts/plugin/table.js) \n## Supported library\n* BlueLight Viewer uses - <a href=\"https://github.com/cornerstonejs/dicomParser\">dicomParser</a> for parsing DICOM tags. \n"
      },
      "source": "https://raw.githubusercontent.com/cylab-tw/bluelight/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/cylab-tw/bluelight/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bluelight, dicom, dicom-overlay, dicom-server, dicom-viewer, dicom-web-viewer, dicomweb, html5, orthanc, rtss, whole-slide-imaging, wsi"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 cylab-tw\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/cylab-tw/bluelight/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/cylab-tw/bluelight/master/bluelight/image/icon/black/BLLogoSmall.png"
      },
      "source": "https://raw.githubusercontent.com/cylab-tw/bluelight/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bluelight"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "cylab-tw"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "JavaScript",
        "size": 842562,
        "type": "Programming_language",
        "value": "JavaScript"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 27094,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CSS",
        "size": 6068,
        "type": "Programming_language",
        "value": "CSS"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/cylab-tw/bluelight/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 11:14:44",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 119
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "static-website"
      },
      "technique": "software_type_heuristics"
    }
  ]
}