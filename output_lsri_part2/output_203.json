{
  "application_domain": [
    {
      "confidence": 57.36,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Reference",
        "type": "Text_excerpt",
        "value": "If you use a medigan model in your work, please cite its respective publication ([see references](#available-models)). \n\nPlease also consider citing the medigan paper:\n\n> [Osuala, R., Skorupko, G., Lazrak, N., Garrucho, L., Garc\u00eda, E., Joshi, S., ... & Lekadir, K. (2023). medigan: a Python library of pretrained generative models for medical image synthesis. Journal of Medical Imaging, 10(6), 061403.](https://doi.org/10.1117/1.JMI.10.6.061403)\n\nBibTeX entry:\n```bibtex\n@article{osuala2023medigan,\n  title={medigan: a Python library of pretrained generative models for medical image synthesis},\n  author={Osuala, Richard and Skorupko, Grzegorz and Lazrak, Noussair and Garrucho, Lidia and Garc{\\'\\i}a, Eloy and Joshi, Smriti and Jouide, Socayna and Rutherford, Michael and Prior, Fred and Kushibar, Kaisar and others},\n  journal={Journal of Medical Imaging},\n  volume={10},\n  number={6},\n  pages={061403},\n  year={2023},\n  publisher={SPIE}\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Osuala, Richard and Skorupko, Grzegorz and Lazrak, Noussair and Garrucho, Lidia and Garc{\\'\\i}a, Eloy and Joshi, Smriti and Jouide, Socayna and Rutherford, Michael and Prior, Fred and Kushibar, Kaisar and others",
        "format": "bibtex",
        "title": "medigan: a Python library of pretrained generative models for medical image synthesis",
        "type": "Text_excerpt",
        "value": "@article{osuala2023medigan,\n    publisher = {SPIE},\n    year = {2023},\n    pages = {061403},\n    number = {6},\n    volume = {10},\n    journal = {Journal of Medical Imaging},\n    author = {Osuala, Richard and Skorupko, Grzegorz and Lazrak, Noussair and Garrucho, Lidia and Garc{\\'\\i}a, Eloy and Joshi, Smriti and Jouide, Socayna and Rutherford, Michael and Prior, Fred and Kushibar, Kaisar and others},\n    title = {medigan: a Python library of pretrained generative models for medical image synthesis},\n}"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/RichardObi/medigan"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "This file is Work in Progress\n# Contributing\n\n## How to Add New Models to medigan:\n\n- `medigan` motivates the reuse of trained generative models.\n\n- Models can be added via pull request by adding a model to the config in https://github.com/RichardObi/medigan-models (link stored in `medigan.constants.CONFIG_FILE_URL`).\n\n- Model contributors need to specify a link to their model package in the config. We recommend to host and link model packages on Zenodo. Reasons:\n\n    - Zenodo model packages get a static DOI. This provides clarity as to who the contributors and IP owners of each generative model in `medigan` are.\n\n    - File modification/updates under the same DOI are not possible in Zenodo. This helps to avoid security issues as package content remains static after the model is tested, verified, and added to `medigan`.\n\n    - Examples of how `medigan` model packages should be hosted on Zenodo can be found here: https://doi.org/10.5281/zenodo.5187715 and here: https://doi.org/10.5281/zenodo.5188558\n\n\n## Architectural Overview\n![medigan architecture and worklows](docs/source/_static/medigan-workflows.png)\n"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/CONTRIBUTING.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Contribute A Model",
        "type": "Text_excerpt",
        "value": "Create an [__init__.py](templates/examples/__init__.py) file in your model's root folder. \n\nNext, run the following code to contribute your model to medigan.\n\n- Your model will be stored on [Zenodo](https://zenodo.org/). \n\n- Also, a Github [issue](https://github.com/RichardObi/medigan/issues) will be created to add your model's metadata to medigan's [global.json](https://github.com/RichardObi/medigan/blob/main/config/global.json).\n\n- To do so, please provide a github access token ([get one here](https://github.com/settings/tokens)) and a zenodo access token ([get one here](https://zenodo.org/account/settings/applications/tokens/new/)), as shown below. After creation, the zenodo access token may take a few minutes before being recognized in zenodo API calls.\n\n```python\nfrom medigan import Generators\ngenerators = Generators()\n\n# Contribute your model\ngenerators.contribute(\n    model_id = \"00100_YOUR_MODEL\", # assign an ID\n    init_py_path =\"path/ending/with/__init__.py\",\n    model_weights_name = \"10000\",\n    model_weights_extension = \".pt\",\n    generate_method_name = \"generate\", # in __init__.py\n    dependencies = [\"numpy\", \"torch\"], \n    creator_name = \"YOUR_NAME\",\n    creator_affiliation = \"YOUR_AFFILIATION\",\n    zenodo_access_token = 'ZENODO_ACCESS_TOKEN',\n    github_access_token = 'GITHUB_ACCESS_TOKEN',\n```\nThank you for your contribution! \n\nYou will soon receive a reply in the Github [issue](https://github.com/RichardObi/medigan/issues) that you created for your model by running ```generators.contribute()```.\n"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-04-28T11:56:21Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-04T01:23:38Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "medigan - A Python Library of Pretrained Generative Models for Medical Image Synthesis"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9227255298600895,
      "result": {
        "original_header": "Features:",
        "type": "Text_excerpt",
        "value": "- :x: **Problem 1:** Data scarcity in medical imaging.  \n- :x: **Problem 2:** Scarcity of readily reusable generative models in medical imaging. \n- :white_check_mark: **Solution:** `medigan`\n    1. dataset sharing via generative models :gift:\n    2. data augmentation :gift:\n    3. domain adaptation :gift:\n    4. synthetic data evaluation method testing with multi-model datasets :gift: \nInstead of training your own, use one of the generative models from `medigan` to generate synthetic data.  \nSearch and find a model in `medigan` using search terms (e.g. \"Mammography\" or \"Endoscopy\").  \n"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9921734638751437,
      "result": {
        "original_header": "Available models",
        "type": "Text_excerpt",
        "value": "Model information can be found in:\n- [model documentation](https://medigan.readthedocs.io/en/latest/models.html) (e.g. the parameters of the models' generate functions)\n- [global.json](https://github.com/RichardObi/medigan/blob/main/config/global.json) file (e.g. metadata for model description, selection, and execution)\n- [medigan paper](https://arxiv.org/abs/2209.14472) (e.g. analysis and comparisons of models and FID scores)\n \n"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.962438830922881,
      "result": {
        "original_header": "Visualize A Model",
        "type": "Text_excerpt",
        "value": "With our interface, it is possible to generate sample by manually setting the conditional inputs or latent vector values. The sample is updated in realtime, so it's possible to observe how the images changes when the parameters are modified. The visualization is available only for models with accessible input latent vector. Depending on a model, a conditional input may be also available or synthetic segmentation mask.\n```python\nfrom medigan import Generators\n\ngenerators = Generators()\n# model 10 is \"00010_FASTGAN_POLYP_PATCHES_W_MASKS\"\ngenerators.visualize(10)\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8692379837300281,
      "result": {
        "original_header": "Contributions in General",
        "type": "Text_excerpt",
        "value": "We welcome contributions to medigan. Please send us an email or read the [contributing guidelines](CONTRIBUTING.md) regarding contributing to the medigan project.\n \n"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9871389724154844,
      "result": {
        "type": "Text_excerpt",
        "value": "`medigan` stands for **medi**cal **g**enerative (**a**dversarial) **n**etworks. `medigan` provides user-friendly medical image synthesis and allows users to choose from a range of pretrained generative models to `generate` synthetic datasets. These synthetic datasets can be used to train or adapt AI models that perform clinical tasks such as lesion classification, segmentation or detection.  \n"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://medigan.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/RichardObi/medigan/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichardObi/medigan/main/examples/tutorial.ipynb"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/examples/tutorial.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 13
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/RichardObi/medigan/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RichardObi/medigan"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichardObi/medigan/main/templates/examples/test.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://doi.org/10.5281/zenodo.6327625"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichardObi/medigan/main/docs/source/_static/medigan.gif"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichardObi/medigan/main/docs/source/_static/samples/00001.png"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichardObi/medigan/main/docs/source/_static/samples/00002.png"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichardObi/medigan/main/docs/source/_static/samples/00003.png"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichardObi/medigan/main/docs/source/_static/samples/00004.png"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichardObi/medigan/main/docs/source/_static/samples/00004_mask.png"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichardObi/medigan/main/docs/source/_static/samples/00005.png"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichardObi/medigan/main/docs/source/_static/samples/00006.png"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichardObi/medigan/main/docs/source/_static/samples/00007_F.png"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichardObi/medigan/main/docs/source/_static/samples/00007_T1.png"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichardObi/medigan/main/docs/source/_static/samples/00007_T1c.png"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichardObi/medigan/main/docs/source/_static/samples/00007_T2.png"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichardObi/medigan/main/docs/source/_static/samples/00007_mask.png"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichardObi/medigan/main/docs/source/_static/samples/00007_grade_mask.png"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichardObi/medigan/main/docs/source/_static/samples/00008.png"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichardObi/medigan/main/docs/source/_static/samples/00009.png"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichardObi/medigan/main/docs/source/_static/samples/00009_mask.png"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichardObi/medigan/main/docs/source/_static/samples/00010.png"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichardObi/medigan/main/docs/source/_static/samples/00010_mask.png"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichardObi/medigan/main/docs/source/_static/samples/00011.png"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichardObi/medigan/main/docs/source/_static/samples/00011_mask.png"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichardObi/medigan/main/docs/source/_static/samples/00012.png"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichardObi/medigan/main/docs/source/_static/samples/00013.png"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichardObi/medigan/main/docs/source/_static/samples/00014.png"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichardObi/medigan/main/docs/source/_static/samples/00015.png"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichardObi/medigan/main/docs/source/_static/samples/00016.png"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichardObi/medigan/main/docs/source/_static/samples/00017.png"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichardObi/medigan/main/docs/source/_static/samples/00018.png"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichardObi/medigan/main/docs/source/_static/samples/00019.png"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichardObi/medigan/main/docs/source/_static/samples/00020.png"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichardObi/medigan/main/docs/source/_static/samples/00021.png"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichardObi/medigan/main/docs/source/_static/samples/00022.png"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichardObi/medigan/main/docs/source/_static/samples/00023.png"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichardObi/medigan/main/docs/source/_static/samples/c-dcgan/model8_samples.png"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichardObi/medigan/main/docs/source/_static/samples/cyclegan/sample_image_5_low.png"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichardObi/medigan/main/docs/source/_static/samples/cyclegan/sample_image_5_high.png"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichardObi/medigan/main/docs/source/_static/samples/gan_sample_00004_dataloader.png"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichardObi/medigan/main/docs/source/_static/interface.png"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "To install the current release, simply run:\n```console\npip install medigan\n```\nOr, alternatively via conda:\n```console\nconda install -c conda-forge medigan\n```\n"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9592273193134543,
      "result": {
        "type": "Text_excerpt",
        "value": "See below how medigan can be run from the command line to generate synthetic medical images. \n"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8561522968584689,
      "result": {
        "type": "Text_excerpt",
        "value": "See below how medigan can be run from the command line to generate synthetic medical images. \n"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/RichardObi/medigan/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "computer-vision, dataset, deep-learning, endoscopy, gans, generation, generative-adversarial-network, generative-ai, generative-model, machine-learning, magnetic-resonance-imaging, medical, medical-image-analysis, medical-image-dataset, medical-imaging, python, radiology, synthesis, synthetic-data, toolbox"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021 Richard Osuala, Grzegorz Skorupko, Noussair Lazrak\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichardObi/medigan/main/docs/source/_static/medigan_logo.png"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "medigan"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "RichardObi"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 269030,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 840,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_papers": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/2201.02831"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/2209.14472"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://arxiv.org/abs/2407.12669"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "RichardObi",
          "type": "User"
        },
        "date_created": "2022-10-01T19:10:50Z",
        "date_published": "2022-10-01T19:38:49Z",
        "description": "medigan version 1.0.0 stable release.\r\n\r\n- all models and code tested on macos, windows and linux.\r\n- 21 generative models added\r\n- generate, search, rank, visualize, contribute functions added and or extended.\r\n\r\nFurther information can be found in the paper accompanying this release: https://arxiv.org/abs/2209.14472\r\n",
        "html_url": "https://github.com/RichardObi/medigan/releases/tag/v1.0.0",
        "name": "1.0.0 medigan stable release",
        "release_id": 78769064,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/RichardObi/medigan/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/RichardObi/medigan/releases/78769064",
        "value": "https://api.github.com/repos/RichardObi/medigan/releases/78769064",
        "zipball_url": "https://api.github.com/repos/RichardObi/medigan/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "faildeny",
          "type": "User"
        },
        "date_created": "2022-03-04T16:20:53Z",
        "date_published": "2022-03-24T07:03:22Z",
        "description": "Initial release of MEDIGAN\r\nPublished documentation at [medigan.readthedocs.io](https://medigan.readthedocs.io/en/latest/)",
        "html_url": "https://github.com/RichardObi/medigan/releases/tag/v0.1",
        "name": "v0.1",
        "release_id": 62651844,
        "tag": "v0.1",
        "tarball_url": "https://api.github.com/repos/RichardObi/medigan/tarball/v0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/RichardObi/medigan/releases/62651844",
        "value": "https://api.github.com/repos/RichardObi/medigan/releases/62651844",
        "zipball_url": "https://api.github.com/repos/RichardObi/medigan/zipball/v0.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-04 09:46:04",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 124
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Getting Started",
        "type": "Text_excerpt",
        "value": "Examples and notebooks are located at [examples](examples) folder\n\nDocumentation is available at [medigan.readthedocs.io](https://medigan.readthedocs.io/en/latest/)\n\n"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "DCGAN",
        "parent_header": [
          "Getting Started",
          "Generation example"
        ],
        "type": "Text_excerpt",
        "value": "Create mammography masses with labels (malignant or benign) using a [class-conditional DCGAN model](https://arxiv.org/abs/2407.12669).\n```python\n# import medigan and initialize Generators\nfrom medigan import Generators\ngenerators = Generators()\n\n# generate 8 samples with model 8 (00008_C-DCGAN_MMG_MASSES). \n# Also, auto-install required model dependencies.\ngenerators.generate(model_id=8, num_samples=8, install_dependencies=True)\n```\n![sample](docs/source/_static/samples/c-dcgan/model8_samples.png)\n\nThe synthetic images in the top row show malignant masses (breast cancer) while the images in the bottom row show benign masses. \nGiven such images with class information, [image classification models](https://arxiv.org/abs/2407.12669) can be (pre-)trained.\n\n"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "CYCLEGAN",
        "parent_header": [
          "Getting Started",
          "Generation example"
        ],
        "type": "Text_excerpt",
        "value": "Create mammograms translated from Low-to-High Breast Density using CYCLEGAN model\n```python\nfrom medigan import Generators\ngenerators = Generators()\n# model 3 is \"00003_CYCLEGAN_MMG_DENSITY_FULL\"\ngenerators.generate(model_id=3, num_samples=1)\n```\n![sample](docs/source/_static/samples/cyclegan/sample_image_5_low.png)\n&rarr;\n![sample](docs/source/_static/samples/cyclegan/sample_image_5_high.png)\n\n"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Search Example",
        "parent_header": [
          "Getting Started"
        ],
        "type": "Text_excerpt",
        "value": "Search for a [model](https://medigan.readthedocs.io/en/latest/models.html) inside medigan using keywords\n```python\n# import medigan and initialize Generators\nfrom medigan import Generators\ngenerators = Generators()\n\n# list all models\nprint(generators.list_models())\n\n# search for models that have specific keywords in their config\nkeywords = ['DCGAN', 'Mammography', 'BCDR']\nresults = generators.find_matching_models_by_values(keywords)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Get Model as Dataloader",
        "parent_header": [
          "Getting Started"
        ],
        "type": "Text_excerpt",
        "value": "We can directly receive a [torch.utils.data.DataLoader](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader) object for any of medigan's generative models.\n```python\nfrom medigan import Generators\ngenerators = Generators()\n# model 4 is \"00004_PIX2PIX_MMG_MASSES_W_MASKS\"\ndataloader = generators.get_as_torch_dataloader(model_id=4, num_samples=3)\n```\n\nVisualize the contents of the dataloader.\n```python\nfrom matplotlib import pyplot as plt\nimport numpy as np\n\nplt.figure()\n# subplot with 2 rows and len(dataloader) columns\nf, img_array = plt.subplots(2, len(dataloader)) \n\nfor batch_idx, data_dict in enumerate(dataloader):\n    sample = np.squeeze(data_dict.get(\"sample\"))\n    mask = np.squeeze(data_dict.get(\"mask\"))\n    img_array[0][batch_idx].imshow(sample, interpolation='nearest', cmap='gray')\n    img_array[1][batch_idx].imshow(mask, interpolation='nearest', cmap='gray')\nplt.show()\n```\n![sample](docs/source/_static/samples/gan_sample_00004_dataloader.png)\n"
      },
      "source": "https://raw.githubusercontent.com/RichardObi/medigan/main/README.md",
      "technique": "header_analysis"
    }
  ]
}