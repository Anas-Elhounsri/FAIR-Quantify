{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Index reference genome",
        "parent_header": [
          "SVDSS2: Structural Variant Discovery from Sample-specific Strings",
          "Detailed Usage Guide"
        ],
        "type": "Text_excerpt",
        "value": "Build the FMD index of the reference genome:\n\n```\nSVDSS index --reference GRCh38.fa --index GRCh38.fmd\n```\n\nThe `--index` option specifies the output file name.\n"
      },
      "source": "https://raw.githubusercontent.com/Parsoa/SVDSS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "SVDSS2: Structural Variant Discovery from Sample-specific Strings",
          "Detailed Usage Guide"
        ],
        "type": "Text_excerpt",
        "value": "SVDSS is published in [Nature Methods](https://doi.org/10.1038/s41592-022-01674-1).\n"
      },
      "source": "https://raw.githubusercontent.com/Parsoa/SVDSS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Experiments",
        "parent_header": [
          "SVDSS2: Structural Variant Discovery from Sample-specific Strings",
          "Detailed Usage Guide",
          "Citation"
        ],
        "type": "Text_excerpt",
        "value": "Instructions on how to reproduce the experiments described in the manuscript can be found [here](https://github.com/ldenti/SVDSS-experiments) (also provided as submodule of this repository).\n"
      },
      "source": "https://raw.githubusercontent.com/Parsoa/SVDSS/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Parsoa/SVDSS"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-03-10T17:55:53Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-30T14:52:48Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Improved structural variant discovery in accurate long reads using sample-specific strings (SFS)"
      },
      "technique": "GitHub_API"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Parsoa/SVDSS/tree/master/docs"
      },
      "technique": "file_exploration"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Download and Installation",
        "parent_header": [
          "SVDSS2: Structural Variant Discovery from Sample-specific Strings"
        ],
        "type": "Text_excerpt",
        "value": "You can \"install\" SVDSS in two different ways:\n* [compiling it](#compilation-from-source) (**use this method if you want SVDSS to be fully optimized**)\n* [downloading a static binary](#static-binary)\n* [installing from conda](#install-from-conda)\n"
      },
      "source": "https://raw.githubusercontent.com/Parsoa/SVDSS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Compilation from Source",
        "parent_header": [
          "SVDSS2: Structural Variant Discovery from Sample-specific Strings",
          "Download and Installation"
        ],
        "type": "Text_excerpt",
        "value": "To compile and use SVDSS, you need:\n* a C++14-compliant compiler (GCC 8.2 or newer)\n* make, automake, autoconf\n* cmake (>=3.14)\n* git\n* some other development libraries: zlib, bz2, lzma\n* samtools and bcftools (>=1.9)\n\nTo install these dependencies:\n```bash\n# On a deb-based system (tested on ubuntu 20.04 and debian 11):\nsudo apt install build-essential autoconf cmake git zlib1g-dev libbz2-dev liblzma-dev samtools bcftools\n# On a rpm-based system (tested on fedora 35):\nsudo dnf install gcc gcc-c++ make automake autoconf cmake git libstdc++-static zlib-devel bzip2-devel xz-devel samtools bcftools\n```\n\nThe following libraries are needed to build and run SVDSS but they are automatically downloaded and compiled while compiling SVDSS:\n* [htslib](https://github.com/samtools/htslib) built with [libdeflate](https://github.com/ebiggers/libdeflate) for BAM processing.\n* [ksw2](https://github.com/lh3/ksw2) for FASTA and FASTQ processing.\n* [ropebwt2](https://github.com/lh3/ropebwt2) for FMD index creation and querying.\n* [abPOA](https://github.com/yangao07/abPOA) for POA computation.\n* [parasail](https://github.com/jeffdaily/parasail) for local alignment of POA consensus.\n* [rapidfuzz](https://github.com/maxbachmann/rapidfuzz-cpp) for string similarity computation.\n* [interval-tree](https://github.com/5cript/interval-tree) for variant overlap detection and clustering.\n* [spdlog](https://github.com/gabime/spdlog) for logging.\n\nTo download and install SVDSS (should take ~10 minutes):\n```bash\ngit clone https://github.com/Parsoa/SVDSS.git\ncd SVDSS \nmkdir build ; cd build\ncmake -DCMAKE_BUILD_TYPE=Release ..\nmake\n```\nThis will create the `SVDSS` binary in the root of the repo.\n"
      },
      "source": "https://raw.githubusercontent.com/Parsoa/SVDSS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Static Binary",
        "parent_header": [
          "SVDSS2: Structural Variant Discovery from Sample-specific Strings",
          "Download and Installation"
        ],
        "type": "Text_excerpt",
        "value": "For user convenience, we also provide a static binary for x86_64 linux systems (see [Releases](https://github.com/Parsoa/SVDSS/releases/latest)) - use at your own risk. If it does not work, please let us know or build it yourself :)\n"
      },
      "source": "https://raw.githubusercontent.com/Parsoa/SVDSS/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Parsoa/SVDSS/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Parsoa/SVDSS/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Parsoa/SVDSS"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SVDSS2: Structural Variant Discovery from Sample-specific Strings"
      },
      "source": "https://raw.githubusercontent.com/Parsoa/SVDSS/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Parsoa/SVDSS/master/holy/holy-compile.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Parsoa/SVDSS/master/patches/patch_ropebwt.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Note: for SVDSS (v1, conda version), please refer to <a href=\"https://github.com/Parsoa/SVDSS/releases/tag/v1.0.5-fix\">v1.0.5-fix</a> and <a href=\"https://github.com/Parsoa/SVDSS/tree/6fa89f0a4f8ec03ab87c3eb8a3288a6b82214767\">6fa89f0</a>. This is the v2 README. <a href=\"https://github.com/Parsoa/SVDSS/releases/tag/v2.0.0-alpha.2\">SVDSS2</a> should be ready for release, so feel free to use the new version. We just want to test it a bit more before officially releasing it.",
        "parent_header": [
          "SVDSS2: Structural Variant Discovery from Sample-specific Strings"
        ],
        "type": "Text_excerpt",
        "value": "SVDSS is a novel method for discovery of structural variants in accurate long reads (e.g PacBio HiFi) using sample-specific strings (SFS).\n\nSFS are the shortest substrings that are unique to one genome, called target, w.r.t another genome, called reference. Here our method utilizes SFS for coarse-grained identification (anchoring) of potential SV sites and performs local partial-order-assembly (POA) of clusters of SFS from such sites to produce accurate SV predictions. We refer to [our manuscript on SFS](https://doi.org/10.1093/bioadv/vbab005) for more details regarding the concept of SFS.\n"
      },
      "source": "https://raw.githubusercontent.com/Parsoa/SVDSS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Download and Installation",
        "parent_header": [
          "SVDSS2: Structural Variant Discovery from Sample-specific Strings"
        ],
        "type": "Text_excerpt",
        "value": "You can \"install\" SVDSS in two different ways:\n* [compiling it](#compilation-from-source) (**use this method if you want SVDSS to be fully optimized**)\n* [downloading a static binary](#static-binary)\n* [installing from conda](#install-from-conda)\n"
      },
      "source": "https://raw.githubusercontent.com/Parsoa/SVDSS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Compilation from Source",
        "parent_header": [
          "SVDSS2: Structural Variant Discovery from Sample-specific Strings",
          "Download and Installation"
        ],
        "type": "Text_excerpt",
        "value": "To compile and use SVDSS, you need:\n* a C++14-compliant compiler (GCC 8.2 or newer)\n* make, automake, autoconf\n* cmake (>=3.14)\n* git\n* some other development libraries: zlib, bz2, lzma\n* samtools and bcftools (>=1.9)\n\nTo install these dependencies:\n```bash\n# On a deb-based system (tested on ubuntu 20.04 and debian 11):\nsudo apt install build-essential autoconf cmake git zlib1g-dev libbz2-dev liblzma-dev samtools bcftools\n# On a rpm-based system (tested on fedora 35):\nsudo dnf install gcc gcc-c++ make automake autoconf cmake git libstdc++-static zlib-devel bzip2-devel xz-devel samtools bcftools\n```\n\nThe following libraries are needed to build and run SVDSS but they are automatically downloaded and compiled while compiling SVDSS:\n* [htslib](https://github.com/samtools/htslib) built with [libdeflate](https://github.com/ebiggers/libdeflate) for BAM processing.\n* [ksw2](https://github.com/lh3/ksw2) for FASTA and FASTQ processing.\n* [ropebwt2](https://github.com/lh3/ropebwt2) for FMD index creation and querying.\n* [abPOA](https://github.com/yangao07/abPOA) for POA computation.\n* [parasail](https://github.com/jeffdaily/parasail) for local alignment of POA consensus.\n* [rapidfuzz](https://github.com/maxbachmann/rapidfuzz-cpp) for string similarity computation.\n* [interval-tree](https://github.com/5cript/interval-tree) for variant overlap detection and clustering.\n* [spdlog](https://github.com/gabime/spdlog) for logging.\n\nTo download and install SVDSS (should take ~10 minutes):\n```bash\ngit clone https://github.com/Parsoa/SVDSS.git\ncd SVDSS \nmkdir build ; cd build\ncmake -DCMAKE_BUILD_TYPE=Release ..\nmake\n```\nThis will create the `SVDSS` binary in the root of the repo.\n"
      },
      "source": "https://raw.githubusercontent.com/Parsoa/SVDSS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Static Binary",
        "parent_header": [
          "SVDSS2: Structural Variant Discovery from Sample-specific Strings",
          "Download and Installation"
        ],
        "type": "Text_excerpt",
        "value": "For user convenience, we also provide a static binary for x86_64 linux systems (see [Releases](https://github.com/Parsoa/SVDSS/releases/latest)) - use at your own risk. If it does not work, please let us know or build it yourself :)\n"
      },
      "source": "https://raw.githubusercontent.com/Parsoa/SVDSS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Install from Conda",
        "parent_header": [
          "SVDSS2: Structural Variant Discovery from Sample-specific Strings",
          "Download and Installation"
        ],
        "type": "Text_excerpt",
        "value": "SVDSS is available on bioconda:\n```bash\nconda create -n svdss -c conda-forge -c bioconda svdss\n```\nThis will create the environment `svdss` that includes `SVDSS` and its runtime dependencies (i.e., `samtools` and `bcftools`).\n"
      },
      "source": "https://raw.githubusercontent.com/Parsoa/SVDSS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage Guide for the Impatient",
        "parent_header": [
          "SVDSS2: Structural Variant Discovery from Sample-specific Strings"
        ],
        "type": "Text_excerpt",
        "value": "Please refer to or use [Snakefile](Snakefile)/[run-svdss.sh](tests/run-svdss.sh).\n\n```\nIndex reference:\n    SVDSS index --reference /path/to/genome/file --index /path/to/output/index/file\n\nSmooth sample:\n    SVDSS smooth --reference /path/to/reference/genome/fasta --bam /path/to/input/bam/file > smoothed.bam\n\nExtract SFS from BAM (--bam) or FASTQ/FASTA (--fastx) files:\n    SVDSS search --index /path/to/index --bam smoothed.bam > specifics.txt\n\nCall SVs:\n    SVDSS call --reference /path/to/reference/genome/fasta --bam smoothed.bam --sfs specifics.txt > calls.vcf\n\nGeneral options:\n    --threads                       sets number of threads (default: 4)\n    --version                       print version information\n    --help                          print help message\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Parsoa/SVDSS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Detailed Usage Guide",
        "parent_header": [
          "SVDSS2: Structural Variant Discovery from Sample-specific Strings"
        ],
        "type": "Text_excerpt",
        "value": "SVDSS requires as input the BAM file of the sample to be genotyped, a reference genome in FASTA format (please use an appropriate reference genome, i.e., if you are not interested in ALT contigs, filter them out or use a reference genome that does not include them). To genotype a sample we need to perform the following steps:\n\n1. Build FMD index of reference genome (`SVDSS index`)\n2. Smooth the input BAM file (`SVDSS smooth`)\n3. Extract SFS from smoothed BAM file (`SVDSS search`)\n4. Assemble SFS into superstrings (`SVDSS assemble`)\n5. Genotype SVs from the assembled superstrings (`SVDSS call`)\n\nIn the guide below we assume we are using the reference genome file `GRCh38.fa` and the input BAM file `sample.bam`. We assume both files are present in the working directory. All of SVDSS steps must be run in the same directory so we always pass `--workdir $PWD` for every command.\n\nNote that you can reuse the index from step 1 for any number of samples genotyped against the same reference genome.\n\nWe will now explain each step in more detail:\n"
      },
      "source": "https://raw.githubusercontent.com/Parsoa/SVDSS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Smoothing the target sample",
        "parent_header": [
          "SVDSS2: Structural Variant Discovery from Sample-specific Strings",
          "Detailed Usage Guide"
        ],
        "type": "Text_excerpt",
        "value": "Smoothing removes nearly all SNPs, small indels and sequencing errors from reads. This results in smaller number of SFS being extracted and increases the relevance of extracted SFS to SV discovery significantly. To smooth the sample run:\n\n```\nSVDSS smooth --reference GRCh38.fa --bam sample.bam --threads 16 > smoothed.bam\n```\n\nThis writes to stdout the smoothed bam. This file is sorted in the same order as the input file, however it needs to be indexed again with `samtools index`.\n"
      },
      "source": "https://raw.githubusercontent.com/Parsoa/SVDSS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Extract SFS from target sample",
        "parent_header": [
          "SVDSS2: Structural Variant Discovery from Sample-specific Strings",
          "Detailed Usage Guide"
        ],
        "type": "Text_excerpt",
        "value": "To extract SFS run:\n\n```\nSVDSS search --index GRCh38.fmd --bam smoothed.bam > specifics.txt\n```\n\nThis writes to stdout the list of specific strings. The output includes the coordinates of SFS relative to the reads they were extracted from.\n\n"
      },
      "source": "https://raw.githubusercontent.com/Parsoa/SVDSS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Call SVs",
        "parent_header": [
          "SVDSS2: Structural Variant Discovery from Sample-specific Strings",
          "Detailed Usage Guide"
        ],
        "type": "Text_excerpt",
        "value": "We are now ready to call SVs. Run (note that the input `.bam` must be the same used in the search step and must be indexed using `samtools`):\n\n```\nSVDSS call --reference GRCh38.fasta --bam smoothed.bam --sfs specifics.txt --threads 16 > calls.vcf\n```\n\nYou can filter the reported SVs by passing the `--min-sv-length` and `--min-cluster-weight` options. These options control the minimum length and minimum number of supporting superstrings for the reported SVs. Higher values for `--min-cluster-weight` will increase precision at the cost of reducing recall. For a diploid 30x coverage sample, `--min-cluster-weight 2` produced the best results in our experiments. For a haploid 30x sample, instead, `--min-cluster-weight 4` produced the best results.\n\nThis commands output the calls to stdout. Additionally, you can output the alignments of POA contigs against the reference genome (these POA consensus are used to call SVs) using the `--poa` option.\n"
      },
      "source": "https://raw.githubusercontent.com/Parsoa/SVDSS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Snakemake workflow",
        "parent_header": [
          "SVDSS2: Structural Variant Discovery from Sample-specific Strings",
          "Detailed Usage Guide"
        ],
        "type": "Text_excerpt",
        "value": "For user convenience, we distribute a Snakefile to run the entire pipeline, from reference + aligned reads to SVs:\n```\n# update config.yaml to suit your needs\n# run:\nsnakemake [-n] -j 4\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Parsoa/SVDSS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Authors",
        "parent_header": [
          "SVDSS2: Structural Variant Discovery from Sample-specific Strings",
          "Detailed Usage Guide"
        ],
        "type": "Text_excerpt",
        "value": "SVDSS is developed by Luca Denti, Parsoa Khorsand, and Thomas Krannich.\n\nFor inquiries on this software please open an [issue](https://github.com/Parsoa/SVDSS/issues).\n"
      },
      "source": "https://raw.githubusercontent.com/Parsoa/SVDSS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Experiments",
        "parent_header": [
          "SVDSS2: Structural Variant Discovery from Sample-specific Strings",
          "Detailed Usage Guide",
          "Citation"
        ],
        "type": "Text_excerpt",
        "value": "Instructions on how to reproduce the experiments described in the manuscript can be found [here](https://github.com/ldenti/SVDSS-experiments) (also provided as submodule of this repository).\n"
      },
      "source": "https://raw.githubusercontent.com/Parsoa/SVDSS/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Parsoa/SVDSS/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2022 Parsoa Khorsand, Luca Denti\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/Parsoa/SVDSS/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SVDSS"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "Parsoa"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 171718,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 9118,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 8249,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 2083,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 1509,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Parsoa/SVDSS/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ldenti",
          "type": "User"
        },
        "date_created": "2024-07-19T16:16:22Z",
        "date_published": "2024-07-22T09:01:21Z",
        "description": "Third alpha release for SVDSS2:\r\n* rename fasta/q CLI option to fastx\r\n* CLI option to filter based on mapping quality\r\n* CLI option to remove 0/0 calls\r\n* CLI option to ignore haplotag information ",
        "html_url": "https://github.com/Parsoa/SVDSS/releases/tag/v2.0.0-alpha.3",
        "name": "v2.0.0-alpha.3",
        "release_id": 166471848,
        "tag": "v2.0.0-alpha.3",
        "tarball_url": "https://api.github.com/repos/Parsoa/SVDSS/tarball/v2.0.0-alpha.3",
        "type": "Release",
        "url": "https://api.github.com/repos/Parsoa/SVDSS/releases/166471848",
        "value": "https://api.github.com/repos/Parsoa/SVDSS/releases/166471848",
        "zipball_url": "https://api.github.com/repos/Parsoa/SVDSS/zipball/v2.0.0-alpha.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ldenti",
          "type": "User"
        },
        "date_created": "2023-11-27T09:54:31Z",
        "date_published": "2023-11-27T10:00:26Z",
        "description": "Second alpha release for SVDSS2:\r\n* fixes a bug in pingpong (small batches were potentially skipped) ",
        "html_url": "https://github.com/Parsoa/SVDSS/releases/tag/v2.0.0-alpha.2",
        "name": "v2.0.0-alpha.2",
        "release_id": 131521983,
        "tag": "v2.0.0-alpha.2",
        "tarball_url": "https://api.github.com/repos/Parsoa/SVDSS/tarball/v2.0.0-alpha.2",
        "type": "Release",
        "url": "https://api.github.com/repos/Parsoa/SVDSS/releases/131521983",
        "value": "https://api.github.com/repos/Parsoa/SVDSS/releases/131521983",
        "zipball_url": "https://api.github.com/repos/Parsoa/SVDSS/zipball/v2.0.0-alpha.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ldenti",
          "type": "User"
        },
        "date_created": "2023-08-10T15:03:04Z",
        "date_published": "2023-08-10T15:28:12Z",
        "description": "First alpha release for SVDSS2",
        "html_url": "https://github.com/Parsoa/SVDSS/releases/tag/v2.0.0-alpha.1",
        "name": "v2.0.0-alpha.1",
        "release_id": 115949132,
        "tag": "v2.0.0-alpha.1",
        "tarball_url": "https://api.github.com/repos/Parsoa/SVDSS/tarball/v2.0.0-alpha.1",
        "type": "Release",
        "url": "https://api.github.com/repos/Parsoa/SVDSS/releases/115949132",
        "value": "https://api.github.com/repos/Parsoa/SVDSS/releases/115949132",
        "zipball_url": "https://api.github.com/repos/Parsoa/SVDSS/zipball/v2.0.0-alpha.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ldenti",
          "type": "User"
        },
        "date_created": "2023-08-02T10:34:03Z",
        "date_published": "2023-08-10T14:46:11Z",
        "description": "Bug fixing for v1.0.5:\r\n* Multiple extended SFSs when too close\r\n* Missing first base in insertion alleles\r\n* Segmentation fault in clipped mode (#24)\r\n\r\nThis is the last patch for SVDSS v1. We will move to SVDSS2",
        "html_url": "https://github.com/Parsoa/SVDSS/releases/tag/v1.0.5-fix",
        "name": "v1.0.5-fix",
        "release_id": 115942060,
        "tag": "v1.0.5-fix",
        "tarball_url": "https://api.github.com/repos/Parsoa/SVDSS/tarball/v1.0.5-fix",
        "type": "Release",
        "url": "https://api.github.com/repos/Parsoa/SVDSS/releases/115942060",
        "value": "https://api.github.com/repos/Parsoa/SVDSS/releases/115942060",
        "zipball_url": "https://api.github.com/repos/Parsoa/SVDSS/zipball/v1.0.5-fix"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ldenti",
          "type": "User"
        },
        "date_created": "2023-01-13T11:02:26Z",
        "date_published": "2023-01-13T10:43:04Z",
        "description": "Patch over v1.0.4:\r\n* bug fixing\r\n* various heuristic improvements\r\n\r\nPlease check PR https://github.com/Parsoa/SVDSS/pull/18 for more info.",
        "html_url": "https://github.com/Parsoa/SVDSS/releases/tag/v1.0.5",
        "name": "v1.0.5",
        "release_id": 88833920,
        "tag": "v1.0.5",
        "tarball_url": "https://api.github.com/repos/Parsoa/SVDSS/tarball/v1.0.5",
        "type": "Release",
        "url": "https://api.github.com/repos/Parsoa/SVDSS/releases/88833920",
        "value": "https://api.github.com/repos/Parsoa/SVDSS/releases/88833920",
        "zipball_url": "https://api.github.com/repos/Parsoa/SVDSS/zipball/v1.0.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ldenti",
          "type": "User"
        },
        "date_created": "2022-06-24T10:00:14Z",
        "date_published": "2022-06-24T10:12:12Z",
        "description": "Patch over v1.0.3:\r\n* updates abpoa to v1.4.1 to solve \"random\" segfaults - see #12\r\n* removes filtering of \"unwanted\" chromosomes (i.e. ALT contigs. User should take care of it) - see #10\r\n* fixes search over a fastq\r\n* improves cli",
        "html_url": "https://github.com/Parsoa/SVDSS/releases/tag/v1.0.4",
        "name": "v1.0.4",
        "release_id": 70473646,
        "tag": "v1.0.4",
        "tarball_url": "https://api.github.com/repos/Parsoa/SVDSS/tarball/v1.0.4",
        "type": "Release",
        "url": "https://api.github.com/repos/Parsoa/SVDSS/releases/70473646",
        "value": "https://api.github.com/repos/Parsoa/SVDSS/releases/70473646",
        "zipball_url": "https://api.github.com/repos/Parsoa/SVDSS/zipball/v1.0.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ldenti",
          "type": "User"
        },
        "date_created": "2022-05-17T13:45:37Z",
        "date_published": "2022-05-17T14:34:03Z",
        "description": "Patch over v1.0.2:\r\n* fixes portable compilation (removes `-march=native`)\r\n* fixes a bug in `assemble` mode\r\n* small help improvements\r\n",
        "html_url": "https://github.com/Parsoa/SVDSS/releases/tag/v1.0.3",
        "name": "v1.0.3",
        "release_id": 67085103,
        "tag": "v1.0.3",
        "tarball_url": "https://api.github.com/repos/Parsoa/SVDSS/tarball/v1.0.3",
        "type": "Release",
        "url": "https://api.github.com/repos/Parsoa/SVDSS/releases/67085103",
        "value": "https://api.github.com/repos/Parsoa/SVDSS/releases/67085103",
        "zipball_url": "https://api.github.com/repos/Parsoa/SVDSS/zipball/v1.0.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ldenti",
          "type": "User"
        },
        "date_created": "2022-05-16T18:20:43Z",
        "date_published": "2022-05-16T18:22:16Z",
        "description": "Patch over v1.0.1:\r\n* fixes compilation in conda environment",
        "html_url": "https://github.com/Parsoa/SVDSS/releases/tag/v1.0.2",
        "name": "v1.0.2",
        "release_id": 67001736,
        "tag": "v1.0.2",
        "tarball_url": "https://api.github.com/repos/Parsoa/SVDSS/tarball/v1.0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/Parsoa/SVDSS/releases/67001736",
        "value": "https://api.github.com/repos/Parsoa/SVDSS/releases/67001736",
        "zipball_url": "https://api.github.com/repos/Parsoa/SVDSS/zipball/v1.0.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ldenti",
          "type": "User"
        },
        "date_created": "2022-05-09T18:12:50Z",
        "date_published": "2022-05-09T18:16:47Z",
        "description": "Patch over v1.0.0:\r\n* adds compilation via cmake\r\n* adds holy-build compilation\r\n* provides binary",
        "html_url": "https://github.com/Parsoa/SVDSS/releases/tag/v1.0.1",
        "name": "v1.0.1",
        "release_id": 66402572,
        "tag": "v1.0.1",
        "tarball_url": "https://api.github.com/repos/Parsoa/SVDSS/tarball/v1.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/Parsoa/SVDSS/releases/66402572",
        "value": "https://api.github.com/repos/Parsoa/SVDSS/releases/66402572",
        "zipball_url": "https://api.github.com/repos/Parsoa/SVDSS/zipball/v1.0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ldenti",
          "type": "User"
        },
        "date_created": "2022-03-14T15:47:22Z",
        "date_published": "2022-04-14T11:16:53Z",
        "description": "SVDSS first official release :tada: ",
        "html_url": "https://github.com/Parsoa/SVDSS/releases/tag/v1.0.0",
        "name": "v1.0.0",
        "release_id": 64450454,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/Parsoa/SVDSS/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/Parsoa/SVDSS/releases/64450454",
        "value": "https://api.github.com/repos/Parsoa/SVDSS/releases/64450454",
        "zipball_url": "https://api.github.com/repos/Parsoa/SVDSS/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 11:16:02",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 42
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Note: for SVDSS (v1, conda version), please refer to <a href=\"https://github.com/Parsoa/SVDSS/releases/tag/v1.0.5-fix\">v1.0.5-fix</a> and <a href=\"https://github.com/Parsoa/SVDSS/tree/6fa89f0a4f8ec03ab87c3eb8a3288a6b82214767\">6fa89f0</a>. This is the v2 README. <a href=\"https://github.com/Parsoa/SVDSS/releases/tag/v2.0.0-alpha.2\">SVDSS2</a> should be ready for release, so feel free to use the new version. We just want to test it a bit more before officially releasing it.",
        "parent_header": [
          "SVDSS2: Structural Variant Discovery from Sample-specific Strings"
        ],
        "type": "Text_excerpt",
        "value": "SVDSS is a novel method for discovery of structural variants in accurate long reads (e.g PacBio HiFi) using sample-specific strings (SFS).\n\nSFS are the shortest substrings that are unique to one genome, called target, w.r.t another genome, called reference. Here our method utilizes SFS for coarse-grained identification (anchoring) of potential SV sites and performs local partial-order-assembly (POA) of clusters of SFS from such sites to produce accurate SV predictions. We refer to [our manuscript on SFS](https://doi.org/10.1093/bioadv/vbab005) for more details regarding the concept of SFS.\n"
      },
      "source": "https://raw.githubusercontent.com/Parsoa/SVDSS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage Guide for the Impatient",
        "parent_header": [
          "SVDSS2: Structural Variant Discovery from Sample-specific Strings"
        ],
        "type": "Text_excerpt",
        "value": "Please refer to or use [Snakefile](Snakefile)/[run-svdss.sh](tests/run-svdss.sh).\n\n```\nIndex reference:\n    SVDSS index --reference /path/to/genome/file --index /path/to/output/index/file\n\nSmooth sample:\n    SVDSS smooth --reference /path/to/reference/genome/fasta --bam /path/to/input/bam/file > smoothed.bam\n\nExtract SFS from BAM (--bam) or FASTQ/FASTA (--fastx) files:\n    SVDSS search --index /path/to/index --bam smoothed.bam > specifics.txt\n\nCall SVs:\n    SVDSS call --reference /path/to/reference/genome/fasta --bam smoothed.bam --sfs specifics.txt > calls.vcf\n\nGeneral options:\n    --threads                       sets number of threads (default: 4)\n    --version                       print version information\n    --help                          print help message\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Parsoa/SVDSS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Detailed Usage Guide",
        "parent_header": [
          "SVDSS2: Structural Variant Discovery from Sample-specific Strings"
        ],
        "type": "Text_excerpt",
        "value": "SVDSS requires as input the BAM file of the sample to be genotyped, a reference genome in FASTA format (please use an appropriate reference genome, i.e., if you are not interested in ALT contigs, filter them out or use a reference genome that does not include them). To genotype a sample we need to perform the following steps:\n\n1. Build FMD index of reference genome (`SVDSS index`)\n2. Smooth the input BAM file (`SVDSS smooth`)\n3. Extract SFS from smoothed BAM file (`SVDSS search`)\n4. Assemble SFS into superstrings (`SVDSS assemble`)\n5. Genotype SVs from the assembled superstrings (`SVDSS call`)\n\nIn the guide below we assume we are using the reference genome file `GRCh38.fa` and the input BAM file `sample.bam`. We assume both files are present in the working directory. All of SVDSS steps must be run in the same directory so we always pass `--workdir $PWD` for every command.\n\nNote that you can reuse the index from step 1 for any number of samples genotyped against the same reference genome.\n\nWe will now explain each step in more detail:\n"
      },
      "source": "https://raw.githubusercontent.com/Parsoa/SVDSS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Smoothing the target sample",
        "parent_header": [
          "SVDSS2: Structural Variant Discovery from Sample-specific Strings",
          "Detailed Usage Guide"
        ],
        "type": "Text_excerpt",
        "value": "Smoothing removes nearly all SNPs, small indels and sequencing errors from reads. This results in smaller number of SFS being extracted and increases the relevance of extracted SFS to SV discovery significantly. To smooth the sample run:\n\n```\nSVDSS smooth --reference GRCh38.fa --bam sample.bam --threads 16 > smoothed.bam\n```\n\nThis writes to stdout the smoothed bam. This file is sorted in the same order as the input file, however it needs to be indexed again with `samtools index`.\n"
      },
      "source": "https://raw.githubusercontent.com/Parsoa/SVDSS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Extract SFS from target sample",
        "parent_header": [
          "SVDSS2: Structural Variant Discovery from Sample-specific Strings",
          "Detailed Usage Guide"
        ],
        "type": "Text_excerpt",
        "value": "To extract SFS run:\n\n```\nSVDSS search --index GRCh38.fmd --bam smoothed.bam > specifics.txt\n```\n\nThis writes to stdout the list of specific strings. The output includes the coordinates of SFS relative to the reads they were extracted from.\n\n"
      },
      "source": "https://raw.githubusercontent.com/Parsoa/SVDSS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Call SVs",
        "parent_header": [
          "SVDSS2: Structural Variant Discovery from Sample-specific Strings",
          "Detailed Usage Guide"
        ],
        "type": "Text_excerpt",
        "value": "We are now ready to call SVs. Run (note that the input `.bam` must be the same used in the search step and must be indexed using `samtools`):\n\n```\nSVDSS call --reference GRCh38.fasta --bam smoothed.bam --sfs specifics.txt --threads 16 > calls.vcf\n```\n\nYou can filter the reported SVs by passing the `--min-sv-length` and `--min-cluster-weight` options. These options control the minimum length and minimum number of supporting superstrings for the reported SVs. Higher values for `--min-cluster-weight` will increase precision at the cost of reducing recall. For a diploid 30x coverage sample, `--min-cluster-weight 2` produced the best results in our experiments. For a haploid 30x sample, instead, `--min-cluster-weight 4` produced the best results.\n\nThis commands output the calls to stdout. Additionally, you can output the alignments of POA contigs against the reference genome (these POA consensus are used to call SVs) using the `--poa` option.\n"
      },
      "source": "https://raw.githubusercontent.com/Parsoa/SVDSS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Snakemake workflow",
        "parent_header": [
          "SVDSS2: Structural Variant Discovery from Sample-specific Strings",
          "Detailed Usage Guide"
        ],
        "type": "Text_excerpt",
        "value": "For user convenience, we distribute a Snakefile to run the entire pipeline, from reference + aligned reads to SVs:\n```\n# update config.yaml to suit your needs\n# run:\nsnakemake [-n] -j 4\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Parsoa/SVDSS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example",
        "parent_header": [
          "SVDSS2: Structural Variant Discovery from Sample-specific Strings",
          "Detailed Usage Guide",
          "Snakemake workflow"
        ],
        "type": "Text_excerpt",
        "value": "**Note:** to run this example, `samtools` and `bcftools` **must be in your path**. Running `SVDSS` on the example data, once downloaded, should take less than 5 minutes.\n\n```bash\n# Download example data from zenodo\nwget https://zenodo.org/record/6563662/files/svdss-data.tar.gz\nmkdir -p input\ntar xvfz svdss-data.tar.gz -C input\n# Download SVDSS binary\nwget https://github.com/Parsoa/SVDSS/releases/download/v2.0.0-alpha.1/SVDSS_linux_x86-64\nchmod +x SVDSS_linux_x86-64\n\n# Download snakemake workflow and run it\nwget https://raw.githubusercontent.com/Parsoa/SVDSS/master/config.yaml\nwget https://raw.githubusercontent.com/Parsoa/SVDSS/master/Snakefile\nsnakemake -p -j 2\n\n# Alternatively, you can use the bash helper script\nwget https://raw.githubusercontent.com/Parsoa/SVDSS/master/tests/run-svdss.sh\nbash run-svdss.sh ./SVDSS_linux_x86-64 input/22.fa input/22.bam svdss-output\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Parsoa/SVDSS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Authors",
        "parent_header": [
          "SVDSS2: Structural Variant Discovery from Sample-specific Strings",
          "Detailed Usage Guide"
        ],
        "type": "Text_excerpt",
        "value": "SVDSS is developed by Luca Denti, Parsoa Khorsand, and Thomas Krannich.\n\nFor inquiries on this software please open an [issue](https://github.com/Parsoa/SVDSS/issues).\n"
      },
      "source": "https://raw.githubusercontent.com/Parsoa/SVDSS/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Experiments",
        "parent_header": [
          "SVDSS2: Structural Variant Discovery from Sample-specific Strings",
          "Detailed Usage Guide",
          "Citation"
        ],
        "type": "Text_excerpt",
        "value": "Instructions on how to reproduce the experiments described in the manuscript can be found [here](https://github.com/ldenti/SVDSS-experiments) (also provided as submodule of this repository).\n"
      },
      "source": "https://raw.githubusercontent.com/Parsoa/SVDSS/master/README.md",
      "technique": "header_analysis"
    }
  ]
}