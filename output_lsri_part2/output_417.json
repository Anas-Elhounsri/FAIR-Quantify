{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/wangyh082/scBGEDA"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact",
        "type": "Text_excerpt",
        "value": "If you have any suggestions or questions, please email me at wangyh082@hebut.edu.cn.\n\n"
      },
      "source": "https://raw.githubusercontent.com/wangyh082/scBGEDA/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-04-19T08:15:56Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-17T08:21:31Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9995815883072894,
      "result": {
        "original_header": "Overview",
        "type": "Text_excerpt",
        "value": "Single-cell RNA sequencing (scRNA-seq) is an increasingly popular technique for transcriptomic analysis of gene expression at the single-cell level. Cell-type clustering is the first crucial task in the analysis of scRNA-seq data to facilitate accurate identification of cell types and to study the characteristics of their transcripts. Recently, several computational models based on a deep autoencoder and the ensemble clustering have been developed to analyze scRNA-seq data. However, current deep autoencoders are not sufficient to learn the latent representations of scRNA-seq data, and obtaining consensus partitions from these feature representations remains under-explored. To address this challenge, we propose a single-cell deep clustering model via a dual denoising autoencoder with bipartite graph ensemble clustering called scBGEDA, to identify specific cell populations in single-cell transcriptome profiles. First, a single-cell dual denoising  autoencoder network is proposed to project the data into a compressed low-dimensional space and that can learn feature representation via explicit modeling of synergistic optimization of ZINB reconstruction loss and denoising reconstruction loss. Then, a bipartite graph ensemble clustering algorithm is designed to exploit the relationships between cells and the learned latent embedded space by means of a graph-based consensus function. Multiple comparison experiments were conducted on fifteen scRNA-seq datasets from different sequencing platforms using a variety of clustering metrics. The experimental results indicated that scBGEDA outperforms other state-of-the-art methods on these datasets, and also demonstrated scalability to large scale scRNA-seq datasets. Moreover, scBGEDA was able to identify cell-type specific marker genes and provide functional genomic analysis by quantifying the influence of genes on cell clusters, bringing new insights to identify cell types and characterize the scRNA-seq data from different perspectives.\n \n"
      },
      "source": "https://raw.githubusercontent.com/wangyh082/scBGEDA/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8867864910689363,
      "result": {
        "original_header": "Architecture",
        "type": "Text_excerpt",
        "value": "The overall workflow of the scBGEDA pipeline, comprising three components: the data preprocessing mechanism, the single-cell dual denoising autoencoder network, and the bipartite graph ensemble clustering method.\n \n"
      },
      "source": "https://raw.githubusercontent.com/wangyh082/scBGEDA/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8818822849190819,
      "result": {
        "original_header": "Key Functions",
        "type": "Text_excerpt",
        "value": " \nThe key functions of the source code and their detailed description. \n| Function     | Description                                   |\n| ------------ | --------------------------------------------- |\n| preprocess.py| Function of the first module of scBGEDA       |\n| SDDA.py      | Function of the second module of scBGEDA      |\n| network.py   | Single-cell Dual Denoising Autoencoder Network|\n| loss.py      | the loss functions of the network             |\n| utils.py     | the utility functions of the network          |\n| BC.m         | Main function of the third module of scBGEDA  |\n| BGEC.m       | Bipartite Graph Ensemble Clustering           |\n| rand_index.m | Computing ARI values after clustering         |\n| computeNMI.m | Computing NMI values after clustering         | \n \n"
      },
      "source": "https://raw.githubusercontent.com/wangyh082/scBGEDA/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9734442807391113,
      "result": {
        "original_header": "Results",
        "type": "Text_excerpt",
        "value": "Multiple comparison experiments were conducted on fifteen scRNA-seq datasets from different sequencing\nplatforms using a variety of clustering metrics. The experimental results indicated that scBGEDA\noutperforms other state-of-the-art methods on these datasets, and also demonstrated scalability to large\nscale scRNA-seq datasets. \n \n"
      },
      "source": "https://raw.githubusercontent.com/wangyh082/scBGEDA/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/wangyh082/scBGEDA/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/wangyh082/scBGEDA/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "wangyh082/scBGEDA"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "scBGEDA: Deep Single-cell Clustering Analysis via Dual Denoising Autoencoder with Bipartite Graph Ensemble Clustering"
      },
      "source": "https://raw.githubusercontent.com/wangyh082/scBGEDA/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wangyh082/scBGEDA/main/frame.jpg"
      },
      "source": "https://raw.githubusercontent.com/wangyh082/scBGEDA/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "1. Requirements:\n\n```\n[python 3.6+]\n[tensorflow 2.6.0]\n[keras 2.6.0]\n[numpy 1.19.5]\n[jgraph 0.2.1]\n[scipy 1.5.4]\n[scanpy 1.7.2]\n[pathos 0.2.8]\n[tqdm 4.64.0]\n[python-dateutil 2.8.2]\n```\n\n2. Installation:\n\nTo meet the requirements, we recommend user to use [conda](https://docs.conda.io/projects/conda/en/latest/index.html) environment:\n```\n# Download scBGEDA from GitHub and create an environment:\n\ngit clone https://github.com/wangyh082/scBGEDA.git\nconda create -n scBGEDA python=3.6\n```\n\n```\n# To activate environment:\n\nconda activate scBGEDA\n```\n\n```\n# To install all required packages:\n\npip install -r requirements.txt\n```\n\n```\n# To exit environment:\n\nconda deactivate\n```\n"
      },
      "source": "https://raw.githubusercontent.com/wangyh082/scBGEDA/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/wangyh082/scBGEDA/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "scBGEDA"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "wangyh082"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 57347,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "MATLAB",
        "size": 9174,
        "type": "Programming_language",
        "value": "MATLAB"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wangyh082/scBGEDA/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 10:37:34",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Command Lines",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "```  \nSDDA.py [-h] [--dataname DATANAME] [--highly_genes HIGHLY_GENES]\n               [--random_seed RANDOM_SEED] [--dims DIMS] [--alpha ALPHA]\n               [--learning_rate LEARNING_RATE] [--batch_size BATCH_SIZE]\n               [--pretrain_epoch PRETRAIN_EPOCH] [--noise_sd NOISE_SD]\n               [--gpu_option GPU_OPTION]\n\noptional arguments:\n  -h, --help Show this help message and exit\n  --dataname DATANAME The input dataname\n  --highly_genes HIGHLY_GENES The number of highly variable genes\n  --random_seed RANDOM_SEED The random seeds which are used to select the cells randomly to ensure the fairness\n  --dims DIMS The dimensions of the hidden layers\n  --alpha ALPHA The hyperparameter to control the relative impact of two decoders\n  --learning_rate LEARNING_RATE\n  --batch_size BATCH_SIZE\n  --pretrain_epoch PRETRAIN_EPOCH \n  --noise_sd NOISE_SD\n  --gpu_option GPU_OPTION\n```  \n"
      },
      "source": "https://raw.githubusercontent.com/wangyh082/scBGEDA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Examples:",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "  \nThe parameters including \"dataname\", \"highly_genes\", \"random_seed\", \"dims\", \"alpha\", \"learning_rate\", \"batch_size\", \"pretrain_epoch\", \"noise_sd\", \"gpu_option\" can be set as you like in your command lines.\n\nWe set default settings for each parameter, and if the parameter is not set to the given value, then it will use the default settings. \n\nTake the dataset \"Adam\"  as an example.\n\n```\n# Do not use the default values of those parameters:\n\npython SDDA.py --dataname Adam --highly_genes 2000 --random_seed \"1111, 2222, 3333, 4444, 5555, 6666, 7777, 8888, 9999, 10000\" --dims \"256, 32\" --alpha 0.001 --learning_rate 0.0001 --batch_size 256 --pretrain_epoch 1000 --noise_sd 1.5 --gpu_option \"2\"\n```\n\n```\n# Using the default values\uff1a\n\npython SDDA.py --dataname Adam\n```\n\nAfter that, to generate a more efficient clustering result, use the following code:\n\nThe parameters including \"dataName\" (the specific dataset), \"m\" (the ensemble size), \"bcsLowK\" (the minimum number of the clusters in generating the basic clustreings), \"bcsUpK\" (the maximum of the clusters in generating the basic clusterings) can be set as you like in your command lines. The \"random_seed\" is the same as the random seed in the SDDA.py.\n\n```\n% Do not use the default values of those parameters:\n\nmatlab -r \"BC 'Adam' 100 2 40 [1111, 2222, 3333, 4444, 5555, 6666, 7777, 8888, 9999, 10000]\"\n```\n```\n% Using the default values\uff1a\n\nmatlab -r \"BC 'Adam'\"\n```\n\nOutput explanation:\nThe final output reports the clustering performance and the median values of ARI and NMI is provided, respectively.\n"
      },
      "source": "https://raw.githubusercontent.com/wangyh082/scBGEDA/main/README.md",
      "technique": "header_analysis"
    }
  ]
}