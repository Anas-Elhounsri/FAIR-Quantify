{
  "acknowledgement": [
    {
      "confidence": 1,
      "result": {
        "original_header": "References and Acknowledgements",
        "type": "Text_excerpt",
        "value": "Without these (and other) critical libraries, `echtvar` would not exist.\n\n+ [htslib](https://github.com/samtools/htslib) is used for reading and writing BCF and VCF via [rust-htslib](https://github.com/rust-bio/rust-htslib)\n+ [stream-vbyte](https://lemire.me/blog/2017/09/27/stream-vbyte-breaking-new-speed-records-for-integer-compression/) is used for integer compression via the [excellent rust bindings](https://bitbucket.org/marshallpierce/stream-vbyte-rust/src/master/)\n+ [fasteval](https://github.com/likebike/fasteval) is used for the expressions. It is fast and simple and awesome.\n+ [bincode](https://docs.rs/bincode/latest/bincode/) is used for rapid serialization of large variants.\n\n\n`echtvar` is developed in the [Jeroen De Ridder lab](https://www.deridderlab.nl/)\n"
      },
      "source": "https://raw.githubusercontent.com/brentp/echtvar/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "References and Acknowledgements",
        "type": "Text_excerpt",
        "value": "Without these (and other) critical libraries, `echtvar` would not exist.\n\n+ [htslib](https://github.com/samtools/htslib) is used for reading and writing BCF and VCF via [rust-htslib](https://github.com/rust-bio/rust-htslib)\n+ [stream-vbyte](https://lemire.me/blog/2017/09/27/stream-vbyte-breaking-new-speed-records-for-integer-compression/) is used for integer compression via the [excellent rust bindings](https://bitbucket.org/marshallpierce/stream-vbyte-rust/src/master/)\n+ [fasteval](https://github.com/likebike/fasteval) is used for the expressions. It is fast and simple and awesome.\n+ [bincode](https://docs.rs/bincode/latest/bincode/) is used for rapid serialization of large variants.\n\n\n`echtvar` is developed in the [Jeroen De Ridder lab](https://www.deridderlab.nl/)\n"
      },
      "source": "https://raw.githubusercontent.com/brentp/echtvar/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/brentp/echtvar"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-11-22T12:37:52Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-26T07:44:47Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "using all the bits for echt rapid variant annotation and filtering"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9800439625857454,
      "result": {
        "original_header": "Echtvar: Really, truly rapid variant annotation and filtering",
        "type": "Text_excerpt",
        "value": "Echtvar efficiently encodes variant allele frequency and other information from huge population datasets to enable rapid (1M variants/second) annotation of genetic variants.\nIt chunks the genome into 1<<20 (~1 million) bases,\n[encodes each variant into a 32 bit integer](https://github.com/brentp/echtvar/blob/02774b8d1cd3703b65bd2c8d7aab93af05b7940f/src/lib/var32.rs#L9-L21) (with a [supplemental table](https://github.com/brentp/echtvar/blob/02774b8d1cd3703b65bd2c8d7aab93af05b7940f/src/lib/var32.rs#L33-L38)\nfor those that can't fit due to large REF and/or ALT alleles). It uses the zip format, [delta\nencoding](https://en.wikipedia.org/wiki/Delta_encoding)\nand [integer compression\n](https://lemire.me/blog/2017/09/27/stream-vbyte-breaking-new-speed-records-for-integer-compression/)\nto create a compact and searchable format of any integer, float, or low-cardinality string columns\nselected from the population file. \n"
      },
      "source": "https://raw.githubusercontent.com/brentp/echtvar/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/brentp/echtvar/wiki"
      },
      "source": "https://raw.githubusercontent.com/brentp/echtvar/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/brentp/echtvar/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 10
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/brentp/echtvar/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "brentp/echtvar"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/brentp/echtvar/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/brentp/echtvar/main/paper/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/brentp/echtvar/main/paper/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/brentp/echtvar/main/paper/small-set.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/brentp/echtvar/main/paper/echtvar-paper.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/brentp/echtvar/main/paper/icgc.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/brentp/echtvar/main/examples/cadd/run.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/brentp/echtvar/main/examples/CSQ-fields/run.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/brentp/echtvar/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "genetic-variants, genomics, variant-analysis, variant-annotations"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021 Brent Pedersen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/brentp/echtvar/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "echtvar"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "brentp"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Rust",
        "size": 57268,
        "type": "Programming_language",
        "value": "Rust"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 19253,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 8979,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 1949,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/brentp/echtvar/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "brentp",
          "type": "User"
        },
        "date_created": "2024-02-13T11:13:19Z",
        "date_published": "2024-02-13T11:16:58Z",
        "description": "v0.2.0\r\n======\r\n+ skip non ACGT alts (@migbro #39)\r\n+ grab description from input vcf and propagate to annotated VCFs (@dmiller15, @migbro #34, #35)\r\n\r\n## Get Started\r\n\r\nTo get started, download the static linux binary [here](https://github.com/brentp/echtvar/releases/download/v0.2.0/echtvar), then chmod +x and execute:\r\n\r\n```\r\nwget -O ~/bin/echtvar https://github.com/brentp/echtvar/releases/download/v0.2.0/echtvar \\\r\n    && chmod +x ~/bin/echtvar \\\r\n    && ~/bin/echtvar -h \r\n```\r\nExperienced rust users can build with [cargo](https://doc.rust-lang.org/cargo/)\r\nPlease let me know any (non SIGILL) issues with the binary. This is my first time distributing rust binaries.\r\n\r\n## Annotation files\r\n\r\nyou can create your own annotation files using `echtvar encode`. We provide a pre-made file for hg38 whole genomes from gnomad v3.1.2. It can be retrieved with:\r\n```\r\ncurl -L -o gnomad.v3.1.2.echtvar.v2.zip https://surfdrive.surf.nl/files/index.php/s/nJPDxM3b9C7hkM2/download\r\n```\r\nThe 7.1GB gnomad.v3.1.2.echtvar.v2.zip file is created using [this example json](https://github.com/brentp/echtvar/blob/main/examples/gnomad.v3.1.2.json)\r\n\r\na smaller (2.5GB) file with only popmax AF is available with:\r\n```\r\ncurl -L -o gnomad.v3.1.2.echtvar.popmax.v2.zip  https://surfdrive.surf.nl/files/index.php/s/LddbAYQAYPqtYu6/download\r\n```",
        "html_url": "https://github.com/brentp/echtvar/releases/tag/v0.2.0",
        "name": "v0.2.0",
        "release_id": 141783538,
        "tag": "v0.2.0",
        "tarball_url": "https://api.github.com/repos/brentp/echtvar/tarball/v0.2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/brentp/echtvar/releases/141783538",
        "value": "https://api.github.com/repos/brentp/echtvar/releases/141783538",
        "zipball_url": "https://api.github.com/repos/brentp/echtvar/zipball/v0.2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "brentp",
          "type": "User"
        },
        "date_created": "2023-09-26T06:54:25Z",
        "date_published": "2023-09-26T07:03:13Z",
        "description": "v0.1.9\r\n======\r\n+ report missing float as . (thanks @dmiller15 #32)\r\n\r\n\r\n## Get Started\r\n\r\nTo get started, download the static linux binary [here](https://github.com/brentp/echtvar/releases/download/v0.1.9/echtvar), then chmod +x and execute:\r\n\r\n```\r\nwget -O ~/bin/echtvar https://github.com/brentp/echtvar/releases/download/v0.1.9/echtvar \\\r\n    && chmod +x ~/bin/echtvar \\\r\n    && ~/bin/echtvar -h \r\n```\r\nExperienced rust users can build with [cargo](https://doc.rust-lang.org/cargo/)\r\nPlease let me know any (non SIGILL) issues with the binary. This is my first time distributing rust binaries.\r\n\r\n## Annotation files\r\n\r\nyou can create your own annotation files using `echtvar encode`. We provide a pre-made file for hg38 whole genomes from gnomad v3.1.2. It can be retrieved with:\r\n```\r\ncurl -L -o gnomad.v3.1.2.echtvar.v2.zip https://surfdrive.surf.nl/files/index.php/s/nJPDxM3b9C7hkM2/download\r\n```\r\nThe 7.1GB gnomad.v3.1.2.echtvar.v2.zip file is created using [this example json](https://github.com/brentp/echtvar/blob/main/examples/gnomad.v3.1.2.json)\r\n\r\na smaller (2.5GB) file with only popmax AF is available with:\r\n```\r\ncurl -L -o gnomad.v3.1.2.echtvar.popmax.v2.zip  https://surfdrive.surf.nl/files/index.php/s/LddbAYQAYPqtYu6/download\r\n```",
        "html_url": "https://github.com/brentp/echtvar/releases/tag/v0.1.9",
        "name": "\".\" for missing floats",
        "release_id": 122555886,
        "tag": "v0.1.9",
        "tarball_url": "https://api.github.com/repos/brentp/echtvar/tarball/v0.1.9",
        "type": "Release",
        "url": "https://api.github.com/repos/brentp/echtvar/releases/122555886",
        "value": "https://api.github.com/repos/brentp/echtvar/releases/122555886",
        "zipball_url": "https://api.github.com/repos/brentp/echtvar/zipball/v0.1.9"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "brentp",
          "type": "User"
        },
        "date_created": "2023-09-13T12:16:25Z",
        "date_published": "2023-09-13T12:18:46Z",
        "description": "v0.1.8\r\n======\r\n+ better help message indicating how to output bcf/vcf.gz (thanks @dvg-p4)\r\n+ fix missing value in cadd example (thanks @dvg-p4)\r\n+ doc types (thanks @enormandeau)\r\n+ handle big files (#30)\r\n\r\n\r\n\r\n## Get Started\r\n\r\nTo get started, download the static linux binary [here](https://github.com/brentp/echtvar/releases/download/v0.1.8/echtvar), then chmod +x and execute:\r\n\r\n```\r\nwget -O ~/bin/echtvar https://github.com/brentp/echtvar/releases/download/v0.1.8/echtvar \\\r\n    && chmod +x ~/bin/echtvar \\\r\n    && ~/bin/echtvar -h \r\n```\r\nExperienced rust users can build with [cargo](https://doc.rust-lang.org/cargo/)\r\nPlease let me know any (non SIGILL) issues with the binary. This is my first time distributing rust binaries.\r\n\r\n## Annotation files\r\n\r\nyou can create your own annotation files using `echtvar encode`. We provide a pre-made file for hg38 whole genomes from gnomad v3.1.2. It can be retrieved with:\r\n```\r\ncurl -L -o gnomad.v3.1.2.echtvar.v2.zip https://surfdrive.surf.nl/files/index.php/s/nJPDxM3b9C7hkM2/download\r\n```\r\nThe 7.1GB gnomad.v3.1.2.echtvar.v2.zip file is created using [this example json](https://github.com/brentp/echtvar/blob/main/examples/gnomad.v3.1.2.json)\r\n\r\na smaller (2.5GB) file with only popmax AF is available with:\r\n```\r\ncurl -L -o gnomad.v3.1.2.echtvar.popmax.v2.zip  https://surfdrive.surf.nl/files/index.php/s/LddbAYQAYPqtYu6/download\r\n```",
        "html_url": "https://github.com/brentp/echtvar/releases/tag/v0.1.8",
        "name": "large files and other minor changes",
        "release_id": 120954819,
        "tag": "v0.1.8",
        "tarball_url": "https://api.github.com/repos/brentp/echtvar/tarball/v0.1.8",
        "type": "Release",
        "url": "https://api.github.com/repos/brentp/echtvar/releases/120954819",
        "value": "https://api.github.com/repos/brentp/echtvar/releases/120954819",
        "zipball_url": "https://api.github.com/repos/brentp/echtvar/zipball/v0.1.8"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "brentp",
          "type": "User"
        },
        "date_created": "2022-08-31T18:44:58Z",
        "date_published": "2022-08-31T18:51:02Z",
        "description": "changes\r\n=======\r\n+ add wiki page and more information about decomposing variants\r\n+ clarify warning on non ACGT (#23)\r\n+ better error messages on missing/bad zip file\r\n\r\n\r\n## Get Started\r\n\r\nTo get started, download the static linux binary [here](https://github.com/brentp/echtvar/releases/download/v0.1.7/echtvar), then chmod +x and execute:\r\n\r\n```\r\nwget -O ~/bin/echtvar https://github.com/brentp/echtvar/releases/download/v0.1.7/echtvar \\\r\n    && chmod +x ~/bin/echtvar \\\r\n    && ~/bin/echtvar -h \r\n```\r\nExperienced rust users can build with [cargo](https://doc.rust-lang.org/cargo/)\r\nPlease let me know any (non SIGILL) issues with the binary. This is my first time distributing rust binaries.\r\n\r\n## Annotation files\r\n\r\nyou can create your own annotation files using `echtvar encode`. We provide a pre-made file for hg38 whole genomes from gnomad v3.1.2. It can be retrieved with:\r\n```\r\ncurl -L -o gnomad.v3.1.2.echtvar.v2.zip https://surfdrive.surf.nl/files/index.php/s/nJPDxM3b9C7hkM2/download\r\n```\r\nThe 7.1GB gnomad.v3.1.2.echtvar.v2.zip file is created using [this example json](https://github.com/brentp/echtvar/blob/main/examples/gnomad.v3.1.2.json)\r\n\r\na smaller (2.5GB) file with only popmax AF is available with:\r\n```\r\ncurl -L -o gnomad.v3.1.2.echtvar.popmax.v2.zip  https://surfdrive.surf.nl/files/index.php/s/LddbAYQAYPqtYu6/download\r\n```",
        "html_url": "https://github.com/brentp/echtvar/releases/tag/v0.1.7",
        "name": "v0.1.7",
        "release_id": 75949760,
        "tag": "v0.1.7",
        "tarball_url": "https://api.github.com/repos/brentp/echtvar/tarball/v0.1.7",
        "type": "Release",
        "url": "https://api.github.com/repos/brentp/echtvar/releases/75949760",
        "value": "https://api.github.com/repos/brentp/echtvar/releases/75949760",
        "zipball_url": "https://api.github.com/repos/brentp/echtvar/zipball/v0.1.7"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "brentp",
          "type": "User"
        },
        "date_created": "2022-06-14T07:42:38Z",
        "date_published": "2022-06-14T09:04:47Z",
        "description": "v0.1.6\r\n======\r\n+ change VCF header (#19)\r\n+ output fewer warnings for '*' and other alternate alleles (#22 thanks @liserjrqlxue)\r\n\r\n\r\n## Get Started\r\n\r\nTo get started, download the static linux binary [here](https://github.com/brentp/echtvar/releases/download/v0.1.6/echtvar), then chmod +x and execute:\r\n\r\n```\r\nwget -O ~/bin/echtvar https://github.com/brentp/echtvar/releases/download/v0.1.6/echtvar \\\r\n    && chmod +x ~/bin/echtvar \\\r\n   && ~/bin/echtvar -h \r\n```\r\nExperienced rust users can build with [cargo](https://doc.rust-lang.org/cargo/)\r\nPlease let me know any (non SIGILL) issues with the binary. This is my first time distributing rust binaries.\r\n\r\n## Annotation files\r\n\r\nyou can create your own annotation files using `echtvar encode`. We provide a pre-made file for hg38 whole genomes from gnomad v3.1.2. It can be retrieved with:\r\n```\r\ncurl -L -o gnomad.v3.1.2.echtvar.v2.zip https://surfdrive.surf.nl/files/index.php/s/nJPDxM3b9C7hkM2/download\r\n```\r\nThe 7.1GB gnomad.v3.1.2.echtvar.v2.zip file is created using [this example json](https://github.com/brentp/echtvar/blob/main/examples/gnomad.v3.1.2.json)\r\n\r\na smaller (2.5GB) file with only popmax AF is available with:\r\n```\r\ncurl -L -o gnomad.v3.1.2.echtvar.popmax.v2.zip  https://surfdrive.surf.nl/files/index.php/s/LddbAYQAYPqtYu6/download\r\n```",
        "html_url": "https://github.com/brentp/echtvar/releases/tag/v0.1.6",
        "name": "vcf-header + limit warnings",
        "release_id": 69377410,
        "tag": "v0.1.6",
        "tarball_url": "https://api.github.com/repos/brentp/echtvar/tarball/v0.1.6",
        "type": "Release",
        "url": "https://api.github.com/repos/brentp/echtvar/releases/69377410",
        "value": "https://api.github.com/repos/brentp/echtvar/releases/69377410",
        "zipball_url": "https://api.github.com/repos/brentp/echtvar/zipball/v0.1.6"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "brentp",
          "type": "User"
        },
        "date_created": "2022-03-30T07:23:18Z",
        "date_published": "2022-03-30T09:15:38Z",
        "description": "v0.1.5\r\n======\r\n+ fix build on OSX (#18 from @sstadick)\r\n+ handle empty alts (#16 from @sstadick)\r\n+ add script for converting dbNSFP -> VCF -> echtvar encode\r\n\r\n## Get Started\r\n\r\nTo get started, download the static linux binary [here](https://github.com/brentp/echtvar/releases/download/v0.1.5/echtvar), then chmod +x and execute:\r\n\r\n```\r\nwget -O ~/bin/echtvar https://github.com/brentp/echtvar/releases/download/v0.1.5/echtvar \\\r\n    && chmod +x ~/bin/echtvar \\\r\n   && ~/bin/echtvar -h \r\n```\r\nExperienced rust users can build with [cargo](https://doc.rust-lang.org/cargo/)\r\nPlease let me know any (non SIGILL) issues with the binary. This is my first time distributing rust binaries.\r\n\r\n## Annotation files\r\n\r\nyou can create your own annotation files using `echtvar encode`. We provide a pre-made file for hg38 whole genomes from gnomad v3.1.2. It can be retrieved with:\r\n```\r\ncurl -L -o gnomad.v3.1.2.echtvar.v2.zip https://surfdrive.surf.nl/files/index.php/s/nJPDxM3b9C7hkM2/download\r\n```\r\nThe 7.1GB gnomad.v3.1.2.echtvar.v2.zip file is created using [this example json](https://github.com/brentp/echtvar/blob/main/examples/gnomad.v3.1.2.json)\r\n\r\na smaller (2.5GB) file with only popmax AF is available with:\r\n```\r\ncurl -L -o gnomad.v3.1.2.echtvar.popmax.v2.zip  https://surfdrive.surf.nl/files/index.php/s/LddbAYQAYPqtYu6/download\r\n```",
        "html_url": "https://github.com/brentp/echtvar/releases/tag/v0.1.5",
        "name": "osx and dbNSFP",
        "release_id": 63132507,
        "tag": "v0.1.5",
        "tarball_url": "https://api.github.com/repos/brentp/echtvar/tarball/v0.1.5",
        "type": "Release",
        "url": "https://api.github.com/repos/brentp/echtvar/releases/63132507",
        "value": "https://api.github.com/repos/brentp/echtvar/releases/63132507",
        "zipball_url": "https://api.github.com/repos/brentp/echtvar/zipball/v0.1.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "brentp",
          "type": "User"
        },
        "date_created": "2022-03-15T14:37:28Z",
        "date_published": "2022-03-21T09:19:52Z",
        "description": "v0.1.4\r\n======\r\n+ fix bug with filter not removing (not filtering) variants correctly.\r\n\r\n## Get Started\r\n\r\nTo get started, download the static linux binary [here](https://github.com/brentp/echtvar/releases/download/v0.1.4/echtvar), then chmod +x and execute:\r\n\r\n```\r\nwget -O ~/bin/echtvar https://github.com/brentp/echtvar/releases/download/v0.1.4/echtvar \\\r\n    && chmod +x ~/bin/echtvar \\\r\n   && ~/bin/echtvar -h \r\n```\r\nExperienced rust users can build with [cargo](https://doc.rust-lang.org/cargo/)\r\nPlease let me know any (non SIGILL) issues with the binary. This is my first time distributing rust binaries.\r\n\r\n## Annotation files\r\n\r\nyou can create your own annotation files using `echtvar encode`. We provide a pre-made file for hg38 whole genomes from gnomad v3.1.2. It can be retrieved with:\r\n```\r\ncurl -L -o gnomad.v3.1.2.echtvar.v2.zip https://surfdrive.surf.nl/files/index.php/s/nJPDxM3b9C7hkM2/download\r\n```\r\nThe 7.1GB gnomad.v3.1.2.echtvar.v2.zip file is created using [this example json](https://github.com/brentp/echtvar/blob/main/examples/gnomad.v3.1.2.json)\r\n\r\na smaller (2.5GB) file with only popmax AF is available with:\r\n```\r\ncurl -L -o gnomad.v3.1.2.echtvar.popmax.v2.zip  https://surfdrive.surf.nl/files/index.php/s/LddbAYQAYPqtYu6/download\r\n```",
        "html_url": "https://github.com/brentp/echtvar/releases/tag/v0.1.4",
        "name": "filter fix",
        "release_id": 62304278,
        "tag": "v0.1.4",
        "tarball_url": "https://api.github.com/repos/brentp/echtvar/tarball/v0.1.4",
        "type": "Release",
        "url": "https://api.github.com/repos/brentp/echtvar/releases/62304278",
        "value": "https://api.github.com/repos/brentp/echtvar/releases/62304278",
        "zipball_url": "https://api.github.com/repos/brentp/echtvar/zipball/v0.1.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "brentp",
          "type": "User"
        },
        "date_created": "2022-02-26T15:18:06Z",
        "date_published": "2022-02-26T17:00:49Z",
        "description": "This release fixes a major bug with dense variant files (like spliceAI)\r\n\r\nv0.1.3\r\n======\r\n+ exit with error on multi-allelics (previously, only first allele was used) ( #11)\r\n+ more docs on conf file (thanks @m-pauper)\r\n+ fix compression error for very dense regions (#12)\r\n+ **major**: fix error when using hts_set_threads more than once and after reading header (#12)\r\n\r\n## Get Started\r\n\r\nTo get started, either download the static linux binary [here](https://github.com/brentp/echtvar/releases/download/v0.1.3/echtvar), then chmod +x and execute. \r\n\r\n```\r\nwget -O ~/bin/echtvar https://github.com/brentp/echtvar/releases/download/v0.1.3/echtvar \\\r\n    && chmod +x ~/bin/echtvar \\\r\n   && ~/bin/echtvar -h \r\n```\r\nExperienced rust users can build with [cargo](https://doc.rust-lang.org/cargo/)\r\nPlease let me know any (non SIGILL) issues with the binary. This is my first time distributing rust binaries.\r\n\r\n## Annotation files\r\n\r\nyou can create your own annotation files using `echtvar encode`. We provide a pre-made file for hg38 whole genomes from gnomad v3.1.2. It can be retrieved with:\r\n```\r\ncurl -L -o gnomad.v3.1.2.echtvar.v2.zip https://surfdrive.surf.nl/files/index.php/s/nJPDxM3b9C7hkM2/download\r\n```\r\nThe 7.1GB gnomad.v3.1.2.echtvar.v2.zip file is created using [this example json](https://github.com/brentp/echtvar/blob/main/examples/gnomad.v3.1.2.json)\r\n\r\na smaller (2.5GB) file with only popmax AF is available with:\r\n```\r\ncurl -L -o gnomad.v3.1.2.echtvar.popmax.v2.zip  https://surfdrive.surf.nl/files/index.php/s/LddbAYQAYPqtYu6/download\r\n```",
        "html_url": "https://github.com/brentp/echtvar/releases/tag/v0.1.3",
        "release_id": 60539228,
        "tag": "v0.1.3",
        "tarball_url": "https://api.github.com/repos/brentp/echtvar/tarball/v0.1.3",
        "type": "Release",
        "url": "https://api.github.com/repos/brentp/echtvar/releases/60539228",
        "value": "https://api.github.com/repos/brentp/echtvar/releases/60539228",
        "zipball_url": "https://api.github.com/repos/brentp/echtvar/zipball/v0.1.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "brentp",
          "type": "User"
        },
        "date_created": "2022-02-08T07:19:22Z",
        "date_published": "2022-02-08T07:20:54Z",
        "description": "This release fixes a major bug (with a minor change) that rendered `echtvar` nearly unusable. The bug was related to string fields added in last release.\r\n\r\n## Get Started\r\n\r\nTo get started, either download the static linux binary [here](https://github.com/brentp/echtvar/releases/download/v0.1.2/echtvar), then chmod +x and execute. \r\n\r\n```\r\nwget -O ~/bin/echtvar https://github.com/brentp/echtvar/releases/download/v0.1.2/echtvar \\\r\n    && chmod +x ~/bin/echtvar \\\r\n   && ~/bin/echtvar -h \r\n```\r\nExperienced rust users can build with [cargo](https://doc.rust-lang.org/cargo/)\r\nPlease let me know any (non SIGILL) issues with the binary. This is my first time distributing rust binaries.\r\n\r\n## Annotation files\r\n\r\nyou can create your own annotation files using `echtvar encode`. We provide a pre-made file for hg38 whole genomes from gnomad v3.1.2. It can be retrieved with:\r\n```\r\ncurl -L -o gnomad.v3.1.2.echtvar.v2.zip https://surfdrive.surf.nl/files/index.php/s/nJPDxM3b9C7hkM2/download\r\n```\r\nThe 7.1GB gnomad.v3.1.2.echtvar.v2.zip file is created using [this example json](https://github.com/brentp/echtvar/blob/main/examples/gnomad.v3.1.2.json)\r\n\r\na smaller (2.5GB) file with only popmax AF is available with:\r\n```\r\ncurl -L -o gnomad.v3.1.2.echtvar.popmax.v2.zip  https://surfdrive.surf.nl/files/index.php/s/LddbAYQAYPqtYu6/download\r\n```",
        "html_url": "https://github.com/brentp/echtvar/releases/tag/v0.1.2",
        "name": "bugfix",
        "release_id": 58972733,
        "tag": "v0.1.2",
        "tarball_url": "https://api.github.com/repos/brentp/echtvar/tarball/v0.1.2",
        "type": "Release",
        "url": "https://api.github.com/repos/brentp/echtvar/releases/58972733",
        "value": "https://api.github.com/repos/brentp/echtvar/releases/58972733",
        "zipball_url": "https://api.github.com/repos/brentp/echtvar/zipball/v0.1.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "brentp",
          "type": "User"
        },
        "date_created": "2022-01-31T12:31:56Z",
        "date_published": "2022-01-31T12:38:36Z",
        "description": "This release adds the ability to **annotate with multiple echtvar files** and to **annotate with string fields**, including support for extracting the **FILTER** field. Here is the changelog:\r\n\r\nv0.1.1\r\n======\r\n+ support multiple echtvar files to `echtvar anno`. This makes it possible to annoate with, for example gnomad *and* dbsnp.\r\n+ support string fields. This works for fields with a lowish number (max of thousands) of unique values.\r\n+ support extracting FILTER field from annotation VCF. So now can annotate with, e.g. gnomad FILTER field via:\r\n  ```\r\n  {\"field\": \"FILTER\", \"alias\": \"gnomad_filter\"},\r\n  ```\r\n  in the json file for `echtvar encode`. \"FILTER\" is a special-case, all other `field`s are from the INFO.\r\n\r\n:warning: echtvar requires a precessor that supports SSE4.1 instructions. Using `echtvar` on an unsupported processor will result in a SIGILL.\r\n\r\n## Get Started\r\n\r\nTo get started, either download the static linux binary [here](https://github.com/brentp/echtvar/releases/download/v0.1.1/echtvar), then chmod +x and execute; or use [cargo](https://doc.rust-lang.org/cargo/) build\r\n\r\nPlease let me know any (non SIGILL) issues with the binary. This is my first time distributing rust binaries.\r\n\r\n## Annotation files\r\n\r\nyou can create your own annotation files using `echtvar encode`. We provide a pre-made file for hg38 whole genomes from gnomad v3.1.2. It can be retrieved with:\r\n```\r\ncurl -L -o gnomad.v3.1.2.echtvar.v2.zip https://surfdrive.surf.nl/files/index.php/s/nJPDxM3b9C7hkM2/download\r\n```\r\nThe 7.1GB gnomad.v3.1.2.echtvar.v2.zip file is created using [this example json](https://github.com/brentp/echtvar/blob/main/examples/gnomad.v3.1.2.json)\r\n\r\na smaller (2.5GB) file with only popmax AF is available with:\r\n```\r\ncurl -L -o gnomad.v3.1.2.echtvar.popmax.v2.zip  https://surfdrive.surf.nl/files/index.php/s/LddbAYQAYPqtYu6/download\r\n```",
        "html_url": "https://github.com/brentp/echtvar/releases/tag/v0.1.1",
        "release_id": 58331520,
        "tag": "v0.1.1",
        "tarball_url": "https://api.github.com/repos/brentp/echtvar/tarball/v0.1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/brentp/echtvar/releases/58331520",
        "value": "https://api.github.com/repos/brentp/echtvar/releases/58331520",
        "zipball_url": "https://api.github.com/repos/brentp/echtvar/zipball/v0.1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "brentp",
          "type": "User"
        },
        "date_created": "2022-01-20T11:36:11Z",
        "date_published": "2022-01-20T11:49:56Z",
        "description": "This first release of echtvar is tested quite exhaustively. A [script](https://github.com/brentp/echtvar/blob/main/tests/big.sh) generates millions of overlapping indels and SNPs with distinct values. A test script then assures that values are annotated as expected (or not as the case may be).\r\n\r\n:warning: echtvar requires a precessor that supports SSE4.1 instructions. Using `echtvar` on an unsupported processor will result in a SIGILL.0\r\n\r\nTo get started, either download the static linux binary [here](https://github.com/brentp/echtvar/releases/download/v0.1.0/echtvar), then chmod +x and execute; or use [cargo](https://doc.rust-lang.org/cargo/) build\r\n\r\nPlease let me know any (non SIGILL) issues with the binary. This is my first time distributing rust binaries.\r\n\r\n## Annotation files\r\n\r\nyou can create your own annotation files using `echtvar encode`. We provide a pre-made file for hg38 whole genomes from gnomad v3.1.2. It can be retrieved with:\r\n```\r\ncurl -L -o gnomad.v3.1.2.echtvar.zip https://surfdrive.surf.nl/files/index.php/s/O4mehMM7b3cmK9s/download\r\n```\r\nThe 6.8GB gnomad.v3.1.2.echtvar.zip file is created using [this example json](https://github.com/brentp/echtvar/blob/main/examples/gnomad.v3.1.2.json)\r\n\r\na smaller (2.3GB) file with only popmax AF is available with:\r\n```\r\ncurl -L -o gnomad.v3.1.2.echtvar.popmax.zip  https://surfdrive.surf.nl/files/index.php/s/Mcgw9llnoR6f1xh/download\r\n```",
        "html_url": "https://github.com/brentp/echtvar/releases/tag/v0.1.0",
        "name": "initial release",
        "release_id": 57565843,
        "tag": "v0.1.0",
        "tarball_url": "https://api.github.com/repos/brentp/echtvar/tarball/v0.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/brentp/echtvar/releases/57565843",
        "value": "https://api.github.com/repos/brentp/echtvar/releases/57565843",
        "zipball_url": "https://api.github.com/repos/brentp/echtvar/zipball/v0.1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "installation",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 11:55:03",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 140
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Getting started.",
        "parent_header": [
          "Echtvar: Really, truly rapid variant annotation and filtering"
        ],
        "type": "Text_excerpt",
        "value": "Get a static binary and pre-encoded echtvar files for gnomad v3.1.2 (hg38) here: https://github.com/brentp/echtvar/releases/latest\nThat page contains exact instructions to get started with the static binary.\n\n<details>\n  <summary>:arrow_down:Download or Build instructions for linux</summary>\n\nThe linux binary is available via:\n\n```\nwget -O ~/bin/echtvar https://github.com/brentp/echtvar/releases/latest/download/echtvar \\\n    && chmod +x ~/bin/echtvar \\\n    && ~/bin/echtvar # show help\n ```\n\nUsers can make their own *echtvar* archives with `echtvar encode`, and pre-made archives for\ngnomAD version 3.1.2 are [here](https://github.com/brentp/echtvar/release)\n\nRust users can build on linux with:\n\n```\ncargo build --release --target x86_64-unknown-linux-gnu\n```\n\n</details>\n\nTo run echtvar with an existing archive (we have several available in [releases](https://github.com/brentp/echtvar/releases/latest)) is as simple as\n```\nechtvar anno -e gnomad.echtvar.zip -e other.echtvar.zip input.vcf output.annotated.bcf\n```\n\nan optional filter that utilizes fields available any of the zip files can be added like:\n```\n-i \"gnomad_popmax_af < 0.01\"\n```\n\nechtvar can also accept input from stdin using \"-\" or \"/dev/stdin\" for the input argument.\n"
      },
      "source": "https://raw.githubusercontent.com/brentp/echtvar/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "encode",
        "parent_header": [
          "Echtvar: Really, truly rapid variant annotation and filtering",
          "usage"
        ],
        "type": "Text_excerpt",
        "value": "make (`encode`) a new echtvar file. This is usually done once  (or download from those provided in the [Release pages](https://github.com/brentp/echtvar/releases/latest)) \nand then the file can be re-used for the annotation (`echtvar anno`) step with each new query file.\nNote that input VCFs must be [decomposed](https://github.com/brentp/echtvar/wiki/decompose).\n\n```\nechtvar \\\n   encode \\\n   gnomad.v3.1.2.echtvar.zip \\\n   conf.json # this defines the columns to pull from $input_vcf, and how to\n   $input_population_vcf[s] \\ can be split by chromosome or all in a single file.\nname and encode them\n\n```\n\nSee below for a description of the json file that defines which columns are\npulled from the population VCF.\n"
      },
      "source": "https://raw.githubusercontent.com/brentp/echtvar/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "annotate",
        "parent_header": [
          "Echtvar: Really, truly rapid variant annotation and filtering",
          "usage"
        ],
        "type": "Text_excerpt",
        "value": "Annotate a [**decomposed** (and normalized)](https://github.com/brentp/echtvar/wiki/decompose) VCF with an echtvar file and only output variants where `gnomad_af`\nfrom the echtvar file is < 0.01. Note that multiple echtvar files can be specified\nand the `-i` expression is optional and can be elided to output all variants.\n\n```\nechtvar anno \\\n   -e gnomad.v3.1.2.echtvar.v2.zip \\\n   -e dbsnp.echtvar.zip \\\n   -i 'gnomad_popmax_af < 0.01' \\\n   $cohort.input.bcf \\\n   $cohort.echtvar-annotated.filtered.bcf\n```\n"
      },
      "source": "https://raw.githubusercontent.com/brentp/echtvar/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Configuration File for Encode",
        "parent_header": [
          "Echtvar: Really, truly rapid variant annotation and filtering",
          "usage"
        ],
        "type": "Text_excerpt",
        "value": "When running `echtvar encode`, a [json5](https://json5.org/) (json with\ncomments and other nice features) determines which columns are pulled from the\ninput VCF and how they are stored.\n\nA simple example is to pull a single integer field and give it a new name (`alias`):\n\n```\n[{\"field\": \"AC\", \"alias\": \"gnomad_AC\"}]\n```\n\nThis will extract the \"AC\" field from the INFO and labeled as \"gnomad_AC\" when\nlater used to annotate a VCF. Note that it's important to give a description/unique prefix lke \"`gnomad_`\" so\nas not to collide with fields already in the query VCF.\n\n<details>\n  <summary>:arrow_down:Expand this section for detail on additional fields, including float and string types</summary>\n\n```\n[\n    {\"field\": \"AC\", \"alias\": \"gnomad_AC\"},\n    // this JSON file is json 5 and so can have comments\n    // the missing value will default to -1, but the value: -2147483648 will\n    // result in '.' as it is the missing value for VCF.\n    {\"field\": \"AN\", \"alias\":, gnomad_AN\", missing_value: -2147483648},\n    {\n           field: \"AF\",\n           alias: \"gnomad_AF\",\n           missing_value: -1,\n           // since all values (including floats) are stored as integers, echtvar internally converts\n           // any float to an integer by multiplying by `multiplier`.\n           // higher values give better precision and worse compression.\n           // upon annotation, the score is divided by multiplier to give a number close to the original float.\n           multiplier: 2000000,\n           // set zigzag to true if your data has negative values\n           zigzag: true,\n   }\n    // echtvar will save strings as integers along with a lookup. this can work for fields with a low cardinality.\n    {\"field\": \"string_field\", \"alias\":, gnomad_string_field\", missing_string: \"UNKNOWN\"},\n    // \"FILTER\" is a special case that indicates that echtvar should extract the FILTER column from the annotation vcf.\n    {\"field\": \"FILTER\", \"alias\": \"gnomad_filter\"},\n]\n```\n\nThe above file will extract 5 fields, but the user can chooose as many as they like when encoding.\nAll fields in an `echtvar` file will be added (with the given alias) to any VCF it is used to annotate.\n\n</details>\n\nOther examples are available [here](https://github.com/brentp/echtvar/tree/main/examples)\n\nAnd full examples are in the [wiki](https://github.com/brentp/echtvar/wiki)\n"
      },
      "source": "https://raw.githubusercontent.com/brentp/echtvar/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Expressions",
        "parent_header": [
          "Echtvar: Really, truly rapid variant annotation and filtering",
          "usage"
        ],
        "type": "Text_excerpt",
        "value": "An optional expression will determine which variants are written. It can utilize any (and only) integer or float fields present in the\nechtvar file (not those present in the query VCF). An example could be:\n\n```\n-i 'gnomad_af < 0.01 && gnomad_nhomalts < 10'\n```\n\nThe expressions are enabled by [fasteval](https://github.com/likebike/fasteval) with supported syntax detailed [here](https://docs.rs/fasteval/latest/fasteval/). \n\nIn brief, the normal operators: (`&&, ||, +, -, *, /, <, <=, >, >=` and groupings `(, )`, etc) are supported and can be used to\ncraft an expression that returns true or false as above.\n"
      },
      "source": "https://raw.githubusercontent.com/brentp/echtvar/main/README.md",
      "technique": "header_analysis"
    }
  ]
}