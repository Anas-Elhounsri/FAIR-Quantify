{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/phiweger/faltwerk"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-08-16T18:39:04Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-08-19T11:24:44Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A library for spatial exploratory data analysis of protein structures"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9585294788924709,
      "result": {
        "original_header": "Faltwerk",
        "type": "Text_excerpt",
        "value": "`faltwerk` is a library for spatial exploratory data analysis of protein structures. It helps parse them, select items of interest, generate and visualise various protein annotations, and then provide convenient interfaces for downstream tools to run, for example, spatial regression. The most convenient way to run `faltwerk` is in a `jupyter notebook`. This REPL-like execution gives rapid feedback and can help form hypotheses. However, `faltwerk` also integrates nicely into workflows (no point and click required). \nThe curious thing about proteins is that they come as linear strings of residues, but then fold up into 3D structures, that represent the functionally active form of the molecule (the thing that \"does stuff\"). Correspondingly, nature most often selects on structure. However, many analyses (positive selection etc.) require the linear sequence. `faltwerk` bridges this gap (see specific use cases below). \nPRs and suggestions welcome! The awesome `Anvio` has a [structure module](https://merenlab.org/2018/09/04/getting-started-with-anvio-structure/), should you be dissatisfied with `faltwerk`. \n"
      },
      "source": "https://raw.githubusercontent.com/phiweger/faltwerk/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/phiweger/faltwerk/tree/main/docs"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://faltwerk.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/phiweger/faltwerk/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/phiweger/faltwerk/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/phiweger/faltwerk/main/_deprecated/example_ligands.ipynb"
      },
      "source": "https://raw.githubusercontent.com/phiweger/faltwerk/main/_deprecated/example_ligands.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/phiweger/faltwerk/main/_deprecated/example.ipynb"
      },
      "source": "https://raw.githubusercontent.com/phiweger/faltwerk/main/_deprecated/example.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/phiweger/faltwerk/main/_deprecated/example_colab.ipynb"
      },
      "source": "https://raw.githubusercontent.com/phiweger/faltwerk/main/_deprecated/example_colab.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/phiweger/faltwerk/main/_deprecated/test.ipynb"
      },
      "source": "https://raw.githubusercontent.com/phiweger/faltwerk/main/_deprecated/test.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/phiweger/faltwerk/main/examples/example_clinvar.ipynb"
      },
      "source": "https://raw.githubusercontent.com/phiweger/faltwerk/main/examples/example_clinvar.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/phiweger/faltwerk/main/examples/example_local.ipynb"
      },
      "source": "https://raw.githubusercontent.com/phiweger/faltwerk/main/examples/example_local.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/phiweger/faltwerk/main/examples/example_complex.ipynb"
      },
      "source": "https://raw.githubusercontent.com/phiweger/faltwerk/main/examples/example_complex.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/phiweger/faltwerk/main/examples/example_colab.ipynb"
      },
      "source": "https://raw.githubusercontent.com/phiweger/faltwerk/main/examples/example_colab.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/phiweger/faltwerk/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "phiweger/faltwerk"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/phiweger/faltwerk/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/phiweger/faltwerk/main/_deprecated/server/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/phiweger/faltwerk/main/_deprecated/server/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/phiweger/faltwerk/main/_deprecated/install.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://colab.research.google.com/assets/colab-badge.svg"
      },
      "source": "https://raw.githubusercontent.com/phiweger/faltwerk/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "http://raw.githubusercontent.com/phiweger/faltwerk/main/img/cover.png"
      },
      "source": "https://raw.githubusercontent.com/phiweger/faltwerk/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "http://raw.githubusercontent.com/phiweger/faltwerk/main/img/zinc.png"
      },
      "source": "https://raw.githubusercontent.com/phiweger/faltwerk/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "http://raw.githubusercontent.com/phiweger/faltwerk/main/img/pLDDT.png"
      },
      "source": "https://raw.githubusercontent.com/phiweger/faltwerk/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "http://raw.githubusercontent.com/phiweger/faltwerk/main/img/active2.png"
      },
      "source": "https://raw.githubusercontent.com/phiweger/faltwerk/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "http://raw.githubusercontent.com/phiweger/faltwerk/main/img/hotspots.png"
      },
      "source": "https://raw.githubusercontent.com/phiweger/faltwerk/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Install",
        "parent_header": [
          "Use cases"
        ],
        "type": "Text_excerpt",
        "value": "If you want to programmatically search for hotspots, the easiest way to get started is to use the image we provide through docker:\n\n```bash\ndocker pull nanozoo/faltwerk:3.8--08dc798\n```\n\nQuick start using the [colab notebook](https://colab.research.google.com/github/phiweger/faltwerk/blob/master/examples/example_colab.ipynb).\n\n```bash\n# Dependencies\n!pip install faltwerk==0.3\n# Install tools from upstream and downstream tasks\n!pip install -q pdb-tools altair vega_datasets spreg geopandas\n# More dependencies\n!mamba install -q -y -c conda-forge -c bioconda foldseek=3.915ef7d hmmer\n\n# For local execution in a jupyter notebook\npip install notebook\njupyter notebook examples/example_local.ipynb\n```\n\nIt might be necessary to install a `jupyter` extension to visualize the proteins (you notice if they don't render). Please refer to the `py3Dmol` [install documentation](https://pypi.org/project/py3Dmol/) and [repo](https://github.com/3dmol/3Dmol.js) in this case. A typical setup that renders correctly looks like this (Linux and Mac tested):\n\n```bash\n# ubuntu 20.04. LTS\n# Python 3.10.4\n\nnode --version\n# v10.19.0\n\njupyter --version\n# IPython          : 8.4.0\n# ipykernel        : 6.15.1\n# ipywidgets       : not installed\n# jupyter_client   : 7.3.4\n# jupyter_core     : 4.11.1\n# jupyter_server   : not installed\n# jupyterlab       : not installed\n# nbclient         : 0.6.6\n# nbconvert        : 6.5.3\n# nbformat         : 5.4.0\n# notebook         : 6.4.12\n# qtconsole        : not installed\n# traitlets        : 5.3.0\n```\n"
      },
      "source": "https://raw.githubusercontent.com/phiweger/faltwerk/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/phiweger/faltwerk/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "BSD 3-Clause \"New\" or \"Revised\" License",
        "spdx_id": "BSD-3-Clause",
        "type": "License",
        "url": "https://api.github.com/licenses/bsd-3-clause",
        "value": "https://api.github.com/licenses/bsd-3-clause"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "faltwerk"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "phiweger"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 5935276,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "JavaScript",
        "size": 1794054,
        "type": "Programming_language",
        "value": "JavaScript"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 100350,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "TeX",
        "size": 10217,
        "type": "Programming_language",
        "value": "TeX"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 907,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 688,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/phiweger/faltwerk/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier"
  ],
  "somef_provenance": {
    "date": "2024-10-04 09:31:29",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 9
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "Faltwerk"
        ],
        "type": "Text_excerpt",
        "value": "```python\n# TL;DR: Quickly visualize a zinc-finger and annotate the zinc-binding residues\n\n# wget 'http://www.pdb.org/pdb/download/downloadFile.do?fileFormat=pdb&compression=NO&structureId=1MEY' -O 1mey.pdb\nfrom faltwerk import Fold, Binding, Layout\n\nmodel = Fold('1mey.pdb')\nhmms = 'path/to/pfam_v31/Pfam-A.hmm'\nb = Binding(model, option='confident')\nb.predict_binding_(hmms)  # inplace operation\nmodel.annotate_('binding', b.get_binding('PF13912.5', 'ZN'))\nLayout(model).geom_surface('binding').render()\n```\n\n<p align=\"center\">\n    <img src=\"img/zinc.png\" alt=\"Antifreeze protein (PDB 3OTM)\" width=\"250\">\n</p>\n\nWe assume that all protein structures contain a single structure, and if you are not analysing protein complexes, then you want the structures to only contain a single chain, also. A simple way to clean a query pdb file is through `pdb-tools` (http://www.bonvinlab.org/pdb-tools/). _AlphaFold2_ predictions as generated by _ColabFold_ are ideal.\n\nMore information can be found in the [documentation](https://faltwerk.readthedocs.io/en/latest). Additionally, we cover several use cases with `jupyter` notebooks:\n\n```bash\njupyter notebook examples/example_local.ipynb\n```\n\nBut let's step through a [real world example](https://www.science.org/doi/10.1126/science.1259329) of the amazing assymetric selection that can be observed in human transferrin as a consequence of bacterial iron piracy, arr!\n\n```python\n# Load data\nfrom faltwerk.models import Fold, AlphaFold\n# ... (for details see notebook)\n\nfp = 'data/alphafold2/transferrin/test_08df6_unrelaxed_rank_1_model_3.pdb'\nmodel = Fold(fp)\n\n# or\nfp = 'data/alphafold2/transferrin/'\naf = AlphaFold(fp)\nmodel = af.best\n\n# Visualise pLDDT (how good is AF2 the prediction)\nly = Layout(model).geom_ribbon('plddt', palette='rainbow_r')\n```\n\n<p align=\"center\">\n    <img src=\"img/pLDDT.png\" width=\"350\">\n</p>\n\n\n```python\n# Predict ligand binding sites using the \"InteracDome\" approach\nb = Binding(model, 'representable')\nb.predict_binding_(pfam)\nbinding = b.get_binding('PF00405.16', 'FE')\nfe = [i for i, j in enumerate(binding) if j > .5]\n\nly = Layout(model)\n# select\nfe_ = ly.select(residues=fe)\n# style\nly.geom_ribbon(color='#ffffff')\nly.geom_ribbon(selection=fe_, color='red')\nly.render().show()\n```\n\n<p align=\"center\">\n    <img src=\"img/active2.png\" width=\"350\">\n</p>\n\n```python\n# Test for spatial signal in residues that are e. g. mutated or under positive\n# natural selection. Here we use residues from Barber et al., Science, 2014\n# (https://www.science.org/doi/10.1126/science.1259329) that are under positive\n# selection.\noriginal = [153, 253, 382, 434, 435, 436, 439, 558, 574, 575, 576, 591, 592, 593, 614, 617, 619, 625]\n\n# -1 bc/ positions from manuscript are 1-based \nbarber2014 = [i-1 for i in original]\nselection = [1 if i in barber2014 else 0 for i in range(len(model))]\n\n# (1) Spatial autocorrelation, i. e. \"hotspots\" in selected features, here using\n# the Getis-Ord metric.\nFDR = 0.05\nhotspots = find_hotspots(\n    model,\n    selection,\n    method='getis_ord',\n    angstrom=8,\n    false_discovery_rate=FDR,\n    test_two_sided=False)\n\n# (2) Point density analysis, here using HDBSCAN.\nclusters = cluster(model, hotspots, min_cluster_size=5)\n\n# Annotate model\nmodel.annotate_many_({\n    'selection': selection,\n    'hotspots': hotspots,\n    'clusters': clusters})\n\n# Build figure like a layer cake\nly = Layout(model, panel_size=(200, 200), grid=(1, 3), linked=True)\n\npos = ly.select(residues=barber2014, elements=['CA'], chain='A')\n\nly.geom_ribbon(color='#ffffff')\nly.geom_sphere(selection=pos, color='black')\nly.geom_surface('hotspots', palette='binary', panel=(0, 1))\nly.geom_surface('clusters', palette='Set2_r', panel=(0, 2))\nly.render().show()\n```\n\n<p align=\"center\">\n    <img src=\"img/hotspots.png\" width=\"700\">\n</p>\n\nFrom here, `faltwerk` allows to easily interact with downstream tools like `altair` for visualisation of features or `pysal` for spatial regression (see notebook `example.ipynb`)\n\n```python\ndf = pd.DataFrame.from_dict(\n    flatten(model.annotation, expected_track_length=len(model)))\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/phiweger/faltwerk/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Use cases",
        "type": "Text_excerpt",
        "value": "- Annotate solvent access, active centers and more\n- Some regions in the amino acid sequence are more conserved than others across species. Which regions in the 3D structure do they correspond to?\n- Are there any significant spatial hotspots where residues experience positive selection?\n- Do observed mutations cluster in any part of the protein, for example in regions that interface other proteins (protein binding sites) or active sites of the protein?\n- A hotspot/ cluster has been identified; which protein features if any can explain this occurance. For example, is the cluster associated with known protein-binding sites?\n- What's the spatial relationship between mutations deemed pathogenic and the annotated functional domains of a protein?\n\n"
      },
      "source": "https://raw.githubusercontent.com/phiweger/faltwerk/main/README.md",
      "technique": "header_analysis"
    }
  ]
}