{
  "application_domain": [
    {
      "confidence": 30.7,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "Chromosight",
          "Output"
        ],
        "type": "Text_excerpt",
        "value": "When using Chromosight in you research, please cite the pubication: https://www.nature.com/articles/s41467-020-19562-7\n"
      },
      "source": "https://raw.githubusercontent.com/koszullab/chromosight/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/koszullab/chromosight"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contributing",
        "parent_header": [
          "Chromosight",
          "Output"
        ],
        "type": "Text_excerpt",
        "value": "All contributions are welcome. We use the [numpy standard](https://numpydoc.readthedocs.io/en/latest/format.html) for docstrings when documenting functions.\n\nThe code formatting standard we use is [black](https://github.com/psf/black), with --line-length=79 to follow PEP8 recommendations. We use `nose2` as our testing framework. Ideally, new functions should have associated unit tests, placed in the `tests` folder.\n\nTo test the code, you can run:\n\n```bash\nnose2 -s tests/\n```\n"
      },
      "source": "https://raw.githubusercontent.com/koszullab/chromosight/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2019-07-10T13:36:14Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-19T14:48:52Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Computer vision based program for pattern recognition in chromosome (Hi-C) contact maps "
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9408549909413666,
      "result": {
        "original_header": "Chromosight",
        "type": "Text_excerpt",
        "value": "Python package to detect chromatin loops (and other patterns) in Hi-C contact maps.  \n"
      },
      "source": "https://raw.githubusercontent.com/koszullab/chromosight/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9296509151171953,
      "result": {
        "original_header": "Options",
        "type": "Text_excerpt",
        "value": "```\n\nPattern exploration and detection\n\nExplore and detect patterns (loops, borders, centromeres, etc.) in Hi-C contact\nmaps with pattern matching.\n\nUsage:\n    chromosight detect  [--kernel-config=FILE] [--pattern=loops]\n                        [--pearson=auto] [--win-size=auto] [--iterations=auto]\n                        [--win-fmt={json,npy}] [--norm={auto,raw,force}]\n                        [--subsample=no] [--inter] [--tsvd] [--smooth-trend]\n                        [--n-mads=5] [--min-dist=0] [--max-dist=auto]\n                        [--no-plotting] [--min-separation=auto] [--dump=DIR]\n                        [--threads=1] [--perc-zero=auto]\n                        [--perc-undetected=auto] <contact_map> <prefix>\n    chromosight generate-config [--preset loops] [--click contact_map]\n                        [--norm={auto,raw,norm}] [--win-size=auto] [--n-mads=5]\n                        [--threads=1] <prefix>\n    chromosight quantify [--inter] [--pattern=loops] [--subsample=no]\n                         [--win-fmt=json] [--kernel-config=FILE] [--norm={auto,raw,norm}]\n                         [--threads=1] [--n-mads=5] [--win-size=auto]\n                         [--perc-undetected=auto] [--perc-zero=auto]\n                         [--no-plotting] [--tsvd] <bed2d> <contact_map> <prefix>\n    chromosight list-kernels [--long] [--mat] [--name=kernel_name]\n    chromosight test\n\n    detect:\n        performs pattern detection on a Hi-C contact map via template matching\n    generate-config:\n        Generate pre-filled config files to use for detect and quantify.\n        A config consists of a JSON file describing parameters for the\n        analysis and path pointing to kernel matrices files. Those matrices\n        files are tsv files with numeric values as kernel to use for\n        convolution.\n    quantify:\n        Given a list of pairs of positions and a contact map, computes the\n        correlation coefficients between those positions and the kernel of the\n        selected pattern.\n    list-kernels:\n        Prints information about available kernels.\n    test:\n        Download example data and run loop detection on it.\n\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/koszullab/chromosight/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.882264009638568,
      "result": {
        "original_header": "Input",
        "type": "Text_excerpt",
        "value": "Input Hi-C contact maps should be in cool format. The cool format is an efficient and compact format for Hi-C data based on HDF5. It is maintained by the Mirny lab and documented here: https://open2c.github.io/cooler/ \nMost other Hi-C data formats (hic, homer, hic-pro), can be converted to cool using [hicexplorer's hicConvertFormat](https://hicexplorer.readthedocs.io/en/latest/content/tools/hicConvertFormat.html) or [hic2cool](https://github.com/4dn-dcic/hic2cool). Bedgraph2 format can be converted directly using cooler with the command `cooler load -f bg2 <chrom.sizes>:<binsize> in.bg2.gz out.cool`. For more informations, see the [cooler documentation](https://cooler.readthedocs.io/en/latest/cli.html#cooler-load) \nFor `chromosight quantify`, the bed2d file is a text file with at least 6 tab-separated columns containing pairs of coordinates. The first 6 columns should be `chrom start end chrom start end` and have no header. Alternatively, the output text file generated by `chromosight detect` is also accepted. Instructions to generate a bed2d file from a bed file are given [in the documentation](https://chromosight.readthedocs.io/en/stable/TUTORIAL.html#quantification).\n \n"
      },
      "source": "https://raw.githubusercontent.com/koszullab/chromosight/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8592359121757952,
      "result": {
        "original_header": "Output",
        "type": "Text_excerpt",
        "value": "Three files are generated by chromosight's `detect` and `quantify` commands. Their filenames are determined by the value of the `<prefix>` argument:\n  * `prefix.tsv`: List of genomic coordinates, bin ids and correlation scores for the pattern identified\n  * `prefix.json`: JSON file containing the windows (of the same size as the kernel used) around the patterns from pattern.txt\n  * `prefix.pdf`: Plot showing the pileup (average) window of all detected patterns. Plot generation can be disabled using the `--no-plotting` option. \n> Note: the p-values and q-values provided in prefix.tsv should not be used as a criterion for filtering and are only useful for ranking calls. Their values are obtained from a Pearson correlation test and could be biased due to the dependence between contact values in the window.\n \n"
      },
      "source": "https://raw.githubusercontent.com/koszullab/chromosight/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/koszullab/chromosight/tree/master/docs"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://chromosight.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/koszullab/chromosight/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/koszullab/chromosight/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/koszullab/chromosight/master/docs/notebooks/plot_output.ipynb"
      },
      "source": "https://raw.githubusercontent.com/koszullab/chromosight/master/docs/notebooks/plot_output.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/koszullab/chromosight/master/docs/notebooks/g1_metaphase_yeast_example.ipynb"
      },
      "source": "https://raw.githubusercontent.com/koszullab/chromosight/master/docs/notebooks/g1_metaphase_yeast_example.ipynb",
      "technique": "file_exploration"
    }
  ],
  "faq": [
    {
      "confidence": 1,
      "result": {
        "original_header": "FAQ",
        "parent_header": [
          "Chromosight",
          "Output"
        ],
        "type": "Text_excerpt",
        "value": "Questions from previous users are available in the [github issues](https://github.com/koszullab/chromosight/issues?q=label%3Aquestion). You can open a new issue for your question if it is not already covered."
      },
      "source": "https://raw.githubusercontent.com/koszullab/chromosight/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 9
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/koszullab/chromosight/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "koszullab/chromosight"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Chromosight"
      },
      "source": "https://raw.githubusercontent.com/koszullab/chromosight/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/koszullab/chromosight/master/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/koszullab/chromosight/master/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "Chromosight"
        ],
        "type": "Text_excerpt",
        "value": "Stable version with pip:\n\n```sh\npip3 install --user chromosight\n```\nStable version with conda:\n```sh\nconda install -c bioconda -c conda-forge chromosight\n```\n\nor, if you want to get the latest development version:\n\n```\npip3 install --user -e git+https://github.com/koszullab/chromosight.git@master#egg=chromosight\n```\n"
      },
      "source": "https://raw.githubusercontent.com/koszullab/chromosight/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9418170743290296,
      "result": {
        "original_header": "Chromosight",
        "type": "Text_excerpt",
        "value": "<img src=\"docs/logo/chromosight.gif\" alt=\"animated logo\" width=\"200\"/> \n* Associated publication: https://www.nature.com/articles/s41467-020-19562-7\n* Documentation and analyses examples: https://chromosight.readthedocs.io\n* scripts used for the analysis presented in the article https://github.com/koszullab/chromosight_analyses_scripts\n \n"
      },
      "source": "https://raw.githubusercontent.com/koszullab/chromosight/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9316877297297234,
      "result": {
        "original_header": "Output",
        "type": "Text_excerpt",
        "value": "Alternatively, one can set the `--win-fmt=npy` option to dump windows into a npy file instead of JSON. This format can easily be loaded into a 3D array using numpy's `np.load` function. \n"
      },
      "source": "https://raw.githubusercontent.com/koszullab/chromosight/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8411116753099266,
      "result": {
        "original_header": "Output",
        "type": "Text_excerpt",
        "value": "Alternatively, one can set the `--win-fmt=npy` option to dump windows into a npy file instead of JSON. This format can easily be loaded into a 3D array using numpy's `np.load` function. \n"
      },
      "source": "https://raw.githubusercontent.com/koszullab/chromosight/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/koszullab/chromosight/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "chromatin-loops, genomics, hi-c, pattern-detection"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 Romain Koszul Laboratory\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nIf you use this software, please cite :\nMatthey-Doret, C., Baudry, L., Breuer, A. et al. Computer vision for pattern detection in chromosome contact maps. Nat Commun 11, 5795 (2020). https://doi.org/10.1038/s41467-020-19562-7\n"
      },
      "source": "https://raw.githubusercontent.com/koszullab/chromosight/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/koszullab/chromosight/master/docs/logo/chromosight.gif"
      },
      "source": "https://raw.githubusercontent.com/koszullab/chromosight/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "chromosight"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "koszullab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 210564,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 362,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 304,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/koszullab/chromosight/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://hicexplorer.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/koszullab/chromosight/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://cooler.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/koszullab/chromosight/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://numpydoc.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/koszullab/chromosight/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "cmdoret",
          "type": "User"
        },
        "date_created": "2022-10-05T21:02:38Z",
        "date_published": "2022-10-05T21:05:20Z",
        "html_url": "https://github.com/koszullab/chromosight/releases/tag/v1.6.3",
        "name": "fix deprecated MAD function",
        "release_id": 79102138,
        "tag": "v1.6.3",
        "tarball_url": "https://api.github.com/repos/koszullab/chromosight/tarball/v1.6.3",
        "type": "Release",
        "url": "https://api.github.com/repos/koszullab/chromosight/releases/79102138",
        "value": "https://api.github.com/repos/koszullab/chromosight/releases/79102138",
        "zipball_url": "https://api.github.com/repos/koszullab/chromosight/zipball/v1.6.3"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "support",
    "identifier"
  ],
  "somef_provenance": {
    "date": "2024-10-04 13:49:10",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 61
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "Chromosight"
        ],
        "type": "Text_excerpt",
        "value": "The two main subcommands of `chromosight` are `detect` and `quantify`. For more advanced use, there are two additional subcomands: `generate-config` and `list-kernels`. To get the list and description of those subcommands, you can always run:\n\n```bash\nchromosight --help\n```\nPattern detection is done using the `detect` subcommand. The `quantify` subcommand is used to compute pattern matching scores for a list of 2D coordinates on a Hi-C matrix. The `generate-config` subcommand is used to create a new type of pattern that can then be fed to `detect` using the `--custom-kernel` option. The `list-kernels` command is used to view informations about the available patterns.\n"
      },
      "source": "https://raw.githubusercontent.com/koszullab/chromosight/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Get started",
        "parent_header": [
          "Chromosight",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "To get a first look at a chromosight run, you can run `chromosight test`, which will download a test dataset from the github repository and run `chromosight detect` on it. You can then have a look at the output files generated.\n"
      },
      "source": "https://raw.githubusercontent.com/koszullab/chromosight/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Important options",
        "parent_header": [
          "Chromosight",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "When running `chromosight detect`, there are a handful parameters which are especially important:\n\n* `--min-dist`: Minimum genomic distance from which to detect patterns. For loops, this means the smallest loop size accepted (i.e. distance between the two anchors).\n* `--max-dist`: Maximum genomic distance from which to detect patterns. Increasing also increases runtime and memory use.\n* `--pearson`: Detection threshold. Decrease to allow a greater number of pattern detected (with potentially more false positives). Setting a very low value may actually reduce the number of detected patterns. This is due to the algorithm which might merge neighbouring patterns.\n* `--perc-zero`: Proportion of zero pixels allowed in a window for detection. If you have low coverage, increasing this value may improve results.\n"
      },
      "source": "https://raw.githubusercontent.com/koszullab/chromosight/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example",
        "parent_header": [
          "Chromosight",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "To detect all chromosome loops with sizes between 2kb and 200kb using 8 parallel threads:\n```bash\nchromosight detect --threads 8 --min-dist 20000 --max-dist 200000 hic_data.cool output_prefix\n```\n"
      },
      "source": "https://raw.githubusercontent.com/koszullab/chromosight/master/README.md",
      "technique": "header_analysis"
    }
  ]
}