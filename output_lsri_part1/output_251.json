{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/thehanlab/dynamicLM"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-06-23T21:58:13Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-11T14:13:41Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9941571823051853,
      "result": {
        "original_header": "1 dynamicLM",
        "type": "Text_excerpt",
        "value": "\nThe goal of dynamicLM is to provide a simple framework to make dynamic\nw-year risk predictions, allowing for competing risks, time-dependent\ncovariates, and censored data.\n \n"
      },
      "source": "https://raw.githubusercontent.com/thehanlab/dynamicLM/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.935380840527276,
      "result": {
        "original_header": "2 What is landmarking and when is it used?",
        "type": "Text_excerpt",
        "value": "\u201cDynamic prediction\u201d involves obtaining prediction probabilities at\nbaseline and later points in time; it is essential for\nbetter-individualized treatment. Personalized risk is updated with new\ninformation and/or as time passes. \n<figure>\n<img src=\"man/figures/README-descrip.png\"\nalt=\"illustration of dynamic w-yearpredictions\" />\n<figcaption aria-hidden=\"true\">illustration of dynamic\nw-yearpredictions</figcaption>\n</figure> \nAn example is cancer treatment: we may want to predict a 5-year risk of\nrecurrence whenever a patient\u2019s health information changes. For example,\nwe can predict *w*-year risk of recurrence at baseline (time = 0) given\ntheir initial covariates *Z*(0) (e.g.,30 years old, on treatment), and\nwe can then predict *w*-year risk at a later point *s* given their\ncurrent covariates *Z*(*s*) (e.g., 30+*s* years old, off treatment).\nNote that here the predictions make use of the most recent covariate\nvalue of the patient. \nThe landmark model for survival data is a simple and powerful approach\nto dynamic prediction for many reasons: \n- **Time-varying effects** are captured by considering interaction terms\n  between the prediction (\u201clandmark\u201d) time and covariates\n- **Time-dependent covariates** can be used, in which case, for\n  prediction at landmark time *s*, the most updated value *Z*(*s*) will\n  be used. Note that covariates do not have to be time-dependent because\n  time-varying effects will be captured regardless.\n- **Competing risks** analysis can be performed. Here, we consider the\n  time-to-first-event (\u2018time\u2019) and the event type (\u2018cause\u2019). \nPutter and Houwelingen describe landmarking extensively\n[here](https://onlinelibrary.wiley.com/doi/10.1111/j.1467-9469.2006.00529.x)\nand [here](https://onlinelibrary.wiley.com/doi/full/10.1002/sim.5665). \nThe creation of the landmark model for survival data is built on the\nconcept of risk assessment times (i.e., landmarks) that span risk\nprediction times of interest. In this approach, a training dataset of\nthe study cohort is transformed into multiple censored datasets based on\na prediction window of interest and the predefined landmarks. A model is\nfit on these stacked datasets (i.e., supermodel), and dynamic risk\nprediction is then performed by using the most up-to-date value of a\npatient\u2019s covariate values.\n \n"
      },
      "source": "https://raw.githubusercontent.com/thehanlab/dynamicLM/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9916057740608772,
      "result": {
        "type": "Text_excerpt",
        "value": "- \n- [2 What is landmarking and when is it\n  used?](#what-is-landmarking-and-when-is-it-used)\n  - \n- \n  - \n  - \n  - \n  - \n  - \n"
      },
      "source": "https://raw.githubusercontent.com/thehanlab/dynamicLM/main/README.Rmd",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/thehanlab/dynamicLM/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/thehanlab/dynamicLM/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "thehanlab/dynamicLM"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "1 dynamicLM"
      },
      "source": "https://raw.githubusercontent.com/thehanlab/dynamicLM/main/README.Rmd",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/thehanlab/dynamicLM/main/man/figures/README-descrip.png"
      },
      "source": "https://raw.githubusercontent.com/thehanlab/dynamicLM/main/README.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/thehanlab/dynamicLM/main/man/figures/README-dynhr-1.png"
      },
      "source": "https://raw.githubusercontent.com/thehanlab/dynamicLM/main/README.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/thehanlab/dynamicLM/main/man/figures/README-calplot-1.png"
      },
      "source": "https://raw.githubusercontent.com/thehanlab/dynamicLM/main/README.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/thehanlab/dynamicLM/main/man/figures/README-unnamed-chunk-22-1.png"
      },
      "source": "https://raw.githubusercontent.com/thehanlab/dynamicLM/main/README.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/thehanlab/dynamicLM/main/man/figures/README-plotRisk-1.png"
      },
      "source": "https://raw.githubusercontent.com/thehanlab/dynamicLM/main/README.Rmd",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "2.1 Installation",
        "parent_header": [
          "2 What is landmarking and when is it used?"
        ],
        "type": "Text_excerpt",
        "value": "You can install the development version of `dynamicLM` from\n[GitHub](https://github.com/) with:\n\n``` r\n# install.packages(\"devtools\")\ndevtools::install_github(\"thehanlab/dynamicLM\")\n```\n\nPackage documentation can be found in [this\npdf](https://github.com/thehanlab/dynamicLM/blob/main/man/dynamicLM_0.3.0.pdf).\n"
      },
      "source": "https://raw.githubusercontent.com/thehanlab/dynamicLM/main/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.2 Build a super data set",
        "parent_header": [
          "3 Basic Example"
        ],
        "type": "Text_excerpt",
        "value": "We first note the outcome variables we are interested in, as well as\nwhich variables are fixed or landmark-varying. When there are no\nlandmark-varying variables, set `varying = NULL`.\n\n``` r\noutcome <- list(time = \"Time\", status = \"event\")\ncovars <- list(fixed = c(\"age.at.time.0\",\"male\",\"stage\",\"bmi\"),\n               varying = c(\"treatment\"))\n```\n\nWe will produce 5-year dynamic predictions of relapse (`w`). Landmark\ntime points (`lms`) are set as every year between 0 and 3 years to train\nthe model. This means we are only interested in prediction between 0 and\n3 years.\n\nWe will consider linear and quadratic landmark interactions with the\ncovariates (given by `func_covars = c(\"linear\", \"quadratic\")`) and the\nlandmarks (`func_lms = c(\"linear\", \"quadratic\")`). The covariates that\nshould have these landmark interactions are given in `pred_covars`.\n\n``` r\nw <- 60                    # risk prediction window (risk within time w)\nlms <- seq(0,36,by=6)      # landmarks on which to build the model\n\n# Choose variables that will have time interaction\npred_covars <- c(\"age\", \"male\", \"stage\", \"bmi\", \"treatment\") \n```\n\nWith this, we are ready to build the super data set that will train the\nmodel. We print intermediate steps for illustration.\n\nThere are three steps:\n\n1.  `stack_data()`: stacks the landmark data sets\n2.  An **optional** additional update for more complex columns that vary\n    with landmark-times: For example, here we update the value of age.\n3.  `add_interactions()`: Landmark time interactions are added, note the\n    additional columns created.\n\n*Note that these return an object of class `LMdataframe`. This has a\ncomponent `data` which contains the dataset itself.*\n\nWe illustrate the process in detail by printing the entries at each step\nfor one individual, ID1029.\n\n``` r\nrelapse[relapse$ID == \"ID1029\",]  \n#>       ID     Time event age.at.time.0 male stage  bmi treatment T_txgiven\n#> 7 ID1029 60.03288     0      62.25753    0     0 26.8         0      0.00\n#> 8 ID1029 60.03288     0      62.25753    0     0 26.8         1     12.96\n```\n\nWe first stack the datasets over the landmarks (see the new column \u2018LM\u2019)\nand update the treatment covariate. Note that one row is created for\neach landmark that the individual is still alive at. In this row, if\ntime is greater time than the landmark time plus the window, it is\ncensored at this value (this occurs in the first row, for example,\ncensored at 0+60), and the most recent value all covariates is used (in\nour case, only treatment varies).\n\n``` r\n# Stack landmark datasets\nlmdata <- stack_data(relapse, outcome, lms, w, covars, format = \"long\",\n                     id = \"ID\", rtime = \"T_txgiven\")\ndata <- lmdata$data\nprint(data[data$ID == \"ID1029\",])\n#>         ID     Time event age.at.time.0 male stage  bmi treatment T_txgiven LM\n#> 7   ID1029 60.00000     0      62.25753    0     0 26.8         0      0.00  0\n#> 73  ID1029 60.03288     0      62.25753    0     0 26.8         0      0.00  6\n#> 733 ID1029 60.03288     0      62.25753    0     0 26.8         0      0.00 12\n#> 736 ID1029 60.03288     0      62.25753    0     0 26.8         1     12.96 18\n#> 751 ID1029 60.03288     0      62.25753    0     0 26.8         1     12.96 24\n#> 786 ID1029 60.03288     0      62.25753    0     0 26.8         1     12.96 30\n#> 788 ID1029 60.03288     0      62.25753    0     0 26.8         1     12.96 36\n```\n\nWe then (optionally) update more complex LM-varying covariates. Here we\ncreate an age covariate, based on age at time 0.\n\n``` r\nlmdata$data$age <- lmdata$data$age.at.time.0 + lmdata$data$LM/12 # age is in years and LM is in months\ndata <- lmdata$data\nprint(data[data$ID == \"ID1029\",])\n#>         ID     Time event age.at.time.0 male stage  bmi treatment T_txgiven LM\n#> 7   ID1029 60.00000     0      62.25753    0     0 26.8         0      0.00  0\n#> 73  ID1029 60.03288     0      62.25753    0     0 26.8         0      0.00  6\n#> 733 ID1029 60.03288     0      62.25753    0     0 26.8         0      0.00 12\n#> 736 ID1029 60.03288     0      62.25753    0     0 26.8         1     12.96 18\n#> 751 ID1029 60.03288     0      62.25753    0     0 26.8         1     12.96 24\n#> 786 ID1029 60.03288     0      62.25753    0     0 26.8         1     12.96 30\n#> 788 ID1029 60.03288     0      62.25753    0     0 26.8         1     12.96 36\n#>          age\n#> 7   62.25753\n#> 73  62.75753\n#> 733 63.25753\n#> 736 63.75753\n#> 751 64.25753\n#> 786 64.75753\n#> 788 65.25753\n```\n\nLastly, we add landmark time-interactions. The `_1` refers to the first\ninteraction in `func_covars`, `_2` refers to the second interaction in\n`func_covars`, etc\u2026 Similarly, `LM_1` and `LM_2` are created from\n`func_lm`. Note that we use `pred_covars` here, defined earlier as the\ncovariates that will have landmark time interactions.\n\n``` r\nlmdata <- add_interactions(lmdata, pred_covars, func_covars = c(\"linear\", \"quadratic\"), \n                           func_lms = c(\"linear\", \"quadratic\")) \ndata <- lmdata$data\nprint(data[data$ID == \"ID1029\",])\n#>         ID     Time event age.at.time.0 male stage  bmi treatment T_txgiven LM\n#> 7   ID1029 60.00000     0      62.25753    0     0 26.8         0      0.00  0\n#> 73  ID1029 60.03288     0      62.25753    0     0 26.8         0      0.00  6\n#> 733 ID1029 60.03288     0      62.25753    0     0 26.8         0      0.00 12\n#> 736 ID1029 60.03288     0      62.25753    0     0 26.8         1     12.96 18\n#> 751 ID1029 60.03288     0      62.25753    0     0 26.8         1     12.96 24\n#> 786 ID1029 60.03288     0      62.25753    0     0 26.8         1     12.96 30\n#> 788 ID1029 60.03288     0      62.25753    0     0 26.8         1     12.96 36\n#>          age     age_1     age_2 male_1 male_2 stage_1 stage_2 bmi_1   bmi_2\n#> 7   62.25753    0.0000     0.000      0      0       0       0   0.0     0.0\n#> 73  62.75753  376.5452  2259.271      0      0       0       0 160.8   964.8\n#> 733 63.25753  759.0904  9109.085      0      0       0       0 321.6  3859.2\n#> 736 63.75753 1147.6356 20657.441      0      0       0       0 482.4  8683.2\n#> 751 64.25753 1542.1808 37012.340      0      0       0       0 643.2 15436.8\n#> 786 64.75753 1942.7260 58281.781      0      0       0       0 804.0 24120.0\n#> 788 65.25753 2349.2712 84573.764      0      0       0       0 964.8 34732.8\n#>     treatment_1 treatment_2 LM_1 LM_2\n#> 7             0           0    0    0\n#> 73            0           0    6   36\n#> 733           0           0   12  144\n#> 736          18         324   18  324\n#> 751          24         576   24  576\n#> 786          30         900   30  900\n#> 788          36        1296   36 1296\n```\n\nOne can print `lmdata`. The argument `verbose` allows for additional\nstored objects to be printed (default is FALSE).\n\n``` r\nprint(lmdata, verbose = TRUE)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/thehanlab/dynamicLM/main/README.Rmd",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/thehanlab/dynamicLM/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "YEAR: 2022\nCOPYRIGHT HOLDER: dynamicLM authors\n"
      },
      "source": "https://raw.githubusercontent.com/thehanlab/dynamicLM/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "dynamicLM"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "thehanlab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 98572,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/thehanlab/dynamicLM/main/README.Rmd"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/thehanlab/dynamicLM/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 00:01:20",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 10
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "3 Basic Example",
        "type": "Text_excerpt",
        "value": "This is a basic example which shows you how to use `dynamicLM` to make\ndynamic 5-year predictions and check calibration and discrimination\nmetrics.\n"
      },
      "source": "https://raw.githubusercontent.com/thehanlab/dynamicLM/main/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.1 Data",
        "parent_header": [
          "3 Basic Example"
        ],
        "type": "Text_excerpt",
        "value": "Data can come in various forms, with or without time-dependent\ncovariates:\n\n- Static data, with one entry per patient. Here, landmark time-varying\n  effects are still considered for dynamic risk prediction.\n- Longitudinal (long-form) data, with multiple entries for each patient\n  with updated covariate information.\n- Wide-form data, with a column containing the time at which the\n  covariate changes from 0 to 1.\n\nWe illustrate the package using the long-form example data set given in\nthe package. This gives the time-to-event of cancer relapse under two\ncompeting risks. Three fixed patient bio-markers are given as well (age\nat baseline, stage of initial cancer, bmi, male). A time-dependent\ncovariate treatment indicates if the treatment is on or off treatment\nand `T_txgiven` gives the time at which this patient entry was created.\n\n``` r\nlibrary(dynamicLM)\n#> Loading required package: dynpred\n#> Loading required package: survival\n#> Loading required package: prodlim\n#> Loading required package: riskRegression\n#> riskRegression version 2024.01.26\n```\n\n``` r\ndata(relapse)\ndim(relapse)\n#> [1] 989   9\n```\n\n``` r\nlength(unique(relapse$ID)) # There are 171 patients with two entries, i.e., one after time 0\n#> [1] 818\n```\n"
      },
      "source": "https://raw.githubusercontent.com/thehanlab/dynamicLM/main/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.3 Fit the super model",
        "parent_header": [
          "3 Basic Example"
        ],
        "type": "Text_excerpt",
        "value": "Now we can fit the model. We fit a model with all the covariates\ncreated. Note that `lmdata$all_covs` returns a vector with all the\ncovariates that have LM interactions and from `pred_covars`. Again, the\n`_1` refers to the first interaction in `func_covars`, `_2` refers to\nthe second interaction in `func.covars`, etc\u2026 `LM_1` and `LM_2` are\ncreated from `func_lms`.\n\n``` r\nall_covs <- lmdata$all_covs\nprint(all_covs)\n#>  [1] \"age\"         \"male\"        \"stage\"       \"bmi\"         \"treatment\"  \n#>  [6] \"age_1\"       \"age_2\"       \"male_1\"      \"male_2\"      \"stage_1\"    \n#> [11] \"stage_2\"     \"bmi_1\"       \"bmi_2\"       \"treatment_1\" \"treatment_2\"\n#> [16] \"LM_1\"        \"LM_2\"\n```\n\nIt is then easy to fit a landmark supermodel using `dynamic_lm()`. A\nformula, super dataset and method need to be provided. If the super\ndataset is not of class `LMdataframe` (i.e., is a self-created R\ndataframe), then additional parameters must be specified. In this case,\nsee the details section of the documentation of `add_interactions()` for\ninformation on how the landmark interaction terms must be named.\n\n``` r\nformula <- \"Hist(Time, event, LM) ~ age + male + stage + bmi + treatment + age_1 + age_2 + male_1 + male_2 + stage_1 + stage_2 + bmi_1 + bmi_2 + treatment_1 + treatment_2 + LM_1 + LM_2 + cluster(ID)\"\nsupermodel <- dynamic_lm(lmdata, as.formula(formula), \"CSC\") \n#> Warning in agreg.fit(X, Y, istrat, offset, init, control, weights = weights, :\n#> Loglik converged before variable 8,9 ; beta may be infinite.\nprint(supermodel)\n#> \n#> Landmark cause-specific cox super model fit for dynamic prediction of window size 60:\n#> \n#> $model\n#> ----------> Cause: 1\n#>                   coef  exp(coef)   se(coef)  robust se       z        p\n#> age          2.896e-02  1.029e+00  3.093e-02  3.433e-02   0.844  0.39893\n#> male         1.632e+00  5.112e+00  5.271e-01  5.254e-01   3.105  0.00190\n#> stage        8.954e-01  2.448e+00  2.685e-01  2.881e-01   3.108  0.00189\n#> bmi          2.262e-03  1.002e+00  2.403e-02  2.511e-02   0.090  0.92821\n#> treatment   -1.472e+00  2.295e-01  1.287e+00  1.345e+00  -1.094  0.27384\n#> age_1        4.573e-04  1.000e+00  4.384e-03  2.606e-03   0.175  0.86071\n#> age_2       -8.016e-05  9.999e-01  1.238e-04  7.297e-05  -1.098  0.27201\n#> male_1       1.453e-01  1.156e+00  1.083e-01  2.397e-02   6.064 1.33e-09\n#> male_2      -8.921e-03  9.911e-01  4.959e-03  8.159e-04 -10.934  < 2e-16\n#> stage_1      1.067e-02  1.011e+00  3.860e-02  2.052e-02   0.520  0.60302\n#> stage_2     -1.056e-03  9.989e-01  1.121e-03  5.840e-04  -1.807  0.07069\n#> bmi_1        1.340e-03  1.001e+00  3.385e-03  1.535e-03   0.873  0.38258\n#> bmi_2       -6.102e-05  9.999e-01  9.713e-05  3.813e-05  -1.600  0.10950\n#> treatment_1  1.503e-01  1.162e+00  1.150e-01  9.866e-02   1.524  0.12760\n#> treatment_2 -2.950e-03  9.971e-01  2.456e-03  1.885e-03  -1.565  0.11759\n#> LM_1        -7.468e-02  9.280e-01  2.784e-01  1.708e-01  -0.437  0.66195\n#> LM_2         6.981e-03  1.007e+00  7.837e-03  4.848e-03   1.440  0.14991\n#> \n#> Likelihood ratio test=63.51  on 17 df, p=2.741e-07\n#> n= 2787, number of events= 251 \n#> \n#> \n#> ----------> Cause: 2\n#>                   coef  exp(coef)   se(coef)  robust se      z        p\n#> age          3.047e-02  1.031e+00  9.707e-03  1.053e-02  2.894 0.003799\n#> male        -7.321e-03  9.927e-01  2.926e-01  3.284e-01 -0.022 0.982215\n#> stage       -1.346e-01  8.741e-01  9.742e-02  9.975e-02 -1.349 0.177310\n#> bmi         -4.412e-03  9.956e-01  8.547e-03  9.176e-03 -0.481 0.630639\n#> treatment    6.513e-01  1.918e+00  4.589e-01  4.592e-01  1.418 0.156087\n#> age_1        1.776e-03  1.002e+00  2.051e-03  1.884e-03  0.942 0.345945\n#> age_2       -3.555e-05  1.000e+00  6.811e-05  5.581e-05 -0.637 0.524153\n#> male_1       7.982e-01  2.222e+00  4.063e+01  2.136e-01  3.736 0.000187\n#> male_2      -1.592e-01  8.528e-01  6.771e+00  1.779e-02 -8.949  < 2e-16\n#> stage_1      1.550e-02  1.016e+00  2.038e-02  1.755e-02  0.883 0.377385\n#> stage_2     -9.016e-04  9.991e-01  6.987e-04  6.136e-04 -1.469 0.141745\n#> bmi_1       -1.082e-03  9.989e-01  1.725e-03  1.308e-03 -0.827 0.408164\n#> bmi_2       -1.624e-06  1.000e+00  5.694e-05  3.950e-05 -0.041 0.967194\n#> treatment_1 -5.332e-02  9.481e-01  4.928e-02  4.293e-02 -1.242 0.214307\n#> treatment_2  1.182e-03  1.001e+00  1.174e-03  9.039e-04  1.307 0.191124\n#> LM_1        -8.247e-02  9.208e-01  1.342e-01  1.175e-01 -0.702 0.482726\n#> LM_2         2.226e-03  1.002e+00  4.466e-03  3.534e-03  0.630 0.528756\n#> \n#> Likelihood ratio test=75.45  on 17 df, p=2.438e-09\n#> n= 2787, number of events= 1120\n```\n\nThere are additional ways of printing/accessing the model:\n\n``` r\n# E.g., of additional arguments to print\n# * cause: only print this cause-specific model\n# * verbose: show additional stored objects\nprint(supermodel, cause = 1, verbose = TRUE)\n\n# Coefficients can easily be accessed via\ncoef(supermodel)\n```\n\nDynamic hazard ratios can be plotted, either log hazard ratio or hazard\nratio using the argument `logHR`. Specifying the `covars` arguments\nallows for a subset of dynamic hazard ratios to be plotted.\n\n``` r\npar(mfrow = c(2,3))\nplot(supermodel)\n```\n\n<img src=\"man/figures/README-dynhr-1.png\" width=\"100%\" />\n\n``` r\n# To create only two plots:\nplot(supermodel, covars = c(\"age\", \"male\"))\n```\n"
      },
      "source": "https://raw.githubusercontent.com/thehanlab/dynamicLM/main/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.4.1 For the training data",
        "parent_header": [
          "3 Basic Example",
          "3.4 Obtain predictions"
        ],
        "type": "Text_excerpt",
        "value": "Predictions for the training data can easily be obtained. This provides\n*w*-year risk estimates for each individual at each of the training\nlandmarks they are still alive.\n\n``` r\np1 <- predict(supermodel)\nprint(p1)\n#> $preds\n#>   LM       risk\n#> 1  0 0.11514265\n#> 2  0 0.04641678\n#> 3  0 0.04639277\n#> 4  0 0.11005431\n#> 5  0 0.04485027\n#> 6  0 0.04585672\n#>  [ omitted 2782 rows ]\n```\n\nOne can print the predictions. The argument `verbose` allows for\nadditional stored objects to be printed (default is FALSE).\n\n``` r\nprint(p1, verbose = TRUE)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/thehanlab/dynamicLM/main/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.4.2 For new data",
        "parent_header": [
          "3 Basic Example",
          "3.4 Obtain predictions"
        ],
        "type": "Text_excerpt",
        "value": "A prediction is made for an individual at a specific prediction time.\nThus both a prediction (\u201clandmark\u201d) time (e.g., at baseline, at 2 years,\netc) and an individual (i.e., covariate values set at the landmark\ntime-point) must be given. Note that the model creates the landmark\ntime-interactions; the new data has the same form as in your original\ndataset. For example, we can prediction *w*-year risk from baseline\nusing an entry from the very original data frame.\n\n``` r\n# Individuals with covariate values at 0\nindividuals <- relapse[1:2, ]\nindividuals$age <- individuals$age.at.time.0\nindividuals$LM <- 0 # Prediction time\nprint(individuals)\n#>       ID       Time event age.at.time.0 male stage  bmi treatment T_txgiven\n#> 1 ID1007 62.6849315     0      60.25936    0     1 25.9         0         0\n#> 2  ID101  0.6575342     1      59.97808    0     0 29.3         0         0\n#>        age LM\n#> 1 60.25936  0\n#> 2 59.97808  0\n```\n\n``` r\np0 <- predict(supermodel, individuals, lms = \"LM\", cause = 1)\np0$preds\n#>   LM       risk\n#> 1  0 0.11514265\n#> 2  0 0.04641678\n```\n"
      },
      "source": "https://raw.githubusercontent.com/thehanlab/dynamicLM/main/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.5 Model evaluation/validation",
        "parent_header": [
          "3 Basic Example"
        ],
        "type": "Text_excerpt",
        "value": "Calibration plots, which assess the agreement between predictions and\nobservations in different percentiles of the predicted values, can be\nplotted for each of the landmarks used for prediction. Entering a named\nlist of prediction objects in the first argument allows for comparison\nbetween models. This list can be of supermodels or prediction objects\n(created by calling `predict()`).\n\n``` r\npar(mfrow = c(2, 3), pty = \"s\")\noutlist <- calplot(list(\"LM supermodel\" = p1), \n                    times = c(0,6,12,18,24,30), # landmarks to plot at\n                    method = \"quantile\", q=10,  # method for calibration plot\n                    # Optional plotting parameters to alter\n                    ylim = c(0, 0.36), xlim = c(0, 0.36), \n                    lwd = 1, xlab = \"Predicted Risk\", ylab = \"Observed Risk\", legend = F)\n```\n\n<img src=\"man/figures/README-calplot-1.png\" width=\"100%\" />\n\nPredictive performance can also be assessed using time-dependent dynamic\narea under the receiving operator curve (AUCt) or time-dependent dynamic\nBrier score (BSt).\n\n- AUCt is defined as the percentage of correctly ordered markers when\n  comparing a case and a control \u2013 i.e., those who incur the pr imary\n  event within the window w after prediction and those who do not.\n- BSt provides the average squared difference between the primary event\n  markers at time w after prediction and the absolute risk estimates by\n  that time point.\n\n``` r\nscores <- score(list(\"LM supermodel\" = p1),\n                     times = c(6, 12, 18, 24)) # landmarks at which to assess\nscores\n#> \n#> Metric: Time-dependent AUC (window 60)\n#> \n#> Results by model:\n#>      tLM         model    AUC  lower  upper\n#>    <num>        <fctr> <char> <char> <char>\n#> 1:     6 LM supermodel 61.808 51.891 71.726\n#> 2:    12 LM supermodel 60.855 50.447 71.262\n#> 3:    18 LM supermodel 61.374 51.034 71.714\n#> 4:    24 LM supermodel 55.188 43.949 66.427\n#> NOTE: Values are multiplied by 100 and given in %.\n#> NOTE: The higher AUC the better.\n#> NOTE: Predictions are made at time tLM for risk windows of length 60\n#> \n#> Metric: Time-dependent Brier Score (window 60)\n#> \n#> Results by model:\n#>      tLM         model  Brier  lower  upper\n#>    <num>        <fctr> <char> <char> <char>\n#> 1:     6    Null model  8.493  6.288 10.698\n#> 2:     6 LM supermodel  8.141  6.017 10.266\n#> 3:    12    Null model 11.152  8.420 13.883\n#> 4:    12 LM supermodel 10.639  7.945 13.333\n#> 5:    18    Null model 11.582  8.591 14.574\n#> 6:    18 LM supermodel 11.163  8.246 14.081\n#> 7:    24    Null model 11.494  8.231 14.758\n#> 8:    24 LM supermodel 11.467  8.247 14.687\n#> NOTE: Values are multiplied by 100 and given in %.\n#> NOTE: The lower Brier the better.\n#> NOTE: Predictions are made at time tLM for risk windows of length 60\n```\n\nThese results can also be plot with point wise confidence intervals.\nSetting `se = FALSE` in plot excludes the intervals.\n\n``` r\npar(mfrow = c(1, 2))\nplot(scores)\n```\n\n<img src=\"man/figures/README-unnamed-chunk-22-1.png\" width=\"100%\" />\n\n**Bootstrapping** can be performed by calling `calplot()` or `score()`\nand setting the arguments `split.method = \"bootcv\"` and `B = 10` (or\nhowever many bootstrap replications are desired). Note that the argument\n`x = TRUE` must be specified when fitting the model (i.e., when calling\n`dynamic_lm()`).\n\n``` r\n# Remember to fit the supermodel with argument 'x = TRUE'\nscores <- score(list(\"LM supermodel\" = supermodel),\n              times = c(0, 6),\n              split.method = \"bootcv\", B = 10)       # 10 bootstraps\n\npar(mfrow = c(1, 2))\noutlist <- calplot(list(\"LM supermodel\" = supermodel), \n                    times = c(0, 6),                 # landmarks to plot at\n                    method = \"quantile\", q = 10,     # calibration plot method\n                    split.method = \"bootcv\", B = 10, # 10 bootstraps\n                    # Optional plotting parameters to alter\n                    ylim = c(0, 0.36), xlim = c(0, 0.36), \n                    lwd = 1, xlab = \"Predicted Risk\", ylab = \"Observed Risk\", \n                    legend = FALSE)\n```\n\n**External validation** can be performed by specifying the supermodel as\nthe object argument and passing new data through the `data` argument.\nThis data can be a LMdataframe or a dataframe (in which case `lms` must\nbe specified). Alternatively, predictions can be made on new data using\n`predict()` and this object can be input.\n\n``` r\n# Use all data from baseline as \"new\" data\nnewdata <- relapse[relapse$T_txgiven == 0, ]\nnewdata$age <- newdata$age.at.time.0\nnewdata$LM <- 0 # specify the landmark time of the data points\n\npar(mfrow = c(1,1))\ncal <- calplot(list(\"CSC\" = supermodel), cause = 1, data = newdata, lms = \"LM\",\n               method = \"quantile\", q = 10, ylim = c(0, 0.1), xlim = c(0, 0.1))\n\nscore(list(\"CSC\" = supermodel), cause = 1, data = newdata, lms = \"LM\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/thehanlab/dynamicLM/main/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3.5.1 Visualize individual dynamic risk trajectories",
        "parent_header": [
          "3 Basic Example",
          "3.5 Model evaluation/validation"
        ],
        "type": "Text_excerpt",
        "value": "Individual risk score trajectories can be plotted. As with `predict()`,\nthe data input is in the form of the original data. For example, we can\nconsider two individuals of similar age, bmi, and treatment status at\nbaseline, but of different gender.\n\n``` r\nidx <- relapse$ID %in% c(\"ID2412\", \"ID1007\")\nrelapse[idx, ]\n#>         ID     Time event age.at.time.0 male stage  bmi treatment T_txgiven\n#> 1   ID1007 62.68493     0      60.25936    0     1 25.9         0      0.00\n#> 442 ID2412 43.35342     0      60.09132    1     0 24.1         0      0.00\n#> 443 ID2412 43.35342     0      60.09132    1     0 24.1         1     39.04\n```\n\nWe turn our data into long-form data to plot.\n\n*Note: we convert to long-form because of the age variable, wide-form\ndata can be used too if there are no complex variables involved.*\n\n``` r\n# Prediction time points \nx <- seq(0, 36, by = 6)\n\n# Stack landmark datasets\ndat <- stack_data(relapse[idx, ], outcome, x, w, covars, format = \"long\", \n                  id = \"ID\", rtime = \"T_txgiven\")$data\ndat$age <- dat$age.at.time.0 + dat$LM / 12 # age is in years and LM is in months\n\nhead(dat)\n#>          ID     Time event age.at.time.0 male stage  bmi treatment T_txgiven LM\n#> 1    ID1007 60.00000     0      60.25936    0     1 25.9         0         0  0\n#> 442  ID2412 43.35342     0      60.09132    1     0 24.1         0         0  0\n#> 11   ID1007 62.68493     0      60.25936    0     1 25.9         0         0  6\n#> 4421 ID2412 43.35342     0      60.09132    1     0 24.1         0         0  6\n#> 12   ID1007 62.68493     0      60.25936    0     1 25.9         0         0 12\n#> 4422 ID2412 43.35342     0      60.09132    1     0 24.1         0         0 12\n#>           age\n#> 1    60.25936\n#> 442  60.09132\n#> 11   60.75936\n#> 4421 60.59132\n#> 12   61.25936\n#> 4422 61.09132\n```\n\n``` r\nplotrisk(supermodel, dat, format = \"long\", ylim = c(0, 0.7), \n         x.legend = \"topright\")\n```\n\n<img src=\"man/figures/README-plotRisk-1.png\" width=\"100%\" />\n\nWe can see that the male has a higher and increasing 5-year risk of\nrecurrence that peaks around 1 year, and then rapidly decreases. This\ncan be explained by the dynamic hazard rate of being male (seen above).\nIn comparison, the 5-year risk of recurrent for the female remains\nrelatively constant.\n"
      },
      "source": "https://raw.githubusercontent.com/thehanlab/dynamicLM/main/README.Rmd",
      "technique": "header_analysis"
    }
  ]
}