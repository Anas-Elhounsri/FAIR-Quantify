{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jhnwu3/BioNetGMMFit"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-10-05T15:51:18Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-02-13T15:43:13Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Parameter Estimation of Rule Based Models."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9862457454049405,
      "result": {
        "original_header": "**BioNetGMMFit**",
        "type": "Text_excerpt",
        "value": "BioNetGMMFit (formerly CyGMM) is a C++ software designed for parameter estimation of BioNetGen models using Snapshot Data. \nIt takes into account both deterministic as well as stochastic models of evolution for estimating parameters.  \nFor those who are unfamiliar with the intuition behind generalized method of moments (GMM), please look [here](https://github.com/jhnwu3/BioNetGMMFit/blob/main/example/gmm_tutorial.ipynb) for a quick python tutorial.\n \n"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9093945990712194,
      "result": {
        "original_header": "**Important Note: Operating System**",
        "type": "Text_excerpt",
        "value": "The preferred beginner's method of using this software is through [Docker](https://docs.docker.com/get-started/) as the docker virtualization engine allows BioNetGMMFit to be compatible with all operating systems as well as reduces any operating system specific dependencies. \nHowever should computational performance be a major concern, the non-docker program has only been compiled and tested on debian Linux based systems, specifically the latest version of Ubuntu. \nKeep in mind, on Windows 10, there is a Windows Linux Subsystem that runs at a similar level of performance that you can enable in the operating system. A Youtube video I've found helpful to get Linux up and running on Windows can be found [here](https://www.youtube.com/watch?v=A0eqZujVfYU). This code has been tested successfully on Windows Linux Subsystem. This is arguably a simpler solution than going through the trouble of CMake to get this C++ code/program up and running on Windows.  \nMac's Unix based system should feasibly still work well with the BioNetGMMFit binary, but has been untested in this current iteration.\n \n"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9279425124517315,
      "result": {
        "original_header": "Quickstart  <a name=\"qstrt\"></a>",
        "type": "Text_excerpt",
        "value": "There are two ways to get BioNetGMMFit up and running, one if you're on Ubuntu and/or a Linux Based System and need maximum performance on an HPC, download the latest static binary from the static binary section, otherwise the preferred method is through docker. \nTo quickly get started with one of the simulated examples, do:\n \n"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9064312896825202,
      "result": {
        "original_header": "Docker  <a name=\"docker\"></a>",
        "type": "Text_excerpt",
        "value": "There is a docker image that can be easily pulled and run on any operating system from [here](https://hub.docker.com/r/jhnwu3/bngmm).  \nSimply highlight all of them by holding left click on all of the files and selecting them by clicking the open button. \n11. Wait approximately 20 - 30 seconds, and the browser page should update with something like this. \n"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9128282993038308,
      "result": {
        "original_header": "CMAKE Static Binary (Recommended for Linux/WSL and HPC Users) <a name=\"statbin\"></a>",
        "type": "Text_excerpt",
        "value": "\n2. In your bash terminal, pick a suitable directory for your liking and download [here](https://zenodo.org/record/7733865) \n    where /path/to/your/dir is the directory that is housing your unzipped build folder. For instance, if you're in the downloads folder, it'd be something like \n        \n        cd ~/Downloads/BNGMM_build/BNGMM_DockerBuild/buildroadrunner/roadrunner/build-release \n    For instance, if downloaded and unzipped in the Downloads directory, it might look like \n6. Unfortunately, the rebuilding of this distribution's libRoadRunner build package will most likely contain minor bugs with pathing, but fortunately, there's an easy fix. Please go to the new install-Release's cmake directory. \n\n    and  \n    If it errors, and says something about the Eigen library (i.e cannot #include<Eigen/Dense>), taken from [stackoverflow](https://stackoverflow.com/questions/23284473/fatal-error-eigen-dense-no-such-file-or-directory), the solution would be to, depending on the Linux distribution and version, \n12. As a final note, one can take out the BNGMM executable and throw it anywhere for use in any other directory. The rest of the directory can be discarded if space is a major concern. \n"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9690824766645071,
      "result": {
        "original_header": "*libRoadRunner/bionetgen* <a name=\"rr\"> </a>",
        "type": "Text_excerpt",
        "value": "and note that it is imperative that you have libRoadRunner installed as well, please look [here](https://libroadrunner.readthedocs.io/en/latest/Installation/installation.html)\n \n"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9298295683043649,
      "result": {
        "original_header": "Compilation <a name=\"compilation\"></a>",
        "type": "Text_excerpt",
        "value": "If you wish to modify the code for your own use or if the binary is not sufficient, a cmake has been provided in the /src directory. Fair warning this can be a tedious and bug-prone\nprocess, that being said, assuming you have installed all of **Boost** and **Eigen** libraries through the above, then you can simply just download a fully built roadrunner + CyGMM library\n[here (Defunct)](https://drive.google.com/drive/folders/1n6S7y2sf88mb_62evYO-RimbdT9FHMwh?usp=sharing). (outdated will remove section later) \n"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9431532465704016,
      "result": {
        "original_header": "Execution <a name=\"exe\"></a>",
        "type": "Text_excerpt",
        "value": "in your terminal. For more information about parameters and writing your own system, look below.\n \n"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9490512361627619,
      "result": {
        "original_header": "Program Inputs <a name=\"pin\"></a>",
        "type": "Text_excerpt",
        "value": "All data inputs are taken from the Data directory. By default, a set of randomly generated data points have been provided for the 3 species linear case for both X_0 and Y_0. For more run example data, look into the folder titled \nAll data must be loaded in csv format. \n \n"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9176698343490667,
      "result": {
        "original_header": "*Loading in data* <a name=\"indat\"></a>",
        "type": "Text_excerpt",
        "value": "If you want to load in the X, control, or time 0 data file, make sure to delete or move any pre-existing csv file located in the  \n    data/X  \ndirectory and move or copy in your own X.csv file into the directory. Similarly, make sure to move\nall Y_0 or Y_t data files into the directory listed as \n    data/Y  \nafter moving or removing any previous Yt/Y0 files. Keep in mind, that the number of species of proteins you wish to simulate will correspond to the number of columns in each input X/Y file and the number of rows correspond to the cell count. Furthermore, note that if you have multiple time data, please make sure to label each time point with a \"_tn\" time tag such that the order of files are loaded in with the appropriate time point i.e _t2 for time point 2. \nFurthermore, in docker to specify directories please do: \n    docker run -t BNGMM -x <X-dir-of-initial-conditions> -y <Y-dir-of-SnapshotData> \nFor more examples please take a look at the /example directory. The real data X and Y are labeled in the 4_prot_real folder. All real data was taken from \n[here](https://dpeerlab.github.io/dpeerlab-website/dremi-data.html), specifically the first CD8, CD28, and CD3 naive time series (third column, 1st row).\n \n"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9461187400427429,
      "result": {
        "original_header": "*Rate Constant Inputs* <a name=\"rcons\"></a>",
        "type": "Text_excerpt",
        "value": "If you decide to simulate the rate constants and therefore simulate Y_t instead of manually inputting Yt files, make sure to define your set of rate constants in the \"true_rates.csv\" file. For instance, by default \nis defined in the file, which defines the true set of rate constants as \"0.27678, 0.837, 0.44, 0.04, 0.30\".\n \n"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9804570248163595,
      "result": {
        "original_header": "*Time Inputs* <a name=\"tim\"></a>",
        "type": "Text_excerpt",
        "value": "Make sure to list your times for time evolutions in time_steps.csv rowwise. For a single time evolution, only two time points, the end and start time of your evolution interval, is needed in the file. \nHowever, especially in the nonlinear case where multiple time points and samples may be beneficial, simply list out each of the times evolved for rowwise, as shown below.\n    0\n    0.5\n    2\n    10\n    20\n    30\n \n"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9863090792399344,
      "result": {
        "original_header": "*Important Caveat*",
        "type": "Text_excerpt",
        "value": "One key thing to understand is every file in either the data/X or data/Y folders are read in alphabetical order. An error message and exit will output if the number of time steps do not match the number of Yt files. Make sure to label each file name in order of the time steps for proper loading. \n"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9092020899029724,
      "result": {
        "original_header": "*Configuration i.e Hyperparameter Inputs* <a name=\"config\"></a>",
        "type": "Text_excerpt",
        "value": "sets the number of particles in blind pso to 15. \n| Parameter                        | Value | Explanation                                                              |\n|----------------------------------|-------|--------------------------------------------------------------------------|\n| Number of Particles PSO          | 1000  | Sets number of particles in PSO                                          |\n| Number of Steps PSO              | 10    | Sets number of steps for  PSO                                            |\n| Exclude Mixed Moments?           | 0     | 1 to use only means and variances, 0 otherwise                           |\n| Exclude Mixed and Second Moments?| 0     | 1 to use only means, 0 otherwise                                         |\n| Number of Runs                   | 1     | Sets total number of PSO runs for estimation                             |\n| Simulate Y_t?                    | 1     | 1 to simulate Yt with a true rate vector, 0 to provide own Yt matrix     |\n| Use Matrix Inverse?              | 0     | 1 to use C++'s Matrix Inverse, 0 otherwise                               |\n| Number of Rates                  | 5     | Sets number of parameters to be estimated                                |\n| Hypercube Dimension              | 1.0   | Real Value Bounds of Hypercube to be searched in PSO.                    |\n| Report Moments?                  | 1     | 1 to report predicted moments in out.txt                                 |\n| Bootstrap?                       | 1     | 1 to estimate 95% CI's, 0 otherwise                                      |   \n| Use Deterministic?               | 1     | 1 to use CVode integrators, 0 to use roadrunner gillespie simulation     |\n| Number of BNGL Steps             | 15    | Tuning Parameter for number of steps of integration                      |\n| Seed                             | -1    | Used to seed the PSO, Off when seed < 0, On when seed > 0                |\n| Parallel Number of Threads       | 8     | Number of threads to parallelize on.                                     |\n| Initial Particle Best Weight     | 3.0   | How much historical weight (i.e last known particle position) to affect PSO step.|\n| Global Best Weight               | 1.0   | How much weight best particle affects next PSO Step.                     |\n| Particle Inertial Weight         | 6.0   | PSO Particle Inertia Component (to avoid local minima)                   | \n\nBy default, the PSO runs with all moments, with means, variances, and covariances. Currently, there are only two other options for specifying which estimators to use. For instance, set \nto use means and second moments only while \n    Exclude Mixed and Second Moments?, 1 \nwill force the program to estimate rate constants using means only. All boolean options such as \"Use Linear Model?\" are set to on with 1, and set to off with 0.  \nFinally, regarding holding parameter or rate constant values, these are currently only enabled for the nonlinear system where it's necessary for accurate estimation. \n \n"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9046523769401332,
      "result": {
        "original_header": "** Defining a Model in BioNetGen ** <a name=\"bngl\"></a>",
        "type": "Text_excerpt",
        "value": "One key note of importance is that this piece of code is not a full merger of BioNetGen and CyGMM (PSO + GMM). The reality is that all BNGL written is directly converted into sbml such that there are two key notes of importance:  \nWith that being said, let's delve into a quick example. Start by creating a model.bngl file. If you're using VScode, this is relatively painless as shown below. \nOnce created, open the file and start your model up with: \n"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8860021038329644,
      "result": {
        "original_header": "Defining Proteins of Interest <a name=\"poi\"></a>",
        "type": "Text_excerpt",
        "value": "Please note that should one need to define proteins that have not been observed with some initial values. They can simply just define their presence with their values normally as shown above. However, the user will need to specify a text .txt file to BioNetGMMFit with the proteins that have been observed in order. In this case, make sure to include in the .txt file their observables name. For instance, if I only observed pCD3z() and pS6() in the data such that pCD3z() was column 1 and pS6() was column 2 in the data files, we would specify in the poi.txt file: \nand then call BioNetGMMFit with the -p tag as such. \nExample BioNetGen Models and their .bngl files can be found in example/ such as the one seen with /6_pro_nonlin_sim_slim/6pro.bngl.\nMore documentation of BioNetGen can be found [here](http://bionetgen.org/) \n"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8983828938886401,
      "result": {
        "original_header": "*BNGMM*",
        "type": "Text_excerpt",
        "value": "Main Directory with general configuration files and system.cpp code files.\n \n"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8370264164313831,
      "result": {
        "original_header": "*src*",
        "type": "Text_excerpt",
        "value": "Contains all C++ source and header files needed to recompile the program.\n \n"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jhnwu3/BioNetGMMFit/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/example/gmm_tutorial.ipynb"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/example/gmm_tutorial.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jhnwu3/BioNetGMMFit/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "jhnwu3/BioNetGMMFit"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BioNetGMMFit"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/l3p_confidence_intervals.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/src/test.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/doc/run.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/doc/run_4pro.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/doc/graph.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/doc/install.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/doc/run_container.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/doc/ssa_6pro.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/doc/run_6pro.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main//img/bnglStart.png"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main//img/dockerdesktop.png"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main//img/WebUI.png"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main//img/BrowseButton.png"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main//img/FileUpload.png"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main//img/uploadButton.png"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main//img/Submit.png"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main//img/uploaded.png"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main//img/UIConfig.png"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main//img/FullyConfigured.png"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main//img/Run.png"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main//img/dockerRun.png"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main//img/uiResults.png"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main//img/CommandLineArguments.png"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9891003861756276,
      "result": {
        "original_header": "**Important Note: Operating System**",
        "type": "Text_excerpt",
        "value": "However should computational performance be a major concern, the non-docker program has only been compiled and tested on debian Linux based systems, specifically the latest version of Ubuntu. \nKeep in mind, on Windows 10, there is a Windows Linux Subsystem that runs at a similar level of performance that you can enable in the operating system. A Youtube video I've found helpful to get Linux up and running on Windows can be found [here](https://www.youtube.com/watch?v=A0eqZujVfYU). This code has been tested successfully on Windows Linux Subsystem. This is arguably a simpler solution than going through the trouble of CMake to get this C++ code/program up and running on Windows.  \n"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9992551304719384,
      "result": {
        "original_header": "Quickstart  <a name=\"qstrt\"></a>",
        "type": "Text_excerpt",
        "value": "There are two ways to get BioNetGMMFit up and running, one if you're on Ubuntu and/or a Linux Based System and need maximum performance on an HPC, download the latest static binary from the static binary section, otherwise the preferred method is through docker. \n"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9769178232752139,
      "result": {
        "original_header": "Docker  <a name=\"docker\"></a>",
        "type": "Text_excerpt",
        "value": "1. Install docker [here](https://docs.docker.com/get-docker/)  \nIf you're on Windows, you will have to install WSL first, which will simply require you to open power shell as an administrator and inputting: \n    wsl --install \nFor more information for Windows Linux Subsystem, see [here](https://learn.microsoft.com/en-us/windows/wsl/install). If you're not already familiar with a terminal/console, then please do see here [here](https://www.youtube.com/watch?v=A0eqZujVfYU) for how to setup a linux kernel on Windows. Setting up a linux based terminal will allow you to perform the following steps. \n2. Pull image from dockerhub, in your command line (bash, linux terminal if on Windows, etc.), input  \n3. Run docker image in terminal \n    If you have docker desktop setup, you should be able to see the program's running logs as shown below.\n    ![Step 3](/img/dockerdesktop.png) \n\n5. Now, let's get started with a basic example, please download the folder from [here](https://github.com/jhnwu3/BioNetGMMFit-Example) or do \n    git clone https://github.com/jhnwu3/BioNetGMMFit-Example.git \nin one of your preferred directories, i.e a download folder, etc. \n6. Now, to upload the necessary files, first click on the \"Browse...\" button, as shown below \n7. Then, a file explorer button should open up, this will change depending on which operating system you are on. If windows, it will look like below.\n    \n    ![Step 7](/img/FileUpload.png) \n8. Once uploaded, you will see the uploaded files listed below.\n![Step 8](/img/uploaded.png) \nIf you have docker desktop installed, its terminal view should show something like this.\n![RunD](/img/dockerRun.png) \n"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9737593948366832,
      "result": {
        "original_header": "CMAKE Static Binary (Recommended for Linux/WSL and HPC Users) <a name=\"statbin\"></a>",
        "type": "Text_excerpt",
        "value": "1. Get prerequisites for compiling. \n        sudo apt-get install -y build-essential git cmake autoconf libtool pkg-config libncurses5-dev libeigen3-dev libboost-all-dev python3 python3-pip && \\\n        pip install bionetgen matplotlib flask \n\n2. In your bash terminal, pick a suitable directory for your liking and download [here](https://zenodo.org/record/7733865) \n    and make sure to unzip the zip file. \n        unzip BNGMM_Build.zip \n3. To run BNGMM (Ubuntu and WSL Ubuntu users only) \n        cd BNGMM_Build/BNGMM_DockerBuild/BNGMM\n        ./BNGMM -h  \n\n4. If you have executable errors and most likely are on a separate linux distribution (i.e redhat), we will need to recompile the executable. So, first make sure you're in the build-release directory. \n        cd /path/to/your/dir/BNGMM_build/BNGMM_DockerBuild/buildroadrunner/roadrunner/build-release \n    where /path/to/your/dir is the directory that is housing your unzipped build folder. For instance, if you're in the downloads folder, it'd be something like \n        \n        cd ~/Downloads/BNGMM_build/BNGMM_DockerBuild/buildroadrunner/roadrunner/build-release \n5. cmake build to reset all build-targets to your local directory. \n        cmake -DCMAKE_INSTALL_PREFIX=\"../install-Release\" -DLLVM_INSTALL_PREFIX=\"full/path/to/dir/llvm13-ubuntu-gcc10-rel\" -DRR_DEPENDENCIES_INSTALL_PREFIX=\"../../libroadrunner-deps/install-Release\" -DCMAKE_BUILD_TYPE=\"Release\" .. \n        cmake --build . --target install --config Release  \n        cmake -DCMAKE_INSTALL_PREFIX=\"../install-Release\" -DLLVM_INSTALL_PREFIX=\"/home/user/Downloads/BNGMM_Build/BNGMM_DockerBuild/buildroadrunner/llvm13-ubuntu-gcc10-rel\" -DRR_DEPENDENCIES_INSTALL_PREFIX=\"../../libroadrunner-deps/install-Release\" -DCMAKE_BUILD_TYPE=\"Release\" .. \n    Now, one might run into errors in the process of compilation (i.e cannot find LLVM or something like that), which we will explain how to resolve below. \n6. Unfortunately, the rebuilding of this distribution's libRoadRunner build package will most likely contain minor bugs with pathing, but fortunately, there's an easy fix. Please go to the new install-Release's cmake directory. \n        cd ../install-Release/lib/cmake  \n7. Now open the ImportRoadrunnerAndDependencies.cmake file with your preferred text editor. \n        vi ImportRoadrunnerAndDependencies.cmake  \n    where you will see something like the following below, \n        find_package(Threads) # for libxml2, FindThreads.cmake is shipped with cmake\n        find_package(LibLZMA) # for libxml2, LibLZMA.cmake is shipped with cmake\n        find_package(zlib CONFIG REQUIRED)\n        find_package(bzip2 CONFIG REQUIRED)\n        find_package(iconv CONFIG REQUIRED)\n        find_package(LibXml2 CONFIG REQUIRED)\n        find_package(libsbml-static CONFIG REQUIRED)\n        find_package(rr-libstruct CONFIG REQUIRED)\n        find_package(clapack CONFIG REQUIRED)\n        find_package(nleq1 CONFIG REQUIRED)\n        find_package(nleq2 CONFIG REQUIRED)\n        find_package(PocoFoundation CONFIG REQUIRED)\n        find_package(PocoNet CONFIG REQUIRED)\n        find_package(PocoXML CONFIG REQUIRED)\n        find_package(Sundials CONFIG REQUIRED)\n        find_package(LLVM REQUIRED)\n        find_package(roadrunner-static CONFIG REQUIRED)\n        find_package(roadrunner CONFIG REQUIRED)\n        find_package(roadrunner_c_api CONFIG REQUIRED) \n        find_package(libsbml-static CONFIG REQUIRED)\n    \n    To \n        find_package(sbml-static CONFIG REQUIRED) \n        find_package(sundials CONFIG REQUIRED) \n        find_package(SUNDIALS CONFIG REQUIRED) \n    or just copy and paste the following into the ImportRoadrunnerAndDependencies.cmake file \n        find_package(Threads) # for libxml2, FindThreads.cmake is shipped with cmake\n        find_package(LibLZMA) # for libxml2, LibLZMA.cmake is shipped with cmake\n        find_package(zlib CONFIG REQUIRED)\n        find_package(bzip2 CONFIG REQUIRED)\n        find_package(iconv CONFIG REQUIRED)\n        find_package(LibXml2 CONFIG REQUIRED)\n        find_package(sbml-static CONFIG REQUIRED)\n        find_package(rr-libstruct CONFIG REQUIRED)\n        find_package(clapack CONFIG REQUIRED)\n        find_package(nleq1 CONFIG REQUIRED)\n        find_package(nleq2 CONFIG REQUIRED)\n        find_package(PocoFoundation CONFIG REQUIRED)\n        find_package(PocoNet CONFIG REQUIRED)\n        find_package(PocoXML CONFIG REQUIRED)\n        find_package(SUNDIALS CONFIG REQUIRED)\n        find_package(LLVM REQUIRED)\n        find_package(roadrunner-static CONFIG REQUIRED)\n        find_package(roadrunner CONFIG REQUIRED)\n        find_package(roadrunner_c_api CONFIG REQUIRED) \n10. Go to the BNGMM src directory and compile the executable \n        cd ../../../../../BNGMM/src\n        cmake .\n        make \n        cd /usr/local/include\n        sudo ln -sf eigen3/Eigen Eigen\n        sudo ln -sf eigen3/unsupported unsupported \n        cd /usr/include\n        sudo ln -sf eigen3/Eigen Eigen\n        sudo ln -sf eigen3/unsupported unsupported \n11. Exit the src directory and run the options screen for all possible commands \n        cd ..\n        ./BNGMM -h  \n"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9995231815762734,
      "result": {
        "original_header": "*Eigen* <a name=\"eig\"></a>",
        "type": "Text_excerpt",
        "value": "BNGMMFit uses the Eigen 3.3.9 C++ linear algebra library for matrix computations on Linux. If on Ubuntu, you can do a quick install using: \n    sudo apt install libeigen3-dev \notherwise you can see more detailed install instructions [here](https://eigen.tuxfamily.org/dox/GettingStarted.html)\n \n"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9992598246706557,
      "result": {
        "original_header": "*Boost* <a name=\"bst\"></a>",
        "type": "Text_excerpt",
        "value": "Snapshot uses the Boost 1.7.2 odeint C++ library for ODE estimations for nonlinear systems. To install the whole boost C++ library, you can try: \n    sudo apt-get install libboost-all-dev \n"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999768376546216,
      "result": {
        "original_header": "*libRoadRunner/bionetgen* <a name=\"rr\"> </a>",
        "type": "Text_excerpt",
        "value": "The program uses a python library called bionetgen. Please make sure you have python installed from instructions [here](https://www.python.org/downloads/).\nPlease make sure to have bionetgen(https://bionetgen.org/) installed through  \n    pip install bionetgen \n"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.98183371942012,
      "result": {
        "original_header": "Compilation <a name=\"compilation\"></a>",
        "type": "Text_excerpt",
        "value": "If you wish to modify the code for your own use or if the binary is not sufficient, a cmake has been provided in the /src directory. Fair warning this can be a tedious and bug-prone\nprocess, that being said, assuming you have installed all of **Boost** and **Eigen** libraries through the above, then you can simply just download a fully built roadrunner + CyGMM library\n[here (Defunct)](https://drive.google.com/drive/folders/1n6S7y2sf88mb_62evYO-RimbdT9FHMwh?usp=sharing). (outdated will remove section later) \n    cd src \nRun\n    \n    cmake .\n    make \n"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8852522751816856,
      "result": {
        "original_header": "Execution <a name=\"exe\"></a>",
        "type": "Text_excerpt",
        "value": "To run the program, simply enter \n"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9496630167458322,
      "result": {
        "original_header": "Program Inputs <a name=\"pin\"></a>",
        "type": "Text_excerpt",
        "value": "provided in this repo. \n"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9088966912339963,
      "result": {
        "original_header": "*Loading in data* <a name=\"indat\"></a>",
        "type": "Text_excerpt",
        "value": "If you want to load in the X, control, or time 0 data file, make sure to delete or move any pre-existing csv file located in the  \ndirectory and move or copy in your own X.csv file into the directory. Similarly, make sure to move\nall Y_0 or Y_t data files into the directory listed as \nor if statically compiled \n"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8705232592777846,
      "result": {
        "original_header": "*Configuration i.e Hyperparameter Inputs* <a name=\"config\"></a>",
        "type": "Text_excerpt",
        "value": "To set the parameters you want for your estimation run, double click or open the \n"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8845013485056585,
      "result": {
        "original_header": "** Defining a Model in BioNetGen ** <a name=\"bngl\"></a>",
        "type": "Text_excerpt",
        "value": "Now let's define the reaction rules. \n"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9117597622716642,
      "result": {
        "original_header": "Defining Proteins of Interest <a name=\"poi\"></a>",
        "type": "Text_excerpt",
        "value": "    ./BNGMM -p poi.txt \nOther command line arguments can be shown in the table below. \n"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9397261072504837,
      "result": {
        "original_header": "*BNGMM*",
        "type": "Text_excerpt",
        "value": "Main Directory with general configuration files and system.cpp code files.\n \n"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8539499897967665,
      "result": {
        "original_header": "CMAKE Static Binary (Recommended for Linux/WSL and HPC Users) <a name=\"statbin\"></a>",
        "type": "Text_excerpt",
        "value": "        unzip BNGMM_Build.zip \n"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8002862957075261,
      "result": {
        "original_header": "Compilation <a name=\"compilation\"></a>",
        "type": "Text_excerpt",
        "value": "First unzip the folder, doing \n"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8386843422874792,
      "result": {
        "original_header": "Program Inputs <a name=\"pin\"></a>",
        "type": "Text_excerpt",
        "value": "    example \nAll data must be loaded in csv format. \n \n"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8125450669457036,
      "result": {
        "original_header": "*Configuration i.e Hyperparameter Inputs* <a name=\"config\"></a>",
        "type": "Text_excerpt",
        "value": "    Config.csv \n"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jhnwu3/BioNetGMMFit/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021 John Wu\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BioNetGMMFit"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "jhnwu3"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 2549317,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 345270,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 123395,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 35797,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 30540,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 26478,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 13820,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 2097,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "TypeScript",
        "size": 343,
        "type": "Programming_language",
        "value": "TypeScript"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://libroadrunner.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "*(not updated to match most recent C++ version)* Mounting Volumes and Running Command Line Version of BNGMM Docker",
        "parent_header": [
          "Table of Contents",
          "**Directory Structure (In Progress)** ## <a name=\"dir\"></a>"
        ],
        "type": "Text_excerpt",
        "value": "  \nMounting Volumes to Write/Feed in Own Configuration Files (in the process of writing a python script to run this process with docker), do:\n\n    docker run --rm -v $PWD:/data jhnwu3/bngmm -c /data/Config4pro.csv -m /data/4proV2.bngl -t /data/time_steps4.csv -x /data/X -y /data/Y -o /data\n\nNote each directory and observe which each parameter corresponds to.\n\n    For more information see [here](https://docs.docker.com/storage/volumes/) on how to mount a drive to be able to input configuration and data files.\n\n"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:52:25",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Simple Example",
        "parent_header": [
          "Table of Contents",
          "Execution <a name=\"exe\"></a>"
        ],
        "type": "Text_excerpt",
        "value": "Examples of parameter estimation tasks and models are in the example/ directory of the repo. In particular, the ones used in the [Software Paper](https://www.biorxiv.org/content/10.1101/2022.12.08.519526v1) (revision in progress as of 5/3/2023 so may be outdated currently) were of the linear 6 protein model under the \"6_pro_lin_sim/\" or \"l6p_5p_sim/\" directories, the yeast nonlinear model under \"yeast/\" directory, the 6 protein nonlinear model under \"6_pro_nonlinear_slim/\" directory, and the CD8+ T cell problem under \"4_prot_CD3_CD8_CD28/\". Please note that each directory should contain two directories, \"X/\" and \"Y/\" with their respective time snapshot data files, each should contain some .bngl file that would be ran for parameter estimation, and each should contain a time_steps.csv file that defines the time points of evolution that are being analyzed. Some directories also contain a true_rates.csv file that contain the rate constants (in order i.e topmost value corresponds to the first rate constant defined in the .bngl file) that were used for simulating the data (for examples containing simulated datasets). \n\nAn example of one running BioNetGMMFit for a simple linear 3 protein problem (in CLI form) would be the following\n\n    ./BNGMM -m example/3_prot_linear_sim/model.bngl -x example/3_prot_linear_sim/X -y example/3_prot_linear_sim/Y -t example/3_prot_linear_sim/time_steps.csv -r example/3_prot_linear_sim/true_rates.csv -c example/3_prot_linear_sim/Config.csv -o test/l3p/ --contour k1 k2\n\nwhere it will run parameter estimation and save the results to the test/l3p/ directory. It will generate some contour plots as well and simulate the data at the given time steps in the time_steps.csv file. \n"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "*example*",
        "parent_header": [
          "Table of Contents",
          "**Directory Structure (In Progress)** ## <a name=\"dir\"></a>"
        ],
        "type": "Text_excerpt",
        "value": "Contains various examples for use with the linear and nonlinear system provided by default in the program / code. There should be codes associated with them. The 4 protein CD8 T Cell data was sourced from [here](https://dpeerlab.github.io/dpeerlab-website/dremi-data.html).\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/jhnwu3/BioNetGMMFit/main/README.md",
      "technique": "header_analysis"
    }
  ]
}