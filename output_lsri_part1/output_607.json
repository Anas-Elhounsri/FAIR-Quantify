{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/gem-net/chemsearch"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-05-01T20:07:21Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-08-14T20:35:50Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Create, browse, and search your team's compounds library."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9921148275634355,
      "result": {
        "original_header": "chemsearch",
        "type": "Text_excerpt",
        "value": "Chemsearch is web application used to create, browse, and search a chemical \ncompounds library. Powered by the cheminformatics toolkit `rdkit`, Chemsearch \nextracts molecular structure from a collection of MOL files, gathers metadata, \nand provides an interface for exploring the library of compounds. To search \nwithin the library, Chemsearch offers 'search by similarity' and 'search by \nsubstructure', taking queries in the form of molecular structure drawings \n(using a molecule editor from Kekule.js) or as SMILES or SMARTS strings. Each\ncompound has a dedicated page which shows molecular structure, summary data, a \nfile listing for the corresponding data folder, and custom information (provided\nas a Google Doc, markdown file or other text file). \nChemsearch can work with a Google Workspace / G Suite account for extended functionality.\nThe app can work with libraries stored in a Google Shared Drive \n(in DRIVE mode) or with a local folder (default mode). Optional access control \nis provided in AUTH mode, with a Google OAuth login page that restricts access \nto members of a specified Google Group. \n"
      },
      "source": "https://raw.githubusercontent.com/gem-net/chemsearch/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.932674537763242,
      "result": {
        "original_header": "The env file",
        "type": "Text_excerpt",
        "value": "The env file is used to specify non-default options via environment variables:\n- root directory for local compounds library (LOCAL_DB_PATH)\n- app title, for banner (APP_TITLE, default 'Chemsearch')\n- DRIVE mode status, for use with Google Shared Drive (USE_DRIVE, default 'off')\n- AUTH mode status (on/off), for authentication with Google OAuth (USE_AUTH, default 'off')\n- Flask environment mode (development vs production), if serving using \n  `flask` application server (FLASK_ENV, default 'production').\n- Fingerprint for similarity matching (SIM_FINGERPRINT, default 'Morgan').\n- Coefficient for similarity matching (SIM_COEFFICIENT, default 'Dice').\n  \nTo use Shared Drive and/or Authentication modes, you will need to [set up a \nGoogle Workspace](#google-workspace-setup) and provide some additional env \nvariables. In the Google-specific variable list below, a tick below means the \nvariable is required: \nNotes\n1. User email in your domain, whose privileges will be mirrored by service \n   account. For DRIVE mode, this user must have access to the Shared Drive. For \n   AUTH mode, the user must have access to the Google Group. This user will be \n   granted admin status.\n2. You can get the Drive ID from the end of the Shared Drive URL, e.g. \n   https://drive.google.com/drive/u/1/folders/ABCDEFG123456789\n3. Client and secret correspond to OAuth credentials generated at \n   https://console.developers.google.com/\n4. The Group key/ID is shown at the end of the group's URL in the G Suite admin \n   panel, e.g. https://admin.google.com/ac/groups/012345abcde \n"
      },
      "source": "https://raw.githubusercontent.com/gem-net/chemsearch/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9828848932904695,
      "result": {
        "original_header": "Providing custom data for a compound",
        "type": "Text_excerpt",
        "value": "Chemsearch can display 'custom data' on a compound page, extracting text\nfrom (in decreasing order of priority) a Google Doc (in DRIVE mode), markdown, \nor other text file in the compound folder. Rich formatting in Google Docs and \nMarkdown files are preserved by conversion to HTML. \n"
      },
      "source": "https://raw.githubusercontent.com/gem-net/chemsearch/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9298793285435274,
      "result": {
        "original_header": "Building your library",
        "type": "Text_excerpt",
        "value": "Chemsearch is minimally prescriptive in how you structure your library, with \nonly the following requirements (which apply to both the 'local' and 'DRIVE' \nversions:\n- the top level folder contains 'category' folders \u2014 a way to offer basic \n  categorization and filtering in the Chemsearch browser. \n- each compound gets its own folder within a category folder, and the name of \n  this folder determines the compound name.\n- Each compound folder must have a MOL file, to store its 2-D structure. \nAdditional files and folders associated with compounds can be nested within \ncompound folders as desired.\n \n"
      },
      "source": "https://raw.githubusercontent.com/gem-net/chemsearch/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/gem-net/chemsearch/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/gem-net/chemsearch/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "gem-net/chemsearch"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "chemsearch"
      },
      "source": "https://raw.githubusercontent.com/gem-net/chemsearch/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gem-net/chemsearch/master/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/gem-net/chemsearch/master/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gem-net/chemsearch/master/src/chemsearch/app/static/schematic.png"
      },
      "source": "https://raw.githubusercontent.com/gem-net/chemsearch/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing the dependencies and `chemsearch` executable",
        "parent_header": [
          "chemsearch",
          "Getting started",
          "Manual installation"
        ],
        "type": "Text_excerpt",
        "value": "Chemsearch requires Python 3.6 and above, plus a number of third-party Python packages, \nand rdkit. The easiest way to install everything is with Conda. Conda can set up a\nsuitable Python virtual environment for use with Chemsearch and install rdkit, all\nwith a single command. \n1. If you don't have `conda` on your system, install [Miniconda](https://docs.conda.io/en/latest/miniconda.html).  \n2. Clone or [download](https://github.com/gem-net/chemsearch/archive/master.zip) \n  the Chemsearch repository, and unzip it somewhere convenient for long-term storage\n  \u2014your Python environment will store a link to the folder as part of installation.\n3. In your terminal, navigate to the folder and run the following to create a \n  conda virtual environment with all dependencies:\n   ```bash\n   conda env create -n chemsearch -f environment.yaml\n   ```\n    - or to create an environment precisely mimicking a tested version, specify \n    `environment.lock.yaml` instead of `environment.yaml` above. \n4. Activate the new environment with `conda activate chemsearch`. (This environment\n  will need to be activated each time you want to run Chemsearch.)\n5. Install the chemsearch package by running `python setup.py develop`. This \n    will add a `chemsearch` CLI executable to your PATH that you can use to \n    configure and run your Chemsearch server.\n6. (Optional) To bypass app configuration and import a demo library for use with the app, run \n  `chemsearch build`. This demo library will be available for browsing when you \n  start the server.\n\n"
      },
      "source": "https://raw.githubusercontent.com/gem-net/chemsearch/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Google Workspace setup",
        "parent_header": [
          "chemsearch",
          "Customization"
        ],
        "type": "Text_excerpt",
        "value": "To use Shared Drive and/or Authentication modes, you will need a \n[Google Workspace](https://workspace.google.com/) / G Suite account. \nThe 'G Suite for Education' edition is free for academic institutions, otherwise \na Business Standard plan (or higher) will be required to create Shared Drives \n(for DRIVE mode). The premium plans (which offer a free trial period) charge \nbased on the number of users, but for Chemsearch only one official user is required: \na user to create a Google Group (for AUTH mode) and a Shared Drive (for DRIVE mode).\nThe members of the Google Group and Shared Drive can all use free Google accounts.   \n\nTo sign up for a Workspace account, you'll need to register a domain \n(e.g. example.com) and verify your ownership of the domain with Google. The \nremaining steps are as follows:\n1. Create a [Google Group](https://admin.google.com/ac/groups), with suitable \n  address e.g. 'everyone@example.com', adding members by email address (either free \n  Google-associated accounts or addresses in your domain).\n2. (For DRIVE mode) Create a [Shared Drive](https://support.google.com/a/users/answer/9310249) \n  at [https://drive.google.com/], with a suitable name (e.g. 'Compounds Library'). \n  Add the Google Group as a 'member' of the Drive with read/write access. This \n  means that everyone in the Group will have immediate access, and permissions can be \n  granted and revoked by updating the Google Group members list.\n3. At http://console.cloud.google.com/, create a new project, called e.g. Chemsearch.\n  Here you'll enable Google APIs and create the credentials used to access them. \n  Under APIs & Services > Library, find and enable the following APIs: \n  Google Drive API (for DRIVE), Google People API (for AUTH), Admin SDK API (for AUTH).\n4. Follow [instructions to create a service account](https://developers.google.com/identity/protocols/oauth2/service-account)\n   with 'domain-wide authority', with a JSON credentials file. In the process, \n   you'll need to specify 'scopes' to use with the account, which are as follows:\n    ```\n    https://www.googleapis.com/auth/drive.readonly\n    https://www.googleapis.com/auth/drive.metadata.readonly\n    https://www.googleapis.com/auth/admin.directory.user.readonly\n    https://www.googleapis.com/auth/admin.directory.group.member.readonly\n    ```\n   - only the first two are required for DRIVE mode, while only the last two are \n     required for AUTH mode.\n5. Next [follow instructions](https://developers.google.com/identity/protocols/oauth2/web-server#creatingcred) \n  to create OAuth client ID credentials. Under 'Authorized redirect URI', use:\n  - `http://localhost:5000/callback/google` (for testing from `localhost`)\n  - `https://<yourdomainname>/callback/google` (if you're serving the app at a \n    custom domain)\n \nYou should now be able to use the Workspace account with Chemsearch. Just place \nthe JSON file in the app `config` directory (renaming it creds.json), and update\nthe env file as described [above](#the-env-file).\n"
      },
      "source": "https://raw.githubusercontent.com/gem-net/chemsearch/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999977532564402,
      "result": {
        "original_header": "Customization",
        "type": "Text_excerpt",
        "value": "Chemsearch has a command-line interface (CLI) that will help you configure the \napp. Get started by running `chemsearch setup prompt` in your terminal. This will \nwalk you through the creation of the 'env' file that stores the configuration settings.  \nRun `chemsearch setup` to see a complete list of setup subcommands, including: \n```\n  creds   Copy Google JSON credentials to config folder.\n  edit    Open configuration .env file in an editor.\n  import  Load variables from specified .env path.\n  prompt  Create configuration .env file via command prompt.\n  revert  Revert to previous .env file.\n  show    Print configuration path and contents.\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/gem-net/chemsearch/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9893768538165503,
      "result": {
        "original_header": "The env file",
        "type": "Text_excerpt",
        "value": "The env file is used to specify non-default options via environment variables:\n- root directory for local compounds library (LOCAL_DB_PATH)\n- app title, for banner (APP_TITLE, default 'Chemsearch')\n- DRIVE mode status, for use with Google Shared Drive (USE_DRIVE, default 'off')\n- AUTH mode status (on/off), for authentication with Google OAuth (USE_AUTH, default 'off')\n- Flask environment mode (development vs production), if serving using \n  `flask` application server (FLASK_ENV, default 'production').\n- Fingerprint for similarity matching (SIM_FINGERPRINT, default 'Morgan').\n- Coefficient for similarity matching (SIM_COEFFICIENT, default 'Dice').\n  \nTo use Shared Drive and/or Authentication modes, you will need to [set up a \nGoogle Workspace](#google-workspace-setup) and provide some additional env \nvariables. In the Google-specific variable list below, a tick below means the \nvariable is required: \nvariable | DRIVE mode | AUTH mode | example | notes\n-------- | ----------------------- | ---------------------- | ------- | -----\nCREDENTIALS_AS_USER | \u2705 | \u2705 | admin@example.org | (1)\nSHARED_DRIVE_ID | \u2705 |  | 0AbCdEfG_abc123 | (2)\nGOOGLE_CLIENT_ID |  | \u2705 | 123456789.apps.googleusercontent.com | (3)\nGOOGLE_SECRET |  | \u2705 | 98765_abcde | (3)\nGROUP_KEY |  | \u2705 | 012345abcde | (4) \n"
      },
      "source": "https://raw.githubusercontent.com/gem-net/chemsearch/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9985559197973023,
      "result": {
        "original_header": "Custom queries: substructure search shortcuts",
        "type": "Text_excerpt",
        "value": "The search page can be customized with shortcut buttons that run a specific\nsubstructure search. These buttons are created automatically (at app launch time) \nwhen a `custom_queries.yaml` file is added to the `config` folder. The `chemsearch` \nCLI can walk you through the creation of this file with the command:\n```shell script\nchemsearch shortcuts prompt\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/gem-net/chemsearch/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.9001493870382138,
      "result": {
        "original_header": "Customization",
        "type": "Text_excerpt",
        "value": "Run `chemsearch setup` to see a complete list of setup subcommands, including: \n```\n  creds   Copy Google JSON credentials to config folder.\n  edit    Open configuration .env file in an editor.\n  import  Load variables from specified .env path.\n  prompt  Create configuration .env file via command prompt.\n  revert  Revert to previous .env file.\n  show    Print configuration path and contents.\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/gem-net/chemsearch/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/gem-net/chemsearch/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "GNU General Public License v3.0",
        "spdx_id": "GPL-3.0",
        "type": "License",
        "url": "https://api.github.com/licenses/gpl-3.0",
        "value": "https://api.github.com/licenses/gpl-3.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "chemsearch"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "gem-net"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 113304,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 26672,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CSS",
        "size": 1686,
        "type": "Programming_language",
        "value": "CSS"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 785,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 577,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Mako",
        "size": 494,
        "type": "Programming_language",
        "value": "Mako"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gem-net/chemsearch/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installing the dependencies and `chemsearch` executable",
        "parent_header": [
          "chemsearch",
          "Getting started",
          "Manual installation"
        ],
        "type": "Text_excerpt",
        "value": "Chemsearch requires Python 3.6 and above, plus a number of third-party Python packages, \nand rdkit. The easiest way to install everything is with Conda. Conda can set up a\nsuitable Python virtual environment for use with Chemsearch and install rdkit, all\nwith a single command. \n1. If you don't have `conda` on your system, install [Miniconda](https://docs.conda.io/en/latest/miniconda.html).  \n2. Clone or [download](https://github.com/gem-net/chemsearch/archive/master.zip) \n  the Chemsearch repository, and unzip it somewhere convenient for long-term storage\n  \u2014your Python environment will store a link to the folder as part of installation.\n3. In your terminal, navigate to the folder and run the following to create a \n  conda virtual environment with all dependencies:\n   ```bash\n   conda env create -n chemsearch -f environment.yaml\n   ```\n    - or to create an environment precisely mimicking a tested version, specify \n    `environment.lock.yaml` instead of `environment.yaml` above. \n4. Activate the new environment with `conda activate chemsearch`. (This environment\n  will need to be activated each time you want to run Chemsearch.)\n5. Install the chemsearch package by running `python setup.py develop`. This \n    will add a `chemsearch` CLI executable to your PATH that you can use to \n    configure and run your Chemsearch server.\n6. (Optional) To bypass app configuration and import a demo library for use with the app, run \n  `chemsearch build`. This demo library will be available for browsing when you \n  start the server.\n\n"
      },
      "source": "https://raw.githubusercontent.com/gem-net/chemsearch/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 01:22:53",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick start, using Docker image",
        "parent_header": [
          "chemsearch",
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "The quickest way to try out Chemsearch is to use the Docker container image on \n[Docker Hub](https://hub.docker.com/r/cgemcci/chemsearch), which has all code and\ndependencies bundled in. With Docker [installed and running](https://www.docker.com/get-started) \non your machine, run the following command in the terminal to download the image \nand browse the demo library with default settings:\n```shell script\ndocker run --rm -p 5000:5000 cgemcci/chemsearch\n```\nThe app will be accessible in your browser at http://localhost:5000/.\n\nCustomizing the app requires additional command arguments that bind two local \nfolders:\n1. a folder of configuration files (see the [Customization](#customization) \n   section below).\n2. a folder to contain the local data archive.\n```shell script\ndocker run -p 5000:5000 --rm \\\n -v /path/to/config/dir:/app/config \\\n -v /path/to/archive/dir:/app/demo_db cgemcci/chemsearch\n``` \n\n"
      },
      "source": "https://raw.githubusercontent.com/gem-net/chemsearch/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Starting the server",
        "parent_header": [
          "chemsearch",
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "The WSGI server executables `gunicorn` and `flask` are available after installing \nthe package and dependencies as above and activating the chemsearch virtual environment. \nEither executable can be used to serve the application. `gunicorn` is the recommended, \nmore production-ready option, while `flask` is a 'development' server, best suited \nto testing code changes.\n\n **GUNICORN**:\nTo serve using `gunicorn`, run the following :\n```shell script\ngunicorn -w 1 -k gevent chemsearch.chemsearch:app\n```\n- Note that you can add [command arguments](https://docs.gunicorn.org/en/stable/run.html#commonly-used-arguments) \nto further customize the application server, to modify e.g. listening port and \nnumber of worker processes. The command above uses a single 'gevent' worker.\n \n**FLASK**:\n\nTo serve using `flask`, run the following:\n```shell script\nchemsearch flask run\n```\n- This can be simplified to `flask run` if you set `FLASK_APP` in the configuration \nfile `config/.env`.\n\n"
      },
      "source": "https://raw.githubusercontent.com/gem-net/chemsearch/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example markdown for rich formatting",
        "parent_header": [
          "chemsearch",
          "Customization",
          "Providing custom data for a compound"
        ],
        "type": "Text_excerpt",
        "value": "An example Markdown file, showing syntax for lists, tables, and blockquotes, \nis provided in `demo_db/base/CHEMBL1195529/custom.md`, and replicated below:\n\n```\n<h4>Hello!</h4>\n\nThis is some custom information for the molecule page.\n\n1. first item in enumerated list\n2. second item\n3. final list item.\n\n- bullet point.\n- another bullet point.\n\nFirst Header  | Second Header\n------------- | -------------\nContent Cell with a long long LONG value  | Content Cell\nContent Cell  | Content Cell\n\n\n> Blockquote\n>\n> Here's a second paragraph.\n\nSee our team website at http://gem-net.net.\n```\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/gem-net/chemsearch/master/README.md",
      "technique": "header_analysis"
    }
  ]
}