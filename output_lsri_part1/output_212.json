{
  "application_domain": [
    {
      "confidence": 14.2,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9662533267997772,
      "result": {
        "type": "String",
        "value": "Semantic web"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ainefairbrother/ensemblQueryR"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contribute to `ensemblQueryR`",
        "parent_header": [
          "ensemblQueryR"
        ],
        "type": "Text_excerpt",
        "value": "We value contributions from the community to improve `ensemblQueryR`. Here's how you can do this:\n* Explore Issues: Look through our GitHub Issues to find tasks, bugs, or new features you're interested in.\n* Fork the Repository: Fork the `ensemblQueryR` repository to your GitHub account using the \"Fork\" button at the top.\n* Branch Out: Create a new branch in your forked repository for your changes. Use a descriptive name for clarity.\n* Make Changes: Make your code, documentation, or design updates in the branch you've created.\n* Commit and Push: Commit your changes and push them to your forked repository.\n* Open a Pull Request (PR): Submit a PR from your branch to the main repository. Provide a clear title and description of your changes.\n* Engage in Discussion: Participate in the conversation around your PR. Address feedback and make necessary adjustments.\n* Collaborate: Collaborate with our maintainers to refine your contribution. Once approved, your changes will be merged.\n\nThank you for considering making a contribution to `ensemblQueryR`.\n"
      },
      "source": "https://raw.githubusercontent.com/ainefairbrother/ensemblQueryR/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-11-05T12:33:11Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-04-25T10:54:30Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Package allowing easy integration of Ensembl querying with your R workflow"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9968229004495014,
      "result": {
        "original_header": "ensemblQueryR",
        "type": "Text_excerpt",
        "value": "The goal of ensemblQueryR is to seemlessly integrate querying of Ensembl databases into your R workflow. It does this by formatting and submitting user queries to the Ensembl API. At present, the package contains functions for the three Ensembl Linkage Disequilibrium (LD) 'endpoints': 1. Query LD in a window around one SNP, 2. Query LD for a pair of query SNPs and 3. Query LD for SNPs at a specified genomic locus.  \n"
      },
      "source": "https://raw.githubusercontent.com/ainefairbrother/ensemblQueryR/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9818386834473881,
      "result": {
        "original_header": "1. Query LD metrics for a window around a variant",
        "type": "Text_excerpt",
        "value": "Get all variants in LD with one query variant using `ensemblQueryLDwithSNPwindow`. This function constrains the query by taking a minimum r-squared cut-off (`r2`), D-prime (`d.prime`) and window size around the variant in kilobases (`window.size`).\n``` r\nensemblQueryR::ensemblQueryLDwithSNPwindow(rsid=\"rs3851179\", \n  r2=0.8, \n  d.prime=0.8, \n  window.size=500, \n  pop=\"1000GENOMES:phase_3:EUR\")\n```\nFor more than one query variant, the `ensemblQueryLDwithSNPwindowDataframe` function takes a `data.frame` as input, and gets all variants in LD with all query variants in the `rsid` column. It is possible to parallelise this operation by setting the number of cores above 1.\n``` r\n# example input data\nin.table <- data.frame(rsid=rep(c(\"rs7153434\",\"rs1963154\",\"rs12672022\",\"rs3852802\",\"rs12324408\",\"rs56346870\"), 500))\n\n# run query on in.table\nensemblQueryR::ensemblQueryLDwithSNPwindowDataframe(\n  in.table=in.table,\n  r2=0.8,\n  d.prime=0.8,\n  window.size=500,\n  pop=\"1000GENOMES:phase_3:EUR\",\n  cores=1\n)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/ainefairbrother/ensemblQueryR/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9983505795990428,
      "result": {
        "original_header": "2. Query LD metrics for a pair of variants",
        "type": "Text_excerpt",
        "value": "The `ensemblQueryLDwithSNPpair` takes a single pair of query SNPs and returns a `data.frame` of LD metrics.\n``` r\nensemblQueryR::ensemblQueryLDwithSNPpair(\n  rsid1=\"rs6792369\",\n  rsid2=\"rs1042779\",\n  pop=\"1000GENOMES:phase_3:EUR\"\n)\n```\nThe `ensemblQueryLDwithSNPpairDataframe` takes a `data.frame` with columns `rsid1` and `rsid2` and returns a `data.frame` of LD metrics for all variant pairs. It is possible to parallelise this operation by setting the number of cores above 1.\n``` r\n# example input data\nin.table <- data.frame(rsid1=rep(\"rs6792369\", 10), rsid2=rep(\"rs1042779\", 10))\n\n# run query on in.table\nensemblQueryR::ensemblQueryLDwithSNPpairDataframe(\n  in.table=in.table,\n  pop=\"1000GENOMES:phase_3:EUR\",\n  cores=1\n)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/ainefairbrother/ensemblQueryR/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9969425194130175,
      "result": {
        "original_header": "3. Query LD metrics for a genomic region",
        "type": "Text_excerpt",
        "value": "The `ensemblQueryLDwithSNPregion` function takes genomic coordinates as input and returns all variant pairs and their LD metrics within the defined region.\n``` r\nensemblQueryR::ensemblQueryLDwithSNPregion(\n  chr=\"6\",\n  start=\"25837556\",\n  end=\"25843455\",\n  pop=\"1000GENOMES:phase_3:EUR\"\n)\n```\nThe `ensemblQueryLDwithSNPregionDataframe` takes a `data.frame` with columns `chr`, `start` and `end` and returns a `data.frame` of LD metrics for all variant pairs contained within each genomic region (each row of `in.table`). It is possible to parallelise this operation by setting the number of cores above 1.\n```r\n# example input data\nin.table = data.frame(chr=rep(c(\"6\"), 10),\n                       start=rep(c(\"25837556\"), 10),\n                       end=rep(c(\"25843455\"), 10))\n                       \n# run query on in.table\nensemblQueryR::ensemblQueryLDwithSNPregionDataframe(\n  in.table= in.table,\n  pop=\"1000GENOMES:phase_3:EUR\",\n  cores = 2\n)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/ainefairbrother/ensemblQueryR/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8674871345676726,
      "result": {
        "original_header": "Docker",
        "type": "Text_excerpt",
        "value": "We have provided a [Docker](https://www.docker.com/) image, enabling this tool to be run regardless of your local operating system or R version. This can be found [here](https://hub.docker.com/r/ainefairbrotherbrowne/ensemblqueryr/tags). As long as you have Docker installed, the code below will allow you to pull this image, run a container and execute it. You will then be able to use `ensemblQueryR` as described above. A working installation of Docker is required. \n```bash\ndocker pull ainefairbrotherbrowne/ensemblqueryr:1.0; \\\ndocker run -t -d --name ensemblqueryr ainefairbrotherbrowne/ensemblqueryr:1.0; \\ \ndocker exec -i -t ensemblqueryr R\n```\nAditionally, to mount a volume - enabling you to load a file containing your variant IDs, for example - the following command can be used, replacing `path/to/vol` with the path to the directory you wish to mount.\n```bash\ndocker pull ainefairbrotherbrowne/ensemblqueryr:1.0; \\\ndocker run -t -d --name ensemblqueryr ainefairbrotherbrowne/ensemblqueryr:1.0 --volume path/to/vol; \\ \ndocker exec -i -t ensemblqueryr R\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/ainefairbrother/ensemblQueryR/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.97605441931914,
      "result": {
        "original_header": "Singularity",
        "type": "Text_excerpt",
        "value": "For HPC use-cases where Docker usage becomes problematic owing to user privilege limitations, we have provided a [singularity](https://docs.sylabs.io/guides/latest/user-guide/quick_start.html) image. This can be found [here](https://cloud.sylabs.io/library/ainefairbrother/ensemblqueryr/ensemblqueryr). The code below will allow you to pull this image, run a container and execute it. You will then be able to use `ensemblQueryR` as described above. A working installation of singularity is required. \n```bash\nsingularity pull --arch amd64 library://ainefairbrother/ensemblqueryr/ensemblqueryr:sha256.e387ea11ae4eaea8f94d81c625c2c1d5a22dd351858ebcd03910a7736d76ca30; \\\nsingularity exec ensemblqueryr_sha256.e387ea11ae4eaea8f94d81c625c2c1d5a22dd351858ebcd03910a7736d76ca30.sif R\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/ainefairbrother/ensemblQueryR/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9973172416079062,
      "result": {
        "original_header": "Disclaimer",
        "type": "Text_excerpt",
        "value": "Please note that this code is still under development and may contain bugs or errors. It is not recommended for use in production environments. Use at your own risk. I am working on improving the code, addressing any issues, and expanding the package's capabilities so please check back for updates.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ainefairbrother/ensemblQueryR/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ainefairbrother/ensemblQueryR/tree/main/docs"
      },
      "technique": "file_exploration"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ainefairbrother/ensemblQueryR/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ainefairbrother/ensemblQueryR/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ainefairbrother/ensemblQueryR"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ensemblQueryR"
      },
      "source": "https://raw.githubusercontent.com/ainefairbrother/ensemblQueryR/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ainefairbrother/ensemblQueryR/main/docker/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/ainefairbrother/ensemblQueryR/main/docker/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://zenodo.org/badge/latestdoi/562138040"
      },
      "source": "https://raw.githubusercontent.com/ainefairbrother/ensemblQueryR/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "ensemblQueryR"
        ],
        "type": "Text_excerpt",
        "value": "You can install ensemblQueryR as below.\n\n``` r\n# load remotes package\nlibrary(remotes)\n\n# to install the development version\nremotes::install_github(\"ainefairbrother/ensemblQueryR\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ainefairbrother/ensemblQueryR/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Setup",
        "parent_header": [
          "ensemblQueryR"
        ],
        "type": "Text_excerpt",
        "value": "To check that the Ensembl server is up and running, the server can be pinged. \n\n``` r\nlibrary(ensemblQueryR)\n\nensemblQueryR::pingEnsembl()\n```\n\nAll functions in this package take the `pop` argument which defines the population for which to retrieve LD metrics. To get a list of options for this argument, run the `ensemblQueryGetPops()` function.\n\n``` r\nensemblQueryR::ensemblQueryGetPops()\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ainefairbrother/ensemblQueryR/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999999999946567,
      "result": {
        "original_header": "Docker",
        "type": "Text_excerpt",
        "value": "We have provided a [Docker](https://www.docker.com/) image, enabling this tool to be run regardless of your local operating system or R version. This can be found [here](https://hub.docker.com/r/ainefairbrotherbrowne/ensemblqueryr/tags). As long as you have Docker installed, the code below will allow you to pull this image, run a container and execute it. You will then be able to use `ensemblQueryR` as described above. A working installation of Docker is required. \n```bash\ndocker pull ainefairbrotherbrowne/ensemblqueryr:1.0; \\\ndocker run -t -d --name ensemblqueryr ainefairbrotherbrowne/ensemblqueryr:1.0; \\ \ndocker exec -i -t ensemblqueryr R\n```\nAditionally, to mount a volume - enabling you to load a file containing your variant IDs, for example - the following command can be used, replacing `path/to/vol` with the path to the directory you wish to mount.\n```bash\ndocker pull ainefairbrotherbrowne/ensemblqueryr:1.0; \\\ndocker run -t -d --name ensemblqueryr ainefairbrotherbrowne/ensemblqueryr:1.0 --volume path/to/vol; \\ \ndocker exec -i -t ensemblqueryr R\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/ainefairbrother/ensemblQueryR/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999777714591167,
      "result": {
        "original_header": "Singularity",
        "type": "Text_excerpt",
        "value": "For HPC use-cases where Docker usage becomes problematic owing to user privilege limitations, we have provided a [singularity](https://docs.sylabs.io/guides/latest/user-guide/quick_start.html) image. This can be found [here](https://cloud.sylabs.io/library/ainefairbrother/ensemblqueryr/ensemblqueryr). The code below will allow you to pull this image, run a container and execute it. You will then be able to use `ensemblQueryR` as described above. A working installation of singularity is required. \n```bash\nsingularity pull --arch amd64 library://ainefairbrother/ensemblqueryr/ensemblqueryr:sha256.e387ea11ae4eaea8f94d81c625c2c1d5a22dd351858ebcd03910a7736d76ca30; \\\nsingularity exec ensemblqueryr_sha256.e387ea11ae4eaea8f94d81c625c2c1d5a22dd351858ebcd03910a7736d76ca30.sif R\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/ainefairbrother/ensemblQueryR/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ainefairbrother/ensemblQueryR/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "api-rest, bioinformatics, ensembl, ld, r"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# MIT License\n\nCopyright (c) 2022 ensemblQueryR authors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/ainefairbrother/ensemblQueryR/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ensemblQueryR"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "ainefairbrother"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 42603,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 1459,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ainefairbrother/ensemblQueryR/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ainefairbrother",
          "type": "User"
        },
        "date_created": "2023-04-17T10:37:33Z",
        "date_published": "2023-04-17T14:42:29Z",
        "description": "Two new strands of functionality added: search LD statistics with a pair of rsIDs, and within a genomic region. Refactoring of the window-based functionality code to fit with expanded functionality and improve intuitiveness of function names. ",
        "html_url": "https://github.com/ainefairbrother/ensemblQueryR/releases/tag/v.2.0.0",
        "name": "v2.0.0",
        "release_id": 99769661,
        "tag": "v.2.0.0",
        "tarball_url": "https://api.github.com/repos/ainefairbrother/ensemblQueryR/tarball/v.2.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/ainefairbrother/ensemblQueryR/releases/99769661",
        "value": "https://api.github.com/repos/ainefairbrother/ensemblQueryR/releases/99769661",
        "zipball_url": "https://api.github.com/repos/ainefairbrother/ensemblQueryR/zipball/v.2.0.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ainefairbrother",
          "type": "User"
        },
        "date_created": "2023-01-23T13:58:23Z",
        "date_published": "2023-04-11T15:51:03Z",
        "description": "First release",
        "html_url": "https://github.com/ainefairbrother/ensemblQueryR/releases/tag/v1.0.0",
        "name": "v1.0.0",
        "release_id": 98944156,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/ainefairbrother/ensemblQueryR/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/ainefairbrother/ensemblQueryR/releases/98944156",
        "value": "https://api.github.com/repos/ainefairbrother/ensemblQueryR/releases/98944156",
        "zipball_url": "https://api.github.com/repos/ainefairbrother/ensemblQueryR/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "usage",
    "faq",
    "support",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:52:59",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ]
}