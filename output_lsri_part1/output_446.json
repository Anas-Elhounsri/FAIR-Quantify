{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Reference",
        "type": "Text_excerpt",
        "value": "*  Chi, L., Zhang, X., Xue, Y., & Chen, H. (2023). fastHaN: a fast and scalable program for constructing haplotype network for large-sample sequences. Molecular Ecology Resources, 00, 1\u2013 5.\n*  Bandelt, H.J., Forster, P., and Rohl, A. (1999). Median-joining networks for inferring intraspecific phylogenies. Mol Biol Evol 16, 37-48.\n* Clement, M., Posada, D., and Crandall, K.A. (2000). TCS: a computer program to estimate gene genealogies. Mol Ecol 9, 1657-1659.\n* Leigh, J.W. (2015). POPART: full-feature software for haplotype network construction. Methods in Ecology and Evolution.\n* Murias dos Santos, A., Cabezas, M.P., Tavares, A.I., Xavier, R., and Branco, M. (2016). tcsBU: a tool to extend TCS network layout and visualization. Bioinformatics 32, 627-628.\n"
      },
      "source": "https://raw.githubusercontent.com/ChenHuaLab/fastHaN/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ChenHuaLab/fastHaN"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "original_header": "META file format (given by the user)",
        "parent_header": [
          "Visualization"
        ],
        "type": "Text_excerpt",
        "value": "    Hap6825391      SouthAfrica\n    Hap6825397      SouthAfrica\n    Hap6825546      Austria\n    Hap6795850      SouthAfrica\n    Hap6795842      SouthAfrica\n\n* Hap6825391: the haplotype name, which must be consistent with that in the phylip file\n* SouthAfrican: the group information of the haplotye Hap6825391\n\n"
      },
      "source": "https://raw.githubusercontent.com/ChenHuaLab/fastHaN/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-01-21T13:54:36Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-04-10T07:26:56Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "fastHaN is a fast and scalable program for constructing haplotype networks for large samples"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Description",
        "type": "Text_excerpt",
        "value": "* fastHaN is a fast and scalable program for constructing haplotype networks for large samples <br>\n* fastHaN can implement the minimum joint network (MJN) and the Templeton-Crandall-Sing (TCS) algorithms <br>\n* The implementation in single-thread mode is much faster than the existing softwares <br>\n* Furthermore, fastHaN enables multi-threaded mode with good scalability\n\n"
      },
      "source": "https://raw.githubusercontent.com/ChenHuaLab/fastHaN/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9689782937266297,
      "result": {
        "original_header": "fastHaN",
        "type": "Text_excerpt",
        "value": "A fast and scalable program for constructing haplotype network for large-sample sequence data sets. <br>\n \n"
      },
      "source": "https://raw.githubusercontent.com/ChenHuaLab/fastHaN/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9430595166633856,
      "result": {
        "original_header": "original_tcs",
        "type": "Text_excerpt",
        "value": "        msn                 optimization of MSN implementated by PopART \n"
      },
      "source": "https://raw.githubusercontent.com/ChenHuaLab/fastHaN/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.846166628312985,
      "result": {
        "original_header": "modified_tcs",
        "type": "Text_excerpt",
        "value": "        mjn                 optimization of MJN implementated by PopART (Bandelt, et al., 1999)  \n"
      },
      "source": "https://raw.githubusercontent.com/ChenHuaLab/fastHaN/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8478380789855574,
      "result": {
        "original_header": "mjn",
        "type": "Text_excerpt",
        "value": "    input:\n        -i    input phylip format file\n    options:\n        -t    (int)thread number(default:8)\n        -a    (int)is mark the sites which contains ambiguous base, 1:mask, 0:not(default:0)\n        -m    (int)is merge intermediate vertex, 1:merge, 0:not:(default:0)\n    output:\n        -o    path prefix of the output graph file (GML and json format)\n             \n"
      },
      "source": "https://raw.githubusercontent.com/ChenHuaLab/fastHaN/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8420402672817717,
      "result": {
        "original_header": "Input file (PHYLIP format)",
        "type": "Text_excerpt",
        "value": "\n* 3: the number of haplotypes\n* 75: the number of characters for each haplotype\n* Hap385899: the haplotype name\n* GATCTG...GTAT: the sequence of the haplotype Hap385899 \n"
      },
      "source": "https://raw.githubusercontent.com/ChenHuaLab/fastHaN/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.968021533841727,
      "result": {
        "original_header": "Output file (GML and Json format)",
        "type": "Text_excerpt",
        "value": "* GML file is used as the input of tcsBU software to visualize the haplotye network\n* Json file is used to prepare color theme for the constructed haplotype network (refer to section of 'Visualization') \n"
      },
      "source": "https://raw.githubusercontent.com/ChenHuaLab/fastHaN/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9775484317263101,
      "result": {
        "original_header": "Visualization",
        "type": "Text_excerpt",
        "value": "After constructing the haplotype network with fastHaN, we need to use the software tcsBU to visualize it.<br>\nThe tcsBU (https://github.com/sairum/tcsBU) is a browser-based JavaScript program, which is included in fastHaN's package. All you need to do is\nunzip tcsBU.zip and double-click the index.html file.<br>\nIn order to show the composition of haplotypes within one node, you need to provide a META file (two column) that specifies the group information (eg. country, city, et) for each haplotype.<br> \n"
      },
      "source": "https://raw.githubusercontent.com/ChenHuaLab/fastHaN/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ChenHuaLab/fastHaN/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ChenHuaLab/fastHaN/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ChenHuaLab/fastHaN"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "fastHaN"
      },
      "source": "https://raw.githubusercontent.com/ChenHuaLab/fastHaN/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ChenHuaLab/fastHaN/main/Pipline/Pipline.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick start guide",
        "type": "Text_excerpt",
        "value": "    For Linux:\uff08Please ensure that your computer system supports the avx instruction set, or the program will exit with an error.\uff09\n    1. download the software and grant execution permissions\n       chmod +x fastHaN_linux\n\n    2. run the test data (Example/Test1000.phy.gz) with mjn algorithm\n       ./fastHaN_linux mjn -i Example/Test1000.phy.gz -t 8 -o Test1000\n\n    For windows:\uff08Please ensure that your computer system supports the avx instruction set, or the program will exit with an error.\uff09\n    1. run in the CMD window\n        fastHaN_win.exe mjn -i Example/Test1000.phy.gz -t 8 -o Test1000\n\n"
      },
      "source": "https://raw.githubusercontent.com/ChenHuaLab/fastHaN/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8981718377751605,
      "result": {
        "original_header": "Generate config files for tcsBU",
        "type": "Text_excerpt",
        "value": "You can also manually generate the two config files by referring to the file format below (*_groupconf.csv and *_hapconf.csv)\n```python\n# generate the config files\npython GenNetworkConfig.py Test167.json Test167.meta Test167Conf\n\n# Two config files will be generaged by above command\n1. Test167Conf_groupconf.csv\n2. Test167Conf_hapconf.csv\n```\n \n    SouthAfrica;#4C3D35;none\n    Austria;#D56234;none\n    Botswana;#DCBD4D;none\n  \n* 1-th: group name, eg. SouthAfrica\n* 2-th: random colors generated by GenNetworkConfig.py, eg. #4C3D35\n* 3-th: fixed column with a value of 'none' \n"
      },
      "source": "https://raw.githubusercontent.com/ChenHuaLab/fastHaN/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8725917004146263,
      "result": {
        "original_header": "mjn",
        "type": "Text_excerpt",
        "value": "    usage: fastHaN modified_tcs [arguments]\n    \n    input:\n        -i    input phylip format file\n    options:\n        -t    (int)thread number(default:8)\n    output:\n        -o    path prefix of the output graph file (GML and json format)\n            \n            \n### msn \n    usage: fastHaN msn [arguments]\n         \n    input:\n        -i    input phylip format file\n    options:\n        -e    (int)epsilon(default:0)\n    output:\n        -o    path prefix of the output graph file (GML and json format)\n            \n            \n### mjn \n    usage: fastHaN mjn [arguments]\n         \n    input:\n        -i    input phylip format file\n    options:\n        -t    (int)thread number(default:8)\n        -e    (int)epsilon(default:0)\n    output:\n        -o    path prefix of the output graph file (GML and json format) \n"
      },
      "source": "https://raw.githubusercontent.com/ChenHuaLab/fastHaN/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9029466833193882,
      "result": {
        "original_header": "Generate config files for tcsBU",
        "type": "Text_excerpt",
        "value": "You can also manually generate the two config files by referring to the file format below (*_groupconf.csv and *_hapconf.csv)\n```python\n# generate the config files\npython GenNetworkConfig.py Test167.json Test167.meta Test167Conf\n\n# Two config files will be generaged by above command\n1. Test167Conf_groupconf.csv\n2. Test167Conf_hapconf.csv\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/ChenHuaLab/fastHaN/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ChenHuaLab/fastHaN/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "fastHaN"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "ChenHuaLab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 5174,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 2466,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ChenHuaLab/fastHaN/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 00:46:17",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 12
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick start guide",
        "type": "Text_excerpt",
        "value": "    For Linux:\uff08Please ensure that your computer system supports the avx instruction set, or the program will exit with an error.\uff09\n    1. download the software and grant execution permissions\n       chmod +x fastHaN_linux\n\n    2. run the test data (Example/Test1000.phy.gz) with mjn algorithm\n       ./fastHaN_linux mjn -i Example/Test1000.phy.gz -t 8 -o Test1000\n\n    For windows:\uff08Please ensure that your computer system supports the avx instruction set, or the program will exit with an error.\uff09\n    1. run in the CMD window\n        fastHaN_win.exe mjn -i Example/Test1000.phy.gz -t 8 -o Test1000\n\n"
      },
      "source": "https://raw.githubusercontent.com/ChenHuaLab/fastHaN/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "type": "Text_excerpt",
        "value": "    fastHaN [Options]\n    "
      },
      "source": "https://raw.githubusercontent.com/ChenHuaLab/fastHaN/main/README.md",
      "technique": "header_analysis"
    }
  ]
}