{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/LabTranslationalArchitectomics/expressyouRcell"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contacts",
        "type": "Text_excerpt",
        "value": "martina.paganin@unitn.it\n\nfabio.lauria@ibf.cnr.it\n\ntoma.tebaldi@gmail.com\n\ngabriella.viero@cnr.it\n"
      },
      "source": "https://raw.githubusercontent.com/LabTranslationalArchitectomics/expressyouRcell/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-04-01T15:48:43Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-05-23T05:36:54Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "expressyouRcell generates animations of pictographic representations of cells, or pictograms, providing a convenient and intuitive method for visualizing and understanding time course variations in cellular compartments."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9998742960466792,
      "result": {
        "original_header": "expressyouRcell",
        "type": "Text_excerpt",
        "value": "expressyouRcell is a unique and easy-to-use R package which provides an intuitive approach for visualizing and presenting multi-dimensional variations of gene expression levels across time and space. This tool gives the possibility of generating animations of pictographic representations of cells, or pictograms, providing a convenient and intuitive method for visualizing and understanding time course variations in cellular compartments. \nA range of customizable options is provided to create cellular pictograms starting from your data! :)\n \n"
      },
      "source": "https://raw.githubusercontent.com/LabTranslationalArchitectomics/expressyouRcell/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9344661700705608,
      "result": {
        "original_header": "3) Create the gene-localization table",
        "type": "Text_excerpt",
        "value": "The user can provide a custom table with information on the localization of genes within the cellular compartments and organelles. If you provide your own table, this must contain two columns: one with gene names (named exactly ```gene_symbol```) and one with the associated information on the localization of that gene within the cell (named exactly BASH2*). \n"
      },
      "source": "https://raw.githubusercontent.com/LabTranslationalArchitectomics/expressyouRcell/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9944076862369547,
      "result": {
        "original_header": "map_gene_localization function",
        "type": "Text_excerpt",
        "value": "On the complete set of gene symbols, a gene ontology enrichment analysis is performed to associate a gene with a term in the cellular component ontology. For this purpose, only the sub-ontology of the cellular components is taken into consideration. This function generates the gene-localization table, which maps each gene to the locations in the cellular structures, either cellular compartments or macromolecular complexes.  \nWe provide you with an example of ```gene_localization``` table generated through the BASH2* function. This ```gene_localization``` table is based on the mouse genome annotation M22 which can be found in GENCODE (https://www.gencodegenes.org/mouse/release_M22.html).  \nWe suggest you to try the following examples by using this data structure for mapping genes into subcellular localizations.\n \n"
      },
      "source": "https://raw.githubusercontent.com/LabTranslationalArchitectomics/expressyouRcell/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8310204041055185,
      "result": {
        "original_header": "available_pictographs function",
        "type": "Text_excerpt",
        "value": "This function allows the user to visualize the available cellular pictographs with default colors. \n```\navailable_pictographs()\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/LabTranslationalArchitectomics/expressyouRcell/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9650928400467449,
      "result": {
        "original_header": "color_cell",
        "type": "Text_excerpt",
        "value": "The main function is called ```color_cell``` and needs at least four mandatory input parameters.\n* A list of one or multiple BASH2*s, each must have at least a column named BASH3* with gene symbols.\n* A name of the chosen cellular map, or in alternative, a vector with multiple names of cellular types. For each cellular names, the package will load the corresponding  BASH2*, which is necessary to draw the cellular map. The BASH2* structures contains BASH4* and BASH5* coordinates, subcellular structure labels and associated default colors.\n* The gene localization mapping table. This is the BASH2* storing for each gene its subcellular localization according to the cellular component gene ontology. As explained above, this table can be either provided by the user or created through the dedicated BASH6* function.\n* A character vector which allows to identify whether gene expression data or results from differential analyses are given \nas input (i.e.,  BASH7*, or BASH8*). \nIn general, normalized counts (e.g., cpm, tpm or fpkm) are preferred as input data for gene expression values, but the ```scaling``` parameter allows to further normalize gene expression values on the rows. \n"
      },
      "source": "https://raw.githubusercontent.com/LabTranslationalArchitectomics/expressyouRcell/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9855519737482414,
      "result": {
        "original_header": "Mean (or median) of values",
        "type": "Text_excerpt",
        "value": "If  ```coloring_method``` is equal to BASH2* or BASH3*,  genes are first grouped according to their localization, then, mean (or median) of numeric values associated with each gene are computed for each group. If this is the selected option, the BASH4*s  in the input list must also have an additional column containing numeric values (e.g. logFC, CPM values, etc.). To specify the value column on which you want to base your coloring, an additional parameter with the name of the column (BASH5*) must be provided as input. The given name must be compatible with column names in the BASH4*s of the input list.  \nexpressyouRcell can handle your output in two main different manners, according to a potential classification of the genes (e.g. \u201cdown-regulated\u201d and \u201cup-regulated\u201d in case of differential analysis).  This can be achieved with different combinations of the optional parameters ```group_by``` and BASH7* in the BASH8* function.\n \n"
      },
      "source": "https://raw.githubusercontent.com/LabTranslationalArchitectomics/expressyouRcell/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9902876073606195,
      "result": {
        "original_header": "1) Generate a single pictograph for all the genes",
        "type": "Text_excerpt",
        "value": "If the ```group_by``` parameter is set to its default null value, no grouping by classification value is performed, and genes are visualized together on a single cellular pictograph. In this case, values of genes mapped to each subcellular localization are averaged regardless their classification and plotted together on the cellular pictographs. \nHowever, to avoid poorly informative pictographs, it is recommended to include only differentially expressed genes with the BASH2* (i.e. discarding genes detected as invariant following differential analysis), in particular when the logFC values are used for defining the color shade of the cellular regions. \n"
      },
      "source": "https://raw.githubusercontent.com/LabTranslationalArchitectomics/expressyouRcell/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9554353933889826,
      "result": {
        "original_header": "2) Generate multiple pictographs, one for each group of genes",
        "type": "Text_excerpt",
        "value": "expressyouRcell allows you to selectively visualize only genes belonging to distinct classes (e.g. either \"up-\" or \"down-regulated\" genes) and generate separate plots for each of the specified categories of genes. In this case, separate analysis for each subset of genes can be performed, and expressyouRcell will then output single ```ggplot``` figures for each category. \nTo select this analysis, you must specify a non-null value for the BASH2* parameter. To select this analysis, you must specify as the BASH2*  parameter the name of the column reporting the categorical variable (e.g. \u201cclass\u201d) on which you have previuoly stored the gene classification. \n```\nexample_list_output <- color_cell(timepoint_list = example_list,\n                                  pictograph = \"neuron\",\n                                  gene_loc_table = gene_loc_table_mm22,\n                                  coloring_mode = \"mean\",\n                                  group_by = \"class\",\n                                  col_name = \"logFC\")\n```\n \nThe additional parameter ```grouping_vars``` can be specified to subselect genes associated only to a subset of specified categories (e.g. in case of DEGs classification, \u201cup\u201d and \u201cdown\u201d). Default value of this parameter is null. In this case, all the genes are selected and their corresponding values are averaged for each subcellular localization, regardless any classification. \nHowever, in some cases you may desire to select only a subset of genes, and discard others, such as genes detected as invariant following a differential analysis. For instance, when the logFC values are used for defining the color shade of the cellular regions and organelles, it may be desirable to include only differentially expressed genes with the `grouping_vars`. As displayed in the example below, the `grouping_vars` parameter takes as input a list with a named character vector. The vector name must match the `group_by` parameter, and the vector items (e.g. classes \"+\" and \"-\") must be present in the `timepoint_list` *data.tables* columns named as `group_by`. \nFor example, the following lines will generate two distinct cellular pictographs (for the specified classes '+' and '-') for each time point in your list, as can be seen in the picture below.\n```\nexample_list_output <- color_cell(timepoint_list = example_list,\n                                  pictograph = \"neuron\",\n                                  gene_loc_table = gene_loc_table_mm22,\n                                  coloring_mode = \"mean\",\n                                  group_by = \"class\",\n                                  grouping_vars = list(\"class\"=c(\"+\",\"-\")),\n                                  col_name = \"logFC\",\n                                  colors = list(\"+\" = c(\"#eaf3ea\", \"#307e2d\"),\n                                                \"-\" = c(\"#f3eaea\", \"#7e302d\")))\n```\n \nThe following pictograph show the localization of a subset of up-regulated genes at the second stage provided in the example_list. Color shades are based on the mean of logFC values of genes localizing in a cellular compartment/organelle. \n <img src=\"https://github.com/gittina/expressyouRcell/blob/master/vignettes/fig2.png\" width=\"1000\" height=\"450\"> \n"
      },
      "source": "https://raw.githubusercontent.com/LabTranslationalArchitectomics/expressyouRcell/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9658371299316527,
      "result": {
        "original_header": "Enrichment based p-value",
        "type": "Text_excerpt",
        "value": "Enrichment analysis restricted to the sub-ontology of cellular components is performed on genes input by the user. Colors of each subcellular compartment are based on pvalues from the Fisher\u2019s test, used to assess the statistical significance of the enrichment.\nAlso in this case, it is possible to selectively visualize only genes belonging to distinct classes by providing the ```group_by``` parameter with the name of the column with the categorical variable (e.g. \u201cclass\u201d) on which you have previously stored the gene classification. Otherwise, if you do not want to discriminate genes by defined categories, you can set the ```group_by``` parameter to null. As previously described, the additional parameter BASH2* can be specified to subselect the categories you are interested to plot, otherwise the default value of this parameter is null and all the genes will be considered regardless any classification. \nFor example, the following lines will generate two distinct cellular pictographs (for the specified classes '+' and '-') for each time point in your list, as can be seen in the picture below.\n```\nexample_list_output_together_enr <- color_cell(timepoint_list = example_list,\n                                               pictograph = \"neuron\",\n                                               gene_loc_table = gene_loc_table_mm22,\n                                               coloring_mode = \"enrichment\",\n                                               group_by = \"class\",\n                                               grouping_vars = c(\"+\", \"-\"))\n```\nThe following pictograph show the localization of a subset of up-regulated genes at the second stage provided in the example_list. Color shades are based on the significance of the enrichment for genes localizing in a cellular compartment/organelle. \n <img src=\"https://github.com/gittina/expressyouRcell/blob/master/vignettes/fig3.png\" width=\"950\" height=\"450\">\n \n"
      },
      "source": "https://raw.githubusercontent.com/LabTranslationalArchitectomics/expressyouRcell/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9834071351161696,
      "result": {
        "original_header": "Print and save your results",
        "type": "Text_excerpt",
        "value": "The main function ```color_cell``` finally returns a list containing three items:\n* BASH2*: a BASH3* with five columns, reporting respectively the subcellular structure with its associated value, a numeric code for grouping the cellular localizations by colour with their associated colour shades, and the identifier of each time point.\n* BASH4*: a BASH3* summarizing the necessary information (e.g. start, end, color and labels) for each range into which subcellular localization values have been assigned. \n* BASH5*: a list of BASH6* objects with the resulting cellular pictographs, coloured accordingly to your input data. \n"
      },
      "source": "https://raw.githubusercontent.com/LabTranslationalArchitectomics/expressyouRcell/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9509835541476719,
      "result": {
        "original_header": "animate function",
        "type": "Text_excerpt",
        "value": "If you want to visualize how your gene expression data change across multiple variables, you can use expressyouRcell to generate a dynamic representations of cellular pictographs. This is particularly useful when your input data consists of multiple datasets, such as gene expression data measured at multiple stages.\nThis function takes as input the data structure obtained from the ```color_cell``` function.   \nThe other input parameters are:\n* a list with time point labels, \n* the transition duration (in seconds),\n* the number of frames to be created for each transition between time points. \n* the animation sizes (height and width), \n* the output directory and filename,\n* a vector of character labels to visualize as timeline on the final animated figure. \nFor each transition, the function creates a set of temporary frames with intermediate color shades which will then be merged together in a single animated picture or short movie. The gifski and av packages are respecitvely used to produce the gif picture or the movie.  \nAs a final step, the function saves the movie (in mp4 format) or animated picture (gif format) in the specified folder. \nThe following lines create the animated picture reported below. The input data consists of the data structured obtained as output by the  ```color_cell``` function used in the previous steps. You have to specify the timepoint you want to include in the final animated picture (e.g \"brain_p3_rs-\"  and \"brain_p5_rs-\"). Seconds between each transition and fps (e.g. the number of frames per second: the higher this value, the smoother the visual transition. Keep in mind that this will also increase the amount of processing time necessary to create the final figure). For this specific example, only down regulated genes have been selected to create the animated pictograph between the two timepoints included in the BASH2* data structure.\nBASH3* \n"
      },
      "source": "https://raw.githubusercontent.com/LabTranslationalArchitectomics/expressyouRcell/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/LabTranslationalArchitectomics/expressyouRcell/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/LabTranslationalArchitectomics/expressyouRcell/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "LabTranslationalArchitectomics/expressyouRcell"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "expressyouRcell"
      },
      "source": "https://raw.githubusercontent.com/LabTranslationalArchitectomics/expressyouRcell/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gittina/expressyouRcell/master/vignettes/fig1.png"
      },
      "source": "https://raw.githubusercontent.com/LabTranslationalArchitectomics/expressyouRcell/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gittina/expressyouRcell/master/vignettes/fig2.png"
      },
      "source": "https://raw.githubusercontent.com/LabTranslationalArchitectomics/expressyouRcell/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gittina/expressyouRcell/master/vignettes/fig3.png"
      },
      "source": "https://raw.githubusercontent.com/LabTranslationalArchitectomics/expressyouRcell/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/gittina/expressyouRcell/master/vignettes/brainp35.gif"
      },
      "source": "https://raw.githubusercontent.com/LabTranslationalArchitectomics/expressyouRcell/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "expressyouRcell",
          "0) Before starting"
        ],
        "type": "Text_excerpt",
        "value": "You can install expressyouRcell directly from GitHub. To do so, the devtools package is required. If not already installed on your system, run:\n\n```\ninstall.packages(\"devtools\")\n```\n\nOtherwise, load devtools and install expressyouRcell by:\n\n```\nlibrary(devtools)\ninstall_github(\"https://github.com/LabTranslationalArchitectomics/expressyouRcell\", dependencies = TRUE)\n```\n\nPlease note: to install expressyouRcell generating the vignette replace the last command with:\n```\ninstall_github(\"https://github.com/LabTranslationalArchitectomics/expressyouRcell\", dependencies = TRUE, build_vignettes = TRUE)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/LabTranslationalArchitectomics/expressyouRcell/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2) Prepare your data",
        "parent_header": [
          "expressyouRcell"
        ],
        "type": "Text_excerpt",
        "value": "expressyouRcell is optimized for representing multiple sets of gene expression data (e.g. multiple stages, different conditions, different tissues, etc.). For this reason, the input has to be organized as a list of ```data.table```s. For example, in case of multiple stages, each ```data.table``` may correspond to a specific time point. \n\nEach ```data.table``` must have at least a column of gene names named precisely ```gene_symbol```. \nThe input table can also contain additional columns with values of gene expression levels (CPM or FPKM) or results from upstream differential analysis pipeline (such as fold changes and p-values).\n\n| gene_symbol | Value  |\n| :---:       |      :-:        |\n| Rgs20       | 0.5 |\n| Vcpip1      | 1.2 |\n| Sox17       | -2.5         |\n| Lypla1      | 1.1         |\n\nPlease, have a look at the organizaion of example input data by peering into the  ```example_list``` data structure provided within expressyouRcell.\n"
      },
      "source": "https://raw.githubusercontent.com/LabTranslationalArchitectomics/expressyouRcell/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9235035537417791,
      "result": {
        "original_header": "1) Load the package",
        "type": "Text_excerpt",
        "value": "To load expressyouRcell run:\n```\nlibrary(expressyouRcell)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/LabTranslationalArchitectomics/expressyouRcell/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8969277381694196,
      "result": {
        "original_header": "3) Create the gene-localization table",
        "type": "Text_excerpt",
        "value": "Otherwise, you can create the gene-localization table with the ```map_gene_localization``` function provided within expressyouRcell. \n \n"
      },
      "source": "https://raw.githubusercontent.com/LabTranslationalArchitectomics/expressyouRcell/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9069105762996919,
      "result": {
        "original_header": "map_gene_localization function",
        "type": "Text_excerpt",
        "value": "The filename of the gene annotation file used during the alignment of your samples (a gene transfer format file, i.e. GTF) should be provided as input to this function. The GTF file can be downloaded from https://www.gencodegenes.org/. \nWe provide you with an example of ```gene_localization``` table generated through the BASH2* function. This ```gene_localization``` table is based on the mouse genome annotation M22 which can be found in GENCODE (https://www.gencodegenes.org/mouse/release_M22.html).  \nWe suggest you to try the following examples by using this data structure for mapping genes into subcellular localizations.\n \n"
      },
      "source": "https://raw.githubusercontent.com/LabTranslationalArchitectomics/expressyouRcell/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8150922681022114,
      "result": {
        "original_header": "available_pictographs function",
        "type": "Text_excerpt",
        "value": "This function allows the user to visualize the available cellular pictographs with default colors. \n```\navailable_pictographs()\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/LabTranslationalArchitectomics/expressyouRcell/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9970621268768715,
      "result": {
        "original_header": "1) Generate a single pictograph for all the genes",
        "type": "Text_excerpt",
        "value": " <img src=\"https://github.com/gittina/expressyouRcell/blob/master/vignettes/fig1.png\" width=\"1000\" height=\"450\">\n \n"
      },
      "source": "https://raw.githubusercontent.com/LabTranslationalArchitectomics/expressyouRcell/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.868361505399556,
      "result": {
        "original_header": "Print and save your results",
        "type": "Text_excerpt",
        "value": "So, to save your results you can simply print the pictographs as you prefer by accessing the ```plot``` item within the final list returned by BASH1*.\n```    \nggsave(example_list_output_together_cpm[[\"plot\"]][[\"plot_brain_p3_rs\"]],\n\tfilename = file.path(p, paste0(t, \".png\")),\n\tdevice = \"png\",\n\twidth = 10,\n\theight = 4)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/LabTranslationalArchitectomics/expressyouRcell/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/LabTranslationalArchitectomics/expressyouRcell/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Copyright <2022> <Laboratory of Translational Architectomics>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/LabTranslationalArchitectomics/expressyouRcell/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "expressyouRcell"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "LabTranslationalArchitectomics"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 89922,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/LabTranslationalArchitectomics/expressyouRcell/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "gittina",
          "type": "User"
        },
        "date_created": "2022-06-15T13:58:24Z",
        "date_published": "2022-06-15T14:49:25Z",
        "description": "v1.0.0\r\n",
        "html_url": "https://github.com/LabTranslationalArchitectomics/expressyouRcell/releases/tag/1.0.0",
        "name": "expresyouRcell v1.0.0",
        "release_id": 69530340,
        "tag": "1.0.0",
        "tarball_url": "https://api.github.com/repos/LabTranslationalArchitectomics/expressyouRcell/tarball/1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/LabTranslationalArchitectomics/expressyouRcell/releases/69530340",
        "value": "https://api.github.com/repos/LabTranslationalArchitectomics/expressyouRcell/releases/69530340",
        "zipball_url": "https://api.github.com/repos/LabTranslationalArchitectomics/expressyouRcell/zipball/1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "parent_header": [
          "expressyouRcell",
          "0) Before starting"
        ],
        "type": "Text_excerpt",
        "value": "* CRAN\n\t- data.table (>= 1.13.6),\n\t- ggplot2 (>= 3.3.3),\n\t- rsvg (>= 2.1),\n\t- grImport2 (>= 0.2),\n\t- ggpubr (>= 0.4.0),\n\t- RColorBrewer (>= 1.1-2),\n\t- gifski (>= 1.4.3-1),\n\t- av (>= 0.6.0)\n\t \n* Bioconductor\n\t- IRanges (>= 2.24.1),\n\t- clusterProfiler (>= 3.18.0),  \n\t- DOSE (>= 3.16.0),\n\t- rtracklayer (>= 1.50.0)\n\n* Additional and optional dependencies\nOne of the function provided within the package requires genome wide annotation databases for some organisms. Depending on which organisms you're working on, expressyouRcell download the chosen one, if necessary. The available organisms, and related optional dependencies are:\n\n\t- Mus musculus: org.Mm.eg.db (>= 3.12.0),\n\t- Homo sapeiens: org.Hs.eg.db (>= 3.12.0),\n\t- Rattus norvegicus: org.Rn.eg.db (>= 3.12.0),\n\t- Danio rerio: org.Dr.eg.db (>= 3.12.0),\n\t- Saccharomyces cerevisiae: org.Sc.sgd.db (>= 3.12.0)\n"
      },
      "source": "https://raw.githubusercontent.com/LabTranslationalArchitectomics/expressyouRcell/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contributors",
    "documentation",
    "faq",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 01:01:07",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Getting help",
        "parent_header": [
          "expressyouRcell",
          "0) Before starting"
        ],
        "type": "Text_excerpt",
        "value": "The following sections illustrate how to make use of expressyouRcell by introducing all functions included in the package and reporting most of the data structures and graphical outputs generated with the default options. Similar information are reported in the vignette returned by\n\nbrowseVignettes(\"expressyouRcell\")\nFor additional examples and further details about the meaning and usage of all parameters in a function run\n\n?function_name\nor\n\nhelp(package = expressyouRcell)\nA complete reference manual is available here.\n\nBugs and errors can be reported at the issues page on GitHub. Before filing new issues, please read the documentation and take a look at currently open and already closed discussions.\n"
      },
      "source": "https://raw.githubusercontent.com/LabTranslationalArchitectomics/expressyouRcell/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Getting help",
        "parent_header": [
          "expressyouRcell",
          "0) Before starting"
        ],
        "type": "Text_excerpt",
        "value": "The following sections illustrate how to make use of expressyouRcell by introducing all functions included in the package and reporting most of the data structures and graphical outputs generated with the default options. Similar information are reported in the vignette returned by\n\nbrowseVignettes(\"expressyouRcell\")\nFor additional examples and further details about the meaning and usage of all parameters in a function run\n\n?function_name\nor\n\nhelp(package = expressyouRcell)\nA complete reference manual is available here.\n\nBugs and errors can be reported at the issues page on GitHub. Before filing new issues, please read the documentation and take a look at currently open and already closed discussions.\n"
      },
      "source": "https://raw.githubusercontent.com/LabTranslationalArchitectomics/expressyouRcell/master/README.md",
      "technique": "header_analysis"
    }
  ]
}