{
  "acknowledgement": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Acknowledgements",
        "parent_header": [
          "tecpg"
        ],
        "type": "Text_excerpt",
        "value": "This work was partially supported by an NIH NCI MERIT award (R37, CA233774, PI: Kober) and Cancer Center Support Grant (P30, CA082103, Co-I: Olshen).\n\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/kordk/torch-ecpg/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "application_domain": [
    {
      "confidence": 39.61,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/kordk/torch-ecpg"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-07-14T02:18:53Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-04-26T15:05:35Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "(GPU accelerated) eCpG mapper"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9167672507625588,
      "result": {
        "original_header": "tecpg",
        "type": "Text_excerpt",
        "value": "Torch-eCpG is a GPU enabled expression quantitative trait methylation (eQTM) mapper to identify expression associated CpG (eCpG) loci with python CLI using pytorch. \nIf you use Torch-eCpG in your research, please cite the following paper: Kober, K.M., Berger, L., Roy, R. et al. Torch-eCpG: a fast and scalable eQTM mapper for thousands of molecular phenotypes with graphical processing units. BMC Bioinformatics 25, 71 (2024). https://doi.org/10.1186/s12859-024-05670-4\n \n"
      },
      "source": "https://raw.githubusercontent.com/kordk/torch-ecpg/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.936874419702244,
      "result": {
        "original_header": "Docker Image",
        "type": "Text_excerpt",
        "value": "A docker image is now available for the Torch-eCpG (tecpg) tool to perform eQTM mapping analysis. The docker image provides a pre-configured environment for running tecpg. \nAlternatively, a full image is available for download from docker hub:\nhttps://hub.docker.com/repository/docker/kordk/torch-ecpg/general\n \n"
      },
      "source": "https://raw.githubusercontent.com/kordk/torch-ecpg/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9797251892526276,
      "result": {
        "original_header": "Input data",
        "type": "Text_excerpt",
        "value": "Methylation values, gene expression values, and covariates are provided in CSV or TSV files in the `<working>/data` directory. For methylation and gene expression, columns are for individual samples and each row is for a loci. For the covariates, the columns are the type of covariate and the rows are the sample. Annotation files are used for region filtration and are stored in the `<working>/annot`. They use the `BED6` standard and store the positions of the methylation or gene expression loci. \nAnnotation BED6 files for the gene expression and methylation data (i.e., Illumina HumanHT-12 and Illumina MethylationEPIC arrays):\n```bash\nhead -5 annot/*\n```\nBASH8*\nExample data for evaluation can be created with tecpg:\nBASH9*\nBASH10*\n \n"
      },
      "source": "https://raw.githubusercontent.com/kordk/torch-ecpg/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9748099455729806,
      "result": {
        "original_header": "Chunking",
        "type": "Text_excerpt",
        "value": "If the input is too large, the computational device may run out of memory. Chunking can help prevent this by partitioning the data into chunks that are computed and saved separately. Chunking sacrifices parallelization, and thus speed, for lower memory. Avoid chunking wherever possible for speed. \nFor `tecpg run mlr`, there are two types of chunking: methylation chunking and gene expression chunking. Gene expression chunking is preferable to methylation chunking if possible, as it sacrifices parallelization less. Chunking should be avoided unless required to conform to memory constraints. Use `tepcg chunks` to estimate the number of gene expression loci per chunk given certain parameters.\n \n"
      },
      "source": "https://raw.githubusercontent.com/kordk/torch-ecpg/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9693537720264814,
      "result": {
        "original_header": "Filtration",
        "type": "Text_excerpt",
        "value": "1. P-value filtration - all p-values are computed first. Then, regression results with a p-value above a supplied threshold are excluded from the output. This decreases output size and thus increases speed as saving is an expensive operation.\n2. Region filtration - region filtration requires annotation files that dictate the positions of methylation and gene expression ids. Then, regressions are filtered by one of the following methods:\n   - Cis: the position of the gene expression id and methylation id is within a supplied window and they lie on the same chromosome.\n   - Distal: the position of the gene expression id and methylation id is outside of a supplied window and they lie on the same chromosome.\n   - Trans: the gene expression id and methylation id lie on different chromosomes.\n   - All: no filtration. \n"
      },
      "source": "https://raw.githubusercontent.com/kordk/torch-ecpg/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9324367963551149,
      "result": {
        "original_header": "MLR approximate p-values",
        "type": "Text_excerpt",
        "value": "The p-values returned by `tecpg run mlr` are approximations using the normal distribution CDF. This approximation is more accurate for larger degrees of freedom. As the number of degrees of freedom approaches $+\\infty$, the CDF of the normal distribution and the Student's T distribution approach. The approximation is done because pytorch does not support the Student CDF and does not have the needed funtions to implement it efficiently. \n- For 336 degrees of freedom and test t-statistic of 1.877, the percent difference between the normal CDF and Student CDF is 0.04469%.\n- For 50 degrees of freedom and test t-statistic of 1.877, the percent difference between the normal CDF and Student CDF is 0.30206%. \nThe user should determine whether this accuracy is suitable for the task and the degrees of freedom. \nThis image from https://en.wikipedia.org/wiki/Student%27s_t-distribution shows the deviation of the Student's T distribution CDF from the normal CDF represented as $v=+\\infty$: \n"
      },
      "source": "https://raw.githubusercontent.com/kordk/torch-ecpg/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8847934562393156,
      "result": {
        "original_header": "Demonstration",
        "type": "Text_excerpt",
        "value": "Here is a demonstration of tecpg using real data publicly available from the n=340 participants from the Grady Trauma Project (GTP) (Gene Expression Omnibus (GEO) accession numbers GSE72680, GSE58137). The participants were assayed using the Illumina HumanMethylation450 (n=349,220 CpG loci) and HumanHT-12 (n=39,353 expression probes) arrays. \n3. Copy and rename the demo annotation files to their default locations. We created these annotation files to be used with these arrays. The users will need to create their own for datasets using other arrays or measuring approaches (e.g., RNA-seq). \n"
      },
      "source": "https://raw.githubusercontent.com/kordk/torch-ecpg/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8279516775350468,
      "result": {
        "original_header": "Selecting a GPU when multiple are available",
        "type": "Text_excerpt",
        "value": "We have run into this issue when using a development system or a cluster (e.g., Sun Grid Engine) where the system has numerous GPUs and selection is necessary.  \nHere, we see GPU 0 is the A2 (previous one) and GPU 1 is the L4 (new one). \n"
      },
      "source": "https://raw.githubusercontent.com/kordk/torch-ecpg/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Documentation",
        "parent_header": [
          "tecpg"
        ],
        "type": "Text_excerpt",
        "value": "Currently, the README and the `tecpg ... --help` commands serve as documentation. Within the code, the function docstrings provide a lot of information about the function. The extensive type hints give added insight into the purpose of functions.\n"
      },
      "source": "https://raw.githubusercontent.com/kordk/torch-ecpg/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/kordk/torch-ecpg/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/kordk/torch-ecpg/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "kordk/torch-ecpg"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "tecpg"
      },
      "source": "https://raw.githubusercontent.com/kordk/torch-ecpg/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kordk/torch-ecpg/main/docker-related/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/kordk/torch-ecpg/main/docker-related/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://upload.wikimedia.org/wikipedia/commons/thumb/e/e7/Student_t_cdf.svg/325px-Student_t_cdf.svg.png"
      },
      "source": "https://raw.githubusercontent.com/kordk/torch-ecpg/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "tecpg"
        ],
        "type": "Text_excerpt",
        "value": "Pip install from github using `git+https://`.\n\n```bash\npip install git+https://github.com/kordk/torch-ecpg.git\n```\n\nIf you want to be able to edit the code for debugging and development, install in editable mode and do not remove the directory.\n\n```bash\ncd [path/to/code/directory]\ngit clone https://github.com/kordk/torch-ecpg.git\ncd torch-ecpg\npip install --editable .\n```\n\n`tecpg` is an entry point in the command line than calls the root CLI function. If the installation was successful, running `tecpg --help` should provide help with the command line interface.\n\nIf you have issues with using `pip` in the command line, try `python -m pip` or `python3 -m pip`.\n"
      },
      "source": "https://raw.githubusercontent.com/kordk/torch-ecpg/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9987248501320728,
      "result": {
        "original_header": "tecpg",
        "type": "Text_excerpt",
        "value": "Torch-eCpG is a GPU enabled expression quantitative trait methylation (eQTM) mapper to identify expression associated CpG (eCpG) loci with python CLI using pytorch. \n"
      },
      "source": "https://raw.githubusercontent.com/kordk/torch-ecpg/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8629311242097815,
      "result": {
        "original_header": "Docker Image",
        "type": "Text_excerpt",
        "value": "Alternatively, a full image is available for download from docker hub:\nhttps://hub.docker.com/repository/docker/kordk/torch-ecpg/general\n \n"
      },
      "source": "https://raw.githubusercontent.com/kordk/torch-ecpg/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9816351821426287,
      "result": {
        "original_header": "CUDA",
        "type": "Text_excerpt",
        "value": "`tecpg` can calculate on the CPU or on a CUDA enabled GPU device. CUDA devices are generally faster than CPU computations for sufficiently large inputs. \nThe program will automatically determine whether there is a CUDA enabled device and use it if available. To force calculation on the CPU, set the `--threads` option to a nonzero integer. This will also set the number of CPU threads used.\n \n"
      },
      "source": "https://raw.githubusercontent.com/kordk/torch-ecpg/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8250762727069773,
      "result": {
        "original_header": "Input data",
        "type": "Text_excerpt",
        "value": "Covariate CSV datafiles from the GTP dataset (see Demostration below):\n```\n,Sex,age\n5881,1,44\n5896,1,50\n5915,0,52\n5949,1,56\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/kordk/torch-ecpg/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9458268849905429,
      "result": {
        "original_header": "MLR approximate p-values",
        "type": "Text_excerpt",
        "value": "This image from https://en.wikipedia.org/wiki/Student%27s_t-distribution shows the deviation of the Student's T distribution CDF from the normal CDF represented as $v=+\\infty$: \n<details open>\n<summary> Student T CDF comparison </summary>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e7/Student_t_cdf.svg/325px-Student_t_cdf.svg.png\">\n</details>\n \n"
      },
      "source": "https://raw.githubusercontent.com/kordk/torch-ecpg/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9231744327250085,
      "result": {
        "original_header": "Demonstration",
        "type": "Text_excerpt",
        "value": "1. Create the evaluation directory\n```bash\nmkdir test; cd test\n``` \n2. Download and prepare the GTP example dataset\n```bash\ntecpg data gtp\n```\nBASH3* \n\n```bash\nmkdir annot\ncp ../demo/annoEPIC.hg19.bed6 annot/M.bed6\ncp ../demo/annoHT12.hg19.bed6 annot/G.bed6\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/kordk/torch-ecpg/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.943945936117934,
      "result": {
        "original_header": "Selecting a GPU when multiple are available",
        "type": "Text_excerpt",
        "value": "We have run into this issue when using a development system or a cluster (e.g., Sun Grid Engine) where the system has numerous GPUs and selection is necessary.  \nFind the ID of the GPU you\u2019d like to use:\n```\nnvidia-smi\nFri Dec 15 13:33:36 2023       \n+---------------------------------------------------------------------------------------+\n| NVIDIA-SMI 530.30.02              Driver Version: 530.30.02    CUDA Version: 12.1     |\n|-----------------------------------------+----------------------+----------------------+\n| GPU  Name                  Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf            Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n|                                         |                      |               MIG M. |\n|=========================================+======================+======================|\n|   0  NVIDIA A2                       On | 00000000:81:00.0 Off |                    0 |\n|  0%   38C    P8                9W /  60W|      0MiB / 15356MiB |      0%      Default |\n|                                         |                      |                  N/A |\n+-----------------------------------------+----------------------+----------------------+\n|   1  NVIDIA L4                       On | 00000000:82:00.0 Off |                    0 |\n| N/A   54C    P8               18W /  75W|      0MiB / 23034MiB |      0%      Default |\n|                                         |                      |                  N/A |\n+-----------------------------------------+----------------------+----------------------+\n                                                                                         \n+---------------------------------------------------------------------------------------+\n| Processes:                                                                            |\n|  GPU   GI   CI        PID   Type   Process name                            GPU Memory |\n|        ID   ID                                                             Usage      |\n|=======================================================================================|\n|  No running processes found                                                           |\n+---------------------------------------------------------------------------------------+\n``` \nHere, we see GPU 0 is the A2 (previous one) and GPU 1 is the L4 (new one). \nSelection of the GPU to use can be done through software (e.g., https://discuss.pytorch.org/t/selecting-the-gpu/20276) or using the shell. For software that we are not going to be editing directly (e.g., tecpg), we use the shell variable direction.\n \nThe the environment variable CUDA_VISIBLE_DEVICES can be set when you call python.\n \nTo use the A2 GPU, the following re-mapping works:\n```bash\nCUDA_VISIBLE_DEVICES=1,0 python tecpg run mlr --all --p-thresh 0.000001 -g 100 -m 100000\n``` \nTo use the L4 GPU, the following re-mapping works:\n```bash\nCUDA_VISIBLE_DEVICES=0,1 python tecpg run mlr --all --p-thresh 0.000001 -g 100 -m 100000\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/kordk/torch-ecpg/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.862457042454664,
      "result": {
        "original_header": "Input data",
        "type": "Text_excerpt",
        "value": "Methylatlion CSV datafiles from the GTP dataset (see Demostration below):\n```bash\nhead -5 data/M.csv | cut -d, -f1-5\n```\nBASH2* \nGene expression CSV datafiles from the GTP dataset (see Demostration below):\n```bash\nhead data/G.csv | cut -d, -f1-5\n```\nBASH4*\nBASH5* \n"
      },
      "source": "https://raw.githubusercontent.com/kordk/torch-ecpg/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9059667503814035,
      "result": {
        "original_header": "Demonstration",
        "type": "Text_excerpt",
        "value": "1. Create the evaluation directory\n```bash\nmkdir test; cd test\n``` \n2. Download and prepare the GTP example dataset\n```bash\ntecpg data gtp\n```\nBASH3* \n"
      },
      "source": "https://raw.githubusercontent.com/kordk/torch-ecpg/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/kordk/torch-ecpg/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "BSD 3-Clause \"New\" or \"Revised\" License",
        "spdx_id": "BSD-3-Clause",
        "type": "License",
        "url": "https://api.github.com/licenses/bsd-3-clause",
        "value": "https://api.github.com/licenses/bsd-3-clause"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "BSD 3-Clause License\n\nCopyright (c) 2022, kordk\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
      },
      "source": "https://raw.githubusercontent.com/kordk/torch-ecpg/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "torch-ecpg"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "kordk"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 125916,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 586,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/kordk/torch-ecpg/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "kordk",
          "type": "User"
        },
        "date_created": "2023-03-07T23:21:57Z",
        "date_published": "2023-03-10T22:51:33Z",
        "description": "This is the first release of the Torch-eCpG tool.",
        "html_url": "https://github.com/kordk/torch-ecpg/releases/tag/v1.0.0",
        "name": "Initial Release",
        "release_id": 95262991,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/kordk/torch-ecpg/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/kordk/torch-ecpg/releases/95262991",
        "value": "https://api.github.com/repos/kordk/torch-ecpg/releases/95262991",
        "zipball_url": "https://api.github.com/repos/kordk/torch-ecpg/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "usage",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:28:45",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}