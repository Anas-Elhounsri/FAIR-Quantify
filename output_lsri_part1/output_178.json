{
  "application_domain": [
    {
      "confidence": 19.89,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ShenLab-Genomics/RESA"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-03-10T03:13:37Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-23T19:43:28Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "single cell recurrence based variant analysis"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Summary",
        "parent_header": [
          "RESA: single cell Recurrently Expressed SNV Analysis"
        ],
        "type": "Text_excerpt",
        "value": "RESA detects somatic mutation with high precision directly from scRNA-seq data. The key assumption of this method is that cancer cells evolve in a clonal manner and thus expressed somatic mutations have cross-cell recurrence, whereas the noise and artefacts are likely distributed randomly with small probability of recurrence across the cell population. RESA is composed of three main steps: initial variant calling, filtering and labeling, and modeling and refinement.\n\n"
      },
      "source": "https://raw.githubusercontent.com/ShenLab-Genomics/RESA/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ShenLab-Genomics/RESA/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ShenLab-Genomics/RESA/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ShenLab-Genomics/RESA"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RESA: single cell Recurrently Expressed SNV Analysis"
      },
      "source": "https://raw.githubusercontent.com/ShenLab-Genomics/RESA/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ShenLab-Genomics/RESA/master/src/run_commands.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ShenLab-Genomics/RESA/master/src/RESA_refine_run_commands.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/TZhang11/image/master/Desktop/RESA_img/workflow.png"
      },
      "source": "https://raw.githubusercontent.com/ShenLab-Genomics/RESA/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Install RESA",
        "parent_header": [
          "RESA: single cell Recurrently Expressed SNV Analysis",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "  Before installing RESA, please registe on https://www.openbioinformatics.org/annovar/annovar_download_form.php to download ANNOVAR. \n  To download and install RESA, use the commands.\n  \n      docker pull tianyunz/resa:latest\n      \n      docker run -it tianyunz/resa:latest /bin/bash\n      \n      This takes 20-25 mins to build\n  The following steps are installing the ANNOVAR and downloading the default database used in the RESA package. The size of database gnomad30_genome is large,  and we suggest setting up the docker image size greater than 90G. \n      \n      docker cp annovar.latest.tar.gz containerID:/bin/annovar.latest.tar.gz\n      \n      docker exec -it containerID /bin/bash\n      \n      tar -zxvf /bin/annovar.latest.tar.gz\n      \n      cd /bin/annovar/\n      \n      ./annotate_variation.pl -buildver hg38 -downdb -webfrom annovar gnomad30_genome humandb/\n      \n\t    ./annotate_variation.pl -buildver hg38 -downdb -webfrom annovar ensGene humandb/\n      \n\n  hg38_RNAedit.txt cannot be downloaded directly from the ANNOVAR, and here shows one way to convert it from vcf file to the ANNOVAR readable database.\n  \n\t  wget https://data.broadinstitute.org/Trinity/CTAT_RESOURCE_LIB/MUTATION_LIB_SUPPLEMENT/rna_editing/GRCh38.RNAediting.vcf.gz\n    \n\t  sed -i '1,5d' GRCh38.RNAediting.vcf\n    \n\t  awk '{print $1 \"\\t\" $2 \"\\t\" $2 \"\\t\" $4 \"\\t\" $5}' GRCh38.RNAediting.vcf > temp.txt \n    \n\t  sed '1i\\#Chr\\tStart\\tEnd\\tRef\\tAlt' temp.txt > hg38_RNAedit.txt\n  "
      },
      "source": "https://raw.githubusercontent.com/ShenLab-Genomics/RESA/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ShenLab-Genomics/RESA/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021 Ning Shen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/ShenLab-Genomics/RESA/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RESA"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "ShenLab-Genomics"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 18593,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 16238,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 7363,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 1671,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ShenLab-Genomics/RESA/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "parent_header": [
          "RESA: single cell Recurrently Expressed SNV Analysis",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Perl (version >=5)\n\nR >= 3.4\n\nR Packages: \\\nMutationalPatterns, BSgenome, BSgenome.Hsapines.USCS.hg38, stringr, VariantAnnotation\n\nPython >=3.7\n\nPython Packages: \\\npandas>=1.3.0, rpy2 >=2.9.4, imblearn >= 0.8.0, argparse, sys, os, sklearn, numpy\n\nbcftools\n\nannovar\n\nDependencies for step1: CTAT-mutation; Minimap2; Strelka\n"
      },
      "source": "https://raw.githubusercontent.com/ShenLab-Genomics/RESA/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Variant calling",
        "parent_header": [
          "RESA: single cell Recurrently Expressed SNV Analysis",
          "Running RESA"
        ],
        "type": "Text_excerpt",
        "value": "  This step applies standard reference alignment and variant calling pipelines developed by others. For each cell, two aligners and variant callers need to be applied. This step is memory intensive and time consuming. To allow more flexibility to make best use of the resource available on the user's side, this step is not incoporated in the RESA package. Please refer to variant calling pipeline instructions for CTAT-mutation and Strelka. \n  \n  Here are example codes to run for a single cell sample:\n  \n      ctat_mutations --left sample1_1.fastq --right sample1_2.fastq --out_dir outdir/sample1 --threads=4\n  \n      minimap2 -ax splice -t 4 -G 50k -k 21 -w 11 -sr -A 2 -B 8 -O 12,32 -E 2,1 -r 200 -p.5 -N20 -f 1000,5000 -n 2 -m 20 -s40 -g2000 -2K50m -secondary=no GRCh38.p12.genome.fa sample1_1.fastq sample1_2.fastq | samtools view -hb - | samtools sort -o alignment_minimap2/sample1.bam && samtools index alignment_minimap2/sample1.bam\n  \n      python strelka-2.9.10.centos6_x86_64/bin/configureStrelkaGermlineWorkflow.py --bam alignment_minimap2/sample1.bam --referenceFasta GRCh38.p12.genome.fa --rna --runDir sample1_out_path\n  \n      sample1_out_path/runWorkflow.py -m local -j 4\n  \n"
      },
      "source": "https://raw.githubusercontent.com/ShenLab-Genomics/RESA/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2. RESA-filter",
        "parent_header": [
          "RESA: single cell Recurrently Expressed SNV Analysis",
          "Running RESA"
        ],
        "type": "Text_excerpt",
        "value": "      perl filter_and_label.pl  INPUT_folder  RESULTs_folder  file_sample_list  sample_name  minDP  minRecur  maxRecur  PON_filter(0 or 1) PON_file(if PON_filter is 1)\n      \n  Here are the example codes using RESA-filter to filter example dataset.\n      \n      mkdir /bin/RESA/examples/result/\n      \n      perl /bin/RESA/src/filter_and_label.pl \\\n\t    /bin/RESA/examples/input/K562_primers/ \\\n\t    /bin/RESA/examples/result/ \\\n\t    /bin/RESA/examples/input/K562_primers/list_samples_K562_primers.txt K562_primers 3 3 42\n\n\tThis takes 30-35 mins to run"
      },
      "source": "https://raw.githubusercontent.com/ShenLab-Genomics/RESA/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3. RESA-refine",
        "parent_header": [
          "RESA: single cell Recurrently Expressed SNV Analysis",
          "Running RESA"
        ],
        "type": "Text_excerpt",
        "value": "      python RESA_refine.py -N ./Negative_file -P ./Positive_file -U ./Undefined_file -O dir_out/ -S=True (default: True) --Prob 0.5 (default value)\n  \n  Here are the example codes using RESA-refine to predict mutations of the example dataset. And predicted mutations have saved in prdicted_value.csv\n\n      python3.8 /bin/RESA/src/RESA_refine.py \\\n\t    -N /bin/RESA/examples/result/K562_primers/folder_confident/Double_neg_qualrecur_fail.txt \\\n\t    -P /bin/RESA/examples/result/K562_primers/folder_confident/Double_pos_qualrecur_pass.txt \\\n\t    -U /bin/RESA/examples/result/K562_primers/folder_unsure/Undefined_B.txt \\\n\t    -O /bin/RESA/examples/result/K562_primers/\n\t    --Prob 0.5\n\n\tThis takes 10-15 mins to run\n"
      },
      "source": "https://raw.githubusercontent.com/ShenLab-Genomics/RESA/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:39:57",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ]
}