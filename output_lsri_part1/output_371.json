{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/SFGLab/cudaMMC"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-03-02T13:50:04Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-04-04T16:38:20Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9532825544679692,
      "result": {
        "original_header": "cudaMMC - Parallel Multiscale Monte Carlo Approach to 3D Structure Modelling of the Human Genome",
        "type": "Text_excerpt",
        "value": "cudaMMC is a GPU-enhanced version of the 3D-GNOME software, which utilizes the Multiscale Monte Carlo approach for 3D chromatin structure modeling. \nFor those interested in the previous version, it's hosted on the [Bitbucket repository](https://bitbucket.org/3dome/3dgnome). \nThe methodology behind this tool is described in detail in the following publication:\n**Sza\u0142aj, P., Tang, Z., Michalski, P., Pietal, M. J., Luo, O. J., Sadowski, M., ... & Plewczynski, D. (2016).** *An integrated 3-dimensional genome modeling engine for data-driven simulation of spatial genome organization.* _Genome research_, 26(12), 1697-1709. \ncudaMMC has been integrated into the 3D-GNOME 3.0 web server. We invite you to explore it on the [3D-GNOME 3.0 web server](https://3dgnome.mini.pw.edu.pl/).\ncudaMMC has been integrated into the 3D-GNOME 3.0 web server. We invite you to explore it on the [3D-GNOME 3.0 web server](https://3dgnome.mini.pw.edu.pl/). For a concise overview of our methodology, please refer to the help section on our web server: [3D-GNOME 3.0 web server - help](https://3dgnome.mini.pw.edu.pl/help/). In our article, we detail the usage and introduce new features for analyzing 3D chromatin models. Specifically, we discuss the impact of Structural Variation-driven changes on the 3D structure, which result in altered distances between enhancers and gene promoters. For more details, please see: [3D-GNOME 3.0: a three-dimensional genome modelling engine for analysing changes of promoter-enhancer contacts in the human genome](https://academic.oup.com/nar/article/51/W1/W5/7157515). \n"
      },
      "source": "https://raw.githubusercontent.com/SFGLab/cudaMMC/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8692532454498108,
      "result": {
        "original_header": "Docker Instructions",
        "type": "Text_excerpt",
        "value": "and then start it with \n"
      },
      "source": "https://raw.githubusercontent.com/SFGLab/cudaMMC/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9069016812203685,
      "result": {
        "original_header": "Compilation",
        "type": "Text_excerpt",
        "value": "First, generate the makefile with CMake by executing the command below from the root directory of the package with your desired `path_to_build_folder` and `cuda_arch` (>= 60) values:\n```\ncmake -B ./<path_to_build_folder> -S ./ -DCUDA_ARCH=\"<cuda_arch>\"\n```\nExample for GPU with compute capability >= 8.0:\nBASH2*\nIf you wish to compile a multi-architecture binary, separate desired architectures with a semicolon eg. `-DCUDA_ARCH=\"60;70;80\"` \nProgram usage:\n```\ncudaMMC -s <path> -n <label>\n    -a    action to perform (available values: 'create')\n    -s    path to settings file\n    -n    label to be used in names of output files\n    -c    chromosomes (or region) to be included in the simulation (eg 'chr14:1:2500000', default: 'chr1-chr22,chrX')\n    -o    output directory (with trailing '/'; must exists; default: './')\nDebugging options\n    -u    maximal number of chromosomes to reconstruct\n    -l    length of chromosome fragment that will be reconstructed (in bp)\nNotes\n    PET clusters should have filenames of the form 'GM12878_CTCF_Rep1.withLinker.clusters.intra.PET<N>+.merged_anchors.simple.txt', where <M> corresponds to the flag -m\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/SFGLab/cudaMMC/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9301983821009051,
      "result": {
        "original_header": "Input and output files",
        "type": "Text_excerpt",
        "value": "Additionally to the ChIA-PET files mentioned one can provide a BED file with centromeres' locations and a file with definition of split of the chromosomes into segments.  \n* data_dir - path to the data directory (anchors, clusters, singletons and singletons_inter are all relative to this directory)\n* anchors - name of the anchors file\n* clusters - names of the clusters files (comma separated). Each file should contain clusters   \n* singletons - names of the singleton files (comma separated)\n* singletons_inter - names of interchromosomal singleton files (comma separated)\n* split_singleton_files_by_chr - if *yes* then the chromosome-splitted intrachromosmal files are used \n* factors - names of protein factors used in the experiment (e.g. \"CTCF,RNAPII\")\n* segment_split - path to the BED file with segments split definition\n* centromeres - path to the BED file with centromeres' locations \nFollowing is the format description of the corresponding input files.\n \n"
      },
      "source": "https://raw.githubusercontent.com/SFGLab/cudaMMC/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9723870536682279,
      "result": {
        "original_header": "Anchor file",
        "type": "Text_excerpt",
        "value": "This file contain info about the anchors. For every anchor the chromosome and genomic position of start and end is provided. Optionally the CTCF motif orientation may be provided as 'L' (leftward) or 'R' (rightward). 'N' may be used if the orientation is unknown. File format is as follows:\n```\n#!text\nchromosome_id anchor_start anchor_end [orientation]\n```\nA sample file (with motif orientation provided) may look like this:\n \n"
      },
      "source": "https://raw.githubusercontent.com/SFGLab/cudaMMC/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9847119281949221,
      "result": {
        "original_header": "Cluster files",
        "type": "Text_excerpt",
        "value": "These files contain info about the PET clusters. Each file corresponds to a single transcription factor used in the experiment. Every line of a file describes a single PET cluster and consists of the chromosome, start and end position for the anchors overlapping with the PET cluster. Additionally, a PET count is provided. File format is as follows:\n```\n#!text\nchromosome_id_1 anchor_1_start anchor_1_end chromosome_id_2 anchor_2_start anchor_2_end PET_count\n```\nA sample file may look like this:\n \n"
      },
      "source": "https://raw.githubusercontent.com/SFGLab/cudaMMC/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9054017954830853,
      "result": {
        "original_header": "cudaMMC Settings",
        "type": "Text_excerpt",
        "value": "There is a number of settings available for the cudaMMC simulation. We will now shortly describe the most important ones with an intuitive meaning, the full list of options will follow. \nWe have added three additional parameters under [cuda] section that can be\nspecified in the config.ini configuration file. These are:\n- num threads - this parameter specifies the number of CUDA threads to be launched per block\n- blocks multiplier - stands for the number of CUDA blocks multiplied by the number of beads in the system\n- milestone fails - this parameter determines after how many non improved milestone scores, the algorithm will stop \nRest parameters are the same as in 3D-GNOME version: \n- freq_dist_power - this exponent describes the relation between singletons interaction frequency on a segment level and the physical distances between beads, significantly different values will yield different shapes. Different values were used in the literature. A value of -1.0 correspond to a simple inverse relation.\n- freq_dist_scale - scaling of the segment level structure \n- genomic_dist_scale - responsible for the size of the chromatin loops\n- use_motif_orientation - whether or not to use the CTCF motif orientation\n- use_subanchor_heatmap - whether or not to use the subanchor heatmap to refine chromatin loops modeling \nBelow a description of all the settings available is provided.\n \n"
      },
      "source": "https://raw.githubusercontent.com/SFGLab/cudaMMC/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8852846320193136,
      "result": {
        "original_header": "[main]",
        "type": "Text_excerpt",
        "value": "* output_level - set the level of output messages (range=0..10)\n* random_walk - if true then create a random walk structure on the segment level\n* loop_density - number of subanchor beads that will be placed between the consecutive anchor beads\n* use_2D - if true then the simulation is restricted to 2 dimensions\n* max_pet_length - maximal length of the PET clusters used on the subanchor level (in bp)\n* long_pet_power, long_pet_scale - describe how long PET cluster impact the segment heatmaps (scale*C^power, where C is PET count) \n"
      },
      "source": "https://raw.githubusercontent.com/SFGLab/cudaMMC/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9168892425313451,
      "result": {
        "original_header": "[data]",
        "type": "Text_excerpt",
        "value": "* data_dir - path of the directory with data files\n* anchors - name of the anchor file\n* clusters - names of the cluster files (comma separated)\n* factors - names of the factors used in\n* singletons - names of files with intrachromosomal singletons\n* split_singleton_files_by_chr - flag denoting whether the files in 'singletons' were splitted by chromosome  \n* singletons_inter - names of the files with interchromosomal singletons\n* segment_split - absolute path to a BED file with the segment split info\n* centromeres - absolute path to a BED file with the centromere locations\n \n"
      },
      "source": "https://raw.githubusercontent.com/SFGLab/cudaMMC/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9908539739782892,
      "result": {
        "original_header": "[distance]",
        "type": "Text_excerpt",
        "value": "* genomic_dist_power, genomic_dist_scale, genomic_dist_base - describe relationship between genomic distance and the physical distance between subanchor beads (3D dist = base+scale*d^power, where d is genomic distance in kb)\n* freq_dist_scale, freq_dist_power - describe relationship between interaction frequency and physical distance, used to generate segment level expected distances matrix (3D dist = scale*F^power, where F is interaction frequency)\n* freq_dist_scale_inter, freq_dist_power_inter - the same as freq_dist_scale, but used for the chromosome level. Allows to use different relation for segment and chromosome level.\n* count_dist_a, count_dist_scale, count_dist_shift, count_dist_base_level - describe relationship between PET count and the physical distance between subanchor beads (3D dist = base+scale/e^[a*(shift+C)], where C is PET count)\n \n"
      },
      "source": "https://raw.githubusercontent.com/SFGLab/cudaMMC/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9209319905782561,
      "result": {
        "original_header": "[subanchor_heatmap]",
        "type": "Text_excerpt",
        "value": "* use_subanchor_heatmap - whether or not to construct the subanchor heatmap to refine the subanchor beads placement (i.e. chromatin loops shape and relative positions)\n* estimate_distances_steps - number of structures created to obtain the expected distance matrix\n* estimate_distances_replicates - number of simulation steps for every structure \n* heatmap_influence - the influence of the pairwise anchor distances matrix\n* heatmap_dist_weight - the weight assigned to the expected distance matrix energy term\n \n"
      },
      "source": "https://raw.githubusercontent.com/SFGLab/cudaMMC/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8949595246568262,
      "result": {
        "original_header": "[heatmaps]",
        "type": "Text_excerpt",
        "value": "* inter_scaling - scaling factor applied to the interchromosomal contacts (segment level). This can be used  \n* distance_heatmap_stretching - used to calculate the cap value for large 3D distances (cap = average * stretching) \n \n"
      },
      "source": "https://raw.githubusercontent.com/SFGLab/cudaMMC/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9810795811964778,
      "result": {
        "original_header": "[simulation_heatmap]",
        "type": "Text_excerpt",
        "value": "* max_temp_heatmap - initial temperature for the simulated annealing\n* delta_temp_heatmap - temperature reduction between iterations\n* jump_temp_scale_heatmap, jump_temp_coef_heatmap - parameters to scale the probability of accepting move with higher energy\n* stop_condition_improvement_threshold_heatmap - improvement ratio that is required for the algorithm to stop (must be higher)\n* stop_condition_successes_threshold_heatmap - if the number of accepted moves during a milestone is higher than this value than the algortihm continues\nstop_condition_steps_heatmap - number of steps for each milestone\n \n"
      },
      "source": "https://raw.githubusercontent.com/SFGLab/cudaMMC/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9910864057267134,
      "result": {
        "original_header": "Benchmark",
        "type": "Text_excerpt",
        "value": "We provide scripts to compare time performance and modeling quality between the previous version of the software, 3D-GNOME, and cudaMMC. Check out the [benchmark](benchmark) directory for more details. \n"
      },
      "source": "https://raw.githubusercontent.com/SFGLab/cudaMMC/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/SFGLab/cudaMMC/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/SFGLab/cudaMMC/master/benchmark/cudaMMC_benchmark_analysis.ipynb"
      },
      "source": "https://raw.githubusercontent.com/SFGLab/cudaMMC/master/benchmark/cudaMMC_benchmark_analysis.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/SFGLab/cudaMMC/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SFGLab/cudaMMC"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "cudaMMC - Parallel Multiscale Monte Carlo Approach to 3D Structure Modelling of the Human Genome"
      },
      "source": "https://raw.githubusercontent.com/SFGLab/cudaMMC/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/SFGLab/cudaMMC/master/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/SFGLab/cudaMMC/master/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/SFGLab/cudaMMC/master/extract_singletons.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 0.9695844449928064,
      "result": {
        "original_header": "Docker Instructions",
        "type": "Text_excerpt",
        "value": "Start by building the image with the following command: \n`sudo docker build -t cudammc --progress=plain . 2>&1 | tee docker_build.log` \n`sudo docker run -v ~/Projects:/Projects --rm -it --gpus all cudammc`\n \n"
      },
      "source": "https://raw.githubusercontent.com/SFGLab/cudaMMC/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9974089489821778,
      "result": {
        "original_header": "Compilation",
        "type": "Text_excerpt",
        "value": "First, generate the makefile with CMake by executing the command below from the root directory of the package with your desired `path_to_build_folder` and `cuda_arch` (>= 60) values:\n```\ncmake -B ./<path_to_build_folder> -S ./ -DCUDA_ARCH=\"<cuda_arch>\"\n```\nExample for GPU with compute capability >= 8.0:\nBASH2*\nIf you wish to compile a multi-architecture binary, separate desired architectures with a semicolon eg. `-DCUDA_ARCH=\"60;70;80\"` \nThen, compile the program by executing the following command:\n```\nmake --directory ./build\n``` \nFinally, you can verify if the program has compiled properly by executing the cudaMMC binary:\n```\n./build/cudaMMC\n```\nYou should see the usage message printed in the terminal. \nExample execution command:\n```\n./build/cudaMMC -s config.ini -c chr14 -o ~/chiapet/chr14/ -n chr14_test\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/SFGLab/cudaMMC/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8260991621433169,
      "result": {
        "original_header": "Input and output files",
        "type": "Text_excerpt",
        "value": "Paths of the files are provided via the setting file in the **[data]** section. There are following options available: \n"
      },
      "source": "https://raw.githubusercontent.com/SFGLab/cudaMMC/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8471306924770553,
      "result": {
        "original_header": "cudaMMC Settings",
        "type": "Text_excerpt",
        "value": "Below a description of all the settings available is provided.\n \n"
      },
      "source": "https://raw.githubusercontent.com/SFGLab/cudaMMC/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.838653551352532,
      "result": {
        "original_header": "Compilation",
        "type": "Text_excerpt",
        "value": "Example execution command:\n```\n./build/cudaMMC -s config.ini -c chr14 -o ~/chiapet/chr14/ -n chr14_test\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/SFGLab/cudaMMC/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/SFGLab/cudaMMC/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "cudaMMC"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "SFGLab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 278136,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 255958,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Cuda",
        "size": 60941,
        "type": "Programming_language",
        "value": "Cuda"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 8129,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "CMake",
        "size": 2394,
        "type": "Programming_language",
        "value": "CMake"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 1776,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 728,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/SFGLab/cudaMMC/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "System and hardware requirements",
        "parent_header": [
          "cudaMMC - Parallel Multiscale Monte Carlo Approach to 3D Structure Modelling of the Human Genome"
        ],
        "type": "Text_excerpt",
        "value": "* UNIX based Operating System\n* C++ 17 compliant compiler (gcc/clang)\n* NVIDIA CUDA Toolkit 11.0 or higher with compatible NVIDIA driver\n* NVIDIA GPU with Pascal architecture or newer (compute capability >= 6.0)\n* CMake 3.13 or higher\n\nYou can install cudaMMC using docker or compile it without a container:\n"
      },
      "source": "https://raw.githubusercontent.com/SFGLab/cudaMMC/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier"
  ],
  "somef_provenance": {
    "date": "2024-10-04 00:30:08",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "cudaMMC Settings"
        ],
        "type": "Text_excerpt",
        "value": "Example usage of the software is described in the [README.md](example_data%2FREADME.md).\n"
      },
      "source": "https://raw.githubusercontent.com/SFGLab/cudaMMC/master/README.md",
      "technique": "header_analysis"
    }
  ]
}