{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/YeoLab/FLARE"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-10-10T19:26:29Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-06-26T00:53:55Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RNA edit detection (SAILOR) and peak calling (FLARE)"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9989804401417816,
      "result": {
        "original_header": "FLagging Areas of RNA-editing Enrichment (FLARE)",
        "type": "Text_excerpt",
        "value": "We present FLagging Areas of RNA-editing Enrichment (FLARE),  a Snakemake-based pipeline that uses a statistical approach to determine regions of enriched RNA editing, using SAILOR-derived editing sites as a starting point. FLARE is configurable for use with any type of base pair change \u2013 we include with this release of FLARE an update of SAILOR to enable detection of all edit types.\n \n"
      },
      "source": "https://raw.githubusercontent.com/YeoLab/FLARE/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9650579990391256,
      "result": {
        "original_header": "Output format",
        "type": "Text_excerpt",
        "value": "* *chrom* - Chromosome\n* *start* - Start coordinate \n* *end* - End coordinate\n* *edit_fraction* - Fraction of target bases edited\n* *strand* - Strand \n* *target_bases* - Number of target bases\n* *edited_bases* - Number of edited bases\n* *num_edited_reads* - Number of edited reads (at least one edit) overlapping region\n* *total_reads_in_region* - Number of reads overlapping region\n* *fraction_reads_edited* - Fraction of reads overlapping region with at least one edit\n* *mean_depth* - Mean coverage in region\n* *num_substrate_bases* - Number of editable bases the sequence which the region spans contains (i.e. when editing Cs, region sequence AACTAGACTGGC would yield 3)\n* *score* - Negative binomial-derived score for cluster, useful in prioritizing clusters \n"
      },
      "source": "https://raw.githubusercontent.com/YeoLab/FLARE/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/YeoLab/FLARE/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "faq": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Launch the snakemake job",
        "parent_header": [
          "Running the FLARE (cluster identification) snakemake pipeline",
          "Parameters"
        ],
        "type": "Text_excerpt",
        "value": "Using the same config.yaml file you made previously to launch your sailor run, you can then launch the FLARE pipeline similarly for each sample:\n`\nsnakemake --profile /full/path/to/FLARE/profiles/my_profile/ --configfile /full/path/to/your/config/file/FLARE_info_for_this_sample.json\n`\n\nThis will create a new folder within the folder you specified at the \"output_folder\" parameter. Within that folder, a series of subfolders will be created as the job runs. The ultimate output you should expect will end up looking like this:\n\n```\n/absolute/path/to/FLARE/folder/outputs_where_all_samples_will_be_placed/FLARE_outputs/\n    >bash_scripts\n        > label_for_this_sample\n            > label_for_this_sample_bash_job_edit_c_0.sh \n            > ...\n            > label_for_this_sample_bash_job_edit_c_number_of_regions.sh \n    >bedgraphs\n        > label_for_this_sample_editc.bedgraph\n    >editc_outputs\n        > label_for_this_sample\n            > label_for_this_sample_edit_c_for_all_regions_0_all_info.filtered_regions.tsv\n            > label_for_this_sample_edit_c_for_all_regions_0_all_info.tsv\n            > ...\n            > label_for_this_sample_edit_c_for_all_regions_number_of_regions_all_info.filtered_regions.tsv\n            > label_for_this_sample_edit_c_for_all_regions_number_of_regions_0_all_info.tsv\n    >FLARE\n        > label_for_this_sample\n            > label_for_this_sample.fdr_0.1.d_15.edit_fraction.filtered_regions.tsv\n            > label_for_this_sample.fdr_0.1.d_15.edit_fraction.tsv\n            > label_for_this_sample.fdr_0.1.d_15.merged.bed\n            > label_for_this_sample.fdr_0.1.d_15.regions\n        label_for_this_sample.fdr_0.1.d_15.scored.tsv\n```\n\nThe final scored clusters are found within the FLARE folder, in this example *label_for_this_sample.fdr_0.1.d_15.scored.tsv*.\n"
      },
      "source": "https://raw.githubusercontent.com/YeoLab/FLARE/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/YeoLab/FLARE/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "YeoLab/FLARE"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/YeoLab/FLARE/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/YeoLab/FLARE/master/workflow_sailor/scripts/bam_to_bw.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Use the make_FLARE_jsons.py to set up configuration .json files for multiple samples",
        "parent_header": [
          "Running the FLARE (cluster identification) snakemake pipeline",
          "Parameters"
        ],
        "type": "Text_excerpt",
        "value": "If you are identifying clusters for many samples, it will be too time consuming to manually create .json files for each sample. Instead, use the provided make_FLARE_jsons.py script, which can be found in workflow_FLARE/scripts, to generate all .json files simultaneously.\n\n* First create a new folder where these .jsons will be stored. \n* Also create a folder where all FLARE outputs will be stored.\n* Then, call the script using the following parameters:\n\n    `\n    python make_FLARE_jsons.py <path_to_sailor_output_folder> <path_to_new_folder_where_jsons_will_be_placed> <path_to_new_folder_where_FLARE_outputs_will_be_placed> <path_to_fasta_used_for_alignment> <edit_type (i.e. CT or AG)> <fdr_threshold (default 0.1)> <--cluster_identification_regions_folder CLUSTER_IDENTIFICATION_REGIONS_FOLDER OR --edit_fraction_regions_file EDIT_FRACTION_REGIONS_FILE>\n    `\n\nOnce this completes, you will have one .json file for each sample successfully processed by SAILOR.\n"
      },
      "source": "https://raw.githubusercontent.com/YeoLab/FLARE/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/YeoLab/FLARE/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "\nThis software is Copyright \u00a9 2XXX The Regents of the University of California. \nAll Rights Reserved. \n\nPermission to copy, modify, and distribute this software and its documentation \nfor educational, research and non-profit purposes, without fee, and without a \nwritten agreement is hereby granted, provided that the above copyright notice, \nthis paragraph and the following three paragraphs appear in all copies. \n\nPermission to make commercial use of this software may be obtained by contacting:\n\n   Office of Innovation & Commercialization\n   9500 Gilman Drive, Mail Code 0910\n   University of California\n   La Jolla, CA 92093-0910\n   (858) 534-5815\n   innovation@ucsd.edu\n\nThis software program and documentation are copyrighted by The Regents of the \nUniversity of California. The software program and documentation are supplied \n\u00ecas is\u00ee, without any accompanying services from The Regents. The Regents does \nnot warrant that the operation of the program will be uninterrupted or \nerror-free. The end-user understands that the program was developed for \nresearch purposes and is advised not to rely exclusively on the program for \nany reason.\n\nIN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR \nDIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING \nLOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, \nEVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF \nSUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY \nWARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE PROVIDED \nHEREUNDER IS ON AN \u00ecAS IS\u00ee BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO \nOBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR \nMODIFICATIONS.\n"
      },
      "source": "https://raw.githubusercontent.com/YeoLab/FLARE/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/YeoLab/FLARE/master/FLARE_logo.png"
      },
      "source": "https://raw.githubusercontent.com/YeoLab/FLARE/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "FLARE"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "YeoLab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 143137,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 2678,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/YeoLab/FLARE/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://snakemake.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/YeoLab/FLARE/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "type": "Text_excerpt",
        "value": "* Your system must be at least Linux Centos7\n\n* Make sure that the environment your SAILOR and FLARE processing pipelines will be running on have snakemake installed (https://snakemake.readthedocs.io/en/v5.6.0/getting_started/installation.html). \n\n* You also will need to have Singularity installed for several steps of the pipeline to work. We have created singularity images containing all necessary python packages that will automatically be loaded for you in the course of running the pipeline, as long as your system has singularity installed.\n"
      },
      "source": "https://raw.githubusercontent.com/YeoLab/FLARE/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Parameters",
        "parent_header": [
          "Running the FLARE (cluster identification) snakemake pipeline"
        ],
        "type": "Text_excerpt",
        "value": "All SAILOR configuration information must be saved in a .json file with the following contents:\n```\n{\n  \"samples_path\": \"/path/to/aligned/bams/\",\n  \"samples\": [\n    \"sample1.sortedByCoord.out.bam\",\n    \"sample2.sortedByCoord.out.bam\",\n    ....,\n    etc.\n  ],\n  \"reverse_stranded\": true,\n  \"reference_fasta\": \"/path/to/fasta/used/to/align/genome.fa\",\n  \"known_snps\": \"/path/to/known/common/snps/file/for/organism/in/chrom/start/end/format/b151_GRCh38p7_common.bed3\",\n  \"edit_type\": \"CT\", (or \"AG\", \"TC\", etc.)\n  \"output_dir\": \"/path/to/output/directory\"\n}\n```\nCreate your .json config file and call it something sensible based on your experiment, for example 'sailor.json'. Multiple .bam files contained in one directory can be processed with one run of the SAILOR pipeline.\n\nIn order to run a snakemake pipeline, there a few parameters that snakemake needs to know about. The first is which Snakefile to use -- the Snakefile contains the instructions for running each step of the pipeline, and for the SAILOR pipeline will be found at your local version of /FLARE/workflow_sailor/Snakefile. The second is which config file to use -- this is the config file you just created, which contains the parameters particular to your run of the pipeline. Always absolute paths. You will also need to tell snakemake to use singularity, and specify singularity arugments allowing the virtual environments to have access to your local filesystem -- the \"bind\" parameters should reflect locations that the pipeline should have access to, for example folders containing relevant input bams, fastas, gtfs or dbsnp files. So, an example snakemake run could like like the following:\n\n`\nsnakemake --snakefile /full/path/to/FLARE/workflow_sailor/Snakefile --configfile /full/path/to/your/config/file/sailor.json --verbose --use-singularity     --singularity-args '--bind /home --bind /projects'  -j1\n`\n\nHowever, this will launch the snakemake pipeline on your head node, and all subsequent snakemake jobs (which can number into the hundreds depending on how many samples you are processing) will also be run there. \n"
      },
      "source": "https://raw.githubusercontent.com/YeoLab/FLARE/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Instructions on HPCC (cluster with submission):",
        "parent_header": [
          "Running the SAILOR (edit site finding) snakemake pipeline"
        ],
        "type": "Text_excerpt",
        "value": "If you have access to a high performance compute cluster, you probably want jobs to be automatically submitted to this system instead so that you can take full advantage of the parallelization built into this pipeline, especially if you are analyzing many samples. Cluster submission information can be placed into a \"profile\" file. In this case, you can model your profile file on the file at /full/path/to/FLARE/profiles/tscc_sailor/config.yaml, which by default has the following contents:\n\n```\ncluster: \"qsub -N {rule}.{wildcards} -l nodes=1:ppn={params.threads},walltime={params.run_time} -A yeo-group -q home -V -t 0\"\nverbose: true\nnotemp: false\nlatency: 300\nprintshellcmds: true\ndirectory: .\nsnakefile: /path/to/FLARE/workflow_sailor/Snakefile\nuse-singularity: true\nsingularity-args: '--bind /oasis --bind /projects --bind /home'\njobs: 8\nskip-script-cleanup: true\nsingularity-prefix: /projects/ps-yeolab4/software/stamp/0.99.0/bin/.singularity\nnolock: true\n```\n\n* Change \"cluster\" to be relevant to your cluster system, specifically changing the names of the parameters to match your system's requirements.\n    * When in doubt, just hardcode the nodes (in this example 'ppn') to be equal to 1 and run time (in this example 'walltime') values at 5 hours. You can increase the walltime value if your job is running out of time. \n* Change \"directory\" to be the full path to the directory where you want log files for each step to be deposited during the snakemake run\n* Change \"snakefile\" to the absolute path for your version of the workflow_sailor Snakefile, as mentioned earlier\n* Change \"singularity-args\" to include the correct directory binding relevant to your system so snakemake can find all necessary files\n* Change \"singularity-prefix\" to reflect the absolute path to where you want the singularity images used for the run to be stored (should have a lot of space)\n* Change \"jobs\" to reflect the maximum number of jobs you want submitted to your cluster simulataneously\n\nPut your profile configuration .yaml file in a new folder you can call /full/path/to/FLARE/profiles/my_profile/, for example.\nWith more run information tucked away into the profile file, the snakemake launch command becomes simpler as it can reference the parameters from this profile file (note that it is actually the folder containing the profile.yaml file that is specified, not the file itself):\n\n`\nsnakemake --profile /full/path/to/FLARE/profiles/my_profile/ --configfile /full/path/to/your/config/file/sailor.json\n`\n\nRunning that command should launch your SAILOR run.\nAn example set of completed outputs from a successful SAILOR run, using the small .bam file and config inputs found in the \"examples\" folder, looks like this. Note that these folders may not necessarily appear chronologically in an order matching their number. The final outputs are the .ranked.bed files.\n\n```\n1_split_strands\n3_index_reads\n4_filter_reads\n5_pileup_reads\n6_vcfs\n7_scored_outputs\n8_bw_and_bam\n9_edit_fraction_bedgraphs\nsubsampled.bam.combined.readfiltered.formatted.varfiltered.snpfiltered.ranked.bed\n```\n"
      },
      "source": "https://raw.githubusercontent.com/YeoLab/FLARE/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running the FLARE (cluster identification) snakemake pipeline",
        "type": "Text_excerpt",
        "value": "FLARE can be run in two modes:\n* Cluster Identification Mode: \n    * * Determines edit cluster locations along with a confidence score for prioritizing and filtering clusters\n* Edit Fraction Mode:\n    * * Calculates edit fractions within predetermined genomic regions\n\nTo give a scenario where you might find the second mode of use, let's say you are comparing editing between two samples, A and B, expected to have different levels of editing, or different edited locations. You would first use the Cluster Identification Mode to find the edit clusters in A and B. Then, after inspecting the resulting clusters and possibly filtering them, you can make a merged regions file containing the union of edited regions found in A and B. Then, you'd run FLARE again for each sample, but this time in Edit Fraction mode, providing this merged regions file as a parameter. This would generate, for each sample, an output file containing the edit fraction at each of the regions in the merged regions. Downstream analyses can then be implemented to assess statistical significance of differential editing at the same loci across samples or conditions.\n\n\n## Before you start:\n\nTo run the FLARE pipeline, you will first need a set of files specifying the genomic regions in which cluster identification will occur. To generate these files, use the script in workflow_FLARE/scripts called generate_regions.py\n\nCopy this script to wherever you'd like to generate the helper files, which will be take up about 8-10 GB of space. Then run the script by typing   `generate_regions.py <full/path/to/your/genome/gtf/file> <genome_name>_regions`\n\nThe .gtf file you use should include gene and exon level information, i.e. the third column should at least contain the descriptors \"gene\" and \"exon.\"\n\nIf using the following command, for example:\n`generate_regions.py <full/path/to/your/genome/gtf/mm10.gtf > mm10_regions`\n\nOnce the script finishes running, you will see a new folder called mm10_regions, and within that folder a slew of files with increasing indices, i.e. mm10_regions_0, mm10_regions_1... \n\n## Parameters\nAll FLARE configuration information must be saved in a .json file with the following contents:\n"
      },
      "source": "https://raw.githubusercontent.com/YeoLab/FLARE/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Cluster Identification Mode",
        "parent_header": [
          "Running the FLARE (cluster identification) snakemake pipeline",
          "Parameters"
        ],
        "type": "Text_excerpt",
        "value": "```\n{\n    \"label\": \"label_for_this_sample\",\n    \"output_folder\": \"/absolute/path/to/folder/outputs_where_all_samples_will_be_placed/FLARE_outputs/\",\n    \"stamp_sites_file\": \"/absolute/path/to/sailor/output/this_sample.bam.combined.readfiltered.formatted.varfiltered.snpfiltered.ranked.bed\",\n    \"forward_bw\": \"/absolute/path/to/sailor/output/8_bw_and_bam/this_sample.sortedByCoord.out.bam.fwd.sorted.bw\",\n    \"reverse_bw\": \"/absolute/path/to/sailor/output/8_bw_and_bam/this_sample.sortedByCoord.out.bam.rev.sorted.bw\",\n    \"fasta\": \"/path/to/fasta/used/to/align/genome.fa\",\n    \"regions\": \"/absolute/path/to/regions/folder\",  # Generated using the script described above\n    \"edit_type\": \"CT\", (or \"AG\", \"TC\", etc.-- should be same as what was used in SAILOR run)\n    \"bam\": \"/absolute/path/to/sailor/output/8_bw_and_bam/this_sample.sortedByCoord.out.bam_filtered_merged.sorted.bam\"\n    \"keep_all\": false\n}\n```\n****Note**** This specifies parameters for FLARE for only *one* sample. Four of the inputs to the FLARE pipeline are SAILOR outputs for this sample,\nand of those, three are specifically contained in the 8_bw_and_bam folder from that SAILOR run. Other than that, you must specify the edit type (should be the same as whatever was specified for the SAILOR run), a label for your sample, the overall output folder where you want the FLARE folder for this sample to be generated, and the fasta that was used to align the genome (same sample as was used for the SAILOR run). \n\n****Note****: *keep_all* should be false, and a regions *directory* must be specified\n"
      },
      "source": "https://raw.githubusercontent.com/YeoLab/FLARE/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Edit Fraction Mode",
        "parent_header": [
          "Running the FLARE (cluster identification) snakemake pipeline",
          "Parameters"
        ],
        "type": "Text_excerpt",
        "value": "```\n{\n    \"label\": \"label_for_this_sample\",\n    \"output_folder\": \"/absolute/path/to/folder/outputs_where_all_samples_will_be_placed/FLARE_outputs/\",\n    \"stamp_sites_file\": \"/absolute/path/to/sailor/output/this_sample.bam.combined.readfiltered.formatted.varfiltered.snpfiltered.ranked.bed\",\n    \"forward_bw\": \"/absolute/path/to/sailor/output/8_bw_and_bam/this_sample.sortedByCoord.out.bam.fwd.sorted.bw\",\n    \"reverse_bw\": \"/absolute/path/to/sailor/output/8_bw_and_bam/this_sample.sortedByCoord.out.bam.rev.sorted.bw\",\n    \"fasta\": \"/path/to/fasta/used/to/align/genome.fa\",\n    \"regions_file\": \"/absolute/path/to/regions/file\",  # See note below about formatting for the regions file\n    \"edit_type\": \"CT\", (or \"AG\", \"TC\", etc.-- should be same as what was used in SAILOR run)\n    \"bam\": \"/absolute/path/to/sailor/output/8_bw_and_bam/this_sample.sortedByCoord.out.bam_filtered_merged.sorted.bam\"\n    \"keep_all\": true \n}\n```\n****Note****: *keep_all* should be true, and a regions *file* must be specified\n\nThe regions file used for Edit Fraction Mode is not a typical bed file. It should be tab-separated and the same column headers as in the following example:\n```\nregion_id       chrom   start   end     strand\nA               1       783678  783708  +\nB               1       783753  783843  +\nC               1       784475  784520  +\nD               1       804189  804222  +\nE               1       826656  826686  -\nF               1       996371  996416  -\n```\n"
      },
      "source": "https://raw.githubusercontent.com/YeoLab/FLARE/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "documentation",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:54:51",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Before you start:",
        "parent_header": [
          "Running the FLARE (cluster identification) snakemake pipeline"
        ],
        "type": "Text_excerpt",
        "value": "* To get the known snps bedfile for all chromosome, download the appropriate individual chromosome bedfiles, for example from here: https://ftp.ncbi.nih.gov/snp/organisms/, then combine them all (remembering to remove any header lines, and retain only chrom start end columns), ie:\n\n    ```\n    for b in $(ls *.bed); do echo $b; tail -n+2 $b | cut -f1,2,3  | sort >> mm10_dbsnp_combined.bed3; done\n    ```\n\n    Make sure that your chromosome nomenclature is the same as in the fasta file you are using (\"chr1\" vs \"1\")!\n    This file should then contain lots of lines like this, tab-separated, without headers:\n    \n    1   1334235  1334236\n    ...\n"
      },
      "source": "https://raw.githubusercontent.com/YeoLab/FLARE/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Use the make_FLARE_jsons.py to set up configuration .json files for multiple samples",
        "parent_header": [
          "Running the FLARE (cluster identification) snakemake pipeline",
          "Parameters"
        ],
        "type": "Text_excerpt",
        "value": "If you are identifying clusters for many samples, it will be too time consuming to manually create .json files for each sample. Instead, use the provided make_FLARE_jsons.py script, which can be found in workflow_FLARE/scripts, to generate all .json files simultaneously.\n\n* First create a new folder where these .jsons will be stored. \n* Also create a folder where all FLARE outputs will be stored.\n* Then, call the script using the following parameters:\n\n    `\n    python make_FLARE_jsons.py <path_to_sailor_output_folder> <path_to_new_folder_where_jsons_will_be_placed> <path_to_new_folder_where_FLARE_outputs_will_be_placed> <path_to_fasta_used_for_alignment> <edit_type (i.e. CT or AG)> <fdr_threshold (default 0.1)> <--cluster_identification_regions_folder CLUSTER_IDENTIFICATION_REGIONS_FOLDER OR --edit_fraction_regions_file EDIT_FRACTION_REGIONS_FILE>\n    `\n\nOnce this completes, you will have one .json file for each sample successfully processed by SAILOR.\n"
      },
      "source": "https://raw.githubusercontent.com/YeoLab/FLARE/master/README.md",
      "technique": "header_analysis"
    }
  ]
}