{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "CEMIG (Cis rEgulatory Motif Influence using de Bruijn Graph)"
        ],
        "type": "Text_excerpt",
        "value": "Any questions, problems, bugs are welcome and should be dumped to\nCankun Wang <cankun.wang@osumc.edu>.\n"
      },
      "source": "https://raw.githubusercontent.com/OSU-BMBL/CEMIG/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/OSU-BMBL/CEMIG"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-05-24T01:55:20Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-05-25T03:45:39Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A new motif prediction algorithm called CEMIG (cis regulatory motif influence using de Bruijn graph)"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.947418700406809,
      "result": {
        "original_header": "Overview",
        "type": "Text_excerpt",
        "value": "`CEMIG` is a new motif prediction algorithm which takes *k*-mer as the basic unit, finds motif seeds by introducing hash table and describing the relationship between *k*-mers constituting motif by using de Bruijn graph model, and then merges and extends among motif seeds, so as to more accurately predict the transcriptional motifs in ATAC-seq data. \n(A) Determines the P-values of *k*-mer in background data utilizing Markov models.  \n(B) Constructs Hamming distance graph ($G$) and DBG ($G_{DB}$) graphs using *k*-mer. \n"
      },
      "source": "https://raw.githubusercontent.com/OSU-BMBL/CEMIG/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9423563440244188,
      "result": {
        "original_header": "1. *P*-value calculation for *k*-mers",
        "type": "Text_excerpt",
        "value": "Initially, `CEMIG` evaluates input sequences (footprints) to determine *k*-mer *P*-values using a Poisson distribution. This is informed by nucleotide frequencies estimated via zero to second-order Markov models.\n \n"
      },
      "source": "https://raw.githubusercontent.com/OSU-BMBL/CEMIG/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9280738432177454,
      "result": {
        "original_header": "2. Construction of hamming distance graph and de Bruijn graph",
        "type": "Text_excerpt",
        "value": "`CEMIG` constructs a Hamming distance graph ($G$) and a de Bruijn graph ($G_{DB}$) using *k*-mers. The *k*-mers are sorted by ascending *P*-values and classified into three tiers, which facilitates the construction of the Hamming distance graph and the $G_{DB}$.\n \n"
      },
      "source": "https://raw.githubusercontent.com/OSU-BMBL/CEMIG/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8873405977891512,
      "result": {
        "original_header": "3. Detection of *k*-mer clusters",
        "type": "Text_excerpt",
        "value": "`CEMIG` detects *k*-mer clusters through graph clustering on the Hamming distance graph and constructs a secondary directed graph (digraph) by amalgamating vertices from identical clusters in the $G_{DB}$.\n \n"
      },
      "source": "https://raw.githubusercontent.com/OSU-BMBL/CEMIG/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9740967013863439,
      "result": {
        "original_header": "Enrichment Score",
        "type": "Text_excerpt",
        "value": "Step 1: Tecord the number of site occurrences of a motif in all sequences, for example 2000 times assuming a total of 10000 sequences. \nStep 2: Use the PWM matrix of the modules found by `CMEIG` to score each site in the motif. Every site in motif that appears in any input sequence is recorded, and this step is repeated for all sites and the lowest score is recorded as the threshold. \nStep 3: Randomly generates a background sequence of `100` based on the frequency of specific base pairs appearing in the input sequence; Using similar steps as in the first step, scan these background sequences based on motif's PWM. If the score of the fragments reaches or exceeds the threshold, it is considered that the background sequence contains the motif site.  \nStep 4: Based on the steps below, the number of background sequences containing motif sites is obtained and based on both the number of motif sites in the original and background sequences. Enrichment score is defined as the number of motif sites in the original and background sequences and *P*-value was calculated using `Fisher`'s exact test. The following is a table for Fisher's exact test: \n"
      },
      "source": "https://raw.githubusercontent.com/OSU-BMBL/CEMIG/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9616962623985177,
      "result": {
        "original_header": "Parameters",
        "type": "Text_excerpt",
        "value": "| Option  | Parameter | Description | Default |\n| ------------- | ------------- | ------------- | ------------- |\n| -I  | `inputfile` | Specify input file. | The program uses input file with standard FASTA file format in default.|\n| -O  | `outfile` | Specify the output file prefix name and location. | The program uses the input file path and prefix name as default values. |\n| -P  | `paired-end` | Specify Whether the input data is paired-end. | This flag is set as `TRUE` in default. |\n| -M | `maxmotifs` | Maximum number of output motifs. | The default number is `100`. |  \n| -W | `Width` | Specify *k* value which determines the length of *k*-mer.  | The *k*-mer uses 6-mer in default. This parameter is not recommended to be modified. |\n| -G | `gap` | The maximum number of gaps allowed for the cluster to extend on the path. | The default number is `6`. |  \n \n"
      },
      "source": "https://raw.githubusercontent.com/OSU-BMBL/CEMIG/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/OSU-BMBL/CEMIG/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/OSU-BMBL/CEMIG/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "OSU-BMBL/CEMIG"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CEMIG (Cis rEgulatory Motif Influence using de Bruijn Graph)"
      },
      "source": "https://raw.githubusercontent.com/OSU-BMBL/CEMIG/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OSU-BMBL/CEMIG/main/overview.jpg"
      },
      "source": "https://raw.githubusercontent.com/OSU-BMBL/CEMIG/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Sequence set",
        "parent_header": [
          "CEMIG (Cis rEgulatory Motif Influence using de Bruijn Graph)"
        ],
        "type": "Text_excerpt",
        "value": "The sequence set refers to the collection of DNA sequences that are used as input data for motif discovery algorithms. The sequence set is specifically derived from ChIP-seq data or ATAC-seq data. The ChIP-seq data usually includes a narrow peak file in `FASTA` format. For ATAC-seq data, either a narrow peak file or a footprint file in `FASTA` format is used as input for the `CEMIG` algorithm to identify DNA binding motifs.\n"
      },
      "source": "https://raw.githubusercontent.com/OSU-BMBL/CEMIG/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "CEMIG (Cis rEgulatory Motif Influence using de Bruijn Graph)"
        ],
        "type": "Text_excerpt",
        "value": "Enter the folder `code` and type `make` then the compiled codes are within the same directory as the source.\n\n```\ncd code/\nmake clean && make\n```\n"
      },
      "source": "https://raw.githubusercontent.com/OSU-BMBL/CEMIG/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9376828541180066,
      "result": {
        "original_header": "Overview",
        "type": "Text_excerpt",
        "value": "(D) Identifies motifs via path extension in $G_C$.\n \n"
      },
      "source": "https://raw.githubusercontent.com/OSU-BMBL/CEMIG/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9448992997701835,
      "result": {
        "original_header": "Motif prediction using CEMIG",
        "type": "Text_excerpt",
        "value": "```\ncd code/\n./cemig -i [INPUT_FILE]\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/OSU-BMBL/CEMIG/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8916453230279215,
      "result": {
        "original_header": "Motif prediction using CEMIG",
        "type": "Text_excerpt",
        "value": "For Example:\n```\n./cemig -i ../Example/test.fa\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/OSU-BMBL/CEMIG/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/OSU-BMBL/CEMIG/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CEMIG"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "OSU-BMBL"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 128787,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 1867,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 825,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/OSU-BMBL/CEMIG/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:28:34",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "non-software"
      },
      "technique": "software_type_heuristics"
    }
  ]
}