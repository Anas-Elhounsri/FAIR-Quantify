{
  "acknowledgement": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Acknowledgements",
        "type": "Text_excerpt",
        "value": "===============\n\nGALBA code was derived from the BRAKER code, where a similar pipeline for using GenomeThreader with BRAKER was once published in <sup name=\"a9\">[R9](#f9)</sup>. We hereby acknowledge the contributions of all BRAKER authors (in particular Simone Lange, Anica Hoppe, Alexandre Lomsadze, and Mark Borodovsky) to the code that GALBA was derived from, and we are grateful for funding for BRAKER development by the National Institutes of Health (NIH) grant GM128145, which indirectly also supported development of GALBA.\n\nEthan Tolman and Paul Frandsen first mentioned the idea of the DIAMOND filter for GALBA gene sets in their preprint doi: https://doi.org/10.1101/2023.12.11.569651 .\n\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citing GALBA and software called by GALBA",
        "type": "Text_excerpt",
        "value": "=============================================\n\nSince GALBA is a pipeline that calls several Bioinformatics tools, publication of results obtained by GALBA requires that not only GALBA is referred to, but also the tools that are called by GALBA. GALBA will output a file `what-to-cite.txt` in the GALBA working directory, informing you about which exact sources apply to your run.\n\n-   Always cite:\n\n    -   Bruna, T., Li, H., Guhlin, J., Honsel, D., Herbold, S., Stanke, M., Nenasheva, N., Ebel, M., Gabriel, L., and Hoff, K.J. (2023) \"GALBA: Genome Annotation with Miniprot and AUGUSTUS\". *BMC Bioinformatics*, 24:327, https://doi.org/10.1186/s12859-023-05449-z.\n\n    -   Hoff, K. and Stanke, M. 2019. \u201cPredicting genes in single genomes with AUGUSTUS.\u201c *Current Protocols in Bioinformatics*, 65(1), e57.\n\n    -   Stanke. M., Sch\u00f6ffmann, O., Morgenstern, B. and Waack, S. (2006). Gene prediction in eukaryotes with a generalized hidden Markov model that uses hints from external sources. BMC Bioinformatics 7, 62.\n\n    -   Buchfink, B., Xie, C., Huson, D.H. (2015). Fast and sensitive protein alignment using DIAMOND. Nature Methods 12:59-60.\n\n-   If GALBA was executed with Miniprot, cite:\n\n    -   Li, H. (2023). Protein-to-genome alignment with miniprot. Bioinformatics, 39(1), btad014.\n\n-   If GALBA was executed with GenomeThreader, cite:\n\n    -   Gremme, G. (2013). Computational Gene Structure Prediction. PhD thesis, Universit\u00e4t Hamburg.\n    \n    -   Hoff, K.J., Lomsadze, A., Borodovsky, M. and Stanke, M. (2019). Whole-Genome Annotation with BRAKER. Methods Mol Biol. 1962:65-95, doi: 10.1007/978-1-4939-9173-0_5.\n\n-   If GALBA called TSEBRA (for all genomes >140 Mbp), cite:\n    \n    -    Gabriel, L., Hoff, K. J., Bruna, T., Borodovsky, M., and Stanke, M. (2021). TSEBRA: transcript selector for BRAKER. BMC Bioinformatics 22(1):1-12.\n\n-   If GALBA called MakeHub for creating a track data hub for visualization of GALBA results with the UCSC Genome Browser, cite:\n\n    -   Hoff, K.J. (2019) MakeHub: Fully automated generation of UCSC Genome Browser Assembly Hubs. Genomics, Proteomics and Bioinformatics 17(5):546-549.\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "References",
        "type": "Text_excerpt",
        "value": "==========\n\n<b id=\"f1\">[R1]</b> Li, H. (2023). Protein-to-genome alignment with miniprot. Bioinformatics, 39(1), btad014.[\u21a9](#a1)\n\n<b id=\"f2\">[R2]</b> Gremme, G. 2013. \u201cComputational Gene Structure Prediction.\u201d PhD thesis, Universit\u00e4t Hamburg.[\u21a9](#a2)\n\n<b id=\"f3\">[R3]</b> Stanke, M., Sch\u00f6ffmann, O., Morgenstern, B., and Waack., S. 2006. \u201cGene Prediction in Eukaryotes with a Generalized Hidden Markov Model That Uses Hints from External Sources.\u201d *BMC Bioinformatics* 7 (1). BioMed Central: 62.[\u21a9](#a3)\n\n<b id=\"f4\">[R4]</b> Hoff, K. and Stanke, M. 2019. \u201cPredicting genes in single genomes with AUGUSTUS.\u201c *Current Protocols in Bioinformatics*, 65(1), e57.[\u21a9](#a4)\n\n<b id=\"f5\">[R5]</b> Bruna, T., Hoff, K. J.,  Lomsadze, A., Stanke, M., and Borodvsky, M. 2021. \u201cBRAKER2: automatic eukaryotic genome annotation with GeneMark-EP+ and AUGUSTUS supported by a protein database.\" *NAR Genomics and Bioinformatics* 3(1):lqaa108.[\u21a9](#a5)\n\n<b id=\"f6\">[R6]</b> Hoff, K. J., Lange, S., Lomsadze, A., Borodovsky, M., and Stanke, M. 2015. \u201cBRAKER1: Unsupervised Rna-Seq-Based Genome Annotation with Genemark-et and Augustus.\u201d *Bioinformatics* 32 (5), 767--69.[\u21a9](#a6)\n\n<b id=\"f7\">[R7]</b>Buchfink, B., Xie, C., and Huson, D. H. 2015. Fast and sensitive protein alignment using DIAMOND. *Nature Methods*, 12(1), 59-60.[\u21a9](#a7)\n\n<b id=\"f8\">[R8]</b> Hoff, K.J. 2019. MakeHub: Fully automated generation of UCSC Genome Browser Assembly Hubs. *Genomics, Proteomics and Bioinformatics*, in press, preprint on bioarXive, doi: <https://doi.org/10.1101/550145>.[\u21a9](#a8)\n\n<b id=\"f9\">[R9]</b>Hoff, K.J., Lomsadze, A., Borodovsky, M. and Stanke, M. (2019). Whole-Genome Annotation with BRAKER. Methods Mol Biol. 1962:65-95, doi: 10.1007/978-1-4939-9173-0_5.[\u21a9](#a9)\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Gaius-Augustus/GALBA"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-10-27T08:27:49Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-02T05:17:52Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "GALBA is a pipeline for fully automated prediction of protein coding gene structures with AUGUSTUS in novel eukaryotic genomes for the scenario where high quality proteins from one or several closely related species are available."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Description of selected GALBA command line options",
        "parent_header": [
          "Running GALBA"
        ],
        "type": "Text_excerpt",
        "value": "----------------------------------------------------\n\nPlease run `galba.pl\u00a0--help` to obtain a full list of options.\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "--prg",
        "parent_header": [
          "Running GALBA",
          "Description of selected GALBA command line options"
        ],
        "type": "Text_excerpt",
        "value": "Use either `miniprot` (default) or `gth` (for GenomeThreader) to generate training genes and hints.\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "--AUGUSTUS_ab_initio",
        "parent_header": [
          "Running GALBA",
          "Description of selected GALBA command line options"
        ],
        "type": "Text_excerpt",
        "value": "Compute AUGUSTUS *ab initio* predictions in addition to AUGUSTUS predictions with hints (additional output files: `augustus.ab_initio.*`. This may be useful for estimating the quality of training gene parameters when inspecting predictions in a Browser.\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "--augustus_args=\"--some_arg=bla\"",
        "parent_header": [
          "Running GALBA",
          "Description of selected GALBA command line options"
        ],
        "type": "Text_excerpt",
        "value": "One or several command line arguments to be passed to AUGUSTUS, if several arguments are given, separate them by whitespace, i.e.\u00a0`\"--first_arg=sth\u00a0--second_arg=sth\"`. This may be be useful if you know that gene prediction in your particular species benefits from a particular AUGUSTUS argument during the prediction step.\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "--threads=INT",
        "parent_header": [
          "Running GALBA",
          "Description of selected GALBA command line options"
        ],
        "type": "Text_excerpt",
        "value": "Specifies the maximum number of threads that can be used during computation. GALBA has to run some steps on a single thread, others can take advantage of multiple threads. If you use more than 8 threads, this will not speed up all parallelized steps, in particular, the time consuming `optimize_augustus.pl` will not use more than 8 threads.\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "--crf",
        "parent_header": [
          "Running GALBA",
          "Description of selected GALBA command line options"
        ],
        "type": "Text_excerpt",
        "value": "Execute CRF training for AUGUSTUS; resulting parameters are only kept for final predictions if they show higher accuracy than HMM parameters. This increases runtime!\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "--lambda=int",
        "parent_header": [
          "Running GALBA",
          "Description of selected GALBA command line options"
        ],
        "type": "Text_excerpt",
        "value": "Change the parameter $\\lambda$ of the Poisson distribution that is used for downsampling training genes according to their number of introns (only genes with up to 5 introns are downsampled). The default value is $\\lambda=2$. You might want to set it to 0 for organisms that mainly have single-exon genes. (Generally, single-exon genes contribute less value to increasing AUGUSTUS parameters compared to genes with many exons.)\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "--makehub --email=your@mail.de",
        "parent_header": [
          "Running GALBA",
          "Description of selected GALBA command line options"
        ],
        "type": "Text_excerpt",
        "value": "If `--makehub` and `--email=your@mail.de` (with your valid e-mail adress) are provided, a track data hub for visualizing results with the UCSC Genome Browser will be generated using MakeHub (<https://github.com/Gaius-Augustus/MakeHub>).\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "--disable_diamond_filter=true",
        "parent_header": [
          "Running GALBA",
          "Description of selected GALBA command line options"
        ],
        "type": "Text_excerpt",
        "value": "Disable filtering AUGUSTUS genes by DIAMOND hit determination against input proteins (default is false). If you do not trust the protein donor, or if the donor is rather distantly related, please disable the DIAMOND filter. With execellent quality protein donors and close relatives, you increase specificity in large vertebrate genomes, significantly, by using the DIAMOND filter. In smaller genomes, it makes less of a difference. Generally, using the filter comes at a (usually small) cost in sensitivity, i.e.\u00a0you will miss some genes that are not supported by protein evidence.\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Data description",
        "parent_header": [
          "Example data"
        ],
        "type": "Text_excerpt",
        "value": "----------------\n\nData corresponds to the last 1,000,000 nucleotides of _Arabidopsis thaliana_'s chromosome Chr5, split into 8 artificial contigs.\n\nThe protein sequences are a subset from *Arabidopsis lyrata subsp. lyrata* genome assembly GCA_000004255.1.\n\nList of files:\n\n-   `genome.fa` - genome file in fasta format\n-   `proteins.fa` - protein sequences in fasta format\n\nThe below given commands assume that you configured all paths to tools by exporting bash variables or that you have the necessary tools in your $PATH.\n\nThe example data set also contains scripts `tests/test*.sh` that will execute below listed commands for testing GALBA with the example data set. You find example results of AUGUSTUS in the folder `results/test*`. Be aware that GALBA contains several parts where random variables are used, i.e.\u00a0results that you obtain when running the tests may not be exactly identical. To compare your test results with the reference ones, you can use the [compare_intervals_exact.pl](https://github.com/Gaius-Augustus/BRAKER/blob/master/scripts/compare_intervals_exact.pl) script from BRAKER as follows:\n\n    # Compare CDS features\n    compare_intervals_exact.pl --f1 augustus.hints.gtf --f2 ../../results/test${N}/augustus.hints.gtf --verbose\n    # Compare transcripts\n    compare_intervals_exact.pl --f1 augustus.hints.gtf --f2 ../../results/test${N}/augustus.hints.gtf --trans --verbose\n\nWe give runtime estimations derived from computing on *Intel(R) Xeon(R) CPU E5530 @ 2.40GHz*.\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9577710197877997,
      "result": {
        "original_header": "Authors of GALBA",
        "type": "Text_excerpt",
        "value": "<b id=\"aff1\">[a]</b> University of Greifswald, Institute for Mathematics and Computer Science, Walther-Rathenau-Str. 47, 17489 Greifswald, Germany \n<b id=\"aff2\">[b]</b> University of Greifswald, Center for Functional Genomics of Microbes, Felix-Hausdorff-Str. 8, 17489 Greifswald, Germany \n<b id=\"aff6\">[f]</b> Genomics Aotearoa and Laboratory for Evolution and Development, Department of Biochemistry, University of Otago, Dunedin, 9016, New Zealand \n<b id=\"aff7\">[g]</b> Institute of Computer Science, University of G\u00f6ttingen, 37077, G\u00f6ttingen, Germany \n<b id=\"aff8\">[h]</b> Faculty for Computer Science and Mathematics, University of Passau, 94032, Passau, Germany \n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9935556369041033,
      "result": {
        "original_header": "Related Software",
        "type": "Text_excerpt",
        "value": "  * GALBA code was derived from BRAKER, a fully automated pipeline for predicting genes in the genomes of novel species with RNA-Seq data and a large-scale database of protein sequences (that must not necessarily be closely related to the target species) with GeneMark-ES/ET/EP/ETP and AUGUSTUS. BRAKER is available at https://github.com/Gaius-Augustus/BRAKER\n  * TSEBRA can be used to combine GALBA gene sets with BRAKER gene sets. TSEBRA is available at https://github.com/Gaius-Augustus/TSEBRA .\n \n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9559708603302735,
      "result": {
        "original_header": "What is GALBA?",
        "type": "Text_excerpt",
        "value": "The rapidly growing number of sequenced genomes requires fully automated methods for accurate gene structure annotation. Here, we provide a fully automated gene pipeline that trains AUGUSTUS<sup name=\"a3\">[R3, ](#f3)</sup><sup name=\"a4\">[R4](#f4)</sup> for a novel species and subsequently predicts genes with AUGUSTUS in the genome of that species. GALBA uses the protein sequences of **several (few) or one closely related species** to generate a training gene set for AUGUSTUS with either miniprot<sup name=\"a1\">[R1, ](#f1)</sup> or GenomeThreader<sup name=\"a2\">[R2](#f2)</sup>. After training, GALBA uses the evidence from protein to genome alignment during gene prediction.  \n:warning: Please note that the popular BRAKER<sup name=\"a5\">[R5, ](#f5)</sup><sup name=\"a6\">[R6](#f6)</sup> pipeline will very likely produce more accurate results than GALBA in small and medium size genomes (such als C. elegans, A. thaliana, D. melanogaster, ...). Instead of using protein sequences of only one closely related species, **BRAKER is capable of using proteins from a large sequence database** where the species in the database must not necessarily be closely related to the target species. BRAKER can also incorporate RNA-Seq data. In contrast to GALBA, BRAKER achieves high gene prediction accuracy even in the absence of the annotation of very closely related species (and in the absence of RNA-Seq data). However, GALBA has a clear advantage in large genomes (e.g. Mus musculus, Gallus gallus, ...) if you use input proteins from a close relative. Before deciding to use GALBA, please read the [Accuracy](#accuracy) section. \n**If you are not sure which pipeline to use: GALBA or BRAKER? The answer is: if you have no RNA-Seq data and the genome is large, use GALBA! Otherwise use BRAKER, first.** \nGALBA is named after Servius Sulpicius Galba, who ruled the Roman Empire only for a short time, before he was murdered. The name seems appropriate, because both BRAKER2 and also the soon published BRAKER3 achieve in some cases higher accuracy than GALBA ever will, and AI is on the rise.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9901314400126746,
      "result": {
        "original_header": "Keys to successful gene prediction",
        "type": "Text_excerpt",
        "value": "-   In order to predict genes accurately in a novel genome, the genome should be masked for repeats. This will avoid the prediction of false positive gene structures in repetitive and low complexitiy regions. In the case of AUGUSTUS, softmasking (i.e.,\u00a0putting repeat regions into lower case letters and all other regions into upper case letters) leads to better results than hardmasking (i.e.,\u00a0replacing letters in repetitive regions by the letter `N` for unknown nucleotide). GALBA always treats genomes as softmasked for repeats! \n-   Always check gene prediction results before further usage! You can, e.g.\u00a0use a genome browser for visual inspection of gene models in context with extrinsic evidence data. GALBA supports the generation of track data hubs for the UCSC Genome Browser with MakeHub for this purpose.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9814845386311098,
      "result": {
        "original_header": "Singularity Image",
        "type": "Text_excerpt",
        "value": "The easiest way to run GALBA is using singuarlity. We provide a docker container to build a singularity image (tested with singularity version 3.10.0-dirty). **We only include Miniprot in Docker & Singularity!** GenomeThreader is not included. \n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9534352051969005,
      "result": {
        "original_header": "What's included in docker/singuarlity GALBA",
        "type": "Text_excerpt",
        "value": "Among others, the containers include the following software that is useful in context of working with GALBA: \n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9111812569937155,
      "result": {
        "original_header": "Output of GALBA",
        "type": "Text_excerpt",
        "value": "-   hintsfile.gff: The extrinsic evidence data extracted from protein data. \n-   GTF-format is always produced. \nIf the `--makehub` option was used and MakeHub is available on your system, a hub directory beginning with the name `hub_` will be created. Copy this directory to a publicly accessible web server. A file `hub.txt` resides in the directory. Provide the link to that file to the UCSC Genome Browser for visualizing results. MakeHub is included in the Singularity image.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9931448232172931,
      "result": {
        "original_header": "Accuracy",
        "type": "Text_excerpt",
        "value": "Accuracy of GALBA with GenomeThreader is generally lower than with miniprot. In many cases, GenomeThreader generates too few training genes for training AUGUSTUS (the shown accuracy with miniprot is from GALBA v1.0.0; we stopped testing GenomeThreader afterwards; GALBA with miniprot accuracy has improved, since): \n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9750507966201529,
      "result": {
        "original_header": "Bug reporting",
        "type": "Text_excerpt",
        "value": "Before reporting bugs, please check that you are using the most recent versions of AUGUSTUS and GALBA. Also, check the list of [Common problems](#common-problems), and the Issue list on GitHub before reporting bugs. We do monitor open issues on GitHub. Sometimes, we are unable to help you, immediately, but we try hard to solve your problems.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8844798288440717,
      "result": {
        "original_header": "Reporting bugs on GitHub",
        "type": "Text_excerpt",
        "value": "There are a number of other files that might be of interest, depending on where in the pipeline the problem occurred. Some of the following files will not be present if they did not contain any errors. \n-   `${wd}/hintsfile.gff` - is this file empty? If yes, something went wrong during hints generation - does this file contain hints from source \u201cb2h\u201d and of type \u201cintron\u201d? \n-   `${wd}/genbank.good.gb` - try a \u201cgrep -c LOCUS genbank.good.gb\u201d to determine the number of training genes for training AUGUSTUS, should not be low \n-   `${wd}/errors/secondetraining.stderr` - contains errors from second iteration of training AUGUSTUS \n-   `${wd}/errors/optimize_augustus.stderr` - contains errors optimize\\_augustus.pl (additional training set for AUGUSTUS) \n-   `${wd}/startAlign.stderr` - if you provided a protein fasta file and `--prg=gth` option and this file is not empty, something went wrong during protein alignment \n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Gaius-Augustus/GALBA/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "faq": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Common problems",
        "parent_header": [
          "Bug reporting"
        ],
        "type": "Text_excerpt",
        "value": "---------------\n\n-   *[something] failed to execute!*\n\n    When providing paths to software to GALBA, please use absolute, non-abbreviated paths. For example, GALBA might have problems with `--DIAMOND_PATH=./diamond/` or `--DIAMOND_PATH=~/diamond/`. Please use `DIAMOND_PATH=/full/absolute/path/to/diamond/`, instead. This applies to all path specifications as command line options to `galba.pl`. Relative paths and absolute paths will not pose problems if you export a bash variable, instead, or if you append the location of tools to your $PATH variable.\n\n-   *GALBA cannot find the Augustus script XYZ...*\n\n    Update Augustus from github with `git clone https://github.com/Gaius-Augustus/Augustus.git`. Do not use Augustus from other sources. GALBA is highly dependent on an up-to-date Augustus. Augustus releases happen rather rarely, updates to the Augustus scripts folder occur rather frequently.\n\n-   *Does GALBA depend on Python3?*\n\n    It does. The python scripts employed by GALBA are not compatible with Python2.\n\n-   *Why does GALBA predict more genes than I expected?*\n\n    If transposable elements (or similar) have not been masked appropriately, AUGUSTUS tends to predict those elements as protein coding genes. This can lead to a huge number genes. You can check whether this is the case for your project by BLASTing (or DIAMONDing) the predicted protein sequences against themselves (all vs. all) and counting how many of the proteins have a high number of high quality matches. You can use the output of this analysis to divide your gene set into two groups: the protein coding genes that you want to find and the repetitive elements that were additionally predicted.\n\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Gaius-Augustus/GALBA/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Gaius-Augustus/GALBA"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "GALBA User Guide"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/docs/figs/galba_minprot.png"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/docs/figs/galba_miniprot_gth_fly.png"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "GALBA User Guide",
        "type": "Text_excerpt",
        "value": "![Docker Pulls](https://img.shields.io/docker/pulls/katharinahoff/galba-notebook) ![GitHub last commit (branch)](https://img.shields.io/github/last-commit/Gaius-Augustus/GALBA/main) ![GitHub issues](https://img.shields.io/github/issues/Gaius-Augustus/GALBA)\n\n\n<u>Contact for Github Repository of GALBA at\nhttps://github.com/Gaius-Augustus/GALBA:</u>\n\nKatharina J. Hoff, University of Greifswald, Germany, katharina.hoff@uni-greifswald.de, +49 3834 420 4624, [![https://twitter.com/katharina_hoff](https://img.shields.io/twitter/follow/katharina_hoff)](https://twitter.com/katharina_hoff), @katharinahoff.bsky.social, @KatharinaHoff@fosstodon.org\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "============\n\nThe long way around is to manually install all dependencies of GALBA.\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Supported software versions",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "---------------------------\n\nAt the time of release, this GALBA version was tested with:\n\n-   AUGUSTUS 3.4.0 <sup name=\"g3\">[R3, ](#g3)</sup><sup name=\"g4\">[R4](#g4)</sup>\n\n-   Pygustus v0.8.0-alpha\n\n-   Miniprot 0.12-r237<sup name=\"a1\">[R1](#f1)</sup>\n\n-   (GenomeThreader 1.7.3<sup name=\"a2\">[R2](#f2)</sup>)\n\n-   DIAMOND 0.9.230<sup name=\"a7\">[R7](#f7)</sup>\n\n-   cdbfasta 0.99\n\n-   cdbyank 0.981\n\n-   miniprot-boundary-scorer\n\n-   Miniprothint\n\n-   TSEBRA v1.1.1\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "GALBA components",
        "parent_header": [
          "Installation",
          "GALBA"
        ],
        "type": "Text_excerpt",
        "value": "GALBA is a collection of Perl and Python scripts and a Perl module. The main script that will be called in order to run GALBA is `galba.pl`. Additional Perl and Python components are:\n\n-   `aln2hints.pl`\n\n-   `filterIntronsFindStrand.pl`\n\n-   `startAlign.pl`\n\n-   `helpMod.pm`\n\n-   `downsample_traingenes.pl`\n\n-   `galba_cleanup.py`\n\nAll scripts (files ending with `*.pl` and `*.py`) that are part of GALBA must be executable in order to run GALBA. This should already be the case if you download GALBA from GitHub. Executability may be overwritten if you, e.g.\u00a0transfer GALBA on a USB-stick to another computer. In order to check whether required files are executable, run the following command in the directory that contains GALBA Perl scripts:\n\n    ls -l *.pl *.py\n\nThe output should be similar to this:\n\n```\n    -rwxr-xr-x 1 katharina katharina  18191 Mai  7 10:25 aln2hints.pl\n    -rwxr-xr-x 1 katharina katharina   6090 Feb 19 09:35 galba_cleanup.py\n    -rwxr-xr-x 1 katharina katharina 408782 Aug 17 18:24 galba.pl\n    -rwxr-xr-x 1 katharina katharina   5024 Mai  7 10:25 downsample_traingenes.pl\n    -rwxr-xr-x 1 katharina katharina   5754 Mai  7 10:25 filterIntronsFindStrand.pl\n    -rwxr-xr-x 1 katharina katharina  41674 Mai  7 10:25 startAlign.pl\n```\n\nIt is important that the `x` in `-rwxr-xr-x` is present for each script. If that is not the case, run\n\n    `chmod a+x *.pl *.py`\n\nin order to change file attributes.\n\nYou may find it helpful to add the directory in which GALBA perl scripts reside to your `$PATH` environment variable. For a single bash session, enter:\n\n```\n    PATH=/your_path_to_galba/:$PATH\n    export PATH\n```\n\nTo make this `$PATH` modification available to all bash sessions, add the above lines to a startup script (e.g.`~/.bashrc`).\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "AUGUSTUS",
        "parent_header": [
          "Installation",
          "Bioinformatics software dependencies",
          "Mandatory tools"
        ],
        "type": "Text_excerpt",
        "value": "Download AUGUSTUS from its master branch at <https://github.com/Gaius-Augustus/Augustus>. Unpack AUGUSTUS and install AUGUSTUS according to AUGUSTUS `README.TXT`. ***Do not use outdated AUGUSTUS versions from other sources, e.g. Debian package or the Bioconda package! GALBA highly depends in particular on an up-to-date Augustus/scripts directory, and other sources are often lagging behind.***\n\nYou should compile AUGUSTUS on your own system in order to avoid problems with versions of libraries used by AUGUSTUS. Compilation instructions are provided in the AUGUSTUS `README.TXT` file (`Augustus/README.txt`).\n\nAUGUSTUS consists of `augustus`, the gene prediction tool, additional C++ tools located in `Augustus/auxprogs` and Perl scripts located in `Augustus/scripts`. Perl scripts must be executable (see instructions in section [GALBA components](#executability). GALBA does not use any of the `auxprogs`.\n\nSince GALBA is a pipeline that trains AUGUSTUS, i.e.,\u00a0writes species specific parameter files, GALBA needs write access to the configuration directory of AUGUSTUS that contains such files (`Augustus/config/`). If you install AUGUSTUS globally on your system, the `config` folder will typically not be writable by all users. Either make the directory where `config` resides recursively writable to users of AUGUSTUS, or copy the `config/` folder (recursively) to a location where users have writing permission.\n\nAUGUSTUS will locate the `config` folder by looking for the environment variable `$AUGUSTUS_CONFIG_PATH`. If the `$AUGUSTUS_CONFIG_PATH`\nenvironment variable is not set, then GALBA will look in the path `../config` relative to the directory in which it finds an AUGUSTUS\nexecutable. Alternatively, you can supply the variable as a command line argument to GALBA (`--AUGUSTUS_CONFIG_PATH=/your_path_to_AUGUSTUS/Augustus/config/`). We recommend that you export the variable, e.g.,\u00a0for your current bash\nsession:\n\n```\n    export AUGUSTUS_CONFIG_PATH=/your_path_to_AUGUSTUS/Augustus/config/\n```\n\nIn order to make the variable available to all Bash sessions, add the above line to a startup script, e.g.,\u00a0`~/.bashrc`.\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Important:",
        "parent_header": [
          "Installation",
          "Bioinformatics software dependencies",
          "Mandatory tools",
          "AUGUSTUS"
        ],
        "type": "Text_excerpt",
        "value": "GALBA expects the entire `config` directory of AUGUSTUS at `$AUGUSTUS_CONFIG_PATH`, i.e.\u00a0the subfolders `species` with its contents (at least `generic`) and `extrinsic`! Providing a writable but empty folder at `$AUGUSTUS_CONFIG_PATH` will not work for GALBA. If you need\nto separate augustus binary and `$AUGUSTUS_CONFIG_PATH`, we recommend that you recursively copy the un-writable config contents to a writable location.\n\nIf you have a system-wide installation of AUGUSTUS at `/usr/bin/augustus`, an unwritable copy of `config` sits at `/usr/bin/augustus_config/`. The folder `${HOME}` is writable to you. Copy with the following command (and additionally set the then required variables):\n\n```\ncp -r /usr/bin/Augustus/config/ ${HOME}/augustus_config\nexport AUGUSTUS_CONFIG_PATH=${HOME}/augustus_config\nexport AUGUSTUS_BIN_PATH=/usr/bin\nexport AUGUSTUS_SCRIPTS_PATH=/usr/bin/augustus_scripts\n```\nGALBA automatically sets the environment variables if run from the Singuarity image.\n\nIf you installed Augustus as a debian package, then the scripts are currently up-to-date, but a folder with parameters file is missing. To fix this, please execute the following steps (with root permissions):\n\n```\ncd /usr/share/augustus/config\nmkdir parameters\ncd parameters\nwget https://raw.githubusercontent.com/Gaius-Augustus/Augustus/master/config/parameters/AUG_CMDLN_PARAMETERS.md\nwget https://raw.githubusercontent.com/Gaius-Augustus/Augustus/master/config/parameters/aug_cmdln_parameters.json\nchmod a+r AUG_CMDLN_PARAMETERS.md aug_cmdln_parameters.json\ncd ..\nchmod a+r parameters\nchmod a+x parameters\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Modification of $PATH",
        "parent_header": [
          "Installation",
          "Bioinformatics software dependencies",
          "Mandatory tools",
          "AUGUSTUS"
        ],
        "type": "Text_excerpt",
        "value": "Adding directories of AUGUSTUS binaries and scripts to your `$PATH` variable enables your system to locate these tools,\nautomatically. It is not a requirement for running GALBA to do this, because GALBA will try to guess them from the location of another\nenvironment variable (`$AUGUSTUS_CONFIG_PATH`), or both directories can be supplied as command line arguments to `galba.pl`, but we recommend to add them to your `$PATH` variable. For your current bash session, type:\n\n```\nPATH=:/your_path_to_augustus/bin/:/your_path_to_augustus/scripts/:$PATH\nexport PATH\n```\n\nFor all your BASH sessions, add the above lines to a startup script (e.g.`~/.bashrc`).\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Pygustus",
        "parent_header": [
          "Installation",
          "Bioinformatics software dependencies",
          "Mandatory tools"
        ],
        "type": "Text_excerpt",
        "value": "This tool is required for parallelization of Augustus. Install Pygustus (<https://github.com/Gaius-Augustus/pygustus>) with pip (or pip3):\n\n```\npip install pygustus\n```\n\nImportant: this version of GALBA relies on pygustus 0.8.3-alpha. It will not be compatible with older versions.\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Miniprot",
        "parent_header": [
          "Installation",
          "Bioinformatics software dependencies",
          "Mandatory tools"
        ],
        "type": "Text_excerpt",
        "value": "This tool is only required, if you would like to run protein to genome alignments with GALBA using Miniprot. We strongly recommend using Miniprot with GALBA. Download Miniprot from <https://github.com/lh3/miniprot>:\n\n```\ngit clone https://github.com/lh3/miniprot.git\ncd miniprot\nmake\n```\n\nGALBA will try to locate the Miniprot executable by using an environment variable `$MINIPROT_PATH`. Alternatively, this can be supplied as command line argument (`--MINIPROT_PATH=/your/path/to/miniprot/`).\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "miniprot-boundary-scorer",
        "parent_header": [
          "Installation",
          "Bioinformatics software dependencies",
          "Mandatory tools"
        ],
        "type": "Text_excerpt",
        "value": "This tool is only required, if you would like to run protein to genome alignments with GALBA using Miniprot. Download miniprot-boundary-scorer from <https://github.com/tomasbruna/miniprot-boundary-scorer>:\n\n```\ngit clone https://github.com/tomasbruna/miniprot-boundary-scorer.git\ncd miniprot-boundary-scorer\nmake\n```\n\nGALBA will try to locate the miniprot-boundary-scorer executable by using an environment variable `$SCORER_PATH`. Alternatively, this can be supplied as command line argument (`--SCORER_PATH=/your/path/to/miniprot-boudary-scorer/`).\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "miniprotprothint",
        "parent_header": [
          "Installation",
          "Bioinformatics software dependencies",
          "Mandatory tools"
        ],
        "type": "Text_excerpt",
        "value": "This tool is only required, if you would like to run protein to genome alignments with GALBA using Miniprot. Download miniprothint from <https://github.com/tomasbruna/miniprothint>:\n\n```\ngit clone https://github.com/tomasbruna/miniprothint.git\n```\n\nGALBA will try to locate the miniprothint.py executable by using an environment variable `$MINIPROTHINT_PATH`. Alternatively, this can be supplied as command line argument (`--MINIPROTHINT_PATH=/your/path/to/miniprothint/`).\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "GenomeThreader",
        "parent_header": [
          "Installation",
          "Bioinformatics software dependencies",
          "Mandatory tools"
        ],
        "type": "Text_excerpt",
        "value": "This tool is only required, if you would like to run protein to genome alignments with GALBA using GenomeThreader. Download GenomeThreader from <http://genomethreader.org/>. Unpack and install according to `gth/README`.\n\nGALBA will try to locate the GenomeThreader executable by using an environment variable `$GENOMETHREADER_PATH`. Alternatively, this can be supplied as command line argument (`--GENOMETHREADER_PATH=/your/path/to/gth/`).\n\nPlease be aware that miniprot achieves higher accuracy than GenomeThreader in GALBA! See section on [Accuracy](#accuracy).\n\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Python3",
        "parent_header": [
          "Installation",
          "Bioinformatics software dependencies",
          "Mandatory tools"
        ],
        "type": "Text_excerpt",
        "value": "On Ubuntu, Python3 is usually installed by default, `python3` will be in your `$PATH` variable, by default, and GALBA will automatically locate it. However, you have the option to specify the `python3` binary location in two other ways:\n\n1.  Export an environment variable `$PYTHON3_PATH`, e.g.\u00a0in your `~/.bashrc` file:\n\n        export PYTHON3_PATH=/path/to/python3/\n\n2.  Specify the command line option `--PYTHON3_PATH=/path/to/python3/` to `galba.pl`.\n\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "DIAMOND",
        "parent_header": [
          "Installation",
          "Bioinformatics software dependencies",
          "Mandatory tools"
        ],
        "type": "Text_excerpt",
        "value": "DIAMOND is used for removal of redundant training genes.\n\nObtain and unpack DIAMOND as follows:\n\n```\n    wget http://github.com/bbuchfink/diamond/releases/download/v0.9.24/diamond-linux64.tar.gz\n    tar xzf diamond-linux64.tar.gz\n```\n\nIf already in your `$PATH` variable, GALBA will find diamond, automatically. Otherwise, GALBA can locate the diamond binary either by using an environment variable `$DIAMOND_PATH`, or by taking a command line argument (`--DIAMOND_PATH=/your_path_to_diamond`). In order to set the environment variable e.g. for your current bash session, type:\n\n```\n    export DIAMOND_PATH=/your_path_to_diamond/\n```\n\nAdd the above line to a startup script (e.g.\u00a0`~/.bashrc`) in order to set the environment variable for all bash sessions.\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "TSEBRA",
        "parent_header": [
          "Installation",
          "Bioinformatics software dependencies",
          "Mandatory tools"
        ],
        "type": "Text_excerpt",
        "value": "TSEBRA is (in most cases) used to remove noise from the Augustus predictions.\n\nObtain TSEBRA as follows:\n\n```\n    git clone https://github.com/Gaius-Augustus/TSEBRA.git\n```\n\nIf already in your `$PATH` variable, GALBA will find tsebra.py, automatically. Otherwise, GALBA can locate tsebra.py either by using an environment variable `$TSEBRA_PATH`, or by taking a command line argument (`--TSEBRA_PATH=/your_path_to_tsebra`). In order to set the environment variable e.g. for your current bash session, type:\n\n```\n    export TSEBRA_PATH=/your_path_to_tsebra/bin/\n```\n\nAdd the above line to a startup script (e.g.\u00a0`~/.bashrc`) in order to set the environment variable for all bash sessions.\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Biopython",
        "parent_header": [
          "Installation",
          "Bioinformatics software dependencies",
          "Optional tools"
        ],
        "type": "Text_excerpt",
        "value": "If Biopython is installed, GALBA can generate FASTA-files with coding sequences and protein sequences predicted by AUGUSTUS and generate track data hubs for visualization of a GALBA run with MakeHub <sup name=\"a8\">[R8](#f8)</sup>.\nThese are optional steps. The first can be disabled with the command-line flag `--skipGetAnnoFromFasta`, the second can be activated by using the command-line options `--makehub --email=your@mail.de`, Biopython is not required if neither of these optional steps shall be performed.\n\nOn Ubuntu, install Python3 package manager with:\n\n    `sudo apt-get install python3-pip`\n\nThen, install Biopython with:\n\n    `sudo pip3 install biopython`\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "cdbfasta",
        "parent_header": [
          "Installation",
          "Bioinformatics software dependencies",
          "Optional tools"
        ],
        "type": "Text_excerpt",
        "value": "cdbfasta and cdbyank are required by GALBA for correcting AUGUSTUS genes with in frame stop codons (spliced stop codons) using the AUGUSTUS script fix_in_frame_stop_codon_genes.py. This can be skipped with `--skip_fixing_broken_genes`.\n\nOn Ubuntu, install cdbfasta with:\n\n    `sudo apt-get install cdbfasta`\n\nFor other systems, you can for example obtain cdbfasta from <https://github.com/gpertea/cdbfasta>, e.g.:\n\n```\n        git clone https://github.com/gpertea/cdbfasta.git`\n        cd cdbfasta\n        make all\n```\n\nOn Ubuntu, cdbfasta and cdbyank will be in your `$PATH` variable after installation, and GALBA will automatically locate them. However, you have the option to specify the `cdbfasta` and `cdbyank` binary location in two other ways:\n\n1.  Export an environment variable `$CDBTOOLS_PATH`, e.g.\u00a0in your `~/.bashrc` file:\n\n```\n        export CDBTOOLS_PATH=/path/to/cdbtools/\n```\n\n2.  Specify the command line option `--CDBTOOLS_PATH=/path/to/cdbtools/` to `galba.pl`.\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "MakeHub",
        "parent_header": [
          "Installation",
          "Bioinformatics software dependencies",
          "Optional tools"
        ],
        "type": "Text_excerpt",
        "value": "If you wish to automaticaly generate a track data hub of your GALBA run, the MakeHub software, available at <https://github.com/Gaius-Augustus/MakeHub> is required. Download the software (either by running `git clone https://github.com/Gaius-Augustus/MakeHub.git`, or by\npicking a release from <https://github.com/Gaius-Augustus/MakeHub/releases>. Extract the release package if you downloaded a release (e.g. `unzip MakeHub.zip` or `tar -zxvf MakeHub.tar.gz`.\n\nGALBA will try to locate the make_hub.py script by using an environment variable `$MAKEHUB_PATH`. Alternatively, this can be supplied as command line argument (`--MAKEHUB_PATH=/your/path/to/MakeHub/`). GALBA can also try to guess the location of MakeHub on your system.\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9979951666862394,
      "result": {
        "original_header": "Authors of GALBA",
        "type": "Text_excerpt",
        "value": "Tomas Bruna<sup name=\"aff5\">[e](#aff1)</sup>, Heng Li<sup name=\"aff3\">[c, ](#aff3)</sup><sup name=\"aff4\">[d ](#aff4)</sup>, Joseph Guhlin<sup name=\"aff6\">[f](#aff6)</sup>, Daniel Honsel<sup name=\"aff7\">[g](#aff7)</sup>,\nSteffen Herbold<sup name=\"aff8\">[h](#aff8)</sup>, Natalia Nenasheva<sup name=\"aff1\">[a, ](#aff1)</sup><sup name=\"aff2\">[b](#aff2)</sup>, Matthis Ebel<sup name=\"aff1\">[a, ](#aff1)</sup><sup name=\"aff2\">[b](#aff2)</sup>, Lars Gabriel<sup name=\"aff1\">[a, ](#aff1)</sup><sup name=\"aff2\">[b](#aff2)</sup>, Mario Stanke<sup name=\"aff1\">[a, ](#aff1)</sup><sup name=\"aff2\">[b](#aff2)</sup>, and Katharina J. Hoff<sup name=\"aff1\">[a, ](#aff1)</sup><sup name=\"aff2\">[b](#aff2)</sup> \n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9756916037062281,
      "result": {
        "original_header": "What is GALBA?",
        "type": "Text_excerpt",
        "value": "**If you are not sure which pipeline to use: GALBA or BRAKER? The answer is: if you have no RNA-Seq data and the genome is large, use GALBA! Otherwise use BRAKER, first.** \n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9964389380953267,
      "result": {
        "original_header": "Singularity Image",
        "type": "Text_excerpt",
        "value": "The easiest way to run GALBA is using singuarlity. We provide a docker container to build a singularity image (tested with singularity version 3.10.0-dirty). **We only include Miniprot in Docker & Singularity!** GenomeThreader is not included. \nBuild as follows (requires 1.2 GB disk space):\n```\nsingularity build galba.sif docker://katharinahoff/galba-notebook:latest\n```\nExecute GALBA from galba.sif like this (i.e. it automatically mounts the user's home directory on the host system):\n```\nsingularity exec galba.sif galba.pl\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9323032493970486,
      "result": {
        "original_header": "What's included in docker/singuarlity GALBA",
        "type": "Text_excerpt",
        "value": "   * galba.pl\n   * augustus\n   * TSEBRA\n   * make_hub.py & UCSC dependencies\n   * miniprot\n   * diamond\n   * cdbfasta\n   * seqstats\n \n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.957113462468414,
      "result": {
        "original_header": "Output of GALBA",
        "type": "Text_excerpt",
        "value": "GALBA produces several important output files in the working directory. \nGALBA output files may be present with the following name endings: \nIf the `--makehub` option was used and MakeHub is available on your system, a hub directory beginning with the name `hub_` will be created. Copy this directory to a publicly accessible web server. A file `hub.txt` resides in the directory. Provide the link to that file to the UCSC Genome Browser for visualizing results. MakeHub is included in the Singularity image.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.99854562749986,
      "result": {
        "original_header": "Bug reporting",
        "type": "Text_excerpt",
        "value": "Before reporting bugs, please check that you are using the most recent versions of AUGUSTUS and GALBA. Also, check the list of [Common problems](#common-problems), and the Issue list on GitHub before reporting bugs. We do monitor open issues on GitHub. Sometimes, we are unable to help you, immediately, but we try hard to solve your problems.\n \n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9315465498794848,
      "result": {
        "original_header": "Reporting bugs on GitHub",
        "type": "Text_excerpt",
        "value": "If you found a bug, please open an issue at <https://github.com/Gaius-Augustus/GALBA/issues> (or contact katharina.hoff@uni-greifswald.de). \n-   `${wd}/startAlign.stderr` - if you provided a protein fasta file and `--prg=gth` option and this file is not empty, something went wrong during protein alignment \n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999998591528526,
      "result": {
        "original_header": "Footnotes",
        "type": "Text_excerpt",
        "value": "<b id=\"g2\">[F2]</b> Please use the latest version from the master branch of AUGUSTUS distributed by the original developers, it is available from github at <https://github.com/Gaius-Augustus/Augustus>. Problems have been reported from users that tried to run GALBA with AUGUSTUS releases maintained by third parties, i.e. Bioconda. [\u21a9](#g2) \n<b id=\"g4\">[F4]</b> install with `sudo apt-get install cpanminus` [\u21a9](#g4) \n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Gaius-Augustus/GALBA/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Artistic Licence (http://www.opensource.org/licenses/artistic-license.php)\n\nPreamble\n\nThe intent of this document is to state the conditions under which a Package \nmay be copied, such that the Copyright Holder maintains some semblance of \nartistic control over the development of the package, while giving the users \nof the package the right to use and distribute the Package in a more-or-less \ncustomary fashion, plus the right to make reasonable modifications.\n\nDefinitions:\n\"Package\" refers to the collection of files distributed by the Copyright Holder, \nand derivatives of that collection of files created through textual modification.\n\"Standard Version\" refers to such a Package if it has not been modified, or has \nbeen modified in accordance with the wishes of the Copyright Holder.\n\"Copyright Holder\" is whoever is named in the copyright or copyrights for the package.\n\"You\" is you, if you're thinking about copying or distributing this Package.\n\"Reasonable copying fee\" is whatever you can justify on the basis of media cost, \nduplication charges, time of people involved, and so on. (You will not be required \nto justify it to the Copyright Holder, but only to the computing community at large \nas a market that must bear the fee.)\n\"Freely Available\" means that no fee is charged for the item itself, though there \nmay be fees involved in handling the item. It also means that recipients of the \nitem may redistribute it under the same conditions they received it.\n\n1. You may make and give away verbatim copies of the source form of the Standard \nVersion of this Package without restriction, provided that you duplicate all of \nthe original copyright notices and associated disclaimers.\n\n2. You may apply bug fixes, portability fixes and other modifications derived \nfrom the Public Domain or from the Copyright Holder. A Package modified in such \na way shall still be considered the Standard Version.\n\n3. You may otherwise modify your copy of this Package in any way, provided that \nyou insert a prominent notice in each changed file stating how and when you changed \nthat file, and provided that you do at least ONE of the following:\n\na) place your modifications in the Public Domain or otherwise make them Freely \nAvailable, such as by posting said modifications to Usenet or an equivalent medium, \nor placing the modifications on a major archive site such as ftp.uu.net, or by \nallowing the Copyright Holder to include your modifications in the Standard Version \nof the Package.\n\nb) use the modified Package only within your corporation or organization.\n\nc) rename any non-standard executables so the names do not conflict with standard \nexecutables, which must also be provided, and provide a separate manual page for \neach non-standard executable that clearly documents how it differs from the Standard \nVersion.\n\nd) make other distribution arrangements with the Copyright Holder.\n\n4. You may distribute the programs of this Package in object code or executable \nform, provided that you do at least ONE of the following:\n\na) distribute a Standard Version of the executables and library files, together \nwith instructions (in the manual page or equivalent) on where to get the Standard Version.\n\nb) accompany the distribution with the machine-readable source of the Package with \nyour modifications.\n\nc) accompany any non-standard executables with their corresponding Standard Version \nexecutables, giving the non-standard executables non-standard names, and clearly \ndocumenting the differences in manual pages (or equivalent), together with instructions \non where to get the Standard Version.\n\nd) make other distribution arrangements with the Copyright Holder.\n\n5. You may charge a reasonable copying fee for any distribution of this Package. \nYou may charge any fee you choose for support of this Package. You may not charge \na fee for this Package itself. However, you may distribute this Package in aggregate \nwith other (possibly commercial) programs as part of a larger (possibly commercial) \nsoftware distribution provided that you do not advertise this Package as a product \nof your own.\n\n6. The scripts and library files supplied as input to or produced as output from the \nprograms of this Package do not automatically fall under the copyright of this Package, \nbut belong to whomever generated them, and may be sold commercially, and may be \naggregated with this Package.\n\n7. C or perl subroutines supplied by you and linked into this Package shall not be \nconsidered part of this Package.\n\n8. The name of the Copyright Holder may not be used to endorse or promote products \nderived from this software without specific prior written permission.\n\n9. THIS PACKAGE IS PROVIDED \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, \nINCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS \nFOR A PARTICULAR PURPOSE.\n\nThe End\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "type": "Text_excerpt",
        "value": "=======\n\nAll source code, i.e. `scripts/*.pl` or `scripts/*.py` are under the Artistic License (see <http://www.opensource.org/licenses/artistic-license.php>).\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "GALBA"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "Gaius-Augustus"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 377433,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 29967,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 6427,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 3932,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "KatharinaHoff",
          "type": "User"
        },
        "date_created": "2023-12-22T12:37:49Z",
        "date_published": "2023-12-22T12:43:36Z",
        "description": "**Full Changelog**: https://github.com/Gaius-Augustus/GALBA/compare/v1.0.10...v1.0.11",
        "html_url": "https://github.com/Gaius-Augustus/GALBA/releases/tag/v1.0.11",
        "name": "v1.0.11 - deleting transcripts with CDS features on opposite strands",
        "release_id": 134900725,
        "tag": "v1.0.11",
        "tarball_url": "https://api.github.com/repos/Gaius-Augustus/GALBA/tarball/v1.0.11",
        "type": "Release",
        "url": "https://api.github.com/repos/Gaius-Augustus/GALBA/releases/134900725",
        "value": "https://api.github.com/repos/Gaius-Augustus/GALBA/releases/134900725",
        "zipball_url": "https://api.github.com/repos/Gaius-Augustus/GALBA/zipball/v1.0.11"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "KatharinaHoff",
          "type": "User"
        },
        "date_created": "2023-12-15T14:36:35Z",
        "date_published": "2023-12-15T16:04:15Z",
        "description": "This released was inspired by the manuscript\r\n\r\n**Newly Sequenced Genomes Reveal Patterns of Gene Family Expansion in select Dragonflies (Odonata: Anisoptera)**\r\n\r\nby \r\n\r\nEthan R. Tolman, Christopher D. Beatty, Paul B. Frandsen, Jonas Bush, Or R. Bruchim, Ella Simone Driever, Kathleen M. Harding, Dick Jordan, Manpreet K. Kohli, Jiwoo Park, Seojun Park, Kelly Reyes, Mira Rosari, Jisong L. Ryu, Vincent Wade, Jessica L. Ware\r\n\r\n[https://doi.org/10.1101/2023.12.11.569651](https://doi.org/10.1101/2023.12.11.569651)\r\n\r\nThe authors state in the manuscript:\r\n\r\n\"While our genome annotations initially had a high (>50,000) number of genes compared to the annotation of P. flavescens, by conservatively retaining only genes which had a BLAST hit to a protein sequence from P. flavescens [[27](https://www.biorxiv.org/content/10.1101/2023.12.11.569651v1.full#ref-27)], we were able to generate highly complete annotations ([fig 1. A,B](https://www.biorxiv.org/content/10.1101/2023.12.11.569651v1.full#F1)), further supporting the efficacy of this pipeline in insects.\"\r\n\r\nI adopted the idea, added a new script [filter_gtf_by_diamond_against_ref.py](https://github.com/Gaius-Augustus/GALBA/blob/main/scripts/filter_gtf_by_diamond_against_ref.py) that does the same thing, using DIAMOND. I chose diamond only because of speed, the result should be highly similar to using BLAST.\r\n\r\nCalling the script is integrated into galba.pl . This approach can substantially increase specificity for a marginal tradeoff in specificity.\r\n\r\nAccuracy comparison before and after DIAMOND filter for denoising AUGUSTUS predictions in GALBA:\r\n\r\n# D. melanogaster\r\n\r\n## before \r\n\r\n```\r\ngene_Sn\t71.07\r\ngene_Sp\t71.09\r\ntrans_Sn\t48.45\r\ntrans_Sp\t63.74\r\ncds_Sn\t78.45\r\ncds_Sp\t87.54\r\n```\r\n\r\n## after\r\n\r\n```\r\ngene_Sn\t71.02\r\ngene_Sp\t73.28\r\ntrans_Sn\t48.42\r\ntrans_Sp\t65.42\r\ncds_Sn\t78.43\r\ncds_Sp\t88.90\r\n```\r\n\r\n# Mus musculus\r\n\r\n## before\r\n\r\n```\r\ngene_Sn\t70.64\r\ngene_Sp\t38.34\r\ntrans_Sn\t28.70\r\ntrans_Sp\t35.26\r\ncds_Sn\t77.43\r\ncds_Sp\t82.34\r\n```\r\n\r\n## after\r\n\r\n```\r\ngene_Sn\t70.29\r\ngene_Sp\t66.63\r\ntrans_Sn\t28.55\r\ntrans_Sp\t56.33\r\ncds_Sn\t77.10\r\ncds_Sp\t92.23\r\n```\r\n\r\n# Acknowledgement\r\n\r\nWe thank Tolman et al. for describing this very simple but highly effective idea!",
        "html_url": "https://github.com/Gaius-Augustus/GALBA/releases/tag/v1.0.10",
        "name": "X-Mas Release 2023: DIAMOND denoises AUGUSTUS predictions",
        "release_id": 134116243,
        "tag": "v1.0.10",
        "tarball_url": "https://api.github.com/repos/Gaius-Augustus/GALBA/tarball/v1.0.10",
        "type": "Release",
        "url": "https://api.github.com/repos/Gaius-Augustus/GALBA/releases/134116243",
        "value": "https://api.github.com/repos/Gaius-Augustus/GALBA/releases/134116243",
        "zipball_url": "https://api.github.com/repos/Gaius-Augustus/GALBA/zipball/v1.0.10"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "KatharinaHoff",
          "type": "User"
        },
        "date_created": "2023-09-18T11:15:33Z",
        "date_published": "2023-09-18T11:30:23Z",
        "description": "- @tomasbruna changed miniprothint to additionally output only the best gene per locus (instead of several) -> these are now training genes in GALBA\r\n- debugged automated accuracy evaluation",
        "html_url": "https://github.com/Gaius-Augustus/GALBA/releases/tag/v1.0.9",
        "name": "Debugged accuracy evaluation, improved training gene selection",
        "release_id": 121519722,
        "tag": "v1.0.9",
        "tarball_url": "https://api.github.com/repos/Gaius-Augustus/GALBA/tarball/v1.0.9",
        "type": "Release",
        "url": "https://api.github.com/repos/Gaius-Augustus/GALBA/releases/121519722",
        "value": "https://api.github.com/repos/Gaius-Augustus/GALBA/releases/121519722",
        "zipball_url": "https://api.github.com/repos/Gaius-Augustus/GALBA/zipball/v1.0.9"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "KatharinaHoff",
          "type": "User"
        },
        "date_created": "2023-09-15T15:00:01Z",
        "date_published": "2023-09-15T15:03:20Z",
        "description": "- @tomasbruna extended miniprothint to output training genes for GALBA. His implementation is much better than the original implementation in GALBA. GALBA therefore now uses this miniprothint functionality\r\n- @tomasbruna also improved specificity of hints, it should now be safter to use proteins of more distant degree of relatedness (accuracy tests on large scale still pending)\r\n- galba_cleanup has been ported to python (no change in functionality)",
        "html_url": "https://github.com/Gaius-Augustus/GALBA/releases/tag/v1.0.8",
        "name": "Improved training gene selection",
        "release_id": 121318714,
        "tag": "v1.0.8",
        "tarball_url": "https://api.github.com/repos/Gaius-Augustus/GALBA/tarball/v1.0.8",
        "type": "Release",
        "url": "https://api.github.com/repos/Gaius-Augustus/GALBA/releases/121318714",
        "value": "https://api.github.com/repos/Gaius-Augustus/GALBA/releases/121318714",
        "zipball_url": "https://api.github.com/repos/Gaius-Augustus/GALBA/zipball/v1.0.8"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "KatharinaHoff",
          "type": "User"
        },
        "date_created": "2023-05-15T14:21:44Z",
        "date_published": "2023-05-15T14:22:49Z",
        "description": "Related to this issue: https://github.com/Gaius-Augustus/GALBA/issues/32#issuecomment-1546452803\r\nI fixed that augargs** are not passed twice to pygustus when running AUGUSTUS in ab initio mode",
        "html_url": "https://github.com/Gaius-Augustus/GALBA/releases/tag/v1.0.7",
        "name": "Fixing redundant augargs",
        "release_id": 103016897,
        "tag": "v1.0.7",
        "tarball_url": "https://api.github.com/repos/Gaius-Augustus/GALBA/tarball/v1.0.7",
        "type": "Release",
        "url": "https://api.github.com/repos/Gaius-Augustus/GALBA/releases/103016897",
        "value": "https://api.github.com/repos/Gaius-Augustus/GALBA/releases/103016897",
        "zipball_url": "https://api.github.com/repos/Gaius-Augustus/GALBA/zipball/v1.0.7"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "KatharinaHoff",
          "type": "User"
        },
        "date_created": "2023-03-30T08:50:19Z",
        "date_published": "2023-03-30T08:51:11Z",
        "description": "Key difference to the previous release is a bugfix that restores prediction of alternative transcripts if evidence for such is present",
        "html_url": "https://github.com/Gaius-Augustus/GALBA/releases/tag/v1.0.6",
        "name": "Alternative transcript prediction restored",
        "release_id": 97445349,
        "tag": "v1.0.6",
        "tarball_url": "https://api.github.com/repos/Gaius-Augustus/GALBA/tarball/v1.0.6",
        "type": "Release",
        "url": "https://api.github.com/repos/Gaius-Augustus/GALBA/releases/97445349",
        "value": "https://api.github.com/repos/Gaius-Augustus/GALBA/releases/97445349",
        "zipball_url": "https://api.github.com/repos/Gaius-Augustus/GALBA/zipball/v1.0.6"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "KatharinaHoff",
          "type": "User"
        },
        "date_created": "2023-03-29T14:55:55Z",
        "date_published": "2023-03-29T14:56:58Z",
        "description": "## What's Changed\r\n\r\n* Run miniprot only once by @tomasbruna in https://github.com/Gaius-Augustus/GALBA/pull/25\r\n\r\n\r\n**Full Changelog**: https://github.com/Gaius-Augustus/GALBA/compare/v1.0.4...v1.0.5",
        "html_url": "https://github.com/Gaius-Augustus/GALBA/releases/tag/v1.0.5",
        "name": "Running miniprot only once",
        "release_id": 97337122,
        "tag": "v1.0.5",
        "tarball_url": "https://api.github.com/repos/Gaius-Augustus/GALBA/tarball/v1.0.5",
        "type": "Release",
        "url": "https://api.github.com/repos/Gaius-Augustus/GALBA/releases/97337122",
        "value": "https://api.github.com/repos/Gaius-Augustus/GALBA/releases/97337122",
        "zipball_url": "https://api.github.com/repos/Gaius-Augustus/GALBA/zipball/v1.0.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "KatharinaHoff",
          "type": "User"
        },
        "date_created": "2023-03-15T20:00:24Z",
        "date_published": "2023-03-15T20:03:41Z",
        "description": "- pygustus jsonfile is now locked during fixing, this makes it safe to run multiple Galba processes in parallel\r\n- usexisting disappears from instructions in case of error",
        "html_url": "https://github.com/Gaius-Augustus/GALBA/releases/tag/v1.0.4",
        "name": "Better jsonfile protection",
        "release_id": 95755327,
        "tag": "v1.0.4",
        "tarball_url": "https://api.github.com/repos/Gaius-Augustus/GALBA/tarball/v1.0.4",
        "type": "Release",
        "url": "https://api.github.com/repos/Gaius-Augustus/GALBA/releases/95755327",
        "value": "https://api.github.com/repos/Gaius-Augustus/GALBA/releases/95755327",
        "zipball_url": "https://api.github.com/repos/Gaius-Augustus/GALBA/zipball/v1.0.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "KatharinaHoff",
          "type": "User"
        },
        "date_created": "2023-03-12T10:31:24Z",
        "date_published": "2023-03-12T10:34:11Z",
        "description": "- automatically update an outdated (typo containing) json file with pygustus and augustus parameters in $AUGUSTUS_CONFIG_PATH/parameters/ if necessary\r\n- redirect miniprot stderr output to file\r\n- catch star containing lines in miniprot output\r\n- bugfix in miniprothint (for case of only 1 reference proteome/coverage 1, actual fix is in miniprothint repository)",
        "html_url": "https://github.com/Gaius-Augustus/GALBA/releases/tag/v1.0.3",
        "name": "pygustus json config file fix",
        "release_id": 95311316,
        "tag": "v1.0.3",
        "tarball_url": "https://api.github.com/repos/Gaius-Augustus/GALBA/tarball/v1.0.3",
        "type": "Release",
        "url": "https://api.github.com/repos/Gaius-Augustus/GALBA/releases/95311316",
        "value": "https://api.github.com/repos/Gaius-Augustus/GALBA/releases/95311316",
        "zipball_url": "https://api.github.com/repos/Gaius-Augustus/GALBA/zipball/v1.0.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "KatharinaHoff",
          "type": "User"
        },
        "date_created": "2023-03-08T12:10:40Z",
        "date_published": "2023-03-08T12:38:14Z",
        "description": "- initial miniprothint integration boosts accuracy\r\n- iterative training boosts accuracy\r\n- runtime is much worse than previous release\r\n- will in the future take measures to speed up GALBA",
        "html_url": "https://github.com/Gaius-Augustus/GALBA/releases/tag/v1.0.2",
        "name": "miniprothint integration",
        "release_id": 94922586,
        "tag": "v1.0.2",
        "tarball_url": "https://api.github.com/repos/Gaius-Augustus/GALBA/tarball/v1.0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/Gaius-Augustus/GALBA/releases/94922586",
        "value": "https://api.github.com/repos/Gaius-Augustus/GALBA/releases/94922586",
        "zipball_url": "https://api.github.com/repos/Gaius-Augustus/GALBA/zipball/v1.0.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "KatharinaHoff",
          "type": "User"
        },
        "date_created": "2023-02-28T18:59:34Z",
        "date_published": "2023-02-28T20:58:55Z",
        "description": "- pygustus integration for safer multithreading\r\n- training gene selection per locus\r\n(not addressed yet: miniprot boundary scorer, iterative training, hopefully coming soon)\r\n\r\nBe careful with this release, it's dependent on the very latest pygustus release, and on the latest Augustus code from github. It will not work with Debian package at this point in time. The container was patched accordingly.",
        "html_url": "https://github.com/Gaius-Augustus/GALBA/releases/tag/v1.0.1",
        "name": "Pygustus integration",
        "release_id": 93998574,
        "tag": "v1.0.1",
        "tarball_url": "https://api.github.com/repos/Gaius-Augustus/GALBA/tarball/v1.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/Gaius-Augustus/GALBA/releases/93998574",
        "value": "https://api.github.com/repos/Gaius-Augustus/GALBA/releases/93998574",
        "zipball_url": "https://api.github.com/repos/Gaius-Augustus/GALBA/zipball/v1.0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "KatharinaHoff",
          "type": "User"
        },
        "date_created": "2022-12-29T10:31:11Z",
        "date_published": "2022-12-29T10:32:41Z",
        "description": "First GALBA release. Recommended to use with exactly one protein reference set for training AUGUSTUS.",
        "html_url": "https://github.com/Gaius-Augustus/GALBA/releases/tag/v1.0.0",
        "name": "v1.0.0",
        "release_id": 87510329,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/Gaius-Augustus/GALBA/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/Gaius-Augustus/GALBA/releases/87510329",
        "value": "https://api.github.com/repos/Gaius-Augustus/GALBA/releases/87510329",
        "zipball_url": "https://api.github.com/repos/Gaius-Augustus/GALBA/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Perl pipeline dependencies",
        "parent_header": [
          "Installation",
          "GALBA"
        ],
        "type": "Text_excerpt",
        "value": "Running GALBA requires a Linux-system with `bash` and Perl. Furthermore, GALBA requires the following CPAN-Perl modules to be\ninstalled:\n\n-   `File::Spec::Functions`\n\n-   `Hash::Merge`\n\n-   `List::Util`\n\n-   `MCE::Mutex`\n\n-   `Module::Load::Conditional`\n\n-   `Parallel::ForkManager`\n\n-   `POSIX`\n\n-   `Scalar::Util::Numeric`\n\n-   `YAML`\n\n-   `Math::Utils`\n\n-   `File::HomeDir`\n\n\nOn Ubuntu, for example, install the modules with CPANminus<sup name=\"g4\">[F4](#g4)</sup>: `sudo cpanm Module::Name`, e.g. `sudo cpanm Hash::Merge`.\n\nGALBA also uses a Perl module `helpMod.pm` that is not available on CPAN. This module is part of the GALBA release and does not require separate installation.\n\nIf you do not have root permissions on the Linux machine, try running it from the [Singularity image](#singularity-image), or try setting up an **Anaconda** (<https://www.anaconda.com/distribution/>) environment as follows:\n\n```\nwget https://repo.anaconda.com/archive/Anaconda3-2018.12-Linux-x86_64.sh\nbash bin/Anaconda3-2018.12-Linux-x86_64.sh # do not install VS (needs root privileges)\nconda install -c anaconda perl\nconda install -c bioconda perl-app-cpanminus\nconda install -c bioconda perl-hash-merge\nconda install -c bioconda perl-parallel-forkmanager\nconda install -c bioconda perl-scalar-util-numeric\nconda install -c bioconda perl-yaml\nconda install -c bioconda perl-class-data-inheritable\nconda install -c bioconda perl-exception-class\nconda install -c bioconda perl-test-pod\nconda install -c anaconda biopython\nconda install -c bioconda perl-file-which # skip if you are not comparing to reference annotation\nconda install -c bioconda perl-mce\nconda install -c bioconda perl-list-util\nconda install -c bioconda perl-math-utils\nconda install -c bioconda cdbtools\n```\n\nSubsequently, install GALBA and other software \"as usual\" while in your conda environment.\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Bioinformatics software dependencies",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "------------------------------------\n\nGALBA calls upon various bioinformatics software tools that are not part of GALBA. Some tools are mandatory, i.e.\u00a0GALBA will not run at all if these tools are not present on your system. Other tools are optional. Please install all tools that are required for running GALBA in the mode of your choice.\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "AUGUSTUS",
        "parent_header": [
          "Installation",
          "Bioinformatics software dependencies",
          "Mandatory tools"
        ],
        "type": "Text_excerpt",
        "value": "Download AUGUSTUS from its master branch at <https://github.com/Gaius-Augustus/Augustus>. Unpack AUGUSTUS and install AUGUSTUS according to AUGUSTUS `README.TXT`. ***Do not use outdated AUGUSTUS versions from other sources, e.g. Debian package or the Bioconda package! GALBA highly depends in particular on an up-to-date Augustus/scripts directory, and other sources are often lagging behind.***\n\nYou should compile AUGUSTUS on your own system in order to avoid problems with versions of libraries used by AUGUSTUS. Compilation instructions are provided in the AUGUSTUS `README.TXT` file (`Augustus/README.txt`).\n\nAUGUSTUS consists of `augustus`, the gene prediction tool, additional C++ tools located in `Augustus/auxprogs` and Perl scripts located in `Augustus/scripts`. Perl scripts must be executable (see instructions in section [GALBA components](#executability). GALBA does not use any of the `auxprogs`.\n\nSince GALBA is a pipeline that trains AUGUSTUS, i.e.,\u00a0writes species specific parameter files, GALBA needs write access to the configuration directory of AUGUSTUS that contains such files (`Augustus/config/`). If you install AUGUSTUS globally on your system, the `config` folder will typically not be writable by all users. Either make the directory where `config` resides recursively writable to users of AUGUSTUS, or copy the `config/` folder (recursively) to a location where users have writing permission.\n\nAUGUSTUS will locate the `config` folder by looking for the environment variable `$AUGUSTUS_CONFIG_PATH`. If the `$AUGUSTUS_CONFIG_PATH`\nenvironment variable is not set, then GALBA will look in the path `../config` relative to the directory in which it finds an AUGUSTUS\nexecutable. Alternatively, you can supply the variable as a command line argument to GALBA (`--AUGUSTUS_CONFIG_PATH=/your_path_to_AUGUSTUS/Augustus/config/`). We recommend that you export the variable, e.g.,\u00a0for your current bash\nsession:\n\n```\n    export AUGUSTUS_CONFIG_PATH=/your_path_to_AUGUSTUS/Augustus/config/\n```\n\nIn order to make the variable available to all Bash sessions, add the above line to a startup script, e.g.,\u00a0`~/.bashrc`.\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Important:",
        "parent_header": [
          "Installation",
          "Bioinformatics software dependencies",
          "Mandatory tools",
          "AUGUSTUS"
        ],
        "type": "Text_excerpt",
        "value": "GALBA expects the entire `config` directory of AUGUSTUS at `$AUGUSTUS_CONFIG_PATH`, i.e.\u00a0the subfolders `species` with its contents (at least `generic`) and `extrinsic`! Providing a writable but empty folder at `$AUGUSTUS_CONFIG_PATH` will not work for GALBA. If you need\nto separate augustus binary and `$AUGUSTUS_CONFIG_PATH`, we recommend that you recursively copy the un-writable config contents to a writable location.\n\nIf you have a system-wide installation of AUGUSTUS at `/usr/bin/augustus`, an unwritable copy of `config` sits at `/usr/bin/augustus_config/`. The folder `${HOME}` is writable to you. Copy with the following command (and additionally set the then required variables):\n\n```\ncp -r /usr/bin/Augustus/config/ ${HOME}/augustus_config\nexport AUGUSTUS_CONFIG_PATH=${HOME}/augustus_config\nexport AUGUSTUS_BIN_PATH=/usr/bin\nexport AUGUSTUS_SCRIPTS_PATH=/usr/bin/augustus_scripts\n```\nGALBA automatically sets the environment variables if run from the Singuarity image.\n\nIf you installed Augustus as a debian package, then the scripts are currently up-to-date, but a folder with parameters file is missing. To fix this, please execute the following steps (with root permissions):\n\n```\ncd /usr/share/augustus/config\nmkdir parameters\ncd parameters\nwget https://raw.githubusercontent.com/Gaius-Augustus/Augustus/master/config/parameters/AUG_CMDLN_PARAMETERS.md\nwget https://raw.githubusercontent.com/Gaius-Augustus/Augustus/master/config/parameters/aug_cmdln_parameters.json\nchmod a+r AUG_CMDLN_PARAMETERS.md aug_cmdln_parameters.json\ncd ..\nchmod a+r parameters\nchmod a+x parameters\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Modification of $PATH",
        "parent_header": [
          "Installation",
          "Bioinformatics software dependencies",
          "Mandatory tools",
          "AUGUSTUS"
        ],
        "type": "Text_excerpt",
        "value": "Adding directories of AUGUSTUS binaries and scripts to your `$PATH` variable enables your system to locate these tools,\nautomatically. It is not a requirement for running GALBA to do this, because GALBA will try to guess them from the location of another\nenvironment variable (`$AUGUSTUS_CONFIG_PATH`), or both directories can be supplied as command line arguments to `galba.pl`, but we recommend to add them to your `$PATH` variable. For your current bash session, type:\n\n```\nPATH=:/your_path_to_augustus/bin/:/your_path_to_augustus/scripts/:$PATH\nexport PATH\n```\n\nFor all your BASH sessions, add the above lines to a startup script (e.g.`~/.bashrc`).\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Pygustus",
        "parent_header": [
          "Installation",
          "Bioinformatics software dependencies",
          "Mandatory tools"
        ],
        "type": "Text_excerpt",
        "value": "This tool is required for parallelization of Augustus. Install Pygustus (<https://github.com/Gaius-Augustus/pygustus>) with pip (or pip3):\n\n```\npip install pygustus\n```\n\nImportant: this version of GALBA relies on pygustus 0.8.3-alpha. It will not be compatible with older versions.\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Miniprot",
        "parent_header": [
          "Installation",
          "Bioinformatics software dependencies",
          "Mandatory tools"
        ],
        "type": "Text_excerpt",
        "value": "This tool is only required, if you would like to run protein to genome alignments with GALBA using Miniprot. We strongly recommend using Miniprot with GALBA. Download Miniprot from <https://github.com/lh3/miniprot>:\n\n```\ngit clone https://github.com/lh3/miniprot.git\ncd miniprot\nmake\n```\n\nGALBA will try to locate the Miniprot executable by using an environment variable `$MINIPROT_PATH`. Alternatively, this can be supplied as command line argument (`--MINIPROT_PATH=/your/path/to/miniprot/`).\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "miniprot-boundary-scorer",
        "parent_header": [
          "Installation",
          "Bioinformatics software dependencies",
          "Mandatory tools"
        ],
        "type": "Text_excerpt",
        "value": "This tool is only required, if you would like to run protein to genome alignments with GALBA using Miniprot. Download miniprot-boundary-scorer from <https://github.com/tomasbruna/miniprot-boundary-scorer>:\n\n```\ngit clone https://github.com/tomasbruna/miniprot-boundary-scorer.git\ncd miniprot-boundary-scorer\nmake\n```\n\nGALBA will try to locate the miniprot-boundary-scorer executable by using an environment variable `$SCORER_PATH`. Alternatively, this can be supplied as command line argument (`--SCORER_PATH=/your/path/to/miniprot-boudary-scorer/`).\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "miniprotprothint",
        "parent_header": [
          "Installation",
          "Bioinformatics software dependencies",
          "Mandatory tools"
        ],
        "type": "Text_excerpt",
        "value": "This tool is only required, if you would like to run protein to genome alignments with GALBA using Miniprot. Download miniprothint from <https://github.com/tomasbruna/miniprothint>:\n\n```\ngit clone https://github.com/tomasbruna/miniprothint.git\n```\n\nGALBA will try to locate the miniprothint.py executable by using an environment variable `$MINIPROTHINT_PATH`. Alternatively, this can be supplied as command line argument (`--MINIPROTHINT_PATH=/your/path/to/miniprothint/`).\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "GenomeThreader",
        "parent_header": [
          "Installation",
          "Bioinformatics software dependencies",
          "Mandatory tools"
        ],
        "type": "Text_excerpt",
        "value": "This tool is only required, if you would like to run protein to genome alignments with GALBA using GenomeThreader. Download GenomeThreader from <http://genomethreader.org/>. Unpack and install according to `gth/README`.\n\nGALBA will try to locate the GenomeThreader executable by using an environment variable `$GENOMETHREADER_PATH`. Alternatively, this can be supplied as command line argument (`--GENOMETHREADER_PATH=/your/path/to/gth/`).\n\nPlease be aware that miniprot achieves higher accuracy than GenomeThreader in GALBA! See section on [Accuracy](#accuracy).\n\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Python3",
        "parent_header": [
          "Installation",
          "Bioinformatics software dependencies",
          "Mandatory tools"
        ],
        "type": "Text_excerpt",
        "value": "On Ubuntu, Python3 is usually installed by default, `python3` will be in your `$PATH` variable, by default, and GALBA will automatically locate it. However, you have the option to specify the `python3` binary location in two other ways:\n\n1.  Export an environment variable `$PYTHON3_PATH`, e.g.\u00a0in your `~/.bashrc` file:\n\n        export PYTHON3_PATH=/path/to/python3/\n\n2.  Specify the command line option `--PYTHON3_PATH=/path/to/python3/` to `galba.pl`.\n\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "DIAMOND",
        "parent_header": [
          "Installation",
          "Bioinformatics software dependencies",
          "Mandatory tools"
        ],
        "type": "Text_excerpt",
        "value": "DIAMOND is used for removal of redundant training genes.\n\nObtain and unpack DIAMOND as follows:\n\n```\n    wget http://github.com/bbuchfink/diamond/releases/download/v0.9.24/diamond-linux64.tar.gz\n    tar xzf diamond-linux64.tar.gz\n```\n\nIf already in your `$PATH` variable, GALBA will find diamond, automatically. Otherwise, GALBA can locate the diamond binary either by using an environment variable `$DIAMOND_PATH`, or by taking a command line argument (`--DIAMOND_PATH=/your_path_to_diamond`). In order to set the environment variable e.g. for your current bash session, type:\n\n```\n    export DIAMOND_PATH=/your_path_to_diamond/\n```\n\nAdd the above line to a startup script (e.g.\u00a0`~/.bashrc`) in order to set the environment variable for all bash sessions.\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "TSEBRA",
        "parent_header": [
          "Installation",
          "Bioinformatics software dependencies",
          "Mandatory tools"
        ],
        "type": "Text_excerpt",
        "value": "TSEBRA is (in most cases) used to remove noise from the Augustus predictions.\n\nObtain TSEBRA as follows:\n\n```\n    git clone https://github.com/Gaius-Augustus/TSEBRA.git\n```\n\nIf already in your `$PATH` variable, GALBA will find tsebra.py, automatically. Otherwise, GALBA can locate tsebra.py either by using an environment variable `$TSEBRA_PATH`, or by taking a command line argument (`--TSEBRA_PATH=/your_path_to_tsebra`). In order to set the environment variable e.g. for your current bash session, type:\n\n```\n    export TSEBRA_PATH=/your_path_to_tsebra/bin/\n```\n\nAdd the above line to a startup script (e.g.\u00a0`~/.bashrc`) in order to set the environment variable for all bash sessions.\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Biopython",
        "parent_header": [
          "Installation",
          "Bioinformatics software dependencies",
          "Optional tools"
        ],
        "type": "Text_excerpt",
        "value": "If Biopython is installed, GALBA can generate FASTA-files with coding sequences and protein sequences predicted by AUGUSTUS and generate track data hubs for visualization of a GALBA run with MakeHub <sup name=\"a8\">[R8](#f8)</sup>.\nThese are optional steps. The first can be disabled with the command-line flag `--skipGetAnnoFromFasta`, the second can be activated by using the command-line options `--makehub --email=your@mail.de`, Biopython is not required if neither of these optional steps shall be performed.\n\nOn Ubuntu, install Python3 package manager with:\n\n    `sudo apt-get install python3-pip`\n\nThen, install Biopython with:\n\n    `sudo pip3 install biopython`\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "cdbfasta",
        "parent_header": [
          "Installation",
          "Bioinformatics software dependencies",
          "Optional tools"
        ],
        "type": "Text_excerpt",
        "value": "cdbfasta and cdbyank are required by GALBA for correcting AUGUSTUS genes with in frame stop codons (spliced stop codons) using the AUGUSTUS script fix_in_frame_stop_codon_genes.py. This can be skipped with `--skip_fixing_broken_genes`.\n\nOn Ubuntu, install cdbfasta with:\n\n    `sudo apt-get install cdbfasta`\n\nFor other systems, you can for example obtain cdbfasta from <https://github.com/gpertea/cdbfasta>, e.g.:\n\n```\n        git clone https://github.com/gpertea/cdbfasta.git`\n        cd cdbfasta\n        make all\n```\n\nOn Ubuntu, cdbfasta and cdbyank will be in your `$PATH` variable after installation, and GALBA will automatically locate them. However, you have the option to specify the `cdbfasta` and `cdbyank` binary location in two other ways:\n\n1.  Export an environment variable `$CDBTOOLS_PATH`, e.g.\u00a0in your `~/.bashrc` file:\n\n```\n        export CDBTOOLS_PATH=/path/to/cdbtools/\n```\n\n2.  Specify the command line option `--CDBTOOLS_PATH=/path/to/cdbtools/` to `galba.pl`.\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "MakeHub",
        "parent_header": [
          "Installation",
          "Bioinformatics software dependencies",
          "Optional tools"
        ],
        "type": "Text_excerpt",
        "value": "If you wish to automaticaly generate a track data hub of your GALBA run, the MakeHub software, available at <https://github.com/Gaius-Augustus/MakeHub> is required. Download the software (either by running `git clone https://github.com/Gaius-Augustus/MakeHub.git`, or by\npicking a release from <https://github.com/Gaius-Augustus/MakeHub/releases>. Extract the release package if you downloaded a release (e.g. `unzip MakeHub.zip` or `tar -zxvf MakeHub.tar.gz`.\n\nGALBA will try to locate the make_hub.py script by using an environment variable `$MAKEHUB_PATH`. Alternatively, this can be supplied as command line argument (`--MAKEHUB_PATH=/your/path/to/MakeHub/`). GALBA can also try to guess the location of MakeHub on your system.\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "System dependencies",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "-------------------\ngalba.pl uses getconf to see how many threads can be run on your system. On Ubuntu, you can install it with:\n\n```\nsudo apt-get install libc-bin\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Overview running GALBA",
        "type": "Text_excerpt",
        "value": "====================================\n\nGALBA mainly features semi-unsupervised, protein sequence evidence data supported training of AUGUSTUS with integration of extrinsic evidence in the final gene prediction step. GALBA can be used either with Miniprot or GenomeThreader as a protein spliced aligner. Miniprot is our preferred aligner because it continues to undergo development, we have put a lot of work into improving the integration of miniprot evidence (e.g. miniprothint), and is faster than GenomeThreader. We highly recommend to use Miniprot with GALBA. GenomeThreader is only included in GALBA for internal benchmarking purposes. We stopped testing GenomeThreader functionality a while ago, we do not include GenomeThreader in our containers. The GALBA pipeline with miniprot looks works like this (Figure 1 from the GALBA publication at https://link.springer.com/article/10.1186/s12859-023-05449-z):\n\n![galba-miniprot\\[fig1\\]](docs/figs/galba_minprot.png)\n\nFigure a: training AUGUSTUS on the basis of spliced alignment information from proteins of a closely related species against the target genome with miniprot.\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running GALBA in Singularity outside of $HOME",
        "parent_header": [
          "Singularity Image"
        ],
        "type": "Text_excerpt",
        "value": "---------------------------------------------\n\nIf you want to execute galba.sif while mounting a different directory, e.g. mounting $PWD, then you need to be aware of the following: GALBA needs a writable `$AUGUSTUS_CONFIG_PATH` environment variable. By default, the `AUGUSTUS_CONFIG_PATH` is `/usr/share/augustus/config` in the sif container, which is not writable. Therefore, GALBA attempts to automatically copy the contents of `/usr/share/augustus/config` into $HOME/.augustus on the host system. If this fails, it copies to $PWD.\n\nIf you want to re-use AUGUSTUS parameters trained by GALBA in a later run with --skipAllTraining, you must either mount the same $PWD as during training, or you must manually copy the $PWD/.augustus to the location that you will mount for the second run.\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running GALBA",
        "type": "Text_excerpt",
        "value": "===============\n\nIn the following, we describe the GALBA calls for Miniprot and GenomeThreader. In general, we recommend that you run GALBA on genomic sequences that have been softmasked for Repeats.\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "GALBA with Miniprot",
        "parent_header": [
          "Running GALBA"
        ],
        "type": "Text_excerpt",
        "value": "For running GALBA with Miniprot, type:\n\n```\n    galba.pl --species=yourSpecies --genome=genome.fasta \\\n       --prot_seq=proteins.fa\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "GALBA with GenomeThreader",
        "parent_header": [
          "Running GALBA"
        ],
        "type": "Text_excerpt",
        "value": "For running GALBA with GenomeThreader, type:\n\n```\n    galba.pl --species=yourSpecies --genome=genome.fasta \\\n       --prot_seq=proteins.fa --prg=gth\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "--prg",
        "parent_header": [
          "Running GALBA",
          "Description of selected GALBA command line options"
        ],
        "type": "Text_excerpt",
        "value": "Use either `miniprot` (default) or `gth` (for GenomeThreader) to generate training genes and hints.\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "--AUGUSTUS_ab_initio",
        "parent_header": [
          "Running GALBA",
          "Description of selected GALBA command line options"
        ],
        "type": "Text_excerpt",
        "value": "Compute AUGUSTUS *ab initio* predictions in addition to AUGUSTUS predictions with hints (additional output files: `augustus.ab_initio.*`. This may be useful for estimating the quality of training gene parameters when inspecting predictions in a Browser.\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "--augustus_args=\"--some_arg=bla\"",
        "parent_header": [
          "Running GALBA",
          "Description of selected GALBA command line options"
        ],
        "type": "Text_excerpt",
        "value": "One or several command line arguments to be passed to AUGUSTUS, if several arguments are given, separate them by whitespace, i.e.\u00a0`\"--first_arg=sth\u00a0--second_arg=sth\"`. This may be be useful if you know that gene prediction in your particular species benefits from a particular AUGUSTUS argument during the prediction step.\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "--threads=INT",
        "parent_header": [
          "Running GALBA",
          "Description of selected GALBA command line options"
        ],
        "type": "Text_excerpt",
        "value": "Specifies the maximum number of threads that can be used during computation. GALBA has to run some steps on a single thread, others can take advantage of multiple threads. If you use more than 8 threads, this will not speed up all parallelized steps, in particular, the time consuming `optimize_augustus.pl` will not use more than 8 threads.\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "--crf",
        "parent_header": [
          "Running GALBA",
          "Description of selected GALBA command line options"
        ],
        "type": "Text_excerpt",
        "value": "Execute CRF training for AUGUSTUS; resulting parameters are only kept for final predictions if they show higher accuracy than HMM parameters. This increases runtime!\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "--lambda=int",
        "parent_header": [
          "Running GALBA",
          "Description of selected GALBA command line options"
        ],
        "type": "Text_excerpt",
        "value": "Change the parameter $\\lambda$ of the Poisson distribution that is used for downsampling training genes according to their number of introns (only genes with up to 5 introns are downsampled). The default value is $\\lambda=2$. You might want to set it to 0 for organisms that mainly have single-exon genes. (Generally, single-exon genes contribute less value to increasing AUGUSTUS parameters compared to genes with many exons.)\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "--makehub --email=your@mail.de",
        "parent_header": [
          "Running GALBA",
          "Description of selected GALBA command line options"
        ],
        "type": "Text_excerpt",
        "value": "If `--makehub` and `--email=your@mail.de` (with your valid e-mail adress) are provided, a track data hub for visualizing results with the UCSC Genome Browser will be generated using MakeHub (<https://github.com/Gaius-Augustus/MakeHub>).\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "--disable_diamond_filter=true",
        "parent_header": [
          "Running GALBA",
          "Description of selected GALBA command line options"
        ],
        "type": "Text_excerpt",
        "value": "Disable filtering AUGUSTUS genes by DIAMOND hit determination against input proteins (default is false). If you do not trust the protein donor, or if the donor is rather distantly related, please disable the DIAMOND filter. With execellent quality protein donors and close relatives, you increase specificity in large vertebrate genomes, significantly, by using the DIAMOND filter. In smaller genomes, it makes less of a difference. Generally, using the filter comes at a (usually small) cost in sensitivity, i.e.\u00a0you will miss some genes that are not supported by protein evidence.\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "download",
    "contact",
    "contributors",
    "documentation",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:50:28",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 127
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Example data",
        "type": "Text_excerpt",
        "value": "============\n\nAn example data set is contained in the directory `GALBA/example`.\n\nThe example data set was not compiled in order to achieve optimal prediction accuracy, but in order to quickly test pipeline components. The small subset of the genome used in these test examples is not long enough for GALBA training to work well.\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Testing GALBA with Miniprot",
        "parent_header": [
          "Example data"
        ],
        "type": "Text_excerpt",
        "value": "---------------------------\n\n```\ngalba.pl --genome=genome.fa --prot_seq=proteins.fa \\\n    --skipOptimize --threads 8\n```\n\nThis test is implemented in `test1.sh`, expected runtime is ~2 minutes. The fast runtime of this test is mostly caused by generating a low number of training genes, and by skipping an optimization step for AUGUSTUS training.\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Testing GALBA with GenomeThreader",
        "parent_header": [
          "Example data"
        ],
        "type": "Text_excerpt",
        "value": "---------------------------------\n\n```\ngalba.pl --genome=genome.fa --prot_seq=proteins.fa \\\n    --skipOptimize --prg=gth --workingdir=$wd \\\n    --threads 8\n```\n\nThis test is implemented in `test2.sh`, expected runtime is ~2:15 minutes. The fast runtime of this test is mostly caused by generating a low number of training genes, and by skipping an optimization step for AUGUSTUS training.\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Testing GALBA with pre-trained parameters",
        "parent_header": [
          "Example data"
        ],
        "type": "Text_excerpt",
        "value": "------------------------------------------\n\nThe training step of all pipelines can be skipped with the option `--skipAllTraining`. This means, only AUGUSTUS predictions will be performed, using pre-trained, already existing parameters. For example, you can predict genes with the command:\n\n```\ngalba.pl --genome=genome.fa --prot_seq=proteins.fa \\\n    --skipAllTraining \\\n    --threads 8 --species=arabidopsis\n```\n\nThis test is implemented in `test3.sh`, expected runtime is 2:30 minutes.\n"
      },
      "source": "https://raw.githubusercontent.com/Gaius-Augustus/GALBA/main/README.md",
      "technique": "header_analysis"
    }
  ]
}