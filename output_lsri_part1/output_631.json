{
  "application_domain": [
    {
      "confidence": 33.03,
      "result": {
        "type": "String",
        "value": "Natural Language Processing"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DEIB-GECO/CombSAFE"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-02-18T10:21:10Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-03-19T22:16:32Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Combinatorial and Semantic Analysis of Functional Elements"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9944987963447942,
      "result": {
        "original_header": "About",
        "type": "Text_excerpt",
        "value": "Given as input a set of ChIP-seq dataset samples and the list of functional elements to be considered, the ```CombSAFE``` pipeline allows:\n- considering histone modifications, transcription factors and any other type of dynamic or static genomic features (e.g., CpG islands, partially methylated domains, transposable elements, etc.)\n- relying on public repositories to retrieve the considered static functional elements and identify from the input dataset metadata the biological conditions in which the dynamic functional elements of interest were charted\n- leveraging natural language processing techniques and biomedical ontologies to complement the identified conditions with semantic annotations about tissue and disease types\n- identifying combinations of static and dynamic functional elements throughout the genome in the corresponding omics data, using hidden Markov models \n- focusing on specific genomic regions, applying clustering to explore how significant combinations of the functional elements compare among semantically annoted cell types and desease/healthy conditions \n- performing functional enrichment analyses based on the genes found in genomic regions with similar combinations of functional elements.\n \n"
      },
      "source": "https://raw.githubusercontent.com/DEIB-GECO/CombSAFE/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8888458822957903,
      "result": {
        "original_header": "Structure",
        "type": "Text_excerpt",
        "value": "- `README.md` this file\n- `LICENSE` MIT license file\n- `.gitignore` standard .gitignore file for Python projects\n- `notebook/Functional_states_analysis.ipynb` Python notebook to run a functional state analysis\n- `gene_list/` folder where gene name lists are stored for the CombSAFE single gene analysis\n- `gene_list/test_list.txt` list of random genes\n- `gene_list/tumor_suppressor.txt` list of tumor suppressor genes\n- `gene_list/MYC_associated.txt` list of MYC interacting genes\n- `CombSAFE/CombSAFE.py` core Python routines called from within the notebook to perform the functional state analysis\n- `CombSAFE.yml` dependency yaml file to load in order to perform the CombSAFE analysis \n"
      },
      "source": "https://raw.githubusercontent.com/DEIB-GECO/CombSAFE/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9827853347828925,
      "result": {
        "original_header": "Cookbook",
        "type": "Text_excerpt",
        "value": "In the following, we show how to call the functions implemented to easily perform the different steps of our ```CombSAFE``` computational method, providing example resuls for some of them. \n \n"
      },
      "source": "https://raw.githubusercontent.com/DEIB-GECO/CombSAFE/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8759432907838652,
      "result": {
        "original_header": "Generate input dataset from raw  data",
        "type": "Text_excerpt",
        "value": "```combsafe.create_dataset(path, organism, threads=4, from_GEO=False)```<br/>\nRun a ChIP-seq peak calling pipeline from input raw data. <br/><br/>\nFor single-end reads Input files must be structured as follows: <br/>\n```\nInput_folder/\n|-- Raw_Reads/\n|   |-- 1.rawreads.fastq\n|   |-- 2.rawreads.fastq\n|   |-- 3.rawreads.fastq\n|   |-- 4.rawreads.fastq\n|   |-- 5.rawreads.fastq\n|   |-- 6.rawreads.fastq\n|   |-- 7.rawreads.fastq\n|   |-- ...\n|-- Textual_file.txt\n```\n- `Raw_Reads`  a folder containing raw reads in fastq format\n- `Textual_file.txt` a text file containing the following information:\n  - `file`, filename of the corresponding raw reads file in the Raw_Reads folder\n  - `factor`, transcription factor or histone mark used for the analysis\n  - `description`, all available iformations of the biological source from which to extract terms for semantic annotations.\n \n| file             | factor   | description                                                  |\n| :--------------- | :------- | :----------------------------------------------------------- |\n| 1.rawreads.fastq | CTCF     | low passage primary melanoma cultures                        |\n| 2.rawreads.fastq | H3K4me3  | Bone marrow mononuclear cells                                |\n| 3.rawreads.fastq | MYC      | human primary monocytes isolated from PBMC of healthy donors |\n| ...              | ...      | ...                                                          |\t \nFor paired-end reads Input files must be structured as follows: <br/> \n```\nInput_folder/\n|-- Raw_Reads/\n|   |-- 1.forward_reads.fastq\n|   |-- 1.reverse_reads.fastq\n|   |-- 2.forward_reads.fastq\n|   |-- 2.reverse_reads.fastq\n|   |-- 3.forward_reads.fastq\n|   |-- 3.reverse_reads.fastq\n|   |-- ...\n|-- Textual_file.txt\n```\n- `Raw_Reads`  a folder containing raw reads in fastq format\n- `Textual_file.txt` a text file containing the following information:\n  - `file_1`, filename of the corresponding forward raw reads file in the Raw_Reads folder\n  - `file_2`, filename of the corresponding reverse raw reads file in the Raw_Reads folder\n  - `factor`, transcription factor or histone mark used for the analysis\n  - `description`, all available informations of the biological source from which to extract terms for semantic annotations.  \n \n| file_1                | file_2                |factor    | description                                                       |\n| :-------------------- | :---------------------|:-------- | :---------------------------------------------------------------- |\n| 1.forward_reads.fastq | 1.reverse_reads.fastq | H3K4me1  | Human embryonic stem cells received from the John Doe laboratory  |\n| 2.forward_reads.fastq | 2.reverse_reads.fastq | H3K4me3  | Nuclei derived from crude preps of adipose tissue                 |\n| 3.forward_reads.fastq | 3.reverse_reads.fastq | H3K27me3 | Monocyte-derived macrophage                                       |\n| ...                   | ...                   |...       | ...                                                               |\t \n\nIf you want to start a functional state analysis on GEO experiments, set the ```from_GEO``` label as True. In that scenario, input files must be structured as follows: <br/>\n```\nInput_folder/\n|-- Textual_file.txt\n```\n- `Textual_file.txt` a text file containing the following information:\n  - `sample_id`, Id of the samples on GEO\n  - `factor`, transcription factor or histone mark used for the analysis\n \n"
      },
      "source": "https://raw.githubusercontent.com/DEIB-GECO/CombSAFE/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8963777766736554,
      "result": {
        "original_header": "Load input dataset",
        "type": "Text_excerpt",
        "value": "```combsafe.load_dataset(path, assembly, from_GEO=False)```<br/>\nLoad the input path for the analysis. Skip this step if you have already generated the daatset. <br/>\nInput files must be structured as follows: <br/>\n```\nInput_folder/\n|-- Chip_Files/\n|   |-- 1.narrowPeak.bed\n|   |-- 2.broadPeak.bed\n|   |-- 3.narrowPeak.bed\n|   |-- 4.broadPeak.bed\n|   |-- 5.narrowPeak.bed\n|   |-- 6.broadPeak.bed\n|   |-- 7.narrowPeak.bed\n|   |-- ...\n|-- Textual_file.txt\n```\n- `Chip_Files`  a folder containing ChIP-Seq files\n- `Textual_file.txt` a text file containing the following information:\n  - `sample_id`, univolcal id for each sample\n  - `factor`, Transcription Factor or Histone Mark used for the analysis\n  - `file`, filename of the corresponding ChIp-seq file in the Chip_Files folder\n  - `description`, all available informations of the biological source from which to extract terms for semantic annotations. \n \n| sample_id    | factor   | file             | description                                                  |\n| :----------  | :------- | :----------------| :----------------------------------------------------------- |\n| 1            | CTCF     | 1.narrowPeak.bed | low passage primary melanoma cultures                        |\n| 2            | H3K4me3  | 2.narrowPeak.bed | Bone marrow mononuclear cells                                |\n| 3            | MYC      | 3.narrowPeak.bed | human primary monocytes isolated from PBMC of healthy donors |\n|              | ...              | ...      | ...                                                          | \n\nIf your dataset is generate from GEO samples and you want to get the description from the GSM GEO webpage, set the ```from_GEO``` label as True. In that scenario, Textual_file.txt must be structured as follows: <br/> \n"
      },
      "source": "https://raw.githubusercontent.com/DEIB-GECO/CombSAFE/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9300654088087988,
      "result": {
        "original_header": "Data analysis",
        "type": "Text_excerpt",
        "value": "```combsafe.plot_factor_freq(semantic_dataframe, n)```<br/>\nVertical barplot of the factor frequency in the input dataset.<br/> \nParameters: \n- ***semantic_dataframe***: dataframe\n  - dataset of biological conditions from the input metadata\n- ***n***: int\n  - number of factors to display in the barplot \n---\n```combsafe.generate_fixed_factor_pool(semantic_dataframe, factor_list, number_of_semantic_annotations)``` <br/>\nTable containg lists of factors according to the selected parameters.<br/>\n \nParameters: \n- ***semantic_dataframe***: dataframe\n  - dataset of biological conditions from the input metadata\n- ***factor_list***: list\n  - list of factors to include in the analysis\n- ***number_of_semantic_annotations***: int\n  - number of semantic annotations to include in the analysis \nParameters: \n- ***semantic_dataframe***: dataframe\n  - dataset of biological conditions from the input metadata\n- ***factor_list***: list\n  - list of factors to include in the analysis \n"
      },
      "source": "https://raw.githubusercontent.com/DEIB-GECO/CombSAFE/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8914032278648807,
      "result": {
        "original_header": "Data extraction and replica combination",
        "type": "Text_excerpt",
        "value": "```combsafe.extract_data(factor_list)```<br/>\nCombine sample replicas of the listed factors and extract their semantic annotations regarding the conditions in which they were mapped.<br/> \nParameters: \n- ***factor_list***: list\n  - list of factors to include in the analysis \n"
      },
      "source": "https://raw.githubusercontent.com/DEIB-GECO/CombSAFE/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8860927152686269,
      "result": {
        "original_header": "[Optional] Add custom tracks",
        "type": "Text_excerpt",
        "value": "```combsafe.add_custom_tracks(tracks_label, path_to_custom_tracks, index)```<br/>\nAdd custom tracks of static genomic elements to the analysis (e.g., CpG islands). <br/> \nParameters: \n- ***tracks_label***: string\n  - name of the custom tracks to add for the analysis\n- ***path_to_custom_tracks***: path\n  - UCSC path for downloading custom tracks \n"
      },
      "source": "https://raw.githubusercontent.com/DEIB-GECO/CombSAFE/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9386560361606384,
      "result": {
        "original_header": "Identification of combinations of genomic functional elements",
        "type": "Text_excerpt",
        "value": "```combsafe.identify_functional_states(ChromHMM_path, number_of_states, n_core)```<br/>\nidentification of combinations of static and dynamic functional elements throughout the genome. <br/> \nParameters:\n- ***ChromHMM_path***: path\n  - path to the chromHMM software folder. It can be downloaded [here](http://compbio.mit.edu/ChromHMM/).\n- ***number_of_states***: int\n  - number of combinations of genomic functional elements\n- ***n_core***: int\n  - number of cores to use for the analysis \nReturns: \n  - ***functional_states_dataframe***\n    - dataset of functional states for each biological conditions \n  \nAlternatively, it is possible to load in house segmentated files from an other HMM segmentation tool and jump to the next step\n```combsafe.load_custom_segments(input_segment_dir, num_states)```<br/>\nload functional states files from input path. <br/>\n \n\n```combsafe.show_emission_graph(custom_palette=colors)```<br/>\nShow emission parameters heatmap of genome functional states combination. <br/> \nParameters: \n- ***custom_palette***: list of exadecimals, default=None\n  - add a list of customized colors in hexadecimal form to be assigned to the functional states.  \n"
      },
      "source": "https://raw.githubusercontent.com/DEIB-GECO/CombSAFE/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.889011902221566,
      "result": {
        "original_header": "Distance Metric Heatmap",
        "type": "Text_excerpt",
        "value": "```combsafe.show_distance_matrix()```<br/>\nShow distance matrix heatmap about functional states generated from the emission parameters file of an HMM model. <br/> \n"
      },
      "source": "https://raw.githubusercontent.com/DEIB-GECO/CombSAFE/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9804368248208778,
      "result": {
        "original_header": "Single-gene analysis",
        "type": "Text_excerpt",
        "value": "```combsafe.single_gene_analysis(functional_states_dataframe, path_to_gene_list_file, distance_metric )```<br/>\nGiven a list of gene symbols in a textual file, the heatmap of the functional states of the related genomic regions is shown. <br/> \n"
      },
      "source": "https://raw.githubusercontent.com/DEIB-GECO/CombSAFE/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9257347037345726,
      "result": {
        "original_header": "PCA Analysis",
        "type": "Text_excerpt",
        "value": "Parameters:\n- ***functional_states_dataframe***: dataframe\n  - dataframe of functional states\n- ***number_of_components***: int\n  -  number of components for the principal component analysis\n \nReturn:\n- ***loadings***: dataframe\n  - PCA loadings \n"
      },
      "source": "https://raw.githubusercontent.com/DEIB-GECO/CombSAFE/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9008944400607408,
      "result": {
        "original_header": "Genome-wide analysis",
        "type": "Text_excerpt",
        "value": "```combsafe.genome_reduction(functional_states_dataframe, threshold)```<br/>\nReduce the initial functional state dataframe to visualize the functional states of the various semantic annotations in the form of a heatmap. <br/>\nNB:  the proportions among the functional states are maintained as in the previous dataframe of functional states. <br/> \n\n```combsafe.data_driven_heatmap(reducted_df, distance_metric, min_clust_size, min_sampl)```<br/>\nShow a genome-wide heatmap with the most significant clusters of genomic regions based on their patterns of functional states. <br/> \nReturn: \n- ***clustered_dataframe***: dataframe\n  - dataframe of functional states ordered according to the cluster parameters \n\n```combsafe.gene_ontology_enrichment_analysis(clustered_dataframe, distance_metric, goea_tool)```<br/>\nShow a genome-wide heatmap with the most significant clusters of genomic regions based on their patterns of functional states. <br/> \n"
      },
      "source": "https://raw.githubusercontent.com/DEIB-GECO/CombSAFE/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/DEIB-GECO/CombSAFE/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/DEIB-GECO/CombSAFE/main/notebook/Functional_states_analysis.ipynb"
      },
      "source": "https://raw.githubusercontent.com/DEIB-GECO/CombSAFE/main/notebook/Functional_states_analysis.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/DEIB-GECO/CombSAFE/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "DEIB-GECO/CombSAFE"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CombSAFE"
      },
      "source": "https://raw.githubusercontent.com/DEIB-GECO/CombSAFE/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://drive.google.com/uc?export=download&amp;id=1WyFjK1eYM9nSbMKLht0dXp6ouscZ381P"
      },
      "source": "https://raw.githubusercontent.com/DEIB-GECO/CombSAFE/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://drive.google.com/uc?export=download&amp;id=1Qc4W9vm2ekev_P13-56akRNpK_oY92BQ"
      },
      "source": "https://raw.githubusercontent.com/DEIB-GECO/CombSAFE/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://drive.google.com/uc?export=download&amp;id=1llQnJyeJku6evCgDaOymWuiIgCE5dYXO"
      },
      "source": "https://raw.githubusercontent.com/DEIB-GECO/CombSAFE/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://drive.google.com/uc?export=download&amp;id=1Kk_vOm5wz_ski-fLvTxB48dhhu9TXcNY"
      },
      "source": "https://raw.githubusercontent.com/DEIB-GECO/CombSAFE/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://drive.google.com/uc?export=download&amp;id=1TBzP1xohnIjRwjco5OTeLCEsDI47Xnz-"
      },
      "source": "https://raw.githubusercontent.com/DEIB-GECO/CombSAFE/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://drive.google.com/uc?export=download&amp;id=1zkj4DhgfR36UiIAM99ohF1byaXojKRNU"
      },
      "source": "https://raw.githubusercontent.com/DEIB-GECO/CombSAFE/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://drive.google.com/uc?export=download&amp;id=1Ph4TnBsxYnlgUUGZ2gYWLNqU7M96QB6L"
      },
      "source": "https://raw.githubusercontent.com/DEIB-GECO/CombSAFE/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://drive.google.com/uc?export=download&amp;id=1jbyS_WY54SfJtCWQhw9tpiYW8vC2QJ_Q"
      },
      "source": "https://raw.githubusercontent.com/DEIB-GECO/CombSAFE/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How to install",
        "parent_header": [
          "CombSAFE"
        ],
        "type": "Text_excerpt",
        "value": "In order to run the ```CombSAFE``` pipeline, please follow the steps below: <br/>\n\n1. Install the Anaconda package and environment manager from [here](https://docs.anaconda.com/anaconda/install/)\n2. Load the CombSAFE environment with the command: ```conda env create -f CombSAFE.yml``` <br/>\n3. Activate the CombSAFE environment with the command: ```conda activate CombSAFE``` ON Linux and macOS. On Windows systems digit  ```activate CombSAFE```\n4. Run the ```notebook/Functional_states_analysis.ipynb```\n\nNB: The `pyGMQL` package additionally requires Java. Please follow the installation procedure [here](https://pygmql.readthedocs.io/en/latest/installation.html). <br/>\nNB2: The `PyEnsembl` package additionally requires Ensembl data. Please follow the installation procedure [here](https://pypi.org/project/pyensembl/). <br/>\nNB3: For Windows users, Visual Studio v.14 or higher is required. Please follow the installation procedure [here](https://visualstudio.microsoft.com/visual-cpp-build-tools/)\n"
      },
      "source": "https://raw.githubusercontent.com/DEIB-GECO/CombSAFE/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999286648236578,
      "result": {
        "original_header": "Structure",
        "type": "Text_excerpt",
        "value": "```\nCombSAFE/\n|-- README.md\n|-- LICENSE\n|-- .gitignore\n|-- notebook/\n|   |-- Functional_states_analysis.ipynb\n|-- gene_list/\n|   |-- MYC_associated.txt\n|   |-- test_list.txt\n|   |-- tumor_suppressor.txt\n|-- CombSAFE/\n|   |-- CombSAFE.py\n|-- CombSAFE.yml\n``` \n- `README.md` this file\n- `LICENSE` MIT license file\n- `.gitignore` standard .gitignore file for Python projects\n- `notebook/Functional_states_analysis.ipynb` Python notebook to run a functional state analysis\n- `gene_list/` folder where gene name lists are stored for the CombSAFE single gene analysis\n- `gene_list/test_list.txt` list of random genes\n- `gene_list/tumor_suppressor.txt` list of tumor suppressor genes\n- `gene_list/MYC_associated.txt` list of MYC interacting genes\n- `CombSAFE/CombSAFE.py` core Python routines called from within the notebook to perform the functional state analysis\n- `CombSAFE.yml` dependency yaml file to load in order to perform the CombSAFE analysis \n"
      },
      "source": "https://raw.githubusercontent.com/DEIB-GECO/CombSAFE/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999980982796507,
      "result": {
        "original_header": "Generate semantic annotations",
        "type": "Text_excerpt",
        "value": "Example:\n```python\n>> ontology_1 = \"https://raw.githubusercontent.com/obophenotype/cell-ontology/master/cl-basic.obo\"\n>> ontology_2 = \"https://raw.githubusercontent.com/DiseaseOntology/HumanDiseaseOntology/main/src/ontology/doid.obo\"\n>> semantic_df = generate_semantic_annotations(dataset, ontology_1, ontology_2, disease = True, encode_convert=False)\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/DEIB-GECO/CombSAFE/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9690560000861184,
      "result": {
        "original_header": "[Optional] Add custom tracks",
        "type": "Text_excerpt",
        "value": "Example:\n```python\n>> add_custom_tracks(\"CpG_Islands\", \"./input_files/cpgIslandExt.txt\")\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/DEIB-GECO/CombSAFE/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9060011866888429,
      "result": {
        "original_header": "Identification of combinations of genomic functional elements",
        "type": "Text_excerpt",
        "value": "Input files must be structured as follows: <br/>\n```\nInput_folder/\n|-- Segmentated_Files/\n|   |-- 1.semantic_annotation_15_segments.bed\n|   |-- 2.semantic_annotation_15_segments.bed\n|   |-- 3.semantic_annotation_15_segments.bed\n|   |-- 4.semantic_annotation_15_segments.bed\n|   |-- 5.semantic_annotation_15_segments.bed\n|   |-- 6.semantic_annotation_15_segments.bed\n|   |-- 7.semantic_annotation_15_segments.bed\n|   |-- ...\n|-- emissions.txt\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/DEIB-GECO/CombSAFE/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9974257097178301,
      "result": {
        "original_header": "Single-gene analysis",
        "type": "Text_excerpt",
        "value": "\nExample:\n```python\n>> single_gene_analysis(functional_states_df, \"path_to_gene_list/gene_list.txt\", distance_metric = funtional_states_distance)\n>> single_gene_analysis(functional_states_df, \"path_to_gene_list/gene_list.txt\", distance_metric = \"hamming\")\n```\n![alt text](https://drive.google.com/uc?export=download&id=1zkj4DhgfR36UiIAM99ohF1byaXojKRNU) \n"
      },
      "source": "https://raw.githubusercontent.com/DEIB-GECO/CombSAFE/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.884490052125838,
      "result": {
        "original_header": "Structure",
        "type": "Text_excerpt",
        "value": "```\nCombSAFE/\n|-- README.md\n|-- LICENSE\n|-- .gitignore\n|-- notebook/\n|   |-- Functional_states_analysis.ipynb\n|-- gene_list/\n|   |-- MYC_associated.txt\n|   |-- test_list.txt\n|   |-- tumor_suppressor.txt\n|-- CombSAFE/\n|   |-- CombSAFE.py\n|-- CombSAFE.yml\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/DEIB-GECO/CombSAFE/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8648306287753824,
      "result": {
        "original_header": "Generate input dataset from raw  data",
        "type": "Text_excerpt",
        "value": "```combsafe.create_dataset(path, organism, threads=4, from_GEO=False)```<br/>\nRun a ChIP-seq peak calling pipeline from input raw data. <br/><br/>\nFor single-end reads Input files must be structured as follows: <br/>\n```\nInput_folder/\n|-- Raw_Reads/\n|   |-- 1.rawreads.fastq\n|   |-- 2.rawreads.fastq\n|   |-- 3.rawreads.fastq\n|   |-- 4.rawreads.fastq\n|   |-- 5.rawreads.fastq\n|   |-- 6.rawreads.fastq\n|   |-- 7.rawreads.fastq\n|   |-- ...\n|-- Textual_file.txt\n```\n- `Raw_Reads`  a folder containing raw reads in fastq format\n- `Textual_file.txt` a text file containing the following information:\n  - `file`, filename of the corresponding raw reads file in the Raw_Reads folder\n  - `factor`, transcription factor or histone mark used for the analysis\n  - `description`, all available iformations of the biological source from which to extract terms for semantic annotations.\n \nExample:\n```python\n>> dataset = create_dataset(\"./Input_folder/\", assembly=\"hg38\", threads=20, from_GEO=False)\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/DEIB-GECO/CombSAFE/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8704693681278647,
      "result": {
        "original_header": "Load input dataset",
        "type": "Text_excerpt",
        "value": "\n| sample_id | factor   | file             |\n| :---------| :------- | :--------------- |\n| GSM648494 | H3K4me1  | 1.narrowPeak.bed |\n| GSM648495 | H3K4me3  | 2.broadPeak.bed  |\n| GSM575280 | H3K27me3 | 3.narrowPeak.bed |\n| ...       | ...      | ...              |\t \nExample:\n```python\n>> input_path = import_path(\"./Input_folder/\", assembly=\"hg38\", from_GEO=True)\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/DEIB-GECO/CombSAFE/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.833914499476365,
      "result": {
        "original_header": "Generate semantic annotations",
        "type": "Text_excerpt",
        "value": "Example:\n```python\n>> ontology_1 = \"https://raw.githubusercontent.com/obophenotype/cell-ontology/master/cl-basic.obo\"\n>> ontology_2 = \"https://raw.githubusercontent.com/DiseaseOntology/HumanDiseaseOntology/main/src/ontology/doid.obo\"\n>> semantic_df = generate_semantic_annotations(dataset, ontology_1, ontology_2, disease = True, encode_convert=False)\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/DEIB-GECO/CombSAFE/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8667780790332463,
      "result": {
        "original_header": "Data analysis",
        "type": "Text_excerpt",
        "value": "Example:\n```python\n>> plot_factor_freq(semantic_df, 30)\n``` \nExample:\n```python\n>> generate_fixed_factor_pool(semantic_df, [\"CTCF\", \"MYC\"], 5)\n``` \nExample:\n```python\n>> get_semantic_annotation_list(semantic_df, [\"CTCF\", \"MYC\", \"POLR2A\", \"H3K4me3\", \"H3K27me3\"])\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/DEIB-GECO/CombSAFE/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8968445853337643,
      "result": {
        "original_header": "Data extraction and replica combination",
        "type": "Text_excerpt",
        "value": "Example:\n```python\n>> extract_data([\"CTCF\", \"MYC\", \"POLR2A\", \"H3K4me3\", \"H3K27me3\"])\n```\n---\n \n"
      },
      "source": "https://raw.githubusercontent.com/DEIB-GECO/CombSAFE/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9205405644239097,
      "result": {
        "original_header": "[Optional] Add custom tracks",
        "type": "Text_excerpt",
        "value": "Example:\n```python\n>> add_custom_tracks(\"CpG_Islands\", \"./input_files/cpgIslandExt.txt\")\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/DEIB-GECO/CombSAFE/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9011540126911434,
      "result": {
        "original_header": "Identification of combinations of genomic functional elements",
        "type": "Text_excerpt",
        "value": "Example:\n```python\n>> functional_states_df = load_custom_segments(input_segment_dir =\"./Input_folder/in_house_segmentated/\", num_states=15)\n``` \n- `Segmentated_Files`  a folder containing raw reads in fastq format\n- `emissions.txt` a text file structured as follows: \nExample:\n```python\n>> colors = ['#c9f9ff', '#e6beff', '#e6194b', '#3cb44b', '#ffe119', '#4363d8', '#f58231','#911eb4', '#bcf60c', '#f032e6', '#fffac8', '#fabebe', '#9a6324', '#46f0f0', '#008080']\n>> show_emission_graph(custom_palette=colors)\n```\n![alt text](https://drive.google.com/uc?export=download&id=1Kk_vOm5wz_ski-fLvTxB48dhhu9TXcNY) \n"
      },
      "source": "https://raw.githubusercontent.com/DEIB-GECO/CombSAFE/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8968445853337643,
      "result": {
        "original_header": "Distance Metric Heatmap",
        "type": "Text_excerpt",
        "value": "Example:\n```python\n>> show_distance_matrix()\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/DEIB-GECO/CombSAFE/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9016607575589363,
      "result": {
        "original_header": "Single-gene analysis",
        "type": "Text_excerpt",
        "value": "\nExample:\n```python\n>> single_gene_analysis(functional_states_df, \"path_to_gene_list/gene_list.txt\", distance_metric = funtional_states_distance)\n>> single_gene_analysis(functional_states_df, \"path_to_gene_list/gene_list.txt\", distance_metric = \"hamming\")\n```\n![alt text](https://drive.google.com/uc?export=download&id=1zkj4DhgfR36UiIAM99ohF1byaXojKRNU) \n"
      },
      "source": "https://raw.githubusercontent.com/DEIB-GECO/CombSAFE/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8613847000564105,
      "result": {
        "original_header": "PCA Analysis",
        "type": "Text_excerpt",
        "value": "Example:\n```python\n>> pca_analysis(functional_states_df, 10)\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/DEIB-GECO/CombSAFE/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8486510530653941,
      "result": {
        "original_header": "Genome-wide analysis",
        "type": "Text_excerpt",
        "value": "Example:\n```python\n>> clustered_heatmap = data_driven_heatmap(reducted_df, functional_states_distance, min_clust_size=10, min_sampl=2)\n```\n![alt text](https://drive.google.com/uc?export=download&id=1jbyS_WY54SfJtCWQhw9tpiYW8vC2QJ_Q) \nExample:\n```python\n>> gene_ontology_enrichment_analysis(clustered_heatmap, goea_tool = \"great\", distance_metric=functional_states_distance)\n```\n--- \n"
      },
      "source": "https://raw.githubusercontent.com/DEIB-GECO/CombSAFE/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/DEIB-GECO/CombSAFE/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "big-data-analysis, chromatin-state, epigenetics, semantic-annotation"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021 MicheleRoar\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/DEIB-GECO/CombSAFE/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CombSAFE"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "DEIB-GECO"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 60620,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 7578,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/DEIB-GECO/CombSAFE/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://pygmql.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/DEIB-GECO/CombSAFE/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-04 01:27:23",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ]
}