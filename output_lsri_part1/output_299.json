{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/katholt/srst2"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2013-09-25T02:37:59Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-29T16:25:04Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Short Read Sequence Typing for Bacterial Pathogens"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9235370654509413,
      "result": {
        "original_header": "SRST2",
        "type": "Text_excerpt",
        "value": "This program is designed to take Illumina sequence data, a MLST database and/or a database\nof gene sequences (e.g. resistance genes, virulence genes, etc) and report the presence of\nSTs and/or reference genes. \nAuthors - Michael Inouye, Harriet Dashnow, Bernie Pope, Ryan Wick, Kathryn Holt (University of Melbourne)\n\t\t\nHow to cite - The peer-reviewed open-access paper is available in Genome Medicine: http://genomemedicine.com/content/6/11/90 \nTo be notifed of updates, join the SRST2 google group at https://groups.google.com/forum/#!forum/srst2.\n \n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9341911091675741,
      "result": {
        "original_header": "Updates in current master branch (not yet in a release)",
        "type": "Text_excerpt",
        "value": "1. Added new AMR gene database CARD_v3.0.8_SRST2.fasta, a curated version of CARD v3.0.8 with some fixes and additions based on comparisons with the ARG-Annot, ResFinder and NCBI AMR databases. This was done my Margaret Lam for the Kleborate paper, see details of modifications vs CARD v3.0.8 [here](https://figshare.com/articles/dataset/CARD_v3_0_8_AMR_database_curation_for_Kleborate/13256759)).\n2. Added to readme some instructions for using SRST2 to serotype Group B Streptococcus (S. agalactiae) using the GBS-SBG database, available [here](https://github.com/swainechen/GBS-SBG) - thanks to Swaine Chen and colleagues for this. \nUpdates in v0.2.0 \n1. Some improvements to allele calling, particularly for Klebsiella MLST locus mdh, kindly contributed by [andreyto](https://github.com/andreyto). Includes rejection of read alignments that are clipped on both ends (likely to be spurious) and minor bug fixes associated with depth calculations.\n2. Updated E. coli serotype database to remove duplicate sequences.\n3. Added mcr-2 colistin resistance gene to `ARGannot.r1.fasta` resistance gene database.\n4. A `--threads` option was added, which makes SRST2 call Bowtie and Samtools with their threading options. The resulting speed up is mostly due to the Bowtie mapping step which parallelises very well.\n5. The `VFDB_cdhit_to_csv.py` script was updated to work with the new VFDB FASTA format.\n6. Versions of Bowtie2 up to 2.2.9 are now supported. Samtools v1.3 can now be used as well, however v0.1.18 is still the recommended version (for reasons discussed below).\n7. Added `scripts/qsub_srst2.py` to generate SRST2 jobs for the Grid Engine (qsub) scheduling system (http://gridscheduler.sourceforge.net/). Thanks to Ramon Fallon from the University of St Andrews for putting this together. Some of the specifics are set up for his cluster, so modifications may be necessary to make it run properly on a different cluster using Grid Engine.\n8. Various other small bug fixes! \nUpdates in v0.1.8 \n1. /data directory includes files for subtyping of the LEE pathogenicity island of E. coli, as per [Ingle et al, 2016, Nature Microbiology](http://www.nature.com/articles/nmicrobiol201510). [Instructions below](https://github.com/katholt/srst2#typing-the-lee-pathogenicity-island-of-e-coli)\n2. Resistance gene database updates:\n  * Fixed `ARGannot.r1.fasta` to include proper mcr1 DNA sequence.\n  * Added columns to the `ARGannot_clustered80.csv` table, to indicate classes of beta-lactamases included in the `ARGannot.r1.fasta` database according to the [NCBI beta-lactamase resource](http://www.ncbi.nlm.nih.gov/pathogens/beta-lactamase-data-resources/) (new location for the Lahey list).\n3. Fixed some issues with handling of missing data (i.e. where there were no hits to MLST and/or no hits to genes) when compiling results into a table via `--prev_output`. This could result in misalignment of gene columns in previous versions. \nUpdates in v0.1.7 \n1. Use the following environment variables to specify your prefered samtools and bowtie2 executables (thanks to Ben Taylor for this):\n  * SRST2_SAMTOOLS\n  * SRST2_BOWTIE2\n  * SRST2_BOWTIE2_BUILD\n2. Added mcr1, the plasmid-borne colisting resistance gene to the included ARG-Annot-based resistance gene DB (`ARGannot.r1.fasta`)\n3. Fixed a problem with writing consensus files that occurred when a directory structure was specified using `--output` (bug introduced in v0.1.6) \nUpdates in v0.1.6 \n1. The original validation of SRST2 (see [paper](http://genomemedicine.com/content/6/11/90)) was performed with bowtie2 version 2.1.0 and samtools v0.1.18.\n  * bowtie2: SRST2 has now been tested on the tutorial example and other test data sets using the latest versions of bowtie2, 2.2.3 and 2.2.4, which gave identical results to those obtained with bowtie2 v2.1.0. Therefore, the SRST2 code will now run if any of these versions of bowtie2 are available: 2.1.0, 2.2.3 or 2.2.4. \n  * samtools: SRST2 has now been tested on the Staph & Salmonella test data sets used in the paper, and will work with newer samtools versions (tested up to v1.1). Note however that SRST2 still works best with [samtools v0.1.18](https://sourceforge.net/projects/samtools/files/samtools/0.1.18/), due to small changes in the mapping algorithms in later versions that result in some loss of reads at the ends of alleles. This has most impact at low read depths, however we do recommend using v0.1.18 for optimum results.\n2. Minor fixes to the ARG-Annot database of resistance genes, including removal of duplicate sequences and fixes to gene names (thanks to Wan Yu for this). Old version remains unchanged for backwards compatibility, but we recommend using the revised version (located in `data/ARGannot.r1.fasta`).\n3. Added EcOH database for serotyping E. coli (thanks to Danielle Ingle for this). See [Using the EcOH database for serotyping E. coli with SRST2](https://github.com/katholt/srst2#using-the-ecoh-database-for-serotyping-e-coli-with-srst2) and [this MGen paper](http://mgen.microbiologyresearch.org/content/journal/mgen/10.1099/mgen.0.000064).\n4. Fixed a problem where, when analysing multiple read sets in one SRST2 call against a gene database in which cluster ids don't match gene symbols, individual gene clusters appear multiple times in the output. The compile function was unaffected and remains unchanged.\n5. Fixed behaviour so that including directory paths in `--output` parameter works (thanks to nyunyun for contributing most of this fix). E.g. `--output test_dir/test` will create output files prefixed with `test`, located in `test_dir/`, and all SRST2 functions should work correctly including consensus allele calling. If `test_dir/` doesn't exist, we attempt to create it; if this is not possible the user is alerted and SRST2 stops.\n6. Fixed problem when using a gene database with a simple fasta header (ie not clustered for SRST2; note best results are achieved by pre-clusering your sequence database beforehand) (thanks to cglambert for this one).\n7. Fixes contributed by ppcherng (thanks!): \n  * Fixed KeyErrors that occured when a given seqID was not found in the seq2cluster dictionary, which tended to happen if the FASTA file (gene database) contained empty entries that only have a header and no sequence.\n  * Note v0.1.5 included addition of ppcherng's utility scripts to help automate creation of SRST2-compatible gene databases from VFDB.\n8. Added new parameter `--samtools_args` to pass additional options to samtools mpileup (e.g. SionBayliss requested this in order to use `-A` option in samtools mpileup to include anomalous reads).\n9. Fixed problem with consensus sequence reporting of truncated alleles (issue #39).\n10. Added basic instructions for the R scripts provided for plotting output. See [Plotting output in R](https://github.com/katholt/srst2#plotting-output-in-r) \nUpdates in v0.1.5 \n1. Optionally switch on reporting of pileups and consensus sequences (fasta) for novel alleles (`--report_new_consensus`) or for all alleles (`--report_all_consensus`). See [Printing consensus sequences](https://github.com/katholt/srst2#printing-consensus-sequences)\n2. Post-process consensus sequences from a set of strains, to generate one file per locus containing all/new consensus sequences. See [Collate consensus sequences](https://github.com/katholt/srst2/blob/master/README.md#collate-consensus-sequences-output-by-srst2-run-on-multiple-strains--loci-into-one-file-per-locus)\n3. Some enhancements to getmlst.py script to handle some more unusual scheme names (force download of specific schemes that have non-unique  names, handle forward slashes in names).\n4. Fixed an issue where, if multiple readsets analysed in serial in a SRST2 run, the fullgenes report would only contain the results for the last readset. Fullgenes report now contains gene output for all readsets.\n5. Added option (`--merge_paired`) to accommodate cases where users have multiple read sets for the same sample. If this flag is used, SRST2 will assume that all the input reads belong to the same sample, and outputs will be named as `[prefix]__combined.xxx`, where SRST2 was run using `--output [prefix]`. If the flag is not used, SRST2 will operate as usual and assume that each read pair is a new sample, with output files named as `[prefix]__[sample].xxx`, where [sample] is taken from the base name of the reads fastq files. Note that if you have lots of multi-run read sets to analyse, the ease of job submission will depend heavily on how your files are named and you will need to figure out your own approach to manage this (ie there is no way to submit multiple sets of multiple reads).\n6. The original validation of SRST2 (see [paper](http://genomemedicine.com/content/6/11/90)) was performed with bowtie2 version 2.1.0. SRST2 has now been tested on the tutorial example using the latest versions of bowtie2, 2.2.3 and 2.2.4, which gave identical results to those obtained with bowtie2 v2.1.0. Therefore, the SRST2 code will now run if any of these versions of bowtie2 are available: 2.1.0, 2.2.3 or 2.2.4. (Note however that there are still incompatibilities with the recent release of samtools, so you will need to stick to [samtools v0.1.18](https://sourceforge.net/projects/samtools/files/samtools/0.1.18/) unless you want to modify the SRST2 code to allow later versions, and are happy with a dramatic loss in accuracy!)\n7. Thanks to ppcherng for adding utility scripts to help automate creation of SRST2-compatible gene databases from VFDB. \nUpdates in v0.1.4 \n1. No longer store sam and unsorted bam (can be retained via the `--keep_interim_alignment` flag)\n2. Added options to specify a maximum number of mismatches to allow during mapping; this is specified separately for mlst and genes, so that it is possible to relax the stringency of gene detection in the same run as a high-accuracy MLST test.\n  * `--mlst_max_mismatch`\n  * `--gene_max_mismatch`\n  * Default value for both is 10 mismatches.\n3. The highest minor allele frequency (MAF) of variants encountered in the alignment is now calculated and reported for each allele (in the scores file) and also at the gene level and ST level, to facilitate checking for mixed/contaminated read sets. \nThis value is in the range 0 -> 0.5; with e.g. 0 indicating no variation between reads at any aligned base (i.e. at all positions in the alignment, all aligned reads agree on the same base call; although this agreed base may be different from the reference); and 0.25 indicating there is at least one position in the alignment at which all reads do not agree, and the least common variant (either match or mismatch to the reference) is present in 25% of reads. This value is printed, for all alleles, to the scores file. Note this is different to the \u2018LeastConfident\u2019 information printed to scores, which presents the strongest evidence for mismatch *compared to the reference*, i.e. between 0 -> 1.\nThe highest such value for each gene/cluster/locus is reported in the fullgenes output table.\nThe highest such value across all MLST loci is reported in the mlst output table.\nNote that all compiled reports will now include a maxMAF column; if you provide MLST or compiled reports from previous versions without this columns, the value \u201cNC\u201d will be inserted in the maxMAF column to indicate \u201cnot calculated\u201d. This ensures the updated SRST2 (v0.1.4+) is backwards compatible with previous SRST2 outputs; do be aware though that the older versions of SRST2 (<v0.1.4) will not be forwards-compatible with output generated by more recent versions (v0.14 onwards).\n4. Added R code for plotting SRST2 output in R (plotSRST2data.R). Instructions will be added to the read me.\n5. Added formatted versions of the ARG-Annot resistance gene database, PlasmidFinder database and 18 plasmid replicon sequences to the /data directory. See /data/README.md for details and citations. It is recommended to use `ARGannot.r1.fasta` for detection of acquired resistance genes. \n-----------\n \nUpdates in v0.1.3 \n1. Fixed a bug that occurred while trying to type genes from a user-supplied database (see issue #5, thanks to Scott Long)\n2. Fixed a bug in gene detection reporting - genes are now correctly reported by cluster, rather than by gene symbol (see issue #7)\n3. Added maximum divergence option for reporting (`--max_divergence`), default is now to report only hits with <10% divergence from the database (see issue #8)\n4. added parameter to pass to bowtie2 parameter `-u N` to stop mapping after the first N reads. Default behaviour remains to map all reads. However, for large read sets (e.g. >100x), extra reads do not help and merely increase the time taken for mapping and scoring, and you may want to limit to the first million reads (100x of a 2 Mbp genome) using `--stop_after 1000000`. \n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9901274566363172,
      "result": {
        "original_header": "Input read formats and options",
        "type": "Text_excerpt",
        "value": "Any number of readsets can be provided using `--input_se` (for single end reads) and/or `--input_pe` (for paired end reads). You can provide both types of reads at once. Note however that if you do this, each readset will be typed one by one (in serial). So if it takes 2 minutes to type each read set, and you provide 10 read sets, it will take 20 minutes to get your results. The better way to proces lots of samples quickly is to give each one its own SRST2 job (e.g. submitted simultaneously to your job scheduler or server); then compile the results into a single report using `srst2 --prev_output *results.txt --output all`. That way each readset's 2 minutes of analysis is occurring in parallel on different nodes, and you'll get your results for all 10 samples in 2 minutes rather than 20.\n \n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.919676999149666,
      "result": {
        "original_header": "Read formats",
        "type": "Text_excerpt",
        "value": "Reads can be in any format readable by bowtie2. The format is passed on to the bowtie2 command via the `--read_type` flag in SRST2. The default format is fastq (passed to bowtie 2 as q); other options are qseq=solexa, f=fasta. So to use fasta reads, you would need to tell SRST2 this via `--read_type f`. \n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9794067782528117,
      "result": {
        "original_header": "Read names",
        "type": "Text_excerpt",
        "value": "SRST2 can parse Illumina MiSeq reads files; we assume that files with names in the format `XXX_S1_L001_R1_001.fastq.gz` and `XXX_S1_L001_R2_001.fastq.gz` are the forward and reverse reads from a sample named \"XXX\". So, you can simply use `srst2 --input_pe XXX_S1_L001_R1_001.fastq.gz XXX_S1_L001_R2_001.fastq.gz` and SRST2 will recognise these as forward and reverse reads of a sample named \"XXX\". If you have single rather than paired MiSeq reads, you would use `srst2 --input_se XXX_S1_L001_R1_001.fastq.gz`.\n \n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9908063325359817,
      "result": {
        "original_header": "Paired reads",
        "type": "Text_excerpt",
        "value": "If you have paired reads that are named in some way other than the Illumina MiSeq format, e.g. from the SRA or ENA public databases, you need to tell SRST2 how to pass these to bowtie2.\nbowtie2 requires forward and reverse reads to be supplied in separate files, e.g `strainA_1.fastq.gz` and `strainA_2.fastq.gz`. SRST2 attempts to sort reads supplied via `--input_pe` into read pairs, based on the suffix (_1, _2 in this example) that occurs before the file extension (.fastq.gz in this example). So if you supplied `--input_pe strainA_1.fastq.gz strainB_1.fastq.gz strainA_2.fastq.gz strainB_2.fastq.gz`, SRST2 would sort these into two pairs (`strainA_1.fastq.gz`, `strainA_2.fastq.gz`) and (`strainB_1.fastq.gz`, `strainB_2.fastq.gz`) and pass each pair on to bowtie2 for mapping. By default, the suffixes are assumed to be `_1` for forward reads and `_2` for reverse reads, but you can tell SRST2 if you have other conventions, via `--forward` and `--reverse`. E.g. if your files were named `strainA_read1.fastq.gz` and `strainA_read2.fastq.gz`, you would use these commands: `--input_pe strainA_read1.fastq.gz strainA_read2.fastq.gz --forward _read1 --reverse _read2`. \n \n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8210491595083825,
      "result": {
        "original_header": "Sample names",
        "type": "Text_excerpt",
        "value": "Sample names are taken from the first part of the read file name (before the suffix if you have paired reads). E.g. `strainA_1.fastq.gz` is assumed to belong to a sample called \"strainA\"; `strainB_C_1.fastq.gz` would be assumed to belong to a sample called \"strainB_C\". These sample names will be used to name all output files, and will appear in the results files.\n \n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9558006329628432,
      "result": {
        "original_header": "Allele sequences file, fasta format.",
        "type": "Text_excerpt",
        "value": "This should contain ALL allele sequences for the MLST scheme; i.e. if there are 7 loci in the scheme, then the sequences of all alleles from all 7 loci should appear together in this file. If you have one file per locus, just cat these together first. If you use getmlst.py, this is done for you. \nThe names of the alleles (i.e. the fasta headers) are critical for a functioning MLST scheme and therefore for correct calling of STs. There are two key components to every fasta header: the name of the locus (e.g. in E. coli these are adk, fumC, gyrB, icd, mdh, purA, recA) and the number assigned to the allele (1, 2, 3 etc). These are usually separated by a delimiter like '-' or '_'; e.g. in the E. coli scheme, alleles are named adk-1, fumC-10, etc. For ST calling to work properly, SRST2 needs to know what the delimiter is. By default, we assume it is '-' as this is the most common; however some schemes use '_' (e.g. in the C. difficile scheme, the first allele is 'adk_1', so you would need to set `--mlst_delimiter '_'` on the SRST2 command line). If you use getmlst.py, it will remind you of this and try to guess for you what the most likely delimiter is.\n \n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9556633001470576,
      "result": {
        "original_header": "MLST definitions file, tab delimited format.",
        "type": "Text_excerpt",
        "value": "This is the file that tells you the ST number that is assigned to known combinations of alleles. Column 1 is the ST, and subsequent columns are the loci that make up the scheme. The names of these loci must match the allele names in the sequences database, e.g. adk, fumC, gyrB, icd, mdh, purA, recA in the E. coli scheme. If you download data from pubmlst this should not be a problem. Sometimes there are additional columns in this file, e.g. a column assigning STs to clonal complexes. SRST2 will ignore any columns that don't match gene names found in the allele sequences file.\n \n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9337203476242257,
      "result": {
        "original_header": "Gene databases",
        "type": "Text_excerpt",
        "value": "In addition to MLST, SRST2 can do gene/allele detection. This works by mapping reads to each of the reference sequences in a fasta file(s) (provided through `--gene_db`) and reporting details of all genes that are covered above a certain level (`--min_coverage`, 90% by default).  \nIf the input database contains different alelles of the same gene, SRST2 can report just the best matching allele for that gene (much like with MLST we report the best matching allele for each locus in the scheme). This makes the output manageable, as you will get one column per gene/locus (e.g. blaCTX-M) which reports the specific allele that was called in each sample (e.g. blaCTX-M-15 in sample A, blaCTX-M-13 in sample B). \nWe have provided some databases of resistance genes, plasmid genes, and serotyping for E. coli and Group B Streptococcus (see [Preformatted databases for specialist typing with SRST2](https://github.com/katholt/srst2#preformatted-databases-for-specialist-typing-with-srst2) below for details on using these databases). \nYou can however format any sequence set for screening with SRST2. [See instructions below](https://github.com/katholt/srst2#generating-srst2-compatible-clustered-database-from-raw-sequences).\n \n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9105808266995261,
      "result": {
        "original_header": "MLST results",
        "type": "Text_excerpt",
        "value": "Each locus has a column in which the best scoring allele number is printed.  \n\\* indicates the best scoring allele has >=1 mismatch (SNP or indel, according to majority rules consensus of the aligned reads vs the allele sequence). Details of the mismatches are given in the mismatches column. This often means you have a novel allele.  \n? indicates uncertainty in the result because the best scoring allele has some low-depth bases; either the the first or last 2 bases of the allele had <N reads mapped, or a truncation was called in which neigbhbouring bases were coverd with <N reads, or the average depth across the whole allele was <X. N is set by the parameter `--min_edge_depth` (default 2), X is set by `--min_depth` (default 5). The source of the uncertainty is printed to the uncertainty column.  \nThe *mismatches* column gives details of any mismatches (defined by majority rules consensus of the aligned reads vs the allele sequence) against the top scoring allele that is reported in the corresponding locus column. Possibilities are: (i) snps, adk-1/1snp indicates there was 1 SNP against the adk-1 allele; (ii) indels, adk-1/2indel indicates there were 1 indels (insertion or deletion calls in the alignment); (iii) holes, adk-1/5holes indicates there were 5 sections of the allele sequence that were not covered in the alignment and pileup (e.g. due to truncation at the start or end of the gene, or large deletions within the gene). \nThe *uncertainty* column gives details of parts of the top scoring alleles for which the depth of coverage was too low to give confidence in the result, this may be zero or any number up to the specified cutoff levels set via `--min_edge_depth` and `--min_depth`. Possibilities are considered in this order: (i) edge depth, adk-1/edge1.0 indicates that the mean read depth across either the first 2 or last 2 bases of the assigned allele was 1.0; this is monitored particularly because coverage at the ends of the allele sequences is dependent on bowtie2 to properly map reads that overhang the ends of the allele sequences, which is not as confident as when the whole length of a read maps within the gene (reported if this value is below the cutoff specified (default `--min_edge_depth 2`), low values can be interpreted as indicating uncertainty in the result as we can\u2019t confidently distinguish alleles that differ at these low-covered bases); (ii) truncations, adk-1/del1.0 indicates that a truncation or large deletion was called for which the neighbouring 2 bases were covered to depth 1.0, this can be interpreted as indicating there is only very weak evidence for the deletion, as it is likely just due to random decline in coverage at this point (reported if this value is below the cutoff specified (default `--min_edge_depth 2`); (iii) average depth, adk-1/depth3.5 indicates that the mean read depth across the length of the assigned allele was 3.5 (reported if this value is below the cutoff specified, which by default is `--min_depth 5`) \nThe *depth* column indicates the mean read depth across the length of all alleles which were assigned a top scoring allele number (i.e. excluding any which are recorded as '-'). So if there are 7 loci with alleles called, this number represents the mean read depth across those 7 loci. If say, 2 of the 7 alleles were not called (recorded as \u2018-\u2019), the mean depth is that of the 5 loci that were called. \nThe *maxMAF* column reports the highest minor allele frequency (MAF) of variants encountered across the MLST locus alignments. This value is in the range 0 -> 0.5; with e.g. 0 indicating no variation between reads at any aligned base (i.e. at all positions in the alignment, all aligned reads agree on the same base call; although this agreed base may be different from the reference); and 0.25 indicating there is at least one position in the alignment at which all reads do not agree, and the least common variant (either match or mismatch to the reference) is present in 25% of reads. This value is printed, for all alleles, to the scores file; in the MLST file, the value reported is the highest MAF encountered across the MLST loci. \n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9107853149980994,
      "result": {
        "original_header": "Gene typing",
        "type": "Text_excerpt",
        "value": "*coverage* indicates the % of the gene length that was covered (if clustered DB, then this is the highest coverage of any members of the cluster) \n*uncertainty* is as above \n? indicates uncertainty due to low depth in some parts of the gene \n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9646560443658911,
      "result": {
        "original_header": "Combined results",
        "type": "Text_excerpt",
        "value": "If more then one database is provided for typing (via `--mlst_db` and/or `--gene_db`), or if previous results are provided for merging with the current run which contain data from >1 database (via `--prev_output`), then an additional table summarizing all the database results is produced. This is named `[outputprefix]__compiledResults.txt` and is a combination of the MLST style table plus the tabulated gene summary (file 2 above). \n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9941384620321415,
      "result": {
        "original_header": "Mapping results",
        "type": "Text_excerpt",
        "value": "The bowtie2 alignment of reads to each input database is stored in `[outputprefix]__[sample].[db].sorted.bam` and the samtools pileup of the alignment is stored in `[outputprefix]__[sample].[db].pileup`.  \nIf you used `--save_scores`, a table of scores for each allele in the database is printed to `[outputprefix]__[sample].[db].scores`. \n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.891304590356244,
      "result": {
        "original_header": "Printing consensus sequences",
        "type": "Text_excerpt",
        "value": "SRST2 can optionally report consensus sequences & pileups for novel alleles, or for all alleles. Note that only SNPs are included in the consensus fasta sequence as these can be reliably extracted from the read alignments; if there are indels (reported in the output tables) these will not be included in the consensus fasta file and we suggest you assembly the mapped reads (these are in the bam file). \n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9248900989497202,
      "result": {
        "original_header": "More basic usage examples",
        "type": "Text_excerpt",
        "value": "Reference indexing - SRST2 uses bowtie2 for mapping reads to reference sequences. To do this, SRST2 must first check the index exists, call `bowtie2-build` to generate the index if it doesn't already exist, and then call bowtie2 to map the reads to this indexed reference. Occasionallly bowtie2 will return an Error message saying that it doesn't like the index. This seems to be due to the fact that if you submit multiple SRST2 jobs to a cluster at the same time, they will all test for the presence of the index and, if index files are present, will proceed with mapping... but this doesn't mean the indexing process is actually finished, and so errors will arise.  \nThe simple way out of this is, if you are running lots of SRST2 jobs, FIRST index your reference(s) for bowtie2 and samtools (using `bowtie2-build ref.fasta ref.fasta` and `samtools faidx ref.fasta`), then submit your SRST2 jobs. The slurm_srst2.py script takes care of this for you by formatting the databases before submitting any SRST2 jobs. \nTo do this properly, SRST2 needs to know which of the reference sequences are alleles of the same gene. This is done by adhering to the following format in the naming of the sequences (i.e. the headers in the fasta sequence for the database):\n```\n>[clusterUniqueIdentifier]__[clusterSymbol]__[alleleSymbol]__[alleleUniqueIdentifier]\n```\ne.g. in the resistance gene database provided, the first entry is:\n```\n>344__blaOXA__blaOXA-181__1\n```\n \nclusterUniqueIdentifier = 344;  unique identifier for this cluster (uniquely identifes the cluster)\nclusterSymbol = blaOXA;  gene symbol for this cluster (may be shared by multiple clusters)\nalleleSymbol = blaOXA-181;  full name of this allele\nalleleUniqueIdentifier = 1;  uniquely identifies the sequence \nIdeally the alleleSymbol would be unique (as it is in the `reference.fasta` file provided). However it doesn't have to be: if allele symbols are not unique, then SRST2 will use the combination `[alleleSymbol]__[alleleUniqueIdentifier]` to  uniquely identify the sequence in the resulting reports, so that you can trace exactly which sequence was present in each sample. \ne.g. for the blaOXA sequence above, the full header is actually: \nTo get started, we have provided databases for resistance genes, plasmid genes, and serotyping for E. coli and Group B Streptococcus (see [Preformatted databases for specialist typing with SRST2](https://github.com/katholt/srst2#preformatted-databases-for-specialist-typing-with-srst2); and code (`database_clustering/`) to extract virulence factors for a genus of interest from the Virulence Factor DB (detailed instructions below). \nIf you want to use your own database of allele sequences, with the reporting behaviour described, you will need to assign your sequences to clusters and use this header format. To facilitate this, use the scripts provided in the database_clustering directory provided with SRST2, and follow the instructions below. \n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9887179913478626,
      "result": {
        "original_header": "Sourcing suitable gene databases",
        "type": "Text_excerpt",
        "value": "You can also use unclustered sequences. This is perfectly fine for gene detection applications, where you have one representative allele sequence for each gene, and you simply want to know which samples contain a sequence that is similar to this one (e.g. detecting plasmid replicons, where there is one target sequence per replicon). However, this won't work well for allele typing. If the sequence database contains multiple allele sequences for the same gene, then all of these that are covered above the length threshold (default 90%) will be reported in the output, which makes for messy reporting. If you do this, you would probably find it most useful to look at the full gene results table rather than looking at the compiled results output.\n \n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9069918794904043,
      "result": {
        "original_header": "More basic usage examples",
        "type": "Text_excerpt",
        "value": "If you have the sequences as a column in the table, specify which column they are in using `-s`:\n```\ncsv_to_gene_db.py -t genes.csv -o genes.fasta -s 5\n```\nAlternatively, if you have sequences in a separate fasta file, you can provide this file via `-f`. You will also need to have a column in the table that links the rows to unique sequences, specify which column this is using `-c`:\n```\ncsv_to_gene_db.py -t genes.csv -o genes.fasta -f rawseqs.fasta -c 5\n```\n \n1 - Run CD-HIT to cluster the sequences at 90% nucleotide identity:\n```\ncdhit-est -i rawseqs.fasta -o rawseqs_cdhit90 -d 0 > rawseqs_cdhit90.stdout\n```\n2 - Parse the cluster output and tabulate the results, check for inconsistencies between gene names and the sequence clusters, and generate individual fasta files for each cluster to facilitate further checking:\n```\npython cdhit_to_csv.py --cluster_file rawseqs_cdhit90.clstr --infasta raw_sequences.fasta --outfile rawseqs_clustered.csv\n```\n \nFor comparing gene names to cluster assignments, this script assumes very basic nomenclature of the form gene-allele, ie a gene symbol followed by '-' followed by some more specific allele designation. E.g. adk-1, blaCTX-M-15. The full name of the gene (adk-1, blaCTX-M-15) will be stored as the allele, and the bit before the '-' will be stored as the name of the gene cluster (adk, blaCTX). This won't always give you exactly what you want, because there really are no standards for gene nomenclature! But it will work for many cases, and you can always modify the script if you need to parse names in a different way. Note though that this only affects how sensible the gene cluster nomenclature is going to be in your srst2 results, and will not affect the behaviour of the clustering (which is purely sequence based using cdhit) or srst2 (which will assign a top scoring allele per cluster, the cluster name may not be perfect but the full allele name will always be reported anyway). \n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9134095177472247,
      "result": {
        "original_header": "Clustering sequences",
        "type": "Text_excerpt",
        "value": "If there are potential inconsistencies detected at step 2 above (e.g. multiple clusters for the same gene, or different gene names within the same cluster), you may like to investigate further and change some of the cluster assignments or cluster names. You may find it useful to generate neighbour joining trees for each cluster that contains >2 genes, using align_plot_tree_min3.py\n \n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9946068931709675,
      "result": {
        "original_header": "Screening for resistance genes with SRST2",
        "type": "Text_excerpt",
        "value": "A database of resistance genes CARD v3.0.8 is included with SRST2: `data/CARD_v3.0.8_SRST2.fasta`. The fasta file is ready for use with SRST2. The CSV table /data/CARD_v3.0.8_clustered.csv contains the same sequence information, but in tabular format for easier parsing/editing. \n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9479229287564701,
      "result": {
        "original_header": "More basic usage examples",
        "type": "Text_excerpt",
        "value": "An easy way to add sequences to this database would be to add new rows to the table, and then generate an updated fasta file using:\n```\ncsv_to_gene_db.py -t rawseqs_clustered.csv -o seqs_clustered.fasta -s rawseqs.fasta -c 5\n```\n \nThe VFDB houses sets of virulence genes for a range of bacterial genera, see http://www.mgc.ac.cn/VFs/. \nTo type these virulence genes using SRST2, download the full set of sequences from the VFDB website (http://www.mgc.ac.cn/VFs/Down/VFDB_setB_nt.fas.gz) and follow these steps to generate SRST2-compatible files for your genus of interest. \nThe EcOH database includes genes for identifying O and H types in E. coli, see `/data/EcOH.fasta` \nO types are represented by the presence of two loci (either wzx and wzy, or wzm and wzt). Note that allelic variation is possible but does not impact serotype in a predictable way, so typing calls should be made based on the presence of genes rather than allele assignments (i.e. it is generally safe to ignore *? characters) \n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.981643562928084,
      "result": {
        "original_header": "Using the EcOH database for serotyping E. coli with SRST2",
        "type": "Text_excerpt",
        "value": "H types are represented by alleles of fliC or flnA flagellin genes (one allele per H type). Note that it is possible to carry both a fliC allele and a flnA allele, such strains should be considered phase variable for flagellin).\n \n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.948599554639194,
      "result": {
        "original_header": "More basic usage examples",
        "type": "Text_excerpt",
        "value": "ERR178148 has matching wzx and wzy hits for O131, and fliC allele H31, thus the predicted serotype is O131:H31.  \nERR178156 has matching wzm and wzt hits for O9 and fliC allele H33, thus the predicted serotype is O9:H33.  \nNote that each O antigen type is associated with loci containing EITHER wzx and wzy, OR wzm and wzt genes. \nNo alleles for flnA were detected in these strains, indicating they are not phase variable for flagellin. \n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9919779512516232,
      "result": {
        "original_header": "Using the GBS-SBG database for serotyping Streptococcus agalactiae (Group B Streptococcus) with SRST2",
        "type": "Text_excerpt",
        "value": "Details can be found in this [preprint](https://doi.org/10.1101/2021.06.16.448630). The database and a script for typing using assemblies can be found in the [GBS-SBG GitHub repository](https://github.com/swainechen/GBS-SBG). The [fasta database](https://raw.githubusercontent.com/swainechen/GBS-SBG/main/GBS-SBG.fasta) itself is already properly formatted for SRST2 and this is all that's needed for SRST2 to type using short reads.\n \n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9514498707967229,
      "result": {
        "original_header": "More basic usage examples",
        "type": "Text_excerpt",
        "value": "The LEE typing database is based on analysis of >250 LEE-containing E. coli genomes and includes 7 loci (eae (i.e. intimin), tir, espA, espB, espD, espH, espZ). The data is provided as a MLST-style database, in which combinations of alleles are assigned to a LEE subtype, to facilitate a common nomenclature for LEE subtypes. However please note the database does not contain every known allele and is not intended to function as a typical MLST scheme. Rather, each sequence in the database represents a cluster of closely related alleles that have been assigned to the same locus type. So you will generally not get precise matches to a known allele, and this is not something to worry about - the goal is to identify the locus type and the overall LEE subtype.  \nAlso note that the LEE scheme includes three distinct lineages: Lineage 1 consists of LEE subtypes 1-2; Lineage 2 consists of LEE subtypes 3-8; Lineage 3 consists of LEE subtypes 9-30. See the paper for more details.  \n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8779561955727065,
      "result": {
        "original_header": "Typing the LEE pathogenicity island of E. coli",
        "type": "Text_excerpt",
        "value": "The database files (sequences + MLST-style profile definitions) are in the SRST2 distribution under /data.\n \n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9873021270176844,
      "result": {
        "original_header": "More basic usage examples",
        "type": "Text_excerpt",
        "value": "Example usage:\n```\n# load the functions in R\nsource(\"srst2/scripts/plotSRST2data.R\")\n\n1. EXAMPLE FROM FIGURE 8A (http://www.genomemedicine.com/content/6/11/90/figure/F8): viewing resistance genes in individual strains that have been analysed for MLST + resistance genes\n\n# read in a compiled MLST + genes table output by SRST2\nEf_JAMA<-read.delim(\"srst2/data/EfaeciumJAMA__compiledResults.txt\", stringsAsFactors = F)\n\n# Check column names. Sample names are in column 1 (strain_names=1 in the function call below), MLST data is in columns 2 to 9 (mlst_columns = 2:9), while gene presence/absence information is recorded in columns 13 to 31 (gene_columns = 13:31). \n\ncolnames(Ef_JAMA)\n [1] \"Sample\"         \"ST\"             \"AtpA\"           \"Ddl\"            \"Gdh\"            \"PurK\"          \n [7] \"Gyd\"            \"PstS\"           \"Adk\"            \"mismatches\"     \"uncertainty\"    \"depth\"         \n[13] \"Aac6.Aph2_AGly\" \"Aac6.Ii_AGly\"   \"Ant6.Ia_AGly\"   \"Aph3.III_AGly\"  \"Dfr_Tmt\"        \"ErmB_MLS\"      \n[19] \"ErmC_MLS\"       \"MsrC_MLS\"       \"Sat4A_AGly\"     \"TetL_Tet\"       \"TetM_Tet\"       \"TetU_Tet\"      \n[25] \"VanA_Gly\"       \"VanH.Pt_Gly\"    \"VanR.A_Gly\"     \"VanS.A_Gly\"     \"VanX.M_Gly\"     \"VanY.A_Gly\"    \n[31] \"VanZ.A_Gly\"    \n\n# Make a tree based on the MLST loci, and plot gene content as a matrix. \n# cluster=T turns on hierarchical clustering of the columns (=genes); labelHeight, infoWidth and treeWidth control the relative dimensions of the plotting areas available for the tree, printed MLST information, and gene labels.\n\ngeneContentPlot(m=Ef_JAMA, mlst_columns = 2:9, gene_columns = 13:31, strain_names=1, cluster=T, labelHeight=40, infoWidth=15, treeWidth=5)\n\n2. EXAMPLE FROM FIGURE 7C (http://www.genomemedicine.com/content/6/11/90/figure/F7): viewing summaries of resistance genes by ST, in a set of isolates that have been analysed for MLST + resistance genes\n\n# read in a compiled MLST + genes table output by SRST2\nEf_Howden<-read.delim(\"srst2/data/EfaeciumHowden__compiledResults.txt\", stringsAsFactors = F)\n\n# Make a tree of STs based on the MLST alleles and plot this; Group isolates by ST and calculate the number of strains in each ST that contain each resistance gene;  plot these counts as a heatmap. Note that barplots of the number of strains in each ST are also plotted to the right.\ngeneSTplot(d,mlst_columns=8:15,gene_columns=17:59,plot_type=\"count\",cluster=T)\n\n# Same as above but plot the rate of detection of each gene within each ST, not the raw counts\ngeneSTplot(d,mlst_columns=8:15,gene_columns=17:59,plot_type=\"rate\",cluster=T)\n\n# To suppress SNPs, i.e. collapse ST1 and ST1* into a single group for summarisation at the clonal complex level, set suppressSNPs=T.\n\n# To suppress uncertainty due to low depth, i.e. collapse ST1 and ST1? into a single group for summarisation at the clonal complex level, set suppressUncertainty=T.\n```\n \nNote, heatmap colours can be set via the `matrix.colours` parameter in both of these functions. The default value is matrix.colours=colorRampPalette(c(\"white\",\"yellow\",\"blue\"),space=\"rgb\")(100), i.e. white=0% gene frequency, yellow = 50% and blue = 100%.\n \n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/katholt/srst2/wiki"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/katholt/srst2/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "faq": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running lots of jobs and compiling results",
        "type": "Text_excerpt",
        "value": "Run against multiple read sets: submitting 1 job per readset to SLURM queueing system.\n\n```\nslurm_srst2.py --script srst2 \n\t--output test \n\t--input_pe *.fastq.gz \n\t--other_args '--gene_db CARD_v3.0.8_SRST2.fasta \n\t--mlst_db Escherichia_coli.fasta \n\t--mlst_definitions ecoli.txt \n\t--save_scores' \n\t--walltime 0-1:0 \n\t\t> job_sub_list.txt\n```\n\t\t\nThe results from all the separate runs can then be compiled together using:\t\t\n\n```\nsrst2 --prev_output *compiledResults.txt --output Shigella_report\n```\n\n------------\n\nSLURM job script usage options\n\n```\nslurm_srst2.py -h\n\noptional arguments:\n  -h, --help            show this help message and exit\n  \n  --walltime WALLTIME   wall time (default 0-0:30 = 30 minutes)\n  \n  --memory MEMORY       mem (default 4096 = 4gb)\n  \n  --rundir RUNDIR       directory to run in (default current dir)\n  \n  --script SCRIPT       SRST2 script (/path/to/srst2_150\n                        9_reporting2.py)\n                        \n  --output OUTPUT       identifier for outputs (will be combined with read set\n                        identifiers)\n                        \n  --input_se INPUT_SE [INPUT_SE ...]\n                        Single end read file(s) for analysing (may be gzipped)\n                        \n  --input_pe INPUT_PE [INPUT_PE ...]\n                        Paired end read files for analysing (may be gzipped)\n                        \n  --forward FORWARD     Designator for forward reads (only used if NOT in\n                        MiSeq format sample_S1_L001_R1_001.fastq.gz; otherwise\n                        default is _1, i.e. expect forward reads as\n                        sample_1.fastq.gz)\n                        \n  --reverse REVERSE     Designator for reverse reads (only used if NOT in\n                        MiSeq format sample_S1_L001_R2_001.fastq.gz; otherwise\n                        default is _2, i.e. expect forward reads as\n                        sample_2.fastq.gz)\n                        \n  --other_args OTHER_ARGS\n                        string containing all other arguments to pass to srst2\n```\n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 65
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/katholt/srst2/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "katholt/srst2"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SRST2"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/katholt/srst2/master/database_clustering/get_all_vfdb.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/katholt/srst2/master/database_clustering/get_genus_vfdb.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "1 - Install dependencies",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "* python (v2.7.5)\n* scipy http://www.scipy.org/install.html\n* bowtie2 v2.1.0 http://bowtie-bio.sourceforge.net/bowtie2/index.shtml\n* SAMtools v0.1.18 https://sourceforge.net/projects/samtools/files/samtools/0.1.18/ (NOTE 0.1.19 DOES NOT WORK)\n\nN.B. If you have multiple versions of samtools or bowtie2 installed, you can pick which one `srst2` or `slurm_srst2` should use by setting the following environment variables.\n\n* `SRST2_SAMTOOLS`\n* `SRST2_BOWTIE2`\n* `SRST2_BOWTIE2_BUILD`\n\nIf these aren't set or are missing, they will default to looking in your `PATH` for `samtools`, `bowtie2` and `bowtie2-build`. The exception is `SRST2_BOWTIE2_BUILD` which, if it is not set or missing, will try adding `-build` to `SRST2_BOWTIE2` if it exists, otherwise it defaults to looking in your `PATH`\n\n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2 - Get and install the code",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Make sure you have installed [git](https://help.github.com/articles/set-up-git) and [pip](http://www.pip-installer.org/).\n\nClone the git repository: `git clone https://github.com/katholt/srst2`\n\nand then install with pip: `pip install srst2/`\n\nOR do both at once: `sudo pip install git+https://github.com/katholt/srst2`\n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3 - Test that the programs are installed properly",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "```\nsrst2 --version\ngetmlst.py -h\nslurm_srst2.py -h\n```\n\nThe downloaded directory also contains things that might be useful for SRST2 users:\n\n* `data/` contains a databases for resistance genes and plasmids\n* `database_clustering/` contains scripts and instructions for formatting of other gene databases for use with SRST2\n* [example.txt](example.txt) contains a tutorial/example on running SRST2 using public data \n\n\n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "If you have multiple read sets for the same sample",
        "parent_header": [
          "Input read formats and options"
        ],
        "type": "Text_excerpt",
        "value": "The flag `--merge_paired` tells SRST2 to assume that all the input reads belong to the same sample. Outputs will be named as `[prefix]__combined.xxx`, where SRST2 was run using `--output [prefix]`. If this flag is not used, SRST2 will operate as usual and assume that each read pair is a new sample, with output files named as `[prefix]__[sample].xxx`, where [sample] is taken from the base name of the reads fastq files. Note that if you have lots of multi-run read sets to analyse, the ease of job submission will depend heavily on how your files are named and you will need to figure out your own approach to manage this (ie there is no way to submit multiple sets of multiple reads).\n\n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9562750370613246,
      "result": {
        "original_header": "SRST2",
        "type": "Text_excerpt",
        "value": "Story-behind-the-paper is [here](http://holtlab.net/2014/12/27/behind-the-paper-srst2-for-short-read-sequence-typing-of-bacterial-pathogens/)\n\t\t\nProblems? Please post an issue here in github: https://github.com/katholt/srst2/issues. \n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999999999954525,
      "result": {
        "original_header": "Current release - v0.2.0 - July 28, 2016",
        "type": "Text_excerpt",
        "value": "Dependencies:\n* python (v2.7.5 or later)\n* scipy, numpy   http://www.scipy.org/install.html\n* bowtie2 (v2.1.0 or later)   http://bowtie-bio.sourceforge.net/bowtie2/index.shtml\n* SAMtools v0.1.18   https://sourceforge.net/projects/samtools/files/samtools/0.1.18/ (NOTE: later versions can be used, but better results are obtained with v0.1.18, especially at low read depths (<20x)) \n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8056321858371607,
      "result": {
        "original_header": "Updates in current master branch (not yet in a release)",
        "type": "Text_excerpt",
        "value": "Updates in v0.2.0 \nUpdates in v0.1.8 \nUpdates in v0.1.7 \n1. Use the following environment variables to specify your prefered samtools and bowtie2 executables (thanks to Ben Taylor for this):\n  * SRST2_SAMTOOLS\n  * SRST2_BOWTIE2\n  * SRST2_BOWTIE2_BUILD\n2. Added mcr1, the plasmid-borne colisting resistance gene to the included ARG-Annot-based resistance gene DB (`ARGannot.r1.fasta`)\n3. Fixed a problem with writing consensus files that occurred when a directory structure was specified using `--output` (bug introduced in v0.1.6) \nUpdates in v0.1.6 \nUpdates in v0.1.5 \nUpdates in v0.1.4 \n-----------\n \nUpdates in v0.1.3 \n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8673450574428289,
      "result": {
        "original_header": "Read names",
        "type": "Text_excerpt",
        "value": "SRST2 can parse Illumina MiSeq reads files; we assume that files with names in the format `XXX_S1_L001_R1_001.fastq.gz` and `XXX_S1_L001_R2_001.fastq.gz` are the forward and reverse reads from a sample named \"XXX\". So, you can simply use `srst2 --input_pe XXX_S1_L001_R1_001.fastq.gz XXX_S1_L001_R2_001.fastq.gz` and SRST2 will recognise these as forward and reverse reads of a sample named \"XXX\". If you have single rather than paired MiSeq reads, you would use `srst2 --input_se XXX_S1_L001_R1_001.fastq.gz`.\n \n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999999934185553,
      "result": {
        "original_header": "Paired reads",
        "type": "Text_excerpt",
        "value": "If you have paired reads that are named in some way other than the Illumina MiSeq format, e.g. from the SRA or ENA public databases, you need to tell SRST2 how to pass these to bowtie2.\nbowtie2 requires forward and reverse reads to be supplied in separate files, e.g `strainA_1.fastq.gz` and `strainA_2.fastq.gz`. SRST2 attempts to sort reads supplied via `--input_pe` into read pairs, based on the suffix (_1, _2 in this example) that occurs before the file extension (.fastq.gz in this example). So if you supplied `--input_pe strainA_1.fastq.gz strainB_1.fastq.gz strainA_2.fastq.gz strainB_2.fastq.gz`, SRST2 would sort these into two pairs (`strainA_1.fastq.gz`, `strainA_2.fastq.gz`) and (`strainB_1.fastq.gz`, `strainB_2.fastq.gz`) and pass each pair on to bowtie2 for mapping. By default, the suffixes are assumed to be `_1` for forward reads and `_2` for reverse reads, but you can tell SRST2 if you have other conventions, via `--forward` and `--reverse`. E.g. if your files were named `strainA_read1.fastq.gz` and `strainA_read2.fastq.gz`, you would use these commands: `--input_pe strainA_read1.fastq.gz strainA_read2.fastq.gz --forward _read1 --reverse _read2`. \n \n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9984626287361537,
      "result": {
        "original_header": "MLST Database format",
        "type": "Text_excerpt",
        "value": "MLST databases are specified by allele sequences, and a profiles table. These can be downloaded from the public databases, ready to use with SRST2, using the provided script getmlst.py (see above).\n \n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9704270117658329,
      "result": {
        "original_header": "MLST results",
        "type": "Text_excerpt",
        "value": "If MLST sequences and profiles were provided, STs will be printed in tab-delim format to a file called `[outputprefix]__mlst__[db]__results.txt`, e.g.: `strainArun1__mlst__Escherichia_coli__results.txt`. \n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9349225474592722,
      "result": {
        "original_header": "Gene typing",
        "type": "Text_excerpt",
        "value": "1 - A detailed report, `[outputprefix]__fullgenes__[db]__results.txt`, with one row per gene per sample: \n2 - A tabulated summary report of samples x genes, `[outputprefix]__genes__[db]__results.txt`: \n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.978350897211612,
      "result": {
        "original_header": "More basic usage examples",
        "type": "Text_excerpt",
        "value": "If you want to use your own database of allele sequences, with the reporting behaviour described, you will need to assign your sequences to clusters and use this header format. To facilitate this, use the scripts provided in the database_clustering directory provided with SRST2, and follow the instructions below. \nwhich will be used to make headers of the required form `[clusterID]__[gene]__[allele]__[seqID] [other stuff]` \nIf you have the sequences as a column in the table, specify which column they are in using `-s`:\n```\ncsv_to_gene_db.py -t genes.csv -o genes.fasta -s 5\n```\nAlternatively, if you have sequences in a separate fasta file, you can provide this file via `-f`. You will also need to have a column in the table that links the rows to unique sequences, specify which column this is using `-c`:\n```\ncsv_to_gene_db.py -t genes.csv -o genes.fasta -f rawseqs.fasta -c 5\n```\n \nIf your sequences are not already assigned to gene clusters, you can do this automatically using CD-HIT (http://weizhong-lab.ucsd.edu/cd-hit/). \nThe output file, `seqs_clustered.fasta`, should now be ready to use with srst2 (`--gene_db seqs_clustered.fasta`). \nTo type these virulence genes using SRST2, download the full set of sequences from the VFDB website (http://www.mgc.ac.cn/VFs/Down/VFDB_setB_nt.fas.gz) and follow these steps to generate SRST2-compatible files for your genus of interest. \n1 - Extract virulence genes by genus from the main VFDB file, `CP_VFs.ffn`:\n```\npython VFDBgenus.py --infile CP_VFs.ffn --genus Clostridium\n```\nor, to get all availabel genera in separate files:\n```\npython VFDBgenus.py --infile CP_VFs.ffn\n```\n2 - Run CD-HIT to cluster the sequences for this genus, at 90% nucleotide identity:\n```\ncd-hit -i Clostridium.fsa -o Clostridium_cdhit90 -c 0.9 > Clostridium_cdhit90.stdout\n```\n3 - Parse the cluster output and tabulate the results using the specific Virulence gene DB compatible script:\n```\npython VFDB_cdhit_to_csv.py --cluster_file Clostridium_cdhit90.clstr --infile Clostridium.fsa --outfile Clostridium_cdhit90.csv\n```\n4 - Convert the resulting csv table to a SRST2-compatible sequence database using:\n```\npython csv_to_gene_db.py -t Clostridium_cdhit90.csv -o Clostridium_VF_clustered.fasta -s 5\n```\n    \nThe output file, `Clostridium_VF_clustered.fasta`, should now be ready to use with srst2 (`--gene_db Clostridium_VF_clustered.fasta`).\n \nThese functions require the `ape` package to be installed. \n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.9002258466331585,
      "result": {
        "original_header": "More basic usage examples",
        "type": "Text_excerpt",
        "value": "Use this info to generate the appropriate headers for SRST2 to read. The provided script `csv_to_gene_db.py` can help:\n```\ncsv_to_gene_db.py -h\n\nUsage: csv_to_gene_db.py [options]\n\nOptions:\n\n  -h, --help            show this help message and exit\n  \n  -t TABLE_FILE, --table=TABLE_FILE\n                        table to read (csv)\n                        \n  -o OUTPUT_FILE, --out=OUTPUT_FILE\n                        output file (fasta)\n                        \n  -s SEQ_COL, --seq_col=SEQ_COL\n                        column number containing sequences\n                        \n  -f FASTA_FILE, --fasta=FASTA_FILE\n                        fasta file to read sequences from (must specify which\n                        column in the table contains the sequence names that\n                        match the fasta file headers)\n                        \n  -c HEADERS_COL, --headers_col=HEADERS_COL\n                        column number that contains the sequence names that\n                        match the fasta file headers\n```\n \n3 - Convert the resulting csv table to a sequence database using:\n```\ncsv_to_gene_db.py -t rawseqs_clustered.csv -o seqs_clustered.fasta -f rawseqs.fasta -c 4\n```\n \n1 - Extract virulence genes by genus from the main VFDB file, `CP_VFs.ffn`:\n```\npython VFDBgenus.py --infile CP_VFs.ffn --genus Clostridium\n```\nor, to get all availabel genera in separate files:\n```\npython VFDBgenus.py --infile CP_VFs.ffn\n```\n2 - Run CD-HIT to cluster the sequences for this genus, at 90% nucleotide identity:\n```\ncd-hit -i Clostridium.fsa -o Clostridium_cdhit90 -c 0.9 > Clostridium_cdhit90.stdout\n```\n3 - Parse the cluster output and tabulate the results using the specific Virulence gene DB compatible script:\n```\npython VFDB_cdhit_to_csv.py --cluster_file Clostridium_cdhit90.clstr --infile Clostridium.fsa --outfile Clostridium_cdhit90.csv\n```\n4 - Convert the resulting csv table to a SRST2-compatible sequence database using:\n```\npython csv_to_gene_db.py -t Clostridium_cdhit90.csv -o Clostridium_VF_clustered.fasta -s 5\n```\n    \nThe output file, `Clostridium_VF_clustered.fasta`, should now be ready to use with srst2 (`--gene_db Clostridium_VF_clustered.fasta`).\n \n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/katholt/srst2/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "srst2"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "katholt"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 151900,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 10543,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 3348,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/katholt/srst2/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "rrwick",
          "type": "User"
        },
        "date_created": "2016-07-30T05:14:00Z",
        "date_published": "2016-07-30T05:18:17Z",
        "description": "Updates in v0.2.0\n1. Some improvements to allele calling, particularly for Klebsiella MLST locus mdh, kindly contributed by [andreyto](https://github.com/andreyto). Includes rejection of read alignments that are clipped on both ends (likely to be spurious) and minor bug fixes associated with depth calculations.\n2. Updated E. coli serotype database to remove duplicate sequences.\n3. Added mcr-2 colistin resistance gene to `ARGannot.r1.fasta` resistance gene database.\n4. A `--threads` option was added, which makes SRST2 call Bowtie and Samtools with their threading options. The resulting speed up is mostly due to the Bowtie mapping step which parallelises very well.\n5. The `VFDB_cdhit_to_csv.py` script was updated to work with the new VFDB FASTA format.\n6. Versions of Bowtie2 up to 2.2.9 are now supported. Samtools v1.3 can now be used as well, however v0.1.18 is still the recommended version (for reasons discussed below).\n7. Added `scripts/qsub_srst2.py` to generate SRST2 jobs for the Grid Engine (qsub) scheduling system (http://gridscheduler.sourceforge.net/). Thanks to Ramon Fallon from the University of St Andrews for putting this together. Some of the specifics are set up for his cluster, so modifications may be necessary to make it run properly on a different cluster using Grid Engine.\n8. Various other small bug fixes!\n",
        "html_url": "https://github.com/katholt/srst2/releases/tag/v0.2.0",
        "name": "SRST2 v0.2.0 - Short Read Sequence Typing for Bacterial Pathogens",
        "release_id": 3775372,
        "tag": "v0.2.0",
        "tarball_url": "https://api.github.com/repos/katholt/srst2/tarball/v0.2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/katholt/srst2/releases/3775372",
        "value": "https://api.github.com/repos/katholt/srst2/releases/3775372",
        "zipball_url": "https://api.github.com/repos/katholt/srst2/zipball/v0.2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "katholt",
          "type": "User"
        },
        "date_created": "2016-03-15T02:56:27Z",
        "date_published": "2016-03-15T02:57:41Z",
        "description": "Updates in v0.1.8\n\n/data directory includes files for subtyping of the LEE pathogenicity island of E. coli, as per Ingle et al, 2016, Nature Microbiology. Instructions below\n\nResistance gene database updates:\n\nFixed ARGannot.r1.fasta to include proper mcr1 DNA sequence.\nAdded columns to the ARGannot_clustered80.csv table, to indicate classes of beta-lactamases included in the ARGannot.r1.fasta database according to the NCBI beta-lactamase resource (new location for the Lahey list).\n\nFixed some issues with handling of missing data (i.e. where there were no hits to MLST and/or no hits to genes) when compiling results into a table via --prev_output. This could result in misalignment of gene columns in previous versions.\n",
        "html_url": "https://github.com/katholt/srst2/releases/tag/v0.1.8",
        "name": "SRST2 v0.1.8 - Short Read Sequence Typing for Bacterial Pathogens",
        "release_id": 2811894,
        "tag": "v0.1.8",
        "tarball_url": "https://api.github.com/repos/katholt/srst2/tarball/v0.1.8",
        "type": "Release",
        "url": "https://api.github.com/repos/katholt/srst2/releases/2811894",
        "value": "https://api.github.com/repos/katholt/srst2/releases/2811894",
        "zipball_url": "https://api.github.com/repos/katholt/srst2/zipball/v0.1.8"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "katholt",
          "type": "User"
        },
        "date_created": "2016-01-12T05:48:26Z",
        "date_published": "2016-01-12T05:48:44Z",
        "description": "Updates in v0.1.7\n1. Use the following environment variables to specify your prefered samtools and bowtie2 executables (thanks to Ben Taylor for this):\n- SRST2_SAMTOOLS\n- SRST2_BOWTIE2\n- SRST2_BOWTIE2_BUILD\n1. Added mcr1, the plasmid-borne colisting resistance gene to the included ARG-Annot-based resistance gene DB (ARGannot.r1.fasta)\n2. Fixed a problem with writing consensus files that occurred when a directory structure was specified using --output (bug introduced in v0.1.6)\n",
        "html_url": "https://github.com/katholt/srst2/releases/tag/v0.1.7",
        "name": "SRST2 v0.1.7 - Short Read Sequence Typing for Bacterial Pathogens",
        "release_id": 2410200,
        "tag": "v0.1.7",
        "tarball_url": "https://api.github.com/repos/katholt/srst2/tarball/v0.1.7",
        "type": "Release",
        "url": "https://api.github.com/repos/katholt/srst2/releases/2410200",
        "value": "https://api.github.com/repos/katholt/srst2/releases/2410200",
        "zipball_url": "https://api.github.com/repos/katholt/srst2/zipball/v0.1.7"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "katholt",
          "type": "User"
        },
        "date_created": "2015-11-19T23:07:50Z",
        "date_published": "2015-11-19T23:10:40Z",
        "description": "Updates in v0.1.6:\n1. The original validation of SRST2 (see [paper](http://genomemedicine.com/content/6/11/90)) was performed with bowtie2 version 2.1.0 and samtools v0.1.18.\n2. bowtie2: SRST2 has now been tested on the tutorial example and other test data sets using the latest versions of bowtie2, 2.2.3 and 2.2.4, which gave identical results to those obtained with bowtie2 v2.1.0. Therefore, the SRST2 code will now run if any of these versions of bowtie2 are available: 2.1.0, 2.2.3 or 2.2.4. \n3. samtools: SRST2 has now been tested on the Staph & Salmonella test data sets used in the paper, and will work with newer samtools versions (tested up to v1.1). Note however that SRST2 still works best with [samtools v0.1.18](https://sourceforge.net/projects/samtools/files/samtools/0.1.18/), due to small changes in the mapping algorithms in later versions that result in some loss of reads at the ends of alleles. This has most impact at low read depths, however we do recommend using v0.1.18 for optimum results.\n4. Minor fixes to the ARG-Annot database of resistance genes, including removal of duplicate sequences and fixes to gene names (thanks to Wan Yu for this). Old version remains unchanged for backwards compatibility, but we recommend using the revised version (located in data/ARGannot.r1.fasta).\n5. Added EcOH database for serotyping E. coli (thanks to Danielle Ingle for this). See [Using the EcOH database for serotyping E. coli with SRST2](https://github.com/katholt/srst2#using-the-ecoh-database-for-serotyping-e-coli-with-srst2).\n6. Fixed a problem where, when analysing multiple read sets in one SRST2 call against a gene database in which cluster ids don't match gene symbols, individual gene clusters appear multiple times in the output. The compile function was unaffected and remains unchanged.\n7. Fixed behaviour so that including directory paths in --output parameter works (thanks to nyunyun for contributing most of this fix). E.g. --output test_dir/test will create output files prefixed with 'test', located in test_dir/, and all SRST2 functions should work correctly including consensus allele calling. If test_dir/ doesn't exist, we attempt to create it; if this is not possible the user is alerted and SRST2 stops.\n8. Fixed problem when using a gene database with a simple fasta header (ie not clustered for SRST2; note best results are achieved by pre-clusering your sequence database beforehand) (thanks to cglambert for this one).\n9. Fixes contributed by ppcherng (thanks!): \n10. Fixed KeyErrors that occured when a given seqID was not found in the seq2cluster dictionary, which tended to happen if the FASTA file (gene database) contained empty entries that only have a header and no sequence.\n11. Note v0.1.5 included addition of ppcherng's utility scripts to help automate creation of SRST2-compatible gene databases from VFDB.\n12. Added new parameter '--samtools_args' to pass additional options to samtools mpileup (e.g. SionBayliss requested this in order to use '-A' option in samtools mpileup to include anomalous reads).\n13. Fixed problem with consensus sequence reporting of truncated alleles (issue #39).\n14. Added basic instructions for the R scripts provided for plotting output. See [Plotting output in R](https://github.com/katholt/srst2#plotting-output-in-r)\n",
        "html_url": "https://github.com/katholt/srst2/releases/tag/v0.1.6",
        "name": "SRST2 v0.1.6 - Short Read Sequence Typing for Bacterial Pathogens",
        "release_id": 2156818,
        "tag": "v0.1.6",
        "tarball_url": "https://api.github.com/repos/katholt/srst2/tarball/v0.1.6",
        "type": "Release",
        "url": "https://api.github.com/repos/katholt/srst2/releases/2156818",
        "value": "https://api.github.com/repos/katholt/srst2/releases/2156818",
        "zipball_url": "https://api.github.com/repos/katholt/srst2/zipball/v0.1.6"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "katholt",
          "type": "User"
        },
        "date_created": "2014-12-29T02:32:55Z",
        "date_published": "2014-12-29T02:35:31Z",
        "description": "Updates in v0.1.5:\n1. Optionally switch on reporting of pileups and consensus sequences (fasta) for novel alleles (--report_new_consensus) or for all alleles (--report_all_consensus). See [Printing consensus sequences](https://github.com/katholt/srst2#printing-consensus-sequences)\n2. Post-process consensus sequences from a set of strains, to generate one file per locus containing all/new consensus sequences. See [Collate consensus sequences](https://github.com/katholt/srst2/blob/master/README.md#collate-consensus-sequences-output-by-srst2-run-on-multiple-strains--loci-into-one-file-per-locus)\n3. Some enhancements to getmlst.py script to handle some more unusual scheme names (force download of specific schemes that have non-unique  names, handle forward slashes in names).\n4. Fixed an issue where, if multiple readsets analysed in serial in a srst2 run, the fullgenes report would only contain the results for the last readset. Fullgenes report now contains gene output for all readsets.\n5. Added option (--merge_paired) to accommodate cases where users have multiple read sets for the same sample. If this flag is used, SRST2 will assume that all the input reads belong to the same sample, and outputs will be named as [prefix]__combined.xxx, where srst2 was run using \"-output [prefix]\". If the flag is not used, SRST2 will operate as usual and assume that each read pair is a new sample, with output files named as [prefix]__[sample].xxx, where [sample] is taken from the base name of the reads fastq files. Note that if you have lots of multi-run read sets to analyse, the ease of job submission will depend heavily on how your files are named and you will need to figure out your own approach to manage this (ie there is no way to submit multiple sets of multiple reads).\n6. The original validation of SRST2 (see [paper](http://genomemedicine.com/content/6/11/90)) was performed with bowtie2 version 2.1.0. SRST2 has now been tested on the tutorial example using the latest versions of bowtie2, 2.2.3 and 2.2.4, which gave identical results to those obtained with bowtie2 v2.1.0. Therefore, the SRST2 code will now run if any of these versions of bowtie2 are available: 2.1.0, 2.2.3 or 2.2.4. (Note however that there are still incompatibilities with the recent release of samtools, so you will need to stick to [samtools v0.1.18](https://sourceforge.net/projects/samtools/files/samtools/0.1.18/) unless you want to modify the SRST2 code to allow later versions, and are happy with a dramatic loss in accuracy!)\n",
        "html_url": "https://github.com/katholt/srst2/releases/tag/v0.1.5",
        "name": "SRST2 v0.1.5 - Short Read Sequence Typing for Bacterial Pathogens",
        "release_id": 812507,
        "tag": "v0.1.5",
        "tarball_url": "https://api.github.com/repos/katholt/srst2/tarball/v0.1.5",
        "type": "Release",
        "url": "https://api.github.com/repos/katholt/srst2/releases/812507",
        "value": "https://api.github.com/repos/katholt/srst2/releases/812507",
        "zipball_url": "https://api.github.com/repos/katholt/srst2/zipball/v0.1.5"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "katholt",
          "type": "User"
        },
        "date_created": "2014-06-26T09:52:59Z",
        "date_published": "2014-06-26T09:55:47Z",
        "description": "Note the pre-print of the paper will shortly be available in BioRxiv.\n1. No longer store sam and unsorted bam (can be retained via the --keep_interim_alignment flag)\n2. Added options to specify a maximum number of mismatches to allow during mapping; this is specified separately for mlst and genes, so that it is possible to relax the stringency of gene detection in the same run as a high-accuracy MLST test.\n   Default value for both is 10 mismatches.\n   --mlst_max_mismatch\n   --gene_max_mismatch\n3. The highest minor allele frequency (MAF) of variants encountered in the alignment is now calculated and reported for each allele (in the scores file) and also at the gene level and ST level, to facilitate checking for mixed/contaminated read sets. \n\nThis value is in the range 0 -> 0.5; with e.g. 0 indicating no variation between reads at any aligned base (i.e. at all positions in the alignment, all aligned reads agree on the same base call; although this agreed base may be different from the reference); and 0.25 indicating there is at least one position in the alignment at which all reads do not agree, and the least common variant (either match or mismatch to the reference) is present in 25% of reads. This value is printed, for all alleles, to the scores file. Note this is different to the \u2018LeastConfident\u2019 information printed to scores, which presents the strongest evidence for mismatch _compared to the reference_, i.e. between 0 -> 1.\n\nThe highest such value for each gene/cluster/locus is reported in the fullgenes output table.\n\nThe highest such value across all MLST loci is reported in the mlst output table.\n\nNote that all compiled reports will now include a maxMAF column; if you provide MLST or compiled reports from previous versions without this columns, the value \u201cNC\u201d will be inserted in the maxMAF column to indicate \u201cnot calculated\u201d. This ensures the updated SRST2 (v0.1.4+) is backwards compatible with previous SRST2 outputs; do be aware though that the older versions of SRST2 (<v0.1.4) will not be forwards-compatible with output generated by more recent versions (v0.14 onwards).\n1. Added R code for plotting SRST2 output in R (plotSRST2data.R).\n   Instructions will be added to the read me.\n2. Added srst2-formatted ARG-Annot resistance gene database and plasmid replicon databases to /data.\n",
        "html_url": "https://github.com/katholt/srst2/releases/tag/v0.1.4",
        "name": "SRST2 v0.1.4 - Short Read Sequence Typing for Bacterial Pathogens",
        "release_id": 395989,
        "tag": "v0.1.4",
        "tarball_url": "https://api.github.com/repos/katholt/srst2/tarball/v0.1.4",
        "type": "Release",
        "url": "https://api.github.com/repos/katholt/srst2/releases/395989",
        "value": "https://api.github.com/repos/katholt/srst2/releases/395989",
        "zipball_url": "https://api.github.com/repos/katholt/srst2/zipball/v0.1.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "katholt",
          "type": "User"
        },
        "date_created": "2014-02-07T01:19:11Z",
        "date_published": "2014-02-07T01:20:35Z",
        "description": "Updates in this release\n- fixed a bug that occurred while trying to type genes from a user-supplied database (see issue #5, thanks to Scott Long)\n- fixed a bug in gene detection reporting - genes are now correctly reported by cluster, rather than by gene symbol (see issue #7)\n- added maximum divergence option for reporting, default is now to report only hits with <10% divergence from the database (see issue #8)\n- added parameter to pass to bowtie2 parameter '-u N' to stop mapping after the first N reads. Default behaviour remains to map all reads. However, for large read sets (e.g. >100x), extra reads do not help and merely increase the time taken for mapping and scoring, and you may want to limit to the first million reads (100x of a 2 Mbp genome) using '--stop_after 1000000'.\n",
        "html_url": "https://github.com/katholt/srst2/releases/tag/v0.1.3a",
        "name": "SRST2 v0.1.3 - Short Read Sequence Typing for Bacterial Pathogens",
        "release_id": 176359,
        "tag": "v0.1.3a",
        "tarball_url": "https://api.github.com/repos/katholt/srst2/tarball/v0.1.3a",
        "type": "Release",
        "url": "https://api.github.com/repos/katholt/srst2/releases/176359",
        "value": "https://api.github.com/repos/katholt/srst2/releases/176359",
        "zipball_url": "https://api.github.com/repos/katholt/srst2/zipball/v0.1.3a"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "katholt",
          "type": "User"
        },
        "date_created": "2014-02-06T06:50:22Z",
        "date_published": "2014-02-06T06:56:44Z",
        "description": "Updates in this release\n- fixed a bug that occurred while trying to type genes from a user-supplied database (see issue #5, thanks to Scott Long)\n- fixed a bug in gene detection reporting - genes are now correctly reported by cluster, rather than by gene symbol (see issue #7)\n- added maximum divergence option for reporting, default is now to report only hits with <10% divergence from the database (see issue #8)\n- added parameter to pass to bowtie2 parameter '-u N' to stop mapping after the first N reads. Default behaviour remains to map all reads. However, for large read sets (e.g. >100x), extra reads do not help and merely increase the time taken for mapping and scoring, and you may want to limit to the first million reads (100x of a 2 Mbp genome) using '--stop_after 1000000'.\n",
        "html_url": "https://github.com/katholt/srst2/releases/tag/v0.1.3",
        "name": "SRST2 v0.1.3 - Short Read Sequence Typing for Bacterial Pathogens",
        "release_id": 175100,
        "tag": "v0.1.3",
        "tarball_url": "https://api.github.com/repos/katholt/srst2/tarball/v0.1.3",
        "type": "Release",
        "url": "https://api.github.com/repos/katholt/srst2/releases/175100",
        "value": "https://api.github.com/repos/katholt/srst2/releases/175100",
        "zipball_url": "https://api.github.com/repos/katholt/srst2/zipball/v0.1.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "katholt",
          "type": "User"
        },
        "date_created": "2013-09-29T00:14:44Z",
        "date_published": "2013-09-29T00:18:55Z",
        "description": "Changes in this release:\n- Updated srst2.py and scores_vs_expected.py to ensure compatible generation and parsing of scores files.\n  - Updated the readme to include more detailed descriptions of features, the example, and details of creating/parsing gene databases.\n",
        "html_url": "https://github.com/katholt/srst2/releases/tag/v0.1.2-beta",
        "name": "SRST2 v0.1.2-beta - Short Read Sequence Typing for Bacterial Pathogens",
        "release_id": 54723,
        "tag": "v0.1.2-beta",
        "tarball_url": "https://api.github.com/repos/katholt/srst2/tarball/v0.1.2-beta",
        "type": "Release",
        "url": "https://api.github.com/repos/katholt/srst2/releases/54723",
        "value": "https://api.github.com/repos/katholt/srst2/releases/54723",
        "zipball_url": "https://api.github.com/repos/katholt/srst2/zipball/v0.1.2-beta"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "katholt",
          "type": "User"
        },
        "date_created": "2013-09-26T03:59:34Z",
        "date_published": "2013-09-26T04:00:50Z",
        "description": "Fixed a bug in identification of forward/reverse read pairs.\n",
        "html_url": "https://github.com/katholt/srst2/releases/tag/v0.1.1-beta",
        "name": "SRST2 Short Read Sequence Typing for Bacterial Pathogens",
        "release_id": 52454,
        "tag": "v0.1.1-beta",
        "tarball_url": "https://api.github.com/repos/katholt/srst2/tarball/v0.1.1-beta",
        "type": "Release",
        "url": "https://api.github.com/repos/katholt/srst2/releases/52454",
        "value": "https://api.github.com/repos/katholt/srst2/releases/52454",
        "zipball_url": "https://api.github.com/repos/katholt/srst2/zipball/v0.1.1-beta"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "katholt",
          "type": "User"
        },
        "date_created": "2013-09-25T01:16:23Z",
        "date_published": "2013-09-25T04:40:39Z",
        "html_url": "https://github.com/katholt/srst2/releases/tag/v0.1.0-beta",
        "name": "SRST2 v0.1.0 Short Read Sequence Typing for Bacterial Pathogens",
        "release_id": 51556,
        "tag": "v0.1.0-beta",
        "tarball_url": "https://api.github.com/repos/katholt/srst2/tarball/v0.1.0-beta",
        "type": "Release",
        "url": "https://api.github.com/repos/katholt/srst2/releases/51556",
        "value": "https://api.github.com/repos/katholt/srst2/releases/51556",
        "zipball_url": "https://api.github.com/repos/katholt/srst2/zipball/v0.1.0-beta"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "1 - Install dependencies",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "* python (v2.7.5)\n* scipy http://www.scipy.org/install.html\n* bowtie2 v2.1.0 http://bowtie-bio.sourceforge.net/bowtie2/index.shtml\n* SAMtools v0.1.18 https://sourceforge.net/projects/samtools/files/samtools/0.1.18/ (NOTE 0.1.19 DOES NOT WORK)\n\nN.B. If you have multiple versions of samtools or bowtie2 installed, you can pick which one `srst2` or `slurm_srst2` should use by setting the following environment variables.\n\n* `SRST2_SAMTOOLS`\n* `SRST2_BOWTIE2`\n* `SRST2_BOWTIE2_BUILD`\n\nIf these aren't set or are missing, they will default to looking in your `PATH` for `samtools`, `bowtie2` and `bowtie2-build`. The exception is `SRST2_BOWTIE2_BUILD` which, if it is not set or missing, will try adding `-build` to `SRST2_BOWTIE2` if it exists, otherwise it defaults to looking in your `PATH`\n\n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "2 - Run MLST",
        "parent_header": [
          "Basic usage - MLST"
        ],
        "type": "Text_excerpt",
        "value": "```\nsrst2 --input_pe strainA_1.fastq.gz strainA_2.fastq.gz --output strainA_test --log --mlst_db Escherichia_coli#1.fasta --mlst_definitions profiles_csv --mlst_delimiter _\n```\n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2 - Run gene detection",
        "parent_header": [
          "Basic usage - Resistance genes"
        ],
        "type": "Text_excerpt",
        "value": "```\nsrst2 --input_pe strainA_1.fastq.gz strainA_2.fastq.gz --output strainA_test --log --gene_db CARD_v3.0.8_SRST2.fasta\n```\n\n### 3 - Check the outputs\n\n(i) Gene detection results are output in: `strainA_test__genes__resistance__results.txt`\n\nSample | aadA | dfrA | sul2 | tet(B)\n:---: | :---: | :---: | :---: | :---:\nstrainA | aadA1-5 | dfrA1_1 | sul2_2 | tet(B)_4\n\n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Collate consensus sequences output by SRST2 run on multiple strains &amp; loci, into one file per locus",
        "parent_header": [
          "Printing consensus sequences"
        ],
        "type": "Text_excerpt",
        "value": "For genes:\n\n```\npython srst2/scripts/consensus_alignment.py --in *.all_consensus_alleles.fasta --pre test --type gene\n```\n\nFor mlst:\n\n```\npython srst2/scripts/consensus_alignment.py --in *.all_consensus_alleles.fasta --pre test --type mlst --mlst_delimiter _\n```\n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Compile results from completed runs",
        "type": "Text_excerpt",
        "value": "```\nsrst2 --prev_output *compiledResults.txt --output Shigella_report\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running lots of jobs and compiling results",
        "type": "Text_excerpt",
        "value": "Run against multiple read sets: submitting 1 job per readset to SLURM queueing system.\n\n```\nslurm_srst2.py --script srst2 \n\t--output test \n\t--input_pe *.fastq.gz \n\t--other_args '--gene_db CARD_v3.0.8_SRST2.fasta \n\t--mlst_db Escherichia_coli.fasta \n\t--mlst_definitions ecoli.txt \n\t--save_scores' \n\t--walltime 0-1:0 \n\t\t> job_sub_list.txt\n```\n\t\t\nThe results from all the separate runs can then be compiled together using:\t\t\n\n```\nsrst2 --prev_output *compiledResults.txt --output Shigella_report\n```\n\n------------\n\nSLURM job script usage options\n\n```\nslurm_srst2.py -h\n\noptional arguments:\n  -h, --help            show this help message and exit\n  \n  --walltime WALLTIME   wall time (default 0-0:30 = 30 minutes)\n  \n  --memory MEMORY       mem (default 4096 = 4gb)\n  \n  --rundir RUNDIR       directory to run in (default current dir)\n  \n  --script SCRIPT       SRST2 script (/path/to/srst2_150\n                        9_reporting2.py)\n                        \n  --output OUTPUT       identifier for outputs (will be combined with read set\n                        identifiers)\n                        \n  --input_se INPUT_SE [INPUT_SE ...]\n                        Single end read file(s) for analysing (may be gzipped)\n                        \n  --input_pe INPUT_PE [INPUT_PE ...]\n                        Paired end read files for analysing (may be gzipped)\n                        \n  --forward FORWARD     Designator for forward reads (only used if NOT in\n                        MiSeq format sample_S1_L001_R1_001.fastq.gz; otherwise\n                        default is _1, i.e. expect forward reads as\n                        sample_1.fastq.gz)\n                        \n  --reverse REVERSE     Designator for reverse reads (only used if NOT in\n                        MiSeq format sample_S1_L001_R2_001.fastq.gz; otherwise\n                        default is _2, i.e. expect forward reads as\n                        sample_2.fastq.gz)\n                        \n  --other_args OTHER_ARGS\n                        string containing all other arguments to pass to srst2\n```\n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 00:12:17",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 125
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Report consensus sequences for novel alleles",
        "parent_header": [
          "Printing consensus sequences"
        ],
        "type": "Text_excerpt",
        "value": "```\n--report_new_consensus\n```\n\nFor all samples and loci where the top scoring allele contains SNPs:\n\n* a pileup file will be generated for the top scoring allele, with the name `[allele].[output]__[readset].[database].pileup`\n* the consensus sequence will be printed to a fasta file with the name `[output].new_consensus_alleles.fasta`\n* fasta headers will be in the format `>[allele].variant [sample]`\n\n\nIN ADDITION TO THE NOVEL ALLELES FILE OUTLINED ABOVE, the following will ALSO occur:\n\n* a pileup file will be generated for the top scoring allele for each sample at each locus, with the name `[allele].[output]__[readset].[database].pileup`\n* the consensus sequence for the top scoring allele for each sample at each locus will be printed to a fasta file with the name `[output].all_consensus_alleles.fasta`\n* fasta headers will be in the format `>[allele].variant [sample]`\n\n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Report consensus sequences for all alleles",
        "parent_header": [
          "Printing consensus sequences"
        ],
        "type": "Text_excerpt",
        "value": "```\n--report_all_consensus\n```\n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "2 - Get and install the code",
        "parent_header": [
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Make sure you have installed [git](https://help.github.com/articles/set-up-git) and [pip](http://www.pip-installer.org/).\n\nClone the git repository: `git clone https://github.com/katholt/srst2`\n\nand then install with pip: `pip install srst2/`\n\nOR do both at once: `sudo pip install git+https://github.com/katholt/srst2`\n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1 - Gather your input files",
        "parent_header": [
          "Basic usage - Resistance genes"
        ],
        "type": "Text_excerpt",
        "value": "(i) sequence reads (this example uses paired reads in gzipped fastq format, see below for options)\n\n(ii) a fasta sequence database to match to. For MLST, this means a fasta file of all allele sequences. If you want to assign STs, you also need a tab-delim file which defines the ST profiles as a combination of alleles. You can retrieve these files automatically from pubmlst.org/data/ using the script provided:\n\n```\ngetmlst.py --species 'Escherichia coli#1'\n```\n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3 - Check the outputs",
        "parent_header": [
          "Basic usage - Resistance genes"
        ],
        "type": "Text_excerpt",
        "value": "(i) MLST results are output in: `strainA_test__mlst__Escherichia_coli#1__results.txt`\n\nSample | ST | adk | fumC | gyrB | icd | mdh | purA | recA | mismatches | uncertainty | depth | maxMAF\n:---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---:\nstrainA | 152 | 11 | 63 | 7 | 1 | 14 | 7 | 7 | 0 | - | 25.8319955826 | 0.125\n\n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "All usage options",
        "type": "Text_excerpt",
        "value": "```\nsrst2 -h\n\nSRST2 - Short Read Sequence Typer (v2)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --version             show program's version number and exit\n  --input_se INPUT_SE [INPUT_SE ...]\n                        Single end read file(s) for analysing (may be gzipped)\n  --input_pe INPUT_PE [INPUT_PE ...]\n                        Paired end read files for analysing (may be gzipped)\n  --merge_paired        Switch on if all the input read sets belong to a\n                        single sample, and you want to merge their data to get\n                        a single result\n  --forward FORWARD     Designator for forward reads (only used if NOT in\n                        MiSeq format sample_S1_L001_R1_001.fastq.gz; otherwise\n                        default is _1, i.e. expect forward reads as\n                        sample_1.fastq.gz)\n  --reverse REVERSE     Designator for reverse reads (only used if NOT in\n                        MiSeq format sample_S1_L001_R2_001.fastq.gz; otherwise\n                        default is _2, i.e. expect forward reads as\n                        sample_2.fastq.gz\n  --read_type {q,qseq,f}\n                        Read file type (for bowtie2; default is q=fastq; other\n                        options: qseq=solexa, f=fasta).\n  --mlst_db MLST_DB     Fasta file of MLST alleles (optional)\n  --mlst_delimiter MLST_DELIMITER\n                        Character(s) separating gene name from allele number\n                        in MLST database (default \"-\", as in arcc-1)\n  --mlst_definitions MLST_DEFINITIONS\n                        ST definitions for MLST scheme (required if mlst_db\n                        supplied and you want to calculate STs)\n  --mlst_max_mismatch MLST_MAX_MISMATCH\n                        Maximum number of mismatches per read for MLST allele\n                        calling (default 10)\n  --gene_db GENE_DB [GENE_DB ...]\n                        Fasta file/s for gene databases (optional)\n  --no_gene_details     Switch OFF verbose reporting of gene typing\n  --gene_max_mismatch GENE_MAX_MISMATCH\n                        Maximum number of mismatches per read for gene\n                        detection and allele calling (default 10)\n  --min_coverage MIN_COVERAGE\n                        Minimum %coverage cutoff for gene reporting (default\n                        90)\n  --max_divergence MAX_DIVERGENCE\n                        Maximum %divergence cutoff for gene reporting (default\n                        10)\n  --min_depth MIN_DEPTH\n                        Minimum mean depth to flag as dubious allele call\n                        (default 5)\n  --min_edge_depth MIN_EDGE_DEPTH\n                        Minimum edge depth to flag as dubious allele call\n                        (default 2)\n  --prob_err PROB_ERR   Probability of sequencing error (default 0.01)\n  --truncation_score_tolerance TRUNCATION_SCORE_TOLERANCE\n                        % increase in score allowed to choose non-truncated\n                        allele\n  --stop_after STOP_AFTER\n                        Stop mapping after this number of reads have been\n                        mapped (otherwise map all)\n  --other OTHER         Other arguments to pass to bowtie2 (must be escaped,\n                        e.g. \"\\--no-mixed\".\n  --max_unaligned_overlap MAX_UNALIGNED_OVERLAP\n                        Read discarded from alignment if either of its ends\n                        has unaligned overlap with the reference that is\n                        longer than this value (default 10)\n  --mapq MAPQ           Samtools -q parameter (default 1)\n  --baseq BASEQ         Samtools -Q parameter (default 20)\n  --samtools_args SAMTOOLS_ARGS\n                        Other arguments to pass to samtools mpileup (must be\n                        escaped, e.g. \"\\-A\").\n  --output OUTPUT       Prefix for srst2 output files\n  --log                 Switch ON logging to file (otherwise log to stdout)\n  --save_scores         Switch ON verbose reporting of all scores\n  --report_new_consensus\n                        If a matching alleles is not found, report the\n                        consensus allele. Note, only SNP differences are\n                        considered, not indels.\n  --report_all_consensus\n                        Report the consensus allele for the most likely\n                        allele. Note, only SNP differences are considered, not\n                        indels.\n  --use_existing_bowtie2_sam\n                        Use existing SAM file generated by Bowtie2 if\n                        available, otherwise they will be generated\n  --use_existing_pileup\n                        Use existing pileups if available, otherwise they will\n                        be generated\n  --use_existing_scores\n                        Use existing scores files if available, otherwise they\n                        will be generated\n  --keep_interim_alignment\n                        Keep interim files (sam & unsorted bam), otherwise\n                        they will be deleted after sorted bam is created\n  --threads THREADS     Use multiple threads in Bowtie and Samtools\n  --prev_output PREV_OUTPUT [PREV_OUTPUT ...]\n                        SRST2 results files to compile (any new results from\n                        this run will also be incorporated)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "More basic usage examples",
        "type": "Text_excerpt",
        "value": "Run single read sets against MLST database and resistance database\n\n```\nsrst2 --input_pe pool11_tag2_1.fastq.gz pool11_tag2_2.fastq.gz \n\t--output pool11_tag2_Shigella --log \n\t--gene_db CARD_v3.0.8_SRST2.fasta \n\t--mlst_db Escherichia_coli.fasta \n\t--mlst_definitions ecoli.txt\n```\n\n------------\n\nRun against multiple read sets in serial\n\n```\nsrst2 --input_pe *.fastq.gz\n\t--output Shigella --log\n\t--gene_db CARD_v3.0.8_SRST2.fasta \n\t--mlst_db Escherichia_coli.fasta \n\t--mlst_definitions ecoli.txt\n```\n\n------------\n\nRun against new read sets, merge with previous reports (individual or compiled)\n\n```\n\tsrst2 --input_pe strainsY-Z*.fastq.gz\n\t\t--output strainsA-Z --log\n\t\t--gene_db CARD_v3.0.8_SRST2.fasta \n\t\t--mlst_db Escherichia_coli.fasta \n\t\t--mlst_definitions ecoli.txt\n\t\t--prev_output ShigellaA__genes__resistance__results.txt\n        \t ShigellaA__mlst__Escherichia_coli__results.txt\n        \t ShigellaB__genes__resistance__results.txt\n        \t ShigellaB__mlst__Escherichia_coli__results.txt\n        \t ShigellaC-X__compiledResults.txt\n```\n------------\n\nRun against Enterococcus reads, where read names are different from the usual `_1.fastq` and `_2.fastq`\n\n```\nsrst2 --input_pe strain_R1.fastq.gz strain_R2.fastq.gz \n\t--forward _R1 --reverse _R2 \n\t--output strainA --log \n\t--gene_db CARD_v3.0.8_SRST2.fasta \n\t--mlst_db Enterococcus_faecium.fasta \n\t--mlst_definitions efaecium.txt\n```\n\t\n# Compile results from completed runs\n\n```\nsrst2 --prev_output *compiledResults.txt --output Shigella_report\n```\n\n\n# Running lots of jobs and compiling results\n\nRun against multiple read sets: submitting 1 job per readset to SLURM queueing system.\n\n```\nslurm_srst2.py --script srst2 \n\t--output test \n\t--input_pe *.fastq.gz \n\t--other_args '--gene_db CARD_v3.0.8_SRST2.fasta \n\t--mlst_db Escherichia_coli.fasta \n\t--mlst_definitions ecoli.txt \n\t--save_scores' \n\t--walltime 0-1:0 \n\t\t> job_sub_list.txt\n```\n\t\t\nThe results from all the separate runs can then be compiled together using:\t\t\n\n```\nsrst2 --prev_output *compiledResults.txt --output Shigella_report\n```\n\n------------\n\nSLURM job script usage options\n\n```\nslurm_srst2.py -h\n\noptional arguments:\n  -h, --help            show this help message and exit\n  \n  --walltime WALLTIME   wall time (default 0-0:30 = 30 minutes)\n  \n  --memory MEMORY       mem (default 4096 = 4gb)\n  \n  --rundir RUNDIR       directory to run in (default current dir)\n  \n  --script SCRIPT       SRST2 script (/path/to/srst2_150\n                        9_reporting2.py)\n                        \n  --output OUTPUT       identifier for outputs (will be combined with read set\n                        identifiers)\n                        \n  --input_se INPUT_SE [INPUT_SE ...]\n                        Single end read file(s) for analysing (may be gzipped)\n                        \n  --input_pe INPUT_PE [INPUT_PE ...]\n                        Paired end read files for analysing (may be gzipped)\n                        \n  --forward FORWARD     Designator for forward reads (only used if NOT in\n                        MiSeq format sample_S1_L001_R1_001.fastq.gz; otherwise\n                        default is _1, i.e. expect forward reads as\n                        sample_1.fastq.gz)\n                        \n  --reverse REVERSE     Designator for reverse reads (only used if NOT in\n                        MiSeq format sample_S1_L001_R2_001.fastq.gz; otherwise\n                        default is _2, i.e. expect forward reads as\n                        sample_2.fastq.gz)\n                        \n  --other_args OTHER_ARGS\n                        string containing all other arguments to pass to srst2\n```\n\n# Known issues\n\nReference indexing - SRST2 uses bowtie2 for mapping reads to reference sequences. To do this, SRST2 must first check the index exists, call `bowtie2-build` to generate the index if it doesn't already exist, and then call bowtie2 to map the reads to this indexed reference. Occasionallly bowtie2 will return an Error message saying that it doesn't like the index. This seems to be due to the fact that if you submit multiple SRST2 jobs to a cluster at the same time, they will all test for the presence of the index and, if index files are present, will proceed with mapping... but this doesn't mean the indexing process is actually finished, and so errors will arise. \n\nThe simple way out of this is, if you are running lots of SRST2 jobs, FIRST index your reference(s) for bowtie2 and samtools (using `bowtie2-build ref.fasta ref.fasta` and `samtools faidx ref.fasta`), then submit your SRST2 jobs. The slurm_srst2.py script takes care of this for you by formatting the databases before submitting any SRST2 jobs.\n\n\n# Generating SRST2-compatible clustered database from raw sequences\n\n### Gene database format\nIn addition to MLST, SRST2 can do gene/allele detection. This works by mapping reads to each of the reference sequences in a fasta file(s) (provided through `--gene_db`) and reporting details of all genes that are covered above a certain level (`--min_coverage`, 90% by default). \n\nIf the input database contains different alelles of the same gene, SRST2 can report just the best matching allele for that gene (much like with MLST we report the best matching allele for each locus in the scheme). This makes the output manageable, as you will get one column per gene/locus (e.g. blaCTX-M) which reports the specific allele that was called in each sample (e.g. blaCTX-M-15 in sample A, blaCTX-M-13 in sample B).\n\nTo do this properly, SRST2 needs to know which of the reference sequences are alleles of the same gene. This is done by adhering to the following format in the naming of the sequences (i.e. the headers in the fasta sequence for the database):\n\n```\n>[clusterUniqueIdentifier]__[clusterSymbol]__[alleleSymbol]__[alleleUniqueIdentifier]\n```\n\ne.g. in the resistance gene database provided, the first entry is:\n\n```\n>344__blaOXA__blaOXA-181__1\n```\n\nNote these are separated by two underscores. The individual components are:\n\nclusterUniqueIdentifier = 344;  unique identifier for this cluster (uniquely identifes the cluster)\nclusterSymbol = blaOXA;  gene symbol for this cluster (may be shared by multiple clusters)\nalleleSymbol = blaOXA-181;  full name of this allele\nalleleUniqueIdentifier = 1;  uniquely identifies the sequence\n\nIdeally the alleleSymbol would be unique (as it is in the `reference.fasta` file provided). However it doesn't have to be: if allele symbols are not unique, then SRST2 will use the combination `[alleleSymbol]__[alleleUniqueIdentifier]` to  uniquely identify the sequence in the resulting reports, so that you can trace exactly which sequence was present in each sample.\n\nAdditional gene annotation can appear on the header line, after a space. This additional info will be printed in the full genes report, but not in the compiled results files.\n\ne.g. for the blaOXA sequence above, the full header is actually:\n\n\t>344__blaOXA__blaOXA-181__1 blaOXA-181_1_HM992946; HM992946; betalactamase\n\n\n### Sourcing suitable gene databases\n\nTo get started, we have provided databases for resistance genes, plasmid genes, and serotyping for E. coli and Group B Streptococcus (see [Preformatted databases for specialist typing with SRST2](https://github.com/katholt/srst2#preformatted-databases-for-specialist-typing-with-srst2); and code (`database_clustering/`) to extract virulence factors for a genus of interest from the Virulence Factor DB (detailed instructions below).\n\nIf you want to use your own database of allele sequences, with the reporting behaviour described, you will need to assign your sequences to clusters and use this header format. To facilitate this, use the scripts provided in the database_clustering directory provided with SRST2, and follow the instructions below.\n\nYou can also use unclustered sequences. This is perfectly fine for gene detection applications, where you have one representative allele sequence for each gene, and you simply want to know which samples contain a sequence that is similar to this one (e.g. detecting plasmid replicons, where there is one target sequence per replicon). However, this won't work well for allele typing. If the sequence database contains multiple allele sequences for the same gene, then all of these that are covered above the length threshold (default 90%) will be reported in the output, which makes for messy reporting. If you do this, you would probably find it most useful to look at the full gene results table rather than looking at the compiled results output.\n\n### If you already know which alleles belong to the same gene family and should be clustered for reporting:\n\nUse this info to generate the appropriate headers for SRST2 to read. The provided script `csv_to_gene_db.py` can help:\n\n```\ncsv_to_gene_db.py -h\n\nUsage: csv_to_gene_db.py [options]\n\nOptions:\n\n  -h, --help            show this help message and exit\n  \n  -t TABLE_FILE, --table=TABLE_FILE\n                        table to read (csv)\n                        \n  -o OUTPUT_FILE, --out=OUTPUT_FILE\n                        output file (fasta)\n                        \n  -s SEQ_COL, --seq_col=SEQ_COL\n                        column number containing sequences\n                        \n  -f FASTA_FILE, --fasta=FASTA_FILE\n                        fasta file to read sequences from (must specify which\n                        column in the table contains the sequence names that\n                        match the fasta file headers)\n                        \n  -c HEADERS_COL, --headers_col=HEADERS_COL\n                        column number that contains the sequence names that\n                        match the fasta file headers\n```\n\nThe input table should be comma-separated (csv, unix newline characters) and have these columns:\n\nseqID,clusterid,gene,allele,(DNAseq),other....\n\nwhich will be used to make headers of the required form `[clusterID]__[gene]__[allele]__[seqID] [other stuff]`\n\nIf you have the sequences as a column in the table, specify which column they are in using `-s`:\n\n```\ncsv_to_gene_db.py -t genes.csv -o genes.fasta -s 5\n```\n\nAlternatively, if you have sequences in a separate fasta file, you can provide this file via `-f`. You will also need to have a column in the table that links the rows to unique sequences, specify which column this is using `-c`:\n\n```\ncsv_to_gene_db.py -t genes.csv -o genes.fasta -f rawseqs.fasta -c 5\n```\n\n### Clustering sequences\n\nIf your sequences are not already assigned to gene clusters, you can do this automatically using CD-HIT (http://weizhong-lab.ucsd.edu/cd-hit/).\n\n1 - Run CD-HIT to cluster the sequences at 90% nucleotide identity:\n\n```\ncdhit-est -i rawseqs.fasta -o rawseqs_cdhit90 -d 0 > rawseqs_cdhit90.stdout\n```\n\n2 - Parse the cluster output and tabulate the results, check for inconsistencies between gene names and the sequence clusters, and generate individual fasta files for each cluster to facilitate further checking:\n\n```\npython cdhit_to_csv.py --cluster_file rawseqs_cdhit90.clstr --infasta raw_sequences.fasta --outfile rawseqs_clustered.csv\n```\n\nFor comparing gene names to cluster assignments, this script assumes very basic nomenclature of the form gene-allele, ie a gene symbol followed by '-' followed by some more specific allele designation. E.g. adk-1, blaCTX-M-15. The full name of the gene (adk-1, blaCTX-M-15) will be stored as the allele, and the bit before the '-' will be stored as the name of the gene cluster (adk, blaCTX). This won't always give you exactly what you want, because there really are no standards for gene nomenclature! But it will work for many cases, and you can always modify the script if you need to parse names in a different way. Note though that this only affects how sensible the gene cluster nomenclature is going to be in your srst2 results, and will not affect the behaviour of the clustering (which is purely sequence based using cdhit) or srst2 (which will assign a top scoring allele per cluster, the cluster name may not be perfect but the full allele name will always be reported anyway).\n\n3 - Convert the resulting csv table to a sequence database using:\n\n```\ncsv_to_gene_db.py -t rawseqs_clustered.csv -o seqs_clustered.fasta -f rawseqs.fasta -c 4\n```\n\nThe output file, `seqs_clustered.fasta`, should now be ready to use with srst2 (`--gene_db seqs_clustered.fasta`).\n\nIf there are potential inconsistencies detected at step 2 above (e.g. multiple clusters for the same gene, or different gene names within the same cluster), you may like to investigate further and change some of the cluster assignments or cluster names. You may find it useful to generate neighbour joining trees for each cluster that contains >2 genes, using align_plot_tree_min3.py\n\n### Screening for resistance genes with SRST2\nA database of resistance genes CARD v3.0.8 is included with SRST2: `data/CARD_v3.0.8_SRST2.fasta`. The fasta file is ready for use with SRST2. The CSV table /data/CARD_v3.0.8_clustered.csv contains the same sequence information, but in tabular format for easier parsing/editing.\n\nAn easy way to add sequences to this database would be to add new rows to the table, and then generate an updated fasta file using:\n\n```\ncsv_to_gene_db.py -t rawseqs_clustered.csv -o seqs_clustered.fasta -s rawseqs.fasta -c 5\n```\n\n### Using the VFDB Virulence Factor Database with SRST2\n\nThe VFDB houses sets of virulence genes for a range of bacterial genera, see http://www.mgc.ac.cn/VFs/.\n\nTo type these virulence genes using SRST2, download the full set of sequences from the VFDB website (http://www.mgc.ac.cn/VFs/Down/VFDB_setB_nt.fas.gz) and follow these steps to generate SRST2-compatible files for your genus of interest.\n\n1 - Extract virulence genes by genus from the main VFDB file, `CP_VFs.ffn`:\n\n```\npython VFDBgenus.py --infile CP_VFs.ffn --genus Clostridium\n```\n\nor, to get all availabel genera in separate files:\n\n```\npython VFDBgenus.py --infile CP_VFs.ffn\n```\n\n2 - Run CD-HIT to cluster the sequences for this genus, at 90% nucleotide identity:\n\n```\ncd-hit -i Clostridium.fsa -o Clostridium_cdhit90 -c 0.9 > Clostridium_cdhit90.stdout\n```\n\n3 - Parse the cluster output and tabulate the results using the specific Virulence gene DB compatible script:\n\n```\npython VFDB_cdhit_to_csv.py --cluster_file Clostridium_cdhit90.clstr --infile Clostridium.fsa --outfile Clostridium_cdhit90.csv\n```\n\n4 - Convert the resulting csv table to a SRST2-compatible sequence database using:\n\n```\npython csv_to_gene_db.py -t Clostridium_cdhit90.csv -o Clostridium_VF_clustered.fasta -s 5\n```\n    \nThe output file, `Clostridium_VF_clustered.fasta`, should now be ready to use with srst2 (`--gene_db Clostridium_VF_clustered.fasta`).\n\n## Preformatted databases for specialist typing with SRST2\n\n### Using the EcOH database for serotyping E. coli with SRST2\n\nDetails can be found in [this MGen paper](http://mgen.microbiologyresearch.org/content/journal/mgen/10.1099/mgen.0.000064).\n\nThe EcOH database includes genes for identifying O and H types in E. coli, see `/data/EcOH.fasta`\n\nO types are represented by the presence of two loci (either wzx and wzy, or wzm and wzt). Note that allelic variation is possible but does not impact serotype in a predictable way, so typing calls should be made based on the presence of genes rather than allele assignments (i.e. it is generally safe to ignore *? characters)\n\nH types are represented by alleles of fliC or flnA flagellin genes (one allele per H type). Note that it is possible to carry both a fliC allele and a flnA allele, such strains should be considered phase variable for flagellin).\n\n#### Basic Usage \u2013 Serotyping E. coli\n\n```\nsrst2 --input_pe strainA_1.fastq.gz strainA_2.fastq.gz --output strainA_serotypes --log --gene_db EcOH.fasta\n```\n\n#### Example\n\nNote these reads sets are each ~100 MB each, so you need to download 400 MB of test data to run this example\n\n```\nwget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR178/ERR178148/ERR178148_1.fastq.gz\nwget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR178/ERR178148/ERR178148_2.fastq.gz\nwget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR178/ERR178156/ERR178156_1.fastq.gz\nwget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR178/ERR178156/ERR178156_2.fastq.gz\n\nsrst2 --input_pe ERR178148*.fastq.gz ERR178156*.fastq.gz --output serotypes --log --gene_db EcOH.fasta\n```\n\nResults will be output in: `[prefix]__genes__EcOH__results.txt`\n\nOutput from the above example would appear in: `serotypes__genes__EcOH__results.txt`\n\nSample | fliC | wzm | wzt | wzx | wzy\n:---: | :---: | :---: | :---: | :---: | :---:\nERR178148 | fliC-H31_32* | - | - | wzx-O131_165* | wzy-O131_386\nERR178156 | fliC-H33_34 | wzm-O9_93* | wzt-O9_107* | - | -\n\n#### Interpretation\n\nERR178148 has matching wzx and wzy hits for O131, and fliC allele H31, thus the predicted serotype is O131:H31. \n\nERR178156 has matching wzm and wzt hits for O9 and fliC allele H33, thus the predicted serotype is O9:H33. \n\nNote that each O antigen type is associated with loci containing EITHER wzx and wzy, OR wzm and wzt genes.\n\nNo alleles for flnA were detected in these strains, indicating they are not phase variable for flagellin.\n\n\n### Using the GBS-SBG database for serotyping Streptococcus agalactiae (Group B Streptococcus) with SRST2\n\nDetails can be found in this [preprint](https://doi.org/10.1101/2021.06.16.448630). The database and a script for typing using assemblies can be found in the [GBS-SBG GitHub repository](https://github.com/swainechen/GBS-SBG). The [fasta database](https://raw.githubusercontent.com/swainechen/GBS-SBG/main/GBS-SBG.fasta) itself is already properly formatted for SRST2 and this is all that's needed for SRST2 to type using short reads.\n\n#### Basic Usage - Serotyping GBS\n```\nsrst2 --input_pe strainA_1.fastq.gz strainA_2.fastq.gz --output strainA_test --log --gene_db GBS-SBG.fasta\n```\n\n#### Example\nNote these read sets are ~150 MB each, so you need to download ~600 MB of data to run this example.\n````\nwget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR632/000/SRR6327950/SRR6327950_1.fastq.gz\nwget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR632/000/SRR6327950/SRR6327950_2.fastq.gz\nwget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR632/007/SRR6327887/SRR6327887_1.fastq.gz\nwget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR632/007/SRR6327887/SRR6327887_2.fastq.gz\n\nsrst2 --input_pe SRR6327950*.fastq.gz SRR6327887*.fastq.gz --output GBS-serotypes --log --gene_db GBS-SBG.fasta\n````\n\nThe output from the above will be in `GBS-serotypes__genes__GBS-SBG__results.txt`.\n\nSample | GBS-SBG\n:---: | :---:\nSRR6327887 | GBS-SBG:Ia*\nSRR6327950 | GBS-SBG:III-4\n\n#### Interpretation\nSRR6327887 is serotype Ia; it has some variants relative to the locus, which is why it has a `*`. Looking at `GBS-serotypes__fullgenes__GBS-SBG__results.txt`, we see that it has 24 SNPs and 1 indel (for a 0.358% divergence - i.e. 99.6% identical to the reference sequence (~6.7 kb)). As only one representative of each serotype is in the reference database, some divergence is not unexpected, and this appears to be a reliable call.\nSRR6327950 is serotype III, subtype 4.\n\n\n### Typing the LEE pathogenicity island of E. coli\n\nDetails can be found in [this Nature Microbiology paper](http://www.nature.com/articles/nmicrobiol201510).\n\nThe LEE typing database is based on analysis of >250 LEE-containing E. coli genomes and includes 7 loci (eae (i.e. intimin), tir, espA, espB, espD, espH, espZ). The data is provided as a MLST-style database, in which combinations of alleles are assigned to a LEE subtype, to facilitate a common nomenclature for LEE subtypes. However please note the database does not contain every known allele and is not intended to function as a typical MLST scheme. Rather, each sequence in the database represents a cluster of closely related alleles that have been assigned to the same locus type. So you will generally not get precise matches to a known allele, and this is not something to worry about - the goal is to identify the locus type and the overall LEE subtype. \n\nAlso note that the LEE scheme includes three distinct lineages: Lineage 1 consists of LEE subtypes 1-2; Lineage 2 consists of LEE subtypes 3-8; Lineage 3 consists of LEE subtypes 9-30. See the paper for more details. \n\nThe database files (sequences + MLST-style profile definitions) are in the SRST2 distribution under /data.\n\n#### Basic Usage \u2013 Typing E. coli LEE variants\n\n```\nsrst2 --input_pe strainA_1.fastq.gz strainA_2.fastq.gz --output strainA_LEE --log --mlst_db LEE_mlst.fasta --mlst_definitions LEE_STscheme.txt\n```\n\n#### Example\n\nNote these reads sets are each ~100 MB each, so you need to download 400 MB of test data to run this example\n\n```\nwget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR178/ERR178148/ERR178148_1.fastq.gz\nwget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR178/ERR178148/ERR178148_2.fastq.gz\nwget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR178/ERR178156/ERR178156_1.fastq.gz\nwget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR178/ERR178156/ERR178156_2.fastq.gz\n\nsrst2 --input_pe ERR178156*.fastq.gz ERR124656*.fastq.gz --output LEE --log --mlst_db LEE_mlst.fasta --mlst_definitions LEE_STscheme.txt\n```\n\nResults will be output in: `[prefix]__mlst__LEE_mlst__results.txt`\n\nOutput from the above example would appear in: `LEE__mlst__LEE_mlst__results.txt`\n\nSample | ST | eae | tir | espA | espB | espD | espH | espZ | mismatches | uncertainty | depth | maxMAF\n:---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---:\nERR178148 | 30* | 19 | 10* | 9* | 5* | 6* | 4* | 13* | tir-10/33snp3indel;espA-9/3snp;espB-5/4snp;espD-6/9snp;espH-4/1snp;espZ-13/3snp | - | 59.8217142857 | 0.285714285714\nERR178156 | 9* | 6* | 5* | 5* | 3* | 3* | 4* | 8 | eae-6/4snp;tir-5/18snp;espA-5/6snp;espB-3/4snp;espD-3/8snp;espH-4/3snp | - | 33.5062857143 | 0.444444444444\n\n#### Interpretation\n\nERR178148 and ERR178156 carry LEE subtypes 30 and 9 respectively, which both belong to LEE lineage 3. The imprecise matches are to be expected and can be taken as a confident assignment of LEE type.\n\n### Plotting output in R\n\nSome R functions are provided in scripts/plotSRST2data.R for plotting SRST2 output to produce images like those in the paper (e.g. Figure 8: http://www.genomemedicine.com/content/6/11/90/figure/F8)\n\nThese functions require the `ape` package to be installed.\n\nExample usage:\n\n```\n# load the functions in R\nsource(\"srst2/scripts/plotSRST2data.R\")\n\n1. EXAMPLE FROM FIGURE 8A (http://www.genomemedicine.com/content/6/11/90/figure/F8): viewing resistance genes in individual strains that have been analysed for MLST + resistance genes\n\n# read in a compiled MLST + genes table output by SRST2\nEf_JAMA<-read.delim(\"srst2/data/EfaeciumJAMA__compiledResults.txt\", stringsAsFactors = F)\n\n# Check column names. Sample names are in column 1 (strain_names=1 in the function call below), MLST data is in columns 2 to 9 (mlst_columns = 2:9), while gene presence/absence information is recorded in columns 13 to 31 (gene_columns = 13:31). \n\ncolnames(Ef_JAMA)\n [1] \"Sample\"         \"ST\"             \"AtpA\"           \"Ddl\"            \"Gdh\"            \"PurK\"          \n [7] \"Gyd\"            \"PstS\"           \"Adk\"            \"mismatches\"     \"uncertainty\"    \"depth\"         \n[13] \"Aac6.Aph2_AGly\" \"Aac6.Ii_AGly\"   \"Ant6.Ia_AGly\"   \"Aph3.III_AGly\"  \"Dfr_Tmt\"        \"ErmB_MLS\"      \n[19] \"ErmC_MLS\"       \"MsrC_MLS\"       \"Sat4A_AGly\"     \"TetL_Tet\"       \"TetM_Tet\"       \"TetU_Tet\"      \n[25] \"VanA_Gly\"       \"VanH.Pt_Gly\"    \"VanR.A_Gly\"     \"VanS.A_Gly\"     \"VanX.M_Gly\"     \"VanY.A_Gly\"    \n[31] \"VanZ.A_Gly\"    \n\n# Make a tree based on the MLST loci, and plot gene content as a matrix. \n# cluster=T turns on hierarchical clustering of the columns (=genes); labelHeight, infoWidth and treeWidth control the relative dimensions of the plotting areas available for the tree, printed MLST information, and gene labels.\n\ngeneContentPlot(m=Ef_JAMA, mlst_columns = 2:9, gene_columns = 13:31, strain_names=1, cluster=T, labelHeight=40, infoWidth=15, treeWidth=5)\n\n2. EXAMPLE FROM FIGURE 7C (http://www.genomemedicine.com/content/6/11/90/figure/F7): viewing summaries of resistance genes by ST, in a set of isolates that have been analysed for MLST + resistance genes\n\n# read in a compiled MLST + genes table output by SRST2\nEf_Howden<-read.delim(\"srst2/data/EfaeciumHowden__compiledResults.txt\", stringsAsFactors = F)\n\n# Make a tree of STs based on the MLST alleles and plot this; Group isolates by ST and calculate the number of strains in each ST that contain each resistance gene;  plot these counts as a heatmap. Note that barplots of the number of strains in each ST are also plotted to the right.\ngeneSTplot(d,mlst_columns=8:15,gene_columns=17:59,plot_type=\"count\",cluster=T)\n\n# Same as above but plot the rate of detection of each gene within each ST, not the raw counts\ngeneSTplot(d,mlst_columns=8:15,gene_columns=17:59,plot_type=\"rate\",cluster=T)\n\n# To suppress SNPs, i.e. collapse ST1 and ST1* into a single group for summarisation at the clonal complex level, set suppressSNPs=T.\n\n# To suppress uncertainty due to low depth, i.e. collapse ST1 and ST1? into a single group for summarisation at the clonal complex level, set suppressUncertainty=T.\n```\n\nNote, heatmap colours can be set via the `matrix.colours` parameter in both of these functions. The default value is matrix.colours=colorRampPalette(c(\"white\",\"yellow\",\"blue\"),space=\"rgb\")(100), i.e. white=0% gene frequency, yellow = 50% and blue = 100%.\n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "BASH12*",
        "parent_header": [
          "More basic usage examples"
        ],
        "type": "Text_excerpt",
        "value": "# SRST2\n\nShort Read Sequence Typing for Bacterial Pathogens\n\nThis program is designed to take Illumina sequence data, a MLST database and/or a database\nof gene sequences (e.g. resistance genes, virulence genes, etc) and report the presence of\nSTs and/or reference genes.\n\nAuthors - Michael Inouye, Harriet Dashnow, Bernie Pope, Ryan Wick, Kathryn Holt (University of Melbourne)\n\t\t\nHow to cite - The peer-reviewed open-access paper is available in Genome Medicine: http://genomemedicine.com/content/6/11/90\n\nStory-behind-the-paper is [here](http://holtlab.net/2014/12/27/behind-the-paper-srst2-for-short-read-sequence-typing-of-bacterial-pathogens/)\n\t\t\nProblems? Please post an issue here in github: https://github.com/katholt/srst2/issues.\n\nTo be notifed of updates, join the SRST2 google group at https://groups.google.com/forum/#!forum/srst2.\n\nContents\n----\n[Current release](https://github.com/katholt/srst2#current-release)\n\n[Installation](https://github.com/katholt/srst2#installation)\n\n[Basic usage - MLST](https://github.com/katholt/srst2#basic-usage---mlst)\n\n[Basic usage - Resistance genes](https://github.com/katholt/srst2#basic-usage---resistance-genes)\n\n[All usage options](https://github.com/katholt/srst2#all-usage-options)\n\n[Input read formats and options](https://github.com/katholt/srst2#input-read-formats-and-options)\n\n[MLST Database format](https://github.com/katholt/srst2#mlst-database-format)\n\n[Gene databases](https://github.com/katholt/srst2#gene-databases)\n\n[Output files](https://github.com/katholt/srst2#output-files)\n\n* [MLST results](https://github.com/katholt/srst2#mlst-results)\n\n* [Gene typing](https://github.com/katholt/srst2#gene-typing)\n\n* [Combined results](https://github.com/katholt/srst2#combined-results)\n\n* [Mapping results](https://github.com/katholt/srst2#mapping-results)\n\n[Printing consensus sequences](https://github.com/katholt/srst2#printing-consensus-sequences)\n\n[More basic usage examples](https://github.com/katholt/srst2#more-basic-usage-examples)\n\n[Compile results from completed runs](https://github.com/katholt/srst2#compile-results-from-completed-runs)\n\n[Running lots of jobs and compiling results](https://github.com/katholt/srst2#running-lots-of-jobs-and-compiling-results)\n\n[Known issues](https://github.com/katholt/srst2#known-issues)\n\n[Generating SRST2-compatible clustered database from raw sequences](https://github.com/katholt/srst2#generating-srst2-compatible-clustered-database-from-raw-sequences)\n\n* [Using the VFBD Virulence Factor Database with SRST2](https://github.com/katholt/srst2#using-the-vfdb-virulence-factor-database-with-srst2)\n\n[Preformatted databases for specialist typing with SRST2](https://github.com/katholt/srst2#preformatted-databases-for-specialist-typing-with-srst2)\n\n* [Using the EcOH database for serotyping E. coli with SRST2](https://github.com/katholt/srst2#using-the-ecoh-database-for-serotyping-e-coli-with-srst2)\n\n* [Using the GBS-SBG database for serotyping Streptococcus agalactiae (Group B Streptococcus) with SRST2](https://github.com/katholt/srst2#using-the-gbs-sbg-database-for-serotyping-streptococcus-agalactiae-group-b-streptococcus-with-srst2)\n\n* [Typing the LEE pathogenicity island of E. coli](https://github.com/katholt/srst2#typing-the-lee-pathogenicity-island-of-e-coli)\n\n[Plotting output in R](https://github.com/katholt/srst2#plotting-output-in-r)\n\n[Example - Shigella sonnei public data](example.txt)\n\n\nCurrent release - v0.2.0 - July 28, 2016\n-----\n\nDependencies:\n* python (v2.7.5 or later)\n* scipy, numpy   http://www.scipy.org/install.html\n* bowtie2 (v2.1.0 or later)   http://bowtie-bio.sourceforge.net/bowtie2/index.shtml\n* SAMtools v0.1.18   https://sourceforge.net/projects/samtools/files/samtools/0.1.18/ (NOTE: later versions can be used, but better results are obtained with v0.1.18, especially at low read depths (<20x))\n\n\nUpdates in current master branch (not yet in a release)\n-----\n\n1. Added new AMR gene database CARD_v3.0.8_SRST2.fasta, a curated version of CARD v3.0.8 with some fixes and additions based on comparisons with the ARG-Annot, ResFinder and NCBI AMR databases. This was done my Margaret Lam for the Kleborate paper, see details of modifications vs CARD v3.0.8 [here](https://figshare.com/articles/dataset/CARD_v3_0_8_AMR_database_curation_for_Kleborate/13256759)).\n2. Added to readme some instructions for using SRST2 to serotype Group B Streptococcus (S. agalactiae) using the GBS-SBG database, available [here](https://github.com/swainechen/GBS-SBG) - thanks to Swaine Chen and colleagues for this.\n\n-----------\n\nUpdates in v0.2.0\n\n1. Some improvements to allele calling, particularly for Klebsiella MLST locus mdh, kindly contributed by [andreyto](https://github.com/andreyto). Includes rejection of read alignments that are clipped on both ends (likely to be spurious) and minor bug fixes associated with depth calculations.\n2. Updated E. coli serotype database to remove duplicate sequences.\n3. Added mcr-2 colistin resistance gene to `ARGannot.r1.fasta` resistance gene database.\n4. A `--threads` option was added, which makes SRST2 call Bowtie and Samtools with their threading options. The resulting speed up is mostly due to the Bowtie mapping step which parallelises very well.\n5. The `VFDB_cdhit_to_csv.py` script was updated to work with the new VFDB FASTA format.\n6. Versions of Bowtie2 up to 2.2.9 are now supported. Samtools v1.3 can now be used as well, however v0.1.18 is still the recommended version (for reasons discussed below).\n7. Added `scripts/qsub_srst2.py` to generate SRST2 jobs for the Grid Engine (qsub) scheduling system (http://gridscheduler.sourceforge.net/). Thanks to Ramon Fallon from the University of St Andrews for putting this together. Some of the specifics are set up for his cluster, so modifications may be necessary to make it run properly on a different cluster using Grid Engine.\n8. Various other small bug fixes!\n\n-----------\n\nUpdates in v0.1.8\n\n1. /data directory includes files for subtyping of the LEE pathogenicity island of E. coli, as per [Ingle et al, 2016, Nature Microbiology](http://www.nature.com/articles/nmicrobiol201510). [Instructions below](https://github.com/katholt/srst2#typing-the-lee-pathogenicity-island-of-e-coli)\n2. Resistance gene database updates:\n  * Fixed `ARGannot.r1.fasta` to include proper mcr1 DNA sequence.\n  * Added columns to the `ARGannot_clustered80.csv` table, to indicate classes of beta-lactamases included in the `ARGannot.r1.fasta` database according to the [NCBI beta-lactamase resource](http://www.ncbi.nlm.nih.gov/pathogens/beta-lactamase-data-resources/) (new location for the Lahey list).\n3. Fixed some issues with handling of missing data (i.e. where there were no hits to MLST and/or no hits to genes) when compiling results into a table via `--prev_output`. This could result in misalignment of gene columns in previous versions.\n\n-----------\n\nUpdates in v0.1.7\n\n1. Use the following environment variables to specify your prefered samtools and bowtie2 executables (thanks to Ben Taylor for this):\n  * SRST2_SAMTOOLS\n  * SRST2_BOWTIE2\n  * SRST2_BOWTIE2_BUILD\n2. Added mcr1, the plasmid-borne colisting resistance gene to the included ARG-Annot-based resistance gene DB (`ARGannot.r1.fasta`)\n3. Fixed a problem with writing consensus files that occurred when a directory structure was specified using `--output` (bug introduced in v0.1.6)\n\n-----------\n\nUpdates in v0.1.6\n\n1. The original validation of SRST2 (see [paper](http://genomemedicine.com/content/6/11/90)) was performed with bowtie2 version 2.1.0 and samtools v0.1.18.\n  * bowtie2: SRST2 has now been tested on the tutorial example and other test data sets using the latest versions of bowtie2, 2.2.3 and 2.2.4, which gave identical results to those obtained with bowtie2 v2.1.0. Therefore, the SRST2 code will now run if any of these versions of bowtie2 are available: 2.1.0, 2.2.3 or 2.2.4. \n  * samtools: SRST2 has now been tested on the Staph & Salmonella test data sets used in the paper, and will work with newer samtools versions (tested up to v1.1). Note however that SRST2 still works best with [samtools v0.1.18](https://sourceforge.net/projects/samtools/files/samtools/0.1.18/), due to small changes in the mapping algorithms in later versions that result in some loss of reads at the ends of alleles. This has most impact at low read depths, however we do recommend using v0.1.18 for optimum results.\n2. Minor fixes to the ARG-Annot database of resistance genes, including removal of duplicate sequences and fixes to gene names (thanks to Wan Yu for this). Old version remains unchanged for backwards compatibility, but we recommend using the revised version (located in `data/ARGannot.r1.fasta`).\n3. Added EcOH database for serotyping E. coli (thanks to Danielle Ingle for this). See [Using the EcOH database for serotyping E. coli with SRST2](https://github.com/katholt/srst2#using-the-ecoh-database-for-serotyping-e-coli-with-srst2) and [this MGen paper](http://mgen.microbiologyresearch.org/content/journal/mgen/10.1099/mgen.0.000064).\n4. Fixed a problem where, when analysing multiple read sets in one SRST2 call against a gene database in which cluster ids don't match gene symbols, individual gene clusters appear multiple times in the output. The compile function was unaffected and remains unchanged.\n5. Fixed behaviour so that including directory paths in `--output` parameter works (thanks to nyunyun for contributing most of this fix). E.g. `--output test_dir/test` will create output files prefixed with `test`, located in `test_dir/`, and all SRST2 functions should work correctly including consensus allele calling. If `test_dir/` doesn't exist, we attempt to create it; if this is not possible the user is alerted and SRST2 stops.\n6. Fixed problem when using a gene database with a simple fasta header (ie not clustered for SRST2; note best results are achieved by pre-clusering your sequence database beforehand) (thanks to cglambert for this one).\n7. Fixes contributed by ppcherng (thanks!): \n  * Fixed KeyErrors that occured when a given seqID was not found in the seq2cluster dictionary, which tended to happen if the FASTA file (gene database) contained empty entries that only have a header and no sequence.\n  * Note v0.1.5 included addition of ppcherng's utility scripts to help automate creation of SRST2-compatible gene databases from VFDB.\n8. Added new parameter `--samtools_args` to pass additional options to samtools mpileup (e.g. SionBayliss requested this in order to use `-A` option in samtools mpileup to include anomalous reads).\n9. Fixed problem with consensus sequence reporting of truncated alleles (issue #39).\n10. Added basic instructions for the R scripts provided for plotting output. See [Plotting output in R](https://github.com/katholt/srst2#plotting-output-in-r)\n\n-----------\n\nUpdates in v0.1.5\n\n1. Optionally switch on reporting of pileups and consensus sequences (fasta) for novel alleles (`--report_new_consensus`) or for all alleles (`--report_all_consensus`). See [Printing consensus sequences](https://github.com/katholt/srst2#printing-consensus-sequences)\n2. Post-process consensus sequences from a set of strains, to generate one file per locus containing all/new consensus sequences. See [Collate consensus sequences](https://github.com/katholt/srst2/blob/master/README.md#collate-consensus-sequences-output-by-srst2-run-on-multiple-strains--loci-into-one-file-per-locus)\n3. Some enhancements to getmlst.py script to handle some more unusual scheme names (force download of specific schemes that have non-unique  names, handle forward slashes in names).\n4. Fixed an issue where, if multiple readsets analysed in serial in a SRST2 run, the fullgenes report would only contain the results for the last readset. Fullgenes report now contains gene output for all readsets.\n5. Added option (`--merge_paired`) to accommodate cases where users have multiple read sets for the same sample. If this flag is used, SRST2 will assume that all the input reads belong to the same sample, and outputs will be named as `[prefix]__combined.xxx`, where SRST2 was run using `--output [prefix]`. If the flag is not used, SRST2 will operate as usual and assume that each read pair is a new sample, with output files named as `[prefix]__[sample].xxx`, where [sample] is taken from the base name of the reads fastq files. Note that if you have lots of multi-run read sets to analyse, the ease of job submission will depend heavily on how your files are named and you will need to figure out your own approach to manage this (ie there is no way to submit multiple sets of multiple reads).\n6. The original validation of SRST2 (see [paper](http://genomemedicine.com/content/6/11/90)) was performed with bowtie2 version 2.1.0. SRST2 has now been tested on the tutorial example using the latest versions of bowtie2, 2.2.3 and 2.2.4, which gave identical results to those obtained with bowtie2 v2.1.0. Therefore, the SRST2 code will now run if any of these versions of bowtie2 are available: 2.1.0, 2.2.3 or 2.2.4. (Note however that there are still incompatibilities with the recent release of samtools, so you will need to stick to [samtools v0.1.18](https://sourceforge.net/projects/samtools/files/samtools/0.1.18/) unless you want to modify the SRST2 code to allow later versions, and are happy with a dramatic loss in accuracy!)\n7. Thanks to ppcherng for adding utility scripts to help automate creation of SRST2-compatible gene databases from VFDB.\n\n-----------\n\nUpdates in v0.1.4\n\n1. No longer store sam and unsorted bam (can be retained via the `--keep_interim_alignment` flag)\n2. Added options to specify a maximum number of mismatches to allow during mapping; this is specified separately for mlst and genes, so that it is possible to relax the stringency of gene detection in the same run as a high-accuracy MLST test.\n  * `--mlst_max_mismatch`\n  * `--gene_max_mismatch`\n  * Default value for both is 10 mismatches.\n3. The highest minor allele frequency (MAF) of variants encountered in the alignment is now calculated and reported for each allele (in the scores file) and also at the gene level and ST level, to facilitate checking for mixed/contaminated read sets. \nThis value is in the range 0 -> 0.5; with e.g. 0 indicating no variation between reads at any aligned base (i.e. at all positions in the alignment, all aligned reads agree on the same base call; although this agreed base may be different from the reference); and 0.25 indicating there is at least one position in the alignment at which all reads do not agree, and the least common variant (either match or mismatch to the reference) is present in 25% of reads. This value is printed, for all alleles, to the scores file. Note this is different to the \u2018LeastConfident\u2019 information printed to scores, which presents the strongest evidence for mismatch *compared to the reference*, i.e. between 0 -> 1.\nThe highest such value for each gene/cluster/locus is reported in the fullgenes output table.\nThe highest such value across all MLST loci is reported in the mlst output table.\nNote that all compiled reports will now include a maxMAF column; if you provide MLST or compiled reports from previous versions without this columns, the value \u201cNC\u201d will be inserted in the maxMAF column to indicate \u201cnot calculated\u201d. This ensures the updated SRST2 (v0.1.4+) is backwards compatible with previous SRST2 outputs; do be aware though that the older versions of SRST2 (<v0.1.4) will not be forwards-compatible with output generated by more recent versions (v0.14 onwards).\n4. Added R code for plotting SRST2 output in R (plotSRST2data.R). Instructions will be added to the read me.\n5. Added formatted versions of the ARG-Annot resistance gene database, PlasmidFinder database and 18 plasmid replicon sequences to the /data directory. See /data/README.md for details and citations. It is recommended to use `ARGannot.r1.fasta` for detection of acquired resistance genes.\n\n-----------\n \nUpdates in v0.1.3\n\n1. Fixed a bug that occurred while trying to type genes from a user-supplied database (see issue #5, thanks to Scott Long)\n2. Fixed a bug in gene detection reporting - genes are now correctly reported by cluster, rather than by gene symbol (see issue #7)\n3. Added maximum divergence option for reporting (`--max_divergence`), default is now to report only hits with <10% divergence from the database (see issue #8)\n4. added parameter to pass to bowtie2 parameter `-u N` to stop mapping after the first N reads. Default behaviour remains to map all reads. However, for large read sets (e.g. >100x), extra reads do not help and merely increase the time taken for mapping and scoring, and you may want to limit to the first million reads (100x of a 2 Mbp genome) using `--stop_after 1000000`.\n\n\n# Installation\n\n### 1 - Install dependencies\n\n* python (v2.7.5)\n* scipy http://www.scipy.org/install.html\n* bowtie2 v2.1.0 http://bowtie-bio.sourceforge.net/bowtie2/index.shtml\n* SAMtools v0.1.18 https://sourceforge.net/projects/samtools/files/samtools/0.1.18/ (NOTE 0.1.19 DOES NOT WORK)\n\nN.B. If you have multiple versions of samtools or bowtie2 installed, you can pick which one `srst2` or `slurm_srst2` should use by setting the following environment variables.\n\n* `SRST2_SAMTOOLS`\n* `SRST2_BOWTIE2`\n* `SRST2_BOWTIE2_BUILD`\n\nIf these aren't set or are missing, they will default to looking in your `PATH` for `samtools`, `bowtie2` and `bowtie2-build`. The exception is `SRST2_BOWTIE2_BUILD` which, if it is not set or missing, will try adding `-build` to `SRST2_BOWTIE2` if it exists, otherwise it defaults to looking in your `PATH`\n\n\n### 2 - Get and install the code\n\nMake sure you have installed [git](https://help.github.com/articles/set-up-git) and [pip](http://www.pip-installer.org/).\n\nClone the git repository: `git clone https://github.com/katholt/srst2`\n\nand then install with pip: `pip install srst2/`\n\nOR do both at once: `sudo pip install git+https://github.com/katholt/srst2`\n\n### 3 - Test that the programs are installed properly\n\n```\nsrst2 --version\ngetmlst.py -h\nslurm_srst2.py -h\n```\n\nThe downloaded directory also contains things that might be useful for SRST2 users:\n\n* `data/` contains a databases for resistance genes and plasmids\n* `database_clustering/` contains scripts and instructions for formatting of other gene databases for use with SRST2\n* [example.txt](example.txt) contains a tutorial/example on running SRST2 using public data \n\n\n\n# Basic usage - MLST\n\n### 1 - Gather your input files\n\n(i) sequence reads (this example uses paired reads in gzipped fastq format, see below for options)\n\n(ii) a fasta sequence database to match to. For MLST, this means a fasta file of all allele sequences. If you want to assign STs, you also need a tab-delim file which defines the ST profiles as a combination of alleles. You can retrieve these files automatically from pubmlst.org/data/ using the script provided:\n\n```\ngetmlst.py --species 'Escherichia coli#1'\n```\n\n### 2 - Run MLST\n\n```\nsrst2 --input_pe strainA_1.fastq.gz strainA_2.fastq.gz --output strainA_test --log --mlst_db Escherichia_coli#1.fasta --mlst_definitions profiles_csv --mlst_delimiter _\n```\n\n### 3 - Check the outputs\n\n(i) MLST results are output in: `strainA_test__mlst__Escherichia_coli#1__results.txt`\n\nSample | ST | adk | fumC | gyrB | icd | mdh | purA | recA | mismatches | uncertainty | depth | maxMAF\n:---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---:\nstrainA | 152 | 11 | 63 | 7 | 1 | 14 | 7 | 7 | 0 | - | 25.8319955826 | 0.125\n\n\n# Basic usage - Resistance genes \n\n### 1 - Gather your input files\n\n(i) sequence reads (this example uses paired reads in gzipped fastq format, see below for options)\n\n(ii) a fasta sequence database to match to. For resistance genes, this means a fasta file of all the resistance genes/alleles that you want to screen for, clustered into gene groups. Some suitable databases are distributed with SRST2 (in the /data directory); we recommend using `/data/CARD_v3.0.8_SRST2.fasta` for acquired resistance genes (note this latest version has been added since the last SRST2 release so you may need to download it directly from the /data directory in this github repository).\n\n### 2 - Run gene detection\n\n```\nsrst2 --input_pe strainA_1.fastq.gz strainA_2.fastq.gz --output strainA_test --log --gene_db CARD_v3.0.8_SRST2.fasta\n```\n\n### 3 - Check the outputs\n\n(i) Gene detection results are output in: `strainA_test__genes__resistance__results.txt`\n\nSample | aadA | dfrA | sul2 | tet(B)\n:---: | :---: | :---: | :---: | :---:\nstrainA | aadA1-5 | dfrA1_1 | sul2_2 | tet(B)_4\n\n\n# All usage options\n\n```\nsrst2 -h\n\nSRST2 - Short Read Sequence Typer (v2)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --version             show program's version number and exit\n  --input_se INPUT_SE [INPUT_SE ...]\n                        Single end read file(s) for analysing (may be gzipped)\n  --input_pe INPUT_PE [INPUT_PE ...]\n                        Paired end read files for analysing (may be gzipped)\n  --merge_paired        Switch on if all the input read sets belong to a\n                        single sample, and you want to merge their data to get\n                        a single result\n  --forward FORWARD     Designator for forward reads (only used if NOT in\n                        MiSeq format sample_S1_L001_R1_001.fastq.gz; otherwise\n                        default is _1, i.e. expect forward reads as\n                        sample_1.fastq.gz)\n  --reverse REVERSE     Designator for reverse reads (only used if NOT in\n                        MiSeq format sample_S1_L001_R2_001.fastq.gz; otherwise\n                        default is _2, i.e. expect forward reads as\n                        sample_2.fastq.gz\n  --read_type {q,qseq,f}\n                        Read file type (for bowtie2; default is q=fastq; other\n                        options: qseq=solexa, f=fasta).\n  --mlst_db MLST_DB     Fasta file of MLST alleles (optional)\n  --mlst_delimiter MLST_DELIMITER\n                        Character(s) separating gene name from allele number\n                        in MLST database (default \"-\", as in arcc-1)\n  --mlst_definitions MLST_DEFINITIONS\n                        ST definitions for MLST scheme (required if mlst_db\n                        supplied and you want to calculate STs)\n  --mlst_max_mismatch MLST_MAX_MISMATCH\n                        Maximum number of mismatches per read for MLST allele\n                        calling (default 10)\n  --gene_db GENE_DB [GENE_DB ...]\n                        Fasta file/s for gene databases (optional)\n  --no_gene_details     Switch OFF verbose reporting of gene typing\n  --gene_max_mismatch GENE_MAX_MISMATCH\n                        Maximum number of mismatches per read for gene\n                        detection and allele calling (default 10)\n  --min_coverage MIN_COVERAGE\n                        Minimum %coverage cutoff for gene reporting (default\n                        90)\n  --max_divergence MAX_DIVERGENCE\n                        Maximum %divergence cutoff for gene reporting (default\n                        10)\n  --min_depth MIN_DEPTH\n                        Minimum mean depth to flag as dubious allele call\n                        (default 5)\n  --min_edge_depth MIN_EDGE_DEPTH\n                        Minimum edge depth to flag as dubious allele call\n                        (default 2)\n  --prob_err PROB_ERR   Probability of sequencing error (default 0.01)\n  --truncation_score_tolerance TRUNCATION_SCORE_TOLERANCE\n                        % increase in score allowed to choose non-truncated\n                        allele\n  --stop_after STOP_AFTER\n                        Stop mapping after this number of reads have been\n                        mapped (otherwise map all)\n  --other OTHER         Other arguments to pass to bowtie2 (must be escaped,\n                        e.g. \"\\--no-mixed\".\n  --max_unaligned_overlap MAX_UNALIGNED_OVERLAP\n                        Read discarded from alignment if either of its ends\n                        has unaligned overlap with the reference that is\n                        longer than this value (default 10)\n  --mapq MAPQ           Samtools -q parameter (default 1)\n  --baseq BASEQ         Samtools -Q parameter (default 20)\n  --samtools_args SAMTOOLS_ARGS\n                        Other arguments to pass to samtools mpileup (must be\n                        escaped, e.g. \"\\-A\").\n  --output OUTPUT       Prefix for srst2 output files\n  --log                 Switch ON logging to file (otherwise log to stdout)\n  --save_scores         Switch ON verbose reporting of all scores\n  --report_new_consensus\n                        If a matching alleles is not found, report the\n                        consensus allele. Note, only SNP differences are\n                        considered, not indels.\n  --report_all_consensus\n                        Report the consensus allele for the most likely\n                        allele. Note, only SNP differences are considered, not\n                        indels.\n  --use_existing_bowtie2_sam\n                        Use existing SAM file generated by Bowtie2 if\n                        available, otherwise they will be generated\n  --use_existing_pileup\n                        Use existing pileups if available, otherwise they will\n                        be generated\n  --use_existing_scores\n                        Use existing scores files if available, otherwise they\n                        will be generated\n  --keep_interim_alignment\n                        Keep interim files (sam & unsorted bam), otherwise\n                        they will be deleted after sorted bam is created\n  --threads THREADS     Use multiple threads in Bowtie and Samtools\n  --prev_output PREV_OUTPUT [PREV_OUTPUT ...]\n                        SRST2 results files to compile (any new results from\n                        this run will also be incorporated)\n```\n\n# Input read formats and options\n\nAny number of readsets can be provided using `--input_se` (for single end reads) and/or `--input_pe` (for paired end reads). You can provide both types of reads at once. Note however that if you do this, each readset will be typed one by one (in serial). So if it takes 2 minutes to type each read set, and you provide 10 read sets, it will take 20 minutes to get your results. The better way to proces lots of samples quickly is to give each one its own SRST2 job (e.g. submitted simultaneously to your job scheduler or server); then compile the results into a single report using `srst2 --prev_output *results.txt --output all`. That way each readset's 2 minutes of analysis is occurring in parallel on different nodes, and you'll get your results for all 10 samples in 2 minutes rather than 20.\n\n### Read formats \nReads can be in any format readable by bowtie2. The format is passed on to the bowtie2 command via the `--read_type` flag in SRST2. The default format is fastq (passed to bowtie 2 as q); other options are qseq=solexa, f=fasta. So to use fasta reads, you would need to tell SRST2 this via `--read_type f`.\n\nReads may be gzipped.\n\n### Read names \nSRST2 can parse Illumina MiSeq reads files; we assume that files with names in the format `XXX_S1_L001_R1_001.fastq.gz` and `XXX_S1_L001_R2_001.fastq.gz` are the forward and reverse reads from a sample named \"XXX\". So, you can simply use `srst2 --input_pe XXX_S1_L001_R1_001.fastq.gz XXX_S1_L001_R2_001.fastq.gz` and SRST2 will recognise these as forward and reverse reads of a sample named \"XXX\". If you have single rather than paired MiSeq reads, you would use `srst2 --input_se XXX_S1_L001_R1_001.fastq.gz`.\n\n### Paired reads\nIf you have paired reads that are named in some way other than the Illumina MiSeq format, e.g. from the SRA or ENA public databases, you need to tell SRST2 how to pass these to bowtie2.\nbowtie2 requires forward and reverse reads to be supplied in separate files, e.g `strainA_1.fastq.gz` and `strainA_2.fastq.gz`. SRST2 attempts to sort reads supplied via `--input_pe` into read pairs, based on the suffix (_1, _2 in this example) that occurs before the file extension (.fastq.gz in this example). So if you supplied `--input_pe strainA_1.fastq.gz strainB_1.fastq.gz strainA_2.fastq.gz strainB_2.fastq.gz`, SRST2 would sort these into two pairs (`strainA_1.fastq.gz`, `strainA_2.fastq.gz`) and (`strainB_1.fastq.gz`, `strainB_2.fastq.gz`) and pass each pair on to bowtie2 for mapping. By default, the suffixes are assumed to be `_1` for forward reads and `_2` for reverse reads, but you can tell SRST2 if you have other conventions, via `--forward` and `--reverse`. E.g. if your files were named `strainA_read1.fastq.gz` and `strainA_read2.fastq.gz`, you would use these commands: `--input_pe strainA_read1.fastq.gz strainA_read2.fastq.gz --forward _read1 --reverse _read2`. \n\n### Sample names\nSample names are taken from the first part of the read file name (before the suffix if you have paired reads). E.g. `strainA_1.fastq.gz` is assumed to belong to a sample called \"strainA\"; `strainB_C_1.fastq.gz` would be assumed to belong to a sample called \"strainB_C\". These sample names will be used to name all output files, and will appear in the results files.\n\n### If you have multiple read sets for the same sample\nThe flag `--merge_paired` tells SRST2 to assume that all the input reads belong to the same sample. Outputs will be named as `[prefix]__combined.xxx`, where SRST2 was run using `--output [prefix]`. If this flag is not used, SRST2 will operate as usual and assume that each read pair is a new sample, with output files named as `[prefix]__[sample].xxx`, where [sample] is taken from the base name of the reads fastq files. Note that if you have lots of multi-run read sets to analyse, the ease of job submission will depend heavily on how your files are named and you will need to figure out your own approach to manage this (ie there is no way to submit multiple sets of multiple reads).\n\n\n# MLST Database format\n\nMLST databases are specified by allele sequences, and a profiles table. These can be downloaded from the public databases, ready to use with SRST2, using the provided script getmlst.py (see above).\n\n### Allele sequences file, fasta format. \n\n`--mlst_db alleles.fasta`\n\nThis should contain ALL allele sequences for the MLST scheme; i.e. if there are 7 loci in the scheme, then the sequences of all alleles from all 7 loci should appear together in this file. If you have one file per locus, just cat these together first. If you use getmlst.py, this is done for you.\n\n`--mlst_delimiter '-'`\n\nThe names of the alleles (i.e. the fasta headers) are critical for a functioning MLST scheme and therefore for correct calling of STs. There are two key components to every fasta header: the name of the locus (e.g. in E. coli these are adk, fumC, gyrB, icd, mdh, purA, recA) and the number assigned to the allele (1, 2, 3 etc). These are usually separated by a delimiter like '-' or '_'; e.g. in the E. coli scheme, alleles are named adk-1, fumC-10, etc. For ST calling to work properly, SRST2 needs to know what the delimiter is. By default, we assume it is '-' as this is the most common; however some schemes use '_' (e.g. in the C. difficile scheme, the first allele is 'adk_1', so you would need to set `--mlst_delimiter '_'` on the SRST2 command line). If you use getmlst.py, it will remind you of this and try to guess for you what the most likely delimiter is.\n\n### MLST definitions file, tab delimited format.\n\n`--mlst_definitions`\n\nThis is the file that tells you the ST number that is assigned to known combinations of alleles. Column 1 is the ST, and subsequent columns are the loci that make up the scheme. The names of these loci must match the allele names in the sequences database, e.g. adk, fumC, gyrB, icd, mdh, purA, recA in the E. coli scheme. If you download data from pubmlst this should not be a problem. Sometimes there are additional columns in this file, e.g. a column assigning STs to clonal complexes. SRST2 will ignore any columns that don't match gene names found in the allele sequences file.\n\n# Gene databases\n\nIn addition to MLST, SRST2 can do gene/allele detection. This works by mapping reads to each of the reference sequences in a fasta file(s) (provided through `--gene_db`) and reporting details of all genes that are covered above a certain level (`--min_coverage`, 90% by default). \n\nIf the input database contains different alelles of the same gene, SRST2 can report just the best matching allele for that gene (much like with MLST we report the best matching allele for each locus in the scheme). This makes the output manageable, as you will get one column per gene/locus (e.g. blaCTX-M) which reports the specific allele that was called in each sample (e.g. blaCTX-M-15 in sample A, blaCTX-M-13 in sample B).\n\nWe have provided some databases of resistance genes, plasmid genes, and serotyping for E. coli and Group B Streptococcus (see [Preformatted databases for specialist typing with SRST2](https://github.com/katholt/srst2#preformatted-databases-for-specialist-typing-with-srst2) below for details on using these databases).\n\nYou can however format any sequence set for screening with SRST2. [See instructions below](https://github.com/katholt/srst2#generating-srst2-compatible-clustered-database-from-raw-sequences).\n\n# Output files\n\n### MLST results\n\nIf MLST sequences and profiles were provided, STs will be printed in tab-delim format to a file called `[outputprefix]__mlst__[db]__results.txt`, e.g.: `strainArun1__mlst__Escherichia_coli__results.txt`.\n\nThe format looks like this:\n\nSample | ST | adk | fumC | gyrB | icd | mdh | purA | recA | mismatches | uncertainty | depth | maxMAF\n:---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---:\nstrainA | 1502 | 6 | 63 | 7 | 1 | 14 | 7 | 7 | 0 | - | 12.3771855735 | 0.275\n\nEach locus has a column in which the best scoring allele number is printed. \n\n\\* indicates the best scoring allele has >=1 mismatch (SNP or indel, according to majority rules consensus of the aligned reads vs the allele sequence). Details of the mismatches are given in the mismatches column. This often means you have a novel allele. \n\n? indicates uncertainty in the result because the best scoring allele has some low-depth bases; either the the first or last 2 bases of the allele had <N reads mapped, or a truncation was called in which neigbhbouring bases were coverd with <N reads, or the average depth across the whole allele was <X. N is set by the parameter `--min_edge_depth` (default 2), X is set by `--min_depth` (default 5). The source of the uncertainty is printed to the uncertainty column. \n\n\\- indicates that no allele could be assigned (generally means there were no alleles that were >90% covered by reads) \n\nIf the combination of these alleles appears in the ST definitions file provided by `--mlst_definitions`, this ST will be printed in the ST column. \"NF\" indicates the allele combination was not found; \"ND\" indicates ST calculations were not done (because no ST definitions were provided). Here, * next to the ST indicates that there were mismatches against at least one of the alleles. This suggests that you have a novel variant of this ST rather than a precise match to this ST. ? indicates that there was uncertainty in at least one of the alleles. In all cases, the ST is calculated using the best scoring alleles, whether or not there are mismatches or uncertainty in those calls.\n\nThe *mismatches* column gives details of any mismatches (defined by majority rules consensus of the aligned reads vs the allele sequence) against the top scoring allele that is reported in the corresponding locus column. Possibilities are: (i) snps, adk-1/1snp indicates there was 1 SNP against the adk-1 allele; (ii) indels, adk-1/2indel indicates there were 1 indels (insertion or deletion calls in the alignment); (iii) holes, adk-1/5holes indicates there were 5 sections of the allele sequence that were not covered in the alignment and pileup (e.g. due to truncation at the start or end of the gene, or large deletions within the gene).\n\nThe *uncertainty* column gives details of parts of the top scoring alleles for which the depth of coverage was too low to give confidence in the result, this may be zero or any number up to the specified cutoff levels set via `--min_edge_depth` and `--min_depth`. Possibilities are considered in this order: (i) edge depth, adk-1/edge1.0 indicates that the mean read depth across either the first 2 or last 2 bases of the assigned allele was 1.0; this is monitored particularly because coverage at the ends of the allele sequences is dependent on bowtie2 to properly map reads that overhang the ends of the allele sequences, which is not as confident as when the whole length of a read maps within the gene (reported if this value is below the cutoff specified (default `--min_edge_depth 2`), low values can be interpreted as indicating uncertainty in the result as we can\u2019t confidently distinguish alleles that differ at these low-covered bases); (ii) truncations, adk-1/del1.0 indicates that a truncation or large deletion was called for which the neighbouring 2 bases were covered to depth 1.0, this can be interpreted as indicating there is only very weak evidence for the deletion, as it is likely just due to random decline in coverage at this point (reported if this value is below the cutoff specified (default `--min_edge_depth 2`); (iii) average depth, adk-1/depth3.5 indicates that the mean read depth across the length of the assigned allele was 3.5 (reported if this value is below the cutoff specified, which by default is `--min_depth 5`)\n\nThe *depth* column indicates the mean read depth across the length of all alleles which were assigned a top scoring allele number (i.e. excluding any which are recorded as '-'). So if there are 7 loci with alleles called, this number represents the mean read depth across those 7 loci. If say, 2 of the 7 alleles were not called (recorded as \u2018-\u2019), the mean depth is that of the 5 loci that were called.\n\nThe *maxMAF* column reports the highest minor allele frequency (MAF) of variants encountered across the MLST locus alignments. This value is in the range 0 -> 0.5; with e.g. 0 indicating no variation between reads at any aligned base (i.e. at all positions in the alignment, all aligned reads agree on the same base call; although this agreed base may be different from the reference); and 0.25 indicating there is at least one position in the alignment at which all reads do not agree, and the least common variant (either match or mismatch to the reference) is present in 25% of reads. This value is printed, for all alleles, to the scores file; in the MLST file, the value reported is the highest MAF encountered across the MLST loci.\n\n------------\n### Gene typing\n\nGene typing results files report the details of sequences provided in fasta files via `--genes_db` that are detected above the minimum %coverage theshold set by `--min_coverage` (default 90).\n\nTwo output files are produced:\n\n1 - A detailed report, `[outputprefix]__fullgenes__[db]__results.txt`, with one row per gene per sample:\n\nSample | DB | gene | allele | coverage | depth | diffs | uncertainty | cluster | seqid | annotation\n:---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---:\nstrainA | resistance | dfrA | dfrA1_1 | 100.0 | 6.79368421053 | | edge1.5 | 590 | 137 | \nstrainA | resistance | aadA | aadA1-5 | 100.0 | 10.6303797468 | | | 162 | 1631 | \nstrainA | resistance | sul2 | sul2_9 | 100.0 | 79.01992966 | | | 265 | 1763 | \nstrainA | resistance | blaTEM | blaTEM-1_5 | 100.0 | 70.8955916473 | | | 258 | 1396 | \nstrainA | resistance | tet(A) | tet(A)_4 | 97.6666666667 | 83.5831202046 | 28holes | edge0.0 | 76 | 1208 | \nstrainB | resistance | strB | strB1 | 100.0 | 90.0883054893 | | | 282 | 1720 | \nstrainB | resistance | strA | strA4 | 100.0 | 99.0832298137 | | | 325 | 1142 |\n\n*coverage* indicates the % of the gene length that was covered (if clustered DB, then this is the highest coverage of any members of the cluster)\n\n*uncertainty* is as above\n\n2 - A tabulated summary report of samples x genes, `[outputprefix]__genes__[db]__results.txt`:\n\nSample | aadA | blaTEM | dfrA | strA | strB | sul2 | tet(A)\n:---: | :---: | :---: | :---: | :---: | :---: | :---: | :---:\nstrainA | aadA1-5 | blaTEM-1_5 | dfrA1_1? | - | - | sul2_9 | tet(A)_4*?\nstrainB | - | - | - | strA4 | strB1 | - | -\n\nThe first column indicates the sample name, all other columns report the genes/alleles that were detected in the sample set. If multiple samples were input, or if previous outputs were provided for compiling results, then all the genes detected in ANY of the samples will have their own column in this table.\n\nIf you were using a clustered gene database (such as the `ARGannot_r3.fasta` database provided), the name of each cluster (i.e. the basic gene symbol) will be printed in the column headers, while specific alleles will be printed in the sample rows.\n\n\\* indicates mismatches\n\n? indicates uncertainty due to low depth in some parts of the gene\n\n\\- indicates the gene was not detected (> %coverage threshold, `--min_coverage 90`)\n\n------------\n### Combined results\n\nIf more then one database is provided for typing (via `--mlst_db` and/or `--gene_db`), or if previous results are provided for merging with the current run which contain data from >1 database (via `--prev_output`), then an additional table summarizing all the database results is produced. This is named `[outputprefix]__compiledResults.txt` and is a combination of the MLST style table plus the tabulated gene summary (file 2 above).\n\nSample | ST | adk | fumC | gyrB | icd | mdh | purA | recA | mismatches | uncertainty | depth | maxMAF | aadA | blaTEM | dfrA | strA | strB | sul2 | tet(A)\n:---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---:\nsampleA | 152* | 11 | 63* | 7 | 1 | 14 | 7 | 7 | 0 | - | 21.3 | 0.05 | aadA1-5 | blaTEM-1_5 | dfrA1_1? | strA4 | strB1 | sul2_9 | tet(A)_4*?\n\n------------\n### Mapping results\n\nThe bowtie2 alignment of reads to each input database is stored in `[outputprefix]__[sample].[db].sorted.bam` and the samtools pileup of the alignment is stored in `[outputprefix]__[sample].[db].pileup`. \n\nIf you used `--save_scores`, a table of scores for each allele in the database is printed to `[outputprefix]__[sample].[db].scores`.\n\n\n# Printing consensus sequences\n\nSRST2 can optionally report consensus sequences & pileups for novel alleles, or for all alleles. Note that only SNPs are included in the consensus fasta sequence as these can be reliably extracted from the read alignments; if there are indels (reported in the output tables) these will not be included in the consensus fasta file and we suggest you assembly the mapped reads (these are in the bam file).\n\nBy default, no allele sequences are generated, the results are simply tabulated.\n\n### Report consensus sequences for novel alleles \n\n```\n--report_new_consensus\n```\n\nFor all samples and loci where the top scoring allele contains SNPs:\n\n* a pileup file will be generated for the top scoring allele, with the name `[allele].[output]__[readset].[database].pileup`\n* the consensus sequence will be printed to a fasta file with the name `[output].new_consensus_alleles.fasta`\n* fasta headers will be in the format `>[allele].variant [sample]`\n\n\nIN ADDITION TO THE NOVEL ALLELES FILE OUTLINED ABOVE, the following will ALSO occur:\n\n* a pileup file will be generated for the top scoring allele for each sample at each locus, with the name `[allele].[output]__[readset].[database].pileup`\n* the consensus sequence for the top scoring allele for each sample at each locus will be printed to a fasta file with the name `[output].all_consensus_alleles.fasta`\n* fasta headers will be in the format `>[allele].variant [sample]`\n\n\n### Report consensus sequences for all alleles\n\n```\n--report_all_consensus\n```\n\n### Collate consensus sequences output by SRST2 run on multiple strains & loci, into one file per locus\n\nFor genes:\n\n```\npython srst2/scripts/consensus_alignment.py --in *.all_consensus_alleles.fasta --pre test --type gene\n```\n\nFor mlst:\n\n```\npython srst2/scripts/consensus_alignment.py --in *.all_consensus_alleles.fasta --pre test --type mlst --mlst_delimiter _\n```\n\n# More basic usage examples\n\nRun single read sets against MLST database and resistance database\n\n```\nsrst2 --input_pe pool11_tag2_1.fastq.gz pool11_tag2_2.fastq.gz \n\t--output pool11_tag2_Shigella --log \n\t--gene_db CARD_v3.0.8_SRST2.fasta \n\t--mlst_db Escherichia_coli.fasta \n\t--mlst_definitions ecoli.txt\n```\n\n------------\n\nRun against multiple read sets in serial\n\n```\nsrst2 --input_pe *.fastq.gz\n\t--output Shigella --log\n\t--gene_db CARD_v3.0.8_SRST2.fasta \n\t--mlst_db Escherichia_coli.fasta \n\t--mlst_definitions ecoli.txt\n```\n\n------------\n\nRun against new read sets, merge with previous reports (individual or compiled)\n\n```\n\tsrst2 --input_pe strainsY-Z*.fastq.gz\n\t\t--output strainsA-Z --log\n\t\t--gene_db CARD_v3.0.8_SRST2.fasta \n\t\t--mlst_db Escherichia_coli.fasta \n\t\t--mlst_definitions ecoli.txt\n\t\t--prev_output ShigellaA__genes__resistance__results.txt\n        \t ShigellaA__mlst__Escherichia_coli__results.txt\n        \t ShigellaB__genes__resistance__results.txt\n        \t ShigellaB__mlst__Escherichia_coli__results.txt\n        \t ShigellaC-X__compiledResults.txt\n```\n------------\n\nRun against Enterococcus reads, where read names are different from the usual `_1.fastq` and `_2.fastq`\n\n```\nsrst2 --input_pe strain_R1.fastq.gz strain_R2.fastq.gz \n\t--forward _R1 --reverse _R2 \n\t--output strainA --log \n\t--gene_db CARD_v3.0.8_SRST2.fasta \n\t--mlst_db Enterococcus_faecium.fasta \n\t--mlst_definitions efaecium.txt\n```\n\t"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Basic Usage \u2013 Serotyping E. coli",
        "parent_header": [
          "Generating SRST2-compatible clustered database from raw sequences",
          "Preformatted databases for specialist typing with SRST2",
          "Using the EcOH database for serotyping E. coli with SRST2"
        ],
        "type": "Text_excerpt",
        "value": "```\nsrst2 --input_pe strainA_1.fastq.gz strainA_2.fastq.gz --output strainA_serotypes --log --gene_db EcOH.fasta\n```\n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example",
        "parent_header": [
          "Generating SRST2-compatible clustered database from raw sequences",
          "Preformatted databases for specialist typing with SRST2",
          "Typing the LEE pathogenicity island of E. coli"
        ],
        "type": "Text_excerpt",
        "value": "Note these reads sets are each ~100 MB each, so you need to download 400 MB of test data to run this example\n\n```\nwget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR178/ERR178148/ERR178148_1.fastq.gz\nwget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR178/ERR178148/ERR178148_2.fastq.gz\nwget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR178/ERR178156/ERR178156_1.fastq.gz\nwget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR178/ERR178156/ERR178156_2.fastq.gz\n\nsrst2 --input_pe ERR178148*.fastq.gz ERR178156*.fastq.gz --output serotypes --log --gene_db EcOH.fasta\n```\n\nResults will be output in: `[prefix]__genes__EcOH__results.txt`\n\nOutput from the above example would appear in: `serotypes__genes__EcOH__results.txt`\n\nSample | fliC | wzm | wzt | wzx | wzy\n:---: | :---: | :---: | :---: | :---: | :---:\nERR178148 | fliC-H31_32* | - | - | wzx-O131_165* | wzy-O131_386\nERR178156 | fliC-H33_34 | wzm-O9_93* | wzt-O9_107* | - | -\n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Basic Usage - Serotyping GBS",
        "parent_header": [
          "Generating SRST2-compatible clustered database from raw sequences",
          "Preformatted databases for specialist typing with SRST2",
          "Using the GBS-SBG database for serotyping Streptococcus agalactiae (Group B Streptococcus) with SRST2"
        ],
        "type": "Text_excerpt",
        "value": "```\nsrst2 --input_pe strainA_1.fastq.gz strainA_2.fastq.gz --output strainA_test --log --gene_db GBS-SBG.fasta\n```\n\n#### Example\nNote these read sets are ~150 MB each, so you need to download ~600 MB of data to run this example.\n````\nwget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR632/000/SRR6327950/SRR6327950_1.fastq.gz\nwget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR632/000/SRR6327950/SRR6327950_2.fastq.gz\nwget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR632/007/SRR6327887/SRR6327887_1.fastq.gz\nwget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR632/007/SRR6327887/SRR6327887_2.fastq.gz\n\nsrst2 --input_pe SRR6327950*.fastq.gz SRR6327887*.fastq.gz --output GBS-serotypes --log --gene_db GBS-SBG.fasta\n````\n\nThe output from the above will be in `GBS-serotypes__genes__GBS-SBG__results.txt`.\n\nSample | GBS-SBG\n:---: | :---:\nSRR6327887 | GBS-SBG:Ia*\nSRR6327950 | GBS-SBG:III-4\n\n#### Interpretation\nSRR6327887 is serotype Ia; it has some variants relative to the locus, which is why it has a `*`. Looking at `GBS-serotypes__fullgenes__GBS-SBG__results.txt`, we see that it has 24 SNPs and 1 indel (for a 0.358% divergence - i.e. 99.6% identical to the reference sequence (~6.7 kb)). As only one representative of each serotype is in the reference database, some divergence is not unexpected, and this appears to be a reliable call.\nSRR6327950 is serotype III, subtype 4.\n\n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Basic Usage \u2013 Typing E. coli LEE variants",
        "parent_header": [
          "Generating SRST2-compatible clustered database from raw sequences",
          "Preformatted databases for specialist typing with SRST2",
          "Typing the LEE pathogenicity island of E. coli"
        ],
        "type": "Text_excerpt",
        "value": "```\nsrst2 --input_pe strainA_1.fastq.gz strainA_2.fastq.gz --output strainA_LEE --log --mlst_db LEE_mlst.fasta --mlst_definitions LEE_STscheme.txt\n```\n\n#### Example\n\nNote these reads sets are each ~100 MB each, so you need to download 400 MB of test data to run this example\n\n```\nwget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR178/ERR178148/ERR178148_1.fastq.gz\nwget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR178/ERR178148/ERR178148_2.fastq.gz\nwget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR178/ERR178156/ERR178156_1.fastq.gz\nwget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR178/ERR178156/ERR178156_2.fastq.gz\n\nsrst2 --input_pe ERR178156*.fastq.gz ERR124656*.fastq.gz --output LEE --log --mlst_db LEE_mlst.fasta --mlst_definitions LEE_STscheme.txt\n```\n\nResults will be output in: `[prefix]__mlst__LEE_mlst__results.txt`\n\nOutput from the above example would appear in: `LEE__mlst__LEE_mlst__results.txt`\n\nSample | ST | eae | tir | espA | espB | espD | espH | espZ | mismatches | uncertainty | depth | maxMAF\n:---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---:\nERR178148 | 30* | 19 | 10* | 9* | 5* | 6* | 4* | 13* | tir-10/33snp3indel;espA-9/3snp;espB-5/4snp;espD-6/9snp;espH-4/1snp;espZ-13/3snp | - | 59.8217142857 | 0.285714285714\nERR178156 | 9* | 6* | 5* | 5* | 3* | 3* | 4* | 8 | eae-6/4snp;tir-5/18snp;espA-5/6snp;espB-3/4snp;espD-3/8snp;espH-4/3snp | - | 33.5062857143 | 0.444444444444\n\n#### Interpretation\n\nERR178148 and ERR178156 carry LEE subtypes 30 and 9 respectively, which both belong to LEE lineage 3. The imprecise matches are to be expected and can be taken as a confident assignment of LEE type.\n"
      },
      "source": "https://raw.githubusercontent.com/katholt/srst2/master/README.md",
      "technique": "header_analysis"
    }
  ]
}