{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "Emending Alignments of Spliced Transcript Reads (EASTR)"
        ],
        "type": "Text_excerpt",
        "value": "To cite EASTR in publications, please use the following reference:\n\nShinder I, Hu R, Ji HJ, Chao KH, Pertea M. EASTR: Identifying and eliminating\nsystematic alignment errors in multi-exon genes. Nat Commun. 2023 Nov\n9;14(1):7223. doi:\n[10.1038/s41467-023-43017-4](https://doi.org/10.1038/s41467-023-43017-4). PMID:\n[37940654](https://pubmed.ncbi.nlm.nih.gov/37940654/); PMCID:\n[PMC10632439](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC10632439/).\n"
      },
      "source": "https://raw.githubusercontent.com/ishinder/EASTR/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ishinder/EASTR"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-08-30T18:08:55Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-05-26T20:27:00Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Emending Alignment of Spliced Transcript Reads"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.99235154045855,
      "result": {
        "original_header": "Emending Alignments of Spliced Transcript Reads (EASTR)",
        "type": "Text_excerpt",
        "value": "EASTR is a tool for detecting and eliminating spuriously spliced alignments in\nRNA-seq datasets. It improves the accuracy of transcriptome assembly by\nidentifying and removing misaligned spliced alignments. The tool can process\nGTF, BED, and BAM files as input. EASTR can be applied to any RNA-seq dataset\nregardless of the alignment software used.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ishinder/EASTR/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ishinder/EASTR/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ishinder/EASTR/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ishinder/EASTR"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Emending Alignments of Spliced Transcript Reads (EASTR)"
      },
      "source": "https://raw.githubusercontent.com/ishinder/EASTR/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ishinder/EASTR/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2023 Ida Shinder\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/ishinder/EASTR/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "EASTR"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "ishinder"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 40979,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 4280,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 629,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ishinder/EASTR/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ishinder",
          "type": "User"
        },
        "date_created": "2023-08-16T18:02:40Z",
        "date_published": "2023-10-11T00:06:30Z",
        "description": "This release accompanies the publication in Nature Communications and represents the version of the EASTR algorithm that was used for all analyses presented in the paper.",
        "html_url": "https://github.com/ishinder/EASTR/releases/tag/v1.0-paper",
        "name": "EASTR v1.0",
        "release_id": 124519858,
        "tag": "v1.0-paper",
        "tarball_url": "https://api.github.com/repos/ishinder/EASTR/tarball/v1.0-paper",
        "type": "Release",
        "url": "https://api.github.com/repos/ishinder/EASTR/releases/124519858",
        "value": "https://api.github.com/repos/ishinder/EASTR/releases/124519858",
        "zipball_url": "https://api.github.com/repos/ishinder/EASTR/zipball/v1.0-paper"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "ishinder",
          "type": "User"
        },
        "date_created": "2023-01-20T17:31:54Z",
        "date_published": "2023-01-20T17:34:55Z",
        "description": "Version of EASTR that we used to output results for the paper.",
        "html_url": "https://github.com/ishinder/EASTR/releases/tag/paper",
        "name": "Paper vs1",
        "release_id": 89742050,
        "tag": "paper",
        "tarball_url": "https://api.github.com/repos/ishinder/EASTR/tarball/paper",
        "type": "Release",
        "url": "https://api.github.com/repos/ishinder/EASTR/releases/89742050",
        "value": "https://api.github.com/repos/ishinder/EASTR/releases/89742050",
        "zipball_url": "https://api.github.com/repos/ishinder/EASTR/zipball/paper"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "parent_header": [
          "Emending Alignments of Spliced Transcript Reads (EASTR)"
        ],
        "type": "Text_excerpt",
        "value": "**Required**:\n\n- [bowtie2 >= 2.5.2](https://github.com/BenLangmead/bowtie2)\n- [samtools >= 1.19](https://github.com/samtools/samtools)\n\n**Optional for testing**:\n\n- [gffread >= 0.12.7](https://github.com/gpertea/gffread)\n- [sra-toolkit >= 3.0.1](https://github.com/ncbi/sra-tools)\n"
      },
      "source": "https://raw.githubusercontent.com/ishinder/EASTR/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running EASTR on a bamlist",
        "parent_header": [
          "Emending Alignments of Spliced Transcript Reads (EASTR)",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "1. Ensure you are in the appropriate directory containing the BAM/original\n   folder and reference files.\n2. Create a list of BAM files (make sure the list contains the full paths to the\n   BAM files):\n\n   ```bash\n   ls path/to/BAM/original/*.bam > bamlist.txt\n   ```\n\n3. Run the EASTR pipeline on the bamlist with the following command:\n\n   ```bash\n   eastr\n       --bam bamlist.txt\n       --reference /path/to/reference_fasta\n       --bowtie2_index /path/to/bowtie2_index\n       --out_filtered_bam /path/to/output/BAM/filtered  #optional\n       --out_original_junctions /path/to/output/original_junctions #optional\n       --out_removed_junctions /path/to/output/removed_junctions # optional\n       --removed_alignments_bam #optional\n       --verbose #optional\n       -p 12 #optional\n   ```\n"
      },
      "source": "https://raw.githubusercontent.com/ishinder/EASTR/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running EASTR on a GTF",
        "parent_header": [
          "Emending Alignments of Spliced Transcript Reads (EASTR)",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Run the EASTR pipeline on the GTF file with the following command:\n\n```bash\n  eastr\n    --gtf /path/to/gtf_file\n    --reference /path/to/reference_fasta\n    --bowtie2_index /path/to/bowtie2_index\n    --out_removed_junctions /path/to/output/outfile.bed # optional\n```\n"
      },
      "source": "https://raw.githubusercontent.com/ishinder/EASTR/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "installation",
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 01:26:44",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Getting Started",
        "parent_header": [
          "Emending Alignments of Spliced Transcript Reads (EASTR)"
        ],
        "type": "Text_excerpt",
        "value": "The installation steps for running EASTR are outlined below. Installation takes\na few minutes.\n\n1. Clone source repository\n\n   ```bash\n   git clone --recurse-submodules https://github.com/ishinder/EASTR.git\n   cd EASTR\n   ```\n\n2. Compile junction_extractor and vacuum\n\n   ```bash\n   cd utils\n   cmake -DCMAKE_BUILD_TYPE=Release .\n   make\n   ```\n\n3. To add the junction_extractor and vacuum executables in the `utils` folder to\n   your PATH, you can follow these steps:\n\n   Get the absolute path of the build directory:\n\n   ```bash\n   pwd\n   ```\n\n   This command will print the absolute path of the current directory, which is\n   the `utils` directory.\n\n   Add the absolute path to the PATH environment variable: For temporary use\n   (not persistent across sessions), you can run:\n\n   ```bash\n   export PATH=$PATH:<absolute_path_to_utils_directory>\n   ```\n\n   Replace `<absolute_path_to_utils_directory>` with the path you obtained in\n   the previous step.\n\n   For persistent use (across sessions), you can add the `export` command to\n   your shell's configuration file. For bash, this is typically the `.bashrc` or\n   `.bash_profile` file in your home directory. For zsh, this is the `.zshrc`\n   file. To add the path to your shell configuration file, run:\n\n   ```bash\n   echo 'export PATH=$PATH:<absolute_path_to_utils_directory>' >> ~/.bashrc\n   ```\n\n4. Install EASTR\n\n   Ensure you are in the EASTR main directory before proceeding:\n\n   ```bash\n   # Navigate back to the main EASTR directory if you are not already there\n   cd path/to/EASTR\n   # (OPTIONAL) Install in a Python virtual environment\n   # python3 -m virtualenv .venv # (OPTIONAL)\n   # source .venv/bin/activate # (OPTIONAL)\n   make install # Install EASTR package\n   ```\n"
      },
      "source": "https://raw.githubusercontent.com/ishinder/EASTR/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Required Arguments",
        "parent_header": [
          "Emending Alignments of Spliced Transcript Reads (EASTR)",
          "Getting Started"
        ],
        "type": "Text_excerpt",
        "value": "**NOTE**: Only one of the below input options (GTF, BED, or BAM) should be\nprovided.\n\n- `--gtf` : Input GTF file containing transcript annotations\n- `--bed` : Input BED file with intron coordinates\n- `--bam` : Input BAM file or a TXT file containing a list of BAM files with\n  read alignments\n\nAdditionally, the following arguments are required:\n\n- `-r`, `--reference` : Reference FASTA genome used in alignment\n- `-i`, `--bowtie2_index` : Path to Bowtie2 index for the reference genome\n"
      },
      "source": "https://raw.githubusercontent.com/ishinder/EASTR/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Optional Arguments",
        "parent_header": [
          "Emending Alignments of Spliced Transcript Reads (EASTR)",
          "Getting Started"
        ],
        "type": "Text_excerpt",
        "value": "- `--bt2_k` : Minimum number of distinct alignments found by bowtie2 for a\n  junction to be considered spurious. Default: 10\n- `-o` : Length of the overhang on either side of the splice junction. Default:\n  50\n- `-a` : Minimum required anchor length in each of the two exons. Default: 7\n- `--min_duplicate_exon_length`: Minimum length that a one-anchor alignment\n  shift must meet or exceed to be considered as representing duplicated exons.\n  It is used to differentiate between exon duplications and spurious splice\n  alignments. Default: 27\n- `--min_junc_score` : Minimum number of supporting spliced reads required per\n  junction. Default: 1\n- `--trusted_bed` : Path to a BED file path with trusted junctions, which will\n  not be removed by EASTR.\n- `--verbose` : Display additional information during BAM filtering, including\n  the count of total spliced alignments and removed alignments\n- `--removed_alignments_bam` : Write removed alignments to a BAM file\n- `-p` : Number of parallel processes. Default: 1\n"
      },
      "source": "https://raw.githubusercontent.com/ishinder/EASTR/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Minimap2 Parameters",
        "parent_header": [
          "Emending Alignments of Spliced Transcript Reads (EASTR)",
          "Getting Started"
        ],
        "type": "Text_excerpt",
        "value": "- `-A` : Matching score. Default: 3\n- `-B` : Mismatching penalty. Default: 4\n- `-O` : Gap open penalty. Default: [12, 32]\n- `-E` : Gap extension penalty. Default: [2, 1]\n- `-k` : K-mer length for alignment. Default: 3\n- `--scoreN` : Score of a mismatch involving ambiguous bases. Default: 1\n- `-w` : Minimizer window size. Default: 2\n- `-m` : Discard chains with chaining score. Default: 25\n"
      },
      "source": "https://raw.githubusercontent.com/ishinder/EASTR/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Output Options",
        "parent_header": [
          "Emending Alignments of Spliced Transcript Reads (EASTR)",
          "Getting Started"
        ],
        "type": "Text_excerpt",
        "value": "- `--out_original_junctions` : Write original junctions to the output file or\n  directory\n- `--out_removed_junctions` : Write removed junctions to the output file or\n  directory; the default output is to the terminal\n- `--out_filtered_bam` : Write filtered bams to the output file or directory\n- `--filtered_bam_suffix` : Suffix added to the name of the output BAM files.\n  Default: '\\_EASTR_filtered'\n"
      },
      "source": "https://raw.githubusercontent.com/ishinder/EASTR/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Other arguments",
        "parent_header": [
          "Emending Alignments of Spliced Transcript Reads (EASTR)",
          "Getting Started"
        ],
        "type": "Text_excerpt",
        "value": "- `-p` : Number of parallel processes. Default: 1\n"
      },
      "source": "https://raw.githubusercontent.com/ishinder/EASTR/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "Emending Alignments of Spliced Transcript Reads (EASTR)"
        ],
        "type": "Text_excerpt",
        "value": "The `run_eastr.sh` script in the `tests` directory demonstrates two different\nways to run the EASTR pipeline: on a bamlist and on a GTF file. Below, we\nprovide instructions for each use case.\n"
      },
      "source": "https://raw.githubusercontent.com/ishinder/EASTR/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Analyzing an example dataset",
        "parent_header": [
          "Emending Alignments of Spliced Transcript Reads (EASTR)"
        ],
        "type": "Text_excerpt",
        "value": "**Note 1**: Downloading FASTQ files using the `get_fastq.sh` script requires\n[SRA_toolkit](https://github.com/ncbi/sra-tools)\n\n**Note 2**: Converting the GFF\nreference annotation to GTF in the `get_ref.sh` script requires\n[gffread](https://github.com/gpertea/gffread)\n\nWe have included a script that demonstrates the application of the EASTR\npipeline to an _Arabidopsis_ dataset featured in our study. The\n`sra_list_arabidopsis.txt` file, located in the `tests` directory, lists the\naccession IDs of the samples analyzed.\n\nThe EASTR pipeline takes BAM files as input. The `run_all.sh` script acquires\nFASTQ files, the FASTA reference and annotation, and then aligns the FASTQ files\nusing HISAT2 to generate BAM files. These BAM files are subsequently used as\ninput to EASTR. Additionally, EASTR can accept a GTF annotation file and output\na BED file containing questionable junctions (executed in the last command of\nthe `run_eastr.sh` script).\n\nTo execute the entire EASTR pipeline, which filters BAM files and identifies\nreference annotation errors, use the `run_all.sh` script found in the `tests`\ndirectory. This script ensures all necessary steps and subscripts are carried\nout in the correct order. To analyze the example dataset, follow these steps:\n\n1. Navigate to the `tests` directory within the EASTR package:\n2. Make sure all scripts are executable (`chmod +x *sh`):\n3. Run the `run_all.sh` script.\n\nThe script will download the necessary FASTQ files, reference genome, and then\nperform the alignment and EASTR analysis. The output files will be generated in\ntheir respective directories within the `tests` folder.\n\nWhen executed on 4 CPUs, the EASTR command to filter 6 BAM files completes in\napproximately 35 minutes, with the bulk of this time being dedicated to the\nfiltering of BAM files \\(a single bam file typically takes between 15-20 minutes\nto filter on a single CPU). On 1 CPU, the EASTR command to identify questionable\nintrons in an annotation takes about 30 seconds.\n"
      },
      "source": "https://raw.githubusercontent.com/ishinder/EASTR/main/README.md",
      "technique": "header_analysis"
    }
  ]
}