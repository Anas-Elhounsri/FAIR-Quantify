{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "SARTRE (ShAdow pRice - based meTabolite pRotein intEraction)"
        ],
        "type": "Text_excerpt",
        "value": "```\n@article{babadi2023prediction,\n  title={Prediction of metabolite-protein intreactions based on integration of machine learning and constraint-based modeling},\n  author={Babadi, Fayaz Soleymani and Razaghi-Moghadam, Zahra and Zare-Mirakabad, Fatemeh and Nikoloski, Zoran},\n  journal={Bioinformatics Advances},\n  pages={vbad098},\n  year={2023},\n  publisher={Oxford University Press}\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/fayazsoleymani/SARTRE/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Babadi, Fayaz Soleymani and Razaghi-Moghadam, Zahra and Zare-Mirakabad, Fatemeh and Nikoloski, Zoran",
        "format": "bibtex",
        "title": "Prediction of metabolite-protein intreactions based on integration of machine learning and constraint-based modeling",
        "type": "Text_excerpt",
        "value": "@article{babadi2023prediction,\n    publisher = {Oxford University Press},\n    year = {2023},\n    pages = {vbad098},\n    journal = {Bioinformatics Advances},\n    author = {Babadi, Fayaz Soleymani and Razaghi-Moghadam, Zahra and Zare-Mirakabad, Fatemeh and Nikoloski, Zoran},\n    title = {Prediction of metabolite-protein intreactions based on integration of machine learning and constraint-based modeling},\n}"
      },
      "source": "https://raw.githubusercontent.com/fayazsoleymani/SARTRE/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/fayazsoleymani/SARTRE"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-08-10T16:40:17Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-09-07T11:36:51Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SARTRE; Integration of machine learning and constraint-based modelling accurately predicts metabolite-protein interactions"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9554656427756869,
      "result": {
        "original_header": "Integration of machine learning and constraint-based modeling accurately predicts metabolite-protein interactions",
        "type": "Text_excerpt",
        "value": "SARTRE framework investigates the power of shadow prices which are calculated based on constraint-based modeling of genome-scale metabolic models(GEMs). SARTRE framework investigates the power of shadow prices which are calculated based on constraint-based modeling of genome-scale metabolic models. We can separate the framework into five stages:\n \n"
      },
      "source": "https://raw.githubusercontent.com/fayazsoleymani/SARTRE/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9879228750368573,
      "result": {
        "original_header": "1. Curating the GEMs:",
        "type": "Text_excerpt",
        "value": "Two models have been used in this study. \n- [iJO1366](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3261703/): A comprehensive genome-scale reconstruction of *Escherichia coli* metabolism\n- [Yeast-GEM](https://github.com/SysBioChalmers/yeast-GEM): A consensus *S. cerevisiae* metabolic model Yeast8 and its ecosystem for comprehensively probing cellular metabolism\nCuration of these mentioned GEMs have been performed by the  COBRAToolbox in MATLAB. `modelPreparing_iJO1366.m` uses `iJO1366.mat` as the input and creates `ModelIrrevOpt90.mat` and  `modelPreparing_yeastGEM.m` uses `Yeast-GEM.mat` and creates `yeast_IrrevOpt90.mat`.\n \n"
      },
      "source": "https://raw.githubusercontent.com/fayazsoleymani/SARTRE/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9117734971000613,
      "result": {
        "original_header": "2. Calculating shadow prices",
        "type": "Text_excerpt",
        "value": "In this study, we employed four gold standards integrated to GEMs as:\n- [piazza](https://pubmed.ncbi.nlm.nih.gov/29307493/)\n- [reznik](https://pubmed.ncbi.nlm.nih.gov/28903046/)\n- [stitch_ecoli](http://stitch.embl.de/)\n- [stitch_yeast](http://stitch.embl.de/) \nThe optimization process has been implemented by [GUROBI](https://www.gurobi.com/) optimizer and its python interface. Make sure to be installed and have an active license for it beforehand. Calculation of shadow prices can be performed in their directory by changing the working directory followed by executing `optimization.py`. For instance, the process for `piazza` can be done by following commands in the terminal:\n```\ncd piazza\npython3 optimization.py\n```\nThe results of optimization will be saved on the `opt` directory for each reaction by its number. The process is the same for other gold standards. Also the results are provided in the `.zip` archive in their directory.\n \n"
      },
      "source": "https://raw.githubusercontent.com/fayazsoleymani/SARTRE/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9465721340222405,
      "result": {
        "original_header": "3. Data pre-processing",
        "type": "Text_excerpt",
        "value": "The framework is followed by preprocessing calculated shadow prices for downstream classifiers changing the directory to specific gold standard and executing `cleaning.py`. Also, in this stage, fingerprints of size 128 bits can be generated by executing `generate_fp.py`. make sure to have installed [RDKit](https://www.rdkit.org/) in your environment. For example for `piazza` gold standard the process can be done by executing following commands in the terminal:\n```\ncd piazza\npython3 cleaning.py\npython3 generate_fp.py\n```\n`generate_fp.py` prompts you to enter your email for using the [Bio.Entrez](https://biopython.org/docs/1.76/api/Bio.Entrez.html) package. The results will be saved in `met_sps_t80_replaced.csv` and `met_fp128.csv`, respectively.\n \n"
      },
      "source": "https://raw.githubusercontent.com/fayazsoleymani/SARTRE/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9799002377397001,
      "result": {
        "original_header": "4. Training classifier and evaluation",
        "type": "Text_excerpt",
        "value": "Preprocessing, constructing datasets, training the random forest classifier and evaluating it can be executed by running `evaluate.py` in each gold standard directory. The classifier and metrics are employed from [sklearn](https://scikit-learn.org/stable/) python library. For example, for `piazza` gold standard the process can be done for using shadow prices and fingerprints, respectively, by executing:\n```\ncd piazza\npython3 evaluate.py sp\npython3 evaluate.py fp\n```\nGold standard from STITCH also gets an additional argument as a confidence score(150: low, 400: medium, 700: high, 900: highest) to perform this process. for example, for `stitch_ecoli` and using medium confidence score and shadow price as metabolite features:\nBASH2*\n \n"
      },
      "source": "https://raw.githubusercontent.com/fayazsoleymani/SARTRE/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9864911249507927,
      "result": {
        "original_header": "5. Performance of SARTRE on specific tasks",
        "type": "Text_excerpt",
        "value": "Additional evaluation has been provided to showcase the power of SARTRE. First, evaluation has been done by excluding shared metabolite-protein pairs, which exist in two GEMs, from the datasets, and training two separate models in remaining pairs. This can be performed by executing:\n```\ncd subsys_shared\npython3 shared.py\n```\nThe accuracy of two models on the test set and cosine similarity of predictions to classifiers will be displayed.\nSecond, we excluded metabolite-protein pairs of two subsystems of *E. coli* separately from stitch_ecoli and trained two models on remaining pairs. These subsystems are Alternate Carbon Metabolism and Cofactor and Prosthetic Group Biosynthesis. This process can be done by executing:\nBASH2*\n \n"
      },
      "source": "https://raw.githubusercontent.com/fayazsoleymani/SARTRE/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9894379067783509,
      "result": {
        "original_header": "1. Comparison with existing MPI predictions.",
        "type": "Text_excerpt",
        "value": "In this analysis SARTRE predictions are compared to computational predictions by [Zhao et al.](https://academic.oup.com/bib/article-abstract/22/5/bbab014/6130169?redirectedFrom=fulltext). The datasets are constructed based on the method for pairs of our datasets and evaluation with 10-fold cross validation is applied. The deep neural network and constructed datasets are available in the comparison folder.\n \n"
      },
      "source": "https://raw.githubusercontent.com/fayazsoleymani/SARTRE/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9980110085142931,
      "result": {
        "original_header": "2. Performance of SARTRE in different media compositions",
        "type": "Text_excerpt",
        "value": "In this part SARTRE framework is applied to a dataset, which is constructed from the GEM of iJO1366 and the gold standard from STITCH with a medium (400) confidence score. We utilized models with different carbon sources as acetate, fructose, glycerol, mannose, and succinate, and compared metrics with the base model, which was in glucose media composition. Also, the code is available for different carbon/nitrogen/phosphorus sources with limiting and non-limiting values. In each directory, the manipulated model, results of optimization and metabolite/protein features are accessible.\n For executing the codes, first, change current directory, then run the script with desired setting name, e.g. acetate as below:\n```\ncd media_composition\npython3 evaluation.py acetate\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/fayazsoleymani/SARTRE/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9631417356990685,
      "result": {
        "original_header": "3. Investigation of MPI relations of GEM through datasets",
        "type": "Text_excerpt",
        "value": "In this part, evaluation of SARTRE without shared MPIs between GEM and gold standards is performed. To execute the codes, change the directory to desired dataset and run evaluate_without.py in the command line, e.g. for piazza:\n```\ncd piazza\npython3 evaluate_without.py\n```\nFor STITCH derived datasets, run the commands with desired confidence score as a first argument, e.g. stitch_ecoli with medium confidence score(400):\nBASH2*\n \n"
      },
      "source": "https://raw.githubusercontent.com/fayazsoleymani/SARTRE/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9652807800143214,
      "result": {
        "original_header": "4. Permutation tests:",
        "type": "Text_excerpt",
        "value": "We examined the performance of SARTRE with two permutation tests of label permutation and feature permutation. To run the codes, first change directory to each datasets and execute python code permutation_tests.py with two label_permutation/feature_permutation options e.g. for piazza and lable permutation test:\n```\ncd piazza\npython3 permutation_tests.py label_permutation\n```\nFor STITCH derived datasets, run the commands with desired confidence score as a first argument, e.g. stitch_ecoli with medium confidence score(400) and feature permutation test:\nBASH2* \n"
      },
      "source": "https://raw.githubusercontent.com/fayazsoleymani/SARTRE/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/fayazsoleymani/SARTRE/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/fayazsoleymani/SARTRE/master/comparison/DNN.ipynb"
      },
      "source": "https://raw.githubusercontent.com/fayazsoleymani/SARTRE/master/comparison/DNN.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/fayazsoleymani/SARTRE/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "fayazsoleymani/SARTRE"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SARTRE (ShAdow pRice - based meTabolite pRotein intEraction)"
      },
      "source": "https://raw.githubusercontent.com/fayazsoleymani/SARTRE/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9999996279687603,
      "result": {
        "original_header": "3. Data pre-processing",
        "type": "Text_excerpt",
        "value": "The framework is followed by preprocessing calculated shadow prices for downstream classifiers changing the directory to specific gold standard and executing `cleaning.py`. Also, in this stage, fingerprints of size 128 bits can be generated by executing `generate_fp.py`. make sure to have installed [RDKit](https://www.rdkit.org/) in your environment. For example for `piazza` gold standard the process can be done by executing following commands in the terminal:\n```\ncd piazza\npython3 cleaning.py\npython3 generate_fp.py\n```\n`generate_fp.py` prompts you to enter your email for using the [Bio.Entrez](https://biopython.org/docs/1.76/api/Bio.Entrez.html) package. The results will be saved in `met_sps_t80_replaced.csv` and `met_fp128.csv`, respectively.\n \n"
      },
      "source": "https://raw.githubusercontent.com/fayazsoleymani/SARTRE/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9254713463133085,
      "result": {
        "original_header": "4. Permutation tests:",
        "type": "Text_excerpt",
        "value": "***MAKE sure to unzip archives*** \n"
      },
      "source": "https://raw.githubusercontent.com/fayazsoleymani/SARTRE/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8203544729031381,
      "result": {
        "original_header": "3. Investigation of MPI relations of GEM through datasets",
        "type": "Text_excerpt",
        "value": "In this part, evaluation of SARTRE without shared MPIs between GEM and gold standards is performed. To execute the codes, change the directory to desired dataset and run evaluate_without.py in the command line, e.g. for piazza:\n```\ncd piazza\npython3 evaluate_without.py\n```\nFor STITCH derived datasets, run the commands with desired confidence score as a first argument, e.g. stitch_ecoli with medium confidence score(400):\nBASH2*\n \n"
      },
      "source": "https://raw.githubusercontent.com/fayazsoleymani/SARTRE/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8320386157607185,
      "result": {
        "original_header": "4. Permutation tests:",
        "type": "Text_excerpt",
        "value": "We examined the performance of SARTRE with two permutation tests of label permutation and feature permutation. To run the codes, first change directory to each datasets and execute python code permutation_tests.py with two label_permutation/feature_permutation options e.g. for piazza and lable permutation test:\n```\ncd piazza\npython3 permutation_tests.py label_permutation\n```\nFor STITCH derived datasets, run the commands with desired confidence score as a first argument, e.g. stitch_ecoli with medium confidence score(400) and feature permutation test:\nBASH2* \n"
      },
      "source": "https://raw.githubusercontent.com/fayazsoleymani/SARTRE/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/fayazsoleymani/SARTRE/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SARTRE"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "fayazsoleymani"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 166036,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 83789,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "MATLAB",
        "size": 1020,
        "type": "Programming_language",
        "value": "MATLAB"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/fayazsoleymani/SARTRE/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-04 01:09:32",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}