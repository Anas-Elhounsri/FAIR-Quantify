{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/lysovosyl/NanoDeep"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributors": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contributors",
        "parent_header": [
          "Step by step",
          "Maintainer"
        ],
        "type": "Text_excerpt",
        "value": "Thank you to the following people who participated in the project\uff1a\nJiajian Zhou\u3001Yongjun Zhang\u3001Han Sun\n"
      },
      "source": "https://raw.githubusercontent.com/lysovosyl/NanoDeep/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-07-12T01:01:53Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-02-22T05:55:29Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9272369017120041,
      "result": {
        "original_header": "Background",
        "type": "Text_excerpt",
        "value": "\nThis is an open-source Python3 package for nanopore adaptive sample base on deep learning and the Read Until API. \nThe Read Until API are used to connect to MinKNOW server so that we can obtain reads data are sequenced by Nanopore sequencing.Reads data will be return to client and be classified using NanoDeep which is a deep learning model based on PyTorch.If the signal does not meet the desired criteria, it will be unblocked. \nAlthough this package can run on both Windows and Linux if you can create the dataset yourself, we highly recommend using Linux for running this package. \nThe code here has been tested using MinION and NVIDIA RTX3080 on live sequencing runs and NVIDIA P620 using playback on a simulated run.You are strongly advised to test your setup prior to running (see below for example tests) as this code does affect sequencing output. Please note that running this code is at your own risk.\n \n"
      },
      "source": "https://raw.githubusercontent.com/lysovosyl/NanoDeep/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8980064960547214,
      "result": {
        "original_header": "Make dataset",
        "type": "Text_excerpt",
        "value": "When you had generate simiulate signal of one species or genome,use draw_fast5_id to save read id as dataset label\n```sh\ndraw_fast5_id -i path_to_your_simiulator_fast5_data -o path_to_save_id_label\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/lysovosyl/NanoDeep/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9528322384856936,
      "result": {
        "original_header": "Train model",
        "type": "Text_excerpt",
        "value": "Please must remember the label order of your model.It is useful for Adaptive sample\n```sh\nnanodeep_trainmodel -data_path path_to_your_data/ -lable_path path_to_your_label/ -save_path ./save -model_name Nanodeep -device cuda:0 --save_best --load_to_mem -signal_length 4000 -epochs 100 -batch_size 50\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/lysovosyl/NanoDeep/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9158599182669432,
      "result": {
        "original_header": "Adaptive sample",
        "type": "Text_excerpt",
        "value": "You should start sequencing in Minknow.We recommend start nanodeep_adaptivesample when device into mux scan. \n"
      },
      "source": "https://raw.githubusercontent.com/lysovosyl/NanoDeep/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/lysovosyl/NanoDeep/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/lysovosyl/NanoDeep/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "lysovosyl/NanoDeep"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/lysovosyl/NanoDeep/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lysovosyl/NanoDeep/main/title/title.png"
      },
      "source": "https://raw.githubusercontent.com/lysovosyl/NanoDeep/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Install",
        "type": "Text_excerpt",
        "value": "This project uses MinKNOW>=22.10.10. Make sure you have installed them locally.It maybe will not work on earlier versions or least versions.\n\n```sh\npip install nanodeep\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/lysovosyl/NanoDeep/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999968423666673,
      "result": {
        "original_header": "Background",
        "type": "Text_excerpt",
        "value": "Although this package can run on both Windows and Linux if you can create the dataset yourself, we highly recommend using Linux for running this package. \nThe code here has been tested using MinION and NVIDIA RTX3080 on live sequencing runs and NVIDIA P620 using playback on a simulated run.You are strongly advised to test your setup prior to running (see below for example tests) as this code does affect sequencing output. Please note that running this code is at your own risk.\n \n"
      },
      "source": "https://raw.githubusercontent.com/lysovosyl/NanoDeep/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9965698279724073,
      "result": {
        "original_header": "Test model",
        "type": "Text_excerpt",
        "value": "```sh\nnanodeep_testmodel -data_path path_to_your_data/ -lable_path path_to_your_label/ -save_path ./save --weight_path ../path_to_your_label/your_model_name.pth -model_name Nanodeep -device cuda:0  --load_to_mem -signal_length 4000  -batch_size 50\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/lysovosyl/NanoDeep/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9869507962109022,
      "result": {
        "original_header": "Adaptive sample",
        "type": "Text_excerpt",
        "value": "You should start sequencing in Minknow.We recommend start nanodeep_adaptivesample when device into mux scan. \n"
      },
      "source": "https://raw.githubusercontent.com/lysovosyl/NanoDeep/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/lysovosyl/NanoDeep/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "The MIT License (MIT)\n\nCopyright (c) 2017-2019 Richard Littauer\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/lysovosyl/NanoDeep/main/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "Step by step"
        ],
        "type": "Text_excerpt",
        "value": "[MIT](LICENSE) \u00a9 Yusen Lin\n"
      },
      "source": "https://raw.githubusercontent.com/lysovosyl/NanoDeep/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "NanoDeep"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "lysovosyl"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 631743,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/lysovosyl/NanoDeep/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:19:55",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quickly start",
        "type": "Text_excerpt",
        "value": "```\nnanodeep_testmodel  -data_path ./example/data/ -label_path ./example/label/ -save_path ./example/save -model_path ./example/save/model.pth -model_name nanodeep --load_to_mem -batch_size 50\n```\n\n```\nnanodeep_trainmodel -data_path ./example/data/ -label_path ./example/label/ -signal_length 3000 -epochs 300 -batch_size 200 --save_best --load_to_mem -save_path ./example/save/\n```\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/lysovosyl/NanoDeep/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Use your own model",
        "parent_header": [
          "Step by step",
          "Make dataset"
        ],
        "type": "Text_excerpt",
        "value": "1.The generator in this package will return signal tensor[batch zise x channel x signal length]\n\n2.Make sure your model is suit with this signal tensor.\n\n3.Copy your model file into read_deep/model/ and rename what your model name\n\n4.Write a yaml file to record Super parameter\n\n5.Use it with parameter -model_name and -model_config\n\nFor example\n```\npython ./nanodeep/nanodeep_trainmodel.py -data_path ./example/data/ -label_path ./example/label/ -signal_length 3000 -epochs 30 -batch_size 200 --save_best --load_to_mem -save_path ./example/squigglenet -model_name squigglenet -model_config ./read_deep/model_config/squigglenet.yaml\n```\n"
      },
      "source": "https://raw.githubusercontent.com/lysovosyl/NanoDeep/main/README.md",
      "technique": "header_analysis"
    }
  ]
}