{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jumphone/InferLoop"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-10-26T02:20:17Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-22T09:30:06Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "InferLoop: leveraging single-cell chromatin accessibility for the signal of chromatin loop"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9309891509470771,
      "result": {
        "type": "Text_excerpt",
        "value": "**InferLoop: leveraging single-cell chromatin accessibility for the signal of chromatin loop**, ***Briefings in Bioinformatics*, 2023, https://doi.org/10.1093/bib/bbad166** \nThis tool is designed for inferring loop signals of cell clusters (bins) or individual cells (high depth) using scATAC-seq data \n"
      },
      "source": "https://raw.githubusercontent.com/jumphone/inferloop/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/jumphone/inferloop/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jumphone/InferLoop/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "jumphone/InferLoop"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/jumphone/inferloop/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jumphone/inferloop/main/src/bed2track.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jumphone/inferloop/main/src/bed2longrange.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jumphone/inferloop/main/src/f04_multi/step05_loop2gene_RNA.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jumphone/inferloop/main/src/f04_multi/step03_runICS.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jumphone/inferloop/main/src/f03_atlas/step05_runICS.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jumphone/inferloop/main/src/f03_atlas/step01_getSNP.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jumphone/inferloop/main/src/f03_atlas/eQTL/step01_getLIST.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jumphone/inferloop/main/src/f03_atlas/eQTL/step03_combine.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jumphone/inferloop/main/src/f07_spatial/step00_generateIndex.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jumphone/inferloop/main/src/f07_spatial/step04_runICS.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jumphone/inferloop/main/src/f07_spatial/step09_loop2gene_RNA.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jumphone/inferloop/main/src/f02_blood/step05_loop2gene.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jumphone/inferloop/main/src/f02_blood/step01_runICS.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jumphone/inferloop/main/src/f05_binNum/step02_runICS.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jumphone/inferloop/main/src/f00_demo/step10_signalDemo_loop2count.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jumphone/inferloop/main/src/f00_demo/step08_signalDemo.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jumphone/inferloop/main/src/f00_demo/step02_runICS.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jumphone/inferloop/main/src/f00_demo/step06_runICS.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jumphone/inferloop/main/src/f00_demo/step12_signalDemo_runICS.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jumphone/inferloop/main/src/f01_frontalCortex/step08_drawTrack.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jumphone/inferloop/main/src/f01_frontalCortex/step01_runICS.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jumphone/inferloop/main/src/f06_loopNum/step02_runICS.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jumphone/inferloop/main/src/f06_loopNum/step04_bedpe2count.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://fzhang.bioinfo-lab.com/img/f01_celltype_ILS.png"
      },
      "source": "https://raw.githubusercontent.com/jumphone/inferloop/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://fzhang.bioinfo-lab.com/img/f02_celltype_loops.png"
      },
      "source": "https://raw.githubusercontent.com/jumphone/inferloop/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://fzhang.bioinfo-lab.com/img/white.png"
      },
      "source": "https://raw.githubusercontent.com/jumphone/inferloop/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Section III, Preparing input files of InferLoop",
        "parent_header": [
          "4. Demo code:"
        ],
        "type": "Text_excerpt",
        "value": "    \n    source('https://raw.githubusercontent.com/jumphone/InferLoop/main/inferloop/InferLoop.R')\n    \n    pbmc=readRDS(file='pbmc_signac.rds')\n    DefaultAssay(pbmc)='macs2'\n    conns=readRDS(file='conns_cicero.rds')\n    \n    # The output loops of Cicero are not unique, and use top 400,000 loops will get top 200,000 unique loops\n    inferloop.writeNet(conns, \"net.txt\", cut=400000) \n    \n    indata=as.matrix(pbmc[['macs2']]@data)\n    used_coords=pbmc@reductions$umap@cell.embeddings\n    \n    BIN=inferloop.generateBin(indata,used_coords, n=100)\n    saveRDS(BIN, file='BIN.rds')\n    \n    CLST=BIN$clst\n    write.table(BIN$mat,file='mat.txt', row.names=T,col.names=T,quote=F,sep='\\t')\n\n</br>\n\n[Click back to the top](#)\n\n</br>\n</br>\n    "
      },
      "source": "https://raw.githubusercontent.com/jumphone/inferloop/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/jumphone/InferLoop/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "chromatin-structure, scatac-seq, single-cell-3d-genome-structure, single-cell-chromatin-accessibility, single-cell-multi-omics, spatial-chromatin-accessibility"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2022 Zhang, Feng\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/jumphone/inferloop/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://fzhang.bioinfo-lab.com/img/panda_happy_logo.png"
      },
      "source": "https://raw.githubusercontent.com/jumphone/inferloop/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "InferLoop"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "jumphone"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 173437,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 76650,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 16323,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/jumphone/inferloop/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jumphone",
          "type": "User"
        },
        "date_created": "2023-04-13T07:13:39Z",
        "date_published": "2023-04-13T07:15:04Z",
        "description": "Fix the bug caused by \"values\".\r\n\r\nhash::values",
        "html_url": "https://github.com/jumphone/InferLoop/releases/tag/v1.0.2",
        "name": "InferLoop 1.0.2",
        "release_id": 99350142,
        "tag": "v1.0.2",
        "tarball_url": "https://api.github.com/repos/jumphone/InferLoop/tarball/v1.0.2",
        "type": "Release",
        "url": "https://api.github.com/repos/jumphone/InferLoop/releases/99350142",
        "value": "https://api.github.com/repos/jumphone/InferLoop/releases/99350142",
        "zipball_url": "https://api.github.com/repos/jumphone/InferLoop/zipball/v1.0.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jumphone",
          "type": "User"
        },
        "date_created": "2023-04-11T06:22:51Z",
        "date_published": "2023-04-11T06:24:55Z",
        "description": "Use \"hash\" in R to improve the efficiency of \"inferloop.getUniqLoop\" and \"inferloop.inferLoopSignal\".",
        "html_url": "https://github.com/jumphone/InferLoop/releases/tag/v1.0.1",
        "name": "InferLoop 1.0.1",
        "release_id": 98873351,
        "tag": "v1.0.1",
        "tarball_url": "https://api.github.com/repos/jumphone/InferLoop/tarball/v1.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/jumphone/InferLoop/releases/98873351",
        "value": "https://api.github.com/repos/jumphone/InferLoop/releases/98873351",
        "zipball_url": "https://api.github.com/repos/jumphone/InferLoop/zipball/v1.0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "jumphone",
          "type": "User"
        },
        "date_created": "2023-03-20T14:03:45Z",
        "date_published": "2023-03-21T03:50:14Z",
        "description": "The first release of InferLoop.",
        "html_url": "https://github.com/jumphone/InferLoop/releases/tag/v1.0.0",
        "name": "InferLoop 1.0.0",
        "release_id": 96290444,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/jumphone/InferLoop/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/jumphone/InferLoop/releases/96290444",
        "value": "https://api.github.com/repos/jumphone/InferLoop/releases/96290444",
        "zipball_url": "https://api.github.com/repos/jumphone/InferLoop/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Requirements:",
        "type": "Text_excerpt",
        "value": "**R 4.2.0**\n\n    library(data.table) # 1.14.2\n    library(stringr)    # 1.4.0\n    library(parallel)   # 4.2.0\n    library(hash)       # 2.2.6.2\n    library(Seurat)     # 4.1.1\n    library(Signac)     # 1.7.0\n    library(monocle)    # 2.24.1\n    #monocle2, https://www.bioconductor.org/packages/release/bioc/html/monocle.html\n    library(cicero)     # 0.8.10\n    #cicero for monocle2, https://cole-trapnell-lab.github.io/cicero-release/docs/\n    library(glassoFast) # 1.0\n\n**Python 3.7.9**\n\n    import sys\n    import _pickle as pickle  \n    import numpy              # 1.20.0\n    from scipy import stats   # 1.5.4\n\n</br>\n"
      },
      "source": "https://raw.githubusercontent.com/jumphone/inferloop/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 01:20:22",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "More tools &amp; studies: https://fzhang.bioinfo-lab.com/",
        "parent_header": [
          "4. Demo code:",
          "Section VI, Identifying cell-type specific loops"
        ],
        "type": "Text_excerpt",
        "value": "\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
      },
      "source": "https://raw.githubusercontent.com/jumphone/inferloop/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "3. Demo data:",
        "type": "Text_excerpt",
        "value": "Key words: scATAC-seq, 10x genomics, PBMC\n\nFile | Link\n:-------------------------|:-------------------------\nCounts | [atac_v1_pbmc_10k_filtered_peak_bc_matrix.h5](https://cf.10xgenomics.com/samples/cell-atac/1.0.1/atac_v1_pbmc_10k/atac_v1_pbmc_10k_filtered_peak_bc_matrix.h5)\nMetadata | [atac_v1_pbmc_10k_singlecell.csv](https://cf.10xgenomics.com/samples/cell-atac/1.0.1/atac_v1_pbmc_10k/atac_v1_pbmc_10k_singlecell.csv)\nFragments | [atac_v1_pbmc_10k_fragments.tsv.gz](https://cf.10xgenomics.com/samples/cell-atac/1.0.1/atac_v1_pbmc_10k/atac_v1_pbmc_10k_fragments.tsv.gz)\nFragments index | [atac_v1_pbmc_10k_fragments.tsv.gz.tbi](https://cf.10xgenomics.com/samples/cell-atac/1.0.1/atac_v1_pbmc_10k/atac_v1_pbmc_10k_fragments.tsv.gz.tbi)\nAnnotation reference | [pbmc_10k_v3.rds](https://signac-objects.s3.amazonaws.com/pbmc_10k_v3.rds)\n\n</br>\n"
      },
      "source": "https://raw.githubusercontent.com/jumphone/inferloop/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4. Demo code:",
        "type": "Text_excerpt",
        "value": "[The official website of Signac](https://stuartlab.org/signac/)\n"
      },
      "source": "https://raw.githubusercontent.com/jumphone/inferloop/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Section I, Using Signac to process the scATAC-seq data",
        "parent_header": [
          "4. Demo code:"
        ],
        "type": "Text_excerpt",
        "value": "    # /home/toolkit/tools/R4.2.0/bin/R\n    setwd('/home/disk/database/data/ICS_scHIC/fzz_website_demo')\n\n    library(Signac)\n    library(Seurat)\n    library(GenomeInfoDb)\n    library(EnsDb.Hsapiens.v75)\n    library(ggplot2)\n    library(patchwork)\n    set.seed(1234)\n    \n    counts <- Read10X_h5(filename = \"atac_v1_pbmc_10k_filtered_peak_bc_matrix.h5\")\n    \n    metadata <- read.csv(\n        file = \"atac_v1_pbmc_10k_singlecell.csv\",\n        header = TRUE,\n        row.names = 1\n        )\n    \n    chrom_assay <- CreateChromatinAssay(\n        counts = counts,\n        sep = c(\":\", \"-\"),\n        genome = 'hg19',\n        fragments = 'atac_v1_pbmc_10k_fragments.tsv.gz',\n        min.cells = 10,\n        min.features = 200\n        )\n\n    pbmc <- CreateSeuratObject(\n        counts = chrom_assay,\n        assay = \"peaks\",\n        meta.data = metadata\n        )\n    \n    annotations <- GetGRangesFromEnsDb(ensdb = EnsDb.Hsapiens.v75)\n    annotations@seqnames@values=paste0('chr',annotations@seqnames@values)\n    annotations@seqinfo@seqnames=paste0('chr',annotations@seqinfo@seqnames)\n    annotations@seqinfo@genome=rep('hg19',length(annotations@seqinfo@genome))\n    annotations@seqnames@values[which(annotations@seqnames@values=='chrMT')]='chrM'\n    annotations@seqinfo@seqnames[which(annotations@seqinfo@seqnames=='chrMT')]='chrM'\n    annotations@seqnames@values=factor(annotations@seqnames@values,levels=annotations@seqinfo@seqnames)\n    \n    Annotation(pbmc) <- annotations\n    \n    pbmc <- NucleosomeSignal(object = pbmc)\n    pbmc <- TSSEnrichment(object = pbmc, fast = FALSE)\n    pbmc$pct_reads_in_peaks <- pbmc$peak_region_fragments / pbmc$passed_filters * 100\n    pbmc$blacklist_ratio <- pbmc$blacklist_region_fragments / pbmc$peak_region_fragments\n    \n    pbmc <- subset(\n        x = pbmc,\n        subset = peak_region_fragments > 3000 &\n        peak_region_fragments < 20000 &\n        pct_reads_in_peaks > 15 &\n        blacklist_ratio < 0.05 &\n        nucleosome_signal < 4 &\n        TSS.enrichment > 2\n        )\n    \n    # Call peaks using MACS2\n    \n    peaks <- CallPeaks(pbmc, macs2.path = \"/home/toolkit/local/bin/macs2\")\n    peaks <- keepStandardChromosomes(peaks, pruning.mode = \"coarse\")\n    peaks <- subsetByOverlaps(x = peaks, ranges = blacklist_hg19, invert = TRUE)\n    \n    saveRDS(peaks, 'peaks_macs2.rds')\n    \n    macs2_counts <- FeatureMatrix(\n        fragments = Fragments(pbmc),\n        features = peaks,\n        cells = colnames(pbmc)\n        )\n    \n    pbmc[[\"macs2\"]] <- CreateChromatinAssay(\n        counts = macs2_counts,\n        fragments = 'atac_v1_pbmc_10k_fragments.tsv.gz',\n        annotation = annotations\n        )\n    \n    DefaultAssay(pbmc)='macs2'\n    pbmc <- RunTFIDF(pbmc)\n    pbmc <- FindTopFeatures(pbmc, min.cutoff = 'q0')\n    pbmc <- RunSVD(pbmc)\n    \n    pbmc <- RunUMAP(object = pbmc, reduction = 'lsi', dims = 2:30)\n    pbmc <- FindNeighbors(object = pbmc, reduction = 'lsi', dims = 2:30)\n    pbmc <- FindClusters(object = pbmc, verbose = FALSE, algorithm = 3)\n    \n    DimPlot(object = pbmc, label = TRUE) + NoLegend()\n\n    gene.activities <- GeneActivity(pbmc)\n\n    pbmc[['RNA']] <- CreateAssayObject(counts = gene.activities)\n    DefaultAssay(pbmc)='RNA'\n    pbmc <- RunTFIDF(pbmc)\n    \n    pbmc_rna <- readRDS(\"pbmc_10k_v3.rds\")\n\n    transfer.anchors <- FindTransferAnchors(\n        reference = pbmc_rna,\n        query = pbmc,\n        reduction = 'cca'\n        )\n\n     predicted.labels <- TransferData(\n         anchorset = transfer.anchors,\n         refdata = pbmc_rna$celltype,\n         weight.reduction = pbmc[['lsi']],\n         dims = 2:30\n         )\n\n    pbmc <- AddMetaData(object = pbmc, metadata = predicted.labels)\n\n    plot1 <- DimPlot(\n        object = pbmc_rna,\n        group.by = 'celltype',\n        label = TRUE,\n        repel = TRUE) + NoLegend() + ggtitle('scRNA-seq')\n\n    plot2 <- DimPlot(\n        object = pbmc,\n        group.by = 'predicted.id',\n        label = TRUE,\n        repel = TRUE) + NoLegend() + ggtitle('scATAC-seq')\n\n    plot1 + plot2\n    \n    saveRDS(pbmc, file='pbmc_signac.rds')\n    \n</br>    \n\n[Click back to the top](#)\n\n</br>\n</br>\n"
      },
      "source": "https://raw.githubusercontent.com/jumphone/inferloop/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Section II, Using Cicero to predict global loops",
        "parent_header": [
          "4. Demo code:"
        ],
        "type": "Text_excerpt",
        "value": "[The official website of Cicero](https://cole-trapnell-lab.github.io/cicero-release/docs/)  \n    \n    library(monocle)\n    library(cicero)\n    source('https://raw.githubusercontent.com/jumphone/InferLoop/main/inferloop/InferLoop.R')\n    \n    pbmc=readRDS(file='pbmc_signac.rds')\n    DefaultAssay(pbmc)='macs2'\n    \n    indata=as.matrix(pbmc[['macs2']]@data)\n    used_coords=pbmc@reductions$umap@cell.embeddings\n    genome.df=inferloop.getGenomeDF.hg19()\n    \n    conns=inferloop.cicero(indata, used_coords, genome.df)\n    \n    saveRDS(conns, file='conns_cicero.rds')\n\n</br>\n\n[Click back to the top](#)\n\n</br>\n</br>\n"
      },
      "source": "https://raw.githubusercontent.com/jumphone/inferloop/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Section IV, Using InferLoop to infer loop signals",
        "parent_header": [
          "4. Demo code:"
        ],
        "type": "Text_excerpt",
        "value": "[Download 'mat.txt' and 'net.txt' of demo data](https://sourceforge.net/projects/inferloop/files/demo/)\n"
      },
      "source": "https://raw.githubusercontent.com/jumphone/inferloop/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "R version",
        "parent_header": [
          "4. Demo code:",
          "Section IV, Using InferLoop to infer loop signals"
        ],
        "type": "Text_excerpt",
        "value": "    source('https://raw.githubusercontent.com/jumphone/InferLoop/main/inferloop/InferLoop.R')\n    mat=inferloop.loadSignal('mat.txt')\n    net=read.table('net.txt',sep='\\t',header=F,row.names=NULL)\n    net_uniq=inferloop.getUniqLoop(net)\n    MAT=inferloop.inferLoopSignal(mat, net_uniq, r=0)\n    write.table(MAT,file='signal_mat.txt', row.names=T,col.names=T,quote=F,sep='\\t')\n    "
      },
      "source": "https://raw.githubusercontent.com/jumphone/inferloop/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Python3 version",
        "parent_header": [
          "4. Demo code:",
          "Section IV, Using InferLoop to infer loop signals"
        ],
        "type": "Text_excerpt",
        "value": "    mkdir output\n    python3 inferloop/step0_uniqNet.py net.txt output/net_uniq.txt\n    python3 inferloop/step1_buildIndex.py output/net_uniq.txt mat.txt output/mat.index\n    python3 inferloop/step2_runInferLoop.py output/mat.index output/signal_mat.txt \n    # In order to adjust the parameter \"r\", users can modify \"R\" in \"inferloop/step2_runInferLoop.py\" \n\n</br>\n\n[Click back to the top](#)\n\n</br>\n</br>\n"
      },
      "source": "https://raw.githubusercontent.com/jumphone/inferloop/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Section V, Inferring cell-type specific loop signals",
        "parent_header": [
          "4. Demo code:"
        ],
        "type": "Text_excerpt",
        "value": "    \n    source('https://raw.githubusercontent.com/jumphone/InferLoop/main/inferloop/InferLoop.R')\n    \n    pbmc=readRDS(file='pbmc_signac.rds')\n    DefaultAssay(pbmc)='macs2'\n    \n    MAT=inferloop.loadSignal('output/signal_mat.txt')\n    \n    CLST=readRDS('BIN.rds')$clst    \n    MAT_CELL=inferloop.bin2cell(MAT, CLST)\n    TYPE=pbmc$predicted.id\n    MAT_TYPE=.generate_mean(MAT_CELL, TYPE)\n    \n    saveRDS(MAT_TYPE, 'signal_mat_type.rds')\n    \n    ##################################\n    library(trackViewer)\n    library(InteractionSet)\n    \n    library(TxDb.Hsapiens.UCSC.hg19.knownGene)\n    library(org.Hs.eg.db)\n    \n    #####################\n    # CD4 gene, chr12:6898638-6929976\n    range <- GRanges(\"chr12\", IRanges(6898638-20000, 6929976+20000))\n    ids <- getGeneIDsFromTxDb(range, TxDb.Hsapiens.UCSC.hg19.knownGene)\n    symbols <- mget(ids, org.Hs.egSYMBOL)\n    genes <- geneTrack(ids, TxDb.Hsapiens.UCSC.hg19.knownGene, \n                   symbols, asList=FALSE)\n                   \n    #####################\n    loop=inferloop.splitLoop(rownames(MAT))\n    anchor1=inferloop.bed2granges(inferloop.splitLoop(loop[,1], '-',3))\n    anchor2=inferloop.bed2granges(inferloop.splitLoop(loop[,2], '-',3))\n    gi=GInteractions(anchor1,anchor2)\n    \n    TMP=MAT_TYPE\n    TMP[which(TMP<0)]=0\n    score_type=as.data.frame(TMP)\n    score_type[which(score_type<0)]=0\n    score_CD4_Naive=score_type$'CD4 Naive'\n    score_CD8_Naive=score_type$'CD8 Naive'\n    \n    gi_cd4=gi\n    gi_cd8=gi\n    mcols(gi_cd4)$score=score_CD4_Naive*100\n    mcols(gi_cd8)$score=score_CD8_Naive*100  \n    ############################\n    \n    cd4 <- gi2track(gi_cd4)\n    cd8 <- gi2track(gi_cd8)\n    ############################\n    setTrackStyleParam(cd4, \"tracktype\", \"link\")\n    setTrackStyleParam(cd4, \"breaks\", c(seq(from=0, to=50, by=10), 200))\n    setTrackStyleParam(cd8, \"tracktype\", \"link\")\n    setTrackStyleParam(cd8, \"breaks\", c(seq(from=0, to=50, by=10), 200))\n    \n    optSty <- optimizeStyle(trackList(genes, cd4, cd8), theme=\"safe\")\n    trackListW <- optSty$tracks\n    viewerStyleW <- optSty$style\n    viewTracks(trackListW, gr=range, viewerStyle=viewerStyleW)   \n    \n    pdf('f01_celltype_ILS.pdf',width=7,height=7)\n    viewTracks(trackListW, gr=range, viewerStyle=viewerStyleW) \n    dev.off()\n    ##################################\n\n<img src=\"https://fzhang.bioinfo-lab.com/img/f01_celltype_ILS.png\" width=\"500\">\n\n</br>\n\n[Click back to the top](#)\n\n</br>\n</br>\n\n"
      },
      "source": "https://raw.githubusercontent.com/jumphone/inferloop/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Section VI, Identifying cell-type specific loops",
        "parent_header": [
          "4. Demo code:"
        ],
        "type": "Text_excerpt",
        "value": "    \n    pbmc[['ILS']]=CreateAssayObject(data = MAT_CELL)\n    DefaultAssay(pbmc)='ILS'\n    \n    Idents(pbmc)=pbmc$predicted.id\n    \n    cd4_markers=FindMarkers(pbmc, ident.1='CD4 Naive', ident.2='CD8 Naive',test.use='t', only.pos=T, min.pct = 0.1, logfc.threshold = 0.1,verbose=T)\n    cd8_markers=FindMarkers(pbmc, ident.1='CD8 Naive', ident.2='CD4 Naive',test.use='t', only.pos=T, min.pct = 0.1, logfc.threshold = 0.1,verbose=T)\n    \n    saveRDS(cd4_markers, file='cd4_markers.rds')\n    saveRDS(cd8_markers, file='cd8_markers.rds')\n    \n    N=20000\n    cd4_loops=rownames(cd4_markers[1:N,])\n    cd8_loops=rownames(cd8_markers[1:N,])\n    \n    ##################################\n    library(trackViewer)\n    library(InteractionSet)\n    \n    library(TxDb.Hsapiens.UCSC.hg19.knownGene)\n    library(org.Hs.eg.db)\n    \n    #####################\n    # CD4 gene, chr12:6898638-6929976\n    range <- GRanges(\"chr12\", IRanges(6898638-20000, 6929976+20000))\n    ids <- getGeneIDsFromTxDb(range, TxDb.Hsapiens.UCSC.hg19.knownGene)\n    symbols <- mget(ids, org.Hs.egSYMBOL)\n    genes <- geneTrack(ids, TxDb.Hsapiens.UCSC.hg19.knownGene, \n                   symbols, asList=FALSE)\n                   \n    #####################\n    loop=inferloop.splitLoop(rownames(MAT))\n    anchor1=inferloop.bed2granges(inferloop.splitLoop(loop[,1], '-',3))\n    anchor2=inferloop.bed2granges(inferloop.splitLoop(loop[,2], '-',3))\n    gi=GInteractions(anchor1,anchor2)\n    \n    TMP=MAT_TYPE\n    TMP[which(TMP<0)]=0\n    score_type=as.data.frame(TMP)\n    score_type[which(score_type<0)]=0\n    score_CD4_Naive=score_type$'CD4 Naive'\n    score_CD4_Naive[which(! rownames(MAT)  %in% cd4_loops)]=0\n    score_CD8_Naive=score_type$'CD8 Naive'\n    score_CD8_Naive[which(! rownames(MAT)  %in% cd8_loops)]=0\n    \n    gi_cd4=gi\n    gi_cd8=gi\n    mcols(gi_cd4)$score=score_CD4_Naive*100\n    mcols(gi_cd8)$score=score_CD8_Naive*100  \n    ############################\n    \n    cd4 <- gi2track(gi_cd4)\n    cd8 <- gi2track(gi_cd8)\n    ############################\n    setTrackStyleParam(cd4, \"tracktype\", \"link\")\n    setTrackStyleParam(cd4, \"breaks\", c(seq(from=0, to=50, by=10), 200))\n    setTrackStyleParam(cd8, \"tracktype\", \"link\")\n    setTrackStyleParam(cd8, \"breaks\", c(seq(from=0, to=50, by=10), 200))\n    \n    optSty <- optimizeStyle(trackList(genes, cd4, cd8), theme=\"safe\")\n    trackListW <- optSty$tracks\n    viewerStyleW <- optSty$style\n    viewTracks(trackListW, gr=range, viewerStyle=viewerStyleW)   \n    \n    \n    \n    pdf('f02_celltype_loops.pdf',width=7,height=7)\n    viewTracks(trackListW, gr=range, viewerStyle=viewerStyleW) \n    dev.off()\n    ##################################\n\n<img src=\"https://fzhang.bioinfo-lab.com/img/f02_celltype_loops.png\" width=\"500\">\n    \n\n[Click back to the top](#)\n\n</br>\n</br>\n    \n    \n    \n    \n    \n    \n\n<img src=\"https://fzhang.bioinfo-lab.com/img/white.png\" height=\"50\">\n\n-------------------------------------------------------------------------------------------------------------------\n\n<img src=\"https://fzhang.bioinfo-lab.com/img/panda_happy_logo.png\" height='150'>\n"
      },
      "source": "https://raw.githubusercontent.com/jumphone/inferloop/main/README.md",
      "technique": "header_analysis"
    }
  ]
}