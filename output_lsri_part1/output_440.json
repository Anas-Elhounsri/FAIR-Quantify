{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/HKU-BAL/Clair3-MP"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-05-03T12:01:30Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-04-23T14:53:37Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "variant calling using with sequencing data from multiple platforms"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "parent_header": [
          "Clair3-MP: variant calling using sequencing data from multiple platforms"
        ],
        "type": "Text_excerpt",
        "value": "Clair3-MP (Multi-Platform) is a deep-learning-based variant calling method that supports multi-platform data, including ONT-Illumina, ONT-PacBio, and PacBio-Illumina to facilitate research involving different data in variant calling. Clair3-MP features a neural network that supports multi-platform data and trains a series of new models tailored to perform variant calling using different multi-platform data. In addition, Clair3-MP can incorporate reference genome stratification information by including a stratification channel in its input tensors. This channel encodes the platform preference into the neural network and enables better variant-calling performance for multi-platform data.\n\nDetailed descriptions of the software and results for Clair3-MP can be found [here](https://www.biorxiv.org/content/10.1101/2023.05.31.543184v1).\n\n"
      },
      "source": "https://raw.githubusercontent.com/HKU-BAL/Clair3-MP/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9450168719118273,
      "result": {
        "original_header": "What's New in Clair3-MP",
        "type": "Text_excerpt",
        "value": "Clair3-MP's features: \n- Clair3-MP is a research project to explore the performance using multiple platform datasets for variant calling, including Illumina, ONT, and PacBio;\n- We benchmarked Clair3-MP performance at different combinations of ONT, Illumina, and PacBio, and found that ONT + Illumina can improve variant calling at some configurations;\n- We also explored adding genomic regions information into the neural network and observed improvement at variant calling. \n\nWhat is expected from using Clair3-MP: \n- Clair3-MP can improve **SNP performance**, especially at **low-coverage** data for ONT + Illumina;\n  >  Clair3-MP improved SNP F1 score from 0.9681(Clair3, ONT) and 0.9353(Clair3, Illumina) to 0.9877(Clair3-MP, ONT+Illumina) at 10x data.\n- Clair3-MP has no improvement or has comparable performance at INDEL for ONT+Illumina and using PacBio data;\n- Clair3-MP can improve SNP and INDEL performance at some genomic regions, including large repeat regions, segmental duplication regions, etc. \nMore information is available in our [preprint](https://www.biorxiv.org/content/10.1101/2023.05.31.543184v1), and testing results are available in Supplementary Table S1 in the preprint.\n  \n----\n \n"
      },
      "source": "https://raw.githubusercontent.com/HKU-BAL/Clair3-MP/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/HKU-BAL/Clair3-MP/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/HKU-BAL/Clair3-MP/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "HKU-BAL/Clair3-MP"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Clair3-MP: variant calling using sequencing data from multiple platforms"
      },
      "source": "https://raw.githubusercontent.com/HKU-BAL/Clair3-MP/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HKU-BAL/Clair3-MP/main/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/HKU-BAL/Clair3-MP/main/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HKU-BAL/Clair3-MP/main/run_clair3_mp.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HKU-BAL/Clair3-MP/main/run_clair3.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HKU-BAL/Clair3-MP/main/training_scripts/4_train.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HKU-BAL/Clair3-MP/main/training_scripts/1_gen_phased_vcf_and_bam.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HKU-BAL/Clair3-MP/main/training_scripts/3_CT.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HKU-BAL/Clair3-MP/main/training_scripts/2_gen_pileup.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HKU-BAL/Clair3-MP/main/scripts/clair3.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HKU-BAL/Clair3-MP/main/mp/Call_Clair3_MP.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Option 1. Docker pre-built image",
        "parent_header": [
          "Clair3-MP: variant calling using sequencing data from multiple platforms",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "A pre-built docker image is available [here](https://hub.docker.com/r/hkubal/clair3-mp). With it you can run Clair3-MP using a single command.\n\nCaution: Absolute path is needed for both `_BAM_PLATFORM_A/B`, `_REF`, and `_OUTPUT_DIR`.\n\n```bash\n\n_BAM_PLATFORM_A=$[ONT_BAM] #input bam\n_BAM_PLATFORM_B=$[ILMN_BAM]\n_REF=\"[REF file]\"\n_OUTPUT_DIR=\"[OUTPUT DIR]\"\n\n_PLATFORM_A=\"ont\"\n_PLATFORM_B=\"ilmn\"\n_SAMPLE_PLATFORM_A=\"XXX_ont\" #sample name\n_SAMPLE_PLATFORM_B=\"XXX_ilmn\"\nmkdir -p ${_OUTPUT_DIR}\n_THREADS=36\n\n# docker path\n_MODEL_DIR_C3_PLATFORM_A=\"ont_guppy5\"   \n_MODEL_DIR_C3_PLATFORM_B=\"ilmn\"    \n_MODEL_DIR_MP=\"ont_ilmn\"   \n\n\nDIR_A=\"$(dirname \"${_BAM_PLATFORM_A}\")\"\nDIR_B=\"$(dirname \"${_BAM_PLATFORM_B}\")\"\nDIR_REF=\"$(dirname \"${_REF}\")\"\n\ndocker run -it \\\n-v ${DIR_A}:${DIR_A} \\\n-v ${DIR_B}:${DIR_B} \\\n-v ${DIR_REF}:${DIR_REF} \\\n-v ${_OUTPUT_DIR}:${_OUTPUT_DIR} \\\nhkubal/clair3-mp:latest \\\n/opt/bin/run_clair3_mp.sh \\\n--bam_fn_c=${_BAM_PLATFORM_A} \\\n--bam_fn_p1=${_BAM_PLATFORM_B} \\\n--bam_fn_c_platform=${_PLATFORM_A} \\\n--bam_fn_p1_platform=${_PLATFORM_B} \\\n--output=${_OUTPUT_DIR} \\\n--ref_fn=${_REF} \\\n--threads=${_THREADS} \\\n--model_path_clair3_c=/opt/models/clair3_models/${_MODEL_DIR_C3_PLATFORM_A} \\\n--model_path_clair3_p1=/opt/models/clair3_models/${_MODEL_DIR_C3_PLATFORM_B} \\\n--model_path_clair3_mp=/opt/models/clair3_mp_models/${_MODEL_DIR_MP} \\\n--sample_name_c=${_SAMPLE_PLATFORM_A} \\\n--sample_name_p1=${_SAMPLE_PLATFORM_B} \\\n--ctg_name=chr20 \n\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/HKU-BAL/Clair3-MP/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Option 2. Singularity",
        "parent_header": [
          "Clair3-MP: variant calling using sequencing data from multiple platforms",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "**Caution**: Absolute path is needed for both `INPUT_DIR` and `OUTPUT_DIR`. \n```\n_BAM_PLATFORM_A=$[ONT_BAM] #input bam\n_BAM_PLATFORM_B=$[ILMN_BAM]\n_REF=\"[REF file]\"\n_OUTPUT_DIR=\"[OUTPUT DIR]\"\n\n_PLATFORM_A=\"ont\"\n_PLATFORM_B=\"ilmn\"\n_SAMPLE_PLATFORM_A=\"XXX_ont\" #sample name\n_SAMPLE_PLATFORM_B=\"XXX_ilmn\"\nmkdir -p ${_OUTPUT_DIR}\n_THREADS=36\n\n_MODEL_DIR_C3_PLATFORM_A=\"ont_guppy5\"   \n_MODEL_DIR_C3_PLATFORM_B=\"ilmn\"    \n_MODEL_DIR_MP=\"ont_ilmn\"   \n\n\nDIR_A=\"$(dirname \"${_BAM_PLATFORM_A}\")\"\nDIR_B=\"$(dirname \"${_BAM_PLATFORM_B}\")\"\nDIR_REF=\"$(dirname \"${_REF}\")\"\n\nconda config --add channels defaults\nconda create -n singularity-env -c conda-forge singularity -y\nconda activate singularity-env\n\n# singularity pull docker pre-built image\nsingularity pull docker://hkubal/clair3-mp:latest\n\nsingularity exec \\\n-B ${DIR_A},${DIR_B},${DIR_REF},${_OUTPUT_DIR} \\\nclair3-mp_latest.sif \\\n/opt/bin/run_clair3_mp.sh \\\n--bam_fn_c=${_BAM_PLATFORM_A} \\\n--bam_fn_p1=${_BAM_PLATFORM_B} \\\n--bam_fn_c_platform=${_PLATFORM_A} \\\n--bam_fn_p1_platform=${_PLATFORM_B} \\\n--output=${_OUTPUT_DIR} \\\n--ref_fn=${_REF} \\\n--threads=${_THREADS} \\\n--model_path_clair3_c=/opt/models/clair3_models/${_MODEL_DIR_C3_PLATFORM_A} \\\n--model_path_clair3_p1=/opt/models/clair3_models/${_MODEL_DIR_C3_PLATFORM_B} \\\n--model_path_clair3_mp=/opt/models/clair3_mp_models/${_MODEL_DIR_MP} \\\n--sample_name_c=${_SAMPLE_PLATFORM_A} \\\n--sample_name_p1=${_SAMPLE_PLATFORM_B} \\\n--ctg_name=chr20\n```\n"
      },
      "source": "https://raw.githubusercontent.com/HKU-BAL/Clair3-MP/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Option 3. Anaconda install:",
        "parent_header": [
          "Clair3-MP: variant calling using sequencing data from multiple platforms",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Please install anaconda using the official [guide](https://docs.anaconda.com/anaconda/install) or using the commands below:\n\n```bash\nwget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\nchmod +x ./Miniconda3-latest-Linux-x86_64.sh\n./Miniconda3-latest-Linux-x86_64.sh\n```\n\n**Install Clair3-MP env using anaconda step by step:**\n\n\n```bash\n# create and activate an environment named clair3\nconda create -n clair3-mp python=3.6.10 -y\nsource activate clair3-mp\n\n# install pypy and packages in the environemnt\nconda install -c conda-forge pypy3.6 -y\npypy3 -m ensurepip\npypy3 -m pip install mpmath==1.2.1\n\n# install python packages in environment\npip3 install tensorflow==2.2.0\npip3 install tensorflow-addons==0.11.2 tables==3.6.1\nconda install -c anaconda pigz==2.4 -y\nconda install -c conda-forge parallel=20191122 zstd=1.4.4 -y\nconda install -c conda-forge -c bioconda samtools=1.10 -y\nconda install -c conda-forge -c bioconda whatshap=1.0 -y\n\n# clone Clair3-MP\ngit clone https://github.com/HKU-BAL/Clair3-MP.git\ncd Clair3-MP\n\n# download Clair3's pre-trained models\nmkdir -p models/clair3_models\nwget http://www.bio8.cs.hku.hk/clair3/clair3_models/clair3_models.tar.gz\ntar -zxvf clair3_models.tar.gz -C ./models/clair3_models\n\n\n# download Clair3-MP's pre-trained models\nmkdir -p models/clair3_mp_models\n# download the Clair3-MP models based on your sequencing data platforms \n# please use the correct clair3-mp models for specific platforms: ont_ilmn, ont_pb, pb_ilmn\nwget http://www.bio8.cs.hku.hk/clair3_mp/clair3_mp_models/clair3_mp_models.tar.gz\ntar -zxvf clair3_mp_models.tar.gz -C ./models/clair3_mp_models\n```\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/HKU-BAL/Clair3-MP/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Option 4, install via Docker Dockerfile",
        "parent_header": [
          "Clair3-MP: variant calling using sequencing data from multiple platforms",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "```\n# clone Clair3-MP\ngit clone https://github.com/hku-bal/Clair3-MP.git\ncd Clair3-MP\n\n# build a docker image named hkubal/clair3-mp:latest\n# might require docker authentication to build docker image \ndocker build -f ./Dockerfile -t hkubal/clair3-mp:latest .\n\n# run clair3-mp docker image like \ndocker run -it hkubal/clair3-mp:latest /opt/bin/run_clair3_mp.sh --help\n```\n"
      },
      "source": "https://raw.githubusercontent.com/HKU-BAL/Clair3-MP/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/HKU-BAL/Clair3-MP/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "BSD 3-Clause \"New\" or \"Revised\" License",
        "spdx_id": "BSD-3-Clause",
        "type": "License",
        "url": "https://api.github.com/licenses/bsd-3-clause",
        "value": "https://api.github.com/licenses/bsd-3-clause"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "Copyright 2023 The University of Hong Kong, Department of Computer Science\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\n   may be used to endorse or promote products derived from this software without\n   specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
      },
      "source": "https://raw.githubusercontent.com/HKU-BAL/Clair3-MP/main/LICENSE.md",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Clair3-MP"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "HKU-BAL"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 1033369,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 78244,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 74978,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 35105,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 2315,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/HKU-BAL/Clair3-MP/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 00:45:16",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 4
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "Clair3-MP: variant calling using sequencing data from multiple platforms"
        ],
        "type": "Text_excerpt",
        "value": ":exclamation::exclamation::exclamation: **Important Note** :exclamation::exclamation::exclamation:\n\nFor using ONT data, we currently only trained a model on ONT guppy5 data, i.e \"clair3_models/ont_guppy5\".\nFor using PacBio data, we currently only trained a model on PacBio hifi data, i.e \"clair3_models/ont_hifi\".\n\nArgument setting for multiple platform data input:\n\n|INPUT data Setting|bam_fn_c_platform|bam_fn_p1_platform|model_path_clair3_c             |model_path_clair3_p1      |model_path_clair3_mp             |\n|------------------|-----------------|------------------|--------------------------------|--------------------------|---------------------------------|\n|ONT + ILLUMINA    | ont             | ilmn             | models/clair3_models/ont_guppy5| models/clair3_models/ilmn| models/clair3_mp_models/ont_ilmn|\n|ONT + PabBio      | ont             | hifi             | models/clair3_models/ont_guppy5| models/clair3_models/hifi| models/clair3_mp_models/ont_pb|\n|PacBio + ILLUMINA | hifi            | ilmn             | models/clair3_models/hifi      | models/clair3_models/ilmn| models/clair3_mp_models/pb_ilmn |\n\n```bash\n# run clair3-mp\n_BAM_PLATFORM_A=\"input_platform_A.bam\"          # replace your bam file generated from platform A\n_BAM_PLATFORM_B=\"input_platform_B.bam\"          # replace your bam file generated from platform B\n_PLATFORM_A=\"[Platform A name]\"                 #indicate which platform is used for ${_BAM_PLATFORM_A}\n_PLATFORM_B=\"[Platform B name]\"                 #indicate which platform is used for ${_BAM_PLATFORM_B}\n_SAMPLE_PLATFORM_A=\"[sample ID+Platform A name]\"                                       # e.g. HG003_ont\n_SAMPLE_PLATFORM_B=\"[sample ID+Platform B name]\"                                      # e.g. HG003_ilmn\n_REF=\"ref.fa\"                                   # replace your reference file name here\n_OUTPUT_DIR=\"[YOUR_OUTPUT_FOLDER]\"                                                      # e.g. ./output\n_THREADS=\"[MAXIMUM_THREADS]\"                                                                   # e.g. 8\n_MODEL_DIR_C3_PLATFORM_A=\"[Clair3 MODEL NAME for platform A data]\"    # MODEL PATH for Clair3 pileup model for flatform A, e.g. ./models/clair3_models/ont_guppy5\n_MODEL_DIR_C3_PLATFORM_B=\"[Clair3 MODEL NAME for platform B data]\"    # MODEL PATH for Clair3 pileup model for flatform B, e.g. ./models/clair3_models/ilmn\n_MODEL_DIR_MP=\"[Clair3-MP MODEL for platform A+B]\"                    # MODEL PATH for Clair3-MP model, e.g. ./models/clair3_mp_models/${_PLATFORM_A}_${_PLATFORM_B}\n\n./run_clair3_mp.sh \\\n--bam_fn_c=${_BAM_PLATFORM_A} \\\n--bam_fn_p1=${_BAM_PLATFORM_B} \\\n--bam_fn_c_platform=${_PLATFORM_A} \\\n--bam_fn_p1_platform=${_PLATFORM_B} \\\n--output=${_OUTPUT_DIR} \\\n--ref_fn=${_REF} \\\n--threads=${_THREADS} \\\n--model_path_clair3_c=${_MODEL_DIR_C3_PLATFORM_A} \\\n--model_path_clair3_p1=${_MODEL_DIR_C3_PLATFORM_B} \\\n--model_path_clair3_mp=${_MODEL_DIR_MP} \\\n--sample_name_c=${_SAMPLE_PLATFORM_A} \\\n--sample_name_p1=${_SAMPLE_PLATFORM_B}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/HKU-BAL/Clair3-MP/main/README.md",
      "technique": "header_analysis"
    }
  ]
}