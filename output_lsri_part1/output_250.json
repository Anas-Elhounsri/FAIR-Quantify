{
  "application_domain": [
    {
      "confidence": 15.23,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "References",
        "parent_header": [
          "MuDCoD: Multi-subject Dynamic Community Detection"
        ],
        "type": "Text_excerpt",
        "value": "* [1]: Liu, F., Choi, D., Xie, L., Roeder, K. Global spectral clustering in dynamic networks. Proceedings of the National Academy of Sciences 115(5), 927\u2013932 (2018). https://doi.org/10.1073/pnas.1718449115\n* [2]: Jerber, J., Seaton, D.D., Cuomo, A.S.E. et al. Population-scale single-cell RNA-seq profiling across dopaminergic neuron differentiation. Nat Genet 53, 304\u2013312 (2021). https://doi.org/10.1038/s41588-021-00801-6\n* [3]: Lu, Shan, and S\u00fcnd\u00fcz Kele\u015f. \"Debiased personalized gene coexpression networks for population-scale scRNA-seq data.\" Genome Research 33.6 (2023): 932-947.\n"
      },
      "source": "https://raw.githubusercontent.com/bo1929/MuDCoD/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/bo1929/MuDCoD"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-06-14T19:59:17Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-03-13T05:36:34Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MuDCoD: Multi-subject Dynamic Community Detection"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9804981923003078,
      "result": {
        "original_header": "MuDCoD: Multi-subject Dynamic Community Detection",
        "type": "Text_excerpt",
        "value": "MuDCoD (Multi-subject Dynamic Community Detection) provides robust community detection in time-varying personalized networks modules.\nIt allow signal sharing between time-steps and subjects by applying eigenvector smoothing.\nWhen available, MuDCoD leverages common signals among networks of the subjects and performs robustly when subjects do not share any apparent information. Documentation can be found [here](https://bo1929.github.io/documentations/MuDCoD/community_detection.html). \n"
      },
      "source": "https://raw.githubusercontent.com/bo1929/MuDCoD/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9158544055964628,
      "result": {
        "original_header": "Multi-subject Dynamic Degree Corrected Block Model",
        "type": "Text_excerpt",
        "value": "We use the `MuSDynamicDCBM` class to generate simulation networks with a given parameter configuration.\nFor example, you can initialize a class instance as below.\n```python\nmus_dynamic_dcbm = MuSDynamicDCBM(\n  n=500,\n  k=10,\n  p_in=(0.2, 0.4),\n  p_out=(0.05, 0.1),\n  time_horizon=8,\n  r_time=0.4,\n  num_subjects=16,\n  r_subject=0.2,\n  seed=0\n)\n```\nThis will initialize a multi-subject dynamic degree corrected block model with $500$ nodes, $10$ communities, $16$ subjects, and $8$ number of time steps.\nThe connectivity matrix values will be sampled from $\\textnormal{Uniform}(0.2, 0.4)$ for the nodes within the same community and from  $\\textnormal{Uniform}(0.05, 0.1)$ for the nodes in different communities.\nThe parameter for the network evolution along the time will be $0.4$, note that higher values imply more rapid temporal change.\nSimilarly, `r_subject=0.2` parameterize the degree of dissimilarity among subjects.\nAfter initializing the `MuSDynamicDCBM`, we can generate an instance of multi-subject time series of networks by running the below line of code.\nBASH2*\nDifferent setting values correspond to the following scenarios. In our simulation experiments presented in the manuscript, we use `setting=1` and `setting=2`. \n* `setting=4`: Subjects are parents of each other at each time point.\n \n"
      },
      "source": "https://raw.githubusercontent.com/bo1929/MuDCoD/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/bo1929/MuDCoD/tree/main/docs"
      },
      "technique": "file_exploration"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/bo1929/MuDCoD/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/bo1929/MuDCoD/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "bo1929/MuDCoD"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MuDCoD: Multi-subject Dynamic Community Detection"
      },
      "source": "https://raw.githubusercontent.com/bo1929/MuDCoD/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bo1929/MuDCoD/main/docs/toy-ms-dyn-nw.png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/bo1929/MuDCoD/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "MuDCoD: Multi-subject Dynamic Community Detection"
        ],
        "type": "Text_excerpt",
        "value": "You can either clone the repository and crate a new virtual environment using poetry as described below, or simply use `pip install mudcod`.\n1. Clone the repository, and change current directory to `mudcod/`.\n  ``` bash\n  git clone https://github.com/bo1929/MuDCoD.git\n  cd MuDCoD\n  ```\n2. Create a new virtual environment with Python version 3.9 with using any version management tool, such as [`conda`](https://www.anaconda.com/products/distribution) and [`pyenv`](https://github.com/pyenv/pyenv).\n    * You can use following `conda` commands.\n    ``` bash\n    conda create -n mudcod python=3.9.0\n    conda activate mudcod\n    ```\n    * Alternatively, `pyenv` sets a local application-specific Python version by writing the version name to a file called `.python-version`, and automatically switches to that version when you are in the directory.\n    ``` bash\n    pyenv local 3.9.0\n    ```\n3. Use [poetry](https://python-poetry.org/docs/) to install dependencies in the `mudcod/` directory, and spawn a new shell.\n  ```bash\n  poetry install\n  poetry shell\n  ```\n"
      },
      "source": "https://raw.githubusercontent.com/bo1929/MuDCoD/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/bo1929/MuDCoD/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "community-detection, dynamic-networks, network-science, single-cell, single-cell-rna-seq, spectral-clustering"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2021 aliosmanberk\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/bo1929/MuDCoD/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MuDCoD"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "bo1929"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 67091,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/bo1929/MuDCoD/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "bo1929",
          "type": "User"
        },
        "date_created": "2023-09-20T18:31:27Z",
        "date_published": "2023-09-20T18:32:28Z",
        "description": "Removed redundant files, all working now.",
        "html_url": "https://github.com/bo1929/MuDCoD/releases/tag/v1.1",
        "name": "v1.1",
        "release_id": 121920753,
        "tag": "v1.1",
        "tarball_url": "https://api.github.com/repos/bo1929/MuDCoD/tarball/v1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/bo1929/MuDCoD/releases/121920753",
        "value": "https://api.github.com/repos/bo1929/MuDCoD/releases/121920753",
        "zipball_url": "https://api.github.com/repos/bo1929/MuDCoD/zipball/v1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "bo1929",
          "type": "User"
        },
        "date_created": "2023-08-20T18:41:18Z",
        "date_published": "2023-08-30T18:33:19Z",
        "html_url": "https://github.com/bo1929/MuDCoD/releases/tag/v1.0",
        "name": "v1.0",
        "release_id": 119323762,
        "tag": "v1.0",
        "tarball_url": "https://api.github.com/repos/bo1929/MuDCoD/tarball/v1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/bo1929/MuDCoD/releases/119323762",
        "value": "https://api.github.com/repos/bo1929/MuDCoD/releases/119323762",
        "zipball_url": "https://api.github.com/repos/bo1929/MuDCoD/zipball/v1.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "parent_header": [
          "MuDCoD: Multi-subject Dynamic Community Detection"
        ],
        "type": "Text_excerpt",
        "value": "You are able to install dependencies by using `poetry install`.\nHowever, be aware that installed dependencies do not necessarily include all libraries used in experiment scripts (files in the `experiments/` directory).\nThe goal was keeping actual dependencies as minimal as possible.\nSo, if you want to re-produce experiments on simulation data or on single-cell RNA-seq datasets, you need to go over the imported libraries and install them separately.\nA tool like `pipreqs` or `pigar` might help in that case.\nThis is not the case for the examples (`examples/`), `poetry install` and/or `pip install mudcod` are sufficient to run them.\n"
      },
      "source": "https://raw.githubusercontent.com/bo1929/MuDCoD/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running",
        "parent_header": [
          "MuDCoD: Multi-subject Dynamic Community Detection"
        ],
        "type": "Text_excerpt",
        "value": "See the examples directory for simple examples of Multi-subject Dynamic DCBM, community detection with MuDCoD and cross-validation to choose alpha and beta, $\\alpha$ and $\\beta$.\n\nFor a Python interpreter to be able to import `mudcod`, it should be on your Python path.\nThe current working directory is (usually) included in the Python path.\nSo you can probably run the examples by running commands like `python examples/community_detection.py` inside the directory which you clone.\nYou might also want to add `mudcod` to your global Python path by installing it via `pip` or copying it to your site-packages directory.\n"
      },
      "source": "https://raw.githubusercontent.com/bo1929/MuDCoD/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 00:01:09",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 10
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Community Detection Tutorial",
        "parent_header": [
          "MuDCoD: Multi-subject Dynamic Community Detection"
        ],
        "type": "Text_excerpt",
        "value": "As described in the [documentation](https://bo1929.github.io/documentations/MuDCoD/community_detection.html) MuDCoD takes multi-dimensional `numpy` arrays as the input network argument.\nHence, whether you have constructed networks separately for each subject at different time points, or if you have your networks in a different format, it is necessary to format them appropriately.\nBelow, we apply MuDCoD to both simulated networks and real-data networks constructed from scRNA-seq data.\n"
      },
      "source": "https://raw.githubusercontent.com/bo1929/MuDCoD/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Finding Communities in Simulated Networks",
        "parent_header": [
          "MuDCoD: Multi-subject Dynamic Community Detection",
          "Community Detection Tutorial"
        ],
        "type": "Text_excerpt",
        "value": "To learn more about our simulation model refer to the [documentation](https://bo1929.github.io/documentations/MuDCoD/community_detection.html) and the below section titled [Multi-subject Dynamic Degree Corrected Block Model](#multi-subject-dynamic-degree-corrected-block-model).\n1. First construct a `MuSDynamicDCBM` instance, i.e., simulation model, with desired parameters.\n```python\nmus_dynamic_dcbm = MuSDynamicDCBM(\n  n=500,\n  k=10,\n  p_in=(0.2, 0.4),\n  p_out=(0.05, 0.1),\n  time_horizon=8,\n  num_subjects=16,\n  r_time=0.4,\n  r_subject=0.2,\n)\nadj_mus_dynamic, z_mus_dynamic_true = model_dcbm.simulate_mus_dynamic_dcbm(setting=1)\n```\nThe first dimension of `numpy` arrays `adj_mus_dynamic` and `z_mus_dynamic_true` is for subjects, and the second dimension is for time points.\nFor networks last two dimension is an $500 \\times 500$ adjacency matrix where $n$ is the number of nodes.\nFor community membership arrays (e.g., `z_mus_dynamic_true`) last dimension is an array of $500$ labels.\n\n2. Set some reasonable hyper-parameters.\nIf you have doubts, default values should work fine for `max_K` and `n_iter`. You can use cross-validation (see `examples/cross_validation.py`) for `alpha` and `beta`.\n```python\nT = 8\nS = 16\nalpha = 0.05 * np.ones((T, 2))\nbeta = 0.05 * np.ones(S)\nmax_K = 10\nn_iter = 30\n```\n\n3. Run MuDCoD iterative algorithm to find smoothed spectral representations of nodes, and then predict by clustering them to communities.\n```python\npred_MuDCoD = MuDCoD(verbose=False).fit_predict(\n  adj_mus_dynamic,\n  alpha=alpha,\n  beta=beta,\n  max_K=max_K,\n  n_iter=n_iter,\n  opt_K=\"null\",\n  monitor_convergence=True,\n)\n```\nYou can compare `pred_MuDCoD` and `z_mus_dynamic_true` to evaluate the accuracy based on the Multi-subject Dynamic Degree Corrected Block Model. Note that they are both $16 \\times 8 \\times 500$ arrays.\n"
      },
      "source": "https://raw.githubusercontent.com/bo1929/MuDCoD/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Finding Communities in Networks Constructed from scRNA-seq Data",
        "parent_header": [
          "MuDCoD: Multi-subject Dynamic Community Detection",
          "Community Detection Tutorial"
        ],
        "type": "Text_excerpt",
        "value": "Construction of gene co-expression networks from noisy and sparse scRNA-seq data is a challenging problem, and is itself a subject worth to conduct research on.\nWe suggest to use Dozer [3] to filter genes and construct robust networks that will enable finding meaningful gene modules.\n\n1. Follow the instructions and use the code snippets provided [here](https://htmlpreview.github.io/?https://github.com/shanlu01/Dozer/blob/main/vignettes/introduction.html) to filter genes and construct gene co-expression networks using Dozer.\nIt is sufficient to follow until \"Section 4: Gene Centrality Analysis\" (not included) for our purposes.\nSuccessfully running given code snippets will results in outputting networks (weighted, i.e., co-expression values) and other relevant information in a R data file with `.rda` extension.\n\n3. First, output networks separately for each subject at each time point. If you have $n$ many nodes, $T$ time points and $S$ subjects; you should have $T \\times S$ many $n$ by $n$ adjacency matrices.\n\n2. Collect $T \\times S$ adjacency matrices in a multi-dimensional `numpy.array` so that the first dimension indexes subjects and the second dimension indexes time points. Save this multi-dimensional array to disk.\n\n3. Read networks from disk with `numpy.load`, and use MuDCoD as below.\n   \n4. Run MuDCoD's iterative algorithm to find smoothed spectral representations of nodes, and then predict by clustering them to communities.\n```python\nadj = numpy.load(\"/path/to/adj\")\npred_comm = MuDCoD(verbose=False).fit_predict(\n  adj,\n  alpha=0.05 * np.ones((adj.shape[1], 2)),\n  beta=0.05 * np.ones(adj.shape[0]),\n  max_K=50,\n  n_iter=30,\n  opt_K=\"null\",\n  monitor_convergence=True,\n)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/bo1929/MuDCoD/main/README.md",
      "technique": "header_analysis"
    }
  ]
}