{
  "application_domain": [
    {
      "confidence": 35.95,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Credits",
        "parent_header": [
          "<img alt=\"Tau-typing\" src=\"docs/images/tautyping_logo_light.png#gh-light-mode-only\" />"
        ],
        "type": "Text_excerpt",
        "value": "Tau-typing was originally written by hseabolt.\n\nWe thank the following people for their extensive assistance in the development of this pipeline:\n"
      },
      "source": "https://raw.githubusercontent.com/hseabolt/tautyping/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Citations",
        "parent_header": [
          "<img alt=\"Tau-typing\" src=\"docs/images/tautyping_logo_light.png#gh-light-mode-only\" />"
        ],
        "type": "Text_excerpt",
        "value": "If you use Tau-typing for your analysis, please cite it using the following citation: \n\n> **Tau-typing: a Nextflow pipeline enabling on-demand, high-resolution molecular typing for pathogen genomics**\n>\n> Matthew H. Seabolt, Arun K. Boddapati, Joshua J. Forstedt, Kostantinos T. Konstantinidis.  \n>\n> Tau-typing: a Nextflow pipeline for finding the best phylogenetic markers in the genome for genomotyping of microbial species\n>\n> _To be submitted to Bioinformatics_\n\nAn extensive list of references for the tools used by the pipeline can be found in the [`CITATIONS.md`](CITATIONS.md) file.\n\nYou can cite the `nf-core` publication as follows:\n\n> **The nf-core framework for community-curated bioinformatics pipelines.**\n>\n> Philip Ewels, Alexander Peltzer, Sven Fillinger, Harshil Patel, Johannes Alneberg, Andreas Wilm, Maxime Ulysse Garcia, Paolo Di Tommaso & Sven Nahnsen.\n>\n> _Nat Biotechnol._ 2020 Feb 13. doi: [10.1038/s41587-020-0439-x](https://dx.doi.org/10.1038/s41587-020-0439-x).\n"
      },
      "source": "https://raw.githubusercontent.com/hseabolt/tautyping/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_of_conduct": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Code of Conduct at nf-core (v1.0)\n\n## Our Pledge\n\nIn the interest of fostering an open, collaborative, and welcoming environment, we as contributors and maintainers of nf-core, pledge to making participation in our projects and community a harassment-free experience for everyone, regardless of:\n\n- Age\n- Body size\n- Familial status\n- Gender identity and expression\n- Geographical location\n- Level of experience\n- Nationality and national origins\n- Native language\n- Physical and neurological ability\n- Race or ethnicity\n- Religion\n- Sexual identity and orientation\n- Socioeconomic status\n\nPlease note that the list above is alphabetised and is therefore not ranked in any order of preference or importance.\n\n## Preamble\n\n> Note: This Code of Conduct (CoC) has been drafted by the nf-core Safety Officer and been edited after input from members of the nf-core team and others. \"We\", in this document, refers to the Safety Officer and members of the nf-core core team, both of whom are deemed to be members of the nf-core community and are therefore required to abide by this Code of Conduct. This document will amended periodically to keep it up-to-date, and in case of any dispute, the most current version will apply.\n\nAn up-to-date list of members of the nf-core core team can be found [here](https://nf-co.re/about). Our current safety officer is Renuka Kudva.\n\nnf-core is a young and growing community that welcomes contributions from anyone with a shared vision for [Open Science Policies](https://www.fosteropenscience.eu/taxonomy/term/8). Open science policies encompass inclusive behaviours and we strive to build and maintain a safe and inclusive environment for all individuals.\n\nWe have therefore adopted this code of conduct (CoC), which we require all members of our community and attendees in nf-core events to adhere to in all our workspaces at all times. Workspaces include but are not limited to Slack, meetings on Zoom, Jitsi, YouTube live etc.\n\nOur CoC will be strictly enforced and the nf-core team reserve the right to exclude participants who do not comply with our guidelines from our workspaces and future nf-core activities.\n\nWe ask all members of our community to help maintain a supportive and productive workspace and to avoid behaviours that can make individuals feel unsafe or unwelcome. Please help us maintain and uphold this CoC.\n\nQuestions, concerns or ideas on what we can include? Contact safety [at] nf-co [dot] re\n\n## Our Responsibilities\n\nThe safety officer is responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behaviour.\n\nThe safety officer in consultation with the nf-core core team have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\nMembers of the core team or the safety officer who violate the CoC will be required to recuse themselves pending investigation. They will not have access to any reports of the violations and be subject to the same actions as others in violation of the CoC.\n\n## When are where does this Code of Conduct apply?\n\nParticipation in the nf-core community is contingent on following these guidelines in all our workspaces and events. This includes but is not limited to the following listed alphabetically and therefore in no order of preference:\n\n- Communicating with an official project email address.\n- Communicating with community members within the nf-core Slack channel.\n- Participating in hackathons organised by nf-core (both online and in-person events).\n- Participating in collaborative work on GitHub, Google Suite, community calls, mentorship meetings, email correspondence.\n- Participating in workshops, training, and seminar series organised by nf-core (both online and in-person events). This applies to events hosted on web-based platforms such as Zoom, Jitsi, YouTube live etc.\n- Representing nf-core on social media. This includes both official and personal accounts.\n\n## nf-core cares \ud83d\ude0a\n\nnf-core's CoC and expectations of respectful behaviours for all participants (including organisers and the nf-core team) include but are not limited to the following (listed in alphabetical order):\n\n- Ask for consent before sharing another community member\u2019s personal information (including photographs) on social media.\n- Be respectful of differing viewpoints and experiences. We are all here to learn from one another and a difference in opinion can present a good learning opportunity.\n- Celebrate your accomplishments at events! (Get creative with your use of emojis \ud83c\udf89 \ud83e\udd73 \ud83d\udcaf \ud83d\ude4c !)\n- Demonstrate empathy towards other community members. (We don\u2019t all have the same amount of time to dedicate to nf-core. If tasks are pending, don\u2019t hesitate to gently remind members of your team. If you are leading a task, ask for help if you feel overwhelmed.)\n- Engage with and enquire after others. (This is especially important given the geographically remote nature of the nf-core community, so let\u2019s do this the best we can)\n- Focus on what is best for the team and the community. (When in doubt, ask)\n- Graciously accept constructive criticism, yet be unafraid to question, deliberate, and learn.\n- Introduce yourself to members of the community. (We\u2019ve all been outsiders and we know that talking to strangers can be hard for some, but remember we\u2019re interested in getting to know you and your visions for open science!)\n- Show appreciation and **provide clear feedback**. (This is especially important because we don\u2019t see each other in person and it can be harder to interpret subtleties. Also remember that not everyone understands a certain language to the same extent as you do, so **be clear in your communications to be kind.**)\n- Take breaks when you feel like you need them.\n- Using welcoming and inclusive language. (Participants are encouraged to display their chosen pronouns on Zoom or in communication on Slack.)\n\n## nf-core frowns on \ud83d\ude15\n\nThe following behaviours from any participants within the nf-core community (including the organisers) will be considered unacceptable under this code of conduct. Engaging or advocating for any of the following could result in expulsion from nf-core workspaces.\n\n- Deliberate intimidation, stalking or following and sustained disruption of communication among participants of the community. This includes hijacking shared screens through actions such as using the annotate tool in conferencing software such as Zoom.\n- \u201cDoxing\u201d i.e. posting (or threatening to post) another person\u2019s personal identifying information online.\n- Spamming or trolling of individuals on social media.\n- Use of sexual or discriminatory imagery, comments, or jokes and unwelcome sexual attention.\n- Verbal and text comments that reinforce social structures of domination related to gender, gender identity and expression, sexual orientation, ability, physical appearance, body size, race, age, religion or work experience.\n\n### Online Trolling\n\nThe majority of nf-core interactions and events are held online. Unfortunately, holding events online comes with the added issue of online trolling. This is unacceptable, reports of such behaviour will be taken very seriously, and perpetrators will be excluded from activities immediately.\n\nAll community members are required to ask members of the group they are working within for explicit consent prior to taking screenshots of individuals during video calls.\n\n## Procedures for Reporting CoC violations\n\nIf someone makes you feel uncomfortable through their behaviours or actions, report it as soon as possible.\n\nYou can reach out to members of the [nf-core core team](https://nf-co.re/about) and they will forward your concerns to the safety officer(s).\n\nIssues directly concerning members of the core team will be dealt with by other members of the core team and the safety manager, and possible conflicts of interest will be taken into account. nf-core is also in discussions about having an ombudsperson, and details will be shared in due course.\n\nAll reports will be handled with utmost discretion and confidentially.\n\n## Attribution and Acknowledgements\n\n- The [Contributor Covenant, version 1.4](http://contributor-covenant.org/version/1/4)\n- The [OpenCon 2017 Code of Conduct](http://www.opencon2017.org/code_of_conduct) (CC BY 4.0 OpenCon organisers, SPARC and Right to Research Coalition)\n- The [eLife innovation sprint 2020 Code of Conduct](https://sprint.elifesciences.org/code-of-conduct/)\n- The [Mozilla Community Participation Guidelines v3.1](https://www.mozilla.org/en-US/about/governance/policies/participation/) (version 3.1, CC BY-SA 3.0 Mozilla)\n\n## Changelog\n\n### v1.0 - March 12th, 2021\n\n- Complete rewrite from original [Contributor Covenant](http://contributor-covenant.org/) CoC.\n"
      },
      "source": "https://raw.githubusercontent.com/hseabolt/tautyping/main/CODE_OF_CONDUCT.md",
      "technique": "file_exploration"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/hseabolt/tautyping"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# nf-core/tautyping: Contributing Guidelines\n\nHi there!\nMany thanks for taking an interest in improving nf-core/tautyping.\n\nWe try to manage the required tasks for nf-core/tautyping using GitHub issues, you probably came to this page when creating one.\nPlease use the pre-filled template to save time.\n\nHowever, don't be put off by this template - other more general issues and suggestions are welcome!\nContributions to the code are even more welcome ;)\n\n> If you need help using or modifying nf-core/tautyping then the best place to ask is on the nf-core Slack [#tautyping](https://nfcore.slack.com/channels/tautyping) channel ([join our Slack here](https://nf-co.re/join/slack)).\n\n## Contribution workflow\n\nIf you'd like to write some code for nf-core/tautyping, the standard workflow is as follows:\n\n1. Check that there isn't already an issue about your idea in the [nf-core/tautyping issues](https://github.com/nf-core/tautyping/issues) to avoid duplicating work. If there isn't one already, please create one so that others know you're working on this\n2. [Fork](https://help.github.com/en/github/getting-started-with-github/fork-a-repo) the [nf-core/tautyping repository](https://github.com/nf-core/tautyping) to your GitHub account\n3. Make the necessary changes / additions within your forked repository following [Pipeline conventions](#pipeline-contribution-conventions)\n4. Use `nf-core schema build` and add any new parameters to the pipeline JSON schema (requires [nf-core tools](https://github.com/nf-core/tools) >= 1.10).\n5. Submit a Pull Request against the `dev` branch and wait for the code to be reviewed and merged\n\nIf you're not used to this workflow with git, you can start with some [docs from GitHub](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests) or even their [excellent `git` resources](https://try.github.io/).\n\n## Tests\n\nWhen you create a pull request with changes, [GitHub Actions](https://github.com/features/actions) will run automatic tests.\nTypically, pull-requests are only fully reviewed when these tests are passing, though of course we can help out before then.\n\nThere are typically two types of tests that run:\n\n### Lint tests\n\n`nf-core` has a [set of guidelines](https://nf-co.re/developers/guidelines) which all pipelines must adhere to.\nTo enforce these and ensure that all pipelines stay in sync, we have developed a helper tool which runs checks on the pipeline code. This is in the [nf-core/tools repository](https://github.com/nf-core/tools) and once installed can be run locally with the `nf-core lint <pipeline-directory>` command.\n\nIf any failures or warnings are encountered, please follow the listed URL for more documentation.\n\n### Pipeline tests\n\nEach `nf-core` pipeline should be set up with a minimal set of test-data.\n`GitHub Actions` then runs the pipeline on this data to ensure that it exits successfully.\nIf there are any failures then the automated tests fail.\nThese tests are run both with the latest available version of `Nextflow` and also the minimum required version that is stated in the pipeline code.\n\n## Patch\n\n:warning: Only in the unlikely and regretful event of a release happening with a bug.\n\n- On your own fork, make a new branch `patch` based on `upstream/master`.\n- Fix the bug, and bump version (X.Y.Z+1).\n- A PR should be made on `master` from patch to directly this particular bug.\n\n## Getting help\n\nFor further information/help, please consult the [nf-core/tautyping documentation](https://nf-co.re/tautyping/usage) and don't hesitate to get in touch on the nf-core Slack [#tautyping](https://nfcore.slack.com/channels/tautyping) channel ([join our Slack here](https://nf-co.re/join/slack)).\n\n## Pipeline contribution conventions\n\nTo make the nf-core/tautyping code and processing logic more understandable for new contributors and to ensure quality, we semi-standardise the way the code and other contributions are written.\n\n### Adding a new step\n\nIf you wish to contribute a new step, please use the following coding standards:\n\n1. Define the corresponding input channel into your new process from the expected previous process channel\n2. Write the process block (see below).\n3. Define the output channel if needed (see below).\n4. Add any new parameters to `nextflow.config` with a default (see below).\n5. Add any new parameters to `nextflow_schema.json` with help text (via the `nf-core schema build` tool).\n6. Add sanity checks and validation for all relevant parameters.\n7. Perform local tests to validate that the new code works as expected.\n8. If applicable, add a new test command in `.github/workflow/ci.yml`.\n9. Update MultiQC config `assets/multiqc_config.yml` so relevant suffixes, file name clean up and module plots are in the appropriate order. If applicable, add a [MultiQC](https://https://multiqc.info/) module.\n10. Add a description of the output files and if relevant any appropriate images from the MultiQC report to `docs/output.md`.\n\n### Default values\n\nParameters should be initialised / defined with default values in `nextflow.config` under the `params` scope.\n\nOnce there, use `nf-core schema build` to add to `nextflow_schema.json`.\n\n### Default processes resource requirements\n\nSensible defaults for process resource requirements (CPUs / memory / time) for a process should be defined in `conf/base.config`. These should generally be specified generic with `withLabel:` selectors so they can be shared across multiple processes/steps of the pipeline. A nf-core standard set of labels that should be followed where possible can be seen in the [nf-core pipeline template](https://github.com/nf-core/tools/blob/master/nf_core/pipeline-template/conf/base.config), which has the default process as a single core-process, and then different levels of multi-core configurations for increasingly large memory requirements defined with standardised labels.\n\nThe process resources can be passed on to the tool dynamically within the process with the `${task.cpu}` and `${task.memory}` variables in the `script:` block.\n\n### Naming schemes\n\nPlease use the following naming schemes, to make it easy to understand what is going where.\n\n- initial process channel: `ch_output_from_<process>`\n- intermediate and terminal channels: `ch_<previousprocess>_for_<nextprocess>`\n\n### Nextflow version bumping\n\nIf you are using a new feature from core Nextflow, you may bump the minimum required version of nextflow in the pipeline with: `nf-core bump-version --nextflow . [min-nf-version]`\n\n### Images and figures\n\nFor overview images and other documents we follow the nf-core [style guidelines and examples](https://nf-co.re/developers/design_guidelines).\n"
      },
      "source": "https://raw.githubusercontent.com/hseabolt/tautyping/main/.github/CONTRIBUTING.md",
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-10-10T11:15:31Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-08-12T20:23:21Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "This pipeline identifies genes or genomic segments which most closely resemble the genome-wide phylogenetic signal of a given organism using the Kendall Tau rank correlation statistic"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Introduction",
        "parent_header": [
          "<img alt=\"Tau-typing\" src=\"docs/images/tautyping_logo_light.png#gh-light-mode-only\" />"
        ],
        "type": "Text_excerpt",
        "value": "**Tau-typing** is a bioinformatics analysis pipeline tuned for identifying genes or genomic segments which most closely reflect the genome-wide phylogenetic signal of a given organism using the rank correlation statistics (Kendall's tau or Spearman's rho).\n\nThe pipeline is built using [Nextflow](https://www.nextflow.io), a workflow tool to run tasks across multiple compute infrastructures in a very portable manner. It uses Docker/Singularity containers making installation trivial and results highly reproducible. The [Nextflow DSL2](https://www.nextflow.io/docs/latest/dsl2.html) implementation of this pipeline uses one container per process which makes it much easier to maintain and update software dependencies. Where possible, these processes have been installed from [nf-core/modules](https://github.com/nf-core/modules).\n\nDevelopment and testing of this pipeline used `singularity` as the container technology and `Sun Grid Engine` (SGE) for testing on cluster environments. \n\n"
      },
      "source": "https://raw.githubusercontent.com/hseabolt/tautyping/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Pipeline summary",
        "parent_header": [
          "<img alt=\"Tau-typing\" src=\"docs/images/tautyping_logo_light.png#gh-light-mode-only\" />"
        ],
        "type": "Text_excerpt",
        "value": "1. Transfer annotations ([`Liftoff`](https://academic.oup.com/bioinformatics/article/37/12/1639/6035128))\n2. Extract features ([`GFFRead`](https://github.com/gpertea/gffread))\n3. Compare genome sequences - ANI or Maximum Likelihood ([`FastANI`](https://www.nature.com/articles/s41467-018-07641-9), [`Phangorn`](https://academic.oup.com/bioinformatics/article/27/4/592/198887))\n4. Compute the core genomes ([`PIRATE`](https://academic.oup.com/gigascience/article/8/10/giz119/5584409))\n5. Rank individual features against WGS (Custom ([`R`](https://www.r-project.org/)) scripts)\n6. Create sets of features from best-correlating features (Custom ([`Perl`](https://www.perl.org/)) scripts)\n7. Rank sets against WGS (Custom ([`R`](https://www.r-project.org/)) scripts)\n8. Tabulate results ([`MultiQC`](http://multiqc.info/))\n\n![Tau-typing](docs/images/tautyping_workflow_v1.0.300.png) \n"
      },
      "source": "https://raw.githubusercontent.com/hseabolt/tautyping/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/hseabolt/tautyping/tree/main/docs"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Documentation",
        "parent_header": [
          "<img alt=\"Tau-typing\" src=\"docs/images/tautyping_logo_light.png#gh-light-mode-only\" />"
        ],
        "type": "Text_excerpt",
        "value": "The Tau-typing pipeline comes with documentation about the pipeline [usage](https://github.com/hseabolt/tautyping/usage), [parameters](https://github.com/hseabolt/tautyping/parameters) and [output](https://github.com/hseabolt/tautyping/output).\n"
      },
      "source": "https://raw.githubusercontent.com/hseabolt/tautyping/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/hseabolt/tautyping/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/hseabolt/tautyping/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "hseabolt/tautyping"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/hseabolt/tautyping/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hseabolt/tautyping/main/docs/images/tautyping_workflow_v1.0.300.png"
      },
      "source": "https://raw.githubusercontent.com/hseabolt/tautyping/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/hseabolt/tautyping/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) hseabolt\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/hseabolt/tautyping/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hseabolt/tautyping/main/docs/images/tautyping_logo_light.png#gh-light-mode-only"
      },
      "source": "https://raw.githubusercontent.com/hseabolt/tautyping/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "tautyping"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "hseabolt"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Nextflow",
        "size": 73223,
        "type": "Programming_language",
        "value": "Nextflow"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Groovy",
        "size": 43713,
        "type": "Programming_language",
        "value": "Groovy"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 21988,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 7789,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "HTML",
        "size": 2640,
        "type": "Programming_language",
        "value": "HTML"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hseabolt/tautyping/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "hseabolt",
          "type": "User"
        },
        "date_created": "2024-03-09T21:44:33Z",
        "date_published": "2024-03-09T21:54:48Z",
        "description": "Fixed small bugs and added a few minor tunings to make the script more adaptable to different input GFF files.",
        "html_url": "https://github.com/hseabolt/tautyping/releases/tag/1.2",
        "name": "1.2 Rainbow Magic",
        "release_id": 145661313,
        "tag": "1.2",
        "tarball_url": "https://api.github.com/repos/hseabolt/tautyping/tarball/1.2",
        "type": "Release",
        "url": "https://api.github.com/repos/hseabolt/tautyping/releases/145661313",
        "value": "https://api.github.com/repos/hseabolt/tautyping/releases/145661313",
        "zipball_url": "https://api.github.com/repos/hseabolt/tautyping/zipball/1.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "hseabolt",
          "type": "User"
        },
        "date_created": "2023-06-06T21:51:20Z",
        "date_published": "2023-06-06T21:54:27Z",
        "html_url": "https://github.com/hseabolt/tautyping/releases/tag/1.1",
        "name": "1.1 Bonkers Unicorn",
        "release_id": 107582290,
        "tag": "1.1",
        "tarball_url": "https://api.github.com/repos/hseabolt/tautyping/tarball/1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/hseabolt/tautyping/releases/107582290",
        "value": "https://api.github.com/repos/hseabolt/tautyping/releases/107582290",
        "zipball_url": "https://api.github.com/repos/hseabolt/tautyping/zipball/1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "hseabolt",
          "type": "User"
        },
        "date_created": "2023-03-13T03:41:53Z",
        "date_published": "2023-03-13T03:43:27Z",
        "description": "Initial beta release",
        "html_url": "https://github.com/hseabolt/tautyping/releases/tag/1.0-beta",
        "name": "1.0-beta",
        "release_id": 95342926,
        "tag": "1.0-beta",
        "tarball_url": "https://api.github.com/repos/hseabolt/tautyping/tarball/1.0-beta",
        "type": "Release",
        "url": "https://api.github.com/repos/hseabolt/tautyping/releases/95342926",
        "value": "https://api.github.com/repos/hseabolt/tautyping/releases/95342926",
        "zipball_url": "https://api.github.com/repos/hseabolt/tautyping/zipball/1.0-beta"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "installation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 01:02:37",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contributions and Support",
        "parent_header": [
          "<img alt=\"Tau-typing\" src=\"docs/images/tautyping_logo_light.png#gh-light-mode-only\" />"
        ],
        "type": "Text_excerpt",
        "value": "If you would like to contribute to this pipeline, please see the [contributing guidelines](.github/CONTRIBUTING.md).\n"
      },
      "source": "https://raw.githubusercontent.com/hseabolt/tautyping/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Quick Start",
        "parent_header": [
          "<img alt=\"Tau-typing\" src=\"docs/images/tautyping_logo_light.png#gh-light-mode-only\" />"
        ],
        "type": "Text_excerpt",
        "value": "1. Install [`Nextflow`](https://www.nextflow.io/docs/latest/getstarted.html#installation) (`>=21.10.3`)\n\n2. Install any of [`Docker`](https://docs.docker.com/engine/installation/), [`Singularity`](https://www.sylabs.io/guides/3.0/user-guide/) (you can follow [this tutorial](https://singularity-tutorial.github.io/01-installation/)), [`Podman`](https://podman.io/), [`Shifter`](https://nersc.gitlab.io/development/shifter/how-to-use/) or [`Charliecloud`](https://hpc.github.io/charliecloud/) for full pipeline reproducibility _(you can use [`Conda`](https://conda.io/miniconda.html) both to install Nextflow itself and also to manage software within pipelines. Please only use it within pipelines as a last resort; see [docs](https://nf-co.re/usage/configuration#basic-configuration-profiles))_.\n\n3. Download the pipeline and test it on a minimal dataset with a single command:\n\n   ```console\n   nextflow run hseabolt/tautyping -profile test,<YOURPROFILE> --outdir <OUTDIR>\n   ```\n\n   Note that some form of configuration will be needed so that Nextflow knows how to fetch the required software. This is usually done in the form of a config profile (`YOURPROFILE` in the example command above). You can chain multiple config profiles in a comma-separated string.\n\n   > - The pipeline comes with config profiles called `docker`, `singularity`, `podman`, `shifter`, `charliecloud` and `conda` which instruct the pipeline to use the named tool for software management. For example, `-profile test,docker`.\n   > - Please check [nf-core/configs](https://github.com/nf-core/configs#documentation) to see if a custom config file to run nf-core pipelines already exists for your Institute. If so, you can simply use `-profile <institute>` in your command. This will enable either `docker` or `singularity` and set the appropriate execution settings for your local compute environment.\n   > - If you are using `singularity`, please use the [`nf-core download`](https://nf-co.re/tools/#downloading-pipelines-for-offline-use) command to download images first, before running the pipeline. Setting the [`NXF_SINGULARITY_CACHEDIR` or `singularity.cacheDir`](https://www.nextflow.io/docs/latest/singularity.html?#singularity-docker-hub) Nextflow options enables you to store and re-use the images from a central location for future pipeline runs.\n   > - If you are using `conda`, it is highly recommended to use the [`NXF_CONDA_CACHEDIR` or `conda.cacheDir`](https://www.nextflow.io/docs/latest/conda.html) settings to store the environments in a central location for future pipeline runs.\n\n4. Start running your own analysis!\n\n   ```console\n   nextflow run hseabolt/tautyping --input samplesheet.csv --outdir <OUTDIR> -profile <docker/singularity/podman/shifter/charliecloud/conda/institute>\n   ```\n"
      },
      "source": "https://raw.githubusercontent.com/hseabolt/tautyping/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "workflows": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hseabolt/tautyping/main/main.nf"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hseabolt/tautyping/main/workflows/tautyping.nf"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hseabolt/tautyping/main/modules/nf-core/fasttree/main.nf"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hseabolt/tautyping/main/modules/nf-core/custom/dumpsoftwareversions/main.nf"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hseabolt/tautyping/main/modules/nf-core/pirate/main.nf"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hseabolt/tautyping/main/modules/nf-core/cat/cat/main.nf"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hseabolt/tautyping/main/modules/nf-core/multiqc/main.nf"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hseabolt/tautyping/main/modules/nf-core/gffread/main.nf"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hseabolt/tautyping/main/modules/nf-core/blast/blastn/main.nf"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hseabolt/tautyping/main/modules/nf-core/blast/makeblastdb/main.nf"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hseabolt/tautyping/main/modules/local/liftoff.nf"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hseabolt/tautyping/main/modules/local/phangorn_ml.nf"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hseabolt/tautyping/main/modules/local/table2matrix.nf"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hseabolt/tautyping/main/modules/local/blastn_sets.nf"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hseabolt/tautyping/main/modules/local/postproc_pirate.nf"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hseabolt/tautyping/main/modules/local/one_vs_all_fastani.nf"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hseabolt/tautyping/main/modules/local/heatmap.nf"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hseabolt/tautyping/main/modules/local/histogram.nf"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hseabolt/tautyping/main/modules/local/sort.nf"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hseabolt/tautyping/main/modules/local/samplesheet_check.nf"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hseabolt/tautyping/main/modules/local/concat_alignments.nf"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hseabolt/tautyping/main/modules/local/prep_sets.nf"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hseabolt/tautyping/main/modules/local/prepare_reference.nf"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hseabolt/tautyping/main/modules/local/postproc_fastani.nf"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hseabolt/tautyping/main/modules/local/correlations.nf"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hseabolt/tautyping/main/modules/local/create_list.nf"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hseabolt/tautyping/main/modules/local/nj.nf"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hseabolt/tautyping/main/modules/local/csv_check.nf"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hseabolt/tautyping/main/modules/local/cophenetic.nf"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hseabolt/tautyping/main/modules/local/makeblastdb_unique.nf"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hseabolt/tautyping/main/subworkflows/local/annotation_transfer.nf"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hseabolt/tautyping/main/subworkflows/local/input_check.nf"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hseabolt/tautyping/main/subworkflows/local/preproc_sets.nf"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hseabolt/tautyping/main/subworkflows/local/fastani.nf"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hseabolt/tautyping/main/subworkflows/local/rank_correlations_sets.nf"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hseabolt/tautyping/main/subworkflows/local/core_genome.nf"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hseabolt/tautyping/main/subworkflows/local/rank_correlations.nf"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/hseabolt/tautyping/main/subworkflows/local/construct_sets.nf"
      },
      "technique": "file_exploration"
    }
  ]
}