{
  "application_domain": [
    {
      "confidence": 0.916552715968692,
      "result": {
        "type": "String",
        "value": "Semantic web"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "Description of the main arguments and examples of different types of search"
        ],
        "type": "Text_excerpt",
        "value": "```\n@article{Olsen2023,\n  title={KA-Search, a method for rapid and exhaustive sequence identity search of known antibodies},\n  author={Tobias H. Olsen, Brennan A. Kenyon, Iain H. Moal and Charlotte M. Deane},\n  journal={Scientific Reports},\n  doi={10.1038/s41598-023-38108-7},\n  year={2023}\n}\n``` "
      },
      "source": "https://raw.githubusercontent.com/oxpig/kasearch/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Tobias H. Olsen, Brennan A. Kenyon, Iain H. Moal and Charlotte M. Deane",
        "doi": "10.1038/s41598-023-38108-7",
        "format": "bibtex",
        "title": "KA-Search, a method for rapid and exhaustive sequence identity search of known antibodies",
        "type": "Text_excerpt",
        "value": "@article{Olsen2023,\n    year = {2023},\n    doi = {10.1038/s41598-023-38108-7},\n    journal = {Scientific Reports},\n    author = {Tobias H. Olsen, Brennan A. Kenyon, Iain H. Moal and Charlotte M. Deane},\n    title = {KA-Search, a method for rapid and exhaustive sequence identity search of known antibodies},\n}"
      },
      "source": "https://raw.githubusercontent.com/oxpig/kasearch/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/oxpig/kasearch"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-11-01T12:09:51Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-24T02:21:27Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "KA-Search: Rapid and exhaustive sequence identity search of known antibodies"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Description of the returned results",
        "type": "Text_excerpt",
        "value": "The returned output from KA-Search contains all columns and metadata in the pre-aligned datasets searched as well as a column named \"Identity\", which contains the calculated sequence identity. The returned output is always sorted by highest identity.\n\nFor the OAS-aligned datasets these columns are;\n\n- Each column from AIRR's rearrangement schema ([see here for exact description](https://docs.airr-community.org/en/stable/datarep/rearrangements.html)).\n- Additional sequence specific information derived by OAS processing, i.e. nucleotides for the constant region if present, ANARCI numbering and ANARCI status. For more information see the [OAS paper](https://doi.org/10.1002/pro.4205).\n- Metadata from the OAS data unit the sequence was derived from, i.e. author, species, experimental run and unique sequences in run. For more information see the [OAS help page](http://opig.stats.ox.ac.uk/webapps/oas/documentation).\n- Lastly, the column \"Identity\", which contains the calculated sequence identity between the query and target sequence.\n\n**NB:** Some returned columns contain NaNs. These columns could not be populated when the data was originally processed, and it is therefore not a side-effect of KA-Search. The only column populated by KA-Search, is the \"Identity\" column.\n\n---------\n"
      },
      "source": "https://raw.githubusercontent.com/oxpig/kasearch/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Description of the main arguments and examples of different types of search",
        "type": "Text_excerpt",
        "value": "The main arguments for your search are;\n\n- **database_path**: Path to the database to search. If not specified, the OAS-aligned-tiny (~260MB of 10m human heavy chain sequences) dataset will be downloaded and searched against. \n- **allowed_chain**: Which chain to search, either only heavy (Heavy), only light (Light) or any chain (Any)\n- **allowed_species** Which species to search against (this depends on what species are in the used pre-aligned data). For OAS-aligned this includes, Human, Mouse, Camel and Humanized. \n- **regions**: Which specific region to search against. A list of regions to search, either the provided ones ('whole', 'cdrs' or 'cdr3'), or user-defined ones. An example of a user-defined one is \\['111 ', '111A', '112A', '112 '\\].\n- **length_matched**: A list of false and true for whether to only compare sequences where the length of the region to search match. Example: [False, True, True]\n- **local_oas_path**: For offline use, the path to a local version of OAS. \n\n**NB**: The length of regions list and length_matched list needs to be the same.\\\n**NB**: For offline use, a local version of OAS is needed the the metadata extraction. OAS currently takes up ~1.1T. It is therefore recommended to run KA-Search locally, but with internet access.\n\n"
      },
      "source": "https://raw.githubusercontent.com/oxpig/kasearch/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9895313178175748,
      "result": {
        "original_header": "Abstract",
        "type": "Text_excerpt",
        "value": "Antibodies with similar amino acid sequences, especially across their complementary-determining regions, often share properties. Finding that an antibody of interest has a similar sequence to naturally expressed antibodies in healthy or diseased repertoires is a powerful approach for the prediction of antibody properties, such as immunogenicity or antigen specificity. However, as the number of available antibody sequences is now in the billions and continuing to grow, repertoire mining for similar sequences has become increasingly computationally expensive. Existing approaches are limited by either being low-throughput, non-exhaustive, not antibody-specific, or only searching against entire chain sequences. Therefore, there is a need for a specialized tool, optimized for a rapid and exhaustive search of any antibody region against all known antibodies, to better utilize the full breadth of available repertoire sequences. \nWe introduce Known Antibody Search (KA-Search), a tool that allows for rapid search of billions of antibody sequences by sequence identity across either the whole chain, the CDRs, or a user defined antibody region. We show KA-Search in operation on the ~2.4 billion antibody sequences available in the OAS database. KA-Search can be used to find the most similar sequences from OAS within 30 minutes using 5 CPUs. We give examples of how KA-Search can be used to obtain new insights about an antibody of interest. KA-Search is freely available at https://github.com/oxpig/kasearch. \n"
      },
      "source": "https://raw.githubusercontent.com/oxpig/kasearch/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8903015043418759,
      "result": {
        "original_header": "Software implementation",
        "type": "Text_excerpt",
        "value": "KA-Search is freely available python package. \n\n**NB:** You need to manually install a version of [ANARCI](https://github.com/oxpig/ANARCI) in the same environment. ANARCI can also be installed using bioconda; however, this version is maintained by a third party. \n"
      },
      "source": "https://raw.githubusercontent.com/oxpig/kasearch/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9904778382721429,
      "result": {
        "type": "Text_excerpt",
        "value": "    \n \n# KA-Search, a method for rapid and exhaustive sequence identity search of known antibodies \n---\n    \nby\nTobias H. Olsen $^{1,\\dagger}$, Brennan A. Kenyon $^{1,\\dagger}$, Iain H. Moal $^{2}$ and Charlotte M. Deane $^{1,3}$\n    \n$^{1}$ Oxford Protein Informatics Group, Department of Statistics, University of Oxford, Oxford, United Kingdom  \n$^{2}$ GSK Medicines Research Centre, GlaxoSmithKline plc, Stevenage, United Kingdom  \n$^{3}$ Exscientia plc, Oxford, United Kingdom  \n$^{\\dagger}$ These authors contributed equally to this work and share first authorship \n"
      },
      "source": "https://raw.githubusercontent.com/oxpig/kasearch/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Download pre-aligned data to search against",
        "type": "Text_excerpt",
        "value": "The following list contains the download links for the paper version of the pre-aligned OAS and any future releases, ready for KA-Search. \n\n**NB**: Some of the datasets are quite large, you should therefore ensure you have enough space before trying to download them.\\\n**NB**: For convenience, OAS-aligned-small and OAS-aligned-tiny can be downloaded automatically when initiating KA-Search.\n\n| Dataset                                                                                                                    | Size  | Date           | Comments                                                |\n|----------------------------------------------------------------------------------------------------------------------------|-------|----------------|---------------------------------------------------------|\n| [OAS-aligned](http://opig.stats.ox.ac.uk/webapps/ngsdb/kasearch_aligned_oas/OAS-aligned-paper-version-20230111.tar) (Paper version) | 63GB  | January 2023 | A pre-aligned version of OAS with 2.4 billion sequences |\n| [OAS-aligned-small](https://zenodo.org/record/7562025/files/OAS-aligned-small.tar) (Paper version)                               | 2.8GB | January 2023 | A pre-aligned version of OAS with 86 million sequences |\n| [OAS-aligned-tiny](https://zenodo.org/record/7562025/files/OAS-aligned-tiny.tar) (Paper version)                           | 260MB | January 2023 | A pre-aligned version of OAS with 10 million sequences  |\n\nAfter downloading, extract the pre-aligned dataset with \"tar -xf downloaded_file.tar\". Give the extacted dataset path when initiating KA-Search to search against it. See how to do this by following the KA-Search notebook guide below.\n\n\n---------\n"
      },
      "source": "https://raw.githubusercontent.com/oxpig/kasearch/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/oxpig/kasearch/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/oxpig/kasearch/main/notebooks/KAsearch_colab.ipynb"
      },
      "source": "https://raw.githubusercontent.com/oxpig/kasearch/main/notebooks/KAsearch_colab.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/oxpig/kasearch/main/notebooks/examples.ipynb"
      },
      "source": "https://raw.githubusercontent.com/oxpig/kasearch/main/notebooks/examples.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/oxpig/kasearch/main/notebooks/prepareOASdb.ipynb"
      },
      "source": "https://raw.githubusercontent.com/oxpig/kasearch/main/notebooks/prepareOASdb.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/oxpig/kasearch/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "oxpig/kasearch"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/oxpig/kasearch/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "KA-Search guide",
        "type": "Text_excerpt",
        "value": "KA-Search is designed to be downloaded and run locally. \n\n**NB**: Out of the box, KA-Search requires an internet connection to retrieve meta data; see below for how to use KA-Search offline.\n\nAs a demo, we have set up a reduced version of KA-Search on a [Colab notebook](https://colab.research.google.com/github/TobiasHeOl/kasearch/blob/main/notebooks/KAsearch_colab.ipynb) that can be run remotely. KA-Search, as setup on the Colab, uses the OAS-aligned-tiny version of OAS to reduce the time and memory required to download the database. The Colab demo is composed of two parts:\n\n- **Quick and easy use of KA-Search**: Here we allow the user to try out KA-Search with minimal configuration, simply paste your antibody variable domain sequence in and try it out!!\n\n- **KA-Search with more configuration**: Here we expose the KA-Search API and go through a more in depth tutorial of how it can be set up for your particular usecase. We explain how to preprocess the query sequence, the possible search configurations, how to extract the metadata after finding the most identical sequences and how to preprocess your own database so it can be used with KA-Search.  \n\nIf the user want to follow this tutorial locally, we also provide [a Jupyter notebook](https://github.com/oxpig/kasearch/blob/main/notebooks/examples.ipynb) showcasing KA-Search. The content of the Jupyter notebook is the same as what is in the \"KA-Search with more configuration\" section of the Colab. By running it locally you can also search against the whole of OAS-aligned. \n\n---------\n"
      },
      "source": "https://raw.githubusercontent.com/oxpig/kasearch/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9977856839784051,
      "result": {
        "original_header": "Software implementation",
        "type": "Text_excerpt",
        "value": "KA-Search is freely available python package. \nThe latest stable version can be installed with pip. \n~~~.sh\n    pip install kasearch\n~~~ \nand the latest updated version directly from github. \n~~~.sh\n    pip install -U git+https://github.com/oxpig/kasearch\n~~~ \n\n**NB:** You need to manually install a version of [ANARCI](https://github.com/oxpig/ANARCI) in the same environment. ANARCI can also be installed using bioconda; however, this version is maintained by a third party. \n~~~.sh\n    conda install -c bioconda anarci\n~~~ \n"
      },
      "source": "https://raw.githubusercontent.com/oxpig/kasearch/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/oxpig/kasearch/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "BSD 3-Clause \"New\" or \"Revised\" License",
        "spdx_id": "BSD-3-Clause",
        "type": "License",
        "url": "https://api.github.com/licenses/bsd-3-clause",
        "value": "https://api.github.com/licenses/bsd-3-clause"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "BSD 3-Clause License\n\nCopyright (c) 2022, Tobias Hegelund Olsen\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
      },
      "source": "https://raw.githubusercontent.com/oxpig/kasearch/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "kasearch"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "oxpig"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 76601,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 48989,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/oxpig/kasearch/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-04 01:23:24",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 20
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Description of the main arguments and examples of different types of search",
        "type": "Text_excerpt",
        "value": "The main arguments for your search are;\n\n- **database_path**: Path to the database to search. If not specified, the OAS-aligned-tiny (~260MB of 10m human heavy chain sequences) dataset will be downloaded and searched against. \n- **allowed_chain**: Which chain to search, either only heavy (Heavy), only light (Light) or any chain (Any)\n- **allowed_species** Which species to search against (this depends on what species are in the used pre-aligned data). For OAS-aligned this includes, Human, Mouse, Camel and Humanized. \n- **regions**: Which specific region to search against. A list of regions to search, either the provided ones ('whole', 'cdrs' or 'cdr3'), or user-defined ones. An example of a user-defined one is \\['111 ', '111A', '112A', '112 '\\].\n- **length_matched**: A list of false and true for whether to only compare sequences where the length of the region to search match. Example: [False, True, True]\n- **local_oas_path**: For offline use, the path to a local version of OAS. \n\n**NB**: The length of regions list and length_matched list needs to be the same.\\\n**NB**: For offline use, a local version of OAS is needed the the metadata extraction. OAS currently takes up ~1.1T. It is therefore recommended to run KA-Search locally, but with internet access.\n\n"
      },
      "source": "https://raw.githubusercontent.com/oxpig/kasearch/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Example of searching against whole variable heavy domains from humans.",
        "parent_header": [
          "Description of the main arguments and examples of different types of search"
        ],
        "type": "Text_excerpt",
        "value": "In this example, we search for similar human heavy chains across the whole variable domain, while also allowing sequences which might differ in length.\n\n~~~python\n\nraw_queries = [\n    'VKLLEQSGAEVKKPGASVKVSCKASGYSFTSYGLHWVRQAPGQRLEWMGWISAGTGNTKYSQKFRGRVTFTRDTSATTAYMGLSSLRPEDTAVYYCARDPYGGGKSEFDYWGQGTLVTVSS',\n]\n\nresults = EasySearch(\n    raw_queries, \n    allowed_chain='Heavy',  \n    allowed_species='Human', \n    regions=['whole'],  \n    length_matched=[False], \n)\n~~~\n"
      },
      "source": "https://raw.githubusercontent.com/oxpig/kasearch/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Example of searching for similar CDRH3s from any species, but only return CDRH3s with an exact length match.",
        "parent_header": [
          "Description of the main arguments and examples of different types of search"
        ],
        "type": "Text_excerpt",
        "value": "In this example, we search for sequences with an exact length CDRH3 from any species. If one is interested in finding sequences with CDR3 lengths that differ in length, the length_match argument should be set to False.\n\n~~~python\n\nraw_queries = [\n    'VKLLEQSGAEVKKPGASVKVSCKASGYSFTSYGLHWVRQAPGQRLEWMGWISAGTGNTKYSQKFRGRVTFTRDTSATTAYMGLSSLRPEDTAVYYCARDPYGGGKSEFDYWGQGTLVTVSS',\n]\n\nresults = EasySearch(\n    raw_queries, \n    allowed_chain='Heavy', \n    allowed_species='Any', \n    regions=['cdr3'],  \n    length_matched=[True], \n)\n~~~\n\n"
      },
      "source": "https://raw.githubusercontent.com/oxpig/kasearch/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3. Example of searching with a user-defined region (i.e. the paratope).",
        "parent_header": [
          "Description of the main arguments and examples of different types of search"
        ],
        "type": "Text_excerpt",
        "value": "In this example, we search for sequences with a similar paratope. The positions of the paratope needs to follow the IMGT numbering scheme and be one of the 200 allowed positions in the canonical alignment introduced in the KA-Search paper.\n\n~~~python\n\nraw_queries = [\n    'VKLLEQSGAEVKKPGASVKVSCKASGYSFTSYGLHWVRQAPGQRLEWMGWISAGTGNTKYSQKFRGRVTFTRDTSATTAYMGLSSLRPEDTAVYYCARDPYGGGKSEFDYWGQGTLVTVSS',\n]\n\nparatope = [\"107 \", \"108 \",\"111C\", \"114 \",\"115 \"]\n\nresults = EasySearch(\n    raw_queries, \n    allowed_chain='Heavy',  \n    allowed_species='Any', \n    regions=[paratope],   \n    length_matched=[True], \n)\n~~~\n\n"
      },
      "source": "https://raw.githubusercontent.com/oxpig/kasearch/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4. Example of searching with KA-Search offline.",
        "parent_header": [
          "Description of the main arguments and examples of different types of search"
        ],
        "type": "Text_excerpt",
        "value": "In this example, we specify the path to a local version of OAS. This allows us to extract metadata for the returned sequences offline.\n\n~~~python\n\nraw_queries = [\n    'VKLLEQSGAEVKKPGASVKVSCKASGYSFTSYGLHWVRQAPGQRLEWMGWISAGTGNTKYSQKFRGRVTFTRDTSATTAYMGLSSLRPEDTAVYYCARDPYGGGKSEFDYWGQGTLVTVSS',\n]\n\nresults = EasySearch(\n    raw_queries, \n    allowed_chain='Heavy',  \n    allowed_species='Any',\n    regions=['cdr3'],  \n    length_matched=[True], \n    local_oas_path='/path/to/local/oas/'\n)\n~~~\n\n"
      },
      "source": "https://raw.githubusercontent.com/oxpig/kasearch/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "5. Example of searching custom data.",
        "parent_header": [
          "Description of the main arguments and examples of different types of search"
        ],
        "type": "Text_excerpt",
        "value": "In this example, we pre-align a set of custom sequences, and subsequently search them with KA-Search. \n\n\nFirst we format the data as an OAS data unit file. The minimal format requires an empty metadata and a single column with the variable domain of the antibody sequence, but can contain as many additional columns with sequence specific information as desired. This extra information will be retrieved when extracting metadata.\n~~~python\n\nimport json, os, shutil\nimport pandas as pd\n\ncustom_data_file = \"custom-data-examples.csv\"\n\nseq_df = pd.DataFrame([\n    [\"EVQLVESGGGLAKPGGSLRLHCAASGFAFSSYWMNWVRQAPGKRLEWVSAINLGGGLTYYAASVKGRFTISRDNSKNTLSLQMNSLRAEDTAVYYCATDYCSSTYCSPVGDYWGQGVLVTVSS\"],\n    [\"EVQLVQSGAEVKRPGESLKISCKTSGYSFTSYWISWVRQMPGKGLEWMGAIDPSDSDTRYNPSFQGQVTISADKSISTAYLQWSRLKASDTATYYCAIKKYCTGSGCRRWYFDLWGPGT\"],\n    ['QVQLQQSGAELARPGASVKLSCKASGYTFTSYWMQWVKQRPGQGLEWIGAIYPGDGDTRYTQKFKGKATLTADKSSSTAYMQLSSLASEDSAVYYCARGEPRYDYAWFAYWGQGTLVTVS'],\n    ['QVQLQQSGAELARPGASVKLSCKASGYTFTSYWMQWVKQRPGQGLEWIGAIYPGDGDTRYTQKFKGKATLTADKSSSTAYMQLSSLASEDSAVYYCARGPATAWFAYWGQGTLVTVS'],\n    ['QVQLQQSGAELARPGASVKLSCKASGYTFTSYWMQWVKQRPGQGLEWIGAIYPGDGDTRYTQKFKGKATLTADKSSSTAYMQLSSLASEDSAVYYCARSAWFAYWGQGTLVTVS'],\n    ['QVQLQQSGAELARPGASVKLSCKASGYTFTSYWMQWVKQRPGQGLEWIGAIYPGDGDTRYTQKFKGKATLTADKSSSTAYMQLSSLASEDSAVYYCARGGYWGQGTTLTVSS'],\n    ['QVQLQQSGAELARPGASVKLSCKASGYTFTSYWMQWVKQRPGQGLEWIGAIYPGDGDTRYTQKFKGKATLTADKSSSTAYMQLSSLASEDSAVYYCARGGLRRGAWFAYWGQGTLVTVS']\n], columns = ['heavy_sequences'])\n\nmeta_data = pd.Series(name=json.dumps({\"Species\":\"Human\", \"Chain\":\"Heavy\"}), dtype='object')\n\nmeta_data.to_csv(custom_data_file, index=False)\nseq_df.to_csv(custom_data_file, index=False, mode='a')\n~~~\n\nAfter each custom_data_file has been created, each file needs to be pre-aligned and formatted into a single dataset.\n~~~python\npath_to_custom_db = \"my_kasearch_db\"\nmany_custom_data_files = [custom_data_file]\n\ncustomDB = PrepareDB(db_path=path_to_custom_db, n_jobs=2, from_scratch=True)\n\nfor num, data_file in enumerate(many_custom_data_files):\n    \n    customDB.prepare_sequences(\n        data_file,\n        file_id=num, \n        chain='Heavy', # This needs to change depending on the custom data file\n        species='Human', # This needs to change depending on the custom data file\n        seq_column_name = 'heavy_sequences', # This needs to change depending on the custom data file\n    )\n    shutil.copy(data_file, os.path.join(path_to_custom_db, 'extra_data'))\n    \ncustomDB.finalize_prepared_files()\n~~~\n\n\nFinally, the pre-aligned custom dataset can be searched by providing its path when initiating the search.\n~~~python\nraw_queries = [\n    'VKLLEQSGAEVKKPGASVKVSCKASGYSFTSYGLHWVRQAPGQRLEWMGWISAGTGNTKYSQKFRGRVTFTRDTSATTAYMGLSSLRPEDTAVYYCARDPYGGGKSEFDYWGQGTLVTVSS',\n]\n\nresults = EasySearch(\n    raw_queries, \n    database_path=path_to_custom_db, \n    allowed_chain='Any', \n    allowed_species='Any',\n    regions=['whole'],\n    length_matched=[False],\n)\n~~~\n\n---------\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/oxpig/kasearch/main/README.md",
      "technique": "header_analysis"
    }
  ]
}