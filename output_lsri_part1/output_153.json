{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "format": "bibtex",
        "type": "File_dump",
        "value": "bibentry(\n    header = \"If you use the ReporterScore package in published research, please cite:\",\n    bibtype = \"Article\",\n    title = \"Generalized reporter score-based enrichment analysis for omics data\",\n    author = c(\n        as.person(\"Chen Peng\"),\n        as.person(\"Qiong Chen\"),\n        as.person(\"Shangjin Tan\"),\n        as.person(\"Xiaotao Shen\"),\n        as.person(\"Chao Jiang\")\n    ),\n    year = \"2024\",\n    journal = \"Briefings in Bioinformatics\",\n    doi = \"10.1093/bib/bbae116\",\n    volume = \"Volume 25\",\n    url = \"https://doi.org/10.1093/bib/bbae116\",\n    textVersion = paste(\"Chen Peng, Qiong Chen, Shangjin Tan, Xiaotao Shen, Chao Jiang\",\n                        \"Generalized reporter score-based enrichment analysis for omics data\",\n                        \"Briefings in Bioinformatics\", \"Volume 25, Issue 3, May 2024, bbae116\",\n                        \"https://doi.org/10.1093/bib/bbae116 \", sep = \", \")\n)\n"
      },
      "source": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/inst/CITATION",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "ReporterScore <img src=\"man/figures/ReporterScore.png\" align=\"right\" width=\"120\" />"
        ],
        "type": "Text_excerpt",
        "value": "To cite ReporterScore in publications use:\n\nC. Peng, Q. Chen, S. Tan, X. Shen, C. Jiang, Generalized Reporter\nScore-based Enrichment Analysis for Omics Data. *Briefings in\nBioinformatics* (2024). <https://doi.org/10.1093/bib/bbae116>.\n"
      },
      "source": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Reference",
        "type": "Text_excerpt",
        "value": "1.  Patil, K. R. & Nielsen, J. Uncovering transcriptional regulation of\n    metabolism by using metabolic network topology. Proc Natl Acad Sci U\n    S A 102, 2685\u20132689 (2005).\n\n2.  L. Liu, R. Zhu, D. Wu, Misuse of reporter score in microbial\n    enrichment analysis. iMeta. 2, e95 (2023).\n\n3.  <https://github.com/wangpeng407/ReporterScore>\n"
      },
      "source": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/README.Rmd",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Asa12138/ReporterScore"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-05-12T07:45:35Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-29T14:22:34Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Generalized Reporter Score-based Functional Enrichment Method for Omics Data"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9878395781723543,
      "result": {
        "original_header": "ReporterScore <img src=\"man/figures/ReporterScore.png\" align=\"right\" width=\"120\" />",
        "type": "Text_excerpt",
        "value": "\nInspired by the classic \u2018RSA\u2019, we developed the improved \u2018Generalized\nReporter Score-based Analysis (GRSA)\u2019 method, implemented in the R\npackage \u2018ReporterScore\u2019, along with comprehensive visualization methods\nand pathway databases. \n\u2018GRSA\u2019 is a threshold-free method that works well with all types of\nbiomedical features, such as genes, chemical compounds, and microbial\nspecies. Importantly, the \u2018GRSA\u2019 supports **multi-group and longitudinal\nexperimental designs**, because of the included multi-group-compatible\nstatistical methods. \n"
      },
      "source": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8938805364794281,
      "result": {
        "original_header": "Step by step",
        "type": "Text_excerpt",
        "value": "1.  `ko.test`: this function help to calculate *p-value* for\n    KO_abundance by various built-in methods such as differential\n    analysis (`t.test`, `wilcox.test`, `kruskal.test`, `anova`) or\n    correlation analysis (`pearson`, `spearman`, `kendall`). **You can\n    also calculate this *p-value* for KO_abundance by other methods**\n    like \u201cDESeq2\u201d, \u201cEdger\u201d, \u201cLimma\u201d, \u201cALDEX\u201d, \u201cANCOM\u201d and do a p.adjust\n    yourself, then skip `ko.test` step go to step2\u2026\n2.  `pvalue2zs`: this function transfers p-value of KOs to Z-score\n    (select mode: \u201cmixed\u201d or \u201cdirected\u201d).\n3.  `get_reporter_score` this function calculate reporter score of each\n    pathways in a specific database. You can use a custom database here. \nTake the \u201cLimma\u201d as an example:\n``` r\n# 1-1. Calculate p-value by Limma\nko_pvalue <- ko.test(KO_abundance, \"Group\", metadata, method = \"none\")\n\nko_Limma_p <- pctax::diff_da(KO_abundance, group_df = metadata[\"Group\"], method = \"limma\")\n\n# 1-2. Replace the p-value in ko_pvalue, remember to match the KO_ids\nko_pvalue$`p.value` <- ko_Limma_p[match(ko_pvalue$KO_id, ko_Limma_p$tax), \"pvalue\"]\n\n# 2. Use `pvalue2zs` to get Z-score\nko_stat <- pvalue2zs(ko_pvalue, mode = \"directed\")\n\n# 3. Use `get_reporter_score` to get reporter score\nreporter_s1 <- get_reporter_score(ko_stat, perm = 499)\n\n# 4. Combine the result\nreporter_res1 <- combine_rs_res(KO_abundance, \"Group\", metadata, ko_stat, reporter_s1)\n\n# Then the reporter_res1 can be used for visualization\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.983016883545985,
      "result": {
        "original_header": "Other commonly used enrichment methods",
        "type": "Text_excerpt",
        "value": "| Category | Method                                                            | Tools                                             | Notes                                                                                                                                                        |\n|:---------|:------------------------------------------------------------------|:--------------------------------------------------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| ORA      | Hypergeometric test / Fisher\u2019s exact test                         | DAVID (website) , clusterProfiler (R package)     | The most common methods used in enrichment analysis. Selecting a list of genes is required.                                                                  |\n| FCS      | Gene set enrichment analysis (GSEA)                               | GSEA (website)                                    | GSEA creatively uses gene ranking, rather than selecting a list of genes, to identify statistically significant and concordant differences across gene sets. |\n| FCS      | Generalized reporter score-based analysis (GRSA/RSA)              | ReporterScore (R package developed in this study) | Find significant metabolites (first report), pathways, and taxonomy based on the p-values for multi-omics data.                                              |\n| FCS      | Significance Analysis of Function and Expression (SAFE)           | safe (R package)                                  | SAFE assesses the significance of gene categories by calculating both local and global statistics from gene expression data.                                 |\n| FCS      | Gene Set Analysis (GSA)                                           | GSA (R Package)                                   | GSA was proposed as an improvement of GSEA, using the \u201cmaxmean\u201d statistic instead of the weighted sign KS statistic.                                         |\n| FCS      | Pathway Analysis with Down-weighting of Overlapping Genes (PADOG) | PADOG (R package)                                 | PADOGA assumes that genes associated with fewer pathways have more significant effects than genes associated with more pathways.                             |\n| FCS      | Gene Set Variation Analysis (GSVA)                                | GSVA (R package)                                  | A nonparametric, unsupervised method that transforms gene expression data into gene set scores for downstream differential pathway activity analysis.        |\n| PT       | Topology-based pathway enrichment analysis (TPEA)                 | TPEA (R package)                                  | Integrate topological properties and global upstream/downstream positions of genes in pathways.                                                              | \nCommonly used enrichment methods for omics data. \nThe input data is from `reporter_score`, and also supports custom\ndatabases, so you can easily compare the results of various enrichment\nmethods and conduct a comprehensive analysis:\n``` r\n# View(reporter_res2$reporter_s)\n# reporter_score\nfilter(reporter_res$reporter_s, abs(ReporterScore) > 1.64, p.adjust < 0.05) %>% pull(ID) -> RS\n# fisher\nfisher_res <- KO_fisher(reporter_res)\nfilter(fisher_res, p.adjust < 0.05) %>% pull(ID) -> Fisher\n# enricher\nenrich_res <- KO_enrich(reporter_res)\nfilter(enrich_res, p.adjust < 0.05) %>% pull(ID) -> clusterProfiler\n# GESA\nset.seed(1234)\ngsea_res <- KO_gsea(reporter_res, weight = \"Z_score\")\n#> Warning in preparePathwaysAndStats(pathways, stats, minSize, maxSize, gseaParam, : There are ties in the preranked stats (57.15% of the list).\n#> The order of those tied genes will be arbitrary, which may produce unexpected results.\n#> Warning in fgseaMultilevel(pathways = pathways, stats = stats, minSize =\n#> minSize, : For some pathways, in reality P-values are less than 1e-10. You can\n#> set the `eps` argument to zero for better estimation.\nfilter(data.frame(gsea_res), p.adjust < 0.05) %>% pull(ID) -> GSEA\n\nvenn_res <- list(GRSA = RS, Fisher = Fisher, CP = clusterProfiler, GSEA = GSEA)\nlibrary(pcutils)\nvenn(venn_res, \"network\")\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9837660297233625,
      "result": {
        "original_header": "uplevel the KOs",
        "type": "Text_excerpt",
        "value": "[KEGG BRITE](https://www.genome.jp/kegg/brite.html) is a collection of\nhierarchical classification systems capturing functional hierarchies of\nvarious biological objects, especially those represented as KEGG\nobjects. \nWe collected k00001 KEGG Orthology (KO) table so that you can summaries\neach levels abundance. Use `load_KO_htable` to get KO_htable and use\n`update_KO_htable` to update. Use `up_level_KO` can upgrade to specific\nlevel in one of \u201cpathway\u201d, \u201cmodule\u201d, \u201clevel1\u201d, \u201clevel2\u201d, \u201clevel3\u201d,\n\u201cmodule1\u201d, \u201cmodule2\u201d, \u201cmodule3\u201d.\n``` r\nKO_htable <- load_KO_htable()\n#> =================================load KO_htable=================================\n#> ==================KO_htable download time: 2024-01-12 00:49:03==================\n#> If you want to update KO_htable, use `update_htable(type='ko')`\nhead(KO_htable)\n#>   level1_name             level2_name level3_id                  level3_name\n#> 1  Metabolism Carbohydrate metabolism  map00010 Glycolysis / Gluconeogenesis\n#> 2  Metabolism Carbohydrate metabolism  map00010 Glycolysis / Gluconeogenesis\n#> 3  Metabolism Carbohydrate metabolism  map00010 Glycolysis / Gluconeogenesis\n#> 4  Metabolism Carbohydrate metabolism  map00010 Glycolysis / Gluconeogenesis\n#> 5  Metabolism Carbohydrate metabolism  map00010 Glycolysis / Gluconeogenesis\n#> 6  Metabolism Carbohydrate metabolism  map00010 Glycolysis / Gluconeogenesis\n#>    KO_id                                                    KO_name\n#> 1 K00844                                HK; hexokinase [EC:2.7.1.1]\n#> 2 K12407                              GCK; glucokinase [EC:2.7.1.2]\n#> 3 K00845                              glk; glucokinase [EC:2.7.1.2]\n#> 4 K25026                              glk; glucokinase [EC:2.7.1.2]\n#> 5 K01810       GPI, pgi; glucose-6-phosphate isomerase [EC:5.3.1.9]\n#> 6 K06859 pgi1; glucose-6-phosphate isomerase, archaeal [EC:5.3.1.9]\nplot_htable(type = \"ko\")\n#> =================================load KO_htable=================================\n#> ==================KO_htable download time: 2024-01-12 00:49:03==================\n#> If you want to update KO_htable, use `update_htable(type='ko')`\n#> Warning: Vectorized input to `element_text()` is not officially supported.\n#> \u2139 Results may be unexpected or may change in future versions of ggplot2.\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9493732586907223,
      "result": {
        "type": "Text_excerpt",
        "value": "**Read this in other languages: ,\n.** \n"
      },
      "source": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/README.Rmd",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/Asa12138/ReporterScore/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Asa12138/ReporterScore/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Asa12138/ReporterScore"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ReporterScore "
      },
      "source": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/README.Rmd",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/man/figures/1-workflow.png"
      },
      "source": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/README.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/man/figures/README-unnamed-chunk-10-1.png"
      },
      "source": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/README.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/man/figures/README-unnamed-chunk-12-1.png"
      },
      "source": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/README.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/man/figures/README-unnamed-chunk-13-1.png"
      },
      "source": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/README.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/man/figures/README-unnamed-chunk-14-1.png"
      },
      "source": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/README.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/man/figures/README-unnamed-chunk-15-1.png"
      },
      "source": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/README.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/man/figures/README-unnamed-chunk-16-1.png"
      },
      "source": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/README.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/man/figures/README-unnamed-chunk-17-1.png"
      },
      "source": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/README.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/man/figures/README-unnamed-chunk-18-1.png"
      },
      "source": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/README.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/man/figures/ko00780.Z_score.png"
      },
      "source": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/README.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/man/figures/README-unnamed-chunk-21-1.png"
      },
      "source": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/README.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/man/figures/README-unnamed-chunk-22-1.png"
      },
      "source": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/README.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/man/figures/README-unnamed-chunk-22-2.png"
      },
      "source": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/README.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/man/figures/README-unnamed-chunk-23-1.png"
      },
      "source": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/README.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/man/figures/README-unnamed-chunk-23-2.png"
      },
      "source": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/README.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/man/figures/README-unnamed-chunk-25-1.png"
      },
      "source": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/README.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/man/figures/README-unnamed-chunk-26-1.png"
      },
      "source": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/README.Rmd",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/man/figures/README-unnamed-chunk-27-1.png"
      },
      "source": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/README.Rmd",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "ReporterScore <img src=\"man/figures/ReporterScore.png\" align=\"right\" width=\"120\" />"
        ],
        "type": "Text_excerpt",
        "value": "You can install the released version of `ReporterScore` from\n[CRAN](https://CRAN.R-project.org) with:\n\n``` r\ninstall.packages(\"ReporterScore\")\n```\n\nYou can install the development version of `ReporterScore` from\n[GitHub](https://github.com/) with:\n\n``` r\n# install.packages(\"devtools\")\ndevtools::install_github(\"Asa12138/pcutils\")\ndevtools::install_github(\"Asa12138/ReporterScore\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9999868091881445,
      "result": {
        "original_header": "ReporterScore <img src=\"man/figures/ReporterScore.png\" align=\"right\" width=\"120\" />",
        "type": "Text_excerpt",
        "value": "The HTML documentation of the latest version is available at [Github\npage](https://asa12138.github.io/ReporterScore/).\n \n"
      },
      "source": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9831997670951267,
      "result": {
        "original_header": "uplevel the KOs",
        "type": "Text_excerpt",
        "value": "We collected k00001 KEGG Orthology (KO) table so that you can summaries\neach levels abundance. Use `load_KO_htable` to get KO_htable and use\n`update_KO_htable` to update. Use `up_level_KO` can upgrade to specific\nlevel in one of \u201cpathway\u201d, \u201cmodule\u201d, \u201clevel1\u201d, \u201clevel2\u201d, \u201clevel3\u201d,\n\u201cmodule1\u201d, \u201cmodule2\u201d, \u201cmodule3\u201d.\n``` r\nKO_htable <- load_KO_htable()\n#> =================================load KO_htable=================================\n#> ==================KO_htable download time: 2024-01-12 00:49:03==================\n#> If you want to update KO_htable, use `update_htable(type='ko')`\nhead(KO_htable)\n#>   level1_name             level2_name level3_id                  level3_name\n#> 1  Metabolism Carbohydrate metabolism  map00010 Glycolysis / Gluconeogenesis\n#> 2  Metabolism Carbohydrate metabolism  map00010 Glycolysis / Gluconeogenesis\n#> 3  Metabolism Carbohydrate metabolism  map00010 Glycolysis / Gluconeogenesis\n#> 4  Metabolism Carbohydrate metabolism  map00010 Glycolysis / Gluconeogenesis\n#> 5  Metabolism Carbohydrate metabolism  map00010 Glycolysis / Gluconeogenesis\n#> 6  Metabolism Carbohydrate metabolism  map00010 Glycolysis / Gluconeogenesis\n#>    KO_id                                                    KO_name\n#> 1 K00844                                HK; hexokinase [EC:2.7.1.1]\n#> 2 K12407                              GCK; glucokinase [EC:2.7.1.2]\n#> 3 K00845                              glk; glucokinase [EC:2.7.1.2]\n#> 4 K25026                              glk; glucokinase [EC:2.7.1.2]\n#> 5 K01810       GPI, pgi; glucose-6-phosphate isomerase [EC:5.3.1.9]\n#> 6 K06859 pgi1; glucose-6-phosphate isomerase, archaeal [EC:5.3.1.9]\nplot_htable(type = \"ko\")\n#> =================================load KO_htable=================================\n#> ==================KO_htable download time: 2024-01-12 00:49:03==================\n#> If you want to update KO_htable, use `update_htable(type='ko')`\n#> Warning: Vectorized input to `element_text()` is not officially supported.\n#> \u2139 Results may be unexpected or may change in future versions of ggplot2.\n```\n \n``` r\nKO_level1 <- up_level_KO(KO_abundance, level = \"level1\", show_name = TRUE)\n#> =================================load KO_htable=================================\n#> ==================KO_htable download time: 2024-01-12 00:49:03==================\n#> If you want to update KO_htable, use `update_htable(type='ko')`\npcutils::stackplot(KO_level1[-which(rownames(KO_level1) == \"Unknown\"), ]) +\n  ggsci::scale_fill_d3() +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))\n``` \n"
      },
      "source": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/README.Rmd",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8523565507466403,
      "result": {
        "original_header": "CARD for ARGs",
        "type": "Text_excerpt",
        "value": "For convenience, I also included the CARD database from\n<https://card.mcmaster.ca/download/0/broadstreet-v3.2.8.tar.bz2>.\n``` r\nCARDinfo <- load_CARDinfo()\n#> =================================load CARDinfo==================================\n#> ==================CARDinfo download time: 2024-01-12 01:12:11===================\n#> If you want to update CARDinfo, use `update_GOlist()`\nhead(CARDinfo$ARO_index)\n#>         ARO Accession CVTERM ID Model Sequence ID Model ID\n#> 3005099   ARO:3005099     43314              6143     3831\n#> 3002523   ARO:3002523     38923              8144     1781\n#> 3002524   ARO:3002524     38924                85      746\n#> 3002525   ARO:3002525     38925              4719     1246\n#> 3002526   ARO:3002526     38926               228     1415\n#> 3002527   ARO:3002527     38927              5510     2832\n#>                                                     Model Name\n#> 3005099 23S rRNA (adenine(2058)-N(6))-methyltransferase Erm(A)\n#> 3002523                                             AAC(2')-Ia\n#> 3002524                                             AAC(2')-Ib\n#> 3002525                                             AAC(2')-Ic\n#> 3002526                                             AAC(2')-Id\n#> 3002527                                             AAC(2')-Ie\n#>                                                       ARO Name\n#> 3005099 23S rRNA (adenine(2058)-N(6))-methyltransferase Erm(A)\n#> 3002523                                             AAC(2')-Ia\n#> 3002524                                             AAC(2')-Ib\n#> 3002525                                             AAC(2')-Ic\n#> 3002526                                             AAC(2')-Id\n#> 3002527                                             AAC(2')-Ie\n#>         Protein Accession DNA Accession                         AMR Gene Family\n#> 3005099        AAB60941.1    AF002716.1 Erm 23S ribosomal RNA methyltransferase\n#> 3002523        AAA03550.1      L06156.2                                 AAC(2')\n#> 3002524        AAC44793.1      U41471.1                                 AAC(2')\n#> 3002525        CCP42991.1    AL123456.3                                 AAC(2')\n#> 3002526        AAB41701.1      U72743.1                                 AAC(2')\n#> 3002527        CAC32082.1    AL583926.1                                 AAC(2')\n#>                                                                   Drug Class\n#> 3005099 lincosamide antibiotic;macrolide antibiotic;streptogramin antibiotic\n#> 3002523                                            aminoglycoside antibiotic\n#> 3002524                                            aminoglycoside antibiotic\n#> 3002525                                            aminoglycoside antibiotic\n#> 3002526                                            aminoglycoside antibiotic\n#> 3002527                                            aminoglycoside antibiotic\n#>                 Resistance Mechanism CARD Short Name\n#> 3005099 antibiotic target alteration  Spyo_ErmA_MLSb\n#> 3002523      antibiotic inactivation      AAC(2')-Ia\n#> 3002524      antibiotic inactivation      AAC(2')-Ib\n#> 3002525      antibiotic inactivation      AAC(2')-Ic\n#> 3002526      antibiotic inactivation      AAC(2')-Id\n#> 3002527      antibiotic inactivation      AAC(2')-Ie\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/README.Rmd",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/Asa12138/ReporterScore/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/man/figures/ReporterScore.png"
      },
      "source": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/README.Rmd",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ReporterScore"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "Asa12138"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 168678,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/README.Rmd"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:34:18",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 45
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Inputdata (Feature abundance table and metadata)",
        "parent_header": [
          "ReporterScore <img src=\"man/figures/ReporterScore.png\" align=\"right\" width=\"120\" />",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "- For transcriptomic, scRNA-seq, and related gene-based omics data of a\n  specific species, a complete gene abundance table can be used.\n- For metagenomic and metatranscriptomic data, which involve many\n  different species, a KO abundance table can be used, generated using\n  Blast, Diamond, or KEGG official mapper software to align the reads or\n  contigs to the KEGG or the EggNOG database\n- For metabolomic data, an annotated compound abundance table can be\n  used, but the standardization of compound IDs (e.g., convert compound\n  IDs to C numbers in the KEGG database) is required.\n"
      },
      "source": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Format of abundance table:",
        "parent_header": [
          "ReporterScore <img src=\"man/figures/ReporterScore.png\" align=\"right\" width=\"120\" />",
          "Usage",
          "1. Inputdata (Feature abundance table and metadata)"
        ],
        "type": "Text_excerpt",
        "value": "\u26a0\ufe0f**Importantly, the input abundance table should not be prefiltered to\nretain the background information, as the \u2018GRSA\u2019 is a threshold-free\nmethod.**\n\n- The rownames are feature ids (e.g.\u00a0\u201cK00001\u201d (KEGG K number) if\n  feature=\u201cko\u201d; \u201cPEX11A\u201d (gene symbol) if feature=\u201cgene\u201d; \u201cC00024\u201d (KEGG\n  C number) if feature=\u201ccompound\u201d).\n- The colnames are samples.\n- The abundance value can be read counts or normalized values (e.g.,\n  TPM, FPKM, RPKM, or relative abundance, corresponds to suitable\n  statistical test method).\n\nAn example code tailored for a KO abundance table is as follows:\n\n``` r\ndata(\"KO_abundance_test\")\nhead(KO_abundance[, 1:6])\n#>                WT1         WT2         WT3         WT4         WT5         WT6\n#> K03169 0.002653545 0.005096380 0.002033923 0.000722349 0.003468322 0.001483028\n#> K07133 0.000308237 0.000280458 0.000596527 0.000859854 0.000308719 0.000878098\n#> K03088 0.002147068 0.002030742 0.003797459 0.004161979 0.002076596 0.003091182\n#> K03530 0.003788366 0.000239298 0.000445817 0.000557271 0.000222969 0.000529624\n#> K06147 0.000785654 0.001213630 0.001312569 0.001662740 0.002387006 0.001725797\n#> K05349 0.001816325 0.002813642 0.003274701 0.001089906 0.002371921 0.001795214\n```\n\nAnd you should also offer a experimental metadata:\n"
      },
      "source": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Format of metadata table:",
        "parent_header": [
          "ReporterScore <img src=\"man/figures/ReporterScore.png\" align=\"right\" width=\"120\" />",
          "Usage",
          "1. Inputdata (Feature abundance table and metadata)"
        ],
        "type": "Text_excerpt",
        "value": "- The rownames are samples, columns are groups.\n- The grouping variable can be categories (at least two categories, for\n  differential abundance analysis).\n- The grouping variable can also be multiple time points (for\n  longitudinal analysis).\n- The grouping variable can also be continuous (for correlation\n  analysis).\n\n``` r\nhead(metadata)\n#>     Group Group2\n#> WT1    WT     G3\n#> WT2    WT     G3\n#> WT3    WT     G3\n#> WT4    WT     G3\n#> WT5    WT     G3\n#> WT6    WT     G1\n```\n\n\u26a0\ufe0f**Importantly, the rownames of metadata and the colnames of feature\nabundance table should be matching or partial matching!**\n\nThe `ReporterScore` will automatically match the samples based on the\nrownames of metadata and the colnames of feature abundance table.\n\n``` r\nall(rownames(metadata) %in% colnames(KO_abundance))\n## TRUE\n\nintersect(rownames(metadata), colnames(KO_abundance))>0\n## TRUE\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Pathway databases",
        "parent_header": [
          "ReporterScore <img src=\"man/figures/ReporterScore.png\" align=\"right\" width=\"120\" />",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "The `ReporterScore` package has built-in KEGG pathway, module, gene,\ncompound, and GO databases and also allows customized databases, making\nit compatible with feature abundance tables from diverse omics data.\n\n**You can choose any of the following methods to load the database based\non your analysis needs:**\n\n1.  `ReporterScore` has built-in KEGG pathway-KO and module-KO databases\n    (2023-08 version) for KO abundance table. You can use\n    `load_KOlist()` to have a look and use `update_KO_file()` to update\n    these databases (by KEGG API) as using latest database is very\n    important.\n\n2.  `ReporterScore` has built-in KEGG pathway-compound and\n    module-compound databases (2023-08 version) for compound abundance\n    table. You can use `load_CPDlist()` to have a look and use\n    `update_KO_file()` to update these databases (by KEGG API).\n\n3.  `ReporterScore` has built-in pathway-ko, pathway-gene, and\n    pathway-compound databases of human (hsa) and mouse (mmu) for\n    ko/gene/compound abundance table. You can use\n    `custom_modulelist_from_org()` to have a look. Use\n    `update_org_pathway()` to update these databases and download other\n    organism databases (by KEGG API).\n\n4.  `ReporterScore` has built-in GO-gene database, You can use\n    `load_GOlist()` to have a look and use `update_GOlist()` to update\n    these databases (by KEGG API).\n\n5.  You can just customize your own pathway databases (gene set of\n    interest) by using `custom_modulelist()`.\n\n``` r\n# 1. KEGG pathway-KO and module-KO databases\nKOlist <- load_KOlist()\nhead(KOlist$pathway)\n\n# 2. KEGG pathway-compound and module-compound databases\nCPDlist <- load_CPDlist()\nhead(CPDlist$pathway)\n\n# 3. human (hsa) pathway-ko/gene/compound databases\nhsa_pathway_gene <- custom_modulelist_from_org(\n  org = \"hsa\",\n  feature = c(\"ko\", \"gene\", \"compound\")[2]\n)\nhead(hsa_pathway_gene)\n\n# 4. GO-gene database\nGOlist <- load_GOlist()\nhead(GOlist$BP)\n\n# 5. customize your own pathway databases\n?custom_modulelist()\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3. One step GRSA",
        "parent_header": [
          "ReporterScore <img src=\"man/figures/ReporterScore.png\" align=\"right\" width=\"120\" />",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "Use function `GRSA` or `reporter_score` can get the reporter score\nresult by one step.\n\n\u26a0\ufe0fThere are some important arguments for analysis:\n\n- **mode**: \u201cmixed\u201d or \u201cdirected\u201d (directed mode only for two groups\n  differential analysis or multi-groups correlation analysis.), see\n  details in `pvalue2zs`.\n- **method**: the method of statistical test for calculating p-value.\n  Default is `wilcox.test`:\n  - `t.test` (parametric) and `wilcox.test` (non-parametric). Perform\n    comparison between two groups of samples.\n  - `anova` (parametric) and `kruskal.test` (non-parametric). Perform\n    one-way ANOVA test or Kruskal-Wallis rank sum test comparing\n    multiple groups.\n  - \u201cpearson\u201d, \u201ckendall\u201d, or \u201cspearman\u201d (correlation), see `?cor`.\n  - \u201cnone\u201d: use \u201cnone\u201d for `step by step enrichment`. You can calculate\n    the p-value by other methods like \u201cDESeq2\u201d, \u201cEdger\u201d, \u201cLimma\u201d,\n    \u201cALDEX\u201d, \u201cANCOM\u201d yourself.\n- **type**: choose the built-in pathway database:\n  - \u2018pathway\u2019 or \u2018module\u2019 for default KEGG database for **microbiome**.\n  - \u2018CC\u2019, \u2018MF\u2019, \u2018BP\u2019, \u2018ALL\u2019 for default GO database for **homo\n    sapiens**.\n  - org in listed in <https://www.genome.jp/kegg/catalog/org_list.html>\n    such as \u2018hsa\u2019 (if your kodf is come from a specific organism, you\n    should specify type here)\n- **modulelist**: customize database. A dataframe containing\n  \u2018id\u2019,\u2018K_num\u2019,\u2018KOs\u2019,\u2018Description\u2019 columns. Take the `KOlist` as\n  example, use `custom_modulelist` to build a customize database.\n- **feature**: one of \u201cko\u201d, \u201cgene\u201d, \u201ccompound\u201d.\n\n**The first level will be set as the control group, you can change the\nfactor level to change your comparison.**\n\nFor example, we want to compare two groups \u2018WT-OE\u2019, and use the\n\u201cdirected\u201d mode as we just want know which pathways are enriched or\ndepleted in **OE group**:\n"
      },
      "source": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "KO-pathway",
        "parent_header": [
          "ReporterScore <img src=\"man/figures/ReporterScore.png\" align=\"right\" width=\"120\" />",
          "Usage",
          "3. One step GRSA"
        ],
        "type": "Text_excerpt",
        "value": "``` r\ncat(\"Comparison: \", levels(factor(metadata$Group)), \"\\n\")\n#> Comparison:  WT OE\n\n# for microbiome!!!\nreporter_res <- GRSA(KO_abundance, \"Group\", metadata,\n  mode = \"directed\",\n  method = \"wilcox.test\", perm = 999,\n  type = \"pathway\", feature = \"ko\"\n)\n#> ================================Use feature: ko=================================\n#> ===============================Checking rownames================================\n#> Some of your ko_stat are not KO id, check the format! (e.g. K00001)\n#> 52.7% of your kos in the modulelist!\n#> 30 samples are matched for next step.\n#> ===========================Removing all-zero rows: 0============================\n#> ===================================1.KO test====================================\n#> =================================Checking group=================================\n#> 30 samples are matched for next step.\n#> ===========================Removing all-zero rows: 0============================\n#> ==============================Calculating each KO===============================\n#> ===========================Using method: wilcox.test============================\n#> 1000 features done.\n#> 2000 features done.\n#> 3000 features done.\n#> 4000 features done.\n#> \n#> Compared groups: WT, OE\n#> Total KO number: 4535\n#> Compare method: wilcox.test\n#> Time use: 1.179\n#> =========================2.Transfer p.value to Z-score==========================\n#> ==========================3.Calculating reporter score==========================\n#> ==================================load KOlist===================================\n#> ===================KOlist download time: 2023-08-14 16:00:52====================\n#> If you want to update KOlist, use `update_KO_file()`\n#> ============================Calculating each pathway============================\n#> 100 pathways done.\n#> 400 pathways done.\n#> ID number: 481\n#> Time use: 1.689\n#> ====================================All done====================================\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Gene-pathway",
        "parent_header": [
          "ReporterScore <img src=\"man/figures/ReporterScore.png\" align=\"right\" width=\"120\" />",
          "Usage",
          "3. One step GRSA"
        ],
        "type": "Text_excerpt",
        "value": "When you use the gene abundance table of a specific species\n(e.g.\u00a0human), remember to set the `feature` and `type`!!! Or give the\ndatabase through `modulelist`.\n\n``` r\ndata(\"genedf\")\n\n# Method 1: Set the `feature` and `type`!\nreporter_res_gene <- GRSA(genedf, \"Group\", metadata,\n  mode = \"directed\",\n  method = \"wilcox.test\", perm = 999,\n  type = \"hsa\", feature = \"gene\"\n)\n#> ===============================Use feature: gene================================\n#> ===============================Checking rownames================================\n#> please make sure your input table rows are gene symbol!\n#> 100% of your genes in the modulelist!\n#> 30 samples are matched for next step.\n#> ===========================Removing all-zero rows: 0============================\n#> ===================================1.KO test====================================\n#> =================================Checking group=================================\n#> 30 samples are matched for next step.\n#> ===========================Removing all-zero rows: 0============================\n#> ==============================Calculating each KO===============================\n#> ===========================Using method: wilcox.test============================\n#> 1000 features done.\n#> \n#> Compared groups: WT, OE\n#> Total KO number: 1000\n#> Compare method: wilcox.test\n#> Time use: 0.224\n#> =========================2.Transfer p.value to Z-score==========================\n#> ==========================3.Calculating reporter score==========================\n#> ================================load hsa pathway================================\n#> =================hsa pathway download time: 2023-08-14 23:28:13=================\n#> If you want to update hsa pathway, use `update_org_pathway('hsa')`\n#> please assgin this custom modulelist to `reporter_score(modulelist=your_modulelist)` to do a custom enrichment.\n#> You choose the feature: 'gene', make sure the rownames of your input table are right.\n#> ============================Calculating each pathway============================\n#> 100 pathways done.\n#> 150 pathways done.\n#> 200 pathways done.\n#> 250 pathways done.\n#> 300 pathways done.\n#> ID number: 343\n#> Time use: 1.558\n#> ====================================All done====================================\n```\n\n``` r\n# Method 2: Give the database through `modulelist`, same to Method 1.\nhsa_pathway_gene <- custom_modulelist_from_org(\n  org = \"hsa\",\n  feature = \"gene\"\n)\n\nreporter_res_gene <- GRSA(genedf, \"Group\", metadata,\n  mode = \"directed\",\n  method = \"wilcox.test\", perm = 999,\n  modulelist = hsa_pathway_gene\n)\n```\n\n``` r\nlibrary(patchwork)\np1 <- plot_report_bar(reporter_res_gene, rs_threshold = 2)\n\n# Use `modify_description` to remove the suffix of pathway description\nreporter_res_gene2 <- modify_description(reporter_res_gene, pattern = \" - Homo sapiens (human)\")\np2 <- plot_report_bar(reporter_res_gene2, rs_threshold = 2)\n\n# Use `ggplot_translator` to translate pathway description\np3 <- pcutils::ggplot_translator(p2)\n#> Please set the font family to make the labels display well.\n#>  see `how_to_set_font_for_plot()`.\n\np1 / p2 / p3\n```\n\n<img src=\"man/figures/README-unnamed-chunk-10-1.png\" width=\"100%\" />\n"
      },
      "source": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Compound-pathway",
        "parent_header": [
          "ReporterScore <img src=\"man/figures/ReporterScore.png\" align=\"right\" width=\"120\" />",
          "Usage",
          "3. One step GRSA"
        ],
        "type": "Text_excerpt",
        "value": "When you use the compound abundance table, remember to set the `feature`\nand `type`!!! Or give the database through `modulelist`.\n\n``` r\nreporter_res_gene <- GRSA(chem_df, \"Group\", metadata,\n  mode = \"directed\",\n  method = \"wilcox.test\", perm = 999,\n  type = \"hsa\", feature = \"compound\"\n)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Output",
        "parent_header": [
          "ReporterScore <img src=\"man/figures/ReporterScore.png\" align=\"right\" width=\"120\" />",
          "Usage",
          "3. One step GRSA"
        ],
        "type": "Text_excerpt",
        "value": "The result is a \u201creporter_score\u201d object:\n\n| elements     | description                                       |\n|--------------|---------------------------------------------------|\n| `kodf`       | your input KO_abundance table                     |\n| `ko_stat`    | ko statistics result contains p.value and z_score |\n| `reporter_s` | the reporter score in each pathway                |\n| `modulelist` | default KOlist or customized modulelist dataframe |\n| `group`      | The comparison groups in your data                |\n| `metadata`   | sample information dataframe contains group       |\n\nThe important result is `reporter_res$reporter_s`, which is a dataframe\ncontains the reporter score in each pathway:\n\n``` r\n# view data.frame in Rstudio\nView(reporter_res$reporter_s)\n\n# export result as .csv and check using Excel:\nexport_report_table(reporter_res, dir_name = \"~/Downloads/\")\n```\n"
      },
      "source": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4. Visualization",
        "parent_header": [
          "ReporterScore <img src=\"man/figures/ReporterScore.png\" align=\"right\" width=\"120\" />",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "After we get the reporter score result, we can visualize the result in\nvarious ways.\n\nWhen we focus on the whole result:\n\n- Plot the most significantly enriched pathways:\n\nYou can set the `rs_threshold` to filter the pathways, **the default\n`rs_threshold` is 1.64, which is be considered as significant at the\n0.05 level**.\n\n``` r\n# View(reporter_res$reporter_s)\nplot_report_bar(reporter_res, rs_threshold = c(-2.5, 2.5), facet_level = TRUE)\n#> ==============================load Pathway_htable===============================\n#> ===============Pathway_htable download time: 2024-01-12 00:52:39================\n#> If you want to update Pathway_htable, use `update_htable(type='pathway')`\n```\n\n<img src=\"man/figures/README-unnamed-chunk-12-1.png\" width=\"100%\" />\n\n\u26a0\ufe0f**In the directed mode, Enriched in one group means depleted in\nanother group.**\n\n- Plot the most significantly enriched pathways (circle packing):\n\n``` r\nplot_report_circle_packing(reporter_res, rs_threshold = c(-2.5, 2.5))\n#> ==============================load Pathway_htable===============================\n#> ===============Pathway_htable download time: 2024-01-12 00:52:39================\n#> If you want to update Pathway_htable, use `update_htable(type='pathway')`\n#> Non-leaf weights ignored\n#> Scale for fill is already present.\n#> Adding another scale for fill, which will replace the existing scale.\n```\n\n<img src=\"man/figures/README-unnamed-chunk-13-1.png\" width=\"100%\" />\n\nWhen we focus on one pathway, e.g.\u00a0\u201cmap00780\u201d:\n\n- Plot boxes and lines\n\n``` r\nplot_KOs_in_pathway(reporter_res, map_id = \"map00780\")\n```\n\n<img src=\"man/figures/README-unnamed-chunk-14-1.png\" width=\"100%\" />\n\n- Plot the distribution of Z-scores\n\n``` r\nplot_KOs_distribution(reporter_res, map_id = \"map00780\")\n```\n\n<img src=\"man/figures/README-unnamed-chunk-15-1.png\" width=\"100%\" />\n\n- Plot as a network:\n\n``` r\nplot_KOs_network(reporter_res,\n  map_id = c(\"map00780\", \"map00785\", \"map00900\"),\n  main = \"\", mark_module = TRUE\n)\n```\n\n<img src=\"man/figures/README-unnamed-chunk-16-1.png\" width=\"100%\" />\n\n- Plot the KOs abundance in a pathway:\n\n``` r\nplot_KOs_box(reporter_res, map_id = \"map00780\", only_sig = TRUE)\n#> `geom_smooth()` using formula = 'y ~ x'\n```\n\n<img src=\"man/figures/README-unnamed-chunk-17-1.png\" width=\"100%\" />\n\n- Plot the KOs abundance in a pathway (heatmap):\n\n``` r\nplot_KOs_heatmap(reporter_res,\n  map_id = \"map00780\", only_sig = TRUE,\n  heatmap_param = list(cutree_rows = 2)\n)\n```\n\n<img src=\"man/figures/README-unnamed-chunk-18-1.png\" width=\"100%\" />\n\n- Plot the KEGG pathway map:\n\n``` r\nplot_KEGG_map(reporter_res, map_id = \"map00780\", color_var = \"Z_score\")\n```\n\n<img src=\"man/figures/ko00780.Z_score.png\" width=\"100%\" />\n"
      },
      "source": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example for multi-group or longitudinal",
        "parent_header": [
          "ReporterScore <img src=\"man/figures/ReporterScore.png\" align=\"right\" width=\"120\" />",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "If our experimental design is more than two groups or longitudinal, we\ncan choose multi-groups comparison (or correlation):\n\n``` r\ncat(\"Comparison: \", levels(factor(metadata$Group2)))\n#> Comparison:  G1 G2 G3\n\nreporter_res2 <- GRSA(KO_abundance, \"Group2\", metadata,\n  mode = \"directed\",\n  method = \"spearman\", perm = 999\n)\n#> ================================Use feature: ko=================================\n#> ===============================Checking rownames================================\n#> Some of your ko_stat are not KO id, check the format! (e.g. K00001)\n#> 52.7% of your kos in the modulelist!\n#> 30 samples are matched for next step.\n#> ===========================Removing all-zero rows: 0============================\n#> ===================================1.KO test====================================\n#> =================================Checking group=================================\n#> 30 samples are matched for next step.\n#> ===========================Removing all-zero rows: 0============================\n#> ==============================Calculating each KO===============================\n#> =============================Using method: spearman=============================\n#> Using correlation analysis: spearman, the groups will be transform to numeric, note the factor feature of group.\n#> 1000 features done.\n#> 2000 features done.\n#> 3000 features done.\n#> 4000 features done.\n#> \n#> Compared groups: G1, G2, G3\n#> Total KO number: 4535\n#> Compare method: spearman\n#> Time use: 0.549\n#> =========================2.Transfer p.value to Z-score==========================\n#> ==========================3.Calculating reporter score==========================\n#> ==================================load KOlist===================================\n#> ===================KOlist download time: 2023-08-14 16:00:52====================\n#> If you want to update KOlist, use `update_KO_file()`\n#> ============================Calculating each pathway============================\n#> 100 pathways done.\n#> 400 pathways done.\n#> ID number: 481\n#> Time use: 1.643\n#> ====================================All done====================================\n\nplot_KOs_in_pathway(reporter_res2, map_id = \"map02060\") + scale_y_log10()\n```\n\n<img src=\"man/figures/README-unnamed-chunk-21-1.png\" width=\"100%\" />\n"
      },
      "source": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/README.Rmd",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example for specified pattern",
        "parent_header": [
          "ReporterScore <img src=\"man/figures/ReporterScore.png\" align=\"right\" width=\"120\" />",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "For example, groups \u201cG1\u201d, \u201cG2\u201d, and \u201cG3\u201d can be set as 1, 10, and 100 if\nan exponentially increasing trend is expected.\n\nWe use 1,5,1 to found pathways with the down-up-down pattern\n\n``` r\nreporter_res3 <- GRSA(KO_abundance, \"Group2\", metadata,\n  mode = \"directed\", perm = 999,\n  method = \"pearson\", pattern = c(\"G1\" = 1, \"G2\" = 5, \"G3\" = 1)\n)\nplot_report_bar(reporter_res3, rs_threshold = 3, show_ID = TRUE)\n```\n\n<img src=\"man/figures/README-unnamed-chunk-22-1.png\" width=\"100%\" />\n\n``` r\nplot_KOs_in_pathway(reporter_res3, map_id = \"map00860\")\n```\n\n<img src=\"man/figures/README-unnamed-chunk-22-2.png\" width=\"100%\" />\n\nTo explore potential patterns within the data, clustering methods, such\nas C-means clustering, can be used.\n\n``` r\nrsa_cm_res <- RSA_by_cm(KO_abundance, \"Group2\", metadata,\n  method = \"pearson\",\n  k_num = 3, perm = 999\n)\n# show the patterns\nplot_c_means(rsa_cm_res, filter_membership = 0.7)\n```\n\n<img src=\"man/figures/README-unnamed-chunk-23-1.png\" width=\"100%\" />\n\n``` r\n\nplot_report_bar(rsa_cm_res, rs_threshold = 2.5, y_text_size = 10)\n```\n\n<img src=\"man/figures/README-unnamed-chunk-23-2.png\" width=\"100%\" />\n"
      },
      "source": "https://raw.githubusercontent.com/Asa12138/ReporterScore/main/README.Rmd",
      "technique": "header_analysis"
    }
  ]
}