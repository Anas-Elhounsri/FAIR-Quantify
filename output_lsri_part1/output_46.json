{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/d-mcgrath/MetaPathPredict"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-09-29T01:23:07Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-21T08:53:47Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A machine learning-based tool for predicting metabolic modules in incomplete bacterial genomes."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9928977812246143,
      "result": {
        "original_header": "MetaPathPredict",
        "type": "Text_excerpt",
        "value": "The MetaPathPredict Python module utilizes deep learning models to predict the presence or absence of KEGG metabolic modules in bacterial genomes recovered from environmental sequencing efforts. MetaPathPredict can be used on bacterial genomes ranging in degree of estimated completeness, from partial to high-quality genomes. The current version has been designed for use on genomes that do not contain contamination. It is unknown currently how the tool will behave if contamination is present in a user's input.\n \n"
      },
      "source": "https://raw.githubusercontent.com/d-mcgrath/MetaPathPredict/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9840168441275106,
      "result": {
        "original_header": "Functions",
        "type": "Text_excerpt",
        "value": "- `MetaPathPredict` parses one or more input KEGG Ortholog gene annotation datasets (currently only bacterial genome data is supported) and predicts the presence or absence of [KEGG Modules](https://www.genome.jp/kegg/module.html). This function takes as input the .tsv output files from the [KofamScan](https://github.com/takaram/kofam_scan) and [DRAM](https://github.com/WrightonLabCSU/DRAM) gene annotation tools as well as the KEGG KOALA online annotation platforms [blastKOALA](https://www.kegg.jp/blastkoala/), [ghostKOALA](https://www.kegg.jp/ghostkoala/), and [kofamKOALA](https://www.genome.jp/tools/kofamkoala/). Run any of these tools first and then use one or more of their output .tsv files as input to MetaPathPredict.\n    - A single file or multiple space-separated files can be specified to the `--input` parameter, or use a wildcard (e.g., /results/*.tsv). Include full or relative paths to the input file(s). A sample of each annotation file format that MetaPathPredict can process is included in this repository in the [annotatation_examples](annotatation_examples) folder. The sample annotation files in [annotatation_examples](annotatation_examples) can optionally be used as input to test the installation.\n    - The format of the gene annotation files (kofamscan, kofamkoala, dram, or koala) that is used as input must be specified with the `--annotation-format` parameter. Currently, only one input type can be specified at a time.\n    - The full or relative path to the desired destination for MetaPathPredict's output .tsv file must be specified, as well as a name for the file. The output file path and name can be specified using the `--output` parameter. By default, MetaPathPredict does not create any default output directory nor does the output have a default file name.\n    - To specify a specific KEGG module or modules to reconstruct and predict, include the module identifier (e.g., M00001) or identifiers as a space-separated list to the argument `--kegg-modules`. \n"
      },
      "source": "https://raw.githubusercontent.com/d-mcgrath/MetaPathPredict/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9663227557260736,
      "result": {
        "original_header": "Understanding the output",
        "type": "Text_excerpt",
        "value": "The output of running `MetaPathPredict` is a table. The first column, `file`, displays the full file name of each input gene annotation file. The remaining columns give the class predictions (module present = 1; module absent = 0) of KEGG modules. Each KEGG module occupies a single column in the table and is labelled by its module identifier. See a sample output below of four KEGG module predictions for three input annotation files: \n"
      },
      "source": "https://raw.githubusercontent.com/d-mcgrath/MetaPathPredict/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/d-mcgrath/MetaPathPredict/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/d-mcgrath/MetaPathPredict/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "d-mcgrath/MetaPathPredict"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MetaPathPredict"
      },
      "source": "https://raw.githubusercontent.com/d-mcgrath/MetaPathPredict/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "MetaPathPredict"
        ],
        "type": "Text_excerpt",
        "value": "To run MetaPathPredict, download this repository and install it as a Python module (see download and installation instructions below):\n\n"
      },
      "source": "https://raw.githubusercontent.com/d-mcgrath/MetaPathPredict/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "GitHub install:",
        "parent_header": [
          "MetaPathPredict",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "NOTE: [Conda](https://docs.conda.io/en/latest/) is required for this installation.\n\n1. Open a Terminal/Command Prompt window and run the following command to download the\nGitHub repository to the desired location (note: change your current working directory first\nto the desired download location, e.g., `~/Downloads` on MacOS):\n`git clone https://github.com/d-mcgrath/MetaPathPredict.git`\n\n    1. NOTE: You can also download the repository zip file from GitHub\n\n2. In a Terminal/Command Prompt window, run the following commands from the parent directory the MetaPathPredict repository was cloned to:\n```bash\nconda create -n MetaPathPredict python=3.10.6 scikit-learn=1.3.0 tensorflow=2.10.0 numpy=1.23.4 pandas=1.5.2 keras=2.10.0 git=2.40.1\n```\nNOTE: You will be prompted (y/n) to confirm creating this conda environment. Now activate it:\n\n```bash\nconda activate MetaPathPredict\n```\n\n3. Install pyxet:\n```bash\npip install pyxet\n```\n\n4. Once complete, pip install MetaPathPredict:\n```bash\npip install MetaPathPredict/package\n```\n\n5. Download MetaPathPredict's models by running the following command:\n```bash\nDownloadModels\n```\n\nNote: MetaPathPredict is now installed in the `MetaPathPredict` conda environment. Activate the conda environment prior to any use of MetaPathPredict.\n"
      },
      "source": "https://raw.githubusercontent.com/d-mcgrath/MetaPathPredict/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "XetHub install:",
        "parent_header": [
          "MetaPathPredict",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "Follow the instructions from the MetaPathPredict [XetHub](https://xethub.com/dgellermcgrath/MetaPathPredict) repository.\n"
      },
      "source": "https://raw.githubusercontent.com/d-mcgrath/MetaPathPredict/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "pip install:",
        "parent_header": [
          "MetaPathPredict",
          "Installation"
        ],
        "type": "Text_excerpt",
        "value": "[not available yet]\n\n<br>\n"
      },
      "source": "https://raw.githubusercontent.com/d-mcgrath/MetaPathPredict/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9596985251805452,
      "result": {
        "original_header": "Functions",
        "type": "Text_excerpt",
        "value": "The following functions can be implemented to run MetaPathPredict on the command line: \n- To view which KEGG modules MetaPathPredict can reconstruct and make predictions for, run the following on the command line: `MetaPathModules`. \n"
      },
      "source": "https://raw.githubusercontent.com/d-mcgrath/MetaPathPredict/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9902107657587643,
      "result": {
        "original_header": "Understanding the output",
        "type": "Text_excerpt",
        "value": "| file                                 | M00001 | M00002 | M00003 | M00004 |\n|--------------------------------------|--------|--------|--------|--------|\n| /path/to/kofamscan_annotations_1.tsv | 1      | 1      | 0      | 1      |\n| /path/to/kofamscan_annotations_2.tsv | 0      | 1      | 0      | 0      |\n| /path/to/kofamscan_annotations_3.tsv | 1      | 0      | 0      | 0      | \n"
      },
      "source": "https://raw.githubusercontent.com/d-mcgrath/MetaPathPredict/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/d-mcgrath/MetaPathPredict/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MetaPathPredict"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "d-mcgrath"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 70772,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/d-mcgrath/MetaPathPredict/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:04:33",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 16
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Basic usage",
        "parent_header": [
          "MetaPathPredict"
        ],
        "type": "Text_excerpt",
        "value": "```\n# predict method for making KEGG module presence/absence predictions on input gene annotations\n\nusage: MetaPathPredict [-h] --input INPUT [INPUT ...] --annotation-format ANNOTATION_FORMAT\n                       [--kegg-modules KEGG_MODULES [KEGG_MODULES ...]] --output OUTPUT\n\noptions:\n  -h, --help            show this help message and exit\n  --input INPUT [INPUT ...], -i INPUT [INPUT ...]\n                        input file path(s) and name(s) [required]\n  --annotation-format ANNOTATION_FORMAT, -a ANNOTATION_FORMAT\n                        annotation format (kofamscan, kofamkoala, dram, or koala) [default:\n                        kofamscan]\n  --kegg-modules KEGG_MODULES [KEGG_MODULES ...], -k KEGG_MODULES [KEGG_MODULES ...]\n                        KEGG modules to predict [default: MetaPathPredict KEGG modules]\n  --output OUTPUT, -o OUTPUT\n                        output file path and name [required]\n```\n\n<br>\n"
      },
      "source": "https://raw.githubusercontent.com/d-mcgrath/MetaPathPredict/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Examples with sample datasets",
        "parent_header": [
          "MetaPathPredict"
        ],
        "type": "Text_excerpt",
        "value": "```\n# One KofamScan gene annotation dataset\nMetaPathPredict -i /path/to/kofamscan_annotations_1.tsv -a kofamscan -o /results/predictions.tsv\n\n# Three KofamScan gene annotation datasets, with predictions for modules M00001 and M00003\nMetaPathPredict \\\n-i kofamscan_annotations_1.tsv kofamscan_annotations_2.tsv kofamscan_annotations_3.tsv \\\n-a kofamscan \\\n-k M00001 M00003 \\\n-o /results/predictions.tsv\n\n# Multiple KofamScan datasets in a directory\nMetaPathPredict -i annotations/*.tsv -a kofamscan -o /results/predictions.tsv\n\n# One DRAM gene annotation dataset\nMetaPathPredict -i dram_annotation.tsv -a dram -o /results/predictions.tsv\n\n# Multiple DRAM datasets in a directory\nMetaPathPredict -i annotations/*.tsv -a dram -o /results/predictions.tsv\n```\n\n<br>\n"
      },
      "source": "https://raw.githubusercontent.com/d-mcgrath/MetaPathPredict/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Developer usage",
        "parent_header": [
          "MetaPathPredict"
        ],
        "type": "Text_excerpt",
        "value": "```\n# training method for MetaPathPredict's internal models\n\nusage: MetaPathTrain [-h] --train-targets TRAIN_TARGETS --train-features TRAIN_FEATURES\n                     [--num-epochs NUM_EPOCHS] --model-out MODEL_OUT [--use-gpu]\n                     [--num-cores NUM_CORES] [--num-hidden-layers NUM_HIDDEN_LAYERS]\n                     [--hidden-nodes-per-layer HIDDEN_NODES_PER_LAYER]\n                     [--num-features NUM_FEATURES] [--threshold THRESHOLD]\n\noptions:\n  -h, --help            show this help message and exit\n  --train-targets TRAIN_TARGETS\n                        training targets file\n  --train-features TRAIN_FEATURES\n                        training features\n  --num-epochs NUM_EPOCHS\n                        number of epochs\n  --model-out MODEL_OUT, -m MODEL_OUT\n                        model file name output\n  --use-gpu             use GPU if available\n  --num-cores NUM_CORES\n                        Number of cores for parallel processing\n\nNeural Net parameters:\n  --num-hidden-layers NUM_HIDDEN_LAYERS\n                        number of hidden layers\n  --hidden-nodes-per-layer HIDDEN_NODES_PER_LAYER\n                        number of nodes in each hidden layer\n  --num-features NUM_FEATURES\n                        number of features to retain from training data\n  --threshold THRESHOLD\n                        threshold for SelectKBest feature selection\n```\n"
      },
      "source": "https://raw.githubusercontent.com/d-mcgrath/MetaPathPredict/master/README.md",
      "technique": "header_analysis"
    }
  ]
}