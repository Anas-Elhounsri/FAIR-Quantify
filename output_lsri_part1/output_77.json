{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "4. CITATION",
        "parent_header": [
          "Bidirectional WFA"
        ],
        "type": "Text_excerpt",
        "value": "**Santiago Marco-Sola, Jordan M Eizenga, Andrea Guarracino, Benedict Paten, Erik Garrison, Miquel Moreto**. [\"Optimal gap-affine alignment in O(s) space\"](https://doi.org/10.1093/bioinformatics/btad074). Bioinformatics, 2023.\n\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/smarco/BiWFA-paper/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/smarco/BiWFA-paper"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-04-02T07:25:30Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-06-06T23:15:16Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Bidirectional WFA (Paper)"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9826519896966814,
      "result": {
        "original_header": "1. WHAT IS BIDIRECTIONAL WFA (BiWFA)?",
        "type": "Text_excerpt",
        "value": "This repository is a WFA2-lib development branch implementing the bidirectional WFA (BiWFA) algorithm capable of `O(ns)` alignment using `O(s)` memory. \nBiWFA is the first gap-affine algorithm capable of computing optimal alignments in `O(s)` memory while retaining the WFA's time complexity of `O(ns)`. The core idea of the BiWFA algorithm is to perform the WFA algorithm simultaneously in both directions on the strings: from start to end, and from end to start. Each direction will only retain `max{x,o+e}` wavefronts in memory. This is insufficient to perform a full traceback. However, when they \"meet\" in the middle, we can infer a breakpoint in the alignment that divides the optimal score roughly in half. Then, we can then apply the same procedure on the two sides of the breakpoint recursively. In practice, our implementation never requires more than a few hundred MBs aligning noisy Oxford Nanopore Technologies reads up to 1 Mbp long while maintaining competitive execution times. \nFor more documentation on the library and other features, go to [WFA2-lib](https://github.com/smarco/WFA2-lib). \n- **A note for the fierce competitors.** I can understand that science and publishing have become a fierce competition these days. Many researchers want their methods to be successful and popular, seeking funding, tenure, or even fame. If you are going to benchmark the WFA using the least favourable configuration, careless programming, and a disadvantageous setup, please, go ahead. But remember, researchers like you have put a lot of effort into developing the WFA. We all joined this \"competition\" because we sought to find better methods that could truly help other researchers. So, try to be nice, tone down the marketing, and produce fair evaluations and honest publications.  \n\n- We develop methods to help the community and push science forward. If you like the BiWFA ideas and would like to use it, feel free to copy, improve, and even reach out and request more features. In return, we just ask for proper acknowledgement, citation, or comment on where the methods and ideas came from.\n \n"
      },
      "source": "https://raw.githubusercontent.com/smarco/BiWFA-paper/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8684354664672436,
      "result": {
        "original_header": "2. REPORTING BUGS AND FEATURE REQUEST",
        "type": "Text_excerpt",
        "value": "Feedback and bug reporting is highly appreciated. Please report any issue or suggestion on github or email to the main developer (santiagomsola@gmail.com).\n \n"
      },
      "source": "https://raw.githubusercontent.com/smarco/BiWFA-paper/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/smarco/BiWFA-paper/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/smarco/BiWFA-paper/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "smarco/BiWFA-paper"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Bidirectional WFA"
      },
      "source": "https://raw.githubusercontent.com/smarco/BiWFA-paper/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/smarco/BiWFA-paper/main/evaluation/scripts/paf%2Bfasta2seq.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/smarco/BiWFA-paper/main/Bidirectional WFA</h1>\n<h3>1. WHAT IS BIDIRECTIONAL WFA (BiWFA)?</h3>\n<p>This repository is a WFA2-lib development branch implementing the bidirectional WFA (BiWFA) algorithm capable of <code>O(ns)</code> alignment using <code>O(s)</code> memory.</p>\n<p>BiWFA is the first gap-affine algorithm capable of computing optimal alignments in <code>O(s)</code> memory while retaining the WFA's time complexity of <code>O(ns)</code>. The core idea of the BiWFA algorithm is to perform the WFA algorithm simultaneously in both directions on the strings: from start to end, and from end to start. Each direction will only retain <code>max{x,o+e}</code> wavefronts in memory. This is insufficient to perform a full traceback. However, when they "
      },
      "source": "https://raw.githubusercontent.com/smarco/BiWFA-paper/main/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/smarco/BiWFA-paper/main/Bidirectional WFA</h1>\n<h3>1. WHAT IS BIDIRECTIONAL WFA (BiWFA)?</h3>\n<p>This repository is a WFA2-lib development branch implementing the bidirectional WFA (BiWFA) algorithm capable of <code>O(ns)</code> alignment using <code>O(s)</code> memory.</p>\n<p>BiWFA is the first gap-affine algorithm capable of computing optimal alignments in <code>O(s)</code> memory while retaining the WFA's time complexity of <code>O(ns)</code>. The core idea of the BiWFA algorithm is to perform the WFA algorithm simultaneously in both directions on the strings: from start to end, and from end to start. Each direction will only retain <code>max{x,o+e}</code> wavefronts in memory. This is insufficient to perform a full traceback. However, when they "
      },
      "source": "https://raw.githubusercontent.com/smarco/BiWFA-paper/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.9995229971675423,
      "result": {
        "original_header": "2. REPORTING BUGS AND FEATURE REQUEST",
        "type": "Text_excerpt",
        "value": "Feedback and bug reporting is highly appreciated. Please report any issue or suggestion on github or email to the main developer (santiagomsola@gmail.com).\n \n"
      },
      "source": "https://raw.githubusercontent.com/smarco/BiWFA-paper/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8146269685781641,
      "result": {
        "original_header": "1.2 Alignment Testing &amp; Benchmarking",
        "type": "Text_excerpt",
        "value": "<p align = \"center\">\n<img src = \"img/results.png\" width=\"750px\">\n</p>\n \n"
      },
      "source": "https://raw.githubusercontent.com/smarco/BiWFA-paper/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/smarco/BiWFA-paper/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2017 Santiago Marco-Sola\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nAUTHOR/CONTACT: Santiago Marco-Sola <santiagomsola@gmail.com>\n"
      },
      "source": "https://raw.githubusercontent.com/smarco/BiWFA-paper/main/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3. LICENSE",
        "parent_header": [
          "Bidirectional WFA"
        ],
        "type": "Text_excerpt",
        "value": "BiWFA is distributed under MIT licence.\n"
      },
      "source": "https://raw.githubusercontent.com/smarco/BiWFA-paper/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "BiWFA-paper"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "smarco"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 734446,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 42051,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 19927,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 13897,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 6997,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 509,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/smarco/BiWFA-paper/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:12:08",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 40
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "1.1 Getting started",
        "parent_header": [
          "Bidirectional WFA"
        ],
        "type": "Text_excerpt",
        "value": "Git clone and compile the library, tools, and examples.\n\n```\ngit clone https://github.com/smarco/BiWFA-paper\ncd BiWFA-paper\nmake clean all\n```\n"
      },
      "source": "https://raw.githubusercontent.com/smarco/BiWFA-paper/main/README.md",
      "technique": "header_analysis"
    }
  ]
}