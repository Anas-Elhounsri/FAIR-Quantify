{
  "application_domain": [
    {
      "confidence": 24.56,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/mehta-lab/multiSero"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "## How to contribute?\n\nWe welcome bug reports, feature requests, and contributions to the code. Please see issues on the repository for areas we need input on. \nThe master branch is protected and meant to be always functional. Develop on fork of the repo and branches of this repo. Pull requests are welcome.\nPlease generate PRs after testing your code against real data and make sure that master branch is always functional.\n"
      },
      "source": "https://raw.githubusercontent.com/mehta-lab/multiSero/main/docs/contributing.md",
      "technique": "file_exploration"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-03-20T20:18:06Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-22T18:02:31Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "serological measurements from multiplexed ELISA assays"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.975598674894118,
      "result": {
        "original_header": "multisero",
        "type": "Text_excerpt",
        "value": "multisero enables serological measurements with multiplexed and standard ELISA assays. \nThe project automates estimation of antibody titers from data collected with ELISA assays performed with [antigen-arrays](https://doi.org/10.1101/2019.12.20.885285) and [single antigens](https://doi.org/10.1101/2020.03.17.20037713). \nThe immediate goal is to enable specific, sensitive, and quantitative serological surveys for COVID-19. \n \n"
      },
      "source": "https://raw.githubusercontent.com/mehta-lab/multiSero/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9215047999987034,
      "result": {
        "original_header": "Equipment list",
        "type": "Text_excerpt",
        "value": "\nThe project aims to implement serological analysis for several antigen multiplexing approaches.  \nIt currently supports: \n* classical ELISA.\n* antigen arrays printed with [Scienion](https://www.scienion.com/products/sciflexarrayers/). \nThe antigen-arrays can be imaged with:\n * any transmission microscope with motorized XY stage.\n * turn-key plate imagers, e.g., [SciReader CL2](https://www.scienion.com/products/scireaders/).\n * Squid - a variant of [Octopi](https://www.biorxiv.org/content/10.1101/684423v1) platform from [Prakash Lab](http://web.stanford.edu/group/prakash-lab/cgi-bin/labsite/).\n \nThe project will also have tools for intersecting data from different assays for estimation of concentrations, determining level of cross-reactivity, ...\n \n"
      },
      "source": "https://raw.githubusercontent.com/mehta-lab/multiSero/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9991758135205594,
      "result": {
        "original_header": "Validation",
        "type": "Text_excerpt",
        "value": "Current code is validated for analysis of anigen arrays imaged with Scienion Reader and is being refined for antigen arrays imaged with motorized XY microscope and Squid. \n"
      },
      "source": "https://raw.githubusercontent.com/mehta-lab/multiSero/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9689705149285053,
      "result": {
        "original_header": "Contributions",
        "type": "Text_excerpt",
        "value": "We welcome bug reports, feature requests, and contributions to the code. Please see  [this](docs/contributing.md) page for most fruitful ways to contribute. \n"
      },
      "source": "https://raw.githubusercontent.com/mehta-lab/multiSero/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/mehta-lab/multiSero/tree/main/docs"
      },
      "technique": "file_exploration"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/mehta-lab/multiSero/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/mehta-lab/multiSero/main/array_analyzer/extract/notebooks/image_parser_nb.ipynb"
      },
      "source": "https://raw.githubusercontent.com/mehta-lab/multiSero/main/array_analyzer/extract/notebooks/image_parser_nb.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/mehta-lab/multiSero/main/array_analyzer/extract/notebooks/image_parser_well_mask.ipynb"
      },
      "source": "https://raw.githubusercontent.com/mehta-lab/multiSero/main/array_analyzer/extract/notebooks/image_parser_well_mask.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/mehta-lab/multiSero/main/array_analyzer/extract/notebooks/Array_analyzer_bbox.ipynb"
      },
      "source": "https://raw.githubusercontent.com/mehta-lab/multiSero/main/array_analyzer/extract/notebooks/Array_analyzer_bbox.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/mehta-lab/multiSero/main/array_analyzer/extract/notebooks/txt_parser_nb.ipynb"
      },
      "source": "https://raw.githubusercontent.com/mehta-lab/multiSero/main/array_analyzer/extract/notebooks/txt_parser_nb.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/mehta-lab/multiSero/main/array_analyzer/extract/notebooks/spot_detection_icp.ipynb"
      },
      "source": "https://raw.githubusercontent.com/mehta-lab/multiSero/main/array_analyzer/extract/notebooks/spot_detection_icp.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/mehta-lab/multiSero/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "mehta-lab/multiSero"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "multisero"
      },
      "source": "https://raw.githubusercontent.com/mehta-lab/multiSero/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "http://raw.githubusercontent.com/mehta-lab/multiSero/main/docs/Workflow%20Schematic.png"
      },
      "source": "https://raw.githubusercontent.com/mehta-lab/multiSero/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Installation\n\nFollowing are platform dependent installation instructions\n\n\n## Linux/Mac/Windows (x64)\n1. Create a new conda environment.\n2. Clone the repository.\n3. `conda install --file requirements. txt`\n\n## Jetson Nano (aarch64)\n\nFollowing installation was tested on `4.9.140-tegra aarch64 GNU/Linux`.\n\nWe use a python package manager to isolate the dependencies required for multisero.\nconda package manager is not directly supported by above version of Linux.\nInstead, pip virtual environment works well for package management.\n\nMajor steps in setup are:\n1.\tInstall virtual environment: \n    `sudo apt install -y python3-venv`\n    \n2.\tCreate an environment: \n    `python3 -m venv ~/python-envs/multisero`\n    \n3.\tActivate environment: \n    `source ~/python-envs/multisero/bin/activate`\n    \n4.\tDeactivate environment: \n    `deactivate`\n    \n5. Update pyenv.cfg to use system-wide packages:\n    `cd ~/python-envs/env/multisero`\n    \n    Use `nano pyvenv.cfg to` change:\n    `include-system-site-packages = true` \n    (allow packages that require lower-level installation to be accessed in the environment)\n\nSome packages need to be installed in local environment and some system-wide.\nUse `pip install -I` to install in the `multisero` site-packages folder, the environment will access the local pacakages first and then search for global packages.\n\n### install dependencies for python packages:\n\nscikit-image and scipy dependencies:\n\n        sudo apt-get install python-dev libfreetype6-dev\n\tsudo apt-get install libfontconfig1-dev libjpeg\n\tsudo apt-get install libblas-dev liblapack-dev libatlas-base-dev gfortran\n\t\n### install python packages:\n\t\n\t\n\tpip install -I scipy==1.1.0\n\t# compilation of scipy can take >5 min.\n\tpip install -I scikit-image \n\t# compilation of scikit-image takes >5min. May have to try sudo -H pip3 install scikit-image\n\tpip install -I matplotlib \n\tpip install -I pandas==0.24.0 \n\t# compilation of pandas can take time.\n\tpip install -I wheel\n\tpip install -I certifi\n\tpip install -I cycler\n\tpip install -I kiwisolver\n\tpip install -I cython\n\tpip install -I numpy==1.18.1\n\tpip install -I python-dateutil\n\tpip install -I pytz\n\tpip install -I six\n\tpip install -I tabulate\n\tpip install -I tornado\n\tpip install -I openpyxl\n\tpip install -I xmltodict\n\tpip install -I xlrd\n\n\n\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/mehta-lab/multiSero/main/docs/installation.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "multisero"
        ],
        "type": "Text_excerpt",
        "value": "On a typical Windows, Mac, or Linux computer:\n* Create a conda environment: `conda create --name multisero python=3.7`\n* Activate conda environment: `conda activate multisero`\n* Pip install dependencies: `pip install -r requirements.txt`\n* Add the package to PYTHONPATH. Inside the package directory (...\\serology-COVID19), do: `export PYTHONPATH=$PYTHONPATH:$(pwd)` \n\nFor installation notes for Jetson Nano, see [these notes](docs/installation.md).\n"
      },
      "source": "https://raw.githubusercontent.com/mehta-lab/multiSero/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/mehta-lab/multiSero/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "antigen-arrays, covid-19, covid19, covid19-serology, elisa, imaging, python"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "BSD 3-Clause \"New\" or \"Revised\" License",
        "spdx_id": "BSD-3-Clause",
        "type": "License",
        "url": "https://api.github.com/licenses/bsd-3-clause",
        "value": "https://api.github.com/licenses/bsd-3-clause"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "BSD 3-Clause License\n\nCopyright (c) 2020, Chan Zuckerberg Biohub\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
      },
      "source": "https://raw.githubusercontent.com/mehta-lab/multiSero/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "multiSero"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "mehta-lab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 5025773,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 241367,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/mehta-lab/multiSero/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-04 01:06:03",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "multisero"
        ],
        "type": "Text_excerpt",
        "value": "```buildoutcfg\nusage: multisero.py [-h] (-e | -a) -i INPUT -o OUTPUT\n                 [-wf {well_segmentation,well_crop,array_interp,array_fit}]\n                 [-d] [-r] [-m METADATA]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -e, --extract_od      Segment spots and compute ODs\n  -a, --analyze_od      Generate OD analysis plots\n  -i INPUT, --input INPUT\n                        Input directory path\n  -o OUTPUT, --output OUTPUT\n                        Output directory path, where a timestamped subdir will\n                        be generated. In case of rerun, give path to\n                        timestamped run directory\n  -wf {well_segmentation,well_crop,array_interp,array_fit}, --workflow {well_segmentation,well_crop,array_interp,array_fit}\n                        Workflow to automatically identify and extract\n                        intensities from experiment. 'Well' experiments are\n                        for standard ELISA. 'Array' experiments are for ELISA\n                        assays using antigen arrays printed with Scienion\n                        Array Printer Default: array_fit\n  -d, --debug           Write debug plots of well and spots. Default: False\n  -r, --rerun           Rerun wells listed in 'rerun_wells sheets of metadata\n                        file. Default: False\n  -m METADATA, --metadata METADATA\n                        specify the file name for the experiment metadata.\n                        Assumed to be in the same directory as images.\n                        Default: 'multisero_output_data_metadata.xlsx'\n```"
      },
      "source": "https://raw.githubusercontent.com/mehta-lab/multiSero/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Extract OD from antigen array images",
        "parent_header": [
          "multisero",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "`python multisero.py -e -i <input> -o <output> -m <METADATA>` will take metadata for antigen array and images as input, and output optical densities for each antigen.\nThe optical densities are stored in an excel file at the following path: `<output>/multisero_<input>_<year><month><day>_<hour><min>/median_ODs.xlsx`\n\nIf rerunning some of the wells, the input metadata file needs to contain a sheet named 'rerun_wells'\nwith a column named 'well_names' listing wells that will be rerun.\n\nThis [workflow](docs/workflow.md) describes the steps in the extraction of optical density.\n"
      },
      "source": "https://raw.githubusercontent.com/mehta-lab/multiSero/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Generate OD analysis plots",
        "parent_header": [
          "multisero",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "`python multisero.py -a -i <input> -o <output> -m <METADATA>` will read multisero or scienion spot fitting outputs and generates analysis plots for each single antigen. 3 types of plots are supported for now (ROC, categorical, standard curves).\nThe example xlsx config file can be found in \\example folder in the repo. \n\nAn '-l' flag can be added to load the saved report from previous run to speed up loading.\n"
      },
      "source": "https://raw.githubusercontent.com/mehta-lab/multiSero/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Train a classifier using information from multiple antigens",
        "parent_header": [
          "multisero",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "One could train a machine learning classifier using ODs from multiple antigens to potentially improve the classification accuracy for sero-positive or sero-negative. \nThe following script demonstrates how to do this with xgboost tree classifiers. \n`python -m interpretation.train_classifier` \n\n<img src=\"docs/Workflow%20Schematic.png\" width=\"600\">\n"
      },
      "source": "https://raw.githubusercontent.com/mehta-lab/multiSero/main/README.md",
      "technique": "header_analysis"
    }
  ]
}