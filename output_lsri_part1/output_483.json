{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "8. Citation",
        "parent_header": [
          "RegCloser"
        ],
        "type": "Text_excerpt",
        "value": "Cao S, Li M, Li LM. RegCloser: a robust regression approach to closing genome gaps. BMC Bioinformatics. 2023;24(1):249. Published 2023 Jun 13. https://doi.org/10.1186/s12859-023-05367-0\n"
      },
      "source": "https://raw.githubusercontent.com/csh3/RegCloser/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/csh3/RegCloser"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "6. Contact",
        "parent_header": [
          "RegCloser"
        ],
        "type": "Text_excerpt",
        "value": "Please contact <cao.shenghao@foxmail.com> for any questions.\n"
      },
      "source": "https://raw.githubusercontent.com/csh3/RegCloser/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-05-12T02:26:33Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-28T14:24:29Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RegCloser is a genome gap-closing tool based on the robust regression approach, which is conceptually applicable to de novo assembly of NGS and TGS data."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "1. Introduction",
        "parent_header": [
          "RegCloser"
        ],
        "type": "Text_excerpt",
        "value": "The novel robust regression framework proposed in RegCloser is a general approach to DNA sequence assembly. It is applicable to both NGS and TGS data. In combination with any scaffolding methods, it can be used as a genome gap-closing tool. In the OLC paradigm of *de novo* assembly, the existing methods find a layout of reads by greedy search. In contrast, the robust regression approach generates a globally optimal layout, which is the minimizer of a convex loss function.\n\nRegCloser can currently be used or tested in the following scenarios:\n\n* Improve genome N50 by NGS libraries (a small genome example is in `test/S.aureus_data`), and is scalable to large genomes.\n* Reconstruct complete and accurate microbial genomes by low-cost and accurate NGS data (an example is in `test/E.coli_simulation`).\n* Generate a globally optimal layout in the *de novo* assembly of TGS data (an example is in `test/E.coli_long_reads`).\n\nP.S. We tested the applicability of the robust regression approach to layout generation on TGS long reads in denovo assembly. A further complication than the gap-filling problem is that, from which strand each read comes from the target genomic DNA is unknown. Therefore, we first use a heuristic algorithm to orientate all reads in the connected graph, and then estimate their positions via robust regression. \n"
      },
      "source": "https://raw.githubusercontent.com/csh3/RegCloser/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9515157979651687,
      "result": {
        "original_header": "5. Current version",
        "type": "Text_excerpt",
        "value": "The version of the current release is v1.0. \n"
      },
      "source": "https://raw.githubusercontent.com/csh3/RegCloser/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9345562899429235,
      "result": {
        "type": "Text_excerpt",
        "value": "Copyright \u00a9 2023, Shenghao Cao, Mengtian Li & Lei M. Li. Academy of Mathematics and Systems Science, Chinese Academy of Sciences, Beijing 100190, China \n"
      },
      "source": "https://raw.githubusercontent.com/csh3/RegCloser/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/csh3/RegCloser/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/csh3/RegCloser/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "csh3/RegCloser"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RegCloser"
      },
      "source": "https://raw.githubusercontent.com/csh3/RegCloser/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/csh3/RegCloser/main/recipe/build.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Installation",
        "parent_header": [
          "RegCloser"
        ],
        "type": "Text_excerpt",
        "value": "You can download the software package by the command:\n\n```\ngit clone https://github.com/csh3/RegCloser.git\n```\n\nor click the **Download Zip** button and decompress the software package.\n"
      },
      "source": "https://raw.githubusercontent.com/csh3/RegCloser/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9379105046946431,
      "result": {
        "original_header": "5. Current version",
        "type": "Text_excerpt",
        "value": "The version of the current release is v1.0. \n"
      },
      "source": "https://raw.githubusercontent.com/csh3/RegCloser/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/csh3/RegCloser/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "GNU General Public License v3.0",
        "spdx_id": "GPL-3.0",
        "type": "License",
        "url": "https://api.github.com/licenses/gpl-3.0",
        "value": "https://api.github.com/licenses/gpl-3.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "7. License",
        "parent_header": [
          "RegCloser"
        ],
        "type": "Text_excerpt",
        "value": "**GNU General Public License v3.0 only**\n\nFor details, please read `RegCloser/license.txt`.\n"
      },
      "source": "https://raw.githubusercontent.com/csh3/RegCloser/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RegCloser"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "csh3"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 754143,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Perl",
        "size": 170777,
        "type": "Programming_language",
        "value": "Perl"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 146045,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 7753,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 818,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/csh3/RegCloser/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "3. Dependencies",
        "parent_header": [
          "RegCloser"
        ],
        "type": "Text_excerpt",
        "value": "The current version requires:\n\n1. `Python3` with the following modules: \n`os`, `sys`, `re`, `argparse`, `biopython`, `numpy`, `math`, `networkx`, `scipy`, `collections`, `datetime`, `multiprocessing`\n\n2. `BWA (version 0.7.17)`\n3. `MultiAlignment_func_python.so`\n\nThe firt two can be installed through the [Bioconda](https://bioconda.github.io/) channel. The third one has been included in the software package or you can compile the source code `MultiAlignment_func_python.cpp` on your machine using the following command.\n\n```\ng++ -fPIC MultiAlignment_func_python.cpp -o MultiAlignment_func_python.so -shared -I/home/miniconda3/include/python3.6m \n# Here /home/miniconda3/include/python3.6m is a directory storing the head file Python.h\n```\n"
      },
      "source": "https://raw.githubusercontent.com/csh3/RegCloser/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4.2. Prerequisite file",
        "parent_header": [
          "RegCloser",
          "4. Usage"
        ],
        "type": "Text_excerpt",
        "value": "A prerequisite file is needed to specify the directory storing the sequence reads and the information of different libraries. An example is illustrated below.\n\n```\nReads_directory: /home/E.coli/reads\nfrag\t\tfrag_1.fastq\t\tfrag_2.fastq\t\t300     20     FR    1\nshortjump\tshortjump_1.fastq\tshortjump_2.fastq\t3600    298    RF    2\n```\nThe first line specifies the code path, and the second line specifies the reads directory. From the third line, each line describes one reads library and contains 7 columns, separated by spaces or tabs. Each column is explained in more detail below.\n\n```\nColumn 1: \tName of the library\n\t\tEach library should be designated a different name. \nColumn 2 & 3: \tFastq files for both ends\n\t\tFor each paired reads, one of the reads should be in the first file, and the other one in the second file. The paired reads are required to be on the same line.\nColumn 4:\tAverage insert size between paired reads\nColumn 5: \tStandard deviation of insert size between paired reads\nColumn 6: \tOrientation of paired reads, FR or RF\n\t\tF stands for --> orientation, and R for <-- orientation. Paired-end libraries are FR, and mate-pair libraries are RF.\nColumn 7: \tWhether the libary is used for local assembly or making tab files, 1, 2, or 3\n\t\t1 stands for only local assembly, 2 stands for only making tab files, and 3 for both.\n```\n"
      },
      "source": "https://raw.githubusercontent.com/csh3/RegCloser/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 00:55:16",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 12
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "4.1. Pipeline",
        "parent_header": [
          "RegCloser",
          "4. Usage"
        ],
        "type": "Text_excerpt",
        "value": "The main program is `RunPipeline.py`, and the pipeline consists of the following 7 modules. You can start or end with any one module by the option `-s` or `-e`. The core innovation of our method lies in the module `LocalAssembly` that uses the robust regression model and algorithm to assemble short reads into contigs.\n\n```\n1. InitialContig\t\tBreak the draft genome into contigs\n2. Mapping \t\t    \tMap sequence reads to the draft genome using BWA and identify anchored reads\n3. HighDepth (optional)\t\tIdentify high depth regions in the contig ends\n4. CollectReads\t\t\tCollect reads in the gap regions for local assembly and make tab files of linking information between contigs \t\n5. Re-Scaffold (optional) \tGenerate new scaffolds from initial contigs using SSPACE_Standard_v3.0\n6. ReEstimateGapSize\t\tRe-estimate gap sizes between contigs\n7. LocalAssembly \t\tAssemble the collected reads into contigs for gap closing via the robust regression approach\n```\n\nWe recommend to use *RegCloser* in an iterative way that you can take the output genome as the input of the next iteration, and perform several times until no more gaps to be filled.\n"
      },
      "source": "https://raw.githubusercontent.com/csh3/RegCloser/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4.3. Basic usage",
        "parent_header": [
          "RegCloser",
          "4. Usage"
        ],
        "type": "Text_excerpt",
        "value": "Run with 40 threads\n\n```\npython RunPipeline.py -p prerequisite -g draft_genome.fasta -d iter-1 -t 40\n```\n\nRe-run the *LocalAssembly* module\n\n```\npython RunPipeline.py -p prerequisite -g draft_genome.fasta -d iter-1 -t 40 -s LocalAssembly\n```\n\nIterate over the result of *RegCloser*\n\n```\npython RunPipeline.py -p prerequisite -g iter-1/output_genome.fasta -d iter-2 -t 40\n```\n"
      },
      "source": "https://raw.githubusercontent.com/csh3/RegCloser/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4.4. Output files",
        "parent_header": [
          "RegCloser",
          "4. Usage"
        ],
        "type": "Text_excerpt",
        "value": "The intermediate and output files are saved under the directory specified by the option `-d`. *RegCloser* outputs 4 result files. They are described in details below.\n\n**output_genome.fasta** saves the output genome sequence with gaps closed by *RegCloser*. You can specify the filename using option `-o` according to your preference.\n\n**gapSequence.fastq** saves the assembled sequences in the gap regions and their Phred quality scores (ASCII_BASE 33). The identifier of each sequence records the gap it comes from. For example, *@contig1\\_contig2\\_filled* means the sequence filled the gap between *contig1* and contig2; *@contig2\\_contig3\\_left* means the sequence extended from the left boundary of the gap between *contig2* and *contig3*; *@contig3\\_contig4\\_right* means the sequence extended from the right boundary of the gap between *contig3* and *contig4*.\n \n**evidence.fill** records the information of the gaps in the output genome. Each line describes one gap and contains 6 columns.\n \n```\nColumn 1: \tLeft contig of a gap\nColumn 2:   \tRight contig of a gap\nColumn 3 & 4:\tLength of sequences extending from the left and right boundaries of a gap\n\t\tIf the gap was filled, column 4 is 0, and column 3 is the length of the filling sequence.\n\t\tIf column 3 is a negative value, it means the two adjacent contigs flanking the gap were merged, and column 3 tells the overlap length.\nColumn 5: \tStatus of a gap, 0 or 1\n\t\tIf the gap was filled, the flag was set to 1, otherwise 0.\nColumn 6: \tCurrent gap size \n\t\tIf the gap was filled, the value is 0.\n```\n \n **statistics.txt** records the statistics of the genome sequence after gap closing. It includes `closed gap number`, classified into `merged gap number` and `filled gap number`. It also includes `total contig length`, `contig N50`, and `scaffold N50`.\n"
      },
      "source": "https://raw.githubusercontent.com/csh3/RegCloser/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "4.5. Command line options",
        "parent_header": [
          "RegCloser",
          "4. Usage"
        ],
        "type": "Text_excerpt",
        "value": "|      Option     | Type  | Description |\n| :----------: | :-------------: | :------------------ |\n|    <code><b>-p</b></code>  | <i><font size=2>STR</font></i> | A formatted file specifying the code path, reads directory, and library information. [Prerequisite]|\n|    <code><b>-g</b></code>  | <i><font size=2>STR</font></i> | Draft genome, required. |\n|    <code><b>-d</b></code>  | <i><font size=2>STR</font></i> | Working directory saving intermediate and output files, required.|\n|    <code><b>-o</b></code>  | <i><font size=2>STR</font></i> | Output file saving gap-closed genome. [output_genome.fasta] |\n|    <code><b>-t</b></code>  | <i><font size=2>INT</font></i> | Number of threads. [1] |\n|    <code><b>-s</b></code>  | <i><font size=2>STR</font></i> | Starting module. [Start] |\n|    <code><b>-e</b></code>  | <i><font size=2>STR</font></i> | Ending module. [End] |\n|    <code><b>-rs</b></code>  | | Re-scaffold using SSPACE. [null] |\n|    <code><b>-f</b></code>  | <i><font size=2>INT</font></i> | Contigs shorter than this value will be removed from the draft genome before gap closing. [0] |\n|    <code><b>-ml</b></code>  | <i><font size=2>INT</font></i> | Contig end with insert size + ml * std bases were cut out for mapping anchored reads. [3] |\n|    <code><b>-mk</b></code>  | <i><font size=2>INT</font></i> | Minimum seed length in BWA mapping. [19] |\n|    <code><b>-mT</b></code>  | <i><font size=2>INT</font></i> | Minimum score to output in BWA mapping. [30] |\n|    <code><b>-c</b></code>  | <i><font size=2>INT</font></i> | Maximum number of soft-clipped bases on either end of a mapped read. [5] |\n|    <code><b>-mq</b></code>  | <i><font size=2>INT</font></i> | Mapped Reads with mapping quality greater than this value will be identified as anchored reads. [60] |\n|    <code><b>-nr</b></code>  | | Not re-map anchored reads to the whole draft genome to exclude multi-mapped reads. [null] |\n|    <code><b>-hf</b></code>  |  | Filter out anchored reads falling in the high coverage regions. [null] |\n|    <code><b>-ra</b></code>  | <i><font size=2>FLOAT</font></i> | Consecutive bases with coverage higher then ra * mode coverage will be marked as high coverage regions. [1.8] |\n|    <code><b>-k</b></code>  | <i><font size=2>INT</font></i> | Minimum number of links to compute scaffold in SSPACE. [5] |\n|    <code><b>-a</b></code>  | <i><font size=2>FLOAT</font></i> | Maximum link ratio between two best contig pairs in SSPACE. [0.7] |\n|    <code><b>-sd</b></code>  | <i><font size=2>INT</font></i> | Default standard deviation of gap size. [100] |\n|    <code><b>-qc</b></code>  | <i><font size=2>FLOAT</font></i> | Maximum expected erroneous bases in the read used for local assembly. [100] |\n|    <code><b>-l</b></code>  | <i><font size=2>INT</font></i> | Length of the contig end sequence cut out for local assembly. [100] |\n|    <code><b>-rc</b></code>  | <i><font size=2>INT</font></i> | Coverage of reads used for local assembly. [100] |\n|    <code><b>-S</b></code>  | <i><font size=2>FLOAT</font></i> | Threshold for selective pairwise alignment. [0.3] |\n|    <code><b>-ma</b></code>  | <i><font size=2>INT</font></i> | Matching score in reads pairwise alignment. [1] |\n|    <code><b>-mm</b></code>  | <i><font size=2>INT</font></i> | Mismatch penalty in reads pairwise alignment. [20] |\n|    <code><b>-gc</b></code>  | <i><font size=2>INT</font></i> | Gap cost in reads pairwise alignment. [30] |\n|    <code><b>-ms</b></code>  | <i><font size=2>INT</font></i> | Minimum score to output in reads pairwise alignment. [20] |\n|    <code><b>-ho</b></code>  | <i><font size=2>INT</font></i> | Maximum admissible hanging-out length in reads pairwise alignment. [0] |\n|    <code><b>-w</b></code>  | | Assign initial weights for detected overlaps. [null] |\n|    <code><b>-r1 </b></code>  | <i><font size=2>FLOAT</font></i> | Tuning constant of weight function in IRLS algorithm. [2] |\n|    <code><b>-r2 </b></code>  | <i><font size=2>FLOAT</font></i> | Excluding samples with residuals greater than this value after IRLS algorithm. [10] |\n|    <code><b>-mT</b></code>  | <i><font size=2>INT</font></i> | Maximum truncated length for alignment merging adjacent contigs. [1000] |\n|    <code><b>-mA</b></code>  | <i><font size=2>INT</font></i> | Matching score in alignment merging adjacent contigs. [1] |\n|    <code><b>-mM</b></code>  | <i><font size=2>INT</font></i> | Mismatch penalty in alignment merging adjacent contigs. [2] |\n|    <code><b>-mG</b></code>  | <i><font size=2>INT</font></i> | Gap cost in alignment merging adjacent contigs. [3] |\n|    <code><b>-mS</b></code>  | <i><font size=2>INT</font></i> | Minimum alignment score to merge adjacent contigs. [20] |\n|    <code><b>-HO</b></code>  | <i><font size=2>INT</font></i> | Maximum admissible hanging-out length in alignment merging adjacent contigs. [5] |\n\n"
      },
      "source": "https://raw.githubusercontent.com/csh3/RegCloser/main/README.md",
      "technique": "header_analysis"
    }
  ]
}