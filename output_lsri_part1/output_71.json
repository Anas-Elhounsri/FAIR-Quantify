{
  "application_domain": [
    {
      "confidence": 7.51,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "References",
        "parent_header": [
          "SAN"
        ],
        "type": "Text_excerpt",
        "value": "> Zhang, R., Chen, L., Oliver, L. D., Voineskos, A. N., Park, J. Y. (2024). SAN: mitigating spatial covariance heterogeneity in cortical thickness data collected from multiple scanners or sites. Human Brain Mapping [link](https://doi.org/10.1002/hbm.26692)\n"
      },
      "source": "https://raw.githubusercontent.com/junjypark/SAN/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/junjypark/SAN"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-11-27T18:09:36Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-09T21:04:22Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Spatial autocorrelation normalization"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9681972630470916,
      "result": {
        "original_header": "Background",
        "type": "Text_excerpt",
        "value": "SAN supports harmonizing vertex-level neuroimaging data (e.g., cortical thickness) collected from multiple sites and/or scanners. By using a distance matrix to model covariance heterogeneity probabilistically, SAN provides promising harmonization performance than other methods. \n"
      },
      "source": "https://raw.githubusercontent.com/junjypark/SAN/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.962628245131132,
      "result": {
        "original_header": "Distance matrix",
        "type": "Text_excerpt",
        "value": "We recommend using geodesic distance for mesh surfaces. You may use [Python](https://pypi.org/project/pygeodesic/) or [C++](https://code.google.com/archive/p/geodesic/wikis/ExactGeodesic.wiki) to obtain a pairwise geodesic distance matrix. \nIt requires the extraction of `vertices` and `faces` matrices. The `vertices` matrix contains the 3D coordinate for each vertex, and each row of the `faces` matrix contains the indices of three vertices that construct a triangle in the mesh surface. In Freesurfer, the surface file (e.g. `lh.pial` (recommended) or `lh.inflated`) can be used to extract vertices and faces (see `read.fs.surface()` in the freesurferformats R package). Once you load `vertices` and `faces`, the following manipulation is necessary due to the difference between R and Python.\n```R\nsurf$faces = surf$faces-1\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/junjypark/SAN/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9325158009129156,
      "result": {
        "original_header": "CASH score",
        "type": "Text_excerpt",
        "value": "\nCASH score can be used to quantify local covariance heterogeneity of the raw imaging data. It can be implemented using `CASH()` function provided in this package. \n"
      },
      "source": "https://raw.githubusercontent.com/junjypark/SAN/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/junjypark/SAN/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/junjypark/SAN/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "junjypark/SAN"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SAN"
      },
      "source": "https://raw.githubusercontent.com/junjypark/SAN/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/junjypark/SAN/main/readme_images/CASH_map.jpg"
      },
      "source": "https://raw.githubusercontent.com/junjypark/SAN/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "SAN",
          "Contents"
        ],
        "type": "Text_excerpt",
        "value": "To install the latest development builds directly from GitHub, please run the followings:\n\n```R\nif (!require(\"devtools\"))\n  install.packages(\"devtools\")\ndevtools::install_github(\"junjypark/SAN\")\n```\n\n<div id='id-distance'/>\n\n<div id='id-san'/>\n\n---\n"
      },
      "source": "https://raw.githubusercontent.com/junjypark/SAN/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9294289518968697,
      "result": {
        "original_header": "Background",
        "type": "Text_excerpt",
        "value": "\n<div id='id-installation'/> \n"
      },
      "source": "https://raw.githubusercontent.com/junjypark/SAN/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/junjypark/SAN/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2023 Jun Young Park\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/junjypark/SAN/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SAN"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "junjypark"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 22250,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/junjypark/SAN/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:10:50",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "SAN",
          "Contents"
        ],
        "type": "Text_excerpt",
        "value": "`SAN()` is the main function that takes (almost)  the same input names as [neuroCombat](https://github.com/Jfortin1/neuroCombat_Rpackage). Specifically, the following need to be provided.\n\n* `dat`: a (p x n) data matrix, where p is the number of features and n is the number of subjects (required)\n* `batch`: Batch variable for the scanner id (required)\n* `mod`: a (n x q) matrix containing biological covariates (optional). This can be obtained by using `model.matrix()` function in R. However, when you use `mod` in SAN, ensure your covariate of interest (for hypothesis testing) is excluded. In practice, SAN preserves covariate effects well even though it is not specified as an input.\n* `distMat`: a (p x p) matrix containing pairwise distance information. The diagonal entrys should have 0 values.\n\n\n\nNow, the `SAN` can be applied to obtain the harmonized data.\n\n```R\nfit = SAN(dat=dat, batch=batch, mod=mod, distMat=distMat)\n``` \n\n---\n"
      },
      "source": "https://raw.githubusercontent.com/junjypark/SAN/main/README.md",
      "technique": "header_analysis"
    }
  ]
}