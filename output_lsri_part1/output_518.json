{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Cite us",
        "type": "Text_excerpt",
        "value": "Our paper is published in ***Briefings in Bioinformatics*** and is available [here](https://doi.org/10.1093/bib/bbad260).\n```txt\n@article{10.1093/bib/bbad260,\n    author = {Blampey, Quentin and Bercovici, Nad\u00e8ge and Dutertre, Charles-Antoine and Pic, Isabelle and Ribeiro, Joana Mourato and Andr\u00e9, Fabrice and Courn\u00e8de, Paul-Henry},\n    title = \"{A biology-driven deep generative model for cell-type annotation in cytometry}\",\n    journal = {Briefings in Bioinformatics},\n    pages = {bbad260},\n    year = {2023},\n    month = {07},\n    issn = {1477-4054},\n    doi = {10.1093/bib/bbad260},\n    url = {https://doi.org/10.1093/bib/bbad260},\n    eprint = {https://academic.oup.com/bib/advance-article-pdf/doi/10.1093/bib/bbad260/50973199/bbad260.pdf},\n}\n\n```\n"
      },
      "source": "https://raw.githubusercontent.com/MICS-Lab/scyan/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "author": "Blampey, Quentin and Bercovici, Nad\u00e8ge and Dutertre, Charles-Antoine and Pic, Isabelle and Ribeiro, Joana Mourato and Andr\u00e9, Fabrice and Courn\u00e8de, Paul-Henry",
        "doi": "10.1093/bib/bbad260",
        "format": "bibtex",
        "title": "{A biology-driven deep generative model for cell-type annotation in cytometry}",
        "type": "Text_excerpt",
        "url": "https://doi.org/10.1093/bib/bbad260",
        "value": "@article{10.1093/bib/bbad260,\n    eprint = {https://academic.oup.com/bib/advance-article-pdf/doi/10.1093/bib/bbad260/50973199/bbad260.pdf},\n    url = {https://doi.org/10.1093/bib/bbad260},\n    doi = {10.1093/bib/bbad260},\n    issn = {1477-4054},\n    month = {07},\n    year = {2023},\n    pages = {bbad260},\n    journal = {Briefings in Bioinformatics},\n    title = {{A biology-driven deep generative model for cell-type annotation in cytometry}},\n    author = {Blampey, Quentin and Bercovici, Nad\u00e8ge and Dutertre, Charles-Antoine and Pic, Isabelle and Ribeiro, Joana Mourato and Andr\u00e9, Fabrice and Courn\u00e8de, Paul-Henry},\n}"
      },
      "source": "https://raw.githubusercontent.com/MICS-Lab/scyan/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/MICS-Lab/scyan"
      },
      "technique": "GitHub_API"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "# Contributing to Scyan\n\nContributions are welcome as we aim to continue improving the library. For instance, you can contribute by:\n\n- Reporting a bug\n- Reporting some difficulties in using the library\n- Discussing the current state of the code\n- Submitting a fix\n- Proposing new features\n\n## Opening an issue\n\nIf you have difficulty installing the library, if you discovered a bug, or need a new feature, then you can **open an issue**.\nWe will try to discuss it with you and resolve your issue as soon as possible.\nEspecially if you have any questions about the usage of the library or difficulties having satisfying results, don't hesitate to ask.\n\n## Contributing to the code\n\n1. Install the library in editable mode (see [Getting Started](https://mics-lab.github.io/scyan/getting_started/)). Using `poetry` is recommended.\n2. Create your personal branch from `dev`.\n3. Make sure you read the coding guidelines below.\n4. Implement your changes.\n5. Run the tests via `pytest` (or `poetry run pytest`).\n6. If needed, you can update the documentation. To do so, update the files in `./docs/` and run `mkdocs serve` (or `poetry run mkdocs serve`) to see your changes.\n7. Create a pull request with explanations about your developed features. Then, wait for discussion and validation of your pull request.\n\n## Coding guidelines\n\n- Use the `black` formatter and `isort`. Their usage should be automatic as they are in the `pyproject.toml` file. Depending on your IDE, you can choose to format your code on save.\n- Follow the [PEP8](https://peps.python.org/pep-0008/) style guide. In particular, use snake_case notations (and PascalCase for classes).\n- Provide meaningful names to all your variables and functions.\n- Use relative imports to `scyan`.\n- Document your functions and type your function inputs/outputs.\n- Create your functions in the intended file, or create one if needed. See the project layout.\n- Try as much as possible to follow the same coding style as the rest of the library.\n\n## Project layout\n\nThis layout helps understanding the structure of the repository.\n\n    .github/      # Github CI and templates\n    config/       # Hydra configuration folder (optional use)\n    data/         # Data folder containing adata files and csv tables\n    docs/         # The folder used to build the documentation\n    scripts/      # Scripts to reproduce the results from the article\n    tests/        # Folder containing tests\n    scyan/                    # Library source code\n        data/                 # Folder with data-related functions and classes\n            datasets.py       # Load and save datasets\n            tensors.py        # Pytorch data-related classes for training\n        module/               # Folder containing neural network modules\n            coupling_layer.py # Coupling layer\n            distribution.py   # Prior distribution (called U in the article)\n            real_nvp.py       # Normalizing Flow\n            scyan_module      # Core module\n        plot/                 # Plots\n            ...\n        tools/\n            ...               # Tools (umap, subclustering, ...)\n        model.py              # Scyan model class\n        _io.py                # Input / output functions\n        preprocess.py         # Preprocessing functions\n        utils.py              # Misc functions\n    .gitattributes\n    .gitignore\n    CONTRIBUTING.md   # To read before contributing\n    LICENSE\n    mkdocs.yml        # The docs configuration file\n    poetry.lock\n    pyproject.toml    # Dependencies, project metadata, and more\n    README.md\n    setup.py          # Setup file, see `pyproject.toml`\n"
      },
      "source": "https://raw.githubusercontent.com/MICS-Lab/scyan/master/CONTRIBUTING.md",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Install locally (if you want to contribute)",
        "parent_header": [
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "> Advice (optional): We advise creating a new environment via a package manager (except if you use Poetry, which will automatically create the environment). For instance, you can create a new `conda` environment:\n>\n> ```bash\n> conda create --name scyan python=3.9\n> conda activate scyan\n> ```\n\nClone the repository and move to its root:\n\n```bash\ngit clone https://github.com/MICS-Lab/scyan.git\ncd scyan\n```\n\nChoose one of the following, depending on your needs (it should take at most a few minutes):\n\n```bash\npip install .                            # pip minimal installation (library only)\npip install -e .                         # pip installation in editable mode\npip install -e '.[dev,hydra,discovery]'  # pip installation with all the extras\npoetry install -E 'dev hydra discovery'  # poetry installation with all the extras\n```\n"
      },
      "source": "https://raw.githubusercontent.com/MICS-Lab/scyan/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-07-20T16:03:45Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-26T16:37:11Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Biology-driven deep generative model for cell-type annotation in cytometry. Scyan is an interpretable model that also corrects batch-effect and can be used for debarcoding or population discovery."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Technical description",
        "type": "Text_excerpt",
        "value": "Scyan is a **Python** library based on:\n\n- [_AnnData_](https://anndata.readthedocs.io/en/latest/), a data library that works nicely with single-cell data\n- [_Pytorch_](https://pytorch.org/), a deep learning framework\n- [_Pytorch Lightning_](https://www.pytorchlightning.ai/), for model training\n\nOptionally, it also supports:\n- [_Hydra_](https://hydra.cc/docs/intro/), for project configuration\n- [_Weight & Biases_](https://wandb.ai/site), for model monitoring\n"
      },
      "source": "https://raw.githubusercontent.com/MICS-Lab/scyan/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9969315351376058,
      "result": {
        "original_header": "Overview",
        "type": "Text_excerpt",
        "value": "Scyan is a Bayesian probabilistic model composed of a deep invertible neural network called a normalizing flow (the function $f_{\\phi}$). It maps a latent distribution of cell expressions into the empirical distribution of cell expressions. This cell distribution is a mixture of gaussian-like distributions representing the sum of a cell-specific and a population-specific term. Also, interpretability and batch effect correction are based on the model latent space \u2014 more details in the article's Methods section. \n"
      },
      "source": "https://raw.githubusercontent.com/MICS-Lab/scyan/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9866327457216948,
      "result": {
        "type": "Text_excerpt",
        "value": "Scyan stands for **S**ingle-cell **Cy**tometry **A**nnotation **N**etwork. Based on biological knowledge prior, it provides a fast cell population annotation without requiring any training label. Scyan is an interpretable model that also corrects batch-effect and can be used for debarcoding, cell sampling, and population discovery. \n"
      },
      "source": "https://raw.githubusercontent.com/MICS-Lab/scyan/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/MICS-Lab/scyan/tree/master/docs"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Documentation",
        "type": "Text_excerpt",
        "value": "The [complete documentation can be found here](https://mics-lab.github.io/scyan/). It contains installation guidelines, tutorials, a description of the API, etc.\n"
      },
      "source": "https://raw.githubusercontent.com/MICS-Lab/scyan/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/MICS-Lab/scyan/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MICS-Lab/scyan/master/docs/tutorials/debarcoding.ipynb"
      },
      "source": "https://raw.githubusercontent.com/MICS-Lab/scyan/master/docs/tutorials/debarcoding.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MICS-Lab/scyan/master/docs/tutorials/population_discovery.ipynb"
      },
      "source": "https://raw.githubusercontent.com/MICS-Lab/scyan/master/docs/tutorials/population_discovery.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MICS-Lab/scyan/master/docs/tutorials/batch_effect_correction.ipynb"
      },
      "source": "https://raw.githubusercontent.com/MICS-Lab/scyan/master/docs/tutorials/batch_effect_correction.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MICS-Lab/scyan/master/docs/tutorials/usage.ipynb"
      },
      "source": "https://raw.githubusercontent.com/MICS-Lab/scyan/master/docs/tutorials/usage.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MICS-Lab/scyan/master/docs/tutorials/preprocessing.ipynb"
      },
      "source": "https://raw.githubusercontent.com/MICS-Lab/scyan/master/docs/tutorials/preprocessing.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/MICS-Lab/scyan/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "MICS-Lab/scyan"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Documentation"
      },
      "source": "https://raw.githubusercontent.com/MICS-Lab/scyan/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/MICS-Lab/scyan/raw/master/docs/assets/overview.png"
      },
      "source": "https://raw.githubusercontent.com/MICS-Lab/scyan/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Install from PyPI (recommended)",
        "parent_header": [
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "```bash\npip install scyan\n```\n"
      },
      "source": "https://raw.githubusercontent.com/MICS-Lab/scyan/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Install locally (if you want to contribute)",
        "parent_header": [
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "> Advice (optional): We advise creating a new environment via a package manager (except if you use Poetry, which will automatically create the environment). For instance, you can create a new `conda` environment:\n>\n> ```bash\n> conda create --name scyan python=3.9\n> conda activate scyan\n> ```\n\nClone the repository and move to its root:\n\n```bash\ngit clone https://github.com/MICS-Lab/scyan.git\ncd scyan\n```\n\nChoose one of the following, depending on your needs (it should take at most a few minutes):\n\n```bash\npip install .                            # pip minimal installation (library only)\npip install -e .                         # pip installation in editable mode\npip install -e '.[dev,hydra,discovery]'  # pip installation with all the extras\npoetry install -E 'dev hydra discovery'  # poetry installation with all the extras\n```\n"
      },
      "source": "https://raw.githubusercontent.com/MICS-Lab/scyan/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9998412550230694,
      "result": {
        "original_header": "Overview",
        "type": "Text_excerpt",
        "value": "<p align=\"center\">\n  <img src=\"https://github.com/MICS-Lab/scyan/raw/master/docs/assets/overview.png\" alt=\"overview_image\"/>\n</p>\n \n"
      },
      "source": "https://raw.githubusercontent.com/MICS-Lab/scyan/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/MICS-Lab/scyan/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "cytometry, deep-learning, generative-model, normalizing-flows, single-cell-omics"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "BSD 3-Clause \"New\" or \"Revised\" License",
        "spdx_id": "BSD-3-Clause",
        "type": "License",
        "url": "https://api.github.com/licenses/bsd-3-clause",
        "value": "https://api.github.com/licenses/bsd-3-clause"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "BSD 3-Clause License\n\nCopyright (c) 2022, Blampey Quentin\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
      },
      "source": "https://raw.githubusercontent.com/MICS-Lab/scyan/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/MICS-Lab/scyan/raw/master/docs/assets/logo.png"
      },
      "source": "https://raw.githubusercontent.com/MICS-Lab/scyan/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "scyan"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "MICS-Lab"
      },
      "technique": "GitHub_API"
    }
  ],
  "package_distribution": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://pypi.org/project/scyan/"
      },
      "source": "https://raw.githubusercontent.com/MICS-Lab/scyan/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 201252,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/MICS-Lab/scyan/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://anndata.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/MICS-Lab/scyan/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "quentinblampey",
          "type": "User"
        },
        "date_created": "2024-05-22T15:31:48Z",
        "date_published": "2024-05-22T15:47:52Z",
        "description": "## [1.6.2] - 2024-05-22\r\n\r\nHotfix: use get_cmap from matplotlib.pyplot (#35)",
        "html_url": "https://github.com/MICS-Lab/scyan/releases/tag/v1.6.2",
        "name": "v1.6.2",
        "release_id": 156916435,
        "tag": "v1.6.2",
        "tarball_url": "https://api.github.com/repos/MICS-Lab/scyan/tarball/v1.6.2",
        "type": "Release",
        "url": "https://api.github.com/repos/MICS-Lab/scyan/releases/156916435",
        "value": "https://api.github.com/repos/MICS-Lab/scyan/releases/156916435",
        "zipball_url": "https://api.github.com/repos/MICS-Lab/scyan/zipball/v1.6.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "quentinblampey",
          "type": "User"
        },
        "date_created": "2024-04-08T13:36:12Z",
        "date_published": "2024-04-08T13:20:28Z",
        "description": "## [1.6.1] - 2024-04-08\r\n\r\n### Changed\r\n- More dependencies version support\r\n- Use `\"cpu\"` accelerator by default\r\n\r\n### Added\r\n- Spillover matrix reading + function to apply it in `scyan.preprocess`\r\n\r\n### Fixed\r\n- Issue when running `.predict` after training on GPU (#34)\r\n",
        "html_url": "https://github.com/MICS-Lab/scyan/releases/tag/v1.6.1",
        "name": "v1.6.1",
        "release_id": 150219619,
        "tag": "v1.6.1",
        "tarball_url": "https://api.github.com/repos/MICS-Lab/scyan/tarball/v1.6.1",
        "type": "Release",
        "url": "https://api.github.com/repos/MICS-Lab/scyan/releases/150219619",
        "value": "https://api.github.com/repos/MICS-Lab/scyan/releases/150219619",
        "zipball_url": "https://api.github.com/repos/MICS-Lab/scyan/zipball/v1.6.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "quentinblampey",
          "type": "User"
        },
        "date_created": "2023-11-21T10:56:18Z",
        "date_published": "2023-11-21T10:58:05Z",
        "description": "- Fix GPU usage",
        "html_url": "https://github.com/MICS-Lab/scyan/releases/tag/v1.5.3",
        "name": "v1.5.3",
        "release_id": 130639891,
        "tag": "v1.5.3",
        "tarball_url": "https://api.github.com/repos/MICS-Lab/scyan/tarball/v1.5.3",
        "type": "Release",
        "url": "https://api.github.com/repos/MICS-Lab/scyan/releases/130639891",
        "value": "https://api.github.com/repos/MICS-Lab/scyan/releases/130639891",
        "zipball_url": "https://api.github.com/repos/MICS-Lab/scyan/zipball/v1.5.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "quentinblampey",
          "type": "User"
        },
        "date_created": "2023-11-06T12:04:00Z",
        "date_published": "2023-11-06T12:06:42Z",
        "description": "Enable GPU usage",
        "html_url": "https://github.com/MICS-Lab/scyan/releases/tag/v1.5.2",
        "name": "v1.5.2",
        "release_id": 128123779,
        "tag": "v1.5.2",
        "tarball_url": "https://api.github.com/repos/MICS-Lab/scyan/tarball/v1.5.2",
        "type": "Release",
        "url": "https://api.github.com/repos/MICS-Lab/scyan/releases/128123779",
        "value": "https://api.github.com/repos/MICS-Lab/scyan/releases/128123779",
        "zipball_url": "https://api.github.com/repos/MICS-Lab/scyan/zipball/v1.5.2"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "quentinblampey",
          "type": "User"
        },
        "date_created": "2023-09-25T13:32:57Z",
        "date_published": "2023-09-25T13:36:02Z",
        "description": "# Fixes\r\n- Model can be trained when `adata.n_obs < batch_size`\r\n\r\n# Features\r\n- `scyan.tools.PolygonGatingScatter` to select cells on a 2D-scatterplot\r\n- `scyan.tools.leiden` (leiden clustering, as in `scanpy`)",
        "html_url": "https://github.com/MICS-Lab/scyan/releases/tag/v1.5.1",
        "name": "v1.5.1",
        "release_id": 122449430,
        "tag": "v1.5.1",
        "tarball_url": "https://api.github.com/repos/MICS-Lab/scyan/tarball/v1.5.1",
        "type": "Release",
        "url": "https://api.github.com/repos/MICS-Lab/scyan/releases/122449430",
        "value": "https://api.github.com/repos/MICS-Lab/scyan/releases/122449430",
        "zipball_url": "https://api.github.com/repos/MICS-Lab/scyan/zipball/v1.5.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "quentinblampey",
          "type": "User"
        },
        "date_created": "2023-07-27T13:37:56Z",
        "date_published": "2023-07-27T13:54:29Z",
        "description": "- new plots (pop dynamics and percentage)\r\n- major documentation update\r\n- update the \"cite us\" with the link to the published paper",
        "html_url": "https://github.com/MICS-Lab/scyan/releases/tag/v1.5.0",
        "name": "v1.5.0",
        "release_id": 113832562,
        "tag": "v1.5.0",
        "tarball_url": "https://api.github.com/repos/MICS-Lab/scyan/tarball/v1.5.0",
        "type": "Release",
        "url": "https://api.github.com/repos/MICS-Lab/scyan/releases/113832562",
        "value": "https://api.github.com/repos/MICS-Lab/scyan/releases/113832562",
        "zipball_url": "https://api.github.com/repos/MICS-Lab/scyan/zipball/v1.5.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "quentinblampey",
          "type": "User"
        },
        "date_created": "2023-03-17T08:10:30Z",
        "date_published": "2023-03-17T08:16:35Z",
        "description": "- Batch effect correction: handle NA markers (column full of NA)\r\n- Input/Output : new API design\r\n- Handle expression continuums (new scyan.Scyan argument)\r\n- Improved documentation\r\n- Less dependencies",
        "html_url": "https://github.com/MICS-Lab/scyan/releases/tag/v1.4.0",
        "name": "v1.4.0",
        "release_id": 95951081,
        "tag": "v1.4.0",
        "tarball_url": "https://api.github.com/repos/MICS-Lab/scyan/tarball/v1.4.0",
        "type": "Release",
        "url": "https://api.github.com/repos/MICS-Lab/scyan/releases/95951081",
        "value": "https://api.github.com/repos/MICS-Lab/scyan/releases/95951081",
        "zipball_url": "https://api.github.com/repos/MICS-Lab/scyan/zipball/v1.4.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "quentinblampey",
          "type": "User"
        },
        "date_created": "2023-02-08T08:01:26Z",
        "date_published": "2023-02-09T08:39:49Z",
        "description": "- Improved documentation\r\n- Model can be saved/loaded\r\n- Can select cells on UMAP (via a polygon selector)\r\n- New IO function: read_csv\r\n- Make block color palette for hierarchical populations\r\n- ... many others",
        "html_url": "https://github.com/MICS-Lab/scyan/releases/tag/v1.3.4",
        "name": "v1.3.4",
        "release_id": 91852231,
        "tag": "v1.3.4",
        "tarball_url": "https://api.github.com/repos/MICS-Lab/scyan/tarball/v1.3.4",
        "type": "Release",
        "url": "https://api.github.com/repos/MICS-Lab/scyan/releases/91852231",
        "value": "https://api.github.com/repos/MICS-Lab/scyan/releases/91852231",
        "zipball_url": "https://api.github.com/repos/MICS-Lab/scyan/zipball/v1.3.4"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "quentinblampey",
          "type": "User"
        },
        "date_created": "2022-11-08T13:27:27Z",
        "date_published": "2022-11-08T13:30:44Z",
        "html_url": "https://github.com/MICS-Lab/scyan/releases/tag/v1.2.0",
        "name": "v1.2.0",
        "release_id": 82389553,
        "tag": "v1.2.0",
        "tarball_url": "https://api.github.com/repos/MICS-Lab/scyan/tarball/v1.2.0",
        "type": "Release",
        "url": "https://api.github.com/repos/MICS-Lab/scyan/releases/82389553",
        "value": "https://api.github.com/repos/MICS-Lab/scyan/releases/82389553",
        "zipball_url": "https://api.github.com/repos/MICS-Lab/scyan/zipball/v1.2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "quentinblampey",
          "type": "User"
        },
        "date_created": "2022-09-02T12:59:37Z",
        "date_published": "2022-09-02T13:07:11Z",
        "description": "- Better performances\r\n- More plot tools\r\n- New tutorial\r\n- New analysis tools (MMI, counts, ...)",
        "html_url": "https://github.com/MICS-Lab/scyan/releases/tag/v1.1.1",
        "name": "v1.1.1",
        "release_id": 76147153,
        "tag": "v1.1.1",
        "tarball_url": "https://api.github.com/repos/MICS-Lab/scyan/tarball/v1.1.1",
        "type": "Release",
        "url": "https://api.github.com/repos/MICS-Lab/scyan/releases/76147153",
        "value": "https://api.github.com/repos/MICS-Lab/scyan/releases/76147153",
        "zipball_url": "https://api.github.com/repos/MICS-Lab/scyan/zipball/v1.1.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "quentinblampey",
          "type": "User"
        },
        "date_created": "2022-08-17T15:53:36Z",
        "date_published": "2022-08-17T16:11:30Z",
        "description": "Release version 1.1.0:\r\n- module `tools` added instead of `preprocess`\r\n- acceleration of some methods for large clusters (N > 10M)\r\n- adding umap methods (tools and plot)\r\n- can plot groups of cells (require CSV update)",
        "html_url": "https://github.com/MICS-Lab/scyan/releases/tag/v1.1.0",
        "name": "v1.1.0",
        "release_id": 74641836,
        "tag": "v1.1.0",
        "tarball_url": "https://api.github.com/repos/MICS-Lab/scyan/tarball/v1.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/MICS-Lab/scyan/releases/74641836",
        "value": "https://api.github.com/repos/MICS-Lab/scyan/releases/74641836",
        "zipball_url": "https://api.github.com/repos/MICS-Lab/scyan/zipball/v1.1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "quentinblampey",
          "type": "User"
        },
        "date_created": "2022-08-04T09:46:21Z",
        "date_published": "2022-08-04T10:02:34Z",
        "description": "Version 1.0.0\r\nFirst release (for Zenodo DOI creation).",
        "html_url": "https://github.com/MICS-Lab/scyan/releases/tag/v1.0.0",
        "name": "v1.0.0",
        "release_id": 73625438,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/MICS-Lab/scyan/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/MICS-Lab/scyan/releases/73625438",
        "value": "https://api.github.com/repos/MICS-Lab/scyan/releases/73625438",
        "zipball_url": "https://api.github.com/repos/MICS-Lab/scyan/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-04 01:03:48",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 33
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Getting started",
        "type": "Text_excerpt",
        "value": "Scyan can be installed on every OS with `pip` or [`poetry`](https://python-poetry.org/docs/).\n\nOn macOS / Linux, `python>=3.8,<3.11` is required, while `python>=3.8,<3.10` is required on Windows. The preferred Python version is `3.9`.\n"
      },
      "source": "https://raw.githubusercontent.com/MICS-Lab/scyan/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Basic usage / Demo",
        "parent_header": [
          "Getting started"
        ],
        "type": "Text_excerpt",
        "value": "```py\nimport scyan\n\nadata, table = scyan.data.load(\"aml\") # Automatic loading\n\nmodel = scyan.Scyan(adata, table)\nmodel.fit()\nmodel.predict()\n```\n\nThis code should run in approximately 40 seconds (once the dataset is loaded).\nFor more usage demo, read the [tutorials](https://mics-lab.github.io/scyan/tutorials/usage/) or the complete [documentation](https://mics-lab.github.io/scyan/).\n"
      },
      "source": "https://raw.githubusercontent.com/MICS-Lab/scyan/master/README.md",
      "technique": "header_analysis"
    }
  ]
}