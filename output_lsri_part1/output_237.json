{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/CompGenomeLab/boquila"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-01-05T13:08:38Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-25T14:34:41Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "NGS read simulator to eliminate read nucleotide bias in sequence analysis."
      },
      "technique": "GitHub_API"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/CompGenomeLab/boquila/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/CompGenomeLab/boquila/main/examples/plots.ipynb"
      },
      "source": "https://raw.githubusercontent.com/CompGenomeLab/boquila/main/examples/plots.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/CompGenomeLab/boquila/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "CompGenomeLab/boquila"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "boquila"
      },
      "source": "https://raw.githubusercontent.com/CompGenomeLab/boquila/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "boquila"
        ],
        "type": "Text_excerpt",
        "value": "1. boquila is available via [bioconda](https://bioconda.github.io) and can be easily installed via\n\n```bash\nconda install boquila -c bioconda\n```\n\nOr via Rust toolchain\n> Next two methods require Cargo the Rust package manager, which should be installed automatically while installing Rust\n\nboquila is written in Rust, so you'll need to grab a [Rust installation](https://www.rust-lang.org/) in order to install or compile it.\n\nThe current minimum Rust version is `1.55.0`\n\n2. Installing with `cargo`\n*Cargo will build and install the binary, by default to `$HOME/.cargo/bin/`*\n\n```\n$ cargo install --branch main --git https://github.com/CompGenomeLab/boquila.git boquila\n```\n\n3. Building from source\n*For convenience, you can copy the executable `./target/release/boquila` to some directory in your `PATH`.*\n\n    - Clone the repository\n        ```bash\n        git clone https://github.com/CompGenomeLab/boquila.git\n        ```\n    - Then build with `cargo`\n        ```bash\n        cd boquila\n        cargo build --release\n        ./target/release/boquila --version\n        0.6.1\n        ```\n"
      },
      "source": "https://raw.githubusercontent.com/CompGenomeLab/boquila/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/CompGenomeLab/boquila/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "boquila"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "CompGenomeLab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Rust",
        "size": 25778,
        "type": "Programming_language",
        "value": "Rust"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/CompGenomeLab/boquila/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "umieat",
          "type": "User"
        },
        "date_created": "2023-03-19T18:08:58Z",
        "date_published": "2023-03-19T18:16:43Z",
        "description": "* Added option for manually setting quality scores of simulated reads.",
        "html_url": "https://github.com/CompGenomeLab/boquila/releases/tag/v0.6.1-lw",
        "name": "v0.6.1",
        "release_id": 96118328,
        "tag": "v0.6.1-lw",
        "tarball_url": "https://api.github.com/repos/CompGenomeLab/boquila/tarball/v0.6.1-lw",
        "type": "Release",
        "url": "https://api.github.com/repos/CompGenomeLab/boquila/releases/96118328",
        "value": "https://api.github.com/repos/CompGenomeLab/boquila/releases/96118328",
        "zipball_url": "https://api.github.com/repos/CompGenomeLab/boquila/zipball/v0.6.1-lw"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "umieat",
          "type": "User"
        },
        "date_created": "2022-04-10T19:09:31Z",
        "date_published": "2022-04-10T19:28:13Z",
        "description": "**Full Changelog**: https://github.com/CompGenomeLab/boquila/commits/v0.6.0-lw",
        "html_url": "https://github.com/CompGenomeLab/boquila/releases/tag/v0.6.0-lw",
        "name": "v0.6.0",
        "release_id": 64060964,
        "tag": "v0.6.0-lw",
        "tarball_url": "https://api.github.com/repos/CompGenomeLab/boquila/tarball/v0.6.0-lw",
        "type": "Release",
        "url": "https://api.github.com/repos/CompGenomeLab/boquila/releases/64060964",
        "value": "https://api.github.com/repos/CompGenomeLab/boquila/releases/64060964",
        "zipball_url": "https://api.github.com/repos/CompGenomeLab/boquila/zipball/v0.6.0-lw"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:58:16",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "boquila"
        ],
        "type": "Text_excerpt",
        "value": "```\nboquila 0.6.1\n\nGenerate NGS reads with same nucleotide distribution as input file\nGenerated reads will be written to stdout\nBy default input and output format is FASTQ\n\nUSAGE:\n    boquila [FLAGS] [OPTIONS] <src>\n\nARGS:\n    <src>    Model file\n\nFLAGS:\n        --fasta         Change input and output format to FASTA\n        --setQual       Use given Quality score with parameter 'qual' for all simulated reads.\n    -h, --help          Print help information\n        --inseqFasta    Change the input sequencing format to FASTA\n    -V, --version       Print version information\n\nOPTIONS:\n        --bed <FILE>        File name in which the simulated reads will be saved in BED format\n        --inseq <FILE>      Input sequencing reads to be used instead of reference genome\n        --kmer <INT>        Kmer size to be used while calculating frequency [default: 1]\n        --ref <FILE>        Reference FASTA\n        --regions <FILE>    RON formatted file containing genomic regions that generated reads will\n                            be selected from\n        --seed <INT>        Random number seed. If not provided system's default source of entropy\n                            will be used instead.\n        --sens <INT>        Sensitivity of selected reads.\n                            If some positions are predominated by specific nucleotides, increasing\n                            this value can make simulated reads more similar to input reads.\n                            However runtime will also increase linearly.\n                            [possible values: 10-100] [default: 20]\n        --qual <QUAL>       Quality score to be applied to to each position for all reads.\n                            'setQual' flag should be present in order it to work\n                            Has no effect if input reads are not in FASTQ format. [default: I]\n```\n\nGenerated reads will be written to stdout in FASTA or FASTQ format.\n\nIf `--bed` option is provided, generated reads also will be written to given file in `BED6` format.\n\nSample `regions` file for Homo sapiens (human) genome assembly GRCh38 (hg38) is provided as `GRCh38.ron`\n\nIf Input Sequencing reads will be used for simulation, they should be provided with `--inseq` argument, instead of using `--ref` and `--regions`.\n"
      },
      "source": "https://raw.githubusercontent.com/CompGenomeLab/boquila/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Examples",
        "parent_header": [
          "boquila",
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "> More detailed example can be found in the [examples](./examples) directory\n\nSimple usage\n```\nboquila input_reads.fq --ref ref_genome.fa --regions GRCh38.ron > out.fq\n```\n\nUsing seed for RNG\n```\nboquila input_reads.fq --ref ref_genome.fa --regions GRCh38.ron --seed 7 > out.fq\n```\n\nUsing reads that are in FASTA format\n```\nboquila input_reads.fa --fasta --ref ref_genome.fa --regions GRCh38.ron > out.fa\n```\n\nSaving output in BED format\n```\nboquila input_reads.fq --ref ref_genome.fa --regions GRCh38.ron --bed out.bed > out.fq\n```\n\nUsing Input Sequencing instead of reference genome\n```\nboquila input_reads.fq --inseq inputseq_reads.fq > out.fq\n```\n\nUsing Input Sequencing reads which are in FASTA format\n```\nboquila input_reads.fq --inseqFasta --inseq inputseq_reads.fa > out.fq\n```\n"
      },
      "source": "https://raw.githubusercontent.com/CompGenomeLab/boquila/main/README.md",
      "technique": "header_analysis"
    }
  ]
}