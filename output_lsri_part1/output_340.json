{
  "application_domain": [
    {
      "confidence": 21.1,
      "result": {
        "type": "String",
        "value": "Natural Language Processing"
      },
      "technique": "supervised_classification"
    }
  ],
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "How to cite",
        "parent_header": [
          "Maast"
        ],
        "type": "Text_excerpt",
        "value": "The publication of Maast is in preparation. Please cite this GitHub repo as alternative for now. \n"
      },
      "source": "https://raw.githubusercontent.com/zjshi/Maast/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 1b: Call SNPs from a set of whole genomes with a speficied reference genome without redundancy reduction",
        "parent_header": [
          "Maast",
          "How to use",
          "Genotype SNPs step by step"
        ],
        "type": "Text_excerpt",
        "value": "`maast genomes --fna-dir /path/to/genomes/ --rep-fna /path/to/rep_genome.fna --out-dir /path/Maast/output/ --skip-centroid --keep-redundancy`  \n"
      },
      "source": "https://raw.githubusercontent.com/zjshi/Maast/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/zjshi/Maast"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-03-15T06:53:32Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-08-21T12:22:08Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Microbial agile accurate SNP Typer"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9991607284076515,
      "result": {
        "original_header": "What Maast does",
        "type": "Text_excerpt",
        "value": "Recent spikes in available whole-genome sequences have greatly expanded intra-species diversity especially for prevalent species. As the number of genomes per species grows, it becomes computationally challenging to perform whole-genome alignment and call single nucleotide polymorphisms (SNPs). Furthermore, the genomes from some species are highly similar and hence redundant for SNP discovery. These trends are irreversible and worse over time. To address the challenge, we present Maast, a tool for discovering core-genome SNPs and genotyping these SNPs in conspecific genomes, contigs, or unassembled reads. Maast runs orders of magnitude faster than existing tools and uses less RAM because it is free of read alignment and assembly. Maast is also comparably accurate and recovers more core-genome SNPs compared to other the-state-of-art tools.\n \n"
      },
      "source": "https://raw.githubusercontent.com/zjshi/Maast/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "wiki",
        "type": "Url",
        "value": "https://github.com/zjshi/Maast/wiki"
      },
      "source": "https://raw.githubusercontent.com/zjshi/Maast/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "download": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Download and decompress test dataset",
        "parent_header": [
          "Maast",
          "Example"
        ],
        "type": "Text_excerpt",
        "value": "`wget --content-disposition https://fileshare.czbiohub.org/s/TwGJAsAZ6dQsM49/download`\n\n`tar xzvf 101346.tar.gz`\n\nNote: after running the two command line above, one directory named 101346 can be found in the current directory. In the directory 101346, there are 300 whole genome assemblie in FASTA format (.fna) and 8 gzipped files of WGS sequencing reads in FASTQ format (.fastq.gz).\n"
      },
      "source": "https://raw.githubusercontent.com/zjshi/Maast/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/zjshi/Maast/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/zjshi/Maast/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "zjshi/Maast"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Catalogue"
      },
      "source": "https://raw.githubusercontent.com/zjshi/Maast/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zjshi/Maast/main/db_io/example.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zjshi/Maast/main/conda_recipe/build.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "Maast"
        ],
        "type": "Text_excerpt",
        "value": "<b>Python requirement</b>\n* Python3 (>=3.9.6)\n\n<b>Required Python libraries</b>\n* [NumPy] (https://numpy.org/install/) (>=1.19.5)\n* [SciPy] (https://scipy.org/install/) (>=1.5.4)\n* [Biopython] (https://biopython.org/wiki/Download) (>=1.79)\n* [NetworkX] (https://pypi.org/project/networkx/) (>=2.5.1)\n\nNote: the following installation command line might be helpful\n`pip install numpy biopython`\n\n<b>Required external programs</b>\n* [Mash](https://github.com/marbl/Mash) (>=v2.2)\n* [MUMmer4](https://github.com/mummer4/mummer) (>=v4.0.0)\n\n<b>Optional installation</b>\n* [FastTreeMP](http://www.microbesonline.org/fasttree/FastTreeMP) (>= v2.1.11) (Optional; only required when tree subcommand is run)  \n* [pigz](https://zlib.net/pigz/) (Optional; A parallel implementation of gzip for modern multi-processor, multi-core machines)\n* [lbzip2](http://lbzip2.org/) (Optional; A free, multi-threaded compression utility with support for bzip2 compressed file format)\n* [lz4](http://www.lz4.org) (Optional; Extremely Fast Compression algorithm)\n\nNote: the optional dependencies are not required for essential features of Maast, but they are recommended to be installed for better performance or additional features.  \n\nFirst, retrieve a copy of Maast to your local computing environment   \n\n`git clone https://github.com/zjshi/Maast.git`\n\nChange your current working directory into where you put Maast   \n`cd /path/to/Maast/`\n\nType in the command line to compile the source code of Maast   \n`make`\n\nType in the command line to make GT-Pro ready to execute   \n`chmod 755 maast`\n\nThe main program (`maast`) should be found in the same directory as `/path/to/Maast/`. This location can be added to the system path so that the main program can be accessed from anywhere. Reference through full path is also allowed.\n\nType in the command line to display help text   \n\n`./maast -h`  \n\n<b>Notes for C++ compiler</b>   \n\nMaast requires a C++ compiler that is compatible with C++ 11 standards to work properly. All the tests have been done and passed with clang-900.0.38, but it should be compatible for GNU C Compiler (newer than 5.4.0). We have not tested Maast with older compilers, but we expect it to run similiarly as long as it compiles successfully.\n\n"
      },
      "source": "https://raw.githubusercontent.com/zjshi/Maast/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Conda Installation",
        "parent_header": [
          "Maast"
        ],
        "type": "Text_excerpt",
        "value": "<b>Create a new conda environment</b>   \n`conda create -n maast`\n\n<b>Activate the environment just created</b>   \n`conda activate maast`\n\n<b>Conda automatic installation with all dependencies</b>   \n`conda install -c conda-forge -c bioconda maast`\n\n<b>Quick installation verification</b>   \n`maast -h`  \n"
      },
      "source": "https://raw.githubusercontent.com/zjshi/Maast/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Type common SNPs from a set of whole genome assemblies and sequencing reads from beginning to end in one single command line",
        "parent_header": [
          "Maast",
          "How to use"
        ],
        "type": "Text_excerpt",
        "value": " \n`maast end_to_end --in-dir /path/to/directory/containing/genomes/reads/or/both --out-dir /path/Maast/output/ --min-prev 0.9 --snp-freq 0.01`\n\nNote:  \n\nInput directory must have a number of whole genome assemblies in FASTA format. \n\nMaast can automatically identify file types with supported file suffix: whole genome assemblies (.fa, .fsa, .fna and .fasta) and sequencing reads (.fq and .fastq). Files compressed with popular algorithms, including .gz, .lz4 and .bz2, are also supported.\n\nThe running of end_to_end subcomand is equavalent to the running of genomes, db and genotype subcommand with default settings in a row.\n"
      },
      "source": "https://raw.githubusercontent.com/zjshi/Maast/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 1b: Call SNPs from a set of whole genomes with a speficied reference genome without redundancy reduction",
        "parent_header": [
          "Maast",
          "How to use",
          "Genotype SNPs step by step"
        ],
        "type": "Text_excerpt",
        "value": "`maast genomes --fna-dir /path/to/genomes/ --rep-fna /path/to/rep_genome.fna --out-dir /path/Maast/output/ --skip-centroid --keep-redundancy`  \n"
      },
      "source": "https://raw.githubusercontent.com/zjshi/Maast/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/zjshi/Maast/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 Zhou (Jason) Shi\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/zjshi/Maast/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Maast"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "zjshi"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 130545,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C++",
        "size": 86948,
        "type": "Programming_language",
        "value": "C++"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 1223,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Makefile",
        "size": 519,
        "type": "Programming_language",
        "value": "Makefile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/zjshi/Maast/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "zjshi",
          "type": "User"
        },
        "date_created": "2023-07-10T18:16:05Z",
        "date_published": "2023-07-10T21:16:40Z",
        "description": "In the verseion 1.0.8, we fixed a small but critical bug that prevents Maast from calling SNPs from whole genome assemblies.",
        "html_url": "https://github.com/zjshi/Maast/releases/tag/v1.0.8",
        "name": "version 1.0.8",
        "release_id": 111700108,
        "tag": "v1.0.8",
        "tarball_url": "https://api.github.com/repos/zjshi/Maast/tarball/v1.0.8",
        "type": "Release",
        "url": "https://api.github.com/repos/zjshi/Maast/releases/111700108",
        "value": "https://api.github.com/repos/zjshi/Maast/releases/111700108",
        "zipball_url": "https://api.github.com/repos/zjshi/Maast/zipball/v1.0.8"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "zjshi",
          "type": "User"
        },
        "date_created": "2023-03-28T00:47:12Z",
        "date_published": "2023-03-29T20:02:16Z",
        "description": "This is a major version that has incorporated several non-trivial feature additions since it is first public release.",
        "html_url": "https://github.com/zjshi/Maast/releases/tag/v1.0.7",
        "name": "Version 1.0.7",
        "release_id": 97375384,
        "tag": "v1.0.7",
        "tarball_url": "https://api.github.com/repos/zjshi/Maast/tarball/v1.0.7",
        "type": "Release",
        "url": "https://api.github.com/repos/zjshi/Maast/releases/97375384",
        "value": "https://api.github.com/repos/zjshi/Maast/releases/97375384",
        "zipball_url": "https://api.github.com/repos/zjshi/Maast/zipball/v1.0.7"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "requirements",
    "contact",
    "contributors",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 00:21:40",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 29
      },
      "technique": "GitHub_API"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Type common SNPs from a set of whole genome assemblies and sequencing reads from beginning to end in one single command line",
        "parent_header": [
          "Maast",
          "How to use"
        ],
        "type": "Text_excerpt",
        "value": " \n`maast end_to_end --in-dir /path/to/directory/containing/genomes/reads/or/both --out-dir /path/Maast/output/ --min-prev 0.9 --snp-freq 0.01`\n\nNote:  \n\nInput directory must have a number of whole genome assemblies in FASTA format. \n\nMaast can automatically identify file types with supported file suffix: whole genome assemblies (.fa, .fsa, .fna and .fasta) and sequencing reads (.fq and .fastq). Files compressed with popular algorithms, including .gz, .lz4 and .bz2, are also supported.\n\nThe running of end_to_end subcomand is equavalent to the running of genomes, db and genotype subcommand with default settings in a row.\n"
      },
      "source": "https://raw.githubusercontent.com/zjshi/Maast/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 1a: Call SNP with a collection of whole genome assemblies",
        "parent_header": [
          "Maast",
          "How to use",
          "Genotype SNPs step by step"
        ],
        "type": "Text_excerpt",
        "value": "`maast genomes --fna-dir /path/to/genomes/ --out-dir /path/Maast/output/`  \n\nNote:  \nBy default, Maast first collapsed redundancy in the input genomes and then call common SNPs from a subset of tag genomes. It also automatically identifies a centroid-genome and use it for the representative genome.\n\nUpon a successful run, this step will produce several important files that are required for downstream steps.\n* reference.fna (Reference genome that provides genomic coordinate for SNPs)\n* core_snps.vcf (SNP catalog)\n* tag_paths.list (Selected tag genomes)\n"
      },
      "source": "https://raw.githubusercontent.com/zjshi/Maast/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 1c: Call SNPs with customized minimum prevalence and minor allele frequency (MAF) thresholds",
        "parent_header": [
          "Maast",
          "How to use",
          "Genotype SNPs step by step"
        ],
        "type": "Text_excerpt",
        "value": "`maast genomes --fna-dir /path/to/genomes/ --rep-fna /path/to/rep_genome.fna --out-dir /path/Maast/output/ --min-prev 0.95 --snp-freq 0.001`  \n"
      },
      "source": "https://raw.githubusercontent.com/zjshi/Maast/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 2: Build SNP covering k-mer database",
        "parent_header": [
          "Maast",
          "Example",
          "Genotype SNPs step by step with the test dataset"
        ],
        "type": "Text_excerpt",
        "value": "`maast db --ref-genome /path/to/reference.fna --vcf /path/to/core_snps.vcf --msa /path/to/tag_msa.fna --tag-fna-list /path/to/tag_paths.list --fna-dir /path/to/genomes/ --out-dir /path/Maast/output/`\n\nNote:  \n\nUpon a successful run, this step will produce a SNP covering k-mer database that is required for genotyping sequencing reads.\n* kmer_db.bin (SNP covering k-mer database)\n"
      },
      "source": "https://raw.githubusercontent.com/zjshi/Maast/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 3: Genotype whole genome assemblies, sequencing reads or both",
        "parent_header": [
          "Maast",
          "Example",
          "Genotype SNPs step by step with the test dataset"
        ],
        "type": "Text_excerpt",
        "value": "`maast genotype --in-dir /path/to/directory/containing/genomes/reads/or/both --ref-genome /path/to/reference.fna --db /path/to/kmer_db.bin --vcf /path/to/core_snps.vcf --out-dir /path/Maast/output/`\n"
      },
      "source": "https://raw.githubusercontent.com/zjshi/Maast/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Construct a SNP tree with Maast genotypes (optional)",
        "parent_header": [
          "Maast",
          "Example",
          "Genotype SNPs step by step with the test dataset"
        ],
        "type": "Text_excerpt",
        "value": "`maast tree --input-list /path/to/Maast/genotypes.input.tsv --out-dir /path/Maast/output/`\n"
      },
      "source": "https://raw.githubusercontent.com/zjshi/Maast/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "More helper text and arguments",
        "parent_header": [
          "Maast",
          "How to use",
          "Genotype SNPs step by step"
        ],
        "type": "Text_excerpt",
        "value": "`maast end_to_end|genomes|db|genotype|tree -h`\n"
      },
      "source": "https://raw.githubusercontent.com/zjshi/Maast/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Genotype SNPs from begin to end in one single command line with the test dataset",
        "parent_header": [
          "Maast",
          "Example"
        ],
        "type": "Text_excerpt",
        "value": "`maast end_to_end --in-dir ./101346 --out-dir ./101346_out`\n\nNote: after running the above command line, one directory name 101346_out can be found in the currently directory, which contains all resulting files and directories. \n\nThe files include\n* reference.fna (selected reference genome)\n* tag_paths.list (list of selected tag genomes)\n* tag_msa.fna (multiple sequence alignment of tag genomes)\n* coords.tsv (coordinates of consensus genome)\n* core_snps.vcf (called SNPs in VCF format)\n* nr_kmer_set.tsv (raw SNP-covering k-mers)\n* check_fna_paths.list (a list of genomes used for validating SNP-covering k-mers)\n* kmer_prof.tsv (hit profile of SNP-covering k-mers)\n* selected_kmers.tsv (validated SNP-covering k-mers)\n* kmer_db.bin (optimized database of SNP-covering k-mers)\n\nThe directories include\n* gt_results (SNP genotyping results)\n* temp (tempory directory for hosting )\n"
      },
      "source": "https://raw.githubusercontent.com/zjshi/Maast/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Step 1: Call SNPs with whole genome assemblies",
        "parent_header": [
          "Maast",
          "Example",
          "Genotype SNPs step by step with the test dataset"
        ],
        "type": "Text_excerpt",
        "value": "`maast genomes --fna-dir ./101346 --out-dir ./101346_out`\n\nNote: upon a successful run of the first step, the output files include\n* reference.fna (selected reference genome)\n* tag_paths.list (list of selected tag genomes)\n* tag_msa.fna (multiple sequence alignment of tag genomes)\n* coords.tsv (coordinates of consensus genome)\n* core_snps.vcf (called SNPs in VCF format)\n\n#### Step 2: Build SNP covering k-mer database\n\n`maast db --ref-genome ./101346_out/reference.fna --vcf ./101346_out/core_snps.vcf --msa ./101346_out/tag_msa.fna --tag-fna-list ./101346_out/tag_paths.list --fna-dir ./101346/ --out-dir ./101346_out/`\n\nNote: all the required input files can be found from the output files of the first step. \n\nUpon a successful run of the second step, the output files include\n* nr_kmer_set.tsv (raw SNP-covering k-mers)\n* check_fna_paths.list (a list of genomes used for validating SNP-covering k-mers)\n* kmer_prof.tsv (hit profile of SNP-covering k-mers)\n* selected_kmers.tsv (validated SNP-covering k-mers)\n* kmer_db.bin (optimized database of SNP-covering k-mers)\n\nAmong them, kmer_db.bin is the database file that will be used in the next step along with a few other required files from the first step.\n\n#### Step 3: Genotype whole genome assemblies, sequencing reads or both\n\n`maast genotype --in-dir ./101346/ --ref-genome ./101346_out/reference.fna --db ./101346_out/kmer_db.bin --vcf ./101346_out/core_snps.vcf --out-dir ./101346_out/`\n\nNote: Files to genotype should be supplied in a directory with --in-dir. Supported file types including FASTA and FASTQ formats. Input files can be all FASTAs, FASTQs or a mixture of both.\n\nall other required input files could be found from the output files of two previous steps. \n\nThe main output files are the SNP genotypes that can be found in the a directory named \"gt_results\" in the designated output directory, ./101346_out/ in this case.\n\nIt has seven fields as the following:\n\n1. Contig: string type with arbitary length which specifies the contig of a representative genome where a SNP is from\n2. Local Pos: up to seven digits which specifies the local position of a SNP on a contig\n3. Global Pos: up to seven digits which specifies the global position of a SNP in a species, served as sort of ID\n4. Allele 1: single character, A, C, G or T, which specifies allele 1 of a SNP\n5. Allele 2: similiar as Ref allele but specifies allele 2 of a SNP\n6. Allele 1 Cnt: an integer specifying the count of detected allele 1 in a metagenome\n7. Allele 2 Cnt: an integer specifying the count of detected allele 2 in a metagenome\n\nAn example of such looks like the following:\n\n| Contig                                     | Local Pos     | Global Pos     | Allele 1       | Allele 2       | Allele 1 Cnt   | Allele 2 Cnt   |\n| :---                                       |    :----:     |     :----:     |    :----:      |    :----:      |    :----:      |    :----:      |\n| NODE_10_length_179788_cov_11.0000_ID_43085 | 15829         | 349759         | C              | T              | 65             | 0              |\n| NODE_10_length_179788_cov_11.0000_ID_43085 | 15863         | 20713          | C              | T              | 62             | 1              |\n| NODE_10_length_179788_cov_11.0000_ID_43085 | 15889         | 131457         | C              | A              | 62             | 0              |\n| NODE_10_length_179788_cov_11.0000_ID_43085 | 15907         | 4457           | G              | A              | 59             | 0              |\n| NODE_10_length_179788_cov_11.0000_ID_43085 | 15910         | 4553           | C              | A              | 59             | 0              |\n| NODE_10_length_179788_cov_11.0000_ID_43085 | 15937         | 151893         | C              | T              | 56             | 0              |\n| NODE_10_length_179788_cov_11.0000_ID_43085 | 15940         | 101338         | C              | T              | 55             | 0              |\n| ...                                        | ...           | ...            | ...            |  ...           |  ...           |  ...           |\n\n#### Construct a SNP tree with Maast genotypes (optional)\n\nThis is an optional step that helps take advantage of genotyped SNPs for a quick application - SNP tree building\n\n`paste <(find ./101346_out/gt_results/ -name '*tsv' | sort) <(find ./101346_out/gt_results/ -name '*tsv' | sort | cut -d'/' -f4 | cut -d'.' -f1) > 101346_genotypes.input.tsv`\n\nNote: the step above generates a list of input pairs. Each pair per row contains a path to a genotype result file generated from Maast genotype command and a unique name of the file. The path and name are separated by a tab, like the following\n/file/path/1\tname1\n/file/path/2\tname2\n/file/path/3    name3\n...\n\n\nThe first three rows of 101346_genotypes.input.tsv in this example look like\n./101346_out/gt_results/GUT_GENOME000400.fna.tsv\tGUT_GENOME000400\n./101346_out/gt_results/GUT_GENOME000466.fna.tsv\tGUT_GENOME000466\n./101346_out/gt_results/GUT_GENOME000688.fna.tsv\tGUT_GENOME000688\n\n\n`maast tree --input-list ./101346_genotypes.input.tsv --out-dir ./101346_out/`\n\nNote: upon the successful completion of this command, the following three output can be found:\n* concat_allele.aln.fasta (concatenated allele sequences with genotyped SNPs)\n* concat_allele.aln.mat (Pairwise genomic distances between concatenated allele sequences)\n* concat_allele.aln.tre (Phylogenetic tree built with concatenated allele sequences)\n"
      },
      "source": "https://raw.githubusercontent.com/zjshi/Maast/main/README.md",
      "technique": "header_analysis"
    }
  ]
}