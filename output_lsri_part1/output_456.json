{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Reference",
        "parent_header": [
          "RobustCCC"
        ],
        "type": "Text_excerpt",
        "value": "Zhang C, Gao L, Hu Y, Huang Z. RobustCCC: a robustness evaluation tool for cell-cell communication methods, Frontiers in Genetics, 2023. doi: 10.3389/fgene.2023.1236956."
      },
      "source": "https://raw.githubusercontent.com/GaoLabXDU/RobustCCC/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/GaoLabXDU/RobustCCC"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-07-10T09:01:52Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-07-19T03:39:53Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A user-friendly tool to evaluate the robustness of cell-cell communication methods"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Descriptions",
        "parent_header": [
          "RobustCCC"
        ],
        "type": "Text_excerpt",
        "value": "We develop a user-friendly tool, RobustCCC, which facilitates the robustness evaluation of cell-cell communication methods. RobustCCC offers the following capabilities: 1) generating simulated data, including replicated data, transcriptomic data noise and prior knowledge noise, with a single step, 2) installing and executing 14 cell-cell communication methods in a single step and 3) generating robustness evaluation reports in tabular form for easy interpretation.\n"
      },
      "source": "https://raw.githubusercontent.com/GaoLabXDU/RobustCCC/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9189628563270309,
      "result": {
        "original_header": "RobustCCC",
        "type": "Text_excerpt",
        "value": "A user-friendly tool to evaluate the robustness of cell-cell communication methods\n![image](https://github.com/chenxing-zhang/RobustCCC/blob/main/schematic.png) \n"
      },
      "source": "https://raw.githubusercontent.com/GaoLabXDU/RobustCCC/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/GaoLabXDU/RobustCCC/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/GaoLabXDU/RobustCCC/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "GaoLabXDU/RobustCCC"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RobustCCC"
      },
      "source": "https://raw.githubusercontent.com/GaoLabXDU/RobustCCC/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/chenxing-zhang/RobustCCC/main/schematic.png"
      },
      "source": "https://raw.githubusercontent.com/GaoLabXDU/RobustCCC/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "RobustCCC"
        ],
        "type": "Text_excerpt",
        "value": "Please make sure you have installed R>=4.1 and Python>=3.8 before install RobustCCC.\n\n**1. Python environment configuration**\n\nRobustCCC needs python environment using anaconda:\n```\nconda create -n RobustCCC_env python=3.8\nconda activate RobustCCC_env\n```\n\nThe Python package `pandas==1.5.3` is required to support the execution of CCC methods:\n```\nconda install pandas=1.5.3\n```\n\nNOTE: The `scConnect` CCC method calls the DataFrame.iterrows() function, which is no longer supported in pandas (>1.5.3)\n  \n\n**2. R environment configuration**\n\nThe R package `devtools` is required to support installation:\n```\ninstall.packages(\"devtools\")\n```\n\nthe R package `reticulate=1.26` is required to call python codes:\n```\ndevtools::install_version(\"reticulate\", version = \"1.26\")\n```\n\nNOTE: Errors may be reported in the subsequent installation of CCC methods(python packages) if `reticulate>1.26` is installed.\n\n\n**3. RobustCCC installation**\n\nRobustCCC R package can be installed using devtools: \n```\ndevtools::install_github('chenxing-zhang/RobustCCC')\n```\n\n"
      },
      "source": "https://raw.githubusercontent.com/GaoLabXDU/RobustCCC/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/GaoLabXDU/RobustCCC/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RobustCCC"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "GaoLabXDU"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 83220,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 78750,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/GaoLabXDU/RobustCCC/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 00:48:35",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Tutorials",
        "parent_header": [
          "RobustCCC"
        ],
        "type": "Text_excerpt",
        "value": "**0. activate environment and set path**\n```\n# 0.0 load RobustCCC and reticulate\nlibrary(RobustCCC)\nlibrary(reticulate) # use python\n\n# 0.1 activate conda environment\npath_conda_env = '//path//of//your//conda_env' # e.g. 'D://Anaconda//envs//RobustCCC_env' in Windows or '//home//user//anaconda//envs//RobustCCC_env' in Linux\nreticulate::use_condaenv(path_conda_env) \nreticulate::py_config()\n\n# 0.2 path of data, including scRNA-seq data and cell type anotation\npath_data = '//path//of//your//data' \n# path_data = system.file('data',package='RobustCCC') # using demo data \n\n# 0.3 path of result. The folders named CCCmethods and similarity  will be created, which are used to save the method results and the similarity of the results between repelicate data respectively.\npath_result <- '//path//of//result'\n```\n\n**1. check and install cell-cell communication methods**\n```\n# 1.0 select methods\nlist_methods = c(\"CellCall\",\"CellChat\",\"CytoTalk\",\"ICELLNET\",\"iTALK\",\"NicheNet\",\"scMLnet\",\"SingleCellSignalR\",\"Zhou\",\"Skelly\",\"Kumar\",\"NATMI\",\"scConnect\",\"CellPhoneDB\")\n\n# 1.1 check method avaliable\nlist_methods_not_installed = check_CCC_packages(list_methods) \n\n# 1.2 install method in list_methods\ninstall_CCC_packages(list_methods_not_installed) \n\n# 1.3 check again\nlist_methods_not_installed = check_CCC_packages(list_methods) \n```\n\nNOTE: Please make sure that the sentence \"All selected methods are installed\" is printed after executing `check_CCC_packages`, if not, please execute this module again.\n\n**2. data pre-processing**\n```\n# 2.0 data information\nname_mat = 'F001'  # 'F001' or 'F002'\nname_label = 'F001_label'  # 'F001_label' or 'F002_label'\nspecies = 'mouse'\nLcell='Endo'\nRcell='Micro'\n\n# 2.1 data pre-processing: change mouse gene to human gene\nname_mat_human = run_convert_gene_symbol_mouse2human(path_data, name_mat, species)\n\n# 2.2 data pre-processing: split whole matrix to cell-type-pairs matrix based on label\nrun_split_mat_to_cell_type_pairs(path_data, name_mat_human, name_label, Lcell, Rcell)\n```\n\n**3. load mat and label**\n```\n# 3.0 data information, CTP: cell type pair\nname_mat_CTP = paste(name_mat_human, Lcell, Rcell,sep='_')\nname_label_CTP = paste(name_label, Lcell, Rcell,sep='_')\n\n# 3.1 load mat and label\nmat_ori = read.table(paste(path_data,name_mat_CTP,sep = '//'),sep=',',header = T,row.names = 1)\nmat_ori = mat_ori[!duplicated(rownames(mat_ori)),]\nlabel_ori = read.table(paste(path_data,name_label_CTP,sep='//'),sep=',',header = TRUE, row.names = 1)\n```\n\n**4. run cell-cell communication**\n```\nrun_CCC_methods(name_mat_CTP, Lcell, Rcell, mat_ori, label_ori, list_methods, path_result)\n```\n\n**5. generate simulated data**\n```\n# 5.1 select simulated type\nlist_simulated_type = c('simuReplicate', 'GaussianNoise','dropout', 'cellTypePermu', 'ligRecPermu')\n\n# 5.2 generate simulated data\nrun_generate_simulated_data(list_simulated_type, path_data, name_mat_CTP, mat_ori, name_label_CTP, label_ori, Lcell, Rcell)\n```\n\n**6. load simulated mat and label and run cell-cell communication**\n```\nrun_CCC_methods_simulated(list_simulated_type, name_mat_CTP, Lcell, Rcell, list_methods, path_data, path_result)\n```\n\n**7. evaluate robustness**\n```\n# 7.1 select simulated type\nlist_simulated_type = c('bioReplicate', 'simuReplicate', 'GaussianNoise','dropout', 'cellTypePermu', 'ligRecPermu')\n\n# 7.2 evaluate robustness by calculating similarity\n# name_mat_1 and name_mat_2 are needed if data_type=='bioReplicate'\nrun_evaluate_robustness(path_result, list_simulated_type, list_methods, name_mat, name_mat_1=NULL, name_mat_2=NULL)\n```\n"
      },
      "source": "https://raw.githubusercontent.com/GaoLabXDU/RobustCCC/main/README.md",
      "technique": "header_analysis"
    }
  ]
}