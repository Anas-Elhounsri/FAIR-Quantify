{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/umr-ds/RepairNatrix"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-10-01T09:19:23Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-05-23T10:04:13Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9372155048103183,
      "result": {
        "original_header": "RepairNatrix",
        "type": "Text_excerpt",
        "value": "![DAG of an example workflow](documentation/images/dag_invivo.png)\n*DAG of an example workflow for RepairNatrix\n \n"
      },
      "source": "https://raw.githubusercontent.com/umr-ds/repairnatrix/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9812879959721214,
      "result": {
        "original_header": "Cluster execution",
        "type": "Text_excerpt",
        "value": "RepairNatrix can be run easily on a cluster system using either conda or the docker container.\nAdding --cluster to the start command of RepairNatrix, together with a command to submit jobs (e. g. qsub) is enough for most \ncluster computing environments. An example command would be:\n```shell\n$ snakemake -s <path/to/Snakefile> --use-conda --configfile <path/to/configfile.yaml> --cluster \"qsub -N <project name> -S /bin/bash/\" --jobs 100\n```\nFurther qsub arguments including brief explanations can be found under [qsub arguments](http://bioinformatics.mdc-berlin.de/intro2UnixandSGE/sun_grid_engine_for_beginners/how_to_submit_a_job_using_qsub.html).\nFor additional commands that should be executed for each job the argument --jobscript *path/to/jobscript.sh* can be used. \nA simple jobscript that sources before the execution of each job the bashrc and activates the snakemake environment looks like this:\n```shell\n#!/usr/bin/env bash\n\nsource ~/.bashrc\nconda activate natrix_repair\n\n{exec_job}\n```\nInstead of directly passing the cluster submission arguments to the snakemake command it is also possible to\nwrite a profile that contains cluster commands and arguments. The use of profiles allows the assignment \nof rule-specific hardware requirements. For example, the BLAST rule benefits from a large amount of CPU cores, while other\nrules, like AmpliconDuo, do not. With profiles, rules could be assigned a low amount of CPU cores as default, with rules\nlike BLAST being assigned a larger amount of cores. This allows optimal usage of cluster resources and shorter waiting times.\nThe creation of profiles is largely dependent on the software and hardware available on the cluster.\nWith a profile RepairNatrix can simply be run with\n```shell\n$ snakemake -s <path/to/Snakefile> --profile myprofile \n```\nThe Snakemake documentation contains a tutorial for [profile creation](https://snakemake.readthedocs.io/en/stable/executing/cli.html#profiles) \nand the [Snakemake profiles GitHub page](https://github.com/snakemake-profiles/doc) contains example profiles for different\ncluster systems.\n \n"
      },
      "source": "https://raw.githubusercontent.com/umr-ds/repairnatrix/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/umr-ds/repairnatrix/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "faq": [
    {
      "confidence": 1,
      "result": {
        "original_header": "too harsh filtering may result in execution errors of other rules (empty files) !",
        "parent_header": [
          "RepairNatrix",
          "Cluster execution",
          "Further information"
        ],
        "type": "Text_excerpt",
        "value": "RepairNatrix uses a yaml file to specify the input files and parameters. \nA schema to validate yaml files including a description for all field can be found [here](https://github.com/umr-ds/RepairNatrix/example_data.yaml).\nAn example config can be found [here](https://github.com/umr-ds/RepairNatrix/example_data.yaml).\n\nRepairNatrix is based on the Natrix amplicon processing pipeline, which can be found at [@Natrix](https://github.com/MW55/Natrix).\n"
      },
      "source": "https://raw.githubusercontent.com/umr-ds/repairnatrix/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/umr-ds/RepairNatrix/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "umr-ds/RepairNatrix"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RepairNatrix"
      },
      "source": "https://raw.githubusercontent.com/umr-ds/repairnatrix/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/umr-ds/repairnatrix/master/pipeline.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/umr-ds/repairnatrix/master/documentation/images/dag_invivo.png"
      },
      "source": "https://raw.githubusercontent.com/umr-ds/repairnatrix/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/umr-ds/repairnatrix/master/documentation/images/filename.png"
      },
      "source": "https://raw.githubusercontent.com/umr-ds/repairnatrix/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/umr-ds/repairnatrix/master/documentation/images/dag_nothing.png"
      },
      "source": "https://raw.githubusercontent.com/umr-ds/repairnatrix/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/umr-ds/repairnatrix/master/documentation/images/dag_remove.png"
      },
      "source": "https://raw.githubusercontent.com/umr-ds/repairnatrix/master/README.md",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/umr-ds/repairnatrix/master/documentation/images/dag_repair.png"
      },
      "source": "https://raw.githubusercontent.com/umr-ds/repairnatrix/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 0.808935501732476,
      "result": {
        "original_header": "Further information",
        "type": "Text_excerpt",
        "value": "constraint_filtering can be turned on optionally  \navailable constraints:  \n* homopolymers\n* overall_gc_content\n* windowed_gc_content\n* undesired_subsequences\n* kmer_counting \n"
      },
      "source": "https://raw.githubusercontent.com/umr-ds/repairnatrix/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/umr-ds/RepairNatrix/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2019 Marius Welzel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/umr-ds/repairnatrix/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "RepairNatrix"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "umr-ds"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 135922,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 15194,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 474,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/umr-ds/repairnatrix/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://snakemake.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/umr-ds/repairnatrix/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Dependencies",
        "parent_header": [
          "RepairNatrix"
        ],
        "type": "Text_excerpt",
        "value": "* [Conda](https://conda.io/en/latest/index.html)\n* [GNU screen](https://www.gnu.org/software/screen/) (optional)\n\nConda can be downloaded as part of the [Anaconda](https://www.anaconda.com/) or the [Miniconda](https://conda.io/en/latest/miniconda.html) plattforms (Python 3.7). We recommend to install miniconda3. \nUsing Linux you can get it with:\n\n```shell\n$ wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\n$ bash Miniconda3-latest-Linux-x86_64.sh\n```\n\nGNU screen can be found in the repositories of most Linux distributions:\n\n* Debian / Ubuntu based: apt-get install screen\n* RHEL based: yum install screen\n* Arch based: pacman -S screen\n\nAll other dependencies will be automatically installed using conda environments and can be found in the corresponding environment.yaml files in the *envs* folder and the `natrix_repair.yaml` file in the root directory of the pipeline.\n\n---\n"
      },
      "source": "https://raw.githubusercontent.com/umr-ds/repairnatrix/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Prerequisites: dataset, primertable and configuration file",
        "parent_header": [
          "RepairNatrix",
          "Tutorial"
        ],
        "type": "Text_excerpt",
        "value": "The FASTQ files need to follow a specific naming convention:\n<p align=\"center\"> \n<img src=\"documentation/images/filename.png\" alt=\"naming\" width=\"400\"/>\n</p>\n\n```\nsamplename_unit_direction.fastq.gz\n```\nwith:\n* *samplename* as the name of the sample, without special characters.\n* *unit*, unit identifier, which is simply *A*.\n* *direction*, identifier for forward (*R1*) and reverse (*R2*) reads of the same sample. If the reads are single-end, the direction identifier is *R1*.\n\nA dataset should look like this (two samples, paired-end, no split-sample approach):\n```\nS2016RU_A_R1.fastq.gz\nS2016RU_A_R2.fastq.gz\nS2016BY_A_R1.fastq.gz\nS2016BY_A_R2.fastq.gz\n```\nBesides the FASTQ data from the sequencing process RepairNatrix needs a primertable containing the sample names and, if they exists in the data, the length of the poly-N tails, the sequence of the primers and the barcodes used for each sample and direction. Besides the sample names all other information can be omitted if the data was already preprocessed or did not contain the corresponding subsequence. RepairNatrix also needs a configfile file in YAML format, specifying parameter values for tools used in the pipeline.\n\nThe primertable, configfile and the folder containing the FASTQ files all have to be in the root directory of the pipeline and have the same name (with their corresponding file extensions, so *project*.yaml, *project*.csv and the *project* folder containing the FASTQ files). The first configfile entry (`filename`) also needs to be the name of the project.\n"
      },
      "source": "https://raw.githubusercontent.com/umr-ds/repairnatrix/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running RepairNatrix",
        "parent_header": [
          "RepairNatrix",
          "Tutorial"
        ],
        "type": "Text_excerpt",
        "value": "If you prefer to run the preperation script and snakemake manually, you have to start by activating the snakemake environment:\n\n```shell\n$ conda activate natrix_repair\n```\n\nFollowed by running the preperation script, with *project* being the name of your project:\n\n```shell\n$ python3 create_dataframe.py <project>.yaml\n```\n\nThis command will create the `units.tsv` file, containing the file information in a way that RepairNatrix can use it.\n\nTo start the main pipeline, type in:\n```shell\nsnakemake --use-conda --configfile <project>.yaml --cores <cores>\n```\nwith *project* being the name of your project and *cores* being the amount of cores you want to allocate for RepairNatrix to use.\n\nShould the pipeline prematurely terminate (either because of an error or by deliberately stopping it) running the command above again will start the pipeline from the point it was terminated.\n\n---\n"
      },
      "source": "https://raw.githubusercontent.com/umr-ds/repairnatrix/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "documentation",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:03:11",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Getting Started",
        "parent_header": [
          "RepairNatrix"
        ],
        "type": "Text_excerpt",
        "value": "*Note: this tutorial is largely inherited from the base Natrix repository. For more information, visit [@Natrix](https://github.com/MW55/Natrix)*.\n\nTo install RepairNatrix, you'll need the open-source package management system [conda](https://conda.io/en/latest/index.html).\nAfter cloning this repository to a folder of your choice, it is recommended to create a general RepairNatrix conda environment with the accompanying `natrix_repair.yaml`. In the main folder of the cloned repository, execute the following command:\n\n```shell\n$ conda env create -f natrix_repair.yaml\n```\nThis will create a conda environment containing all dependencies for Snakemake itself. \n\nWith RepairNatrix comes an example primertable *example_data.csv*, configfile *example_data.yaml* and an example amplicon dataset in the folder *example_data*.\n\n---"
      },
      "source": "https://raw.githubusercontent.com/umr-ds/repairnatrix/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Example workflow configurations",
        "parent_header": [
          "RepairNatrix",
          "Cluster execution"
        ],
        "type": "Text_excerpt",
        "value": "![Simple workflow](documentation/images/dag_nothing.png \"Only read assembly\")\n![Filtering](documentation/images/dag_remove.png \"Read assembly with filtering\")\n![Filtering](documentation/images/dag_repair.png \"Read assembly, clustering, and repair\")\n\n---\n"
      },
      "source": "https://raw.githubusercontent.com/umr-ds/repairnatrix/master/README.md",
      "technique": "header_analysis"
    }
  ]
}