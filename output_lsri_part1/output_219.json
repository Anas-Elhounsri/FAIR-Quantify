{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "format": "cff",
        "type": "File_dump",
        "value": "# This CITATION.cff file was generated with cffinit.\n# Visit https://bit.ly/cffinit to generate yours today!\n\ncff-version: 1.2.0\ntitle: VIPER\nmessage: >-\n  If you use this software, please cite it using the\n  metadata from this file.\ntype: software\nauthors:\n  - given-names: Arne\n    family-names: Klingenberg\n    email: aklingenberg@unomaha.edu\n    affiliation: >-\n      Ghersi Lab, University of Nebraska at\n      Omaha\nrepository-code: 'https://github.com/A-Klingenberg/VIPER'\nabstract: >-\n  VIPER is a framework for the automated design of\n  inhibitory decoy peptides based on structural binding data\n  of two proteins.\nkeywords:\n  - structural biology\n  - decoy peptide\n  - attachment inhibitor\nlicense: MIT\nversion: 1.0.1\ndate-released: '2024-03-27'\n"
      },
      "source": "https://raw.githubusercontent.com/A-Klingenberg/VIPER/main/CITATION.cff",
      "technique": "file_exploration"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/A-Klingenberg/VIPER"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-08-24T16:35:04Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-05-15T07:09:09Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Viral Inhibition via Peptide Engineering and Receptor-Mimicry"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9776118991231012,
      "result": {
        "original_header": "VIPER   <a href=\"https://zenodo.org/doi/10.5281/zenodo.10897858\"><img alt=\"DOI\" src=\"https://zenodo.org/badge/682657296.svg\" /></a>",
        "type": "Text_excerpt",
        "value": "This is the official repository for the software tool **VIPER: Viral Inhibition via Peptide Engineering and Receptor-Mimicry**. \n"
      },
      "source": "https://raw.githubusercontent.com/A-Klingenberg/VIPER/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8979927430974219,
      "result": {
        "original_header": "Quickstart",
        "type": "Text_excerpt",
        "value": "1. Get the PDB under the accession code **6m0j** and save it at the root level (same folder that `main.py` is in).\n2. Open the `config.json` file and add the absolute file path to your RosettaCommons installation under `rosetta_config` \u2192 `path`. Also set the amount of cores for Rosetta to use under `rosetta_config` \u2192 `use_num_cores`.\n3. Run the following command: `python3 -u main.py 6m0j.pdb --vsp_chain E --partner_chain A &`. It is recommended to prefix this with `nohup` if you expect your terminal session to be terminated before VIPER is done and your operating system supports `nohup`.  \nYou can expect VIPER to be done in less than a day, or even quicker, depending on how many cores you allow it to use. \n"
      },
      "source": "https://raw.githubusercontent.com/A-Klingenberg/VIPER/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.898674186949095,
      "result": {
        "original_header": "Configuration Options",
        "type": "Text_excerpt",
        "value": "\"log_path\": \"Logs\"\n: Which directory to save the logs to. This is also where the short summary report will be saved. \n\"random_seed\": 3333333\n: Which random seed to use. VIPER will try to use this seed for every tool for which you can set the random seed. \n\"path_out\": \"rosetta_output\"\n: Which path to save the output from Rosetta to, unless grouped with other related output. This is mostly where f. e. the\nrun configurations for Rosetta applications will be saved.\n   \n\"random_seed\": -1\n: Which random seed to use for Rosetta. If this is set to -1 (default), the general random_seed will be used instead. \n\"use_num_cores\": 8\n: How many cores Rosetta should use when running Rosetta applications. \nIf this multiplied with your GA population size exceeds the total number of cores available, you *will* starve your system\nand overallocate your compute resources! \n\"archive_intermediate\": false\n: Whether to archive the intermediate Rosetta output to save space. The code for this exists, but currently isn't integrated. \n\"prerelax_complex_runs\": 100\n: How many individual relaxed complexes of the initial PDB to generate. \n\"docking_runs\": 5000\n: How many runs of docking to run. Currently unused. Compare to Rosetta `docking_protocol`. \n\"docking_translation\": 3\n: How many standard deviations of translation to use when perturbing input structure. Currently unused. Compare to Rosetta `docking_protocol`. \n\"docking_rotation\": 8\n: How many standard deviations of rotation to use when perturbing input structure. Currently unused. Compare to Rosetta `docking_protocol`. \n\"reb_only_use_best\": true\n: Whether to only use the best scoring initial relaxed complex for the residue energy breakdown, \nor the average of all relaxations of the initial complex. \n\"random_seed\": 0\n: What random seed to use. Currently unused. \n\"linker\": \"GG\"\n: What linker to use, if any. Use a string of residues in single letter notation, so 'GG' for two glycines, for example. \n\"reb_energy_cutoff\": -0.1\n: In absolute terms, what a residue must score better (lower) than in order to be treated favorable and be potentially included in the peptide. \n\"length_damping_linear_stepping\": \"\"\n: (Optional) The stepping by which to increase / decrease the score per residue length with linear stepping.\nLeave empty to let VIPER automatically calculate the stepping that linearily connects the start and end points. \n\"ignore_neighbors\": false\n: Whether to automatically ignore neighbors and only use the individually highest scoring residues. \n\"always_include_direct_neighbors\": false\n: Whether to always include the direct neighbors of a selected residue. \n\"length_flexibility\": 0\n: When using the old fragment_combiner method (below), how many residues VIPER is allowed to exceed the length limit by in order to fit in a fragment. \n\"join_penalty_factor\": 0.05\n: When using the old fragment_combiner method (below), by how much in percent to reduce the fragment score for each angstrom above the join_distance_penalty it is away. \n\"linker_stretch_factor\": 4.0\n: How many angstroms another fragment may be away to be elligible for linking for each residue in the linker. \n\"penalize_lone_residues\": true\n: Whether to apply a score penalty to fragments consisting of only a single residue. \n\"lone_residue_pad_range\": 1\n: With how many residues in each direction to pad single-residues with. \n\"email\": \" \"\n: Which email address to fill into the email address field of the job submission form. If it is to be left empty, put in a space! \n\"select_percent\": 0.3\n: How many parents to select from the previous generation to generate offspring for the next generation, in percent. \n\"selection_with_replacement\": true\n: Whether to sample parents from the previous generation with replacement. This may cause a parent to appear multiple \ntimes in the next generation. \n\"crossover_mode\": \"MULTIPLE\"\n: How often to cross over between parents when generating offspring. \"SINGLE\" only has a single crossover point, whereas\n\"MULTIPLE\" allows for multiple crossover points to appear. \n\"crossover_chance\": 0.1\n: The chance, in percent, at each residue to cross over between parents. \n\"mutation_bias\": \"BLOSUM62_shifted\"\n: How to bias the residue mutation. May be the name of any of the matrices present in the folder `util` \u2192 `substitution_matrices` folder.\nUse `UNIFORM` for unbiased mutation. \n\"getstruc_backoff\": 600\n: Range, in seconds, to select a random wait time for before submitting the individual (peptide sequence) to the tertiary structure prediction service.\nThis staggers the submissions in order to not overload / stress the service too much, if it is an external one, such as PEPstrMOD. \n\"dynamic_concurrent_scoring\": false\n: Whether to use a dynamic concurrent scoring paradigm, where VIPER automatically tries to determine the best number of cores to use\nfor each run of Rosetta during scoring, so as not to overallocate cores. \n\"adjust_score\": false\n: Whether to use the results of contact checking to adjust the score of the individual. \n\"nearby_partner_tolerance\": 1\n: How many residues in each direction a contact may still count as an original one. I. e., the original contact was \nresidue 42 on chain X and this setting equals 2, a new contact with either residue 40, 41, 42, 43, or 44 still counts as\nan original contact. \n\"penalty\": 0.02\n: In percent, by how much to reduce the individual's score by for each residue that misses enough original contacts. \n\"radius\": 7\n: The radius, in angstrom, to use for sSCII calculation. \n\"threshold\": 0.4063\n: The threshold to distinguish stable/unstable residues by for sSCII calculation. \n\"stepping_width\": 0.1\n: For how long to remain on a modifier value before moving on to the next modifier value. \n"
      },
      "source": "https://raw.githubusercontent.com/A-Klingenberg/VIPER/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/A-Klingenberg/VIPER/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/A-Klingenberg/VIPER/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A-Klingenberg/VIPER"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "VIPER   "
      },
      "source": "https://raw.githubusercontent.com/A-Klingenberg/VIPER/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "identifier": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://zenodo.org/doi/10.5281/zenodo.10897858"
      },
      "source": "https://raw.githubusercontent.com/A-Klingenberg/VIPER/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Other installations needed",
        "parent_header": [
          "VIPER   <a href=\"https://zenodo.org/doi/10.5281/zenodo.10897858\"><img alt=\"DOI\" src=\"https://zenodo.org/badge/682657296.svg\" /></a>"
        ],
        "type": "Text_excerpt",
        "value": "You will need to install [Python 3](https://www.python.org/) (VIPER was developed and tested with Python 3.8), the requirements in the `requirements.txt`, and the [Rosetta Commons](https://www.rosettacommons.org/) software suite.\n\n---"
      },
      "source": "https://raw.githubusercontent.com/A-Klingenberg/VIPER/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.999999998641627,
      "result": {
        "original_header": "Quickstart",
        "type": "Text_excerpt",
        "value": "To reproduce the results from this thesis, follow these steps *after* installing all the requirements outlined above. It's recommended to install the Python packages in a virtual environment. \n1. Get the PDB under the accession code **6m0j** and save it at the root level (same folder that `main.py` is in).\n2. Open the `config.json` file and add the absolute file path to your RosettaCommons installation under `rosetta_config` \u2192 `path`. Also set the amount of cores for Rosetta to use under `rosetta_config` \u2192 `use_num_cores`.\n3. Run the following command: `python3 -u main.py 6m0j.pdb --vsp_chain E --partner_chain A &`. It is recommended to prefix this with `nohup` if you expect your terminal session to be terminated before VIPER is done and your operating system supports `nohup`.  \n"
      },
      "source": "https://raw.githubusercontent.com/A-Klingenberg/VIPER/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9261230663489507,
      "result": {
        "original_header": "Configuration Options",
        "type": "Text_excerpt",
        "value": "\"log_path\": \"Logs\"\n: Which directory to save the logs to. This is also where the short summary report will be saved. \n\"random_seed\": 3333333\n: Which random seed to use. VIPER will try to use this seed for every tool for which you can set the random seed. \n\"num_CPU_cores\": \"\"\n: If you are using the dynamic concurrent scoring option for the GA, enter how many cores your system has / you want to use. \n\"results_path\": \"output\"\n: Which path to save all generated files besides the logs to. \n\"path\": \"\"\n: The path to the RosettaCommons installation.  \n\"path_out\": \"rosetta_output\"\n: Which path to save the output from Rosetta to, unless grouped with other related output. This is mostly where f. e. the\nrun configurations for Rosetta applications will be saved.\n   \n\"random_seed\": -1\n: Which random seed to use for Rosetta. If this is set to -1 (default), the general random_seed will be used instead. \n\"path\": \"\"\n: The path to the GROMACS executable(s). Currently unused. \n\"peptide_generator\"\n: Starts the config options for the PeptideGenerator. \n\"use_strategy\": \"fragment_joiner\"\n: Which selection strategy to use. Allowed options: `greedy_expand`, `fragment_joiner`. \n\"custom_strategy\": false\n: Whether to use a custom residue selection strategy (from `custom_funcs.py`). \n\"greedy_expand\": \n: Starts the config options for the GreedyExpand selection strategy. \n\"fragment_joiner\":\n: Starts the config options for the FragmentJoiner selection strategy. \n\"pepstrmod_config\":\n: Starts the config options for the PEPstrMODWrapper. \n\"simulation_time\": \"100ps\"\n: For how long to run the MD simulation for. May be either \"100ps\" or \"50ps\". \n\"environment\": \"vac\"\n: In which environment to simulate the peptide.  \n\"download_topology\": true\n: Whether to make the MD sim topology files available on the results page. These will *not* be automatically downloaded by VIPER! \n\"download_trajectory\": true\n: Whether to make the MD sim trajectory files available on the results page. This will *not* be automatically downloaded by VIPER! \n"
      },
      "source": "https://raw.githubusercontent.com/A-Klingenberg/VIPER/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/A-Klingenberg/VIPER/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "VIPER"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "A-Klingenberg"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 287607,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/A-Klingenberg/VIPER/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "A-Klingenberg",
          "type": "User"
        },
        "date_created": "2024-03-30T14:42:14Z",
        "date_published": "2024-03-30T14:42:38Z",
        "html_url": "https://github.com/A-Klingenberg/VIPER/releases/tag/1.0.1",
        "name": "1.0.1, public release",
        "release_id": 149097729,
        "tag": "1.0.1",
        "tarball_url": "https://api.github.com/repos/A-Klingenberg/VIPER/tarball/1.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/A-Klingenberg/VIPER/releases/149097729",
        "value": "https://api.github.com/repos/A-Klingenberg/VIPER/releases/149097729",
        "zipball_url": "https://api.github.com/repos/A-Klingenberg/VIPER/zipball/1.0.1"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "A-Klingenberg",
          "type": "User"
        },
        "date_created": "2024-03-30T14:24:36Z",
        "date_published": "2024-03-30T14:27:02Z",
        "description": "This release marks the initial public release of VIPER.",
        "html_url": "https://github.com/A-Klingenberg/VIPER/releases/tag/1.0.0",
        "name": "1.0.0, public release",
        "release_id": 149097171,
        "tag": "1.0.0",
        "tarball_url": "https://api.github.com/repos/A-Klingenberg/VIPER/tarball/1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/A-Klingenberg/VIPER/releases/149097171",
        "value": "https://api.github.com/repos/A-Klingenberg/VIPER/releases/149097171",
        "zipball_url": "https://api.github.com/repos/A-Klingenberg/VIPER/zipball/1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Running your own workflow",
        "parent_header": [
          "VIPER   <a href=\"https://zenodo.org/doi/10.5281/zenodo.10897858\"><img alt=\"DOI\" src=\"https://zenodo.org/badge/682657296.svg\" /></a>"
        ],
        "type": "Text_excerpt",
        "value": "If you simply want to run VIPER with your own PDB file, the setup is very easy. First, make sure that all dependencies are \ninstalled as outlined above and that the `config.json` is updated correspondingly. Next, identify which chains you want to let VIPER design an inhibitory peptide for.\nFor the sake of this explanation, let's assume that the viral surface protein has the chain id `V` and the human receptor\nprotein has the chain id `R`. Save them to `vsp_chain` and `partner_chain`, respectively, in the `config.json`.\nAlternatively, you may specify them as command line flags with `--vsp_chain` and `--partner_chain`, respectively.\n\nNext, make sure that all other settings in `config.json` are set to your liking, an explanation of every setting is at\nthe end of this document.\n\nFinally, you may run VIPER with the command outlined in step 3 in the \"Quickstart\" section.\nThis will make VIPER run through the default stages with your PDB file. If you want to adjust this pipeline,\nyou can adapt it in `VIPER.py`. Currently, the default is as follows:\n\n1. Reduce the PDB to only the relevant chains and renumber the atoms and residues starting from 1.\n2. Relax the resultant PDB using Rosetta.\n3. Perform a residue energy breakdown of the best relaxed complex using Rosetta.\n4. Use this data to derive a candidate peptide (using a selection strategy: `modules` \u2192 `stages` \u2192 `PeptideGenerator.py` \u2192 `SelectionStrategy`).\n5. Determine the tertiary structure of this peptide using PEPstrMOD (`modules` \u2192 `wrappers` \u2192 `PEPstrMODWrapper.py`).\n6. Optimize this candidate using the Genetic Algorithm strategy (`modules` \u2192 `stages` \u2192 `optimize` \u2192 `GAStrategy.py`).\n\nIf you only want to modify a minor part, VIPER provides some ready-to-use hooks already in the `custom_funcs.py` file. \nThere, you can specify a custom function that determines whether a residue should be included when growing subsections\nof the partner protein for both the GreedyExpand and FragmentJoiner strategies. You can also implement your own selection\nstrategy. You may also specify a custom function that gets called when generating mutants during the GA, where you can \nmodify the populations as you see fit. Lastly, you can modify how the sSCII value gets combined with the Rosetta score.\nIf you want to use one of these custom functions, you need to enable the usage in the `config.json`!\n\nIf you want to modify / expand VIPER beyond that, you'll have to modify the code directly. `VIPER.py` contains the abstract,\nhigh-level control flow, with most of the logic being implemented in so called 'modules'. There 'wrappers' contain code\nto interface with external tools, whereas 'stages' implement internal VIPER logic, such as selecting a subset of residues\nfrom the partner protein. Therefore, your steps should probably be first implementing a wrapper/stage and then tying it into `VIPER.py`.\n\n---"
      },
      "source": "https://raw.githubusercontent.com/A-Klingenberg/VIPER/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:54:41",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Support",
        "parent_header": [
          "VIPER   <a href=\"https://zenodo.org/doi/10.5281/zenodo.10897858\"><img alt=\"DOI\" src=\"https://zenodo.org/badge/682657296.svg\" /></a>"
        ],
        "type": "Text_excerpt",
        "value": "Are you having issues? Does VIPER crash or not produce the expected output? \nIf so, first make sure that all configuration settings are set properly, especially\nthe PDB chain ids. If that did not fix the issue, you can get more information by adding the `--verbose` command line flag\nor setting `\"verbose\": true` in the config file. Viper should be able to give you more information at the end of the log file\n(default: `Logs/log.txt`). If the error message does not help you diagnose the issue or your issue still persists, please\nopen a GitHub issue, briefly explain the problem you've encountered, and append the last 100 lines of your log file with the `--verbose` flag set.\n\n---\n\n---"
      },
      "source": "https://raw.githubusercontent.com/A-Klingenberg/VIPER/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ]
}