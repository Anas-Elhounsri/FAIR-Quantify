{
  "application_domain": [
    {
      "confidence": 33.34,
      "result": {
        "type": "String",
        "value": "Natural Language Processing"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/everest-castaneda/knext"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-02-02T15:30:10Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-18T10:41:37Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Kyoto Encylopedia of Genes and Genomes (KEGG) NetworkX Topological parser automates downloading, parsing, and converting from a KEGG Markup Language File to a TSV file that is usable in network analyses."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9982540761176232,
      "result": {
        "original_header": "KEGG NetworkX Topological (KNeXT) parser",
        "type": "Text_excerpt",
        "value": "KNeXT downloads and parses Kyoto Encylopedia of Genes and Genomes \n(KEGG) markup language files (KGML). This tool employs NetworkX's framework\nto create gene-only networks, but mixed (gene, compound, pathway) networks\ncan also be generated. All output files are in TSV format. KNeXT also\nretrieves a TXT file of node x-y axis coordinates for use in NetworkX's\ngraph visualization library, and it is able to convert KEGG IDs \ninto Uniprot and NCBI IDs. KNeXT also maximizes metadata information\nthrough preserving each edge's information and adding gene, compound, and\npathways names.\n \n"
      },
      "source": "https://raw.githubusercontent.com/everest-castaneda/knext/main/README.rst",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9535391304289291,
      "result": {
        "original_header": "Inputs",
        "type": "Text_excerpt",
        "value": "The output of which can be used in successive commands.\nAll input formats *must be* in TSV format.\nColumn names are mandatory and should not be changed. \nData Frames\n''''''''''' \n"
      },
      "source": "https://raw.githubusercontent.com/everest-castaneda/knext/main/README.rst",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/everest-castaneda/knext/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/everest-castaneda/knext/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "everest-castaneda/knext"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "KEGG NetworkX Topological (KNeXT) parser"
      },
      "source": "https://raw.githubusercontent.com/everest-castaneda/knext/main/README.rst",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "KEGG NetworkX Topological (KNeXT) parser"
        ],
        "type": "Text_excerpt",
        "value": "The current release is :code:`v1.2.1`\nInstallation is via pip:\n\n.. code:: bash\n\n    $ pip install knext\n\nRepo can be downloaded and installed through poetry__:\n\n.. code:: bash\n\n    $ git clone https://github.com/everest/knext.git\n    $ cd knext\n    $ poetry shell\n    $ poetry install\n    $ poetry run knext [get-kgml, genes, mixed, or convert]\n\n.. __: https://python-poetry.org/\n"
      },
      "source": "https://raw.githubusercontent.com/everest-castaneda/knext/main/README.rst",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9732201286641973,
      "result": {
        "original_header": "Inputs",
        "type": "Text_excerpt",
        "value": "KNeXT only accepts KGML files downloaded from `KEGG <https://www.genome.jp/kegg/>`__ \n\tQ9Y243-23, O15111-59, PPrel, -->, activation\n\tQ9Y243-23, Q6GYQ0-240, PPrel`,`PPrel, --``|```,`+p, inhibition`,`phosphorylation\n\tQ9Y243-23, O14920-59, PPrel, -->, activation\n \n"
      },
      "source": "https://raw.githubusercontent.com/everest-castaneda/knext/main/README.rst",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.926242148216927,
      "result": {
        "original_header": "Inputs",
        "type": "Text_excerpt",
        "value": ".. csv-table:: Example TSV file with KEGG ID's\n\t:header: entry1, entry2, type, value, name \n.. csv-table:: Example TSV file for uniprot conversion with `--unique` output \n\t:escape: `\n        :header: entry1, entry2, type, value, name \n"
      },
      "source": "https://raw.githubusercontent.com/everest-castaneda/knext/main/README.rst",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/everest-castaneda/knext/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2023 Everest Uriel Castaneda\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/everest-castaneda/knext/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "knext"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "everest-castaneda"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 41867,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/everest-castaneda/knext/main/README.rst"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://requests.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/everest-castaneda/knext/main/README.rst",
      "technique": "regular_expression"
    },
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://pathlib.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/everest-castaneda/knext/main/README.rst",
      "technique": "regular_expression"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Requirements",
        "parent_header": [
          "KEGG NetworkX Topological (KNeXT) parser"
        ],
        "type": "Text_excerpt",
        "value": "Requirements are (also see ``pyproject.toml``):\n\n- Python >= 3.9\n- typer__\n- click__\n- requests__\n- pandas__\n- networkx__\n- pytest__\n- pathlib__\n- pytest__\n\n.. __: https://typer.tiangolo.com/\n.. __: https://click.palletsprojects.com/en/8.1.x/\n.. __: https://requests.readthedocs.io/en/latest/\n.. __: https://pandas.pydata.org/\n.. __: https://networkx.org/\n.. __: https://docs.pytest.org/en/7.2.x/\n.. __: https://pathlib.readthedocs.io/en/pep428/\n.. __: https://docs.pytest.org/en/7.1.x/contents.html\n"
      },
      "source": "https://raw.githubusercontent.com/everest-castaneda/knext/main/README.rst",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:28:26",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 6
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "parent_header": [
          "KEGG NetworkX Topological (KNeXT) parser"
        ],
        "type": "Text_excerpt",
        "value": ".. code:: text\n\n    Primary line: knext get-kgml [SPECIES_NAME]\n      \n      KEGG NetworkX Topological (KNeXT) parser uses the KEGG\n      API to gather all KGML files for a single species. \n      Input species name in 3 to 4 letter KEGG organism code. \n    \n    Options:\n      --help,\tshows options and website for KEGG organism codes\n      -d/--d,\tdirectory in which to save output\n\n    Primary line: knext genes [Input]\n\n      KNeXT parser deploy's NetworkX's\n      framework to create gene-only representations of KGML files.\n      Genes between compounds are propagated before compounds are dropped.\n\n    Options:\n      Input\tKGML file or folder of KGML files to parse\n      -r/--results\tfile or folder where output should be stored\t\n      -g/--graphics\toutputs TXT file of x-y axis coordinates\n      -u/--unique\tTSV file's genes have a terminal modifier\n      -n/--names    TSV file includes a column with gene names\n\t\t    Notice: increases parsing time and internet connection required\n      --help\tshows options and file types\n\n    Primary line: knext mixed [Input]\n\n      KNeXT parser creates mixed (genes, compounds, pathways)\n      representations of KGML files.\n\n    Options:\n      Input\tKGML file or folder of KGML files to parse\n      -r/--results\tfile or folder where output should be stored\n      -g/--graphics\toutputs TXT file of x-y axis coordinates\n      -u/--unique\tTSV file's genes have a terminal modifier\n      -n/--names TSV file includes a column with compound, gene, and pathway names\n\t\t Notice: increases parsing time and internet connection required\n      --help\tshows options and file types\n\n    Primary line: knext convert [OPTIONS]\n      \n      KNeXT parser converts KEGG entry IDs in TSV output files into\n      UniProt or NCBI IDs.\n    \n    Options:\n      file\tPATH:\tpath to TSV file\n      species\tTEXT:\tKEGG 3 to 4 letter organism code\n      --uniprot\toptional flag for output:\tuse if UniProt IDs are the desired output\n      --unique\toptional flag for output:\tuse if the TSV file has terminal modifiers\n      --graphics\tPATH:\tgraphics file\n      --help\toptional flag:\tshows options\n\n    Options:\n      folder\tPATH:\tpath to folder containing TSV files         \n      species\tTEXT:\tKEGG 3 to 4 letter organism code\n      --uniprot\toptional flag for output:         use if UniProt IDs are the desired output\n      --unique\toptional flag for output:         use if the TSV file has terminal modifiers   \n      --graphics\tPATH:       path to folder containing graphics files          \n      --help\toptional flag:            shows options\n\nFor example, KNeXT can obtain all KGML files for Homo sapiens:\n\n.. code:: text\n\n    $ knext get-kgml hsa\n\nThe resulting output folder can be used to parse the files:\n\n.. code:: text\n      \n    $ knext genes kgml_hsa --graphics\n\nThe resulting output folder can be used to convert the TSV files and graphics file:\n\n.. code:: text\n      \n    $ knext convert kegg_gene_network_hsa hsa --graphics kegg_gene_network_hsa\n\nGraphics text file usage\n\n.. code:: text\n\n    import networkx as nx\n    import pandas as pd\n    import json\n    edges = pd.read_csv('edges.tsv', sep = '\\t')\n    file_header = open('graphics.txt').read()\n    pos = json.loads(file_header)\n    graph = nx.from_pandas_edgelist(edges, source = 'entry1', target = 'entry2')\n    nx.draw(graph, pos = pos)\n"
      },
      "source": "https://raw.githubusercontent.com/everest-castaneda/knext/main/README.rst",
      "technique": "header_analysis"
    }
  ]
}