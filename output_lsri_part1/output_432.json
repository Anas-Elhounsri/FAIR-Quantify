{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Citation",
        "parent_header": [
          "AliGater"
        ],
        "type": "Text_excerpt",
        "value": "AliGater: a framework for the development of bioinformatic pipelines for large-scale, high-dimensional cytometry data\n\nBioinformatics Advances, Volume 3, Issue 1, 2023, vbad103, https://doi.org/10.1093/bioadv/vbad103\n"
      },
      "source": "https://raw.githubusercontent.com/LudvigEk/aligater/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/LudvigEk/aligater"
      },
      "technique": "GitHub_API"
    }
  ],
  "contact": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contact",
        "parent_header": [
          "AliGater"
        ],
        "type": "Text_excerpt",
        "value": "Lead dev; ludvig.ekdahl@med.lu.se\n"
      },
      "source": "https://raw.githubusercontent.com/LudvigEk/aligater/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "contributing_guidelines": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contribute &amp; Support",
        "parent_header": [
          "AliGater"
        ],
        "type": "Text_excerpt",
        "value": "- Issue Tracker: github.com/LudvigEk/Aligater/issues\n- Source Code: github.com/LudvigEk/Aligater\n"
      },
      "source": "https://raw.githubusercontent.com/LudvigEk/aligater/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2018-01-12T13:10:05Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-12-05T09:01:09Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "AliGater is a flow cytometry analysis framework for creating automated gating solutions."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9684456777090603,
      "result": {
        "original_header": "AliGater",
        "type": "Text_excerpt",
        "value": "AliGater is intended as a rapid application development environment for high-throughput gating using pattern recognition functions and libraries. It provides a framework with basic gating functionality and then lets you build your own mathematical and pattern recognition functions in your strategies. \nTypically you can explore and gate your data in a notebook environment then run thousands of gates using the same strategy. See sample notebooks (to be made) for examples. \n"
      },
      "source": "https://raw.githubusercontent.com/LudvigEk/aligater/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9392430126283173,
      "result": {
        "original_header": "Features",
        "type": "Text_excerpt",
        "value": "    * Several pre-built functions to make gating easier, from simple thresholding and fixed quadgates to 1-2d mixed gaussian modelling, dijkstras shortest path implementations and principal components. \n    * Support for crunching through folder hierarchies with sample files and linking folder names to your experiment. \n    * Easily integrates with methods of libraries like scikit-learn & scipy. \n"
      },
      "source": "https://raw.githubusercontent.com/LudvigEk/aligater/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://aligater.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/LudvigEk/aligater/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/LudvigEk/aligater/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/LudvigEk/aligater/master/docs/source/examples/The_basics.ipynb"
      },
      "source": "https://raw.githubusercontent.com/LudvigEk/aligater/master/docs/source/examples/The_basics.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/LudvigEk/aligater/master/docs/source/examples/Batch_Processing.ipynb"
      },
      "source": "https://raw.githubusercontent.com/LudvigEk/aligater/master/docs/source/examples/Batch_Processing.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/LudvigEk/aligater/master/docs/source/examples/Gating%20functions%20intro%20-%20Gating%20primitives.ipynb"
      },
      "source": "https://raw.githubusercontent.com/LudvigEk/aligater/master/docs/source/examples/Gating%20functions%20intro%20-%20Gating%20primitives.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/LudvigEk/aligater/master/docs/source/examples/Example_strategy.ipynb"
      },
      "source": "https://raw.githubusercontent.com/LudvigEk/aligater/master/docs/source/examples/Example_strategy.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/LudvigEk/aligater/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "LudvigEk/aligater"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "AliGater"
      },
      "source": "https://raw.githubusercontent.com/LudvigEk/aligater/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "parent_header": [
          "AliGater"
        ],
        "type": "Text_excerpt",
        "value": "Download AliGater by running below:\n\n\tgit clone https://github.com/LudvigEk/aligater\n    cd aligater\n\nAfter downloading, if you do not have cython installed in your environment it's recommended to pre-install it.\n\n\tpip install cython\n\nYou should then be able to install AliGater by running:\n\n    pip install -e .\n"
      },
      "source": "https://raw.githubusercontent.com/LudvigEk/aligater/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9423657922641269,
      "result": {
        "original_header": "AliGater",
        "type": "Text_excerpt",
        "value": "Typically you can explore and gate your data in a notebook environment then run thousands of gates using the same strategy. See sample notebooks (to be made) for examples. \nCheck out the documentation at\nhttps://aligater.readthedocs.io/en/latest/\n \n"
      },
      "source": "https://raw.githubusercontent.com/LudvigEk/aligater/master/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8322584629566709,
      "result": {
        "original_header": "Features",
        "type": "Text_excerpt",
        "value": "    * Support for crunching through folder hierarchies with sample files and linking folder names to your experiment. \n    * Easily integrates with methods of libraries like scikit-learn & scipy. \n"
      },
      "source": "https://raw.githubusercontent.com/LudvigEk/aligater/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/LudvigEk/aligater/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "parent_header": [
          "AliGater"
        ],
        "type": "Text_excerpt",
        "value": "MIT\n\nCopyright (c) 2023 Ludvig Ekdahl\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/LudvigEk/aligater/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "aligater"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "LudvigEk"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 386686,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "C",
        "size": 79,
        "type": "Programming_language",
        "value": "C"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/LudvigEk/aligater/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Getting AliGater up and running in a jupyter notebook environment",
        "parent_header": [
          "AliGater"
        ],
        "type": "Text_excerpt",
        "value": "If you installed AliGater in a local environment such as conda, a few extra steps might be necessary to set up \na jupyter kernel with the environment containing aligater. Below commands should work for a conda environment.\n\n    conda install -c anaconda ipykernel\n    python -m ipykernel install --user --name=aligater\n\nWhere --name=aligater is the name of the local conda environment where aligater was installed.\n"
      },
      "source": "https://raw.githubusercontent.com/LudvigEk/aligater/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "download",
    "requirements",
    "contributors",
    "faq",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-04 00:43:34",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Contribute &amp; Support",
        "parent_header": [
          "AliGater"
        ],
        "type": "Text_excerpt",
        "value": "- Issue Tracker: github.com/LudvigEk/Aligater/issues\n- Source Code: github.com/LudvigEk/Aligater\n"
      },
      "source": "https://raw.githubusercontent.com/LudvigEk/aligater/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Getting AliGater up and running in a jupyter notebook environment",
        "parent_header": [
          "AliGater"
        ],
        "type": "Text_excerpt",
        "value": "If you installed AliGater in a local environment such as conda, a few extra steps might be necessary to set up \na jupyter kernel with the environment containing aligater. Below commands should work for a conda environment.\n\n    conda install -c anaconda ipykernel\n    python -m ipykernel install --user --name=aligater\n\nWhere --name=aligater is the name of the local conda environment where aligater was installed.\n"
      },
      "source": "https://raw.githubusercontent.com/LudvigEk/aligater/master/README.md",
      "technique": "header_analysis"
    }
  ]
}