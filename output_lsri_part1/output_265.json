{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ghaiyan/TOAST"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-05-14T08:52:37Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-05-14T11:40:35Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "TOAST\uff1aa method for identifying Tad bOundaries based on graph Auto-encoders and clustering"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9661347400913161,
      "result": {
        "original_header": "4. Content of folders",
        "type": "Text_excerpt",
        "value": "call codes for identifying, ploting, and evaluating TADs. \n"
      },
      "source": "https://raw.githubusercontent.com/ghaiyan/TOAST/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9964808413687156,
      "result": {
        "original_header": "5. Input matrix file format:",
        "type": "Text_excerpt",
        "value": "The input to CASPIAN is a tab seperated N by N intra-chromosomal contact matrix derived from Hi-C data, where N is the number of equal-sized regions of a chromosome.\n \n"
      },
      "source": "https://raw.githubusercontent.com/ghaiyan/TOAST/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/ghaiyan/TOAST/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ghaiyan/TOAST/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "ghaiyan/TOAST"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "TOAST\uff1aa method for identifying Tad bOundaries based on graph Auto-encoders and clustering"
      },
      "source": "https://raw.githubusercontent.com/ghaiyan/TOAST/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "1. before running, you need to install the following package or tools.",
        "parent_header": [
          "TOAST\uff1aa method for identifying Tad bOundaries based on graph Auto-encoders and clustering"
        ],
        "type": "Text_excerpt",
        "value": "Pytorch 1.7.1, Python 3.6.12, Numpy 1.19.5, Matplotlib 3.3.3, Cooltools 0.4.1, Fanc 0.9.24, Jupyter 1.0.0, Pandas 1.1.5, pyBigWig 0.3.18, seaborn 0.11.1.\n"
      },
      "source": "https://raw.githubusercontent.com/ghaiyan/TOAST/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "intall conda and create the virtual environment.",
        "parent_header": [
          "TOAST\uff1aa method for identifying Tad bOundaries based on graph Auto-encoders and clustering",
          "1. before running, you need to install the following package or tools."
        ],
        "type": "Text_excerpt",
        "value": "download the Anaconda3-2020.07-Linux-x86_64.sh file from https://repo.anaconda.com/archive/\n\nbash Anaconda3-2020.07-Linux-x86_64.sh\n\nconda create --name pytorch1.7.1 python=3.7\n"
      },
      "source": "https://raw.githubusercontent.com/ghaiyan/TOAST/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "intall packages using pip",
        "parent_header": [
          "TOAST\uff1aa method for identifying Tad bOundaries based on graph Auto-encoders and clustering",
          "1. before running, you need to install the following package or tools."
        ],
        "type": "Text_excerpt",
        "value": "pip install flask\n\npip install numpy\n\npip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu\n\npip install matplotlib\n\npip install seaborn\n\npip install hdbscan\n"
      },
      "source": "https://raw.githubusercontent.com/ghaiyan/TOAST/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3. prepare data",
        "parent_header": [
          "TOAST\uff1aa method for identifying Tad bOundaries based on graph Auto-encoders and clustering"
        ],
        "type": "Text_excerpt",
        "value": "you can download the simulated Hi-C contact from paper \"Forcato, M. et al. Comparison of computational methods for Hi-C data analysis. Nature methods 14, 679-685 (2017).\"\n\nyou can download the real Hi-C data of GM12878 cell line with GEO ID GSE63525 is provided by the Rao Lab.\n\nFor .hic format data, you can dump data using juicer_tools.js and get the NxN matrix, where N is the number of equal-sized regions of a chromosome.\n\nin this paper, we use the NxN format matrix as input.\n"
      },
      "source": "https://raw.githubusercontent.com/ghaiyan/TOAST/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/ghaiyan/TOAST/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "TOAST"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "ghaiyan"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 92441,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/ghaiyan/TOAST/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "1. before running, you need to install the following package or tools.",
        "parent_header": [
          "TOAST\uff1aa method for identifying Tad bOundaries based on graph Auto-encoders and clustering"
        ],
        "type": "Text_excerpt",
        "value": "Pytorch 1.7.1, Python 3.6.12, Numpy 1.19.5, Matplotlib 3.3.3, Cooltools 0.4.1, Fanc 0.9.24, Jupyter 1.0.0, Pandas 1.1.5, pyBigWig 0.3.18, seaborn 0.11.1.\n"
      },
      "source": "https://raw.githubusercontent.com/ghaiyan/TOAST/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "intall conda and create the virtual environment.",
        "parent_header": [
          "TOAST\uff1aa method for identifying Tad bOundaries based on graph Auto-encoders and clustering",
          "1. before running, you need to install the following package or tools."
        ],
        "type": "Text_excerpt",
        "value": "download the Anaconda3-2020.07-Linux-x86_64.sh file from https://repo.anaconda.com/archive/\n\nbash Anaconda3-2020.07-Linux-x86_64.sh\n\nconda create --name pytorch1.7.1 python=3.7\n"
      },
      "source": "https://raw.githubusercontent.com/ghaiyan/TOAST/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "intall packages using pip",
        "parent_header": [
          "TOAST\uff1aa method for identifying Tad bOundaries based on graph Auto-encoders and clustering",
          "1. before running, you need to install the following package or tools."
        ],
        "type": "Text_excerpt",
        "value": "pip install flask\n\npip install numpy\n\npip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu\n\npip install matplotlib\n\npip install seaborn\n\npip install hdbscan\n"
      },
      "source": "https://raw.githubusercontent.com/ghaiyan/TOAST/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "2. run the web server version",
        "parent_header": [
          "TOAST\uff1aa method for identifying Tad bOundaries based on graph Auto-encoders and clustering"
        ],
        "type": "Text_excerpt",
        "value": "When the environment is prepared, you can downlaod the TOAST-webserver.zip, and just run the webserver.py using the following code:\n\n>conda activate pytorch1.7.1\n\n>python webserver.py\n\nvisit the web linker:  http://127.0.0.1:5000\n\n"
      },
      "source": "https://raw.githubusercontent.com/ghaiyan/TOAST/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "running",
        "parent_header": [
          "TOAST\uff1aa method for identifying Tad bOundaries based on graph Auto-encoders and clustering"
        ],
        "type": "Text_excerpt",
        "value": "enter the /src folder, you can do the following process:\n(1)toast.py: run to get and plot TADs. you can run it by justing changing the input and output folder.\n\n(2)plot_heatmaps.py: plot heatmaps for all TADs\n\n(3)evaulate_TAD.py:evalute TADs\n\n(4)evaulate_TAD-simnarity.py: compare the similarity between TADs.\n\n(5)evaluate-achor-count.py:compute the anchor count for Chip-seq factors.\n\n(6)plot_TAD_markers.py: plot the CHip-seq tracks.\n\n(7)plot-man-figures.py: plot figures in this paper.\n\n"
      },
      "source": "https://raw.githubusercontent.com/ghaiyan/TOAST/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "license",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 00:05:17",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ]
}