{
  "application_domain": [
    {
      "confidence": 29.66,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/wmalab/scHiCDiff"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2021-03-18T19:25:03Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-04-05T14:49:31Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 0.9777938112850254,
      "result": {
        "original_header": "scHiCDiff",
        "type": "Text_excerpt",
        "value": "scHiCDiff is a novel statistical algorithm to detect differential chromatin interactions (DCIs) between two Hi-C experiments at single-cell level. Here, we introduced 4 ways to capture the DCIs: two non-parametric tests (Kolmogorov\u2013Smirnov test/ Cram\u00e9r-von Mises test) and parametric likelihood ratio test with two regression models (Negative Binomial/ Zero-inflated Negative Binomial). Non-parametric tests are advantageous by allowing us detecting DCIs without any assumption on data distribution; negative binomial(NB) is the most common assumption for interaction counts in bulk Hi-C parametric approaches, while zero-inflated Negative Binomial(ZINB) regression models is specially designated for the interaction comparison at single-cell level by taking the excessive zeros feature into consideration. \n"
      },
      "source": "https://raw.githubusercontent.com/wmalab/scHiCDiff/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/wmalab/scHiCDiff/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/wmalab/scHiCDiff/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "wmalab/scHiCDiff"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "scHiCDiff"
      },
      "source": "https://raw.githubusercontent.com/wmalab/scHiCDiff/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "To install and load the developmental version of scHiCDiff in R:\n\n```\n\ninstall.packages(\"path/scHiCDiff_1.0.tar.gz\", repos = NULL, type =\"source\")\nlibrary(scHiCDiff)\n\n```"
      },
      "source": "https://raw.githubusercontent.com/wmalab/scHiCDiff/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/wmalab/scHiCDiff/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "The MIT License (MIT)\n\n\nYou may use, copy, merge, distribute and modify the software as long as you track changes/dates in source files, \nbut you need to state any significant changes made to the original software when you revise the software.\nAny modifications to or software including (via compiler) MIT-licensed code must also be made available along \nwith build & install instructions.\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/wmalab/scHiCDiff/main/license",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "License",
        "type": "Text_excerpt",
        "value": " MIT\n"
      },
      "source": "https://raw.githubusercontent.com/wmalab/scHiCDiff/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "scHiCDiff"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "wmalab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 31171,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/wmalab/scHiCDiff/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 00:00:10",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Usage",
        "type": "Text_excerpt",
        "value": "The functions in scHiCDiff can be classified as two types: The first type is the normalization function (scHiCDiff.sim) and the other type is the detection function (scHiCDiff.KS, scHiCDiff.CVM, scHiCDiff.NB and scHiCDiff.ZINB). \n"
      },
      "source": "https://raw.githubusercontent.com/wmalab/scHiCDiff/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Normalization Function",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "The inputs of the normalization function scHiCDiff.norm are illustrated below:\n\n``` \nbias.info.path      The pathway of the three local features (effective length,GC content \n                    and mappability of fragment ends) of all bins. The generation of these \n                    items is available at http://dna.cs.miami.edu/scHiCNorm.\ndat_HiC             A N*N scHi-C matrix.\n```\n\nThe function returns the normalized Hi-C matrix.\n\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/wmalab/scHiCDiff/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Detection Functions",
        "parent_header": [
          "Usage"
        ],
        "type": "Text_excerpt",
        "value": "The inputs for all detection functions are illustrated below:\n\n```\ncount.table      A non-negative  matrix of scHi-C normalized read counts.The rows of the \n                 matrix are bin pair and columns are samples/cells.\ngroup            A vector of factor which mentions the two condition to be compared, \n                 corresponding to the columns in the count table.\n```\n\nThe detection function will return a data frame containing the differential chromatin interaction (DCI) analysis results, rows are bin pairs and columns lists the related statistics.\n\nThe outputs for the two parametric models are listed below:\n\n```\nbin_1,bin_2          The interacting region of the bin pair.\nmu_1,mu_2,           MLE of the parameters of NB/ZINB/NBH of group 1 and group 2,\ntheta_1,theta_2      where mu and theta represent the mean and dispersion estimate of\n(pi_1,pi_2)          negative binomial, pi denotes the estimate of zero percentange\nnorm_total_mean_1,   Mean of normalized read counts of group 1 and group 2.\nnorm_total_mean_2\nnorm_foldChange      norm_total_mean_1/norm_total_mean_2.\nchi2LR1              Chi-square statistic for hypothesis testing of H0.\npvalue               P value of hypothesis testing of H0 (underlying whether a bin pair \n                     is a DCI).\npvalue.adj.FDR       Adjusted P value of H0's pvalue using Benjamini & Hochberg's method.\nRemark               Record of abnormal program information.\n```\nThe outputs for the non-parametric tests are shown below:\n\n```\nbin_1,bin_2          The interacting region of the bin pair.\ntest.statistic       The statistic given by KS/CVM test.\npvalue               P value of hypothesis testing of H0 (underlying whether a bin pair \n                     is a DCI).\npvalue.adj           Adjusted P value of H0's pvalue using Benjamini & Hochberg's method.\n```\n\nExample: The simulated data getting from chr1 of  1CDX1 with cell num=50, fold change=5 and resolution=200kb (Nagano et.al.) were untilized as sample data. In the sample data file, it lists all bin pairs with at least one non-zero counts in one of cell types. The first two columns represent the interacting region of each listed bin pair, then followed 50 columns denote the normalized read counts for condition 1 and the last 50 columns denote the normalized read counts for condition 2.\n\n\n```\ncount.table <- readRDS(paste(\"path/sampledata/sim 1 .rds\")\ncount.table <- as.matrix(count.table)\ngroup <- factor(c(rep(1,50), rep(2,50)))\nresult.ks <- scHiCDiff.KS(count.table,group)\nresult.cvm <- scHiCDiff.CVM(count.table,group)\nresult.nb <- scHiCDiff.NB(count.table,group)\nresult.zinb <- scHiCDiff.ZINB(count.table,group)\n#common DCIs identified by four methods\ncommon.DCIs <- scHiCDiff.common.DCI(result.ks,result.cvm,result.nb,result.zinb)\n```\n\n\n\n\n\n\n\n"
      },
      "source": "https://raw.githubusercontent.com/wmalab/scHiCDiff/main/README.md",
      "technique": "header_analysis"
    }
  ]
}