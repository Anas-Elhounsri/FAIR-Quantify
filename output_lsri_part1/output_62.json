{
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/YeoLab/skipper"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-08-25T01:50:21Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-03-24T08:12:45Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Skip the peaks and expose RNA-binding in CLIP data"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9254415085483656,
      "result": {
        "original_header": "skipper",
        "type": "Text_excerpt",
        "value": "Skip the peaks and expose RNA-binding in CLIP data \nAlternatively, at least as of this writing, Skipper is compatible with the newest version of R and its packages. The required R packages can be installed for an existing R installation as follows: \n<h2>Preparing to run Skipper</h2>\nSkipper uses a Snakemake workflow. The `Skipper.py` file contains the rules necessary to process CLIP data from fastqs. Skipper also supports running on BAMs - note that Skipper's analysis of repetitive elements will assume that non-uniquely mapping reads are contained within the BAM files. \n| Resource      | Description |\n| ----------- | ----------- |\n| MANIFEST            | Information on samples to run                                                        |\n| GENOME              | Samtools- and STAR-indexed fasta of genome for the sample of interest                |\n| STAR_DIR            | Path to STAR reference for aligning sequencing reads                | \n| Path    | Description |\n| ----------- | ----------- |\n| EXE_DIR     | For convenience to point to stable locally installed software: it is added to PATH when Skipper runs |\n| TOOL_DIR    | Directory for the tools located in the GitHub        | \n\nInformation about the CLIP library to be analyzed is also required: \n| Setting      | Description |\n| ----------- | ----------- |\n| UMI_SIZE            | Bases to trim for deduplication (10 for current eCLIP)       |\n| INFORMATIVE_READ    | Which read (1 or 2) reflects the crosslink site (for Paired End runs)        |\n| OVERDISPERSION_MODE | Overdispersion can be estimated from multiple input replicates (\"input\") or multiple CLIP replicates (\"clip\"): \"input\" is recommended | \n\n<h2>Customizable input for Skipper</h2>\nSkipper accepts customizable files for several steps, which are also entered in the `Skipper_config.py` file:  \n| Input      | Description |\n| ----------- | ----------- |\n| GFF                 | Gzipped gene annotation to partition the transcriptome and count reads.                       |\n| PARTITION*           | Gzipped BED file of windows to test (can be generated from GFF file)                          |\n| FEATURE_ANNOTATIONS* | Gzipped TSV file with the following columns: chrom,start,end,name,score,strand,feature_id,feature_bin,feature_type_top,feature_types,gene_name,gene_id, transcript_ids,gene_type_top,transcript_type_top,gene_types,transcript_types (can be generated from GFF file) |\n| BLACKLIST           | Removes windows from reproducible enriched window files. Start and end coordinates must match tiled windows exactly.      |\n| ACCESSION_RANKINGS  | A ranking of gene and transcript types present in the GFF to facilitate the transcriptome partitioning  |\n| REPEAT_TABLE        | Coordinates of repetitive elements, available from UCSC Genome Browser               |\n| REPEAT_BED*          | Gzipped sorted, nonoverlapping, tab-delimited annotations of repetitive elements: chr,start,end,label,score,strand,name,class,family,proportion_gc  |\n| GENE_SETS           | GMT files of gene sets for gene set enrichment calculation |\n| GENE_SET_REFERENCE  | TSV of gene set name, number of windows belonging to term, and fraction of windows that lie in gene set genes |\n| GENE_SET_DISTANCE   | RDS of a matrix containing jaccard index scores for all pairs of gene sets in GMT file | \n*Skipper can generate these files from other input, or you can make your own versions with the appropriate columns. \nWant to make your own partition from RNA-seq of a sample? Run the tools/subset_gff.py script on RNA-seq quantifications from Salmon. We used a 1 TPM cutoff. Enter the resulting file for the GFF. This makes the window annotations more accurate but we haven\u2019t carefully examined how important it is for the cell sample to match. \n| Column      | Description |\n| ----------- | ----------- |\n| Experiment       | CLIP samples will be compared against Input samples within an experiment. The same sample can be used in multiple experiments |\n| Sample           | Each CLIP and Input sample will be processed separately until testing for differential binding   |\n| Cells            | A place to record information on the cell sample used: this is not currently used in analysis  |\n| Input_replicate  | Replicate # for the same Sample. The same Input replicate (fastq and number) can be used for multiple CLIP replicates |\n| Input_adapter    | Fasta of adapter sequences for Input replicate                                                     |\n| Input_fastq      | Path to Input replicate fastq (multiple files can be entered per cell to be concatenated            |\n| Input_bam       | (Optional) Enter path to Input BAM file            |\n| CLIP_replicate   | Replicate # for the same Sample. Distinct CLIP replicates are required |\n| CLIP_adapter     | Fasta of adapter sequences for CLIP replicate                                                     |\n| CLIP_fastq       | Path to CLIP replicate fastq (multiple files can be entered per cell to be concatenated            |\n| CLIP_bam       | (Optional) Enter path to CLIP BAM file            | \nSkipper requires multiple CLIP replicates of the same sample to call reproducible windows. Enter multiple replicates with the same experiment and sample columns on separate lines, incrementing the replicate number for each replicate. The same input replicate can be used in multiple experiments and repeated for the same sample if you estimate overdispersion from CLIP replicates. If the same replicate is used for multiple comparisons, the sample and replicate columns must be consistent. \nCreate a new directory to store output, copy the Snakemake and config files, and make all edits necessary to the config file. In the `all` rule of the `Skipper.py` file, comment out output that you do not wish to inspect. \nSkipper produces numerous output files. The `output/figures` directory contains figures summarizing the data.\n| Output      | Description |\n| ----------- | ----------- |\n| all_reads       | Visualization of RNA region preferences based on total reads instead of called windows |\n| threshold_scan  | Visualization of selection of minimum read coverage for statistical testing  |\n| input_distributions | Visualization of betabinomial fits to aggregate data |\n| enriched_windows | QC of called enriched windows  |\n| enrichment_concordance  | Mosaic plot of agreement between called enriched windows between replicates |\n| enrichment_reproducibility  | Number of total and enriched windows as a function of the number of replicates included  |\n| reproducible_enriched_windows | Visualization of RNA region preferences for windows called by at least two replicates   |\n| gene_sets        | Visualization of top enriched GO terms relative to ENCODE reproducible enriched windows   |\n| clip_scatter_re  | Visualization of enriched repetitive elements   |\n| tsne       | t-SNE visualization of binding preferences releative to ENCODE RBPs   | \n"
      },
      "source": "https://raw.githubusercontent.com/YeoLab/skipper/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/YeoLab/skipper/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 3
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/YeoLab/skipper/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "YeoLab/skipper"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "skipper"
      },
      "source": "https://raw.githubusercontent.com/YeoLab/skipper/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_script_file": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/YeoLab/skipper/main/tools/get_R.sh"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/YeoLab/skipper/main/installation/install_umicollapse.sh"
      },
      "technique": "file_exploration"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Option 1: Manual installation (Linux-amd64)",
        "parent_header": [
          "skipper",
          "Prerequisites"
        ],
        "type": "Text_excerpt",
        "value": "# skipper\n![Skipper cartoon](documents/logo.png)\n\nSkip the peaks and expose RNA-binding in CLIP data\n\nSee published article in Cell Genomics: https://www.cell.com/cell-genomics/fulltext/S2666-979X(23)00085-X\n\n<h2>Prerequisites</h2>\nSkipper requires several executables and packages:\n\n| Tool      | Link |\n| ----------- | ----------- |\n| R           | https://www.r-project.org/       |\n| Python   | https://www.python.org/downloads/        |\n| Conda/Mamba   | https://conda.io/projects/conda/en/latest/user-guide/install/index.html        |\n| Snakemake   | https://snakemake.readthedocs.io/en/stable/getting_started/installation.html        |\n| UMICollapse   | https://github.com/Daniel-Liu-c0deb0t/UMICollapse        |\n| Skewer   | https://github.com/relipmoc/skewer        |\n| Fastp    | https://github.com/OpenGene/fastp        |\n| bedtools     | https://github.com/arq5x/bedtools2        |\n| STAR   | https://github.com/alexdobin/STAR        |\n| Java   | https://jdk.java.net/20/        |\n| samtools | http://www.htslib.org/download/        |\n| FastQC | https://www.bioinformatics.babraham.ac.uk/projects/fastqc/ |\n| HOMER | http://homer.ucsd.edu/homer/introduction/install.html |\n\nFor example, below are some commands for installing Miniconda.\n\n`curl -L -O \"https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\"`\n\n`bash Miniconda3-latest-Linux-x86_64.sh`\n\nSkipper requires several python and R packages. In order to install the precise versions used in the manuscript, we have provided skipper_env.yaml to install the used versions of R and corresponding packages from source.\n\n<h3>Option 1: Manual installation (Linux-amd64)</h3>\n\nUse conda to create a snakemake environment for installing required packages:\n\n`conda env create -f installation/skipper_env.yaml`\n\nUse the install_umicollapse.sh script to complete installation of UMICollapse v1.0.0 in the installation folder. Expect the whole process to take around 30 seconds. \n\n`cd installation && ./install_umicollapse.sh`\n\nAlternatively, at least as of this writing, Skipper is compatible with the newest version of R and its packages. The required R packages can be installed for an existing R installation as follows:\n\n`install.packages(c(\"tidyverse\", \"VGAM\", \"viridis\", \"ggrepel\", \"RColorBrewer\", \"Rtsne\", \"ggupset\", \"ggdendro\", \"cowplot\"))`\n\n`if (!require(\"BiocManager\", quietly = TRUE))`\n    `install.packages(\"BiocManager\")`\n`BiocManager::install(c(\"GenomicRanges\",\"fgsea\",\"rtracklayer\"))`\n\nPaths to locally installed versions can be supplied in the config file, described below.\n\n<h3>Option 2: Singularity installation (Linux-amd64)</h3>\n\n`conda create -n snakemake snakemake==7.32.3 star==2.7.10b`\n\nSingularity setup: https://docs.sylabs.io/guides/3.11/admin-guide/installation.html\n\n<h2>Preparing to run Skipper</h2>\nSkipper uses a Snakemake workflow. The `Skipper.py` file contains the rules necessary to process CLIP data from fastqs. Skipper also supports running on BAMs - note that Skipper's analysis of repetitive elements will assume that non-uniquely mapping reads are contained within the BAM files.\n\nProviding an absolute path to the GitHub repository `REPO_PATH` will help Snakemake find resources regardless of the directory where Skipper is run.\n\nInternal to the Yeo lab, setting the `REPO_PATH` to `/projects/ps-yeolab3/eboyle/encode/pipeline/github/yeo` will save time on preprocessing annotation files (check the annotation folder for HepG2, K562, or HEK293T. More annotations are available at `/projects/ps-yeolab4/software/skipper/1.0.0/bin/skipper/annotations/`).\n\nNumerous resources must be entered in the `Skipper_config.py` file:\n\n| Resource      | Description |\n| ----------- | ----------- |\n| MANIFEST            | Information on samples to run                                                        |\n| GENOME              | Samtools- and STAR-indexed fasta of genome for the sample of interest                |\n| STAR_DIR            | Path to STAR reference for aligning sequencing reads                |\n\n\nOther paths to help Skipper run must be entered: \n\n| Path    | Description |\n| ----------- | ----------- |\n| EXE_DIR     | For convenience to point to stable locally installed software: it is added to PATH when Skipper runs |\n| TOOL_DIR    | Directory for the tools located in the GitHub        |\n\n\nInformation about the CLIP library to be analyzed is also required:\n\n| Setting      | Description |\n| ----------- | ----------- |\n| UMI_SIZE            | Bases to trim for deduplication (10 for current eCLIP)       |\n| INFORMATIVE_READ    | Which read (1 or 2) reflects the crosslink site (for Paired End runs)        |\n| OVERDISPERSION_MODE | Overdispersion can be estimated from multiple input replicates (\"input\") or multiple CLIP replicates (\"clip\"): \"input\" is recommended |\n\n\n<h2>Customizable input for Skipper</h2>\nSkipper accepts customizable files for several steps, which are also entered in the `Skipper_config.py` file: \n\n| Input      | Description |\n| ----------- | ----------- |\n| GFF                 | Gzipped gene annotation to partition the transcriptome and count reads.                       |\n| PARTITION*           | Gzipped BED file of windows to test (can be generated from GFF file)                          |\n| FEATURE_ANNOTATIONS* | Gzipped TSV file with the following columns: chrom,start,end,name,score,strand,feature_id,feature_bin,feature_type_top,feature_types,gene_name,gene_id, transcript_ids,gene_type_top,transcript_type_top,gene_types,transcript_types (can be generated from GFF file) |\n| BLACKLIST           | Removes windows from reproducible enriched window files. Start and end coordinates must match tiled windows exactly.      |\n| ACCESSION_RANKINGS  | A ranking of gene and transcript types present in the GFF to facilitate the transcriptome partitioning  |\n| REPEAT_TABLE        | Coordinates of repetitive elements, available from UCSC Genome Browser               |\n| REPEAT_BED*          | Gzipped sorted, nonoverlapping, tab-delimited annotations of repetitive elements: chr,start,end,label,score,strand,name,class,family,proportion_gc  |\n| GENE_SETS           | GMT files of gene sets for gene set enrichment calculation |\n| GENE_SET_REFERENCE  | TSV of gene set name, number of windows belonging to term, and fraction of windows that lie in gene set genes |\n| GENE_SET_DISTANCE   | RDS of a matrix containing jaccard index scores for all pairs of gene sets in GMT file |\n\n*Skipper can generate these files from other input, or you can make your own versions with the appropriate columns.\n\nWant to make your own partition from RNA-seq of a sample? Run the tools/subset_gff.py script on RNA-seq quantifications from Salmon. We used a 1 TPM cutoff. Enter the resulting file for the GFF. This makes the window annotations more accurate but we haven\u2019t carefully examined how important it is for the cell sample to match.\n\n<h2>Making a manifest</h2>\n\n| Column      | Description |\n| ----------- | ----------- |\n| Experiment       | CLIP samples will be compared against Input samples within an experiment. The same sample can be used in multiple experiments |\n| Sample           | Each CLIP and Input sample will be processed separately until testing for differential binding   |\n| Cells            | A place to record information on the cell sample used: this is not currently used in analysis  |\n| Input_replicate  | Replicate # for the same Sample. The same Input replicate (fastq and number) can be used for multiple CLIP replicates |\n| Input_adapter    | Fasta of adapter sequences for Input replicate                                                     |\n| Input_fastq      | Path to Input replicate fastq (multiple files can be entered per cell to be concatenated            |\n| Input_bam       | (Optional) Enter path to Input BAM file            |\n| CLIP_replicate   | Replicate # for the same Sample. Distinct CLIP replicates are required |\n| CLIP_adapter     | Fasta of adapter sequences for CLIP replicate                                                     |\n| CLIP_fastq       | Path to CLIP replicate fastq (multiple files can be entered per cell to be concatenated            |\n| CLIP_bam       | (Optional) Enter path to CLIP BAM file            |\n\nSkipper requires multiple CLIP replicates of the same sample to call reproducible windows. Enter multiple replicates with the same experiment and sample columns on separate lines, incrementing the replicate number for each replicate. The same input replicate can be used in multiple experiments and repeated for the same sample if you estimate overdispersion from CLIP replicates. If the same replicate is used for multiple comparisons, the sample and replicate columns must be consistent.\n\nSee the example manifest in the example folder for the exact formatting and to test running Skipper by downloading the example dataset: https://zenodo.org/records/10636793.\n\n<h2>Running Skipper</h2>\n\nSkipper can be run like any other Snakemake workflow. \n\nCreate a new directory to store output, copy the Snakemake and config files, and make all edits necessary to the config file. In the `all` rule of the `Skipper.py` file, comment out output that you do not wish to inspect.\n\nRemember to load the Snakemake environment before running\n\n`conda activate snakemake`\n\nUse the dry run function to confirm that Snakemake can parse all the information:\n\n`snakemake -ns Skipper.py -j 1`\n\nOnce Snakemake has confirmed DAG creation, if applicable, submit the jobs using high performance computing infrastructure options suit you:\n\n<h3>Option 1: Manually installed packages</h3>\n\n`snakemake -kps Skipper.py -w 15 -j 30`\n\n`snakemake -kps Skipper.py -w 15 -j 30 --cluster \"sbatch -t {params.run_time} -e {params.error_file} -o {params.out_file} -p condo -q condo -A csd792 --tasks-per-node {threads} --job-name {params.job_name} --mem {params.memory}\"`\n\n<h3>Option 2: Singularity</h3>\n\n`snakemake -kps Skipper.py -w 15 -j 30 --use-singularity --singularity-args \"--bind /tscc\"`\n\n`snakemake -kps Skipper.py -w 15 -j 30 --use-singularity --singularity-args \"--bind /tscc\" --cluster \"sbatch -t {params.run_time} -e {params.error_file} -o {params.out_file} -p condo -q condo -A csd792 --tasks-per-node {threads} --job-name {params.job_name} --mem {params.memory}\"`\n\nDid Skipper terminate? Sometimes jobs fail - inspect any error output and rerun the same command if there is no apparent explanation such as uninstalled dependencies or a misformatted input file. Snakemake will try to pick up where it left off.\n\n<h2>Skipper output</h2>\n\nSkipper produces numerous output files. The `output/figures` directory contains figures summarizing the data.\n| Output      | Description |\n| ----------- | ----------- |\n| all_reads       | Visualization of RNA region preferences based on total reads instead of called windows |\n| threshold_scan  | Visualization of selection of minimum read coverage for statistical testing  |\n| input_distributions | Visualization of betabinomial fits to aggregate data |\n| enriched_windows | QC of called enriched windows  |\n| enrichment_concordance  | Mosaic plot of agreement between called enriched windows between replicates |\n| enrichment_reproducibility  | Number of total and enriched windows as a function of the number of replicates included  |\n| reproducible_enriched_windows | Visualization of RNA region preferences for windows called by at least two replicates   |\n| gene_sets        | Visualization of top enriched GO terms relative to ENCODE reproducible enriched windows   |\n| clip_scatter_re  | Visualization of enriched repetitive elements   |\n| tsne       | t-SNE visualization of binding preferences releative to ENCODE RBPs   |\n\nKey outputs: Annotated reproducible enriched windows can be accessed at `output/reproducible_enriched_windows/` and Homer motif output is at `output/homer/`\n\nExample CLIP fastqs and processed data are available at GEO and SRA: `https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE213867`\n"
      },
      "source": "https://raw.githubusercontent.com/YeoLab/skipper/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Option 2: Singularity installation (Linux-amd64)",
        "parent_header": [
          "skipper",
          "Prerequisites"
        ],
        "type": "Text_excerpt",
        "value": "# skipper\n![Skipper cartoon](documents/logo.png)\n\nSkip the peaks and expose RNA-binding in CLIP data\n\nSee published article in Cell Genomics: https://www.cell.com/cell-genomics/fulltext/S2666-979X(23)00085-X\n\n<h2>Prerequisites</h2>\nSkipper requires several executables and packages:\n\n| Tool      | Link |\n| ----------- | ----------- |\n| R           | https://www.r-project.org/       |\n| Python   | https://www.python.org/downloads/        |\n| Conda/Mamba   | https://conda.io/projects/conda/en/latest/user-guide/install/index.html        |\n| Snakemake   | https://snakemake.readthedocs.io/en/stable/getting_started/installation.html        |\n| UMICollapse   | https://github.com/Daniel-Liu-c0deb0t/UMICollapse        |\n| Skewer   | https://github.com/relipmoc/skewer        |\n| Fastp    | https://github.com/OpenGene/fastp        |\n| bedtools     | https://github.com/arq5x/bedtools2        |\n| STAR   | https://github.com/alexdobin/STAR        |\n| Java   | https://jdk.java.net/20/        |\n| samtools | http://www.htslib.org/download/        |\n| FastQC | https://www.bioinformatics.babraham.ac.uk/projects/fastqc/ |\n| HOMER | http://homer.ucsd.edu/homer/introduction/install.html |\n\nFor example, below are some commands for installing Miniconda.\n\n`curl -L -O \"https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\"`\n\n`bash Miniconda3-latest-Linux-x86_64.sh`\n\nSkipper requires several python and R packages. In order to install the precise versions used in the manuscript, we have provided skipper_env.yaml to install the used versions of R and corresponding packages from source.\n\n<h3>Option 1: Manual installation (Linux-amd64)</h3>\n\nUse conda to create a snakemake environment for installing required packages:\n\n`conda env create -f installation/skipper_env.yaml`\n\nUse the install_umicollapse.sh script to complete installation of UMICollapse v1.0.0 in the installation folder. Expect the whole process to take around 30 seconds. \n\n`cd installation && ./install_umicollapse.sh`\n\nAlternatively, at least as of this writing, Skipper is compatible with the newest version of R and its packages. The required R packages can be installed for an existing R installation as follows:\n\n`install.packages(c(\"tidyverse\", \"VGAM\", \"viridis\", \"ggrepel\", \"RColorBrewer\", \"Rtsne\", \"ggupset\", \"ggdendro\", \"cowplot\"))`\n\n`if (!require(\"BiocManager\", quietly = TRUE))`\n    `install.packages(\"BiocManager\")`\n`BiocManager::install(c(\"GenomicRanges\",\"fgsea\",\"rtracklayer\"))`\n\nPaths to locally installed versions can be supplied in the config file, described below.\n\n<h3>Option 2: Singularity installation (Linux-amd64)</h3>\n\n`conda create -n snakemake snakemake==7.32.3 star==2.7.10b`\n\nSingularity setup: https://docs.sylabs.io/guides/3.11/admin-guide/installation.html\n\n<h2>Preparing to run Skipper</h2>\nSkipper uses a Snakemake workflow. The `Skipper.py` file contains the rules necessary to process CLIP data from fastqs. Skipper also supports running on BAMs - note that Skipper's analysis of repetitive elements will assume that non-uniquely mapping reads are contained within the BAM files.\n\nProviding an absolute path to the GitHub repository `REPO_PATH` will help Snakemake find resources regardless of the directory where Skipper is run.\n\nInternal to the Yeo lab, setting the `REPO_PATH` to `/projects/ps-yeolab3/eboyle/encode/pipeline/github/yeo` will save time on preprocessing annotation files (check the annotation folder for HepG2, K562, or HEK293T. More annotations are available at `/projects/ps-yeolab4/software/skipper/1.0.0/bin/skipper/annotations/`).\n\nNumerous resources must be entered in the `Skipper_config.py` file:\n\n| Resource      | Description |\n| ----------- | ----------- |\n| MANIFEST            | Information on samples to run                                                        |\n| GENOME              | Samtools- and STAR-indexed fasta of genome for the sample of interest                |\n| STAR_DIR            | Path to STAR reference for aligning sequencing reads                |\n\n\nOther paths to help Skipper run must be entered: \n\n| Path    | Description |\n| ----------- | ----------- |\n| EXE_DIR     | For convenience to point to stable locally installed software: it is added to PATH when Skipper runs |\n| TOOL_DIR    | Directory for the tools located in the GitHub        |\n\n\nInformation about the CLIP library to be analyzed is also required:\n\n| Setting      | Description |\n| ----------- | ----------- |\n| UMI_SIZE            | Bases to trim for deduplication (10 for current eCLIP)       |\n| INFORMATIVE_READ    | Which read (1 or 2) reflects the crosslink site (for Paired End runs)        |\n| OVERDISPERSION_MODE | Overdispersion can be estimated from multiple input replicates (\"input\") or multiple CLIP replicates (\"clip\"): \"input\" is recommended |\n\n\n<h2>Customizable input for Skipper</h2>\nSkipper accepts customizable files for several steps, which are also entered in the `Skipper_config.py` file: \n\n| Input      | Description |\n| ----------- | ----------- |\n| GFF                 | Gzipped gene annotation to partition the transcriptome and count reads.                       |\n| PARTITION*           | Gzipped BED file of windows to test (can be generated from GFF file)                          |\n| FEATURE_ANNOTATIONS* | Gzipped TSV file with the following columns: chrom,start,end,name,score,strand,feature_id,feature_bin,feature_type_top,feature_types,gene_name,gene_id, transcript_ids,gene_type_top,transcript_type_top,gene_types,transcript_types (can be generated from GFF file) |\n| BLACKLIST           | Removes windows from reproducible enriched window files. Start and end coordinates must match tiled windows exactly.      |\n| ACCESSION_RANKINGS  | A ranking of gene and transcript types present in the GFF to facilitate the transcriptome partitioning  |\n| REPEAT_TABLE        | Coordinates of repetitive elements, available from UCSC Genome Browser               |\n| REPEAT_BED*          | Gzipped sorted, nonoverlapping, tab-delimited annotations of repetitive elements: chr,start,end,label,score,strand,name,class,family,proportion_gc  |\n| GENE_SETS           | GMT files of gene sets for gene set enrichment calculation |\n| GENE_SET_REFERENCE  | TSV of gene set name, number of windows belonging to term, and fraction of windows that lie in gene set genes |\n| GENE_SET_DISTANCE   | RDS of a matrix containing jaccard index scores for all pairs of gene sets in GMT file |\n\n*Skipper can generate these files from other input, or you can make your own versions with the appropriate columns.\n\nWant to make your own partition from RNA-seq of a sample? Run the tools/subset_gff.py script on RNA-seq quantifications from Salmon. We used a 1 TPM cutoff. Enter the resulting file for the GFF. This makes the window annotations more accurate but we haven\u2019t carefully examined how important it is for the cell sample to match.\n\n<h2>Making a manifest</h2>\n\n| Column      | Description |\n| ----------- | ----------- |\n| Experiment       | CLIP samples will be compared against Input samples within an experiment. The same sample can be used in multiple experiments |\n| Sample           | Each CLIP and Input sample will be processed separately until testing for differential binding   |\n| Cells            | A place to record information on the cell sample used: this is not currently used in analysis  |\n| Input_replicate  | Replicate # for the same Sample. The same Input replicate (fastq and number) can be used for multiple CLIP replicates |\n| Input_adapter    | Fasta of adapter sequences for Input replicate                                                     |\n| Input_fastq      | Path to Input replicate fastq (multiple files can be entered per cell to be concatenated            |\n| Input_bam       | (Optional) Enter path to Input BAM file            |\n| CLIP_replicate   | Replicate # for the same Sample. Distinct CLIP replicates are required |\n| CLIP_adapter     | Fasta of adapter sequences for CLIP replicate                                                     |\n| CLIP_fastq       | Path to CLIP replicate fastq (multiple files can be entered per cell to be concatenated            |\n| CLIP_bam       | (Optional) Enter path to CLIP BAM file            |\n\nSkipper requires multiple CLIP replicates of the same sample to call reproducible windows. Enter multiple replicates with the same experiment and sample columns on separate lines, incrementing the replicate number for each replicate. The same input replicate can be used in multiple experiments and repeated for the same sample if you estimate overdispersion from CLIP replicates. If the same replicate is used for multiple comparisons, the sample and replicate columns must be consistent.\n\nSee the example manifest in the example folder for the exact formatting and to test running Skipper by downloading the example dataset: https://zenodo.org/records/10636793.\n\n<h2>Running Skipper</h2>\n\nSkipper can be run like any other Snakemake workflow. \n\nCreate a new directory to store output, copy the Snakemake and config files, and make all edits necessary to the config file. In the `all` rule of the `Skipper.py` file, comment out output that you do not wish to inspect.\n\nRemember to load the Snakemake environment before running\n\n`conda activate snakemake`\n\nUse the dry run function to confirm that Snakemake can parse all the information:\n\n`snakemake -ns Skipper.py -j 1`\n\nOnce Snakemake has confirmed DAG creation, if applicable, submit the jobs using high performance computing infrastructure options suit you:\n\n<h3>Option 1: Manually installed packages</h3>\n\n`snakemake -kps Skipper.py -w 15 -j 30`\n\n`snakemake -kps Skipper.py -w 15 -j 30 --cluster \"sbatch -t {params.run_time} -e {params.error_file} -o {params.out_file} -p condo -q condo -A csd792 --tasks-per-node {threads} --job-name {params.job_name} --mem {params.memory}\"`\n\n<h3>Option 2: Singularity</h3>\n\n`snakemake -kps Skipper.py -w 15 -j 30 --use-singularity --singularity-args \"--bind /tscc\"`\n\n`snakemake -kps Skipper.py -w 15 -j 30 --use-singularity --singularity-args \"--bind /tscc\" --cluster \"sbatch -t {params.run_time} -e {params.error_file} -o {params.out_file} -p condo -q condo -A csd792 --tasks-per-node {threads} --job-name {params.job_name} --mem {params.memory}\"`\n\nDid Skipper terminate? Sometimes jobs fail - inspect any error output and rerun the same command if there is no apparent explanation such as uninstalled dependencies or a misformatted input file. Snakemake will try to pick up where it left off.\n\n<h2>Skipper output</h2>\n\nSkipper produces numerous output files. The `output/figures` directory contains figures summarizing the data.\n| Output      | Description |\n| ----------- | ----------- |\n| all_reads       | Visualization of RNA region preferences based on total reads instead of called windows |\n| threshold_scan  | Visualization of selection of minimum read coverage for statistical testing  |\n| input_distributions | Visualization of betabinomial fits to aggregate data |\n| enriched_windows | QC of called enriched windows  |\n| enrichment_concordance  | Mosaic plot of agreement between called enriched windows between replicates |\n| enrichment_reproducibility  | Number of total and enriched windows as a function of the number of replicates included  |\n| reproducible_enriched_windows | Visualization of RNA region preferences for windows called by at least two replicates   |\n| gene_sets        | Visualization of top enriched GO terms relative to ENCODE reproducible enriched windows   |\n| clip_scatter_re  | Visualization of enriched repetitive elements   |\n| tsne       | t-SNE visualization of binding preferences releative to ENCODE RBPs   |\n\nKey outputs: Annotated reproducible enriched windows can be accessed at `output/reproducible_enriched_windows/` and Homer motif output is at `output/homer/`\n\nExample CLIP fastqs and processed data are available at GEO and SRA: `https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE213867`\n"
      },
      "source": "https://raw.githubusercontent.com/YeoLab/skipper/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Preparing to run Skipper",
        "parent_header": [
          "skipper"
        ],
        "type": "Text_excerpt",
        "value": "# skipper\n![Skipper cartoon](documents/logo.png)\n\nSkip the peaks and expose RNA-binding in CLIP data\n\nSee published article in Cell Genomics: https://www.cell.com/cell-genomics/fulltext/S2666-979X(23)00085-X\n\n<h2>Prerequisites</h2>\nSkipper requires several executables and packages:\n\n| Tool      | Link |\n| ----------- | ----------- |\n| R           | https://www.r-project.org/       |\n| Python   | https://www.python.org/downloads/        |\n| Conda/Mamba   | https://conda.io/projects/conda/en/latest/user-guide/install/index.html        |\n| Snakemake   | https://snakemake.readthedocs.io/en/stable/getting_started/installation.html        |\n| UMICollapse   | https://github.com/Daniel-Liu-c0deb0t/UMICollapse        |\n| Skewer   | https://github.com/relipmoc/skewer        |\n| Fastp    | https://github.com/OpenGene/fastp        |\n| bedtools     | https://github.com/arq5x/bedtools2        |\n| STAR   | https://github.com/alexdobin/STAR        |\n| Java   | https://jdk.java.net/20/        |\n| samtools | http://www.htslib.org/download/        |\n| FastQC | https://www.bioinformatics.babraham.ac.uk/projects/fastqc/ |\n| HOMER | http://homer.ucsd.edu/homer/introduction/install.html |\n\nFor example, below are some commands for installing Miniconda.\n\n`curl -L -O \"https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\"`\n\n`bash Miniconda3-latest-Linux-x86_64.sh`\n\nSkipper requires several python and R packages. In order to install the precise versions used in the manuscript, we have provided skipper_env.yaml to install the used versions of R and corresponding packages from source.\n\n<h3>Option 1: Manual installation (Linux-amd64)</h3>\n\nUse conda to create a snakemake environment for installing required packages:\n\n`conda env create -f installation/skipper_env.yaml`\n\nUse the install_umicollapse.sh script to complete installation of UMICollapse v1.0.0 in the installation folder. Expect the whole process to take around 30 seconds. \n\n`cd installation && ./install_umicollapse.sh`\n\nAlternatively, at least as of this writing, Skipper is compatible with the newest version of R and its packages. The required R packages can be installed for an existing R installation as follows:\n\n`install.packages(c(\"tidyverse\", \"VGAM\", \"viridis\", \"ggrepel\", \"RColorBrewer\", \"Rtsne\", \"ggupset\", \"ggdendro\", \"cowplot\"))`\n\n`if (!require(\"BiocManager\", quietly = TRUE))`\n    `install.packages(\"BiocManager\")`\n`BiocManager::install(c(\"GenomicRanges\",\"fgsea\",\"rtracklayer\"))`\n\nPaths to locally installed versions can be supplied in the config file, described below.\n\n<h3>Option 2: Singularity installation (Linux-amd64)</h3>\n\n`conda create -n snakemake snakemake==7.32.3 star==2.7.10b`\n\nSingularity setup: https://docs.sylabs.io/guides/3.11/admin-guide/installation.html\n\n<h2>Preparing to run Skipper</h2>\nSkipper uses a Snakemake workflow. The `Skipper.py` file contains the rules necessary to process CLIP data from fastqs. Skipper also supports running on BAMs - note that Skipper's analysis of repetitive elements will assume that non-uniquely mapping reads are contained within the BAM files.\n\nProviding an absolute path to the GitHub repository `REPO_PATH` will help Snakemake find resources regardless of the directory where Skipper is run.\n\nInternal to the Yeo lab, setting the `REPO_PATH` to `/projects/ps-yeolab3/eboyle/encode/pipeline/github/yeo` will save time on preprocessing annotation files (check the annotation folder for HepG2, K562, or HEK293T. More annotations are available at `/projects/ps-yeolab4/software/skipper/1.0.0/bin/skipper/annotations/`).\n\nNumerous resources must be entered in the `Skipper_config.py` file:\n\n| Resource      | Description |\n| ----------- | ----------- |\n| MANIFEST            | Information on samples to run                                                        |\n| GENOME              | Samtools- and STAR-indexed fasta of genome for the sample of interest                |\n| STAR_DIR            | Path to STAR reference for aligning sequencing reads                |\n\n\nOther paths to help Skipper run must be entered: \n\n| Path    | Description |\n| ----------- | ----------- |\n| EXE_DIR     | For convenience to point to stable locally installed software: it is added to PATH when Skipper runs |\n| TOOL_DIR    | Directory for the tools located in the GitHub        |\n\n\nInformation about the CLIP library to be analyzed is also required:\n\n| Setting      | Description |\n| ----------- | ----------- |\n| UMI_SIZE            | Bases to trim for deduplication (10 for current eCLIP)       |\n| INFORMATIVE_READ    | Which read (1 or 2) reflects the crosslink site (for Paired End runs)        |\n| OVERDISPERSION_MODE | Overdispersion can be estimated from multiple input replicates (\"input\") or multiple CLIP replicates (\"clip\"): \"input\" is recommended |\n\n\n<h2>Customizable input for Skipper</h2>\nSkipper accepts customizable files for several steps, which are also entered in the `Skipper_config.py` file: \n\n| Input      | Description |\n| ----------- | ----------- |\n| GFF                 | Gzipped gene annotation to partition the transcriptome and count reads.                       |\n| PARTITION*           | Gzipped BED file of windows to test (can be generated from GFF file)                          |\n| FEATURE_ANNOTATIONS* | Gzipped TSV file with the following columns: chrom,start,end,name,score,strand,feature_id,feature_bin,feature_type_top,feature_types,gene_name,gene_id, transcript_ids,gene_type_top,transcript_type_top,gene_types,transcript_types (can be generated from GFF file) |\n| BLACKLIST           | Removes windows from reproducible enriched window files. Start and end coordinates must match tiled windows exactly.      |\n| ACCESSION_RANKINGS  | A ranking of gene and transcript types present in the GFF to facilitate the transcriptome partitioning  |\n| REPEAT_TABLE        | Coordinates of repetitive elements, available from UCSC Genome Browser               |\n| REPEAT_BED*          | Gzipped sorted, nonoverlapping, tab-delimited annotations of repetitive elements: chr,start,end,label,score,strand,name,class,family,proportion_gc  |\n| GENE_SETS           | GMT files of gene sets for gene set enrichment calculation |\n| GENE_SET_REFERENCE  | TSV of gene set name, number of windows belonging to term, and fraction of windows that lie in gene set genes |\n| GENE_SET_DISTANCE   | RDS of a matrix containing jaccard index scores for all pairs of gene sets in GMT file |\n\n*Skipper can generate these files from other input, or you can make your own versions with the appropriate columns.\n\nWant to make your own partition from RNA-seq of a sample? Run the tools/subset_gff.py script on RNA-seq quantifications from Salmon. We used a 1 TPM cutoff. Enter the resulting file for the GFF. This makes the window annotations more accurate but we haven\u2019t carefully examined how important it is for the cell sample to match.\n\n<h2>Making a manifest</h2>\n\n| Column      | Description |\n| ----------- | ----------- |\n| Experiment       | CLIP samples will be compared against Input samples within an experiment. The same sample can be used in multiple experiments |\n| Sample           | Each CLIP and Input sample will be processed separately until testing for differential binding   |\n| Cells            | A place to record information on the cell sample used: this is not currently used in analysis  |\n| Input_replicate  | Replicate # for the same Sample. The same Input replicate (fastq and number) can be used for multiple CLIP replicates |\n| Input_adapter    | Fasta of adapter sequences for Input replicate                                                     |\n| Input_fastq      | Path to Input replicate fastq (multiple files can be entered per cell to be concatenated            |\n| Input_bam       | (Optional) Enter path to Input BAM file            |\n| CLIP_replicate   | Replicate # for the same Sample. Distinct CLIP replicates are required |\n| CLIP_adapter     | Fasta of adapter sequences for CLIP replicate                                                     |\n| CLIP_fastq       | Path to CLIP replicate fastq (multiple files can be entered per cell to be concatenated            |\n| CLIP_bam       | (Optional) Enter path to CLIP BAM file            |\n\nSkipper requires multiple CLIP replicates of the same sample to call reproducible windows. Enter multiple replicates with the same experiment and sample columns on separate lines, incrementing the replicate number for each replicate. The same input replicate can be used in multiple experiments and repeated for the same sample if you estimate overdispersion from CLIP replicates. If the same replicate is used for multiple comparisons, the sample and replicate columns must be consistent.\n\nSee the example manifest in the example folder for the exact formatting and to test running Skipper by downloading the example dataset: https://zenodo.org/records/10636793.\n\n<h2>Running Skipper</h2>\n\nSkipper can be run like any other Snakemake workflow. \n\nCreate a new directory to store output, copy the Snakemake and config files, and make all edits necessary to the config file. In the `all` rule of the `Skipper.py` file, comment out output that you do not wish to inspect.\n\nRemember to load the Snakemake environment before running\n\n`conda activate snakemake`\n\nUse the dry run function to confirm that Snakemake can parse all the information:\n\n`snakemake -ns Skipper.py -j 1`\n\nOnce Snakemake has confirmed DAG creation, if applicable, submit the jobs using high performance computing infrastructure options suit you:\n\n<h3>Option 1: Manually installed packages</h3>\n\n`snakemake -kps Skipper.py -w 15 -j 30`\n\n`snakemake -kps Skipper.py -w 15 -j 30 --cluster \"sbatch -t {params.run_time} -e {params.error_file} -o {params.out_file} -p condo -q condo -A csd792 --tasks-per-node {threads} --job-name {params.job_name} --mem {params.memory}\"`\n\n<h3>Option 2: Singularity</h3>\n\n`snakemake -kps Skipper.py -w 15 -j 30 --use-singularity --singularity-args \"--bind /tscc\"`\n\n`snakemake -kps Skipper.py -w 15 -j 30 --use-singularity --singularity-args \"--bind /tscc\" --cluster \"sbatch -t {params.run_time} -e {params.error_file} -o {params.out_file} -p condo -q condo -A csd792 --tasks-per-node {threads} --job-name {params.job_name} --mem {params.memory}\"`\n\nDid Skipper terminate? Sometimes jobs fail - inspect any error output and rerun the same command if there is no apparent explanation such as uninstalled dependencies or a misformatted input file. Snakemake will try to pick up where it left off.\n\n<h2>Skipper output</h2>\n\nSkipper produces numerous output files. The `output/figures` directory contains figures summarizing the data.\n| Output      | Description |\n| ----------- | ----------- |\n| all_reads       | Visualization of RNA region preferences based on total reads instead of called windows |\n| threshold_scan  | Visualization of selection of minimum read coverage for statistical testing  |\n| input_distributions | Visualization of betabinomial fits to aggregate data |\n| enriched_windows | QC of called enriched windows  |\n| enrichment_concordance  | Mosaic plot of agreement between called enriched windows between replicates |\n| enrichment_reproducibility  | Number of total and enriched windows as a function of the number of replicates included  |\n| reproducible_enriched_windows | Visualization of RNA region preferences for windows called by at least two replicates   |\n| gene_sets        | Visualization of top enriched GO terms relative to ENCODE reproducible enriched windows   |\n| clip_scatter_re  | Visualization of enriched repetitive elements   |\n| tsne       | t-SNE visualization of binding preferences releative to ENCODE RBPs   |\n\nKey outputs: Annotated reproducible enriched windows can be accessed at `output/reproducible_enriched_windows/` and Homer motif output is at `output/homer/`\n\nExample CLIP fastqs and processed data are available at GEO and SRA: `https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE213867`\n"
      },
      "source": "https://raw.githubusercontent.com/YeoLab/skipper/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Option 1: Manually installed packages",
        "parent_header": [
          "skipper",
          "Running Skipper"
        ],
        "type": "Text_excerpt",
        "value": "# skipper\n![Skipper cartoon](documents/logo.png)\n\nSkip the peaks and expose RNA-binding in CLIP data\n\nSee published article in Cell Genomics: https://www.cell.com/cell-genomics/fulltext/S2666-979X(23)00085-X\n\n<h2>Prerequisites</h2>\nSkipper requires several executables and packages:\n\n| Tool      | Link |\n| ----------- | ----------- |\n| R           | https://www.r-project.org/       |\n| Python   | https://www.python.org/downloads/        |\n| Conda/Mamba   | https://conda.io/projects/conda/en/latest/user-guide/install/index.html        |\n| Snakemake   | https://snakemake.readthedocs.io/en/stable/getting_started/installation.html        |\n| UMICollapse   | https://github.com/Daniel-Liu-c0deb0t/UMICollapse        |\n| Skewer   | https://github.com/relipmoc/skewer        |\n| Fastp    | https://github.com/OpenGene/fastp        |\n| bedtools     | https://github.com/arq5x/bedtools2        |\n| STAR   | https://github.com/alexdobin/STAR        |\n| Java   | https://jdk.java.net/20/        |\n| samtools | http://www.htslib.org/download/        |\n| FastQC | https://www.bioinformatics.babraham.ac.uk/projects/fastqc/ |\n| HOMER | http://homer.ucsd.edu/homer/introduction/install.html |\n\nFor example, below are some commands for installing Miniconda.\n\n`curl -L -O \"https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\"`\n\n`bash Miniconda3-latest-Linux-x86_64.sh`\n\nSkipper requires several python and R packages. In order to install the precise versions used in the manuscript, we have provided skipper_env.yaml to install the used versions of R and corresponding packages from source.\n\n<h3>Option 1: Manual installation (Linux-amd64)</h3>\n\nUse conda to create a snakemake environment for installing required packages:\n\n`conda env create -f installation/skipper_env.yaml`\n\nUse the install_umicollapse.sh script to complete installation of UMICollapse v1.0.0 in the installation folder. Expect the whole process to take around 30 seconds. \n\n`cd installation && ./install_umicollapse.sh`\n\nAlternatively, at least as of this writing, Skipper is compatible with the newest version of R and its packages. The required R packages can be installed for an existing R installation as follows:\n\n`install.packages(c(\"tidyverse\", \"VGAM\", \"viridis\", \"ggrepel\", \"RColorBrewer\", \"Rtsne\", \"ggupset\", \"ggdendro\", \"cowplot\"))`\n\n`if (!require(\"BiocManager\", quietly = TRUE))`\n    `install.packages(\"BiocManager\")`\n`BiocManager::install(c(\"GenomicRanges\",\"fgsea\",\"rtracklayer\"))`\n\nPaths to locally installed versions can be supplied in the config file, described below.\n\n<h3>Option 2: Singularity installation (Linux-amd64)</h3>\n\n`conda create -n snakemake snakemake==7.32.3 star==2.7.10b`\n\nSingularity setup: https://docs.sylabs.io/guides/3.11/admin-guide/installation.html\n\n<h2>Preparing to run Skipper</h2>\nSkipper uses a Snakemake workflow. The `Skipper.py` file contains the rules necessary to process CLIP data from fastqs. Skipper also supports running on BAMs - note that Skipper's analysis of repetitive elements will assume that non-uniquely mapping reads are contained within the BAM files.\n\nProviding an absolute path to the GitHub repository `REPO_PATH` will help Snakemake find resources regardless of the directory where Skipper is run.\n\nInternal to the Yeo lab, setting the `REPO_PATH` to `/projects/ps-yeolab3/eboyle/encode/pipeline/github/yeo` will save time on preprocessing annotation files (check the annotation folder for HepG2, K562, or HEK293T. More annotations are available at `/projects/ps-yeolab4/software/skipper/1.0.0/bin/skipper/annotations/`).\n\nNumerous resources must be entered in the `Skipper_config.py` file:\n\n| Resource      | Description |\n| ----------- | ----------- |\n| MANIFEST            | Information on samples to run                                                        |\n| GENOME              | Samtools- and STAR-indexed fasta of genome for the sample of interest                |\n| STAR_DIR            | Path to STAR reference for aligning sequencing reads                |\n\n\nOther paths to help Skipper run must be entered: \n\n| Path    | Description |\n| ----------- | ----------- |\n| EXE_DIR     | For convenience to point to stable locally installed software: it is added to PATH when Skipper runs |\n| TOOL_DIR    | Directory for the tools located in the GitHub        |\n\n\nInformation about the CLIP library to be analyzed is also required:\n\n| Setting      | Description |\n| ----------- | ----------- |\n| UMI_SIZE            | Bases to trim for deduplication (10 for current eCLIP)       |\n| INFORMATIVE_READ    | Which read (1 or 2) reflects the crosslink site (for Paired End runs)        |\n| OVERDISPERSION_MODE | Overdispersion can be estimated from multiple input replicates (\"input\") or multiple CLIP replicates (\"clip\"): \"input\" is recommended |\n\n\n<h2>Customizable input for Skipper</h2>\nSkipper accepts customizable files for several steps, which are also entered in the `Skipper_config.py` file: \n\n| Input      | Description |\n| ----------- | ----------- |\n| GFF                 | Gzipped gene annotation to partition the transcriptome and count reads.                       |\n| PARTITION*           | Gzipped BED file of windows to test (can be generated from GFF file)                          |\n| FEATURE_ANNOTATIONS* | Gzipped TSV file with the following columns: chrom,start,end,name,score,strand,feature_id,feature_bin,feature_type_top,feature_types,gene_name,gene_id, transcript_ids,gene_type_top,transcript_type_top,gene_types,transcript_types (can be generated from GFF file) |\n| BLACKLIST           | Removes windows from reproducible enriched window files. Start and end coordinates must match tiled windows exactly.      |\n| ACCESSION_RANKINGS  | A ranking of gene and transcript types present in the GFF to facilitate the transcriptome partitioning  |\n| REPEAT_TABLE        | Coordinates of repetitive elements, available from UCSC Genome Browser               |\n| REPEAT_BED*          | Gzipped sorted, nonoverlapping, tab-delimited annotations of repetitive elements: chr,start,end,label,score,strand,name,class,family,proportion_gc  |\n| GENE_SETS           | GMT files of gene sets for gene set enrichment calculation |\n| GENE_SET_REFERENCE  | TSV of gene set name, number of windows belonging to term, and fraction of windows that lie in gene set genes |\n| GENE_SET_DISTANCE   | RDS of a matrix containing jaccard index scores for all pairs of gene sets in GMT file |\n\n*Skipper can generate these files from other input, or you can make your own versions with the appropriate columns.\n\nWant to make your own partition from RNA-seq of a sample? Run the tools/subset_gff.py script on RNA-seq quantifications from Salmon. We used a 1 TPM cutoff. Enter the resulting file for the GFF. This makes the window annotations more accurate but we haven\u2019t carefully examined how important it is for the cell sample to match.\n\n<h2>Making a manifest</h2>\n\n| Column      | Description |\n| ----------- | ----------- |\n| Experiment       | CLIP samples will be compared against Input samples within an experiment. The same sample can be used in multiple experiments |\n| Sample           | Each CLIP and Input sample will be processed separately until testing for differential binding   |\n| Cells            | A place to record information on the cell sample used: this is not currently used in analysis  |\n| Input_replicate  | Replicate # for the same Sample. The same Input replicate (fastq and number) can be used for multiple CLIP replicates |\n| Input_adapter    | Fasta of adapter sequences for Input replicate                                                     |\n| Input_fastq      | Path to Input replicate fastq (multiple files can be entered per cell to be concatenated            |\n| Input_bam       | (Optional) Enter path to Input BAM file            |\n| CLIP_replicate   | Replicate # for the same Sample. Distinct CLIP replicates are required |\n| CLIP_adapter     | Fasta of adapter sequences for CLIP replicate                                                     |\n| CLIP_fastq       | Path to CLIP replicate fastq (multiple files can be entered per cell to be concatenated            |\n| CLIP_bam       | (Optional) Enter path to CLIP BAM file            |\n\nSkipper requires multiple CLIP replicates of the same sample to call reproducible windows. Enter multiple replicates with the same experiment and sample columns on separate lines, incrementing the replicate number for each replicate. The same input replicate can be used in multiple experiments and repeated for the same sample if you estimate overdispersion from CLIP replicates. If the same replicate is used for multiple comparisons, the sample and replicate columns must be consistent.\n\nSee the example manifest in the example folder for the exact formatting and to test running Skipper by downloading the example dataset: https://zenodo.org/records/10636793.\n\n<h2>Running Skipper</h2>\n\nSkipper can be run like any other Snakemake workflow. \n\nCreate a new directory to store output, copy the Snakemake and config files, and make all edits necessary to the config file. In the `all` rule of the `Skipper.py` file, comment out output that you do not wish to inspect.\n\nRemember to load the Snakemake environment before running\n\n`conda activate snakemake`\n\nUse the dry run function to confirm that Snakemake can parse all the information:\n\n`snakemake -ns Skipper.py -j 1`\n\nOnce Snakemake has confirmed DAG creation, if applicable, submit the jobs using high performance computing infrastructure options suit you:\n\n<h3>Option 1: Manually installed packages</h3>\n\n`snakemake -kps Skipper.py -w 15 -j 30`\n\n`snakemake -kps Skipper.py -w 15 -j 30 --cluster \"sbatch -t {params.run_time} -e {params.error_file} -o {params.out_file} -p condo -q condo -A csd792 --tasks-per-node {threads} --job-name {params.job_name} --mem {params.memory}\"`\n\n<h3>Option 2: Singularity</h3>\n\n`snakemake -kps Skipper.py -w 15 -j 30 --use-singularity --singularity-args \"--bind /tscc\"`\n\n`snakemake -kps Skipper.py -w 15 -j 30 --use-singularity --singularity-args \"--bind /tscc\" --cluster \"sbatch -t {params.run_time} -e {params.error_file} -o {params.out_file} -p condo -q condo -A csd792 --tasks-per-node {threads} --job-name {params.job_name} --mem {params.memory}\"`\n\nDid Skipper terminate? Sometimes jobs fail - inspect any error output and rerun the same command if there is no apparent explanation such as uninstalled dependencies or a misformatted input file. Snakemake will try to pick up where it left off.\n\n<h2>Skipper output</h2>\n\nSkipper produces numerous output files. The `output/figures` directory contains figures summarizing the data.\n| Output      | Description |\n| ----------- | ----------- |\n| all_reads       | Visualization of RNA region preferences based on total reads instead of called windows |\n| threshold_scan  | Visualization of selection of minimum read coverage for statistical testing  |\n| input_distributions | Visualization of betabinomial fits to aggregate data |\n| enriched_windows | QC of called enriched windows  |\n| enrichment_concordance  | Mosaic plot of agreement between called enriched windows between replicates |\n| enrichment_reproducibility  | Number of total and enriched windows as a function of the number of replicates included  |\n| reproducible_enriched_windows | Visualization of RNA region preferences for windows called by at least two replicates   |\n| gene_sets        | Visualization of top enriched GO terms relative to ENCODE reproducible enriched windows   |\n| clip_scatter_re  | Visualization of enriched repetitive elements   |\n| tsne       | t-SNE visualization of binding preferences releative to ENCODE RBPs   |\n\nKey outputs: Annotated reproducible enriched windows can be accessed at `output/reproducible_enriched_windows/` and Homer motif output is at `output/homer/`\n\nExample CLIP fastqs and processed data are available at GEO and SRA: `https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE213867`\n"
      },
      "source": "https://raw.githubusercontent.com/YeoLab/skipper/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.9826227298086049,
      "result": {
        "original_header": "skipper",
        "type": "Text_excerpt",
        "value": "See published article in Cell Genomics: https://www.cell.com/cell-genomics/fulltext/S2666-979X(23)00085-X \n<h2>Prerequisites</h2>\nSkipper requires several executables and packages: \n| Tool      | Link |\n| ----------- | ----------- |\n| R           | https://www.r-project.org/       |\n| Python   | https://www.python.org/downloads/        |\n| Conda/Mamba   | https://conda.io/projects/conda/en/latest/user-guide/install/index.html        |\n| Snakemake   | https://snakemake.readthedocs.io/en/stable/getting_started/installation.html        |\n| UMICollapse   | https://github.com/Daniel-Liu-c0deb0t/UMICollapse        |\n| Skewer   | https://github.com/relipmoc/skewer        |\n| Fastp    | https://github.com/OpenGene/fastp        |\n| bedtools     | https://github.com/arq5x/bedtools2        |\n| STAR   | https://github.com/alexdobin/STAR        |\n| Java   | https://jdk.java.net/20/        |\n| samtools | http://www.htslib.org/download/        |\n| FastQC | https://www.bioinformatics.babraham.ac.uk/projects/fastqc/ |\n| HOMER | http://homer.ucsd.edu/homer/introduction/install.html | \nFor example, below are some commands for installing Miniconda. \n`curl -L -O \"https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\"` \n`bash Miniconda3-latest-Linux-x86_64.sh` \nSkipper requires several python and R packages. In order to install the precise versions used in the manuscript, we have provided skipper_env.yaml to install the used versions of R and corresponding packages from source. \n<h3>Option 1: Manual installation (Linux-amd64)</h3> \nUse conda to create a snakemake environment for installing required packages: \n`conda env create -f installation/skipper_env.yaml` \nUse the install_umicollapse.sh script to complete installation of UMICollapse v1.0.0 in the installation folder. Expect the whole process to take around 30 seconds.  \n`cd installation && ./install_umicollapse.sh` \nAlternatively, at least as of this writing, Skipper is compatible with the newest version of R and its packages. The required R packages can be installed for an existing R installation as follows: \n`install.packages(c(\"tidyverse\", \"VGAM\", \"viridis\", \"ggrepel\", \"RColorBrewer\", \"Rtsne\", \"ggupset\", \"ggdendro\", \"cowplot\"))` \n`if (!require(\"BiocManager\", quietly = TRUE))`\n    `install.packages(\"BiocManager\")`\n`BiocManager::install(c(\"GenomicRanges\",\"fgsea\",\"rtracklayer\"))` \nPaths to locally installed versions can be supplied in the config file, described below. \n<h3>Option 2: Singularity installation (Linux-amd64)</h3> \n`conda create -n snakemake snakemake==7.32.3 star==2.7.10b` \nSingularity setup: https://docs.sylabs.io/guides/3.11/admin-guide/installation.html \nProviding an absolute path to the GitHub repository `REPO_PATH` will help Snakemake find resources regardless of the directory where Skipper is run. \nInternal to the Yeo lab, setting the `REPO_PATH` to `/projects/ps-yeolab3/eboyle/encode/pipeline/github/yeo` will save time on preprocessing annotation files (check the annotation folder for HepG2, K562, or HEK293T. More annotations are available at `/projects/ps-yeolab4/software/skipper/1.0.0/bin/skipper/annotations/`). \n\nOther paths to help Skipper run must be entered:  \n| Path    | Description |\n| ----------- | ----------- |\n| EXE_DIR     | For convenience to point to stable locally installed software: it is added to PATH when Skipper runs |\n| TOOL_DIR    | Directory for the tools located in the GitHub        | \nWant to make your own partition from RNA-seq of a sample? Run the tools/subset_gff.py script on RNA-seq quantifications from Salmon. We used a 1 TPM cutoff. Enter the resulting file for the GFF. This makes the window annotations more accurate but we haven\u2019t carefully examined how important it is for the cell sample to match. \nSee the example manifest in the example folder for the exact formatting and to test running Skipper by downloading the example dataset: https://zenodo.org/records/10636793. \nRemember to load the Snakemake environment before running \n`conda activate snakemake` \n<h3>Option 1: Manually installed packages</h3> \n"
      },
      "source": "https://raw.githubusercontent.com/YeoLab/skipper/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.8417425339194452,
      "result": {
        "original_header": "skipper",
        "type": "Text_excerpt",
        "value": "Numerous resources must be entered in the `Skipper_config.py` file: \n`snakemake -ns Skipper.py -j 1` \n`snakemake -kps Skipper.py -w 15 -j 30 --cluster \"sbatch -t {params.run_time} -e {params.error_file} -o {params.out_file} -p condo -q condo -A csd792 --tasks-per-node {threads} --job-name {params.job_name} --mem {params.memory}\"` \n"
      },
      "source": "https://raw.githubusercontent.com/YeoLab/skipper/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/YeoLab/skipper/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Other",
        "spdx_id": "NOASSERTION",
        "type": "License",
        "url": null,
        "value": null
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "This software is Copyright \u00a9 2022 The Regents of the University of California. \nAll Rights Reserved. \n\nPermission to copy, modify, and distribute this software and its documentation \nfor educational, research and non-profit purposes, without fee, and without a \nwritten agreement is hereby granted, provided that the above copyright notice, \nthis paragraph and the following three paragraphs appear in all copies. \n\nPermission to make commercial use of this software may be obtained by contacting:\n\n   Office of Innovation & Commercialization\n   9500 Gilman Drive, Mail Code 0910\n   University of California\n   La Jolla, CA 92093-0910\n   (858) 534-5815\n   innovation@ucsd.edu\n\nThis software program and documentation are copyrighted by The Regents of the \nUniversity of California. The software program and documentation are supplied \n\u201cas is\u201d, without any accompanying services from The Regents. The Regents does \nnot warrant that the operation of the program will be uninterrupted or \nerror-free. The end-user understands that the program was developed for \nresearch purposes and is advised not to rely exclusively on the program for \nany reason.\n\nIN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR \nDIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING \nLOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, \nEVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF \nSUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY \nWARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE PROVIDED \nHEREUNDER IS ON AN \u201cAS IS\u201d BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO \nOBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR \nMODIFICATIONS.\n"
      },
      "source": "https://raw.githubusercontent.com/YeoLab/skipper/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/YeoLab/skipper//main/documents/logo.png"
      },
      "source": "https://raw.githubusercontent.com/YeoLab/skipper/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "skipper"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "YeoLab"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "R",
        "size": 81135,
        "type": "Programming_language",
        "value": "R"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 53532,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Shell",
        "size": 2639,
        "type": "Programming_language",
        "value": "Shell"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/YeoLab/skipper/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "related_documentation": [
    {
      "confidence": 1,
      "result": {
        "format": "readthedocs",
        "type": "Url",
        "value": "https://snakemake.readthedocs.io/"
      },
      "source": "https://raw.githubusercontent.com/YeoLab/skipper/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "augustboyle",
          "type": "User"
        },
        "date_created": "2023-07-12T14:57:04Z",
        "date_published": "2023-12-15T16:53:42Z",
        "description": "Pattern matching for aggregating replicates into betabinomial testing been improved to prevent inappropriate comparisons.\r\n\r\nMore information on reproducible installation of software has been added.\r\n\r\nDocumentation has been expanded and improved.",
        "html_url": "https://github.com/YeoLab/skipper/releases/tag/v1.1.0",
        "name": "Publication release",
        "release_id": 134122119,
        "tag": "v1.1.0",
        "tarball_url": "https://api.github.com/repos/YeoLab/skipper/tarball/v1.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/YeoLab/skipper/releases/134122119",
        "value": "https://api.github.com/repos/YeoLab/skipper/releases/134122119",
        "zipball_url": "https://api.github.com/repos/YeoLab/skipper/zipball/v1.1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "augustboyle",
          "type": "User"
        },
        "date_created": "2022-10-04T20:57:20Z",
        "date_published": "2022-10-08T20:25:50Z",
        "description": "First implementation of transcriptomic window tiling, repetitive element identification, CLIP-seq preprocessing, read counting, enrichment testing, reproducibility measures, transcript and feature type summaries, GO term analysis, and t-SNE visualization.",
        "html_url": "https://github.com/YeoLab/skipper/releases/tag/v1.0.0",
        "name": "Original release",
        "release_id": 79350189,
        "tag": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/YeoLab/skipper/tarball/v1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/YeoLab/skipper/releases/79350189",
        "value": "https://api.github.com/repos/YeoLab/skipper/releases/79350189",
        "zipball_url": "https://api.github.com/repos/YeoLab/skipper/zipball/v1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Prerequisites",
        "parent_header": [
          "skipper"
        ],
        "type": "Text_excerpt",
        "value": "# skipper\n![Skipper cartoon](documents/logo.png)\n\nSkip the peaks and expose RNA-binding in CLIP data\n\nSee published article in Cell Genomics: https://www.cell.com/cell-genomics/fulltext/S2666-979X(23)00085-X\n\n<h2>Prerequisites</h2>\nSkipper requires several executables and packages:\n\n| Tool      | Link |\n| ----------- | ----------- |\n| R           | https://www.r-project.org/       |\n| Python   | https://www.python.org/downloads/        |\n| Conda/Mamba   | https://conda.io/projects/conda/en/latest/user-guide/install/index.html        |\n| Snakemake   | https://snakemake.readthedocs.io/en/stable/getting_started/installation.html        |\n| UMICollapse   | https://github.com/Daniel-Liu-c0deb0t/UMICollapse        |\n| Skewer   | https://github.com/relipmoc/skewer        |\n| Fastp    | https://github.com/OpenGene/fastp        |\n| bedtools     | https://github.com/arq5x/bedtools2        |\n| STAR   | https://github.com/alexdobin/STAR        |\n| Java   | https://jdk.java.net/20/        |\n| samtools | http://www.htslib.org/download/        |\n| FastQC | https://www.bioinformatics.babraham.ac.uk/projects/fastqc/ |\n| HOMER | http://homer.ucsd.edu/homer/introduction/install.html |\n\nFor example, below are some commands for installing Miniconda.\n\n`curl -L -O \"https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\"`\n\n`bash Miniconda3-latest-Linux-x86_64.sh`\n\nSkipper requires several python and R packages. In order to install the precise versions used in the manuscript, we have provided skipper_env.yaml to install the used versions of R and corresponding packages from source.\n\n<h3>Option 1: Manual installation (Linux-amd64)</h3>\n\nUse conda to create a snakemake environment for installing required packages:\n\n`conda env create -f installation/skipper_env.yaml`\n\nUse the install_umicollapse.sh script to complete installation of UMICollapse v1.0.0 in the installation folder. Expect the whole process to take around 30 seconds. \n\n`cd installation && ./install_umicollapse.sh`\n\nAlternatively, at least as of this writing, Skipper is compatible with the newest version of R and its packages. The required R packages can be installed for an existing R installation as follows:\n\n`install.packages(c(\"tidyverse\", \"VGAM\", \"viridis\", \"ggrepel\", \"RColorBrewer\", \"Rtsne\", \"ggupset\", \"ggdendro\", \"cowplot\"))`\n\n`if (!require(\"BiocManager\", quietly = TRUE))`\n    `install.packages(\"BiocManager\")`\n`BiocManager::install(c(\"GenomicRanges\",\"fgsea\",\"rtracklayer\"))`\n\nPaths to locally installed versions can be supplied in the config file, described below.\n\n<h3>Option 2: Singularity installation (Linux-amd64)</h3>\n\n`conda create -n snakemake snakemake==7.32.3 star==2.7.10b`\n\nSingularity setup: https://docs.sylabs.io/guides/3.11/admin-guide/installation.html\n\n<h2>Preparing to run Skipper</h2>\nSkipper uses a Snakemake workflow. The `Skipper.py` file contains the rules necessary to process CLIP data from fastqs. Skipper also supports running on BAMs - note that Skipper's analysis of repetitive elements will assume that non-uniquely mapping reads are contained within the BAM files.\n\nProviding an absolute path to the GitHub repository `REPO_PATH` will help Snakemake find resources regardless of the directory where Skipper is run.\n\nInternal to the Yeo lab, setting the `REPO_PATH` to `/projects/ps-yeolab3/eboyle/encode/pipeline/github/yeo` will save time on preprocessing annotation files (check the annotation folder for HepG2, K562, or HEK293T. More annotations are available at `/projects/ps-yeolab4/software/skipper/1.0.0/bin/skipper/annotations/`).\n\nNumerous resources must be entered in the `Skipper_config.py` file:\n\n| Resource      | Description |\n| ----------- | ----------- |\n| MANIFEST            | Information on samples to run                                                        |\n| GENOME              | Samtools- and STAR-indexed fasta of genome for the sample of interest                |\n| STAR_DIR            | Path to STAR reference for aligning sequencing reads                |\n\n\nOther paths to help Skipper run must be entered: \n\n| Path    | Description |\n| ----------- | ----------- |\n| EXE_DIR     | For convenience to point to stable locally installed software: it is added to PATH when Skipper runs |\n| TOOL_DIR    | Directory for the tools located in the GitHub        |\n\n\nInformation about the CLIP library to be analyzed is also required:\n\n| Setting      | Description |\n| ----------- | ----------- |\n| UMI_SIZE            | Bases to trim for deduplication (10 for current eCLIP)       |\n| INFORMATIVE_READ    | Which read (1 or 2) reflects the crosslink site (for Paired End runs)        |\n| OVERDISPERSION_MODE | Overdispersion can be estimated from multiple input replicates (\"input\") or multiple CLIP replicates (\"clip\"): \"input\" is recommended |\n\n\n<h2>Customizable input for Skipper</h2>\nSkipper accepts customizable files for several steps, which are also entered in the `Skipper_config.py` file: \n\n| Input      | Description |\n| ----------- | ----------- |\n| GFF                 | Gzipped gene annotation to partition the transcriptome and count reads.                       |\n| PARTITION*           | Gzipped BED file of windows to test (can be generated from GFF file)                          |\n| FEATURE_ANNOTATIONS* | Gzipped TSV file with the following columns: chrom,start,end,name,score,strand,feature_id,feature_bin,feature_type_top,feature_types,gene_name,gene_id, transcript_ids,gene_type_top,transcript_type_top,gene_types,transcript_types (can be generated from GFF file) |\n| BLACKLIST           | Removes windows from reproducible enriched window files. Start and end coordinates must match tiled windows exactly.      |\n| ACCESSION_RANKINGS  | A ranking of gene and transcript types present in the GFF to facilitate the transcriptome partitioning  |\n| REPEAT_TABLE        | Coordinates of repetitive elements, available from UCSC Genome Browser               |\n| REPEAT_BED*          | Gzipped sorted, nonoverlapping, tab-delimited annotations of repetitive elements: chr,start,end,label,score,strand,name,class,family,proportion_gc  |\n| GENE_SETS           | GMT files of gene sets for gene set enrichment calculation |\n| GENE_SET_REFERENCE  | TSV of gene set name, number of windows belonging to term, and fraction of windows that lie in gene set genes |\n| GENE_SET_DISTANCE   | RDS of a matrix containing jaccard index scores for all pairs of gene sets in GMT file |\n\n*Skipper can generate these files from other input, or you can make your own versions with the appropriate columns.\n\nWant to make your own partition from RNA-seq of a sample? Run the tools/subset_gff.py script on RNA-seq quantifications from Salmon. We used a 1 TPM cutoff. Enter the resulting file for the GFF. This makes the window annotations more accurate but we haven\u2019t carefully examined how important it is for the cell sample to match.\n\n<h2>Making a manifest</h2>\n\n| Column      | Description |\n| ----------- | ----------- |\n| Experiment       | CLIP samples will be compared against Input samples within an experiment. The same sample can be used in multiple experiments |\n| Sample           | Each CLIP and Input sample will be processed separately until testing for differential binding   |\n| Cells            | A place to record information on the cell sample used: this is not currently used in analysis  |\n| Input_replicate  | Replicate # for the same Sample. The same Input replicate (fastq and number) can be used for multiple CLIP replicates |\n| Input_adapter    | Fasta of adapter sequences for Input replicate                                                     |\n| Input_fastq      | Path to Input replicate fastq (multiple files can be entered per cell to be concatenated            |\n| Input_bam       | (Optional) Enter path to Input BAM file            |\n| CLIP_replicate   | Replicate # for the same Sample. Distinct CLIP replicates are required |\n| CLIP_adapter     | Fasta of adapter sequences for CLIP replicate                                                     |\n| CLIP_fastq       | Path to CLIP replicate fastq (multiple files can be entered per cell to be concatenated            |\n| CLIP_bam       | (Optional) Enter path to CLIP BAM file            |\n\nSkipper requires multiple CLIP replicates of the same sample to call reproducible windows. Enter multiple replicates with the same experiment and sample columns on separate lines, incrementing the replicate number for each replicate. The same input replicate can be used in multiple experiments and repeated for the same sample if you estimate overdispersion from CLIP replicates. If the same replicate is used for multiple comparisons, the sample and replicate columns must be consistent.\n\nSee the example manifest in the example folder for the exact formatting and to test running Skipper by downloading the example dataset: https://zenodo.org/records/10636793.\n\n<h2>Running Skipper</h2>\n\nSkipper can be run like any other Snakemake workflow. \n\nCreate a new directory to store output, copy the Snakemake and config files, and make all edits necessary to the config file. In the `all` rule of the `Skipper.py` file, comment out output that you do not wish to inspect.\n\nRemember to load the Snakemake environment before running\n\n`conda activate snakemake`\n\nUse the dry run function to confirm that Snakemake can parse all the information:\n\n`snakemake -ns Skipper.py -j 1`\n\nOnce Snakemake has confirmed DAG creation, if applicable, submit the jobs using high performance computing infrastructure options suit you:\n\n<h3>Option 1: Manually installed packages</h3>\n\n`snakemake -kps Skipper.py -w 15 -j 30`\n\n`snakemake -kps Skipper.py -w 15 -j 30 --cluster \"sbatch -t {params.run_time} -e {params.error_file} -o {params.out_file} -p condo -q condo -A csd792 --tasks-per-node {threads} --job-name {params.job_name} --mem {params.memory}\"`\n\n<h3>Option 2: Singularity</h3>\n\n`snakemake -kps Skipper.py -w 15 -j 30 --use-singularity --singularity-args \"--bind /tscc\"`\n\n`snakemake -kps Skipper.py -w 15 -j 30 --use-singularity --singularity-args \"--bind /tscc\" --cluster \"sbatch -t {params.run_time} -e {params.error_file} -o {params.out_file} -p condo -q condo -A csd792 --tasks-per-node {threads} --job-name {params.job_name} --mem {params.memory}\"`\n\nDid Skipper terminate? Sometimes jobs fail - inspect any error output and rerun the same command if there is no apparent explanation such as uninstalled dependencies or a misformatted input file. Snakemake will try to pick up where it left off.\n\n<h2>Skipper output</h2>\n\nSkipper produces numerous output files. The `output/figures` directory contains figures summarizing the data.\n| Output      | Description |\n| ----------- | ----------- |\n| all_reads       | Visualization of RNA region preferences based on total reads instead of called windows |\n| threshold_scan  | Visualization of selection of minimum read coverage for statistical testing  |\n| input_distributions | Visualization of betabinomial fits to aggregate data |\n| enriched_windows | QC of called enriched windows  |\n| enrichment_concordance  | Mosaic plot of agreement between called enriched windows between replicates |\n| enrichment_reproducibility  | Number of total and enriched windows as a function of the number of replicates included  |\n| reproducible_enriched_windows | Visualization of RNA region preferences for windows called by at least two replicates   |\n| gene_sets        | Visualization of top enriched GO terms relative to ENCODE reproducible enriched windows   |\n| clip_scatter_re  | Visualization of enriched repetitive elements   |\n| tsne       | t-SNE visualization of binding preferences releative to ENCODE RBPs   |\n\nKey outputs: Annotated reproducible enriched windows can be accessed at `output/reproducible_enriched_windows/` and Homer motif output is at `output/homer/`\n\nExample CLIP fastqs and processed data are available at GEO and SRA: `https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE213867`\n"
      },
      "source": "https://raw.githubusercontent.com/YeoLab/skipper/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "run": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Preparing to run Skipper",
        "parent_header": [
          "skipper"
        ],
        "type": "Text_excerpt",
        "value": "# skipper\n![Skipper cartoon](documents/logo.png)\n\nSkip the peaks and expose RNA-binding in CLIP data\n\nSee published article in Cell Genomics: https://www.cell.com/cell-genomics/fulltext/S2666-979X(23)00085-X\n\n<h2>Prerequisites</h2>\nSkipper requires several executables and packages:\n\n| Tool      | Link |\n| ----------- | ----------- |\n| R           | https://www.r-project.org/       |\n| Python   | https://www.python.org/downloads/        |\n| Conda/Mamba   | https://conda.io/projects/conda/en/latest/user-guide/install/index.html        |\n| Snakemake   | https://snakemake.readthedocs.io/en/stable/getting_started/installation.html        |\n| UMICollapse   | https://github.com/Daniel-Liu-c0deb0t/UMICollapse        |\n| Skewer   | https://github.com/relipmoc/skewer        |\n| Fastp    | https://github.com/OpenGene/fastp        |\n| bedtools     | https://github.com/arq5x/bedtools2        |\n| STAR   | https://github.com/alexdobin/STAR        |\n| Java   | https://jdk.java.net/20/        |\n| samtools | http://www.htslib.org/download/        |\n| FastQC | https://www.bioinformatics.babraham.ac.uk/projects/fastqc/ |\n| HOMER | http://homer.ucsd.edu/homer/introduction/install.html |\n\nFor example, below are some commands for installing Miniconda.\n\n`curl -L -O \"https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\"`\n\n`bash Miniconda3-latest-Linux-x86_64.sh`\n\nSkipper requires several python and R packages. In order to install the precise versions used in the manuscript, we have provided skipper_env.yaml to install the used versions of R and corresponding packages from source.\n\n<h3>Option 1: Manual installation (Linux-amd64)</h3>\n\nUse conda to create a snakemake environment for installing required packages:\n\n`conda env create -f installation/skipper_env.yaml`\n\nUse the install_umicollapse.sh script to complete installation of UMICollapse v1.0.0 in the installation folder. Expect the whole process to take around 30 seconds. \n\n`cd installation && ./install_umicollapse.sh`\n\nAlternatively, at least as of this writing, Skipper is compatible with the newest version of R and its packages. The required R packages can be installed for an existing R installation as follows:\n\n`install.packages(c(\"tidyverse\", \"VGAM\", \"viridis\", \"ggrepel\", \"RColorBrewer\", \"Rtsne\", \"ggupset\", \"ggdendro\", \"cowplot\"))`\n\n`if (!require(\"BiocManager\", quietly = TRUE))`\n    `install.packages(\"BiocManager\")`\n`BiocManager::install(c(\"GenomicRanges\",\"fgsea\",\"rtracklayer\"))`\n\nPaths to locally installed versions can be supplied in the config file, described below.\n\n<h3>Option 2: Singularity installation (Linux-amd64)</h3>\n\n`conda create -n snakemake snakemake==7.32.3 star==2.7.10b`\n\nSingularity setup: https://docs.sylabs.io/guides/3.11/admin-guide/installation.html\n\n<h2>Preparing to run Skipper</h2>\nSkipper uses a Snakemake workflow. The `Skipper.py` file contains the rules necessary to process CLIP data from fastqs. Skipper also supports running on BAMs - note that Skipper's analysis of repetitive elements will assume that non-uniquely mapping reads are contained within the BAM files.\n\nProviding an absolute path to the GitHub repository `REPO_PATH` will help Snakemake find resources regardless of the directory where Skipper is run.\n\nInternal to the Yeo lab, setting the `REPO_PATH` to `/projects/ps-yeolab3/eboyle/encode/pipeline/github/yeo` will save time on preprocessing annotation files (check the annotation folder for HepG2, K562, or HEK293T. More annotations are available at `/projects/ps-yeolab4/software/skipper/1.0.0/bin/skipper/annotations/`).\n\nNumerous resources must be entered in the `Skipper_config.py` file:\n\n| Resource      | Description |\n| ----------- | ----------- |\n| MANIFEST            | Information on samples to run                                                        |\n| GENOME              | Samtools- and STAR-indexed fasta of genome for the sample of interest                |\n| STAR_DIR            | Path to STAR reference for aligning sequencing reads                |\n\n\nOther paths to help Skipper run must be entered: \n\n| Path    | Description |\n| ----------- | ----------- |\n| EXE_DIR     | For convenience to point to stable locally installed software: it is added to PATH when Skipper runs |\n| TOOL_DIR    | Directory for the tools located in the GitHub        |\n\n\nInformation about the CLIP library to be analyzed is also required:\n\n| Setting      | Description |\n| ----------- | ----------- |\n| UMI_SIZE            | Bases to trim for deduplication (10 for current eCLIP)       |\n| INFORMATIVE_READ    | Which read (1 or 2) reflects the crosslink site (for Paired End runs)        |\n| OVERDISPERSION_MODE | Overdispersion can be estimated from multiple input replicates (\"input\") or multiple CLIP replicates (\"clip\"): \"input\" is recommended |\n\n\n<h2>Customizable input for Skipper</h2>\nSkipper accepts customizable files for several steps, which are also entered in the `Skipper_config.py` file: \n\n| Input      | Description |\n| ----------- | ----------- |\n| GFF                 | Gzipped gene annotation to partition the transcriptome and count reads.                       |\n| PARTITION*           | Gzipped BED file of windows to test (can be generated from GFF file)                          |\n| FEATURE_ANNOTATIONS* | Gzipped TSV file with the following columns: chrom,start,end,name,score,strand,feature_id,feature_bin,feature_type_top,feature_types,gene_name,gene_id, transcript_ids,gene_type_top,transcript_type_top,gene_types,transcript_types (can be generated from GFF file) |\n| BLACKLIST           | Removes windows from reproducible enriched window files. Start and end coordinates must match tiled windows exactly.      |\n| ACCESSION_RANKINGS  | A ranking of gene and transcript types present in the GFF to facilitate the transcriptome partitioning  |\n| REPEAT_TABLE        | Coordinates of repetitive elements, available from UCSC Genome Browser               |\n| REPEAT_BED*          | Gzipped sorted, nonoverlapping, tab-delimited annotations of repetitive elements: chr,start,end,label,score,strand,name,class,family,proportion_gc  |\n| GENE_SETS           | GMT files of gene sets for gene set enrichment calculation |\n| GENE_SET_REFERENCE  | TSV of gene set name, number of windows belonging to term, and fraction of windows that lie in gene set genes |\n| GENE_SET_DISTANCE   | RDS of a matrix containing jaccard index scores for all pairs of gene sets in GMT file |\n\n*Skipper can generate these files from other input, or you can make your own versions with the appropriate columns.\n\nWant to make your own partition from RNA-seq of a sample? Run the tools/subset_gff.py script on RNA-seq quantifications from Salmon. We used a 1 TPM cutoff. Enter the resulting file for the GFF. This makes the window annotations more accurate but we haven\u2019t carefully examined how important it is for the cell sample to match.\n\n<h2>Making a manifest</h2>\n\n| Column      | Description |\n| ----------- | ----------- |\n| Experiment       | CLIP samples will be compared against Input samples within an experiment. The same sample can be used in multiple experiments |\n| Sample           | Each CLIP and Input sample will be processed separately until testing for differential binding   |\n| Cells            | A place to record information on the cell sample used: this is not currently used in analysis  |\n| Input_replicate  | Replicate # for the same Sample. The same Input replicate (fastq and number) can be used for multiple CLIP replicates |\n| Input_adapter    | Fasta of adapter sequences for Input replicate                                                     |\n| Input_fastq      | Path to Input replicate fastq (multiple files can be entered per cell to be concatenated            |\n| Input_bam       | (Optional) Enter path to Input BAM file            |\n| CLIP_replicate   | Replicate # for the same Sample. Distinct CLIP replicates are required |\n| CLIP_adapter     | Fasta of adapter sequences for CLIP replicate                                                     |\n| CLIP_fastq       | Path to CLIP replicate fastq (multiple files can be entered per cell to be concatenated            |\n| CLIP_bam       | (Optional) Enter path to CLIP BAM file            |\n\nSkipper requires multiple CLIP replicates of the same sample to call reproducible windows. Enter multiple replicates with the same experiment and sample columns on separate lines, incrementing the replicate number for each replicate. The same input replicate can be used in multiple experiments and repeated for the same sample if you estimate overdispersion from CLIP replicates. If the same replicate is used for multiple comparisons, the sample and replicate columns must be consistent.\n\nSee the example manifest in the example folder for the exact formatting and to test running Skipper by downloading the example dataset: https://zenodo.org/records/10636793.\n\n<h2>Running Skipper</h2>\n\nSkipper can be run like any other Snakemake workflow. \n\nCreate a new directory to store output, copy the Snakemake and config files, and make all edits necessary to the config file. In the `all` rule of the `Skipper.py` file, comment out output that you do not wish to inspect.\n\nRemember to load the Snakemake environment before running\n\n`conda activate snakemake`\n\nUse the dry run function to confirm that Snakemake can parse all the information:\n\n`snakemake -ns Skipper.py -j 1`\n\nOnce Snakemake has confirmed DAG creation, if applicable, submit the jobs using high performance computing infrastructure options suit you:\n\n<h3>Option 1: Manually installed packages</h3>\n\n`snakemake -kps Skipper.py -w 15 -j 30`\n\n`snakemake -kps Skipper.py -w 15 -j 30 --cluster \"sbatch -t {params.run_time} -e {params.error_file} -o {params.out_file} -p condo -q condo -A csd792 --tasks-per-node {threads} --job-name {params.job_name} --mem {params.memory}\"`\n\n<h3>Option 2: Singularity</h3>\n\n`snakemake -kps Skipper.py -w 15 -j 30 --use-singularity --singularity-args \"--bind /tscc\"`\n\n`snakemake -kps Skipper.py -w 15 -j 30 --use-singularity --singularity-args \"--bind /tscc\" --cluster \"sbatch -t {params.run_time} -e {params.error_file} -o {params.out_file} -p condo -q condo -A csd792 --tasks-per-node {threads} --job-name {params.job_name} --mem {params.memory}\"`\n\nDid Skipper terminate? Sometimes jobs fail - inspect any error output and rerun the same command if there is no apparent explanation such as uninstalled dependencies or a misformatted input file. Snakemake will try to pick up where it left off.\n\n<h2>Skipper output</h2>\n\nSkipper produces numerous output files. The `output/figures` directory contains figures summarizing the data.\n| Output      | Description |\n| ----------- | ----------- |\n| all_reads       | Visualization of RNA region preferences based on total reads instead of called windows |\n| threshold_scan  | Visualization of selection of minimum read coverage for statistical testing  |\n| input_distributions | Visualization of betabinomial fits to aggregate data |\n| enriched_windows | QC of called enriched windows  |\n| enrichment_concordance  | Mosaic plot of agreement between called enriched windows between replicates |\n| enrichment_reproducibility  | Number of total and enriched windows as a function of the number of replicates included  |\n| reproducible_enriched_windows | Visualization of RNA region preferences for windows called by at least two replicates   |\n| gene_sets        | Visualization of top enriched GO terms relative to ENCODE reproducible enriched windows   |\n| clip_scatter_re  | Visualization of enriched repetitive elements   |\n| tsne       | t-SNE visualization of binding preferences releative to ENCODE RBPs   |\n\nKey outputs: Annotated reproducible enriched windows can be accessed at `output/reproducible_enriched_windows/` and Homer motif output is at `output/homer/`\n\nExample CLIP fastqs and processed data are available at GEO and SRA: `https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE213867`\n"
      },
      "source": "https://raw.githubusercontent.com/YeoLab/skipper/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Running Skipper",
        "parent_header": [
          "skipper"
        ],
        "type": "Text_excerpt",
        "value": "# skipper\n![Skipper cartoon](documents/logo.png)\n\nSkip the peaks and expose RNA-binding in CLIP data\n\nSee published article in Cell Genomics: https://www.cell.com/cell-genomics/fulltext/S2666-979X(23)00085-X\n\n<h2>Prerequisites</h2>\nSkipper requires several executables and packages:\n\n| Tool      | Link |\n| ----------- | ----------- |\n| R           | https://www.r-project.org/       |\n| Python   | https://www.python.org/downloads/        |\n| Conda/Mamba   | https://conda.io/projects/conda/en/latest/user-guide/install/index.html        |\n| Snakemake   | https://snakemake.readthedocs.io/en/stable/getting_started/installation.html        |\n| UMICollapse   | https://github.com/Daniel-Liu-c0deb0t/UMICollapse        |\n| Skewer   | https://github.com/relipmoc/skewer        |\n| Fastp    | https://github.com/OpenGene/fastp        |\n| bedtools     | https://github.com/arq5x/bedtools2        |\n| STAR   | https://github.com/alexdobin/STAR        |\n| Java   | https://jdk.java.net/20/        |\n| samtools | http://www.htslib.org/download/        |\n| FastQC | https://www.bioinformatics.babraham.ac.uk/projects/fastqc/ |\n| HOMER | http://homer.ucsd.edu/homer/introduction/install.html |\n\nFor example, below are some commands for installing Miniconda.\n\n`curl -L -O \"https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\"`\n\n`bash Miniconda3-latest-Linux-x86_64.sh`\n\nSkipper requires several python and R packages. In order to install the precise versions used in the manuscript, we have provided skipper_env.yaml to install the used versions of R and corresponding packages from source.\n\n<h3>Option 1: Manual installation (Linux-amd64)</h3>\n\nUse conda to create a snakemake environment for installing required packages:\n\n`conda env create -f installation/skipper_env.yaml`\n\nUse the install_umicollapse.sh script to complete installation of UMICollapse v1.0.0 in the installation folder. Expect the whole process to take around 30 seconds. \n\n`cd installation && ./install_umicollapse.sh`\n\nAlternatively, at least as of this writing, Skipper is compatible with the newest version of R and its packages. The required R packages can be installed for an existing R installation as follows:\n\n`install.packages(c(\"tidyverse\", \"VGAM\", \"viridis\", \"ggrepel\", \"RColorBrewer\", \"Rtsne\", \"ggupset\", \"ggdendro\", \"cowplot\"))`\n\n`if (!require(\"BiocManager\", quietly = TRUE))`\n    `install.packages(\"BiocManager\")`\n`BiocManager::install(c(\"GenomicRanges\",\"fgsea\",\"rtracklayer\"))`\n\nPaths to locally installed versions can be supplied in the config file, described below.\n\n<h3>Option 2: Singularity installation (Linux-amd64)</h3>\n\n`conda create -n snakemake snakemake==7.32.3 star==2.7.10b`\n\nSingularity setup: https://docs.sylabs.io/guides/3.11/admin-guide/installation.html\n\n<h2>Preparing to run Skipper</h2>\nSkipper uses a Snakemake workflow. The `Skipper.py` file contains the rules necessary to process CLIP data from fastqs. Skipper also supports running on BAMs - note that Skipper's analysis of repetitive elements will assume that non-uniquely mapping reads are contained within the BAM files.\n\nProviding an absolute path to the GitHub repository `REPO_PATH` will help Snakemake find resources regardless of the directory where Skipper is run.\n\nInternal to the Yeo lab, setting the `REPO_PATH` to `/projects/ps-yeolab3/eboyle/encode/pipeline/github/yeo` will save time on preprocessing annotation files (check the annotation folder for HepG2, K562, or HEK293T. More annotations are available at `/projects/ps-yeolab4/software/skipper/1.0.0/bin/skipper/annotations/`).\n\nNumerous resources must be entered in the `Skipper_config.py` file:\n\n| Resource      | Description |\n| ----------- | ----------- |\n| MANIFEST            | Information on samples to run                                                        |\n| GENOME              | Samtools- and STAR-indexed fasta of genome for the sample of interest                |\n| STAR_DIR            | Path to STAR reference for aligning sequencing reads                |\n\n\nOther paths to help Skipper run must be entered: \n\n| Path    | Description |\n| ----------- | ----------- |\n| EXE_DIR     | For convenience to point to stable locally installed software: it is added to PATH when Skipper runs |\n| TOOL_DIR    | Directory for the tools located in the GitHub        |\n\n\nInformation about the CLIP library to be analyzed is also required:\n\n| Setting      | Description |\n| ----------- | ----------- |\n| UMI_SIZE            | Bases to trim for deduplication (10 for current eCLIP)       |\n| INFORMATIVE_READ    | Which read (1 or 2) reflects the crosslink site (for Paired End runs)        |\n| OVERDISPERSION_MODE | Overdispersion can be estimated from multiple input replicates (\"input\") or multiple CLIP replicates (\"clip\"): \"input\" is recommended |\n\n\n<h2>Customizable input for Skipper</h2>\nSkipper accepts customizable files for several steps, which are also entered in the `Skipper_config.py` file: \n\n| Input      | Description |\n| ----------- | ----------- |\n| GFF                 | Gzipped gene annotation to partition the transcriptome and count reads.                       |\n| PARTITION*           | Gzipped BED file of windows to test (can be generated from GFF file)                          |\n| FEATURE_ANNOTATIONS* | Gzipped TSV file with the following columns: chrom,start,end,name,score,strand,feature_id,feature_bin,feature_type_top,feature_types,gene_name,gene_id, transcript_ids,gene_type_top,transcript_type_top,gene_types,transcript_types (can be generated from GFF file) |\n| BLACKLIST           | Removes windows from reproducible enriched window files. Start and end coordinates must match tiled windows exactly.      |\n| ACCESSION_RANKINGS  | A ranking of gene and transcript types present in the GFF to facilitate the transcriptome partitioning  |\n| REPEAT_TABLE        | Coordinates of repetitive elements, available from UCSC Genome Browser               |\n| REPEAT_BED*          | Gzipped sorted, nonoverlapping, tab-delimited annotations of repetitive elements: chr,start,end,label,score,strand,name,class,family,proportion_gc  |\n| GENE_SETS           | GMT files of gene sets for gene set enrichment calculation |\n| GENE_SET_REFERENCE  | TSV of gene set name, number of windows belonging to term, and fraction of windows that lie in gene set genes |\n| GENE_SET_DISTANCE   | RDS of a matrix containing jaccard index scores for all pairs of gene sets in GMT file |\n\n*Skipper can generate these files from other input, or you can make your own versions with the appropriate columns.\n\nWant to make your own partition from RNA-seq of a sample? Run the tools/subset_gff.py script on RNA-seq quantifications from Salmon. We used a 1 TPM cutoff. Enter the resulting file for the GFF. This makes the window annotations more accurate but we haven\u2019t carefully examined how important it is for the cell sample to match.\n\n<h2>Making a manifest</h2>\n\n| Column      | Description |\n| ----------- | ----------- |\n| Experiment       | CLIP samples will be compared against Input samples within an experiment. The same sample can be used in multiple experiments |\n| Sample           | Each CLIP and Input sample will be processed separately until testing for differential binding   |\n| Cells            | A place to record information on the cell sample used: this is not currently used in analysis  |\n| Input_replicate  | Replicate # for the same Sample. The same Input replicate (fastq and number) can be used for multiple CLIP replicates |\n| Input_adapter    | Fasta of adapter sequences for Input replicate                                                     |\n| Input_fastq      | Path to Input replicate fastq (multiple files can be entered per cell to be concatenated            |\n| Input_bam       | (Optional) Enter path to Input BAM file            |\n| CLIP_replicate   | Replicate # for the same Sample. Distinct CLIP replicates are required |\n| CLIP_adapter     | Fasta of adapter sequences for CLIP replicate                                                     |\n| CLIP_fastq       | Path to CLIP replicate fastq (multiple files can be entered per cell to be concatenated            |\n| CLIP_bam       | (Optional) Enter path to CLIP BAM file            |\n\nSkipper requires multiple CLIP replicates of the same sample to call reproducible windows. Enter multiple replicates with the same experiment and sample columns on separate lines, incrementing the replicate number for each replicate. The same input replicate can be used in multiple experiments and repeated for the same sample if you estimate overdispersion from CLIP replicates. If the same replicate is used for multiple comparisons, the sample and replicate columns must be consistent.\n\nSee the example manifest in the example folder for the exact formatting and to test running Skipper by downloading the example dataset: https://zenodo.org/records/10636793.\n\n<h2>Running Skipper</h2>\n\nSkipper can be run like any other Snakemake workflow. \n\nCreate a new directory to store output, copy the Snakemake and config files, and make all edits necessary to the config file. In the `all` rule of the `Skipper.py` file, comment out output that you do not wish to inspect.\n\nRemember to load the Snakemake environment before running\n\n`conda activate snakemake`\n\nUse the dry run function to confirm that Snakemake can parse all the information:\n\n`snakemake -ns Skipper.py -j 1`\n\nOnce Snakemake has confirmed DAG creation, if applicable, submit the jobs using high performance computing infrastructure options suit you:\n\n<h3>Option 1: Manually installed packages</h3>\n\n`snakemake -kps Skipper.py -w 15 -j 30`\n\n`snakemake -kps Skipper.py -w 15 -j 30 --cluster \"sbatch -t {params.run_time} -e {params.error_file} -o {params.out_file} -p condo -q condo -A csd792 --tasks-per-node {threads} --job-name {params.job_name} --mem {params.memory}\"`\n\n<h3>Option 2: Singularity</h3>\n\n`snakemake -kps Skipper.py -w 15 -j 30 --use-singularity --singularity-args \"--bind /tscc\"`\n\n`snakemake -kps Skipper.py -w 15 -j 30 --use-singularity --singularity-args \"--bind /tscc\" --cluster \"sbatch -t {params.run_time} -e {params.error_file} -o {params.out_file} -p condo -q condo -A csd792 --tasks-per-node {threads} --job-name {params.job_name} --mem {params.memory}\"`\n\nDid Skipper terminate? Sometimes jobs fail - inspect any error output and rerun the same command if there is no apparent explanation such as uninstalled dependencies or a misformatted input file. Snakemake will try to pick up where it left off.\n\n<h2>Skipper output</h2>\n\nSkipper produces numerous output files. The `output/figures` directory contains figures summarizing the data.\n| Output      | Description |\n| ----------- | ----------- |\n| all_reads       | Visualization of RNA region preferences based on total reads instead of called windows |\n| threshold_scan  | Visualization of selection of minimum read coverage for statistical testing  |\n| input_distributions | Visualization of betabinomial fits to aggregate data |\n| enriched_windows | QC of called enriched windows  |\n| enrichment_concordance  | Mosaic plot of agreement between called enriched windows between replicates |\n| enrichment_reproducibility  | Number of total and enriched windows as a function of the number of replicates included  |\n| reproducible_enriched_windows | Visualization of RNA region preferences for windows called by at least two replicates   |\n| gene_sets        | Visualization of top enriched GO terms relative to ENCODE reproducible enriched windows   |\n| clip_scatter_re  | Visualization of enriched repetitive elements   |\n| tsne       | t-SNE visualization of binding preferences releative to ENCODE RBPs   |\n\nKey outputs: Annotated reproducible enriched windows can be accessed at `output/reproducible_enriched_windows/` and Homer motif output is at `output/homer/`\n\nExample CLIP fastqs and processed data are available at GEO and SRA: `https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE213867`\n"
      },
      "source": "https://raw.githubusercontent.com/YeoLab/skipper/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Option 2: Singularity",
        "parent_header": [
          "skipper",
          "Running Skipper"
        ],
        "type": "Text_excerpt",
        "value": "# skipper\n![Skipper cartoon](documents/logo.png)\n\nSkip the peaks and expose RNA-binding in CLIP data\n\nSee published article in Cell Genomics: https://www.cell.com/cell-genomics/fulltext/S2666-979X(23)00085-X\n\n<h2>Prerequisites</h2>\nSkipper requires several executables and packages:\n\n| Tool      | Link |\n| ----------- | ----------- |\n| R           | https://www.r-project.org/       |\n| Python   | https://www.python.org/downloads/        |\n| Conda/Mamba   | https://conda.io/projects/conda/en/latest/user-guide/install/index.html        |\n| Snakemake   | https://snakemake.readthedocs.io/en/stable/getting_started/installation.html        |\n| UMICollapse   | https://github.com/Daniel-Liu-c0deb0t/UMICollapse        |\n| Skewer   | https://github.com/relipmoc/skewer        |\n| Fastp    | https://github.com/OpenGene/fastp        |\n| bedtools     | https://github.com/arq5x/bedtools2        |\n| STAR   | https://github.com/alexdobin/STAR        |\n| Java   | https://jdk.java.net/20/        |\n| samtools | http://www.htslib.org/download/        |\n| FastQC | https://www.bioinformatics.babraham.ac.uk/projects/fastqc/ |\n| HOMER | http://homer.ucsd.edu/homer/introduction/install.html |\n\nFor example, below are some commands for installing Miniconda.\n\n`curl -L -O \"https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\"`\n\n`bash Miniconda3-latest-Linux-x86_64.sh`\n\nSkipper requires several python and R packages. In order to install the precise versions used in the manuscript, we have provided skipper_env.yaml to install the used versions of R and corresponding packages from source.\n\n<h3>Option 1: Manual installation (Linux-amd64)</h3>\n\nUse conda to create a snakemake environment for installing required packages:\n\n`conda env create -f installation/skipper_env.yaml`\n\nUse the install_umicollapse.sh script to complete installation of UMICollapse v1.0.0 in the installation folder. Expect the whole process to take around 30 seconds. \n\n`cd installation && ./install_umicollapse.sh`\n\nAlternatively, at least as of this writing, Skipper is compatible with the newest version of R and its packages. The required R packages can be installed for an existing R installation as follows:\n\n`install.packages(c(\"tidyverse\", \"VGAM\", \"viridis\", \"ggrepel\", \"RColorBrewer\", \"Rtsne\", \"ggupset\", \"ggdendro\", \"cowplot\"))`\n\n`if (!require(\"BiocManager\", quietly = TRUE))`\n    `install.packages(\"BiocManager\")`\n`BiocManager::install(c(\"GenomicRanges\",\"fgsea\",\"rtracklayer\"))`\n\nPaths to locally installed versions can be supplied in the config file, described below.\n\n<h3>Option 2: Singularity installation (Linux-amd64)</h3>\n\n`conda create -n snakemake snakemake==7.32.3 star==2.7.10b`\n\nSingularity setup: https://docs.sylabs.io/guides/3.11/admin-guide/installation.html\n\n<h2>Preparing to run Skipper</h2>\nSkipper uses a Snakemake workflow. The `Skipper.py` file contains the rules necessary to process CLIP data from fastqs. Skipper also supports running on BAMs - note that Skipper's analysis of repetitive elements will assume that non-uniquely mapping reads are contained within the BAM files.\n\nProviding an absolute path to the GitHub repository `REPO_PATH` will help Snakemake find resources regardless of the directory where Skipper is run.\n\nInternal to the Yeo lab, setting the `REPO_PATH` to `/projects/ps-yeolab3/eboyle/encode/pipeline/github/yeo` will save time on preprocessing annotation files (check the annotation folder for HepG2, K562, or HEK293T. More annotations are available at `/projects/ps-yeolab4/software/skipper/1.0.0/bin/skipper/annotations/`).\n\nNumerous resources must be entered in the `Skipper_config.py` file:\n\n| Resource      | Description |\n| ----------- | ----------- |\n| MANIFEST            | Information on samples to run                                                        |\n| GENOME              | Samtools- and STAR-indexed fasta of genome for the sample of interest                |\n| STAR_DIR            | Path to STAR reference for aligning sequencing reads                |\n\n\nOther paths to help Skipper run must be entered: \n\n| Path    | Description |\n| ----------- | ----------- |\n| EXE_DIR     | For convenience to point to stable locally installed software: it is added to PATH when Skipper runs |\n| TOOL_DIR    | Directory for the tools located in the GitHub        |\n\n\nInformation about the CLIP library to be analyzed is also required:\n\n| Setting      | Description |\n| ----------- | ----------- |\n| UMI_SIZE            | Bases to trim for deduplication (10 for current eCLIP)       |\n| INFORMATIVE_READ    | Which read (1 or 2) reflects the crosslink site (for Paired End runs)        |\n| OVERDISPERSION_MODE | Overdispersion can be estimated from multiple input replicates (\"input\") or multiple CLIP replicates (\"clip\"): \"input\" is recommended |\n\n\n<h2>Customizable input for Skipper</h2>\nSkipper accepts customizable files for several steps, which are also entered in the `Skipper_config.py` file: \n\n| Input      | Description |\n| ----------- | ----------- |\n| GFF                 | Gzipped gene annotation to partition the transcriptome and count reads.                       |\n| PARTITION*           | Gzipped BED file of windows to test (can be generated from GFF file)                          |\n| FEATURE_ANNOTATIONS* | Gzipped TSV file with the following columns: chrom,start,end,name,score,strand,feature_id,feature_bin,feature_type_top,feature_types,gene_name,gene_id, transcript_ids,gene_type_top,transcript_type_top,gene_types,transcript_types (can be generated from GFF file) |\n| BLACKLIST           | Removes windows from reproducible enriched window files. Start and end coordinates must match tiled windows exactly.      |\n| ACCESSION_RANKINGS  | A ranking of gene and transcript types present in the GFF to facilitate the transcriptome partitioning  |\n| REPEAT_TABLE        | Coordinates of repetitive elements, available from UCSC Genome Browser               |\n| REPEAT_BED*          | Gzipped sorted, nonoverlapping, tab-delimited annotations of repetitive elements: chr,start,end,label,score,strand,name,class,family,proportion_gc  |\n| GENE_SETS           | GMT files of gene sets for gene set enrichment calculation |\n| GENE_SET_REFERENCE  | TSV of gene set name, number of windows belonging to term, and fraction of windows that lie in gene set genes |\n| GENE_SET_DISTANCE   | RDS of a matrix containing jaccard index scores for all pairs of gene sets in GMT file |\n\n*Skipper can generate these files from other input, or you can make your own versions with the appropriate columns.\n\nWant to make your own partition from RNA-seq of a sample? Run the tools/subset_gff.py script on RNA-seq quantifications from Salmon. We used a 1 TPM cutoff. Enter the resulting file for the GFF. This makes the window annotations more accurate but we haven\u2019t carefully examined how important it is for the cell sample to match.\n\n<h2>Making a manifest</h2>\n\n| Column      | Description |\n| ----------- | ----------- |\n| Experiment       | CLIP samples will be compared against Input samples within an experiment. The same sample can be used in multiple experiments |\n| Sample           | Each CLIP and Input sample will be processed separately until testing for differential binding   |\n| Cells            | A place to record information on the cell sample used: this is not currently used in analysis  |\n| Input_replicate  | Replicate # for the same Sample. The same Input replicate (fastq and number) can be used for multiple CLIP replicates |\n| Input_adapter    | Fasta of adapter sequences for Input replicate                                                     |\n| Input_fastq      | Path to Input replicate fastq (multiple files can be entered per cell to be concatenated            |\n| Input_bam       | (Optional) Enter path to Input BAM file            |\n| CLIP_replicate   | Replicate # for the same Sample. Distinct CLIP replicates are required |\n| CLIP_adapter     | Fasta of adapter sequences for CLIP replicate                                                     |\n| CLIP_fastq       | Path to CLIP replicate fastq (multiple files can be entered per cell to be concatenated            |\n| CLIP_bam       | (Optional) Enter path to CLIP BAM file            |\n\nSkipper requires multiple CLIP replicates of the same sample to call reproducible windows. Enter multiple replicates with the same experiment and sample columns on separate lines, incrementing the replicate number for each replicate. The same input replicate can be used in multiple experiments and repeated for the same sample if you estimate overdispersion from CLIP replicates. If the same replicate is used for multiple comparisons, the sample and replicate columns must be consistent.\n\nSee the example manifest in the example folder for the exact formatting and to test running Skipper by downloading the example dataset: https://zenodo.org/records/10636793.\n\n<h2>Running Skipper</h2>\n\nSkipper can be run like any other Snakemake workflow. \n\nCreate a new directory to store output, copy the Snakemake and config files, and make all edits necessary to the config file. In the `all` rule of the `Skipper.py` file, comment out output that you do not wish to inspect.\n\nRemember to load the Snakemake environment before running\n\n`conda activate snakemake`\n\nUse the dry run function to confirm that Snakemake can parse all the information:\n\n`snakemake -ns Skipper.py -j 1`\n\nOnce Snakemake has confirmed DAG creation, if applicable, submit the jobs using high performance computing infrastructure options suit you:\n\n<h3>Option 1: Manually installed packages</h3>\n\n`snakemake -kps Skipper.py -w 15 -j 30`\n\n`snakemake -kps Skipper.py -w 15 -j 30 --cluster \"sbatch -t {params.run_time} -e {params.error_file} -o {params.out_file} -p condo -q condo -A csd792 --tasks-per-node {threads} --job-name {params.job_name} --mem {params.memory}\"`\n\n<h3>Option 2: Singularity</h3>\n\n`snakemake -kps Skipper.py -w 15 -j 30 --use-singularity --singularity-args \"--bind /tscc\"`\n\n`snakemake -kps Skipper.py -w 15 -j 30 --use-singularity --singularity-args \"--bind /tscc\" --cluster \"sbatch -t {params.run_time} -e {params.error_file} -o {params.out_file} -p condo -q condo -A csd792 --tasks-per-node {threads} --job-name {params.job_name} --mem {params.memory}\"`\n\nDid Skipper terminate? Sometimes jobs fail - inspect any error output and rerun the same command if there is no apparent explanation such as uninstalled dependencies or a misformatted input file. Snakemake will try to pick up where it left off.\n\n<h2>Skipper output</h2>\n\nSkipper produces numerous output files. The `output/figures` directory contains figures summarizing the data.\n| Output      | Description |\n| ----------- | ----------- |\n| all_reads       | Visualization of RNA region preferences based on total reads instead of called windows |\n| threshold_scan  | Visualization of selection of minimum read coverage for statistical testing  |\n| input_distributions | Visualization of betabinomial fits to aggregate data |\n| enriched_windows | QC of called enriched windows  |\n| enrichment_concordance  | Mosaic plot of agreement between called enriched windows between replicates |\n| enrichment_reproducibility  | Number of total and enriched windows as a function of the number of replicates included  |\n| reproducible_enriched_windows | Visualization of RNA region preferences for windows called by at least two replicates   |\n| gene_sets        | Visualization of top enriched GO terms relative to ENCODE reproducible enriched windows   |\n| clip_scatter_re  | Visualization of enriched repetitive elements   |\n| tsne       | t-SNE visualization of binding preferences releative to ENCODE RBPs   |\n\nKey outputs: Annotated reproducible enriched windows can be accessed at `output/reproducible_enriched_windows/` and Homer motif output is at `output/homer/`\n\nExample CLIP fastqs and processed data are available at GEO and SRA: `https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE213867`\n"
      },
      "source": "https://raw.githubusercontent.com/YeoLab/skipper/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "download",
    "contact",
    "contributors",
    "documentation",
    "usage",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:08:47",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 7
      },
      "technique": "GitHub_API"
    }
  ]
}