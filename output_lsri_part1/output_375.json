{
  "application_domain": [
    {
      "confidence": 9.84,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/giang-trinh/trap-mvn"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-01-09T14:14:45Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-09-30T14:27:16Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A Python package for computing various types of trap spaces in multi-valued networks"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9895789058142416,
      "result": {
        "original_header": "Trap space detection in multi-valued networks with `trapmvn`",
        "type": "Text_excerpt",
        "value": "Package `trapmvn` implements trap space detection in multi-valued \nlogical models through answer set programming. Currently, we support \n[SBML-qual](https://sbml.org) (used e.g. by [GINsim](http://ginsim.org)) \nand [BMA](http://biomodelanalyzer.org) model formats as inputs. \n"
      },
      "source": "https://raw.githubusercontent.com/giang-trinh/trap-mvn/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9584153563125176,
      "result": {
        "original_header": "Benchmarks",
        "type": "Text_excerpt",
        "value": "In the `benchmarks` folder, you can find several Jupyter notebooks with performance \ncomparison between `trapmvn` and other similar tools, like `trappist`, `mpbn` and `an-asp`.\n \n"
      },
      "source": "https://raw.githubusercontent.com/giang-trinh/trap-mvn/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/giang-trinh/trap-mvn/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/giang-trinh/trap-mvn/main/case-study/single-perturbation.ipynb"
      },
      "source": "https://raw.githubusercontent.com/giang-trinh/trap-mvn/main/case-study/single-perturbation.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/giang-trinh/trap-mvn/main/case-study/dual-perturbation.ipynb"
      },
      "source": "https://raw.githubusercontent.com/giang-trinh/trap-mvn/main/case-study/dual-perturbation.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/giang-trinh/trap-mvn/main/benchmarks/bma_to_sbml.ipynb"
      },
      "source": "https://raw.githubusercontent.com/giang-trinh/trap-mvn/main/benchmarks/bma_to_sbml.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/giang-trinh/trap-mvn/main/benchmarks/maximal_trap_spaces.ipynb"
      },
      "source": "https://raw.githubusercontent.com/giang-trinh/trap-mvn/main/benchmarks/maximal_trap_spaces.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/giang-trinh/trap-mvn/main/benchmarks/old_benchmarks.ipynb"
      },
      "source": "https://raw.githubusercontent.com/giang-trinh/trap-mvn/main/benchmarks/old_benchmarks.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/giang-trinh/trap-mvn/main/benchmarks/minimal_trap_spaces.ipynb"
      },
      "source": "https://raw.githubusercontent.com/giang-trinh/trap-mvn/main/benchmarks/minimal_trap_spaces.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/giang-trinh/trap-mvn/main/benchmarks/fixed_points.ipynb"
      },
      "source": "https://raw.githubusercontent.com/giang-trinh/trap-mvn/main/benchmarks/fixed_points.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/giang-trinh/trap-mvn/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "giang-trinh/trap-mvn"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Trap space detection in multi-valued networks with trapmvn"
      },
      "source": "https://raw.githubusercontent.com/giang-trinh/trap-mvn/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1.0,
      "result": {
        "original_header": "Trap space detection in multi-valued networks with `trapmvn`",
        "type": "Text_excerpt",
        "value": "You can install `trapmvn` through `pip`:\n```\npip install git+https://github.com/giang-trinh/trap-mvn.git\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/giang-trinh/trap-mvn/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/giang-trinh/trap-mvn/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2022 giang-trinh\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/giang-trinh/trap-mvn/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "trap-mvn"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "giang-trinh"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 144869,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 128210,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/giang-trinh/trap-mvn/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-04 00:30:51",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 2
      },
      "technique": "GitHub_API"
    }
  ],
  "support": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Python API and case study",
        "parent_header": [
          "Trap space detection in multi-valued networks with `trapmvn`"
        ],
        "type": "Text_excerpt",
        "value": "If you want to use `trapmvn` directly from Python, you can inspect Jupyter notebooks\nin our `case-study` folder. Here, we show how to load a model, convert it into a\nPetri net encoding and subsequently compute trap spaces using the `trapmvn` method.\n\nThe case study itself is concerned with assessing the reliability of knockout \ninterventions in a large-scale model of Myc-deregulation in breast cancer. Specifically,\nwe compare the trap spaces for all viable single- and dual- variable knockouts,\nand we hten compare these interventions on the basis of their \"reliable\" and \"opportunistic\"\neffects on the model phenotypes.\n"
      },
      "source": "https://raw.githubusercontent.com/giang-trinh/trap-mvn/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "type": [
    {
      "confidence": 0.82,
      "result": {
        "type": "String",
        "value": "commandline-application"
      },
      "technique": "software_type_heuristics"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Command line usage",
        "parent_header": [
          "Trap space detection in multi-valued networks with `trapmvn`"
        ],
        "type": "Text_excerpt",
        "value": "You can use `trapmvn` from command line as a standalone program. The\noutput should be a valid `.tsv` file (tab-separated-values) representing\nall trap space. The program accepts the following arguments:\n\n - `-c` [`--computation`]: Use `min`, `max` or `fix` to compute minimal trap\n spaces, maximal trap spaces, or fixed-points.\n - `-s` [`--semantics`]: Use `unitary` or `general` to define the desired \n model variable update scheme.\n - `-m` [`--max`]: Integer limit on the number of enumerated solutions.\n - `-fm` [`--fixmethod`]: Use either `deadlock` and `siphon` to switch between\n different fixed-point computation methods (only applies when combined \n with `-c fix`).\n\nThe input model can be either given on standard input (in which case the presumed\nformat is SBML), or as a file path in the last argument (in which case we infer\nthe format from the file extension).\n\nExample usage:\n\n```\npython3 -m trapmvn --computation max --semantics general --max 10 ./path/to/model.bma\npython3 -m trapmvn -c min -s unitary -m 100 ./path/to/model.sbml\n```\n"
      },
      "source": "https://raw.githubusercontent.com/giang-trinh/trap-mvn/main/README.md",
      "technique": "header_analysis"
    }
  ]
}