{
  "application_domain": [
    {
      "confidence": 22.97,
      "result": {
        "type": "String",
        "value": "Computer Vision"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/nceglia/genevector"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2020-10-19T01:33:23Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-10-03T02:23:34Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "Vector representations of gene co-expression in single cell RNAseq."
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.988583991488569,
      "result": {
        "original_header": "Loading Gene Embedding",
        "type": "Text_excerpt",
        "value": "After training, two vector files are produced (for input and output weights). It is recommended to take the average of both weights ```vector=\"average\"```). The GeneEmbedding class has several important analysis and visualization methods listed below.\n```\ngembed = GeneEmbedding(\"genes.vec\", dataset, vector=\"average\")\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/nceglia/genevector/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8782494608916239,
      "result": {
        "original_header": "1. Computing gene similarities",
        "type": "Text_excerpt",
        "value": "A pandas dataframe can be generated using ```compute_similarities``` that includes the most similar genes and their cosine similarities for a given gene query. A barplot figure with a specified number of the most similar genes can be generated using BASH2*.\n```\ndf = gembed.compute_similarities(\"CD8A\")\ngembed.plot_similarities(\"CD8A\",n_genes=10)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/nceglia/genevector/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9869619586340224,
      "result": {
        "original_header": "2. Generating Metagenes",
        "type": "Text_excerpt",
        "value": "```get_adata``` produces and AnnData object that houses the gene embedding. This allows the use of Scanpy and AnnData visualization functions. The resolution parameter is passed directly to BASH2* to cluster the co-expression graph. BASH3* returns a dictionary that stores each metagene as a list associated with an id. For a given id, the metagene can be visualized on a UMAP embedding using the BASH4* function.\n```\ngdata = embed.get_adata(resolution=40)\nmetagenes = embed.get_metagenes(gdata)\nembed.plot_metagene(gdata, mg=isg_metagene)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/nceglia/genevector/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9583926632723315,
      "result": {
        "original_header": "Loading the Cell Embedding",
        "type": "Text_excerpt",
        "value": "Using the GeneEmbedding object and the GeneVectorDataset object, a CellEmbedding object can be instantiated and used to produce a Scanpy AnnData object with ```get_adata```. This method stores cell embedding under BASH2* in layers and generates a UMAP embedding using Scanpy. Scanpy functionality can be used to visualize UMAPS (BASH3*). \n```\ncembed = CellEmbedding(dataset, embed)\nadata = cembed.get_adata()\n```\n \nThe cell embedding can be batch corrected using ```cembed.batch_correct```. The user is required to select a valid column present in the *obs* dataframe and specify a reference label. This is a very fast operation.\n```\ncembed.batch_correct(column=\"sample\",reference=\"control\")\nadata = cembed.get_adata()\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/nceglia/genevector/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9379516782625005,
      "result": {
        "original_header": "Scoring Cells by Metagene",
        "type": "Text_excerpt",
        "value": "To score expression for each metagene against all cells, we can call the GeneEmbedding function ```score_metagenes``` with the cell-based AnnData object. To plot a heatmap of all metagenes over a set of cell labels, use the BASH2* function. Metagenes are scored with the Scanpy BASH3* function.\n```\nembed.score_metagenes(adata, metagenes)\nembed.plot_metagenes_scores(adata,mgs,\"cell_type\")\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/nceglia/genevector/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9232841162320878,
      "result": {
        "original_header": "Performing Cell Type Assignment",
        "type": "Text_excerpt",
        "value": "Using a dictionary of cell type annotations to marker genes, each cell can be classified using the CellEmbedding function ```phenotype_probability```. This function returns a new annotated AnnData object, where the resulting classification can be found in BASH2* (the user can also supply a column name using BASH3*). A separate column in the obs dataframe is created to hold the pseudo-probabilities for each cell type. These probabilties can be shown on a UMAP using standard the Scanpy function BASH4*.\n```\nmarkers = dict()\nmarkers[\"T Cell\"] = [\"CD3D\",\"CD3G\",\"CD3E\",\"TRAC\",\"IL32\",\"CD2\"]\nmarkers[\"B/Plasma\"] = [\"CD79A\",\"CD79B\",\"MZB1\",\"CD19\",\"BANK1\"]\nmarkers[\"Myeloid\"] = [\"LYZ\",\"CST3\",\"AIF1\",\"CD68\",\"C1QA\",\"C1QB\",\"C1QC\"]\n\nannotated_adata = cembed.phenotype_probability(adata,markers)\n\nprob_cols = [x for x in annotated_adata.obs.columns.tolist() if \"Pseudo-probability\" in x]\nsc.pl.umap(annotated_adata,color=prob_cols+[\"genevector\"],size=25)\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/nceglia/genevector/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/nceglia/genevector/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nceglia/genevector/main/example/batch_simulated_scib.ipynb"
      },
      "source": "https://raw.githubusercontent.com/nceglia/genevector/main/example/batch_simulated_scib.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nceglia/genevector/main/example/normalization_simulated_batch.ipynb"
      },
      "source": "https://raw.githubusercontent.com/nceglia/genevector/main/example/normalization_simulated_batch.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nceglia/genevector/main/example/fitness.ipynb"
      },
      "source": "https://raw.githubusercontent.com/nceglia/genevector/main/example/fitness.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nceglia/genevector/main/example/pbmc.ipynb"
      },
      "source": "https://raw.githubusercontent.com/nceglia/genevector/main/example/pbmc.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nceglia/genevector/main/example/normalization_full_dataset.ipynb"
      },
      "source": "https://raw.githubusercontent.com/nceglia/genevector/main/example/normalization_full_dataset.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nceglia/genevector/main/example/spectrum_cancer.ipynb"
      },
      "source": "https://raw.githubusercontent.com/nceglia/genevector/main/example/spectrum_cancer.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nceglia/genevector/main/example/tica.ipynb"
      },
      "source": "https://raw.githubusercontent.com/nceglia/genevector/main/example/tica.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nceglia/genevector/main/example/spectrum.ipynb"
      },
      "source": "https://raw.githubusercontent.com/nceglia/genevector/main/example/spectrum.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 10
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/nceglia/genevector/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "nceglia/genevector"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "source": "https://raw.githubusercontent.com/nceglia/genevector/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "has_build_file": [
    {
      "confidence": 1,
      "result": {
        "format": "dockerfile",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nceglia/genevector/main/docker/Dockerfile"
      },
      "source": "https://raw.githubusercontent.com/nceglia/genevector/main/docker/Dockerfile",
      "technique": "file_exploration"
    }
  ],
  "images": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nceglia/genevector/main/framework.png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/nceglia/genevector/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Installation",
        "type": "Text_excerpt",
        "value": "Install using pip\n```\npip install genevector\n```\nor install from Github\n```\npython3 -m venv gvenv\nsource gvenv/bin/activate\npython3 pip install -r requirements.txt\npython3 setup.py install\n```"
      },
      "source": "https://raw.githubusercontent.com/nceglia/genevector/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "invocation": [
    {
      "confidence": 0.9064972467242964,
      "result": {
        "original_header": "Loading scanpy dataset into GeneVector.",
        "type": "Text_excerpt",
        "value": "```\nfrom genevector.data import GeneVectorDataset\nfrom genevector.model import GeneVectorTrainer\nfrom genevector.embedding import GeneEmbedding, CellEmbedding\n\nimport scanpy as sc\n\ndataset = GeneVectorDataset(adata, device=\"cuda\")\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/nceglia/genevector/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8263885933482422,
      "result": {
        "original_header": "Training GeneVector",
        "type": "Text_excerpt",
        "value": "To understand model convergence, a loss plot by epoch can be generated.\n```\ncmps.plot()\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/nceglia/genevector/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/nceglia/genevector/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "MIT License",
        "spdx_id": "MIT",
        "type": "License",
        "url": "https://api.github.com/licenses/mit",
        "value": "https://api.github.com/licenses/mit"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "MIT License\n\nCopyright (c) 2020 Nick Ceglia\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
      },
      "source": "https://raw.githubusercontent.com/nceglia/genevector/main/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "logo": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nceglia/genevector/main/logo.png?raw=true"
      },
      "source": "https://raw.githubusercontent.com/nceglia/genevector/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "genevector"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "nceglia"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 64918,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Dockerfile",
        "size": 554,
        "type": "Programming_language",
        "value": "Dockerfile"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/nceglia/genevector/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "nceglia",
          "type": "User"
        },
        "date_created": "2023-06-25T19:12:51Z",
        "date_published": "2023-06-25T19:17:05Z",
        "description": "Release for publication.",
        "html_url": "https://github.com/nceglia/genevector/releases/tag/v0.0.1",
        "name": "v0.0.1",
        "release_id": 109827390,
        "tag": "v0.0.1",
        "tarball_url": "https://api.github.com/repos/nceglia/genevector/tarball/v0.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/nceglia/genevector/releases/109827390",
        "value": "https://api.github.com/repos/nceglia/genevector/releases/109827390",
        "zipball_url": "https://api.github.com/repos/nceglia/genevector/zipball/v0.0.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "somef_missing_categories": [
    "citation",
    "acknowledgement",
    "run",
    "download",
    "requirements",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier"
  ],
  "somef_provenance": {
    "date": "2024-10-03 23:04:41",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 32
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Tutorials (see \"example\" directory)",
        "type": "Text_excerpt",
        "value": "1. PBMC workflow: Identification of interferon stimulated metagene and cell type annotation.\n2. TICA workflow: Cell type assignment.\n3. SPECTRUM workflow: Vector arithmetic for site specific metagenes.\n4. FITNESS workflow: Identifying increasing metagenes in time series.\n"
      },
      "source": "https://raw.githubusercontent.com/nceglia/genevector/main/README.md",
      "technique": "header_analysis"
    }
  ]
}