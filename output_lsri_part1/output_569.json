{
  "application_domain": [
    {
      "confidence": 27.39,
      "result": {
        "type": "String",
        "value": "Natural Language Processing"
      },
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9998870696463984,
      "result": {
        "type": "String",
        "value": "Semantic web"
      },
      "technique": "supervised_classification"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/SynBioDex/libSBOLj3"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-04-28T15:33:08Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2023-06-03T05:53:59Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "A Java library for the Synthetic Biology Open Language version 3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9862728012490923,
      "result": {
        "original_header": "libSBOLj3 - A Java library for the Synthetic Biology Open Language 3",
        "type": "Text_excerpt",
        "value": "The libSBOLj Java library has been developed for the [Synthetic Biology Open Language 3.0](https://sbolstandard.org/data-model-specification). The library is  under development and is currently available as an alpha release.  \n"
      },
      "source": "https://raw.githubusercontent.com/SynBioDex/libSBOLj3/master/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/SynBioDex/libSBOLj3/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 0
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/SynBioDex/libSBOLj3/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SynBioDex/libSBOLj3"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "libSBOLj3 - A Java library for the Synthetic Biology Open Language 3"
      },
      "source": "https://raw.githubusercontent.com/SynBioDex/libSBOLj3/master/README.md",
      "technique": "regular_expression"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/SynBioDex/libSBOLj3/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": ""
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "Apache License 2.0",
        "spdx_id": "Apache-2.0",
        "type": "License",
        "url": "https://api.github.com/licenses/apache-2.0",
        "value": "https://api.github.com/licenses/apache-2.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
      },
      "source": "https://raw.githubusercontent.com/SynBioDex/libSBOLj3/master/LICENSE",
      "technique": "file_exploration"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "libSBOLj3"
      },
      "technique": "GitHub_API"
    }
  ],
  "ontologies": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/SynBioDex/libSBOLj3/master/ontologies/sbo.owl"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/SynBioDex/libSBOLj3/master/ontologies/so-simple.owl"
      },
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/SynBioDex/libSBOLj3/master/ontologies/edam.owl"
      },
      "technique": "file_exploration"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "Organization",
        "value": "SynBioDex"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Java",
        "size": 984803,
        "type": "Programming_language",
        "value": "Java"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/SynBioDex/libSBOLj3/master/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "goksel",
          "type": "User"
        },
        "date_created": "2023-05-02T10:46:31Z",
        "date_published": "2023-05-02T10:51:46Z",
        "html_url": "https://github.com/SynBioDex/libSBOLj3/releases/tag/1.0.0",
        "name": "1.0.0",
        "release_id": 101558807,
        "tag": "1.0.0",
        "tarball_url": "https://api.github.com/repos/SynBioDex/libSBOLj3/tarball/1.0.0",
        "type": "Release",
        "url": "https://api.github.com/repos/SynBioDex/libSBOLj3/releases/101558807",
        "value": "https://api.github.com/repos/SynBioDex/libSBOLj3/releases/101558807",
        "zipball_url": "https://api.github.com/repos/SynBioDex/libSBOLj3/zipball/1.0.0"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "As a Maven dependency in a Maven project",
        "parent_header": [
          "libSBOLj3 - A Java library for the Synthetic Biology Open Language 3",
          "How to use libSBOLj3"
        ],
        "type": "Text_excerpt",
        "value": "Use this option if you are developing a Java application using [Maven](https://maven.apache.org/). Add the following libSBOLj3 dependency to your Maven applications's POM file (pom.xml). Please also make sure that you include the Nexus' Snapshots repository URL in the POM file. \n``` \n</dependencies>\n\t...\n   <dependency>\n      <groupId>org.sbolstandard</groupId>\n      <artifactId>libSBOLj3</artifactId>\n      <version>1.0.0-SNAPSHOT</version>\n   </dependency>\n   ...\n</dependencies>\n\n<repositories>\n   <repository>\n      <id>oss-sonatype</id>\n      <name>oss-sonatype</name>\n      <url>https://oss.sonatype.org/content/repositories/snapshots/</url>\n      <snapshots>\n         <enabled>true</enabled>\n      </snapshots>\n   </repository>\n</repositories>\n```\n"
      },
      "source": "https://raw.githubusercontent.com/SynBioDex/libSBOLj3/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "As a Java dependency in a non-Maven project",
        "parent_header": [
          "libSBOLj3 - A Java library for the Synthetic Biology Open Language 3",
          "How to use libSBOLj3"
        ],
        "type": "Text_excerpt",
        "value": "The libSBOLj3 library is available as a JAR file. Please download the file from the [releases page](https://github.com/SynBioDex/libSBOLj3/tags). A single JAR file (with the \"withDepencencies\" suffix), which includes all the required libSBOLj3 related dependencies, is also available.\n"
      },
      "source": "https://raw.githubusercontent.com/SynBioDex/libSBOLj3/master/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "installation",
    "citation",
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file",
    "executable_example"
  ],
  "somef_provenance": {
    "date": "2024-10-04 01:14:55",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 1
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "SBOL Examples",
        "parent_header": [
          "libSBOLj3 - A Java library for the Synthetic Biology Open Language 3"
        ],
        "type": "Text_excerpt",
        "value": "[Several SBOL3 examples](https://github.com/SynBioDex/libSBOLj3/tree/master/libSBOLj3/output) are available as part of the libSBOLj3 library. These examples have also been made available as part of the [SBOL Test Suite](https://github.com/SynBioDex/SBOLTestSuite/tree/master/SBOL3). Some of these examples have beeen explained in the recent SBOL3 paper, titled \"[The Synthetic Biology Open Language (SBOL) Version 3: Simplified Data Exchange for Bioengineering](https://doi.org/10.3389/fbioe.2020.01009)\".\n"
      },
      "source": "https://raw.githubusercontent.com/SynBioDex/libSBOLj3/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Getting Started",
        "parent_header": [
          "libSBOLj3 - A Java library for the Synthetic Biology Open Language 3"
        ],
        "type": "Text_excerpt",
        "value": "Please see the [tutorial code](https://github.com/SynBioDex/libSBOLj3/tree/feature/combine2020/libSBOLj3/output/combine2020) and the [COMBINE 2020 slides](https://github.com/SynBioDex/Community-Media/blob/master/2020/COMBINE20/pySBOL3-COMBINE-2020.pptx) for more details. The tutorial code includes additional examples to crete interactions, constraints, component references and so on.\n"
      },
      "source": "https://raw.githubusercontent.com/SynBioDex/libSBOLj3/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Creating a new SBOL document",
        "parent_header": [
          "libSBOLj3 - A Java library for the Synthetic Biology Open Language 3",
          "Getting Started"
        ],
        "type": "Text_excerpt",
        "value": "The SBOLDocument class is used to create SBOL documents which act as containers to create and access other SBOL entities. Although not required, the base URI can be used as prefix for all new SBOL entities. \n```java\nURI base=URI.create(\"https://synbiohub.org/public/igem/\");\nSBOLDocument doc=new SBOLDocument(base);\n```\t\nThe following sections summarises how to create the [i13504](http://parts.igem.org/Part:BBa_I13504) device, formed of an RBS, a CDS and a terminator parts. Both the device and the parts are represented as SBOL components."
      },
      "source": "https://raw.githubusercontent.com/SynBioDex/libSBOLj3/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Creating parts and sequences",
        "parent_header": [
          "libSBOLj3 - A Java library for the Synthetic Biology Open Language 3",
          "Getting Started"
        ],
        "type": "Text_excerpt",
        "value": "The newly created SBOLDocument object then be used as a *factory* to create new SBOL entities. These entities can then be defined via their different properties. The following example creates an RBS part, which is represented as a Component in SBOL. \n```java\n//Create the RBS component\nComponent rbs = doc.createComponent(\"B0034\", Arrays.asList(ComponentType.DNA.getUrl())); \nrbs.setName(\"B0034\");\nrbs.setDescription(\"RBS (Elowitz 1999)\");\nrbs.setRoles(Arrays.asList(Role.RBS));\n\t\t\n//Create a sequence entity for the RBS component\nSequence rbs_seq=doc.createSequence(\"B0034_Sequence\");\nrbs_seq.setElements(\"aaagaggagaaa\");\nrbs_seq.setEncoding(Encoding.NucleicAcid);\nrbs.setSequences(Arrays.asList(rbs_seq.getUri()));\t\n```\nThe libSBOLj3 library, which provide both high level and low level APIs to construct sequences and to annotate sequence features. The above code can also be written as below using the high level API.\n```java\nComponent rbs=SBOLAPI.createDnaComponent(doc, \"B0034\", \"rbs\", \"RBS (Elowitz 1999)\", Role.RBS, \"aaagaggagaaa\");\t\n```\n"
      },
      "source": "https://raw.githubusercontent.com/SynBioDex/libSBOLj3/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Sequence construction",
        "parent_header": [
          "libSBOLj3 - A Java library for the Synthetic Biology Open Language 3",
          "Getting Started"
        ],
        "type": "Text_excerpt",
        "value": " For example, a composite device can be constructed from simpler building blocks (e.g. rbs or cds) and sequence features (scar sequences). \n Let's first define our composite device component that we want to create from simpler building blocks.\n```java\nComponent device= SBOLAPI.createDnaComponent(doc, \"i13504\", \"i13504\", \"Screening plasmid intermediate\", ComponentType.DNA.getUrl(), null);\t\n```\n\nThe device is then constructed by adding other parts (rbs, cds and termintor components) and sequence features (scar sequences).\n```java\nSBOLAPI.appendComponent(doc, device,rbs,Orientation.inline);\t\nSBOLAPI.appendSequenceFeature(doc, device, \"tactag\", Orientation.inline);\nSBOLAPI.appendComponent(doc, device,gfp, Orientation.inline);\nSBOLAPI.appendSequenceFeature(doc, device, \"tactagag\", Orientation.inline);\nSBOLAPI.appendComponent(doc, device,term, Orientation.inline);\n```\n\nThese subcomponents and fetatures can be iterated using related properties.\n```java\nfor (SubComponent subComp: device.getSubComponents()){\n   System.out.println(subComp.getIsInstanceOf());\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/SynBioDex/libSBOLj3/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Reading and writing SBOL documents",
        "parent_header": [
          "libSBOLj3 - A Java library for the Synthetic Biology Open Language 3",
          "Getting Started"
        ],
        "type": "Text_excerpt",
        "value": " The libSBOLj3 library provides methods to store SBOL documents in memory variables and to read documents from these variables.\n ```java\n //Write using the RDF Turtle format\n String output=SBOLIO.write(doc, \"Turtle\");\n //Read using the RDF Turtle format\n SBOLDocument doc2=SBOLIO.read(output, \"Turtle\"); \n```\n The libSBOLj3 library alsoprovides methods to store SBOL documents in files and to read documents from these files.\n\n```java\n//Write\n SBOLIO.write(doc, new File(\"sbol.ttl\"), \"Turtle\");\n //Read\n SBOLIO.read(doc, new File(\"sbol.ttl\"), \"Turtle\");\n``` \n\nThe following constants can be used to set the RDF serialisation type:\n\n```Turtle```, ```RDF/XML-ABBREV```, ```JSON-LD```, ```RDFJSON```, ```N-TRIPLES```.\n"
      },
      "source": "https://raw.githubusercontent.com/SynBioDex/libSBOLj3/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Looking up for SBOL entities",
        "parent_header": [
          "libSBOLj3 - A Java library for the Synthetic Biology Open Language 3",
          "Getting Started"
        ],
        "type": "Text_excerpt",
        "value": "SBOL utilises URIs to link different entities. An SBOL entity may store a reference to another entity for more details. These additional details can be retrieved using the ```getIdentified``` method which expects the URI of the entity to retrieve, and its type. The followig example shows retrieving nucleotide sequences of the rbs component. The Sequence entity, the URI of which is referenced in the rbs component, is retrieved first. Its elements property is then used to read the nucleotides information.\n```java\nSequence rbsSeq = doc.getIdentified(sequenceURI, Sequence.class);\nString nucleotides = rbsSeq.getElements();\t\n```\n"
      },
      "source": "https://raw.githubusercontent.com/SynBioDex/libSBOLj3/master/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "Looking up (Querying) using graph pattern matching",
        "parent_header": [
          "libSBOLj3 - A Java library for the Synthetic Biology Open Language 3",
          "Getting Started"
        ],
        "type": "Text_excerpt",
        "value": "Multiple SBOL entities that can match to a given pattern can also be searched for. These enties are returned using SPARQL SELECT queries via the ```getIdentifieds``` method. This method expects a partial SPARQL query, which would normally be included between \"```WHERE {```\" and \"```}```\" in SPARQL queries. The rest of the query is constructed by libSBOLj3 using the URI prefixes that are already specified in SBOL documents. It is assumed that the first column of the SPARQL query result includes URIs of SBOL entities of one type only. For example, the following example retrieves all SBOL Component entities with the role:SO:0000141 (promoter) and type SBO:0000251 (DNA).\n```java\nList<Component> components=(List<Component>)doc.getIdentifieds(\"?identified a sbol:Component; sbol:role  SO:0000141; sbol:type SBO:0000251 .\", Component.class);\n   System.out.println(\"Graph query results:\");\n   for (Component component:components){\n    \tSystem.out.println(\"  \" +  component.getDisplayId());\n   }\n```\n\nThe libSBOLj3 library creates the following SPARQL query to get the results using the code above.\n```\nPREFIX CHEBI: <https://identifiers.org/CHEBI:>\nPREFIX GO: <https://identifiers.org/GO:>\nPREFIX sbol: <http://sbols.org/v3#>\nPREFIX EDAM: <https://identifiers.org/edam:>\nPREFIX SO: <https://identifiers.org/SO:>\nPREFIX prov: <http://www.w3.org/ns/prov#>\nPREFIX om: <http://www.ontology-of-units-of-measure.org/resource/om-2/>\nSELECT ?identified\nWHERE {\n   ?identified a sbol:Component; \n            sbol:role  SO:0000141; \n            sbol:type SBO:0000251 .\n}\n```\n"
      },
      "source": "https://raw.githubusercontent.com/SynBioDex/libSBOLj3/master/README.md",
      "technique": "header_analysis"
    }
  ]
}