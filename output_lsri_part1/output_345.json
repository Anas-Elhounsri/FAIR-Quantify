{
  "citation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "Reference",
        "parent_header": [
          "SMiPoly"
        ],
        "type": "Text_excerpt",
        "value": "https://future-chem.com/rdkit-chemical-rxn/  \nhttps://www.daylight.com/dayhtml_tutorials/languages/smarts/smarts_examples.html  \nhttps://www.daylight.com/dayhtml/doc/theory/theory.smarts.html  \n"
      },
      "source": "https://raw.githubusercontent.com/PEJpOhno/SMiPoly/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "code_repository": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/PEJpOhno/SMiPoly"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_created": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2022-09-14T12:04:08Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "date_updated": [
    {
      "confidence": 1,
      "result": {
        "type": "Date",
        "value": "2024-07-29T23:35:10Z"
      },
      "technique": "GitHub_API"
    }
  ],
  "description": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "rule-based virtual polymer library generator"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 0.9978395010607195,
      "result": {
        "original_header": "1. What is SMiPoly?",
        "type": "Text_excerpt",
        "value": "\"SMiPoly (**S**mall **M**olecules **i**nto **Poly**mers)\" is rule-based virtual library generator for discovery of functional polymers. It is consist of two submodules, \"monc.py\" and \"polg.py\".  \n\"monc.py\" is a monomer classifier from a list of small molecules, and \"polg.py\" is a polymer repeating unit generator from the classified monomer list.  \n \n"
      },
      "source": "https://raw.githubusercontent.com/PEJpOhno/SMiPoly/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.955576827742561,
      "result": {
        "original_header": "4-1. monc.py",
        "type": "Text_excerpt",
        "value": "The functions of monc.py is as follows.  \n  - extract monomers from a list of small molecules.\n  - classify extracted monomers into each monomer class. \nThe chemical structure of the small molecule compounds should be expressed in simplified molecular input line entry system (SMILES) and given as pandas DataFrame.   \n  - df: name of the object DataFrame  \n  - smicoln: The column label of the SMILES column, given as a *str*.  \n  - minFG: minimum number of the polymerizable functional groups in the monomer for successive polymerization (default for moncls, 2: 2 or more; for olecls, 1: 1 or more)  \n  - maxFG: maxmum nimber of the polymerizable functional groups in the monomer for successive polymerization (default 4: 4 or less)  \n  - dsp_rsl: display classified result (default False)   \n**Defined monomer class**  \nBy the function \"moncls\"  \n  - vinylidene  \n  - cyclic olefin  \n  - epoxide and diepoxide  \n  - lactone  \n  - lactam  \n  - hydroxy carboxylic acid  \n  - amino acid  \n  - cyclic carboxylic acid anhydride and bis(cyclic carboxylic acid anhydride)  \n  - hindered phenol  \n  - dicarboxylic acid and acid halide  \n  - diol  \n  - diamine and primary diamine  \n  - diisocyanate  \n  - bis(halo aryl)sulfone  \n  - bis(fluoro aryl)ketone   \n"
      },
      "source": "https://raw.githubusercontent.com/PEJpOhno/SMiPoly/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8964416480539762,
      "result": {
        "original_header": "4-2. polg.py",
        "type": "Text_excerpt",
        "value": "\"polg.py\" gives all synthesizable polymer repeating units starting from the classified monomer list generated by \"monc.py\".  \nFor chain polymerization (polyolefins and some polyether), it gives homo and binary-copolymers. For successive (or step) polymerization,  it gives homopolymer only. \n  - df: name of the DataFrame of classified monomers generated by *monm.moncls*.  \n  - targ: targetted polymer class. When present, it can be a list of *str*. The selectable elements are 'polyolefin', 'polyester', 'polyether', 'polyamide', 'polyimide', 'polyurethane', 'polyoxazolidone' and 'all' (default = ['all'])  \n  - Pmod: generate all isomers of the polymer repeating unit ('a') or the polymer repeating unit of its representation ('r'). (default = 'a')  \n  - dsp_rsl: display the DataFrame of the generated polymers. (default False)   \n**Defined polymer class**  \n  - polyolefin, polycyclic olefin and their binary copolymers  \n  - polyester (from lactone, hydroxy carboxylic acid, dicarboxylic acid + diol, diol + CO and cyclic carboxylic acid anhydride + epoxide)  \n  - polyether (from epoxide, hindered phenol, bis(halo aryl)sulfone + diol and bis(fluoro aryl)ketone + diol)  \n  - polyamide (from lactam, amino acid and dicarboxylic acid + diamine)  \n  - polyimide (bis(cyclic carboxylic acid anhydride + primary diamine)  \n  - polyurethane (diisocyanate + diol)  \n  - polyoxazolidone (diepoxide + diisocyanate)  \n \n"
      },
      "source": "https://raw.githubusercontent.com/PEJpOhno/SMiPoly/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.8856506729344676,
      "result": {
        "original_header": "4-3 Sample data",
        "type": "Text_excerpt",
        "value": "The sample dataset './sample_data/202207_smip_monset.csv' includes common 1,083 monomers collected from published documents such as scientific articles, catalogues and so on.\n \n"
      },
      "source": "https://raw.githubusercontent.com/PEJpOhno/SMiPoly/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9943177932274442,
      "result": {
        "original_header": "4-4. Utilities",
        "type": "Text_excerpt",
        "value": "  - 1_MonomerDefiner.ipynb: definitions of monomers  \n  - 2_Ps_rxnL.ipynb: rules of polymerization reactions    \n  - 3_Ps_GenL.ipynb: definitions of polymer classes with combinations of starting monomer(s) and polymerization reaction  \n \n"
      },
      "source": "https://raw.githubusercontent.com/PEJpOhno/SMiPoly/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.855629689108674,
      "result": {
        "original_header": "6. Publications",
        "type": "Text_excerpt",
        "value": "SMiPoly: Generation of a Synthesizable Polymer Virtual Library Using Rule-Based Polymerization Reactions  \nMitsuru Ohno, Yoshihiro Hayashi, Qi Zhang, Yu Kaneko, and Ryo Yoshida  \n*Journal of Chemical Information and Modeling* **2023** *63* (17), 5539-5548  \nDOI: 10.1021/acs.jcim.3c00329  \nhttps://doi.org/10.1021/acs.jcim.3c00329  \n(version 0.0.1 was used)    \n \n"
      },
      "source": "https://raw.githubusercontent.com/PEJpOhno/SMiPoly/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "download_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://github.com/PEJpOhno/SMiPoly/releases"
      },
      "technique": "GitHub_API"
    }
  ],
  "executable_example": [
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/PEJpOhno/SMiPoly/main/sample_script/sample_smip_demo2.ipynb"
      },
      "source": "https://raw.githubusercontent.com/PEJpOhno/SMiPoly/main/sample_script/sample_smip_demo2.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/PEJpOhno/SMiPoly/main/utilities/2_Ps_rxnL.ipynb"
      },
      "source": "https://raw.githubusercontent.com/PEJpOhno/SMiPoly/main/utilities/2_Ps_rxnL.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/PEJpOhno/SMiPoly/main/utilities/1_MonomerDefiner.ipynb"
      },
      "source": "https://raw.githubusercontent.com/PEJpOhno/SMiPoly/main/utilities/1_MonomerDefiner.ipynb",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "format": "jupyter_notebook",
        "type": "Url",
        "value": "https://raw.githubusercontent.com/PEJpOhno/SMiPoly/main/utilities/3_Ps_GenL.ipynb"
      },
      "source": "https://raw.githubusercontent.com/PEJpOhno/SMiPoly/main/utilities/3_Ps_GenL.ipynb",
      "technique": "file_exploration"
    }
  ],
  "forks_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 5
      },
      "technique": "GitHub_API"
    }
  ],
  "forks_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/PEJpOhno/SMiPoly/forks"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "PEJpOhno/SMiPoly"
      },
      "technique": "GitHub_API"
    }
  ],
  "full_title": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SMiPoly"
      },
      "source": "https://raw.githubusercontent.com/PEJpOhno/SMiPoly/main/README.md",
      "technique": "regular_expression"
    }
  ],
  "installation": [
    {
      "confidence": 1,
      "result": {
        "original_header": "3-1. Installatin",
        "parent_header": [
          "SMiPoly",
          "3. Installation and usage"
        ],
        "type": "Text_excerpt",
        "value": "SMiPoly can be installed with pip or conda. "
      },
      "source": "https://raw.githubusercontent.com/PEJpOhno/SMiPoly/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3-1-1. Install with pip",
        "parent_header": [
          "SMiPoly",
          "3. Installation and usage"
        ],
        "type": "Text_excerpt",
        "value": "Create new virtual environment and activate it.\nTo install this package, run as follows.\n\n```sh\n$pip install smipoly\n```"
      },
      "source": "https://raw.githubusercontent.com/PEJpOhno/SMiPoly/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3-1-2. Install with conda",
        "parent_header": [
          "SMiPoly",
          "3. Installation and usage"
        ],
        "type": "Text_excerpt",
        "value": "Add the channel \"conda-forge\" if it have not been enable.  \n\n```sh\n$conda config --add channels conda-forge\n```\n\nCreate a new environment. \n```sh\n$conda create -n \"YOUR_NEW_ENVIRONMNT_NAME\" python  \nor \n$conda create -n \"YOUR_NEW_ENVIRONMNT_NAME\" python=\"required version (ex. 3.10)\"\n```\nThen activate it. \n```sh\n$conda activate \"YOUR_NEW_ENVIRONMNT_NAME\"\n```\nAnd install SMiPoly. \n```sh\n$conda install smipoly\n```\n\nOr after create and activate a new environment, \n```sh\n$conda install -c conda-forge smipoly\n```\n"
      },
      "source": "https://raw.githubusercontent.com/PEJpOhno/SMiPoly/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 0.8644360926782757,
      "result": {
        "original_header": "4-2. polg.py",
        "type": "Text_excerpt",
        "value": "\"polg.py\" gives all synthesizable polymer repeating units starting from the classified monomer list generated by \"monc.py\".  \nFor chain polymerization (polyolefins and some polyether), it gives homo and binary-copolymers. For successive (or step) polymerization,  it gives homopolymer only. \n"
      },
      "source": "https://raw.githubusercontent.com/PEJpOhno/SMiPoly/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9849037046231602,
      "result": {
        "original_header": "7. Related projects",
        "type": "Text_excerpt",
        "value": "RadonPy (Fully automated calculation for a comprehensive set of polymer properties)  \nhttps://github.com/RadonPy/RadonPy  \n \n"
      },
      "source": "https://raw.githubusercontent.com/PEJpOhno/SMiPoly/main/README.md",
      "technique": "supervised_classification"
    },
    {
      "confidence": 0.9999999931449111,
      "result": {
        "original_header": "8. Directry configuration",
        "type": "Text_excerpt",
        "value": "```sh\nSMiPoly\n\u251c\u2500\u2500 src\n\u2502   \u2514\u2500\u2500 smipoly\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 _version.py\n\u2502       \u251c\u2500\u2500 smip\n\u2502       \u2502   \u251c\u2500\u2500 __init__.py\n\u2502       \u2502   \u251c\u2500\u2500 funclib.py\n\u2502       \u2502   \u251c\u2500\u2500 monc.py\n\u2502       \u2502   \u2514\u2500\u2500 polg.py\n\u2502       \u2514\u2500\u2500 rules\n\u2502           \u251c\u2500\u2500 excl_lst.json\n\u2502           \u251c\u2500\u2500 mon_dic_inv.json\n\u2502           \u251c\u2500\u2500 mon_dic.json\n\u2502           \u251c\u2500\u2500 mon_lst.json\n\u2502           \u251c\u2500\u2500 mon_vals.json\n\u2502           \u251c\u2500\u2500 ps_class.json\n\u2502           \u251c\u2500\u2500 ps_gen.pkl\n\u2502           \u2514\u2500\u2500 ps.rxn.pkl\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 setup.cfg\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 sample_data\n\u2502   \u2514\u2500\u2500 202207_smip_monset.csv\n\u251c\u2500\u2500 sample_script\n\u2502   \u2514\u2500\u2500 sample_smip_demo.ipynb\n\u2514\u2500\u2500 utilities\n    \u251c\u2500\u2500 1_MonomerDefiner.ipynb\n    \u251c\u2500\u2500 2_Ps_rxnL.ipynb\n    \u251c\u2500\u2500 3_Ps_GenL.ipynb\n    \u2514\u2500\u2500 rules/\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/PEJpOhno/SMiPoly/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "invocation": [
    {
      "confidence": 0.9367546994832442,
      "result": {
        "original_header": "8. Directry configuration",
        "type": "Text_excerpt",
        "value": "```sh\nSMiPoly\n\u251c\u2500\u2500 src\n\u2502   \u2514\u2500\u2500 smipoly\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 _version.py\n\u2502       \u251c\u2500\u2500 smip\n\u2502       \u2502   \u251c\u2500\u2500 __init__.py\n\u2502       \u2502   \u251c\u2500\u2500 funclib.py\n\u2502       \u2502   \u251c\u2500\u2500 monc.py\n\u2502       \u2502   \u2514\u2500\u2500 polg.py\n\u2502       \u2514\u2500\u2500 rules\n\u2502           \u251c\u2500\u2500 excl_lst.json\n\u2502           \u251c\u2500\u2500 mon_dic_inv.json\n\u2502           \u251c\u2500\u2500 mon_dic.json\n\u2502           \u251c\u2500\u2500 mon_lst.json\n\u2502           \u251c\u2500\u2500 mon_vals.json\n\u2502           \u251c\u2500\u2500 ps_class.json\n\u2502           \u251c\u2500\u2500 ps_gen.pkl\n\u2502           \u2514\u2500\u2500 ps.rxn.pkl\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 setup.cfg\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 sample_data\n\u2502   \u2514\u2500\u2500 202207_smip_monset.csv\n\u251c\u2500\u2500 sample_script\n\u2502   \u2514\u2500\u2500 sample_smip_demo.ipynb\n\u2514\u2500\u2500 utilities\n    \u251c\u2500\u2500 1_MonomerDefiner.ipynb\n    \u251c\u2500\u2500 2_Ps_rxnL.ipynb\n    \u251c\u2500\u2500 3_Ps_GenL.ipynb\n    \u2514\u2500\u2500 rules/\n```\n \n"
      },
      "source": "https://raw.githubusercontent.com/PEJpOhno/SMiPoly/main/README.md",
      "technique": "supervised_classification"
    }
  ],
  "issue_tracker": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://api.github.com/repos/PEJpOhno/SMiPoly/issues"
      },
      "technique": "GitHub_API"
    }
  ],
  "keywords": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "library, polymer, synthesis"
      },
      "technique": "GitHub_API"
    }
  ],
  "license": [
    {
      "confidence": 1,
      "result": {
        "name": "BSD 3-Clause \"New\" or \"Revised\" License",
        "spdx_id": "BSD-3-Clause",
        "type": "License",
        "url": "https://api.github.com/licenses/bsd-3-clause",
        "value": "https://api.github.com/licenses/bsd-3-clause"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "type": "File_dump",
        "value": "BSD 3-Clause License\n\nCopyright (c) 2022, PEJpOhn\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
      },
      "source": "https://raw.githubusercontent.com/PEJpOhno/SMiPoly/main/LICENSE",
      "technique": "file_exploration"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "5. Copyright and license",
        "parent_header": [
          "SMiPoly"
        ],
        "type": "Text_excerpt",
        "value": "Copyright (c) 2022 Mitsuru Ohno  \nReleased under the BSD-3 license, license that can be found in the LICENSE file.  \n\n"
      },
      "source": "https://raw.githubusercontent.com/PEJpOhno/SMiPoly/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "name": [
    {
      "confidence": 1,
      "result": {
        "type": "String",
        "value": "SMiPoly"
      },
      "technique": "GitHub_API"
    }
  ],
  "owner": [
    {
      "confidence": 1,
      "result": {
        "type": "User",
        "value": "PEJpOhno"
      },
      "technique": "GitHub_API"
    }
  ],
  "programming_languages": [
    {
      "confidence": 1,
      "result": {
        "name": "Jupyter Notebook",
        "size": 54605,
        "type": "Programming_language",
        "value": "Jupyter Notebook"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "name": "Python",
        "size": 22184,
        "type": "Programming_language",
        "value": "Python"
      },
      "technique": "GitHub_API"
    }
  ],
  "readme_url": [
    {
      "confidence": 1,
      "result": {
        "type": "Url",
        "value": "https://raw.githubusercontent.com/PEJpOhno/SMiPoly/main/README.md"
      },
      "technique": "file_exploration"
    }
  ],
  "releases": [
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "PEJpOhno",
          "type": "User"
        },
        "date_created": "2024-05-06T01:40:21Z",
        "date_published": "2024-05-06T02:00:50Z",
        "description": "- Fixed counting function for some functional groups.  \r\n- Implemented detailed olefin classification function, though primitive version.  ",
        "html_url": "https://github.com/PEJpOhno/SMiPoly/releases/tag/v0.1.0",
        "name": "SMiPoly v0.1.0",
        "release_id": 154332360,
        "tag": "v0.1.0",
        "tarball_url": "https://api.github.com/repos/PEJpOhno/SMiPoly/tarball/v0.1.0",
        "type": "Release",
        "url": "https://api.github.com/repos/PEJpOhno/SMiPoly/releases/154332360",
        "value": "https://api.github.com/repos/PEJpOhno/SMiPoly/releases/154332360",
        "zipball_url": "https://api.github.com/repos/PEJpOhno/SMiPoly/zipball/v0.1.0"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "PEJpOhno",
          "type": "User"
        },
        "date_created": "2023-09-16T02:40:20Z",
        "date_published": "2023-09-16T02:48:13Z",
        "description": "revised the code to reduce memory consumption",
        "html_url": "https://github.com/PEJpOhno/SMiPoly/releases/tag/v0.0.3",
        "name": "SMiPoly v0.0.3",
        "release_id": 121391023,
        "tag": "v0.0.3",
        "tarball_url": "https://api.github.com/repos/PEJpOhno/SMiPoly/tarball/v0.0.3",
        "type": "Release",
        "url": "https://api.github.com/repos/PEJpOhno/SMiPoly/releases/121391023",
        "value": "https://api.github.com/repos/PEJpOhno/SMiPoly/releases/121391023",
        "zipball_url": "https://api.github.com/repos/PEJpOhno/SMiPoly/zipball/v0.0.3"
      },
      "technique": "GitHub_API"
    },
    {
      "confidence": 1,
      "result": {
        "author": {
          "name": "PEJpOhno",
          "type": "User"
        },
        "date_created": "2023-02-25T13:16:01Z",
        "date_published": "2023-03-02T08:09:59Z",
        "description": "the first release",
        "html_url": "https://github.com/PEJpOhno/SMiPoly/releases/tag/v0.0.1",
        "name": "SMiPoly v0.0.1",
        "release_id": 94191914,
        "tag": "v0.0.1",
        "tarball_url": "https://api.github.com/repos/PEJpOhno/SMiPoly/tarball/v0.0.1",
        "type": "Release",
        "url": "https://api.github.com/repos/PEJpOhno/SMiPoly/releases/94191914",
        "value": "https://api.github.com/repos/PEJpOhno/SMiPoly/releases/94191914",
        "zipball_url": "https://api.github.com/repos/PEJpOhno/SMiPoly/zipball/v0.0.1"
      },
      "technique": "GitHub_API"
    }
  ],
  "requirements": [
    {
      "confidence": 1,
      "result": {
        "original_header": "2. Current version and requirements",
        "parent_header": [
          "SMiPoly"
        ],
        "type": "Text_excerpt",
        "value": "current version = 0.1.0  \nrequirements\n  - pyhon 3.7, 3.8, 3.9, 3.10, 3.11, 3.12  \n  - rdkit >= 2020.09.1.0 #(2019.09.3 is unavailable)  \n  - numpy >= 1.20.2  \n  - pandas >= 1.2.4  \n"
      },
      "source": "https://raw.githubusercontent.com/PEJpOhno/SMiPoly/main/README.md",
      "technique": "header_analysis"
    }
  ],
  "somef_missing_categories": [
    "acknowledgement",
    "run",
    "download",
    "contact",
    "contributors",
    "documentation",
    "faq",
    "support",
    "identifier",
    "has_build_file"
  ],
  "somef_provenance": {
    "date": "2024-10-04 00:22:51",
    "somef_schema_version": "1.0.0",
    "somef_version": "0.9.5"
  },
  "stargazers_count": [
    {
      "confidence": 1,
      "result": {
        "type": "Number",
        "value": 22
      },
      "technique": "GitHub_API"
    }
  ],
  "usage": [
    {
      "confidence": 1,
      "result": {
        "original_header": "3-1. Installatin",
        "parent_header": [
          "SMiPoly",
          "3. Installation and usage"
        ],
        "type": "Text_excerpt",
        "value": "SMiPoly can be installed with pip or conda. "
      },
      "source": "https://raw.githubusercontent.com/PEJpOhno/SMiPoly/main/README.md",
      "technique": "header_analysis"
    },
    {
      "confidence": 1,
      "result": {
        "original_header": "3-2. Quick start",
        "parent_header": [
          "SMiPoly",
          "3. Installation and usage"
        ],
        "type": "Text_excerpt",
        "value": "Download 'sample_data/202207_smip_monset.csv' and 'sample_script/sample_smip_demo.ipynb' from [SMiPoly repository](https://github.com/PEJpOhno/SMiPoly) to the same directry on your computer.\nThen run sample_smip_demo.ipynb. To run this demo script, Jupyter Notebook is required.\n"
      },
      "source": "https://raw.githubusercontent.com/PEJpOhno/SMiPoly/main/README.md",
      "technique": "header_analysis"
    }
  ]
}